CCS PCH C Compiler, Version 4.104, 5967               23-feb.-16 16:35

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Con Precamara\Autoclave 160L\Autoclave SENA\Firmware V2_Sin Probar\GLCD_Controller\GLCD_Controller - copia.lst

               ROM used: 25682 bytes (78%)
                         Largest free fragment is 7086
               RAM used: 1324 (65%) at main() level
                         1374 (67%) worst case
               Stack:    5 locations

*
0000:  GOTO   2588
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=4000000) 
*
131E:  MOVLW  05
1320:  MOVWF  FEA
1322:  MOVLW  29
1324:  MOVWF  FE9
1326:  MOVF   FEF,W
1328:  BZ    1346
132A:  MOVLW  01
132C:  MOVWF  01
132E:  CLRF   00
1330:  DECFSZ 00,F
1332:  BRA    1330
1334:  DECFSZ 01,F
1336:  BRA    132E
1338:  MOVLW  4A
133A:  MOVWF  00
133C:  DECFSZ 00,F
133E:  BRA    133C
1340:  BRA    1342
1342:  DECFSZ FEF,F
1344:  BRA    132A
1346:  RETLW  00
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D4   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D3   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_D2   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
0D06:  BCF    F95.2
0D08:  BSF    F8C.2
....................    output_low(GLCD_E); 
0D0A:  BCF    F95.7
0D0C:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
0D0E:  BCF    F95.4
0D10:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
0D12:  BCF    F95.3
0D14:  BCF    F8C.3
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
0D16:  BCF    F95.5
0D18:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
0D1A:  MOVLB  5
0D1C:  CLRF   x3E
0D1E:  MOVLW  C0
0D20:  MOVWF  x3F
0D22:  MOVLB  0
0D24:  RCALL  0BB2
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
0D26:  MOVLW  01
0D28:  MOVLB  5
0D2A:  MOVWF  x3E
0D2C:  MOVLW  C0
0D2E:  MOVWF  x3F
0D30:  MOVLB  0
0D32:  RCALL  0BB2
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
0D34:  MOVLB  5
0D36:  CLRF   x3E
0D38:  MOVLW  40
0D3A:  MOVWF  x3F
0D3C:  MOVLB  0
0D3E:  RCALL  0BB2
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
0D40:  MOVLW  01
0D42:  MOVLB  5
0D44:  MOVWF  x3E
0D46:  MOVLW  40
0D48:  MOVWF  x3F
0D4A:  MOVLB  0
0D4C:  RCALL  0BB2
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
0D4E:  MOVLB  5
0D50:  CLRF   x3E
0D52:  MOVLW  B8
0D54:  MOVWF  x3F
0D56:  MOVLB  0
0D58:  RCALL  0BB2
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
0D5A:  MOVLW  01
0D5C:  MOVLB  5
0D5E:  MOVWF  x3E
0D60:  MOVLW  B8
0D62:  MOVWF  x3F
0D64:  MOVLB  0
0D66:  RCALL  0BB2
....................  
....................    if(mode == ON) 
0D68:  MOVLB  5
0D6A:  DECFSZ x28,W
0D6C:  BRA    0D8A
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
0D6E:  CLRF   x3E
0D70:  MOVLW  3F
0D72:  MOVWF  x3F
0D74:  MOVLB  0
0D76:  RCALL  0BB2
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
0D78:  MOVLW  01
0D7A:  MOVLB  5
0D7C:  MOVWF  x3E
0D7E:  MOVLW  3F
0D80:  MOVWF  x3F
0D82:  MOVLB  0
0D84:  RCALL  0BB2
....................    } 
....................    else 
0D86:  BRA    0DA2
0D88:  MOVLB  5
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
0D8A:  CLRF   x3E
0D8C:  MOVLW  3E
0D8E:  MOVWF  x3F
0D90:  MOVLB  0
0D92:  RCALL  0BB2
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
0D94:  MOVLW  01
0D96:  MOVLB  5
0D98:  MOVWF  x3E
0D9A:  MOVLW  3E
0D9C:  MOVWF  x3F
0D9E:  MOVLB  0
0DA0:  RCALL  0BB2
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
0DA2:  MOVLB  5
0DA4:  CLRF   x29
0DA6:  MOVLB  0
0DA8:  RCALL  0BF4
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
0DAA:  RCALL  0C4E
....................    #endif 
.................... } 
0DAC:  GOTO   27A0 (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
0C4E:  MOVLB  5
0C50:  CLRF   x3A
0C52:  MOVLW  0A
0C54:  MOVWF  x39
....................    p2 = displayData.right; 
0C56:  MOVLW  02
0C58:  MOVWF  x3C
0C5A:  MOVLW  0A
0C5C:  MOVWF  x3B
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
0C5E:  CLRF   x37
0C60:  MOVF   x37,W
0C62:  SUBLW  07
0C64:  BNC   0D02
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
0C66:  BCF    F95.5
0C68:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
0C6A:  CLRF   x3E
0C6C:  MOVLW  40
0C6E:  MOVWF  x3F
0C70:  MOVLB  0
0C72:  RCALL  0BB2
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
0C74:  MOVLW  01
0C76:  MOVLB  5
0C78:  MOVWF  x3E
0C7A:  MOVLW  40
0C7C:  MOVWF  x3F
0C7E:  MOVLB  0
0C80:  RCALL  0BB2
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
0C82:  MOVLB  5
0C84:  MOVF   x37,W
0C86:  IORLW  B8
0C88:  MOVWF  x3D
0C8A:  CLRF   x3E
0C8C:  MOVWF  x3F
0C8E:  MOVLB  0
0C90:  RCALL  0BB2
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
0C92:  MOVLB  5
0C94:  MOVF   x37,W
0C96:  IORLW  B8
0C98:  MOVWF  x3D
0C9A:  MOVLW  01
0C9C:  MOVWF  x3E
0C9E:  MOVFF  53D,53F
0CA2:  MOVLB  0
0CA4:  RCALL  0BB2
....................       output_high(GLCD_DI);                     // Set for data 
0CA6:  BCF    F95.5
0CA8:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
0CAA:  MOVLB  5
0CAC:  CLRF   x38
0CAE:  MOVF   x38,W
0CB0:  SUBLW  3F
0CB2:  BNC   0CFE
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
0CB4:  MOVFF  53A,03
0CB8:  MOVF   x39,W
0CBA:  INCF   x39,F
0CBC:  BTFSC  FD8.2
0CBE:  INCF   x3A,F
0CC0:  MOVWF  FE9
0CC2:  MOVFF  03,FEA
0CC6:  MOVFF  FEF,53D
0CCA:  CLRF   x3E
0CCC:  MOVFF  53D,53F
0CD0:  MOVLB  0
0CD2:  RCALL  0BB2
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
0CD4:  MOVLB  5
0CD6:  MOVFF  53C,03
0CDA:  MOVF   x3B,W
0CDC:  INCF   x3B,F
0CDE:  BTFSC  FD8.2
0CE0:  INCF   x3C,F
0CE2:  MOVWF  FE9
0CE4:  MOVFF  03,FEA
0CE8:  MOVFF  FEF,53D
0CEC:  MOVLW  01
0CEE:  MOVWF  x3E
0CF0:  MOVFF  53D,53F
0CF4:  MOVLB  0
0CF6:  RCALL  0BB2
....................       } 
0CF8:  MOVLB  5
0CFA:  INCF   x38,F
0CFC:  BRA    0CAE
....................    } 
0CFE:  INCF   x37,F
0D00:  BRA    0C60
.................... } 
0D02:  MOVLB  0
0D04:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
*
0DB0:  MOVLB  5
0DB2:  CLRF   x5B
0DB4:  RRCF   x56,W
0DB6:  MOVWF  x5A
0DB8:  RRCF   x5A,F
0DBA:  RRCF   x5A,F
0DBC:  MOVLW  1F
0DBE:  ANDWF  x5A,F
....................    temp *= 64; 
0DC0:  RLCF   x5A,F
0DC2:  RLCF   x5B,F
0DC4:  RLCF   x5A,F
0DC6:  RLCF   x5B,F
0DC8:  RLCF   x5A,F
0DCA:  RLCF   x5B,F
0DCC:  RLCF   x5A,F
0DCE:  RLCF   x5B,F
0DD0:  RLCF   x5A,F
0DD2:  RLCF   x5B,F
0DD4:  RLCF   x5A,F
0DD6:  RLCF   x5B,F
0DD8:  MOVLW  C0
0DDA:  ANDWF  x5A,F
....................    temp += x; 
0DDC:  MOVF   x55,W
0DDE:  ADDWF  x5A,F
0DE0:  MOVLW  00
0DE2:  ADDWFC x5B,F
....................  
....................    if(x > 63) 
0DE4:  MOVF   x55,W
0DE6:  SUBLW  3F
0DE8:  BC    0E04
....................    { 
....................       p = displayData.right + temp - 64; 
0DEA:  MOVLW  0A
0DEC:  ADDWF  x5A,W
0DEE:  MOVWF  x5C
0DF0:  MOVLW  02
0DF2:  ADDWFC x5B,W
0DF4:  MOVWF  x5D
0DF6:  MOVLW  40
0DF8:  SUBWF  x5C,W
0DFA:  MOVWF  x58
0DFC:  MOVLW  00
0DFE:  SUBWFB x5D,W
0E00:  MOVWF  x59
....................    } 
....................    else 
0E02:  BRA    0E10
....................    { 
....................       p = displayData.left + temp; 
0E04:  MOVLW  0A
0E06:  ADDWF  x5A,W
0E08:  MOVWF  x58
0E0A:  MOVLW  00
0E0C:  ADDWFC x5B,W
0E0E:  MOVWF  x59
....................    } 
....................  
....................    if(color) 
0E10:  MOVF   x57,F
0E12:  BZ    0E3E
....................    { 
....................       bit_set(*p, y%8); 
0E14:  MOVFF  559,03
0E18:  MOVFF  558,FE9
0E1C:  MOVFF  559,FEA
0E20:  MOVF   x56,W
0E22:  ANDLW  07
0E24:  MOVWF  x5C
0E26:  MOVLW  01
0E28:  MOVWF  00
0E2A:  MOVF   x5C,W
0E2C:  MOVWF  01
0E2E:  BZ    0E38
0E30:  BCF    FD8.0
0E32:  RLCF   00,F
0E34:  DECFSZ 01,F
0E36:  BRA    0E30
0E38:  MOVF   00,W
0E3A:  IORWF  FEF,F
....................    } 
....................    else 
0E3C:  BRA    0E68
....................    { 
....................       bit_clear(*p, y%8); 
0E3E:  MOVFF  559,03
0E42:  MOVFF  558,FE9
0E46:  MOVFF  559,FEA
0E4A:  MOVF   x56,W
0E4C:  ANDLW  07
0E4E:  MOVWF  x5C
0E50:  MOVLW  01
0E52:  MOVWF  00
0E54:  MOVF   x5C,W
0E56:  MOVWF  01
0E58:  BZ    0E62
0E5A:  BCF    FD8.0
0E5C:  RLCF   00,F
0E5E:  DECFSZ 01,F
0E60:  BRA    0E5A
0E62:  MOVF   00,W
0E64:  XORLW  FF
0E66:  ANDWF  FEF,F
....................    } 
.................... } 
0E68:  MOVLB  0
0E6A:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
0BF4:  MOVLB  5
0BF6:  CLRF   x2C
0BF8:  MOVLW  0A
0BFA:  MOVWF  x2B
....................    p2 = displayData.right; 
0BFC:  MOVLW  02
0BFE:  MOVWF  x2E
0C00:  MOVLW  0A
0C02:  MOVWF  x2D
....................    data = 0xFF * color; 
0C04:  MOVF   x29,W
0C06:  MULLW  FF
0C08:  MOVFF  FF3,52A
....................  
....................    for(i=0; i<512; ++i) 
0C0C:  CLRF   x30
0C0E:  CLRF   x2F
0C10:  MOVF   x30,W
0C12:  SUBLW  01
0C14:  BNC   0C4A
....................    { 
....................       *p1++ = data; 
0C16:  MOVFF  52C,03
0C1A:  MOVF   x2B,W
0C1C:  INCF   x2B,F
0C1E:  BTFSC  FD8.2
0C20:  INCF   x2C,F
0C22:  MOVWF  FE9
0C24:  MOVFF  03,FEA
0C28:  MOVFF  52A,FEF
....................       *p2++ = data; 
0C2C:  MOVFF  52E,03
0C30:  MOVF   x2D,W
0C32:  INCF   x2D,F
0C34:  BTFSC  FD8.2
0C36:  INCF   x2E,F
0C38:  MOVWF  FE9
0C3A:  MOVFF  03,FEA
0C3E:  MOVFF  52A,FEF
....................    } 
0C42:  INCF   x2F,F
0C44:  BTFSC  FD8.2
0C46:  INCF   x30,F
0C48:  BRA    0C10
.................... } 
0C4A:  MOVLB  0
0C4C:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
0BB2:  MOVLB  5
0BB4:  MOVF   x3E,F
0BB6:  BZ    0BBE
....................       output_high(GLCD_CS2); 
0BB8:  BCF    F95.3
0BBA:  BSF    F8C.3
....................    else 
0BBC:  BRA    0BC2
....................       output_high(GLCD_CS1); 
0BBE:  BCF    F95.4
0BC0:  BSF    F8C.4
....................  
....................    output_low(GLCD_RW);       // Set for writing 
0BC2:  BCF    F95.6
0BC4:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
0BC6:  CLRF   F93
0BC8:  MOVFF  53F,F8A
....................    delay_cycles(50); 
0BCC:  MOVLW  10
0BCE:  MOVWF  00
0BD0:  DECFSZ 00,F
0BD2:  BRA    0BD0
0BD4:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
0BD6:  BCF    F95.7
0BD8:  BSF    F8C.7
....................    delay_cycles(255); 
0BDA:  MOVLW  54
0BDC:  MOVWF  00
0BDE:  DECFSZ 00,F
0BE0:  BRA    0BDE
0BE2:  BRA    0BE4
....................    output_low(GLCD_E); 
0BE4:  BCF    F95.7
0BE6:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
0BE8:  BCF    F95.4
0BEA:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
0BEC:  BCF    F95.3
0BEE:  BCF    F8C.3
.................... } 
0BF0:  MOVLB  0
0BF2:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(50); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(200); 
....................    data = input_b();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
1024:  MOVLW  01
1026:  MOVLB  5
1028:  MOVWF  x4E
102A:  MOVWF  x4F
102C:  CLRF   x54
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
102E:  MOVF   x45,W
1030:  SUBWF  x47,W
1032:  MOVWF  x55
1034:  MOVF   x55,W
1036:  BTFSS  x55.7
1038:  BRA    1040
103A:  MOVLW  00
103C:  BSF    FD8.0
103E:  SUBFWB x55,W
1040:  CLRF   03
1042:  MOVWF  x4C
1044:  MOVFF  03,54D
....................    dy = abs((signed int8)(y2 - y1)); 
1048:  MOVF   x46,W
104A:  SUBWF  x48,W
104C:  MOVWF  x55
104E:  MOVF   x55,W
1050:  BTFSS  x55.7
1052:  BRA    105A
1054:  MOVLW  00
1056:  BSF    FD8.0
1058:  SUBFWB x55,W
105A:  CLRF   03
105C:  MOVWF  x4A
105E:  MOVFF  03,54B
....................    #endif 
....................  
....................    if(x1 > x2) 
1062:  MOVF   x45,W
1064:  SUBWF  x47,W
1066:  BC    106C
....................       addx = -1; 
1068:  MOVLW  FF
106A:  MOVWF  x4E
....................    if(y1 > y2) 
106C:  MOVF   x46,W
106E:  SUBWF  x48,W
1070:  BC    1076
....................       addy = -1; 
1072:  MOVLW  FF
1074:  MOVWF  x4F
....................  
....................    if(dx >= dy) 
1076:  MOVF   x4B,W
1078:  SUBWF  x4D,W
107A:  BNC   10F2
107C:  BNZ   1084
107E:  MOVF   x4A,W
1080:  SUBWF  x4C,W
1082:  BNC   10F2
....................    { 
....................       dy *= 2; 
1084:  BCF    FD8.0
1086:  RLCF   x4A,F
1088:  RLCF   x4B,F
....................       P = dy - dx; 
108A:  MOVF   x4C,W
108C:  SUBWF  x4A,W
108E:  MOVWF  00
1090:  MOVF   x4D,W
1092:  SUBWFB x4B,W
1094:  MOVFF  00,550
1098:  MOVWF  x51
....................       diff = P - dx; 
109A:  MOVF   x4C,W
109C:  SUBWF  x50,W
109E:  MOVWF  x52
10A0:  MOVF   x4D,W
10A2:  SUBWFB x51,W
10A4:  MOVWF  x53
....................  
....................       for(; i<=dx; ++i) 
10A6:  MOVF   x4D,F
10A8:  BNZ   10B0
10AA:  MOVF   x54,W
10AC:  SUBWF  x4C,W
10AE:  BNC   10F0
....................       { 
....................          glcd_pixel(x1, y1, color); 
10B0:  MOVFF  545,555
10B4:  MOVFF  546,556
10B8:  MOVFF  549,557
10BC:  MOVLB  0
10BE:  RCALL  0DB0
....................  
....................          if(P < 0) 
10C0:  MOVLB  5
10C2:  BTFSC  x51.7
10C4:  BRA    10C8
10C6:  BRA    10D8
....................          { 
....................             P  += dy; 
10C8:  MOVF   x4A,W
10CA:  ADDWF  x50,F
10CC:  MOVF   x4B,W
10CE:  ADDWFC x51,F
....................             x1 += addx; 
10D0:  MOVF   x4E,W
10D2:  ADDWF  x45,W
10D4:  MOVWF  x45
....................          } 
....................          else 
10D6:  BRA    10EC
....................          { 
....................             P  += diff; 
10D8:  MOVF   x52,W
10DA:  ADDWF  x50,F
10DC:  MOVF   x53,W
10DE:  ADDWFC x51,F
....................             x1 += addx; 
10E0:  MOVF   x4E,W
10E2:  ADDWF  x45,W
10E4:  MOVWF  x45
....................             y1 += addy; 
10E6:  MOVF   x4F,W
10E8:  ADDWF  x46,W
10EA:  MOVWF  x46
....................          } 
....................       } 
10EC:  INCF   x54,F
10EE:  BRA    10A6
....................    } 
....................    else 
10F0:  BRA    115E
....................    { 
....................       dx *= 2; 
10F2:  BCF    FD8.0
10F4:  RLCF   x4C,F
10F6:  RLCF   x4D,F
....................       P = dx - dy; 
10F8:  MOVF   x4A,W
10FA:  SUBWF  x4C,W
10FC:  MOVWF  00
10FE:  MOVF   x4B,W
1100:  SUBWFB x4D,W
1102:  MOVFF  00,550
1106:  MOVWF  x51
....................       diff = P - dy; 
1108:  MOVF   x4A,W
110A:  SUBWF  x50,W
110C:  MOVWF  x52
110E:  MOVF   x4B,W
1110:  SUBWFB x51,W
1112:  MOVWF  x53
....................  
....................       for(; i<=dy; ++i) 
1114:  MOVF   x4B,F
1116:  BNZ   111E
1118:  MOVF   x54,W
111A:  SUBWF  x4A,W
111C:  BNC   115E
....................       { 
....................          glcd_pixel(x1, y1, color); 
111E:  MOVFF  545,555
1122:  MOVFF  546,556
1126:  MOVFF  549,557
112A:  MOVLB  0
112C:  RCALL  0DB0
....................  
....................          if(P < 0) 
112E:  MOVLB  5
1130:  BTFSC  x51.7
1132:  BRA    1136
1134:  BRA    1146
....................          { 
....................             P  += dx; 
1136:  MOVF   x4C,W
1138:  ADDWF  x50,F
113A:  MOVF   x4D,W
113C:  ADDWFC x51,F
....................             y1 += addy; 
113E:  MOVF   x4F,W
1140:  ADDWF  x46,W
1142:  MOVWF  x46
....................          } 
....................          else 
1144:  BRA    115A
....................          { 
....................             P  += diff; 
1146:  MOVF   x52,W
1148:  ADDWF  x50,F
114A:  MOVF   x53,W
114C:  ADDWFC x51,F
....................             x1 += addx; 
114E:  MOVF   x4E,W
1150:  ADDWF  x45,W
1152:  MOVWF  x45
....................             y1 += addy; 
1154:  MOVF   x4F,W
1156:  ADDWF  x46,W
1158:  MOVWF  x46
....................          } 
....................       } 
115A:  INCF   x54,F
115C:  BRA    1114
....................    } 
.................... } 
115E:  MOVLB  0
1160:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
1162:  MOVLB  5
1164:  MOVF   x3E,F
1166:  BZ    11C4
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
1168:  MOVF   x3C,W
116A:  SUBWF  x3A,W
116C:  BC    1178
....................       { 
....................          xmin = x1; 
116E:  MOVFF  53A,541
....................          xmax = x2; 
1172:  MOVFF  53C,542
....................       } 
....................       else 
1176:  BRA    1180
....................       { 
....................          xmin = x2; 
1178:  MOVFF  53C,541
....................          xmax = x1; 
117C:  MOVFF  53A,542
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
1180:  MOVF   x3D,W
1182:  SUBWF  x3B,W
1184:  BC    1190
....................       { 
....................          ymin = y1; 
1186:  MOVFF  53B,543
....................          ymax = y2; 
118A:  MOVFF  53D,544
....................       } 
....................       else 
118E:  BRA    1198
....................       { 
....................          ymin = y2; 
1190:  MOVFF  53D,543
....................          ymax = y1; 
1194:  MOVFF  53B,544
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
1198:  MOVF   x41,W
119A:  SUBWF  x42,W
119C:  BNC   11C2
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
119E:  MOVFF  543,540
11A2:  MOVF   x40,W
11A4:  SUBWF  x44,W
11A6:  BNC   11BE
....................          { 
....................             glcd_pixel(xmin, i, color); 
11A8:  MOVFF  541,555
11AC:  MOVFF  540,556
11B0:  MOVFF  53F,557
11B4:  MOVLB  0
11B6:  RCALL  0DB0
....................          } 
11B8:  MOVLB  5
11BA:  INCF   x40,F
11BC:  BRA    11A2
....................       } 
11BE:  INCF   x41,F
11C0:  BRA    1198
....................    } 
....................    else 
11C2:  BRA    1220
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
11C4:  MOVFF  53A,545
11C8:  MOVFF  53B,546
11CC:  MOVFF  53C,547
11D0:  MOVFF  53B,548
11D4:  MOVFF  53F,549
11D8:  MOVLB  0
11DA:  RCALL  1024
....................       glcd_line(x1, y2, x2, y2, color); 
11DC:  MOVFF  53A,545
11E0:  MOVFF  53D,546
11E4:  MOVFF  53C,547
11E8:  MOVFF  53D,548
11EC:  MOVFF  53F,549
11F0:  RCALL  1024
....................       glcd_line(x1, y1, x1, y2, color); 
11F2:  MOVFF  53A,545
11F6:  MOVFF  53B,546
11FA:  MOVFF  53A,547
11FE:  MOVFF  53D,548
1202:  MOVFF  53F,549
1206:  RCALL  1024
....................       glcd_line(x2, y1, x2, y2, color); 
1208:  MOVFF  53C,545
120C:  MOVFF  53B,546
1210:  MOVFF  53C,547
1214:  MOVFF  53D,548
1218:  MOVFF  53F,549
121C:  RCALL  1024
121E:  MOVLB  5
....................    } 
.................... } 
1220:  MOVLB  0
1222:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
1B82:  MOVLB  5
1B84:  CLRF   x2D
....................    b = radius; 
1B86:  MOVFF  52A,52E
....................    P = 1 - radius; 
1B8A:  MOVLW  01
1B8C:  BSF    FD8.0
1B8E:  SUBFWB x2A,W
1B90:  MOVWF  x2F
....................  
....................    do 
....................    { 
....................       if(fill) 
1B92:  MOVF   x2B,F
1B94:  BZ    1C60
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
1B96:  MOVF   x2D,W
1B98:  SUBWF  x28,W
1B9A:  MOVWF  x30
1B9C:  MOVF   x2E,W
1B9E:  ADDWF  x29,W
1BA0:  MOVWF  x31
1BA2:  MOVF   x2D,W
1BA4:  ADDWF  x28,W
1BA6:  MOVWF  x32
1BA8:  MOVF   x2E,W
1BAA:  ADDWF  x29,W
1BAC:  MOVWF  x33
1BAE:  MOVFF  530,545
1BB2:  MOVFF  531,546
1BB6:  MOVFF  532,547
1BBA:  MOVWF  x48
1BBC:  MOVFF  52C,549
1BC0:  MOVLB  0
1BC2:  CALL   1024
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
1BC6:  MOVLB  5
1BC8:  MOVF   x2D,W
1BCA:  SUBWF  x28,W
1BCC:  MOVWF  x30
1BCE:  MOVF   x2E,W
1BD0:  SUBWF  x29,W
1BD2:  MOVWF  x31
1BD4:  MOVF   x2D,W
1BD6:  ADDWF  x28,W
1BD8:  MOVWF  x32
1BDA:  MOVF   x2E,W
1BDC:  SUBWF  x29,W
1BDE:  MOVWF  x33
1BE0:  MOVFF  530,545
1BE4:  MOVFF  531,546
1BE8:  MOVFF  532,547
1BEC:  MOVWF  x48
1BEE:  MOVFF  52C,549
1BF2:  MOVLB  0
1BF4:  CALL   1024
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
1BF8:  MOVLB  5
1BFA:  MOVF   x2E,W
1BFC:  SUBWF  x28,W
1BFE:  MOVWF  x30
1C00:  MOVF   x2D,W
1C02:  ADDWF  x29,W
1C04:  MOVWF  x31
1C06:  MOVF   x2E,W
1C08:  ADDWF  x28,W
1C0A:  MOVWF  x32
1C0C:  MOVF   x2D,W
1C0E:  ADDWF  x29,W
1C10:  MOVWF  x33
1C12:  MOVFF  530,545
1C16:  MOVFF  531,546
1C1A:  MOVFF  532,547
1C1E:  MOVWF  x48
1C20:  MOVFF  52C,549
1C24:  MOVLB  0
1C26:  CALL   1024
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
1C2A:  MOVLB  5
1C2C:  MOVF   x2E,W
1C2E:  SUBWF  x28,W
1C30:  MOVWF  x30
1C32:  MOVF   x2D,W
1C34:  SUBWF  x29,W
1C36:  MOVWF  x31
1C38:  MOVF   x2E,W
1C3A:  ADDWF  x28,W
1C3C:  MOVWF  x32
1C3E:  MOVF   x2D,W
1C40:  SUBWF  x29,W
1C42:  MOVWF  x33
1C44:  MOVFF  530,545
1C48:  MOVFF  531,546
1C4C:  MOVFF  532,547
1C50:  MOVWF  x48
1C52:  MOVFF  52C,549
1C56:  MOVLB  0
1C58:  CALL   1024
....................       } 
....................       else 
1C5C:  BRA    1D4E
1C5E:  MOVLB  5
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
1C60:  MOVF   x28,W
1C62:  ADDWF  x2D,W
1C64:  MOVWF  x30
1C66:  MOVF   x29,W
1C68:  ADDWF  x2E,W
1C6A:  MOVWF  x31
1C6C:  MOVFF  530,555
1C70:  MOVWF  x56
1C72:  MOVFF  52C,557
1C76:  MOVLB  0
1C78:  CALL   0DB0
....................          glcd_pixel(b+x, a+y, color); 
1C7C:  MOVLB  5
1C7E:  MOVF   x28,W
1C80:  ADDWF  x2E,W
1C82:  MOVWF  x30
1C84:  MOVF   x29,W
1C86:  ADDWF  x2D,W
1C88:  MOVWF  x31
1C8A:  MOVFF  530,555
1C8E:  MOVWF  x56
1C90:  MOVFF  52C,557
1C94:  MOVLB  0
1C96:  CALL   0DB0
....................          glcd_pixel(x-a, b+y, color); 
1C9A:  MOVLB  5
1C9C:  MOVF   x2D,W
1C9E:  SUBWF  x28,W
1CA0:  MOVWF  x30
1CA2:  MOVF   x29,W
1CA4:  ADDWF  x2E,W
1CA6:  MOVWF  x31
1CA8:  MOVFF  530,555
1CAC:  MOVWF  x56
1CAE:  MOVFF  52C,557
1CB2:  MOVLB  0
1CB4:  CALL   0DB0
....................          glcd_pixel(x-b, a+y, color); 
1CB8:  MOVLB  5
1CBA:  MOVF   x2E,W
1CBC:  SUBWF  x28,W
1CBE:  MOVWF  x30
1CC0:  MOVF   x29,W
1CC2:  ADDWF  x2D,W
1CC4:  MOVWF  x31
1CC6:  MOVFF  530,555
1CCA:  MOVWF  x56
1CCC:  MOVFF  52C,557
1CD0:  MOVLB  0
1CD2:  CALL   0DB0
....................          glcd_pixel(b+x, y-a, color); 
1CD6:  MOVLB  5
1CD8:  MOVF   x28,W
1CDA:  ADDWF  x2E,W
1CDC:  MOVWF  x30
1CDE:  MOVF   x2D,W
1CE0:  SUBWF  x29,W
1CE2:  MOVWF  x31
1CE4:  MOVFF  530,555
1CE8:  MOVWF  x56
1CEA:  MOVFF  52C,557
1CEE:  MOVLB  0
1CF0:  CALL   0DB0
....................          glcd_pixel(a+x, y-b, color); 
1CF4:  MOVLB  5
1CF6:  MOVF   x28,W
1CF8:  ADDWF  x2D,W
1CFA:  MOVWF  x30
1CFC:  MOVF   x2E,W
1CFE:  SUBWF  x29,W
1D00:  MOVWF  x31
1D02:  MOVFF  530,555
1D06:  MOVWF  x56
1D08:  MOVFF  52C,557
1D0C:  MOVLB  0
1D0E:  CALL   0DB0
....................          glcd_pixel(x-a, y-b, color); 
1D12:  MOVLB  5
1D14:  MOVF   x2D,W
1D16:  SUBWF  x28,W
1D18:  MOVWF  x30
1D1A:  MOVF   x2E,W
1D1C:  SUBWF  x29,W
1D1E:  MOVWF  x31
1D20:  MOVFF  530,555
1D24:  MOVWF  x56
1D26:  MOVFF  52C,557
1D2A:  MOVLB  0
1D2C:  CALL   0DB0
....................          glcd_pixel(x-b, y-a, color); 
1D30:  MOVLB  5
1D32:  MOVF   x2E,W
1D34:  SUBWF  x28,W
1D36:  MOVWF  x30
1D38:  MOVF   x2D,W
1D3A:  SUBWF  x29,W
1D3C:  MOVWF  x31
1D3E:  MOVFF  530,555
1D42:  MOVWF  x56
1D44:  MOVFF  52C,557
1D48:  MOVLB  0
1D4A:  CALL   0DB0
....................       } 
....................  
....................       if(P < 0) 
1D4E:  MOVLB  5
1D50:  BTFSC  x2F.7
1D52:  BRA    1D56
1D54:  BRA    1D72
....................          P += 3 + 2 * a++; 
1D56:  MOVF   x2D,W
1D58:  INCF   x2D,F
1D5A:  MOVWF  x30
1D5C:  MOVLW  02
1D5E:  MOVWF  x31
1D60:  MOVFF  530,532
1D64:  MOVLB  0
1D66:  RCALL  1B34
1D68:  MOVF   01,W
1D6A:  ADDLW  03
1D6C:  MOVLB  5
1D6E:  ADDWF  x2F,F
....................       else 
1D70:  BRA    1D94
....................          P += 5 + 2 * (a++ - b--); 
1D72:  MOVF   x2D,W
1D74:  INCF   x2D,F
1D76:  MOVWF  x30
1D78:  MOVF   x2E,W
1D7A:  DECF   x2E,F
1D7C:  SUBWF  x30,W
1D7E:  MOVWF  x30
1D80:  MOVLW  02
1D82:  MOVWF  x31
1D84:  MOVFF  530,532
1D88:  MOVLB  0
1D8A:  RCALL  1B34
1D8C:  MOVF   01,W
1D8E:  ADDLW  05
1D90:  MOVLB  5
1D92:  ADDWF  x2F,F
....................     } while(a <= b); 
1D94:  MOVF   x2D,W
1D96:  XORLW  80
1D98:  MOVWF  00
1D9A:  MOVF   x2E,W
1D9C:  XORLW  80
1D9E:  SUBWF  00,W
1DA0:  BTFSC  FD8.2
1DA2:  BRA    1B92
1DA4:  BTFSS  FD8.0
1DA6:  BRA    1B92
.................... } 
1DA8:  MOVLB  0
1DAA:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
0E6C:  MOVFF  53C,03
0E70:  MOVLB  5
0E72:  MOVFF  53B,FE9
0E76:  MOVFF  53C,FEA
0E7A:  MOVF   FEF,F
0E7C:  BTFSC  FD8.2
0E7E:  BRA    1020
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0E80:  MOVFF  53C,03
0E84:  MOVFF  53B,FE9
0E88:  MOVFF  53C,FEA
0E8C:  MOVF   FEF,W
0E8E:  SUBLW  52
0E90:  BNC   0EE0
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
0E92:  MOVFF  53C,03
0E96:  MOVFF  53B,FE9
0E9A:  MOVFF  53C,FEA
0E9E:  MOVLW  20
0EA0:  SUBWF  FEF,W
0EA2:  MULLW  05
0EA4:  MOVF   FF3,W
0EA6:  CLRF   03
0EA8:  MOVWF  x48
0EAA:  MOVLW  05
0EAC:  MOVWF  FEA
0EAE:  MOVLW  43
0EB0:  MOVWF  FE9
0EB2:  CLRF   x4C
0EB4:  MOVFF  548,54B
0EB8:  MOVFF  FF2,549
0EBC:  BCF    FF2.7
0EBE:  MOVLW  05
0EC0:  MOVWF  01
0EC2:  CLRF   FF7
0EC4:  MOVF   x48,W
0EC6:  MOVLB  0
0EC8:  CALL   0004
0ECC:  TBLRD*-
0ECE:  TBLRD*+
0ED0:  MOVFF  FF5,FEE
0ED4:  DECFSZ 01,F
0ED6:  BRA    0ECE
0ED8:  MOVLB  5
0EDA:  BTFSC  x49.7
0EDC:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
0EDE:  BRA    0F4A
0EE0:  MOVFF  53C,03
0EE4:  MOVFF  53B,FE9
0EE8:  MOVFF  53C,FEA
0EEC:  MOVF   FEF,W
0EEE:  SUBLW  7E
0EF0:  BNC   0F40
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
0EF2:  MOVFF  53C,03
0EF6:  MOVFF  53B,FE9
0EFA:  MOVFF  53C,FEA
0EFE:  MOVLW  53
0F00:  SUBWF  FEF,W
0F02:  MULLW  05
0F04:  MOVF   FF3,W
0F06:  CLRF   03
0F08:  MOVWF  x48
0F0A:  MOVLW  05
0F0C:  MOVWF  FEA
0F0E:  MOVLW  43
0F10:  MOVWF  FE9
0F12:  CLRF   x4C
0F14:  MOVFF  548,54B
0F18:  MOVFF  FF2,549
0F1C:  BCF    FF2.7
0F1E:  MOVLW  05
0F20:  MOVWF  01
0F22:  CLRF   FF7
0F24:  MOVF   x48,W
0F26:  MOVLB  0
0F28:  CALL   0114
0F2C:  TBLRD*-
0F2E:  TBLRD*+
0F30:  MOVFF  FF5,FEE
0F34:  DECFSZ 01,F
0F36:  BRA    0F2E
0F38:  MOVLB  5
0F3A:  BTFSC  x49.7
0F3C:  BSF    FF2.7
....................       else 
0F3E:  BRA    0F4A
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
0F40:  CLRF   x43
0F42:  CLRF   x44
0F44:  CLRF   x45
0F46:  CLRF   x46
0F48:  CLRF   x47
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
0F4A:  MOVFF  53C,03
0F4E:  MOVF   x3B,W
0F50:  MOVWF  FE9
0F52:  MOVFF  03,FEA
0F56:  MOVF   FEF,W
0F58:  XORLW  0A
0F5A:  MOVLB  0
0F5C:  BZ    0F64
0F5E:  XORLW  07
0F60:  BZ    0F74
0F62:  BRA    0F7A
....................          case '\n': 
....................             y += 7*size + 1; 
0F64:  MOVLB  5
0F66:  MOVF   x3D,W
0F68:  MULLW  07
0F6A:  MOVF   FF3,W
0F6C:  ADDLW  01
0F6E:  ADDWF  x3A,F
....................             continue; 
0F70:  BRA    1012
0F72:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
0F74:  MOVLB  5
0F76:  CLRF   x39
....................             continue; 
0F78:  BRA    1012
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
0F7A:  MOVLB  5
0F7C:  MOVF   x3D,W
0F7E:  MULLW  05
0F80:  MOVF   FF3,W
0F82:  ADDWF  x39,W
0F84:  SUBLW  7F
0F86:  BC    0F94
....................       { 
....................          x = 0;                           // Set x at far left position 
0F88:  CLRF   x39
....................          y += 7*size + 1;                 // Set y at next position down 
0F8A:  MOVF   x3D,W
0F8C:  MULLW  07
0F8E:  MOVF   FF3,W
0F90:  ADDLW  01
0F92:  ADDWF  x3A,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
0F94:  CLRF   x3F
0F96:  MOVF   x3F,W
0F98:  SUBLW  04
0F9A:  BNC   1012
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
0F9C:  CLRF   x40
0F9E:  MOVF   x40,W
0FA0:  SUBLW  06
0FA2:  BNC   100A
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
0FA4:  CLRF   03
0FA6:  MOVF   x3F,W
0FA8:  ADDLW  43
0FAA:  MOVWF  FE9
0FAC:  MOVLW  05
0FAE:  ADDWFC 03,W
0FB0:  MOVWF  FEA
0FB2:  MOVFF  FEF,548
0FB6:  MOVFF  548,00
0FBA:  MOVF   x40,W
0FBC:  MOVWF  01
0FBE:  BZ    0FC8
0FC0:  BCF    FD8.0
0FC2:  RRCF   00,F
0FC4:  DECFSZ 01,F
0FC6:  BRA    0FC0
0FC8:  BTFSS  00.0
0FCA:  BRA    1006
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
0FCC:  CLRF   x41
0FCE:  MOVF   x3D,W
0FD0:  SUBWF  x41,W
0FD2:  BC    1006
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
0FD4:  CLRF   x42
0FD6:  MOVF   x3D,W
0FD8:  SUBWF  x42,W
0FDA:  BC    1002
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
0FDC:  MOVF   x42,W
0FDE:  ADDWF  x39,W
0FE0:  MOVWF  x48
0FE2:  MOVF   x40,W
0FE4:  MULWF  x3D
0FE6:  MOVF   FF3,W
0FE8:  ADDWF  x3A,W
0FEA:  ADDWF  x41,W
0FEC:  MOVWF  x49
0FEE:  MOVFF  548,555
0FF2:  MOVWF  x56
0FF4:  MOVFF  53E,557
0FF8:  MOVLB  0
0FFA:  RCALL  0DB0
....................                   } 
0FFC:  MOVLB  5
0FFE:  INCF   x42,F
1000:  BRA    0FD6
....................                } 
1002:  INCF   x41,F
1004:  BRA    0FCE
....................             } 
....................          } 
1006:  INCF   x40,F
1008:  BRA    0F9E
....................       } 
100A:  INCF   x3F,F
100C:  MOVF   x3D,W
100E:  ADDWF  x39,F
1010:  BRA    0F96
....................    } 
1012:  INCF   x3B,F
1014:  BTFSC  FD8.2
1016:  INCF   x3C,F
1018:  INCF   x39,F
101A:  MOVLB  0
101C:  BRA    0E6C
101E:  MOVLB  5
.................... } 
1020:  MOVLB  0
1022:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... char kpa[]="kPa"; 
.................... float promedio[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... int8 Puerta=0,Parada=1,NivelReservorio=0,NivelTanque=0,Presostato=0,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,Alarma=0,AlarmaAgua=0; 
.................... short Flanco=0,Flanco1=0,Flanco2=0,emergency=0,visual=1,desfoguelento=0,Lectura=0,Expulsa=0, est=0,Visua=0,flag_agua=0,CadenaRecibida=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,z=0; 
.................... short disp_Alarma=0,disp_AlarmaAgua=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Decimal=0; 
.................... int8 Menu=0, unidad=1,bite=0,TamanoCadena=0,i=0; 
.................... int8 Setpoint=0,fin_ciclo=0,Opcion=1,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,tiempo_desfogue=0; 
.................... float ADC_Pt100=0.0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... char dato[10]; 
.................... char datoTx[14]; 
.................... char datoRx[11]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
.................... float V0=0.0,R1=6180.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0; 
....................  
.................... typedef struct{ 
....................    char Letra[30]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void displayMenu(char palabra[30], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
1224:  MOVLB  5
1226:  MOVFF  528,01
122A:  MOVFF  529,03
122E:  MOVFF  528,52E
1232:  MOVFF  529,52F
1236:  MOVLW  05
1238:  MOVWF  FEA
123A:  MOVLW  08
123C:  MOVWF  FE9
123E:  MOVFF  529,FE2
1242:  MOVFF  528,FE1
1246:  MOVF   FE7,F
1248:  MOVFF  FE6,FEE
124C:  BNZ   1246
....................    if(sombreado==2) 
124E:  MOVF   x2C,W
1250:  SUBLW  02
1252:  BNZ   127C
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
1254:  MOVLW  01
1256:  ADDWF  x2A,W
1258:  MOVWF  x2E
125A:  MOVLW  01
125C:  ADDWF  x2B,W
125E:  MOVWF  x2F
1260:  MOVFF  52E,539
1264:  MOVWF  x3A
1266:  MOVLW  05
1268:  MOVWF  x3C
126A:  MOVLW  08
126C:  MOVWF  x3B
126E:  MOVFF  52D,53D
1272:  MOVLW  01
1274:  MOVWF  x3E
1276:  MOVLB  0
1278:  RCALL  0E6C
127A:  MOVLB  5
....................    if(sombreado==1) 
127C:  DECFSZ x2C,W
127E:  BRA    12CA
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
1280:  MOVF   x2D,W
1282:  MULLW  08
1284:  MOVF   FF3,W
1286:  ADDWF  x2B,W
1288:  MOVWF  x2E
128A:  CLRF   x3A
128C:  MOVFF  52B,53B
1290:  MOVLW  7F
1292:  MOVWF  x3C
1294:  MOVFF  52E,53D
1298:  MOVLW  01
129A:  MOVWF  x3E
129C:  MOVWF  x3F
129E:  MOVLB  0
12A0:  RCALL  1162
12A2:  MOVLW  01
12A4:  MOVLB  5
12A6:  ADDWF  x2A,W
12A8:  MOVWF  x2E
12AA:  MOVLW  01
12AC:  ADDWF  x2B,W
12AE:  MOVWF  x2F
12B0:  MOVFF  52E,539
12B4:  MOVWF  x3A
12B6:  MOVLW  05
12B8:  MOVWF  x3C
12BA:  MOVLW  08
12BC:  MOVWF  x3B
12BE:  MOVFF  52D,53D
12C2:  CLRF   x3E
12C4:  MOVLB  0
12C6:  RCALL  0E6C
12C8:  MOVLB  5
....................    if(sombreado==0) 
12CA:  MOVF   x2C,F
12CC:  BNZ   1318
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
12CE:  MOVF   x2D,W
12D0:  MULLW  08
12D2:  MOVF   FF3,W
12D4:  ADDWF  x2B,W
12D6:  MOVWF  x2E
12D8:  CLRF   x3A
12DA:  MOVFF  52B,53B
12DE:  MOVLW  7F
12E0:  MOVWF  x3C
12E2:  MOVFF  52E,53D
12E6:  MOVLW  01
12E8:  MOVWF  x3E
12EA:  CLRF   x3F
12EC:  MOVLB  0
12EE:  RCALL  1162
12F0:  MOVLW  01
12F2:  MOVLB  5
12F4:  ADDWF  x2A,W
12F6:  MOVWF  x2E
12F8:  MOVLW  01
12FA:  ADDWF  x2B,W
12FC:  MOVWF  x2F
12FE:  MOVFF  52E,539
1302:  MOVWF  x3A
1304:  MOVLW  05
1306:  MOVWF  x3C
1308:  MOVLW  08
130A:  MOVWF  x3B
130C:  MOVFF  52D,53D
1310:  MOVLW  01
1312:  MOVWF  x3E
1314:  MOVLB  0
1316:  RCALL  0E6C
....................    glcd_update(); 
1318:  MOVLB  0
131A:  RCALL  0C4E
.................... } 
131C:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
1E32:  MOVLB  5
1E34:  MOVF   x2C,W
1E36:  SUBLW  02
1E38:  BNZ   1EAA
....................    { 
....................       sprintf(voltage, "%03u", digito); 
1E3A:  MOVLW  05
1E3C:  MOVWF  x27
1E3E:  MOVLW  2E
1E40:  MOVWF  x26
1E42:  MOVFF  529,537
1E46:  MOVLW  03
1E48:  MOVWF  x38
1E4A:  MOVLB  0
1E4C:  RCALL  1DAC
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
1E4E:  MOVLB  5
1E50:  MOVF   x2D,W
1E52:  MULLW  12
1E54:  MOVF   FF3,W
1E56:  ADDWF  x2A,W
1E58:  MOVWF  x37
1E5A:  MOVF   x2D,W
1E5C:  MULLW  08
1E5E:  MOVF   FF3,W
1E60:  ADDWF  x2B,W
1E62:  MOVWF  x38
1E64:  MOVFF  52A,53A
1E68:  MOVFF  52B,53B
1E6C:  MOVFF  537,53C
1E70:  MOVWF  x3D
1E72:  MOVLW  01
1E74:  MOVWF  x3E
1E76:  MOVWF  x3F
1E78:  MOVLB  0
1E7A:  CALL   1162
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
1E7E:  MOVLW  01
1E80:  MOVLB  5
1E82:  ADDWF  x2A,W
1E84:  MOVWF  x37
1E86:  MOVLW  01
1E88:  ADDWF  x2B,W
1E8A:  MOVWF  x38
1E8C:  MOVFF  537,539
1E90:  MOVWF  x3A
1E92:  MOVLW  05
1E94:  MOVWF  x3C
1E96:  MOVLW  2E
1E98:  MOVWF  x3B
1E9A:  MOVFF  52D,53D
1E9E:  CLRF   x3E
1EA0:  MOVLB  0
1EA2:  CALL   0E6C
....................    } 
....................    else 
1EA6:  BRA    1F78
1EA8:  MOVLB  5
....................    { 
....................       sprintf(voltage, "%u", digito); 
1EAA:  MOVLW  05
1EAC:  MOVWF  x27
1EAE:  MOVLW  2E
1EB0:  MOVWF  x26
1EB2:  MOVFF  529,537
1EB6:  MOVLW  1B
1EB8:  MOVWF  x38
1EBA:  MOVLB  0
1EBC:  RCALL  1DAC
....................     
....................       if(sombreado==1) 
1EBE:  MOVLB  5
1EC0:  DECFSZ x2C,W
1EC2:  BRA    1F1C
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
1EC4:  MOVF   x2D,W
1EC6:  MULLW  05
1EC8:  MOVF   FF3,W
1ECA:  ADDWF  x2A,W
1ECC:  MOVWF  x37
1ECE:  MOVF   x2D,W
1ED0:  MULLW  08
1ED2:  MOVF   FF3,W
1ED4:  ADDWF  x2B,W
1ED6:  MOVWF  x38
1ED8:  MOVFF  52A,53A
1EDC:  MOVFF  52B,53B
1EE0:  MOVFF  537,53C
1EE4:  MOVWF  x3D
1EE6:  MOVLW  01
1EE8:  MOVWF  x3E
1EEA:  MOVWF  x3F
1EEC:  MOVLB  0
1EEE:  CALL   1162
1EF2:  MOVLW  01
1EF4:  MOVLB  5
1EF6:  ADDWF  x2A,W
1EF8:  MOVWF  x37
1EFA:  MOVLW  01
1EFC:  ADDWF  x2B,W
1EFE:  MOVWF  x38
1F00:  MOVFF  537,539
1F04:  MOVWF  x3A
1F06:  MOVLW  05
1F08:  MOVWF  x3C
1F0A:  MOVLW  2E
1F0C:  MOVWF  x3B
1F0E:  MOVFF  52D,53D
1F12:  CLRF   x3E
1F14:  MOVLB  0
1F16:  CALL   0E6C
1F1A:  MOVLB  5
....................       if(sombreado==0) 
1F1C:  MOVF   x2C,F
1F1E:  BNZ   1F7A
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
1F20:  MOVF   x2D,W
1F22:  MULLW  05
1F24:  MOVF   FF3,W
1F26:  ADDWF  x2A,W
1F28:  MOVWF  x37
1F2A:  MOVF   x2D,W
1F2C:  MULLW  08
1F2E:  MOVF   FF3,W
1F30:  ADDWF  x2B,W
1F32:  MOVWF  x38
1F34:  MOVFF  52A,53A
1F38:  MOVFF  52B,53B
1F3C:  MOVFF  537,53C
1F40:  MOVWF  x3D
1F42:  MOVLW  01
1F44:  MOVWF  x3E
1F46:  CLRF   x3F
1F48:  MOVLB  0
1F4A:  CALL   1162
1F4E:  MOVLW  01
1F50:  MOVLB  5
1F52:  ADDWF  x2A,W
1F54:  MOVWF  x37
1F56:  MOVLW  01
1F58:  ADDWF  x2B,W
1F5A:  MOVWF  x38
1F5C:  MOVFF  537,539
1F60:  MOVWF  x3A
1F62:  MOVLW  05
1F64:  MOVWF  x3C
1F66:  MOVLW  2E
1F68:  MOVWF  x3B
1F6A:  MOVFF  52D,53D
1F6E:  MOVLW  01
1F70:  MOVWF  x3E
1F72:  MOVLB  0
1F74:  CALL   0E6C
1F78:  MOVLB  5
....................    } 
....................    glcd_update(); 
1F7A:  MOVLB  0
1F7C:  CALL   0C4E
.................... } 
1F80:  RETLW  00
....................  
....................  
.................... void EnviarCodigo(void) 
.................... { 
....................    datoTx[0]=Resistencia+48; 
*
152A:  MOVLW  30
152C:  MOVLB  4
152E:  ADDWF  x6D,W
1530:  MOVWF  xB4
....................    datoTx[1]=EVDesfogue+48; 
1532:  MOVLW  30
1534:  ADDWF  x6E,W
1536:  MOVWF  xB5
....................    datoTx[2]=EVAgua+48; 
1538:  MOVLW  30
153A:  ADDWF  x6F,W
153C:  MOVWF  xB6
....................    datoTx[3]=EVTrampa+48; 
153E:  MOVLW  30
1540:  ADDWF  x70,W
1542:  MOVWF  xB7
....................    datoTx[4]=MotorPuerta+48; 
1544:  MOVLW  30
1546:  ADDWF  x71,W
1548:  MOVWF  xB8
....................    datoTx[5]=EVEntradaAgua+48; 
154A:  MOVLW  30
154C:  ADDWF  x72,W
154E:  MOVWF  xB9
....................    datoTx[6]=BombaVacio+48; 
1550:  MOVLW  30
1552:  ADDWF  x73,W
1554:  MOVWF  xBA
....................    datoTx[7]=BombaAgua+48; 
1556:  MOVLW  30
1558:  ADDWF  x74,W
155A:  MOVWF  xBB
....................    datoTx[8]=Control+48; 
155C:  MOVLW  30
155E:  ADDWF  x75,W
1560:  MOVWF  xBC
....................    datoTx[12]=Nivel+48; 
1562:  MOVLW  30
1564:  ADDWF  x8A,W
1566:  MOVWF  xC0
....................    datoTx[9]=Setpoint+48; 
1568:  MOVLW  30
156A:  ADDWF  x7C,W
156C:  MOVWF  xBD
....................    /*itoa(Setpoint,10, SetTemperatura); 
....................     
....................    for(i=0;i<3;i++) 
....................    { 
....................       if(SetTemperatura[i]==null) 
....................       { 
....................          datoTx[i+9]='n'; 
....................       } 
....................       else 
....................       { 
....................          datoTx[i+9]=SetTemperatura[i]; 
....................       } 
....................    }*/ 
....................    datoTx[13]='\r'; 
156E:  MOVLW  0D
1570:  MOVWF  xC1
....................        
....................        
....................    for(i=0;i<14;i++) 
1572:  CLRF   x7B
1574:  MOVF   x7B,W
1576:  SUBLW  0D
1578:  BNC   158A
....................    { 
....................        
....................       delay_ms(12); 
157A:  MOVLW  0C
157C:  MOVLB  5
157E:  MOVWF  x29
1580:  MOVLB  0
1582:  RCALL  131E
....................    }    
1584:  MOVLB  4
1586:  INCF   x7B,F
1588:  BRA    1574
.................... } 
158A:  MOVLB  0
158C:  RETLW  00
....................  
.................... void Determina(void){ 
....................          Puerta=DatoRx[0]-48; 
*
199C:  MOVLW  30
199E:  MOVLB  4
19A0:  SUBWF  xC2,W
19A2:  MOVWF  x5E
....................          Parada=DatoRx[1]-48; 
19A4:  MOVLW  30
19A6:  SUBWF  xC3,W
19A8:  MOVWF  x5F
....................          NivelReservorio=DatoRx[2]-48; 
19AA:  MOVLW  30
19AC:  SUBWF  xC4,W
19AE:  MOVWF  x60
....................          NivelTanque=DatoRx[3]-48; 
19B0:  MOVLW  30
19B2:  SUBWF  xC5,W
19B4:  MOVWF  x61
....................          Presostato=DatoRx[4]-48; 
19B6:  MOVLW  30
19B8:  SUBWF  xC6,W
19BA:  MOVWF  x62
....................          ADC_Pt100=DatoRx[5]-48; 
19BC:  MOVLW  30
19BE:  SUBWF  xC7,W
19C0:  MOVLB  5
19C2:  CLRF   x29
19C4:  MOVWF  x28
19C6:  MOVLB  0
19C8:  RCALL  158E
19CA:  MOVFF  03,491
19CE:  MOVFF  02,490
19D2:  MOVFF  01,48F
19D6:  MOVFF  00,48E
....................          Alarma=DatoRx[6]-48; 
19DA:  MOVLW  30
19DC:  MOVLB  4
19DE:  SUBWF  xC8,W
19E0:  MOVWF  x68
....................          AlarmaAgua=DatoRx[7]-48; 
19E2:  MOVLW  30
19E4:  SUBWF  xC9,W
19E6:  MOVWF  x69
....................          /*for(i=0;i<4;i++) 
....................          { 
....................             if(strcmp(datoRx[i+5],'n')==0 ) 
....................             { 
....................                break; 
....................             } 
....................             else 
....................             { 
....................                ADCTemperatura[i]=datoRx[i+5]; 
....................             } 
....................          } 
....................          ADC_Pt100=atof(ADCTemperatura); 
....................          for(i=0;i<4;i++) 
....................          { 
....................             datoRx[i+5]=null; 
....................             ADCTemperatura[i]=null; 
....................          }*/ 
....................          Decimal=DatoRx[9]-48; 
19E8:  MOVLW  30
19EA:  SUBWF  xCB,W
19EC:  MOVWF  x76
....................          ADC_Pt100=ADC_Pt100+((float)Decimal/10); 
19EE:  MOVLB  5
19F0:  CLRF   x29
19F2:  MOVFF  476,528
19F6:  MOVLB  0
19F8:  RCALL  158E
19FA:  MOVFF  00,528
19FE:  MOVFF  01,529
1A02:  MOVFF  02,52A
1A06:  MOVFF  03,52B
1A0A:  MOVFF  03,52F
1A0E:  MOVFF  02,52E
1A12:  MOVFF  01,52D
1A16:  MOVFF  00,52C
1A1A:  MOVLB  5
1A1C:  CLRF   x33
1A1E:  CLRF   x32
1A20:  MOVLW  20
1A22:  MOVWF  x31
1A24:  MOVLW  82
1A26:  MOVWF  x30
1A28:  MOVLB  0
1A2A:  BRA    15C4
1A2C:  BCF    FD8.1
1A2E:  MOVFF  491,52F
1A32:  MOVFF  490,52E
1A36:  MOVFF  48F,52D
1A3A:  MOVFF  48E,52C
1A3E:  MOVFF  03,533
1A42:  MOVFF  02,532
1A46:  MOVFF  01,531
1A4A:  MOVFF  00,530
1A4E:  RCALL  1724
1A50:  MOVFF  03,491
1A54:  MOVFF  02,490
1A58:  MOVFF  01,48F
1A5C:  MOVFF  00,48E
.................... } 
1A60:  RETLW  00
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................    /* 
....................    if(x==1){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==2){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==3){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==4){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    }*/ 
....................     
....................    if(x==5){ 
*
1A86:  MOVLB  5
1A88:  MOVF   x28,W
1A8A:  SUBLW  05
1A8C:  BNZ   1B30
....................    for( i = 0 ; i < 64 ; i ++ ) 
1A8E:  CLRF   x29
1A90:  MOVF   x29,W
1A92:  SUBLW  3F
1A94:  BNC   1B30
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
1A96:  CLRF   x2A
1A98:  MOVF   x2A,W
1A9A:  SUBLW  0F
1A9C:  BNC   1B2C
....................       {     
....................          for(k=7;k>-1;k--) 
1A9E:  MOVLW  07
1AA0:  MOVWF  x2B
1AA2:  MOVF   x2B,W
1AA4:  XORLW  80
1AA6:  SUBLW  7F
1AA8:  BC    1B28
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
1AAA:  CLRF   x2D
1AAC:  MOVFF  529,52C
1AB0:  CLRF   x2F
1AB2:  MOVLW  10
1AB4:  MOVWF  x2E
1AB6:  MOVLB  0
1AB8:  BRA    1A62
1ABA:  MOVFF  02,52D
1ABE:  MOVFF  01,52C
1AC2:  MOVLB  5
1AC4:  MOVF   x2A,W
1AC6:  ADDWF  01,W
1AC8:  MOVWF  01
1ACA:  MOVLW  00
1ACC:  ADDWFC 02,W
1ACE:  MOVWF  03
1AD0:  MOVF   01,W
1AD2:  MOVFF  FF2,52C
1AD6:  BCF    FF2.7
1AD8:  MOVFF  03,FF7
1ADC:  MOVLB  0
1ADE:  CALL   0200
1AE2:  MOVLB  5
1AE4:  BTFSC  x2C.7
1AE6:  BSF    FF2.7
1AE8:  MOVWF  x2C
1AEA:  MOVLW  07
1AEC:  BSF    FD8.0
1AEE:  SUBFWB x2B,W
1AF0:  MOVWF  x2D
1AF2:  MOVFF  52C,00
1AF6:  MOVF   x2D,W
1AF8:  MOVWF  01
1AFA:  BZ    1B04
1AFC:  BCF    FD8.0
1AFE:  RRCF   00,F
1B00:  DECFSZ 01,F
1B02:  BRA    1AFC
1B04:  BTFSS  00.0
1B06:  BRA    1B24
....................                glcd_pixel( j*8+k,i, ON ); 
1B08:  MOVF   x2A,W
1B0A:  MULLW  08
1B0C:  MOVF   FF3,W
1B0E:  ADDWF  x2B,W
1B10:  MOVWF  x2C
1B12:  MOVWF  x55
1B14:  MOVFF  529,556
1B18:  MOVLW  01
1B1A:  MOVWF  x57
1B1C:  MOVLB  0
1B1E:  CALL   0DB0
1B22:  MOVLB  5
....................          }   
1B24:  DECF   x2B,F
1B26:  BRA    1AA2
....................       } 
1B28:  INCF   x2A,F
1B2A:  BRA    1A98
....................    } 
1B2C:  INCF   x29,F
1B2E:  BRA    1A90
....................    } 
....................     
.................... } 
1B30:  MOVLB  0
1B32:  RETLW  00
....................  
....................     
.................... void Limpia(int x1,int x2,int y){ 
....................    glcd_rect(x1, y, x2, y+7, YES, OFF); 
*
20C2:  MOVLW  07
20C4:  MOVLB  5
20C6:  ADDWF  x2A,W
20C8:  MOVWF  x2B
20CA:  MOVFF  528,53A
20CE:  MOVFF  52A,53B
20D2:  MOVFF  529,53C
20D6:  MOVWF  x3D
20D8:  MOVLW  01
20DA:  MOVWF  x3E
20DC:  CLRF   x3F
20DE:  MOVLB  0
20E0:  CALL   1162
.................... } 
20E4:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%3.1f",adc); // Converts adc to text 
*
2456:  MOVLW  05
2458:  MOVLB  5
245A:  MOVWF  x27
245C:  MOVLW  2F
245E:  MOVWF  x26
2460:  MOVLW  02
2462:  MOVWF  FE9
2464:  MOVFF  52B,53B
2468:  MOVFF  52A,53A
246C:  MOVFF  529,539
2470:  MOVFF  528,538
2474:  MOVLW  01
2476:  MOVWF  x3C
2478:  MOVLB  0
247A:  BRA    22A2
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
247C:  MOVLB  5
247E:  MOVF   x2E,W
2480:  MULLW  1B
2482:  MOVF   FF3,W
2484:  ADDWF  x2C,W
2486:  MOVWF  x38
2488:  MOVF   x2E,W
248A:  MULLW  08
248C:  MOVF   FF3,W
248E:  ADDWF  x2D,W
2490:  MOVWF  x39
2492:  MOVFF  52C,53A
2496:  MOVFF  52D,53B
249A:  MOVFF  538,53C
249E:  MOVWF  x3D
24A0:  MOVLW  01
24A2:  MOVWF  x3E
24A4:  CLRF   x3F
24A6:  MOVLB  0
24A8:  CALL   1162
....................    /*glcd_rect(x, y, x+53, y+15, YES, ON);*/glcd_text57(x, y, voltage, w, ON); 
24AC:  MOVFF  52C,539
24B0:  MOVFF  52D,53A
24B4:  MOVLW  05
24B6:  MOVLB  5
24B8:  MOVWF  x3C
24BA:  MOVLW  2F
24BC:  MOVWF  x3B
24BE:  MOVFF  52E,53D
24C2:  MOVLW  01
24C4:  MOVWF  x3E
24C6:  MOVLB  0
24C8:  CALL   0E6C
.................... } 
24CC:  GOTO   5D4E (RETURN)
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
.................... } 
....................  
.................... void MuestraTiemposProgramados(){ 
.................... // Muestra Valor de esterilizacion programado. 
....................    displayTiempo(Testerilizacionp[3],36,0,0,1);displayTiempo(Testerilizacionp[2],42,0,0,1); 
*
1F82:  MOVFF  499,529
1F86:  MOVLW  24
1F88:  MOVLB  5
1F8A:  MOVWF  x2A
1F8C:  CLRF   x2B
1F8E:  CLRF   x2C
1F90:  MOVLW  01
1F92:  MOVWF  x2D
1F94:  MOVLB  0
1F96:  RCALL  1E32
1F98:  MOVFF  498,529
1F9C:  MOVLW  2A
1F9E:  MOVLB  5
1FA0:  MOVWF  x2A
1FA2:  CLRF   x2B
1FA4:  CLRF   x2C
1FA6:  MOVLW  01
1FA8:  MOVWF  x2D
1FAA:  MOVLB  0
1FAC:  RCALL  1E32
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,0,2,1);  
1FAE:  MOVLW  05
1FB0:  MOVWF  FEA
1FB2:  MOVLW  08
1FB4:  MOVWF  FE9
1FB6:  MOVFF  FF2,528
1FBA:  BCF    FF2.7
1FBC:  MOVLW  00
1FBE:  CALL   060E
1FC2:  TBLRD*-
1FC4:  TBLRD*+
1FC6:  MOVF   FF5,W
1FC8:  MOVWF  FEE
1FCA:  IORLW  00
1FCC:  BNZ   1FC4
1FCE:  MOVLB  5
1FD0:  BTFSC  x28.7
1FD2:  BSF    FF2.7
1FD4:  MOVLW  05
1FD6:  MOVWF  x29
1FD8:  MOVLW  08
1FDA:  MOVWF  x28
1FDC:  MOVLW  31
1FDE:  MOVWF  x2A
1FE0:  CLRF   x2B
1FE2:  MOVLW  02
1FE4:  MOVWF  x2C
1FE6:  MOVLW  01
1FE8:  MOVWF  x2D
1FEA:  MOVLB  0
1FEC:  CALL   1224
....................    displayTiempo(Testerilizacionp[1],54,0,0,1);displayTiempo(Testerilizacionp[0],60,0,0,1); 
1FF0:  MOVFF  497,529
1FF4:  MOVLW  36
1FF6:  MOVLB  5
1FF8:  MOVWF  x2A
1FFA:  CLRF   x2B
1FFC:  CLRF   x2C
1FFE:  MOVLW  01
2000:  MOVWF  x2D
2002:  MOVLB  0
2004:  RCALL  1E32
2006:  MOVFF  496,529
200A:  MOVLW  3C
200C:  MOVLB  5
200E:  MOVWF  x2A
2010:  CLRF   x2B
2012:  CLRF   x2C
2014:  MOVLW  01
2016:  MOVWF  x2D
2018:  MOVLB  0
201A:  RCALL  1E32
.................... // Muestra tiempo de secado programado. 
....................    displayTiempo(Tsecadop[3],36,8,0,1);displayTiempo(Tsecadop[2],42,8,0,1); 
201C:  MOVFF  4A1,529
2020:  MOVLW  24
2022:  MOVLB  5
2024:  MOVWF  x2A
2026:  MOVLW  08
2028:  MOVWF  x2B
202A:  CLRF   x2C
202C:  MOVLW  01
202E:  MOVWF  x2D
2030:  MOVLB  0
2032:  RCALL  1E32
2034:  MOVFF  4A0,529
2038:  MOVLW  2A
203A:  MOVLB  5
203C:  MOVWF  x2A
203E:  MOVLW  08
2040:  MOVWF  x2B
2042:  CLRF   x2C
2044:  MOVLW  01
2046:  MOVWF  x2D
2048:  MOVLB  0
204A:  RCALL  1E32
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,8,2,1);  
204C:  MOVLW  05
204E:  MOVWF  FEA
2050:  MOVLW  08
2052:  MOVWF  FE9
2054:  MOVFF  FF2,528
2058:  BCF    FF2.7
205A:  MOVLW  00
205C:  CALL   060E
2060:  TBLRD*-
2062:  TBLRD*+
2064:  MOVF   FF5,W
2066:  MOVWF  FEE
2068:  IORLW  00
206A:  BNZ   2062
206C:  MOVLB  5
206E:  BTFSC  x28.7
2070:  BSF    FF2.7
2072:  MOVLW  05
2074:  MOVWF  x29
2076:  MOVLW  08
2078:  MOVWF  x28
207A:  MOVLW  31
207C:  MOVWF  x2A
207E:  MOVLW  08
2080:  MOVWF  x2B
2082:  MOVLW  02
2084:  MOVWF  x2C
2086:  MOVLW  01
2088:  MOVWF  x2D
208A:  MOVLB  0
208C:  CALL   1224
....................    displayTiempo(Tsecadop[1],54,8,0,1);displayTiempo(Tsecadop[0],60,8,0,1); 
2090:  MOVFF  49F,529
2094:  MOVLW  36
2096:  MOVLB  5
2098:  MOVWF  x2A
209A:  MOVLW  08
209C:  MOVWF  x2B
209E:  CLRF   x2C
20A0:  MOVLW  01
20A2:  MOVWF  x2D
20A4:  MOVLB  0
20A6:  RCALL  1E32
20A8:  MOVFF  49E,529
20AC:  MOVLW  3C
20AE:  MOVLB  5
20B0:  MOVWF  x2A
20B2:  MOVLW  08
20B4:  MOVWF  x2B
20B6:  CLRF   x2C
20B8:  MOVLW  01
20BA:  MOVWF  x2D
20BC:  MOVLB  0
20BE:  RCALL  1E32
.................... } 
20C0:  RETLW  00
....................  
.................... void Leer_Sensor(int media) 
.................... { 
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    V0 = V0/39.40; 
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
....................    Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>media-1) 
....................    {l=0;} 
....................    promedio[l]=Temperature;l++; 
....................           
....................    for(h=0;h<=(media-1);h++) 
....................    { 
....................       Prom+=promedio[h]; 
....................    }  
....................    Prom=Prom/media;    
....................    Prom+=((float)Ajuste-(float)Ajusten); 
....................     
....................    //return Prom; 
.................... } 
....................  
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
1474:  MOVLW  05
1476:  MOVLB  5
1478:  MOVWF  x27
147A:  MOVLW  2E
147C:  MOVWF  x26
147E:  MOVFF  52A,537
1482:  MOVLW  1F
1484:  MOVWF  x38
1486:  MOVLB  0
1488:  BRA    1394
....................     
....................    if(sombreado==1) 
148A:  MOVLB  5
148C:  DECFSZ x2D,W
148E:  BRA    14DE
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
1490:  MOVLW  12
1492:  ADDWF  x2B,W
1494:  MOVWF  x37
1496:  MOVLW  18
1498:  ADDWF  x2C,W
149A:  MOVWF  x38
149C:  MOVFF  52B,53A
14A0:  MOVFF  52C,53B
14A4:  MOVFF  537,53C
14A8:  MOVWF  x3D
14AA:  MOVLW  01
14AC:  MOVWF  x3E
14AE:  MOVWF  x3F
14B0:  MOVLB  0
14B2:  RCALL  1162
14B4:  MOVLW  02
14B6:  MOVLB  5
14B8:  ADDWF  x2B,W
14BA:  MOVWF  x37
14BC:  MOVLW  01
14BE:  ADDWF  x2C,W
14C0:  MOVWF  x38
14C2:  MOVFF  537,539
14C6:  MOVWF  x3A
14C8:  MOVLW  05
14CA:  MOVWF  x3C
14CC:  MOVLW  2E
14CE:  MOVWF  x3B
14D0:  MOVLW  02
14D2:  MOVWF  x3D
14D4:  CLRF   x3E
14D6:  MOVLB  0
14D8:  RCALL  0E6C
....................    else    
14DA:  BRA    1528
14DC:  MOVLB  5
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
14DE:  MOVLW  12
14E0:  ADDWF  x2B,W
14E2:  MOVWF  x37
14E4:  MOVLW  18
14E6:  ADDWF  x2C,W
14E8:  MOVWF  x38
14EA:  MOVFF  52B,53A
14EE:  MOVFF  52C,53B
14F2:  MOVFF  537,53C
14F6:  MOVWF  x3D
14F8:  CLRF   x3E
14FA:  CLRF   x3F
14FC:  MOVLB  0
14FE:  RCALL  1162
1500:  MOVLW  02
1502:  MOVLB  5
1504:  ADDWF  x2B,W
1506:  MOVWF  x37
1508:  MOVLW  01
150A:  ADDWF  x2C,W
150C:  MOVWF  x38
150E:  MOVFF  537,539
1512:  MOVWF  x3A
1514:  MOVLW  05
1516:  MOVWF  x3C
1518:  MOVLW  2E
151A:  MOVWF  x3B
151C:  MOVLW  02
151E:  MOVWF  x3D
1520:  MOVLW  01
1522:  MOVWF  x3E
1524:  MOVLB  0
1526:  RCALL  0E6C
....................  
.................... } 
1528:  RETLW  00
....................  
.................... void main() 
.................... { 
*
2588:  CLRF   FF8
258A:  BCF    FD0.7
258C:  CLRF   FEA
258E:  CLRF   FE9
2590:  MOVLB  4
2592:  CLRF   x5E
2594:  MOVLW  01
2596:  MOVWF  x5F
2598:  CLRF   x60
259A:  CLRF   x61
259C:  CLRF   x62
259E:  CLRF   x63
25A0:  CLRF   x64
25A2:  CLRF   x65
25A4:  CLRF   x66
25A6:  CLRF   x67
25A8:  CLRF   x68
25AA:  CLRF   x69
25AC:  BCF    x6A.0
25AE:  BCF    x6A.1
25B0:  BCF    x6A.2
25B2:  BCF    x6A.3
25B4:  BSF    x6A.4
25B6:  BCF    x6A.5
25B8:  BCF    x6A.6
25BA:  BCF    x6A.7
25BC:  BCF    x6B.0
25BE:  BCF    x6B.1
25C0:  BCF    x6B.2
25C2:  BCF    x6B.3
25C4:  BCF    x6B.4
25C6:  BCF    x6B.5
25C8:  BCF    x6B.6
25CA:  BCF    x6B.7
25CC:  BCF    x6C.0
25CE:  BCF    x6C.1
25D0:  BCF    x6C.2
25D2:  BCF    x6C.3
25D4:  BCF    x6C.4
25D6:  BCF    x6C.5
25D8:  BCF    x6C.6
25DA:  CLRF   x6D
25DC:  CLRF   x6E
25DE:  CLRF   x6F
25E0:  CLRF   x70
25E2:  CLRF   x71
25E4:  CLRF   x72
25E6:  CLRF   x73
25E8:  CLRF   x74
25EA:  CLRF   x75
25EC:  CLRF   x76
25EE:  CLRF   x77
25F0:  MOVWF  x78
25F2:  CLRF   x79
25F4:  CLRF   x7A
25F6:  CLRF   x7B
25F8:  CLRF   x7C
25FA:  CLRF   x7D
25FC:  MOVWF  x7E
25FE:  CLRF   x7F
2600:  CLRF   x80
2602:  CLRF   x81
2604:  CLRF   x83
2606:  CLRF   x82
2608:  CLRF   x85
260A:  CLRF   x84
260C:  CLRF   x87
260E:  CLRF   x86
2610:  CLRF   x89
2612:  MOVLW  0F
2614:  MOVWF  x88
2616:  CLRF   x8B
2618:  CLRF   x8A
261A:  CLRF   x8D
261C:  CLRF   x8C
261E:  CLRF   x91
2620:  CLRF   x90
2622:  CLRF   x8F
2624:  CLRF   x8E
2626:  CLRF   xD7
2628:  CLRF   xD6
262A:  CLRF   xD5
262C:  CLRF   xD4
262E:  CLRF   xDB
2630:  MOVLW  20
2632:  MOVWF  xDA
2634:  MOVLW  41
2636:  MOVWF  xD9
2638:  MOVLW  8B
263A:  MOVWF  xD8
263C:  CLRF   xE3
263E:  CLRF   xE2
2640:  MOVLW  20
2642:  MOVWF  xE1
2644:  MOVLW  82
2646:  MOVWF  xE0
2648:  CLRF   xE7
264A:  CLRF   xE6
264C:  CLRF   xE5
264E:  CLRF   xE4
2650:  CLRF   xEB
2652:  CLRF   xEA
2654:  CLRF   xE9
2656:  CLRF   xE8
2658:  CLRF   xEF
265A:  CLRF   xEE
265C:  CLRF   xED
265E:  CLRF   xEC
2660:  CLRF   xF3
2662:  CLRF   xF2
2664:  CLRF   xF1
2666:  CLRF   xF0
2668:  CLRF   xF7
266A:  CLRF   xF6
266C:  CLRF   xF5
266E:  CLRF   xF4
2670:  CLRF   xFB
2672:  CLRF   xFA
2674:  MOVLW  48
2676:  MOVWF  xF9
2678:  MOVLW  83
267A:  MOVWF  xF8
267C:  CLRF   xFF
267E:  CLRF   xFE
2680:  MOVLW  20
2682:  MOVWF  xFD
2684:  MOVLW  83
2686:  MOVWF  xFC
2688:  MOVLB  5
268A:  CLRF   x03
268C:  CLRF   x02
268E:  CLRF   x01
2690:  CLRF   x00
2692:  CLRF   x07
2694:  CLRF   x06
2696:  CLRF   x05
2698:  CLRF   x04
269A:  MOVF   FC1,W
269C:  ANDLW  C0
269E:  IORLW  0F
26A0:  MOVWF  FC1
26A2:  MOVLW  07
26A4:  MOVWF  FB4
26A6:  CLRF   04
26A8:  CLRF   05
26AA:  MOVLW  6B
26AC:  MOVLB  4
26AE:  MOVWF  x0A
26B0:  MOVLW  50
26B2:  MOVWF  x0B
26B4:  MOVLW  61
26B6:  MOVWF  x0C
26B8:  CLRF   x0D
26BA:  CLRF   x0E
26BC:  CLRF   x0F
26BE:  CLRF   x10
26C0:  CLRF   x11
26C2:  CLRF   x12
26C4:  CLRF   x13
26C6:  CLRF   x14
26C8:  CLRF   x15
26CA:  CLRF   x16
26CC:  CLRF   x17
26CE:  CLRF   x18
26D0:  CLRF   x19
26D2:  CLRF   x1A
26D4:  CLRF   x1B
26D6:  CLRF   x1C
26D8:  CLRF   x1D
26DA:  CLRF   x1E
26DC:  CLRF   x1F
26DE:  CLRF   x20
26E0:  CLRF   x21
26E2:  CLRF   x22
26E4:  CLRF   x23
26E6:  CLRF   x24
26E8:  CLRF   x25
26EA:  CLRF   x26
26EC:  CLRF   x27
26EE:  CLRF   x28
26F0:  CLRF   x29
26F2:  CLRF   x2A
26F4:  CLRF   x2B
26F6:  CLRF   x2C
26F8:  CLRF   x2D
26FA:  CLRF   x2E
26FC:  CLRF   x2F
26FE:  CLRF   x30
2700:  CLRF   x31
2702:  CLRF   x32
2704:  CLRF   x33
2706:  CLRF   x34
2708:  CLRF   x35
270A:  CLRF   x36
270C:  CLRF   x37
270E:  CLRF   x38
2710:  CLRF   x39
2712:  CLRF   x3A
2714:  CLRF   x3B
2716:  CLRF   x3C
2718:  CLRF   x3D
271A:  CLRF   x3E
271C:  CLRF   x3F
271E:  CLRF   x40
2720:  CLRF   x41
2722:  CLRF   x42
2724:  CLRF   x43
2726:  CLRF   x44
2728:  CLRF   x45
272A:  CLRF   x46
272C:  CLRF   x47
272E:  CLRF   x48
2730:  CLRF   x49
2732:  CLRF   x4A
2734:  CLRF   x4B
2736:  CLRF   x4C
2738:  CLRF   x4D
273A:  CLRF   x4E
273C:  CLRF   x4F
273E:  CLRF   x50
2740:  CLRF   x51
2742:  CLRF   x52
2744:  CLRF   x53
2746:  CLRF   x54
2748:  CLRF   x55
274A:  CLRF   x56
274C:  CLRF   x57
274E:  CLRF   x58
2750:  CLRF   x59
2752:  CLRF   x5A
2754:  CLRF   x5B
2756:  CLRF   x5C
2758:  CLRF   x5D
275A:  CLRF   x92
275C:  CLRF   x93
275E:  CLRF   x94
2760:  CLRF   x95
2762:  CLRF   x96
2764:  CLRF   x97
2766:  CLRF   x98
2768:  CLRF   x99
276A:  CLRF   x9A
276C:  CLRF   x9B
276E:  CLRF   x9C
2770:  CLRF   x9D
2772:  CLRF   x9E
2774:  CLRF   x9F
2776:  CLRF   xA0
2778:  CLRF   xA1
277A:  CLRF   xA2
277C:  CLRF   xA3
277E:  CLRF   xA4
2780:  CLRF   xA5
2782:  CLRF   xA6
2784:  CLRF   xA7
2786:  CLRF   xA8
2788:  CLRF   xA9
278A:  CLRF   xD1
278C:  CLRF   xD2
278E:  CLRF   xD3
2790:  MOVLB  5
2792:  CLRF   x26
2794:  CLRF   x27
....................  
....................  
....................    glcd_init(ON);             //Inicializa la glcd 
2796:  MOVLW  01
2798:  MOVWF  x28
279A:  MOVLB  0
279C:  GOTO   0D06
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
27A0:  MOVLB  5
27A2:  CLRF   x29
27A4:  MOVLB  0
27A6:  CALL   0BF4
....................    strcpy(Menus.Letra,"JP Inglobal"); 
27AA:  MOVLW  05
27AC:  MOVWF  FEA
27AE:  MOVLW  08
27B0:  MOVWF  FE9
27B2:  MOVFF  FF2,528
27B6:  BCF    FF2.7
27B8:  MOVLW  00
27BA:  CALL   0620
27BE:  TBLRD*-
27C0:  TBLRD*+
27C2:  MOVF   FF5,W
27C4:  MOVWF  FEE
27C6:  IORLW  00
27C8:  BNZ   27C0
27CA:  MOVLB  5
27CC:  BTFSC  x28.7
27CE:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,0,0,2);      
27D0:  MOVLW  05
27D2:  MOVWF  x29
27D4:  MOVLW  08
27D6:  MOVWF  x28
27D8:  CLRF   x2A
27DA:  CLRF   x2B
27DC:  CLRF   x2C
27DE:  MOVLW  02
27E0:  MOVWF  x2D
27E2:  MOVLB  0
27E4:  CALL   1224
....................    strcpy(Menus.Letra,"Autoclave Vertical"); 
27E8:  MOVLW  05
27EA:  MOVWF  FEA
27EC:  MOVLW  08
27EE:  MOVWF  FE9
27F0:  MOVFF  FF2,528
27F4:  BCF    FF2.7
27F6:  MOVLW  00
27F8:  CALL   063C
27FC:  TBLRD*-
27FE:  TBLRD*+
2800:  MOVF   FF5,W
2802:  MOVWF  FEE
2804:  IORLW  00
2806:  BNZ   27FE
2808:  MOVLB  5
280A:  BTFSC  x28.7
280C:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,20,0,1);        
280E:  MOVLW  05
2810:  MOVWF  x29
2812:  MOVLW  08
2814:  MOVWF  x28
2816:  CLRF   x2A
2818:  MOVLW  14
281A:  MOVWF  x2B
281C:  CLRF   x2C
281E:  MOVLW  01
2820:  MOVWF  x2D
2822:  MOVLB  0
2824:  CALL   1224
....................    strcpy(Menus.Letra," 150 Litros  "); 
2828:  MOVLW  05
282A:  MOVWF  FEA
282C:  MOVLW  08
282E:  MOVWF  FE9
2830:  MOVFF  FF2,528
2834:  BCF    FF2.7
2836:  MOVLW  00
2838:  CALL   0660
283C:  TBLRD*-
283E:  TBLRD*+
2840:  MOVF   FF5,W
2842:  MOVWF  FEE
2844:  IORLW  00
2846:  BNZ   283E
2848:  MOVLB  5
284A:  BTFSC  x28.7
284C:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,35,0,2); 
284E:  MOVLW  05
2850:  MOVWF  x29
2852:  MOVLW  08
2854:  MOVWF  x28
2856:  CLRF   x2A
2858:  MOVLW  23
285A:  MOVWF  x2B
285C:  CLRF   x2C
285E:  MOVLW  02
2860:  MOVWF  x2D
2862:  MOVLB  0
2864:  CALL   1224
....................    delay_ms(1000); 
2868:  MOVLW  04
286A:  MOVLB  5
286C:  MOVWF  x28
286E:  MOVLW  FA
2870:  MOVWF  x29
2872:  MOVLB  0
2874:  CALL   131E
2878:  MOVLB  5
287A:  DECFSZ x28,F
287C:  BRA    286E
....................    delay_ms(1000); 
287E:  MOVLW  04
2880:  MOVWF  x28
2882:  MOVLW  FA
2884:  MOVWF  x29
2886:  MOVLB  0
2888:  CALL   131E
288C:  MOVLB  5
288E:  DECFSZ x28,F
2890:  BRA    2882
....................     
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2892:  CLRF   x29
2894:  MOVLB  0
2896:  CALL   0BF4
....................    displayContrasena(Contrasena[0],20,30,1); 
289A:  MOVFF  4A2,52A
289E:  MOVLW  14
28A0:  MOVLB  5
28A2:  MOVWF  x2B
28A4:  MOVLW  1E
28A6:  MOVWF  x2C
28A8:  MOVLW  01
28AA:  MOVWF  x2D
28AC:  MOVLB  0
28AE:  CALL   1474
....................    displayContrasena(Contrasena[1],40,30,0); 
28B2:  MOVFF  4A3,52A
28B6:  MOVLW  28
28B8:  MOVLB  5
28BA:  MOVWF  x2B
28BC:  MOVLW  1E
28BE:  MOVWF  x2C
28C0:  CLRF   x2D
28C2:  MOVLB  0
28C4:  CALL   1474
....................    displayContrasena(Contrasena[2],60,30,0); 
28C8:  MOVFF  4A4,52A
28CC:  MOVLW  3C
28CE:  MOVLB  5
28D0:  MOVWF  x2B
28D2:  MOVLW  1E
28D4:  MOVWF  x2C
28D6:  CLRF   x2D
28D8:  MOVLB  0
28DA:  CALL   1474
....................    displayContrasena(Contrasena[3],80,30,0); 
28DE:  MOVFF  4A5,52A
28E2:  MOVLW  50
28E4:  MOVLB  5
28E6:  MOVWF  x2B
28E8:  MOVLW  1E
28EA:  MOVWF  x2C
28EC:  CLRF   x2D
28EE:  MOVLB  0
28F0:  CALL   1474
....................    EnviarCodigo(); 
28F4:  CALL   152A
....................    delay_ms(500); 
28F8:  MOVLW  02
28FA:  MOVLB  5
28FC:  MOVWF  x28
28FE:  MOVLW  FA
2900:  MOVWF  x29
2902:  MOVLB  0
2904:  CALL   131E
2908:  MOVLB  5
290A:  DECFSZ x28,F
290C:  BRA    28FE
....................    Determina(); 
290E:  MOVLB  0
2910:  CALL   199C
....................    delay_ms(500); 
2914:  MOVLW  02
2916:  MOVLB  5
2918:  MOVWF  x28
291A:  MOVLW  FA
291C:  MOVWF  x29
291E:  MOVLB  0
2920:  CALL   131E
2924:  MOVLB  5
2926:  DECFSZ x28,F
2928:  BRA    291A
....................    Parada=1; 
292A:  MOVLW  01
292C:  MOVLB  4
292E:  MOVWF  x5F
....................    while(true) 
....................    { 
....................       glcd_update(); 
2930:  MOVLB  0
2932:  CALL   0C4E
....................       if(CadenaRecibida==1) 
2936:  MOVLB  4
2938:  BTFSS  x6B.3
293A:  BRA    294A
....................       { 
....................          Determina(); 
293C:  MOVLB  0
293E:  CALL   199C
....................          EnviarCodigo(); 
2942:  CALL   152A
....................          CadenaRecibida=0; 
2946:  MOVLB  4
2948:  BCF    x6B.3
....................       } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
294A:  MOVF   x77,F
294C:  BTFSS  FD8.2
294E:  BRA    2EE4
....................        
....................       strcpy(Menus.Letra,"Clave"); 
2950:  MOVLW  05
2952:  MOVWF  FEA
2954:  MOVLW  08
2956:  MOVWF  FE9
2958:  MOVFF  FF2,528
295C:  BCF    FF2.7
295E:  MOVLW  00
2960:  MOVLB  0
2962:  CALL   067E
2966:  TBLRD*-
2968:  TBLRD*+
296A:  MOVF   FF5,W
296C:  MOVWF  FEE
296E:  IORLW  00
2970:  BNZ   2968
2972:  MOVLB  5
2974:  BTFSC  x28.7
2976:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
2978:  MOVLW  05
297A:  MOVWF  x29
297C:  MOVLW  08
297E:  MOVWF  x28
2980:  MOVLW  1E
2982:  MOVWF  x2A
2984:  CLRF   x2B
2986:  MOVLW  01
2988:  MOVWF  x2C
298A:  MOVLW  02
298C:  MOVWF  x2D
298E:  MOVLB  0
2990:  CALL   1224
....................        
....................       if(UP)//Si oprime hacia arriba 
2994:  BSF    F92.5
2996:  BTFSS  F80.5
2998:  BRA    2A70
....................       { 
....................          if(Flanco == 0) 
299A:  MOVLB  4
299C:  BTFSC  x6A.0
299E:  BRA    2A6E
....................          { 
....................             Flanco = 1;delay_ms(30); 
29A0:  BSF    x6A.0
29A2:  MOVLW  1E
29A4:  MOVLB  5
29A6:  MOVWF  x29
29A8:  MOVLB  0
29AA:  CALL   131E
....................             for(i=1;i<=4;i++) 
29AE:  MOVLW  01
29B0:  MOVLB  4
29B2:  MOVWF  x7B
29B4:  MOVF   x7B,W
29B6:  SUBLW  04
29B8:  BNC   2A6E
....................             { 
....................                if(unidad==i) 
29BA:  MOVF   x7B,W
29BC:  SUBWF  x78,W
29BE:  BNZ   2A36
....................                { 
....................                   Contrasena[i-1]++; 
29C0:  MOVLW  01
29C2:  SUBWF  x7B,W
29C4:  CLRF   03
29C6:  ADDLW  A2
29C8:  MOVWF  FE9
29CA:  MOVLW  04
29CC:  ADDWFC 03,W
29CE:  MOVWF  FEA
29D0:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
29D2:  MOVLW  01
29D4:  SUBWF  x7B,W
29D6:  CLRF   03
29D8:  ADDLW  A2
29DA:  MOVWF  FE9
29DC:  MOVLW  04
29DE:  ADDWFC 03,W
29E0:  MOVWF  FEA
29E2:  BTFSC  FEF.7
29E4:  BRA    29FE
29E6:  MOVF   FEF,W
29E8:  SUBLW  09
29EA:  BC    29FE
....................                   { 
....................                      Contrasena[i-1]=0; 
29EC:  MOVLW  01
29EE:  SUBWF  x7B,W
29F0:  CLRF   03
29F2:  ADDLW  A2
29F4:  MOVWF  FE9
29F6:  MOVLW  04
29F8:  ADDWFC 03,W
29FA:  MOVWF  FEA
29FC:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
29FE:  MOVLW  01
2A00:  SUBWF  x7B,W
2A02:  CLRF   03
2A04:  ADDLW  A2
2A06:  MOVWF  FE9
2A08:  MOVLW  04
2A0A:  ADDWFC 03,W
2A0C:  MOVWF  FEA
2A0E:  MOVFF  FEF,528
2A12:  MOVF   x7B,W
2A14:  MULLW  14
2A16:  MOVFF  FF3,529
2A1A:  MOVLB  5
2A1C:  MOVFF  528,52A
2A20:  MOVFF  529,52B
2A24:  MOVLW  1E
2A26:  MOVWF  x2C
2A28:  MOVLW  01
2A2A:  MOVWF  x2D
2A2C:  MOVLB  0
2A2E:  CALL   1474
....................                } 
....................                else 
2A32:  BRA    2A68
2A34:  MOVLB  4
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
2A36:  MOVLW  01
2A38:  SUBWF  x7B,W
2A3A:  CLRF   03
2A3C:  ADDLW  A2
2A3E:  MOVWF  FE9
2A40:  MOVLW  04
2A42:  ADDWFC 03,W
2A44:  MOVWF  FEA
2A46:  MOVFF  FEF,528
2A4A:  MOVF   x7B,W
2A4C:  MULLW  14
2A4E:  MOVFF  FF3,529
2A52:  MOVLB  5
2A54:  MOVFF  528,52A
2A58:  MOVFF  529,52B
2A5C:  MOVLW  1E
2A5E:  MOVWF  x2C
2A60:  CLRF   x2D
2A62:  MOVLB  0
2A64:  CALL   1474
....................                } 
....................             } 
2A68:  MOVLB  4
2A6A:  INCF   x7B,F
2A6C:  BRA    29B4
....................          } 
....................       } 
....................          else 
2A6E:  BRA    2A74
....................             {Flanco = 0;} 
2A70:  MOVLB  4
2A72:  BCF    x6A.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2A74:  BSF    F96.0
2A76:  BTFSS  F84.0
2A78:  BRA    2B4C
....................       { 
....................          if(Flanco2 == 0) 
2A7A:  BTFSC  x6A.2
2A7C:  BRA    2B4A
....................             {Flanco2 = 1;delay_ms(30); 
2A7E:  BSF    x6A.2
2A80:  MOVLW  1E
2A82:  MOVLB  5
2A84:  MOVWF  x29
2A86:  MOVLB  0
2A88:  CALL   131E
....................                for(i=1;i<=4;i++) 
2A8C:  MOVLW  01
2A8E:  MOVLB  4
2A90:  MOVWF  x7B
2A92:  MOVF   x7B,W
2A94:  SUBLW  04
2A96:  BNC   2B4A
....................                { 
....................                   if(unidad==i) 
2A98:  MOVF   x7B,W
2A9A:  SUBWF  x78,W
2A9C:  BNZ   2B12
....................                   {Contrasena[i-1]--;  
2A9E:  MOVLW  01
2AA0:  SUBWF  x7B,W
2AA2:  CLRF   03
2AA4:  ADDLW  A2
2AA6:  MOVWF  FE9
2AA8:  MOVLW  04
2AAA:  ADDWFC 03,W
2AAC:  MOVWF  FEA
2AAE:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
2AB0:  MOVLW  01
2AB2:  SUBWF  x7B,W
2AB4:  CLRF   03
2AB6:  ADDLW  A2
2AB8:  MOVWF  FE9
2ABA:  MOVLW  04
2ABC:  ADDWFC 03,W
2ABE:  MOVWF  FEA
2AC0:  BTFSC  FEF.7
2AC2:  BRA    2AC6
2AC4:  BRA    2ADA
....................                         {Contrasena[i-1]=9;} 
2AC6:  MOVLW  01
2AC8:  SUBWF  x7B,W
2ACA:  CLRF   03
2ACC:  ADDLW  A2
2ACE:  MOVWF  FE9
2AD0:  MOVLW  04
2AD2:  ADDWFC 03,W
2AD4:  MOVWF  FEA
2AD6:  MOVLW  09
2AD8:  MOVWF  FEF
....................                    displayContrasena(Contrasena[i-1],i*20,30,1);} 
2ADA:  MOVLW  01
2ADC:  SUBWF  x7B,W
2ADE:  CLRF   03
2AE0:  ADDLW  A2
2AE2:  MOVWF  FE9
2AE4:  MOVLW  04
2AE6:  ADDWFC 03,W
2AE8:  MOVWF  FEA
2AEA:  MOVFF  FEF,528
2AEE:  MOVF   x7B,W
2AF0:  MULLW  14
2AF2:  MOVFF  FF3,529
2AF6:  MOVLB  5
2AF8:  MOVFF  528,52A
2AFC:  MOVFF  529,52B
2B00:  MOVLW  1E
2B02:  MOVWF  x2C
2B04:  MOVLW  01
2B06:  MOVWF  x2D
2B08:  MOVLB  0
2B0A:  CALL   1474
....................                   else 
2B0E:  BRA    2B44
2B10:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
2B12:  MOVLW  01
2B14:  SUBWF  x7B,W
2B16:  CLRF   03
2B18:  ADDLW  A2
2B1A:  MOVWF  FE9
2B1C:  MOVLW  04
2B1E:  ADDWFC 03,W
2B20:  MOVWF  FEA
2B22:  MOVFF  FEF,528
2B26:  MOVF   x7B,W
2B28:  MULLW  14
2B2A:  MOVFF  FF3,529
2B2E:  MOVLB  5
2B30:  MOVFF  528,52A
2B34:  MOVFF  529,52B
2B38:  MOVLW  1E
2B3A:  MOVWF  x2C
2B3C:  CLRF   x2D
2B3E:  MOVLB  0
2B40:  CALL   1474
....................                }       
2B44:  MOVLB  4
2B46:  INCF   x7B,F
2B48:  BRA    2A92
....................             }      
....................       } 
....................          else 
2B4A:  BRA    2B4E
....................             {Flanco2 = 0;}   
2B4C:  BCF    x6A.2
....................              
....................       if(RIGHT)//Si oprime RIGHT 
2B4E:  BSF    F96.1
2B50:  BTFSS  F84.1
2B52:  BRA    2BEC
....................       { 
....................          if(Flanco1 == 0) 
2B54:  BTFSC  x6A.1
2B56:  BRA    2BEA
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
2B58:  BSF    x6A.1
2B5A:  MOVLW  1E
2B5C:  MOVLB  5
2B5E:  MOVWF  x29
2B60:  MOVLB  0
2B62:  CALL   131E
2B66:  MOVLB  4
2B68:  INCF   x78,F
....................                for(i=1;i<=4;i++) 
2B6A:  MOVLW  01
2B6C:  MOVWF  x7B
2B6E:  MOVF   x7B,W
2B70:  SUBLW  04
2B72:  BNC   2BEA
....................                { 
....................                   if(unidad==i) 
2B74:  MOVF   x7B,W
2B76:  SUBWF  x78,W
2B78:  BNZ   2BB2
....................                   {displayContrasena(Contrasena[i-1],i*20,30,1);} 
2B7A:  MOVLW  01
2B7C:  SUBWF  x7B,W
2B7E:  CLRF   03
2B80:  ADDLW  A2
2B82:  MOVWF  FE9
2B84:  MOVLW  04
2B86:  ADDWFC 03,W
2B88:  MOVWF  FEA
2B8A:  MOVFF  FEF,528
2B8E:  MOVF   x7B,W
2B90:  MULLW  14
2B92:  MOVFF  FF3,529
2B96:  MOVLB  5
2B98:  MOVFF  528,52A
2B9C:  MOVFF  529,52B
2BA0:  MOVLW  1E
2BA2:  MOVWF  x2C
2BA4:  MOVLW  01
2BA6:  MOVWF  x2D
2BA8:  MOVLB  0
2BAA:  CALL   1474
....................                   else 
2BAE:  BRA    2BE4
2BB0:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
2BB2:  MOVLW  01
2BB4:  SUBWF  x7B,W
2BB6:  CLRF   03
2BB8:  ADDLW  A2
2BBA:  MOVWF  FE9
2BBC:  MOVLW  04
2BBE:  ADDWFC 03,W
2BC0:  MOVWF  FEA
2BC2:  MOVFF  FEF,528
2BC6:  MOVF   x7B,W
2BC8:  MULLW  14
2BCA:  MOVFF  FF3,529
2BCE:  MOVLB  5
2BD0:  MOVFF  528,52A
2BD4:  MOVFF  529,52B
2BD8:  MOVLW  1E
2BDA:  MOVWF  x2C
2BDC:  CLRF   x2D
2BDE:  MOVLB  0
2BE0:  CALL   1474
....................                } 
2BE4:  MOVLB  4
2BE6:  INCF   x7B,F
2BE8:  BRA    2B6E
....................             } 
....................       } 
....................          else 
2BEA:  BRA    2BEE
....................             {Flanco1 = 0;}   
2BEC:  BCF    x6A.1
....................      
....................       if(unidad>4) 
2BEE:  MOVF   x78,W
2BF0:  SUBLW  04
2BF2:  BTFSC  FD8.0
2BF4:  BRA    2EE4
....................       {glcd_fillScreen(OFF);unidad=4; 
2BF6:  MOVLB  5
2BF8:  CLRF   x29
2BFA:  MOVLB  0
2BFC:  CALL   0BF4
2C00:  MOVLW  04
2C02:  MOVLB  4
2C04:  MOVWF  x78
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
2C06:  MOVF   xA2,W
2C08:  SUBLW  03
2C0A:  BNZ   2CF2
2C0C:  MOVF   xA3,W
2C0E:  SUBLW  08
2C10:  BNZ   2CF2
2C12:  MOVF   xA4,W
2C14:  SUBLW  09
2C16:  BNZ   2CF2
2C18:  MOVF   xA5,W
2C1A:  SUBLW  02
2C1C:  BNZ   2CF2
....................             {write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2C1E:  MOVLW  0A
2C20:  MOVWF  FA9
2C22:  CLRF   FA8
2C24:  BCF    FA6.6
2C26:  BCF    FA6.7
2C28:  BSF    FA6.2
2C2A:  MOVF   FF2,W
2C2C:  MOVWF  00
2C2E:  BCF    FF2.7
2C30:  MOVLB  F
2C32:  MOVLW  55
2C34:  MOVWF  FA7
2C36:  MOVLW  AA
2C38:  MOVWF  FA7
2C3A:  BSF    FA6.1
2C3C:  BTFSC  FA6.1
2C3E:  BRA    2C3C
2C40:  BCF    FA6.2
2C42:  MOVF   00,W
2C44:  IORWF  FF2,F
2C46:  MOVLW  14
2C48:  MOVLB  5
2C4A:  MOVWF  x29
2C4C:  MOVLB  0
2C4E:  CALL   131E
2C52:  MOVLW  0B
2C54:  MOVWF  FA9
2C56:  CLRF   FA8
2C58:  BCF    FA6.6
2C5A:  BCF    FA6.7
2C5C:  BSF    FA6.2
2C5E:  MOVF   FF2,W
2C60:  MOVWF  00
2C62:  BCF    FF2.7
2C64:  MOVLB  F
2C66:  MOVLW  55
2C68:  MOVWF  FA7
2C6A:  MOVLW  AA
2C6C:  MOVWF  FA7
2C6E:  BSF    FA6.1
2C70:  BTFSC  FA6.1
2C72:  BRA    2C70
2C74:  BCF    FA6.2
2C76:  MOVF   00,W
2C78:  IORWF  FF2,F
2C7A:  MOVLW  14
2C7C:  MOVLB  5
2C7E:  MOVWF  x29
2C80:  MOVLB  0
2C82:  CALL   131E
....................              write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
2C86:  MOVLW  0C
2C88:  MOVWF  FA9
2C8A:  CLRF   FA8
2C8C:  BCF    FA6.6
2C8E:  BCF    FA6.7
2C90:  BSF    FA6.2
2C92:  MOVF   FF2,W
2C94:  MOVWF  00
2C96:  BCF    FF2.7
2C98:  MOVLB  F
2C9A:  MOVLW  55
2C9C:  MOVWF  FA7
2C9E:  MOVLW  AA
2CA0:  MOVWF  FA7
2CA2:  BSF    FA6.1
2CA4:  BTFSC  FA6.1
2CA6:  BRA    2CA4
2CA8:  BCF    FA6.2
2CAA:  MOVF   00,W
2CAC:  IORWF  FF2,F
2CAE:  MOVLW  14
2CB0:  MOVLB  5
2CB2:  MOVWF  x29
2CB4:  MOVLB  0
2CB6:  CALL   131E
2CBA:  MOVLW  0D
2CBC:  MOVWF  FA9
2CBE:  CLRF   FA8
2CC0:  BCF    FA6.6
2CC2:  BCF    FA6.7
2CC4:  BSF    FA6.2
2CC6:  MOVF   FF2,W
2CC8:  MOVWF  00
2CCA:  BCF    FF2.7
2CCC:  MOVLB  F
2CCE:  MOVLW  55
2CD0:  MOVWF  FA7
2CD2:  MOVLW  AA
2CD4:  MOVWF  FA7
2CD6:  BSF    FA6.1
2CD8:  BTFSC  FA6.1
2CDA:  BRA    2CD8
2CDC:  BCF    FA6.2
2CDE:  MOVF   00,W
2CE0:  IORWF  FF2,F
2CE2:  MOVLW  14
2CE4:  MOVLB  5
2CE6:  MOVWF  x29
2CE8:  MOVLB  0
2CEA:  CALL   131E
....................              reset_cpu();}         
2CEE:  RESET
2CF0:  MOVLB  4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
2CF2:  MOVF   xA6,W
2CF4:  SUBWF  xA2,W
2CF6:  BNZ   2DC8
2CF8:  MOVF   xA7,W
2CFA:  SUBWF  xA3,W
2CFC:  BNZ   2DC8
2CFE:  MOVF   xA8,W
2D00:  SUBWF  xA4,W
2D02:  BNZ   2DC8
2D04:  MOVF   xA9,W
2D06:  SUBWF  xA5,W
2D08:  BNZ   2DC8
....................          { 
....................             glcd_fillScreen(OFF); 
2D0A:  MOVLB  5
2D0C:  CLRF   x29
2D0E:  MOVLB  0
2D10:  CALL   0BF4
....................             strcpy(Menus.Letra,"Clave"); 
2D14:  MOVLW  05
2D16:  MOVWF  FEA
2D18:  MOVLW  08
2D1A:  MOVWF  FE9
2D1C:  MOVFF  FF2,528
2D20:  BCF    FF2.7
2D22:  MOVLW  00
2D24:  CALL   067E
2D28:  TBLRD*-
2D2A:  TBLRD*+
2D2C:  MOVF   FF5,W
2D2E:  MOVWF  FEE
2D30:  IORLW  00
2D32:  BNZ   2D2A
2D34:  MOVLB  5
2D36:  BTFSC  x28.7
2D38:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
2D3A:  MOVLW  05
2D3C:  MOVWF  x29
2D3E:  MOVLW  08
2D40:  MOVWF  x28
2D42:  MOVLW  1E
2D44:  MOVWF  x2A
2D46:  CLRF   x2B
2D48:  CLRF   x2C
2D4A:  MOVLW  02
2D4C:  MOVWF  x2D
2D4E:  MOVLB  0
2D50:  CALL   1224
....................             strcpy(Menus.Letra,"Correcta"); 
2D54:  MOVLW  05
2D56:  MOVWF  FEA
2D58:  MOVLW  08
2D5A:  MOVWF  FE9
2D5C:  MOVFF  FF2,528
2D60:  BCF    FF2.7
2D62:  MOVLW  00
2D64:  CALL   0694
2D68:  TBLRD*-
2D6A:  TBLRD*+
2D6C:  MOVF   FF5,W
2D6E:  MOVWF  FEE
2D70:  IORLW  00
2D72:  BNZ   2D6A
2D74:  MOVLB  5
2D76:  BTFSC  x28.7
2D78:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
2D7A:  MOVLW  05
2D7C:  MOVWF  x29
2D7E:  MOVLW  08
2D80:  MOVWF  x28
2D82:  MOVLW  0F
2D84:  MOVWF  x2A
2D86:  MOVLW  1E
2D88:  MOVWF  x2B
2D8A:  CLRF   x2C
2D8C:  MOVLW  02
2D8E:  MOVWF  x2D
2D90:  MOVLB  0
2D92:  CALL   1224
....................             Menu=1;glcd_update();delay_ms(1000); 
2D96:  MOVLW  01
2D98:  MOVLB  4
2D9A:  MOVWF  x77
2D9C:  MOVLB  0
2D9E:  CALL   0C4E
2DA2:  MOVLW  04
2DA4:  MOVLB  5
2DA6:  MOVWF  x28
2DA8:  MOVLW  FA
2DAA:  MOVWF  x29
2DAC:  MOVLB  0
2DAE:  CALL   131E
2DB2:  MOVLB  5
2DB4:  DECFSZ x28,F
2DB6:  BRA    2DA8
....................             glcd_fillScreen(OFF);unidad=1; 
2DB8:  CLRF   x29
2DBA:  MOVLB  0
2DBC:  CALL   0BF4
2DC0:  MOVLW  01
2DC2:  MOVLB  4
2DC4:  MOVWF  x78
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
2DC6:  BRA    2EE4
....................          { 
....................             glcd_fillScreen(OFF); 
2DC8:  MOVLB  5
2DCA:  CLRF   x29
2DCC:  MOVLB  0
2DCE:  CALL   0BF4
....................             strcpy(Menus.Letra,"Clave"); 
2DD2:  MOVLW  05
2DD4:  MOVWF  FEA
2DD6:  MOVLW  08
2DD8:  MOVWF  FE9
2DDA:  MOVFF  FF2,528
2DDE:  BCF    FF2.7
2DE0:  MOVLW  00
2DE2:  CALL   067E
2DE6:  TBLRD*-
2DE8:  TBLRD*+
2DEA:  MOVF   FF5,W
2DEC:  MOVWF  FEE
2DEE:  IORLW  00
2DF0:  BNZ   2DE8
2DF2:  MOVLB  5
2DF4:  BTFSC  x28.7
2DF6:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
2DF8:  MOVLW  05
2DFA:  MOVWF  x29
2DFC:  MOVLW  08
2DFE:  MOVWF  x28
2E00:  MOVLW  1E
2E02:  MOVWF  x2A
2E04:  CLRF   x2B
2E06:  CLRF   x2C
2E08:  MOVLW  02
2E0A:  MOVWF  x2D
2E0C:  MOVLB  0
2E0E:  CALL   1224
....................             strcpy(Menus.Letra,"Incorrecta"); 
2E12:  MOVLW  05
2E14:  MOVWF  FEA
2E16:  MOVLW  08
2E18:  MOVWF  FE9
2E1A:  MOVFF  FF2,528
2E1E:  BCF    FF2.7
2E20:  MOVLW  00
2E22:  CALL   06AE
2E26:  TBLRD*-
2E28:  TBLRD*+
2E2A:  MOVF   FF5,W
2E2C:  MOVWF  FEE
2E2E:  IORLW  00
2E30:  BNZ   2E28
2E32:  MOVLB  5
2E34:  BTFSC  x28.7
2E36:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
2E38:  MOVLW  05
2E3A:  MOVWF  x29
2E3C:  MOVLW  08
2E3E:  MOVWF  x28
2E40:  CLRF   x2A
2E42:  MOVLW  1E
2E44:  MOVWF  x2B
2E46:  CLRF   x2C
2E48:  MOVLW  02
2E4A:  MOVWF  x2D
2E4C:  MOVLB  0
2E4E:  CALL   1224
....................             Menu=0;glcd_update();delay_ms(1000); 
2E52:  MOVLB  4
2E54:  CLRF   x77
2E56:  MOVLB  0
2E58:  CALL   0C4E
2E5C:  MOVLW  04
2E5E:  MOVLB  5
2E60:  MOVWF  x28
2E62:  MOVLW  FA
2E64:  MOVWF  x29
2E66:  MOVLB  0
2E68:  CALL   131E
2E6C:  MOVLB  5
2E6E:  DECFSZ x28,F
2E70:  BRA    2E62
....................             glcd_fillScreen(OFF);unidad=1; 
2E72:  CLRF   x29
2E74:  MOVLB  0
2E76:  CALL   0BF4
2E7A:  MOVLW  01
2E7C:  MOVLB  4
2E7E:  MOVWF  x78
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
2E80:  CLRF   xA2
2E82:  CLRF   xA3
2E84:  CLRF   xA4
2E86:  CLRF   xA5
....................             displayContrasena(Contrasena[0],20,30,1); 
2E88:  MOVFF  4A2,52A
2E8C:  MOVLW  14
2E8E:  MOVLB  5
2E90:  MOVWF  x2B
2E92:  MOVLW  1E
2E94:  MOVWF  x2C
2E96:  MOVLW  01
2E98:  MOVWF  x2D
2E9A:  MOVLB  0
2E9C:  CALL   1474
....................             displayContrasena(Contrasena[1],40,30,0); 
2EA0:  MOVFF  4A3,52A
2EA4:  MOVLW  28
2EA6:  MOVLB  5
2EA8:  MOVWF  x2B
2EAA:  MOVLW  1E
2EAC:  MOVWF  x2C
2EAE:  CLRF   x2D
2EB0:  MOVLB  0
2EB2:  CALL   1474
....................             displayContrasena(Contrasena[2],60,30,0); 
2EB6:  MOVFF  4A4,52A
2EBA:  MOVLW  3C
2EBC:  MOVLB  5
2EBE:  MOVWF  x2B
2EC0:  MOVLW  1E
2EC2:  MOVWF  x2C
2EC4:  CLRF   x2D
2EC6:  MOVLB  0
2EC8:  CALL   1474
....................             displayContrasena(Contrasena[3],80,30,0); 
2ECC:  MOVFF  4A5,52A
2ED0:  MOVLW  50
2ED2:  MOVLB  5
2ED4:  MOVWF  x2B
2ED6:  MOVLW  1E
2ED8:  MOVWF  x2C
2EDA:  CLRF   x2D
2EDC:  MOVLB  0
2EDE:  CALL   1474
2EE2:  MOVLB  4
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1){ //Menu Principal.       
2EE4:  DECFSZ x77,W
2EE6:  BRA    331C
....................        
....................       if(visual==1) 
2EE8:  BTFSS  x6A.4
2EEA:  BRA    32A2
....................       { 
....................          if(Opcion>6) 
2EEC:  MOVF   x7E,W
2EEE:  SUBLW  06
2EF0:  BC    2EF6
....................          {Opcion=1;} 
2EF2:  MOVLW  01
2EF4:  MOVWF  x7E
....................          if(Opcion<1) 
2EF6:  MOVF   x7E,F
2EF8:  BNZ   2EFE
....................          {Opcion=6;} 
2EFA:  MOVLW  06
2EFC:  MOVWF  x7E
....................           
....................          strcpy(Menus.Letra,"Menu Principal"); 
2EFE:  MOVLW  05
2F00:  MOVWF  FEA
2F02:  MOVLW  08
2F04:  MOVWF  FE9
2F06:  MOVFF  FF2,528
2F0A:  BCF    FF2.7
2F0C:  MOVLW  00
2F0E:  MOVLB  0
2F10:  CALL   06CA
2F14:  TBLRD*-
2F16:  TBLRD*+
2F18:  MOVF   FF5,W
2F1A:  MOVWF  FEE
2F1C:  IORLW  00
2F1E:  BNZ   2F16
2F20:  MOVLB  5
2F22:  BTFSC  x28.7
2F24:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,1); 
2F26:  MOVLW  05
2F28:  MOVWF  x29
2F2A:  MOVLW  08
2F2C:  MOVWF  x28
2F2E:  MOVLW  1E
2F30:  MOVWF  x2A
2F32:  CLRF   x2B
2F34:  MOVLW  01
2F36:  MOVWF  x2C
2F38:  MOVWF  x2D
2F3A:  MOVLB  0
2F3C:  CALL   1224
....................        
....................          if(Opcion==1)    
2F40:  MOVLB  4
2F42:  DECFSZ x7E,W
2F44:  BRA    2F8C
....................             {strcpy(Menus.Letra,"Caucho"); 
2F46:  MOVLW  05
2F48:  MOVWF  FEA
2F4A:  MOVLW  08
2F4C:  MOVWF  FE9
2F4E:  MOVFF  FF2,528
2F52:  BCF    FF2.7
2F54:  MOVLW  00
2F56:  MOVLB  0
2F58:  CALL   06EA
2F5C:  TBLRD*-
2F5E:  TBLRD*+
2F60:  MOVF   FF5,W
2F62:  MOVWF  FEE
2F64:  IORLW  00
2F66:  BNZ   2F5E
2F68:  MOVLB  5
2F6A:  BTFSC  x28.7
2F6C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,1,1);} 
2F6E:  MOVLW  05
2F70:  MOVWF  x29
2F72:  MOVLW  08
2F74:  MOVWF  x28
2F76:  CLRF   x2A
2F78:  MOVLW  0A
2F7A:  MOVWF  x2B
2F7C:  MOVLW  01
2F7E:  MOVWF  x2C
2F80:  MOVWF  x2D
2F82:  MOVLB  0
2F84:  CALL   1224
....................          else 
2F88:  BRA    2FCE
2F8A:  MOVLB  4
....................             {strcpy(Menus.Letra,"Caucho"); 
2F8C:  MOVLW  05
2F8E:  MOVWF  FEA
2F90:  MOVLW  08
2F92:  MOVWF  FE9
2F94:  MOVFF  FF2,528
2F98:  BCF    FF2.7
2F9A:  MOVLW  00
2F9C:  MOVLB  0
2F9E:  CALL   06EA
2FA2:  TBLRD*-
2FA4:  TBLRD*+
2FA6:  MOVF   FF5,W
2FA8:  MOVWF  FEE
2FAA:  IORLW  00
2FAC:  BNZ   2FA4
2FAE:  MOVLB  5
2FB0:  BTFSC  x28.7
2FB2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,0,1);} 
2FB4:  MOVLW  05
2FB6:  MOVWF  x29
2FB8:  MOVLW  08
2FBA:  MOVWF  x28
2FBC:  CLRF   x2A
2FBE:  MOVLW  0A
2FC0:  MOVWF  x2B
2FC2:  CLRF   x2C
2FC4:  MOVLW  01
2FC6:  MOVWF  x2D
2FC8:  MOVLB  0
2FCA:  CALL   1224
....................           
....................          if(Opcion==2)    
2FCE:  MOVLB  4
2FD0:  MOVF   x7E,W
2FD2:  SUBLW  02
2FD4:  BNZ   301C
....................             {strcpy(Menus.Letra,"Liquidos"); 
2FD6:  MOVLW  05
2FD8:  MOVWF  FEA
2FDA:  MOVLW  08
2FDC:  MOVWF  FE9
2FDE:  MOVFF  FF2,528
2FE2:  BCF    FF2.7
2FE4:  MOVLW  00
2FE6:  MOVLB  0
2FE8:  CALL   0702
2FEC:  TBLRD*-
2FEE:  TBLRD*+
2FF0:  MOVF   FF5,W
2FF2:  MOVWF  FEE
2FF4:  IORLW  00
2FF6:  BNZ   2FEE
2FF8:  MOVLB  5
2FFA:  BTFSC  x28.7
2FFC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,1,1);} 
2FFE:  MOVLW  05
3000:  MOVWF  x29
3002:  MOVLW  08
3004:  MOVWF  x28
3006:  CLRF   x2A
3008:  MOVLW  13
300A:  MOVWF  x2B
300C:  MOVLW  01
300E:  MOVWF  x2C
3010:  MOVWF  x2D
3012:  MOVLB  0
3014:  CALL   1224
....................          else 
3018:  BRA    305E
301A:  MOVLB  4
....................             {strcpy(Menus.Letra,"Liquidos"); 
301C:  MOVLW  05
301E:  MOVWF  FEA
3020:  MOVLW  08
3022:  MOVWF  FE9
3024:  MOVFF  FF2,528
3028:  BCF    FF2.7
302A:  MOVLW  00
302C:  MOVLB  0
302E:  CALL   0702
3032:  TBLRD*-
3034:  TBLRD*+
3036:  MOVF   FF5,W
3038:  MOVWF  FEE
303A:  IORLW  00
303C:  BNZ   3034
303E:  MOVLB  5
3040:  BTFSC  x28.7
3042:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,0,1);}    
3044:  MOVLW  05
3046:  MOVWF  x29
3048:  MOVLW  08
304A:  MOVWF  x28
304C:  CLRF   x2A
304E:  MOVLW  13
3050:  MOVWF  x2B
3052:  CLRF   x2C
3054:  MOVLW  01
3056:  MOVWF  x2D
3058:  MOVLB  0
305A:  CALL   1224
....................              
....................           if(Opcion==3)    
305E:  MOVLB  4
3060:  MOVF   x7E,W
3062:  SUBLW  03
3064:  BNZ   30AC
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
3066:  MOVLW  05
3068:  MOVWF  FEA
306A:  MOVLW  08
306C:  MOVWF  FE9
306E:  MOVFF  FF2,528
3072:  BCF    FF2.7
3074:  MOVLW  00
3076:  MOVLB  0
3078:  CALL   071C
307C:  TBLRD*-
307E:  TBLRD*+
3080:  MOVF   FF5,W
3082:  MOVWF  FEE
3084:  IORLW  00
3086:  BNZ   307E
3088:  MOVLB  5
308A:  BTFSC  x28.7
308C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,1,1);} 
308E:  MOVLW  05
3090:  MOVWF  x29
3092:  MOVLW  08
3094:  MOVWF  x28
3096:  CLRF   x2A
3098:  MOVLW  1C
309A:  MOVWF  x2B
309C:  MOVLW  01
309E:  MOVWF  x2C
30A0:  MOVWF  x2D
30A2:  MOVLB  0
30A4:  CALL   1224
....................          else 
30A8:  BRA    30EE
30AA:  MOVLB  4
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
30AC:  MOVLW  05
30AE:  MOVWF  FEA
30B0:  MOVLW  08
30B2:  MOVWF  FE9
30B4:  MOVFF  FF2,528
30B8:  BCF    FF2.7
30BA:  MOVLW  00
30BC:  MOVLB  0
30BE:  CALL   071C
30C2:  TBLRD*-
30C4:  TBLRD*+
30C6:  MOVF   FF5,W
30C8:  MOVWF  FEE
30CA:  IORLW  00
30CC:  BNZ   30C4
30CE:  MOVLB  5
30D0:  BTFSC  x28.7
30D2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,0,1);} 
30D4:  MOVLW  05
30D6:  MOVWF  x29
30D8:  MOVLW  08
30DA:  MOVWF  x28
30DC:  CLRF   x2A
30DE:  MOVLW  1C
30E0:  MOVWF  x2B
30E2:  CLRF   x2C
30E4:  MOVLW  01
30E6:  MOVWF  x2D
30E8:  MOVLB  0
30EA:  CALL   1224
....................              
....................          if(Opcion==4)    
30EE:  MOVLB  4
30F0:  MOVF   x7E,W
30F2:  SUBLW  04
30F4:  BNZ   313C
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
30F6:  MOVLW  05
30F8:  MOVWF  FEA
30FA:  MOVLW  08
30FC:  MOVWF  FE9
30FE:  MOVFF  FF2,528
3102:  BCF    FF2.7
3104:  MOVLW  00
3106:  MOVLB  0
3108:  CALL   0740
310C:  TBLRD*-
310E:  TBLRD*+
3110:  MOVF   FF5,W
3112:  MOVWF  FEE
3114:  IORLW  00
3116:  BNZ   310E
3118:  MOVLB  5
311A:  BTFSC  x28.7
311C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,1,1);} 
311E:  MOVLW  05
3120:  MOVWF  x29
3122:  MOVLW  08
3124:  MOVWF  x28
3126:  CLRF   x2A
3128:  MOVLW  25
312A:  MOVWF  x2B
312C:  MOVLW  01
312E:  MOVWF  x2C
3130:  MOVWF  x2D
3132:  MOVLB  0
3134:  CALL   1224
....................          else 
3138:  BRA    317E
313A:  MOVLB  4
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
313C:  MOVLW  05
313E:  MOVWF  FEA
3140:  MOVLW  08
3142:  MOVWF  FE9
3144:  MOVFF  FF2,528
3148:  BCF    FF2.7
314A:  MOVLW  00
314C:  MOVLB  0
314E:  CALL   0740
3152:  TBLRD*-
3154:  TBLRD*+
3156:  MOVF   FF5,W
3158:  MOVWF  FEE
315A:  IORLW  00
315C:  BNZ   3154
315E:  MOVLB  5
3160:  BTFSC  x28.7
3162:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,0,1);}    
3164:  MOVLW  05
3166:  MOVWF  x29
3168:  MOVLW  08
316A:  MOVWF  x28
316C:  CLRF   x2A
316E:  MOVLW  25
3170:  MOVWF  x2B
3172:  CLRF   x2C
3174:  MOVLW  01
3176:  MOVWF  x2D
3178:  MOVLB  0
317A:  CALL   1224
....................              
....................          if(Opcion==5)    
317E:  MOVLB  4
3180:  MOVF   x7E,W
3182:  SUBLW  05
3184:  BNZ   31CC
....................             {strcpy(Menus.Letra,"Personalizado"); 
3186:  MOVLW  05
3188:  MOVWF  FEA
318A:  MOVLW  08
318C:  MOVWF  FE9
318E:  MOVFF  FF2,528
3192:  BCF    FF2.7
3194:  MOVLW  00
3196:  MOVLB  0
3198:  CALL   0766
319C:  TBLRD*-
319E:  TBLRD*+
31A0:  MOVF   FF5,W
31A2:  MOVWF  FEE
31A4:  IORLW  00
31A6:  BNZ   319E
31A8:  MOVLB  5
31AA:  BTFSC  x28.7
31AC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,1,1);} 
31AE:  MOVLW  05
31B0:  MOVWF  x29
31B2:  MOVLW  08
31B4:  MOVWF  x28
31B6:  CLRF   x2A
31B8:  MOVLW  2E
31BA:  MOVWF  x2B
31BC:  MOVLW  01
31BE:  MOVWF  x2C
31C0:  MOVWF  x2D
31C2:  MOVLB  0
31C4:  CALL   1224
....................          else 
31C8:  BRA    320E
31CA:  MOVLB  4
....................             {strcpy(Menus.Letra,"Personalizado"); 
31CC:  MOVLW  05
31CE:  MOVWF  FEA
31D0:  MOVLW  08
31D2:  MOVWF  FE9
31D4:  MOVFF  FF2,528
31D8:  BCF    FF2.7
31DA:  MOVLW  00
31DC:  MOVLB  0
31DE:  CALL   0766
31E2:  TBLRD*-
31E4:  TBLRD*+
31E6:  MOVF   FF5,W
31E8:  MOVWF  FEE
31EA:  IORLW  00
31EC:  BNZ   31E4
31EE:  MOVLB  5
31F0:  BTFSC  x28.7
31F2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,0,1);}   
31F4:  MOVLW  05
31F6:  MOVWF  x29
31F8:  MOVLW  08
31FA:  MOVWF  x28
31FC:  CLRF   x2A
31FE:  MOVLW  2E
3200:  MOVWF  x2B
3202:  CLRF   x2C
3204:  MOVLW  01
3206:  MOVWF  x2D
3208:  MOVLB  0
320A:  CALL   1224
....................              
....................          if(Opcion==6)    
320E:  MOVLB  4
3210:  MOVF   x7E,W
3212:  SUBLW  06
3214:  BNZ   325C
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
3216:  MOVLW  05
3218:  MOVWF  FEA
321A:  MOVLW  08
321C:  MOVWF  FE9
321E:  MOVFF  FF2,528
3222:  BCF    FF2.7
3224:  MOVLW  00
3226:  MOVLB  0
3228:  CALL   0784
322C:  TBLRD*-
322E:  TBLRD*+
3230:  MOVF   FF5,W
3232:  MOVWF  FEE
3234:  IORLW  00
3236:  BNZ   322E
3238:  MOVLB  5
323A:  BTFSC  x28.7
323C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,1,1);} 
323E:  MOVLW  05
3240:  MOVWF  x29
3242:  MOVLW  08
3244:  MOVWF  x28
3246:  CLRF   x2A
3248:  MOVLW  37
324A:  MOVWF  x2B
324C:  MOVLW  01
324E:  MOVWF  x2C
3250:  MOVWF  x2D
3252:  MOVLB  0
3254:  CALL   1224
....................          else 
3258:  BRA    329E
325A:  MOVLB  4
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
325C:  MOVLW  05
325E:  MOVWF  FEA
3260:  MOVLW  08
3262:  MOVWF  FE9
3264:  MOVFF  FF2,528
3268:  BCF    FF2.7
326A:  MOVLW  00
326C:  MOVLB  0
326E:  CALL   0784
3272:  TBLRD*-
3274:  TBLRD*+
3276:  MOVF   FF5,W
3278:  MOVWF  FEE
327A:  IORLW  00
327C:  BNZ   3274
327E:  MOVLB  5
3280:  BTFSC  x28.7
3282:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,0,1);}      
3284:  MOVLW  05
3286:  MOVWF  x29
3288:  MOVLW  08
328A:  MOVWF  x28
328C:  CLRF   x2A
328E:  MOVLW  37
3290:  MOVWF  x2B
3292:  CLRF   x2C
3294:  MOVLW  01
3296:  MOVWF  x2D
3298:  MOVLB  0
329A:  CALL   1224
....................             visual=0; 
329E:  MOVLB  4
32A0:  BCF    x6A.4
....................       } 
....................       if(UP)//Si oprime hacia arriba 
32A2:  BSF    F92.5
32A4:  BTFSS  F80.5
32A6:  BRA    32C2
....................          {  if(Flanco == 0)  
32A8:  BTFSC  x6A.0
32AA:  BRA    32C0
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
32AC:  BSF    x6A.0
32AE:  MOVLW  1E
32B0:  MOVLB  5
32B2:  MOVWF  x29
32B4:  MOVLB  0
32B6:  CALL   131E
32BA:  MOVLB  4
32BC:  DECF   x7E,F
32BE:  BSF    x6A.4
....................                } 
....................          } 
....................             else 
32C0:  BRA    32C4
....................                {Flanco = 0;} 
32C2:  BCF    x6A.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
32C4:  BSF    F96.0
32C6:  BTFSS  F84.0
32C8:  BRA    32E4
....................          {  if(Flanco2 == 0)  
32CA:  BTFSC  x6A.2
32CC:  BRA    32E2
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
32CE:  BSF    x6A.2
32D0:  MOVLW  1E
32D2:  MOVLB  5
32D4:  MOVWF  x29
32D6:  MOVLB  0
32D8:  CALL   131E
32DC:  MOVLB  4
32DE:  INCF   x7E,F
32E0:  BSF    x6A.4
....................                }      
....................          } 
....................             else 
32E2:  BRA    32E6
....................                {Flanco2 = 0;}   
32E4:  BCF    x6A.2
....................                 
....................        if(RIGHT)//Si oprime SET 
32E6:  BSF    F96.1
32E8:  BTFSS  F84.1
32EA:  BRA    331A
....................          {  if(Flanco1 == 0)  
32EC:  BTFSC  x6A.1
32EE:  BRA    3318
....................                {Flanco1 = 1;delay_ms(30);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);visual=1; 
32F0:  BSF    x6A.1
32F2:  MOVLW  1E
32F4:  MOVLB  5
32F6:  MOVWF  x29
32F8:  MOVLB  0
32FA:  CALL   131E
32FE:  MOVLW  03
3300:  MOVLB  4
3302:  ADDWF  x7E,W
3304:  MOVWF  x77
3306:  MOVLW  01
3308:  MOVWF  x7E
330A:  MOVLB  5
330C:  CLRF   x29
330E:  MOVLB  0
3310:  CALL   0BF4
3314:  MOVLB  4
3316:  BSF    x6A.4
....................                } 
....................          } 
....................             else 
3318:  BRA    331C
....................                {Flanco1 = 0;}   
331A:  BCF    x6A.1
....................          /*       
....................          if(LEFT)//Si oprime boton de Toma. 
....................          {delay_ms(700);Menu=2;glcd_fillscreen(OFF);}*/ 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
.................... //-Sub-Menus de selección de proceso. 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==4){ // Menu de Pre-ciclo 
331C:  MOVF   x77,W
331E:  SUBLW  04
3320:  BTFSS  FD8.2
3322:  BRA    364E
....................        
....................       if(visual==1) 
3324:  BTFSS  x6A.4
3326:  BRA    347C
....................       { 
....................          glcd_imagen(2); //Guante 
3328:  MOVLW  02
332A:  MOVLB  5
332C:  MOVWF  x28
332E:  MOVLB  0
3330:  CALL   1A86
....................          strcpy(Menus.Letra,"Caucho"); 
3334:  MOVLW  05
3336:  MOVWF  FEA
3338:  MOVLW  08
333A:  MOVWF  FE9
333C:  MOVFF  FF2,528
3340:  BCF    FF2.7
3342:  MOVLW  00
3344:  CALL   06EA
3348:  TBLRD*-
334A:  TBLRD*+
334C:  MOVF   FF5,W
334E:  MOVWF  FEE
3350:  IORLW  00
3352:  BNZ   334A
3354:  MOVLB  5
3356:  BTFSC  x28.7
3358:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
335A:  MOVLW  05
335C:  MOVWF  x29
335E:  MOVLW  08
3360:  MOVWF  x28
3362:  MOVLW  14
3364:  MOVWF  x2A
3366:  CLRF   x2B
3368:  MOVLW  01
336A:  MOVWF  x2C
336C:  MOVLW  02
336E:  MOVWF  x2D
3370:  MOVLB  0
3372:  CALL   1224
....................          
....................          strcpy(Menus.Letra,"Caucho"); 
3376:  MOVLW  05
3378:  MOVWF  FEA
337A:  MOVLW  08
337C:  MOVWF  FE9
337E:  MOVFF  FF2,528
3382:  BCF    FF2.7
3384:  MOVLW  00
3386:  CALL   06EA
338A:  TBLRD*-
338C:  TBLRD*+
338E:  MOVF   FF5,W
3390:  MOVWF  FEE
3392:  IORLW  00
3394:  BNZ   338C
3396:  MOVLB  5
3398:  BTFSC  x28.7
339A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,0,1); 
339C:  MOVLW  05
339E:  MOVWF  x29
33A0:  MOVLW  08
33A2:  MOVWF  x28
33A4:  MOVLW  07
33A6:  MOVWF  x2A
33A8:  MOVLW  37
33AA:  MOVWF  x2B
33AC:  CLRF   x2C
33AE:  MOVLW  01
33B0:  MOVWF  x2D
33B2:  MOVLB  0
33B4:  CALL   1224
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
33B8:  MOVLW  05
33BA:  MOVWF  FEA
33BC:  MOVLW  08
33BE:  MOVWF  FE9
33C0:  MOVFF  FF2,528
33C4:  BCF    FF2.7
33C6:  MOVLW  00
33C8:  CALL   07A2
33CC:  TBLRD*-
33CE:  TBLRD*+
33D0:  MOVF   FF5,W
33D2:  MOVWF  FEE
33D4:  IORLW  00
33D6:  BNZ   33CE
33D8:  MOVLB  5
33DA:  BTFSC  x28.7
33DC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
33DE:  MOVLW  05
33E0:  MOVWF  x29
33E2:  MOVLW  08
33E4:  MOVWF  x28
33E6:  CLRF   x2A
33E8:  MOVLW  1A
33EA:  MOVWF  x2B
33EC:  CLRF   x2C
33EE:  MOVLW  01
33F0:  MOVWF  x2D
33F2:  MOVLB  0
33F4:  CALL   1224
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
33F8:  MOVLW  05
33FA:  MOVWF  FEA
33FC:  MOVLW  08
33FE:  MOVWF  FE9
3400:  MOVFF  FF2,528
3404:  BCF    FF2.7
3406:  MOVLW  00
3408:  CALL   07C4
340C:  TBLRD*-
340E:  TBLRD*+
3410:  MOVF   FF5,W
3412:  MOVWF  FEE
3414:  IORLW  00
3416:  BNZ   340E
3418:  MOVLB  5
341A:  BTFSC  x28.7
341C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
341E:  MOVLW  05
3420:  MOVWF  x29
3422:  MOVLW  08
3424:  MOVWF  x28
3426:  CLRF   x2A
3428:  MOVLW  24
342A:  MOVWF  x2B
342C:  CLRF   x2C
342E:  MOVLW  01
3430:  MOVWF  x2D
3432:  MOVLB  0
3434:  CALL   1224
....................          strcpy(Menus.Letra,"T. Secado= 15m"); 
3438:  MOVLW  05
343A:  MOVWF  FEA
343C:  MOVLW  08
343E:  MOVWF  FE9
3440:  MOVFF  FF2,528
3444:  BCF    FF2.7
3446:  MOVLW  00
3448:  CALL   07EA
344C:  TBLRD*-
344E:  TBLRD*+
3450:  MOVF   FF5,W
3452:  MOVWF  FEE
3454:  IORLW  00
3456:  BNZ   344E
3458:  MOVLB  5
345A:  BTFSC  x28.7
345C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1); 
345E:  MOVLW  05
3460:  MOVWF  x29
3462:  MOVLW  08
3464:  MOVWF  x28
3466:  CLRF   x2A
3468:  MOVLW  2E
346A:  MOVWF  x2B
346C:  CLRF   x2C
346E:  MOVLW  01
3470:  MOVWF  x2D
3472:  MOVLB  0
3474:  CALL   1224
....................          visual=0; 
3478:  MOVLB  4
347A:  BCF    x6A.4
....................       } 
....................        
....................       if(LEFT)// Si oprime Izquier|da 
347C:  BSF    F96.2
347E:  BTFSS  F84.2
3480:  BRA    34A2
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3482:  MOVLW  1E
3484:  MOVLB  5
3486:  MOVWF  x29
3488:  MOVLB  0
348A:  CALL   131E
348E:  MOVLW  01
3490:  MOVLB  4
3492:  MOVWF  x77
3494:  MOVLB  5
3496:  CLRF   x29
3498:  MOVLB  0
349A:  CALL   0BF4
349E:  MOVLB  4
34A0:  BSF    x6A.4
....................       } 
....................  
....................       if(RIGHT)// Si oprime derecha 
34A2:  BSF    F96.1
34A4:  BTFSS  F84.1
34A6:  BRA    364E
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
34A8:  CLRF   x96
34AA:  CLRF   x97
34AC:  MOVLW  05
34AE:  MOVWF  x98
34B0:  MOVLW  02
34B2:  MOVWF  x99
34B4:  BSF    x6A.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;minutos=0;Setpoint=90;Menu=20; 
34B6:  CLRF   x9E
34B8:  CLRF   x9F
34BA:  MOVLW  05
34BC:  MOVWF  xA0
34BE:  MOVLW  01
34C0:  MOVWF  xA1
34C2:  CLRF   x89
34C4:  CLRF   x88
34C6:  MOVLW  5A
34C8:  MOVWF  x7C
34CA:  MOVLW  14
34CC:  MOVWF  x77
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
34CE:  MOVWF  x77
34D0:  MOVLW  0F
34D2:  MOVLB  5
34D4:  MOVWF  x3A
34D6:  MOVLW  12
34D8:  MOVWF  x3B
34DA:  MOVLW  1E
34DC:  MOVWF  x3C
34DE:  MOVLW  35
34E0:  MOVWF  x3D
34E2:  CLRF   x3E
34E4:  MOVLW  01
34E6:  MOVWF  x3F
34E8:  MOVLB  0
34EA:  CALL   1162
34EE:  MOVLB  4
34F0:  CLRF   x80
34F2:  MOVLW  C0
34F4:  IORWF  FF2,F
34F6:  MOVLB  5
34F8:  CLRF   x29
34FA:  MOVLB  0
34FC:  CALL   0BF4
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
3500:  MOVLW  05
3502:  MOVWF  FEA
3504:  MOVLW  08
3506:  MOVWF  FE9
3508:  MOVFF  FF2,528
350C:  BCF    FF2.7
350E:  MOVLW  00
3510:  CALL   080A
3514:  TBLRD*-
3516:  TBLRD*+
3518:  MOVF   FF5,W
351A:  MOVWF  FEE
351C:  IORLW  00
351E:  BNZ   3516
3520:  MOVLB  5
3522:  BTFSC  x28.7
3524:  BSF    FF2.7
3526:  MOVLW  05
3528:  MOVWF  x29
352A:  MOVLW  08
352C:  MOVWF  x28
352E:  CLRF   x2A
3530:  MOVLW  37
3532:  MOVWF  x2B
3534:  MOVLW  02
3536:  MOVWF  x2C
3538:  MOVLW  01
353A:  MOVWF  x2D
353C:  MOVLB  0
353E:  CALL   1224
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
3542:  MOVLW  0F
3544:  MOVLB  5
3546:  MOVWF  x3A
3548:  MOVLW  12
354A:  MOVWF  x3B
354C:  MOVLW  1E
354E:  MOVWF  x3C
3550:  MOVLW  35
3552:  MOVWF  x3D
3554:  CLRF   x3E
3556:  MOVLW  01
3558:  MOVWF  x3F
355A:  MOVLB  0
355C:  CALL   1162
....................          glcd_imagen(5); 
3560:  MOVLW  05
3562:  MOVLB  5
3564:  MOVWF  x28
3566:  MOVLB  0
3568:  CALL   1A86
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
356C:  MOVLW  05
356E:  MOVWF  FEA
3570:  MOVLW  08
3572:  MOVWF  FE9
3574:  MOVFF  FF2,528
3578:  BCF    FF2.7
357A:  MOVLW  00
357C:  CALL   0826
3580:  TBLRD*-
3582:  TBLRD*+
3584:  MOVF   FF5,W
3586:  MOVWF  FEE
3588:  IORLW  00
358A:  BNZ   3582
358C:  MOVLB  5
358E:  BTFSC  x28.7
3590:  BSF    FF2.7
3592:  MOVLW  05
3594:  MOVWF  x29
3596:  MOVLW  08
3598:  MOVWF  x28
359A:  CLRF   x2A
359C:  CLRF   x2B
359E:  MOVLW  02
35A0:  MOVWF  x2C
35A2:  MOVLW  01
35A4:  MOVWF  x2D
35A6:  MOVLB  0
35A8:  CALL   1224
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
35AC:  MOVLW  05
35AE:  MOVWF  FEA
35B0:  MOVLW  08
35B2:  MOVWF  FE9
35B4:  MOVFF  FF2,528
35B8:  BCF    FF2.7
35BA:  MOVLW  00
35BC:  CALL   083E
35C0:  TBLRD*-
35C2:  TBLRD*+
35C4:  MOVF   FF5,W
35C6:  MOVWF  FEE
35C8:  IORLW  00
35CA:  BNZ   35C2
35CC:  MOVLB  5
35CE:  BTFSC  x28.7
35D0:  BSF    FF2.7
35D2:  MOVLW  05
35D4:  MOVWF  x29
35D6:  MOVLW  08
35D8:  MOVWF  x28
35DA:  CLRF   x2A
35DC:  MOVWF  x2B
35DE:  MOVLW  02
35E0:  MOVWF  x2C
35E2:  MOVLW  01
35E4:  MOVWF  x2D
35E6:  MOVLB  0
35E8:  CALL   1224
....................          glcd_circle(95,40,2,NO,ON); 
35EC:  MOVLW  5F
35EE:  MOVLB  5
35F0:  MOVWF  x28
35F2:  MOVLW  28
35F4:  MOVWF  x29
35F6:  MOVLW  02
35F8:  MOVWF  x2A
35FA:  CLRF   x2B
35FC:  MOVLW  01
35FE:  MOVWF  x2C
3600:  MOVLB  0
3602:  CALL   1B82
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
3606:  MOVLW  05
3608:  MOVWF  FEA
360A:  MOVLW  08
360C:  MOVWF  FE9
360E:  MOVFF  FF2,528
3612:  BCF    FF2.7
3614:  MOVLW  00
3616:  CALL   0856
361A:  TBLRD*-
361C:  TBLRD*+
361E:  MOVF   FF5,W
3620:  MOVWF  FEE
3622:  IORLW  00
3624:  BNZ   361C
3626:  MOVLB  5
3628:  BTFSC  x28.7
362A:  BSF    FF2.7
362C:  MOVLW  05
362E:  MOVWF  x29
3630:  MOVLW  08
3632:  MOVWF  x28
3634:  MOVLW  66
3636:  MOVWF  x2A
3638:  MOVLW  28
363A:  MOVWF  x2B
363C:  MOVLW  02
363E:  MOVWF  x2C
3640:  MOVWF  x2D
3642:  MOVLB  0
3644:  CALL   1224
....................          MuestraTiemposProgramados(); 
3648:  CALL   1F82
364C:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==5){ // Menu de Liquido       
364E:  MOVF   x77,W
3650:  SUBLW  05
3652:  BTFSS  FD8.2
3654:  BRA    381A
....................        
....................       if(visual==1) 
3656:  BTFSS  x6A.4
3658:  BRA    37B0
....................       { 
....................          glcd_imagen(4); //ErlenMeyer con Liquido 
365A:  MOVLW  04
365C:  MOVLB  5
365E:  MOVWF  x28
3660:  MOVLB  0
3662:  CALL   1A86
....................          strcpy(Menus.Letra,"Liquidos"); 
3666:  MOVLW  05
3668:  MOVWF  FEA
366A:  MOVLW  08
366C:  MOVWF  FE9
366E:  MOVFF  FF2,528
3672:  BCF    FF2.7
3674:  MOVLW  00
3676:  CALL   0702
367A:  TBLRD*-
367C:  TBLRD*+
367E:  MOVF   FF5,W
3680:  MOVWF  FEE
3682:  IORLW  00
3684:  BNZ   367C
3686:  MOVLB  5
3688:  BTFSC  x28.7
368A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
368C:  MOVLW  05
368E:  MOVWF  x29
3690:  MOVLW  08
3692:  MOVWF  x28
3694:  MOVLW  14
3696:  MOVWF  x2A
3698:  CLRF   x2B
369A:  MOVLW  01
369C:  MOVWF  x2C
369E:  MOVLW  02
36A0:  MOVWF  x2D
36A2:  MOVLB  0
36A4:  CALL   1224
....................        
....................          strcpy(Menus.Letra,"Liquidos"); 
36A8:  MOVLW  05
36AA:  MOVWF  FEA
36AC:  MOVLW  08
36AE:  MOVWF  FE9
36B0:  MOVFF  FF2,528
36B4:  BCF    FF2.7
36B6:  MOVLW  00
36B8:  CALL   0702
36BC:  TBLRD*-
36BE:  TBLRD*+
36C0:  MOVF   FF5,W
36C2:  MOVWF  FEE
36C4:  IORLW  00
36C6:  BNZ   36BE
36C8:  MOVLB  5
36CA:  BTFSC  x28.7
36CC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
36CE:  MOVLW  05
36D0:  MOVWF  x29
36D2:  MOVLW  08
36D4:  MOVWF  x28
36D6:  MOVLW  07
36D8:  MOVWF  x2A
36DA:  MOVLW  37
36DC:  MOVWF  x2B
36DE:  MOVLW  02
36E0:  MOVWF  x2C
36E2:  MOVLW  01
36E4:  MOVWF  x2D
36E6:  MOVLB  0
36E8:  CALL   1224
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
36EC:  MOVLW  05
36EE:  MOVWF  FEA
36F0:  MOVLW  08
36F2:  MOVWF  FE9
36F4:  MOVFF  FF2,528
36F8:  BCF    FF2.7
36FA:  MOVLW  00
36FC:  CALL   07A2
3700:  TBLRD*-
3702:  TBLRD*+
3704:  MOVF   FF5,W
3706:  MOVWF  FEE
3708:  IORLW  00
370A:  BNZ   3702
370C:  MOVLB  5
370E:  BTFSC  x28.7
3710:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3712:  MOVLW  05
3714:  MOVWF  x29
3716:  MOVLW  08
3718:  MOVWF  x28
371A:  CLRF   x2A
371C:  MOVLW  1A
371E:  MOVWF  x2B
3720:  CLRF   x2C
3722:  MOVLW  01
3724:  MOVWF  x2D
3726:  MOVLB  0
3728:  CALL   1224
....................          strcpy(Menus.Letra,"T. Esterilizacion:20m"); 
372C:  MOVLW  05
372E:  MOVWF  FEA
3730:  MOVLW  08
3732:  MOVWF  FE9
3734:  MOVFF  FF2,528
3738:  BCF    FF2.7
373A:  MOVLW  00
373C:  CALL   0868
3740:  TBLRD*-
3742:  TBLRD*+
3744:  MOVF   FF5,W
3746:  MOVWF  FEE
3748:  IORLW  00
374A:  BNZ   3742
374C:  MOVLB  5
374E:  BTFSC  x28.7
3750:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3752:  MOVLW  05
3754:  MOVWF  x29
3756:  MOVLW  08
3758:  MOVWF  x28
375A:  CLRF   x2A
375C:  MOVLW  24
375E:  MOVWF  x2B
3760:  CLRF   x2C
3762:  MOVLW  01
3764:  MOVWF  x2D
3766:  MOVLB  0
3768:  CALL   1224
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
376C:  MOVLW  05
376E:  MOVWF  FEA
3770:  MOVLW  08
3772:  MOVWF  FE9
3774:  MOVFF  FF2,528
3778:  BCF    FF2.7
377A:  MOVLW  00
377C:  CALL   088E
3780:  TBLRD*-
3782:  TBLRD*+
3784:  MOVF   FF5,W
3786:  MOVWF  FEE
3788:  IORLW  00
378A:  BNZ   3782
378C:  MOVLB  5
378E:  BTFSC  x28.7
3790:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);     
3792:  MOVLW  05
3794:  MOVWF  x29
3796:  MOVLW  08
3798:  MOVWF  x28
379A:  CLRF   x2A
379C:  MOVLW  2E
379E:  MOVWF  x2B
37A0:  CLRF   x2C
37A2:  MOVLW  01
37A4:  MOVWF  x2D
37A6:  MOVLB  0
37A8:  CALL   1224
....................          visual=0; 
37AC:  MOVLB  4
37AE:  BCF    x6A.4
....................       }    
....................           
....................       if(LEFT)// Si oprime Izquier|da 
37B0:  BSF    F96.2
37B2:  BTFSS  F84.2
37B4:  BRA    37D6
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
37B6:  MOVLW  1E
37B8:  MOVLB  5
37BA:  MOVWF  x29
37BC:  MOVLB  0
37BE:  CALL   131E
37C2:  MOVLW  01
37C4:  MOVLB  4
37C6:  MOVWF  x77
37C8:  MOVLB  5
37CA:  CLRF   x29
37CC:  MOVLB  0
37CE:  CALL   0BF4
37D2:  MOVLB  4
37D4:  BSF    x6A.4
....................       }                
....................  
....................       if(RIGHT)// Si oprime derecha 
37D6:  BSF    F96.1
37D8:  BTFSS  F84.1
37DA:  BRA    381A
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2;desfoguelento=1;visual=1; 
37DC:  CLRF   x96
37DE:  CLRF   x97
37E0:  CLRF   x98
37E2:  MOVLW  02
37E4:  MOVWF  x99
37E6:  BSF    x6A.5
37E8:  BSF    x6A.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
37EA:  CLRF   x9E
37EC:  CLRF   x9F
37EE:  CLRF   xA0
37F0:  CLRF   xA1
37F2:  MOVLW  79
37F4:  MOVWF  x7C
37F6:  MOVLW  0E
37F8:  MOVWF  x77
37FA:  MOVLW  04
37FC:  MOVLB  5
37FE:  MOVWF  x28
3800:  MOVLW  AF
3802:  MOVWF  x29
3804:  MOVLB  0
3806:  CALL   131E
380A:  MOVLB  5
380C:  DECFSZ x28,F
380E:  BRA    3800
3810:  CLRF   x29
3812:  MOVLB  0
3814:  CALL   0BF4
3818:  MOVLB  4
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Instrumental Suave      
381A:  MOVF   x77,W
381C:  SUBLW  06
381E:  BTFSS  FD8.2
3820:  BRA    39E6
....................        
....................       if(visual==1) 
3822:  BTFSS  x6A.4
3824:  BRA    397A
....................       { 
....................          glcd_imagen(3); //Erlen Meyer 
3826:  MOVLW  03
3828:  MOVLB  5
382A:  MOVWF  x28
382C:  MOVLB  0
382E:  CALL   1A86
....................           
....................          strcpy(Menus.Letra,"Ins. Suave"); 
3832:  MOVLW  05
3834:  MOVWF  FEA
3836:  MOVLW  08
3838:  MOVWF  FE9
383A:  MOVFF  FF2,528
383E:  BCF    FF2.7
3840:  MOVLW  00
3842:  CALL   08AE
3846:  TBLRD*-
3848:  TBLRD*+
384A:  MOVF   FF5,W
384C:  MOVWF  FEE
384E:  IORLW  00
3850:  BNZ   3848
3852:  MOVLB  5
3854:  BTFSC  x28.7
3856:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
3858:  MOVLW  05
385A:  MOVWF  x29
385C:  MOVLW  08
385E:  MOVWF  x28
3860:  CLRF   x2A
3862:  CLRF   x2B
3864:  MOVLW  01
3866:  MOVWF  x2C
3868:  MOVLW  02
386A:  MOVWF  x2D
386C:  MOVLB  0
386E:  CALL   1224
....................           
....................          strcpy(Menus.Letra,"Instrumental Suave"); 
3872:  MOVLW  05
3874:  MOVWF  FEA
3876:  MOVLW  08
3878:  MOVWF  FE9
387A:  MOVFF  FF2,528
387E:  BCF    FF2.7
3880:  MOVLW  00
3882:  CALL   071C
3886:  TBLRD*-
3888:  TBLRD*+
388A:  MOVF   FF5,W
388C:  MOVWF  FEE
388E:  IORLW  00
3890:  BNZ   3888
3892:  MOVLB  5
3894:  BTFSC  x28.7
3896:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3898:  MOVLW  05
389A:  MOVWF  x29
389C:  MOVLW  08
389E:  MOVWF  x28
38A0:  MOVLW  07
38A2:  MOVWF  x2A
38A4:  MOVLW  37
38A6:  MOVWF  x2B
38A8:  MOVLW  02
38AA:  MOVWF  x2C
38AC:  MOVLW  01
38AE:  MOVWF  x2D
38B0:  MOVLB  0
38B2:  CALL   1224
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
38B6:  MOVLW  05
38B8:  MOVWF  FEA
38BA:  MOVLW  08
38BC:  MOVWF  FE9
38BE:  MOVFF  FF2,528
38C2:  BCF    FF2.7
38C4:  MOVLW  00
38C6:  CALL   07A2
38CA:  TBLRD*-
38CC:  TBLRD*+
38CE:  MOVF   FF5,W
38D0:  MOVWF  FEE
38D2:  IORLW  00
38D4:  BNZ   38CC
38D6:  MOVLB  5
38D8:  BTFSC  x28.7
38DA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
38DC:  MOVLW  05
38DE:  MOVWF  x29
38E0:  MOVLW  08
38E2:  MOVWF  x28
38E4:  CLRF   x2A
38E6:  MOVLW  1A
38E8:  MOVWF  x2B
38EA:  CLRF   x2C
38EC:  MOVLW  01
38EE:  MOVWF  x2D
38F0:  MOVLB  0
38F2:  CALL   1224
....................          strcpy(Menus.Letra,"T. Esterilizacion:15m"); 
38F6:  MOVLW  05
38F8:  MOVWF  FEA
38FA:  MOVLW  08
38FC:  MOVWF  FE9
38FE:  MOVFF  FF2,528
3902:  BCF    FF2.7
3904:  MOVLW  00
3906:  CALL   08CA
390A:  TBLRD*-
390C:  TBLRD*+
390E:  MOVF   FF5,W
3910:  MOVWF  FEE
3912:  IORLW  00
3914:  BNZ   390C
3916:  MOVLB  5
3918:  BTFSC  x28.7
391A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
391C:  MOVLW  05
391E:  MOVWF  x29
3920:  MOVLW  08
3922:  MOVWF  x28
3924:  CLRF   x2A
3926:  MOVLW  24
3928:  MOVWF  x2B
392A:  CLRF   x2C
392C:  MOVLW  01
392E:  MOVWF  x2D
3930:  MOVLB  0
3932:  CALL   1224
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3936:  MOVLW  05
3938:  MOVWF  FEA
393A:  MOVLW  08
393C:  MOVWF  FE9
393E:  MOVFF  FF2,528
3942:  BCF    FF2.7
3944:  MOVLW  00
3946:  CALL   088E
394A:  TBLRD*-
394C:  TBLRD*+
394E:  MOVF   FF5,W
3950:  MOVWF  FEE
3952:  IORLW  00
3954:  BNZ   394C
3956:  MOVLB  5
3958:  BTFSC  x28.7
395A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
395C:  MOVLW  05
395E:  MOVWF  x29
3960:  MOVLW  08
3962:  MOVWF  x28
3964:  CLRF   x2A
3966:  MOVLW  2E
3968:  MOVWF  x2B
396A:  CLRF   x2C
396C:  MOVLW  01
396E:  MOVWF  x2D
3970:  MOVLB  0
3972:  CALL   1224
....................          visual=0; 
3976:  MOVLB  4
3978:  BCF    x6A.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
397A:  BSF    F96.2
397C:  BTFSS  F84.2
397E:  BRA    39A0
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3980:  MOVLW  1E
3982:  MOVLB  5
3984:  MOVWF  x29
3986:  MOVLB  0
3988:  CALL   131E
398C:  MOVLW  01
398E:  MOVLB  4
3990:  MOVWF  x77
3992:  MOVLB  5
3994:  CLRF   x29
3996:  MOVLB  0
3998:  CALL   0BF4
399C:  MOVLB  4
399E:  BSF    x6A.4
....................       }             
....................  
....................       if(RIGHT)// Si oprime derecha 
39A0:  BSF    F96.1
39A2:  BTFSS  F84.1
39A4:  BRA    39E6
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1;desfoguelento=1;visual=1; 
39A6:  CLRF   x96
39A8:  CLRF   x97
39AA:  MOVLW  05
39AC:  MOVWF  x98
39AE:  MOVLW  01
39B0:  MOVWF  x99
39B2:  BSF    x6A.5
39B4:  BSF    x6A.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
39B6:  CLRF   x9E
39B8:  CLRF   x9F
39BA:  CLRF   xA0
39BC:  CLRF   xA1
39BE:  MOVLW  79
39C0:  MOVWF  x7C
39C2:  MOVLW  0E
39C4:  MOVWF  x77
39C6:  MOVLW  04
39C8:  MOVLB  5
39CA:  MOVWF  x28
39CC:  MOVLW  AF
39CE:  MOVWF  x29
39D0:  MOVLB  0
39D2:  CALL   131E
39D6:  MOVLB  5
39D8:  DECFSZ x28,F
39DA:  BRA    39CC
39DC:  CLRF   x29
39DE:  MOVLB  0
39E0:  CALL   0BF4
39E4:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==7){ // Menu de textil e instrumental      
39E6:  MOVF   x77,W
39E8:  SUBLW  07
39EA:  BTFSS  FD8.2
39EC:  BRA    3D2A
....................        
....................       if(visual==1) 
39EE:  BTFSS  x6A.4
39F0:  BRA    3B44
....................       { 
....................          glcd_imagen(1); //Tijeras y Camisa 
39F2:  MOVLW  01
39F4:  MOVLB  5
39F6:  MOVWF  x28
39F8:  MOVLB  0
39FA:  CALL   1A86
....................          strcpy(Menus.Letra,"Tex & Ins"); 
39FE:  MOVLW  05
3A00:  MOVWF  FEA
3A02:  MOVLW  08
3A04:  MOVWF  FE9
3A06:  MOVFF  FF2,528
3A0A:  BCF    FF2.7
3A0C:  MOVLW  00
3A0E:  CALL   08F0
3A12:  TBLRD*-
3A14:  TBLRD*+
3A16:  MOVF   FF5,W
3A18:  MOVWF  FEE
3A1A:  IORLW  00
3A1C:  BNZ   3A14
3A1E:  MOVLB  5
3A20:  BTFSC  x28.7
3A22:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
3A24:  MOVLW  05
3A26:  MOVWF  x29
3A28:  MOVLW  08
3A2A:  MOVWF  x28
3A2C:  CLRF   x2A
3A2E:  CLRF   x2B
3A30:  MOVLW  01
3A32:  MOVWF  x2C
3A34:  MOVLW  02
3A36:  MOVWF  x2D
3A38:  MOVLB  0
3A3A:  CALL   1224
....................        
....................          strcpy(Menus.Letra,"Textil e Instrumental"); 
3A3E:  MOVLW  05
3A40:  MOVWF  FEA
3A42:  MOVLW  08
3A44:  MOVWF  FE9
3A46:  MOVFF  FF2,528
3A4A:  BCF    FF2.7
3A4C:  MOVLW  00
3A4E:  CALL   0740
3A52:  TBLRD*-
3A54:  TBLRD*+
3A56:  MOVF   FF5,W
3A58:  MOVWF  FEE
3A5A:  IORLW  00
3A5C:  BNZ   3A54
3A5E:  MOVLB  5
3A60:  BTFSC  x28.7
3A62:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
3A64:  MOVLW  05
3A66:  MOVWF  x29
3A68:  MOVLW  08
3A6A:  MOVWF  x28
3A6C:  CLRF   x2A
3A6E:  MOVLW  37
3A70:  MOVWF  x2B
3A72:  MOVLW  02
3A74:  MOVWF  x2C
3A76:  MOVLW  01
3A78:  MOVWF  x2D
3A7A:  MOVLB  0
3A7C:  CALL   1224
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3A80:  MOVLW  05
3A82:  MOVWF  FEA
3A84:  MOVLW  08
3A86:  MOVWF  FE9
3A88:  MOVFF  FF2,528
3A8C:  BCF    FF2.7
3A8E:  MOVLW  00
3A90:  CALL   07A2
3A94:  TBLRD*-
3A96:  TBLRD*+
3A98:  MOVF   FF5,W
3A9A:  MOVWF  FEE
3A9C:  IORLW  00
3A9E:  BNZ   3A96
3AA0:  MOVLB  5
3AA2:  BTFSC  x28.7
3AA4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3AA6:  MOVLW  05
3AA8:  MOVWF  x29
3AAA:  MOVLW  08
3AAC:  MOVWF  x28
3AAE:  CLRF   x2A
3AB0:  MOVLW  1A
3AB2:  MOVWF  x2B
3AB4:  CLRF   x2C
3AB6:  MOVLW  01
3AB8:  MOVWF  x2D
3ABA:  MOVLB  0
3ABC:  CALL   1224
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
3AC0:  MOVLW  05
3AC2:  MOVWF  FEA
3AC4:  MOVLW  08
3AC6:  MOVWF  FE9
3AC8:  MOVFF  FF2,528
3ACC:  BCF    FF2.7
3ACE:  MOVLW  00
3AD0:  CALL   07C4
3AD4:  TBLRD*-
3AD6:  TBLRD*+
3AD8:  MOVF   FF5,W
3ADA:  MOVWF  FEE
3ADC:  IORLW  00
3ADE:  BNZ   3AD6
3AE0:  MOVLB  5
3AE2:  BTFSC  x28.7
3AE4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3AE6:  MOVLW  05
3AE8:  MOVWF  x29
3AEA:  MOVLW  08
3AEC:  MOVWF  x28
3AEE:  CLRF   x2A
3AF0:  MOVLW  24
3AF2:  MOVWF  x2B
3AF4:  CLRF   x2C
3AF6:  MOVLW  01
3AF8:  MOVWF  x2D
3AFA:  MOVLB  0
3AFC:  CALL   1224
....................          strcpy(Menus.Letra,"T. Secado= 10m"); 
3B00:  MOVLW  05
3B02:  MOVWF  FEA
3B04:  MOVLW  08
3B06:  MOVWF  FE9
3B08:  MOVFF  FF2,528
3B0C:  BCF    FF2.7
3B0E:  MOVLW  00
3B10:  CALL   090A
3B14:  TBLRD*-
3B16:  TBLRD*+
3B18:  MOVF   FF5,W
3B1A:  MOVWF  FEE
3B1C:  IORLW  00
3B1E:  BNZ   3B16
3B20:  MOVLB  5
3B22:  BTFSC  x28.7
3B24:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
3B26:  MOVLW  05
3B28:  MOVWF  x29
3B2A:  MOVLW  08
3B2C:  MOVWF  x28
3B2E:  CLRF   x2A
3B30:  MOVLW  2E
3B32:  MOVWF  x2B
3B34:  CLRF   x2C
3B36:  MOVLW  01
3B38:  MOVWF  x2D
3B3A:  MOVLB  0
3B3C:  CALL   1224
....................          visual=0; 
3B40:  MOVLB  4
3B42:  BCF    x6A.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
3B44:  BSF    F96.2
3B46:  BTFSS  F84.2
3B48:  BRA    3B6A
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3B4A:  MOVLW  1E
3B4C:  MOVLB  5
3B4E:  MOVWF  x29
3B50:  MOVLB  0
3B52:  CALL   131E
3B56:  MOVLW  01
3B58:  MOVLB  4
3B5A:  MOVWF  x77
3B5C:  MOVLB  5
3B5E:  CLRF   x29
3B60:  MOVLB  0
3B62:  CALL   0BF4
3B66:  MOVLB  4
3B68:  BSF    x6A.4
....................       }                  
....................  
....................       if(RIGHT)// Si oprime derecha 
3B6A:  BSF    F96.1
3B6C:  BTFSS  F84.1
3B6E:  BRA    3D2A
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
3B70:  CLRF   x96
3B72:  CLRF   x97
3B74:  MOVLW  05
3B76:  MOVWF  x98
3B78:  MOVLW  02
3B7A:  MOVWF  x99
3B7C:  BSF    x6A.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=1;Setpoint=121;Menu=20;delay_ms(700); 
3B7E:  CLRF   x9E
3B80:  CLRF   x9F
3B82:  CLRF   xA0
3B84:  MOVLW  01
3B86:  MOVWF  xA1
3B88:  MOVLW  79
3B8A:  MOVWF  x7C
3B8C:  MOVLW  14
3B8E:  MOVWF  x77
3B90:  MOVLW  04
3B92:  MOVLB  5
3B94:  MOVWF  x28
3B96:  MOVLW  AF
3B98:  MOVWF  x29
3B9A:  MOVLB  0
3B9C:  CALL   131E
3BA0:  MOVLB  5
3BA2:  DECFSZ x28,F
3BA4:  BRA    3B96
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
3BA6:  MOVLW  14
3BA8:  MOVLB  4
3BAA:  MOVWF  x77
3BAC:  MOVLW  0F
3BAE:  MOVLB  5
3BB0:  MOVWF  x3A
3BB2:  MOVLW  12
3BB4:  MOVWF  x3B
3BB6:  MOVLW  1E
3BB8:  MOVWF  x3C
3BBA:  MOVLW  35
3BBC:  MOVWF  x3D
3BBE:  CLRF   x3E
3BC0:  MOVLW  01
3BC2:  MOVWF  x3F
3BC4:  MOVLB  0
3BC6:  CALL   1162
3BCA:  MOVLB  4
3BCC:  CLRF   x80
3BCE:  MOVLW  C0
3BD0:  IORWF  FF2,F
3BD2:  MOVLB  5
3BD4:  CLRF   x29
3BD6:  MOVLB  0
3BD8:  CALL   0BF4
....................          strcpy(Menus.Letra,"Calentando"); 
3BDC:  MOVLW  05
3BDE:  MOVWF  FEA
3BE0:  MOVLW  08
3BE2:  MOVWF  FE9
3BE4:  MOVFF  FF2,528
3BE8:  BCF    FF2.7
3BEA:  MOVLW  00
3BEC:  CALL   080A
3BF0:  TBLRD*-
3BF2:  TBLRD*+
3BF4:  MOVF   FF5,W
3BF6:  MOVWF  FEE
3BF8:  IORLW  00
3BFA:  BNZ   3BF2
3BFC:  MOVLB  5
3BFE:  BTFSC  x28.7
3C00:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
3C02:  MOVLW  05
3C04:  MOVWF  x29
3C06:  MOVLW  08
3C08:  MOVWF  x28
3C0A:  CLRF   x2A
3C0C:  MOVLW  37
3C0E:  MOVWF  x2B
3C10:  MOVLW  02
3C12:  MOVWF  x2C
3C14:  MOVLW  01
3C16:  MOVWF  x2D
3C18:  MOVLB  0
3C1A:  CALL   1224
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
3C1E:  MOVLW  0F
3C20:  MOVLB  5
3C22:  MOVWF  x3A
3C24:  MOVLW  12
3C26:  MOVWF  x3B
3C28:  MOVLW  1E
3C2A:  MOVWF  x3C
3C2C:  MOVLW  35
3C2E:  MOVWF  x3D
3C30:  CLRF   x3E
3C32:  MOVLW  01
3C34:  MOVWF  x3F
3C36:  MOVLB  0
3C38:  CALL   1162
....................          glcd_imagen(5); 
3C3C:  MOVLW  05
3C3E:  MOVLB  5
3C40:  MOVWF  x28
3C42:  MOVLB  0
3C44:  CALL   1A86
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
3C48:  MOVLW  05
3C4A:  MOVWF  FEA
3C4C:  MOVLW  08
3C4E:  MOVWF  FE9
3C50:  MOVFF  FF2,528
3C54:  BCF    FF2.7
3C56:  MOVLW  00
3C58:  CALL   0826
3C5C:  TBLRD*-
3C5E:  TBLRD*+
3C60:  MOVF   FF5,W
3C62:  MOVWF  FEE
3C64:  IORLW  00
3C66:  BNZ   3C5E
3C68:  MOVLB  5
3C6A:  BTFSC  x28.7
3C6C:  BSF    FF2.7
3C6E:  MOVLW  05
3C70:  MOVWF  x29
3C72:  MOVLW  08
3C74:  MOVWF  x28
3C76:  CLRF   x2A
3C78:  CLRF   x2B
3C7A:  MOVLW  02
3C7C:  MOVWF  x2C
3C7E:  MOVLW  01
3C80:  MOVWF  x2D
3C82:  MOVLB  0
3C84:  CALL   1224
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
3C88:  MOVLW  05
3C8A:  MOVWF  FEA
3C8C:  MOVLW  08
3C8E:  MOVWF  FE9
3C90:  MOVFF  FF2,528
3C94:  BCF    FF2.7
3C96:  MOVLW  00
3C98:  CALL   083E
3C9C:  TBLRD*-
3C9E:  TBLRD*+
3CA0:  MOVF   FF5,W
3CA2:  MOVWF  FEE
3CA4:  IORLW  00
3CA6:  BNZ   3C9E
3CA8:  MOVLB  5
3CAA:  BTFSC  x28.7
3CAC:  BSF    FF2.7
3CAE:  MOVLW  05
3CB0:  MOVWF  x29
3CB2:  MOVLW  08
3CB4:  MOVWF  x28
3CB6:  CLRF   x2A
3CB8:  MOVWF  x2B
3CBA:  MOVLW  02
3CBC:  MOVWF  x2C
3CBE:  MOVLW  01
3CC0:  MOVWF  x2D
3CC2:  MOVLB  0
3CC4:  CALL   1224
....................          glcd_circle(95,40,2,NO,ON); 
3CC8:  MOVLW  5F
3CCA:  MOVLB  5
3CCC:  MOVWF  x28
3CCE:  MOVLW  28
3CD0:  MOVWF  x29
3CD2:  MOVLW  02
3CD4:  MOVWF  x2A
3CD6:  CLRF   x2B
3CD8:  MOVLW  01
3CDA:  MOVWF  x2C
3CDC:  MOVLB  0
3CDE:  CALL   1B82
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
3CE2:  MOVLW  05
3CE4:  MOVWF  FEA
3CE6:  MOVLW  08
3CE8:  MOVWF  FE9
3CEA:  MOVFF  FF2,528
3CEE:  BCF    FF2.7
3CF0:  MOVLW  00
3CF2:  CALL   0856
3CF6:  TBLRD*-
3CF8:  TBLRD*+
3CFA:  MOVF   FF5,W
3CFC:  MOVWF  FEE
3CFE:  IORLW  00
3D00:  BNZ   3CF8
3D02:  MOVLB  5
3D04:  BTFSC  x28.7
3D06:  BSF    FF2.7
3D08:  MOVLW  05
3D0A:  MOVWF  x29
3D0C:  MOVLW  08
3D0E:  MOVWF  x28
3D10:  MOVLW  66
3D12:  MOVWF  x2A
3D14:  MOVLW  28
3D16:  MOVWF  x2B
3D18:  MOVLW  02
3D1A:  MOVWF  x2C
3D1C:  MOVWF  x2D
3D1E:  MOVLB  0
3D20:  CALL   1224
....................          MuestraTiemposProgramados(); 
3D24:  CALL   1F82
3D28:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
.................... // Testerilizacionp[3]<,Tsecadop[3]<,Setpoint 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==8){ // Menu de Proceso Personalizado 
3D2A:  MOVF   x77,W
3D2C:  SUBLW  08
3D2E:  BTFSS  FD8.2
3D30:  BRA    410E
....................          
....................          if(visual==1) 
3D32:  BTFSS  x6A.4
3D34:  BRA    405A
....................          { 
....................             if(Opcion>5) 
3D36:  MOVF   x7E,W
3D38:  SUBLW  05
3D3A:  BC    3D40
....................             {Opcion=1;} 
3D3C:  MOVLW  01
3D3E:  MOVWF  x7E
....................             if(Opcion<1) 
3D40:  MOVF   x7E,F
3D42:  BNZ   3D48
....................             {Opcion=5;} 
3D44:  MOVLW  05
3D46:  MOVWF  x7E
....................              
....................             strcpy(Menus.Letra,"Proceso Personalizado"); 
3D48:  MOVLW  05
3D4A:  MOVWF  FEA
3D4C:  MOVLW  08
3D4E:  MOVWF  FE9
3D50:  MOVFF  FF2,528
3D54:  BCF    FF2.7
3D56:  MOVLW  00
3D58:  MOVLB  0
3D5A:  CALL   092A
3D5E:  TBLRD*-
3D60:  TBLRD*+
3D62:  MOVF   FF5,W
3D64:  MOVWF  FEE
3D66:  IORLW  00
3D68:  BNZ   3D60
3D6A:  MOVLB  5
3D6C:  BTFSC  x28.7
3D6E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1); 
3D70:  MOVLW  05
3D72:  MOVWF  x29
3D74:  MOVLW  08
3D76:  MOVWF  x28
3D78:  CLRF   x2A
3D7A:  CLRF   x2B
3D7C:  MOVLW  01
3D7E:  MOVWF  x2C
3D80:  MOVWF  x2D
3D82:  MOVLB  0
3D84:  CALL   1224
....................        
....................             if(Opcion==1)    
3D88:  MOVLB  4
3D8A:  DECFSZ x7E,W
3D8C:  BRA    3DD4
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
3D8E:  MOVLW  05
3D90:  MOVWF  FEA
3D92:  MOVLW  08
3D94:  MOVWF  FE9
3D96:  MOVFF  FF2,528
3D9A:  BCF    FF2.7
3D9C:  MOVLW  00
3D9E:  MOVLB  0
3DA0:  CALL   0950
3DA4:  TBLRD*-
3DA6:  TBLRD*+
3DA8:  MOVF   FF5,W
3DAA:  MOVWF  FEE
3DAC:  IORLW  00
3DAE:  BNZ   3DA6
3DB0:  MOVLB  5
3DB2:  BTFSC  x28.7
3DB4:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,1,1);} 
3DB6:  MOVLW  05
3DB8:  MOVWF  x29
3DBA:  MOVLW  08
3DBC:  MOVWF  x28
3DBE:  CLRF   x2A
3DC0:  MOVLW  0A
3DC2:  MOVWF  x2B
3DC4:  MOVLW  01
3DC6:  MOVWF  x2C
3DC8:  MOVWF  x2D
3DCA:  MOVLB  0
3DCC:  CALL   1224
....................             else 
3DD0:  BRA    3E16
3DD2:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
3DD4:  MOVLW  05
3DD6:  MOVWF  FEA
3DD8:  MOVLW  08
3DDA:  MOVWF  FE9
3DDC:  MOVFF  FF2,528
3DE0:  BCF    FF2.7
3DE2:  MOVLW  00
3DE4:  MOVLB  0
3DE6:  CALL   0950
3DEA:  TBLRD*-
3DEC:  TBLRD*+
3DEE:  MOVF   FF5,W
3DF0:  MOVWF  FEE
3DF2:  IORLW  00
3DF4:  BNZ   3DEC
3DF6:  MOVLB  5
3DF8:  BTFSC  x28.7
3DFA:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,0,1);} 
3DFC:  MOVLW  05
3DFE:  MOVWF  x29
3E00:  MOVLW  08
3E02:  MOVWF  x28
3E04:  CLRF   x2A
3E06:  MOVLW  0A
3E08:  MOVWF  x2B
3E0A:  CLRF   x2C
3E0C:  MOVLW  01
3E0E:  MOVWF  x2D
3E10:  MOVLB  0
3E12:  CALL   1224
....................              
....................             if(Opcion==2)    
3E16:  MOVLB  4
3E18:  MOVF   x7E,W
3E1A:  SUBLW  02
3E1C:  BNZ   3E64
....................                {strcpy(Menus.Letra,"T. Secado"); 
3E1E:  MOVLW  05
3E20:  MOVWF  FEA
3E22:  MOVLW  08
3E24:  MOVWF  FE9
3E26:  MOVFF  FF2,528
3E2A:  BCF    FF2.7
3E2C:  MOVLW  00
3E2E:  MOVLB  0
3E30:  CALL   0972
3E34:  TBLRD*-
3E36:  TBLRD*+
3E38:  MOVF   FF5,W
3E3A:  MOVWF  FEE
3E3C:  IORLW  00
3E3E:  BNZ   3E36
3E40:  MOVLB  5
3E42:  BTFSC  x28.7
3E44:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,1,1);} 
3E46:  MOVLW  05
3E48:  MOVWF  x29
3E4A:  MOVLW  08
3E4C:  MOVWF  x28
3E4E:  CLRF   x2A
3E50:  MOVLW  14
3E52:  MOVWF  x2B
3E54:  MOVLW  01
3E56:  MOVWF  x2C
3E58:  MOVWF  x2D
3E5A:  MOVLB  0
3E5C:  CALL   1224
....................             else 
3E60:  BRA    3EA6
3E62:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Secado"); 
3E64:  MOVLW  05
3E66:  MOVWF  FEA
3E68:  MOVLW  08
3E6A:  MOVWF  FE9
3E6C:  MOVFF  FF2,528
3E70:  BCF    FF2.7
3E72:  MOVLW  00
3E74:  MOVLB  0
3E76:  CALL   0972
3E7A:  TBLRD*-
3E7C:  TBLRD*+
3E7E:  MOVF   FF5,W
3E80:  MOVWF  FEE
3E82:  IORLW  00
3E84:  BNZ   3E7C
3E86:  MOVLB  5
3E88:  BTFSC  x28.7
3E8A:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,0,1);}    
3E8C:  MOVLW  05
3E8E:  MOVWF  x29
3E90:  MOVLW  08
3E92:  MOVWF  x28
3E94:  CLRF   x2A
3E96:  MOVLW  14
3E98:  MOVWF  x2B
3E9A:  CLRF   x2C
3E9C:  MOVLW  01
3E9E:  MOVWF  x2D
3EA0:  MOVLB  0
3EA2:  CALL   1224
....................                 
....................              if(Opcion==3)    
3EA6:  MOVLB  4
3EA8:  MOVF   x7E,W
3EAA:  SUBLW  03
3EAC:  BNZ   3EF4
....................                {strcpy(Menus.Letra,"Temperatura"); 
3EAE:  MOVLW  05
3EB0:  MOVWF  FEA
3EB2:  MOVLW  08
3EB4:  MOVWF  FE9
3EB6:  MOVFF  FF2,528
3EBA:  BCF    FF2.7
3EBC:  MOVLW  00
3EBE:  MOVLB  0
3EC0:  CALL   098C
3EC4:  TBLRD*-
3EC6:  TBLRD*+
3EC8:  MOVF   FF5,W
3ECA:  MOVWF  FEE
3ECC:  IORLW  00
3ECE:  BNZ   3EC6
3ED0:  MOVLB  5
3ED2:  BTFSC  x28.7
3ED4:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,1,1);} 
3ED6:  MOVLW  05
3ED8:  MOVWF  x29
3EDA:  MOVLW  08
3EDC:  MOVWF  x28
3EDE:  CLRF   x2A
3EE0:  MOVLW  1E
3EE2:  MOVWF  x2B
3EE4:  MOVLW  01
3EE6:  MOVWF  x2C
3EE8:  MOVWF  x2D
3EEA:  MOVLB  0
3EEC:  CALL   1224
....................             else 
3EF0:  BRA    3F36
3EF2:  MOVLB  4
....................                {strcpy(Menus.Letra,"Temperatura"); 
3EF4:  MOVLW  05
3EF6:  MOVWF  FEA
3EF8:  MOVLW  08
3EFA:  MOVWF  FE9
3EFC:  MOVFF  FF2,528
3F00:  BCF    FF2.7
3F02:  MOVLW  00
3F04:  MOVLB  0
3F06:  CALL   098C
3F0A:  TBLRD*-
3F0C:  TBLRD*+
3F0E:  MOVF   FF5,W
3F10:  MOVWF  FEE
3F12:  IORLW  00
3F14:  BNZ   3F0C
3F16:  MOVLB  5
3F18:  BTFSC  x28.7
3F1A:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,0,1);} 
3F1C:  MOVLW  05
3F1E:  MOVWF  x29
3F20:  MOVLW  08
3F22:  MOVWF  x28
3F24:  CLRF   x2A
3F26:  MOVLW  1E
3F28:  MOVWF  x2B
3F2A:  CLRF   x2C
3F2C:  MOVLW  01
3F2E:  MOVWF  x2D
3F30:  MOVLB  0
3F32:  CALL   1224
....................                 
....................             if(Opcion==4)    
3F36:  MOVLB  4
3F38:  MOVF   x7E,W
3F3A:  SUBLW  04
3F3C:  BNZ   3F84
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
3F3E:  MOVLW  05
3F40:  MOVWF  FEA
3F42:  MOVLW  08
3F44:  MOVWF  FE9
3F46:  MOVFF  FF2,528
3F4A:  BCF    FF2.7
3F4C:  MOVLW  00
3F4E:  MOVLB  0
3F50:  CALL   09A8
3F54:  TBLRD*-
3F56:  TBLRD*+
3F58:  MOVF   FF5,W
3F5A:  MOVWF  FEE
3F5C:  IORLW  00
3F5E:  BNZ   3F56
3F60:  MOVLB  5
3F62:  BTFSC  x28.7
3F64:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,1,1);} 
3F66:  MOVLW  05
3F68:  MOVWF  x29
3F6A:  MOVLW  08
3F6C:  MOVWF  x28
3F6E:  CLRF   x2A
3F70:  MOVLW  28
3F72:  MOVWF  x2B
3F74:  MOVLW  01
3F76:  MOVWF  x2C
3F78:  MOVWF  x2D
3F7A:  MOVLB  0
3F7C:  CALL   1224
....................             else 
3F80:  BRA    3FC6
3F82:  MOVLB  4
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
3F84:  MOVLW  05
3F86:  MOVWF  FEA
3F88:  MOVLW  08
3F8A:  MOVWF  FE9
3F8C:  MOVFF  FF2,528
3F90:  BCF    FF2.7
3F92:  MOVLW  00
3F94:  MOVLB  0
3F96:  CALL   09A8
3F9A:  TBLRD*-
3F9C:  TBLRD*+
3F9E:  MOVF   FF5,W
3FA0:  MOVWF  FEE
3FA2:  IORLW  00
3FA4:  BNZ   3F9C
3FA6:  MOVLB  5
3FA8:  BTFSC  x28.7
3FAA:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,0,1);}    
3FAC:  MOVLW  05
3FAE:  MOVWF  x29
3FB0:  MOVLW  08
3FB2:  MOVWF  x28
3FB4:  CLRF   x2A
3FB6:  MOVLW  28
3FB8:  MOVWF  x2B
3FBA:  CLRF   x2C
3FBC:  MOVLW  01
3FBE:  MOVWF  x2D
3FC0:  MOVLB  0
3FC2:  CALL   1224
....................                 
....................             if(Opcion==5)    
3FC6:  MOVLB  4
3FC8:  MOVF   x7E,W
3FCA:  SUBLW  05
3FCC:  BNZ   4014
....................                {strcpy(Menus.Letra,"Continuar"); 
3FCE:  MOVLW  05
3FD0:  MOVWF  FEA
3FD2:  MOVLW  08
3FD4:  MOVWF  FE9
3FD6:  MOVFF  FF2,528
3FDA:  BCF    FF2.7
3FDC:  MOVLW  00
3FDE:  MOVLB  0
3FE0:  CALL   09CA
3FE4:  TBLRD*-
3FE6:  TBLRD*+
3FE8:  MOVF   FF5,W
3FEA:  MOVWF  FEE
3FEC:  IORLW  00
3FEE:  BNZ   3FE6
3FF0:  MOVLB  5
3FF2:  BTFSC  x28.7
3FF4:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,1,1);} 
3FF6:  MOVLW  05
3FF8:  MOVWF  x29
3FFA:  MOVLW  08
3FFC:  MOVWF  x28
3FFE:  CLRF   x2A
4000:  MOVLW  32
4002:  MOVWF  x2B
4004:  MOVLW  01
4006:  MOVWF  x2C
4008:  MOVWF  x2D
400A:  MOVLB  0
400C:  CALL   1224
....................             else 
4010:  BRA    4056
4012:  MOVLB  4
....................                {strcpy(Menus.Letra,"Continuar"); 
4014:  MOVLW  05
4016:  MOVWF  FEA
4018:  MOVLW  08
401A:  MOVWF  FE9
401C:  MOVFF  FF2,528
4020:  BCF    FF2.7
4022:  MOVLW  00
4024:  MOVLB  0
4026:  CALL   09CA
402A:  TBLRD*-
402C:  TBLRD*+
402E:  MOVF   FF5,W
4030:  MOVWF  FEE
4032:  IORLW  00
4034:  BNZ   402C
4036:  MOVLB  5
4038:  BTFSC  x28.7
403A:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,0,1);}   
403C:  MOVLW  05
403E:  MOVWF  x29
4040:  MOVLW  08
4042:  MOVWF  x28
4044:  CLRF   x2A
4046:  MOVLW  32
4048:  MOVWF  x2B
404A:  CLRF   x2C
404C:  MOVLW  01
404E:  MOVWF  x2D
4050:  MOVLB  0
4052:  CALL   1224
....................                           
....................             visual=0; 
4056:  MOVLB  4
4058:  BCF    x6A.4
....................          } 
....................          if(UP)//Si oprime hacia arriba 
405A:  BSF    F92.5
405C:  BTFSS  F80.5
405E:  BRA    407A
....................          {  if(Flanco == 0)  
4060:  BTFSC  x6A.0
4062:  BRA    4078
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
4064:  BSF    x6A.0
4066:  MOVLW  1E
4068:  MOVLB  5
406A:  MOVWF  x29
406C:  MOVLB  0
406E:  CALL   131E
4072:  MOVLB  4
4074:  DECF   x7E,F
4076:  BSF    x6A.4
....................                } 
....................          } 
....................             else 
4078:  BRA    407C
....................                {Flanco = 0;} 
407A:  BCF    x6A.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
407C:  BSF    F96.0
407E:  BTFSS  F84.0
4080:  BRA    409C
....................          {  if(Flanco2 == 0)  
4082:  BTFSC  x6A.2
4084:  BRA    409A
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
4086:  BSF    x6A.2
4088:  MOVLW  1E
408A:  MOVLB  5
408C:  MOVWF  x29
408E:  MOVLB  0
4090:  CALL   131E
4094:  MOVLB  4
4096:  INCF   x7E,F
4098:  BSF    x6A.4
....................                }      
....................          } 
....................             else 
409A:  BRA    409E
....................                {Flanco2 = 0;}   
409C:  BCF    x6A.2
....................                 
....................          if(RIGHT)//Si oprime SET 
409E:  BSF    F96.1
40A0:  BTFSS  F84.1
40A2:  BRA    40DC
....................          {  if(Flanco1 == 0)  
40A4:  BTFSC  x6A.1
40A6:  BRA    40DA
....................                {Flanco1 = 1;delay_ms(300);Menu=Opcion+10;Opcion=1;glcd_fillscreen(OFF);visual=1; 
40A8:  BSF    x6A.1
40AA:  MOVLW  02
40AC:  MOVLB  5
40AE:  MOVWF  x28
40B0:  MOVLW  96
40B2:  MOVWF  x29
40B4:  MOVLB  0
40B6:  CALL   131E
40BA:  MOVLB  5
40BC:  DECFSZ x28,F
40BE:  BRA    40B0
40C0:  MOVLW  0A
40C2:  MOVLB  4
40C4:  ADDWF  x7E,W
40C6:  MOVWF  x77
40C8:  MOVLW  01
40CA:  MOVWF  x7E
40CC:  MOVLB  5
40CE:  CLRF   x29
40D0:  MOVLB  0
40D2:  CALL   0BF4
40D6:  MOVLB  4
40D8:  BSF    x6A.4
....................                } 
....................          } 
....................             else 
40DA:  BRA    40DE
....................                {Flanco1 = 0;}   
40DC:  BCF    x6A.1
....................                 
....................          if(LEFT)//Si oprime boton de Toma. 
40DE:  BSF    F96.2
40E0:  BTFSS  F84.2
40E2:  BRA    410E
....................          {delay_ms(700);Menu=1;glcd_fillscreen(OFF);visual=1;} 
40E4:  MOVLW  04
40E6:  MOVLB  5
40E8:  MOVWF  x28
40EA:  MOVLW  AF
40EC:  MOVWF  x29
40EE:  MOVLB  0
40F0:  CALL   131E
40F4:  MOVLB  5
40F6:  DECFSZ x28,F
40F8:  BRA    40EA
40FA:  MOVLW  01
40FC:  MOVLB  4
40FE:  MOVWF  x77
4100:  MOVLB  5
4102:  CLRF   x29
4104:  MOVLB  0
4106:  CALL   0BF4
410A:  MOVLB  4
410C:  BSF    x6A.4
....................           
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==9){ // Menu de Cambio de Contraseña 
410E:  MOVF   x77,W
4110:  SUBLW  09
4112:  BTFSS  FD8.2
4114:  BRA    45CA
....................          
....................       strcpy(Menus.Letra,"Clave"); 
4116:  MOVLW  05
4118:  MOVWF  FEA
411A:  MOVLW  08
411C:  MOVWF  FE9
411E:  MOVFF  FF2,528
4122:  BCF    FF2.7
4124:  MOVLW  00
4126:  MOVLB  0
4128:  CALL   067E
412C:  TBLRD*-
412E:  TBLRD*+
4130:  MOVF   FF5,W
4132:  MOVWF  FEE
4134:  IORLW  00
4136:  BNZ   412E
4138:  MOVLB  5
413A:  BTFSC  x28.7
413C:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
413E:  MOVLW  05
4140:  MOVWF  x29
4142:  MOVLW  08
4144:  MOVWF  x28
4146:  MOVLW  1E
4148:  MOVWF  x2A
414A:  CLRF   x2B
414C:  MOVLW  01
414E:  MOVWF  x2C
4150:  MOVLW  02
4152:  MOVWF  x2D
4154:  MOVLB  0
4156:  CALL   1224
....................        
....................       if(unidad==1) 
415A:  MOVLB  4
415C:  DECFSZ x78,W
415E:  BRA    41BE
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1); 
4160:  MOVFF  4A2,52A
4164:  MOVLW  14
4166:  MOVLB  5
4168:  MOVWF  x2B
416A:  MOVLW  1E
416C:  MOVWF  x2C
416E:  MOVLW  01
4170:  MOVWF  x2D
4172:  MOVLB  0
4174:  CALL   1474
....................          displayContrasena(Contrasena[1],40,30,0); 
4178:  MOVFF  4A3,52A
417C:  MOVLW  28
417E:  MOVLB  5
4180:  MOVWF  x2B
4182:  MOVLW  1E
4184:  MOVWF  x2C
4186:  CLRF   x2D
4188:  MOVLB  0
418A:  CALL   1474
....................          displayContrasena(Contrasena[2],60,30,0); 
418E:  MOVFF  4A4,52A
4192:  MOVLW  3C
4194:  MOVLB  5
4196:  MOVWF  x2B
4198:  MOVLW  1E
419A:  MOVWF  x2C
419C:  CLRF   x2D
419E:  MOVLB  0
41A0:  CALL   1474
....................          displayContrasena(Contrasena[3],80,30,0); 
41A4:  MOVFF  4A5,52A
41A8:  MOVLW  50
41AA:  MOVLB  5
41AC:  MOVWF  x2B
41AE:  MOVLW  1E
41B0:  MOVWF  x2C
41B2:  CLRF   x2D
41B4:  MOVLB  0
41B6:  CALL   1474
....................       } 
....................       else 
41BA:  BRA    42E6
41BC:  MOVLB  4
....................       { 
....................          if(unidad==2) 
41BE:  MOVF   x78,W
41C0:  SUBLW  02
41C2:  BNZ   4222
....................          { 
....................             displayContrasena(Contrasena[0],20,30,0); 
41C4:  MOVFF  4A2,52A
41C8:  MOVLW  14
41CA:  MOVLB  5
41CC:  MOVWF  x2B
41CE:  MOVLW  1E
41D0:  MOVWF  x2C
41D2:  CLRF   x2D
41D4:  MOVLB  0
41D6:  CALL   1474
....................             displayContrasena(Contrasena[1],40,30,1); 
41DA:  MOVFF  4A3,52A
41DE:  MOVLW  28
41E0:  MOVLB  5
41E2:  MOVWF  x2B
41E4:  MOVLW  1E
41E6:  MOVWF  x2C
41E8:  MOVLW  01
41EA:  MOVWF  x2D
41EC:  MOVLB  0
41EE:  CALL   1474
....................             displayContrasena(Contrasena[2],60,30,0); 
41F2:  MOVFF  4A4,52A
41F6:  MOVLW  3C
41F8:  MOVLB  5
41FA:  MOVWF  x2B
41FC:  MOVLW  1E
41FE:  MOVWF  x2C
4200:  CLRF   x2D
4202:  MOVLB  0
4204:  CALL   1474
....................             displayContrasena(Contrasena[3],80,30,0); 
4208:  MOVFF  4A5,52A
420C:  MOVLW  50
420E:  MOVLB  5
4210:  MOVWF  x2B
4212:  MOVLW  1E
4214:  MOVWF  x2C
4216:  CLRF   x2D
4218:  MOVLB  0
421A:  CALL   1474
....................          } 
....................          else 
421E:  BRA    42E6
4220:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4222:  MOVF   x78,W
4224:  SUBLW  03
4226:  BNZ   4286
....................             { 
....................                displayContrasena(Contrasena[0],20,30,0); 
4228:  MOVFF  4A2,52A
422C:  MOVLW  14
422E:  MOVLB  5
4230:  MOVWF  x2B
4232:  MOVLW  1E
4234:  MOVWF  x2C
4236:  CLRF   x2D
4238:  MOVLB  0
423A:  CALL   1474
....................                displayContrasena(Contrasena[1],40,30,0); 
423E:  MOVFF  4A3,52A
4242:  MOVLW  28
4244:  MOVLB  5
4246:  MOVWF  x2B
4248:  MOVLW  1E
424A:  MOVWF  x2C
424C:  CLRF   x2D
424E:  MOVLB  0
4250:  CALL   1474
....................                displayContrasena(Contrasena[2],60,30,1); 
4254:  MOVFF  4A4,52A
4258:  MOVLW  3C
425A:  MOVLB  5
425C:  MOVWF  x2B
425E:  MOVLW  1E
4260:  MOVWF  x2C
4262:  MOVLW  01
4264:  MOVWF  x2D
4266:  MOVLB  0
4268:  CALL   1474
....................                displayContrasena(Contrasena[3],80,30,0); 
426C:  MOVFF  4A5,52A
4270:  MOVLW  50
4272:  MOVLB  5
4274:  MOVWF  x2B
4276:  MOVLW  1E
4278:  MOVWF  x2C
427A:  CLRF   x2D
427C:  MOVLB  0
427E:  CALL   1474
....................             } 
....................             else 
4282:  BRA    42E6
4284:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4286:  MOVF   x78,W
4288:  SUBLW  04
428A:  BNZ   42E8
....................                { 
....................                   displayContrasena(Contrasena[0],20,30,0); 
428C:  MOVFF  4A2,52A
4290:  MOVLW  14
4292:  MOVLB  5
4294:  MOVWF  x2B
4296:  MOVLW  1E
4298:  MOVWF  x2C
429A:  CLRF   x2D
429C:  MOVLB  0
429E:  CALL   1474
....................                   displayContrasena(Contrasena[1],40,30,0); 
42A2:  MOVFF  4A3,52A
42A6:  MOVLW  28
42A8:  MOVLB  5
42AA:  MOVWF  x2B
42AC:  MOVLW  1E
42AE:  MOVWF  x2C
42B0:  CLRF   x2D
42B2:  MOVLB  0
42B4:  CALL   1474
....................                   displayContrasena(Contrasena[2],60,30,0); 
42B8:  MOVFF  4A4,52A
42BC:  MOVLW  3C
42BE:  MOVLB  5
42C0:  MOVWF  x2B
42C2:  MOVLW  1E
42C4:  MOVWF  x2C
42C6:  CLRF   x2D
42C8:  MOVLB  0
42CA:  CALL   1474
....................                   displayContrasena(Contrasena[3],80,30,1); 
42CE:  MOVFF  4A5,52A
42D2:  MOVLW  50
42D4:  MOVLB  5
42D6:  MOVWF  x2B
42D8:  MOVLW  1E
42DA:  MOVWF  x2C
42DC:  MOVLW  01
42DE:  MOVWF  x2D
42E0:  MOVLB  0
42E2:  CALL   1474
42E6:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
42E8:  BSF    F92.5
42EA:  BTFSS  F80.5
42EC:  BRA    4356
....................       { 
....................          if(Flanco == 0) 
42EE:  BTFSC  x6A.0
42F0:  BRA    4354
....................          { 
....................             Flanco = 1;delay_ms(30); 
42F2:  BSF    x6A.0
42F4:  MOVLW  1E
42F6:  MOVLB  5
42F8:  MOVWF  x29
42FA:  MOVLB  0
42FC:  CALL   131E
....................             for(i=1;i<=4;i++) 
4300:  MOVLW  01
4302:  MOVLB  4
4304:  MOVWF  x7B
4306:  MOVF   x7B,W
4308:  SUBLW  04
430A:  BNC   4354
....................             { 
....................                if(unidad==i) 
430C:  MOVF   x7B,W
430E:  SUBWF  x78,W
4310:  BNZ   4350
....................                { 
....................                   Contrasena[i-1]++; 
4312:  MOVLW  01
4314:  SUBWF  x7B,W
4316:  CLRF   03
4318:  ADDLW  A2
431A:  MOVWF  FE9
431C:  MOVLW  04
431E:  ADDWFC 03,W
4320:  MOVWF  FEA
4322:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
4324:  MOVLW  01
4326:  SUBWF  x7B,W
4328:  CLRF   03
432A:  ADDLW  A2
432C:  MOVWF  FE9
432E:  MOVLW  04
4330:  ADDWFC 03,W
4332:  MOVWF  FEA
4334:  BTFSC  FEF.7
4336:  BRA    4350
4338:  MOVF   FEF,W
433A:  SUBLW  09
433C:  BC    4350
....................                   { 
....................                      Contrasena[i-1]=0; 
433E:  MOVLW  01
4340:  SUBWF  x7B,W
4342:  CLRF   03
4344:  ADDLW  A2
4346:  MOVWF  FE9
4348:  MOVLW  04
434A:  ADDWFC 03,W
434C:  MOVWF  FEA
434E:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4350:  INCF   x7B,F
4352:  BRA    4306
....................          } 
....................       } 
....................       else 
4354:  BRA    4358
....................       { 
....................          Flanco = 0; 
4356:  BCF    x6A.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4358:  BSF    F96.0
435A:  BTFSS  F84.0
435C:  BRA    43C4
....................       { 
....................          if(Flanco2 == 0) 
435E:  BTFSC  x6A.2
4360:  BRA    43C2
....................             {Flanco2 = 1;delay_ms(30); 
4362:  BSF    x6A.2
4364:  MOVLW  1E
4366:  MOVLB  5
4368:  MOVWF  x29
436A:  MOVLB  0
436C:  CALL   131E
....................                for(i=1;i<=4;i++) 
4370:  MOVLW  01
4372:  MOVLB  4
4374:  MOVWF  x7B
4376:  MOVF   x7B,W
4378:  SUBLW  04
437A:  BNC   43C2
....................                { 
....................                   if(unidad==i) 
437C:  MOVF   x7B,W
437E:  SUBWF  x78,W
4380:  BNZ   43BE
....................                   {Contrasena[i-1]--;  
4382:  MOVLW  01
4384:  SUBWF  x7B,W
4386:  CLRF   03
4388:  ADDLW  A2
438A:  MOVWF  FE9
438C:  MOVLW  04
438E:  ADDWFC 03,W
4390:  MOVWF  FEA
4392:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
4394:  MOVLW  01
4396:  SUBWF  x7B,W
4398:  CLRF   03
439A:  ADDLW  A2
439C:  MOVWF  FE9
439E:  MOVLW  04
43A0:  ADDWFC 03,W
43A2:  MOVWF  FEA
43A4:  BTFSC  FEF.7
43A6:  BRA    43AA
43A8:  BRA    43BE
....................                         {Contrasena[i-1]=9;} 
43AA:  MOVLW  01
43AC:  SUBWF  x7B,W
43AE:  CLRF   03
43B0:  ADDLW  A2
43B2:  MOVWF  FE9
43B4:  MOVLW  04
43B6:  ADDWFC 03,W
43B8:  MOVWF  FEA
43BA:  MOVLW  09
43BC:  MOVWF  FEF
....................                   } 
....................                }       
43BE:  INCF   x7B,F
43C0:  BRA    4376
....................             }      
....................       } 
....................       else 
43C2:  BRA    43C6
....................       { 
....................          Flanco2 = 0; 
43C4:  BCF    x6A.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
43C6:  BSF    F96.1
43C8:  BTFSS  F84.1
43CA:  BRA    43EE
....................       { 
....................          if(Flanco1 == 0) 
43CC:  BTFSC  x6A.1
43CE:  BRA    43EC
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
43D0:  BSF    x6A.1
43D2:  MOVLW  02
43D4:  MOVLB  5
43D6:  MOVWF  x28
43D8:  MOVLW  96
43DA:  MOVWF  x29
43DC:  MOVLB  0
43DE:  CALL   131E
43E2:  MOVLB  5
43E4:  DECFSZ x28,F
43E6:  BRA    43D8
43E8:  MOVLB  4
43EA:  INCF   x78,F
....................       } 
....................       else 
43EC:  BRA    43F0
....................       { 
....................          Flanco1 = 0; 
43EE:  BCF    x6A.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
43F0:  BSF    F96.2
43F2:  BTFSS  F84.2
43F4:  BRA    441E
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
43F6:  MOVLW  04
43F8:  MOVLB  5
43FA:  MOVWF  x28
43FC:  MOVLW  AF
43FE:  MOVWF  x29
4400:  MOVLB  0
4402:  CALL   131E
4406:  MOVLB  5
4408:  DECFSZ x28,F
440A:  BRA    43FC
440C:  MOVLW  01
440E:  MOVLB  4
4410:  MOVWF  x77
4412:  MOVLB  5
4414:  CLRF   x29
4416:  MOVLB  0
4418:  CALL   0BF4
441C:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
441E:  MOVF   x78,W
4420:  SUBLW  04
4422:  BTFSC  FD8.0
4424:  BRA    45CA
....................       {glcd_fillScreen(OFF); 
4426:  MOVLB  5
4428:  CLRF   x29
442A:  MOVLB  0
442C:  CALL   0BF4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
4430:  MOVLB  4
4432:  MOVF   xA6,W
4434:  SUBWF  xA2,W
4436:  BNZ   4508
4438:  MOVF   xA7,W
443A:  SUBWF  xA3,W
443C:  BNZ   4508
443E:  MOVF   xA8,W
4440:  SUBWF  xA4,W
4442:  BNZ   4508
4444:  MOVF   xA9,W
4446:  SUBWF  xA5,W
4448:  BNZ   4508
....................          { 
....................             glcd_fillScreen(OFF); 
444A:  MOVLB  5
444C:  CLRF   x29
444E:  MOVLB  0
4450:  CALL   0BF4
....................             strcpy(Menus.Letra,"Clave"); 
4454:  MOVLW  05
4456:  MOVWF  FEA
4458:  MOVLW  08
445A:  MOVWF  FE9
445C:  MOVFF  FF2,528
4460:  BCF    FF2.7
4462:  MOVLW  00
4464:  CALL   067E
4468:  TBLRD*-
446A:  TBLRD*+
446C:  MOVF   FF5,W
446E:  MOVWF  FEE
4470:  IORLW  00
4472:  BNZ   446A
4474:  MOVLB  5
4476:  BTFSC  x28.7
4478:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
447A:  MOVLW  05
447C:  MOVWF  x29
447E:  MOVLW  08
4480:  MOVWF  x28
4482:  MOVLW  1E
4484:  MOVWF  x2A
4486:  CLRF   x2B
4488:  CLRF   x2C
448A:  MOVLW  02
448C:  MOVWF  x2D
448E:  MOVLB  0
4490:  CALL   1224
....................             strcpy(Menus.Letra,"Correcta"); 
4494:  MOVLW  05
4496:  MOVWF  FEA
4498:  MOVLW  08
449A:  MOVWF  FE9
449C:  MOVFF  FF2,528
44A0:  BCF    FF2.7
44A2:  MOVLW  00
44A4:  CALL   0694
44A8:  TBLRD*-
44AA:  TBLRD*+
44AC:  MOVF   FF5,W
44AE:  MOVWF  FEE
44B0:  IORLW  00
44B2:  BNZ   44AA
44B4:  MOVLB  5
44B6:  BTFSC  x28.7
44B8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
44BA:  MOVLW  05
44BC:  MOVWF  x29
44BE:  MOVLW  08
44C0:  MOVWF  x28
44C2:  MOVLW  0F
44C4:  MOVWF  x2A
44C6:  MOVLW  1E
44C8:  MOVWF  x2B
44CA:  CLRF   x2C
44CC:  MOVLW  02
44CE:  MOVWF  x2D
44D0:  MOVLB  0
44D2:  CALL   1224
....................             Menu=91;glcd_update();delay_ms(1000); 
44D6:  MOVLW  5B
44D8:  MOVLB  4
44DA:  MOVWF  x77
44DC:  MOVLB  0
44DE:  CALL   0C4E
44E2:  MOVLW  04
44E4:  MOVLB  5
44E6:  MOVWF  x28
44E8:  MOVLW  FA
44EA:  MOVWF  x29
44EC:  MOVLB  0
44EE:  CALL   131E
44F2:  MOVLB  5
44F4:  DECFSZ x28,F
44F6:  BRA    44E8
....................             glcd_fillScreen(OFF);unidad=1; 
44F8:  CLRF   x29
44FA:  MOVLB  0
44FC:  CALL   0BF4
4500:  MOVLW  01
4502:  MOVLB  4
4504:  MOVWF  x78
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
4506:  BRA    45CA
....................          { 
....................             glcd_fillScreen(OFF); 
4508:  MOVLB  5
450A:  CLRF   x29
450C:  MOVLB  0
450E:  CALL   0BF4
....................             strcpy(Menus.Letra,"Clave"); 
4512:  MOVLW  05
4514:  MOVWF  FEA
4516:  MOVLW  08
4518:  MOVWF  FE9
451A:  MOVFF  FF2,528
451E:  BCF    FF2.7
4520:  MOVLW  00
4522:  CALL   067E
4526:  TBLRD*-
4528:  TBLRD*+
452A:  MOVF   FF5,W
452C:  MOVWF  FEE
452E:  IORLW  00
4530:  BNZ   4528
4532:  MOVLB  5
4534:  BTFSC  x28.7
4536:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4538:  MOVLW  05
453A:  MOVWF  x29
453C:  MOVLW  08
453E:  MOVWF  x28
4540:  MOVLW  1E
4542:  MOVWF  x2A
4544:  CLRF   x2B
4546:  CLRF   x2C
4548:  MOVLW  02
454A:  MOVWF  x2D
454C:  MOVLB  0
454E:  CALL   1224
....................             strcpy(Menus.Letra,"Incorrecta"); 
4552:  MOVLW  05
4554:  MOVWF  FEA
4556:  MOVLW  08
4558:  MOVWF  FE9
455A:  MOVFF  FF2,528
455E:  BCF    FF2.7
4560:  MOVLW  00
4562:  CALL   06AE
4566:  TBLRD*-
4568:  TBLRD*+
456A:  MOVF   FF5,W
456C:  MOVWF  FEE
456E:  IORLW  00
4570:  BNZ   4568
4572:  MOVLB  5
4574:  BTFSC  x28.7
4576:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
4578:  MOVLW  05
457A:  MOVWF  x29
457C:  MOVLW  08
457E:  MOVWF  x28
4580:  CLRF   x2A
4582:  MOVLW  1E
4584:  MOVWF  x2B
4586:  CLRF   x2C
4588:  MOVLW  02
458A:  MOVWF  x2D
458C:  MOVLB  0
458E:  CALL   1224
....................             Menu=1;glcd_update();delay_ms(1000); 
4592:  MOVLW  01
4594:  MOVLB  4
4596:  MOVWF  x77
4598:  MOVLB  0
459A:  CALL   0C4E
459E:  MOVLW  04
45A0:  MOVLB  5
45A2:  MOVWF  x28
45A4:  MOVLW  FA
45A6:  MOVWF  x29
45A8:  MOVLB  0
45AA:  CALL   131E
45AE:  MOVLB  5
45B0:  DECFSZ x28,F
45B2:  BRA    45A4
....................             glcd_fillScreen(OFF);unidad=1; 
45B4:  CLRF   x29
45B6:  MOVLB  0
45B8:  CALL   0BF4
45BC:  MOVLW  01
45BE:  MOVLB  4
45C0:  MOVWF  x78
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
45C2:  CLRF   xA2
45C4:  CLRF   xA3
45C6:  CLRF   xA4
45C8:  CLRF   xA5
....................          } 
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==91){ // Menu de Cambio de Contraseña 
45CA:  MOVF   x77,W
45CC:  SUBLW  5B
45CE:  BTFSS  FD8.2
45D0:  BRA    49AA
....................          
....................       strcpy(Menus.Letra,"Clave Nueva"); 
45D2:  MOVLW  05
45D4:  MOVWF  FEA
45D6:  MOVLW  08
45D8:  MOVWF  FE9
45DA:  MOVFF  FF2,528
45DE:  BCF    FF2.7
45E0:  MOVLW  00
45E2:  MOVLB  0
45E4:  CALL   09E4
45E8:  TBLRD*-
45EA:  TBLRD*+
45EC:  MOVF   FF5,W
45EE:  MOVWF  FEE
45F0:  IORLW  00
45F2:  BNZ   45EA
45F4:  MOVLB  5
45F6:  BTFSC  x28.7
45F8:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2);      
45FA:  MOVLW  05
45FC:  MOVWF  x29
45FE:  MOVLW  08
4600:  MOVWF  x28
4602:  CLRF   x2A
4604:  CLRF   x2B
4606:  MOVLW  01
4608:  MOVWF  x2C
460A:  MOVLW  02
460C:  MOVWF  x2D
460E:  MOVLB  0
4610:  CALL   1224
....................        
....................       if(unidad==1) 
4614:  MOVLB  4
4616:  DECFSZ x78,W
4618:  BRA    4678
....................       { 
....................          displayContrasena(Password[0],20,30,1); 
461A:  MOVFF  4A6,52A
461E:  MOVLW  14
4620:  MOVLB  5
4622:  MOVWF  x2B
4624:  MOVLW  1E
4626:  MOVWF  x2C
4628:  MOVLW  01
462A:  MOVWF  x2D
462C:  MOVLB  0
462E:  CALL   1474
....................          displayContrasena(Password[1],40,30,0); 
4632:  MOVFF  4A7,52A
4636:  MOVLW  28
4638:  MOVLB  5
463A:  MOVWF  x2B
463C:  MOVLW  1E
463E:  MOVWF  x2C
4640:  CLRF   x2D
4642:  MOVLB  0
4644:  CALL   1474
....................          displayContrasena(Password[2],60,30,0); 
4648:  MOVFF  4A8,52A
464C:  MOVLW  3C
464E:  MOVLB  5
4650:  MOVWF  x2B
4652:  MOVLW  1E
4654:  MOVWF  x2C
4656:  CLRF   x2D
4658:  MOVLB  0
465A:  CALL   1474
....................          displayContrasena(Password[3],80,30,0); 
465E:  MOVFF  4A9,52A
4662:  MOVLW  50
4664:  MOVLB  5
4666:  MOVWF  x2B
4668:  MOVLW  1E
466A:  MOVWF  x2C
466C:  CLRF   x2D
466E:  MOVLB  0
4670:  CALL   1474
....................       } 
....................       else 
4674:  BRA    47A0
4676:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4678:  MOVF   x78,W
467A:  SUBLW  02
467C:  BNZ   46DC
....................          { 
....................             displayContrasena(Password[0],20,30,0); 
467E:  MOVFF  4A6,52A
4682:  MOVLW  14
4684:  MOVLB  5
4686:  MOVWF  x2B
4688:  MOVLW  1E
468A:  MOVWF  x2C
468C:  CLRF   x2D
468E:  MOVLB  0
4690:  CALL   1474
....................             displayContrasena(Password[1],40,30,1); 
4694:  MOVFF  4A7,52A
4698:  MOVLW  28
469A:  MOVLB  5
469C:  MOVWF  x2B
469E:  MOVLW  1E
46A0:  MOVWF  x2C
46A2:  MOVLW  01
46A4:  MOVWF  x2D
46A6:  MOVLB  0
46A8:  CALL   1474
....................             displayContrasena(Password[2],60,30,0); 
46AC:  MOVFF  4A8,52A
46B0:  MOVLW  3C
46B2:  MOVLB  5
46B4:  MOVWF  x2B
46B6:  MOVLW  1E
46B8:  MOVWF  x2C
46BA:  CLRF   x2D
46BC:  MOVLB  0
46BE:  CALL   1474
....................             displayContrasena(Password[3],80,30,0); 
46C2:  MOVFF  4A9,52A
46C6:  MOVLW  50
46C8:  MOVLB  5
46CA:  MOVWF  x2B
46CC:  MOVLW  1E
46CE:  MOVWF  x2C
46D0:  CLRF   x2D
46D2:  MOVLB  0
46D4:  CALL   1474
....................          } 
....................          else 
46D8:  BRA    47A0
46DA:  MOVLB  4
....................          { 
....................             if(unidad==3) 
46DC:  MOVF   x78,W
46DE:  SUBLW  03
46E0:  BNZ   4740
....................             { 
....................                displayContrasena(Password[0],20,30,0); 
46E2:  MOVFF  4A6,52A
46E6:  MOVLW  14
46E8:  MOVLB  5
46EA:  MOVWF  x2B
46EC:  MOVLW  1E
46EE:  MOVWF  x2C
46F0:  CLRF   x2D
46F2:  MOVLB  0
46F4:  CALL   1474
....................                displayContrasena(Password[1],40,30,0); 
46F8:  MOVFF  4A7,52A
46FC:  MOVLW  28
46FE:  MOVLB  5
4700:  MOVWF  x2B
4702:  MOVLW  1E
4704:  MOVWF  x2C
4706:  CLRF   x2D
4708:  MOVLB  0
470A:  CALL   1474
....................                displayContrasena(Password[2],60,30,1); 
470E:  MOVFF  4A8,52A
4712:  MOVLW  3C
4714:  MOVLB  5
4716:  MOVWF  x2B
4718:  MOVLW  1E
471A:  MOVWF  x2C
471C:  MOVLW  01
471E:  MOVWF  x2D
4720:  MOVLB  0
4722:  CALL   1474
....................                displayContrasena(Password[3],80,30,0); 
4726:  MOVFF  4A9,52A
472A:  MOVLW  50
472C:  MOVLB  5
472E:  MOVWF  x2B
4730:  MOVLW  1E
4732:  MOVWF  x2C
4734:  CLRF   x2D
4736:  MOVLB  0
4738:  CALL   1474
....................             } 
....................             else 
473C:  BRA    47A0
473E:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4740:  MOVF   x78,W
4742:  SUBLW  04
4744:  BNZ   47A2
....................                { 
....................                   displayContrasena(Password[0],20,30,0); 
4746:  MOVFF  4A6,52A
474A:  MOVLW  14
474C:  MOVLB  5
474E:  MOVWF  x2B
4750:  MOVLW  1E
4752:  MOVWF  x2C
4754:  CLRF   x2D
4756:  MOVLB  0
4758:  CALL   1474
....................                   displayContrasena(Password[1],40,30,0); 
475C:  MOVFF  4A7,52A
4760:  MOVLW  28
4762:  MOVLB  5
4764:  MOVWF  x2B
4766:  MOVLW  1E
4768:  MOVWF  x2C
476A:  CLRF   x2D
476C:  MOVLB  0
476E:  CALL   1474
....................                   displayContrasena(Password[2],60,30,0); 
4772:  MOVFF  4A8,52A
4776:  MOVLW  3C
4778:  MOVLB  5
477A:  MOVWF  x2B
477C:  MOVLW  1E
477E:  MOVWF  x2C
4780:  CLRF   x2D
4782:  MOVLB  0
4784:  CALL   1474
....................                   displayContrasena(Password[3],80,30,1); 
4788:  MOVFF  4A9,52A
478C:  MOVLW  50
478E:  MOVLB  5
4790:  MOVWF  x2B
4792:  MOVLW  1E
4794:  MOVWF  x2C
4796:  MOVLW  01
4798:  MOVWF  x2D
479A:  MOVLB  0
479C:  CALL   1474
47A0:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
47A2:  BSF    F92.5
47A4:  BTFSS  F80.5
47A6:  BRA    4810
....................       { 
....................          if(Flanco == 0) 
47A8:  BTFSC  x6A.0
47AA:  BRA    480E
....................          { 
....................             Flanco = 1;delay_ms(30); 
47AC:  BSF    x6A.0
47AE:  MOVLW  1E
47B0:  MOVLB  5
47B2:  MOVWF  x29
47B4:  MOVLB  0
47B6:  CALL   131E
....................             for(i=1;i<=4;i++) 
47BA:  MOVLW  01
47BC:  MOVLB  4
47BE:  MOVWF  x7B
47C0:  MOVF   x7B,W
47C2:  SUBLW  04
47C4:  BNC   480E
....................             { 
....................                if(unidad==i) 
47C6:  MOVF   x7B,W
47C8:  SUBWF  x78,W
47CA:  BNZ   480A
....................                { 
....................                   Password[i-1]++; 
47CC:  MOVLW  01
47CE:  SUBWF  x7B,W
47D0:  CLRF   03
47D2:  ADDLW  A6
47D4:  MOVWF  FE9
47D6:  MOVLW  04
47D8:  ADDWFC 03,W
47DA:  MOVWF  FEA
47DC:  INCF   FEF,F
....................                   if(Password[i-1]>9)    
47DE:  MOVLW  01
47E0:  SUBWF  x7B,W
47E2:  CLRF   03
47E4:  ADDLW  A6
47E6:  MOVWF  FE9
47E8:  MOVLW  04
47EA:  ADDWFC 03,W
47EC:  MOVWF  FEA
47EE:  BTFSC  FEF.7
47F0:  BRA    480A
47F2:  MOVF   FEF,W
47F4:  SUBLW  09
47F6:  BC    480A
....................                   { 
....................                      Password[i-1]=0; 
47F8:  MOVLW  01
47FA:  SUBWF  x7B,W
47FC:  CLRF   03
47FE:  ADDLW  A6
4800:  MOVWF  FE9
4802:  MOVLW  04
4804:  ADDWFC 03,W
4806:  MOVWF  FEA
4808:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
480A:  INCF   x7B,F
480C:  BRA    47C0
....................          } 
....................       } 
....................       else 
480E:  BRA    4812
....................       { 
....................          Flanco = 0; 
4810:  BCF    x6A.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4812:  BSF    F96.0
4814:  BTFSS  F84.0
4816:  BRA    487E
....................       { 
....................          if(Flanco2 == 0) 
4818:  BTFSC  x6A.2
481A:  BRA    487C
....................             {Flanco2 = 1;delay_ms(30); 
481C:  BSF    x6A.2
481E:  MOVLW  1E
4820:  MOVLB  5
4822:  MOVWF  x29
4824:  MOVLB  0
4826:  CALL   131E
....................                for(i=1;i<=4;i++) 
482A:  MOVLW  01
482C:  MOVLB  4
482E:  MOVWF  x7B
4830:  MOVF   x7B,W
4832:  SUBLW  04
4834:  BNC   487C
....................                { 
....................                   if(unidad==i) 
4836:  MOVF   x7B,W
4838:  SUBWF  x78,W
483A:  BNZ   4878
....................                   { 
....................                      Password[i-1]--; 
483C:  MOVLW  01
483E:  SUBWF  x7B,W
4840:  CLRF   03
4842:  ADDLW  A6
4844:  MOVWF  FE9
4846:  MOVLW  04
4848:  ADDWFC 03,W
484A:  MOVWF  FEA
484C:  DECF   FEF,F
....................                      if(Password[i-1]<0) 
484E:  MOVLW  01
4850:  SUBWF  x7B,W
4852:  CLRF   03
4854:  ADDLW  A6
4856:  MOVWF  FE9
4858:  MOVLW  04
485A:  ADDWFC 03,W
485C:  MOVWF  FEA
485E:  BTFSC  FEF.7
4860:  BRA    4864
4862:  BRA    4878
....................                      { 
....................                         Password[i-1]=9; 
4864:  MOVLW  01
4866:  SUBWF  x7B,W
4868:  CLRF   03
486A:  ADDLW  A6
486C:  MOVWF  FE9
486E:  MOVLW  04
4870:  ADDWFC 03,W
4872:  MOVWF  FEA
4874:  MOVLW  09
4876:  MOVWF  FEF
....................                      } 
....................                   } 
....................                }       
4878:  INCF   x7B,F
487A:  BRA    4830
....................             }      
....................       } 
....................       else 
487C:  BRA    4880
....................       { 
....................          Flanco2 = 0; 
487E:  BCF    x6A.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4880:  BSF    F96.1
4882:  BTFSS  F84.1
4884:  BRA    48A8
....................       { 
....................          if(Flanco1 == 0) 
4886:  BTFSC  x6A.1
4888:  BRA    48A6
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
488A:  BSF    x6A.1
488C:  MOVLW  02
488E:  MOVLB  5
4890:  MOVWF  x28
4892:  MOVLW  96
4894:  MOVWF  x29
4896:  MOVLB  0
4898:  CALL   131E
489C:  MOVLB  5
489E:  DECFSZ x28,F
48A0:  BRA    4892
48A2:  MOVLB  4
48A4:  INCF   x78,F
....................       } 
....................       else 
48A6:  BRA    48AA
....................       { 
....................          Flanco1 = 0; 
48A8:  BCF    x6A.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
48AA:  BSF    F96.2
48AC:  BTFSS  F84.2
48AE:  BRA    48D8
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
48B0:  MOVLW  04
48B2:  MOVLB  5
48B4:  MOVWF  x28
48B6:  MOVLW  AF
48B8:  MOVWF  x29
48BA:  MOVLB  0
48BC:  CALL   131E
48C0:  MOVLB  5
48C2:  DECFSZ x28,F
48C4:  BRA    48B6
48C6:  MOVLW  01
48C8:  MOVLB  4
48CA:  MOVWF  x77
48CC:  MOVLB  5
48CE:  CLRF   x29
48D0:  MOVLB  0
48D2:  CALL   0BF4
48D6:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
48D8:  MOVF   x78,W
48DA:  SUBLW  04
48DC:  BC    49AA
....................       { 
....................          Opcion=1;unidad=1; 
48DE:  MOVLW  01
48E0:  MOVWF  x7E
48E2:  MOVWF  x78
....................          write_eeprom(10,Password[0]);write_eeprom(11,Password[1]);write_eeprom(12,Password[2]);write_eeprom(13,Password[3]); 
48E4:  MOVLW  0A
48E6:  MOVWF  FA9
48E8:  MOVFF  4A6,FA8
48EC:  BCF    FA6.6
48EE:  BCF    FA6.7
48F0:  BSF    FA6.2
48F2:  MOVF   FF2,W
48F4:  MOVWF  00
48F6:  BCF    FF2.7
48F8:  MOVLB  F
48FA:  MOVLW  55
48FC:  MOVWF  FA7
48FE:  MOVLW  AA
4900:  MOVWF  FA7
4902:  BSF    FA6.1
4904:  BTFSC  FA6.1
4906:  BRA    4904
4908:  BCF    FA6.2
490A:  MOVF   00,W
490C:  IORWF  FF2,F
490E:  MOVLW  0B
4910:  MOVWF  FA9
4912:  MOVFF  4A7,FA8
4916:  BCF    FA6.6
4918:  BCF    FA6.7
491A:  BSF    FA6.2
491C:  MOVF   FF2,W
491E:  MOVWF  00
4920:  BCF    FF2.7
4922:  MOVLW  55
4924:  MOVWF  FA7
4926:  MOVLW  AA
4928:  MOVWF  FA7
492A:  BSF    FA6.1
492C:  BTFSC  FA6.1
492E:  BRA    492C
4930:  BCF    FA6.2
4932:  MOVF   00,W
4934:  IORWF  FF2,F
4936:  MOVLW  0C
4938:  MOVWF  FA9
493A:  MOVFF  4A8,FA8
493E:  BCF    FA6.6
4940:  BCF    FA6.7
4942:  BSF    FA6.2
4944:  MOVF   FF2,W
4946:  MOVWF  00
4948:  BCF    FF2.7
494A:  MOVLW  55
494C:  MOVWF  FA7
494E:  MOVLW  AA
4950:  MOVWF  FA7
4952:  BSF    FA6.1
4954:  BTFSC  FA6.1
4956:  BRA    4954
4958:  BCF    FA6.2
495A:  MOVF   00,W
495C:  IORWF  FF2,F
495E:  MOVLW  0D
4960:  MOVWF  FA9
4962:  MOVFF  4A9,FA8
4966:  BCF    FA6.6
4968:  BCF    FA6.7
496A:  BSF    FA6.2
496C:  MOVF   FF2,W
496E:  MOVWF  00
4970:  BCF    FF2.7
4972:  MOVLW  55
4974:  MOVWF  FA7
4976:  MOVLW  AA
4978:  MOVWF  FA7
497A:  BSF    FA6.1
497C:  BTFSC  FA6.1
497E:  BRA    497C
4980:  BCF    FA6.2
4982:  MOVF   00,W
4984:  IORWF  FF2,F
....................          delay_ms(1000);glcd_fillScreen(OFF);Menu=1; 
4986:  MOVLW  04
4988:  MOVLB  5
498A:  MOVWF  x28
498C:  MOVLW  FA
498E:  MOVWF  x29
4990:  MOVLB  0
4992:  CALL   131E
4996:  MOVLB  5
4998:  DECFSZ x28,F
499A:  BRA    498C
499C:  CLRF   x29
499E:  MOVLB  0
49A0:  CALL   0BF4
49A4:  MOVLW  01
49A6:  MOVLB  4
49A8:  MOVWF  x77
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==11){ // Menu de Tiempo de Esterilización 
49AA:  MOVF   x77,W
49AC:  SUBLW  0B
49AE:  BTFSS  FD8.2
49B0:  BRA    4CB2
....................       
....................       if(visual==1) 
49B2:  BTFSS  x6A.4
49B4:  BRA    4B40
....................       { 
....................          if(unidad<1) 
49B6:  MOVF   x78,F
49B8:  BNZ   49BE
....................          {unidad=4;} 
49BA:  MOVLW  04
49BC:  MOVWF  x78
....................           
....................          strcpy(Menus.Letra,"T. Ester."); 
49BE:  MOVLW  05
49C0:  MOVWF  FEA
49C2:  MOVLW  08
49C4:  MOVWF  FE9
49C6:  MOVFF  FF2,528
49CA:  BCF    FF2.7
49CC:  MOVLW  00
49CE:  MOVLB  0
49D0:  CALL   0A00
49D4:  TBLRD*-
49D6:  TBLRD*+
49D8:  MOVF   FF5,W
49DA:  MOVWF  FEE
49DC:  IORLW  00
49DE:  BNZ   49D6
49E0:  MOVLB  5
49E2:  BTFSC  x28.7
49E4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
49E6:  MOVLW  05
49E8:  MOVWF  x29
49EA:  MOVLW  08
49EC:  MOVWF  x28
49EE:  CLRF   x2A
49F0:  CLRF   x2B
49F2:  MOVLW  01
49F4:  MOVWF  x2C
49F6:  MOVLW  02
49F8:  MOVWF  x2D
49FA:  MOVLB  0
49FC:  CALL   1224
....................           
....................          if(unidad==4) 
4A00:  MOVLB  4
4A02:  MOVF   x78,W
4A04:  SUBLW  04
4A06:  BNZ   4A26
....................          {displayTiempo(Testerilizacionp[3],20,40,1,2);} 
4A08:  MOVFF  499,529
4A0C:  MOVLW  14
4A0E:  MOVLB  5
4A10:  MOVWF  x2A
4A12:  MOVLW  28
4A14:  MOVWF  x2B
4A16:  MOVLW  01
4A18:  MOVWF  x2C
4A1A:  MOVLW  02
4A1C:  MOVWF  x2D
4A1E:  MOVLB  0
4A20:  CALL   1E32
....................          else 
4A24:  BRA    4A40
....................          {displayTiempo(Testerilizacionp[3],20,40,0,2);} 
4A26:  MOVFF  499,529
4A2A:  MOVLW  14
4A2C:  MOVLB  5
4A2E:  MOVWF  x2A
4A30:  MOVLW  28
4A32:  MOVWF  x2B
4A34:  CLRF   x2C
4A36:  MOVLW  02
4A38:  MOVWF  x2D
4A3A:  MOVLB  0
4A3C:  CALL   1E32
....................           
....................          if(unidad==3) 
4A40:  MOVLB  4
4A42:  MOVF   x78,W
4A44:  SUBLW  03
4A46:  BNZ   4A64
....................          {displayTiempo(Testerilizacionp[2],40,40,1,2);} 
4A48:  MOVFF  498,529
4A4C:  MOVLW  28
4A4E:  MOVLB  5
4A50:  MOVWF  x2A
4A52:  MOVWF  x2B
4A54:  MOVLW  01
4A56:  MOVWF  x2C
4A58:  MOVLW  02
4A5A:  MOVWF  x2D
4A5C:  MOVLB  0
4A5E:  CALL   1E32
....................          else 
4A62:  BRA    4A7C
....................          {displayTiempo(Testerilizacionp[2],40,40,0,2);} 
4A64:  MOVFF  498,529
4A68:  MOVLW  28
4A6A:  MOVLB  5
4A6C:  MOVWF  x2A
4A6E:  MOVWF  x2B
4A70:  CLRF   x2C
4A72:  MOVLW  02
4A74:  MOVWF  x2D
4A76:  MOVLB  0
4A78:  CALL   1E32
....................           
....................          if(unidad==2) 
4A7C:  MOVLB  4
4A7E:  MOVF   x78,W
4A80:  SUBLW  02
4A82:  BNZ   4AA2
....................          {displayTiempo(Testerilizacionp[1],70,40,1,2);} 
4A84:  MOVFF  497,529
4A88:  MOVLW  46
4A8A:  MOVLB  5
4A8C:  MOVWF  x2A
4A8E:  MOVLW  28
4A90:  MOVWF  x2B
4A92:  MOVLW  01
4A94:  MOVWF  x2C
4A96:  MOVLW  02
4A98:  MOVWF  x2D
4A9A:  MOVLB  0
4A9C:  CALL   1E32
....................          else 
4AA0:  BRA    4ABC
....................          {displayTiempo(Testerilizacionp[1],70,40,0,2);} 
4AA2:  MOVFF  497,529
4AA6:  MOVLW  46
4AA8:  MOVLB  5
4AAA:  MOVWF  x2A
4AAC:  MOVLW  28
4AAE:  MOVWF  x2B
4AB0:  CLRF   x2C
4AB2:  MOVLW  02
4AB4:  MOVWF  x2D
4AB6:  MOVLB  0
4AB8:  CALL   1E32
....................           
....................          if(unidad==1) 
4ABC:  MOVLB  4
4ABE:  DECFSZ x78,W
4AC0:  BRA    4AE0
....................          {displayTiempo(Testerilizacionp[0],90,40,1,2);} 
4AC2:  MOVFF  496,529
4AC6:  MOVLW  5A
4AC8:  MOVLB  5
4ACA:  MOVWF  x2A
4ACC:  MOVLW  28
4ACE:  MOVWF  x2B
4AD0:  MOVLW  01
4AD2:  MOVWF  x2C
4AD4:  MOVLW  02
4AD6:  MOVWF  x2D
4AD8:  MOVLB  0
4ADA:  CALL   1E32
....................          else 
4ADE:  BRA    4AFA
....................          {displayTiempo(Testerilizacionp[0],90,40,0,2);} 
4AE0:  MOVFF  496,529
4AE4:  MOVLW  5A
4AE6:  MOVLB  5
4AE8:  MOVWF  x2A
4AEA:  MOVLW  28
4AEC:  MOVWF  x2B
4AEE:  CLRF   x2C
4AF0:  MOVLW  02
4AF2:  MOVWF  x2D
4AF4:  MOVLB  0
4AF6:  CALL   1E32
....................           
....................          strcpy(Menus.Letra,":"); 
4AFA:  MOVLW  05
4AFC:  MOVWF  FEA
4AFE:  MOVLW  08
4B00:  MOVWF  FE9
4B02:  MOVFF  FF2,528
4B06:  BCF    FF2.7
4B08:  MOVLW  00
4B0A:  CALL   060E
4B0E:  TBLRD*-
4B10:  TBLRD*+
4B12:  MOVF   FF5,W
4B14:  MOVWF  FEE
4B16:  IORLW  00
4B18:  BNZ   4B10
4B1A:  MOVLB  5
4B1C:  BTFSC  x28.7
4B1E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);      
4B20:  MOVLW  05
4B22:  MOVWF  x29
4B24:  MOVLW  08
4B26:  MOVWF  x28
4B28:  MOVLW  3C
4B2A:  MOVWF  x2A
4B2C:  MOVLW  2A
4B2E:  MOVWF  x2B
4B30:  MOVLW  02
4B32:  MOVWF  x2C
4B34:  MOVWF  x2D
4B36:  MOVLB  0
4B38:  CALL   1224
....................           
....................          visual=0; 
4B3C:  MOVLB  4
4B3E:  BCF    x6A.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
4B40:  BSF    F92.5
4B42:  BTFSS  F80.5
4B44:  BRA    4B82
....................          {   
....................             if(Testerilizacionp[unidad-1]<9) 
4B46:  MOVLW  01
4B48:  SUBWF  x78,W
4B4A:  CLRF   03
4B4C:  ADDLW  96
4B4E:  MOVWF  FE9
4B50:  MOVLW  04
4B52:  ADDWFC 03,W
4B54:  MOVWF  FEA
4B56:  BTFSC  FEF.7
4B58:  BRA    4B60
4B5A:  MOVF   FEF,W
4B5C:  SUBLW  08
4B5E:  BNC   4B82
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]++;visual=1; 
4B60:  MOVLW  1E
4B62:  MOVLB  5
4B64:  MOVWF  x29
4B66:  MOVLB  0
4B68:  CALL   131E
4B6C:  MOVLW  01
4B6E:  MOVLB  4
4B70:  SUBWF  x78,W
4B72:  CLRF   03
4B74:  ADDLW  96
4B76:  MOVWF  FE9
4B78:  MOVLW  04
4B7A:  ADDWFC 03,W
4B7C:  MOVWF  FEA
4B7E:  INCF   FEF,F
4B80:  BSF    x6A.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
4B82:  BSF    F96.0
4B84:  BTFSS  F84.0
4B86:  BRA    4BC4
....................          {   
....................             if(Testerilizacionp[unidad-1]>0) 
4B88:  MOVLW  01
4B8A:  SUBWF  x78,W
4B8C:  CLRF   03
4B8E:  ADDLW  96
4B90:  MOVWF  FE9
4B92:  MOVLW  04
4B94:  ADDWFC 03,W
4B96:  MOVWF  FEA
4B98:  BTFSC  FEF.7
4B9A:  BRA    4BC4
4B9C:  MOVF   FEF,W
4B9E:  SUBLW  00
4BA0:  BC    4BC4
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]--;visual=1;      
4BA2:  MOVLW  1E
4BA4:  MOVLB  5
4BA6:  MOVWF  x29
4BA8:  MOVLB  0
4BAA:  CALL   131E
4BAE:  MOVLW  01
4BB0:  MOVLB  4
4BB2:  SUBWF  x78,W
4BB4:  CLRF   03
4BB6:  ADDLW  96
4BB8:  MOVWF  FE9
4BBA:  MOVLW  04
4BBC:  ADDWFC 03,W
4BBE:  MOVWF  FEA
4BC0:  DECF   FEF,F
4BC2:  BSF    x6A.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
4BC4:  BSF    F96.1
4BC6:  BTFSS  F84.1
4BC8:  BRA    4BDC
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
4BCA:  MOVLW  1E
4BCC:  MOVLB  5
4BCE:  MOVWF  x29
4BD0:  MOVLB  0
4BD2:  CALL   131E
4BD6:  MOVLB  4
4BD8:  DECF   x78,F
4BDA:  BSF    x6A.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
4BDC:  BSF    F96.2
4BDE:  BTFSS  F84.2
4BE0:  BRA    4CB2
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
4BE2:  MOVLW  04
4BE4:  MOVLB  5
4BE6:  MOVWF  x28
4BE8:  MOVLW  AF
4BEA:  MOVWF  x29
4BEC:  MOVLB  0
4BEE:  CALL   131E
4BF2:  MOVLB  5
4BF4:  DECFSZ x28,F
4BF6:  BRA    4BE8
4BF8:  MOVLW  08
4BFA:  MOVLB  4
4BFC:  MOVWF  x77
4BFE:  MOVLB  5
4C00:  CLRF   x29
4C02:  MOVLB  0
4C04:  CALL   0BF4
4C08:  MOVLW  01
4C0A:  MOVLB  4
4C0C:  MOVWF  x7E
4C0E:  BSF    x6A.4
....................             write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]); 
4C10:  CLRF   FA9
4C12:  MOVFF  496,FA8
4C16:  BCF    FA6.6
4C18:  BCF    FA6.7
4C1A:  BSF    FA6.2
4C1C:  MOVF   FF2,W
4C1E:  MOVWF  00
4C20:  BCF    FF2.7
4C22:  MOVLB  F
4C24:  MOVLW  55
4C26:  MOVWF  FA7
4C28:  MOVLW  AA
4C2A:  MOVWF  FA7
4C2C:  BSF    FA6.1
4C2E:  BTFSC  FA6.1
4C30:  BRA    4C2E
4C32:  BCF    FA6.2
4C34:  MOVF   00,W
4C36:  IORWF  FF2,F
4C38:  MOVLW  01
4C3A:  MOVWF  FA9
4C3C:  MOVFF  497,FA8
4C40:  BCF    FA6.6
4C42:  BCF    FA6.7
4C44:  BSF    FA6.2
4C46:  MOVF   FF2,W
4C48:  MOVWF  00
4C4A:  BCF    FF2.7
4C4C:  MOVLW  55
4C4E:  MOVWF  FA7
4C50:  MOVLW  AA
4C52:  MOVWF  FA7
4C54:  BSF    FA6.1
4C56:  BTFSC  FA6.1
4C58:  BRA    4C56
4C5A:  BCF    FA6.2
4C5C:  MOVF   00,W
4C5E:  IORWF  FF2,F
....................             write_eeprom(2,Testerilizacionp[2]);write_eeprom(3,Testerilizacionp[3]); 
4C60:  MOVLW  02
4C62:  MOVWF  FA9
4C64:  MOVFF  498,FA8
4C68:  BCF    FA6.6
4C6A:  BCF    FA6.7
4C6C:  BSF    FA6.2
4C6E:  MOVFF  FF2,00
4C72:  BCF    FF2.7
4C74:  MOVLW  55
4C76:  MOVWF  FA7
4C78:  MOVLW  AA
4C7A:  MOVWF  FA7
4C7C:  BSF    FA6.1
4C7E:  BTFSC  FA6.1
4C80:  BRA    4C7E
4C82:  BCF    FA6.2
4C84:  MOVF   00,W
4C86:  IORWF  FF2,F
4C88:  MOVLW  03
4C8A:  MOVWF  FA9
4C8C:  MOVFF  499,FA8
4C90:  BCF    FA6.6
4C92:  BCF    FA6.7
4C94:  BSF    FA6.2
4C96:  MOVFF  FF2,00
4C9A:  BCF    FF2.7
4C9C:  MOVLW  55
4C9E:  MOVWF  FA7
4CA0:  MOVLW  AA
4CA2:  MOVWF  FA7
4CA4:  BSF    FA6.1
4CA6:  BTFSC  FA6.1
4CA8:  BRA    4CA6
4CAA:  BCF    FA6.2
4CAC:  MOVF   00,W
4CAE:  IORWF  FF2,F
4CB0:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==12){ // Menu de Tiempo de Secado 
4CB2:  MOVF   x77,W
4CB4:  SUBLW  0C
4CB6:  BTFSS  FD8.2
4CB8:  BRA    4FBC
....................       
....................       if(visual==1) 
4CBA:  BTFSS  x6A.4
4CBC:  BRA    4E48
....................       { 
....................          if(unidad<1) 
4CBE:  MOVF   x78,F
4CC0:  BNZ   4CC6
....................          {unidad=4;} 
4CC2:  MOVLW  04
4CC4:  MOVWF  x78
....................           
....................          strcpy(Menus.Letra," Secado"); 
4CC6:  MOVLW  05
4CC8:  MOVWF  FEA
4CCA:  MOVLW  08
4CCC:  MOVWF  FE9
4CCE:  MOVFF  FF2,528
4CD2:  BCF    FF2.7
4CD4:  MOVLW  00
4CD6:  MOVLB  0
4CD8:  CALL   0A1A
4CDC:  TBLRD*-
4CDE:  TBLRD*+
4CE0:  MOVF   FF5,W
4CE2:  MOVWF  FEE
4CE4:  IORLW  00
4CE6:  BNZ   4CDE
4CE8:  MOVLB  5
4CEA:  BTFSC  x28.7
4CEC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
4CEE:  MOVLW  05
4CF0:  MOVWF  x29
4CF2:  MOVLW  08
4CF4:  MOVWF  x28
4CF6:  CLRF   x2A
4CF8:  CLRF   x2B
4CFA:  MOVLW  01
4CFC:  MOVWF  x2C
4CFE:  MOVLW  02
4D00:  MOVWF  x2D
4D02:  MOVLB  0
4D04:  CALL   1224
....................           
....................          if(unidad==4) 
4D08:  MOVLB  4
4D0A:  MOVF   x78,W
4D0C:  SUBLW  04
4D0E:  BNZ   4D2E
....................          {displayTiempo(Tsecadop[3],20,40,1,2);} 
4D10:  MOVFF  4A1,529
4D14:  MOVLW  14
4D16:  MOVLB  5
4D18:  MOVWF  x2A
4D1A:  MOVLW  28
4D1C:  MOVWF  x2B
4D1E:  MOVLW  01
4D20:  MOVWF  x2C
4D22:  MOVLW  02
4D24:  MOVWF  x2D
4D26:  MOVLB  0
4D28:  CALL   1E32
....................          else 
4D2C:  BRA    4D48
....................          {displayTiempo(Tsecadop[3],20,40,0,2);} 
4D2E:  MOVFF  4A1,529
4D32:  MOVLW  14
4D34:  MOVLB  5
4D36:  MOVWF  x2A
4D38:  MOVLW  28
4D3A:  MOVWF  x2B
4D3C:  CLRF   x2C
4D3E:  MOVLW  02
4D40:  MOVWF  x2D
4D42:  MOVLB  0
4D44:  CALL   1E32
....................           
....................          if(unidad==3) 
4D48:  MOVLB  4
4D4A:  MOVF   x78,W
4D4C:  SUBLW  03
4D4E:  BNZ   4D6C
....................          {displayTiempo(Tsecadop[2],40,40,1,2);} 
4D50:  MOVFF  4A0,529
4D54:  MOVLW  28
4D56:  MOVLB  5
4D58:  MOVWF  x2A
4D5A:  MOVWF  x2B
4D5C:  MOVLW  01
4D5E:  MOVWF  x2C
4D60:  MOVLW  02
4D62:  MOVWF  x2D
4D64:  MOVLB  0
4D66:  CALL   1E32
....................          else 
4D6A:  BRA    4D84
....................          {displayTiempo(Tsecadop[2],40,40,0,2);} 
4D6C:  MOVFF  4A0,529
4D70:  MOVLW  28
4D72:  MOVLB  5
4D74:  MOVWF  x2A
4D76:  MOVWF  x2B
4D78:  CLRF   x2C
4D7A:  MOVLW  02
4D7C:  MOVWF  x2D
4D7E:  MOVLB  0
4D80:  CALL   1E32
....................           
....................          if(unidad==2) 
4D84:  MOVLB  4
4D86:  MOVF   x78,W
4D88:  SUBLW  02
4D8A:  BNZ   4DAA
....................          {displayTiempo(Tsecadop[1],70,40,1,2);} 
4D8C:  MOVFF  49F,529
4D90:  MOVLW  46
4D92:  MOVLB  5
4D94:  MOVWF  x2A
4D96:  MOVLW  28
4D98:  MOVWF  x2B
4D9A:  MOVLW  01
4D9C:  MOVWF  x2C
4D9E:  MOVLW  02
4DA0:  MOVWF  x2D
4DA2:  MOVLB  0
4DA4:  CALL   1E32
....................          else 
4DA8:  BRA    4DC4
....................          {displayTiempo(Tsecadop[1],70,40,0,2);} 
4DAA:  MOVFF  49F,529
4DAE:  MOVLW  46
4DB0:  MOVLB  5
4DB2:  MOVWF  x2A
4DB4:  MOVLW  28
4DB6:  MOVWF  x2B
4DB8:  CLRF   x2C
4DBA:  MOVLW  02
4DBC:  MOVWF  x2D
4DBE:  MOVLB  0
4DC0:  CALL   1E32
....................           
....................          if(unidad==1) 
4DC4:  MOVLB  4
4DC6:  DECFSZ x78,W
4DC8:  BRA    4DE8
....................          {displayTiempo(Tsecadop[0],90,40,1,2);} 
4DCA:  MOVFF  49E,529
4DCE:  MOVLW  5A
4DD0:  MOVLB  5
4DD2:  MOVWF  x2A
4DD4:  MOVLW  28
4DD6:  MOVWF  x2B
4DD8:  MOVLW  01
4DDA:  MOVWF  x2C
4DDC:  MOVLW  02
4DDE:  MOVWF  x2D
4DE0:  MOVLB  0
4DE2:  CALL   1E32
....................          else 
4DE6:  BRA    4E02
....................          {displayTiempo(Tsecadop[0],90,40,0,2);} 
4DE8:  MOVFF  49E,529
4DEC:  MOVLW  5A
4DEE:  MOVLB  5
4DF0:  MOVWF  x2A
4DF2:  MOVLW  28
4DF4:  MOVWF  x2B
4DF6:  CLRF   x2C
4DF8:  MOVLW  02
4DFA:  MOVWF  x2D
4DFC:  MOVLB  0
4DFE:  CALL   1E32
....................           
....................          strcpy(Menus.Letra,":"); 
4E02:  MOVLW  05
4E04:  MOVWF  FEA
4E06:  MOVLW  08
4E08:  MOVWF  FE9
4E0A:  MOVFF  FF2,528
4E0E:  BCF    FF2.7
4E10:  MOVLW  00
4E12:  CALL   060E
4E16:  TBLRD*-
4E18:  TBLRD*+
4E1A:  MOVF   FF5,W
4E1C:  MOVWF  FEE
4E1E:  IORLW  00
4E20:  BNZ   4E18
4E22:  MOVLB  5
4E24:  BTFSC  x28.7
4E26:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);  
4E28:  MOVLW  05
4E2A:  MOVWF  x29
4E2C:  MOVLW  08
4E2E:  MOVWF  x28
4E30:  MOVLW  3C
4E32:  MOVWF  x2A
4E34:  MOVLW  2A
4E36:  MOVWF  x2B
4E38:  MOVLW  02
4E3A:  MOVWF  x2C
4E3C:  MOVWF  x2D
4E3E:  MOVLB  0
4E40:  CALL   1224
....................           
....................          visual=0; 
4E44:  MOVLB  4
4E46:  BCF    x6A.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
4E48:  BSF    F92.5
4E4A:  BTFSS  F80.5
4E4C:  BRA    4E8A
....................          {   
....................             if(Tsecadop[unidad-1]<9) 
4E4E:  MOVLW  01
4E50:  SUBWF  x78,W
4E52:  CLRF   03
4E54:  ADDLW  9E
4E56:  MOVWF  FE9
4E58:  MOVLW  04
4E5A:  ADDWFC 03,W
4E5C:  MOVWF  FEA
4E5E:  BTFSC  FEF.7
4E60:  BRA    4E68
4E62:  MOVF   FEF,W
4E64:  SUBLW  08
4E66:  BNC   4E8A
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]++;visual=1; 
4E68:  MOVLW  1E
4E6A:  MOVLB  5
4E6C:  MOVWF  x29
4E6E:  MOVLB  0
4E70:  CALL   131E
4E74:  MOVLW  01
4E76:  MOVLB  4
4E78:  SUBWF  x78,W
4E7A:  CLRF   03
4E7C:  ADDLW  9E
4E7E:  MOVWF  FE9
4E80:  MOVLW  04
4E82:  ADDWFC 03,W
4E84:  MOVWF  FEA
4E86:  INCF   FEF,F
4E88:  BSF    x6A.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
4E8A:  BSF    F96.0
4E8C:  BTFSS  F84.0
4E8E:  BRA    4ECC
....................          {   
....................             if(Tsecadop[unidad-1]>0) 
4E90:  MOVLW  01
4E92:  SUBWF  x78,W
4E94:  CLRF   03
4E96:  ADDLW  9E
4E98:  MOVWF  FE9
4E9A:  MOVLW  04
4E9C:  ADDWFC 03,W
4E9E:  MOVWF  FEA
4EA0:  BTFSC  FEF.7
4EA2:  BRA    4ECC
4EA4:  MOVF   FEF,W
4EA6:  SUBLW  00
4EA8:  BC    4ECC
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]--;visual=1;      
4EAA:  MOVLW  1E
4EAC:  MOVLB  5
4EAE:  MOVWF  x29
4EB0:  MOVLB  0
4EB2:  CALL   131E
4EB6:  MOVLW  01
4EB8:  MOVLB  4
4EBA:  SUBWF  x78,W
4EBC:  CLRF   03
4EBE:  ADDLW  9E
4EC0:  MOVWF  FE9
4EC2:  MOVLW  04
4EC4:  ADDWFC 03,W
4EC6:  MOVWF  FEA
4EC8:  DECF   FEF,F
4ECA:  BSF    x6A.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
4ECC:  BSF    F96.1
4ECE:  BTFSS  F84.1
4ED0:  BRA    4EE4
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
4ED2:  MOVLW  1E
4ED4:  MOVLB  5
4ED6:  MOVWF  x29
4ED8:  MOVLB  0
4EDA:  CALL   131E
4EDE:  MOVLB  4
4EE0:  DECF   x78,F
4EE2:  BSF    x6A.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
4EE4:  BSF    F96.2
4EE6:  BTFSS  F84.2
4EE8:  BRA    4FBC
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
4EEA:  MOVLW  04
4EEC:  MOVLB  5
4EEE:  MOVWF  x28
4EF0:  MOVLW  AF
4EF2:  MOVWF  x29
4EF4:  MOVLB  0
4EF6:  CALL   131E
4EFA:  MOVLB  5
4EFC:  DECFSZ x28,F
4EFE:  BRA    4EF0
4F00:  MOVLW  08
4F02:  MOVLB  4
4F04:  MOVWF  x77
4F06:  MOVLB  5
4F08:  CLRF   x29
4F0A:  MOVLB  0
4F0C:  CALL   0BF4
4F10:  MOVLW  01
4F12:  MOVLB  4
4F14:  MOVWF  x7E
4F16:  BSF    x6A.4
....................             write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]); 
4F18:  MOVLW  04
4F1A:  MOVWF  FA9
4F1C:  MOVFF  49E,FA8
4F20:  BCF    FA6.6
4F22:  BCF    FA6.7
4F24:  BSF    FA6.2
4F26:  MOVF   FF2,W
4F28:  MOVWF  00
4F2A:  BCF    FF2.7
4F2C:  MOVLB  F
4F2E:  MOVLW  55
4F30:  MOVWF  FA7
4F32:  MOVLW  AA
4F34:  MOVWF  FA7
4F36:  BSF    FA6.1
4F38:  BTFSC  FA6.1
4F3A:  BRA    4F38
4F3C:  BCF    FA6.2
4F3E:  MOVF   00,W
4F40:  IORWF  FF2,F
4F42:  MOVLW  05
4F44:  MOVWF  FA9
4F46:  MOVFF  49F,FA8
4F4A:  BCF    FA6.6
4F4C:  BCF    FA6.7
4F4E:  BSF    FA6.2
4F50:  MOVF   FF2,W
4F52:  MOVWF  00
4F54:  BCF    FF2.7
4F56:  MOVLW  55
4F58:  MOVWF  FA7
4F5A:  MOVLW  AA
4F5C:  MOVWF  FA7
4F5E:  BSF    FA6.1
4F60:  BTFSC  FA6.1
4F62:  BRA    4F60
4F64:  BCF    FA6.2
4F66:  MOVF   00,W
4F68:  IORWF  FF2,F
....................             write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
4F6A:  MOVLW  06
4F6C:  MOVWF  FA9
4F6E:  MOVFF  4A0,FA8
4F72:  BCF    FA6.6
4F74:  BCF    FA6.7
4F76:  BSF    FA6.2
4F78:  MOVFF  FF2,00
4F7C:  BCF    FF2.7
4F7E:  MOVLW  55
4F80:  MOVWF  FA7
4F82:  MOVLW  AA
4F84:  MOVWF  FA7
4F86:  BSF    FA6.1
4F88:  BTFSC  FA6.1
4F8A:  BRA    4F88
4F8C:  BCF    FA6.2
4F8E:  MOVF   00,W
4F90:  IORWF  FF2,F
4F92:  MOVLW  07
4F94:  MOVWF  FA9
4F96:  MOVFF  4A1,FA8
4F9A:  BCF    FA6.6
4F9C:  BCF    FA6.7
4F9E:  BSF    FA6.2
4FA0:  MOVFF  FF2,00
4FA4:  BCF    FF2.7
4FA6:  MOVLW  55
4FA8:  MOVWF  FA7
4FAA:  MOVLW  AA
4FAC:  MOVWF  FA7
4FAE:  BSF    FA6.1
4FB0:  BTFSC  FA6.1
4FB2:  BRA    4FB0
4FB4:  BCF    FA6.2
4FB6:  MOVF   00,W
4FB8:  IORWF  FF2,F
4FBA:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==13){ // Menu de Temperatura 
4FBC:  MOVF   x77,W
4FBE:  SUBLW  0D
4FC0:  BTFSS  FD8.2
4FC2:  BRA    50FA
....................       
....................       if(visual==1) 
4FC4:  BTFSS  x6A.4
4FC6:  BRA    502E
....................       { 
....................          glcd_fillScreen(OFF); 
4FC8:  MOVLB  5
4FCA:  CLRF   x29
4FCC:  MOVLB  0
4FCE:  CALL   0BF4
....................          strcpy(Menus.Letra,"Temperatura"); 
4FD2:  MOVLW  05
4FD4:  MOVWF  FEA
4FD6:  MOVLW  08
4FD8:  MOVWF  FE9
4FDA:  MOVFF  FF2,528
4FDE:  BCF    FF2.7
4FE0:  MOVLW  00
4FE2:  CALL   098C
4FE6:  TBLRD*-
4FE8:  TBLRD*+
4FEA:  MOVF   FF5,W
4FEC:  MOVWF  FEE
4FEE:  IORLW  00
4FF0:  BNZ   4FE8
4FF2:  MOVLB  5
4FF4:  BTFSC  x28.7
4FF6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
4FF8:  MOVLW  05
4FFA:  MOVWF  x29
4FFC:  MOVLW  08
4FFE:  MOVWF  x28
5000:  CLRF   x2A
5002:  CLRF   x2B
5004:  MOVLW  01
5006:  MOVWF  x2C
5008:  MOVLW  02
500A:  MOVWF  x2D
500C:  MOVLB  0
500E:  CALL   1224
....................           
....................          displayTiempo(Setpoint,30,30,0,3); 
5012:  MOVFF  47C,529
5016:  MOVLW  1E
5018:  MOVLB  5
501A:  MOVWF  x2A
501C:  MOVWF  x2B
501E:  CLRF   x2C
5020:  MOVLW  03
5022:  MOVWF  x2D
5024:  MOVLB  0
5026:  CALL   1E32
....................           
....................          visual=0; 
502A:  MOVLB  4
502C:  BCF    x6A.4
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
502E:  BSF    F92.5
5030:  BTFSS  F80.5
5032:  BRA    5066
....................          {   
....................             if(Setpoint<134) 
5034:  MOVF   x7C,W
5036:  SUBLW  85
5038:  BNC   5066
....................             { 
....................                if(Setpoint<100) 
503A:  MOVF   x7C,W
503C:  SUBLW  63
503E:  BNC   5054
....................                { 
....................                   Setpoint=100;delay_ms(100);visual=1; 
5040:  MOVLW  64
5042:  MOVWF  x7C
5044:  MOVLB  5
5046:  MOVWF  x29
5048:  MOVLB  0
504A:  CALL   131E
504E:  MOVLB  4
5050:  BSF    x6A.4
....................                } 
....................                else 
5052:  BRA    5066
....................                { 
....................                   delay_ms(30);Setpoint++;visual=1; 
5054:  MOVLW  1E
5056:  MOVLB  5
5058:  MOVWF  x29
505A:  MOVLB  0
505C:  CALL   131E
5060:  MOVLB  4
5062:  INCF   x7C,F
5064:  BSF    x6A.4
....................                } 
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5066:  BSF    F96.0
5068:  BTFSS  F84.0
506A:  BRA    5084
....................          {   
....................             if(Setpoint>105) 
506C:  MOVF   x7C,W
506E:  SUBLW  69
5070:  BC    5084
....................             { 
....................                delay_ms(30);Setpoint--;visual=1;      
5072:  MOVLW  1E
5074:  MOVLB  5
5076:  MOVWF  x29
5078:  MOVLB  0
507A:  CALL   131E
507E:  MOVLB  4
5080:  DECF   x7C,F
5082:  BSF    x6A.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5084:  BSF    F96.1
5086:  BTFSS  F84.1
5088:  BRA    509A
....................          {   
....................             delay_ms(30);visual=1; 
508A:  MOVLW  1E
508C:  MOVLB  5
508E:  MOVWF  x29
5090:  MOVLB  0
5092:  CALL   131E
5096:  MOVLB  4
5098:  BSF    x6A.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
509A:  BSF    F96.2
509C:  BTFSS  F84.2
509E:  BRA    50FA
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
50A0:  MOVLW  04
50A2:  MOVLB  5
50A4:  MOVWF  x28
50A6:  MOVLW  AF
50A8:  MOVWF  x29
50AA:  MOVLB  0
50AC:  CALL   131E
50B0:  MOVLB  5
50B2:  DECFSZ x28,F
50B4:  BRA    50A6
50B6:  MOVLW  08
50B8:  MOVLB  4
50BA:  MOVWF  x77
50BC:  MOVLB  5
50BE:  CLRF   x29
50C0:  MOVLB  0
50C2:  CALL   0BF4
50C6:  MOVLW  01
50C8:  MOVLB  4
50CA:  MOVWF  x7E
50CC:  BSF    x6A.4
....................             write_eeprom(8,Setpoint); 
50CE:  MOVLW  08
50D0:  MOVWF  FA9
50D2:  MOVFF  47C,FA8
50D6:  BCF    FA6.6
50D8:  BCF    FA6.7
50DA:  BSF    FA6.2
50DC:  MOVF   FF2,W
50DE:  MOVWF  00
50E0:  BCF    FF2.7
50E2:  MOVLB  F
50E4:  MOVLW  55
50E6:  MOVWF  FA7
50E8:  MOVLW  AA
50EA:  MOVWF  FA7
50EC:  BSF    FA6.1
50EE:  BTFSC  FA6.1
50F0:  BRA    50EE
50F2:  BCF    FA6.2
50F4:  MOVF   00,W
50F6:  IORWF  FF2,F
50F8:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==14){ // Menu de Desfogue 
50FA:  MOVF   x77,W
50FC:  SUBLW  0E
50FE:  BTFSS  FD8.2
5100:  BRA    53E2
....................       
....................       if(visual==1) 
5102:  BTFSS  x6A.4
5104:  BRA    5166
....................       {          
....................          strcpy(Menus.Letra," Desfogue"); 
5106:  MOVLW  05
5108:  MOVWF  FEA
510A:  MOVLW  08
510C:  MOVWF  FE9
510E:  MOVFF  FF2,528
5112:  BCF    FF2.7
5114:  MOVLW  00
5116:  MOVLB  0
5118:  CALL   0A32
511C:  TBLRD*-
511E:  TBLRD*+
5120:  MOVF   FF5,W
5122:  MOVWF  FEE
5124:  IORLW  00
5126:  BNZ   511E
5128:  MOVLB  5
512A:  BTFSC  x28.7
512C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
512E:  MOVLW  05
5130:  MOVWF  x29
5132:  MOVLW  08
5134:  MOVWF  x28
5136:  CLRF   x2A
5138:  CLRF   x2B
513A:  MOVLW  01
513C:  MOVWF  x2C
513E:  MOVLW  02
5140:  MOVWF  x2D
5142:  MOVLB  0
5144:  CALL   1224
....................           
....................          displayTiempo(Nivel,50,40,0,2); 
5148:  MOVFF  48A,529
514C:  MOVLW  32
514E:  MOVLB  5
5150:  MOVWF  x2A
5152:  MOVLW  28
5154:  MOVWF  x2B
5156:  CLRF   x2C
5158:  MOVLW  02
515A:  MOVWF  x2D
515C:  MOVLB  0
515E:  CALL   1E32
....................           
....................          visual=0; 
5162:  MOVLB  4
5164:  BCF    x6A.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
5166:  BSF    F92.5
5168:  BTFSS  F80.5
516A:  BRA    518C
....................          {   
....................             if(Nivel<6) 
516C:  MOVF   x8B,F
516E:  BNZ   518C
5170:  MOVF   x8A,W
5172:  SUBLW  05
5174:  BNC   518C
....................             { 
....................                delay_ms(30);Nivel++;visual=1; 
5176:  MOVLW  1E
5178:  MOVLB  5
517A:  MOVWF  x29
517C:  MOVLB  0
517E:  CALL   131E
5182:  MOVLB  4
5184:  INCF   x8A,F
5186:  BTFSC  FD8.2
5188:  INCF   x8B,F
518A:  BSF    x6A.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
518C:  BSF    F96.0
518E:  BTFSS  F84.0
5190:  BRA    51B4
....................          {   
....................             if(Nivel>1) 
5192:  MOVF   x8B,F
5194:  BNZ   519C
5196:  MOVF   x8A,W
5198:  SUBLW  01
519A:  BC    51B4
....................             { 
....................                delay_ms(30);Nivel--;visual=1;      
519C:  MOVLW  1E
519E:  MOVLB  5
51A0:  MOVWF  x29
51A2:  MOVLB  0
51A4:  CALL   131E
51A8:  MOVLB  4
51AA:  MOVF   x8A,W
51AC:  BTFSC  FD8.2
51AE:  DECF   x8B,F
51B0:  DECF   x8A,F
51B2:  BSF    x6A.4
....................             } 
....................          } 
....................           
....................          if(desfoguelento==1) 
51B4:  BTFSS  x6A.5
51B6:  BRA    5372
....................          { 
....................             if(RIGHT)//Si oprime SET 
51B8:  BSF    F96.1
51BA:  BTFSS  F84.1
51BC:  BRA    5370
....................             {   
....................                write_eeprom(9,Nivel); 
51BE:  MOVLW  09
51C0:  MOVWF  FA9
51C2:  MOVFF  48A,FA8
51C6:  BCF    FA6.6
51C8:  BCF    FA6.7
51CA:  BSF    FA6.2
51CC:  MOVF   FF2,W
51CE:  MOVWF  00
51D0:  BCF    FF2.7
51D2:  MOVLB  F
51D4:  MOVLW  55
51D6:  MOVWF  FA7
51D8:  MOVLW  AA
51DA:  MOVWF  FA7
51DC:  BSF    FA6.1
51DE:  BTFSC  FA6.1
51E0:  BRA    51DE
51E2:  BCF    FA6.2
51E4:  MOVF   00,W
51E6:  IORWF  FF2,F
....................                Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
51E8:  MOVLW  14
51EA:  MOVLB  4
51EC:  MOVWF  x77
51EE:  MOVLW  0F
51F0:  MOVLB  5
51F2:  MOVWF  x3A
51F4:  MOVLW  12
51F6:  MOVWF  x3B
51F8:  MOVLW  1E
51FA:  MOVWF  x3C
51FC:  MOVLW  35
51FE:  MOVWF  x3D
5200:  CLRF   x3E
5202:  MOVLW  01
5204:  MOVWF  x3F
5206:  MOVLB  0
5208:  CALL   1162
520C:  MOVLB  4
520E:  CLRF   x80
5210:  MOVLW  C0
5212:  IORWF  FF2,F
5214:  MOVLB  5
5216:  CLRF   x29
5218:  MOVLB  0
521A:  CALL   0BF4
....................                strcpy(Menus.Letra,"Calentando"); 
521E:  MOVLW  05
5220:  MOVWF  FEA
5222:  MOVLW  08
5224:  MOVWF  FE9
5226:  MOVFF  FF2,528
522A:  BCF    FF2.7
522C:  MOVLW  00
522E:  CALL   080A
5232:  TBLRD*-
5234:  TBLRD*+
5236:  MOVF   FF5,W
5238:  MOVWF  FEE
523A:  IORLW  00
523C:  BNZ   5234
523E:  MOVLB  5
5240:  BTFSC  x28.7
5242:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
5244:  MOVLW  05
5246:  MOVWF  x29
5248:  MOVLW  08
524A:  MOVWF  x28
524C:  CLRF   x2A
524E:  MOVLW  37
5250:  MOVWF  x2B
5252:  MOVLW  02
5254:  MOVWF  x2C
5256:  MOVLW  01
5258:  MOVWF  x2D
525A:  MOVLB  0
525C:  CALL   1224
....................                glcd_rect(15, 18, 30, 53, NO, ON); 
5260:  MOVLW  0F
5262:  MOVLB  5
5264:  MOVWF  x3A
5266:  MOVLW  12
5268:  MOVWF  x3B
526A:  MOVLW  1E
526C:  MOVWF  x3C
526E:  MOVLW  35
5270:  MOVWF  x3D
5272:  CLRF   x3E
5274:  MOVLW  01
5276:  MOVWF  x3F
5278:  MOVLB  0
527A:  CALL   1162
....................                glcd_imagen(5); 
527E:  MOVLW  05
5280:  MOVLB  5
5282:  MOVWF  x28
5284:  MOVLB  0
5286:  CALL   1A86
....................                strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
528A:  MOVLW  05
528C:  MOVWF  FEA
528E:  MOVLW  08
5290:  MOVWF  FE9
5292:  MOVFF  FF2,528
5296:  BCF    FF2.7
5298:  MOVLW  00
529A:  CALL   0826
529E:  TBLRD*-
52A0:  TBLRD*+
52A2:  MOVF   FF5,W
52A4:  MOVWF  FEE
52A6:  IORLW  00
52A8:  BNZ   52A0
52AA:  MOVLB  5
52AC:  BTFSC  x28.7
52AE:  BSF    FF2.7
52B0:  MOVLW  05
52B2:  MOVWF  x29
52B4:  MOVLW  08
52B6:  MOVWF  x28
52B8:  CLRF   x2A
52BA:  CLRF   x2B
52BC:  MOVLW  02
52BE:  MOVWF  x2C
52C0:  MOVLW  01
52C2:  MOVWF  x2D
52C4:  MOVLB  0
52C6:  CALL   1224
....................                strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
52CA:  MOVLW  05
52CC:  MOVWF  FEA
52CE:  MOVLW  08
52D0:  MOVWF  FE9
52D2:  MOVFF  FF2,528
52D6:  BCF    FF2.7
52D8:  MOVLW  00
52DA:  CALL   083E
52DE:  TBLRD*-
52E0:  TBLRD*+
52E2:  MOVF   FF5,W
52E4:  MOVWF  FEE
52E6:  IORLW  00
52E8:  BNZ   52E0
52EA:  MOVLB  5
52EC:  BTFSC  x28.7
52EE:  BSF    FF2.7
52F0:  MOVLW  05
52F2:  MOVWF  x29
52F4:  MOVLW  08
52F6:  MOVWF  x28
52F8:  CLRF   x2A
52FA:  MOVWF  x2B
52FC:  MOVLW  02
52FE:  MOVWF  x2C
5300:  MOVLW  01
5302:  MOVWF  x2D
5304:  MOVLB  0
5306:  CALL   1224
....................                glcd_circle(95,40,2,NO,ON); 
530A:  MOVLW  5F
530C:  MOVLB  5
530E:  MOVWF  x28
5310:  MOVLW  28
5312:  MOVWF  x29
5314:  MOVLW  02
5316:  MOVWF  x2A
5318:  CLRF   x2B
531A:  MOVLW  01
531C:  MOVWF  x2C
531E:  MOVLB  0
5320:  CALL   1B82
....................                strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
5324:  MOVLW  05
5326:  MOVWF  FEA
5328:  MOVLW  08
532A:  MOVWF  FE9
532C:  MOVFF  FF2,528
5330:  BCF    FF2.7
5332:  MOVLW  00
5334:  CALL   0856
5338:  TBLRD*-
533A:  TBLRD*+
533C:  MOVF   FF5,W
533E:  MOVWF  FEE
5340:  IORLW  00
5342:  BNZ   533A
5344:  MOVLB  5
5346:  BTFSC  x28.7
5348:  BSF    FF2.7
534A:  MOVLW  05
534C:  MOVWF  x29
534E:  MOVLW  08
5350:  MOVWF  x28
5352:  MOVLW  66
5354:  MOVWF  x2A
5356:  MOVLW  28
5358:  MOVWF  x2B
535A:  MOVLW  02
535C:  MOVWF  x2C
535E:  MOVWF  x2D
5360:  MOVLB  0
5362:  CALL   1224
....................                MuestraTiemposProgramados(); 
5366:  CALL   1F82
....................                EnviarCodigo(); 
536A:  CALL   152A
536E:  MOVLB  4
....................             }       
....................          } 
....................          else 
5370:  BRA    53E2
....................          { 
....................             if(LEFT)//Si oprime boton de Toma. 
5372:  BSF    F96.2
5374:  BTFSS  F84.2
5376:  BRA    53E2
....................             { 
....................                if(Nivel<6) 
5378:  MOVF   x8B,F
537A:  BNZ   5386
537C:  MOVF   x8A,W
537E:  SUBLW  05
5380:  BNC   5386
....................                { 
....................                   desfoguelento=1; 
5382:  BSF    x6A.5
....................                } 
....................                else 
5384:  BRA    5388
....................                { 
....................                   desfoguelento=0; 
5386:  BCF    x6A.5
....................                } 
....................                delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5388:  MOVLW  04
538A:  MOVLB  5
538C:  MOVWF  x28
538E:  MOVLW  AF
5390:  MOVWF  x29
5392:  MOVLB  0
5394:  CALL   131E
5398:  MOVLB  5
539A:  DECFSZ x28,F
539C:  BRA    538E
539E:  MOVLW  08
53A0:  MOVLB  4
53A2:  MOVWF  x77
53A4:  MOVLB  5
53A6:  CLRF   x29
53A8:  MOVLB  0
53AA:  CALL   0BF4
53AE:  MOVLW  01
53B0:  MOVLB  4
53B2:  MOVWF  x7E
53B4:  BSF    x6A.4
....................                write_eeprom(9,Nivel); 
53B6:  MOVLW  09
53B8:  MOVWF  FA9
53BA:  MOVFF  48A,FA8
53BE:  BCF    FA6.6
53C0:  BCF    FA6.7
53C2:  BSF    FA6.2
53C4:  MOVF   FF2,W
53C6:  MOVWF  00
53C8:  BCF    FF2.7
53CA:  MOVLB  F
53CC:  MOVLW  55
53CE:  MOVWF  FA7
53D0:  MOVLW  AA
53D2:  MOVWF  FA7
53D4:  BSF    FA6.1
53D6:  BTFSC  FA6.1
53D8:  BRA    53D6
53DA:  BCF    FA6.2
53DC:  MOVF   00,W
53DE:  IORWF  FF2,F
53E0:  MOVLB  4
....................             } 
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==15){ //Menu de Continuar 
53E2:  MOVF   x77,W
53E4:  SUBLW  0F
53E6:  BTFSS  FD8.2
53E8:  BRA    5724
....................        
....................       if(visual==1) 
53EA:  BTFSS  x6A.4
53EC:  BRA    5552
....................       { 
....................          strcpy(Menus.Letra,"Continuar"); 
53EE:  MOVLW  05
53F0:  MOVWF  FEA
53F2:  MOVLW  08
53F4:  MOVWF  FE9
53F6:  MOVFF  FF2,528
53FA:  BCF    FF2.7
53FC:  MOVLW  00
53FE:  MOVLB  0
5400:  CALL   09CA
5404:  TBLRD*-
5406:  TBLRD*+
5408:  MOVF   FF5,W
540A:  MOVWF  FEE
540C:  IORLW  00
540E:  BNZ   5406
5410:  MOVLB  5
5412:  BTFSC  x28.7
5414:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5416:  MOVLW  05
5418:  MOVWF  x29
541A:  MOVLW  08
541C:  MOVWF  x28
541E:  CLRF   x2A
5420:  CLRF   x2B
5422:  MOVLW  01
5424:  MOVWF  x2C
5426:  MOVLW  02
5428:  MOVWF  x2D
542A:  MOVLB  0
542C:  CALL   1224
....................           
....................          if(Opcion==2) 
5430:  MOVLB  4
5432:  MOVF   x7E,W
5434:  SUBLW  02
5436:  BNZ   54C2
....................          {strcpy(Menus.Letra,"SI"); 
5438:  MOVLW  05
543A:  MOVWF  FEA
543C:  MOVLW  08
543E:  MOVWF  FE9
5440:  MOVFF  FF2,528
5444:  BCF    FF2.7
5446:  MOVLW  00
5448:  MOVLB  0
544A:  CALL   0A4C
544E:  TBLRD*-
5450:  TBLRD*+
5452:  MOVF   FF5,W
5454:  MOVWF  FEE
5456:  IORLW  00
5458:  BNZ   5450
545A:  MOVLB  5
545C:  BTFSC  x28.7
545E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,1,2); 
5460:  MOVLW  05
5462:  MOVWF  x29
5464:  MOVLW  08
5466:  MOVWF  x28
5468:  MOVLW  32
546A:  MOVWF  x2A
546C:  MOVLW  19
546E:  MOVWF  x2B
5470:  MOVLW  01
5472:  MOVWF  x2C
5474:  MOVLW  02
5476:  MOVWF  x2D
5478:  MOVLB  0
547A:  CALL   1224
....................          strcpy(Menus.Letra,"NO"); 
547E:  MOVLW  05
5480:  MOVWF  FEA
5482:  MOVLW  08
5484:  MOVWF  FE9
5486:  MOVFF  FF2,528
548A:  BCF    FF2.7
548C:  MOVLW  00
548E:  CALL   0A60
5492:  TBLRD*-
5494:  TBLRD*+
5496:  MOVF   FF5,W
5498:  MOVWF  FEE
549A:  IORLW  00
549C:  BNZ   5494
549E:  MOVLB  5
54A0:  BTFSC  x28.7
54A2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,0,2); 
54A4:  MOVLW  05
54A6:  MOVWF  x29
54A8:  MOVLW  08
54AA:  MOVWF  x28
54AC:  MOVLW  32
54AE:  MOVWF  x2A
54B0:  MOVLW  2D
54B2:  MOVWF  x2B
54B4:  CLRF   x2C
54B6:  MOVLW  02
54B8:  MOVWF  x2D
54BA:  MOVLB  0
54BC:  CALL   1224
54C0:  MOVLB  4
....................          } 
....................          if(Opcion==1) 
54C2:  DECFSZ x7E,W
54C4:  BRA    5550
....................          {strcpy(Menus.Letra,"SI"); 
54C6:  MOVLW  05
54C8:  MOVWF  FEA
54CA:  MOVLW  08
54CC:  MOVWF  FE9
54CE:  MOVFF  FF2,528
54D2:  BCF    FF2.7
54D4:  MOVLW  00
54D6:  MOVLB  0
54D8:  CALL   0A4C
54DC:  TBLRD*-
54DE:  TBLRD*+
54E0:  MOVF   FF5,W
54E2:  MOVWF  FEE
54E4:  IORLW  00
54E6:  BNZ   54DE
54E8:  MOVLB  5
54EA:  BTFSC  x28.7
54EC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,0,2); 
54EE:  MOVLW  05
54F0:  MOVWF  x29
54F2:  MOVLW  08
54F4:  MOVWF  x28
54F6:  MOVLW  32
54F8:  MOVWF  x2A
54FA:  MOVLW  19
54FC:  MOVWF  x2B
54FE:  CLRF   x2C
5500:  MOVLW  02
5502:  MOVWF  x2D
5504:  MOVLB  0
5506:  CALL   1224
....................          strcpy(Menus.Letra,"NO"); 
550A:  MOVLW  05
550C:  MOVWF  FEA
550E:  MOVLW  08
5510:  MOVWF  FE9
5512:  MOVFF  FF2,528
5516:  BCF    FF2.7
5518:  MOVLW  00
551A:  CALL   0A60
551E:  TBLRD*-
5520:  TBLRD*+
5522:  MOVF   FF5,W
5524:  MOVWF  FEE
5526:  IORLW  00
5528:  BNZ   5520
552A:  MOVLB  5
552C:  BTFSC  x28.7
552E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,1,2); 
5530:  MOVLW  05
5532:  MOVWF  x29
5534:  MOVLW  08
5536:  MOVWF  x28
5538:  MOVLW  32
553A:  MOVWF  x2A
553C:  MOVLW  2D
553E:  MOVWF  x2B
5540:  MOVLW  01
5542:  MOVWF  x2C
5544:  MOVLW  02
5546:  MOVWF  x2D
5548:  MOVLB  0
554A:  CALL   1224
554E:  MOVLB  4
....................          } 
....................          visual=0; 
5550:  BCF    x6A.4
....................       } 
....................        
....................          
....................       if(UP)//Si oprime hacia arriba 
5552:  BSF    F92.5
5554:  BTFSS  F80.5
5556:  BRA    5562
....................       { 
....................          if(Opcion<2) 
5558:  MOVF   x7E,W
555A:  SUBLW  01
555C:  BNC   5560
....................          { 
....................             Opcion++; 
555E:  INCF   x7E,F
....................          } 
....................          visual=1; 
5560:  BSF    x6A.4
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5562:  BSF    F96.0
5564:  BTFSS  F84.0
5566:  BRA    5572
....................       {   
....................          if(Opcion>1) 
5568:  MOVF   x7E,W
556A:  SUBLW  01
556C:  BC    5570
....................          { 
....................             Opcion--; 
556E:  DECF   x7E,F
....................          }   
....................          visual=1; 
5570:  BSF    x6A.4
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
5572:  BSF    F96.1
5574:  BTFSS  F84.1
5576:  BRA    56EE
....................       {   
....................          if(Opcion==2) 
5578:  MOVF   x7E,W
557A:  SUBLW  02
557C:  BTFSS  FD8.2
557E:  BRA    56C0
....................          { 
....................             Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5580:  MOVLW  14
5582:  MOVWF  x77
5584:  MOVLW  0F
5586:  MOVLB  5
5588:  MOVWF  x3A
558A:  MOVLW  12
558C:  MOVWF  x3B
558E:  MOVLW  1E
5590:  MOVWF  x3C
5592:  MOVLW  35
5594:  MOVWF  x3D
5596:  CLRF   x3E
5598:  MOVLW  01
559A:  MOVWF  x3F
559C:  MOVLB  0
559E:  CALL   1162
55A2:  MOVLB  4
55A4:  CLRF   x80
55A6:  MOVLW  C0
55A8:  IORWF  FF2,F
55AA:  MOVLB  5
55AC:  CLRF   x29
55AE:  MOVLB  0
55B0:  CALL   0BF4
....................             strcpy(Menus.Letra,"Calentando"); 
55B4:  MOVLW  05
55B6:  MOVWF  FEA
55B8:  MOVLW  08
55BA:  MOVWF  FE9
55BC:  MOVFF  FF2,528
55C0:  BCF    FF2.7
55C2:  MOVLW  00
55C4:  CALL   080A
55C8:  TBLRD*-
55CA:  TBLRD*+
55CC:  MOVF   FF5,W
55CE:  MOVWF  FEE
55D0:  IORLW  00
55D2:  BNZ   55CA
55D4:  MOVLB  5
55D6:  BTFSC  x28.7
55D8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
55DA:  MOVLW  05
55DC:  MOVWF  x29
55DE:  MOVLW  08
55E0:  MOVWF  x28
55E2:  CLRF   x2A
55E4:  MOVLW  37
55E6:  MOVWF  x2B
55E8:  MOVLW  02
55EA:  MOVWF  x2C
55EC:  MOVLW  01
55EE:  MOVWF  x2D
55F0:  MOVLB  0
55F2:  CALL   1224
....................             glcd_rect(15, 18, 30, 53, NO, ON); 
55F6:  MOVLW  0F
55F8:  MOVLB  5
55FA:  MOVWF  x3A
55FC:  MOVLW  12
55FE:  MOVWF  x3B
5600:  MOVLW  1E
5602:  MOVWF  x3C
5604:  MOVLW  35
5606:  MOVWF  x3D
5608:  CLRF   x3E
560A:  MOVLW  01
560C:  MOVWF  x3F
560E:  MOVLB  0
5610:  CALL   1162
....................             glcd_imagen(5); 
5614:  MOVLW  05
5616:  MOVLB  5
5618:  MOVWF  x28
561A:  MOVLB  0
561C:  CALL   1A86
....................             strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5620:  MOVLW  05
5622:  MOVWF  FEA
5624:  MOVLW  08
5626:  MOVWF  FE9
5628:  MOVFF  FF2,528
562C:  BCF    FF2.7
562E:  MOVLW  00
5630:  CALL   0826
5634:  TBLRD*-
5636:  TBLRD*+
5638:  MOVF   FF5,W
563A:  MOVWF  FEE
563C:  IORLW  00
563E:  BNZ   5636
5640:  MOVLB  5
5642:  BTFSC  x28.7
5644:  BSF    FF2.7
5646:  MOVLW  05
5648:  MOVWF  x29
564A:  MOVLW  08
564C:  MOVWF  x28
564E:  CLRF   x2A
5650:  CLRF   x2B
5652:  MOVLW  02
5654:  MOVWF  x2C
5656:  MOVLW  01
5658:  MOVWF  x2D
565A:  MOVLB  0
565C:  CALL   1224
....................             strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5660:  MOVLW  05
5662:  MOVWF  FEA
5664:  MOVLW  08
5666:  MOVWF  FE9
5668:  MOVFF  FF2,528
566C:  BCF    FF2.7
566E:  MOVLW  00
5670:  CALL   083E
5674:  TBLRD*-
5676:  TBLRD*+
5678:  MOVF   FF5,W
567A:  MOVWF  FEE
567C:  IORLW  00
567E:  BNZ   5676
5680:  MOVLB  5
5682:  BTFSC  x28.7
5684:  BSF    FF2.7
5686:  MOVLW  05
5688:  MOVWF  x29
568A:  MOVLW  08
568C:  MOVWF  x28
568E:  CLRF   x2A
5690:  MOVWF  x2B
5692:  MOVLW  02
5694:  MOVWF  x2C
5696:  MOVLW  01
5698:  MOVWF  x2D
569A:  MOVLB  0
569C:  CALL   1224
....................             MuestraTiemposProgramados(); 
56A0:  CALL   1F82
....................             if(Nivel<6) 
56A4:  MOVLB  4
56A6:  MOVF   x8B,F
56A8:  BNZ   56B4
56AA:  MOVF   x8A,W
56AC:  SUBLW  05
56AE:  BNC   56B4
....................                { 
....................                   desfoguelento=1; 
56B0:  BSF    x6A.5
....................                } 
....................                else 
56B2:  BRA    56B6
....................                { 
....................                   desfoguelento=0; 
56B4:  BCF    x6A.5
....................                } 
....................                EnviarCodigo(); 
56B6:  MOVLB  0
56B8:  CALL   152A
....................          } 
....................          else 
56BC:  BRA    56F0
56BE:  MOVLB  4
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
56C0:  MOVLW  04
56C2:  MOVLB  5
56C4:  MOVWF  x28
56C6:  MOVLW  AF
56C8:  MOVWF  x29
56CA:  MOVLB  0
56CC:  CALL   131E
56D0:  MOVLB  5
56D2:  DECFSZ x28,F
56D4:  BRA    56C6
56D6:  MOVLW  08
56D8:  MOVLB  4
56DA:  MOVWF  x77
56DC:  MOVLB  5
56DE:  CLRF   x29
56E0:  MOVLB  0
56E2:  CALL   0BF4
56E6:  MOVLW  01
56E8:  MOVLB  4
56EA:  MOVWF  x7E
56EC:  BSF    x6A.4
56EE:  MOVLB  0
....................          } 
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
56F0:  BSF    F96.2
56F2:  BTFSS  F84.2
56F4:  BRA    5726
....................       { 
....................          delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
56F6:  MOVLW  04
56F8:  MOVLB  5
56FA:  MOVWF  x28
56FC:  MOVLW  AF
56FE:  MOVWF  x29
5700:  MOVLB  0
5702:  CALL   131E
5706:  MOVLB  5
5708:  DECFSZ x28,F
570A:  BRA    56FC
570C:  MOVLW  08
570E:  MOVLB  4
5710:  MOVWF  x77
5712:  MOVLB  5
5714:  CLRF   x29
5716:  MOVLB  0
5718:  CALL   0BF4
571C:  MOVLW  01
571E:  MOVLB  4
5720:  MOVWF  x7E
5722:  BSF    x6A.4
5724:  MOVLB  0
....................       } 
....................      
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
5726:  MOVLB  4
5728:  MOVF   x77,W
572A:  SUBLW  14
572C:  BTFSS  FD8.2
572E:  GOTO   6260
....................     
....................     
....................    if(flag_agua==1 && Puerta==1 && Parada==1 && tiempo_esterilizacion<2 && Alarma==0 && AlarmaAgua==0) 
5732:  BTFSS  x6B.2
5734:  BRA    585E
5736:  DECFSZ x5E,W
5738:  BRA    585E
573A:  DECFSZ x5F,W
573C:  BRA    585E
573E:  MOVF   x7F,W
5740:  SUBLW  01
5742:  BTFSS  FD8.0
5744:  BRA    585E
5746:  MOVF   x68,F
5748:  BTFSS  FD8.2
574A:  BRA    585E
574C:  MOVF   x69,F
574E:  BTFSS  FD8.2
5750:  BRA    585E
....................    {   
....................       // Debe enviar a Hardware_Controller flag que indique que puede realizar control. En Hardware_Controller si esta activado el flag** 
....................       // de control debe tener automaticamente la electrovalvula de desfogue cerrada.** 
....................       if(tiempo_esterilizacion==0 && disp_Calentando==0) 
5752:  MOVF   x7F,F
5754:  BNZ   57D0
5756:  BTFSC  x6B.4
5758:  BRA    57D0
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
575A:  MOVLB  5
575C:  CLRF   x3A
575E:  MOVLW  37
5760:  MOVWF  x3B
5762:  MOVLW  7F
5764:  MOVWF  x3C
5766:  MOVLW  3F
5768:  MOVWF  x3D
576A:  MOVLW  01
576C:  MOVWF  x3E
576E:  CLRF   x3F
5770:  MOVLB  0
5772:  CALL   1162
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
5776:  MOVLW  05
5778:  MOVWF  FEA
577A:  MOVLW  08
577C:  MOVWF  FE9
577E:  MOVFF  FF2,528
5782:  BCF    FF2.7
5784:  MOVLW  00
5786:  CALL   080A
578A:  TBLRD*-
578C:  TBLRD*+
578E:  MOVF   FF5,W
5790:  MOVWF  FEE
5792:  IORLW  00
5794:  BNZ   578C
5796:  MOVLB  5
5798:  BTFSC  x28.7
579A:  BSF    FF2.7
579C:  MOVLW  05
579E:  MOVWF  x29
57A0:  MOVLW  08
57A2:  MOVWF  x28
57A4:  CLRF   x2A
57A6:  MOVLW  37
57A8:  MOVWF  x2B
57AA:  MOVLW  02
57AC:  MOVWF  x2C
57AE:  MOVLW  01
57B0:  MOVWF  x2D
57B2:  MOVLB  0
57B4:  CALL   1224
....................          disp_Calentando=1;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
57B8:  MOVLB  4
57BA:  BSF    x6B.4
57BC:  BCF    x6B.5
57BE:  BCF    x6B.6
57C0:  BCF    x6B.7
57C2:  BCF    x6C.0
57C4:  BCF    x6C.1
57C6:  BCF    x6C.2
57C8:  BCF    x6C.3
....................          EVDesfogue=0;Control=1; 
57CA:  CLRF   x6E
57CC:  MOVLW  01
57CE:  MOVWF  x75
....................       } 
....................       if(tiempo_esterilizacion==1 && disp_Esterilizando==0) 
57D0:  DECFSZ x7F,W
57D2:  BRA    5850
57D4:  BTFSC  x6B.7
57D6:  BRA    5850
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
57D8:  MOVLB  5
57DA:  CLRF   x3A
57DC:  MOVLW  37
57DE:  MOVWF  x3B
57E0:  MOVLW  7F
57E2:  MOVWF  x3C
57E4:  MOVLW  3F
57E6:  MOVWF  x3D
57E8:  MOVLW  01
57EA:  MOVWF  x3E
57EC:  CLRF   x3F
57EE:  MOVLB  0
57F0:  CALL   1162
....................          strcpy(Menus.Letra,"Esterilizando");displayMenu(Menus.Letra,0,55,2,1); 
57F4:  MOVLW  05
57F6:  MOVWF  FEA
57F8:  MOVLW  08
57FA:  MOVWF  FE9
57FC:  MOVFF  FF2,528
5800:  BCF    FF2.7
5802:  MOVLW  00
5804:  CALL   0A74
5808:  TBLRD*-
580A:  TBLRD*+
580C:  MOVF   FF5,W
580E:  MOVWF  FEE
5810:  IORLW  00
5812:  BNZ   580A
5814:  MOVLB  5
5816:  BTFSC  x28.7
5818:  BSF    FF2.7
581A:  MOVLW  05
581C:  MOVWF  x29
581E:  MOVLW  08
5820:  MOVWF  x28
5822:  CLRF   x2A
5824:  MOVLW  37
5826:  MOVWF  x2B
5828:  MOVLW  02
582A:  MOVWF  x2C
582C:  MOVLW  01
582E:  MOVWF  x2D
5830:  MOVLB  0
5832:  CALL   1224
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=1;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5836:  MOVLB  4
5838:  BCF    x6B.4
583A:  BCF    x6B.5
583C:  BCF    x6B.6
583E:  BSF    x6B.7
5840:  BCF    x6C.0
5842:  BCF    x6C.1
5844:  BCF    x6C.2
5846:  BCF    x6C.3
....................          EVDesfogue=0;EVTrampa=0;Control=1; 
5848:  CLRF   x6E
584A:  CLRF   x70
584C:  MOVLW  01
584E:  MOVWF  x75
....................       } 
....................       Control=1; 
5850:  MOVLW  01
5852:  MOVWF  x75
....................       EnviarCodigo(); 
5854:  MOVLB  0
5856:  CALL   152A
....................    } 
....................    else 
585A:  BRA    5CAC
585C:  MOVLB  4
....................    { 
....................       Control=0; 
585E:  CLRF   x75
....................       if(Alarma>0) 
5860:  MOVF   x68,F
5862:  BTFSC  FD8.2
5864:  BRA    5962
....................       { 
....................          if(Alarma==1) // Alarma de Error de Tiempo: Error por exceso de tiempo de calentamiento. 
5866:  DECFSZ x68,W
5868:  BRA    58E0
....................          { 
....................             if(disp_Alarma==0) 
586A:  BTFSC  x6C.5
586C:  BRA    58E0
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
586E:  MOVLB  5
5870:  CLRF   x3A
5872:  MOVLW  37
5874:  MOVWF  x3B
5876:  MOVLW  7F
5878:  MOVWF  x3C
587A:  MOVLW  3F
587C:  MOVWF  x3D
587E:  MOVLW  01
5880:  MOVWF  x3E
5882:  CLRF   x3F
5884:  MOVLB  0
5886:  CALL   1162
....................                strcpy(Menus.Letra,"Error:ET01");displayMenu(Menus.Letra,0,55,2,1); 
588A:  MOVLW  05
588C:  MOVWF  FEA
588E:  MOVLW  08
5890:  MOVWF  FE9
5892:  MOVFF  FF2,528
5896:  BCF    FF2.7
5898:  MOVLW  00
589A:  CALL   0A92
589E:  TBLRD*-
58A0:  TBLRD*+
58A2:  MOVF   FF5,W
58A4:  MOVWF  FEE
58A6:  IORLW  00
58A8:  BNZ   58A0
58AA:  MOVLB  5
58AC:  BTFSC  x28.7
58AE:  BSF    FF2.7
58B0:  MOVLW  05
58B2:  MOVWF  x29
58B4:  MOVLW  08
58B6:  MOVWF  x28
58B8:  CLRF   x2A
58BA:  MOVLW  37
58BC:  MOVWF  x2B
58BE:  MOVLW  02
58C0:  MOVWF  x2C
58C2:  MOVLW  01
58C4:  MOVWF  x2D
58C6:  MOVLB  0
58C8:  CALL   1224
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
58CC:  MOVLB  4
58CE:  BCF    x6B.4
58D0:  BCF    x6B.5
58D2:  BCF    x6B.6
58D4:  BCF    x6B.7
58D6:  BCF    x6C.0
58D8:  BCF    x6C.1
58DA:  BCF    x6C.2
58DC:  BCF    x6C.3
....................                disp_Alarma=1; 
58DE:  BSF    x6C.5
....................             } 
....................          } 
....................           
....................          if(Alarma==2) // Alarma de Error de Tiempo: Error por Cambio brusco en la Temperatura 
58E0:  MOVF   x68,W
58E2:  SUBLW  02
58E4:  BNZ   5960
....................          { 
....................             tiempo_esterilizacion=0;tiempo_secado=0; 
58E6:  CLRF   x7F
58E8:  CLRF   x80
....................             if(disp_Alarma==0) 
58EA:  BTFSC  x6C.5
58EC:  BRA    5960
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
58EE:  MOVLB  5
58F0:  CLRF   x3A
58F2:  MOVLW  37
58F4:  MOVWF  x3B
58F6:  MOVLW  7F
58F8:  MOVWF  x3C
58FA:  MOVLW  3F
58FC:  MOVWF  x3D
58FE:  MOVLW  01
5900:  MOVWF  x3E
5902:  CLRF   x3F
5904:  MOVLB  0
5906:  CALL   1162
....................                strcpy(Menus.Letra,"Error:ET02");displayMenu(Menus.Letra,0,55,2,1); 
590A:  MOVLW  05
590C:  MOVWF  FEA
590E:  MOVLW  08
5910:  MOVWF  FE9
5912:  MOVFF  FF2,528
5916:  BCF    FF2.7
5918:  MOVLW  00
591A:  CALL   0AAE
591E:  TBLRD*-
5920:  TBLRD*+
5922:  MOVF   FF5,W
5924:  MOVWF  FEE
5926:  IORLW  00
5928:  BNZ   5920
592A:  MOVLB  5
592C:  BTFSC  x28.7
592E:  BSF    FF2.7
5930:  MOVLW  05
5932:  MOVWF  x29
5934:  MOVLW  08
5936:  MOVWF  x28
5938:  CLRF   x2A
593A:  MOVLW  37
593C:  MOVWF  x2B
593E:  MOVLW  02
5940:  MOVWF  x2C
5942:  MOVLW  01
5944:  MOVWF  x2D
5946:  MOVLB  0
5948:  CALL   1224
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
594C:  MOVLB  4
594E:  BCF    x6B.4
5950:  BCF    x6B.5
5952:  BCF    x6B.6
5954:  BCF    x6B.7
5956:  BCF    x6C.0
5958:  BCF    x6C.1
595A:  BCF    x6C.2
595C:  BCF    x6C.3
....................                disp_Alarma=1; 
595E:  BSF    x6C.5
....................             } 
....................          } 
....................       } 
....................       else 
5960:  BRA    5CA6
....................       { 
....................          disp_Alarma=0; 
5962:  BCF    x6C.5
....................          if(NivelTanque==1 && flag_agua==0 ) 
5964:  DECFSZ x61,W
5966:  BRA    5970
5968:  BTFSC  x6B.2
596A:  BRA    5970
....................          { 
....................             flag_agua=1; 
596C:  BSF    x6B.2
....................             // Debe enviar a Hardware_Controller que cierre EV de agua 
....................          }  
....................          else 
596E:  BRA    5A66
....................          { 
....................             if(tiempo_esterilizacion==0 && disp_Llenando==0 && Puerta==1) 
5970:  MOVF   x7F,F
5972:  BNZ   59EE
5974:  BTFSC  x6B.5
5976:  BRA    59EE
5978:  DECFSZ x5E,W
597A:  BRA    59EE
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
597C:  MOVLB  5
597E:  CLRF   x3A
5980:  MOVLW  37
5982:  MOVWF  x3B
5984:  MOVLW  7F
5986:  MOVWF  x3C
5988:  MOVLW  3F
598A:  MOVWF  x3D
598C:  MOVLW  01
598E:  MOVWF  x3E
5990:  CLRF   x3F
5992:  MOVLB  0
5994:  CALL   1162
....................                strcpy(Menus.Letra,"Llenando");displayMenu(Menus.Letra,0,55,2,1); 
5998:  MOVLW  05
599A:  MOVWF  FEA
599C:  MOVLW  08
599E:  MOVWF  FE9
59A0:  MOVFF  FF2,528
59A4:  BCF    FF2.7
59A6:  MOVLW  00
59A8:  CALL   0ACA
59AC:  TBLRD*-
59AE:  TBLRD*+
59B0:  MOVF   FF5,W
59B2:  MOVWF  FEE
59B4:  IORLW  00
59B6:  BNZ   59AE
59B8:  MOVLB  5
59BA:  BTFSC  x28.7
59BC:  BSF    FF2.7
59BE:  MOVLW  05
59C0:  MOVWF  x29
59C2:  MOVLW  08
59C4:  MOVWF  x28
59C6:  CLRF   x2A
59C8:  MOVLW  37
59CA:  MOVWF  x2B
59CC:  MOVLW  02
59CE:  MOVWF  x2C
59D0:  MOVLW  01
59D2:  MOVWF  x2D
59D4:  MOVLB  0
59D6:  CALL   1224
....................                disp_Calentando=0;disp_Llenando=1;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
59DA:  MOVLB  4
59DC:  BCF    x6B.4
59DE:  BSF    x6B.5
59E0:  BCF    x6B.6
59E2:  BCF    x6B.7
59E4:  BCF    x6C.0
59E6:  BCF    x6C.1
59E8:  BCF    x6C.2
59EA:  BCF    x6C.3
....................                // Debe enviar a Hardware_Controller que abra EV de agua y que apague Resistencia 
....................                Control=0; 
59EC:  CLRF   x75
....................             } 
....................              
....................             if(AlarmaAgua==1) 
59EE:  DECFSZ x69,W
59F0:  BRA    5A66
....................             { 
....................                if(disp_AlarmaAgua==0) 
59F2:  BTFSC  x6C.6
59F4:  BRA    5A66
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
59F6:  MOVLB  5
59F8:  CLRF   x3A
59FA:  MOVLW  37
59FC:  MOVWF  x3B
59FE:  MOVLW  7F
5A00:  MOVWF  x3C
5A02:  MOVLW  3F
5A04:  MOVWF  x3D
5A06:  MOVLW  01
5A08:  MOVWF  x3E
5A0A:  CLRF   x3F
5A0C:  MOVLB  0
5A0E:  CALL   1162
....................                   strcpy(Menus.Letra,"Error:EA01");displayMenu(Menus.Letra,0,55,2,1); 
5A12:  MOVLW  05
5A14:  MOVWF  FEA
5A16:  MOVLW  08
5A18:  MOVWF  FE9
5A1A:  MOVFF  FF2,528
5A1E:  BCF    FF2.7
5A20:  MOVLW  00
5A22:  CALL   0AE4
5A26:  TBLRD*-
5A28:  TBLRD*+
5A2A:  MOVF   FF5,W
5A2C:  MOVWF  FEE
5A2E:  IORLW  00
5A30:  BNZ   5A28
5A32:  MOVLB  5
5A34:  BTFSC  x28.7
5A36:  BSF    FF2.7
5A38:  MOVLW  05
5A3A:  MOVWF  x29
5A3C:  MOVLW  08
5A3E:  MOVWF  x28
5A40:  CLRF   x2A
5A42:  MOVLW  37
5A44:  MOVWF  x2B
5A46:  MOVLW  02
5A48:  MOVWF  x2C
5A4A:  MOVLW  01
5A4C:  MOVWF  x2D
5A4E:  MOVLB  0
5A50:  CALL   1224
....................                   disp_Calentando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5A54:  MOVLB  4
5A56:  BCF    x6B.4
5A58:  BCF    x6B.6
5A5A:  BCF    x6B.7
5A5C:  BCF    x6C.0
5A5E:  BCF    x6C.1
5A60:  BCF    x6C.2
5A62:  BCF    x6C.3
....................                   disp_AlarmaAgua=1; 
5A64:  BSF    x6C.6
....................                } 
....................             } 
....................          } 
....................           
....................          if(tiempo_esterilizacion==2 && flag_agua==1) 
5A66:  MOVF   x7F,W
5A68:  SUBLW  02
5A6A:  BTFSS  FD8.2
5A6C:  BRA    5C2E
5A6E:  BTFSS  x6B.2
5A70:  BRA    5C2E
....................          { 
....................             // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................             if(desfoguelento==1)    
5A72:  BTFSS  x6A.5
5A74:  BRA    5B54
....................             { 
....................                if(z==0) 
5A76:  BTFSC  x6C.4
5A78:  BRA    5ACA
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
5A7A:  MOVLB  5
5A7C:  CLRF   x28
5A7E:  MOVLW  5A
5A80:  MOVWF  x29
5A82:  MOVLW  38
5A84:  MOVWF  x2A
5A86:  MOVLB  0
5A88:  CALL   20C2
5A8C:  MOVLW  19
5A8E:  MOVLB  5
5A90:  MOVWF  x3A
5A92:  MOVLW  12
5A94:  MOVWF  x3B
5A96:  MOVLW  3C
5A98:  MOVWF  x3C
5A9A:  MOVLW  1A
5A9C:  MOVWF  x3D
5A9E:  CLRF   x3E
5AA0:  CLRF   x3F
5AA2:  MOVLB  0
5AA4:  CALL   1162
5AA8:  MOVLW  37
5AAA:  MOVLB  5
5AAC:  MOVWF  x3A
5AAE:  MOVLW  12
5AB0:  MOVWF  x3B
5AB2:  MOVLW  44
5AB4:  MOVWF  x3C
5AB6:  MOVLW  35
5AB8:  MOVWF  x3D
5ABA:  CLRF   x3E
5ABC:  MOVLW  01
5ABE:  MOVWF  x3F
5AC0:  MOVLB  0
5AC2:  CALL   1162
5AC6:  MOVLB  4
5AC8:  BSF    x6C.4
....................                } 
....................                if(disp_Despresurizando==0) 
5ACA:  BTFSC  x6C.0
5ACC:  BRA    5B4C
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
5ACE:  MOVLB  5
5AD0:  CLRF   x3A
5AD2:  MOVLW  37
5AD4:  MOVWF  x3B
5AD6:  MOVLW  7F
5AD8:  MOVWF  x3C
5ADA:  MOVLW  3F
5ADC:  MOVWF  x3D
5ADE:  MOVLW  01
5AE0:  MOVWF  x3E
5AE2:  CLRF   x3F
5AE4:  MOVLB  0
5AE6:  CALL   1162
....................                   strcpy(Menus.Letra,"Despresurizando");displayMenu(Menus.Letra,0,55,2,1); 
5AEA:  MOVLW  05
5AEC:  MOVWF  FEA
5AEE:  MOVLW  08
5AF0:  MOVWF  FE9
5AF2:  MOVFF  FF2,528
5AF6:  BCF    FF2.7
5AF8:  MOVLW  00
5AFA:  CALL   0B00
5AFE:  TBLRD*-
5B00:  TBLRD*+
5B02:  MOVF   FF5,W
5B04:  MOVWF  FEE
5B06:  IORLW  00
5B08:  BNZ   5B00
5B0A:  MOVLB  5
5B0C:  BTFSC  x28.7
5B0E:  BSF    FF2.7
5B10:  MOVLW  05
5B12:  MOVWF  x29
5B14:  MOVLW  08
5B16:  MOVWF  x28
5B18:  CLRF   x2A
5B1A:  MOVLW  37
5B1C:  MOVWF  x2B
5B1E:  MOVLW  02
5B20:  MOVWF  x2C
5B22:  MOVLW  01
5B24:  MOVWF  x2D
5B26:  MOVLB  0
5B28:  CALL   1224
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5B2C:  MOVLB  4
5B2E:  BCF    x6B.4
5B30:  BCF    x6B.5
5B32:  BCF    x6B.6
5B34:  BCF    x6B.7
5B36:  BSF    x6C.0
5B38:  BCF    x6C.1
5B3A:  BCF    x6C.2
5B3C:  BCF    x6C.3
....................                   glcd_imagen(5); 
5B3E:  MOVLW  05
5B40:  MOVLB  5
5B42:  MOVWF  x28
5B44:  MOVLB  0
5B46:  CALL   1A86
5B4A:  MOVLB  4
....................                } 
....................                Exhaust=2;tiempo_secado=2; 
5B4C:  MOVLW  02
5B4E:  MOVWF  x81
5B50:  MOVWF  x80
....................             } 
....................             else 
5B52:  BRA    5C2E
....................             { 
....................                if(z==0) 
5B54:  BTFSC  x6C.4
5B56:  BRA    5BA8
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
5B58:  MOVLB  5
5B5A:  CLRF   x28
5B5C:  MOVLW  5A
5B5E:  MOVWF  x29
5B60:  MOVLW  38
5B62:  MOVWF  x2A
5B64:  MOVLB  0
5B66:  CALL   20C2
5B6A:  MOVLW  19
5B6C:  MOVLB  5
5B6E:  MOVWF  x3A
5B70:  MOVLW  12
5B72:  MOVWF  x3B
5B74:  MOVLW  3C
5B76:  MOVWF  x3C
5B78:  MOVLW  1A
5B7A:  MOVWF  x3D
5B7C:  CLRF   x3E
5B7E:  CLRF   x3F
5B80:  MOVLB  0
5B82:  CALL   1162
5B86:  MOVLW  37
5B88:  MOVLB  5
5B8A:  MOVWF  x3A
5B8C:  MOVLW  12
5B8E:  MOVWF  x3B
5B90:  MOVLW  44
5B92:  MOVWF  x3C
5B94:  MOVLW  35
5B96:  MOVWF  x3D
5B98:  CLRF   x3E
5B9A:  MOVLW  01
5B9C:  MOVWF  x3F
5B9E:  MOVLB  0
5BA0:  CALL   1162
5BA4:  MOVLB  4
5BA6:  BSF    x6C.4
....................                   //tiempo_secado=1; 
....................                } 
....................                if(disp_Secando==0) 
5BA8:  BTFSC  x6B.6
5BAA:  BRA    5C2A
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
5BAC:  MOVLB  5
5BAE:  CLRF   x3A
5BB0:  MOVLW  37
5BB2:  MOVWF  x3B
5BB4:  MOVLW  7F
5BB6:  MOVWF  x3C
5BB8:  MOVLW  3F
5BBA:  MOVWF  x3D
5BBC:  MOVLW  01
5BBE:  MOVWF  x3E
5BC0:  CLRF   x3F
5BC2:  MOVLB  0
5BC4:  CALL   1162
....................                   strcpy(Menus.Letra,"Secando");displayMenu(Menus.Letra,0,55,2,1); 
5BC8:  MOVLW  05
5BCA:  MOVWF  FEA
5BCC:  MOVLW  08
5BCE:  MOVWF  FE9
5BD0:  MOVFF  FF2,528
5BD4:  BCF    FF2.7
5BD6:  MOVLW  00
5BD8:  CALL   0B20
5BDC:  TBLRD*-
5BDE:  TBLRD*+
5BE0:  MOVF   FF5,W
5BE2:  MOVWF  FEE
5BE4:  IORLW  00
5BE6:  BNZ   5BDE
5BE8:  MOVLB  5
5BEA:  BTFSC  x28.7
5BEC:  BSF    FF2.7
5BEE:  MOVLW  05
5BF0:  MOVWF  x29
5BF2:  MOVLW  08
5BF4:  MOVWF  x28
5BF6:  CLRF   x2A
5BF8:  MOVLW  37
5BFA:  MOVWF  x2B
5BFC:  MOVLW  02
5BFE:  MOVWF  x2C
5C00:  MOVLW  01
5C02:  MOVWF  x2D
5C04:  MOVLB  0
5C06:  CALL   1224
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5C0A:  MOVLB  4
5C0C:  BCF    x6B.4
5C0E:  BCF    x6B.5
5C10:  BSF    x6B.6
5C12:  BCF    x6B.7
5C14:  BCF    x6C.0
5C16:  BCF    x6C.1
5C18:  BCF    x6C.2
5C1A:  BCF    x6C.3
....................                   glcd_imagen(5); 
5C1C:  MOVLW  05
5C1E:  MOVLB  5
5C20:  MOVWF  x28
5C22:  MOVLB  0
5C24:  CALL   1A86
5C28:  MOVLB  4
....................                } 
....................                Exhaust=1; 
5C2A:  MOVLW  01
5C2C:  MOVWF  x81
....................             } 
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................           
....................          if(Puerta==0) 
5C2E:  MOVF   x5E,F
5C30:  BNZ   5CA6
....................          { 
....................             if(disp_Door==0) 
5C32:  BTFSC  x6C.2
5C34:  BRA    5CA6
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
5C36:  MOVLB  5
5C38:  CLRF   x3A
5C3A:  MOVLW  37
5C3C:  MOVWF  x3B
5C3E:  MOVLW  7F
5C40:  MOVWF  x3C
5C42:  MOVLW  3F
5C44:  MOVWF  x3D
5C46:  MOVLW  01
5C48:  MOVWF  x3E
5C4A:  CLRF   x3F
5C4C:  MOVLB  0
5C4E:  CALL   1162
....................                strcpy(Menus.Letra,"Puerta Abierta");displayMenu(Menus.Letra,0,55,2,1); 
5C52:  MOVLW  05
5C54:  MOVWF  FEA
5C56:  MOVLW  08
5C58:  MOVWF  FE9
5C5A:  MOVFF  FF2,528
5C5E:  BCF    FF2.7
5C60:  MOVLW  00
5C62:  CALL   0B38
5C66:  TBLRD*-
5C68:  TBLRD*+
5C6A:  MOVF   FF5,W
5C6C:  MOVWF  FEE
5C6E:  IORLW  00
5C70:  BNZ   5C68
5C72:  MOVLB  5
5C74:  BTFSC  x28.7
5C76:  BSF    FF2.7
5C78:  MOVLW  05
5C7A:  MOVWF  x29
5C7C:  MOVLW  08
5C7E:  MOVWF  x28
5C80:  CLRF   x2A
5C82:  MOVLW  37
5C84:  MOVWF  x2B
5C86:  MOVLW  02
5C88:  MOVWF  x2C
5C8A:  MOVLW  01
5C8C:  MOVWF  x2D
5C8E:  MOVLB  0
5C90:  CALL   1224
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=1;disp_Fin=0; 
5C94:  MOVLB  4
5C96:  BCF    x6B.4
5C98:  BCF    x6B.5
5C9A:  BCF    x6B.6
5C9C:  BCF    x6B.7
5C9E:  BCF    x6C.0
5CA0:  BCF    x6C.1
5CA2:  BSF    x6C.2
5CA4:  BCF    x6C.3
....................             }    
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................       } 
....................       EnviarCodigo(); 
5CA6:  MOVLB  0
5CA8:  CALL   152A
....................    } 
....................  
....................       flag_agua=1;Puerta=1;Parada=1;Alarma=0;AlarmaAgua=0;fin_ciclo=1;tiempo_esterilizacion=2; 
5CAC:  MOVLB  4
5CAE:  BSF    x6B.2
5CB0:  MOVLW  01
5CB2:  MOVWF  x5E
5CB4:  MOVWF  x5F
5CB6:  CLRF   x68
5CB8:  CLRF   x69
5CBA:  MOVWF  x7D
5CBC:  MOVLW  02
5CBE:  MOVWF  x7F
....................       ADC_Pt100=101.1; 
5CC0:  MOVLW  33
5CC2:  MOVWF  x91
5CC4:  MOVWF  x90
5CC6:  MOVLW  4A
5CC8:  MOVWF  x8F
5CCA:  MOVLW  85
5CCC:  MOVWF  x8E
....................       Presostato=0; 
5CCE:  CLRF   x62
....................       Lectura=0; 
5CD0:  BCF    x6A.6
....................       //displayTiempo(NivelTanque,40,30,2,1);  
....................       //displayTiempo(Presostato,40,40,2,1);  
....................       //displayTiempo(ADCTemperatura[2],20,30,2,1);  
....................       //displayT(Prom,20,30,2); 
....................       displayTiempo(Presostato,31,40,2,1); 
5CD2:  MOVFF  462,529
5CD6:  MOVLW  1F
5CD8:  MOVLB  5
5CDA:  MOVWF  x2A
5CDC:  MOVLW  28
5CDE:  MOVWF  x2B
5CE0:  MOVLW  02
5CE2:  MOVWF  x2C
5CE4:  MOVLW  01
5CE6:  MOVWF  x2D
5CE8:  MOVLB  0
5CEA:  CALL   1E32
....................       glcd_rect(51, 40, 62, 48, YES, OFF);glcd_text57(52, 40, kpa, 1, ON); 
5CEE:  MOVLW  33
5CF0:  MOVLB  5
5CF2:  MOVWF  x3A
5CF4:  MOVLW  28
5CF6:  MOVWF  x3B
5CF8:  MOVLW  3E
5CFA:  MOVWF  x3C
5CFC:  MOVLW  30
5CFE:  MOVWF  x3D
5D00:  MOVLW  01
5D02:  MOVWF  x3E
5D04:  CLRF   x3F
5D06:  MOVLB  0
5D08:  CALL   1162
5D0C:  MOVLW  34
5D0E:  MOVLB  5
5D10:  MOVWF  x39
5D12:  MOVLW  28
5D14:  MOVWF  x3A
5D16:  MOVLW  04
5D18:  MOVWF  x3C
5D1A:  MOVLW  0A
5D1C:  MOVWF  x3B
5D1E:  MOVLW  01
5D20:  MOVWF  x3D
5D22:  MOVWF  x3E
5D24:  MOVLB  0
5D26:  CALL   0E6C
....................       displayT(ADC_Pt100,69,20,2); 
5D2A:  MOVFF  491,52B
5D2E:  MOVFF  490,52A
5D32:  MOVFF  48F,529
5D36:  MOVFF  48E,528
5D3A:  MOVLW  45
5D3C:  MOVLB  5
5D3E:  MOVWF  x2C
5D40:  MOVLW  14
5D42:  MOVWF  x2D
5D44:  MOVLW  02
5D46:  MOVWF  x2E
5D48:  MOVLB  0
5D4A:  GOTO   2456
....................       glcd_circle(95,40,2,NO,ON); 
5D4E:  MOVLW  5F
5D50:  MOVLB  5
5D52:  MOVWF  x28
5D54:  MOVLW  28
5D56:  MOVWF  x29
5D58:  MOVLW  02
5D5A:  MOVWF  x2A
5D5C:  CLRF   x2B
5D5E:  MOVLW  01
5D60:  MOVWF  x2C
5D62:  MOVLB  0
5D64:  CALL   1B82
....................       strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
5D68:  MOVLW  05
5D6A:  MOVWF  FEA
5D6C:  MOVLW  08
5D6E:  MOVWF  FE9
5D70:  MOVFF  FF2,528
5D74:  BCF    FF2.7
5D76:  MOVLW  00
5D78:  CALL   0856
5D7C:  TBLRD*-
5D7E:  TBLRD*+
5D80:  MOVF   FF5,W
5D82:  MOVWF  FEE
5D84:  IORLW  00
5D86:  BNZ   5D7E
5D88:  MOVLB  5
5D8A:  BTFSC  x28.7
5D8C:  BSF    FF2.7
5D8E:  MOVLW  05
5D90:  MOVWF  x29
5D92:  MOVLW  08
5D94:  MOVWF  x28
5D96:  MOVLW  66
5D98:  MOVWF  x2A
5D9A:  MOVLW  28
5D9C:  MOVWF  x2B
5D9E:  MOVLW  02
5DA0:  MOVWF  x2C
5DA2:  MOVWF  x2D
5DA4:  MOVLB  0
5DA6:  CALL   1224
....................       //displayT(Pt,1,20,3); 
....................       displayTiempo(Setpoint,5,20,2,1); 
5DAA:  MOVFF  47C,529
5DAE:  MOVLW  05
5DB0:  MOVLB  5
5DB2:  MOVWF  x2A
5DB4:  MOVLW  14
5DB6:  MOVWF  x2B
5DB8:  MOVLW  02
5DBA:  MOVWF  x2C
5DBC:  MOVLW  01
5DBE:  MOVWF  x2D
5DC0:  MOVLB  0
5DC2:  CALL   1E32
....................          
....................       if(Visua==1)// Si se activo la visualización desde software 
5DC6:  MOVLB  4
5DC8:  BTFSS  x6B.1
5DCA:  BRA    5ED6
....................       { 
....................          displayTiempo((int8)desvio,5,30,4,1); 
5DCC:  MOVFF  503,52B
5DD0:  MOVFF  502,52A
5DD4:  MOVFF  501,529
5DD8:  MOVFF  500,528
5DDC:  MOVLB  0
5DDE:  CALL   24D0
5DE2:  MOVFF  01,528
5DE6:  MOVFF  01,529
5DEA:  MOVLW  05
5DEC:  MOVLB  5
5DEE:  MOVWF  x2A
5DF0:  MOVLW  1E
5DF2:  MOVWF  x2B
5DF4:  MOVLW  04
5DF6:  MOVWF  x2C
5DF8:  MOVLW  01
5DFA:  MOVWF  x2D
5DFC:  MOVLB  0
5DFE:  CALL   1E32
....................          displayTiempo((int8)Tpulso,5,40,4,1); 
5E02:  MOVFF  4E7,52B
5E06:  MOVFF  4E6,52A
5E0A:  MOVFF  4E5,529
5E0E:  MOVFF  4E4,528
5E12:  CALL   24D0
5E16:  MOVFF  01,528
5E1A:  MOVFF  01,529
5E1E:  MOVLW  05
5E20:  MOVLB  5
5E22:  MOVWF  x2A
5E24:  MOVLW  28
5E26:  MOVWF  x2B
5E28:  MOVLW  04
5E2A:  MOVWF  x2C
5E2C:  MOVLW  01
5E2E:  MOVWF  x2D
5E30:  MOVLB  0
5E32:  CALL   1E32
....................          displayTiempo((int8)Ganancia,30,40,4,1); 
5E36:  MOVFF  4FB,52B
5E3A:  MOVFF  4FA,52A
5E3E:  MOVFF  4F9,529
5E42:  MOVFF  4F8,528
5E46:  CALL   24D0
5E4A:  MOVFF  01,528
5E4E:  MOVFF  01,529
5E52:  MOVLW  1E
5E54:  MOVLB  5
5E56:  MOVWF  x2A
5E58:  MOVLW  28
5E5A:  MOVWF  x2B
5E5C:  MOVLW  04
5E5E:  MOVWF  x2C
5E60:  MOVLW  01
5E62:  MOVWF  x2D
5E64:  MOVLB  0
5E66:  CALL   1E32
....................          displayTiempo((int8)Ajuste,30,30,4,1); 
5E6A:  MOVFF  465,529
5E6E:  MOVLW  1E
5E70:  MOVLB  5
5E72:  MOVWF  x2A
5E74:  MOVWF  x2B
5E76:  MOVLW  04
5E78:  MOVWF  x2C
5E7A:  MOVLW  01
5E7C:  MOVWF  x2D
5E7E:  MOVLB  0
5E80:  CALL   1E32
....................          displayTiempo((int8)Ajusten,30,20,4,1); 
5E84:  MOVFF  466,529
5E88:  MOVLW  1E
5E8A:  MOVLB  5
5E8C:  MOVWF  x2A
5E8E:  MOVLW  14
5E90:  MOVWF  x2B
5E92:  MOVLW  04
5E94:  MOVWF  x2C
5E96:  MOVLW  01
5E98:  MOVWF  x2D
5E9A:  MOVLB  0
5E9C:  CALL   1E32
....................          displayTiempo((int8)Ganancia2,50,40,4,1); 
5EA0:  MOVFF  4FF,52B
5EA4:  MOVFF  4FE,52A
5EA8:  MOVFF  4FD,529
5EAC:  MOVFF  4FC,528
5EB0:  CALL   24D0
5EB4:  MOVFF  01,528
5EB8:  MOVFF  01,529
5EBC:  MOVLW  32
5EBE:  MOVLB  5
5EC0:  MOVWF  x2A
5EC2:  MOVLW  28
5EC4:  MOVWF  x2B
5EC6:  MOVLW  04
5EC8:  MOVWF  x2C
5ECA:  MOVLW  01
5ECC:  MOVWF  x2D
5ECE:  MOVLB  0
5ED0:  CALL   1E32
5ED4:  MOVLB  4
....................       } 
....................          Testerilizacion[3]=2; 
5ED6:  MOVLW  02
5ED8:  MOVWF  x95
....................       // Muestra Valor de esterilizacion actual. 
....................       displayTiempo(Testerilizacion[3],80,0,0,1);displayTiempo(Testerilizacion[2],86,0,0,1); 
5EDA:  MOVFF  495,529
5EDE:  MOVLW  50
5EE0:  MOVLB  5
5EE2:  MOVWF  x2A
5EE4:  CLRF   x2B
5EE6:  CLRF   x2C
5EE8:  MOVLW  01
5EEA:  MOVWF  x2D
5EEC:  MOVLB  0
5EEE:  CALL   1E32
5EF2:  MOVFF  494,529
5EF6:  MOVLW  56
5EF8:  MOVLB  5
5EFA:  MOVWF  x2A
5EFC:  CLRF   x2B
5EFE:  CLRF   x2C
5F00:  MOVLW  01
5F02:  MOVWF  x2D
5F04:  MOVLB  0
5F06:  CALL   1E32
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,0,2,1);  
5F0A:  MOVLW  05
5F0C:  MOVWF  FEA
5F0E:  MOVLW  08
5F10:  MOVWF  FE9
5F12:  MOVFF  FF2,528
5F16:  BCF    FF2.7
5F18:  MOVLW  00
5F1A:  CALL   060E
5F1E:  TBLRD*-
5F20:  TBLRD*+
5F22:  MOVF   FF5,W
5F24:  MOVWF  FEE
5F26:  IORLW  00
5F28:  BNZ   5F20
5F2A:  MOVLB  5
5F2C:  BTFSC  x28.7
5F2E:  BSF    FF2.7
5F30:  MOVLW  05
5F32:  MOVWF  x29
5F34:  MOVLW  08
5F36:  MOVWF  x28
5F38:  MOVLW  5C
5F3A:  MOVWF  x2A
5F3C:  CLRF   x2B
5F3E:  MOVLW  02
5F40:  MOVWF  x2C
5F42:  MOVLW  01
5F44:  MOVWF  x2D
5F46:  MOVLB  0
5F48:  CALL   1224
....................       displayTiempo(Testerilizacion[1],98,0,0,1);displayTiempo(Testerilizacion[0],104,0,0,1); 
5F4C:  MOVFF  493,529
5F50:  MOVLW  62
5F52:  MOVLB  5
5F54:  MOVWF  x2A
5F56:  CLRF   x2B
5F58:  CLRF   x2C
5F5A:  MOVLW  01
5F5C:  MOVWF  x2D
5F5E:  MOVLB  0
5F60:  CALL   1E32
5F64:  MOVFF  492,529
5F68:  MOVLW  68
5F6A:  MOVLB  5
5F6C:  MOVWF  x2A
5F6E:  CLRF   x2B
5F70:  CLRF   x2C
5F72:  MOVLW  01
5F74:  MOVWF  x2D
5F76:  MOVLB  0
5F78:  CALL   1E32
....................       // Muestra tiempo de secado actual. 
....................       displayTiempo(Tsecado[3],80,8,0,1);displayTiempo(Tsecado[2],86,8,0,1); 
5F7C:  MOVFF  49D,529
5F80:  MOVLW  50
5F82:  MOVLB  5
5F84:  MOVWF  x2A
5F86:  MOVLW  08
5F88:  MOVWF  x2B
5F8A:  CLRF   x2C
5F8C:  MOVLW  01
5F8E:  MOVWF  x2D
5F90:  MOVLB  0
5F92:  CALL   1E32
5F96:  MOVFF  49C,529
5F9A:  MOVLW  56
5F9C:  MOVLB  5
5F9E:  MOVWF  x2A
5FA0:  MOVLW  08
5FA2:  MOVWF  x2B
5FA4:  CLRF   x2C
5FA6:  MOVLW  01
5FA8:  MOVWF  x2D
5FAA:  MOVLB  0
5FAC:  CALL   1E32
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,8,2,1);  
5FB0:  MOVLW  05
5FB2:  MOVWF  FEA
5FB4:  MOVLW  08
5FB6:  MOVWF  FE9
5FB8:  MOVFF  FF2,528
5FBC:  BCF    FF2.7
5FBE:  MOVLW  00
5FC0:  CALL   060E
5FC4:  TBLRD*-
5FC6:  TBLRD*+
5FC8:  MOVF   FF5,W
5FCA:  MOVWF  FEE
5FCC:  IORLW  00
5FCE:  BNZ   5FC6
5FD0:  MOVLB  5
5FD2:  BTFSC  x28.7
5FD4:  BSF    FF2.7
5FD6:  MOVLW  05
5FD8:  MOVWF  x29
5FDA:  MOVLW  08
5FDC:  MOVWF  x28
5FDE:  MOVLW  5C
5FE0:  MOVWF  x2A
5FE2:  MOVLW  08
5FE4:  MOVWF  x2B
5FE6:  MOVLW  02
5FE8:  MOVWF  x2C
5FEA:  MOVLW  01
5FEC:  MOVWF  x2D
5FEE:  MOVLB  0
5FF0:  CALL   1224
....................       displayTiempo(Tsecado[1],98,8,0,1);displayTiempo(Tsecado[0],104,8,0,1); 
5FF4:  MOVFF  49B,529
5FF8:  MOVLW  62
5FFA:  MOVLB  5
5FFC:  MOVWF  x2A
5FFE:  MOVLW  08
6000:  MOVWF  x2B
6002:  CLRF   x2C
6004:  MOVLW  01
6006:  MOVWF  x2D
6008:  MOVLB  0
600A:  CALL   1E32
600E:  MOVFF  49A,529
6012:  MOVLW  68
6014:  MOVLB  5
6016:  MOVWF  x2A
6018:  MOVLW  08
601A:  MOVWF  x2B
601C:  CLRF   x2C
601E:  MOVLW  01
6020:  MOVWF  x2D
6022:  MOVLB  0
6024:  CALL   1E32
....................     
....................           
....................    if(ADC_Pt100>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
6028:  MOVLB  5
602A:  CLRF   x29
602C:  MOVFF  47C,528
6030:  MOVLB  0
6032:  CALL   158E
6036:  MOVFF  00,528
603A:  MOVFF  01,529
603E:  MOVFF  02,52A
6042:  MOVFF  03,52B
6046:  BSF    FD8.1
6048:  MOVFF  03,52F
604C:  MOVFF  02,52E
6050:  MOVFF  01,52D
6054:  MOVFF  00,52C
6058:  MOVLB  5
605A:  CLRF   x33
605C:  CLRF   x32
605E:  CLRF   x31
6060:  MOVLW  7F
6062:  MOVWF  x30
6064:  MOVLB  0
6066:  CALL   1724
606A:  MOVFF  03,52B
606E:  MOVFF  02,52A
6072:  MOVFF  01,529
6076:  MOVFF  00,528
607A:  MOVFF  491,52F
607E:  MOVFF  490,52E
6082:  MOVFF  48F,52D
6086:  MOVFF  48E,52C
608A:  GOTO   250C
608E:  BC    6092
6090:  BNZ   60F8
....................    { 
....................       if(est==0) 
6092:  MOVLB  4
6094:  BTFSC  x6B.0
6096:  BRA    60FA
....................       { 
....................          tiempo_esterilizacion=1; 
6098:  MOVLW  01
609A:  MOVWF  x7F
....................          Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1; 
609C:  MOVLB  5
609E:  CLRF   x28
60A0:  MOVLW  5A
60A2:  MOVWF  x29
60A4:  MOVLW  38
60A6:  MOVWF  x2A
60A8:  MOVLB  0
60AA:  CALL   20C2
60AE:  MOVLW  0F
60B0:  MOVLB  5
60B2:  MOVWF  x3A
60B4:  MOVLW  12
60B6:  MOVWF  x3B
60B8:  MOVLW  1E
60BA:  MOVWF  x3C
60BC:  MOVLW  35
60BE:  MOVWF  x3D
60C0:  CLRF   x3E
60C2:  CLRF   x3F
60C4:  MOVLB  0
60C6:  CALL   1162
60CA:  MOVLW  19
60CC:  MOVLB  5
60CE:  MOVWF  x3A
60D0:  MOVLW  12
60D2:  MOVWF  x3B
60D4:  MOVLW  3C
60D6:  MOVWF  x3C
60D8:  MOVLW  1A
60DA:  MOVWF  x3D
60DC:  CLRF   x3E
60DE:  MOVLW  01
60E0:  MOVWF  x3F
60E2:  MOVLB  0
60E4:  CALL   1162
60E8:  MOVLB  4
60EA:  BSF    x6B.0
....................          glcd_imagen(5); 
60EC:  MOVLW  05
60EE:  MOVLB  5
60F0:  MOVWF  x28
60F2:  MOVLB  0
60F4:  CALL   1A86
60F8:  MOVLB  4
....................       } 
....................    }   
....................     
....................    if(Exhaust==1 && tiempo_esterilizacion==2)// Si realiza desfogue rapido 
60FA:  DECFSZ x81,W
60FC:  BRA    611C
60FE:  MOVF   x7F,W
6100:  SUBLW  02
6102:  BNZ   611C
....................    { 
....................       // Debe enviar a Hardware_Controller que abra EV de desfogue 
....................       Control=0; 
6104:  CLRF   x75
....................       if(Presostato<2) 
6106:  MOVF   x62,W
6108:  SUBLW  01
610A:  BNC   6118
....................       { 
....................          tiempo_secado=1; 
610C:  MOVLW  01
610E:  MOVWF  x80
....................          Control=0;EVDesfogue=3; 
6110:  CLRF   x75
6112:  MOVLW  03
6114:  MOVWF  x6E
....................       } 
....................       else 
6116:  BRA    611C
....................       { 
....................          EVDesfogue=1; 
6118:  MOVLW  01
611A:  MOVWF  x6E
....................       } 
....................    } 
....................     
....................    if(Exhaust==2 && tiempo_esterilizacion==2 )// Si Debe realizar Rampa 
611C:  MOVF   x81,W
611E:  SUBLW  02
6120:  BNZ   6144
6122:  MOVF   x7F,W
6124:  SUBLW  02
6126:  BNZ   6144
....................    {      
....................       // Debe enviar a Hardware_Controller que abra Ejecute modo rampa. 
....................       EVDesfogue=2; 
6128:  MOVLW  02
612A:  MOVWF  x6E
....................       Control=0; 
612C:  CLRF   x75
....................       if(Presostato<2) 
612E:  MOVF   x62,W
6130:  SUBLW  01
6132:  BNC   6144
....................       { 
....................          tiempo_esterilizacion=3; 
6134:  MOVLW  03
6136:  MOVWF  x7F
....................          tiempo_secado=2; 
6138:  MOVLW  02
613A:  MOVWF  x80
....................          fin_ciclo=1; 
613C:  MOVLW  01
613E:  MOVWF  x7D
....................          EVDesfogue=3; 
6140:  MOVLW  03
6142:  MOVWF  x6E
....................       } 
....................    } 
....................     
....................    // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3]) && tiempo_esterilizacion==1) 
6144:  MOVF   x96,W
6146:  SUBWF  x92,W
6148:  BNZ   6164
614A:  MOVF   x97,W
614C:  SUBWF  x93,W
614E:  BNZ   6164
6150:  MOVF   x98,W
6152:  SUBWF  x94,W
6154:  BNZ   6164
6156:  MOVF   x99,W
6158:  SUBWF  x95,W
615A:  BNZ   6164
615C:  DECFSZ x7F,W
615E:  BRA    6164
....................    { 
....................       tiempo_esterilizacion=2; 
6160:  MOVLW  02
6162:  MOVWF  x7F
....................    }  
....................     
....................    // Si cumplio el tiempo de secado. 
....................    if((Tsecado[0]>=Tsecadop[0])&&(Tsecado[1]>=Tsecadop[1])&&(Tsecado[2]>=Tsecadop[2])&&(Tsecado[3]>=Tsecadop[3]) && tiempo_secado==1) 
6164:  MOVF   x9E,W
6166:  XORLW  80
6168:  MOVWF  00
616A:  MOVF   x9A,W
616C:  XORLW  80
616E:  SUBWF  00,W
6170:  BZ    6174
6172:  BC    61B4
6174:  MOVF   x9F,W
6176:  XORLW  80
6178:  MOVWF  00
617A:  MOVF   x9B,W
617C:  XORLW  80
617E:  SUBWF  00,W
6180:  BZ    6184
6182:  BC    61B4
6184:  MOVF   xA0,W
6186:  XORLW  80
6188:  MOVWF  00
618A:  MOVF   x9C,W
618C:  XORLW  80
618E:  SUBWF  00,W
6190:  BZ    6194
6192:  BC    61B4
6194:  MOVF   xA1,W
6196:  XORLW  80
6198:  MOVWF  00
619A:  MOVF   x9D,W
619C:  XORLW  80
619E:  SUBWF  00,W
61A0:  BZ    61A4
61A2:  BC    61B4
61A4:  DECFSZ x80,W
61A6:  BRA    61B4
....................    { 
....................       tiempo_esterilizacion=3; 
61A8:  MOVLW  03
61AA:  MOVWF  x7F
....................       tiempo_secado=2; 
61AC:  MOVLW  02
61AE:  MOVWF  x80
....................       fin_ciclo=1; 
61B0:  MOVLW  01
61B2:  MOVWF  x7D
....................    } 
....................     
....................    if(fin_ciclo==1) 
61B4:  DECFSZ x7D,W
61B6:  BRA    625C
....................    { 
....................       // Debe enviar a Hardware_Controller que apague Resistencia y que cierre EV de desfogue 
....................       Control=0;EVDesfogue=3; 
61B8:  CLRF   x75
61BA:  MOVLW  03
61BC:  MOVWF  x6E
....................       if(disp_Fin==0) 
61BE:  BTFSC  x6C.3
61C0:  BRA    6232
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
61C2:  MOVLB  5
61C4:  CLRF   x3A
61C6:  MOVLW  37
61C8:  MOVWF  x3B
61CA:  MOVLW  7F
61CC:  MOVWF  x3C
61CE:  MOVLW  3F
61D0:  MOVWF  x3D
61D2:  MOVLW  01
61D4:  MOVWF  x3E
61D6:  CLRF   x3F
61D8:  MOVLB  0
61DA:  CALL   1162
....................          strcpy(Menus.Letra,"Ciclo Finalizado");displayMenu(Menus.Letra,0,55,2,1); 
61DE:  MOVLW  05
61E0:  MOVWF  FEA
61E2:  MOVLW  08
61E4:  MOVWF  FE9
61E6:  MOVFF  FF2,528
61EA:  BCF    FF2.7
61EC:  MOVLW  00
61EE:  CALL   0B58
61F2:  TBLRD*-
61F4:  TBLRD*+
61F6:  MOVF   FF5,W
61F8:  MOVWF  FEE
61FA:  IORLW  00
61FC:  BNZ   61F4
61FE:  MOVLB  5
6200:  BTFSC  x28.7
6202:  BSF    FF2.7
6204:  MOVLW  05
6206:  MOVWF  x29
6208:  MOVLW  08
620A:  MOVWF  x28
620C:  CLRF   x2A
620E:  MOVLW  37
6210:  MOVWF  x2B
6212:  MOVLW  02
6214:  MOVWF  x2C
6216:  MOVLW  01
6218:  MOVWF  x2D
621A:  MOVLB  0
621C:  CALL   1224
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=1; 
6220:  MOVLB  4
6222:  BCF    x6B.4
6224:  BCF    x6B.5
6226:  BSF    x6B.6
6228:  BCF    x6B.7
622A:  BSF    x6C.0
622C:  BCF    x6C.1
622E:  BCF    x6C.2
6230:  BSF    x6C.3
....................       }    
....................        
....................       if(RIGHT) 
6232:  BSF    F96.1
6234:  BTFSS  F84.1
6236:  BRA    625C
....................       { 
....................          Control=3; 
6238:  MOVLW  03
623A:  MOVWF  x75
....................          EnviarCodigo(); 
623C:  MOVLB  0
623E:  CALL   152A
....................          delay_ms(1000); 
6242:  MOVLW  04
6244:  MOVLB  5
6246:  MOVWF  x28
6248:  MOVLW  FA
624A:  MOVWF  x29
624C:  MOVLB  0
624E:  CALL   131E
6252:  MOVLB  5
6254:  DECFSZ x28,F
6256:  BRA    6248
....................          reset_cpu(); 
6258:  RESET
625A:  MOVLB  4
....................       } 
....................    } 
....................    EVAgua=10; 
625C:  MOVLW  0A
625E:  MOVWF  x6F
....................    //EnviarCodigo(); 
....................   } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  while(Menu==100) 
....................  { 
6260:  MOVF   x77,W
6262:  SUBLW  64
6264:  BTFSS  FD8.2
6266:  BRA    6364
....................     
....................    displayTiempo(datoRx[0],0,10,2,1); 
6268:  MOVFF  4C2,529
626C:  MOVLB  5
626E:  CLRF   x2A
6270:  MOVLW  0A
6272:  MOVWF  x2B
6274:  MOVLW  02
6276:  MOVWF  x2C
6278:  MOVLW  01
627A:  MOVWF  x2D
627C:  MOVLB  0
627E:  CALL   1E32
....................    displayTiempo(datoRx[1],0,20,2,1); 
6282:  MOVFF  4C3,529
6286:  MOVLB  5
6288:  CLRF   x2A
628A:  MOVLW  14
628C:  MOVWF  x2B
628E:  MOVLW  02
6290:  MOVWF  x2C
6292:  MOVLW  01
6294:  MOVWF  x2D
6296:  MOVLB  0
6298:  CALL   1E32
....................    displayTiempo(datoRx[2],0,30,2,1); 
629C:  MOVFF  4C4,529
62A0:  MOVLB  5
62A2:  CLRF   x2A
62A4:  MOVLW  1E
62A6:  MOVWF  x2B
62A8:  MOVLW  02
62AA:  MOVWF  x2C
62AC:  MOVLW  01
62AE:  MOVWF  x2D
62B0:  MOVLB  0
62B2:  CALL   1E32
....................    displayTiempo(datoRx[3],0,40,2,1); 
62B6:  MOVFF  4C5,529
62BA:  MOVLB  5
62BC:  CLRF   x2A
62BE:  MOVLW  28
62C0:  MOVWF  x2B
62C2:  MOVLW  02
62C4:  MOVWF  x2C
62C6:  MOVLW  01
62C8:  MOVWF  x2D
62CA:  MOVLB  0
62CC:  CALL   1E32
....................    displayTiempo(Opcion,0,50,2,1); 
62D0:  MOVFF  47E,529
62D4:  MOVLB  5
62D6:  CLRF   x2A
62D8:  MOVLW  32
62DA:  MOVWF  x2B
62DC:  MOVLW  02
62DE:  MOVWF  x2C
62E0:  MOVLW  01
62E2:  MOVWF  x2D
62E4:  MOVLB  0
62E6:  CALL   1E32
....................     
....................    Opcion++; 
62EA:  MOVLB  4
62EC:  INCF   x7E,F
....................    Determina(); 
62EE:  MOVLB  0
62F0:  CALL   199C
....................    displayTiempo(Puerta,50,10,2,1); 
62F4:  MOVFF  45E,529
62F8:  MOVLW  32
62FA:  MOVLB  5
62FC:  MOVWF  x2A
62FE:  MOVLW  0A
6300:  MOVWF  x2B
6302:  MOVLW  02
6304:  MOVWF  x2C
6306:  MOVLW  01
6308:  MOVWF  x2D
630A:  MOVLB  0
630C:  CALL   1E32
....................    displayTiempo(Parada,50,20,2,1); 
6310:  MOVFF  45F,529
6314:  MOVLW  32
6316:  MOVLB  5
6318:  MOVWF  x2A
631A:  MOVLW  14
631C:  MOVWF  x2B
631E:  MOVLW  02
6320:  MOVWF  x2C
6322:  MOVLW  01
6324:  MOVWF  x2D
6326:  MOVLB  0
6328:  CALL   1E32
....................    displayTiempo(ADC_Pt100,50,30,2,1);      
632C:  MOVFF  491,52B
6330:  MOVFF  490,52A
6334:  MOVFF  48F,529
6338:  MOVFF  48E,528
633C:  CALL   24D0
6340:  MOVFF  01,528
6344:  MOVFF  01,529
6348:  MOVLW  32
634A:  MOVLB  5
634C:  MOVWF  x2A
634E:  MOVLW  1E
6350:  MOVWF  x2B
6352:  MOVLW  02
6354:  MOVWF  x2C
6356:  MOVLW  01
6358:  MOVWF  x2D
635A:  MOVLB  0
635C:  CALL   1E32
....................     
....................  } 
6360:  MOVLB  4
6362:  BRA    6260
....................   
....................        
....................       while(Parada==0) 
....................       { 
6364:  MOVF   x5F,F
6366:  BNZ   642C
....................          delay_ms(100); 
6368:  MOVLW  64
636A:  MOVLB  5
636C:  MOVWF  x29
636E:  MOVLB  0
6370:  CALL   131E
....................          if(disp_Stop==0) 
6374:  MOVLB  4
6376:  BTFSC  x6C.1
6378:  BRA    6418
....................          { 
....................             glcd_fillScreen(OFF);  
637A:  MOVLB  5
637C:  CLRF   x29
637E:  MOVLB  0
6380:  CALL   0BF4
....................             strcpy(Menus.Letra,"  !Parada!");displayMenu(Menus.Letra,0,10,0,2); 
6384:  MOVLW  05
6386:  MOVWF  FEA
6388:  MOVLW  08
638A:  MOVWF  FE9
638C:  MOVFF  FF2,528
6390:  BCF    FF2.7
6392:  MOVLW  00
6394:  CALL   0B7A
6398:  TBLRD*-
639A:  TBLRD*+
639C:  MOVF   FF5,W
639E:  MOVWF  FEE
63A0:  IORLW  00
63A2:  BNZ   639A
63A4:  MOVLB  5
63A6:  BTFSC  x28.7
63A8:  BSF    FF2.7
63AA:  MOVLW  05
63AC:  MOVWF  x29
63AE:  MOVLW  08
63B0:  MOVWF  x28
63B2:  CLRF   x2A
63B4:  MOVLW  0A
63B6:  MOVWF  x2B
63B8:  CLRF   x2C
63BA:  MOVLW  02
63BC:  MOVWF  x2D
63BE:  MOVLB  0
63C0:  CALL   1224
....................             strcpy(Menus.Letra," !Activada!");displayMenu(Menus.Letra,0,30,0,2);emergency=1; 
63C4:  MOVLW  05
63C6:  MOVWF  FEA
63C8:  MOVLW  08
63CA:  MOVWF  FE9
63CC:  MOVFF  FF2,528
63D0:  BCF    FF2.7
63D2:  MOVLW  00
63D4:  CALL   0B96
63D8:  TBLRD*-
63DA:  TBLRD*+
63DC:  MOVF   FF5,W
63DE:  MOVWF  FEE
63E0:  IORLW  00
63E2:  BNZ   63DA
63E4:  MOVLB  5
63E6:  BTFSC  x28.7
63E8:  BSF    FF2.7
63EA:  MOVLW  05
63EC:  MOVWF  x29
63EE:  MOVLW  08
63F0:  MOVWF  x28
63F2:  CLRF   x2A
63F4:  MOVLW  1E
63F6:  MOVWF  x2B
63F8:  CLRF   x2C
63FA:  MOVLW  02
63FC:  MOVWF  x2D
63FE:  MOVLB  0
6400:  CALL   1224
6404:  MOVLB  4
6406:  BSF    x6A.3
....................             disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=1;disp_Door=0;disp_Fin=0; 
6408:  BCF    x6B.4
640A:  BCF    x6B.5
640C:  BCF    x6B.6
640E:  BCF    x6B.7
6410:  BCF    x6C.0
6412:  BSF    x6C.1
6414:  BCF    x6C.2
6416:  BCF    x6C.3
....................          } 
....................          if(CadenaRecibida==1) 
6418:  BTFSS  x6B.3
641A:  BRA    642A
....................          { 
....................             Determina(); 
641C:  MOVLB  0
641E:  CALL   199C
....................             EnviarCodigo(); 
6422:  CALL   152A
....................             CadenaRecibida=0; 
6426:  MOVLB  4
6428:  BCF    x6B.3
....................          } 
....................       }    
642A:  BRA    6364
....................       if(Parada==1) 
642C:  DECFSZ x5F,W
642E:  BRA    644C
....................       { 
....................          if(emergency==1) 
6430:  BTFSS  x6A.3
6432:  BRA    644C
....................          {glcd_fillScreen(OFF);emergency=0;visual=1;disp_Stop=0;Menu=1;reset_cpu();} 
6434:  MOVLB  5
6436:  CLRF   x29
6438:  MOVLB  0
643A:  CALL   0BF4
643E:  MOVLB  4
6440:  BCF    x6A.3
6442:  BSF    x6A.4
6444:  BCF    x6C.1
6446:  MOVLW  01
6448:  MOVWF  x77
644A:  RESET
....................       } 
....................    } 
644C:  GOTO   2930
.................... } 
6450:  SLEEP 

Configuration Fuses:
   Word  1: C03F   XT IESO FCMEN PLL12 CPUDIV4 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
