CCS PCH C Compiler, Version 4.104, 5967               23-feb.-16 10:02

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Con Precamara\Autoclave 160L\Autoclave SENA\Firmware V2_Sin Probar\GLCD_Controller\GLCD_Controller.lst

               ROM used: 27526 bytes (84%)
                         Largest free fragment is 5238
               RAM used: 1342 (66%) at main() level
                         1398 (68%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  GOTO   2B1A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0FFC
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   0F10
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=4000000) 
*
10C4:  MOVLW  05
10C6:  MOVWF  FEA
10C8:  MOVLW  3F
10CA:  MOVWF  FE9
10CC:  MOVF   FEF,W
10CE:  BZ    10EC
10D0:  MOVLW  01
10D2:  MOVWF  01
10D4:  CLRF   00
10D6:  DECFSZ 00,F
10D8:  BRA    10D6
10DA:  DECFSZ 01,F
10DC:  BRA    10D4
10DE:  MOVLW  4A
10E0:  MOVWF  00
10E2:  DECFSZ 00,F
10E4:  BRA    10E2
10E6:  BRA    10E8
10E8:  DECFSZ FEF,F
10EA:  BRA    10D0
10EC:  RETLW  00
.................... #use RS232(BAUD=9600, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7) 
*
1AC8:  BTFSS  F9E.4
1ACA:  BRA    1AC8
1ACC:  MOVWF  FAD
1ACE:  GOTO   1B3C (RETURN)
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
*
0E98:  MOVLB  5
0E9A:  MOVFF  571,FE9
0E9E:  MOVFF  572,FEA
0EA2:  MOVFF  FEF,575
0EA6:  MOVFF  574,03
0EAA:  MOVFF  573,FE9
0EAE:  MOVFF  574,FEA
0EB2:  MOVF   FEF,W
0EB4:  SUBWF  x75,W
0EB6:  BNZ   0EE2
....................       if (*s1 == '\0') 
0EB8:  MOVFF  572,03
0EBC:  MOVFF  571,FE9
0EC0:  MOVFF  03,FEA
0EC4:  MOVF   FEF,F
0EC6:  BNZ   0ECE
....................          return(0); 
0EC8:  MOVLW  00
0ECA:  MOVWF  01
0ECC:  BRA    0F0C
0ECE:  MOVFF  572,03
0ED2:  MOVF   x71,W
0ED4:  INCF   x71,F
0ED6:  BTFSC  FD8.2
0ED8:  INCF   x72,F
0EDA:  INCF   x73,F
0EDC:  BTFSC  FD8.2
0EDE:  INCF   x74,F
0EE0:  BRA    0E9A
....................    return((*s1 < *s2) ? -1: 1); 
0EE2:  MOVFF  572,03
0EE6:  MOVFF  571,FE9
0EEA:  MOVFF  572,FEA
0EEE:  MOVFF  FEF,575
0EF2:  MOVFF  574,03
0EF6:  MOVFF  573,FE9
0EFA:  MOVFF  574,FEA
0EFE:  MOVF   FEF,W
0F00:  SUBWF  x75,W
0F02:  BC    0F08
0F04:  MOVLW  FF
0F06:  BRA    0F0A
0F08:  MOVLW  01
0F0A:  MOVWF  01
.................... } 
0F0C:  MOVLB  0
0F0E:  RETLW  00
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D4   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D3   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_D2   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
12CE:  BCF    F95.2
12D0:  BSF    F8C.2
....................    output_low(GLCD_E); 
12D2:  BCF    F95.7
12D4:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
12D6:  BCF    F95.4
12D8:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
12DA:  BCF    F95.3
12DC:  BCF    F8C.3
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
12DE:  BCF    F95.5
12E0:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
12E2:  MOVLB  5
12E4:  CLRF   x50
12E6:  MOVLW  C0
12E8:  MOVWF  x51
12EA:  MOVLB  0
12EC:  RCALL  117A
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
12EE:  MOVLW  01
12F0:  MOVLB  5
12F2:  MOVWF  x50
12F4:  MOVLW  C0
12F6:  MOVWF  x51
12F8:  MOVLB  0
12FA:  RCALL  117A
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
12FC:  MOVLB  5
12FE:  CLRF   x50
1300:  MOVLW  40
1302:  MOVWF  x51
1304:  MOVLB  0
1306:  RCALL  117A
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
1308:  MOVLW  01
130A:  MOVLB  5
130C:  MOVWF  x50
130E:  MOVLW  40
1310:  MOVWF  x51
1312:  MOVLB  0
1314:  RCALL  117A
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
1316:  MOVLB  5
1318:  CLRF   x50
131A:  MOVLW  B8
131C:  MOVWF  x51
131E:  MOVLB  0
1320:  RCALL  117A
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
1322:  MOVLW  01
1324:  MOVLB  5
1326:  MOVWF  x50
1328:  MOVLW  B8
132A:  MOVWF  x51
132C:  MOVLB  0
132E:  RCALL  117A
....................  
....................    if(mode == ON) 
1330:  MOVLB  5
1332:  DECFSZ x3A,W
1334:  BRA    1352
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
1336:  CLRF   x50
1338:  MOVLW  3F
133A:  MOVWF  x51
133C:  MOVLB  0
133E:  RCALL  117A
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
1340:  MOVLW  01
1342:  MOVLB  5
1344:  MOVWF  x50
1346:  MOVLW  3F
1348:  MOVWF  x51
134A:  MOVLB  0
134C:  RCALL  117A
....................    } 
....................    else 
134E:  BRA    136A
1350:  MOVLB  5
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
1352:  CLRF   x50
1354:  MOVLW  3E
1356:  MOVWF  x51
1358:  MOVLB  0
135A:  RCALL  117A
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
135C:  MOVLW  01
135E:  MOVLB  5
1360:  MOVWF  x50
1362:  MOVLW  3E
1364:  MOVWF  x51
1366:  MOVLB  0
1368:  RCALL  117A
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
136A:  MOVLB  5
136C:  CLRF   x3B
136E:  MOVLB  0
1370:  RCALL  11BC
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
1372:  RCALL  1216
....................    #endif 
.................... } 
1374:  GOTO   2EFA (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
1216:  MOVLB  5
1218:  CLRF   x4C
121A:  MOVLW  1C
121C:  MOVWF  x4B
....................    p2 = displayData.right; 
121E:  MOVLW  02
1220:  MOVWF  x4E
1222:  MOVLW  1C
1224:  MOVWF  x4D
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
1226:  CLRF   x49
1228:  MOVF   x49,W
122A:  SUBLW  07
122C:  BNC   12CA
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
122E:  BCF    F95.5
1230:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
1232:  CLRF   x50
1234:  MOVLW  40
1236:  MOVWF  x51
1238:  MOVLB  0
123A:  RCALL  117A
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
123C:  MOVLW  01
123E:  MOVLB  5
1240:  MOVWF  x50
1242:  MOVLW  40
1244:  MOVWF  x51
1246:  MOVLB  0
1248:  RCALL  117A
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
124A:  MOVLB  5
124C:  MOVF   x49,W
124E:  IORLW  B8
1250:  MOVWF  x4F
1252:  CLRF   x50
1254:  MOVWF  x51
1256:  MOVLB  0
1258:  RCALL  117A
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
125A:  MOVLB  5
125C:  MOVF   x49,W
125E:  IORLW  B8
1260:  MOVWF  x4F
1262:  MOVLW  01
1264:  MOVWF  x50
1266:  MOVFF  54F,551
126A:  MOVLB  0
126C:  RCALL  117A
....................       output_high(GLCD_DI);                     // Set for data 
126E:  BCF    F95.5
1270:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
1272:  MOVLB  5
1274:  CLRF   x4A
1276:  MOVF   x4A,W
1278:  SUBLW  3F
127A:  BNC   12C6
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
127C:  MOVFF  54C,03
1280:  MOVF   x4B,W
1282:  INCF   x4B,F
1284:  BTFSC  FD8.2
1286:  INCF   x4C,F
1288:  MOVWF  FE9
128A:  MOVFF  03,FEA
128E:  MOVFF  FEF,54F
1292:  CLRF   x50
1294:  MOVFF  54F,551
1298:  MOVLB  0
129A:  RCALL  117A
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
129C:  MOVLB  5
129E:  MOVFF  54E,03
12A2:  MOVF   x4D,W
12A4:  INCF   x4D,F
12A6:  BTFSC  FD8.2
12A8:  INCF   x4E,F
12AA:  MOVWF  FE9
12AC:  MOVFF  03,FEA
12B0:  MOVFF  FEF,54F
12B4:  MOVLW  01
12B6:  MOVWF  x50
12B8:  MOVFF  54F,551
12BC:  MOVLB  0
12BE:  RCALL  117A
....................       } 
12C0:  MOVLB  5
12C2:  INCF   x4A,F
12C4:  BRA    1276
....................    } 
12C6:  INCF   x49,F
12C8:  BRA    1228
.................... } 
12CA:  MOVLB  0
12CC:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
*
1378:  MOVLB  5
137A:  CLRF   x6D
137C:  RRCF   x68,W
137E:  MOVWF  x6C
1380:  RRCF   x6C,F
1382:  RRCF   x6C,F
1384:  MOVLW  1F
1386:  ANDWF  x6C,F
....................    temp *= 64; 
1388:  RLCF   x6C,F
138A:  RLCF   x6D,F
138C:  RLCF   x6C,F
138E:  RLCF   x6D,F
1390:  RLCF   x6C,F
1392:  RLCF   x6D,F
1394:  RLCF   x6C,F
1396:  RLCF   x6D,F
1398:  RLCF   x6C,F
139A:  RLCF   x6D,F
139C:  RLCF   x6C,F
139E:  RLCF   x6D,F
13A0:  MOVLW  C0
13A2:  ANDWF  x6C,F
....................    temp += x; 
13A4:  MOVF   x67,W
13A6:  ADDWF  x6C,F
13A8:  MOVLW  00
13AA:  ADDWFC x6D,F
....................  
....................    if(x > 63) 
13AC:  MOVF   x67,W
13AE:  SUBLW  3F
13B0:  BC    13CC
....................    { 
....................       p = displayData.right + temp - 64; 
13B2:  MOVLW  1C
13B4:  ADDWF  x6C,W
13B6:  MOVWF  x6E
13B8:  MOVLW  02
13BA:  ADDWFC x6D,W
13BC:  MOVWF  x6F
13BE:  MOVLW  40
13C0:  SUBWF  x6E,W
13C2:  MOVWF  x6A
13C4:  MOVLW  00
13C6:  SUBWFB x6F,W
13C8:  MOVWF  x6B
....................    } 
....................    else 
13CA:  BRA    13D8
....................    { 
....................       p = displayData.left + temp; 
13CC:  MOVLW  1C
13CE:  ADDWF  x6C,W
13D0:  MOVWF  x6A
13D2:  MOVLW  00
13D4:  ADDWFC x6D,W
13D6:  MOVWF  x6B
....................    } 
....................  
....................    if(color) 
13D8:  MOVF   x69,F
13DA:  BZ    1406
....................    { 
....................       bit_set(*p, y%8); 
13DC:  MOVFF  56B,03
13E0:  MOVFF  56A,FE9
13E4:  MOVFF  56B,FEA
13E8:  MOVF   x68,W
13EA:  ANDLW  07
13EC:  MOVWF  x6E
13EE:  MOVLW  01
13F0:  MOVWF  00
13F2:  MOVF   x6E,W
13F4:  MOVWF  01
13F6:  BZ    1400
13F8:  BCF    FD8.0
13FA:  RLCF   00,F
13FC:  DECFSZ 01,F
13FE:  BRA    13F8
1400:  MOVF   00,W
1402:  IORWF  FEF,F
....................    } 
....................    else 
1404:  BRA    1430
....................    { 
....................       bit_clear(*p, y%8); 
1406:  MOVFF  56B,03
140A:  MOVFF  56A,FE9
140E:  MOVFF  56B,FEA
1412:  MOVF   x68,W
1414:  ANDLW  07
1416:  MOVWF  x6E
1418:  MOVLW  01
141A:  MOVWF  00
141C:  MOVF   x6E,W
141E:  MOVWF  01
1420:  BZ    142A
1422:  BCF    FD8.0
1424:  RLCF   00,F
1426:  DECFSZ 01,F
1428:  BRA    1422
142A:  MOVF   00,W
142C:  XORLW  FF
142E:  ANDWF  FEF,F
....................    } 
.................... } 
1430:  MOVLB  0
1432:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
11BC:  MOVLB  5
11BE:  CLRF   x3E
11C0:  MOVLW  1C
11C2:  MOVWF  x3D
....................    p2 = displayData.right; 
11C4:  MOVLW  02
11C6:  MOVWF  x40
11C8:  MOVLW  1C
11CA:  MOVWF  x3F
....................    data = 0xFF * color; 
11CC:  MOVF   x3B,W
11CE:  MULLW  FF
11D0:  MOVFF  FF3,53C
....................  
....................    for(i=0; i<512; ++i) 
11D4:  CLRF   x42
11D6:  CLRF   x41
11D8:  MOVF   x42,W
11DA:  SUBLW  01
11DC:  BNC   1212
....................    { 
....................       *p1++ = data; 
11DE:  MOVFF  53E,03
11E2:  MOVF   x3D,W
11E4:  INCF   x3D,F
11E6:  BTFSC  FD8.2
11E8:  INCF   x3E,F
11EA:  MOVWF  FE9
11EC:  MOVFF  03,FEA
11F0:  MOVFF  53C,FEF
....................       *p2++ = data; 
11F4:  MOVFF  540,03
11F8:  MOVF   x3F,W
11FA:  INCF   x3F,F
11FC:  BTFSC  FD8.2
11FE:  INCF   x40,F
1200:  MOVWF  FE9
1202:  MOVFF  03,FEA
1206:  MOVFF  53C,FEF
....................    } 
120A:  INCF   x41,F
120C:  BTFSC  FD8.2
120E:  INCF   x42,F
1210:  BRA    11D8
.................... } 
1212:  MOVLB  0
1214:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
117A:  MOVLB  5
117C:  MOVF   x50,F
117E:  BZ    1186
....................       output_high(GLCD_CS2); 
1180:  BCF    F95.3
1182:  BSF    F8C.3
....................    else 
1184:  BRA    118A
....................       output_high(GLCD_CS1); 
1186:  BCF    F95.4
1188:  BSF    F8C.4
....................  
....................    output_low(GLCD_RW);       // Set for writing 
118A:  BCF    F95.6
118C:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
118E:  CLRF   F93
1190:  MOVFF  551,F8A
....................    delay_cycles(50); 
1194:  MOVLW  10
1196:  MOVWF  00
1198:  DECFSZ 00,F
119A:  BRA    1198
119C:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
119E:  BCF    F95.7
11A0:  BSF    F8C.7
....................    delay_cycles(255); 
11A2:  MOVLW  54
11A4:  MOVWF  00
11A6:  DECFSZ 00,F
11A8:  BRA    11A6
11AA:  BRA    11AC
....................    output_low(GLCD_E); 
11AC:  BCF    F95.7
11AE:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
11B0:  BCF    F95.4
11B2:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
11B4:  BCF    F95.3
11B6:  BCF    F8C.3
.................... } 
11B8:  MOVLB  0
11BA:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(50); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(200); 
....................    data = input_b();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
15EC:  MOVLW  01
15EE:  MOVLB  5
15F0:  MOVWF  x60
15F2:  MOVWF  x61
15F4:  CLRF   x66
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
15F6:  MOVF   x57,W
15F8:  SUBWF  x59,W
15FA:  MOVWF  x67
15FC:  MOVF   x67,W
15FE:  BTFSS  x67.7
1600:  BRA    1608
1602:  MOVLW  00
1604:  BSF    FD8.0
1606:  SUBFWB x67,W
1608:  CLRF   03
160A:  MOVWF  x5E
160C:  MOVFF  03,55F
....................    dy = abs((signed int8)(y2 - y1)); 
1610:  MOVF   x58,W
1612:  SUBWF  x5A,W
1614:  MOVWF  x67
1616:  MOVF   x67,W
1618:  BTFSS  x67.7
161A:  BRA    1622
161C:  MOVLW  00
161E:  BSF    FD8.0
1620:  SUBFWB x67,W
1622:  CLRF   03
1624:  MOVWF  x5C
1626:  MOVFF  03,55D
....................    #endif 
....................  
....................    if(x1 > x2) 
162A:  MOVF   x57,W
162C:  SUBWF  x59,W
162E:  BC    1634
....................       addx = -1; 
1630:  MOVLW  FF
1632:  MOVWF  x60
....................    if(y1 > y2) 
1634:  MOVF   x58,W
1636:  SUBWF  x5A,W
1638:  BC    163E
....................       addy = -1; 
163A:  MOVLW  FF
163C:  MOVWF  x61
....................  
....................    if(dx >= dy) 
163E:  MOVF   x5D,W
1640:  SUBWF  x5F,W
1642:  BNC   16BA
1644:  BNZ   164C
1646:  MOVF   x5C,W
1648:  SUBWF  x5E,W
164A:  BNC   16BA
....................    { 
....................       dy *= 2; 
164C:  BCF    FD8.0
164E:  RLCF   x5C,F
1650:  RLCF   x5D,F
....................       P = dy - dx; 
1652:  MOVF   x5E,W
1654:  SUBWF  x5C,W
1656:  MOVWF  00
1658:  MOVF   x5F,W
165A:  SUBWFB x5D,W
165C:  MOVFF  00,562
1660:  MOVWF  x63
....................       diff = P - dx; 
1662:  MOVF   x5E,W
1664:  SUBWF  x62,W
1666:  MOVWF  x64
1668:  MOVF   x5F,W
166A:  SUBWFB x63,W
166C:  MOVWF  x65
....................  
....................       for(; i<=dx; ++i) 
166E:  MOVF   x5F,F
1670:  BNZ   1678
1672:  MOVF   x66,W
1674:  SUBWF  x5E,W
1676:  BNC   16B8
....................       { 
....................          glcd_pixel(x1, y1, color); 
1678:  MOVFF  557,567
167C:  MOVFF  558,568
1680:  MOVFF  55B,569
1684:  MOVLB  0
1686:  RCALL  1378
....................  
....................          if(P < 0) 
1688:  MOVLB  5
168A:  BTFSC  x63.7
168C:  BRA    1690
168E:  BRA    16A0
....................          { 
....................             P  += dy; 
1690:  MOVF   x5C,W
1692:  ADDWF  x62,F
1694:  MOVF   x5D,W
1696:  ADDWFC x63,F
....................             x1 += addx; 
1698:  MOVF   x60,W
169A:  ADDWF  x57,W
169C:  MOVWF  x57
....................          } 
....................          else 
169E:  BRA    16B4
....................          { 
....................             P  += diff; 
16A0:  MOVF   x64,W
16A2:  ADDWF  x62,F
16A4:  MOVF   x65,W
16A6:  ADDWFC x63,F
....................             x1 += addx; 
16A8:  MOVF   x60,W
16AA:  ADDWF  x57,W
16AC:  MOVWF  x57
....................             y1 += addy; 
16AE:  MOVF   x61,W
16B0:  ADDWF  x58,W
16B2:  MOVWF  x58
....................          } 
....................       } 
16B4:  INCF   x66,F
16B6:  BRA    166E
....................    } 
....................    else 
16B8:  BRA    1726
....................    { 
....................       dx *= 2; 
16BA:  BCF    FD8.0
16BC:  RLCF   x5E,F
16BE:  RLCF   x5F,F
....................       P = dx - dy; 
16C0:  MOVF   x5C,W
16C2:  SUBWF  x5E,W
16C4:  MOVWF  00
16C6:  MOVF   x5D,W
16C8:  SUBWFB x5F,W
16CA:  MOVFF  00,562
16CE:  MOVWF  x63
....................       diff = P - dy; 
16D0:  MOVF   x5C,W
16D2:  SUBWF  x62,W
16D4:  MOVWF  x64
16D6:  MOVF   x5D,W
16D8:  SUBWFB x63,W
16DA:  MOVWF  x65
....................  
....................       for(; i<=dy; ++i) 
16DC:  MOVF   x5D,F
16DE:  BNZ   16E6
16E0:  MOVF   x66,W
16E2:  SUBWF  x5C,W
16E4:  BNC   1726
....................       { 
....................          glcd_pixel(x1, y1, color); 
16E6:  MOVFF  557,567
16EA:  MOVFF  558,568
16EE:  MOVFF  55B,569
16F2:  MOVLB  0
16F4:  RCALL  1378
....................  
....................          if(P < 0) 
16F6:  MOVLB  5
16F8:  BTFSC  x63.7
16FA:  BRA    16FE
16FC:  BRA    170E
....................          { 
....................             P  += dx; 
16FE:  MOVF   x5E,W
1700:  ADDWF  x62,F
1702:  MOVF   x5F,W
1704:  ADDWFC x63,F
....................             y1 += addy; 
1706:  MOVF   x61,W
1708:  ADDWF  x58,W
170A:  MOVWF  x58
....................          } 
....................          else 
170C:  BRA    1722
....................          { 
....................             P  += diff; 
170E:  MOVF   x64,W
1710:  ADDWF  x62,F
1712:  MOVF   x65,W
1714:  ADDWFC x63,F
....................             x1 += addx; 
1716:  MOVF   x60,W
1718:  ADDWF  x57,W
171A:  MOVWF  x57
....................             y1 += addy; 
171C:  MOVF   x61,W
171E:  ADDWF  x58,W
1720:  MOVWF  x58
....................          } 
....................       } 
1722:  INCF   x66,F
1724:  BRA    16DC
....................    } 
.................... } 
1726:  MOVLB  0
1728:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
172A:  MOVLB  5
172C:  MOVF   x50,F
172E:  BZ    178C
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
1730:  MOVF   x4E,W
1732:  SUBWF  x4C,W
1734:  BC    1740
....................       { 
....................          xmin = x1; 
1736:  MOVFF  54C,553
....................          xmax = x2; 
173A:  MOVFF  54E,554
....................       } 
....................       else 
173E:  BRA    1748
....................       { 
....................          xmin = x2; 
1740:  MOVFF  54E,553
....................          xmax = x1; 
1744:  MOVFF  54C,554
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
1748:  MOVF   x4F,W
174A:  SUBWF  x4D,W
174C:  BC    1758
....................       { 
....................          ymin = y1; 
174E:  MOVFF  54D,555
....................          ymax = y2; 
1752:  MOVFF  54F,556
....................       } 
....................       else 
1756:  BRA    1760
....................       { 
....................          ymin = y2; 
1758:  MOVFF  54F,555
....................          ymax = y1; 
175C:  MOVFF  54D,556
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
1760:  MOVF   x53,W
1762:  SUBWF  x54,W
1764:  BNC   178A
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
1766:  MOVFF  555,552
176A:  MOVF   x52,W
176C:  SUBWF  x56,W
176E:  BNC   1786
....................          { 
....................             glcd_pixel(xmin, i, color); 
1770:  MOVFF  553,567
1774:  MOVFF  552,568
1778:  MOVFF  551,569
177C:  MOVLB  0
177E:  RCALL  1378
....................          } 
1780:  MOVLB  5
1782:  INCF   x52,F
1784:  BRA    176A
....................       } 
1786:  INCF   x53,F
1788:  BRA    1760
....................    } 
....................    else 
178A:  BRA    17E8
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
178C:  MOVFF  54C,557
1790:  MOVFF  54D,558
1794:  MOVFF  54E,559
1798:  MOVFF  54D,55A
179C:  MOVFF  551,55B
17A0:  MOVLB  0
17A2:  RCALL  15EC
....................       glcd_line(x1, y2, x2, y2, color); 
17A4:  MOVFF  54C,557
17A8:  MOVFF  54F,558
17AC:  MOVFF  54E,559
17B0:  MOVFF  54F,55A
17B4:  MOVFF  551,55B
17B8:  RCALL  15EC
....................       glcd_line(x1, y1, x1, y2, color); 
17BA:  MOVFF  54C,557
17BE:  MOVFF  54D,558
17C2:  MOVFF  54C,559
17C6:  MOVFF  54F,55A
17CA:  MOVFF  551,55B
17CE:  RCALL  15EC
....................       glcd_line(x2, y1, x2, y2, color); 
17D0:  MOVFF  54E,557
17D4:  MOVFF  54D,558
17D8:  MOVFF  54E,559
17DC:  MOVFF  54F,55A
17E0:  MOVFF  551,55B
17E4:  RCALL  15EC
17E6:  MOVLB  5
....................    } 
.................... } 
17E8:  MOVLB  0
17EA:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
2114:  MOVLB  5
2116:  CLRF   x3F
....................    b = radius; 
2118:  MOVFF  53C,540
....................    P = 1 - radius; 
211C:  MOVLW  01
211E:  BSF    FD8.0
2120:  SUBFWB x3C,W
2122:  MOVWF  x41
....................  
....................    do 
....................    { 
....................       if(fill) 
2124:  MOVF   x3D,F
2126:  BZ    21F2
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
2128:  MOVF   x3F,W
212A:  SUBWF  x3A,W
212C:  MOVWF  x42
212E:  MOVF   x40,W
2130:  ADDWF  x3B,W
2132:  MOVWF  x43
2134:  MOVF   x3F,W
2136:  ADDWF  x3A,W
2138:  MOVWF  x44
213A:  MOVF   x40,W
213C:  ADDWF  x3B,W
213E:  MOVWF  x45
2140:  MOVFF  542,557
2144:  MOVFF  543,558
2148:  MOVFF  544,559
214C:  MOVWF  x5A
214E:  MOVFF  53E,55B
2152:  MOVLB  0
2154:  CALL   15EC
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
2158:  MOVLB  5
215A:  MOVF   x3F,W
215C:  SUBWF  x3A,W
215E:  MOVWF  x42
2160:  MOVF   x40,W
2162:  SUBWF  x3B,W
2164:  MOVWF  x43
2166:  MOVF   x3F,W
2168:  ADDWF  x3A,W
216A:  MOVWF  x44
216C:  MOVF   x40,W
216E:  SUBWF  x3B,W
2170:  MOVWF  x45
2172:  MOVFF  542,557
2176:  MOVFF  543,558
217A:  MOVFF  544,559
217E:  MOVWF  x5A
2180:  MOVFF  53E,55B
2184:  MOVLB  0
2186:  CALL   15EC
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
218A:  MOVLB  5
218C:  MOVF   x40,W
218E:  SUBWF  x3A,W
2190:  MOVWF  x42
2192:  MOVF   x3F,W
2194:  ADDWF  x3B,W
2196:  MOVWF  x43
2198:  MOVF   x40,W
219A:  ADDWF  x3A,W
219C:  MOVWF  x44
219E:  MOVF   x3F,W
21A0:  ADDWF  x3B,W
21A2:  MOVWF  x45
21A4:  MOVFF  542,557
21A8:  MOVFF  543,558
21AC:  MOVFF  544,559
21B0:  MOVWF  x5A
21B2:  MOVFF  53E,55B
21B6:  MOVLB  0
21B8:  CALL   15EC
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
21BC:  MOVLB  5
21BE:  MOVF   x40,W
21C0:  SUBWF  x3A,W
21C2:  MOVWF  x42
21C4:  MOVF   x3F,W
21C6:  SUBWF  x3B,W
21C8:  MOVWF  x43
21CA:  MOVF   x40,W
21CC:  ADDWF  x3A,W
21CE:  MOVWF  x44
21D0:  MOVF   x3F,W
21D2:  SUBWF  x3B,W
21D4:  MOVWF  x45
21D6:  MOVFF  542,557
21DA:  MOVFF  543,558
21DE:  MOVFF  544,559
21E2:  MOVWF  x5A
21E4:  MOVFF  53E,55B
21E8:  MOVLB  0
21EA:  CALL   15EC
....................       } 
....................       else 
21EE:  BRA    22E0
21F0:  MOVLB  5
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
21F2:  MOVF   x3A,W
21F4:  ADDWF  x3F,W
21F6:  MOVWF  x42
21F8:  MOVF   x3B,W
21FA:  ADDWF  x40,W
21FC:  MOVWF  x43
21FE:  MOVFF  542,567
2202:  MOVWF  x68
2204:  MOVFF  53E,569
2208:  MOVLB  0
220A:  CALL   1378
....................          glcd_pixel(b+x, a+y, color); 
220E:  MOVLB  5
2210:  MOVF   x3A,W
2212:  ADDWF  x40,W
2214:  MOVWF  x42
2216:  MOVF   x3B,W
2218:  ADDWF  x3F,W
221A:  MOVWF  x43
221C:  MOVFF  542,567
2220:  MOVWF  x68
2222:  MOVFF  53E,569
2226:  MOVLB  0
2228:  CALL   1378
....................          glcd_pixel(x-a, b+y, color); 
222C:  MOVLB  5
222E:  MOVF   x3F,W
2230:  SUBWF  x3A,W
2232:  MOVWF  x42
2234:  MOVF   x3B,W
2236:  ADDWF  x40,W
2238:  MOVWF  x43
223A:  MOVFF  542,567
223E:  MOVWF  x68
2240:  MOVFF  53E,569
2244:  MOVLB  0
2246:  CALL   1378
....................          glcd_pixel(x-b, a+y, color); 
224A:  MOVLB  5
224C:  MOVF   x40,W
224E:  SUBWF  x3A,W
2250:  MOVWF  x42
2252:  MOVF   x3B,W
2254:  ADDWF  x3F,W
2256:  MOVWF  x43
2258:  MOVFF  542,567
225C:  MOVWF  x68
225E:  MOVFF  53E,569
2262:  MOVLB  0
2264:  CALL   1378
....................          glcd_pixel(b+x, y-a, color); 
2268:  MOVLB  5
226A:  MOVF   x3A,W
226C:  ADDWF  x40,W
226E:  MOVWF  x42
2270:  MOVF   x3F,W
2272:  SUBWF  x3B,W
2274:  MOVWF  x43
2276:  MOVFF  542,567
227A:  MOVWF  x68
227C:  MOVFF  53E,569
2280:  MOVLB  0
2282:  CALL   1378
....................          glcd_pixel(a+x, y-b, color); 
2286:  MOVLB  5
2288:  MOVF   x3A,W
228A:  ADDWF  x3F,W
228C:  MOVWF  x42
228E:  MOVF   x40,W
2290:  SUBWF  x3B,W
2292:  MOVWF  x43
2294:  MOVFF  542,567
2298:  MOVWF  x68
229A:  MOVFF  53E,569
229E:  MOVLB  0
22A0:  CALL   1378
....................          glcd_pixel(x-a, y-b, color); 
22A4:  MOVLB  5
22A6:  MOVF   x3F,W
22A8:  SUBWF  x3A,W
22AA:  MOVWF  x42
22AC:  MOVF   x40,W
22AE:  SUBWF  x3B,W
22B0:  MOVWF  x43
22B2:  MOVFF  542,567
22B6:  MOVWF  x68
22B8:  MOVFF  53E,569
22BC:  MOVLB  0
22BE:  CALL   1378
....................          glcd_pixel(x-b, y-a, color); 
22C2:  MOVLB  5
22C4:  MOVF   x40,W
22C6:  SUBWF  x3A,W
22C8:  MOVWF  x42
22CA:  MOVF   x3F,W
22CC:  SUBWF  x3B,W
22CE:  MOVWF  x43
22D0:  MOVFF  542,567
22D4:  MOVWF  x68
22D6:  MOVFF  53E,569
22DA:  MOVLB  0
22DC:  CALL   1378
....................       } 
....................  
....................       if(P < 0) 
22E0:  MOVLB  5
22E2:  BTFSC  x41.7
22E4:  BRA    22E8
22E6:  BRA    2304
....................          P += 3 + 2 * a++; 
22E8:  MOVF   x3F,W
22EA:  INCF   x3F,F
22EC:  MOVWF  x42
22EE:  MOVLW  02
22F0:  MOVWF  x43
22F2:  MOVFF  542,544
22F6:  MOVLB  0
22F8:  RCALL  20C6
22FA:  MOVF   01,W
22FC:  ADDLW  03
22FE:  MOVLB  5
2300:  ADDWF  x41,F
....................       else 
2302:  BRA    2326
....................          P += 5 + 2 * (a++ - b--); 
2304:  MOVF   x3F,W
2306:  INCF   x3F,F
2308:  MOVWF  x42
230A:  MOVF   x40,W
230C:  DECF   x40,F
230E:  SUBWF  x42,W
2310:  MOVWF  x42
2312:  MOVLW  02
2314:  MOVWF  x43
2316:  MOVFF  542,544
231A:  MOVLB  0
231C:  RCALL  20C6
231E:  MOVF   01,W
2320:  ADDLW  05
2322:  MOVLB  5
2324:  ADDWF  x41,F
....................     } while(a <= b); 
2326:  MOVF   x3F,W
2328:  XORLW  80
232A:  MOVWF  00
232C:  MOVF   x40,W
232E:  XORLW  80
2330:  SUBWF  00,W
2332:  BTFSC  FD8.2
2334:  BRA    2124
2336:  BTFSS  FD8.0
2338:  BRA    2124
.................... } 
233A:  MOVLB  0
233C:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
1434:  MOVFF  54E,03
1438:  MOVLB  5
143A:  MOVFF  54D,FE9
143E:  MOVFF  54E,FEA
1442:  MOVF   FEF,F
1444:  BTFSC  FD8.2
1446:  BRA    15E8
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
1448:  MOVFF  54E,03
144C:  MOVFF  54D,FE9
1450:  MOVFF  54E,FEA
1454:  MOVF   FEF,W
1456:  SUBLW  52
1458:  BNC   14A8
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
145A:  MOVFF  54E,03
145E:  MOVFF  54D,FE9
1462:  MOVFF  54E,FEA
1466:  MOVLW  20
1468:  SUBWF  FEF,W
146A:  MULLW  05
146C:  MOVF   FF3,W
146E:  CLRF   03
1470:  MOVWF  x5A
1472:  MOVLW  05
1474:  MOVWF  FEA
1476:  MOVLW  55
1478:  MOVWF  FE9
147A:  CLRF   x5E
147C:  MOVFF  55A,55D
1480:  MOVFF  FF2,55B
1484:  BCF    FF2.7
1486:  MOVLW  05
1488:  MOVWF  01
148A:  CLRF   FF7
148C:  MOVF   x5A,W
148E:  MOVLB  0
1490:  CALL   00A2
1494:  TBLRD*-
1496:  TBLRD*+
1498:  MOVFF  FF5,FEE
149C:  DECFSZ 01,F
149E:  BRA    1496
14A0:  MOVLB  5
14A2:  BTFSC  x5B.7
14A4:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
14A6:  BRA    1512
14A8:  MOVFF  54E,03
14AC:  MOVFF  54D,FE9
14B0:  MOVFF  54E,FEA
14B4:  MOVF   FEF,W
14B6:  SUBLW  7E
14B8:  BNC   1508
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
14BA:  MOVFF  54E,03
14BE:  MOVFF  54D,FE9
14C2:  MOVFF  54E,FEA
14C6:  MOVLW  53
14C8:  SUBWF  FEF,W
14CA:  MULLW  05
14CC:  MOVF   FF3,W
14CE:  CLRF   03
14D0:  MOVWF  x5A
14D2:  MOVLW  05
14D4:  MOVWF  FEA
14D6:  MOVLW  55
14D8:  MOVWF  FE9
14DA:  CLRF   x5E
14DC:  MOVFF  55A,55D
14E0:  MOVFF  FF2,55B
14E4:  BCF    FF2.7
14E6:  MOVLW  05
14E8:  MOVWF  01
14EA:  CLRF   FF7
14EC:  MOVF   x5A,W
14EE:  MOVLB  0
14F0:  CALL   01BC
14F4:  TBLRD*-
14F6:  TBLRD*+
14F8:  MOVFF  FF5,FEE
14FC:  DECFSZ 01,F
14FE:  BRA    14F6
1500:  MOVLB  5
1502:  BTFSC  x5B.7
1504:  BSF    FF2.7
....................       else 
1506:  BRA    1512
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
1508:  CLRF   x55
150A:  CLRF   x56
150C:  CLRF   x57
150E:  CLRF   x58
1510:  CLRF   x59
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
1512:  MOVFF  54E,03
1516:  MOVF   x4D,W
1518:  MOVWF  FE9
151A:  MOVFF  03,FEA
151E:  MOVF   FEF,W
1520:  XORLW  0A
1522:  MOVLB  0
1524:  BZ    152C
1526:  XORLW  07
1528:  BZ    153C
152A:  BRA    1542
....................          case '\n': 
....................             y += 7*size + 1; 
152C:  MOVLB  5
152E:  MOVF   x4F,W
1530:  MULLW  07
1532:  MOVF   FF3,W
1534:  ADDLW  01
1536:  ADDWF  x4C,F
....................             continue; 
1538:  BRA    15DA
153A:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
153C:  MOVLB  5
153E:  CLRF   x4B
....................             continue; 
1540:  BRA    15DA
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
1542:  MOVLB  5
1544:  MOVF   x4F,W
1546:  MULLW  05
1548:  MOVF   FF3,W
154A:  ADDWF  x4B,W
154C:  SUBLW  7F
154E:  BC    155C
....................       { 
....................          x = 0;                           // Set x at far left position 
1550:  CLRF   x4B
....................          y += 7*size + 1;                 // Set y at next position down 
1552:  MOVF   x4F,W
1554:  MULLW  07
1556:  MOVF   FF3,W
1558:  ADDLW  01
155A:  ADDWF  x4C,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
155C:  CLRF   x51
155E:  MOVF   x51,W
1560:  SUBLW  04
1562:  BNC   15DA
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
1564:  CLRF   x52
1566:  MOVF   x52,W
1568:  SUBLW  06
156A:  BNC   15D2
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
156C:  CLRF   03
156E:  MOVF   x51,W
1570:  ADDLW  55
1572:  MOVWF  FE9
1574:  MOVLW  05
1576:  ADDWFC 03,W
1578:  MOVWF  FEA
157A:  MOVFF  FEF,55A
157E:  MOVFF  55A,00
1582:  MOVF   x52,W
1584:  MOVWF  01
1586:  BZ    1590
1588:  BCF    FD8.0
158A:  RRCF   00,F
158C:  DECFSZ 01,F
158E:  BRA    1588
1590:  BTFSS  00.0
1592:  BRA    15CE
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
1594:  CLRF   x53
1596:  MOVF   x4F,W
1598:  SUBWF  x53,W
159A:  BC    15CE
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
159C:  CLRF   x54
159E:  MOVF   x4F,W
15A0:  SUBWF  x54,W
15A2:  BC    15CA
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
15A4:  MOVF   x54,W
15A6:  ADDWF  x4B,W
15A8:  MOVWF  x5A
15AA:  MOVF   x52,W
15AC:  MULWF  x4F
15AE:  MOVF   FF3,W
15B0:  ADDWF  x4C,W
15B2:  ADDWF  x53,W
15B4:  MOVWF  x5B
15B6:  MOVFF  55A,567
15BA:  MOVWF  x68
15BC:  MOVFF  550,569
15C0:  MOVLB  0
15C2:  RCALL  1378
....................                   } 
15C4:  MOVLB  5
15C6:  INCF   x54,F
15C8:  BRA    159E
....................                } 
15CA:  INCF   x53,F
15CC:  BRA    1596
....................             } 
....................          } 
15CE:  INCF   x52,F
15D0:  BRA    1566
....................       } 
15D2:  INCF   x51,F
15D4:  MOVF   x4F,W
15D6:  ADDWF  x4B,F
15D8:  BRA    155E
....................    } 
15DA:  INCF   x4D,F
15DC:  BTFSC  FD8.2
15DE:  INCF   x4E,F
15E0:  INCF   x4B,F
15E2:  MOVLB  0
15E4:  BRA    1434
15E6:  MOVLB  5
.................... } 
15E8:  MOVLB  0
15EA:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... char kpa[]="kPa"; 
.................... float promedio[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... int8 Puerta=0,Parada=1,NivelReservorio=0,NivelTanque=0,Presostato=0,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,Alarma=0,AlarmaAgua=0; 
.................... short Flanco=0,Flanco1=0,Flanco2=0,emergency=0,visual=1,desfoguelento=0,Lectura=0,Expulsa=0, est=0,Visua=0,flag_agua=0,CadenaRecibida=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,z=0; 
.................... short disp_Alarma=0,disp_AlarmaAgua=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Decimal=0; 
.................... int8 Menu=0, unidad=1,bite=0,TamanoCadena=0,i=0; 
.................... int8 Setpoint=0,fin_ciclo=0,Opcion=1,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,tiempo_desfogue=0; 
.................... float ADC_Pt100=0.0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... char dato[10]; 
.................... char datoTx[14]; 
.................... char datoRx[11]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
.................... float V0=0.0,R1=6180.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0; 
....................  
.................... typedef struct{ 
....................    char Letra[30]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void displayMenu(char palabra[30], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
17EC:  MOVLB  5
17EE:  MOVFF  53A,01
17F2:  MOVFF  53B,03
17F6:  MOVFF  53A,540
17FA:  MOVFF  53B,541
17FE:  MOVLW  05
1800:  MOVWF  FEA
1802:  MOVLW  1A
1804:  MOVWF  FE9
1806:  MOVFF  53B,FE2
180A:  MOVFF  53A,FE1
180E:  MOVF   FE7,F
1810:  MOVFF  FE6,FEE
1814:  BNZ   180E
....................    if(sombreado==2) 
1816:  MOVF   x3E,W
1818:  SUBLW  02
181A:  BNZ   1844
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
181C:  MOVLW  01
181E:  ADDWF  x3C,W
1820:  MOVWF  x40
1822:  MOVLW  01
1824:  ADDWF  x3D,W
1826:  MOVWF  x41
1828:  MOVFF  540,54B
182C:  MOVWF  x4C
182E:  MOVLW  05
1830:  MOVWF  x4E
1832:  MOVLW  1A
1834:  MOVWF  x4D
1836:  MOVFF  53F,54F
183A:  MOVLW  01
183C:  MOVWF  x50
183E:  MOVLB  0
1840:  RCALL  1434
1842:  MOVLB  5
....................    if(sombreado==1) 
1844:  DECFSZ x3E,W
1846:  BRA    1892
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
1848:  MOVF   x3F,W
184A:  MULLW  08
184C:  MOVF   FF3,W
184E:  ADDWF  x3D,W
1850:  MOVWF  x40
1852:  CLRF   x4C
1854:  MOVFF  53D,54D
1858:  MOVLW  7F
185A:  MOVWF  x4E
185C:  MOVFF  540,54F
1860:  MOVLW  01
1862:  MOVWF  x50
1864:  MOVWF  x51
1866:  MOVLB  0
1868:  RCALL  172A
186A:  MOVLW  01
186C:  MOVLB  5
186E:  ADDWF  x3C,W
1870:  MOVWF  x40
1872:  MOVLW  01
1874:  ADDWF  x3D,W
1876:  MOVWF  x41
1878:  MOVFF  540,54B
187C:  MOVWF  x4C
187E:  MOVLW  05
1880:  MOVWF  x4E
1882:  MOVLW  1A
1884:  MOVWF  x4D
1886:  MOVFF  53F,54F
188A:  CLRF   x50
188C:  MOVLB  0
188E:  RCALL  1434
1890:  MOVLB  5
....................    if(sombreado==0) 
1892:  MOVF   x3E,F
1894:  BNZ   18E0
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
1896:  MOVF   x3F,W
1898:  MULLW  08
189A:  MOVF   FF3,W
189C:  ADDWF  x3D,W
189E:  MOVWF  x40
18A0:  CLRF   x4C
18A2:  MOVFF  53D,54D
18A6:  MOVLW  7F
18A8:  MOVWF  x4E
18AA:  MOVFF  540,54F
18AE:  MOVLW  01
18B0:  MOVWF  x50
18B2:  CLRF   x51
18B4:  MOVLB  0
18B6:  RCALL  172A
18B8:  MOVLW  01
18BA:  MOVLB  5
18BC:  ADDWF  x3C,W
18BE:  MOVWF  x40
18C0:  MOVLW  01
18C2:  ADDWF  x3D,W
18C4:  MOVWF  x41
18C6:  MOVFF  540,54B
18CA:  MOVWF  x4C
18CC:  MOVLW  05
18CE:  MOVWF  x4E
18D0:  MOVLW  1A
18D2:  MOVWF  x4D
18D4:  MOVFF  53F,54F
18D8:  MOVLW  01
18DA:  MOVWF  x50
18DC:  MOVLB  0
18DE:  RCALL  1434
....................    glcd_update(); 
18E0:  MOVLB  0
18E2:  RCALL  1216
.................... } 
18E4:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
23C4:  MOVLB  5
23C6:  MOVF   x3E,W
23C8:  SUBLW  02
23CA:  BNZ   243C
....................    { 
....................       sprintf(voltage, "%03u", digito); 
23CC:  MOVLW  05
23CE:  MOVWF  x39
23D0:  MOVLW  40
23D2:  MOVWF  x38
23D4:  MOVFF  53B,549
23D8:  MOVLW  03
23DA:  MOVWF  x4A
23DC:  MOVLB  0
23DE:  RCALL  233E
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
23E0:  MOVLB  5
23E2:  MOVF   x3F,W
23E4:  MULLW  12
23E6:  MOVF   FF3,W
23E8:  ADDWF  x3C,W
23EA:  MOVWF  x49
23EC:  MOVF   x3F,W
23EE:  MULLW  08
23F0:  MOVF   FF3,W
23F2:  ADDWF  x3D,W
23F4:  MOVWF  x4A
23F6:  MOVFF  53C,54C
23FA:  MOVFF  53D,54D
23FE:  MOVFF  549,54E
2402:  MOVWF  x4F
2404:  MOVLW  01
2406:  MOVWF  x50
2408:  MOVWF  x51
240A:  MOVLB  0
240C:  CALL   172A
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
2410:  MOVLW  01
2412:  MOVLB  5
2414:  ADDWF  x3C,W
2416:  MOVWF  x49
2418:  MOVLW  01
241A:  ADDWF  x3D,W
241C:  MOVWF  x4A
241E:  MOVFF  549,54B
2422:  MOVWF  x4C
2424:  MOVLW  05
2426:  MOVWF  x4E
2428:  MOVLW  40
242A:  MOVWF  x4D
242C:  MOVFF  53F,54F
2430:  CLRF   x50
2432:  MOVLB  0
2434:  CALL   1434
....................    } 
....................    else 
2438:  BRA    250A
243A:  MOVLB  5
....................    { 
....................       sprintf(voltage, "%u", digito); 
243C:  MOVLW  05
243E:  MOVWF  x39
2440:  MOVLW  40
2442:  MOVWF  x38
2444:  MOVFF  53B,549
2448:  MOVLW  1B
244A:  MOVWF  x4A
244C:  MOVLB  0
244E:  RCALL  233E
....................     
....................       if(sombreado==1) 
2450:  MOVLB  5
2452:  DECFSZ x3E,W
2454:  BRA    24AE
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
2456:  MOVF   x3F,W
2458:  MULLW  05
245A:  MOVF   FF3,W
245C:  ADDWF  x3C,W
245E:  MOVWF  x49
2460:  MOVF   x3F,W
2462:  MULLW  08
2464:  MOVF   FF3,W
2466:  ADDWF  x3D,W
2468:  MOVWF  x4A
246A:  MOVFF  53C,54C
246E:  MOVFF  53D,54D
2472:  MOVFF  549,54E
2476:  MOVWF  x4F
2478:  MOVLW  01
247A:  MOVWF  x50
247C:  MOVWF  x51
247E:  MOVLB  0
2480:  CALL   172A
2484:  MOVLW  01
2486:  MOVLB  5
2488:  ADDWF  x3C,W
248A:  MOVWF  x49
248C:  MOVLW  01
248E:  ADDWF  x3D,W
2490:  MOVWF  x4A
2492:  MOVFF  549,54B
2496:  MOVWF  x4C
2498:  MOVLW  05
249A:  MOVWF  x4E
249C:  MOVLW  40
249E:  MOVWF  x4D
24A0:  MOVFF  53F,54F
24A4:  CLRF   x50
24A6:  MOVLB  0
24A8:  CALL   1434
24AC:  MOVLB  5
....................       if(sombreado==0) 
24AE:  MOVF   x3E,F
24B0:  BNZ   250C
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
24B2:  MOVF   x3F,W
24B4:  MULLW  05
24B6:  MOVF   FF3,W
24B8:  ADDWF  x3C,W
24BA:  MOVWF  x49
24BC:  MOVF   x3F,W
24BE:  MULLW  08
24C0:  MOVF   FF3,W
24C2:  ADDWF  x3D,W
24C4:  MOVWF  x4A
24C6:  MOVFF  53C,54C
24CA:  MOVFF  53D,54D
24CE:  MOVFF  549,54E
24D2:  MOVWF  x4F
24D4:  MOVLW  01
24D6:  MOVWF  x50
24D8:  CLRF   x51
24DA:  MOVLB  0
24DC:  CALL   172A
24E0:  MOVLW  01
24E2:  MOVLB  5
24E4:  ADDWF  x3C,W
24E6:  MOVWF  x49
24E8:  MOVLW  01
24EA:  ADDWF  x3D,W
24EC:  MOVWF  x4A
24EE:  MOVFF  549,54B
24F2:  MOVWF  x4C
24F4:  MOVLW  05
24F6:  MOVWF  x4E
24F8:  MOVLW  40
24FA:  MOVWF  x4D
24FC:  MOVFF  53F,54F
2500:  MOVLW  01
2502:  MOVWF  x50
2504:  MOVLB  0
2506:  CALL   1434
250A:  MOVLB  5
....................    } 
....................    glcd_update(); 
250C:  MOVLB  0
250E:  CALL   1216
.................... } 
2512:  RETLW  00
....................  
.................... #int_rda 
.................... void rda_isr(void)//función de interrupción por recepción de datos USART  
.................... {  
....................    dato[bite]=getch(); 
*
0F10:  CLRF   03
0F12:  MOVLB  4
0F14:  MOVF   x8B,W
0F16:  ADDLW  BC
0F18:  MOVWF  FE9
0F1A:  MOVLW  04
0F1C:  ADDWFC 03,W
0F1E:  MOVWF  FEA
0F20:  BTFSS  F9E.5
0F22:  BRA    0F20
0F24:  MOVFF  FAE,FEF
....................    if((bite<10 && strcmp(dato[bite],'\r')==0)) 
0F28:  MOVF   x8B,W
0F2A:  SUBLW  09
0F2C:  BNC   0F62
0F2E:  CLRF   03
0F30:  MOVF   x8B,W
0F32:  ADDLW  BC
0F34:  MOVWF  FE9
0F36:  MOVLW  04
0F38:  ADDWFC 03,W
0F3A:  MOVWF  FEA
0F3C:  MOVFF  FEF,570
0F40:  MOVLB  5
0F42:  CLRF   x72
0F44:  MOVFF  570,571
0F48:  CLRF   x74
0F4A:  MOVLW  0D
0F4C:  MOVWF  x73
0F4E:  MOVLB  0
0F50:  RCALL  0E98
0F52:  MOVF   01,F
0F54:  BTFSC  FD8.2
0F56:  BRA    0F5C
0F58:  MOVLB  4
0F5A:  BRA    0F62
....................    { 
....................       bite=0; 
0F5C:  MOVLB  4
0F5E:  CLRF   x8B
....................    } 
....................    else 
0F60:  BRA    0FF4
....................    { 
....................       if(bite==10 && strcmp(dato[bite],'\r')==0) 
0F62:  MOVF   x8B,W
0F64:  SUBLW  0A
0F66:  BNZ   0FE6
0F68:  CLRF   03
0F6A:  MOVF   x8B,W
0F6C:  ADDLW  BC
0F6E:  MOVWF  FE9
0F70:  MOVLW  04
0F72:  ADDWFC 03,W
0F74:  MOVWF  FEA
0F76:  MOVFF  FEF,570
0F7A:  MOVLB  5
0F7C:  CLRF   x72
0F7E:  MOVFF  570,571
0F82:  CLRF   x74
0F84:  MOVLW  0D
0F86:  MOVWF  x73
0F88:  MOVLB  0
0F8A:  RCALL  0E98
0F8C:  MOVF   01,F
0F8E:  BTFSC  FD8.2
0F90:  BRA    0F96
0F92:  MOVLB  4
0F94:  BRA    0FE6
....................       { 
....................          TamanoCadena=bite; 
0F96:  MOVFF  48B,48C
....................          bite=0; 
0F9A:  MOVLB  4
0F9C:  CLRF   x8B
....................          CadenaRecibida=1; 
0F9E:  BSF    x7D.3
....................          for(i=0;i<TamanoCadena+1;i++) 
0FA0:  CLRF   x8D
0FA2:  MOVLW  01
0FA4:  ADDWF  x8C,W
0FA6:  SUBWF  x8D,W
0FA8:  BC    0FE4
....................          { 
....................             datoRx[i]=dato[i]; 
0FAA:  CLRF   03
0FAC:  MOVF   x8D,W
0FAE:  ADDLW  D4
0FB0:  MOVWF  01
0FB2:  MOVLW  04
0FB4:  ADDWFC 03,F
0FB6:  MOVLB  5
0FB8:  MOVFF  03,571
0FBC:  CLRF   03
0FBE:  MOVLB  4
0FC0:  MOVF   x8D,W
0FC2:  ADDLW  BC
0FC4:  MOVWF  FE9
0FC6:  MOVLW  04
0FC8:  ADDWFC 03,W
0FCA:  MOVWF  FEA
0FCC:  MOVFF  FEF,572
0FD0:  MOVLB  5
0FD2:  MOVFF  571,FEA
0FD6:  MOVFF  01,FE9
0FDA:  MOVFF  572,FEF
....................          }    
0FDE:  MOVLB  4
0FE0:  INCF   x8D,F
0FE2:  BRA    0FA2
....................       } 
....................       else 
0FE4:  BRA    0FF4
....................       { 
....................          if(bite>10) 
0FE6:  MOVF   x8B,W
0FE8:  SUBLW  0A
0FEA:  BC    0FF0
....................          { 
....................             bite=0; 
0FEC:  CLRF   x8B
....................          } 
....................          else 
0FEE:  BRA    0FF4
....................          { 
....................             //displayTiempo(bite,50,50,2,1); 
....................             CadenaRecibida=0; 
0FF0:  BCF    x7D.3
....................             bite++; 
0FF2:  INCF   x8B,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0FF4:  BCF    F9E.5
0FF6:  MOVLB  0
0FF8:  GOTO   0060
.................... void EnviarCodigo(void) 
.................... { 
....................    datoTx[0]=Resistencia+48; 
*
1AD2:  MOVLW  30
1AD4:  MOVLB  4
1AD6:  ADDWF  x7F,W
1AD8:  MOVWF  xC6
....................    datoTx[1]=EVDesfogue+48; 
1ADA:  MOVLW  30
1ADC:  ADDWF  x80,W
1ADE:  MOVWF  xC7
....................    datoTx[2]=EVAgua+48; 
1AE0:  MOVLW  30
1AE2:  ADDWF  x81,W
1AE4:  MOVWF  xC8
....................    datoTx[3]=EVTrampa+48; 
1AE6:  MOVLW  30
1AE8:  ADDWF  x82,W
1AEA:  MOVWF  xC9
....................    datoTx[4]=MotorPuerta+48; 
1AEC:  MOVLW  30
1AEE:  ADDWF  x83,W
1AF0:  MOVWF  xCA
....................    datoTx[5]=EVEntradaAgua+48; 
1AF2:  MOVLW  30
1AF4:  ADDWF  x84,W
1AF6:  MOVWF  xCB
....................    datoTx[6]=BombaVacio+48; 
1AF8:  MOVLW  30
1AFA:  ADDWF  x85,W
1AFC:  MOVWF  xCC
....................    datoTx[7]=BombaAgua+48; 
1AFE:  MOVLW  30
1B00:  ADDWF  x86,W
1B02:  MOVWF  xCD
....................    datoTx[8]=Control+48; 
1B04:  MOVLW  30
1B06:  ADDWF  x87,W
1B08:  MOVWF  xCE
....................    datoTx[12]=Nivel+48; 
1B0A:  MOVLW  30
1B0C:  ADDWF  x9C,W
1B0E:  MOVWF  xD2
....................    datoTx[9]=Setpoint+48; 
1B10:  MOVLW  30
1B12:  ADDWF  x8E,W
1B14:  MOVWF  xCF
....................    /*itoa(Setpoint,10, SetTemperatura); 
....................     
....................    for(i=0;i<3;i++) 
....................    { 
....................       if(SetTemperatura[i]==null) 
....................       { 
....................          datoTx[i+9]='n'; 
....................       } 
....................       else 
....................       { 
....................          datoTx[i+9]=SetTemperatura[i]; 
....................       } 
....................    }*/ 
....................    datoTx[13]='\r'; 
1B16:  MOVLW  0D
1B18:  MOVWF  xD3
....................        
....................        
....................    for(i=0;i<14;i++) 
1B1A:  CLRF   x8D
1B1C:  MOVF   x8D,W
1B1E:  SUBLW  0D
1B20:  BNC   1B4E
....................    { 
....................       putc(datoTx[i]); 
1B22:  CLRF   03
1B24:  MOVF   x8D,W
1B26:  ADDLW  C6
1B28:  MOVWF  FE9
1B2A:  MOVLW  04
1B2C:  ADDWFC 03,W
1B2E:  MOVWF  FEA
1B30:  MOVFF  FEF,53A
1B34:  MOVLB  5
1B36:  MOVF   x3A,W
1B38:  MOVLB  0
1B3A:  BRA    1AC8
....................       delay_ms(12); 
1B3C:  MOVLW  0C
1B3E:  MOVLB  5
1B40:  MOVWF  x3F
1B42:  MOVLB  0
1B44:  CALL   10C4
....................    }    
1B48:  MOVLB  4
1B4A:  INCF   x8D,F
1B4C:  BRA    1B1C
.................... } 
1B4E:  MOVLB  0
1B50:  RETLW  00
....................  
.................... void Determina(void){ 
....................          Puerta=DatoRx[0]-48; 
*
1F2A:  MOVLW  30
1F2C:  MOVLB  4
1F2E:  SUBWF  xD4,W
1F30:  MOVWF  x70
....................          Parada=DatoRx[1]-48; 
1F32:  MOVLW  30
1F34:  SUBWF  xD5,W
1F36:  MOVWF  x71
....................          NivelReservorio=DatoRx[2]-48; 
1F38:  MOVLW  30
1F3A:  SUBWF  xD6,W
1F3C:  MOVWF  x72
....................          NivelTanque=DatoRx[3]-48; 
1F3E:  MOVLW  30
1F40:  SUBWF  xD7,W
1F42:  MOVWF  x73
....................          Presostato=DatoRx[4]-48; 
1F44:  MOVLW  30
1F46:  SUBWF  xD8,W
1F48:  MOVWF  x74
....................          ADC_Pt100=DatoRx[5]-48; 
1F4A:  MOVLW  30
1F4C:  SUBWF  xD9,W
1F4E:  MOVLB  5
1F50:  CLRF   x40
1F52:  MOVWF  x3F
1F54:  MOVLB  0
1F56:  CALL   10EE
1F5A:  MOVFF  03,4A3
1F5E:  MOVFF  02,4A2
1F62:  MOVFF  01,4A1
1F66:  MOVFF  00,4A0
....................          Alarma=DatoRx[6]-48; 
1F6A:  MOVLW  30
1F6C:  MOVLB  4
1F6E:  SUBWF  xDA,W
1F70:  MOVWF  x7A
....................          AlarmaAgua=DatoRx[7]-48; 
1F72:  MOVLW  30
1F74:  SUBWF  xDB,W
1F76:  MOVWF  x7B
....................          /*for(i=0;i<4;i++) 
....................          { 
....................             if(strcmp(datoRx[i+5],'n')==0 ) 
....................             { 
....................                break; 
....................             } 
....................             else 
....................             { 
....................                ADCTemperatura[i]=datoRx[i+5]; 
....................             } 
....................          } 
....................          ADC_Pt100=atof(ADCTemperatura); 
....................          for(i=0;i<4;i++) 
....................          { 
....................             datoRx[i+5]=null; 
....................             ADCTemperatura[i]=null; 
....................          }*/ 
....................          Decimal=DatoRx[9]-48; 
1F78:  MOVLW  30
1F7A:  SUBWF  xDD,W
1F7C:  MOVWF  x88
....................          ADC_Pt100=ADC_Pt100+((float)Decimal/10); 
1F7E:  MOVLB  5
1F80:  CLRF   x40
1F82:  MOVFF  488,53F
1F86:  MOVLB  0
1F88:  CALL   10EE
1F8C:  MOVFF  00,53A
1F90:  MOVFF  01,53B
1F94:  MOVFF  02,53C
1F98:  MOVFF  03,53D
1F9C:  MOVFF  03,541
1FA0:  MOVFF  02,540
1FA4:  MOVFF  01,53F
1FA8:  MOVFF  00,53E
1FAC:  MOVLB  5
1FAE:  CLRF   x45
1FB0:  CLRF   x44
1FB2:  MOVLW  20
1FB4:  MOVWF  x43
1FB6:  MOVLW  82
1FB8:  MOVWF  x42
1FBA:  MOVLB  0
1FBC:  BRA    1B52
1FBE:  BCF    FD8.1
1FC0:  MOVFF  4A3,541
1FC4:  MOVFF  4A2,540
1FC8:  MOVFF  4A1,53F
1FCC:  MOVFF  4A0,53E
1FD0:  MOVFF  03,545
1FD4:  MOVFF  02,544
1FD8:  MOVFF  01,543
1FDC:  MOVFF  00,542
1FE0:  RCALL  1CB2
1FE2:  MOVFF  03,4A3
1FE6:  MOVFF  02,4A2
1FEA:  MOVFF  01,4A1
1FEE:  MOVFF  00,4A0
.................... } 
1FF2:  RETLW  00
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................    /* 
....................    if(x==1){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==2){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==3){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==4){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    }*/ 
....................     
....................    if(x==5){ 
*
2018:  MOVLB  5
201A:  MOVF   x3A,W
201C:  SUBLW  05
201E:  BNZ   20C2
....................    for( i = 0 ; i < 64 ; i ++ ) 
2020:  CLRF   x3B
2022:  MOVF   x3B,W
2024:  SUBLW  3F
2026:  BNC   20C2
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
2028:  CLRF   x3C
202A:  MOVF   x3C,W
202C:  SUBLW  0F
202E:  BNC   20BE
....................       {     
....................          for(k=7;k>-1;k--) 
2030:  MOVLW  07
2032:  MOVWF  x3D
2034:  MOVF   x3D,W
2036:  XORLW  80
2038:  SUBLW  7F
203A:  BC    20BA
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
203C:  CLRF   x3F
203E:  MOVFF  53B,53E
2042:  CLRF   x41
2044:  MOVLW  10
2046:  MOVWF  x40
2048:  MOVLB  0
204A:  BRA    1FF4
204C:  MOVFF  02,53F
2050:  MOVFF  01,53E
2054:  MOVLB  5
2056:  MOVF   x3C,W
2058:  ADDWF  01,W
205A:  MOVWF  01
205C:  MOVLW  00
205E:  ADDWFC 02,W
2060:  MOVWF  03
2062:  MOVF   01,W
2064:  MOVFF  FF2,53E
2068:  BCF    FF2.7
206A:  MOVFF  03,FF7
206E:  MOVLB  0
2070:  CALL   02B2
2074:  MOVLB  5
2076:  BTFSC  x3E.7
2078:  BSF    FF2.7
207A:  MOVWF  x3E
207C:  MOVLW  07
207E:  BSF    FD8.0
2080:  SUBFWB x3D,W
2082:  MOVWF  x3F
2084:  MOVFF  53E,00
2088:  MOVF   x3F,W
208A:  MOVWF  01
208C:  BZ    2096
208E:  BCF    FD8.0
2090:  RRCF   00,F
2092:  DECFSZ 01,F
2094:  BRA    208E
2096:  BTFSS  00.0
2098:  BRA    20B6
....................                glcd_pixel( j*8+k,i, ON ); 
209A:  MOVF   x3C,W
209C:  MULLW  08
209E:  MOVF   FF3,W
20A0:  ADDWF  x3D,W
20A2:  MOVWF  x3E
20A4:  MOVWF  x67
20A6:  MOVFF  53B,568
20AA:  MOVLW  01
20AC:  MOVWF  x69
20AE:  MOVLB  0
20B0:  CALL   1378
20B4:  MOVLB  5
....................          }   
20B6:  DECF   x3D,F
20B8:  BRA    2034
....................       } 
20BA:  INCF   x3C,F
20BC:  BRA    202A
....................    } 
20BE:  INCF   x3B,F
20C0:  BRA    2022
....................    } 
....................     
.................... } 
20C2:  MOVLB  0
20C4:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
*
0FFC:  MOVLW  15
0FFE:  MOVWF  FCF
1000:  MOVLW  A0
1002:  MOVWF  FCE
....................    tiempos++; 
1004:  MOVLB  4
1006:  INCF   x94,F
1008:  BTFSC  FD8.2
100A:  INCF   x95,F
....................    tiempos3++; 
100C:  INCF   x96,F
100E:  BTFSC  FD8.2
1010:  INCF   x97,F
....................    tiempoctrl++; 
1012:  INCF   x98,F
1014:  BTFSC  FD8.2
1016:  INCF   x99,F
....................        
....................    if(tiempos3>=40 && Exhaust==2) 
1018:  MOVF   x97,F
101A:  BNZ   1022
101C:  MOVF   x96,W
101E:  SUBLW  27
1020:  BC    1034
1022:  MOVF   x93,W
1024:  SUBLW  02
1026:  BNZ   1034
....................    {tiempos3=0;Expulsa=1;tiempo_desfogue++;} 
1028:  CLRF   x97
102A:  CLRF   x96
102C:  BSF    x7C.7
102E:  INCF   x9E,F
1030:  BTFSC  FD8.2
1032:  INCF   x9F,F
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
1034:  MOVF   x94,W
1036:  SUBLW  C8
1038:  BNZ   10BC
103A:  MOVF   x95,F
103C:  BNZ   10BC
....................    {tiempos=0;Lectura=1; 
103E:  CLRF   x95
1040:  CLRF   x94
1042:  BSF    x7C.6
....................     
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
1044:  DECFSZ x91,W
1046:  BRA    1080
....................       { 
....................                       
....................       Testerilizacion[0]++; 
1048:  INCF   xA4,F
....................       if(Testerilizacion[0]>9) 
104A:  BTFSC  xA4.7
104C:  BRA    1058
104E:  MOVF   xA4,W
1050:  SUBLW  09
1052:  BC    1058
....................          {Testerilizacion[0]=0; 
1054:  CLRF   xA4
....................           Testerilizacion[1]++;} 
1056:  INCF   xA5,F
....................        if(Testerilizacion[1]>5) 
1058:  BTFSC  xA5.7
105A:  BRA    1066
105C:  MOVF   xA5,W
105E:  SUBLW  05
1060:  BC    1066
....................          {Testerilizacion[1]=0; 
1062:  CLRF   xA5
....................           Testerilizacion[2]++;} 
1064:  INCF   xA6,F
....................          if(Testerilizacion[2]>9) 
1066:  BTFSC  xA6.7
1068:  BRA    1074
106A:  MOVF   xA6,W
106C:  SUBLW  09
106E:  BC    1074
....................             {Testerilizacion[2]=0; 
1070:  CLRF   xA6
....................              Testerilizacion[3]++;} 
1072:  INCF   xA7,F
....................             if(Testerilizacion[3]>5) 
1074:  BTFSC  xA7.7
1076:  BRA    1080
1078:  MOVF   xA7,W
107A:  SUBLW  05
107C:  BC    1080
....................                {Testerilizacion[3]=0;} 
107E:  CLRF   xA7
....................       }        
....................        
....................     if(tiempo_secado==1) 
1080:  DECFSZ x92,W
1082:  BRA    10BC
....................       { 
....................                       
....................       Tsecado[0]++; 
1084:  INCF   xAC,F
....................       if(Tsecado[0]>9) 
1086:  BTFSC  xAC.7
1088:  BRA    1094
108A:  MOVF   xAC,W
108C:  SUBLW  09
108E:  BC    1094
....................          {Tsecado[0]=0; 
1090:  CLRF   xAC
....................           Tsecado[1]++;} 
1092:  INCF   xAD,F
....................        if(Tsecado[1]>5) 
1094:  BTFSC  xAD.7
1096:  BRA    10A2
1098:  MOVF   xAD,W
109A:  SUBLW  05
109C:  BC    10A2
....................          {Tsecado[1]=0; 
109E:  CLRF   xAD
....................           Tsecado[2]++;} 
10A0:  INCF   xAE,F
....................          if(Tsecado[2]>9) 
10A2:  BTFSC  xAE.7
10A4:  BRA    10B0
10A6:  MOVF   xAE,W
10A8:  SUBLW  09
10AA:  BC    10B0
....................             {Tsecado[2]=0; 
10AC:  CLRF   xAE
....................              Tsecado[3]++;} 
10AE:  INCF   xAF,F
....................             if(Tsecado[3]>5) 
10B0:  BTFSC  xAF.7
10B2:  BRA    10BC
10B4:  MOVF   xAF,W
10B6:  SUBLW  05
10B8:  BC    10BC
....................                {Tsecado[3]=0;} 
10BA:  CLRF   xAF
....................       }   
....................    } 
....................    } 
....................     
10BC:  BCF    F9E.0
10BE:  MOVLB  0
10C0:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
....................    glcd_rect(x1, y, x2, y+7, YES, OFF); 
*
2654:  MOVLW  07
2656:  MOVLB  5
2658:  ADDWF  x3C,W
265A:  MOVWF  x3D
265C:  MOVFF  53A,54C
2660:  MOVFF  53C,54D
2664:  MOVFF  53B,54E
2668:  MOVWF  x4F
266A:  MOVLW  01
266C:  MOVWF  x50
266E:  CLRF   x51
2670:  MOVLB  0
2672:  CALL   172A
.................... } 
2676:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%3.1f",adc); // Converts adc to text 
*
29E8:  MOVLW  05
29EA:  MOVLB  5
29EC:  MOVWF  x39
29EE:  MOVLW  41
29F0:  MOVWF  x38
29F2:  MOVLW  02
29F4:  MOVWF  FE9
29F6:  MOVFF  53D,54D
29FA:  MOVFF  53C,54C
29FE:  MOVFF  53B,54B
2A02:  MOVFF  53A,54A
2A06:  MOVLW  01
2A08:  MOVWF  x4E
2A0A:  MOVLB  0
2A0C:  BRA    2834
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
2A0E:  MOVLB  5
2A10:  MOVF   x40,W
2A12:  MULLW  1B
2A14:  MOVF   FF3,W
2A16:  ADDWF  x3E,W
2A18:  MOVWF  x4A
2A1A:  MOVF   x40,W
2A1C:  MULLW  08
2A1E:  MOVF   FF3,W
2A20:  ADDWF  x3F,W
2A22:  MOVWF  x4B
2A24:  MOVFF  53E,54C
2A28:  MOVFF  53F,54D
2A2C:  MOVFF  54A,54E
2A30:  MOVWF  x4F
2A32:  MOVLW  01
2A34:  MOVWF  x50
2A36:  CLRF   x51
2A38:  MOVLB  0
2A3A:  CALL   172A
....................    /*glcd_rect(x, y, x+53, y+15, YES, ON);*/glcd_text57(x, y, voltage, w, ON); 
2A3E:  MOVFF  53E,54B
2A42:  MOVFF  53F,54C
2A46:  MOVLW  05
2A48:  MOVLB  5
2A4A:  MOVWF  x4E
2A4C:  MOVLW  41
2A4E:  MOVWF  x4D
2A50:  MOVFF  540,54F
2A54:  MOVLW  01
2A56:  MOVWF  x50
2A58:  MOVLB  0
2A5A:  CALL   1434
.................... } 
2A5E:  GOTO   6484 (RETURN)
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1124:  MOVLB  5
1126:  RLCF   x3A,W
1128:  MOVWF  00
112A:  RLCF   00,F
112C:  MOVLW  FC
112E:  ANDWF  00,F
1130:  MOVFF  00,01
1134:  MOVF   FC2,W
1136:  ANDLW  C3
1138:  IORWF  00,W
113A:  MOVWF  FC2
113C:  MOVLW  0A
113E:  MOVWF  x3F
1140:  MOVLB  0
1142:  RCALL  10C4
1144:  BSF    FC2.1
1146:  BTFSC  FC2.1
1148:  BRA    1146
114A:  MOVFF  FC4,540
114E:  MOVFF  FC3,53F
1152:  MOVLB  0
1154:  RCALL  10EE
1156:  MOVFF  03,53E
115A:  MOVFF  02,53D
115E:  MOVFF  01,53C
1162:  MOVFF  00,53B
1166:  MOVFF  53B,00
116A:  MOVFF  53C,01
116E:  MOVFF  53D,02
1172:  MOVFF  53E,03
.................... } 
1176:  GOTO   2D5E (RETURN)
....................  
.................... void MuestraTiemposProgramados(){ 
.................... // Muestra Valor de esterilizacion programado. 
....................    displayTiempo(Testerilizacionp[3],36,0,0,1);displayTiempo(Testerilizacionp[2],42,0,0,1); 
*
2514:  MOVFF  4AB,53B
2518:  MOVLW  24
251A:  MOVLB  5
251C:  MOVWF  x3C
251E:  CLRF   x3D
2520:  CLRF   x3E
2522:  MOVLW  01
2524:  MOVWF  x3F
2526:  MOVLB  0
2528:  RCALL  23C4
252A:  MOVFF  4AA,53B
252E:  MOVLW  2A
2530:  MOVLB  5
2532:  MOVWF  x3C
2534:  CLRF   x3D
2536:  CLRF   x3E
2538:  MOVLW  01
253A:  MOVWF  x3F
253C:  MOVLB  0
253E:  RCALL  23C4
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,0,2,1);  
2540:  MOVLW  05
2542:  MOVWF  FEA
2544:  MOVLW  1A
2546:  MOVWF  FE9
2548:  MOVFF  FF2,53A
254C:  BCF    FF2.7
254E:  MOVLW  00
2550:  CALL   06CA
2554:  TBLRD*-
2556:  TBLRD*+
2558:  MOVF   FF5,W
255A:  MOVWF  FEE
255C:  IORLW  00
255E:  BNZ   2556
2560:  MOVLB  5
2562:  BTFSC  x3A.7
2564:  BSF    FF2.7
2566:  MOVLW  05
2568:  MOVWF  x3B
256A:  MOVLW  1A
256C:  MOVWF  x3A
256E:  MOVLW  31
2570:  MOVWF  x3C
2572:  CLRF   x3D
2574:  MOVLW  02
2576:  MOVWF  x3E
2578:  MOVLW  01
257A:  MOVWF  x3F
257C:  MOVLB  0
257E:  CALL   17EC
....................    displayTiempo(Testerilizacionp[1],54,0,0,1);displayTiempo(Testerilizacionp[0],60,0,0,1); 
2582:  MOVFF  4A9,53B
2586:  MOVLW  36
2588:  MOVLB  5
258A:  MOVWF  x3C
258C:  CLRF   x3D
258E:  CLRF   x3E
2590:  MOVLW  01
2592:  MOVWF  x3F
2594:  MOVLB  0
2596:  RCALL  23C4
2598:  MOVFF  4A8,53B
259C:  MOVLW  3C
259E:  MOVLB  5
25A0:  MOVWF  x3C
25A2:  CLRF   x3D
25A4:  CLRF   x3E
25A6:  MOVLW  01
25A8:  MOVWF  x3F
25AA:  MOVLB  0
25AC:  RCALL  23C4
.................... // Muestra tiempo de secado programado. 
....................    displayTiempo(Tsecadop[3],36,8,0,1);displayTiempo(Tsecadop[2],42,8,0,1); 
25AE:  MOVFF  4B3,53B
25B2:  MOVLW  24
25B4:  MOVLB  5
25B6:  MOVWF  x3C
25B8:  MOVLW  08
25BA:  MOVWF  x3D
25BC:  CLRF   x3E
25BE:  MOVLW  01
25C0:  MOVWF  x3F
25C2:  MOVLB  0
25C4:  RCALL  23C4
25C6:  MOVFF  4B2,53B
25CA:  MOVLW  2A
25CC:  MOVLB  5
25CE:  MOVWF  x3C
25D0:  MOVLW  08
25D2:  MOVWF  x3D
25D4:  CLRF   x3E
25D6:  MOVLW  01
25D8:  MOVWF  x3F
25DA:  MOVLB  0
25DC:  RCALL  23C4
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,8,2,1);  
25DE:  MOVLW  05
25E0:  MOVWF  FEA
25E2:  MOVLW  1A
25E4:  MOVWF  FE9
25E6:  MOVFF  FF2,53A
25EA:  BCF    FF2.7
25EC:  MOVLW  00
25EE:  CALL   06CA
25F2:  TBLRD*-
25F4:  TBLRD*+
25F6:  MOVF   FF5,W
25F8:  MOVWF  FEE
25FA:  IORLW  00
25FC:  BNZ   25F4
25FE:  MOVLB  5
2600:  BTFSC  x3A.7
2602:  BSF    FF2.7
2604:  MOVLW  05
2606:  MOVWF  x3B
2608:  MOVLW  1A
260A:  MOVWF  x3A
260C:  MOVLW  31
260E:  MOVWF  x3C
2610:  MOVLW  08
2612:  MOVWF  x3D
2614:  MOVLW  02
2616:  MOVWF  x3E
2618:  MOVLW  01
261A:  MOVWF  x3F
261C:  MOVLB  0
261E:  CALL   17EC
....................    displayTiempo(Tsecadop[1],54,8,0,1);displayTiempo(Tsecadop[0],60,8,0,1); 
2622:  MOVFF  4B1,53B
2626:  MOVLW  36
2628:  MOVLB  5
262A:  MOVWF  x3C
262C:  MOVLW  08
262E:  MOVWF  x3D
2630:  CLRF   x3E
2632:  MOVLW  01
2634:  MOVWF  x3F
2636:  MOVLB  0
2638:  RCALL  23C4
263A:  MOVFF  4B0,53B
263E:  MOVLW  3C
2640:  MOVLB  5
2642:  MOVWF  x3C
2644:  MOVLW  08
2646:  MOVWF  x3D
2648:  CLRF   x3E
264A:  MOVLW  01
264C:  MOVWF  x3F
264E:  MOVLB  0
2650:  RCALL  23C4
.................... } 
2652:  RETLW  00
....................  
.................... void Leer_Sensor(int media) 
.................... { 
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    V0 = V0/39.40; 
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
....................    Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>media-1) 
....................    {l=0;} 
....................    promedio[l]=Temperature;l++; 
....................           
....................    for(h=0;h<=(media-1);h++) 
....................    { 
....................       Prom+=promedio[h]; 
....................    }  
....................    Prom=Prom/media;    
....................    Prom+=((float)Ajuste-(float)Ajusten); 
....................     
....................    //return Prom; 
.................... } 
....................  
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
1A12:  MOVLW  05
1A14:  MOVLB  5
1A16:  MOVWF  x39
1A18:  MOVLW  40
1A1A:  MOVWF  x38
1A1C:  MOVFF  53C,549
1A20:  MOVLW  1F
1A22:  MOVWF  x4A
1A24:  MOVLB  0
1A26:  BRA    1932
....................     
....................    if(sombreado==1) 
1A28:  MOVLB  5
1A2A:  DECFSZ x3F,W
1A2C:  BRA    1A7C
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
1A2E:  MOVLW  12
1A30:  ADDWF  x3D,W
1A32:  MOVWF  x49
1A34:  MOVLW  18
1A36:  ADDWF  x3E,W
1A38:  MOVWF  x4A
1A3A:  MOVFF  53D,54C
1A3E:  MOVFF  53E,54D
1A42:  MOVFF  549,54E
1A46:  MOVWF  x4F
1A48:  MOVLW  01
1A4A:  MOVWF  x50
1A4C:  MOVWF  x51
1A4E:  MOVLB  0
1A50:  RCALL  172A
1A52:  MOVLW  02
1A54:  MOVLB  5
1A56:  ADDWF  x3D,W
1A58:  MOVWF  x49
1A5A:  MOVLW  01
1A5C:  ADDWF  x3E,W
1A5E:  MOVWF  x4A
1A60:  MOVFF  549,54B
1A64:  MOVWF  x4C
1A66:  MOVLW  05
1A68:  MOVWF  x4E
1A6A:  MOVLW  40
1A6C:  MOVWF  x4D
1A6E:  MOVLW  02
1A70:  MOVWF  x4F
1A72:  CLRF   x50
1A74:  MOVLB  0
1A76:  RCALL  1434
....................    else    
1A78:  BRA    1AC6
1A7A:  MOVLB  5
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
1A7C:  MOVLW  12
1A7E:  ADDWF  x3D,W
1A80:  MOVWF  x49
1A82:  MOVLW  18
1A84:  ADDWF  x3E,W
1A86:  MOVWF  x4A
1A88:  MOVFF  53D,54C
1A8C:  MOVFF  53E,54D
1A90:  MOVFF  549,54E
1A94:  MOVWF  x4F
1A96:  CLRF   x50
1A98:  CLRF   x51
1A9A:  MOVLB  0
1A9C:  RCALL  172A
1A9E:  MOVLW  02
1AA0:  MOVLB  5
1AA2:  ADDWF  x3D,W
1AA4:  MOVWF  x49
1AA6:  MOVLW  01
1AA8:  ADDWF  x3E,W
1AAA:  MOVWF  x4A
1AAC:  MOVFF  549,54B
1AB0:  MOVWF  x4C
1AB2:  MOVLW  05
1AB4:  MOVWF  x4E
1AB6:  MOVLW  40
1AB8:  MOVWF  x4D
1ABA:  MOVLW  02
1ABC:  MOVWF  x4F
1ABE:  MOVLW  01
1AC0:  MOVWF  x50
1AC2:  MOVLB  0
1AC4:  RCALL  1434
....................  
.................... } 
1AC6:  RETLW  00
....................  
.................... void main() 
.................... { 
*
2B1A:  CLRF   FF8
2B1C:  BCF    FD0.7
2B1E:  BSF    07.7
2B20:  CLRF   FEA
2B22:  CLRF   FE9
2B24:  BCF    FB8.3
2B26:  MOVLW  19
2B28:  MOVWF  FAF
2B2A:  MOVLW  A6
2B2C:  MOVWF  FAC
2B2E:  MOVLW  90
2B30:  MOVWF  FAB
2B32:  MOVLB  4
2B34:  CLRF   x70
2B36:  MOVLW  01
2B38:  MOVWF  x71
2B3A:  CLRF   x72
2B3C:  CLRF   x73
2B3E:  CLRF   x74
2B40:  CLRF   x75
2B42:  CLRF   x76
2B44:  CLRF   x77
2B46:  CLRF   x78
2B48:  CLRF   x79
2B4A:  CLRF   x7A
2B4C:  CLRF   x7B
2B4E:  BCF    x7C.0
2B50:  BCF    x7C.1
2B52:  BCF    x7C.2
2B54:  BCF    x7C.3
2B56:  BSF    x7C.4
2B58:  BCF    x7C.5
2B5A:  BCF    x7C.6
2B5C:  BCF    x7C.7
2B5E:  BCF    x7D.0
2B60:  BCF    x7D.1
2B62:  BCF    x7D.2
2B64:  BCF    x7D.3
2B66:  BCF    x7D.4
2B68:  BCF    x7D.5
2B6A:  BCF    x7D.6
2B6C:  BCF    x7D.7
2B6E:  BCF    x7E.0
2B70:  BCF    x7E.1
2B72:  BCF    x7E.2
2B74:  BCF    x7E.3
2B76:  BCF    x7E.4
2B78:  BCF    x7E.5
2B7A:  BCF    x7E.6
2B7C:  CLRF   x7F
2B7E:  CLRF   x80
2B80:  CLRF   x81
2B82:  CLRF   x82
2B84:  CLRF   x83
2B86:  CLRF   x84
2B88:  CLRF   x85
2B8A:  CLRF   x86
2B8C:  CLRF   x87
2B8E:  CLRF   x88
2B90:  CLRF   x89
2B92:  MOVWF  x8A
2B94:  CLRF   x8B
2B96:  CLRF   x8C
2B98:  CLRF   x8D
2B9A:  CLRF   x8E
2B9C:  CLRF   x8F
2B9E:  MOVWF  x90
2BA0:  CLRF   x91
2BA2:  CLRF   x92
2BA4:  CLRF   x93
2BA6:  CLRF   x95
2BA8:  CLRF   x94
2BAA:  CLRF   x97
2BAC:  CLRF   x96
2BAE:  CLRF   x99
2BB0:  CLRF   x98
2BB2:  CLRF   x9B
2BB4:  MOVLW  0F
2BB6:  MOVWF  x9A
2BB8:  CLRF   x9D
2BBA:  CLRF   x9C
2BBC:  CLRF   x9F
2BBE:  CLRF   x9E
2BC0:  CLRF   xA3
2BC2:  CLRF   xA2
2BC4:  CLRF   xA1
2BC6:  CLRF   xA0
2BC8:  CLRF   xE9
2BCA:  CLRF   xE8
2BCC:  CLRF   xE7
2BCE:  CLRF   xE6
2BD0:  CLRF   xED
2BD2:  MOVLW  20
2BD4:  MOVWF  xEC
2BD6:  MOVLW  41
2BD8:  MOVWF  xEB
2BDA:  MOVLW  8B
2BDC:  MOVWF  xEA
2BDE:  CLRF   xF5
2BE0:  CLRF   xF4
2BE2:  MOVLW  20
2BE4:  MOVWF  xF3
2BE6:  MOVLW  82
2BE8:  MOVWF  xF2
2BEA:  CLRF   xF9
2BEC:  CLRF   xF8
2BEE:  CLRF   xF7
2BF0:  CLRF   xF6
2BF2:  CLRF   xFD
2BF4:  CLRF   xFC
2BF6:  CLRF   xFB
2BF8:  CLRF   xFA
2BFA:  MOVLB  5
2BFC:  CLRF   x01
2BFE:  CLRF   x00
2C00:  MOVLB  4
2C02:  CLRF   xFF
2C04:  CLRF   xFE
2C06:  MOVLB  5
2C08:  CLRF   x05
2C0A:  CLRF   x04
2C0C:  CLRF   x03
2C0E:  CLRF   x02
2C10:  CLRF   x09
2C12:  CLRF   x08
2C14:  CLRF   x07
2C16:  CLRF   x06
2C18:  CLRF   x0D
2C1A:  CLRF   x0C
2C1C:  MOVLW  48
2C1E:  MOVWF  x0B
2C20:  MOVLW  83
2C22:  MOVWF  x0A
2C24:  CLRF   x11
2C26:  CLRF   x10
2C28:  MOVLW  20
2C2A:  MOVWF  x0F
2C2C:  MOVLW  83
2C2E:  MOVWF  x0E
2C30:  CLRF   x15
2C32:  CLRF   x14
2C34:  CLRF   x13
2C36:  CLRF   x12
2C38:  CLRF   x19
2C3A:  CLRF   x18
2C3C:  CLRF   x17
2C3E:  CLRF   x16
2C40:  MOVF   FC1,W
2C42:  ANDLW  C0
2C44:  IORLW  0F
2C46:  MOVWF  FC1
2C48:  MOVLW  07
2C4A:  MOVWF  FB4
2C4C:  CLRF   16
2C4E:  CLRF   17
2C50:  MOVLW  6B
2C52:  MOVLB  4
2C54:  MOVWF  x1C
2C56:  MOVLW  50
2C58:  MOVWF  x1D
2C5A:  MOVLW  61
2C5C:  MOVWF  x1E
2C5E:  CLRF   x1F
2C60:  CLRF   x20
2C62:  CLRF   x21
2C64:  CLRF   x22
2C66:  CLRF   x23
2C68:  CLRF   x24
2C6A:  CLRF   x25
2C6C:  CLRF   x26
2C6E:  CLRF   x27
2C70:  CLRF   x28
2C72:  CLRF   x29
2C74:  CLRF   x2A
2C76:  CLRF   x2B
2C78:  CLRF   x2C
2C7A:  CLRF   x2D
2C7C:  CLRF   x2E
2C7E:  CLRF   x2F
2C80:  CLRF   x30
2C82:  CLRF   x31
2C84:  CLRF   x32
2C86:  CLRF   x33
2C88:  CLRF   x34
2C8A:  CLRF   x35
2C8C:  CLRF   x36
2C8E:  CLRF   x37
2C90:  CLRF   x38
2C92:  CLRF   x39
2C94:  CLRF   x3A
2C96:  CLRF   x3B
2C98:  CLRF   x3C
2C9A:  CLRF   x3D
2C9C:  CLRF   x3E
2C9E:  CLRF   x3F
2CA0:  CLRF   x40
2CA2:  CLRF   x41
2CA4:  CLRF   x42
2CA6:  CLRF   x43
2CA8:  CLRF   x44
2CAA:  CLRF   x45
2CAC:  CLRF   x46
2CAE:  CLRF   x47
2CB0:  CLRF   x48
2CB2:  CLRF   x49
2CB4:  CLRF   x4A
2CB6:  CLRF   x4B
2CB8:  CLRF   x4C
2CBA:  CLRF   x4D
2CBC:  CLRF   x4E
2CBE:  CLRF   x4F
2CC0:  CLRF   x50
2CC2:  CLRF   x51
2CC4:  CLRF   x52
2CC6:  CLRF   x53
2CC8:  CLRF   x54
2CCA:  CLRF   x55
2CCC:  CLRF   x56
2CCE:  CLRF   x57
2CD0:  CLRF   x58
2CD2:  CLRF   x59
2CD4:  CLRF   x5A
2CD6:  CLRF   x5B
2CD8:  CLRF   x5C
2CDA:  CLRF   x5D
2CDC:  CLRF   x5E
2CDE:  CLRF   x5F
2CE0:  CLRF   x60
2CE2:  CLRF   x61
2CE4:  CLRF   x62
2CE6:  CLRF   x63
2CE8:  CLRF   x64
2CEA:  CLRF   x65
2CEC:  CLRF   x66
2CEE:  CLRF   x67
2CF0:  CLRF   x68
2CF2:  CLRF   x69
2CF4:  CLRF   x6A
2CF6:  CLRF   x6B
2CF8:  CLRF   x6C
2CFA:  CLRF   x6D
2CFC:  CLRF   x6E
2CFE:  CLRF   x6F
2D00:  CLRF   xA4
2D02:  CLRF   xA5
2D04:  CLRF   xA6
2D06:  CLRF   xA7
2D08:  CLRF   xA8
2D0A:  CLRF   xA9
2D0C:  CLRF   xAA
2D0E:  CLRF   xAB
2D10:  CLRF   xAC
2D12:  CLRF   xAD
2D14:  CLRF   xAE
2D16:  CLRF   xAF
2D18:  CLRF   xB0
2D1A:  CLRF   xB1
2D1C:  CLRF   xB2
2D1E:  CLRF   xB3
2D20:  CLRF   xB4
2D22:  CLRF   xB5
2D24:  CLRF   xB6
2D26:  CLRF   xB7
2D28:  CLRF   xB8
2D2A:  CLRF   xB9
2D2C:  CLRF   xBA
2D2E:  CLRF   xBB
2D30:  CLRF   xE3
2D32:  CLRF   xE4
2D34:  CLRF   xE5
2D36:  MOVLB  5
2D38:  CLRF   x38
2D3A:  CLRF   x39
....................    enable_interrupts(INT_RDA);      //Habilita interrupción por recepción RS23    
2D3C:  BSF    F9D.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2D3E:  MOVLW  85
2D40:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2D42:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN3); 
2D44:  MOVF   FC1,W
2D46:  ANDLW  C0
2D48:  IORLW  0B
2D4A:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2D4C:  BCF    FC0.0
2D4E:  BSF    FC0.1
2D50:  BCF    FC0.2
2D52:  BSF    FC0.7
2D54:  BSF    FC2.0
....................    sensores(0); 
2D56:  CLRF   x3A
2D58:  MOVLB  0
2D5A:  GOTO   1124
....................    output_d(0);    
2D5E:  CLRF   F95
2D60:  CLRF   F8C
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
2D62:  MOVFF  FF2,53A
2D66:  BCF    FF2.7
2D68:  CLRF   FA9
2D6A:  BCF    FA6.6
2D6C:  BCF    FA6.7
2D6E:  BSF    FA6.0
2D70:  MOVF   FA8,W
2D72:  MOVLB  5
2D74:  BTFSC  x3A.7
2D76:  BSF    FF2.7
2D78:  MOVLB  4
2D7A:  MOVWF  xA8
2D7C:  MOVFF  FF2,53A
2D80:  BCF    FF2.7
2D82:  MOVLW  01
2D84:  MOVWF  FA9
2D86:  BCF    FA6.6
2D88:  BCF    FA6.7
2D8A:  BSF    FA6.0
2D8C:  MOVF   FA8,W
2D8E:  MOVLB  5
2D90:  BTFSC  x3A.7
2D92:  BSF    FF2.7
2D94:  MOVLB  4
2D96:  MOVWF  xA9
2D98:  MOVFF  FF2,53A
2D9C:  BCF    FF2.7
2D9E:  MOVLW  02
2DA0:  MOVWF  FA9
2DA2:  BCF    FA6.6
2DA4:  BCF    FA6.7
2DA6:  BSF    FA6.0
2DA8:  MOVF   FA8,W
2DAA:  MOVLB  5
2DAC:  BTFSC  x3A.7
2DAE:  BSF    FF2.7
2DB0:  MOVLB  4
2DB2:  MOVWF  xAA
2DB4:  MOVFF  FF2,53A
2DB8:  BCF    FF2.7
2DBA:  MOVLW  03
2DBC:  MOVWF  FA9
2DBE:  BCF    FA6.6
2DC0:  BCF    FA6.7
2DC2:  BSF    FA6.0
2DC4:  MOVF   FA8,W
2DC6:  MOVLB  5
2DC8:  BTFSC  x3A.7
2DCA:  BSF    FF2.7
2DCC:  MOVLB  4
2DCE:  MOVWF  xAB
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
2DD0:  MOVFF  FF2,53A
2DD4:  BCF    FF2.7
2DD6:  MOVLW  04
2DD8:  MOVWF  FA9
2DDA:  BCF    FA6.6
2DDC:  BCF    FA6.7
2DDE:  BSF    FA6.0
2DE0:  MOVF   FA8,W
2DE2:  MOVLB  5
2DE4:  BTFSC  x3A.7
2DE6:  BSF    FF2.7
2DE8:  MOVLB  4
2DEA:  MOVWF  xB0
2DEC:  MOVFF  FF2,53A
2DF0:  BCF    FF2.7
2DF2:  MOVLW  05
2DF4:  MOVWF  FA9
2DF6:  BCF    FA6.6
2DF8:  BCF    FA6.7
2DFA:  BSF    FA6.0
2DFC:  MOVF   FA8,W
2DFE:  MOVLB  5
2E00:  BTFSC  x3A.7
2E02:  BSF    FF2.7
2E04:  MOVLB  4
2E06:  MOVWF  xB1
2E08:  MOVFF  FF2,53A
2E0C:  BCF    FF2.7
2E0E:  MOVLW  06
2E10:  MOVWF  FA9
2E12:  BCF    FA6.6
2E14:  BCF    FA6.7
2E16:  BSF    FA6.0
2E18:  MOVF   FA8,W
2E1A:  MOVLB  5
2E1C:  BTFSC  x3A.7
2E1E:  BSF    FF2.7
2E20:  MOVLB  4
2E22:  MOVWF  xB2
2E24:  MOVFF  FF2,53A
2E28:  BCF    FF2.7
2E2A:  MOVLW  07
2E2C:  MOVWF  FA9
2E2E:  BCF    FA6.6
2E30:  BCF    FA6.7
2E32:  BSF    FA6.0
2E34:  MOVF   FA8,W
2E36:  MOVLB  5
2E38:  BTFSC  x3A.7
2E3A:  BSF    FF2.7
2E3C:  MOVLB  4
2E3E:  MOVWF  xB3
2E40:  MOVFF  FF2,53A
2E44:  BCF    FF2.7
2E46:  MOVLW  08
2E48:  MOVWF  FA9
2E4A:  BCF    FA6.6
2E4C:  BCF    FA6.7
2E4E:  BSF    FA6.0
2E50:  MOVF   FA8,W
2E52:  MOVLB  5
2E54:  BTFSC  x3A.7
2E56:  BSF    FF2.7
2E58:  MOVLB  4
2E5A:  MOVWF  x8E
....................    Nivel=read_eeprom(9); 
2E5C:  MOVFF  FF2,53A
2E60:  BCF    FF2.7
2E62:  MOVLW  09
2E64:  MOVWF  FA9
2E66:  BCF    FA6.6
2E68:  BCF    FA6.7
2E6A:  BSF    FA6.0
2E6C:  MOVF   FA8,W
2E6E:  MOVLB  5
2E70:  BTFSC  x3A.7
2E72:  BSF    FF2.7
2E74:  MOVLB  4
2E76:  CLRF   x9D
2E78:  MOVWF  x9C
....................    Password[0]=read_eeprom(10);Password[1]=read_eeprom(11);Password[2]=read_eeprom(12);Password[3]=read_eeprom(13); 
2E7A:  MOVFF  FF2,53A
2E7E:  BCF    FF2.7
2E80:  MOVLW  0A
2E82:  MOVWF  FA9
2E84:  BCF    FA6.6
2E86:  BCF    FA6.7
2E88:  BSF    FA6.0
2E8A:  MOVF   FA8,W
2E8C:  MOVLB  5
2E8E:  BTFSC  x3A.7
2E90:  BSF    FF2.7
2E92:  MOVLB  4
2E94:  MOVWF  xB8
2E96:  MOVFF  FF2,53A
2E9A:  BCF    FF2.7
2E9C:  MOVLW  0B
2E9E:  MOVWF  FA9
2EA0:  BCF    FA6.6
2EA2:  BCF    FA6.7
2EA4:  BSF    FA6.0
2EA6:  MOVF   FA8,W
2EA8:  MOVLB  5
2EAA:  BTFSC  x3A.7
2EAC:  BSF    FF2.7
2EAE:  MOVLB  4
2EB0:  MOVWF  xB9
2EB2:  MOVFF  FF2,53A
2EB6:  BCF    FF2.7
2EB8:  MOVLW  0C
2EBA:  MOVWF  FA9
2EBC:  BCF    FA6.6
2EBE:  BCF    FA6.7
2EC0:  BSF    FA6.0
2EC2:  MOVF   FA8,W
2EC4:  MOVLB  5
2EC6:  BTFSC  x3A.7
2EC8:  BSF    FF2.7
2ECA:  MOVLB  4
2ECC:  MOVWF  xBA
2ECE:  MOVFF  FF2,53A
2ED2:  BCF    FF2.7
2ED4:  MOVLW  0D
2ED6:  MOVWF  FA9
2ED8:  BCF    FA6.6
2EDA:  BCF    FA6.7
2EDC:  BSF    FA6.0
2EDE:  MOVF   FA8,W
2EE0:  MOVLB  5
2EE2:  BTFSC  x3A.7
2EE4:  BSF    FF2.7
2EE6:  MOVLB  4
2EE8:  MOVWF  xBB
....................    enable_interrupts(global); 
2EEA:  MOVLW  C0
2EEC:  IORWF  FF2,F
....................    //Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12);Ajuste=read_eeprom(13);Ajusten=read_eeprom(14); 
....................    //Ganancia2=read_eeprom(15);Minutos=read_eeprom(20);  
....................     
....................    glcd_init(ON);             //Inicializa la glcd 
2EEE:  MOVLW  01
2EF0:  MOVLB  5
2EF2:  MOVWF  x3A
2EF4:  MOVLB  0
2EF6:  GOTO   12CE
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2EFA:  MOVLB  5
2EFC:  CLRF   x3B
2EFE:  MOVLB  0
2F00:  CALL   11BC
....................    strcpy(Menus.Letra,"JP Inglobal"); 
2F04:  MOVLW  05
2F06:  MOVWF  FEA
2F08:  MOVLW  1A
2F0A:  MOVWF  FE9
2F0C:  MOVFF  FF2,53A
2F10:  BCF    FF2.7
2F12:  MOVLW  00
2F14:  CALL   06E6
2F18:  TBLRD*-
2F1A:  TBLRD*+
2F1C:  MOVF   FF5,W
2F1E:  MOVWF  FEE
2F20:  IORLW  00
2F22:  BNZ   2F1A
2F24:  MOVLB  5
2F26:  BTFSC  x3A.7
2F28:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,0,0,2);      
2F2A:  MOVLW  05
2F2C:  MOVWF  x3B
2F2E:  MOVLW  1A
2F30:  MOVWF  x3A
2F32:  CLRF   x3C
2F34:  CLRF   x3D
2F36:  CLRF   x3E
2F38:  MOVLW  02
2F3A:  MOVWF  x3F
2F3C:  MOVLB  0
2F3E:  CALL   17EC
....................    strcpy(Menus.Letra,"Autoclave Horizontal"); 
2F42:  MOVLW  05
2F44:  MOVWF  FEA
2F46:  MOVLW  1A
2F48:  MOVWF  FE9
2F4A:  MOVFF  FF2,53A
2F4E:  BCF    FF2.7
2F50:  MOVLW  00
2F52:  CALL   070C
2F56:  TBLRD*-
2F58:  TBLRD*+
2F5A:  MOVF   FF5,W
2F5C:  MOVWF  FEE
2F5E:  IORLW  00
2F60:  BNZ   2F58
2F62:  MOVLB  5
2F64:  BTFSC  x3A.7
2F66:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,20,0,1);        
2F68:  MOVLW  05
2F6A:  MOVWF  x3B
2F6C:  MOVLW  1A
2F6E:  MOVWF  x3A
2F70:  CLRF   x3C
2F72:  MOVLW  14
2F74:  MOVWF  x3D
2F76:  CLRF   x3E
2F78:  MOVLW  01
2F7A:  MOVWF  x3F
2F7C:  MOVLB  0
2F7E:  CALL   17EC
....................    strcpy(Menus.Letra," 23 Litros  "); 
2F82:  MOVLW  05
2F84:  MOVWF  FEA
2F86:  MOVLW  1A
2F88:  MOVWF  FE9
2F8A:  MOVFF  FF2,53A
2F8E:  BCF    FF2.7
2F90:  MOVLW  00
2F92:  CALL   073C
2F96:  TBLRD*-
2F98:  TBLRD*+
2F9A:  MOVF   FF5,W
2F9C:  MOVWF  FEE
2F9E:  IORLW  00
2FA0:  BNZ   2F98
2FA2:  MOVLB  5
2FA4:  BTFSC  x3A.7
2FA6:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,35,0,2); 
2FA8:  MOVLW  05
2FAA:  MOVWF  x3B
2FAC:  MOVLW  1A
2FAE:  MOVWF  x3A
2FB0:  CLRF   x3C
2FB2:  MOVLW  23
2FB4:  MOVWF  x3D
2FB6:  CLRF   x3E
2FB8:  MOVLW  02
2FBA:  MOVWF  x3F
2FBC:  MOVLB  0
2FBE:  CALL   17EC
....................    delay_ms(1000); 
2FC2:  MOVLW  04
2FC4:  MOVLB  5
2FC6:  MOVWF  x3A
2FC8:  MOVLW  FA
2FCA:  MOVWF  x3F
2FCC:  MOVLB  0
2FCE:  CALL   10C4
2FD2:  MOVLB  5
2FD4:  DECFSZ x3A,F
2FD6:  BRA    2FC8
....................    delay_ms(1000); 
2FD8:  MOVLW  04
2FDA:  MOVWF  x3A
2FDC:  MOVLW  FA
2FDE:  MOVWF  x3F
2FE0:  MOVLB  0
2FE2:  CALL   10C4
2FE6:  MOVLB  5
2FE8:  DECFSZ x3A,F
2FEA:  BRA    2FDC
....................     
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2FEC:  CLRF   x3B
2FEE:  MOVLB  0
2FF0:  CALL   11BC
....................    displayContrasena(Contrasena[0],20,30,1); 
2FF4:  MOVFF  4B4,53C
2FF8:  MOVLW  14
2FFA:  MOVLB  5
2FFC:  MOVWF  x3D
2FFE:  MOVLW  1E
3000:  MOVWF  x3E
3002:  MOVLW  01
3004:  MOVWF  x3F
3006:  MOVLB  0
3008:  CALL   1A12
....................    displayContrasena(Contrasena[1],40,30,0); 
300C:  MOVFF  4B5,53C
3010:  MOVLW  28
3012:  MOVLB  5
3014:  MOVWF  x3D
3016:  MOVLW  1E
3018:  MOVWF  x3E
301A:  CLRF   x3F
301C:  MOVLB  0
301E:  CALL   1A12
....................    displayContrasena(Contrasena[2],60,30,0); 
3022:  MOVFF  4B6,53C
3026:  MOVLW  3C
3028:  MOVLB  5
302A:  MOVWF  x3D
302C:  MOVLW  1E
302E:  MOVWF  x3E
3030:  CLRF   x3F
3032:  MOVLB  0
3034:  CALL   1A12
....................    displayContrasena(Contrasena[3],80,30,0); 
3038:  MOVFF  4B7,53C
303C:  MOVLW  50
303E:  MOVLB  5
3040:  MOVWF  x3D
3042:  MOVLW  1E
3044:  MOVWF  x3E
3046:  CLRF   x3F
3048:  MOVLB  0
304A:  CALL   1A12
....................    EnviarCodigo(); 
304E:  CALL   1AD2
....................    delay_ms(500); 
3052:  MOVLW  02
3054:  MOVLB  5
3056:  MOVWF  x3A
3058:  MOVLW  FA
305A:  MOVWF  x3F
305C:  MOVLB  0
305E:  CALL   10C4
3062:  MOVLB  5
3064:  DECFSZ x3A,F
3066:  BRA    3058
....................    Determina(); 
3068:  MOVLB  0
306A:  CALL   1F2A
....................    delay_ms(500); 
306E:  MOVLW  02
3070:  MOVLB  5
3072:  MOVWF  x3A
3074:  MOVLW  FA
3076:  MOVWF  x3F
3078:  MOVLB  0
307A:  CALL   10C4
307E:  MOVLB  5
3080:  DECFSZ x3A,F
3082:  BRA    3074
....................    Parada=1; 
3084:  MOVLW  01
3086:  MOVLB  4
3088:  MOVWF  x71
....................    while(true) 
....................    { 
....................       glcd_update(); 
308A:  MOVLB  0
308C:  CALL   1216
....................       if(CadenaRecibida==1) 
3090:  MOVLB  4
3092:  BTFSS  x7D.3
3094:  BRA    30A4
....................       { 
....................          Determina(); 
3096:  MOVLB  0
3098:  CALL   1F2A
....................          EnviarCodigo(); 
309C:  CALL   1AD2
....................          CadenaRecibida=0; 
30A0:  MOVLB  4
30A2:  BCF    x7D.3
....................       } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
30A4:  MOVF   x89,F
30A6:  BTFSS  FD8.2
30A8:  BRA    363E
....................        
....................       strcpy(Menus.Letra,"Clave"); 
30AA:  MOVLW  05
30AC:  MOVWF  FEA
30AE:  MOVLW  1A
30B0:  MOVWF  FE9
30B2:  MOVFF  FF2,53A
30B6:  BCF    FF2.7
30B8:  MOVLW  00
30BA:  MOVLB  0
30BC:  CALL   0764
30C0:  TBLRD*-
30C2:  TBLRD*+
30C4:  MOVF   FF5,W
30C6:  MOVWF  FEE
30C8:  IORLW  00
30CA:  BNZ   30C2
30CC:  MOVLB  5
30CE:  BTFSC  x3A.7
30D0:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
30D2:  MOVLW  05
30D4:  MOVWF  x3B
30D6:  MOVLW  1A
30D8:  MOVWF  x3A
30DA:  MOVLW  1E
30DC:  MOVWF  x3C
30DE:  CLRF   x3D
30E0:  MOVLW  01
30E2:  MOVWF  x3E
30E4:  MOVLW  02
30E6:  MOVWF  x3F
30E8:  MOVLB  0
30EA:  CALL   17EC
....................        
....................       if(UP)//Si oprime hacia arriba 
30EE:  BSF    F92.5
30F0:  BTFSS  F80.5
30F2:  BRA    31CA
....................       { 
....................          if(Flanco == 0) 
30F4:  MOVLB  4
30F6:  BTFSC  x7C.0
30F8:  BRA    31C8
....................          { 
....................             Flanco = 1;delay_ms(30); 
30FA:  BSF    x7C.0
30FC:  MOVLW  1E
30FE:  MOVLB  5
3100:  MOVWF  x3F
3102:  MOVLB  0
3104:  CALL   10C4
....................             for(i=1;i<=4;i++) 
3108:  MOVLW  01
310A:  MOVLB  4
310C:  MOVWF  x8D
310E:  MOVF   x8D,W
3110:  SUBLW  04
3112:  BNC   31C8
....................             { 
....................                if(unidad==i) 
3114:  MOVF   x8D,W
3116:  SUBWF  x8A,W
3118:  BNZ   3190
....................                { 
....................                   Contrasena[i-1]++; 
311A:  MOVLW  01
311C:  SUBWF  x8D,W
311E:  CLRF   03
3120:  ADDLW  B4
3122:  MOVWF  FE9
3124:  MOVLW  04
3126:  ADDWFC 03,W
3128:  MOVWF  FEA
312A:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
312C:  MOVLW  01
312E:  SUBWF  x8D,W
3130:  CLRF   03
3132:  ADDLW  B4
3134:  MOVWF  FE9
3136:  MOVLW  04
3138:  ADDWFC 03,W
313A:  MOVWF  FEA
313C:  BTFSC  FEF.7
313E:  BRA    3158
3140:  MOVF   FEF,W
3142:  SUBLW  09
3144:  BC    3158
....................                   { 
....................                      Contrasena[i-1]=0; 
3146:  MOVLW  01
3148:  SUBWF  x8D,W
314A:  CLRF   03
314C:  ADDLW  B4
314E:  MOVWF  FE9
3150:  MOVLW  04
3152:  ADDWFC 03,W
3154:  MOVWF  FEA
3156:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
3158:  MOVLW  01
315A:  SUBWF  x8D,W
315C:  CLRF   03
315E:  ADDLW  B4
3160:  MOVWF  FE9
3162:  MOVLW  04
3164:  ADDWFC 03,W
3166:  MOVWF  FEA
3168:  MOVFF  FEF,53A
316C:  MOVF   x8D,W
316E:  MULLW  14
3170:  MOVFF  FF3,53B
3174:  MOVLB  5
3176:  MOVFF  53A,53C
317A:  MOVFF  53B,53D
317E:  MOVLW  1E
3180:  MOVWF  x3E
3182:  MOVLW  01
3184:  MOVWF  x3F
3186:  MOVLB  0
3188:  CALL   1A12
....................                } 
....................                else 
318C:  BRA    31C2
318E:  MOVLB  4
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
3190:  MOVLW  01
3192:  SUBWF  x8D,W
3194:  CLRF   03
3196:  ADDLW  B4
3198:  MOVWF  FE9
319A:  MOVLW  04
319C:  ADDWFC 03,W
319E:  MOVWF  FEA
31A0:  MOVFF  FEF,53A
31A4:  MOVF   x8D,W
31A6:  MULLW  14
31A8:  MOVFF  FF3,53B
31AC:  MOVLB  5
31AE:  MOVFF  53A,53C
31B2:  MOVFF  53B,53D
31B6:  MOVLW  1E
31B8:  MOVWF  x3E
31BA:  CLRF   x3F
31BC:  MOVLB  0
31BE:  CALL   1A12
....................                } 
....................             } 
31C2:  MOVLB  4
31C4:  INCF   x8D,F
31C6:  BRA    310E
....................          } 
....................       } 
....................          else 
31C8:  BRA    31CE
....................             {Flanco = 0;} 
31CA:  MOVLB  4
31CC:  BCF    x7C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31CE:  BSF    F96.0
31D0:  BTFSS  F84.0
31D2:  BRA    32A6
....................       { 
....................          if(Flanco2 == 0) 
31D4:  BTFSC  x7C.2
31D6:  BRA    32A4
....................             {Flanco2 = 1;delay_ms(30); 
31D8:  BSF    x7C.2
31DA:  MOVLW  1E
31DC:  MOVLB  5
31DE:  MOVWF  x3F
31E0:  MOVLB  0
31E2:  CALL   10C4
....................                for(i=1;i<=4;i++) 
31E6:  MOVLW  01
31E8:  MOVLB  4
31EA:  MOVWF  x8D
31EC:  MOVF   x8D,W
31EE:  SUBLW  04
31F0:  BNC   32A4
....................                { 
....................                   if(unidad==i) 
31F2:  MOVF   x8D,W
31F4:  SUBWF  x8A,W
31F6:  BNZ   326C
....................                   {Contrasena[i-1]--;  
31F8:  MOVLW  01
31FA:  SUBWF  x8D,W
31FC:  CLRF   03
31FE:  ADDLW  B4
3200:  MOVWF  FE9
3202:  MOVLW  04
3204:  ADDWFC 03,W
3206:  MOVWF  FEA
3208:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
320A:  MOVLW  01
320C:  SUBWF  x8D,W
320E:  CLRF   03
3210:  ADDLW  B4
3212:  MOVWF  FE9
3214:  MOVLW  04
3216:  ADDWFC 03,W
3218:  MOVWF  FEA
321A:  BTFSC  FEF.7
321C:  BRA    3220
321E:  BRA    3234
....................                         {Contrasena[i-1]=9;} 
3220:  MOVLW  01
3222:  SUBWF  x8D,W
3224:  CLRF   03
3226:  ADDLW  B4
3228:  MOVWF  FE9
322A:  MOVLW  04
322C:  ADDWFC 03,W
322E:  MOVWF  FEA
3230:  MOVLW  09
3232:  MOVWF  FEF
....................                    displayContrasena(Contrasena[i-1],i*20,30,1);} 
3234:  MOVLW  01
3236:  SUBWF  x8D,W
3238:  CLRF   03
323A:  ADDLW  B4
323C:  MOVWF  FE9
323E:  MOVLW  04
3240:  ADDWFC 03,W
3242:  MOVWF  FEA
3244:  MOVFF  FEF,53A
3248:  MOVF   x8D,W
324A:  MULLW  14
324C:  MOVFF  FF3,53B
3250:  MOVLB  5
3252:  MOVFF  53A,53C
3256:  MOVFF  53B,53D
325A:  MOVLW  1E
325C:  MOVWF  x3E
325E:  MOVLW  01
3260:  MOVWF  x3F
3262:  MOVLB  0
3264:  CALL   1A12
....................                   else 
3268:  BRA    329E
326A:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
326C:  MOVLW  01
326E:  SUBWF  x8D,W
3270:  CLRF   03
3272:  ADDLW  B4
3274:  MOVWF  FE9
3276:  MOVLW  04
3278:  ADDWFC 03,W
327A:  MOVWF  FEA
327C:  MOVFF  FEF,53A
3280:  MOVF   x8D,W
3282:  MULLW  14
3284:  MOVFF  FF3,53B
3288:  MOVLB  5
328A:  MOVFF  53A,53C
328E:  MOVFF  53B,53D
3292:  MOVLW  1E
3294:  MOVWF  x3E
3296:  CLRF   x3F
3298:  MOVLB  0
329A:  CALL   1A12
....................                }       
329E:  MOVLB  4
32A0:  INCF   x8D,F
32A2:  BRA    31EC
....................             }      
....................       } 
....................          else 
32A4:  BRA    32A8
....................             {Flanco2 = 0;}   
32A6:  BCF    x7C.2
....................              
....................       if(RIGHT)//Si oprime RIGHT 
32A8:  BSF    F96.1
32AA:  BTFSS  F84.1
32AC:  BRA    3346
....................       { 
....................          if(Flanco1 == 0) 
32AE:  BTFSC  x7C.1
32B0:  BRA    3344
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
32B2:  BSF    x7C.1
32B4:  MOVLW  1E
32B6:  MOVLB  5
32B8:  MOVWF  x3F
32BA:  MOVLB  0
32BC:  CALL   10C4
32C0:  MOVLB  4
32C2:  INCF   x8A,F
....................                for(i=1;i<=4;i++) 
32C4:  MOVLW  01
32C6:  MOVWF  x8D
32C8:  MOVF   x8D,W
32CA:  SUBLW  04
32CC:  BNC   3344
....................                { 
....................                   if(unidad==i) 
32CE:  MOVF   x8D,W
32D0:  SUBWF  x8A,W
32D2:  BNZ   330C
....................                   {displayContrasena(Contrasena[i-1],i*20,30,1);} 
32D4:  MOVLW  01
32D6:  SUBWF  x8D,W
32D8:  CLRF   03
32DA:  ADDLW  B4
32DC:  MOVWF  FE9
32DE:  MOVLW  04
32E0:  ADDWFC 03,W
32E2:  MOVWF  FEA
32E4:  MOVFF  FEF,53A
32E8:  MOVF   x8D,W
32EA:  MULLW  14
32EC:  MOVFF  FF3,53B
32F0:  MOVLB  5
32F2:  MOVFF  53A,53C
32F6:  MOVFF  53B,53D
32FA:  MOVLW  1E
32FC:  MOVWF  x3E
32FE:  MOVLW  01
3300:  MOVWF  x3F
3302:  MOVLB  0
3304:  CALL   1A12
....................                   else 
3308:  BRA    333E
330A:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
330C:  MOVLW  01
330E:  SUBWF  x8D,W
3310:  CLRF   03
3312:  ADDLW  B4
3314:  MOVWF  FE9
3316:  MOVLW  04
3318:  ADDWFC 03,W
331A:  MOVWF  FEA
331C:  MOVFF  FEF,53A
3320:  MOVF   x8D,W
3322:  MULLW  14
3324:  MOVFF  FF3,53B
3328:  MOVLB  5
332A:  MOVFF  53A,53C
332E:  MOVFF  53B,53D
3332:  MOVLW  1E
3334:  MOVWF  x3E
3336:  CLRF   x3F
3338:  MOVLB  0
333A:  CALL   1A12
....................                } 
333E:  MOVLB  4
3340:  INCF   x8D,F
3342:  BRA    32C8
....................             } 
....................       } 
....................          else 
3344:  BRA    3348
....................             {Flanco1 = 0;}   
3346:  BCF    x7C.1
....................      
....................       if(unidad>4) 
3348:  MOVF   x8A,W
334A:  SUBLW  04
334C:  BTFSC  FD8.0
334E:  BRA    363E
....................       {glcd_fillScreen(OFF);unidad=4; 
3350:  MOVLB  5
3352:  CLRF   x3B
3354:  MOVLB  0
3356:  CALL   11BC
335A:  MOVLW  04
335C:  MOVLB  4
335E:  MOVWF  x8A
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
3360:  MOVF   xB4,W
3362:  SUBLW  03
3364:  BNZ   344C
3366:  MOVF   xB5,W
3368:  SUBLW  08
336A:  BNZ   344C
336C:  MOVF   xB6,W
336E:  SUBLW  09
3370:  BNZ   344C
3372:  MOVF   xB7,W
3374:  SUBLW  02
3376:  BNZ   344C
....................             {write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
3378:  MOVLW  0A
337A:  MOVWF  FA9
337C:  CLRF   FA8
337E:  BCF    FA6.6
3380:  BCF    FA6.7
3382:  BSF    FA6.2
3384:  MOVF   FF2,W
3386:  MOVWF  00
3388:  BCF    FF2.7
338A:  MOVLB  F
338C:  MOVLW  55
338E:  MOVWF  FA7
3390:  MOVLW  AA
3392:  MOVWF  FA7
3394:  BSF    FA6.1
3396:  BTFSC  FA6.1
3398:  BRA    3396
339A:  BCF    FA6.2
339C:  MOVF   00,W
339E:  IORWF  FF2,F
33A0:  MOVLW  14
33A2:  MOVLB  5
33A4:  MOVWF  x3F
33A6:  MOVLB  0
33A8:  CALL   10C4
33AC:  MOVLW  0B
33AE:  MOVWF  FA9
33B0:  CLRF   FA8
33B2:  BCF    FA6.6
33B4:  BCF    FA6.7
33B6:  BSF    FA6.2
33B8:  MOVF   FF2,W
33BA:  MOVWF  00
33BC:  BCF    FF2.7
33BE:  MOVLB  F
33C0:  MOVLW  55
33C2:  MOVWF  FA7
33C4:  MOVLW  AA
33C6:  MOVWF  FA7
33C8:  BSF    FA6.1
33CA:  BTFSC  FA6.1
33CC:  BRA    33CA
33CE:  BCF    FA6.2
33D0:  MOVF   00,W
33D2:  IORWF  FF2,F
33D4:  MOVLW  14
33D6:  MOVLB  5
33D8:  MOVWF  x3F
33DA:  MOVLB  0
33DC:  CALL   10C4
....................              write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
33E0:  MOVLW  0C
33E2:  MOVWF  FA9
33E4:  CLRF   FA8
33E6:  BCF    FA6.6
33E8:  BCF    FA6.7
33EA:  BSF    FA6.2
33EC:  MOVF   FF2,W
33EE:  MOVWF  00
33F0:  BCF    FF2.7
33F2:  MOVLB  F
33F4:  MOVLW  55
33F6:  MOVWF  FA7
33F8:  MOVLW  AA
33FA:  MOVWF  FA7
33FC:  BSF    FA6.1
33FE:  BTFSC  FA6.1
3400:  BRA    33FE
3402:  BCF    FA6.2
3404:  MOVF   00,W
3406:  IORWF  FF2,F
3408:  MOVLW  14
340A:  MOVLB  5
340C:  MOVWF  x3F
340E:  MOVLB  0
3410:  CALL   10C4
3414:  MOVLW  0D
3416:  MOVWF  FA9
3418:  CLRF   FA8
341A:  BCF    FA6.6
341C:  BCF    FA6.7
341E:  BSF    FA6.2
3420:  MOVF   FF2,W
3422:  MOVWF  00
3424:  BCF    FF2.7
3426:  MOVLB  F
3428:  MOVLW  55
342A:  MOVWF  FA7
342C:  MOVLW  AA
342E:  MOVWF  FA7
3430:  BSF    FA6.1
3432:  BTFSC  FA6.1
3434:  BRA    3432
3436:  BCF    FA6.2
3438:  MOVF   00,W
343A:  IORWF  FF2,F
343C:  MOVLW  14
343E:  MOVLB  5
3440:  MOVWF  x3F
3442:  MOVLB  0
3444:  CALL   10C4
....................              reset_cpu();}         
3448:  RESET
344A:  MOVLB  4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
344C:  MOVF   xB8,W
344E:  SUBWF  xB4,W
3450:  BNZ   3522
3452:  MOVF   xB9,W
3454:  SUBWF  xB5,W
3456:  BNZ   3522
3458:  MOVF   xBA,W
345A:  SUBWF  xB6,W
345C:  BNZ   3522
345E:  MOVF   xBB,W
3460:  SUBWF  xB7,W
3462:  BNZ   3522
....................          { 
....................             glcd_fillScreen(OFF); 
3464:  MOVLB  5
3466:  CLRF   x3B
3468:  MOVLB  0
346A:  CALL   11BC
....................             strcpy(Menus.Letra,"Clave"); 
346E:  MOVLW  05
3470:  MOVWF  FEA
3472:  MOVLW  1A
3474:  MOVWF  FE9
3476:  MOVFF  FF2,53A
347A:  BCF    FF2.7
347C:  MOVLW  00
347E:  CALL   0764
3482:  TBLRD*-
3484:  TBLRD*+
3486:  MOVF   FF5,W
3488:  MOVWF  FEE
348A:  IORLW  00
348C:  BNZ   3484
348E:  MOVLB  5
3490:  BTFSC  x3A.7
3492:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
3494:  MOVLW  05
3496:  MOVWF  x3B
3498:  MOVLW  1A
349A:  MOVWF  x3A
349C:  MOVLW  1E
349E:  MOVWF  x3C
34A0:  CLRF   x3D
34A2:  CLRF   x3E
34A4:  MOVLW  02
34A6:  MOVWF  x3F
34A8:  MOVLB  0
34AA:  CALL   17EC
....................             strcpy(Menus.Letra,"Correcta"); 
34AE:  MOVLW  05
34B0:  MOVWF  FEA
34B2:  MOVLW  1A
34B4:  MOVWF  FE9
34B6:  MOVFF  FF2,53A
34BA:  BCF    FF2.7
34BC:  MOVLW  00
34BE:  CALL   0784
34C2:  TBLRD*-
34C4:  TBLRD*+
34C6:  MOVF   FF5,W
34C8:  MOVWF  FEE
34CA:  IORLW  00
34CC:  BNZ   34C4
34CE:  MOVLB  5
34D0:  BTFSC  x3A.7
34D2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
34D4:  MOVLW  05
34D6:  MOVWF  x3B
34D8:  MOVLW  1A
34DA:  MOVWF  x3A
34DC:  MOVLW  0F
34DE:  MOVWF  x3C
34E0:  MOVLW  1E
34E2:  MOVWF  x3D
34E4:  CLRF   x3E
34E6:  MOVLW  02
34E8:  MOVWF  x3F
34EA:  MOVLB  0
34EC:  CALL   17EC
....................             Menu=1;glcd_update();delay_ms(1000); 
34F0:  MOVLW  01
34F2:  MOVLB  4
34F4:  MOVWF  x89
34F6:  MOVLB  0
34F8:  CALL   1216
34FC:  MOVLW  04
34FE:  MOVLB  5
3500:  MOVWF  x3A
3502:  MOVLW  FA
3504:  MOVWF  x3F
3506:  MOVLB  0
3508:  CALL   10C4
350C:  MOVLB  5
350E:  DECFSZ x3A,F
3510:  BRA    3502
....................             glcd_fillScreen(OFF);unidad=1; 
3512:  CLRF   x3B
3514:  MOVLB  0
3516:  CALL   11BC
351A:  MOVLW  01
351C:  MOVLB  4
351E:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
3520:  BRA    363E
....................          { 
....................             glcd_fillScreen(OFF); 
3522:  MOVLB  5
3524:  CLRF   x3B
3526:  MOVLB  0
3528:  CALL   11BC
....................             strcpy(Menus.Letra,"Clave"); 
352C:  MOVLW  05
352E:  MOVWF  FEA
3530:  MOVLW  1A
3532:  MOVWF  FE9
3534:  MOVFF  FF2,53A
3538:  BCF    FF2.7
353A:  MOVLW  00
353C:  CALL   0764
3540:  TBLRD*-
3542:  TBLRD*+
3544:  MOVF   FF5,W
3546:  MOVWF  FEE
3548:  IORLW  00
354A:  BNZ   3542
354C:  MOVLB  5
354E:  BTFSC  x3A.7
3550:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
3552:  MOVLW  05
3554:  MOVWF  x3B
3556:  MOVLW  1A
3558:  MOVWF  x3A
355A:  MOVLW  1E
355C:  MOVWF  x3C
355E:  CLRF   x3D
3560:  CLRF   x3E
3562:  MOVLW  02
3564:  MOVWF  x3F
3566:  MOVLB  0
3568:  CALL   17EC
....................             strcpy(Menus.Letra,"Incorrecta"); 
356C:  MOVLW  05
356E:  MOVWF  FEA
3570:  MOVLW  1A
3572:  MOVWF  FE9
3574:  MOVFF  FF2,53A
3578:  BCF    FF2.7
357A:  MOVLW  00
357C:  CALL   07A8
3580:  TBLRD*-
3582:  TBLRD*+
3584:  MOVF   FF5,W
3586:  MOVWF  FEE
3588:  IORLW  00
358A:  BNZ   3582
358C:  MOVLB  5
358E:  BTFSC  x3A.7
3590:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
3592:  MOVLW  05
3594:  MOVWF  x3B
3596:  MOVLW  1A
3598:  MOVWF  x3A
359A:  CLRF   x3C
359C:  MOVLW  1E
359E:  MOVWF  x3D
35A0:  CLRF   x3E
35A2:  MOVLW  02
35A4:  MOVWF  x3F
35A6:  MOVLB  0
35A8:  CALL   17EC
....................             Menu=0;glcd_update();delay_ms(1000); 
35AC:  MOVLB  4
35AE:  CLRF   x89
35B0:  MOVLB  0
35B2:  CALL   1216
35B6:  MOVLW  04
35B8:  MOVLB  5
35BA:  MOVWF  x3A
35BC:  MOVLW  FA
35BE:  MOVWF  x3F
35C0:  MOVLB  0
35C2:  CALL   10C4
35C6:  MOVLB  5
35C8:  DECFSZ x3A,F
35CA:  BRA    35BC
....................             glcd_fillScreen(OFF);unidad=1; 
35CC:  CLRF   x3B
35CE:  MOVLB  0
35D0:  CALL   11BC
35D4:  MOVLW  01
35D6:  MOVLB  4
35D8:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
35DA:  CLRF   xB4
35DC:  CLRF   xB5
35DE:  CLRF   xB6
35E0:  CLRF   xB7
....................             displayContrasena(Contrasena[0],20,30,1); 
35E2:  MOVFF  4B4,53C
35E6:  MOVLW  14
35E8:  MOVLB  5
35EA:  MOVWF  x3D
35EC:  MOVLW  1E
35EE:  MOVWF  x3E
35F0:  MOVLW  01
35F2:  MOVWF  x3F
35F4:  MOVLB  0
35F6:  CALL   1A12
....................             displayContrasena(Contrasena[1],40,30,0); 
35FA:  MOVFF  4B5,53C
35FE:  MOVLW  28
3600:  MOVLB  5
3602:  MOVWF  x3D
3604:  MOVLW  1E
3606:  MOVWF  x3E
3608:  CLRF   x3F
360A:  MOVLB  0
360C:  CALL   1A12
....................             displayContrasena(Contrasena[2],60,30,0); 
3610:  MOVFF  4B6,53C
3614:  MOVLW  3C
3616:  MOVLB  5
3618:  MOVWF  x3D
361A:  MOVLW  1E
361C:  MOVWF  x3E
361E:  CLRF   x3F
3620:  MOVLB  0
3622:  CALL   1A12
....................             displayContrasena(Contrasena[3],80,30,0); 
3626:  MOVFF  4B7,53C
362A:  MOVLW  50
362C:  MOVLB  5
362E:  MOVWF  x3D
3630:  MOVLW  1E
3632:  MOVWF  x3E
3634:  CLRF   x3F
3636:  MOVLB  0
3638:  CALL   1A12
363C:  MOVLB  4
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1){ //Menu Principal.       
363E:  DECFSZ x89,W
3640:  BRA    3A76
....................        
....................       if(visual==1) 
3642:  BTFSS  x7C.4
3644:  BRA    39FC
....................       { 
....................          if(Opcion>6) 
3646:  MOVF   x90,W
3648:  SUBLW  06
364A:  BC    3650
....................          {Opcion=1;} 
364C:  MOVLW  01
364E:  MOVWF  x90
....................          if(Opcion<1) 
3650:  MOVF   x90,F
3652:  BNZ   3658
....................          {Opcion=6;} 
3654:  MOVLW  06
3656:  MOVWF  x90
....................           
....................          strcpy(Menus.Letra,"Menu Principal"); 
3658:  MOVLW  05
365A:  MOVWF  FEA
365C:  MOVLW  1A
365E:  MOVWF  FE9
3660:  MOVFF  FF2,53A
3664:  BCF    FF2.7
3666:  MOVLW  00
3668:  MOVLB  0
366A:  CALL   07CE
366E:  TBLRD*-
3670:  TBLRD*+
3672:  MOVF   FF5,W
3674:  MOVWF  FEE
3676:  IORLW  00
3678:  BNZ   3670
367A:  MOVLB  5
367C:  BTFSC  x3A.7
367E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,1); 
3680:  MOVLW  05
3682:  MOVWF  x3B
3684:  MOVLW  1A
3686:  MOVWF  x3A
3688:  MOVLW  1E
368A:  MOVWF  x3C
368C:  CLRF   x3D
368E:  MOVLW  01
3690:  MOVWF  x3E
3692:  MOVWF  x3F
3694:  MOVLB  0
3696:  CALL   17EC
....................        
....................          if(Opcion==1)    
369A:  MOVLB  4
369C:  DECFSZ x90,W
369E:  BRA    36E6
....................             {strcpy(Menus.Letra,"Preciclo"); 
36A0:  MOVLW  05
36A2:  MOVWF  FEA
36A4:  MOVLW  1A
36A6:  MOVWF  FE9
36A8:  MOVFF  FF2,53A
36AC:  BCF    FF2.7
36AE:  MOVLW  00
36B0:  MOVLB  0
36B2:  CALL   07F8
36B6:  TBLRD*-
36B8:  TBLRD*+
36BA:  MOVF   FF5,W
36BC:  MOVWF  FEE
36BE:  IORLW  00
36C0:  BNZ   36B8
36C2:  MOVLB  5
36C4:  BTFSC  x3A.7
36C6:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,1,1);} 
36C8:  MOVLW  05
36CA:  MOVWF  x3B
36CC:  MOVLW  1A
36CE:  MOVWF  x3A
36D0:  CLRF   x3C
36D2:  MOVLW  0A
36D4:  MOVWF  x3D
36D6:  MOVLW  01
36D8:  MOVWF  x3E
36DA:  MOVWF  x3F
36DC:  MOVLB  0
36DE:  CALL   17EC
....................          else 
36E2:  BRA    3728
36E4:  MOVLB  4
....................             {strcpy(Menus.Letra,"Preciclo"); 
36E6:  MOVLW  05
36E8:  MOVWF  FEA
36EA:  MOVLW  1A
36EC:  MOVWF  FE9
36EE:  MOVFF  FF2,53A
36F2:  BCF    FF2.7
36F4:  MOVLW  00
36F6:  MOVLB  0
36F8:  CALL   07F8
36FC:  TBLRD*-
36FE:  TBLRD*+
3700:  MOVF   FF5,W
3702:  MOVWF  FEE
3704:  IORLW  00
3706:  BNZ   36FE
3708:  MOVLB  5
370A:  BTFSC  x3A.7
370C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,0,1);} 
370E:  MOVLW  05
3710:  MOVWF  x3B
3712:  MOVLW  1A
3714:  MOVWF  x3A
3716:  CLRF   x3C
3718:  MOVLW  0A
371A:  MOVWF  x3D
371C:  CLRF   x3E
371E:  MOVLW  01
3720:  MOVWF  x3F
3722:  MOVLB  0
3724:  CALL   17EC
....................           
....................          if(Opcion==2)    
3728:  MOVLB  4
372A:  MOVF   x90,W
372C:  SUBLW  02
372E:  BNZ   3776
....................             {strcpy(Menus.Letra,"Liquidos"); 
3730:  MOVLW  05
3732:  MOVWF  FEA
3734:  MOVLW  1A
3736:  MOVWF  FE9
3738:  MOVFF  FF2,53A
373C:  BCF    FF2.7
373E:  MOVLW  00
3740:  MOVLB  0
3742:  CALL   081C
3746:  TBLRD*-
3748:  TBLRD*+
374A:  MOVF   FF5,W
374C:  MOVWF  FEE
374E:  IORLW  00
3750:  BNZ   3748
3752:  MOVLB  5
3754:  BTFSC  x3A.7
3756:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,1,1);} 
3758:  MOVLW  05
375A:  MOVWF  x3B
375C:  MOVLW  1A
375E:  MOVWF  x3A
3760:  CLRF   x3C
3762:  MOVLW  13
3764:  MOVWF  x3D
3766:  MOVLW  01
3768:  MOVWF  x3E
376A:  MOVWF  x3F
376C:  MOVLB  0
376E:  CALL   17EC
....................          else 
3772:  BRA    37B8
3774:  MOVLB  4
....................             {strcpy(Menus.Letra,"Liquidos"); 
3776:  MOVLW  05
3778:  MOVWF  FEA
377A:  MOVLW  1A
377C:  MOVWF  FE9
377E:  MOVFF  FF2,53A
3782:  BCF    FF2.7
3784:  MOVLW  00
3786:  MOVLB  0
3788:  CALL   081C
378C:  TBLRD*-
378E:  TBLRD*+
3790:  MOVF   FF5,W
3792:  MOVWF  FEE
3794:  IORLW  00
3796:  BNZ   378E
3798:  MOVLB  5
379A:  BTFSC  x3A.7
379C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,0,1);}    
379E:  MOVLW  05
37A0:  MOVWF  x3B
37A2:  MOVLW  1A
37A4:  MOVWF  x3A
37A6:  CLRF   x3C
37A8:  MOVLW  13
37AA:  MOVWF  x3D
37AC:  CLRF   x3E
37AE:  MOVLW  01
37B0:  MOVWF  x3F
37B2:  MOVLB  0
37B4:  CALL   17EC
....................              
....................           if(Opcion==3)    
37B8:  MOVLB  4
37BA:  MOVF   x90,W
37BC:  SUBLW  03
37BE:  BNZ   3806
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
37C0:  MOVLW  05
37C2:  MOVWF  FEA
37C4:  MOVLW  1A
37C6:  MOVWF  FE9
37C8:  MOVFF  FF2,53A
37CC:  BCF    FF2.7
37CE:  MOVLW  00
37D0:  MOVLB  0
37D2:  CALL   0840
37D6:  TBLRD*-
37D8:  TBLRD*+
37DA:  MOVF   FF5,W
37DC:  MOVWF  FEE
37DE:  IORLW  00
37E0:  BNZ   37D8
37E2:  MOVLB  5
37E4:  BTFSC  x3A.7
37E6:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,1,1);} 
37E8:  MOVLW  05
37EA:  MOVWF  x3B
37EC:  MOVLW  1A
37EE:  MOVWF  x3A
37F0:  CLRF   x3C
37F2:  MOVLW  1C
37F4:  MOVWF  x3D
37F6:  MOVLW  01
37F8:  MOVWF  x3E
37FA:  MOVWF  x3F
37FC:  MOVLB  0
37FE:  CALL   17EC
....................          else 
3802:  BRA    3848
3804:  MOVLB  4
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
3806:  MOVLW  05
3808:  MOVWF  FEA
380A:  MOVLW  1A
380C:  MOVWF  FE9
380E:  MOVFF  FF2,53A
3812:  BCF    FF2.7
3814:  MOVLW  00
3816:  MOVLB  0
3818:  CALL   0840
381C:  TBLRD*-
381E:  TBLRD*+
3820:  MOVF   FF5,W
3822:  MOVWF  FEE
3824:  IORLW  00
3826:  BNZ   381E
3828:  MOVLB  5
382A:  BTFSC  x3A.7
382C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,0,1);} 
382E:  MOVLW  05
3830:  MOVWF  x3B
3832:  MOVLW  1A
3834:  MOVWF  x3A
3836:  CLRF   x3C
3838:  MOVLW  1C
383A:  MOVWF  x3D
383C:  CLRF   x3E
383E:  MOVLW  01
3840:  MOVWF  x3F
3842:  MOVLB  0
3844:  CALL   17EC
....................              
....................          if(Opcion==4)    
3848:  MOVLB  4
384A:  MOVF   x90,W
384C:  SUBLW  04
384E:  BNZ   3896
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
3850:  MOVLW  05
3852:  MOVWF  FEA
3854:  MOVLW  1A
3856:  MOVWF  FE9
3858:  MOVFF  FF2,53A
385C:  BCF    FF2.7
385E:  MOVLW  00
3860:  MOVLB  0
3862:  CALL   086E
3866:  TBLRD*-
3868:  TBLRD*+
386A:  MOVF   FF5,W
386C:  MOVWF  FEE
386E:  IORLW  00
3870:  BNZ   3868
3872:  MOVLB  5
3874:  BTFSC  x3A.7
3876:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,1,1);} 
3878:  MOVLW  05
387A:  MOVWF  x3B
387C:  MOVLW  1A
387E:  MOVWF  x3A
3880:  CLRF   x3C
3882:  MOVLW  25
3884:  MOVWF  x3D
3886:  MOVLW  01
3888:  MOVWF  x3E
388A:  MOVWF  x3F
388C:  MOVLB  0
388E:  CALL   17EC
....................          else 
3892:  BRA    38D8
3894:  MOVLB  4
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
3896:  MOVLW  05
3898:  MOVWF  FEA
389A:  MOVLW  1A
389C:  MOVWF  FE9
389E:  MOVFF  FF2,53A
38A2:  BCF    FF2.7
38A4:  MOVLW  00
38A6:  MOVLB  0
38A8:  CALL   086E
38AC:  TBLRD*-
38AE:  TBLRD*+
38B0:  MOVF   FF5,W
38B2:  MOVWF  FEE
38B4:  IORLW  00
38B6:  BNZ   38AE
38B8:  MOVLB  5
38BA:  BTFSC  x3A.7
38BC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,0,1);}    
38BE:  MOVLW  05
38C0:  MOVWF  x3B
38C2:  MOVLW  1A
38C4:  MOVWF  x3A
38C6:  CLRF   x3C
38C8:  MOVLW  25
38CA:  MOVWF  x3D
38CC:  CLRF   x3E
38CE:  MOVLW  01
38D0:  MOVWF  x3F
38D2:  MOVLB  0
38D4:  CALL   17EC
....................              
....................          if(Opcion==5)    
38D8:  MOVLB  4
38DA:  MOVF   x90,W
38DC:  SUBLW  05
38DE:  BNZ   3926
....................             {strcpy(Menus.Letra,"Personalizado"); 
38E0:  MOVLW  05
38E2:  MOVWF  FEA
38E4:  MOVLW  1A
38E6:  MOVWF  FE9
38E8:  MOVFF  FF2,53A
38EC:  BCF    FF2.7
38EE:  MOVLW  00
38F0:  MOVLB  0
38F2:  CALL   089E
38F6:  TBLRD*-
38F8:  TBLRD*+
38FA:  MOVF   FF5,W
38FC:  MOVWF  FEE
38FE:  IORLW  00
3900:  BNZ   38F8
3902:  MOVLB  5
3904:  BTFSC  x3A.7
3906:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,1,1);} 
3908:  MOVLW  05
390A:  MOVWF  x3B
390C:  MOVLW  1A
390E:  MOVWF  x3A
3910:  CLRF   x3C
3912:  MOVLW  2E
3914:  MOVWF  x3D
3916:  MOVLW  01
3918:  MOVWF  x3E
391A:  MOVWF  x3F
391C:  MOVLB  0
391E:  CALL   17EC
....................          else 
3922:  BRA    3968
3924:  MOVLB  4
....................             {strcpy(Menus.Letra,"Personalizado"); 
3926:  MOVLW  05
3928:  MOVWF  FEA
392A:  MOVLW  1A
392C:  MOVWF  FE9
392E:  MOVFF  FF2,53A
3932:  BCF    FF2.7
3934:  MOVLW  00
3936:  MOVLB  0
3938:  CALL   089E
393C:  TBLRD*-
393E:  TBLRD*+
3940:  MOVF   FF5,W
3942:  MOVWF  FEE
3944:  IORLW  00
3946:  BNZ   393E
3948:  MOVLB  5
394A:  BTFSC  x3A.7
394C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,0,1);}   
394E:  MOVLW  05
3950:  MOVWF  x3B
3952:  MOVLW  1A
3954:  MOVWF  x3A
3956:  CLRF   x3C
3958:  MOVLW  2E
395A:  MOVWF  x3D
395C:  CLRF   x3E
395E:  MOVLW  01
3960:  MOVWF  x3F
3962:  MOVLB  0
3964:  CALL   17EC
....................              
....................          if(Opcion==6)    
3968:  MOVLB  4
396A:  MOVF   x90,W
396C:  SUBLW  06
396E:  BNZ   39B6
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
3970:  MOVLW  05
3972:  MOVWF  FEA
3974:  MOVLW  1A
3976:  MOVWF  FE9
3978:  MOVFF  FF2,53A
397C:  BCF    FF2.7
397E:  MOVLW  00
3980:  MOVLB  0
3982:  CALL   08C6
3986:  TBLRD*-
3988:  TBLRD*+
398A:  MOVF   FF5,W
398C:  MOVWF  FEE
398E:  IORLW  00
3990:  BNZ   3988
3992:  MOVLB  5
3994:  BTFSC  x3A.7
3996:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,1,1);} 
3998:  MOVLW  05
399A:  MOVWF  x3B
399C:  MOVLW  1A
399E:  MOVWF  x3A
39A0:  CLRF   x3C
39A2:  MOVLW  37
39A4:  MOVWF  x3D
39A6:  MOVLW  01
39A8:  MOVWF  x3E
39AA:  MOVWF  x3F
39AC:  MOVLB  0
39AE:  CALL   17EC
....................          else 
39B2:  BRA    39F8
39B4:  MOVLB  4
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
39B6:  MOVLW  05
39B8:  MOVWF  FEA
39BA:  MOVLW  1A
39BC:  MOVWF  FE9
39BE:  MOVFF  FF2,53A
39C2:  BCF    FF2.7
39C4:  MOVLW  00
39C6:  MOVLB  0
39C8:  CALL   08C6
39CC:  TBLRD*-
39CE:  TBLRD*+
39D0:  MOVF   FF5,W
39D2:  MOVWF  FEE
39D4:  IORLW  00
39D6:  BNZ   39CE
39D8:  MOVLB  5
39DA:  BTFSC  x3A.7
39DC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,0,1);}      
39DE:  MOVLW  05
39E0:  MOVWF  x3B
39E2:  MOVLW  1A
39E4:  MOVWF  x3A
39E6:  CLRF   x3C
39E8:  MOVLW  37
39EA:  MOVWF  x3D
39EC:  CLRF   x3E
39EE:  MOVLW  01
39F0:  MOVWF  x3F
39F2:  MOVLB  0
39F4:  CALL   17EC
....................             visual=0; 
39F8:  MOVLB  4
39FA:  BCF    x7C.4
....................       } 
....................       if(UP)//Si oprime hacia arriba 
39FC:  BSF    F92.5
39FE:  BTFSS  F80.5
3A00:  BRA    3A1C
....................          {  if(Flanco == 0)  
3A02:  BTFSC  x7C.0
3A04:  BRA    3A1A
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
3A06:  BSF    x7C.0
3A08:  MOVLW  1E
3A0A:  MOVLB  5
3A0C:  MOVWF  x3F
3A0E:  MOVLB  0
3A10:  CALL   10C4
3A14:  MOVLB  4
3A16:  DECF   x90,F
3A18:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A1A:  BRA    3A1E
....................                {Flanco = 0;} 
3A1C:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
3A1E:  BSF    F96.0
3A20:  BTFSS  F84.0
3A22:  BRA    3A3E
....................          {  if(Flanco2 == 0)  
3A24:  BTFSC  x7C.2
3A26:  BRA    3A3C
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
3A28:  BSF    x7C.2
3A2A:  MOVLW  1E
3A2C:  MOVLB  5
3A2E:  MOVWF  x3F
3A30:  MOVLB  0
3A32:  CALL   10C4
3A36:  MOVLB  4
3A38:  INCF   x90,F
3A3A:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
3A3C:  BRA    3A40
....................                {Flanco2 = 0;}   
3A3E:  BCF    x7C.2
....................                 
....................        if(RIGHT)//Si oprime SET 
3A40:  BSF    F96.1
3A42:  BTFSS  F84.1
3A44:  BRA    3A74
....................          {  if(Flanco1 == 0)  
3A46:  BTFSC  x7C.1
3A48:  BRA    3A72
....................                {Flanco1 = 1;delay_ms(30);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);visual=1; 
3A4A:  BSF    x7C.1
3A4C:  MOVLW  1E
3A4E:  MOVLB  5
3A50:  MOVWF  x3F
3A52:  MOVLB  0
3A54:  CALL   10C4
3A58:  MOVLW  03
3A5A:  MOVLB  4
3A5C:  ADDWF  x90,W
3A5E:  MOVWF  x89
3A60:  MOVLW  01
3A62:  MOVWF  x90
3A64:  MOVLB  5
3A66:  CLRF   x3B
3A68:  MOVLB  0
3A6A:  CALL   11BC
3A6E:  MOVLB  4
3A70:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A72:  BRA    3A76
....................                {Flanco1 = 0;}   
3A74:  BCF    x7C.1
....................          /*       
....................          if(LEFT)//Si oprime boton de Toma. 
....................          {delay_ms(700);Menu=2;glcd_fillscreen(OFF);}*/ 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
.................... //-Sub-Menus de selección de proceso. 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==4){ // Menu de Pre-ciclo 
3A76:  MOVF   x89,W
3A78:  SUBLW  04
3A7A:  BTFSS  FD8.2
3A7C:  BRA    3DA2
....................        
....................       if(visual==1) 
3A7E:  BTFSS  x7C.4
3A80:  BRA    3BD4
....................       { 
....................          glcd_imagen(2); //Guante 
3A82:  MOVLW  02
3A84:  MOVLB  5
3A86:  MOVWF  x3A
3A88:  MOVLB  0
3A8A:  CALL   2018
....................          strcpy(Menus.Letra,"Preciclo"); 
3A8E:  MOVLW  05
3A90:  MOVWF  FEA
3A92:  MOVLW  1A
3A94:  MOVWF  FE9
3A96:  MOVFF  FF2,53A
3A9A:  BCF    FF2.7
3A9C:  MOVLW  00
3A9E:  CALL   07F8
3AA2:  TBLRD*-
3AA4:  TBLRD*+
3AA6:  MOVF   FF5,W
3AA8:  MOVWF  FEE
3AAA:  IORLW  00
3AAC:  BNZ   3AA4
3AAE:  MOVLB  5
3AB0:  BTFSC  x3A.7
3AB2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3AB4:  MOVLW  05
3AB6:  MOVWF  x3B
3AB8:  MOVLW  1A
3ABA:  MOVWF  x3A
3ABC:  MOVLW  14
3ABE:  MOVWF  x3C
3AC0:  CLRF   x3D
3AC2:  MOVLW  01
3AC4:  MOVWF  x3E
3AC6:  MOVLW  02
3AC8:  MOVWF  x3F
3ACA:  MOVLB  0
3ACC:  CALL   17EC
....................          
....................          strcpy(Menus.Letra,"Preciclo"); 
3AD0:  MOVLW  05
3AD2:  MOVWF  FEA
3AD4:  MOVLW  1A
3AD6:  MOVWF  FE9
3AD8:  MOVFF  FF2,53A
3ADC:  BCF    FF2.7
3ADE:  MOVLW  00
3AE0:  CALL   07F8
3AE4:  TBLRD*-
3AE6:  TBLRD*+
3AE8:  MOVF   FF5,W
3AEA:  MOVWF  FEE
3AEC:  IORLW  00
3AEE:  BNZ   3AE6
3AF0:  MOVLB  5
3AF2:  BTFSC  x3A.7
3AF4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,0,1); 
3AF6:  MOVLW  05
3AF8:  MOVWF  x3B
3AFA:  MOVLW  1A
3AFC:  MOVWF  x3A
3AFE:  MOVLW  07
3B00:  MOVWF  x3C
3B02:  MOVLW  37
3B04:  MOVWF  x3D
3B06:  CLRF   x3E
3B08:  MOVLW  01
3B0A:  MOVWF  x3F
3B0C:  MOVLB  0
3B0E:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Temperatura:90 C"); 
3B12:  MOVLW  05
3B14:  MOVWF  FEA
3B16:  MOVLW  1A
3B18:  MOVWF  FE9
3B1A:  MOVFF  FF2,53A
3B1E:  BCF    FF2.7
3B20:  MOVLW  00
3B22:  CALL   08EE
3B26:  TBLRD*-
3B28:  TBLRD*+
3B2A:  MOVF   FF5,W
3B2C:  MOVWF  FEE
3B2E:  IORLW  00
3B30:  BNZ   3B28
3B32:  MOVLB  5
3B34:  BTFSC  x3A.7
3B36:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3B38:  MOVLW  05
3B3A:  MOVWF  x3B
3B3C:  MOVLW  1A
3B3E:  MOVWF  x3A
3B40:  CLRF   x3C
3B42:  MOVWF  x3D
3B44:  CLRF   x3E
3B46:  MOVLW  01
3B48:  MOVWF  x3F
3B4A:  MOVLB  0
3B4C:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Esterilizacion:5m"); 
3B50:  MOVLW  05
3B52:  MOVWF  FEA
3B54:  MOVLW  1A
3B56:  MOVWF  FE9
3B58:  MOVFF  FF2,53A
3B5C:  BCF    FF2.7
3B5E:  MOVLW  00
3B60:  CALL   091A
3B64:  TBLRD*-
3B66:  TBLRD*+
3B68:  MOVF   FF5,W
3B6A:  MOVWF  FEE
3B6C:  IORLW  00
3B6E:  BNZ   3B66
3B70:  MOVLB  5
3B72:  BTFSC  x3A.7
3B74:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3B76:  MOVLW  05
3B78:  MOVWF  x3B
3B7A:  MOVLW  1A
3B7C:  MOVWF  x3A
3B7E:  CLRF   x3C
3B80:  MOVLW  24
3B82:  MOVWF  x3D
3B84:  CLRF   x3E
3B86:  MOVLW  01
3B88:  MOVWF  x3F
3B8A:  MOVLB  0
3B8C:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3B90:  MOVLW  05
3B92:  MOVWF  FEA
3B94:  MOVLW  1A
3B96:  MOVWF  FE9
3B98:  MOVFF  FF2,53A
3B9C:  BCF    FF2.7
3B9E:  MOVLW  00
3BA0:  CALL   094A
3BA4:  TBLRD*-
3BA6:  TBLRD*+
3BA8:  MOVF   FF5,W
3BAA:  MOVWF  FEE
3BAC:  IORLW  00
3BAE:  BNZ   3BA6
3BB0:  MOVLB  5
3BB2:  BTFSC  x3A.7
3BB4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1); 
3BB6:  MOVLW  05
3BB8:  MOVWF  x3B
3BBA:  MOVLW  1A
3BBC:  MOVWF  x3A
3BBE:  CLRF   x3C
3BC0:  MOVLW  2E
3BC2:  MOVWF  x3D
3BC4:  CLRF   x3E
3BC6:  MOVLW  01
3BC8:  MOVWF  x3F
3BCA:  MOVLB  0
3BCC:  CALL   17EC
....................          visual=0; 
3BD0:  MOVLB  4
3BD2:  BCF    x7C.4
....................       } 
....................        
....................       if(LEFT)// Si oprime Izquier|da 
3BD4:  BSF    F96.2
3BD6:  BTFSS  F84.2
3BD8:  BRA    3BFA
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3BDA:  MOVLW  1E
3BDC:  MOVLB  5
3BDE:  MOVWF  x3F
3BE0:  MOVLB  0
3BE2:  CALL   10C4
3BE6:  MOVLW  01
3BE8:  MOVLB  4
3BEA:  MOVWF  x89
3BEC:  MOVLB  5
3BEE:  CLRF   x3B
3BF0:  MOVLB  0
3BF2:  CALL   11BC
3BF6:  MOVLB  4
3BF8:  BSF    x7C.4
....................       } 
....................  
....................       if(RIGHT)// Si oprime derecha 
3BFA:  BSF    F96.1
3BFC:  BTFSS  F84.1
3BFE:  BRA    3DA2
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0;visual=1; 
3C00:  CLRF   xA8
3C02:  CLRF   xA9
3C04:  MOVLW  05
3C06:  MOVWF  xAA
3C08:  CLRF   xAB
3C0A:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;minutos=0;Setpoint=90;Menu=20; 
3C0C:  CLRF   xB0
3C0E:  CLRF   xB1
3C10:  CLRF   xB2
3C12:  CLRF   xB3
3C14:  CLRF   x9B
3C16:  CLRF   x9A
3C18:  MOVLW  5A
3C1A:  MOVWF  x8E
3C1C:  MOVLW  14
3C1E:  MOVWF  x89
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
3C20:  MOVWF  x89
3C22:  MOVLW  0F
3C24:  MOVLB  5
3C26:  MOVWF  x4C
3C28:  MOVLW  12
3C2A:  MOVWF  x4D
3C2C:  MOVLW  1E
3C2E:  MOVWF  x4E
3C30:  MOVLW  35
3C32:  MOVWF  x4F
3C34:  CLRF   x50
3C36:  MOVLW  01
3C38:  MOVWF  x51
3C3A:  MOVLB  0
3C3C:  CALL   172A
3C40:  MOVLB  4
3C42:  CLRF   x92
3C44:  MOVLW  C0
3C46:  IORWF  FF2,F
3C48:  MOVLB  5
3C4A:  CLRF   x3B
3C4C:  MOVLB  0
3C4E:  CALL   11BC
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
3C52:  MOVLW  05
3C54:  MOVWF  FEA
3C56:  MOVLW  1A
3C58:  MOVWF  FE9
3C5A:  MOVFF  FF2,53A
3C5E:  BCF    FF2.7
3C60:  MOVLW  00
3C62:  CALL   0974
3C66:  TBLRD*-
3C68:  TBLRD*+
3C6A:  MOVF   FF5,W
3C6C:  MOVWF  FEE
3C6E:  IORLW  00
3C70:  BNZ   3C68
3C72:  MOVLB  5
3C74:  BTFSC  x3A.7
3C76:  BSF    FF2.7
3C78:  MOVLW  05
3C7A:  MOVWF  x3B
3C7C:  MOVLW  1A
3C7E:  MOVWF  x3A
3C80:  CLRF   x3C
3C82:  MOVLW  37
3C84:  MOVWF  x3D
3C86:  MOVLW  02
3C88:  MOVWF  x3E
3C8A:  MOVLW  01
3C8C:  MOVWF  x3F
3C8E:  MOVLB  0
3C90:  CALL   17EC
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
3C94:  MOVLW  0F
3C96:  MOVLB  5
3C98:  MOVWF  x4C
3C9A:  MOVLW  12
3C9C:  MOVWF  x4D
3C9E:  MOVLW  1E
3CA0:  MOVWF  x4E
3CA2:  MOVLW  35
3CA4:  MOVWF  x4F
3CA6:  CLRF   x50
3CA8:  MOVLW  01
3CAA:  MOVWF  x51
3CAC:  MOVLB  0
3CAE:  CALL   172A
....................          glcd_imagen(5); 
3CB2:  MOVLW  05
3CB4:  MOVLB  5
3CB6:  MOVWF  x3A
3CB8:  MOVLB  0
3CBA:  CALL   2018
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
3CBE:  MOVLW  05
3CC0:  MOVWF  FEA
3CC2:  MOVLW  1A
3CC4:  MOVWF  FE9
3CC6:  MOVFF  FF2,53A
3CCA:  BCF    FF2.7
3CCC:  MOVLW  00
3CCE:  CALL   099A
3CD2:  TBLRD*-
3CD4:  TBLRD*+
3CD6:  MOVF   FF5,W
3CD8:  MOVWF  FEE
3CDA:  IORLW  00
3CDC:  BNZ   3CD4
3CDE:  MOVLB  5
3CE0:  BTFSC  x3A.7
3CE2:  BSF    FF2.7
3CE4:  MOVLW  05
3CE6:  MOVWF  x3B
3CE8:  MOVLW  1A
3CEA:  MOVWF  x3A
3CEC:  CLRF   x3C
3CEE:  CLRF   x3D
3CF0:  MOVLW  02
3CF2:  MOVWF  x3E
3CF4:  MOVLW  01
3CF6:  MOVWF  x3F
3CF8:  MOVLB  0
3CFA:  CALL   17EC
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
3CFE:  MOVLW  05
3D00:  MOVWF  FEA
3D02:  MOVLW  1A
3D04:  MOVWF  FE9
3D06:  MOVFF  FF2,53A
3D0A:  BCF    FF2.7
3D0C:  MOVLW  00
3D0E:  CALL   09BC
3D12:  TBLRD*-
3D14:  TBLRD*+
3D16:  MOVF   FF5,W
3D18:  MOVWF  FEE
3D1A:  IORLW  00
3D1C:  BNZ   3D14
3D1E:  MOVLB  5
3D20:  BTFSC  x3A.7
3D22:  BSF    FF2.7
3D24:  MOVLW  05
3D26:  MOVWF  x3B
3D28:  MOVLW  1A
3D2A:  MOVWF  x3A
3D2C:  CLRF   x3C
3D2E:  MOVLW  08
3D30:  MOVWF  x3D
3D32:  MOVLW  02
3D34:  MOVWF  x3E
3D36:  MOVLW  01
3D38:  MOVWF  x3F
3D3A:  MOVLB  0
3D3C:  CALL   17EC
....................          glcd_circle(95,40,2,NO,ON); 
3D40:  MOVLW  5F
3D42:  MOVLB  5
3D44:  MOVWF  x3A
3D46:  MOVLW  28
3D48:  MOVWF  x3B
3D4A:  MOVLW  02
3D4C:  MOVWF  x3C
3D4E:  CLRF   x3D
3D50:  MOVLW  01
3D52:  MOVWF  x3E
3D54:  MOVLB  0
3D56:  CALL   2114
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
3D5A:  MOVLW  05
3D5C:  MOVWF  FEA
3D5E:  MOVLW  1A
3D60:  MOVWF  FE9
3D62:  MOVFF  FF2,53A
3D66:  BCF    FF2.7
3D68:  MOVLW  00
3D6A:  CALL   09DE
3D6E:  TBLRD*-
3D70:  TBLRD*+
3D72:  MOVF   FF5,W
3D74:  MOVWF  FEE
3D76:  IORLW  00
3D78:  BNZ   3D70
3D7A:  MOVLB  5
3D7C:  BTFSC  x3A.7
3D7E:  BSF    FF2.7
3D80:  MOVLW  05
3D82:  MOVWF  x3B
3D84:  MOVLW  1A
3D86:  MOVWF  x3A
3D88:  MOVLW  66
3D8A:  MOVWF  x3C
3D8C:  MOVLW  28
3D8E:  MOVWF  x3D
3D90:  MOVLW  02
3D92:  MOVWF  x3E
3D94:  MOVWF  x3F
3D96:  MOVLB  0
3D98:  CALL   17EC
....................          MuestraTiemposProgramados(); 
3D9C:  CALL   2514
3DA0:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==5){ // Menu de Liquido       
3DA2:  MOVF   x89,W
3DA4:  SUBLW  05
3DA6:  BTFSS  FD8.2
3DA8:  BRA    3F6C
....................        
....................       if(visual==1) 
3DAA:  BTFSS  x7C.4
3DAC:  BRA    3F02
....................       { 
....................          glcd_imagen(4); //ErlenMeyer con Liquido 
3DAE:  MOVLW  04
3DB0:  MOVLB  5
3DB2:  MOVWF  x3A
3DB4:  MOVLB  0
3DB6:  CALL   2018
....................          strcpy(Menus.Letra,"Liquidos"); 
3DBA:  MOVLW  05
3DBC:  MOVWF  FEA
3DBE:  MOVLW  1A
3DC0:  MOVWF  FE9
3DC2:  MOVFF  FF2,53A
3DC6:  BCF    FF2.7
3DC8:  MOVLW  00
3DCA:  CALL   081C
3DCE:  TBLRD*-
3DD0:  TBLRD*+
3DD2:  MOVF   FF5,W
3DD4:  MOVWF  FEE
3DD6:  IORLW  00
3DD8:  BNZ   3DD0
3DDA:  MOVLB  5
3DDC:  BTFSC  x3A.7
3DDE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3DE0:  MOVLW  05
3DE2:  MOVWF  x3B
3DE4:  MOVLW  1A
3DE6:  MOVWF  x3A
3DE8:  MOVLW  14
3DEA:  MOVWF  x3C
3DEC:  CLRF   x3D
3DEE:  MOVLW  01
3DF0:  MOVWF  x3E
3DF2:  MOVLW  02
3DF4:  MOVWF  x3F
3DF6:  MOVLB  0
3DF8:  CALL   17EC
....................        
....................          strcpy(Menus.Letra,"Liquidos"); 
3DFC:  MOVLW  05
3DFE:  MOVWF  FEA
3E00:  MOVLW  1A
3E02:  MOVWF  FE9
3E04:  MOVFF  FF2,53A
3E08:  BCF    FF2.7
3E0A:  MOVLW  00
3E0C:  CALL   081C
3E10:  TBLRD*-
3E12:  TBLRD*+
3E14:  MOVF   FF5,W
3E16:  MOVWF  FEE
3E18:  IORLW  00
3E1A:  BNZ   3E12
3E1C:  MOVLB  5
3E1E:  BTFSC  x3A.7
3E20:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3E22:  MOVLW  05
3E24:  MOVWF  x3B
3E26:  MOVLW  1A
3E28:  MOVWF  x3A
3E2A:  MOVLW  07
3E2C:  MOVWF  x3C
3E2E:  MOVLW  37
3E30:  MOVWF  x3D
3E32:  MOVLW  02
3E34:  MOVWF  x3E
3E36:  MOVLW  01
3E38:  MOVWF  x3F
3E3A:  MOVLB  0
3E3C:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3E40:  MOVLW  05
3E42:  MOVWF  FEA
3E44:  MOVLW  1A
3E46:  MOVWF  FE9
3E48:  MOVFF  FF2,53A
3E4C:  BCF    FF2.7
3E4E:  MOVLW  00
3E50:  CALL   09FA
3E54:  TBLRD*-
3E56:  TBLRD*+
3E58:  MOVF   FF5,W
3E5A:  MOVWF  FEE
3E5C:  IORLW  00
3E5E:  BNZ   3E56
3E60:  MOVLB  5
3E62:  BTFSC  x3A.7
3E64:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3E66:  MOVLW  05
3E68:  MOVWF  x3B
3E6A:  MOVLW  1A
3E6C:  MOVWF  x3A
3E6E:  CLRF   x3C
3E70:  MOVWF  x3D
3E72:  CLRF   x3E
3E74:  MOVLW  01
3E76:  MOVWF  x3F
3E78:  MOVLB  0
3E7A:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Esterilizacion:20m"); 
3E7E:  MOVLW  05
3E80:  MOVWF  FEA
3E82:  MOVLW  1A
3E84:  MOVWF  FE9
3E86:  MOVFF  FF2,53A
3E8A:  BCF    FF2.7
3E8C:  MOVLW  00
3E8E:  CALL   0A26
3E92:  TBLRD*-
3E94:  TBLRD*+
3E96:  MOVF   FF5,W
3E98:  MOVWF  FEE
3E9A:  IORLW  00
3E9C:  BNZ   3E94
3E9E:  MOVLB  5
3EA0:  BTFSC  x3A.7
3EA2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3EA4:  MOVLW  05
3EA6:  MOVWF  x3B
3EA8:  MOVLW  1A
3EAA:  MOVWF  x3A
3EAC:  CLRF   x3C
3EAE:  MOVLW  24
3EB0:  MOVWF  x3D
3EB2:  CLRF   x3E
3EB4:  MOVLW  01
3EB6:  MOVWF  x3F
3EB8:  MOVLB  0
3EBA:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3EBE:  MOVLW  05
3EC0:  MOVWF  FEA
3EC2:  MOVLW  1A
3EC4:  MOVWF  FE9
3EC6:  MOVFF  FF2,53A
3ECA:  BCF    FF2.7
3ECC:  MOVLW  00
3ECE:  CALL   094A
3ED2:  TBLRD*-
3ED4:  TBLRD*+
3ED6:  MOVF   FF5,W
3ED8:  MOVWF  FEE
3EDA:  IORLW  00
3EDC:  BNZ   3ED4
3EDE:  MOVLB  5
3EE0:  BTFSC  x3A.7
3EE2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);     
3EE4:  MOVLW  05
3EE6:  MOVWF  x3B
3EE8:  MOVLW  1A
3EEA:  MOVWF  x3A
3EEC:  CLRF   x3C
3EEE:  MOVLW  2E
3EF0:  MOVWF  x3D
3EF2:  CLRF   x3E
3EF4:  MOVLW  01
3EF6:  MOVWF  x3F
3EF8:  MOVLB  0
3EFA:  CALL   17EC
....................          visual=0; 
3EFE:  MOVLB  4
3F00:  BCF    x7C.4
....................       }    
....................           
....................       if(LEFT)// Si oprime Izquier|da 
3F02:  BSF    F96.2
3F04:  BTFSS  F84.2
3F06:  BRA    3F28
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3F08:  MOVLW  1E
3F0A:  MOVLB  5
3F0C:  MOVWF  x3F
3F0E:  MOVLB  0
3F10:  CALL   10C4
3F14:  MOVLW  01
3F16:  MOVLB  4
3F18:  MOVWF  x89
3F1A:  MOVLB  5
3F1C:  CLRF   x3B
3F1E:  MOVLB  0
3F20:  CALL   11BC
3F24:  MOVLB  4
3F26:  BSF    x7C.4
....................       }                
....................  
....................       if(RIGHT)// Si oprime derecha 
3F28:  BSF    F96.1
3F2A:  BTFSS  F84.1
3F2C:  BRA    3F6C
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2;desfoguelento=1;visual=1; 
3F2E:  CLRF   xA8
3F30:  CLRF   xA9
3F32:  CLRF   xAA
3F34:  MOVLW  02
3F36:  MOVWF  xAB
3F38:  BSF    x7C.5
3F3A:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
3F3C:  CLRF   xB0
3F3E:  CLRF   xB1
3F40:  CLRF   xB2
3F42:  CLRF   xB3
3F44:  MOVLW  79
3F46:  MOVWF  x8E
3F48:  MOVLW  0E
3F4A:  MOVWF  x89
3F4C:  MOVLW  04
3F4E:  MOVLB  5
3F50:  MOVWF  x3A
3F52:  MOVLW  AF
3F54:  MOVWF  x3F
3F56:  MOVLB  0
3F58:  CALL   10C4
3F5C:  MOVLB  5
3F5E:  DECFSZ x3A,F
3F60:  BRA    3F52
3F62:  CLRF   x3B
3F64:  MOVLB  0
3F66:  CALL   11BC
3F6A:  MOVLB  4
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Instrumental Suave      
3F6C:  MOVF   x89,W
3F6E:  SUBLW  06
3F70:  BTFSS  FD8.2
3F72:  BRA    4136
....................        
....................       if(visual==1) 
3F74:  BTFSS  x7C.4
3F76:  BRA    40CA
....................       { 
....................          glcd_imagen(3); //Erlen Meyer 
3F78:  MOVLW  03
3F7A:  MOVLB  5
3F7C:  MOVWF  x3A
3F7E:  MOVLB  0
3F80:  CALL   2018
....................           
....................          strcpy(Menus.Letra,"Ins. Suave"); 
3F84:  MOVLW  05
3F86:  MOVWF  FEA
3F88:  MOVLW  1A
3F8A:  MOVWF  FE9
3F8C:  MOVFF  FF2,53A
3F90:  BCF    FF2.7
3F92:  MOVLW  00
3F94:  CALL   0A56
3F98:  TBLRD*-
3F9A:  TBLRD*+
3F9C:  MOVF   FF5,W
3F9E:  MOVWF  FEE
3FA0:  IORLW  00
3FA2:  BNZ   3F9A
3FA4:  MOVLB  5
3FA6:  BTFSC  x3A.7
3FA8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
3FAA:  MOVLW  05
3FAC:  MOVWF  x3B
3FAE:  MOVLW  1A
3FB0:  MOVWF  x3A
3FB2:  CLRF   x3C
3FB4:  CLRF   x3D
3FB6:  MOVLW  01
3FB8:  MOVWF  x3E
3FBA:  MOVLW  02
3FBC:  MOVWF  x3F
3FBE:  MOVLB  0
3FC0:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Instrumental Suave"); 
3FC4:  MOVLW  05
3FC6:  MOVWF  FEA
3FC8:  MOVLW  1A
3FCA:  MOVWF  FE9
3FCC:  MOVFF  FF2,53A
3FD0:  BCF    FF2.7
3FD2:  MOVLW  00
3FD4:  CALL   0840
3FD8:  TBLRD*-
3FDA:  TBLRD*+
3FDC:  MOVF   FF5,W
3FDE:  MOVWF  FEE
3FE0:  IORLW  00
3FE2:  BNZ   3FDA
3FE4:  MOVLB  5
3FE6:  BTFSC  x3A.7
3FE8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3FEA:  MOVLW  05
3FEC:  MOVWF  x3B
3FEE:  MOVLW  1A
3FF0:  MOVWF  x3A
3FF2:  MOVLW  07
3FF4:  MOVWF  x3C
3FF6:  MOVLW  37
3FF8:  MOVWF  x3D
3FFA:  MOVLW  02
3FFC:  MOVWF  x3E
3FFE:  MOVLW  01
4000:  MOVWF  x3F
4002:  MOVLB  0
4004:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
4008:  MOVLW  05
400A:  MOVWF  FEA
400C:  MOVLW  1A
400E:  MOVWF  FE9
4010:  MOVFF  FF2,53A
4014:  BCF    FF2.7
4016:  MOVLW  00
4018:  CALL   09FA
401C:  TBLRD*-
401E:  TBLRD*+
4020:  MOVF   FF5,W
4022:  MOVWF  FEE
4024:  IORLW  00
4026:  BNZ   401E
4028:  MOVLB  5
402A:  BTFSC  x3A.7
402C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
402E:  MOVLW  05
4030:  MOVWF  x3B
4032:  MOVLW  1A
4034:  MOVWF  x3A
4036:  CLRF   x3C
4038:  MOVWF  x3D
403A:  CLRF   x3E
403C:  MOVLW  01
403E:  MOVWF  x3F
4040:  MOVLB  0
4042:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Esterilizacion:15m"); 
4046:  MOVLW  05
4048:  MOVWF  FEA
404A:  MOVLW  1A
404C:  MOVWF  FE9
404E:  MOVFF  FF2,53A
4052:  BCF    FF2.7
4054:  MOVLW  00
4056:  CALL   0A7C
405A:  TBLRD*-
405C:  TBLRD*+
405E:  MOVF   FF5,W
4060:  MOVWF  FEE
4062:  IORLW  00
4064:  BNZ   405C
4066:  MOVLB  5
4068:  BTFSC  x3A.7
406A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
406C:  MOVLW  05
406E:  MOVWF  x3B
4070:  MOVLW  1A
4072:  MOVWF  x3A
4074:  CLRF   x3C
4076:  MOVLW  24
4078:  MOVWF  x3D
407A:  CLRF   x3E
407C:  MOVLW  01
407E:  MOVWF  x3F
4080:  MOVLB  0
4082:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
4086:  MOVLW  05
4088:  MOVWF  FEA
408A:  MOVLW  1A
408C:  MOVWF  FE9
408E:  MOVFF  FF2,53A
4092:  BCF    FF2.7
4094:  MOVLW  00
4096:  CALL   094A
409A:  TBLRD*-
409C:  TBLRD*+
409E:  MOVF   FF5,W
40A0:  MOVWF  FEE
40A2:  IORLW  00
40A4:  BNZ   409C
40A6:  MOVLB  5
40A8:  BTFSC  x3A.7
40AA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
40AC:  MOVLW  05
40AE:  MOVWF  x3B
40B0:  MOVLW  1A
40B2:  MOVWF  x3A
40B4:  CLRF   x3C
40B6:  MOVLW  2E
40B8:  MOVWF  x3D
40BA:  CLRF   x3E
40BC:  MOVLW  01
40BE:  MOVWF  x3F
40C0:  MOVLB  0
40C2:  CALL   17EC
....................          visual=0; 
40C6:  MOVLB  4
40C8:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
40CA:  BSF    F96.2
40CC:  BTFSS  F84.2
40CE:  BRA    40F0
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
40D0:  MOVLW  1E
40D2:  MOVLB  5
40D4:  MOVWF  x3F
40D6:  MOVLB  0
40D8:  CALL   10C4
40DC:  MOVLW  01
40DE:  MOVLB  4
40E0:  MOVWF  x89
40E2:  MOVLB  5
40E4:  CLRF   x3B
40E6:  MOVLB  0
40E8:  CALL   11BC
40EC:  MOVLB  4
40EE:  BSF    x7C.4
....................       }             
....................  
....................       if(RIGHT)// Si oprime derecha 
40F0:  BSF    F96.1
40F2:  BTFSS  F84.1
40F4:  BRA    4136
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1;desfoguelento=1;visual=1; 
40F6:  CLRF   xA8
40F8:  CLRF   xA9
40FA:  MOVLW  05
40FC:  MOVWF  xAA
40FE:  MOVLW  01
4100:  MOVWF  xAB
4102:  BSF    x7C.5
4104:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
4106:  CLRF   xB0
4108:  CLRF   xB1
410A:  CLRF   xB2
410C:  CLRF   xB3
410E:  MOVLW  79
4110:  MOVWF  x8E
4112:  MOVLW  0E
4114:  MOVWF  x89
4116:  MOVLW  04
4118:  MOVLB  5
411A:  MOVWF  x3A
411C:  MOVLW  AF
411E:  MOVWF  x3F
4120:  MOVLB  0
4122:  CALL   10C4
4126:  MOVLB  5
4128:  DECFSZ x3A,F
412A:  BRA    411C
412C:  CLRF   x3B
412E:  MOVLB  0
4130:  CALL   11BC
4134:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==7){ // Menu de textil e instrumental      
4136:  MOVF   x89,W
4138:  SUBLW  07
413A:  BTFSS  FD8.2
413C:  BRA    447A
....................        
....................       if(visual==1) 
413E:  BTFSS  x7C.4
4140:  BRA    4292
....................       { 
....................          glcd_imagen(1); //Tijeras y Camisa 
4142:  MOVLW  01
4144:  MOVLB  5
4146:  MOVWF  x3A
4148:  MOVLB  0
414A:  CALL   2018
....................          strcpy(Menus.Letra,"Tex & Ins"); 
414E:  MOVLW  05
4150:  MOVWF  FEA
4152:  MOVLW  1A
4154:  MOVWF  FE9
4156:  MOVFF  FF2,53A
415A:  BCF    FF2.7
415C:  MOVLW  00
415E:  CALL   0AAC
4162:  TBLRD*-
4164:  TBLRD*+
4166:  MOVF   FF5,W
4168:  MOVWF  FEE
416A:  IORLW  00
416C:  BNZ   4164
416E:  MOVLB  5
4170:  BTFSC  x3A.7
4172:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
4174:  MOVLW  05
4176:  MOVWF  x3B
4178:  MOVLW  1A
417A:  MOVWF  x3A
417C:  CLRF   x3C
417E:  CLRF   x3D
4180:  MOVLW  01
4182:  MOVWF  x3E
4184:  MOVLW  02
4186:  MOVWF  x3F
4188:  MOVLB  0
418A:  CALL   17EC
....................        
....................          strcpy(Menus.Letra,"Textil e Instrumental"); 
418E:  MOVLW  05
4190:  MOVWF  FEA
4192:  MOVLW  1A
4194:  MOVWF  FE9
4196:  MOVFF  FF2,53A
419A:  BCF    FF2.7
419C:  MOVLW  00
419E:  CALL   086E
41A2:  TBLRD*-
41A4:  TBLRD*+
41A6:  MOVF   FF5,W
41A8:  MOVWF  FEE
41AA:  IORLW  00
41AC:  BNZ   41A4
41AE:  MOVLB  5
41B0:  BTFSC  x3A.7
41B2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
41B4:  MOVLW  05
41B6:  MOVWF  x3B
41B8:  MOVLW  1A
41BA:  MOVWF  x3A
41BC:  CLRF   x3C
41BE:  MOVLW  37
41C0:  MOVWF  x3D
41C2:  MOVLW  02
41C4:  MOVWF  x3E
41C6:  MOVLW  01
41C8:  MOVWF  x3F
41CA:  MOVLB  0
41CC:  CALL   17EC
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
41D0:  MOVLW  05
41D2:  MOVWF  FEA
41D4:  MOVLW  1A
41D6:  MOVWF  FE9
41D8:  MOVFF  FF2,53A
41DC:  BCF    FF2.7
41DE:  MOVLW  00
41E0:  CALL   09FA
41E4:  TBLRD*-
41E6:  TBLRD*+
41E8:  MOVF   FF5,W
41EA:  MOVWF  FEE
41EC:  IORLW  00
41EE:  BNZ   41E6
41F0:  MOVLB  5
41F2:  BTFSC  x3A.7
41F4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
41F6:  MOVLW  05
41F8:  MOVWF  x3B
41FA:  MOVLW  1A
41FC:  MOVWF  x3A
41FE:  CLRF   x3C
4200:  MOVWF  x3D
4202:  CLRF   x3E
4204:  MOVLW  01
4206:  MOVWF  x3F
4208:  MOVLB  0
420A:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
420E:  MOVLW  05
4210:  MOVWF  FEA
4212:  MOVLW  1A
4214:  MOVWF  FE9
4216:  MOVFF  FF2,53A
421A:  BCF    FF2.7
421C:  MOVLW  00
421E:  CALL   0AD0
4222:  TBLRD*-
4224:  TBLRD*+
4226:  MOVF   FF5,W
4228:  MOVWF  FEE
422A:  IORLW  00
422C:  BNZ   4224
422E:  MOVLB  5
4230:  BTFSC  x3A.7
4232:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
4234:  MOVLW  05
4236:  MOVWF  x3B
4238:  MOVLW  1A
423A:  MOVWF  x3A
423C:  CLRF   x3C
423E:  MOVLW  24
4240:  MOVWF  x3D
4242:  CLRF   x3E
4244:  MOVLW  01
4246:  MOVWF  x3F
4248:  MOVLB  0
424A:  CALL   17EC
....................          strcpy(Menus.Letra,"T. Secado= 10m"); 
424E:  MOVLW  05
4250:  MOVWF  FEA
4252:  MOVLW  1A
4254:  MOVWF  FE9
4256:  MOVFF  FF2,53A
425A:  BCF    FF2.7
425C:  MOVLW  00
425E:  CALL   0B00
4262:  TBLRD*-
4264:  TBLRD*+
4266:  MOVF   FF5,W
4268:  MOVWF  FEE
426A:  IORLW  00
426C:  BNZ   4264
426E:  MOVLB  5
4270:  BTFSC  x3A.7
4272:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
4274:  MOVLW  05
4276:  MOVWF  x3B
4278:  MOVLW  1A
427A:  MOVWF  x3A
427C:  CLRF   x3C
427E:  MOVLW  2E
4280:  MOVWF  x3D
4282:  CLRF   x3E
4284:  MOVLW  01
4286:  MOVWF  x3F
4288:  MOVLB  0
428A:  CALL   17EC
....................          visual=0; 
428E:  MOVLB  4
4290:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
4292:  BSF    F96.2
4294:  BTFSS  F84.2
4296:  BRA    42B8
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
4298:  MOVLW  1E
429A:  MOVLB  5
429C:  MOVWF  x3F
429E:  MOVLB  0
42A0:  CALL   10C4
42A4:  MOVLW  01
42A6:  MOVLB  4
42A8:  MOVWF  x89
42AA:  MOVLB  5
42AC:  CLRF   x3B
42AE:  MOVLB  0
42B0:  CALL   11BC
42B4:  MOVLB  4
42B6:  BSF    x7C.4
....................       }                  
....................  
....................       if(RIGHT)// Si oprime derecha 
42B8:  BSF    F96.1
42BA:  BTFSS  F84.1
42BC:  BRA    447A
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
42BE:  CLRF   xA8
42C0:  CLRF   xA9
42C2:  MOVLW  05
42C4:  MOVWF  xAA
42C6:  MOVLW  02
42C8:  MOVWF  xAB
42CA:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=1;Setpoint=121;Menu=20;delay_ms(700); 
42CC:  CLRF   xB0
42CE:  CLRF   xB1
42D0:  CLRF   xB2
42D2:  MOVLW  01
42D4:  MOVWF  xB3
42D6:  MOVLW  79
42D8:  MOVWF  x8E
42DA:  MOVLW  14
42DC:  MOVWF  x89
42DE:  MOVLW  04
42E0:  MOVLB  5
42E2:  MOVWF  x3A
42E4:  MOVLW  AF
42E6:  MOVWF  x3F
42E8:  MOVLB  0
42EA:  CALL   10C4
42EE:  MOVLB  5
42F0:  DECFSZ x3A,F
42F2:  BRA    42E4
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
42F4:  MOVLW  14
42F6:  MOVLB  4
42F8:  MOVWF  x89
42FA:  MOVLW  0F
42FC:  MOVLB  5
42FE:  MOVWF  x4C
4300:  MOVLW  12
4302:  MOVWF  x4D
4304:  MOVLW  1E
4306:  MOVWF  x4E
4308:  MOVLW  35
430A:  MOVWF  x4F
430C:  CLRF   x50
430E:  MOVLW  01
4310:  MOVWF  x51
4312:  MOVLB  0
4314:  CALL   172A
4318:  MOVLB  4
431A:  CLRF   x92
431C:  MOVLW  C0
431E:  IORWF  FF2,F
4320:  MOVLB  5
4322:  CLRF   x3B
4324:  MOVLB  0
4326:  CALL   11BC
....................          strcpy(Menus.Letra,"Calentando"); 
432A:  MOVLW  05
432C:  MOVWF  FEA
432E:  MOVLW  1A
4330:  MOVWF  FE9
4332:  MOVFF  FF2,53A
4336:  BCF    FF2.7
4338:  MOVLW  00
433A:  CALL   0974
433E:  TBLRD*-
4340:  TBLRD*+
4342:  MOVF   FF5,W
4344:  MOVWF  FEE
4346:  IORLW  00
4348:  BNZ   4340
434A:  MOVLB  5
434C:  BTFSC  x3A.7
434E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
4350:  MOVLW  05
4352:  MOVWF  x3B
4354:  MOVLW  1A
4356:  MOVWF  x3A
4358:  CLRF   x3C
435A:  MOVLW  37
435C:  MOVWF  x3D
435E:  MOVLW  02
4360:  MOVWF  x3E
4362:  MOVLW  01
4364:  MOVWF  x3F
4366:  MOVLB  0
4368:  CALL   17EC
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
436C:  MOVLW  0F
436E:  MOVLB  5
4370:  MOVWF  x4C
4372:  MOVLW  12
4374:  MOVWF  x4D
4376:  MOVLW  1E
4378:  MOVWF  x4E
437A:  MOVLW  35
437C:  MOVWF  x4F
437E:  CLRF   x50
4380:  MOVLW  01
4382:  MOVWF  x51
4384:  MOVLB  0
4386:  CALL   172A
....................          glcd_imagen(5); 
438A:  MOVLW  05
438C:  MOVLB  5
438E:  MOVWF  x3A
4390:  MOVLB  0
4392:  CALL   2018
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
4396:  MOVLW  05
4398:  MOVWF  FEA
439A:  MOVLW  1A
439C:  MOVWF  FE9
439E:  MOVFF  FF2,53A
43A2:  BCF    FF2.7
43A4:  MOVLW  00
43A6:  CALL   099A
43AA:  TBLRD*-
43AC:  TBLRD*+
43AE:  MOVF   FF5,W
43B0:  MOVWF  FEE
43B2:  IORLW  00
43B4:  BNZ   43AC
43B6:  MOVLB  5
43B8:  BTFSC  x3A.7
43BA:  BSF    FF2.7
43BC:  MOVLW  05
43BE:  MOVWF  x3B
43C0:  MOVLW  1A
43C2:  MOVWF  x3A
43C4:  CLRF   x3C
43C6:  CLRF   x3D
43C8:  MOVLW  02
43CA:  MOVWF  x3E
43CC:  MOVLW  01
43CE:  MOVWF  x3F
43D0:  MOVLB  0
43D2:  CALL   17EC
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
43D6:  MOVLW  05
43D8:  MOVWF  FEA
43DA:  MOVLW  1A
43DC:  MOVWF  FE9
43DE:  MOVFF  FF2,53A
43E2:  BCF    FF2.7
43E4:  MOVLW  00
43E6:  CALL   09BC
43EA:  TBLRD*-
43EC:  TBLRD*+
43EE:  MOVF   FF5,W
43F0:  MOVWF  FEE
43F2:  IORLW  00
43F4:  BNZ   43EC
43F6:  MOVLB  5
43F8:  BTFSC  x3A.7
43FA:  BSF    FF2.7
43FC:  MOVLW  05
43FE:  MOVWF  x3B
4400:  MOVLW  1A
4402:  MOVWF  x3A
4404:  CLRF   x3C
4406:  MOVLW  08
4408:  MOVWF  x3D
440A:  MOVLW  02
440C:  MOVWF  x3E
440E:  MOVLW  01
4410:  MOVWF  x3F
4412:  MOVLB  0
4414:  CALL   17EC
....................          glcd_circle(95,40,2,NO,ON); 
4418:  MOVLW  5F
441A:  MOVLB  5
441C:  MOVWF  x3A
441E:  MOVLW  28
4420:  MOVWF  x3B
4422:  MOVLW  02
4424:  MOVWF  x3C
4426:  CLRF   x3D
4428:  MOVLW  01
442A:  MOVWF  x3E
442C:  MOVLB  0
442E:  CALL   2114
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
4432:  MOVLW  05
4434:  MOVWF  FEA
4436:  MOVLW  1A
4438:  MOVWF  FE9
443A:  MOVFF  FF2,53A
443E:  BCF    FF2.7
4440:  MOVLW  00
4442:  CALL   09DE
4446:  TBLRD*-
4448:  TBLRD*+
444A:  MOVF   FF5,W
444C:  MOVWF  FEE
444E:  IORLW  00
4450:  BNZ   4448
4452:  MOVLB  5
4454:  BTFSC  x3A.7
4456:  BSF    FF2.7
4458:  MOVLW  05
445A:  MOVWF  x3B
445C:  MOVLW  1A
445E:  MOVWF  x3A
4460:  MOVLW  66
4462:  MOVWF  x3C
4464:  MOVLW  28
4466:  MOVWF  x3D
4468:  MOVLW  02
446A:  MOVWF  x3E
446C:  MOVWF  x3F
446E:  MOVLB  0
4470:  CALL   17EC
....................          MuestraTiemposProgramados(); 
4474:  CALL   2514
4478:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
.................... // Testerilizacionp[3]<,Tsecadop[3]<,Setpoint 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==8){ // Menu de Proceso Personalizado 
447A:  MOVF   x89,W
447C:  SUBLW  08
447E:  BTFSS  FD8.2
4480:  BRA    485E
....................          
....................          if(visual==1) 
4482:  BTFSS  x7C.4
4484:  BRA    47AA
....................          { 
....................             if(Opcion>5) 
4486:  MOVF   x90,W
4488:  SUBLW  05
448A:  BC    4490
....................             {Opcion=1;} 
448C:  MOVLW  01
448E:  MOVWF  x90
....................             if(Opcion<1) 
4490:  MOVF   x90,F
4492:  BNZ   4498
....................             {Opcion=5;} 
4494:  MOVLW  05
4496:  MOVWF  x90
....................              
....................             strcpy(Menus.Letra,"Proceso Personalizado"); 
4498:  MOVLW  05
449A:  MOVWF  FEA
449C:  MOVLW  1A
449E:  MOVWF  FE9
44A0:  MOVFF  FF2,53A
44A4:  BCF    FF2.7
44A6:  MOVLW  00
44A8:  MOVLB  0
44AA:  CALL   0B2A
44AE:  TBLRD*-
44B0:  TBLRD*+
44B2:  MOVF   FF5,W
44B4:  MOVWF  FEE
44B6:  IORLW  00
44B8:  BNZ   44B0
44BA:  MOVLB  5
44BC:  BTFSC  x3A.7
44BE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1); 
44C0:  MOVLW  05
44C2:  MOVWF  x3B
44C4:  MOVLW  1A
44C6:  MOVWF  x3A
44C8:  CLRF   x3C
44CA:  CLRF   x3D
44CC:  MOVLW  01
44CE:  MOVWF  x3E
44D0:  MOVWF  x3F
44D2:  MOVLB  0
44D4:  CALL   17EC
....................        
....................             if(Opcion==1)    
44D8:  MOVLB  4
44DA:  DECFSZ x90,W
44DC:  BRA    4524
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
44DE:  MOVLW  05
44E0:  MOVWF  FEA
44E2:  MOVLW  1A
44E4:  MOVWF  FE9
44E6:  MOVFF  FF2,53A
44EA:  BCF    FF2.7
44EC:  MOVLW  00
44EE:  MOVLB  0
44F0:  CALL   0B5A
44F4:  TBLRD*-
44F6:  TBLRD*+
44F8:  MOVF   FF5,W
44FA:  MOVWF  FEE
44FC:  IORLW  00
44FE:  BNZ   44F6
4500:  MOVLB  5
4502:  BTFSC  x3A.7
4504:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,1,1);} 
4506:  MOVLW  05
4508:  MOVWF  x3B
450A:  MOVLW  1A
450C:  MOVWF  x3A
450E:  CLRF   x3C
4510:  MOVLW  0A
4512:  MOVWF  x3D
4514:  MOVLW  01
4516:  MOVWF  x3E
4518:  MOVWF  x3F
451A:  MOVLB  0
451C:  CALL   17EC
....................             else 
4520:  BRA    4566
4522:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
4524:  MOVLW  05
4526:  MOVWF  FEA
4528:  MOVLW  1A
452A:  MOVWF  FE9
452C:  MOVFF  FF2,53A
4530:  BCF    FF2.7
4532:  MOVLW  00
4534:  MOVLB  0
4536:  CALL   0B5A
453A:  TBLRD*-
453C:  TBLRD*+
453E:  MOVF   FF5,W
4540:  MOVWF  FEE
4542:  IORLW  00
4544:  BNZ   453C
4546:  MOVLB  5
4548:  BTFSC  x3A.7
454A:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,0,1);} 
454C:  MOVLW  05
454E:  MOVWF  x3B
4550:  MOVLW  1A
4552:  MOVWF  x3A
4554:  CLRF   x3C
4556:  MOVLW  0A
4558:  MOVWF  x3D
455A:  CLRF   x3E
455C:  MOVLW  01
455E:  MOVWF  x3F
4560:  MOVLB  0
4562:  CALL   17EC
....................              
....................             if(Opcion==2)    
4566:  MOVLB  4
4568:  MOVF   x90,W
456A:  SUBLW  02
456C:  BNZ   45B4
....................                {strcpy(Menus.Letra,"T. Secado"); 
456E:  MOVLW  05
4570:  MOVWF  FEA
4572:  MOVLW  1A
4574:  MOVWF  FE9
4576:  MOVFF  FF2,53A
457A:  BCF    FF2.7
457C:  MOVLW  00
457E:  MOVLB  0
4580:  CALL   0B86
4584:  TBLRD*-
4586:  TBLRD*+
4588:  MOVF   FF5,W
458A:  MOVWF  FEE
458C:  IORLW  00
458E:  BNZ   4586
4590:  MOVLB  5
4592:  BTFSC  x3A.7
4594:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,1,1);} 
4596:  MOVLW  05
4598:  MOVWF  x3B
459A:  MOVLW  1A
459C:  MOVWF  x3A
459E:  CLRF   x3C
45A0:  MOVLW  14
45A2:  MOVWF  x3D
45A4:  MOVLW  01
45A6:  MOVWF  x3E
45A8:  MOVWF  x3F
45AA:  MOVLB  0
45AC:  CALL   17EC
....................             else 
45B0:  BRA    45F6
45B2:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Secado"); 
45B4:  MOVLW  05
45B6:  MOVWF  FEA
45B8:  MOVLW  1A
45BA:  MOVWF  FE9
45BC:  MOVFF  FF2,53A
45C0:  BCF    FF2.7
45C2:  MOVLW  00
45C4:  MOVLB  0
45C6:  CALL   0B86
45CA:  TBLRD*-
45CC:  TBLRD*+
45CE:  MOVF   FF5,W
45D0:  MOVWF  FEE
45D2:  IORLW  00
45D4:  BNZ   45CC
45D6:  MOVLB  5
45D8:  BTFSC  x3A.7
45DA:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,0,1);}    
45DC:  MOVLW  05
45DE:  MOVWF  x3B
45E0:  MOVLW  1A
45E2:  MOVWF  x3A
45E4:  CLRF   x3C
45E6:  MOVLW  14
45E8:  MOVWF  x3D
45EA:  CLRF   x3E
45EC:  MOVLW  01
45EE:  MOVWF  x3F
45F0:  MOVLB  0
45F2:  CALL   17EC
....................                 
....................              if(Opcion==3)    
45F6:  MOVLB  4
45F8:  MOVF   x90,W
45FA:  SUBLW  03
45FC:  BNZ   4644
....................                {strcpy(Menus.Letra,"Temperatura"); 
45FE:  MOVLW  05
4600:  MOVWF  FEA
4602:  MOVLW  1A
4604:  MOVWF  FE9
4606:  MOVFF  FF2,53A
460A:  BCF    FF2.7
460C:  MOVLW  00
460E:  MOVLB  0
4610:  CALL   0BAA
4614:  TBLRD*-
4616:  TBLRD*+
4618:  MOVF   FF5,W
461A:  MOVWF  FEE
461C:  IORLW  00
461E:  BNZ   4616
4620:  MOVLB  5
4622:  BTFSC  x3A.7
4624:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,1,1);} 
4626:  MOVLW  05
4628:  MOVWF  x3B
462A:  MOVLW  1A
462C:  MOVWF  x3A
462E:  CLRF   x3C
4630:  MOVLW  1E
4632:  MOVWF  x3D
4634:  MOVLW  01
4636:  MOVWF  x3E
4638:  MOVWF  x3F
463A:  MOVLB  0
463C:  CALL   17EC
....................             else 
4640:  BRA    4686
4642:  MOVLB  4
....................                {strcpy(Menus.Letra,"Temperatura"); 
4644:  MOVLW  05
4646:  MOVWF  FEA
4648:  MOVLW  1A
464A:  MOVWF  FE9
464C:  MOVFF  FF2,53A
4650:  BCF    FF2.7
4652:  MOVLW  00
4654:  MOVLB  0
4656:  CALL   0BAA
465A:  TBLRD*-
465C:  TBLRD*+
465E:  MOVF   FF5,W
4660:  MOVWF  FEE
4662:  IORLW  00
4664:  BNZ   465C
4666:  MOVLB  5
4668:  BTFSC  x3A.7
466A:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,0,1);} 
466C:  MOVLW  05
466E:  MOVWF  x3B
4670:  MOVLW  1A
4672:  MOVWF  x3A
4674:  CLRF   x3C
4676:  MOVLW  1E
4678:  MOVWF  x3D
467A:  CLRF   x3E
467C:  MOVLW  01
467E:  MOVWF  x3F
4680:  MOVLB  0
4682:  CALL   17EC
....................                 
....................             if(Opcion==4)    
4686:  MOVLB  4
4688:  MOVF   x90,W
468A:  SUBLW  04
468C:  BNZ   46D4
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
468E:  MOVLW  05
4690:  MOVWF  FEA
4692:  MOVLW  1A
4694:  MOVWF  FE9
4696:  MOVFF  FF2,53A
469A:  BCF    FF2.7
469C:  MOVLW  00
469E:  MOVLB  0
46A0:  CALL   0BD0
46A4:  TBLRD*-
46A6:  TBLRD*+
46A8:  MOVF   FF5,W
46AA:  MOVWF  FEE
46AC:  IORLW  00
46AE:  BNZ   46A6
46B0:  MOVLB  5
46B2:  BTFSC  x3A.7
46B4:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,1,1);} 
46B6:  MOVLW  05
46B8:  MOVWF  x3B
46BA:  MOVLW  1A
46BC:  MOVWF  x3A
46BE:  CLRF   x3C
46C0:  MOVLW  28
46C2:  MOVWF  x3D
46C4:  MOVLW  01
46C6:  MOVWF  x3E
46C8:  MOVWF  x3F
46CA:  MOVLB  0
46CC:  CALL   17EC
....................             else 
46D0:  BRA    4716
46D2:  MOVLB  4
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
46D4:  MOVLW  05
46D6:  MOVWF  FEA
46D8:  MOVLW  1A
46DA:  MOVWF  FE9
46DC:  MOVFF  FF2,53A
46E0:  BCF    FF2.7
46E2:  MOVLW  00
46E4:  MOVLB  0
46E6:  CALL   0BD0
46EA:  TBLRD*-
46EC:  TBLRD*+
46EE:  MOVF   FF5,W
46F0:  MOVWF  FEE
46F2:  IORLW  00
46F4:  BNZ   46EC
46F6:  MOVLB  5
46F8:  BTFSC  x3A.7
46FA:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,0,1);}    
46FC:  MOVLW  05
46FE:  MOVWF  x3B
4700:  MOVLW  1A
4702:  MOVWF  x3A
4704:  CLRF   x3C
4706:  MOVLW  28
4708:  MOVWF  x3D
470A:  CLRF   x3E
470C:  MOVLW  01
470E:  MOVWF  x3F
4710:  MOVLB  0
4712:  CALL   17EC
....................                 
....................             if(Opcion==5)    
4716:  MOVLB  4
4718:  MOVF   x90,W
471A:  SUBLW  05
471C:  BNZ   4764
....................                {strcpy(Menus.Letra,"Continuar"); 
471E:  MOVLW  05
4720:  MOVWF  FEA
4722:  MOVLW  1A
4724:  MOVWF  FE9
4726:  MOVFF  FF2,53A
472A:  BCF    FF2.7
472C:  MOVLW  00
472E:  MOVLB  0
4730:  CALL   0BFC
4734:  TBLRD*-
4736:  TBLRD*+
4738:  MOVF   FF5,W
473A:  MOVWF  FEE
473C:  IORLW  00
473E:  BNZ   4736
4740:  MOVLB  5
4742:  BTFSC  x3A.7
4744:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,1,1);} 
4746:  MOVLW  05
4748:  MOVWF  x3B
474A:  MOVLW  1A
474C:  MOVWF  x3A
474E:  CLRF   x3C
4750:  MOVLW  32
4752:  MOVWF  x3D
4754:  MOVLW  01
4756:  MOVWF  x3E
4758:  MOVWF  x3F
475A:  MOVLB  0
475C:  CALL   17EC
....................             else 
4760:  BRA    47A6
4762:  MOVLB  4
....................                {strcpy(Menus.Letra,"Continuar"); 
4764:  MOVLW  05
4766:  MOVWF  FEA
4768:  MOVLW  1A
476A:  MOVWF  FE9
476C:  MOVFF  FF2,53A
4770:  BCF    FF2.7
4772:  MOVLW  00
4774:  MOVLB  0
4776:  CALL   0BFC
477A:  TBLRD*-
477C:  TBLRD*+
477E:  MOVF   FF5,W
4780:  MOVWF  FEE
4782:  IORLW  00
4784:  BNZ   477C
4786:  MOVLB  5
4788:  BTFSC  x3A.7
478A:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,0,1);}   
478C:  MOVLW  05
478E:  MOVWF  x3B
4790:  MOVLW  1A
4792:  MOVWF  x3A
4794:  CLRF   x3C
4796:  MOVLW  32
4798:  MOVWF  x3D
479A:  CLRF   x3E
479C:  MOVLW  01
479E:  MOVWF  x3F
47A0:  MOVLB  0
47A2:  CALL   17EC
....................                           
....................             visual=0; 
47A6:  MOVLB  4
47A8:  BCF    x7C.4
....................          } 
....................          if(UP)//Si oprime hacia arriba 
47AA:  BSF    F92.5
47AC:  BTFSS  F80.5
47AE:  BRA    47CA
....................          {  if(Flanco == 0)  
47B0:  BTFSC  x7C.0
47B2:  BRA    47C8
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
47B4:  BSF    x7C.0
47B6:  MOVLW  1E
47B8:  MOVLB  5
47BA:  MOVWF  x3F
47BC:  MOVLB  0
47BE:  CALL   10C4
47C2:  MOVLB  4
47C4:  DECF   x90,F
47C6:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
47C8:  BRA    47CC
....................                {Flanco = 0;} 
47CA:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
47CC:  BSF    F96.0
47CE:  BTFSS  F84.0
47D0:  BRA    47EC
....................          {  if(Flanco2 == 0)  
47D2:  BTFSC  x7C.2
47D4:  BRA    47EA
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
47D6:  BSF    x7C.2
47D8:  MOVLW  1E
47DA:  MOVLB  5
47DC:  MOVWF  x3F
47DE:  MOVLB  0
47E0:  CALL   10C4
47E4:  MOVLB  4
47E6:  INCF   x90,F
47E8:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
47EA:  BRA    47EE
....................                {Flanco2 = 0;}   
47EC:  BCF    x7C.2
....................                 
....................          if(RIGHT)//Si oprime SET 
47EE:  BSF    F96.1
47F0:  BTFSS  F84.1
47F2:  BRA    482C
....................          {  if(Flanco1 == 0)  
47F4:  BTFSC  x7C.1
47F6:  BRA    482A
....................                {Flanco1 = 1;delay_ms(300);Menu=Opcion+10;Opcion=1;glcd_fillscreen(OFF);visual=1; 
47F8:  BSF    x7C.1
47FA:  MOVLW  02
47FC:  MOVLB  5
47FE:  MOVWF  x3A
4800:  MOVLW  96
4802:  MOVWF  x3F
4804:  MOVLB  0
4806:  CALL   10C4
480A:  MOVLB  5
480C:  DECFSZ x3A,F
480E:  BRA    4800
4810:  MOVLW  0A
4812:  MOVLB  4
4814:  ADDWF  x90,W
4816:  MOVWF  x89
4818:  MOVLW  01
481A:  MOVWF  x90
481C:  MOVLB  5
481E:  CLRF   x3B
4820:  MOVLB  0
4822:  CALL   11BC
4826:  MOVLB  4
4828:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
482A:  BRA    482E
....................                {Flanco1 = 0;}   
482C:  BCF    x7C.1
....................                 
....................          if(LEFT)//Si oprime boton de Toma. 
482E:  BSF    F96.2
4830:  BTFSS  F84.2
4832:  BRA    485E
....................          {delay_ms(700);Menu=1;glcd_fillscreen(OFF);visual=1;} 
4834:  MOVLW  04
4836:  MOVLB  5
4838:  MOVWF  x3A
483A:  MOVLW  AF
483C:  MOVWF  x3F
483E:  MOVLB  0
4840:  CALL   10C4
4844:  MOVLB  5
4846:  DECFSZ x3A,F
4848:  BRA    483A
484A:  MOVLW  01
484C:  MOVLB  4
484E:  MOVWF  x89
4850:  MOVLB  5
4852:  CLRF   x3B
4854:  MOVLB  0
4856:  CALL   11BC
485A:  MOVLB  4
485C:  BSF    x7C.4
....................           
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==9){ // Menu de Cambio de Contraseña 
485E:  MOVF   x89,W
4860:  SUBLW  09
4862:  BTFSS  FD8.2
4864:  BRA    4D1A
....................          
....................       strcpy(Menus.Letra,"Clave"); 
4866:  MOVLW  05
4868:  MOVWF  FEA
486A:  MOVLW  1A
486C:  MOVWF  FE9
486E:  MOVFF  FF2,53A
4872:  BCF    FF2.7
4874:  MOVLW  00
4876:  MOVLB  0
4878:  CALL   0764
487C:  TBLRD*-
487E:  TBLRD*+
4880:  MOVF   FF5,W
4882:  MOVWF  FEE
4884:  IORLW  00
4886:  BNZ   487E
4888:  MOVLB  5
488A:  BTFSC  x3A.7
488C:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
488E:  MOVLW  05
4890:  MOVWF  x3B
4892:  MOVLW  1A
4894:  MOVWF  x3A
4896:  MOVLW  1E
4898:  MOVWF  x3C
489A:  CLRF   x3D
489C:  MOVLW  01
489E:  MOVWF  x3E
48A0:  MOVLW  02
48A2:  MOVWF  x3F
48A4:  MOVLB  0
48A6:  CALL   17EC
....................        
....................       if(unidad==1) 
48AA:  MOVLB  4
48AC:  DECFSZ x8A,W
48AE:  BRA    490E
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1); 
48B0:  MOVFF  4B4,53C
48B4:  MOVLW  14
48B6:  MOVLB  5
48B8:  MOVWF  x3D
48BA:  MOVLW  1E
48BC:  MOVWF  x3E
48BE:  MOVLW  01
48C0:  MOVWF  x3F
48C2:  MOVLB  0
48C4:  CALL   1A12
....................          displayContrasena(Contrasena[1],40,30,0); 
48C8:  MOVFF  4B5,53C
48CC:  MOVLW  28
48CE:  MOVLB  5
48D0:  MOVWF  x3D
48D2:  MOVLW  1E
48D4:  MOVWF  x3E
48D6:  CLRF   x3F
48D8:  MOVLB  0
48DA:  CALL   1A12
....................          displayContrasena(Contrasena[2],60,30,0); 
48DE:  MOVFF  4B6,53C
48E2:  MOVLW  3C
48E4:  MOVLB  5
48E6:  MOVWF  x3D
48E8:  MOVLW  1E
48EA:  MOVWF  x3E
48EC:  CLRF   x3F
48EE:  MOVLB  0
48F0:  CALL   1A12
....................          displayContrasena(Contrasena[3],80,30,0); 
48F4:  MOVFF  4B7,53C
48F8:  MOVLW  50
48FA:  MOVLB  5
48FC:  MOVWF  x3D
48FE:  MOVLW  1E
4900:  MOVWF  x3E
4902:  CLRF   x3F
4904:  MOVLB  0
4906:  CALL   1A12
....................       } 
....................       else 
490A:  BRA    4A36
490C:  MOVLB  4
....................       { 
....................          if(unidad==2) 
490E:  MOVF   x8A,W
4910:  SUBLW  02
4912:  BNZ   4972
....................          { 
....................             displayContrasena(Contrasena[0],20,30,0); 
4914:  MOVFF  4B4,53C
4918:  MOVLW  14
491A:  MOVLB  5
491C:  MOVWF  x3D
491E:  MOVLW  1E
4920:  MOVWF  x3E
4922:  CLRF   x3F
4924:  MOVLB  0
4926:  CALL   1A12
....................             displayContrasena(Contrasena[1],40,30,1); 
492A:  MOVFF  4B5,53C
492E:  MOVLW  28
4930:  MOVLB  5
4932:  MOVWF  x3D
4934:  MOVLW  1E
4936:  MOVWF  x3E
4938:  MOVLW  01
493A:  MOVWF  x3F
493C:  MOVLB  0
493E:  CALL   1A12
....................             displayContrasena(Contrasena[2],60,30,0); 
4942:  MOVFF  4B6,53C
4946:  MOVLW  3C
4948:  MOVLB  5
494A:  MOVWF  x3D
494C:  MOVLW  1E
494E:  MOVWF  x3E
4950:  CLRF   x3F
4952:  MOVLB  0
4954:  CALL   1A12
....................             displayContrasena(Contrasena[3],80,30,0); 
4958:  MOVFF  4B7,53C
495C:  MOVLW  50
495E:  MOVLB  5
4960:  MOVWF  x3D
4962:  MOVLW  1E
4964:  MOVWF  x3E
4966:  CLRF   x3F
4968:  MOVLB  0
496A:  CALL   1A12
....................          } 
....................          else 
496E:  BRA    4A36
4970:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4972:  MOVF   x8A,W
4974:  SUBLW  03
4976:  BNZ   49D6
....................             { 
....................                displayContrasena(Contrasena[0],20,30,0); 
4978:  MOVFF  4B4,53C
497C:  MOVLW  14
497E:  MOVLB  5
4980:  MOVWF  x3D
4982:  MOVLW  1E
4984:  MOVWF  x3E
4986:  CLRF   x3F
4988:  MOVLB  0
498A:  CALL   1A12
....................                displayContrasena(Contrasena[1],40,30,0); 
498E:  MOVFF  4B5,53C
4992:  MOVLW  28
4994:  MOVLB  5
4996:  MOVWF  x3D
4998:  MOVLW  1E
499A:  MOVWF  x3E
499C:  CLRF   x3F
499E:  MOVLB  0
49A0:  CALL   1A12
....................                displayContrasena(Contrasena[2],60,30,1); 
49A4:  MOVFF  4B6,53C
49A8:  MOVLW  3C
49AA:  MOVLB  5
49AC:  MOVWF  x3D
49AE:  MOVLW  1E
49B0:  MOVWF  x3E
49B2:  MOVLW  01
49B4:  MOVWF  x3F
49B6:  MOVLB  0
49B8:  CALL   1A12
....................                displayContrasena(Contrasena[3],80,30,0); 
49BC:  MOVFF  4B7,53C
49C0:  MOVLW  50
49C2:  MOVLB  5
49C4:  MOVWF  x3D
49C6:  MOVLW  1E
49C8:  MOVWF  x3E
49CA:  CLRF   x3F
49CC:  MOVLB  0
49CE:  CALL   1A12
....................             } 
....................             else 
49D2:  BRA    4A36
49D4:  MOVLB  4
....................             { 
....................                if(unidad==4) 
49D6:  MOVF   x8A,W
49D8:  SUBLW  04
49DA:  BNZ   4A38
....................                { 
....................                   displayContrasena(Contrasena[0],20,30,0); 
49DC:  MOVFF  4B4,53C
49E0:  MOVLW  14
49E2:  MOVLB  5
49E4:  MOVWF  x3D
49E6:  MOVLW  1E
49E8:  MOVWF  x3E
49EA:  CLRF   x3F
49EC:  MOVLB  0
49EE:  CALL   1A12
....................                   displayContrasena(Contrasena[1],40,30,0); 
49F2:  MOVFF  4B5,53C
49F6:  MOVLW  28
49F8:  MOVLB  5
49FA:  MOVWF  x3D
49FC:  MOVLW  1E
49FE:  MOVWF  x3E
4A00:  CLRF   x3F
4A02:  MOVLB  0
4A04:  CALL   1A12
....................                   displayContrasena(Contrasena[2],60,30,0); 
4A08:  MOVFF  4B6,53C
4A0C:  MOVLW  3C
4A0E:  MOVLB  5
4A10:  MOVWF  x3D
4A12:  MOVLW  1E
4A14:  MOVWF  x3E
4A16:  CLRF   x3F
4A18:  MOVLB  0
4A1A:  CALL   1A12
....................                   displayContrasena(Contrasena[3],80,30,1); 
4A1E:  MOVFF  4B7,53C
4A22:  MOVLW  50
4A24:  MOVLB  5
4A26:  MOVWF  x3D
4A28:  MOVLW  1E
4A2A:  MOVWF  x3E
4A2C:  MOVLW  01
4A2E:  MOVWF  x3F
4A30:  MOVLB  0
4A32:  CALL   1A12
4A36:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4A38:  BSF    F92.5
4A3A:  BTFSS  F80.5
4A3C:  BRA    4AA6
....................       { 
....................          if(Flanco == 0) 
4A3E:  BTFSC  x7C.0
4A40:  BRA    4AA4
....................          { 
....................             Flanco = 1;delay_ms(30); 
4A42:  BSF    x7C.0
4A44:  MOVLW  1E
4A46:  MOVLB  5
4A48:  MOVWF  x3F
4A4A:  MOVLB  0
4A4C:  CALL   10C4
....................             for(i=1;i<=4;i++) 
4A50:  MOVLW  01
4A52:  MOVLB  4
4A54:  MOVWF  x8D
4A56:  MOVF   x8D,W
4A58:  SUBLW  04
4A5A:  BNC   4AA4
....................             { 
....................                if(unidad==i) 
4A5C:  MOVF   x8D,W
4A5E:  SUBWF  x8A,W
4A60:  BNZ   4AA0
....................                { 
....................                   Contrasena[i-1]++; 
4A62:  MOVLW  01
4A64:  SUBWF  x8D,W
4A66:  CLRF   03
4A68:  ADDLW  B4
4A6A:  MOVWF  FE9
4A6C:  MOVLW  04
4A6E:  ADDWFC 03,W
4A70:  MOVWF  FEA
4A72:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
4A74:  MOVLW  01
4A76:  SUBWF  x8D,W
4A78:  CLRF   03
4A7A:  ADDLW  B4
4A7C:  MOVWF  FE9
4A7E:  MOVLW  04
4A80:  ADDWFC 03,W
4A82:  MOVWF  FEA
4A84:  BTFSC  FEF.7
4A86:  BRA    4AA0
4A88:  MOVF   FEF,W
4A8A:  SUBLW  09
4A8C:  BC    4AA0
....................                   { 
....................                      Contrasena[i-1]=0; 
4A8E:  MOVLW  01
4A90:  SUBWF  x8D,W
4A92:  CLRF   03
4A94:  ADDLW  B4
4A96:  MOVWF  FE9
4A98:  MOVLW  04
4A9A:  ADDWFC 03,W
4A9C:  MOVWF  FEA
4A9E:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4AA0:  INCF   x8D,F
4AA2:  BRA    4A56
....................          } 
....................       } 
....................       else 
4AA4:  BRA    4AA8
....................       { 
....................          Flanco = 0; 
4AA6:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4AA8:  BSF    F96.0
4AAA:  BTFSS  F84.0
4AAC:  BRA    4B14
....................       { 
....................          if(Flanco2 == 0) 
4AAE:  BTFSC  x7C.2
4AB0:  BRA    4B12
....................             {Flanco2 = 1;delay_ms(30); 
4AB2:  BSF    x7C.2
4AB4:  MOVLW  1E
4AB6:  MOVLB  5
4AB8:  MOVWF  x3F
4ABA:  MOVLB  0
4ABC:  CALL   10C4
....................                for(i=1;i<=4;i++) 
4AC0:  MOVLW  01
4AC2:  MOVLB  4
4AC4:  MOVWF  x8D
4AC6:  MOVF   x8D,W
4AC8:  SUBLW  04
4ACA:  BNC   4B12
....................                { 
....................                   if(unidad==i) 
4ACC:  MOVF   x8D,W
4ACE:  SUBWF  x8A,W
4AD0:  BNZ   4B0E
....................                   {Contrasena[i-1]--;  
4AD2:  MOVLW  01
4AD4:  SUBWF  x8D,W
4AD6:  CLRF   03
4AD8:  ADDLW  B4
4ADA:  MOVWF  FE9
4ADC:  MOVLW  04
4ADE:  ADDWFC 03,W
4AE0:  MOVWF  FEA
4AE2:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
4AE4:  MOVLW  01
4AE6:  SUBWF  x8D,W
4AE8:  CLRF   03
4AEA:  ADDLW  B4
4AEC:  MOVWF  FE9
4AEE:  MOVLW  04
4AF0:  ADDWFC 03,W
4AF2:  MOVWF  FEA
4AF4:  BTFSC  FEF.7
4AF6:  BRA    4AFA
4AF8:  BRA    4B0E
....................                         {Contrasena[i-1]=9;} 
4AFA:  MOVLW  01
4AFC:  SUBWF  x8D,W
4AFE:  CLRF   03
4B00:  ADDLW  B4
4B02:  MOVWF  FE9
4B04:  MOVLW  04
4B06:  ADDWFC 03,W
4B08:  MOVWF  FEA
4B0A:  MOVLW  09
4B0C:  MOVWF  FEF
....................                   } 
....................                }       
4B0E:  INCF   x8D,F
4B10:  BRA    4AC6
....................             }      
....................       } 
....................       else 
4B12:  BRA    4B16
....................       { 
....................          Flanco2 = 0; 
4B14:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4B16:  BSF    F96.1
4B18:  BTFSS  F84.1
4B1A:  BRA    4B3E
....................       { 
....................          if(Flanco1 == 0) 
4B1C:  BTFSC  x7C.1
4B1E:  BRA    4B3C
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4B20:  BSF    x7C.1
4B22:  MOVLW  02
4B24:  MOVLB  5
4B26:  MOVWF  x3A
4B28:  MOVLW  96
4B2A:  MOVWF  x3F
4B2C:  MOVLB  0
4B2E:  CALL   10C4
4B32:  MOVLB  5
4B34:  DECFSZ x3A,F
4B36:  BRA    4B28
4B38:  MOVLB  4
4B3A:  INCF   x8A,F
....................       } 
....................       else 
4B3C:  BRA    4B40
....................       { 
....................          Flanco1 = 0; 
4B3E:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4B40:  BSF    F96.2
4B42:  BTFSS  F84.2
4B44:  BRA    4B6E
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
4B46:  MOVLW  04
4B48:  MOVLB  5
4B4A:  MOVWF  x3A
4B4C:  MOVLW  AF
4B4E:  MOVWF  x3F
4B50:  MOVLB  0
4B52:  CALL   10C4
4B56:  MOVLB  5
4B58:  DECFSZ x3A,F
4B5A:  BRA    4B4C
4B5C:  MOVLW  01
4B5E:  MOVLB  4
4B60:  MOVWF  x89
4B62:  MOVLB  5
4B64:  CLRF   x3B
4B66:  MOVLB  0
4B68:  CALL   11BC
4B6C:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
4B6E:  MOVF   x8A,W
4B70:  SUBLW  04
4B72:  BTFSC  FD8.0
4B74:  BRA    4D1A
....................       {glcd_fillScreen(OFF); 
4B76:  MOVLB  5
4B78:  CLRF   x3B
4B7A:  MOVLB  0
4B7C:  CALL   11BC
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
4B80:  MOVLB  4
4B82:  MOVF   xB8,W
4B84:  SUBWF  xB4,W
4B86:  BNZ   4C58
4B88:  MOVF   xB9,W
4B8A:  SUBWF  xB5,W
4B8C:  BNZ   4C58
4B8E:  MOVF   xBA,W
4B90:  SUBWF  xB6,W
4B92:  BNZ   4C58
4B94:  MOVF   xBB,W
4B96:  SUBWF  xB7,W
4B98:  BNZ   4C58
....................          { 
....................             glcd_fillScreen(OFF); 
4B9A:  MOVLB  5
4B9C:  CLRF   x3B
4B9E:  MOVLB  0
4BA0:  CALL   11BC
....................             strcpy(Menus.Letra,"Clave"); 
4BA4:  MOVLW  05
4BA6:  MOVWF  FEA
4BA8:  MOVLW  1A
4BAA:  MOVWF  FE9
4BAC:  MOVFF  FF2,53A
4BB0:  BCF    FF2.7
4BB2:  MOVLW  00
4BB4:  CALL   0764
4BB8:  TBLRD*-
4BBA:  TBLRD*+
4BBC:  MOVF   FF5,W
4BBE:  MOVWF  FEE
4BC0:  IORLW  00
4BC2:  BNZ   4BBA
4BC4:  MOVLB  5
4BC6:  BTFSC  x3A.7
4BC8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4BCA:  MOVLW  05
4BCC:  MOVWF  x3B
4BCE:  MOVLW  1A
4BD0:  MOVWF  x3A
4BD2:  MOVLW  1E
4BD4:  MOVWF  x3C
4BD6:  CLRF   x3D
4BD8:  CLRF   x3E
4BDA:  MOVLW  02
4BDC:  MOVWF  x3F
4BDE:  MOVLB  0
4BE0:  CALL   17EC
....................             strcpy(Menus.Letra,"Correcta"); 
4BE4:  MOVLW  05
4BE6:  MOVWF  FEA
4BE8:  MOVLW  1A
4BEA:  MOVWF  FE9
4BEC:  MOVFF  FF2,53A
4BF0:  BCF    FF2.7
4BF2:  MOVLW  00
4BF4:  CALL   0784
4BF8:  TBLRD*-
4BFA:  TBLRD*+
4BFC:  MOVF   FF5,W
4BFE:  MOVWF  FEE
4C00:  IORLW  00
4C02:  BNZ   4BFA
4C04:  MOVLB  5
4C06:  BTFSC  x3A.7
4C08:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
4C0A:  MOVLW  05
4C0C:  MOVWF  x3B
4C0E:  MOVLW  1A
4C10:  MOVWF  x3A
4C12:  MOVLW  0F
4C14:  MOVWF  x3C
4C16:  MOVLW  1E
4C18:  MOVWF  x3D
4C1A:  CLRF   x3E
4C1C:  MOVLW  02
4C1E:  MOVWF  x3F
4C20:  MOVLB  0
4C22:  CALL   17EC
....................             Menu=91;glcd_update();delay_ms(1000); 
4C26:  MOVLW  5B
4C28:  MOVLB  4
4C2A:  MOVWF  x89
4C2C:  MOVLB  0
4C2E:  CALL   1216
4C32:  MOVLW  04
4C34:  MOVLB  5
4C36:  MOVWF  x3A
4C38:  MOVLW  FA
4C3A:  MOVWF  x3F
4C3C:  MOVLB  0
4C3E:  CALL   10C4
4C42:  MOVLB  5
4C44:  DECFSZ x3A,F
4C46:  BRA    4C38
....................             glcd_fillScreen(OFF);unidad=1; 
4C48:  CLRF   x3B
4C4A:  MOVLB  0
4C4C:  CALL   11BC
4C50:  MOVLW  01
4C52:  MOVLB  4
4C54:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
4C56:  BRA    4D1A
....................          { 
....................             glcd_fillScreen(OFF); 
4C58:  MOVLB  5
4C5A:  CLRF   x3B
4C5C:  MOVLB  0
4C5E:  CALL   11BC
....................             strcpy(Menus.Letra,"Clave"); 
4C62:  MOVLW  05
4C64:  MOVWF  FEA
4C66:  MOVLW  1A
4C68:  MOVWF  FE9
4C6A:  MOVFF  FF2,53A
4C6E:  BCF    FF2.7
4C70:  MOVLW  00
4C72:  CALL   0764
4C76:  TBLRD*-
4C78:  TBLRD*+
4C7A:  MOVF   FF5,W
4C7C:  MOVWF  FEE
4C7E:  IORLW  00
4C80:  BNZ   4C78
4C82:  MOVLB  5
4C84:  BTFSC  x3A.7
4C86:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4C88:  MOVLW  05
4C8A:  MOVWF  x3B
4C8C:  MOVLW  1A
4C8E:  MOVWF  x3A
4C90:  MOVLW  1E
4C92:  MOVWF  x3C
4C94:  CLRF   x3D
4C96:  CLRF   x3E
4C98:  MOVLW  02
4C9A:  MOVWF  x3F
4C9C:  MOVLB  0
4C9E:  CALL   17EC
....................             strcpy(Menus.Letra,"Incorrecta"); 
4CA2:  MOVLW  05
4CA4:  MOVWF  FEA
4CA6:  MOVLW  1A
4CA8:  MOVWF  FE9
4CAA:  MOVFF  FF2,53A
4CAE:  BCF    FF2.7
4CB0:  MOVLW  00
4CB2:  CALL   07A8
4CB6:  TBLRD*-
4CB8:  TBLRD*+
4CBA:  MOVF   FF5,W
4CBC:  MOVWF  FEE
4CBE:  IORLW  00
4CC0:  BNZ   4CB8
4CC2:  MOVLB  5
4CC4:  BTFSC  x3A.7
4CC6:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
4CC8:  MOVLW  05
4CCA:  MOVWF  x3B
4CCC:  MOVLW  1A
4CCE:  MOVWF  x3A
4CD0:  CLRF   x3C
4CD2:  MOVLW  1E
4CD4:  MOVWF  x3D
4CD6:  CLRF   x3E
4CD8:  MOVLW  02
4CDA:  MOVWF  x3F
4CDC:  MOVLB  0
4CDE:  CALL   17EC
....................             Menu=1;glcd_update();delay_ms(1000); 
4CE2:  MOVLW  01
4CE4:  MOVLB  4
4CE6:  MOVWF  x89
4CE8:  MOVLB  0
4CEA:  CALL   1216
4CEE:  MOVLW  04
4CF0:  MOVLB  5
4CF2:  MOVWF  x3A
4CF4:  MOVLW  FA
4CF6:  MOVWF  x3F
4CF8:  MOVLB  0
4CFA:  CALL   10C4
4CFE:  MOVLB  5
4D00:  DECFSZ x3A,F
4D02:  BRA    4CF4
....................             glcd_fillScreen(OFF);unidad=1; 
4D04:  CLRF   x3B
4D06:  MOVLB  0
4D08:  CALL   11BC
4D0C:  MOVLW  01
4D0E:  MOVLB  4
4D10:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
4D12:  CLRF   xB4
4D14:  CLRF   xB5
4D16:  CLRF   xB6
4D18:  CLRF   xB7
....................          } 
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==91){ // Menu de Cambio de Contraseña 
4D1A:  MOVF   x89,W
4D1C:  SUBLW  5B
4D1E:  BTFSS  FD8.2
4D20:  BRA    50FA
....................          
....................       strcpy(Menus.Letra,"Clave Nueva"); 
4D22:  MOVLW  05
4D24:  MOVWF  FEA
4D26:  MOVLW  1A
4D28:  MOVWF  FE9
4D2A:  MOVFF  FF2,53A
4D2E:  BCF    FF2.7
4D30:  MOVLW  00
4D32:  MOVLB  0
4D34:  CALL   0C20
4D38:  TBLRD*-
4D3A:  TBLRD*+
4D3C:  MOVF   FF5,W
4D3E:  MOVWF  FEE
4D40:  IORLW  00
4D42:  BNZ   4D3A
4D44:  MOVLB  5
4D46:  BTFSC  x3A.7
4D48:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2);      
4D4A:  MOVLW  05
4D4C:  MOVWF  x3B
4D4E:  MOVLW  1A
4D50:  MOVWF  x3A
4D52:  CLRF   x3C
4D54:  CLRF   x3D
4D56:  MOVLW  01
4D58:  MOVWF  x3E
4D5A:  MOVLW  02
4D5C:  MOVWF  x3F
4D5E:  MOVLB  0
4D60:  CALL   17EC
....................        
....................       if(unidad==1) 
4D64:  MOVLB  4
4D66:  DECFSZ x8A,W
4D68:  BRA    4DC8
....................       { 
....................          displayContrasena(Password[0],20,30,1); 
4D6A:  MOVFF  4B8,53C
4D6E:  MOVLW  14
4D70:  MOVLB  5
4D72:  MOVWF  x3D
4D74:  MOVLW  1E
4D76:  MOVWF  x3E
4D78:  MOVLW  01
4D7A:  MOVWF  x3F
4D7C:  MOVLB  0
4D7E:  CALL   1A12
....................          displayContrasena(Password[1],40,30,0); 
4D82:  MOVFF  4B9,53C
4D86:  MOVLW  28
4D88:  MOVLB  5
4D8A:  MOVWF  x3D
4D8C:  MOVLW  1E
4D8E:  MOVWF  x3E
4D90:  CLRF   x3F
4D92:  MOVLB  0
4D94:  CALL   1A12
....................          displayContrasena(Password[2],60,30,0); 
4D98:  MOVFF  4BA,53C
4D9C:  MOVLW  3C
4D9E:  MOVLB  5
4DA0:  MOVWF  x3D
4DA2:  MOVLW  1E
4DA4:  MOVWF  x3E
4DA6:  CLRF   x3F
4DA8:  MOVLB  0
4DAA:  CALL   1A12
....................          displayContrasena(Password[3],80,30,0); 
4DAE:  MOVFF  4BB,53C
4DB2:  MOVLW  50
4DB4:  MOVLB  5
4DB6:  MOVWF  x3D
4DB8:  MOVLW  1E
4DBA:  MOVWF  x3E
4DBC:  CLRF   x3F
4DBE:  MOVLB  0
4DC0:  CALL   1A12
....................       } 
....................       else 
4DC4:  BRA    4EF0
4DC6:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4DC8:  MOVF   x8A,W
4DCA:  SUBLW  02
4DCC:  BNZ   4E2C
....................          { 
....................             displayContrasena(Password[0],20,30,0); 
4DCE:  MOVFF  4B8,53C
4DD2:  MOVLW  14
4DD4:  MOVLB  5
4DD6:  MOVWF  x3D
4DD8:  MOVLW  1E
4DDA:  MOVWF  x3E
4DDC:  CLRF   x3F
4DDE:  MOVLB  0
4DE0:  CALL   1A12
....................             displayContrasena(Password[1],40,30,1); 
4DE4:  MOVFF  4B9,53C
4DE8:  MOVLW  28
4DEA:  MOVLB  5
4DEC:  MOVWF  x3D
4DEE:  MOVLW  1E
4DF0:  MOVWF  x3E
4DF2:  MOVLW  01
4DF4:  MOVWF  x3F
4DF6:  MOVLB  0
4DF8:  CALL   1A12
....................             displayContrasena(Password[2],60,30,0); 
4DFC:  MOVFF  4BA,53C
4E00:  MOVLW  3C
4E02:  MOVLB  5
4E04:  MOVWF  x3D
4E06:  MOVLW  1E
4E08:  MOVWF  x3E
4E0A:  CLRF   x3F
4E0C:  MOVLB  0
4E0E:  CALL   1A12
....................             displayContrasena(Password[3],80,30,0); 
4E12:  MOVFF  4BB,53C
4E16:  MOVLW  50
4E18:  MOVLB  5
4E1A:  MOVWF  x3D
4E1C:  MOVLW  1E
4E1E:  MOVWF  x3E
4E20:  CLRF   x3F
4E22:  MOVLB  0
4E24:  CALL   1A12
....................          } 
....................          else 
4E28:  BRA    4EF0
4E2A:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4E2C:  MOVF   x8A,W
4E2E:  SUBLW  03
4E30:  BNZ   4E90
....................             { 
....................                displayContrasena(Password[0],20,30,0); 
4E32:  MOVFF  4B8,53C
4E36:  MOVLW  14
4E38:  MOVLB  5
4E3A:  MOVWF  x3D
4E3C:  MOVLW  1E
4E3E:  MOVWF  x3E
4E40:  CLRF   x3F
4E42:  MOVLB  0
4E44:  CALL   1A12
....................                displayContrasena(Password[1],40,30,0); 
4E48:  MOVFF  4B9,53C
4E4C:  MOVLW  28
4E4E:  MOVLB  5
4E50:  MOVWF  x3D
4E52:  MOVLW  1E
4E54:  MOVWF  x3E
4E56:  CLRF   x3F
4E58:  MOVLB  0
4E5A:  CALL   1A12
....................                displayContrasena(Password[2],60,30,1); 
4E5E:  MOVFF  4BA,53C
4E62:  MOVLW  3C
4E64:  MOVLB  5
4E66:  MOVWF  x3D
4E68:  MOVLW  1E
4E6A:  MOVWF  x3E
4E6C:  MOVLW  01
4E6E:  MOVWF  x3F
4E70:  MOVLB  0
4E72:  CALL   1A12
....................                displayContrasena(Password[3],80,30,0); 
4E76:  MOVFF  4BB,53C
4E7A:  MOVLW  50
4E7C:  MOVLB  5
4E7E:  MOVWF  x3D
4E80:  MOVLW  1E
4E82:  MOVWF  x3E
4E84:  CLRF   x3F
4E86:  MOVLB  0
4E88:  CALL   1A12
....................             } 
....................             else 
4E8C:  BRA    4EF0
4E8E:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4E90:  MOVF   x8A,W
4E92:  SUBLW  04
4E94:  BNZ   4EF2
....................                { 
....................                   displayContrasena(Password[0],20,30,0); 
4E96:  MOVFF  4B8,53C
4E9A:  MOVLW  14
4E9C:  MOVLB  5
4E9E:  MOVWF  x3D
4EA0:  MOVLW  1E
4EA2:  MOVWF  x3E
4EA4:  CLRF   x3F
4EA6:  MOVLB  0
4EA8:  CALL   1A12
....................                   displayContrasena(Password[1],40,30,0); 
4EAC:  MOVFF  4B9,53C
4EB0:  MOVLW  28
4EB2:  MOVLB  5
4EB4:  MOVWF  x3D
4EB6:  MOVLW  1E
4EB8:  MOVWF  x3E
4EBA:  CLRF   x3F
4EBC:  MOVLB  0
4EBE:  CALL   1A12
....................                   displayContrasena(Password[2],60,30,0); 
4EC2:  MOVFF  4BA,53C
4EC6:  MOVLW  3C
4EC8:  MOVLB  5
4ECA:  MOVWF  x3D
4ECC:  MOVLW  1E
4ECE:  MOVWF  x3E
4ED0:  CLRF   x3F
4ED2:  MOVLB  0
4ED4:  CALL   1A12
....................                   displayContrasena(Password[3],80,30,1); 
4ED8:  MOVFF  4BB,53C
4EDC:  MOVLW  50
4EDE:  MOVLB  5
4EE0:  MOVWF  x3D
4EE2:  MOVLW  1E
4EE4:  MOVWF  x3E
4EE6:  MOVLW  01
4EE8:  MOVWF  x3F
4EEA:  MOVLB  0
4EEC:  CALL   1A12
4EF0:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4EF2:  BSF    F92.5
4EF4:  BTFSS  F80.5
4EF6:  BRA    4F60
....................       { 
....................          if(Flanco == 0) 
4EF8:  BTFSC  x7C.0
4EFA:  BRA    4F5E
....................          { 
....................             Flanco = 1;delay_ms(30); 
4EFC:  BSF    x7C.0
4EFE:  MOVLW  1E
4F00:  MOVLB  5
4F02:  MOVWF  x3F
4F04:  MOVLB  0
4F06:  CALL   10C4
....................             for(i=1;i<=4;i++) 
4F0A:  MOVLW  01
4F0C:  MOVLB  4
4F0E:  MOVWF  x8D
4F10:  MOVF   x8D,W
4F12:  SUBLW  04
4F14:  BNC   4F5E
....................             { 
....................                if(unidad==i) 
4F16:  MOVF   x8D,W
4F18:  SUBWF  x8A,W
4F1A:  BNZ   4F5A
....................                { 
....................                   Password[i-1]++; 
4F1C:  MOVLW  01
4F1E:  SUBWF  x8D,W
4F20:  CLRF   03
4F22:  ADDLW  B8
4F24:  MOVWF  FE9
4F26:  MOVLW  04
4F28:  ADDWFC 03,W
4F2A:  MOVWF  FEA
4F2C:  INCF   FEF,F
....................                   if(Password[i-1]>9)    
4F2E:  MOVLW  01
4F30:  SUBWF  x8D,W
4F32:  CLRF   03
4F34:  ADDLW  B8
4F36:  MOVWF  FE9
4F38:  MOVLW  04
4F3A:  ADDWFC 03,W
4F3C:  MOVWF  FEA
4F3E:  BTFSC  FEF.7
4F40:  BRA    4F5A
4F42:  MOVF   FEF,W
4F44:  SUBLW  09
4F46:  BC    4F5A
....................                   { 
....................                      Password[i-1]=0; 
4F48:  MOVLW  01
4F4A:  SUBWF  x8D,W
4F4C:  CLRF   03
4F4E:  ADDLW  B8
4F50:  MOVWF  FE9
4F52:  MOVLW  04
4F54:  ADDWFC 03,W
4F56:  MOVWF  FEA
4F58:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4F5A:  INCF   x8D,F
4F5C:  BRA    4F10
....................          } 
....................       } 
....................       else 
4F5E:  BRA    4F62
....................       { 
....................          Flanco = 0; 
4F60:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4F62:  BSF    F96.0
4F64:  BTFSS  F84.0
4F66:  BRA    4FCE
....................       { 
....................          if(Flanco2 == 0) 
4F68:  BTFSC  x7C.2
4F6A:  BRA    4FCC
....................             {Flanco2 = 1;delay_ms(30); 
4F6C:  BSF    x7C.2
4F6E:  MOVLW  1E
4F70:  MOVLB  5
4F72:  MOVWF  x3F
4F74:  MOVLB  0
4F76:  CALL   10C4
....................                for(i=1;i<=4;i++) 
4F7A:  MOVLW  01
4F7C:  MOVLB  4
4F7E:  MOVWF  x8D
4F80:  MOVF   x8D,W
4F82:  SUBLW  04
4F84:  BNC   4FCC
....................                { 
....................                   if(unidad==i) 
4F86:  MOVF   x8D,W
4F88:  SUBWF  x8A,W
4F8A:  BNZ   4FC8
....................                   { 
....................                      Password[i-1]--; 
4F8C:  MOVLW  01
4F8E:  SUBWF  x8D,W
4F90:  CLRF   03
4F92:  ADDLW  B8
4F94:  MOVWF  FE9
4F96:  MOVLW  04
4F98:  ADDWFC 03,W
4F9A:  MOVWF  FEA
4F9C:  DECF   FEF,F
....................                      if(Password[i-1]<0) 
4F9E:  MOVLW  01
4FA0:  SUBWF  x8D,W
4FA2:  CLRF   03
4FA4:  ADDLW  B8
4FA6:  MOVWF  FE9
4FA8:  MOVLW  04
4FAA:  ADDWFC 03,W
4FAC:  MOVWF  FEA
4FAE:  BTFSC  FEF.7
4FB0:  BRA    4FB4
4FB2:  BRA    4FC8
....................                      { 
....................                         Password[i-1]=9; 
4FB4:  MOVLW  01
4FB6:  SUBWF  x8D,W
4FB8:  CLRF   03
4FBA:  ADDLW  B8
4FBC:  MOVWF  FE9
4FBE:  MOVLW  04
4FC0:  ADDWFC 03,W
4FC2:  MOVWF  FEA
4FC4:  MOVLW  09
4FC6:  MOVWF  FEF
....................                      } 
....................                   } 
....................                }       
4FC8:  INCF   x8D,F
4FCA:  BRA    4F80
....................             }      
....................       } 
....................       else 
4FCC:  BRA    4FD0
....................       { 
....................          Flanco2 = 0; 
4FCE:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4FD0:  BSF    F96.1
4FD2:  BTFSS  F84.1
4FD4:  BRA    4FF8
....................       { 
....................          if(Flanco1 == 0) 
4FD6:  BTFSC  x7C.1
4FD8:  BRA    4FF6
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4FDA:  BSF    x7C.1
4FDC:  MOVLW  02
4FDE:  MOVLB  5
4FE0:  MOVWF  x3A
4FE2:  MOVLW  96
4FE4:  MOVWF  x3F
4FE6:  MOVLB  0
4FE8:  CALL   10C4
4FEC:  MOVLB  5
4FEE:  DECFSZ x3A,F
4FF0:  BRA    4FE2
4FF2:  MOVLB  4
4FF4:  INCF   x8A,F
....................       } 
....................       else 
4FF6:  BRA    4FFA
....................       { 
....................          Flanco1 = 0; 
4FF8:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4FFA:  BSF    F96.2
4FFC:  BTFSS  F84.2
4FFE:  BRA    5028
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
5000:  MOVLW  04
5002:  MOVLB  5
5004:  MOVWF  x3A
5006:  MOVLW  AF
5008:  MOVWF  x3F
500A:  MOVLB  0
500C:  CALL   10C4
5010:  MOVLB  5
5012:  DECFSZ x3A,F
5014:  BRA    5006
5016:  MOVLW  01
5018:  MOVLB  4
501A:  MOVWF  x89
501C:  MOVLB  5
501E:  CLRF   x3B
5020:  MOVLB  0
5022:  CALL   11BC
5026:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
5028:  MOVF   x8A,W
502A:  SUBLW  04
502C:  BC    50FA
....................       { 
....................          Opcion=1;unidad=1; 
502E:  MOVLW  01
5030:  MOVWF  x90
5032:  MOVWF  x8A
....................          write_eeprom(10,Password[0]);write_eeprom(11,Password[1]);write_eeprom(12,Password[2]);write_eeprom(13,Password[3]); 
5034:  MOVLW  0A
5036:  MOVWF  FA9
5038:  MOVFF  4B8,FA8
503C:  BCF    FA6.6
503E:  BCF    FA6.7
5040:  BSF    FA6.2
5042:  MOVF   FF2,W
5044:  MOVWF  00
5046:  BCF    FF2.7
5048:  MOVLB  F
504A:  MOVLW  55
504C:  MOVWF  FA7
504E:  MOVLW  AA
5050:  MOVWF  FA7
5052:  BSF    FA6.1
5054:  BTFSC  FA6.1
5056:  BRA    5054
5058:  BCF    FA6.2
505A:  MOVF   00,W
505C:  IORWF  FF2,F
505E:  MOVLW  0B
5060:  MOVWF  FA9
5062:  MOVFF  4B9,FA8
5066:  BCF    FA6.6
5068:  BCF    FA6.7
506A:  BSF    FA6.2
506C:  MOVF   FF2,W
506E:  MOVWF  00
5070:  BCF    FF2.7
5072:  MOVLW  55
5074:  MOVWF  FA7
5076:  MOVLW  AA
5078:  MOVWF  FA7
507A:  BSF    FA6.1
507C:  BTFSC  FA6.1
507E:  BRA    507C
5080:  BCF    FA6.2
5082:  MOVF   00,W
5084:  IORWF  FF2,F
5086:  MOVLW  0C
5088:  MOVWF  FA9
508A:  MOVFF  4BA,FA8
508E:  BCF    FA6.6
5090:  BCF    FA6.7
5092:  BSF    FA6.2
5094:  MOVF   FF2,W
5096:  MOVWF  00
5098:  BCF    FF2.7
509A:  MOVLW  55
509C:  MOVWF  FA7
509E:  MOVLW  AA
50A0:  MOVWF  FA7
50A2:  BSF    FA6.1
50A4:  BTFSC  FA6.1
50A6:  BRA    50A4
50A8:  BCF    FA6.2
50AA:  MOVF   00,W
50AC:  IORWF  FF2,F
50AE:  MOVLW  0D
50B0:  MOVWF  FA9
50B2:  MOVFF  4BB,FA8
50B6:  BCF    FA6.6
50B8:  BCF    FA6.7
50BA:  BSF    FA6.2
50BC:  MOVF   FF2,W
50BE:  MOVWF  00
50C0:  BCF    FF2.7
50C2:  MOVLW  55
50C4:  MOVWF  FA7
50C6:  MOVLW  AA
50C8:  MOVWF  FA7
50CA:  BSF    FA6.1
50CC:  BTFSC  FA6.1
50CE:  BRA    50CC
50D0:  BCF    FA6.2
50D2:  MOVF   00,W
50D4:  IORWF  FF2,F
....................          delay_ms(1000);glcd_fillScreen(OFF);Menu=1; 
50D6:  MOVLW  04
50D8:  MOVLB  5
50DA:  MOVWF  x3A
50DC:  MOVLW  FA
50DE:  MOVWF  x3F
50E0:  MOVLB  0
50E2:  CALL   10C4
50E6:  MOVLB  5
50E8:  DECFSZ x3A,F
50EA:  BRA    50DC
50EC:  CLRF   x3B
50EE:  MOVLB  0
50F0:  CALL   11BC
50F4:  MOVLW  01
50F6:  MOVLB  4
50F8:  MOVWF  x89
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==11){ // Menu de Tiempo de Esterilización 
50FA:  MOVF   x89,W
50FC:  SUBLW  0B
50FE:  BTFSS  FD8.2
5100:  BRA    5402
....................       
....................       if(visual==1) 
5102:  BTFSS  x7C.4
5104:  BRA    5290
....................       { 
....................          if(unidad<1) 
5106:  MOVF   x8A,F
5108:  BNZ   510E
....................          {unidad=4;} 
510A:  MOVLW  04
510C:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra,"T. Ester."); 
510E:  MOVLW  05
5110:  MOVWF  FEA
5112:  MOVLW  1A
5114:  MOVWF  FE9
5116:  MOVFF  FF2,53A
511A:  BCF    FF2.7
511C:  MOVLW  00
511E:  MOVLB  0
5120:  CALL   0C46
5124:  TBLRD*-
5126:  TBLRD*+
5128:  MOVF   FF5,W
512A:  MOVWF  FEE
512C:  IORLW  00
512E:  BNZ   5126
5130:  MOVLB  5
5132:  BTFSC  x3A.7
5134:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5136:  MOVLW  05
5138:  MOVWF  x3B
513A:  MOVLW  1A
513C:  MOVWF  x3A
513E:  CLRF   x3C
5140:  CLRF   x3D
5142:  MOVLW  01
5144:  MOVWF  x3E
5146:  MOVLW  02
5148:  MOVWF  x3F
514A:  MOVLB  0
514C:  CALL   17EC
....................           
....................          if(unidad==4) 
5150:  MOVLB  4
5152:  MOVF   x8A,W
5154:  SUBLW  04
5156:  BNZ   5176
....................          {displayTiempo(Testerilizacionp[3],20,40,1,2);} 
5158:  MOVFF  4AB,53B
515C:  MOVLW  14
515E:  MOVLB  5
5160:  MOVWF  x3C
5162:  MOVLW  28
5164:  MOVWF  x3D
5166:  MOVLW  01
5168:  MOVWF  x3E
516A:  MOVLW  02
516C:  MOVWF  x3F
516E:  MOVLB  0
5170:  CALL   23C4
....................          else 
5174:  BRA    5190
....................          {displayTiempo(Testerilizacionp[3],20,40,0,2);} 
5176:  MOVFF  4AB,53B
517A:  MOVLW  14
517C:  MOVLB  5
517E:  MOVWF  x3C
5180:  MOVLW  28
5182:  MOVWF  x3D
5184:  CLRF   x3E
5186:  MOVLW  02
5188:  MOVWF  x3F
518A:  MOVLB  0
518C:  CALL   23C4
....................           
....................          if(unidad==3) 
5190:  MOVLB  4
5192:  MOVF   x8A,W
5194:  SUBLW  03
5196:  BNZ   51B4
....................          {displayTiempo(Testerilizacionp[2],40,40,1,2);} 
5198:  MOVFF  4AA,53B
519C:  MOVLW  28
519E:  MOVLB  5
51A0:  MOVWF  x3C
51A2:  MOVWF  x3D
51A4:  MOVLW  01
51A6:  MOVWF  x3E
51A8:  MOVLW  02
51AA:  MOVWF  x3F
51AC:  MOVLB  0
51AE:  CALL   23C4
....................          else 
51B2:  BRA    51CC
....................          {displayTiempo(Testerilizacionp[2],40,40,0,2);} 
51B4:  MOVFF  4AA,53B
51B8:  MOVLW  28
51BA:  MOVLB  5
51BC:  MOVWF  x3C
51BE:  MOVWF  x3D
51C0:  CLRF   x3E
51C2:  MOVLW  02
51C4:  MOVWF  x3F
51C6:  MOVLB  0
51C8:  CALL   23C4
....................           
....................          if(unidad==2) 
51CC:  MOVLB  4
51CE:  MOVF   x8A,W
51D0:  SUBLW  02
51D2:  BNZ   51F2
....................          {displayTiempo(Testerilizacionp[1],70,40,1,2);} 
51D4:  MOVFF  4A9,53B
51D8:  MOVLW  46
51DA:  MOVLB  5
51DC:  MOVWF  x3C
51DE:  MOVLW  28
51E0:  MOVWF  x3D
51E2:  MOVLW  01
51E4:  MOVWF  x3E
51E6:  MOVLW  02
51E8:  MOVWF  x3F
51EA:  MOVLB  0
51EC:  CALL   23C4
....................          else 
51F0:  BRA    520C
....................          {displayTiempo(Testerilizacionp[1],70,40,0,2);} 
51F2:  MOVFF  4A9,53B
51F6:  MOVLW  46
51F8:  MOVLB  5
51FA:  MOVWF  x3C
51FC:  MOVLW  28
51FE:  MOVWF  x3D
5200:  CLRF   x3E
5202:  MOVLW  02
5204:  MOVWF  x3F
5206:  MOVLB  0
5208:  CALL   23C4
....................           
....................          if(unidad==1) 
520C:  MOVLB  4
520E:  DECFSZ x8A,W
5210:  BRA    5230
....................          {displayTiempo(Testerilizacionp[0],90,40,1,2);} 
5212:  MOVFF  4A8,53B
5216:  MOVLW  5A
5218:  MOVLB  5
521A:  MOVWF  x3C
521C:  MOVLW  28
521E:  MOVWF  x3D
5220:  MOVLW  01
5222:  MOVWF  x3E
5224:  MOVLW  02
5226:  MOVWF  x3F
5228:  MOVLB  0
522A:  CALL   23C4
....................          else 
522E:  BRA    524A
....................          {displayTiempo(Testerilizacionp[0],90,40,0,2);} 
5230:  MOVFF  4A8,53B
5234:  MOVLW  5A
5236:  MOVLB  5
5238:  MOVWF  x3C
523A:  MOVLW  28
523C:  MOVWF  x3D
523E:  CLRF   x3E
5240:  MOVLW  02
5242:  MOVWF  x3F
5244:  MOVLB  0
5246:  CALL   23C4
....................           
....................          strcpy(Menus.Letra,":"); 
524A:  MOVLW  05
524C:  MOVWF  FEA
524E:  MOVLW  1A
5250:  MOVWF  FE9
5252:  MOVFF  FF2,53A
5256:  BCF    FF2.7
5258:  MOVLW  00
525A:  CALL   06CA
525E:  TBLRD*-
5260:  TBLRD*+
5262:  MOVF   FF5,W
5264:  MOVWF  FEE
5266:  IORLW  00
5268:  BNZ   5260
526A:  MOVLB  5
526C:  BTFSC  x3A.7
526E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);      
5270:  MOVLW  05
5272:  MOVWF  x3B
5274:  MOVLW  1A
5276:  MOVWF  x3A
5278:  MOVLW  3C
527A:  MOVWF  x3C
527C:  MOVLW  2A
527E:  MOVWF  x3D
5280:  MOVLW  02
5282:  MOVWF  x3E
5284:  MOVWF  x3F
5286:  MOVLB  0
5288:  CALL   17EC
....................           
....................          visual=0; 
528C:  MOVLB  4
528E:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
5290:  BSF    F92.5
5292:  BTFSS  F80.5
5294:  BRA    52D2
....................          {   
....................             if(Testerilizacionp[unidad-1]<9) 
5296:  MOVLW  01
5298:  SUBWF  x8A,W
529A:  CLRF   03
529C:  ADDLW  A8
529E:  MOVWF  FE9
52A0:  MOVLW  04
52A2:  ADDWFC 03,W
52A4:  MOVWF  FEA
52A6:  BTFSC  FEF.7
52A8:  BRA    52B0
52AA:  MOVF   FEF,W
52AC:  SUBLW  08
52AE:  BNC   52D2
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]++;visual=1; 
52B0:  MOVLW  1E
52B2:  MOVLB  5
52B4:  MOVWF  x3F
52B6:  MOVLB  0
52B8:  CALL   10C4
52BC:  MOVLW  01
52BE:  MOVLB  4
52C0:  SUBWF  x8A,W
52C2:  CLRF   03
52C4:  ADDLW  A8
52C6:  MOVWF  FE9
52C8:  MOVLW  04
52CA:  ADDWFC 03,W
52CC:  MOVWF  FEA
52CE:  INCF   FEF,F
52D0:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
52D2:  BSF    F96.0
52D4:  BTFSS  F84.0
52D6:  BRA    5314
....................          {   
....................             if(Testerilizacionp[unidad-1]>0) 
52D8:  MOVLW  01
52DA:  SUBWF  x8A,W
52DC:  CLRF   03
52DE:  ADDLW  A8
52E0:  MOVWF  FE9
52E2:  MOVLW  04
52E4:  ADDWFC 03,W
52E6:  MOVWF  FEA
52E8:  BTFSC  FEF.7
52EA:  BRA    5314
52EC:  MOVF   FEF,W
52EE:  SUBLW  00
52F0:  BC    5314
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]--;visual=1;      
52F2:  MOVLW  1E
52F4:  MOVLB  5
52F6:  MOVWF  x3F
52F8:  MOVLB  0
52FA:  CALL   10C4
52FE:  MOVLW  01
5300:  MOVLB  4
5302:  SUBWF  x8A,W
5304:  CLRF   03
5306:  ADDLW  A8
5308:  MOVWF  FE9
530A:  MOVLW  04
530C:  ADDWFC 03,W
530E:  MOVWF  FEA
5310:  DECF   FEF,F
5312:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5314:  BSF    F96.1
5316:  BTFSS  F84.1
5318:  BRA    532C
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
531A:  MOVLW  1E
531C:  MOVLB  5
531E:  MOVWF  x3F
5320:  MOVLB  0
5322:  CALL   10C4
5326:  MOVLB  4
5328:  DECF   x8A,F
532A:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
532C:  BSF    F96.2
532E:  BTFSS  F84.2
5330:  BRA    5402
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5332:  MOVLW  04
5334:  MOVLB  5
5336:  MOVWF  x3A
5338:  MOVLW  AF
533A:  MOVWF  x3F
533C:  MOVLB  0
533E:  CALL   10C4
5342:  MOVLB  5
5344:  DECFSZ x3A,F
5346:  BRA    5338
5348:  MOVLW  08
534A:  MOVLB  4
534C:  MOVWF  x89
534E:  MOVLB  5
5350:  CLRF   x3B
5352:  MOVLB  0
5354:  CALL   11BC
5358:  MOVLW  01
535A:  MOVLB  4
535C:  MOVWF  x90
535E:  BSF    x7C.4
....................             write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]); 
5360:  CLRF   FA9
5362:  MOVFF  4A8,FA8
5366:  BCF    FA6.6
5368:  BCF    FA6.7
536A:  BSF    FA6.2
536C:  MOVF   FF2,W
536E:  MOVWF  00
5370:  BCF    FF2.7
5372:  MOVLB  F
5374:  MOVLW  55
5376:  MOVWF  FA7
5378:  MOVLW  AA
537A:  MOVWF  FA7
537C:  BSF    FA6.1
537E:  BTFSC  FA6.1
5380:  BRA    537E
5382:  BCF    FA6.2
5384:  MOVF   00,W
5386:  IORWF  FF2,F
5388:  MOVLW  01
538A:  MOVWF  FA9
538C:  MOVFF  4A9,FA8
5390:  BCF    FA6.6
5392:  BCF    FA6.7
5394:  BSF    FA6.2
5396:  MOVF   FF2,W
5398:  MOVWF  00
539A:  BCF    FF2.7
539C:  MOVLW  55
539E:  MOVWF  FA7
53A0:  MOVLW  AA
53A2:  MOVWF  FA7
53A4:  BSF    FA6.1
53A6:  BTFSC  FA6.1
53A8:  BRA    53A6
53AA:  BCF    FA6.2
53AC:  MOVF   00,W
53AE:  IORWF  FF2,F
....................             write_eeprom(2,Testerilizacionp[2]);write_eeprom(3,Testerilizacionp[3]); 
53B0:  MOVLW  02
53B2:  MOVWF  FA9
53B4:  MOVFF  4AA,FA8
53B8:  BCF    FA6.6
53BA:  BCF    FA6.7
53BC:  BSF    FA6.2
53BE:  MOVFF  FF2,00
53C2:  BCF    FF2.7
53C4:  MOVLW  55
53C6:  MOVWF  FA7
53C8:  MOVLW  AA
53CA:  MOVWF  FA7
53CC:  BSF    FA6.1
53CE:  BTFSC  FA6.1
53D0:  BRA    53CE
53D2:  BCF    FA6.2
53D4:  MOVF   00,W
53D6:  IORWF  FF2,F
53D8:  MOVLW  03
53DA:  MOVWF  FA9
53DC:  MOVFF  4AB,FA8
53E0:  BCF    FA6.6
53E2:  BCF    FA6.7
53E4:  BSF    FA6.2
53E6:  MOVFF  FF2,00
53EA:  BCF    FF2.7
53EC:  MOVLW  55
53EE:  MOVWF  FA7
53F0:  MOVLW  AA
53F2:  MOVWF  FA7
53F4:  BSF    FA6.1
53F6:  BTFSC  FA6.1
53F8:  BRA    53F6
53FA:  BCF    FA6.2
53FC:  MOVF   00,W
53FE:  IORWF  FF2,F
5400:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==12){ // Menu de Tiempo de Secado 
5402:  MOVF   x89,W
5404:  SUBLW  0C
5406:  BTFSS  FD8.2
5408:  BRA    570C
....................       
....................       if(visual==1) 
540A:  BTFSS  x7C.4
540C:  BRA    5598
....................       { 
....................          if(unidad<1) 
540E:  MOVF   x8A,F
5410:  BNZ   5416
....................          {unidad=4;} 
5412:  MOVLW  04
5414:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra," Secado"); 
5416:  MOVLW  05
5418:  MOVWF  FEA
541A:  MOVLW  1A
541C:  MOVWF  FE9
541E:  MOVFF  FF2,53A
5422:  BCF    FF2.7
5424:  MOVLW  00
5426:  MOVLB  0
5428:  CALL   0C6A
542C:  TBLRD*-
542E:  TBLRD*+
5430:  MOVF   FF5,W
5432:  MOVWF  FEE
5434:  IORLW  00
5436:  BNZ   542E
5438:  MOVLB  5
543A:  BTFSC  x3A.7
543C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
543E:  MOVLW  05
5440:  MOVWF  x3B
5442:  MOVLW  1A
5444:  MOVWF  x3A
5446:  CLRF   x3C
5448:  CLRF   x3D
544A:  MOVLW  01
544C:  MOVWF  x3E
544E:  MOVLW  02
5450:  MOVWF  x3F
5452:  MOVLB  0
5454:  CALL   17EC
....................           
....................          if(unidad==4) 
5458:  MOVLB  4
545A:  MOVF   x8A,W
545C:  SUBLW  04
545E:  BNZ   547E
....................          {displayTiempo(Tsecadop[3],20,40,1,2);} 
5460:  MOVFF  4B3,53B
5464:  MOVLW  14
5466:  MOVLB  5
5468:  MOVWF  x3C
546A:  MOVLW  28
546C:  MOVWF  x3D
546E:  MOVLW  01
5470:  MOVWF  x3E
5472:  MOVLW  02
5474:  MOVWF  x3F
5476:  MOVLB  0
5478:  CALL   23C4
....................          else 
547C:  BRA    5498
....................          {displayTiempo(Tsecadop[3],20,40,0,2);} 
547E:  MOVFF  4B3,53B
5482:  MOVLW  14
5484:  MOVLB  5
5486:  MOVWF  x3C
5488:  MOVLW  28
548A:  MOVWF  x3D
548C:  CLRF   x3E
548E:  MOVLW  02
5490:  MOVWF  x3F
5492:  MOVLB  0
5494:  CALL   23C4
....................           
....................          if(unidad==3) 
5498:  MOVLB  4
549A:  MOVF   x8A,W
549C:  SUBLW  03
549E:  BNZ   54BC
....................          {displayTiempo(Tsecadop[2],40,40,1,2);} 
54A0:  MOVFF  4B2,53B
54A4:  MOVLW  28
54A6:  MOVLB  5
54A8:  MOVWF  x3C
54AA:  MOVWF  x3D
54AC:  MOVLW  01
54AE:  MOVWF  x3E
54B0:  MOVLW  02
54B2:  MOVWF  x3F
54B4:  MOVLB  0
54B6:  CALL   23C4
....................          else 
54BA:  BRA    54D4
....................          {displayTiempo(Tsecadop[2],40,40,0,2);} 
54BC:  MOVFF  4B2,53B
54C0:  MOVLW  28
54C2:  MOVLB  5
54C4:  MOVWF  x3C
54C6:  MOVWF  x3D
54C8:  CLRF   x3E
54CA:  MOVLW  02
54CC:  MOVWF  x3F
54CE:  MOVLB  0
54D0:  CALL   23C4
....................           
....................          if(unidad==2) 
54D4:  MOVLB  4
54D6:  MOVF   x8A,W
54D8:  SUBLW  02
54DA:  BNZ   54FA
....................          {displayTiempo(Tsecadop[1],70,40,1,2);} 
54DC:  MOVFF  4B1,53B
54E0:  MOVLW  46
54E2:  MOVLB  5
54E4:  MOVWF  x3C
54E6:  MOVLW  28
54E8:  MOVWF  x3D
54EA:  MOVLW  01
54EC:  MOVWF  x3E
54EE:  MOVLW  02
54F0:  MOVWF  x3F
54F2:  MOVLB  0
54F4:  CALL   23C4
....................          else 
54F8:  BRA    5514
....................          {displayTiempo(Tsecadop[1],70,40,0,2);} 
54FA:  MOVFF  4B1,53B
54FE:  MOVLW  46
5500:  MOVLB  5
5502:  MOVWF  x3C
5504:  MOVLW  28
5506:  MOVWF  x3D
5508:  CLRF   x3E
550A:  MOVLW  02
550C:  MOVWF  x3F
550E:  MOVLB  0
5510:  CALL   23C4
....................           
....................          if(unidad==1) 
5514:  MOVLB  4
5516:  DECFSZ x8A,W
5518:  BRA    5538
....................          {displayTiempo(Tsecadop[0],90,40,1,2);} 
551A:  MOVFF  4B0,53B
551E:  MOVLW  5A
5520:  MOVLB  5
5522:  MOVWF  x3C
5524:  MOVLW  28
5526:  MOVWF  x3D
5528:  MOVLW  01
552A:  MOVWF  x3E
552C:  MOVLW  02
552E:  MOVWF  x3F
5530:  MOVLB  0
5532:  CALL   23C4
....................          else 
5536:  BRA    5552
....................          {displayTiempo(Tsecadop[0],90,40,0,2);} 
5538:  MOVFF  4B0,53B
553C:  MOVLW  5A
553E:  MOVLB  5
5540:  MOVWF  x3C
5542:  MOVLW  28
5544:  MOVWF  x3D
5546:  CLRF   x3E
5548:  MOVLW  02
554A:  MOVWF  x3F
554C:  MOVLB  0
554E:  CALL   23C4
....................           
....................          strcpy(Menus.Letra,":"); 
5552:  MOVLW  05
5554:  MOVWF  FEA
5556:  MOVLW  1A
5558:  MOVWF  FE9
555A:  MOVFF  FF2,53A
555E:  BCF    FF2.7
5560:  MOVLW  00
5562:  CALL   06CA
5566:  TBLRD*-
5568:  TBLRD*+
556A:  MOVF   FF5,W
556C:  MOVWF  FEE
556E:  IORLW  00
5570:  BNZ   5568
5572:  MOVLB  5
5574:  BTFSC  x3A.7
5576:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);  
5578:  MOVLW  05
557A:  MOVWF  x3B
557C:  MOVLW  1A
557E:  MOVWF  x3A
5580:  MOVLW  3C
5582:  MOVWF  x3C
5584:  MOVLW  2A
5586:  MOVWF  x3D
5588:  MOVLW  02
558A:  MOVWF  x3E
558C:  MOVWF  x3F
558E:  MOVLB  0
5590:  CALL   17EC
....................           
....................          visual=0; 
5594:  MOVLB  4
5596:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
5598:  BSF    F92.5
559A:  BTFSS  F80.5
559C:  BRA    55DA
....................          {   
....................             if(Tsecadop[unidad-1]<9) 
559E:  MOVLW  01
55A0:  SUBWF  x8A,W
55A2:  CLRF   03
55A4:  ADDLW  B0
55A6:  MOVWF  FE9
55A8:  MOVLW  04
55AA:  ADDWFC 03,W
55AC:  MOVWF  FEA
55AE:  BTFSC  FEF.7
55B0:  BRA    55B8
55B2:  MOVF   FEF,W
55B4:  SUBLW  08
55B6:  BNC   55DA
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]++;visual=1; 
55B8:  MOVLW  1E
55BA:  MOVLB  5
55BC:  MOVWF  x3F
55BE:  MOVLB  0
55C0:  CALL   10C4
55C4:  MOVLW  01
55C6:  MOVLB  4
55C8:  SUBWF  x8A,W
55CA:  CLRF   03
55CC:  ADDLW  B0
55CE:  MOVWF  FE9
55D0:  MOVLW  04
55D2:  ADDWFC 03,W
55D4:  MOVWF  FEA
55D6:  INCF   FEF,F
55D8:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
55DA:  BSF    F96.0
55DC:  BTFSS  F84.0
55DE:  BRA    561C
....................          {   
....................             if(Tsecadop[unidad-1]>0) 
55E0:  MOVLW  01
55E2:  SUBWF  x8A,W
55E4:  CLRF   03
55E6:  ADDLW  B0
55E8:  MOVWF  FE9
55EA:  MOVLW  04
55EC:  ADDWFC 03,W
55EE:  MOVWF  FEA
55F0:  BTFSC  FEF.7
55F2:  BRA    561C
55F4:  MOVF   FEF,W
55F6:  SUBLW  00
55F8:  BC    561C
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]--;visual=1;      
55FA:  MOVLW  1E
55FC:  MOVLB  5
55FE:  MOVWF  x3F
5600:  MOVLB  0
5602:  CALL   10C4
5606:  MOVLW  01
5608:  MOVLB  4
560A:  SUBWF  x8A,W
560C:  CLRF   03
560E:  ADDLW  B0
5610:  MOVWF  FE9
5612:  MOVLW  04
5614:  ADDWFC 03,W
5616:  MOVWF  FEA
5618:  DECF   FEF,F
561A:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
561C:  BSF    F96.1
561E:  BTFSS  F84.1
5620:  BRA    5634
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
5622:  MOVLW  1E
5624:  MOVLB  5
5626:  MOVWF  x3F
5628:  MOVLB  0
562A:  CALL   10C4
562E:  MOVLB  4
5630:  DECF   x8A,F
5632:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5634:  BSF    F96.2
5636:  BTFSS  F84.2
5638:  BRA    570C
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
563A:  MOVLW  04
563C:  MOVLB  5
563E:  MOVWF  x3A
5640:  MOVLW  AF
5642:  MOVWF  x3F
5644:  MOVLB  0
5646:  CALL   10C4
564A:  MOVLB  5
564C:  DECFSZ x3A,F
564E:  BRA    5640
5650:  MOVLW  08
5652:  MOVLB  4
5654:  MOVWF  x89
5656:  MOVLB  5
5658:  CLRF   x3B
565A:  MOVLB  0
565C:  CALL   11BC
5660:  MOVLW  01
5662:  MOVLB  4
5664:  MOVWF  x90
5666:  BSF    x7C.4
....................             write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]); 
5668:  MOVLW  04
566A:  MOVWF  FA9
566C:  MOVFF  4B0,FA8
5670:  BCF    FA6.6
5672:  BCF    FA6.7
5674:  BSF    FA6.2
5676:  MOVF   FF2,W
5678:  MOVWF  00
567A:  BCF    FF2.7
567C:  MOVLB  F
567E:  MOVLW  55
5680:  MOVWF  FA7
5682:  MOVLW  AA
5684:  MOVWF  FA7
5686:  BSF    FA6.1
5688:  BTFSC  FA6.1
568A:  BRA    5688
568C:  BCF    FA6.2
568E:  MOVF   00,W
5690:  IORWF  FF2,F
5692:  MOVLW  05
5694:  MOVWF  FA9
5696:  MOVFF  4B1,FA8
569A:  BCF    FA6.6
569C:  BCF    FA6.7
569E:  BSF    FA6.2
56A0:  MOVF   FF2,W
56A2:  MOVWF  00
56A4:  BCF    FF2.7
56A6:  MOVLW  55
56A8:  MOVWF  FA7
56AA:  MOVLW  AA
56AC:  MOVWF  FA7
56AE:  BSF    FA6.1
56B0:  BTFSC  FA6.1
56B2:  BRA    56B0
56B4:  BCF    FA6.2
56B6:  MOVF   00,W
56B8:  IORWF  FF2,F
....................             write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
56BA:  MOVLW  06
56BC:  MOVWF  FA9
56BE:  MOVFF  4B2,FA8
56C2:  BCF    FA6.6
56C4:  BCF    FA6.7
56C6:  BSF    FA6.2
56C8:  MOVFF  FF2,00
56CC:  BCF    FF2.7
56CE:  MOVLW  55
56D0:  MOVWF  FA7
56D2:  MOVLW  AA
56D4:  MOVWF  FA7
56D6:  BSF    FA6.1
56D8:  BTFSC  FA6.1
56DA:  BRA    56D8
56DC:  BCF    FA6.2
56DE:  MOVF   00,W
56E0:  IORWF  FF2,F
56E2:  MOVLW  07
56E4:  MOVWF  FA9
56E6:  MOVFF  4B3,FA8
56EA:  BCF    FA6.6
56EC:  BCF    FA6.7
56EE:  BSF    FA6.2
56F0:  MOVFF  FF2,00
56F4:  BCF    FF2.7
56F6:  MOVLW  55
56F8:  MOVWF  FA7
56FA:  MOVLW  AA
56FC:  MOVWF  FA7
56FE:  BSF    FA6.1
5700:  BTFSC  FA6.1
5702:  BRA    5700
5704:  BCF    FA6.2
5706:  MOVF   00,W
5708:  IORWF  FF2,F
570A:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==13){ // Menu de Temperatura 
570C:  MOVF   x89,W
570E:  SUBLW  0D
5710:  BTFSS  FD8.2
5712:  BRA    584A
....................       
....................       if(visual==1) 
5714:  BTFSS  x7C.4
5716:  BRA    577E
....................       { 
....................          glcd_fillScreen(OFF); 
5718:  MOVLB  5
571A:  CLRF   x3B
571C:  MOVLB  0
571E:  CALL   11BC
....................          strcpy(Menus.Letra,"Temperatura"); 
5722:  MOVLW  05
5724:  MOVWF  FEA
5726:  MOVLW  1A
5728:  MOVWF  FE9
572A:  MOVFF  FF2,53A
572E:  BCF    FF2.7
5730:  MOVLW  00
5732:  CALL   0BAA
5736:  TBLRD*-
5738:  TBLRD*+
573A:  MOVF   FF5,W
573C:  MOVWF  FEE
573E:  IORLW  00
5740:  BNZ   5738
5742:  MOVLB  5
5744:  BTFSC  x3A.7
5746:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5748:  MOVLW  05
574A:  MOVWF  x3B
574C:  MOVLW  1A
574E:  MOVWF  x3A
5750:  CLRF   x3C
5752:  CLRF   x3D
5754:  MOVLW  01
5756:  MOVWF  x3E
5758:  MOVLW  02
575A:  MOVWF  x3F
575C:  MOVLB  0
575E:  CALL   17EC
....................           
....................          displayTiempo(Setpoint,30,30,0,3); 
5762:  MOVFF  48E,53B
5766:  MOVLW  1E
5768:  MOVLB  5
576A:  MOVWF  x3C
576C:  MOVWF  x3D
576E:  CLRF   x3E
5770:  MOVLW  03
5772:  MOVWF  x3F
5774:  MOVLB  0
5776:  CALL   23C4
....................           
....................          visual=0; 
577A:  MOVLB  4
577C:  BCF    x7C.4
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
577E:  BSF    F92.5
5780:  BTFSS  F80.5
5782:  BRA    57B6
....................          {   
....................             if(Setpoint<134) 
5784:  MOVF   x8E,W
5786:  SUBLW  85
5788:  BNC   57B6
....................             { 
....................                if(Setpoint<100) 
578A:  MOVF   x8E,W
578C:  SUBLW  63
578E:  BNC   57A4
....................                { 
....................                   Setpoint=100;delay_ms(100);visual=1; 
5790:  MOVLW  64
5792:  MOVWF  x8E
5794:  MOVLB  5
5796:  MOVWF  x3F
5798:  MOVLB  0
579A:  CALL   10C4
579E:  MOVLB  4
57A0:  BSF    x7C.4
....................                } 
....................                else 
57A2:  BRA    57B6
....................                { 
....................                   delay_ms(30);Setpoint++;visual=1; 
57A4:  MOVLW  1E
57A6:  MOVLB  5
57A8:  MOVWF  x3F
57AA:  MOVLB  0
57AC:  CALL   10C4
57B0:  MOVLB  4
57B2:  INCF   x8E,F
57B4:  BSF    x7C.4
....................                } 
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
57B6:  BSF    F96.0
57B8:  BTFSS  F84.0
57BA:  BRA    57D4
....................          {   
....................             if(Setpoint>105) 
57BC:  MOVF   x8E,W
57BE:  SUBLW  69
57C0:  BC    57D4
....................             { 
....................                delay_ms(30);Setpoint--;visual=1;      
57C2:  MOVLW  1E
57C4:  MOVLB  5
57C6:  MOVWF  x3F
57C8:  MOVLB  0
57CA:  CALL   10C4
57CE:  MOVLB  4
57D0:  DECF   x8E,F
57D2:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
57D4:  BSF    F96.1
57D6:  BTFSS  F84.1
57D8:  BRA    57EA
....................          {   
....................             delay_ms(30);visual=1; 
57DA:  MOVLW  1E
57DC:  MOVLB  5
57DE:  MOVWF  x3F
57E0:  MOVLB  0
57E2:  CALL   10C4
57E6:  MOVLB  4
57E8:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
57EA:  BSF    F96.2
57EC:  BTFSS  F84.2
57EE:  BRA    584A
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
57F0:  MOVLW  04
57F2:  MOVLB  5
57F4:  MOVWF  x3A
57F6:  MOVLW  AF
57F8:  MOVWF  x3F
57FA:  MOVLB  0
57FC:  CALL   10C4
5800:  MOVLB  5
5802:  DECFSZ x3A,F
5804:  BRA    57F6
5806:  MOVLW  08
5808:  MOVLB  4
580A:  MOVWF  x89
580C:  MOVLB  5
580E:  CLRF   x3B
5810:  MOVLB  0
5812:  CALL   11BC
5816:  MOVLW  01
5818:  MOVLB  4
581A:  MOVWF  x90
581C:  BSF    x7C.4
....................             write_eeprom(8,Setpoint); 
581E:  MOVLW  08
5820:  MOVWF  FA9
5822:  MOVFF  48E,FA8
5826:  BCF    FA6.6
5828:  BCF    FA6.7
582A:  BSF    FA6.2
582C:  MOVF   FF2,W
582E:  MOVWF  00
5830:  BCF    FF2.7
5832:  MOVLB  F
5834:  MOVLW  55
5836:  MOVWF  FA7
5838:  MOVLW  AA
583A:  MOVWF  FA7
583C:  BSF    FA6.1
583E:  BTFSC  FA6.1
5840:  BRA    583E
5842:  BCF    FA6.2
5844:  MOVF   00,W
5846:  IORWF  FF2,F
5848:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==14){ // Menu de Desfogue 
584A:  MOVF   x89,W
584C:  SUBLW  0E
584E:  BTFSS  FD8.2
5850:  BRA    5B34
....................       
....................       if(visual==1) 
5852:  BTFSS  x7C.4
5854:  BRA    58B6
....................       {          
....................          strcpy(Menus.Letra," Desfogue"); 
5856:  MOVLW  05
5858:  MOVWF  FEA
585A:  MOVLW  1A
585C:  MOVWF  FE9
585E:  MOVFF  FF2,53A
5862:  BCF    FF2.7
5864:  MOVLW  00
5866:  MOVLB  0
5868:  CALL   0C8C
586C:  TBLRD*-
586E:  TBLRD*+
5870:  MOVF   FF5,W
5872:  MOVWF  FEE
5874:  IORLW  00
5876:  BNZ   586E
5878:  MOVLB  5
587A:  BTFSC  x3A.7
587C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
587E:  MOVLW  05
5880:  MOVWF  x3B
5882:  MOVLW  1A
5884:  MOVWF  x3A
5886:  CLRF   x3C
5888:  CLRF   x3D
588A:  MOVLW  01
588C:  MOVWF  x3E
588E:  MOVLW  02
5890:  MOVWF  x3F
5892:  MOVLB  0
5894:  CALL   17EC
....................           
....................          displayTiempo(Nivel,50,40,0,2); 
5898:  MOVFF  49C,53B
589C:  MOVLW  32
589E:  MOVLB  5
58A0:  MOVWF  x3C
58A2:  MOVLW  28
58A4:  MOVWF  x3D
58A6:  CLRF   x3E
58A8:  MOVLW  02
58AA:  MOVWF  x3F
58AC:  MOVLB  0
58AE:  CALL   23C4
....................           
....................          visual=0; 
58B2:  MOVLB  4
58B4:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
58B6:  BSF    F92.5
58B8:  BTFSS  F80.5
58BA:  BRA    58DC
....................          {   
....................             if(Nivel<6) 
58BC:  MOVF   x9D,F
58BE:  BNZ   58DC
58C0:  MOVF   x9C,W
58C2:  SUBLW  05
58C4:  BNC   58DC
....................             { 
....................                delay_ms(30);Nivel++;visual=1; 
58C6:  MOVLW  1E
58C8:  MOVLB  5
58CA:  MOVWF  x3F
58CC:  MOVLB  0
58CE:  CALL   10C4
58D2:  MOVLB  4
58D4:  INCF   x9C,F
58D6:  BTFSC  FD8.2
58D8:  INCF   x9D,F
58DA:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
58DC:  BSF    F96.0
58DE:  BTFSS  F84.0
58E0:  BRA    5904
....................          {   
....................             if(Nivel>1) 
58E2:  MOVF   x9D,F
58E4:  BNZ   58EC
58E6:  MOVF   x9C,W
58E8:  SUBLW  01
58EA:  BC    5904
....................             { 
....................                delay_ms(30);Nivel--;visual=1;      
58EC:  MOVLW  1E
58EE:  MOVLB  5
58F0:  MOVWF  x3F
58F2:  MOVLB  0
58F4:  CALL   10C4
58F8:  MOVLB  4
58FA:  MOVF   x9C,W
58FC:  BTFSC  FD8.2
58FE:  DECF   x9D,F
5900:  DECF   x9C,F
5902:  BSF    x7C.4
....................             } 
....................          } 
....................           
....................          if(desfoguelento==1) 
5904:  BTFSS  x7C.5
5906:  BRA    5AC4
....................          { 
....................             if(RIGHT)//Si oprime SET 
5908:  BSF    F96.1
590A:  BTFSS  F84.1
590C:  BRA    5AC2
....................             {   
....................                write_eeprom(9,Nivel); 
590E:  MOVLW  09
5910:  MOVWF  FA9
5912:  MOVFF  49C,FA8
5916:  BCF    FA6.6
5918:  BCF    FA6.7
591A:  BSF    FA6.2
591C:  MOVF   FF2,W
591E:  MOVWF  00
5920:  BCF    FF2.7
5922:  MOVLB  F
5924:  MOVLW  55
5926:  MOVWF  FA7
5928:  MOVLW  AA
592A:  MOVWF  FA7
592C:  BSF    FA6.1
592E:  BTFSC  FA6.1
5930:  BRA    592E
5932:  BCF    FA6.2
5934:  MOVF   00,W
5936:  IORWF  FF2,F
....................                Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5938:  MOVLW  14
593A:  MOVLB  4
593C:  MOVWF  x89
593E:  MOVLW  0F
5940:  MOVLB  5
5942:  MOVWF  x4C
5944:  MOVLW  12
5946:  MOVWF  x4D
5948:  MOVLW  1E
594A:  MOVWF  x4E
594C:  MOVLW  35
594E:  MOVWF  x4F
5950:  CLRF   x50
5952:  MOVLW  01
5954:  MOVWF  x51
5956:  MOVLB  0
5958:  CALL   172A
595C:  MOVLB  4
595E:  CLRF   x92
5960:  MOVLW  C0
5962:  IORWF  FF2,F
5964:  MOVLB  5
5966:  CLRF   x3B
5968:  MOVLB  0
596A:  CALL   11BC
....................                strcpy(Menus.Letra,"Calentando"); 
596E:  MOVLW  05
5970:  MOVWF  FEA
5972:  MOVLW  1A
5974:  MOVWF  FE9
5976:  MOVFF  FF2,53A
597A:  BCF    FF2.7
597C:  MOVLW  00
597E:  CALL   0974
5982:  TBLRD*-
5984:  TBLRD*+
5986:  MOVF   FF5,W
5988:  MOVWF  FEE
598A:  IORLW  00
598C:  BNZ   5984
598E:  MOVLB  5
5990:  BTFSC  x3A.7
5992:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
5994:  MOVLW  05
5996:  MOVWF  x3B
5998:  MOVLW  1A
599A:  MOVWF  x3A
599C:  CLRF   x3C
599E:  MOVLW  37
59A0:  MOVWF  x3D
59A2:  MOVLW  02
59A4:  MOVWF  x3E
59A6:  MOVLW  01
59A8:  MOVWF  x3F
59AA:  MOVLB  0
59AC:  CALL   17EC
....................                glcd_rect(15, 18, 30, 53, NO, ON); 
59B0:  MOVLW  0F
59B2:  MOVLB  5
59B4:  MOVWF  x4C
59B6:  MOVLW  12
59B8:  MOVWF  x4D
59BA:  MOVLW  1E
59BC:  MOVWF  x4E
59BE:  MOVLW  35
59C0:  MOVWF  x4F
59C2:  CLRF   x50
59C4:  MOVLW  01
59C6:  MOVWF  x51
59C8:  MOVLB  0
59CA:  CALL   172A
....................                glcd_imagen(5); 
59CE:  MOVLW  05
59D0:  MOVLB  5
59D2:  MOVWF  x3A
59D4:  MOVLB  0
59D6:  CALL   2018
....................                strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
59DA:  MOVLW  05
59DC:  MOVWF  FEA
59DE:  MOVLW  1A
59E0:  MOVWF  FE9
59E2:  MOVFF  FF2,53A
59E6:  BCF    FF2.7
59E8:  MOVLW  00
59EA:  CALL   099A
59EE:  TBLRD*-
59F0:  TBLRD*+
59F2:  MOVF   FF5,W
59F4:  MOVWF  FEE
59F6:  IORLW  00
59F8:  BNZ   59F0
59FA:  MOVLB  5
59FC:  BTFSC  x3A.7
59FE:  BSF    FF2.7
5A00:  MOVLW  05
5A02:  MOVWF  x3B
5A04:  MOVLW  1A
5A06:  MOVWF  x3A
5A08:  CLRF   x3C
5A0A:  CLRF   x3D
5A0C:  MOVLW  02
5A0E:  MOVWF  x3E
5A10:  MOVLW  01
5A12:  MOVWF  x3F
5A14:  MOVLB  0
5A16:  CALL   17EC
....................                strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5A1A:  MOVLW  05
5A1C:  MOVWF  FEA
5A1E:  MOVLW  1A
5A20:  MOVWF  FE9
5A22:  MOVFF  FF2,53A
5A26:  BCF    FF2.7
5A28:  MOVLW  00
5A2A:  CALL   09BC
5A2E:  TBLRD*-
5A30:  TBLRD*+
5A32:  MOVF   FF5,W
5A34:  MOVWF  FEE
5A36:  IORLW  00
5A38:  BNZ   5A30
5A3A:  MOVLB  5
5A3C:  BTFSC  x3A.7
5A3E:  BSF    FF2.7
5A40:  MOVLW  05
5A42:  MOVWF  x3B
5A44:  MOVLW  1A
5A46:  MOVWF  x3A
5A48:  CLRF   x3C
5A4A:  MOVLW  08
5A4C:  MOVWF  x3D
5A4E:  MOVLW  02
5A50:  MOVWF  x3E
5A52:  MOVLW  01
5A54:  MOVWF  x3F
5A56:  MOVLB  0
5A58:  CALL   17EC
....................                glcd_circle(95,40,2,NO,ON); 
5A5C:  MOVLW  5F
5A5E:  MOVLB  5
5A60:  MOVWF  x3A
5A62:  MOVLW  28
5A64:  MOVWF  x3B
5A66:  MOVLW  02
5A68:  MOVWF  x3C
5A6A:  CLRF   x3D
5A6C:  MOVLW  01
5A6E:  MOVWF  x3E
5A70:  MOVLB  0
5A72:  CALL   2114
....................                strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
5A76:  MOVLW  05
5A78:  MOVWF  FEA
5A7A:  MOVLW  1A
5A7C:  MOVWF  FE9
5A7E:  MOVFF  FF2,53A
5A82:  BCF    FF2.7
5A84:  MOVLW  00
5A86:  CALL   09DE
5A8A:  TBLRD*-
5A8C:  TBLRD*+
5A8E:  MOVF   FF5,W
5A90:  MOVWF  FEE
5A92:  IORLW  00
5A94:  BNZ   5A8C
5A96:  MOVLB  5
5A98:  BTFSC  x3A.7
5A9A:  BSF    FF2.7
5A9C:  MOVLW  05
5A9E:  MOVWF  x3B
5AA0:  MOVLW  1A
5AA2:  MOVWF  x3A
5AA4:  MOVLW  66
5AA6:  MOVWF  x3C
5AA8:  MOVLW  28
5AAA:  MOVWF  x3D
5AAC:  MOVLW  02
5AAE:  MOVWF  x3E
5AB0:  MOVWF  x3F
5AB2:  MOVLB  0
5AB4:  CALL   17EC
....................                MuestraTiemposProgramados(); 
5AB8:  CALL   2514
....................                EnviarCodigo(); 
5ABC:  CALL   1AD2
5AC0:  MOVLB  4
....................             }       
....................          } 
....................          else 
5AC2:  BRA    5B34
....................          { 
....................             if(LEFT)//Si oprime boton de Toma. 
5AC4:  BSF    F96.2
5AC6:  BTFSS  F84.2
5AC8:  BRA    5B34
....................             { 
....................                if(Nivel<6) 
5ACA:  MOVF   x9D,F
5ACC:  BNZ   5AD8
5ACE:  MOVF   x9C,W
5AD0:  SUBLW  05
5AD2:  BNC   5AD8
....................                { 
....................                   desfoguelento=1; 
5AD4:  BSF    x7C.5
....................                } 
....................                else 
5AD6:  BRA    5ADA
....................                { 
....................                   desfoguelento=0; 
5AD8:  BCF    x7C.5
....................                } 
....................                delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5ADA:  MOVLW  04
5ADC:  MOVLB  5
5ADE:  MOVWF  x3A
5AE0:  MOVLW  AF
5AE2:  MOVWF  x3F
5AE4:  MOVLB  0
5AE6:  CALL   10C4
5AEA:  MOVLB  5
5AEC:  DECFSZ x3A,F
5AEE:  BRA    5AE0
5AF0:  MOVLW  08
5AF2:  MOVLB  4
5AF4:  MOVWF  x89
5AF6:  MOVLB  5
5AF8:  CLRF   x3B
5AFA:  MOVLB  0
5AFC:  CALL   11BC
5B00:  MOVLW  01
5B02:  MOVLB  4
5B04:  MOVWF  x90
5B06:  BSF    x7C.4
....................                write_eeprom(9,Nivel); 
5B08:  MOVLW  09
5B0A:  MOVWF  FA9
5B0C:  MOVFF  49C,FA8
5B10:  BCF    FA6.6
5B12:  BCF    FA6.7
5B14:  BSF    FA6.2
5B16:  MOVF   FF2,W
5B18:  MOVWF  00
5B1A:  BCF    FF2.7
5B1C:  MOVLB  F
5B1E:  MOVLW  55
5B20:  MOVWF  FA7
5B22:  MOVLW  AA
5B24:  MOVWF  FA7
5B26:  BSF    FA6.1
5B28:  BTFSC  FA6.1
5B2A:  BRA    5B28
5B2C:  BCF    FA6.2
5B2E:  MOVF   00,W
5B30:  IORWF  FF2,F
5B32:  MOVLB  4
....................             } 
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==15){ //Menu de Continuar 
5B34:  MOVF   x89,W
5B36:  SUBLW  0F
5B38:  BTFSS  FD8.2
5B3A:  BRA    5E78
....................        
....................       if(visual==1) 
5B3C:  BTFSS  x7C.4
5B3E:  BRA    5CA4
....................       { 
....................          strcpy(Menus.Letra,"Continuar"); 
5B40:  MOVLW  05
5B42:  MOVWF  FEA
5B44:  MOVLW  1A
5B46:  MOVWF  FE9
5B48:  MOVFF  FF2,53A
5B4C:  BCF    FF2.7
5B4E:  MOVLW  00
5B50:  MOVLB  0
5B52:  CALL   0BFC
5B56:  TBLRD*-
5B58:  TBLRD*+
5B5A:  MOVF   FF5,W
5B5C:  MOVWF  FEE
5B5E:  IORLW  00
5B60:  BNZ   5B58
5B62:  MOVLB  5
5B64:  BTFSC  x3A.7
5B66:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5B68:  MOVLW  05
5B6A:  MOVWF  x3B
5B6C:  MOVLW  1A
5B6E:  MOVWF  x3A
5B70:  CLRF   x3C
5B72:  CLRF   x3D
5B74:  MOVLW  01
5B76:  MOVWF  x3E
5B78:  MOVLW  02
5B7A:  MOVWF  x3F
5B7C:  MOVLB  0
5B7E:  CALL   17EC
....................           
....................          if(Opcion==2) 
5B82:  MOVLB  4
5B84:  MOVF   x90,W
5B86:  SUBLW  02
5B88:  BNZ   5C14
....................          {strcpy(Menus.Letra,"SI"); 
5B8A:  MOVLW  05
5B8C:  MOVWF  FEA
5B8E:  MOVLW  1A
5B90:  MOVWF  FE9
5B92:  MOVFF  FF2,53A
5B96:  BCF    FF2.7
5B98:  MOVLW  00
5B9A:  MOVLB  0
5B9C:  CALL   0CB0
5BA0:  TBLRD*-
5BA2:  TBLRD*+
5BA4:  MOVF   FF5,W
5BA6:  MOVWF  FEE
5BA8:  IORLW  00
5BAA:  BNZ   5BA2
5BAC:  MOVLB  5
5BAE:  BTFSC  x3A.7
5BB0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,1,2); 
5BB2:  MOVLW  05
5BB4:  MOVWF  x3B
5BB6:  MOVLW  1A
5BB8:  MOVWF  x3A
5BBA:  MOVLW  32
5BBC:  MOVWF  x3C
5BBE:  MOVLW  19
5BC0:  MOVWF  x3D
5BC2:  MOVLW  01
5BC4:  MOVWF  x3E
5BC6:  MOVLW  02
5BC8:  MOVWF  x3F
5BCA:  MOVLB  0
5BCC:  CALL   17EC
....................          strcpy(Menus.Letra,"NO"); 
5BD0:  MOVLW  05
5BD2:  MOVWF  FEA
5BD4:  MOVLW  1A
5BD6:  MOVWF  FE9
5BD8:  MOVFF  FF2,53A
5BDC:  BCF    FF2.7
5BDE:  MOVLW  00
5BE0:  CALL   0CCE
5BE4:  TBLRD*-
5BE6:  TBLRD*+
5BE8:  MOVF   FF5,W
5BEA:  MOVWF  FEE
5BEC:  IORLW  00
5BEE:  BNZ   5BE6
5BF0:  MOVLB  5
5BF2:  BTFSC  x3A.7
5BF4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,0,2); 
5BF6:  MOVLW  05
5BF8:  MOVWF  x3B
5BFA:  MOVLW  1A
5BFC:  MOVWF  x3A
5BFE:  MOVLW  32
5C00:  MOVWF  x3C
5C02:  MOVLW  2D
5C04:  MOVWF  x3D
5C06:  CLRF   x3E
5C08:  MOVLW  02
5C0A:  MOVWF  x3F
5C0C:  MOVLB  0
5C0E:  CALL   17EC
5C12:  MOVLB  4
....................          } 
....................          if(Opcion==1) 
5C14:  DECFSZ x90,W
5C16:  BRA    5CA2
....................          {strcpy(Menus.Letra,"SI"); 
5C18:  MOVLW  05
5C1A:  MOVWF  FEA
5C1C:  MOVLW  1A
5C1E:  MOVWF  FE9
5C20:  MOVFF  FF2,53A
5C24:  BCF    FF2.7
5C26:  MOVLW  00
5C28:  MOVLB  0
5C2A:  CALL   0CB0
5C2E:  TBLRD*-
5C30:  TBLRD*+
5C32:  MOVF   FF5,W
5C34:  MOVWF  FEE
5C36:  IORLW  00
5C38:  BNZ   5C30
5C3A:  MOVLB  5
5C3C:  BTFSC  x3A.7
5C3E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,0,2); 
5C40:  MOVLW  05
5C42:  MOVWF  x3B
5C44:  MOVLW  1A
5C46:  MOVWF  x3A
5C48:  MOVLW  32
5C4A:  MOVWF  x3C
5C4C:  MOVLW  19
5C4E:  MOVWF  x3D
5C50:  CLRF   x3E
5C52:  MOVLW  02
5C54:  MOVWF  x3F
5C56:  MOVLB  0
5C58:  CALL   17EC
....................          strcpy(Menus.Letra,"NO"); 
5C5C:  MOVLW  05
5C5E:  MOVWF  FEA
5C60:  MOVLW  1A
5C62:  MOVWF  FE9
5C64:  MOVFF  FF2,53A
5C68:  BCF    FF2.7
5C6A:  MOVLW  00
5C6C:  CALL   0CCE
5C70:  TBLRD*-
5C72:  TBLRD*+
5C74:  MOVF   FF5,W
5C76:  MOVWF  FEE
5C78:  IORLW  00
5C7A:  BNZ   5C72
5C7C:  MOVLB  5
5C7E:  BTFSC  x3A.7
5C80:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,1,2); 
5C82:  MOVLW  05
5C84:  MOVWF  x3B
5C86:  MOVLW  1A
5C88:  MOVWF  x3A
5C8A:  MOVLW  32
5C8C:  MOVWF  x3C
5C8E:  MOVLW  2D
5C90:  MOVWF  x3D
5C92:  MOVLW  01
5C94:  MOVWF  x3E
5C96:  MOVLW  02
5C98:  MOVWF  x3F
5C9A:  MOVLB  0
5C9C:  CALL   17EC
5CA0:  MOVLB  4
....................          } 
....................          visual=0; 
5CA2:  BCF    x7C.4
....................       } 
....................        
....................          
....................       if(UP)//Si oprime hacia arriba 
5CA4:  BSF    F92.5
5CA6:  BTFSS  F80.5
5CA8:  BRA    5CB4
....................       { 
....................          if(Opcion<2) 
5CAA:  MOVF   x90,W
5CAC:  SUBLW  01
5CAE:  BNC   5CB2
....................          { 
....................             Opcion++; 
5CB0:  INCF   x90,F
....................          } 
....................          visual=1; 
5CB2:  BSF    x7C.4
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5CB4:  BSF    F96.0
5CB6:  BTFSS  F84.0
5CB8:  BRA    5CC4
....................       {   
....................          if(Opcion>1) 
5CBA:  MOVF   x90,W
5CBC:  SUBLW  01
5CBE:  BC    5CC2
....................          { 
....................             Opcion--; 
5CC0:  DECF   x90,F
....................          }   
....................          visual=1; 
5CC2:  BSF    x7C.4
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
5CC4:  BSF    F96.1
5CC6:  BTFSS  F84.1
5CC8:  BRA    5E42
....................       {   
....................          if(Opcion==2) 
5CCA:  MOVF   x90,W
5CCC:  SUBLW  02
5CCE:  BTFSS  FD8.2
5CD0:  BRA    5E14
....................          { 
....................             Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5CD2:  MOVLW  14
5CD4:  MOVWF  x89
5CD6:  MOVLW  0F
5CD8:  MOVLB  5
5CDA:  MOVWF  x4C
5CDC:  MOVLW  12
5CDE:  MOVWF  x4D
5CE0:  MOVLW  1E
5CE2:  MOVWF  x4E
5CE4:  MOVLW  35
5CE6:  MOVWF  x4F
5CE8:  CLRF   x50
5CEA:  MOVLW  01
5CEC:  MOVWF  x51
5CEE:  MOVLB  0
5CF0:  CALL   172A
5CF4:  MOVLB  4
5CF6:  CLRF   x92
5CF8:  MOVLW  C0
5CFA:  IORWF  FF2,F
5CFC:  MOVLB  5
5CFE:  CLRF   x3B
5D00:  MOVLB  0
5D02:  CALL   11BC
....................             strcpy(Menus.Letra,"Calentando"); 
5D06:  MOVLW  05
5D08:  MOVWF  FEA
5D0A:  MOVLW  1A
5D0C:  MOVWF  FE9
5D0E:  MOVFF  FF2,53A
5D12:  BCF    FF2.7
5D14:  MOVLW  00
5D16:  CALL   0974
5D1A:  TBLRD*-
5D1C:  TBLRD*+
5D1E:  MOVF   FF5,W
5D20:  MOVWF  FEE
5D22:  IORLW  00
5D24:  BNZ   5D1C
5D26:  MOVLB  5
5D28:  BTFSC  x3A.7
5D2A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
5D2C:  MOVLW  05
5D2E:  MOVWF  x3B
5D30:  MOVLW  1A
5D32:  MOVWF  x3A
5D34:  CLRF   x3C
5D36:  MOVLW  37
5D38:  MOVWF  x3D
5D3A:  MOVLW  02
5D3C:  MOVWF  x3E
5D3E:  MOVLW  01
5D40:  MOVWF  x3F
5D42:  MOVLB  0
5D44:  CALL   17EC
....................             glcd_rect(15, 18, 30, 53, NO, ON); 
5D48:  MOVLW  0F
5D4A:  MOVLB  5
5D4C:  MOVWF  x4C
5D4E:  MOVLW  12
5D50:  MOVWF  x4D
5D52:  MOVLW  1E
5D54:  MOVWF  x4E
5D56:  MOVLW  35
5D58:  MOVWF  x4F
5D5A:  CLRF   x50
5D5C:  MOVLW  01
5D5E:  MOVWF  x51
5D60:  MOVLB  0
5D62:  CALL   172A
....................             glcd_imagen(5); 
5D66:  MOVLW  05
5D68:  MOVLB  5
5D6A:  MOVWF  x3A
5D6C:  MOVLB  0
5D6E:  CALL   2018
....................             strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5D72:  MOVLW  05
5D74:  MOVWF  FEA
5D76:  MOVLW  1A
5D78:  MOVWF  FE9
5D7A:  MOVFF  FF2,53A
5D7E:  BCF    FF2.7
5D80:  MOVLW  00
5D82:  CALL   099A
5D86:  TBLRD*-
5D88:  TBLRD*+
5D8A:  MOVF   FF5,W
5D8C:  MOVWF  FEE
5D8E:  IORLW  00
5D90:  BNZ   5D88
5D92:  MOVLB  5
5D94:  BTFSC  x3A.7
5D96:  BSF    FF2.7
5D98:  MOVLW  05
5D9A:  MOVWF  x3B
5D9C:  MOVLW  1A
5D9E:  MOVWF  x3A
5DA0:  CLRF   x3C
5DA2:  CLRF   x3D
5DA4:  MOVLW  02
5DA6:  MOVWF  x3E
5DA8:  MOVLW  01
5DAA:  MOVWF  x3F
5DAC:  MOVLB  0
5DAE:  CALL   17EC
....................             strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5DB2:  MOVLW  05
5DB4:  MOVWF  FEA
5DB6:  MOVLW  1A
5DB8:  MOVWF  FE9
5DBA:  MOVFF  FF2,53A
5DBE:  BCF    FF2.7
5DC0:  MOVLW  00
5DC2:  CALL   09BC
5DC6:  TBLRD*-
5DC8:  TBLRD*+
5DCA:  MOVF   FF5,W
5DCC:  MOVWF  FEE
5DCE:  IORLW  00
5DD0:  BNZ   5DC8
5DD2:  MOVLB  5
5DD4:  BTFSC  x3A.7
5DD6:  BSF    FF2.7
5DD8:  MOVLW  05
5DDA:  MOVWF  x3B
5DDC:  MOVLW  1A
5DDE:  MOVWF  x3A
5DE0:  CLRF   x3C
5DE2:  MOVLW  08
5DE4:  MOVWF  x3D
5DE6:  MOVLW  02
5DE8:  MOVWF  x3E
5DEA:  MOVLW  01
5DEC:  MOVWF  x3F
5DEE:  MOVLB  0
5DF0:  CALL   17EC
....................             MuestraTiemposProgramados(); 
5DF4:  CALL   2514
....................             if(Nivel<6) 
5DF8:  MOVLB  4
5DFA:  MOVF   x9D,F
5DFC:  BNZ   5E08
5DFE:  MOVF   x9C,W
5E00:  SUBLW  05
5E02:  BNC   5E08
....................                { 
....................                   desfoguelento=1; 
5E04:  BSF    x7C.5
....................                } 
....................                else 
5E06:  BRA    5E0A
....................                { 
....................                   desfoguelento=0; 
5E08:  BCF    x7C.5
....................                } 
....................                EnviarCodigo(); 
5E0A:  MOVLB  0
5E0C:  CALL   1AD2
....................          } 
....................          else 
5E10:  BRA    5E44
5E12:  MOVLB  4
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E14:  MOVLW  04
5E16:  MOVLB  5
5E18:  MOVWF  x3A
5E1A:  MOVLW  AF
5E1C:  MOVWF  x3F
5E1E:  MOVLB  0
5E20:  CALL   10C4
5E24:  MOVLB  5
5E26:  DECFSZ x3A,F
5E28:  BRA    5E1A
5E2A:  MOVLW  08
5E2C:  MOVLB  4
5E2E:  MOVWF  x89
5E30:  MOVLB  5
5E32:  CLRF   x3B
5E34:  MOVLB  0
5E36:  CALL   11BC
5E3A:  MOVLW  01
5E3C:  MOVLB  4
5E3E:  MOVWF  x90
5E40:  BSF    x7C.4
5E42:  MOVLB  0
....................          } 
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
5E44:  BSF    F96.2
5E46:  BTFSS  F84.2
5E48:  BRA    5E7A
....................       { 
....................          delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E4A:  MOVLW  04
5E4C:  MOVLB  5
5E4E:  MOVWF  x3A
5E50:  MOVLW  AF
5E52:  MOVWF  x3F
5E54:  MOVLB  0
5E56:  CALL   10C4
5E5A:  MOVLB  5
5E5C:  DECFSZ x3A,F
5E5E:  BRA    5E50
5E60:  MOVLW  08
5E62:  MOVLB  4
5E64:  MOVWF  x89
5E66:  MOVLB  5
5E68:  CLRF   x3B
5E6A:  MOVLB  0
5E6C:  CALL   11BC
5E70:  MOVLW  01
5E72:  MOVLB  4
5E74:  MOVWF  x90
5E76:  BSF    x7C.4
5E78:  MOVLB  0
....................       } 
....................      
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
5E7A:  MOVLB  4
5E7C:  MOVF   x89,W
5E7E:  SUBLW  14
5E80:  BTFSS  FD8.2
5E82:  GOTO   6990
....................    if(flag_agua==1 && Puerta==1 && Parada==1 && tiempo_esterilizacion<2 && Alarma==0 && AlarmaAgua==0) 
5E86:  BTFSS  x7D.2
5E88:  BRA    5FB2
5E8A:  DECFSZ x70,W
5E8C:  BRA    5FB2
5E8E:  DECFSZ x71,W
5E90:  BRA    5FB2
5E92:  MOVF   x91,W
5E94:  SUBLW  01
5E96:  BTFSS  FD8.0
5E98:  BRA    5FB2
5E9A:  MOVF   x7A,F
5E9C:  BTFSS  FD8.2
5E9E:  BRA    5FB2
5EA0:  MOVF   x7B,F
5EA2:  BTFSS  FD8.2
5EA4:  BRA    5FB2
....................    {   
....................       // Debe enviar a Hardware_Controller flag que indique que puede realizar control. En Hardware_Controller si esta activado el flag** 
....................       // de control debe tener automaticamente la electrovalvula de desfogue cerrada.** 
....................       if(tiempo_esterilizacion==0 && disp_Calentando==0) 
5EA6:  MOVF   x91,F
5EA8:  BNZ   5F24
5EAA:  BTFSC  x7D.4
5EAC:  BRA    5F24
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5EAE:  MOVLB  5
5EB0:  CLRF   x4C
5EB2:  MOVLW  37
5EB4:  MOVWF  x4D
5EB6:  MOVLW  7F
5EB8:  MOVWF  x4E
5EBA:  MOVLW  3F
5EBC:  MOVWF  x4F
5EBE:  MOVLW  01
5EC0:  MOVWF  x50
5EC2:  CLRF   x51
5EC4:  MOVLB  0
5EC6:  CALL   172A
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
5ECA:  MOVLW  05
5ECC:  MOVWF  FEA
5ECE:  MOVLW  1A
5ED0:  MOVWF  FE9
5ED2:  MOVFF  FF2,53A
5ED6:  BCF    FF2.7
5ED8:  MOVLW  00
5EDA:  CALL   0974
5EDE:  TBLRD*-
5EE0:  TBLRD*+
5EE2:  MOVF   FF5,W
5EE4:  MOVWF  FEE
5EE6:  IORLW  00
5EE8:  BNZ   5EE0
5EEA:  MOVLB  5
5EEC:  BTFSC  x3A.7
5EEE:  BSF    FF2.7
5EF0:  MOVLW  05
5EF2:  MOVWF  x3B
5EF4:  MOVLW  1A
5EF6:  MOVWF  x3A
5EF8:  CLRF   x3C
5EFA:  MOVLW  37
5EFC:  MOVWF  x3D
5EFE:  MOVLW  02
5F00:  MOVWF  x3E
5F02:  MOVLW  01
5F04:  MOVWF  x3F
5F06:  MOVLB  0
5F08:  CALL   17EC
....................          disp_Calentando=1;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5F0C:  MOVLB  4
5F0E:  BSF    x7D.4
5F10:  BCF    x7D.5
5F12:  BCF    x7D.6
5F14:  BCF    x7D.7
5F16:  BCF    x7E.0
5F18:  BCF    x7E.1
5F1A:  BCF    x7E.2
5F1C:  BCF    x7E.3
....................          EVDesfogue=0;Control=1; 
5F1E:  CLRF   x80
5F20:  MOVLW  01
5F22:  MOVWF  x87
....................       } 
....................       if(tiempo_esterilizacion==1 && disp_Esterilizando==0) 
5F24:  DECFSZ x91,W
5F26:  BRA    5FA4
5F28:  BTFSC  x7D.7
5F2A:  BRA    5FA4
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5F2C:  MOVLB  5
5F2E:  CLRF   x4C
5F30:  MOVLW  37
5F32:  MOVWF  x4D
5F34:  MOVLW  7F
5F36:  MOVWF  x4E
5F38:  MOVLW  3F
5F3A:  MOVWF  x4F
5F3C:  MOVLW  01
5F3E:  MOVWF  x50
5F40:  CLRF   x51
5F42:  MOVLB  0
5F44:  CALL   172A
....................          strcpy(Menus.Letra,"Esterilizando");displayMenu(Menus.Letra,0,55,2,1); 
5F48:  MOVLW  05
5F4A:  MOVWF  FEA
5F4C:  MOVLW  1A
5F4E:  MOVWF  FE9
5F50:  MOVFF  FF2,53A
5F54:  BCF    FF2.7
5F56:  MOVLW  00
5F58:  CALL   0CEC
5F5C:  TBLRD*-
5F5E:  TBLRD*+
5F60:  MOVF   FF5,W
5F62:  MOVWF  FEE
5F64:  IORLW  00
5F66:  BNZ   5F5E
5F68:  MOVLB  5
5F6A:  BTFSC  x3A.7
5F6C:  BSF    FF2.7
5F6E:  MOVLW  05
5F70:  MOVWF  x3B
5F72:  MOVLW  1A
5F74:  MOVWF  x3A
5F76:  CLRF   x3C
5F78:  MOVLW  37
5F7A:  MOVWF  x3D
5F7C:  MOVLW  02
5F7E:  MOVWF  x3E
5F80:  MOVLW  01
5F82:  MOVWF  x3F
5F84:  MOVLB  0
5F86:  CALL   17EC
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=1;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5F8A:  MOVLB  4
5F8C:  BCF    x7D.4
5F8E:  BCF    x7D.5
5F90:  BCF    x7D.6
5F92:  BSF    x7D.7
5F94:  BCF    x7E.0
5F96:  BCF    x7E.1
5F98:  BCF    x7E.2
5F9A:  BCF    x7E.3
....................          EVDesfogue=0;EVTrampa=0;Control=1; 
5F9C:  CLRF   x80
5F9E:  CLRF   x82
5FA0:  MOVLW  01
5FA2:  MOVWF  x87
....................       } 
....................       Control=1; 
5FA4:  MOVLW  01
5FA6:  MOVWF  x87
....................       EnviarCodigo(); 
5FA8:  MOVLB  0
5FAA:  CALL   1AD2
....................    } 
....................    else 
5FAE:  BRA    6400
5FB0:  MOVLB  4
....................    { 
....................       Control=0; 
5FB2:  CLRF   x87
....................       if(Alarma>0) 
5FB4:  MOVF   x7A,F
5FB6:  BTFSC  FD8.2
5FB8:  BRA    60B6
....................       { 
....................          if(Alarma==1) // Alarma de Error de Tiempo: Error por exceso de tiempo de calentamiento. 
5FBA:  DECFSZ x7A,W
5FBC:  BRA    6034
....................          { 
....................             if(disp_Alarma==0) 
5FBE:  BTFSC  x7E.5
5FC0:  BRA    6034
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
5FC2:  MOVLB  5
5FC4:  CLRF   x4C
5FC6:  MOVLW  37
5FC8:  MOVWF  x4D
5FCA:  MOVLW  7F
5FCC:  MOVWF  x4E
5FCE:  MOVLW  3F
5FD0:  MOVWF  x4F
5FD2:  MOVLW  01
5FD4:  MOVWF  x50
5FD6:  CLRF   x51
5FD8:  MOVLB  0
5FDA:  CALL   172A
....................                strcpy(Menus.Letra,"Error:ET01");displayMenu(Menus.Letra,0,55,2,1); 
5FDE:  MOVLW  05
5FE0:  MOVWF  FEA
5FE2:  MOVLW  1A
5FE4:  MOVWF  FE9
5FE6:  MOVFF  FF2,53A
5FEA:  BCF    FF2.7
5FEC:  MOVLW  00
5FEE:  CALL   0D14
5FF2:  TBLRD*-
5FF4:  TBLRD*+
5FF6:  MOVF   FF5,W
5FF8:  MOVWF  FEE
5FFA:  IORLW  00
5FFC:  BNZ   5FF4
5FFE:  MOVLB  5
6000:  BTFSC  x3A.7
6002:  BSF    FF2.7
6004:  MOVLW  05
6006:  MOVWF  x3B
6008:  MOVLW  1A
600A:  MOVWF  x3A
600C:  CLRF   x3C
600E:  MOVLW  37
6010:  MOVWF  x3D
6012:  MOVLW  02
6014:  MOVWF  x3E
6016:  MOVLW  01
6018:  MOVWF  x3F
601A:  MOVLB  0
601C:  CALL   17EC
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
6020:  MOVLB  4
6022:  BCF    x7D.4
6024:  BCF    x7D.5
6026:  BCF    x7D.6
6028:  BCF    x7D.7
602A:  BCF    x7E.0
602C:  BCF    x7E.1
602E:  BCF    x7E.2
6030:  BCF    x7E.3
....................                disp_Alarma=1; 
6032:  BSF    x7E.5
....................             } 
....................          } 
....................           
....................          if(Alarma==2) // Alarma de Error de Tiempo: Error por Cambio brusco en la Temperatura 
6034:  MOVF   x7A,W
6036:  SUBLW  02
6038:  BNZ   60B4
....................          { 
....................             tiempo_esterilizacion=0;tiempo_secado=0; 
603A:  CLRF   x91
603C:  CLRF   x92
....................             if(disp_Alarma==0) 
603E:  BTFSC  x7E.5
6040:  BRA    60B4
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
6042:  MOVLB  5
6044:  CLRF   x4C
6046:  MOVLW  37
6048:  MOVWF  x4D
604A:  MOVLW  7F
604C:  MOVWF  x4E
604E:  MOVLW  3F
6050:  MOVWF  x4F
6052:  MOVLW  01
6054:  MOVWF  x50
6056:  CLRF   x51
6058:  MOVLB  0
605A:  CALL   172A
....................                strcpy(Menus.Letra,"Error:ET02");displayMenu(Menus.Letra,0,55,2,1); 
605E:  MOVLW  05
6060:  MOVWF  FEA
6062:  MOVLW  1A
6064:  MOVWF  FE9
6066:  MOVFF  FF2,53A
606A:  BCF    FF2.7
606C:  MOVLW  00
606E:  CALL   0D3A
6072:  TBLRD*-
6074:  TBLRD*+
6076:  MOVF   FF5,W
6078:  MOVWF  FEE
607A:  IORLW  00
607C:  BNZ   6074
607E:  MOVLB  5
6080:  BTFSC  x3A.7
6082:  BSF    FF2.7
6084:  MOVLW  05
6086:  MOVWF  x3B
6088:  MOVLW  1A
608A:  MOVWF  x3A
608C:  CLRF   x3C
608E:  MOVLW  37
6090:  MOVWF  x3D
6092:  MOVLW  02
6094:  MOVWF  x3E
6096:  MOVLW  01
6098:  MOVWF  x3F
609A:  MOVLB  0
609C:  CALL   17EC
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
60A0:  MOVLB  4
60A2:  BCF    x7D.4
60A4:  BCF    x7D.5
60A6:  BCF    x7D.6
60A8:  BCF    x7D.7
60AA:  BCF    x7E.0
60AC:  BCF    x7E.1
60AE:  BCF    x7E.2
60B0:  BCF    x7E.3
....................                disp_Alarma=1; 
60B2:  BSF    x7E.5
....................             } 
....................          } 
....................       } 
....................       else 
60B4:  BRA    63FA
....................       { 
....................          disp_Alarma=0; 
60B6:  BCF    x7E.5
....................          if(NivelTanque==1 && flag_agua==0 ) 
60B8:  DECFSZ x73,W
60BA:  BRA    60C4
60BC:  BTFSC  x7D.2
60BE:  BRA    60C4
....................          { 
....................             flag_agua=1; 
60C0:  BSF    x7D.2
....................             // Debe enviar a Hardware_Controller que cierre EV de agua 
....................          }  
....................          else 
60C2:  BRA    61BA
....................          { 
....................             if(tiempo_esterilizacion==0 && disp_Llenando==0 && Puerta==1) 
60C4:  MOVF   x91,F
60C6:  BNZ   6142
60C8:  BTFSC  x7D.5
60CA:  BRA    6142
60CC:  DECFSZ x70,W
60CE:  BRA    6142
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
60D0:  MOVLB  5
60D2:  CLRF   x4C
60D4:  MOVLW  37
60D6:  MOVWF  x4D
60D8:  MOVLW  7F
60DA:  MOVWF  x4E
60DC:  MOVLW  3F
60DE:  MOVWF  x4F
60E0:  MOVLW  01
60E2:  MOVWF  x50
60E4:  CLRF   x51
60E6:  MOVLB  0
60E8:  CALL   172A
....................                strcpy(Menus.Letra,"Llenando");displayMenu(Menus.Letra,0,55,2,1); 
60EC:  MOVLW  05
60EE:  MOVWF  FEA
60F0:  MOVLW  1A
60F2:  MOVWF  FE9
60F4:  MOVFF  FF2,53A
60F8:  BCF    FF2.7
60FA:  MOVLW  00
60FC:  CALL   0D60
6100:  TBLRD*-
6102:  TBLRD*+
6104:  MOVF   FF5,W
6106:  MOVWF  FEE
6108:  IORLW  00
610A:  BNZ   6102
610C:  MOVLB  5
610E:  BTFSC  x3A.7
6110:  BSF    FF2.7
6112:  MOVLW  05
6114:  MOVWF  x3B
6116:  MOVLW  1A
6118:  MOVWF  x3A
611A:  CLRF   x3C
611C:  MOVLW  37
611E:  MOVWF  x3D
6120:  MOVLW  02
6122:  MOVWF  x3E
6124:  MOVLW  01
6126:  MOVWF  x3F
6128:  MOVLB  0
612A:  CALL   17EC
....................                disp_Calentando=0;disp_Llenando=1;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
612E:  MOVLB  4
6130:  BCF    x7D.4
6132:  BSF    x7D.5
6134:  BCF    x7D.6
6136:  BCF    x7D.7
6138:  BCF    x7E.0
613A:  BCF    x7E.1
613C:  BCF    x7E.2
613E:  BCF    x7E.3
....................                // Debe enviar a Hardware_Controller que abra EV de agua y que apague Resistencia 
....................                Control=0; 
6140:  CLRF   x87
....................             } 
....................              
....................             if(AlarmaAgua==1) 
6142:  DECFSZ x7B,W
6144:  BRA    61BA
....................             { 
....................                if(disp_AlarmaAgua==0) 
6146:  BTFSC  x7E.6
6148:  BRA    61BA
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
614A:  MOVLB  5
614C:  CLRF   x4C
614E:  MOVLW  37
6150:  MOVWF  x4D
6152:  MOVLW  7F
6154:  MOVWF  x4E
6156:  MOVLW  3F
6158:  MOVWF  x4F
615A:  MOVLW  01
615C:  MOVWF  x50
615E:  CLRF   x51
6160:  MOVLB  0
6162:  CALL   172A
....................                   strcpy(Menus.Letra,"Error:EA01");displayMenu(Menus.Letra,0,55,2,1); 
6166:  MOVLW  05
6168:  MOVWF  FEA
616A:  MOVLW  1A
616C:  MOVWF  FE9
616E:  MOVFF  FF2,53A
6172:  BCF    FF2.7
6174:  MOVLW  00
6176:  CALL   0D84
617A:  TBLRD*-
617C:  TBLRD*+
617E:  MOVF   FF5,W
6180:  MOVWF  FEE
6182:  IORLW  00
6184:  BNZ   617C
6186:  MOVLB  5
6188:  BTFSC  x3A.7
618A:  BSF    FF2.7
618C:  MOVLW  05
618E:  MOVWF  x3B
6190:  MOVLW  1A
6192:  MOVWF  x3A
6194:  CLRF   x3C
6196:  MOVLW  37
6198:  MOVWF  x3D
619A:  MOVLW  02
619C:  MOVWF  x3E
619E:  MOVLW  01
61A0:  MOVWF  x3F
61A2:  MOVLB  0
61A4:  CALL   17EC
....................                   disp_Calentando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
61A8:  MOVLB  4
61AA:  BCF    x7D.4
61AC:  BCF    x7D.6
61AE:  BCF    x7D.7
61B0:  BCF    x7E.0
61B2:  BCF    x7E.1
61B4:  BCF    x7E.2
61B6:  BCF    x7E.3
....................                   disp_AlarmaAgua=1; 
61B8:  BSF    x7E.6
....................                } 
....................             } 
....................          } 
....................           
....................          if(tiempo_esterilizacion==2 && flag_agua==1) 
61BA:  MOVF   x91,W
61BC:  SUBLW  02
61BE:  BTFSS  FD8.2
61C0:  BRA    6382
61C2:  BTFSS  x7D.2
61C4:  BRA    6382
....................          { 
....................             // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................             if(desfoguelento==1)    
61C6:  BTFSS  x7C.5
61C8:  BRA    62A8
....................             { 
....................                if(z==0) 
61CA:  BTFSC  x7E.4
61CC:  BRA    621E
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
61CE:  MOVLB  5
61D0:  CLRF   x3A
61D2:  MOVLW  5A
61D4:  MOVWF  x3B
61D6:  MOVLW  38
61D8:  MOVWF  x3C
61DA:  MOVLB  0
61DC:  CALL   2654
61E0:  MOVLW  19
61E2:  MOVLB  5
61E4:  MOVWF  x4C
61E6:  MOVLW  12
61E8:  MOVWF  x4D
61EA:  MOVLW  3C
61EC:  MOVWF  x4E
61EE:  MOVLW  1A
61F0:  MOVWF  x4F
61F2:  CLRF   x50
61F4:  CLRF   x51
61F6:  MOVLB  0
61F8:  CALL   172A
61FC:  MOVLW  37
61FE:  MOVLB  5
6200:  MOVWF  x4C
6202:  MOVLW  12
6204:  MOVWF  x4D
6206:  MOVLW  44
6208:  MOVWF  x4E
620A:  MOVLW  35
620C:  MOVWF  x4F
620E:  CLRF   x50
6210:  MOVLW  01
6212:  MOVWF  x51
6214:  MOVLB  0
6216:  CALL   172A
621A:  MOVLB  4
621C:  BSF    x7E.4
....................                } 
....................                if(disp_Despresurizando==0) 
621E:  BTFSC  x7E.0
6220:  BRA    62A0
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6222:  MOVLB  5
6224:  CLRF   x4C
6226:  MOVLW  37
6228:  MOVWF  x4D
622A:  MOVLW  7F
622C:  MOVWF  x4E
622E:  MOVLW  3F
6230:  MOVWF  x4F
6232:  MOVLW  01
6234:  MOVWF  x50
6236:  CLRF   x51
6238:  MOVLB  0
623A:  CALL   172A
....................                   strcpy(Menus.Letra,"Despresurizando");displayMenu(Menus.Letra,0,55,2,1); 
623E:  MOVLW  05
6240:  MOVWF  FEA
6242:  MOVLW  1A
6244:  MOVWF  FE9
6246:  MOVFF  FF2,53A
624A:  BCF    FF2.7
624C:  MOVLW  00
624E:  CALL   0DAA
6252:  TBLRD*-
6254:  TBLRD*+
6256:  MOVF   FF5,W
6258:  MOVWF  FEE
625A:  IORLW  00
625C:  BNZ   6254
625E:  MOVLB  5
6260:  BTFSC  x3A.7
6262:  BSF    FF2.7
6264:  MOVLW  05
6266:  MOVWF  x3B
6268:  MOVLW  1A
626A:  MOVWF  x3A
626C:  CLRF   x3C
626E:  MOVLW  37
6270:  MOVWF  x3D
6272:  MOVLW  02
6274:  MOVWF  x3E
6276:  MOVLW  01
6278:  MOVWF  x3F
627A:  MOVLB  0
627C:  CALL   17EC
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6280:  MOVLB  4
6282:  BCF    x7D.4
6284:  BCF    x7D.5
6286:  BCF    x7D.6
6288:  BCF    x7D.7
628A:  BSF    x7E.0
628C:  BCF    x7E.1
628E:  BCF    x7E.2
6290:  BCF    x7E.3
....................                   glcd_imagen(5); 
6292:  MOVLW  05
6294:  MOVLB  5
6296:  MOVWF  x3A
6298:  MOVLB  0
629A:  CALL   2018
629E:  MOVLB  4
....................                } 
....................                Exhaust=2;tiempo_secado=2; 
62A0:  MOVLW  02
62A2:  MOVWF  x93
62A4:  MOVWF  x92
....................             } 
....................             else 
62A6:  BRA    6382
....................             { 
....................                if(z==0) 
62A8:  BTFSC  x7E.4
62AA:  BRA    62FC
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
62AC:  MOVLB  5
62AE:  CLRF   x3A
62B0:  MOVLW  5A
62B2:  MOVWF  x3B
62B4:  MOVLW  38
62B6:  MOVWF  x3C
62B8:  MOVLB  0
62BA:  CALL   2654
62BE:  MOVLW  19
62C0:  MOVLB  5
62C2:  MOVWF  x4C
62C4:  MOVLW  12
62C6:  MOVWF  x4D
62C8:  MOVLW  3C
62CA:  MOVWF  x4E
62CC:  MOVLW  1A
62CE:  MOVWF  x4F
62D0:  CLRF   x50
62D2:  CLRF   x51
62D4:  MOVLB  0
62D6:  CALL   172A
62DA:  MOVLW  37
62DC:  MOVLB  5
62DE:  MOVWF  x4C
62E0:  MOVLW  12
62E2:  MOVWF  x4D
62E4:  MOVLW  44
62E6:  MOVWF  x4E
62E8:  MOVLW  35
62EA:  MOVWF  x4F
62EC:  CLRF   x50
62EE:  MOVLW  01
62F0:  MOVWF  x51
62F2:  MOVLB  0
62F4:  CALL   172A
62F8:  MOVLB  4
62FA:  BSF    x7E.4
....................                   //tiempo_secado=1; 
....................                } 
....................                if(disp_Secando==0) 
62FC:  BTFSC  x7D.6
62FE:  BRA    637E
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6300:  MOVLB  5
6302:  CLRF   x4C
6304:  MOVLW  37
6306:  MOVWF  x4D
6308:  MOVLW  7F
630A:  MOVWF  x4E
630C:  MOVLW  3F
630E:  MOVWF  x4F
6310:  MOVLW  01
6312:  MOVWF  x50
6314:  CLRF   x51
6316:  MOVLB  0
6318:  CALL   172A
....................                   strcpy(Menus.Letra,"Secando");displayMenu(Menus.Letra,0,55,2,1); 
631C:  MOVLW  05
631E:  MOVWF  FEA
6320:  MOVLW  1A
6322:  MOVWF  FE9
6324:  MOVFF  FF2,53A
6328:  BCF    FF2.7
632A:  MOVLW  00
632C:  CALL   0DD4
6330:  TBLRD*-
6332:  TBLRD*+
6334:  MOVF   FF5,W
6336:  MOVWF  FEE
6338:  IORLW  00
633A:  BNZ   6332
633C:  MOVLB  5
633E:  BTFSC  x3A.7
6340:  BSF    FF2.7
6342:  MOVLW  05
6344:  MOVWF  x3B
6346:  MOVLW  1A
6348:  MOVWF  x3A
634A:  CLRF   x3C
634C:  MOVLW  37
634E:  MOVWF  x3D
6350:  MOVLW  02
6352:  MOVWF  x3E
6354:  MOVLW  01
6356:  MOVWF  x3F
6358:  MOVLB  0
635A:  CALL   17EC
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
635E:  MOVLB  4
6360:  BCF    x7D.4
6362:  BCF    x7D.5
6364:  BSF    x7D.6
6366:  BCF    x7D.7
6368:  BCF    x7E.0
636A:  BCF    x7E.1
636C:  BCF    x7E.2
636E:  BCF    x7E.3
....................                   glcd_imagen(5); 
6370:  MOVLW  05
6372:  MOVLB  5
6374:  MOVWF  x3A
6376:  MOVLB  0
6378:  CALL   2018
637C:  MOVLB  4
....................                } 
....................                Exhaust=1; 
637E:  MOVLW  01
6380:  MOVWF  x93
....................             } 
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................           
....................          if(Puerta==0) 
6382:  MOVF   x70,F
6384:  BNZ   63FA
....................          { 
....................             if(disp_Door==0) 
6386:  BTFSC  x7E.2
6388:  BRA    63FA
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
638A:  MOVLB  5
638C:  CLRF   x4C
638E:  MOVLW  37
6390:  MOVWF  x4D
6392:  MOVLW  7F
6394:  MOVWF  x4E
6396:  MOVLW  3F
6398:  MOVWF  x4F
639A:  MOVLW  01
639C:  MOVWF  x50
639E:  CLRF   x51
63A0:  MOVLB  0
63A2:  CALL   172A
....................                strcpy(Menus.Letra,"Puerta Abierta");displayMenu(Menus.Letra,0,55,2,1); 
63A6:  MOVLW  05
63A8:  MOVWF  FEA
63AA:  MOVLW  1A
63AC:  MOVWF  FE9
63AE:  MOVFF  FF2,53A
63B2:  BCF    FF2.7
63B4:  MOVLW  00
63B6:  CALL   0DF6
63BA:  TBLRD*-
63BC:  TBLRD*+
63BE:  MOVF   FF5,W
63C0:  MOVWF  FEE
63C2:  IORLW  00
63C4:  BNZ   63BC
63C6:  MOVLB  5
63C8:  BTFSC  x3A.7
63CA:  BSF    FF2.7
63CC:  MOVLW  05
63CE:  MOVWF  x3B
63D0:  MOVLW  1A
63D2:  MOVWF  x3A
63D4:  CLRF   x3C
63D6:  MOVLW  37
63D8:  MOVWF  x3D
63DA:  MOVLW  02
63DC:  MOVWF  x3E
63DE:  MOVLW  01
63E0:  MOVWF  x3F
63E2:  MOVLB  0
63E4:  CALL   17EC
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=1;disp_Fin=0; 
63E8:  MOVLB  4
63EA:  BCF    x7D.4
63EC:  BCF    x7D.5
63EE:  BCF    x7D.6
63F0:  BCF    x7D.7
63F2:  BCF    x7E.0
63F4:  BCF    x7E.1
63F6:  BSF    x7E.2
63F8:  BCF    x7E.3
....................             }    
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................       } 
....................       EnviarCodigo(); 
63FA:  MOVLB  0
63FC:  CALL   1AD2
....................    } 
....................  
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
6400:  MOVLB  4
6402:  BTFSS  x7C.6
6404:  BRA    6758
....................    {                       
....................       Lectura=0; 
6406:  BCF    x7C.6
....................       //displayTiempo(NivelTanque,40,30,2,1);  
....................       //displayTiempo(Presostato,40,40,2,1);  
....................       //displayTiempo(ADCTemperatura[2],20,30,2,1);  
....................       //displayT(Prom,20,30,2); 
....................       displayTiempo(Presostato,31,40,2,1); 
6408:  MOVFF  474,53B
640C:  MOVLW  1F
640E:  MOVLB  5
6410:  MOVWF  x3C
6412:  MOVLW  28
6414:  MOVWF  x3D
6416:  MOVLW  02
6418:  MOVWF  x3E
641A:  MOVLW  01
641C:  MOVWF  x3F
641E:  MOVLB  0
6420:  CALL   23C4
....................       glcd_rect(51, 40, 62, 48, YES, OFF);glcd_text57(52, 40, kpa, 1, ON); 
6424:  MOVLW  33
6426:  MOVLB  5
6428:  MOVWF  x4C
642A:  MOVLW  28
642C:  MOVWF  x4D
642E:  MOVLW  3E
6430:  MOVWF  x4E
6432:  MOVLW  30
6434:  MOVWF  x4F
6436:  MOVLW  01
6438:  MOVWF  x50
643A:  CLRF   x51
643C:  MOVLB  0
643E:  CALL   172A
6442:  MOVLW  34
6444:  MOVLB  5
6446:  MOVWF  x4B
6448:  MOVLW  28
644A:  MOVWF  x4C
644C:  MOVLW  04
644E:  MOVWF  x4E
6450:  MOVLW  1C
6452:  MOVWF  x4D
6454:  MOVLW  01
6456:  MOVWF  x4F
6458:  MOVWF  x50
645A:  MOVLB  0
645C:  CALL   1434
....................       displayT(ADC_Pt100,69,20,2); 
6460:  MOVFF  4A3,53D
6464:  MOVFF  4A2,53C
6468:  MOVFF  4A1,53B
646C:  MOVFF  4A0,53A
6470:  MOVLW  45
6472:  MOVLB  5
6474:  MOVWF  x3E
6476:  MOVLW  14
6478:  MOVWF  x3F
647A:  MOVLW  02
647C:  MOVWF  x40
647E:  MOVLB  0
6480:  GOTO   29E8
....................       glcd_circle(95,40,2,NO,ON); 
6484:  MOVLW  5F
6486:  MOVLB  5
6488:  MOVWF  x3A
648A:  MOVLW  28
648C:  MOVWF  x3B
648E:  MOVLW  02
6490:  MOVWF  x3C
6492:  CLRF   x3D
6494:  MOVLW  01
6496:  MOVWF  x3E
6498:  MOVLB  0
649A:  CALL   2114
....................       strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
649E:  MOVLW  05
64A0:  MOVWF  FEA
64A2:  MOVLW  1A
64A4:  MOVWF  FE9
64A6:  MOVFF  FF2,53A
64AA:  BCF    FF2.7
64AC:  MOVLW  00
64AE:  CALL   09DE
64B2:  TBLRD*-
64B4:  TBLRD*+
64B6:  MOVF   FF5,W
64B8:  MOVWF  FEE
64BA:  IORLW  00
64BC:  BNZ   64B4
64BE:  MOVLB  5
64C0:  BTFSC  x3A.7
64C2:  BSF    FF2.7
64C4:  MOVLW  05
64C6:  MOVWF  x3B
64C8:  MOVLW  1A
64CA:  MOVWF  x3A
64CC:  MOVLW  66
64CE:  MOVWF  x3C
64D0:  MOVLW  28
64D2:  MOVWF  x3D
64D4:  MOVLW  02
64D6:  MOVWF  x3E
64D8:  MOVWF  x3F
64DA:  MOVLB  0
64DC:  CALL   17EC
....................       //displayT(Pt,1,20,3); 
....................       displayTiempo(Setpoint,5,20,2,1); 
64E0:  MOVFF  48E,53B
64E4:  MOVLW  05
64E6:  MOVLB  5
64E8:  MOVWF  x3C
64EA:  MOVLW  14
64EC:  MOVWF  x3D
64EE:  MOVLW  02
64F0:  MOVWF  x3E
64F2:  MOVLW  01
64F4:  MOVWF  x3F
64F6:  MOVLB  0
64F8:  CALL   23C4
....................          
....................       if(Visua==1)// Si se activo la visualización desde software 
64FC:  MOVLB  4
64FE:  BTFSS  x7D.1
6500:  BRA    660A
....................       { 
....................          displayTiempo((int8)desvio,5,30,4,1); 
6502:  MOVFF  515,53D
6506:  MOVFF  514,53C
650A:  MOVFF  513,53B
650E:  MOVFF  512,53A
6512:  MOVLB  0
6514:  CALL   2A62
6518:  MOVFF  01,53A
651C:  MOVFF  01,53B
6520:  MOVLW  05
6522:  MOVLB  5
6524:  MOVWF  x3C
6526:  MOVLW  1E
6528:  MOVWF  x3D
652A:  MOVLW  04
652C:  MOVWF  x3E
652E:  MOVLW  01
6530:  MOVWF  x3F
6532:  MOVLB  0
6534:  CALL   23C4
....................          displayTiempo((int8)Tpulso,5,40,4,1); 
6538:  MOVFF  4F9,53D
653C:  MOVFF  4F8,53C
6540:  MOVFF  4F7,53B
6544:  MOVFF  4F6,53A
6548:  CALL   2A62
654C:  MOVFF  01,53A
6550:  MOVFF  01,53B
6554:  MOVLW  05
6556:  MOVLB  5
6558:  MOVWF  x3C
655A:  MOVLW  28
655C:  MOVWF  x3D
655E:  MOVLW  04
6560:  MOVWF  x3E
6562:  MOVLW  01
6564:  MOVWF  x3F
6566:  MOVLB  0
6568:  CALL   23C4
....................          displayTiempo((int8)Ganancia,30,40,4,1); 
656C:  MOVFF  50D,53D
6570:  MOVFF  50C,53C
6574:  MOVFF  50B,53B
6578:  MOVFF  50A,53A
657C:  CALL   2A62
6580:  MOVFF  01,53A
6584:  MOVFF  01,53B
6588:  MOVLW  1E
658A:  MOVLB  5
658C:  MOVWF  x3C
658E:  MOVLW  28
6590:  MOVWF  x3D
6592:  MOVLW  04
6594:  MOVWF  x3E
6596:  MOVLW  01
6598:  MOVWF  x3F
659A:  MOVLB  0
659C:  CALL   23C4
....................          displayTiempo((int8)Ajuste,30,30,4,1); 
65A0:  MOVFF  477,53B
65A4:  MOVLW  1E
65A6:  MOVLB  5
65A8:  MOVWF  x3C
65AA:  MOVWF  x3D
65AC:  MOVLW  04
65AE:  MOVWF  x3E
65B0:  MOVLW  01
65B2:  MOVWF  x3F
65B4:  MOVLB  0
65B6:  CALL   23C4
....................          displayTiempo((int8)Ajusten,30,20,4,1); 
65BA:  MOVFF  478,53B
65BE:  MOVLW  1E
65C0:  MOVLB  5
65C2:  MOVWF  x3C
65C4:  MOVLW  14
65C6:  MOVWF  x3D
65C8:  MOVLW  04
65CA:  MOVWF  x3E
65CC:  MOVLW  01
65CE:  MOVWF  x3F
65D0:  MOVLB  0
65D2:  CALL   23C4
....................          displayTiempo((int8)Ganancia2,50,40,4,1); 
65D6:  MOVFF  511,53D
65DA:  MOVFF  510,53C
65DE:  MOVFF  50F,53B
65E2:  MOVFF  50E,53A
65E6:  CALL   2A62
65EA:  MOVFF  01,53A
65EE:  MOVFF  01,53B
65F2:  MOVLW  32
65F4:  MOVLB  5
65F6:  MOVWF  x3C
65F8:  MOVLW  28
65FA:  MOVWF  x3D
65FC:  MOVLW  04
65FE:  MOVWF  x3E
6600:  MOVLW  01
6602:  MOVWF  x3F
6604:  MOVLB  0
6606:  CALL   23C4
....................       } 
....................           
....................       // Muestra Valor de esterilizacion actual. 
....................       displayTiempo(Testerilizacion[3],80,0,0,1);displayTiempo(Testerilizacion[2],86,0,0,1); 
660A:  MOVFF  4A7,53B
660E:  MOVLW  50
6610:  MOVLB  5
6612:  MOVWF  x3C
6614:  CLRF   x3D
6616:  CLRF   x3E
6618:  MOVLW  01
661A:  MOVWF  x3F
661C:  MOVLB  0
661E:  CALL   23C4
6622:  MOVFF  4A6,53B
6626:  MOVLW  56
6628:  MOVLB  5
662A:  MOVWF  x3C
662C:  CLRF   x3D
662E:  CLRF   x3E
6630:  MOVLW  01
6632:  MOVWF  x3F
6634:  MOVLB  0
6636:  CALL   23C4
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,0,2,1);  
663A:  MOVLW  05
663C:  MOVWF  FEA
663E:  MOVLW  1A
6640:  MOVWF  FE9
6642:  MOVFF  FF2,53A
6646:  BCF    FF2.7
6648:  MOVLW  00
664A:  CALL   06CA
664E:  TBLRD*-
6650:  TBLRD*+
6652:  MOVF   FF5,W
6654:  MOVWF  FEE
6656:  IORLW  00
6658:  BNZ   6650
665A:  MOVLB  5
665C:  BTFSC  x3A.7
665E:  BSF    FF2.7
6660:  MOVLW  05
6662:  MOVWF  x3B
6664:  MOVLW  1A
6666:  MOVWF  x3A
6668:  MOVLW  5C
666A:  MOVWF  x3C
666C:  CLRF   x3D
666E:  MOVLW  02
6670:  MOVWF  x3E
6672:  MOVLW  01
6674:  MOVWF  x3F
6676:  MOVLB  0
6678:  CALL   17EC
....................       displayTiempo(Testerilizacion[1],98,0,0,1);displayTiempo(Testerilizacion[0],104,0,0,1); 
667C:  MOVFF  4A5,53B
6680:  MOVLW  62
6682:  MOVLB  5
6684:  MOVWF  x3C
6686:  CLRF   x3D
6688:  CLRF   x3E
668A:  MOVLW  01
668C:  MOVWF  x3F
668E:  MOVLB  0
6690:  CALL   23C4
6694:  MOVFF  4A4,53B
6698:  MOVLW  68
669A:  MOVLB  5
669C:  MOVWF  x3C
669E:  CLRF   x3D
66A0:  CLRF   x3E
66A2:  MOVLW  01
66A4:  MOVWF  x3F
66A6:  MOVLB  0
66A8:  CALL   23C4
....................       // Muestra tiempo de secado actual. 
....................       displayTiempo(Tsecado[3],80,8,0,1);displayTiempo(Tsecado[2],86,8,0,1); 
66AC:  MOVFF  4AF,53B
66B0:  MOVLW  50
66B2:  MOVLB  5
66B4:  MOVWF  x3C
66B6:  MOVLW  08
66B8:  MOVWF  x3D
66BA:  CLRF   x3E
66BC:  MOVLW  01
66BE:  MOVWF  x3F
66C0:  MOVLB  0
66C2:  CALL   23C4
66C6:  MOVFF  4AE,53B
66CA:  MOVLW  56
66CC:  MOVLB  5
66CE:  MOVWF  x3C
66D0:  MOVLW  08
66D2:  MOVWF  x3D
66D4:  CLRF   x3E
66D6:  MOVLW  01
66D8:  MOVWF  x3F
66DA:  MOVLB  0
66DC:  CALL   23C4
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,8,2,1);  
66E0:  MOVLW  05
66E2:  MOVWF  FEA
66E4:  MOVLW  1A
66E6:  MOVWF  FE9
66E8:  MOVFF  FF2,53A
66EC:  BCF    FF2.7
66EE:  MOVLW  00
66F0:  CALL   06CA
66F4:  TBLRD*-
66F6:  TBLRD*+
66F8:  MOVF   FF5,W
66FA:  MOVWF  FEE
66FC:  IORLW  00
66FE:  BNZ   66F6
6700:  MOVLB  5
6702:  BTFSC  x3A.7
6704:  BSF    FF2.7
6706:  MOVLW  05
6708:  MOVWF  x3B
670A:  MOVLW  1A
670C:  MOVWF  x3A
670E:  MOVLW  5C
6710:  MOVWF  x3C
6712:  MOVLW  08
6714:  MOVWF  x3D
6716:  MOVLW  02
6718:  MOVWF  x3E
671A:  MOVLW  01
671C:  MOVWF  x3F
671E:  MOVLB  0
6720:  CALL   17EC
....................       displayTiempo(Tsecado[1],98,8,0,1);displayTiempo(Tsecado[0],104,8,0,1); 
6724:  MOVFF  4AD,53B
6728:  MOVLW  62
672A:  MOVLB  5
672C:  MOVWF  x3C
672E:  MOVLW  08
6730:  MOVWF  x3D
6732:  CLRF   x3E
6734:  MOVLW  01
6736:  MOVWF  x3F
6738:  MOVLB  0
673A:  CALL   23C4
673E:  MOVFF  4AC,53B
6742:  MOVLW  68
6744:  MOVLB  5
6746:  MOVWF  x3C
6748:  MOVLW  08
674A:  MOVWF  x3D
674C:  CLRF   x3E
674E:  MOVLW  01
6750:  MOVWF  x3F
6752:  MOVLB  0
6754:  CALL   23C4
....................    } 
....................           
....................    if(ADC_Pt100>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
6758:  MOVLB  5
675A:  CLRF   x40
675C:  MOVFF  48E,53F
6760:  MOVLB  0
6762:  CALL   10EE
6766:  MOVFF  00,53A
676A:  MOVFF  01,53B
676E:  MOVFF  02,53C
6772:  MOVFF  03,53D
6776:  BSF    FD8.1
6778:  MOVFF  03,541
677C:  MOVFF  02,540
6780:  MOVFF  01,53F
6784:  MOVFF  00,53E
6788:  MOVLB  5
678A:  CLRF   x45
678C:  CLRF   x44
678E:  CLRF   x43
6790:  MOVLW  7F
6792:  MOVWF  x42
6794:  MOVLB  0
6796:  CALL   1CB2
679A:  MOVFF  03,53D
679E:  MOVFF  02,53C
67A2:  MOVFF  01,53B
67A6:  MOVFF  00,53A
67AA:  MOVFF  4A3,541
67AE:  MOVFF  4A2,540
67B2:  MOVFF  4A1,53F
67B6:  MOVFF  4A0,53E
67BA:  GOTO   2A9E
67BE:  BC    67C2
67C0:  BNZ   6828
....................    { 
....................       if(est==0) 
67C2:  MOVLB  4
67C4:  BTFSC  x7D.0
67C6:  BRA    682A
....................       { 
....................          tiempo_esterilizacion=1; 
67C8:  MOVLW  01
67CA:  MOVWF  x91
....................          Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1; 
67CC:  MOVLB  5
67CE:  CLRF   x3A
67D0:  MOVLW  5A
67D2:  MOVWF  x3B
67D4:  MOVLW  38
67D6:  MOVWF  x3C
67D8:  MOVLB  0
67DA:  CALL   2654
67DE:  MOVLW  0F
67E0:  MOVLB  5
67E2:  MOVWF  x4C
67E4:  MOVLW  12
67E6:  MOVWF  x4D
67E8:  MOVLW  1E
67EA:  MOVWF  x4E
67EC:  MOVLW  35
67EE:  MOVWF  x4F
67F0:  CLRF   x50
67F2:  CLRF   x51
67F4:  MOVLB  0
67F6:  CALL   172A
67FA:  MOVLW  19
67FC:  MOVLB  5
67FE:  MOVWF  x4C
6800:  MOVLW  12
6802:  MOVWF  x4D
6804:  MOVLW  3C
6806:  MOVWF  x4E
6808:  MOVLW  1A
680A:  MOVWF  x4F
680C:  CLRF   x50
680E:  MOVLW  01
6810:  MOVWF  x51
6812:  MOVLB  0
6814:  CALL   172A
6818:  MOVLB  4
681A:  BSF    x7D.0
....................          glcd_imagen(5); 
681C:  MOVLW  05
681E:  MOVLB  5
6820:  MOVWF  x3A
6822:  MOVLB  0
6824:  CALL   2018
6828:  MOVLB  4
....................       } 
....................    }   
....................     
....................    if(Exhaust==1 && tiempo_esterilizacion==2)// Si realiza desfogue rapido 
682A:  DECFSZ x93,W
682C:  BRA    684C
682E:  MOVF   x91,W
6830:  SUBLW  02
6832:  BNZ   684C
....................    { 
....................       // Debe enviar a Hardware_Controller que abra EV de desfogue 
....................       Control=0; 
6834:  CLRF   x87
....................       if(Presostato<2) 
6836:  MOVF   x74,W
6838:  SUBLW  01
683A:  BNC   6848
....................       { 
....................          tiempo_secado=1; 
683C:  MOVLW  01
683E:  MOVWF  x92
....................          Control=0;EVDesfogue=3; 
6840:  CLRF   x87
6842:  MOVLW  03
6844:  MOVWF  x80
....................       } 
....................       else 
6846:  BRA    684C
....................       { 
....................          EVDesfogue=1; 
6848:  MOVLW  01
684A:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    if(Exhaust==2 && tiempo_esterilizacion==2 )// Si Debe realizar Rampa 
684C:  MOVF   x93,W
684E:  SUBLW  02
6850:  BNZ   6874
6852:  MOVF   x91,W
6854:  SUBLW  02
6856:  BNZ   6874
....................    {      
....................       // Debe enviar a Hardware_Controller que abra Ejecute modo rampa. 
....................       EVDesfogue=2; 
6858:  MOVLW  02
685A:  MOVWF  x80
....................       Control=0; 
685C:  CLRF   x87
....................       if(Presostato<2) 
685E:  MOVF   x74,W
6860:  SUBLW  01
6862:  BNC   6874
....................       { 
....................          tiempo_esterilizacion=3; 
6864:  MOVLW  03
6866:  MOVWF  x91
....................          tiempo_secado=2; 
6868:  MOVLW  02
686A:  MOVWF  x92
....................          fin_ciclo=1; 
686C:  MOVLW  01
686E:  MOVWF  x8F
....................          EVDesfogue=3; 
6870:  MOVLW  03
6872:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3]) && tiempo_esterilizacion==1) 
6874:  MOVF   xA8,W
6876:  SUBWF  xA4,W
6878:  BNZ   6894
687A:  MOVF   xA9,W
687C:  SUBWF  xA5,W
687E:  BNZ   6894
6880:  MOVF   xAA,W
6882:  SUBWF  xA6,W
6884:  BNZ   6894
6886:  MOVF   xAB,W
6888:  SUBWF  xA7,W
688A:  BNZ   6894
688C:  DECFSZ x91,W
688E:  BRA    6894
....................    { 
....................       tiempo_esterilizacion=2; 
6890:  MOVLW  02
6892:  MOVWF  x91
....................    }  
....................     
....................    // Si cumplio el tiempo de secado. 
....................    if((Tsecado[0]>=Tsecadop[0])&&(Tsecado[1]>=Tsecadop[1])&&(Tsecado[2]>=Tsecadop[2])&&(Tsecado[3]>=Tsecadop[3]) && tiempo_secado==1) 
6894:  MOVF   xB0,W
6896:  XORLW  80
6898:  MOVWF  00
689A:  MOVF   xAC,W
689C:  XORLW  80
689E:  SUBWF  00,W
68A0:  BZ    68A4
68A2:  BC    68E4
68A4:  MOVF   xB1,W
68A6:  XORLW  80
68A8:  MOVWF  00
68AA:  MOVF   xAD,W
68AC:  XORLW  80
68AE:  SUBWF  00,W
68B0:  BZ    68B4
68B2:  BC    68E4
68B4:  MOVF   xB2,W
68B6:  XORLW  80
68B8:  MOVWF  00
68BA:  MOVF   xAE,W
68BC:  XORLW  80
68BE:  SUBWF  00,W
68C0:  BZ    68C4
68C2:  BC    68E4
68C4:  MOVF   xB3,W
68C6:  XORLW  80
68C8:  MOVWF  00
68CA:  MOVF   xAF,W
68CC:  XORLW  80
68CE:  SUBWF  00,W
68D0:  BZ    68D4
68D2:  BC    68E4
68D4:  DECFSZ x92,W
68D6:  BRA    68E4
....................    { 
....................       tiempo_esterilizacion=3; 
68D8:  MOVLW  03
68DA:  MOVWF  x91
....................       tiempo_secado=2; 
68DC:  MOVLW  02
68DE:  MOVWF  x92
....................       fin_ciclo=1; 
68E0:  MOVLW  01
68E2:  MOVWF  x8F
....................    } 
....................     
....................    if(fin_ciclo==1) 
68E4:  DECFSZ x8F,W
68E6:  BRA    698C
....................    { 
....................       // Debe enviar a Hardware_Controller que apague Resistencia y que cierre EV de desfogue 
....................       Control=0;EVDesfogue=3; 
68E8:  CLRF   x87
68EA:  MOVLW  03
68EC:  MOVWF  x80
....................       if(disp_Fin==0) 
68EE:  BTFSC  x7E.3
68F0:  BRA    6962
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
68F2:  MOVLB  5
68F4:  CLRF   x4C
68F6:  MOVLW  37
68F8:  MOVWF  x4D
68FA:  MOVLW  7F
68FC:  MOVWF  x4E
68FE:  MOVLW  3F
6900:  MOVWF  x4F
6902:  MOVLW  01
6904:  MOVWF  x50
6906:  CLRF   x51
6908:  MOVLB  0
690A:  CALL   172A
....................          strcpy(Menus.Letra,"Ciclo Finalizado");displayMenu(Menus.Letra,0,55,2,1); 
690E:  MOVLW  05
6910:  MOVWF  FEA
6912:  MOVLW  1A
6914:  MOVWF  FE9
6916:  MOVFF  FF2,53A
691A:  BCF    FF2.7
691C:  MOVLW  00
691E:  CALL   0E20
6922:  TBLRD*-
6924:  TBLRD*+
6926:  MOVF   FF5,W
6928:  MOVWF  FEE
692A:  IORLW  00
692C:  BNZ   6924
692E:  MOVLB  5
6930:  BTFSC  x3A.7
6932:  BSF    FF2.7
6934:  MOVLW  05
6936:  MOVWF  x3B
6938:  MOVLW  1A
693A:  MOVWF  x3A
693C:  CLRF   x3C
693E:  MOVLW  37
6940:  MOVWF  x3D
6942:  MOVLW  02
6944:  MOVWF  x3E
6946:  MOVLW  01
6948:  MOVWF  x3F
694A:  MOVLB  0
694C:  CALL   17EC
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=1; 
6950:  MOVLB  4
6952:  BCF    x7D.4
6954:  BCF    x7D.5
6956:  BSF    x7D.6
6958:  BCF    x7D.7
695A:  BSF    x7E.0
695C:  BCF    x7E.1
695E:  BCF    x7E.2
6960:  BSF    x7E.3
....................       }    
....................        
....................       if(RIGHT) 
6962:  BSF    F96.1
6964:  BTFSS  F84.1
6966:  BRA    698C
....................       { 
....................          Control=3; 
6968:  MOVLW  03
696A:  MOVWF  x87
....................          EnviarCodigo(); 
696C:  MOVLB  0
696E:  CALL   1AD2
....................          delay_ms(1000); 
6972:  MOVLW  04
6974:  MOVLB  5
6976:  MOVWF  x3A
6978:  MOVLW  FA
697A:  MOVWF  x3F
697C:  MOVLB  0
697E:  CALL   10C4
6982:  MOVLB  5
6984:  DECFSZ x3A,F
6986:  BRA    6978
....................          reset_cpu(); 
6988:  RESET
698A:  MOVLB  4
....................       } 
....................    } 
....................    EVAgua=10; 
698C:  MOVLW  0A
698E:  MOVWF  x81
....................    //EnviarCodigo(); 
....................   } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  while(Menu==100) 
....................  { 
6990:  MOVF   x89,W
6992:  SUBLW  64
6994:  BTFSS  FD8.2
6996:  BRA    6A94
....................     
....................    displayTiempo(datoRx[0],0,10,2,1); 
6998:  MOVFF  4D4,53B
699C:  MOVLB  5
699E:  CLRF   x3C
69A0:  MOVLW  0A
69A2:  MOVWF  x3D
69A4:  MOVLW  02
69A6:  MOVWF  x3E
69A8:  MOVLW  01
69AA:  MOVWF  x3F
69AC:  MOVLB  0
69AE:  CALL   23C4
....................    displayTiempo(datoRx[1],0,20,2,1); 
69B2:  MOVFF  4D5,53B
69B6:  MOVLB  5
69B8:  CLRF   x3C
69BA:  MOVLW  14
69BC:  MOVWF  x3D
69BE:  MOVLW  02
69C0:  MOVWF  x3E
69C2:  MOVLW  01
69C4:  MOVWF  x3F
69C6:  MOVLB  0
69C8:  CALL   23C4
....................    displayTiempo(datoRx[2],0,30,2,1); 
69CC:  MOVFF  4D6,53B
69D0:  MOVLB  5
69D2:  CLRF   x3C
69D4:  MOVLW  1E
69D6:  MOVWF  x3D
69D8:  MOVLW  02
69DA:  MOVWF  x3E
69DC:  MOVLW  01
69DE:  MOVWF  x3F
69E0:  MOVLB  0
69E2:  CALL   23C4
....................    displayTiempo(datoRx[3],0,40,2,1); 
69E6:  MOVFF  4D7,53B
69EA:  MOVLB  5
69EC:  CLRF   x3C
69EE:  MOVLW  28
69F0:  MOVWF  x3D
69F2:  MOVLW  02
69F4:  MOVWF  x3E
69F6:  MOVLW  01
69F8:  MOVWF  x3F
69FA:  MOVLB  0
69FC:  CALL   23C4
....................    displayTiempo(Opcion,0,50,2,1); 
6A00:  MOVFF  490,53B
6A04:  MOVLB  5
6A06:  CLRF   x3C
6A08:  MOVLW  32
6A0A:  MOVWF  x3D
6A0C:  MOVLW  02
6A0E:  MOVWF  x3E
6A10:  MOVLW  01
6A12:  MOVWF  x3F
6A14:  MOVLB  0
6A16:  CALL   23C4
....................     
....................    Opcion++; 
6A1A:  MOVLB  4
6A1C:  INCF   x90,F
....................    Determina(); 
6A1E:  MOVLB  0
6A20:  CALL   1F2A
....................    displayTiempo(Puerta,50,10,2,1); 
6A24:  MOVFF  470,53B
6A28:  MOVLW  32
6A2A:  MOVLB  5
6A2C:  MOVWF  x3C
6A2E:  MOVLW  0A
6A30:  MOVWF  x3D
6A32:  MOVLW  02
6A34:  MOVWF  x3E
6A36:  MOVLW  01
6A38:  MOVWF  x3F
6A3A:  MOVLB  0
6A3C:  CALL   23C4
....................    displayTiempo(Parada,50,20,2,1); 
6A40:  MOVFF  471,53B
6A44:  MOVLW  32
6A46:  MOVLB  5
6A48:  MOVWF  x3C
6A4A:  MOVLW  14
6A4C:  MOVWF  x3D
6A4E:  MOVLW  02
6A50:  MOVWF  x3E
6A52:  MOVLW  01
6A54:  MOVWF  x3F
6A56:  MOVLB  0
6A58:  CALL   23C4
....................    displayTiempo(ADC_Pt100,50,30,2,1);      
6A5C:  MOVFF  4A3,53D
6A60:  MOVFF  4A2,53C
6A64:  MOVFF  4A1,53B
6A68:  MOVFF  4A0,53A
6A6C:  CALL   2A62
6A70:  MOVFF  01,53A
6A74:  MOVFF  01,53B
6A78:  MOVLW  32
6A7A:  MOVLB  5
6A7C:  MOVWF  x3C
6A7E:  MOVLW  1E
6A80:  MOVWF  x3D
6A82:  MOVLW  02
6A84:  MOVWF  x3E
6A86:  MOVLW  01
6A88:  MOVWF  x3F
6A8A:  MOVLB  0
6A8C:  CALL   23C4
....................     
....................  } 
6A90:  MOVLB  4
6A92:  BRA    6990
....................  Determina(); 
6A94:  MOVLB  0
6A96:  CALL   1F2A
....................        
....................       while(Parada==0) 
....................       { 
6A9A:  MOVLB  4
6A9C:  MOVF   x71,F
6A9E:  BNZ   6B64
....................          delay_ms(100); 
6AA0:  MOVLW  64
6AA2:  MOVLB  5
6AA4:  MOVWF  x3F
6AA6:  MOVLB  0
6AA8:  CALL   10C4
....................          if(disp_Stop==0) 
6AAC:  MOVLB  4
6AAE:  BTFSC  x7E.1
6AB0:  BRA    6B50
....................          { 
....................             glcd_fillScreen(OFF);  
6AB2:  MOVLB  5
6AB4:  CLRF   x3B
6AB6:  MOVLB  0
6AB8:  CALL   11BC
....................             strcpy(Menus.Letra,"  !Parada!");displayMenu(Menus.Letra,0,10,0,2); 
6ABC:  MOVLW  05
6ABE:  MOVWF  FEA
6AC0:  MOVLW  1A
6AC2:  MOVWF  FE9
6AC4:  MOVFF  FF2,53A
6AC8:  BCF    FF2.7
6ACA:  MOVLW  00
6ACC:  CALL   0E4C
6AD0:  TBLRD*-
6AD2:  TBLRD*+
6AD4:  MOVF   FF5,W
6AD6:  MOVWF  FEE
6AD8:  IORLW  00
6ADA:  BNZ   6AD2
6ADC:  MOVLB  5
6ADE:  BTFSC  x3A.7
6AE0:  BSF    FF2.7
6AE2:  MOVLW  05
6AE4:  MOVWF  x3B
6AE6:  MOVLW  1A
6AE8:  MOVWF  x3A
6AEA:  CLRF   x3C
6AEC:  MOVLW  0A
6AEE:  MOVWF  x3D
6AF0:  CLRF   x3E
6AF2:  MOVLW  02
6AF4:  MOVWF  x3F
6AF6:  MOVLB  0
6AF8:  CALL   17EC
....................             strcpy(Menus.Letra," !Activada!");displayMenu(Menus.Letra,0,30,0,2);emergency=1; 
6AFC:  MOVLW  05
6AFE:  MOVWF  FEA
6B00:  MOVLW  1A
6B02:  MOVWF  FE9
6B04:  MOVFF  FF2,53A
6B08:  BCF    FF2.7
6B0A:  MOVLW  00
6B0C:  CALL   0E72
6B10:  TBLRD*-
6B12:  TBLRD*+
6B14:  MOVF   FF5,W
6B16:  MOVWF  FEE
6B18:  IORLW  00
6B1A:  BNZ   6B12
6B1C:  MOVLB  5
6B1E:  BTFSC  x3A.7
6B20:  BSF    FF2.7
6B22:  MOVLW  05
6B24:  MOVWF  x3B
6B26:  MOVLW  1A
6B28:  MOVWF  x3A
6B2A:  CLRF   x3C
6B2C:  MOVLW  1E
6B2E:  MOVWF  x3D
6B30:  CLRF   x3E
6B32:  MOVLW  02
6B34:  MOVWF  x3F
6B36:  MOVLB  0
6B38:  CALL   17EC
6B3C:  MOVLB  4
6B3E:  BSF    x7C.3
....................             disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=1;disp_Door=0;disp_Fin=0; 
6B40:  BCF    x7D.4
6B42:  BCF    x7D.5
6B44:  BCF    x7D.6
6B46:  BCF    x7D.7
6B48:  BCF    x7E.0
6B4A:  BSF    x7E.1
6B4C:  BCF    x7E.2
6B4E:  BCF    x7E.3
....................          } 
....................          if(CadenaRecibida==1) 
6B50:  BTFSS  x7D.3
6B52:  BRA    6B62
....................          { 
....................             Determina(); 
6B54:  MOVLB  0
6B56:  CALL   1F2A
....................             EnviarCodigo(); 
6B5A:  CALL   1AD2
....................             CadenaRecibida=0; 
6B5E:  MOVLB  4
6B60:  BCF    x7D.3
....................          } 
....................       }    
6B62:  BRA    6A9C
....................       if(Parada==1) 
6B64:  DECFSZ x71,W
6B66:  BRA    6B84
....................       { 
....................          if(emergency==1) 
6B68:  BTFSS  x7C.3
6B6A:  BRA    6B84
....................          {glcd_fillScreen(OFF);emergency=0;visual=1;disp_Stop=0;Menu=1;reset_cpu();} 
6B6C:  MOVLB  5
6B6E:  CLRF   x3B
6B70:  MOVLB  0
6B72:  CALL   11BC
6B76:  MOVLB  4
6B78:  BCF    x7C.3
6B7A:  BSF    x7C.4
6B7C:  BCF    x7E.1
6B7E:  MOVLW  01
6B80:  MOVWF  x89
6B82:  RESET
....................       } 
....................    } 
6B84:  GOTO   308A
.................... } 
6B88:  SLEEP 

Configuration Fuses:
   Word  1: C03F   XT IESO FCMEN PLL12 CPUDIV4 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
