CCS PCH C Compiler, Version 4.104, 5967               03-feb-16 08:10

               Filename: D:\JP\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Con Precamara\Autoclave 160L\Autoclave SENA\Firmware V2\GLCD_Controller\GLCD_Controller.lst

               ROM used: 27568 bytes (84%)
                         Largest free fragment is 5196
               RAM used: 1342 (66%) at main() level
                         1398 (68%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  GOTO   2B40
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   1022
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   0F36
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
10EA:  MOVLW  05
10EC:  MOVWF  FEA
10EE:  MOVLW  3F
10F0:  MOVWF  FE9
10F2:  MOVF   FEF,W
10F4:  BZ    1112
10F6:  MOVLW  0F
10F8:  MOVWF  01
10FA:  CLRF   00
10FC:  DECFSZ 00,F
10FE:  BRA    10FC
1100:  DECFSZ 01,F
1102:  BRA    10FA
1104:  MOVLW  8F
1106:  MOVWF  00
1108:  DECFSZ 00,F
110A:  BRA    1108
110C:  NOP   
110E:  DECFSZ FEF,F
1110:  BRA    10F6
1112:  RETLW  00
.................... #use RS232(BAUD=9600, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7) 
*
1AEE:  BTFSS  F9E.4
1AF0:  BRA    1AEE
1AF2:  MOVWF  FAD
1AF4:  GOTO   1B62 (RETURN)
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
*
0EBE:  MOVLB  5
0EC0:  MOVFF  571,FE9
0EC4:  MOVFF  572,FEA
0EC8:  MOVFF  FEF,575
0ECC:  MOVFF  574,03
0ED0:  MOVFF  573,FE9
0ED4:  MOVFF  574,FEA
0ED8:  MOVF   FEF,W
0EDA:  SUBWF  x75,W
0EDC:  BNZ   0F08
....................       if (*s1 == '\0') 
0EDE:  MOVFF  572,03
0EE2:  MOVFF  571,FE9
0EE6:  MOVFF  03,FEA
0EEA:  MOVF   FEF,F
0EEC:  BNZ   0EF4
....................          return(0); 
0EEE:  MOVLW  00
0EF0:  MOVWF  01
0EF2:  BRA    0F32
0EF4:  MOVFF  572,03
0EF8:  MOVF   x71,W
0EFA:  INCF   x71,F
0EFC:  BTFSC  FD8.2
0EFE:  INCF   x72,F
0F00:  INCF   x73,F
0F02:  BTFSC  FD8.2
0F04:  INCF   x74,F
0F06:  BRA    0EC0
....................    return((*s1 < *s2) ? -1: 1); 
0F08:  MOVFF  572,03
0F0C:  MOVFF  571,FE9
0F10:  MOVFF  572,FEA
0F14:  MOVFF  FEF,575
0F18:  MOVFF  574,03
0F1C:  MOVFF  573,FE9
0F20:  MOVFF  574,FEA
0F24:  MOVF   FEF,W
0F26:  SUBWF  x75,W
0F28:  BC    0F2E
0F2A:  MOVLW  FF
0F2C:  BRA    0F30
0F2E:  MOVLW  01
0F30:  MOVWF  01
.................... } 
0F32:  MOVLB  0
0F34:  RETLW  00
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D4   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D3   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_D2   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
12F4:  BCF    F95.2
12F6:  BSF    F8C.2
....................    output_low(GLCD_E); 
12F8:  BCF    F95.7
12FA:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
12FC:  BCF    F95.4
12FE:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
1300:  BCF    F95.3
1302:  BCF    F8C.3
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
1304:  BCF    F95.5
1306:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
1308:  MOVLB  5
130A:  CLRF   x50
130C:  MOVLW  C0
130E:  MOVWF  x51
1310:  MOVLB  0
1312:  RCALL  11A0
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
1314:  MOVLW  01
1316:  MOVLB  5
1318:  MOVWF  x50
131A:  MOVLW  C0
131C:  MOVWF  x51
131E:  MOVLB  0
1320:  RCALL  11A0
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
1322:  MOVLB  5
1324:  CLRF   x50
1326:  MOVLW  40
1328:  MOVWF  x51
132A:  MOVLB  0
132C:  RCALL  11A0
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
132E:  MOVLW  01
1330:  MOVLB  5
1332:  MOVWF  x50
1334:  MOVLW  40
1336:  MOVWF  x51
1338:  MOVLB  0
133A:  RCALL  11A0
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
133C:  MOVLB  5
133E:  CLRF   x50
1340:  MOVLW  B8
1342:  MOVWF  x51
1344:  MOVLB  0
1346:  RCALL  11A0
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
1348:  MOVLW  01
134A:  MOVLB  5
134C:  MOVWF  x50
134E:  MOVLW  B8
1350:  MOVWF  x51
1352:  MOVLB  0
1354:  RCALL  11A0
....................  
....................    if(mode == ON) 
1356:  MOVLB  5
1358:  DECFSZ x3A,W
135A:  BRA    1378
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
135C:  CLRF   x50
135E:  MOVLW  3F
1360:  MOVWF  x51
1362:  MOVLB  0
1364:  RCALL  11A0
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
1366:  MOVLW  01
1368:  MOVLB  5
136A:  MOVWF  x50
136C:  MOVLW  3F
136E:  MOVWF  x51
1370:  MOVLB  0
1372:  RCALL  11A0
....................    } 
....................    else 
1374:  BRA    1390
1376:  MOVLB  5
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
1378:  CLRF   x50
137A:  MOVLW  3E
137C:  MOVWF  x51
137E:  MOVLB  0
1380:  RCALL  11A0
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
1382:  MOVLW  01
1384:  MOVLB  5
1386:  MOVWF  x50
1388:  MOVLW  3E
138A:  MOVWF  x51
138C:  MOVLB  0
138E:  RCALL  11A0
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
1390:  MOVLB  5
1392:  CLRF   x3B
1394:  MOVLB  0
1396:  RCALL  11E2
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
1398:  RCALL  123C
....................    #endif 
.................... } 
139A:  GOTO   2F24 (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
123C:  MOVLB  5
123E:  CLRF   x4C
1240:  MOVLW  1C
1242:  MOVWF  x4B
....................    p2 = displayData.right; 
1244:  MOVLW  02
1246:  MOVWF  x4E
1248:  MOVLW  1C
124A:  MOVWF  x4D
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
124C:  CLRF   x49
124E:  MOVF   x49,W
1250:  SUBLW  07
1252:  BNC   12F0
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
1254:  BCF    F95.5
1256:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
1258:  CLRF   x50
125A:  MOVLW  40
125C:  MOVWF  x51
125E:  MOVLB  0
1260:  RCALL  11A0
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
1262:  MOVLW  01
1264:  MOVLB  5
1266:  MOVWF  x50
1268:  MOVLW  40
126A:  MOVWF  x51
126C:  MOVLB  0
126E:  RCALL  11A0
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
1270:  MOVLB  5
1272:  MOVF   x49,W
1274:  IORLW  B8
1276:  MOVWF  x4F
1278:  CLRF   x50
127A:  MOVWF  x51
127C:  MOVLB  0
127E:  RCALL  11A0
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
1280:  MOVLB  5
1282:  MOVF   x49,W
1284:  IORLW  B8
1286:  MOVWF  x4F
1288:  MOVLW  01
128A:  MOVWF  x50
128C:  MOVFF  54F,551
1290:  MOVLB  0
1292:  RCALL  11A0
....................       output_high(GLCD_DI);                     // Set for data 
1294:  BCF    F95.5
1296:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
1298:  MOVLB  5
129A:  CLRF   x4A
129C:  MOVF   x4A,W
129E:  SUBLW  3F
12A0:  BNC   12EC
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
12A2:  MOVFF  54C,03
12A6:  MOVF   x4B,W
12A8:  INCF   x4B,F
12AA:  BTFSC  FD8.2
12AC:  INCF   x4C,F
12AE:  MOVWF  FE9
12B0:  MOVFF  03,FEA
12B4:  MOVFF  FEF,54F
12B8:  CLRF   x50
12BA:  MOVFF  54F,551
12BE:  MOVLB  0
12C0:  RCALL  11A0
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
12C2:  MOVLB  5
12C4:  MOVFF  54E,03
12C8:  MOVF   x4D,W
12CA:  INCF   x4D,F
12CC:  BTFSC  FD8.2
12CE:  INCF   x4E,F
12D0:  MOVWF  FE9
12D2:  MOVFF  03,FEA
12D6:  MOVFF  FEF,54F
12DA:  MOVLW  01
12DC:  MOVWF  x50
12DE:  MOVFF  54F,551
12E2:  MOVLB  0
12E4:  RCALL  11A0
....................       } 
12E6:  MOVLB  5
12E8:  INCF   x4A,F
12EA:  BRA    129C
....................    } 
12EC:  INCF   x49,F
12EE:  BRA    124E
.................... } 
12F0:  MOVLB  0
12F2:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
*
139E:  MOVLB  5
13A0:  CLRF   x6D
13A2:  RRCF   x68,W
13A4:  MOVWF  x6C
13A6:  RRCF   x6C,F
13A8:  RRCF   x6C,F
13AA:  MOVLW  1F
13AC:  ANDWF  x6C,F
....................    temp *= 64; 
13AE:  RLCF   x6C,F
13B0:  RLCF   x6D,F
13B2:  RLCF   x6C,F
13B4:  RLCF   x6D,F
13B6:  RLCF   x6C,F
13B8:  RLCF   x6D,F
13BA:  RLCF   x6C,F
13BC:  RLCF   x6D,F
13BE:  RLCF   x6C,F
13C0:  RLCF   x6D,F
13C2:  RLCF   x6C,F
13C4:  RLCF   x6D,F
13C6:  MOVLW  C0
13C8:  ANDWF  x6C,F
....................    temp += x; 
13CA:  MOVF   x67,W
13CC:  ADDWF  x6C,F
13CE:  MOVLW  00
13D0:  ADDWFC x6D,F
....................  
....................    if(x > 63) 
13D2:  MOVF   x67,W
13D4:  SUBLW  3F
13D6:  BC    13F2
....................    { 
....................       p = displayData.right + temp - 64; 
13D8:  MOVLW  1C
13DA:  ADDWF  x6C,W
13DC:  MOVWF  x6E
13DE:  MOVLW  02
13E0:  ADDWFC x6D,W
13E2:  MOVWF  x6F
13E4:  MOVLW  40
13E6:  SUBWF  x6E,W
13E8:  MOVWF  x6A
13EA:  MOVLW  00
13EC:  SUBWFB x6F,W
13EE:  MOVWF  x6B
....................    } 
....................    else 
13F0:  BRA    13FE
....................    { 
....................       p = displayData.left + temp; 
13F2:  MOVLW  1C
13F4:  ADDWF  x6C,W
13F6:  MOVWF  x6A
13F8:  MOVLW  00
13FA:  ADDWFC x6D,W
13FC:  MOVWF  x6B
....................    } 
....................  
....................    if(color) 
13FE:  MOVF   x69,F
1400:  BZ    142C
....................    { 
....................       bit_set(*p, y%8); 
1402:  MOVFF  56B,03
1406:  MOVFF  56A,FE9
140A:  MOVFF  56B,FEA
140E:  MOVF   x68,W
1410:  ANDLW  07
1412:  MOVWF  x6E
1414:  MOVLW  01
1416:  MOVWF  00
1418:  MOVF   x6E,W
141A:  MOVWF  01
141C:  BZ    1426
141E:  BCF    FD8.0
1420:  RLCF   00,F
1422:  DECFSZ 01,F
1424:  BRA    141E
1426:  MOVF   00,W
1428:  IORWF  FEF,F
....................    } 
....................    else 
142A:  BRA    1456
....................    { 
....................       bit_clear(*p, y%8); 
142C:  MOVFF  56B,03
1430:  MOVFF  56A,FE9
1434:  MOVFF  56B,FEA
1438:  MOVF   x68,W
143A:  ANDLW  07
143C:  MOVWF  x6E
143E:  MOVLW  01
1440:  MOVWF  00
1442:  MOVF   x6E,W
1444:  MOVWF  01
1446:  BZ    1450
1448:  BCF    FD8.0
144A:  RLCF   00,F
144C:  DECFSZ 01,F
144E:  BRA    1448
1450:  MOVF   00,W
1452:  XORLW  FF
1454:  ANDWF  FEF,F
....................    } 
.................... } 
1456:  MOVLB  0
1458:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
11E2:  MOVLB  5
11E4:  CLRF   x3E
11E6:  MOVLW  1C
11E8:  MOVWF  x3D
....................    p2 = displayData.right; 
11EA:  MOVLW  02
11EC:  MOVWF  x40
11EE:  MOVLW  1C
11F0:  MOVWF  x3F
....................    data = 0xFF * color; 
11F2:  MOVF   x3B,W
11F4:  MULLW  FF
11F6:  MOVFF  FF3,53C
....................  
....................    for(i=0; i<512; ++i) 
11FA:  CLRF   x42
11FC:  CLRF   x41
11FE:  MOVF   x42,W
1200:  SUBLW  01
1202:  BNC   1238
....................    { 
....................       *p1++ = data; 
1204:  MOVFF  53E,03
1208:  MOVF   x3D,W
120A:  INCF   x3D,F
120C:  BTFSC  FD8.2
120E:  INCF   x3E,F
1210:  MOVWF  FE9
1212:  MOVFF  03,FEA
1216:  MOVFF  53C,FEF
....................       *p2++ = data; 
121A:  MOVFF  540,03
121E:  MOVF   x3F,W
1220:  INCF   x3F,F
1222:  BTFSC  FD8.2
1224:  INCF   x40,F
1226:  MOVWF  FE9
1228:  MOVFF  03,FEA
122C:  MOVFF  53C,FEF
....................    } 
1230:  INCF   x41,F
1232:  BTFSC  FD8.2
1234:  INCF   x42,F
1236:  BRA    11FE
.................... } 
1238:  MOVLB  0
123A:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
11A0:  MOVLB  5
11A2:  MOVF   x50,F
11A4:  BZ    11AC
....................       output_high(GLCD_CS2); 
11A6:  BCF    F95.3
11A8:  BSF    F8C.3
....................    else 
11AA:  BRA    11B0
....................       output_high(GLCD_CS1); 
11AC:  BCF    F95.4
11AE:  BSF    F8C.4
....................  
....................    output_low(GLCD_RW);       // Set for writing 
11B0:  BCF    F95.6
11B2:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
11B4:  CLRF   F93
11B6:  MOVFF  551,F8A
....................    delay_cycles(50); 
11BA:  MOVLW  10
11BC:  MOVWF  00
11BE:  DECFSZ 00,F
11C0:  BRA    11BE
11C2:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
11C4:  BCF    F95.7
11C6:  BSF    F8C.7
....................    delay_cycles(255); 
11C8:  MOVLW  54
11CA:  MOVWF  00
11CC:  DECFSZ 00,F
11CE:  BRA    11CC
11D0:  BRA    11D2
....................    output_low(GLCD_E); 
11D2:  BCF    F95.7
11D4:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
11D6:  BCF    F95.4
11D8:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
11DA:  BCF    F95.3
11DC:  BCF    F8C.3
.................... } 
11DE:  MOVLB  0
11E0:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(50); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(200); 
....................    data = input_b();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
1612:  MOVLW  01
1614:  MOVLB  5
1616:  MOVWF  x60
1618:  MOVWF  x61
161A:  CLRF   x66
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
161C:  MOVF   x57,W
161E:  SUBWF  x59,W
1620:  MOVWF  x67
1622:  MOVF   x67,W
1624:  BTFSS  x67.7
1626:  BRA    162E
1628:  MOVLW  00
162A:  BSF    FD8.0
162C:  SUBFWB x67,W
162E:  CLRF   03
1630:  MOVWF  x5E
1632:  MOVFF  03,55F
....................    dy = abs((signed int8)(y2 - y1)); 
1636:  MOVF   x58,W
1638:  SUBWF  x5A,W
163A:  MOVWF  x67
163C:  MOVF   x67,W
163E:  BTFSS  x67.7
1640:  BRA    1648
1642:  MOVLW  00
1644:  BSF    FD8.0
1646:  SUBFWB x67,W
1648:  CLRF   03
164A:  MOVWF  x5C
164C:  MOVFF  03,55D
....................    #endif 
....................  
....................    if(x1 > x2) 
1650:  MOVF   x57,W
1652:  SUBWF  x59,W
1654:  BC    165A
....................       addx = -1; 
1656:  MOVLW  FF
1658:  MOVWF  x60
....................    if(y1 > y2) 
165A:  MOVF   x58,W
165C:  SUBWF  x5A,W
165E:  BC    1664
....................       addy = -1; 
1660:  MOVLW  FF
1662:  MOVWF  x61
....................  
....................    if(dx >= dy) 
1664:  MOVF   x5D,W
1666:  SUBWF  x5F,W
1668:  BNC   16E0
166A:  BNZ   1672
166C:  MOVF   x5C,W
166E:  SUBWF  x5E,W
1670:  BNC   16E0
....................    { 
....................       dy *= 2; 
1672:  BCF    FD8.0
1674:  RLCF   x5C,F
1676:  RLCF   x5D,F
....................       P = dy - dx; 
1678:  MOVF   x5E,W
167A:  SUBWF  x5C,W
167C:  MOVWF  00
167E:  MOVF   x5F,W
1680:  SUBWFB x5D,W
1682:  MOVFF  00,562
1686:  MOVWF  x63
....................       diff = P - dx; 
1688:  MOVF   x5E,W
168A:  SUBWF  x62,W
168C:  MOVWF  x64
168E:  MOVF   x5F,W
1690:  SUBWFB x63,W
1692:  MOVWF  x65
....................  
....................       for(; i<=dx; ++i) 
1694:  MOVF   x5F,F
1696:  BNZ   169E
1698:  MOVF   x66,W
169A:  SUBWF  x5E,W
169C:  BNC   16DE
....................       { 
....................          glcd_pixel(x1, y1, color); 
169E:  MOVFF  557,567
16A2:  MOVFF  558,568
16A6:  MOVFF  55B,569
16AA:  MOVLB  0
16AC:  RCALL  139E
....................  
....................          if(P < 0) 
16AE:  MOVLB  5
16B0:  BTFSC  x63.7
16B2:  BRA    16B6
16B4:  BRA    16C6
....................          { 
....................             P  += dy; 
16B6:  MOVF   x5C,W
16B8:  ADDWF  x62,F
16BA:  MOVF   x5D,W
16BC:  ADDWFC x63,F
....................             x1 += addx; 
16BE:  MOVF   x60,W
16C0:  ADDWF  x57,W
16C2:  MOVWF  x57
....................          } 
....................          else 
16C4:  BRA    16DA
....................          { 
....................             P  += diff; 
16C6:  MOVF   x64,W
16C8:  ADDWF  x62,F
16CA:  MOVF   x65,W
16CC:  ADDWFC x63,F
....................             x1 += addx; 
16CE:  MOVF   x60,W
16D0:  ADDWF  x57,W
16D2:  MOVWF  x57
....................             y1 += addy; 
16D4:  MOVF   x61,W
16D6:  ADDWF  x58,W
16D8:  MOVWF  x58
....................          } 
....................       } 
16DA:  INCF   x66,F
16DC:  BRA    1694
....................    } 
....................    else 
16DE:  BRA    174C
....................    { 
....................       dx *= 2; 
16E0:  BCF    FD8.0
16E2:  RLCF   x5E,F
16E4:  RLCF   x5F,F
....................       P = dx - dy; 
16E6:  MOVF   x5C,W
16E8:  SUBWF  x5E,W
16EA:  MOVWF  00
16EC:  MOVF   x5D,W
16EE:  SUBWFB x5F,W
16F0:  MOVFF  00,562
16F4:  MOVWF  x63
....................       diff = P - dy; 
16F6:  MOVF   x5C,W
16F8:  SUBWF  x62,W
16FA:  MOVWF  x64
16FC:  MOVF   x5D,W
16FE:  SUBWFB x63,W
1700:  MOVWF  x65
....................  
....................       for(; i<=dy; ++i) 
1702:  MOVF   x5D,F
1704:  BNZ   170C
1706:  MOVF   x66,W
1708:  SUBWF  x5C,W
170A:  BNC   174C
....................       { 
....................          glcd_pixel(x1, y1, color); 
170C:  MOVFF  557,567
1710:  MOVFF  558,568
1714:  MOVFF  55B,569
1718:  MOVLB  0
171A:  RCALL  139E
....................  
....................          if(P < 0) 
171C:  MOVLB  5
171E:  BTFSC  x63.7
1720:  BRA    1724
1722:  BRA    1734
....................          { 
....................             P  += dx; 
1724:  MOVF   x5E,W
1726:  ADDWF  x62,F
1728:  MOVF   x5F,W
172A:  ADDWFC x63,F
....................             y1 += addy; 
172C:  MOVF   x61,W
172E:  ADDWF  x58,W
1730:  MOVWF  x58
....................          } 
....................          else 
1732:  BRA    1748
....................          { 
....................             P  += diff; 
1734:  MOVF   x64,W
1736:  ADDWF  x62,F
1738:  MOVF   x65,W
173A:  ADDWFC x63,F
....................             x1 += addx; 
173C:  MOVF   x60,W
173E:  ADDWF  x57,W
1740:  MOVWF  x57
....................             y1 += addy; 
1742:  MOVF   x61,W
1744:  ADDWF  x58,W
1746:  MOVWF  x58
....................          } 
....................       } 
1748:  INCF   x66,F
174A:  BRA    1702
....................    } 
.................... } 
174C:  MOVLB  0
174E:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
1750:  MOVLB  5
1752:  MOVF   x50,F
1754:  BZ    17B2
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
1756:  MOVF   x4E,W
1758:  SUBWF  x4C,W
175A:  BC    1766
....................       { 
....................          xmin = x1; 
175C:  MOVFF  54C,553
....................          xmax = x2; 
1760:  MOVFF  54E,554
....................       } 
....................       else 
1764:  BRA    176E
....................       { 
....................          xmin = x2; 
1766:  MOVFF  54E,553
....................          xmax = x1; 
176A:  MOVFF  54C,554
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
176E:  MOVF   x4F,W
1770:  SUBWF  x4D,W
1772:  BC    177E
....................       { 
....................          ymin = y1; 
1774:  MOVFF  54D,555
....................          ymax = y2; 
1778:  MOVFF  54F,556
....................       } 
....................       else 
177C:  BRA    1786
....................       { 
....................          ymin = y2; 
177E:  MOVFF  54F,555
....................          ymax = y1; 
1782:  MOVFF  54D,556
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
1786:  MOVF   x53,W
1788:  SUBWF  x54,W
178A:  BNC   17B0
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
178C:  MOVFF  555,552
1790:  MOVF   x52,W
1792:  SUBWF  x56,W
1794:  BNC   17AC
....................          { 
....................             glcd_pixel(xmin, i, color); 
1796:  MOVFF  553,567
179A:  MOVFF  552,568
179E:  MOVFF  551,569
17A2:  MOVLB  0
17A4:  RCALL  139E
....................          } 
17A6:  MOVLB  5
17A8:  INCF   x52,F
17AA:  BRA    1790
....................       } 
17AC:  INCF   x53,F
17AE:  BRA    1786
....................    } 
....................    else 
17B0:  BRA    180E
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
17B2:  MOVFF  54C,557
17B6:  MOVFF  54D,558
17BA:  MOVFF  54E,559
17BE:  MOVFF  54D,55A
17C2:  MOVFF  551,55B
17C6:  MOVLB  0
17C8:  RCALL  1612
....................       glcd_line(x1, y2, x2, y2, color); 
17CA:  MOVFF  54C,557
17CE:  MOVFF  54F,558
17D2:  MOVFF  54E,559
17D6:  MOVFF  54F,55A
17DA:  MOVFF  551,55B
17DE:  RCALL  1612
....................       glcd_line(x1, y1, x1, y2, color); 
17E0:  MOVFF  54C,557
17E4:  MOVFF  54D,558
17E8:  MOVFF  54C,559
17EC:  MOVFF  54F,55A
17F0:  MOVFF  551,55B
17F4:  RCALL  1612
....................       glcd_line(x2, y1, x2, y2, color); 
17F6:  MOVFF  54E,557
17FA:  MOVFF  54D,558
17FE:  MOVFF  54E,559
1802:  MOVFF  54F,55A
1806:  MOVFF  551,55B
180A:  RCALL  1612
180C:  MOVLB  5
....................    } 
.................... } 
180E:  MOVLB  0
1810:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
213A:  MOVLB  5
213C:  CLRF   x3F
....................    b = radius; 
213E:  MOVFF  53C,540
....................    P = 1 - radius; 
2142:  MOVLW  01
2144:  BSF    FD8.0
2146:  SUBFWB x3C,W
2148:  MOVWF  x41
....................  
....................    do 
....................    { 
....................       if(fill) 
214A:  MOVF   x3D,F
214C:  BZ    2218
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
214E:  MOVF   x3F,W
2150:  SUBWF  x3A,W
2152:  MOVWF  x42
2154:  MOVF   x40,W
2156:  ADDWF  x3B,W
2158:  MOVWF  x43
215A:  MOVF   x3F,W
215C:  ADDWF  x3A,W
215E:  MOVWF  x44
2160:  MOVF   x40,W
2162:  ADDWF  x3B,W
2164:  MOVWF  x45
2166:  MOVFF  542,557
216A:  MOVFF  543,558
216E:  MOVFF  544,559
2172:  MOVWF  x5A
2174:  MOVFF  53E,55B
2178:  MOVLB  0
217A:  CALL   1612
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
217E:  MOVLB  5
2180:  MOVF   x3F,W
2182:  SUBWF  x3A,W
2184:  MOVWF  x42
2186:  MOVF   x40,W
2188:  SUBWF  x3B,W
218A:  MOVWF  x43
218C:  MOVF   x3F,W
218E:  ADDWF  x3A,W
2190:  MOVWF  x44
2192:  MOVF   x40,W
2194:  SUBWF  x3B,W
2196:  MOVWF  x45
2198:  MOVFF  542,557
219C:  MOVFF  543,558
21A0:  MOVFF  544,559
21A4:  MOVWF  x5A
21A6:  MOVFF  53E,55B
21AA:  MOVLB  0
21AC:  CALL   1612
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
21B0:  MOVLB  5
21B2:  MOVF   x40,W
21B4:  SUBWF  x3A,W
21B6:  MOVWF  x42
21B8:  MOVF   x3F,W
21BA:  ADDWF  x3B,W
21BC:  MOVWF  x43
21BE:  MOVF   x40,W
21C0:  ADDWF  x3A,W
21C2:  MOVWF  x44
21C4:  MOVF   x3F,W
21C6:  ADDWF  x3B,W
21C8:  MOVWF  x45
21CA:  MOVFF  542,557
21CE:  MOVFF  543,558
21D2:  MOVFF  544,559
21D6:  MOVWF  x5A
21D8:  MOVFF  53E,55B
21DC:  MOVLB  0
21DE:  CALL   1612
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
21E2:  MOVLB  5
21E4:  MOVF   x40,W
21E6:  SUBWF  x3A,W
21E8:  MOVWF  x42
21EA:  MOVF   x3F,W
21EC:  SUBWF  x3B,W
21EE:  MOVWF  x43
21F0:  MOVF   x40,W
21F2:  ADDWF  x3A,W
21F4:  MOVWF  x44
21F6:  MOVF   x3F,W
21F8:  SUBWF  x3B,W
21FA:  MOVWF  x45
21FC:  MOVFF  542,557
2200:  MOVFF  543,558
2204:  MOVFF  544,559
2208:  MOVWF  x5A
220A:  MOVFF  53E,55B
220E:  MOVLB  0
2210:  CALL   1612
....................       } 
....................       else 
2214:  BRA    2306
2216:  MOVLB  5
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
2218:  MOVF   x3A,W
221A:  ADDWF  x3F,W
221C:  MOVWF  x42
221E:  MOVF   x3B,W
2220:  ADDWF  x40,W
2222:  MOVWF  x43
2224:  MOVFF  542,567
2228:  MOVWF  x68
222A:  MOVFF  53E,569
222E:  MOVLB  0
2230:  CALL   139E
....................          glcd_pixel(b+x, a+y, color); 
2234:  MOVLB  5
2236:  MOVF   x3A,W
2238:  ADDWF  x40,W
223A:  MOVWF  x42
223C:  MOVF   x3B,W
223E:  ADDWF  x3F,W
2240:  MOVWF  x43
2242:  MOVFF  542,567
2246:  MOVWF  x68
2248:  MOVFF  53E,569
224C:  MOVLB  0
224E:  CALL   139E
....................          glcd_pixel(x-a, b+y, color); 
2252:  MOVLB  5
2254:  MOVF   x3F,W
2256:  SUBWF  x3A,W
2258:  MOVWF  x42
225A:  MOVF   x3B,W
225C:  ADDWF  x40,W
225E:  MOVWF  x43
2260:  MOVFF  542,567
2264:  MOVWF  x68
2266:  MOVFF  53E,569
226A:  MOVLB  0
226C:  CALL   139E
....................          glcd_pixel(x-b, a+y, color); 
2270:  MOVLB  5
2272:  MOVF   x40,W
2274:  SUBWF  x3A,W
2276:  MOVWF  x42
2278:  MOVF   x3B,W
227A:  ADDWF  x3F,W
227C:  MOVWF  x43
227E:  MOVFF  542,567
2282:  MOVWF  x68
2284:  MOVFF  53E,569
2288:  MOVLB  0
228A:  CALL   139E
....................          glcd_pixel(b+x, y-a, color); 
228E:  MOVLB  5
2290:  MOVF   x3A,W
2292:  ADDWF  x40,W
2294:  MOVWF  x42
2296:  MOVF   x3F,W
2298:  SUBWF  x3B,W
229A:  MOVWF  x43
229C:  MOVFF  542,567
22A0:  MOVWF  x68
22A2:  MOVFF  53E,569
22A6:  MOVLB  0
22A8:  CALL   139E
....................          glcd_pixel(a+x, y-b, color); 
22AC:  MOVLB  5
22AE:  MOVF   x3A,W
22B0:  ADDWF  x3F,W
22B2:  MOVWF  x42
22B4:  MOVF   x40,W
22B6:  SUBWF  x3B,W
22B8:  MOVWF  x43
22BA:  MOVFF  542,567
22BE:  MOVWF  x68
22C0:  MOVFF  53E,569
22C4:  MOVLB  0
22C6:  CALL   139E
....................          glcd_pixel(x-a, y-b, color); 
22CA:  MOVLB  5
22CC:  MOVF   x3F,W
22CE:  SUBWF  x3A,W
22D0:  MOVWF  x42
22D2:  MOVF   x40,W
22D4:  SUBWF  x3B,W
22D6:  MOVWF  x43
22D8:  MOVFF  542,567
22DC:  MOVWF  x68
22DE:  MOVFF  53E,569
22E2:  MOVLB  0
22E4:  CALL   139E
....................          glcd_pixel(x-b, y-a, color); 
22E8:  MOVLB  5
22EA:  MOVF   x40,W
22EC:  SUBWF  x3A,W
22EE:  MOVWF  x42
22F0:  MOVF   x3F,W
22F2:  SUBWF  x3B,W
22F4:  MOVWF  x43
22F6:  MOVFF  542,567
22FA:  MOVWF  x68
22FC:  MOVFF  53E,569
2300:  MOVLB  0
2302:  CALL   139E
....................       } 
....................  
....................       if(P < 0) 
2306:  MOVLB  5
2308:  BTFSC  x41.7
230A:  BRA    230E
230C:  BRA    232A
....................          P += 3 + 2 * a++; 
230E:  MOVF   x3F,W
2310:  INCF   x3F,F
2312:  MOVWF  x42
2314:  MOVLW  02
2316:  MOVWF  x43
2318:  MOVFF  542,544
231C:  MOVLB  0
231E:  RCALL  20EC
2320:  MOVF   01,W
2322:  ADDLW  03
2324:  MOVLB  5
2326:  ADDWF  x41,F
....................       else 
2328:  BRA    234C
....................          P += 5 + 2 * (a++ - b--); 
232A:  MOVF   x3F,W
232C:  INCF   x3F,F
232E:  MOVWF  x42
2330:  MOVF   x40,W
2332:  DECF   x40,F
2334:  SUBWF  x42,W
2336:  MOVWF  x42
2338:  MOVLW  02
233A:  MOVWF  x43
233C:  MOVFF  542,544
2340:  MOVLB  0
2342:  RCALL  20EC
2344:  MOVF   01,W
2346:  ADDLW  05
2348:  MOVLB  5
234A:  ADDWF  x41,F
....................     } while(a <= b); 
234C:  MOVF   x3F,W
234E:  XORLW  80
2350:  MOVWF  00
2352:  MOVF   x40,W
2354:  XORLW  80
2356:  SUBWF  00,W
2358:  BTFSC  FD8.2
235A:  BRA    214A
235C:  BTFSS  FD8.0
235E:  BRA    214A
.................... } 
2360:  MOVLB  0
2362:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
145A:  MOVFF  54E,03
145E:  MOVLB  5
1460:  MOVFF  54D,FE9
1464:  MOVFF  54E,FEA
1468:  MOVF   FEF,F
146A:  BTFSC  FD8.2
146C:  BRA    160E
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
146E:  MOVFF  54E,03
1472:  MOVFF  54D,FE9
1476:  MOVFF  54E,FEA
147A:  MOVF   FEF,W
147C:  SUBLW  52
147E:  BNC   14CE
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
1480:  MOVFF  54E,03
1484:  MOVFF  54D,FE9
1488:  MOVFF  54E,FEA
148C:  MOVLW  20
148E:  SUBWF  FEF,W
1490:  MULLW  05
1492:  MOVF   FF3,W
1494:  CLRF   03
1496:  MOVWF  x5A
1498:  MOVLW  05
149A:  MOVWF  FEA
149C:  MOVLW  55
149E:  MOVWF  FE9
14A0:  CLRF   x5E
14A2:  MOVFF  55A,55D
14A6:  MOVFF  FF2,55B
14AA:  BCF    FF2.7
14AC:  MOVLW  05
14AE:  MOVWF  01
14B0:  CLRF   FF7
14B2:  MOVF   x5A,W
14B4:  MOVLB  0
14B6:  CALL   00A2
14BA:  TBLRD*-
14BC:  TBLRD*+
14BE:  MOVFF  FF5,FEE
14C2:  DECFSZ 01,F
14C4:  BRA    14BC
14C6:  MOVLB  5
14C8:  BTFSC  x5B.7
14CA:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
14CC:  BRA    1538
14CE:  MOVFF  54E,03
14D2:  MOVFF  54D,FE9
14D6:  MOVFF  54E,FEA
14DA:  MOVF   FEF,W
14DC:  SUBLW  7E
14DE:  BNC   152E
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
14E0:  MOVFF  54E,03
14E4:  MOVFF  54D,FE9
14E8:  MOVFF  54E,FEA
14EC:  MOVLW  53
14EE:  SUBWF  FEF,W
14F0:  MULLW  05
14F2:  MOVF   FF3,W
14F4:  CLRF   03
14F6:  MOVWF  x5A
14F8:  MOVLW  05
14FA:  MOVWF  FEA
14FC:  MOVLW  55
14FE:  MOVWF  FE9
1500:  CLRF   x5E
1502:  MOVFF  55A,55D
1506:  MOVFF  FF2,55B
150A:  BCF    FF2.7
150C:  MOVLW  05
150E:  MOVWF  01
1510:  CLRF   FF7
1512:  MOVF   x5A,W
1514:  MOVLB  0
1516:  CALL   01BC
151A:  TBLRD*-
151C:  TBLRD*+
151E:  MOVFF  FF5,FEE
1522:  DECFSZ 01,F
1524:  BRA    151C
1526:  MOVLB  5
1528:  BTFSC  x5B.7
152A:  BSF    FF2.7
....................       else 
152C:  BRA    1538
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
152E:  CLRF   x55
1530:  CLRF   x56
1532:  CLRF   x57
1534:  CLRF   x58
1536:  CLRF   x59
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
1538:  MOVFF  54E,03
153C:  MOVF   x4D,W
153E:  MOVWF  FE9
1540:  MOVFF  03,FEA
1544:  MOVF   FEF,W
1546:  XORLW  0A
1548:  MOVLB  0
154A:  BZ    1552
154C:  XORLW  07
154E:  BZ    1562
1550:  BRA    1568
....................          case '\n': 
....................             y += 7*size + 1; 
1552:  MOVLB  5
1554:  MOVF   x4F,W
1556:  MULLW  07
1558:  MOVF   FF3,W
155A:  ADDLW  01
155C:  ADDWF  x4C,F
....................             continue; 
155E:  BRA    1600
1560:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
1562:  MOVLB  5
1564:  CLRF   x4B
....................             continue; 
1566:  BRA    1600
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
1568:  MOVLB  5
156A:  MOVF   x4F,W
156C:  MULLW  05
156E:  MOVF   FF3,W
1570:  ADDWF  x4B,W
1572:  SUBLW  7F
1574:  BC    1582
....................       { 
....................          x = 0;                           // Set x at far left position 
1576:  CLRF   x4B
....................          y += 7*size + 1;                 // Set y at next position down 
1578:  MOVF   x4F,W
157A:  MULLW  07
157C:  MOVF   FF3,W
157E:  ADDLW  01
1580:  ADDWF  x4C,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
1582:  CLRF   x51
1584:  MOVF   x51,W
1586:  SUBLW  04
1588:  BNC   1600
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
158A:  CLRF   x52
158C:  MOVF   x52,W
158E:  SUBLW  06
1590:  BNC   15F8
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
1592:  CLRF   03
1594:  MOVF   x51,W
1596:  ADDLW  55
1598:  MOVWF  FE9
159A:  MOVLW  05
159C:  ADDWFC 03,W
159E:  MOVWF  FEA
15A0:  MOVFF  FEF,55A
15A4:  MOVFF  55A,00
15A8:  MOVF   x52,W
15AA:  MOVWF  01
15AC:  BZ    15B6
15AE:  BCF    FD8.0
15B0:  RRCF   00,F
15B2:  DECFSZ 01,F
15B4:  BRA    15AE
15B6:  BTFSS  00.0
15B8:  BRA    15F4
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
15BA:  CLRF   x53
15BC:  MOVF   x4F,W
15BE:  SUBWF  x53,W
15C0:  BC    15F4
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
15C2:  CLRF   x54
15C4:  MOVF   x4F,W
15C6:  SUBWF  x54,W
15C8:  BC    15F0
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
15CA:  MOVF   x54,W
15CC:  ADDWF  x4B,W
15CE:  MOVWF  x5A
15D0:  MOVF   x52,W
15D2:  MULWF  x4F
15D4:  MOVF   FF3,W
15D6:  ADDWF  x4C,W
15D8:  ADDWF  x53,W
15DA:  MOVWF  x5B
15DC:  MOVFF  55A,567
15E0:  MOVWF  x68
15E2:  MOVFF  550,569
15E6:  MOVLB  0
15E8:  RCALL  139E
....................                   } 
15EA:  MOVLB  5
15EC:  INCF   x54,F
15EE:  BRA    15C4
....................                } 
15F0:  INCF   x53,F
15F2:  BRA    15BC
....................             } 
....................          } 
15F4:  INCF   x52,F
15F6:  BRA    158C
....................       } 
15F8:  INCF   x51,F
15FA:  MOVF   x4F,W
15FC:  ADDWF  x4B,F
15FE:  BRA    1584
....................    } 
1600:  INCF   x4D,F
1602:  BTFSC  FD8.2
1604:  INCF   x4E,F
1606:  INCF   x4B,F
1608:  MOVLB  0
160A:  BRA    145A
160C:  MOVLB  5
.................... } 
160E:  MOVLB  0
1610:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... char kpa[]="kPa"; 
.................... float promedio[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... int8 Puerta=0,Parada=1,NivelReservorio=0,NivelTanque=0,Presostato=0,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,Alarma=0,AlarmaAgua=0; 
.................... short Flanco=0,Flanco1=0,Flanco2=0,emergency=0,visual=1,desfoguelento=0,Lectura=0,Expulsa=0, est=0,Visua=0,flag_agua=0,CadenaRecibida=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,z=0; 
.................... short disp_Alarma=0,disp_AlarmaAgua=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Decimal=0; 
.................... int8 Menu=0, unidad=1,bite=0,TamanoCadena=0,i=0; 
.................... int8 Setpoint=0,fin_ciclo=0,Opcion=1,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,tiempo_desfogue=0; 
.................... float ADC_Pt100=0.0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... char dato[10]; 
.................... char datoTx[14]; 
.................... char datoRx[11]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
.................... float V0=0.0,R1=6180.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0; 
....................  
.................... typedef struct{ 
....................    char Letra[30]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void displayMenu(char palabra[30], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
1812:  MOVLB  5
1814:  MOVFF  53A,01
1818:  MOVFF  53B,03
181C:  MOVFF  53A,540
1820:  MOVFF  53B,541
1824:  MOVLW  05
1826:  MOVWF  FEA
1828:  MOVLW  1A
182A:  MOVWF  FE9
182C:  MOVFF  53B,FE2
1830:  MOVFF  53A,FE1
1834:  MOVF   FE7,F
1836:  MOVFF  FE6,FEE
183A:  BNZ   1834
....................    if(sombreado==2) 
183C:  MOVF   x3E,W
183E:  SUBLW  02
1840:  BNZ   186A
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
1842:  MOVLW  01
1844:  ADDWF  x3C,W
1846:  MOVWF  x40
1848:  MOVLW  01
184A:  ADDWF  x3D,W
184C:  MOVWF  x41
184E:  MOVFF  540,54B
1852:  MOVWF  x4C
1854:  MOVLW  05
1856:  MOVWF  x4E
1858:  MOVLW  1A
185A:  MOVWF  x4D
185C:  MOVFF  53F,54F
1860:  MOVLW  01
1862:  MOVWF  x50
1864:  MOVLB  0
1866:  RCALL  145A
1868:  MOVLB  5
....................    if(sombreado==1) 
186A:  DECFSZ x3E,W
186C:  BRA    18B8
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
186E:  MOVF   x3F,W
1870:  MULLW  08
1872:  MOVF   FF3,W
1874:  ADDWF  x3D,W
1876:  MOVWF  x40
1878:  CLRF   x4C
187A:  MOVFF  53D,54D
187E:  MOVLW  7F
1880:  MOVWF  x4E
1882:  MOVFF  540,54F
1886:  MOVLW  01
1888:  MOVWF  x50
188A:  MOVWF  x51
188C:  MOVLB  0
188E:  RCALL  1750
1890:  MOVLW  01
1892:  MOVLB  5
1894:  ADDWF  x3C,W
1896:  MOVWF  x40
1898:  MOVLW  01
189A:  ADDWF  x3D,W
189C:  MOVWF  x41
189E:  MOVFF  540,54B
18A2:  MOVWF  x4C
18A4:  MOVLW  05
18A6:  MOVWF  x4E
18A8:  MOVLW  1A
18AA:  MOVWF  x4D
18AC:  MOVFF  53F,54F
18B0:  CLRF   x50
18B2:  MOVLB  0
18B4:  RCALL  145A
18B6:  MOVLB  5
....................    if(sombreado==0) 
18B8:  MOVF   x3E,F
18BA:  BNZ   1906
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
18BC:  MOVF   x3F,W
18BE:  MULLW  08
18C0:  MOVF   FF3,W
18C2:  ADDWF  x3D,W
18C4:  MOVWF  x40
18C6:  CLRF   x4C
18C8:  MOVFF  53D,54D
18CC:  MOVLW  7F
18CE:  MOVWF  x4E
18D0:  MOVFF  540,54F
18D4:  MOVLW  01
18D6:  MOVWF  x50
18D8:  CLRF   x51
18DA:  MOVLB  0
18DC:  RCALL  1750
18DE:  MOVLW  01
18E0:  MOVLB  5
18E2:  ADDWF  x3C,W
18E4:  MOVWF  x40
18E6:  MOVLW  01
18E8:  ADDWF  x3D,W
18EA:  MOVWF  x41
18EC:  MOVFF  540,54B
18F0:  MOVWF  x4C
18F2:  MOVLW  05
18F4:  MOVWF  x4E
18F6:  MOVLW  1A
18F8:  MOVWF  x4D
18FA:  MOVFF  53F,54F
18FE:  MOVLW  01
1900:  MOVWF  x50
1902:  MOVLB  0
1904:  RCALL  145A
....................    glcd_update(); 
1906:  MOVLB  0
1908:  RCALL  123C
.................... } 
190A:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
23EA:  MOVLB  5
23EC:  MOVF   x3E,W
23EE:  SUBLW  02
23F0:  BNZ   2462
....................    { 
....................       sprintf(voltage, "%03u", digito); 
23F2:  MOVLW  05
23F4:  MOVWF  x39
23F6:  MOVLW  40
23F8:  MOVWF  x38
23FA:  MOVFF  53B,549
23FE:  MOVLW  03
2400:  MOVWF  x4A
2402:  MOVLB  0
2404:  RCALL  2364
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
2406:  MOVLB  5
2408:  MOVF   x3F,W
240A:  MULLW  12
240C:  MOVF   FF3,W
240E:  ADDWF  x3C,W
2410:  MOVWF  x49
2412:  MOVF   x3F,W
2414:  MULLW  08
2416:  MOVF   FF3,W
2418:  ADDWF  x3D,W
241A:  MOVWF  x4A
241C:  MOVFF  53C,54C
2420:  MOVFF  53D,54D
2424:  MOVFF  549,54E
2428:  MOVWF  x4F
242A:  MOVLW  01
242C:  MOVWF  x50
242E:  MOVWF  x51
2430:  MOVLB  0
2432:  CALL   1750
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
2436:  MOVLW  01
2438:  MOVLB  5
243A:  ADDWF  x3C,W
243C:  MOVWF  x49
243E:  MOVLW  01
2440:  ADDWF  x3D,W
2442:  MOVWF  x4A
2444:  MOVFF  549,54B
2448:  MOVWF  x4C
244A:  MOVLW  05
244C:  MOVWF  x4E
244E:  MOVLW  40
2450:  MOVWF  x4D
2452:  MOVFF  53F,54F
2456:  CLRF   x50
2458:  MOVLB  0
245A:  CALL   145A
....................    } 
....................    else 
245E:  BRA    2530
2460:  MOVLB  5
....................    { 
....................       sprintf(voltage, "%u", digito); 
2462:  MOVLW  05
2464:  MOVWF  x39
2466:  MOVLW  40
2468:  MOVWF  x38
246A:  MOVFF  53B,549
246E:  MOVLW  1B
2470:  MOVWF  x4A
2472:  MOVLB  0
2474:  RCALL  2364
....................     
....................       if(sombreado==1) 
2476:  MOVLB  5
2478:  DECFSZ x3E,W
247A:  BRA    24D4
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
247C:  MOVF   x3F,W
247E:  MULLW  05
2480:  MOVF   FF3,W
2482:  ADDWF  x3C,W
2484:  MOVWF  x49
2486:  MOVF   x3F,W
2488:  MULLW  08
248A:  MOVF   FF3,W
248C:  ADDWF  x3D,W
248E:  MOVWF  x4A
2490:  MOVFF  53C,54C
2494:  MOVFF  53D,54D
2498:  MOVFF  549,54E
249C:  MOVWF  x4F
249E:  MOVLW  01
24A0:  MOVWF  x50
24A2:  MOVWF  x51
24A4:  MOVLB  0
24A6:  CALL   1750
24AA:  MOVLW  01
24AC:  MOVLB  5
24AE:  ADDWF  x3C,W
24B0:  MOVWF  x49
24B2:  MOVLW  01
24B4:  ADDWF  x3D,W
24B6:  MOVWF  x4A
24B8:  MOVFF  549,54B
24BC:  MOVWF  x4C
24BE:  MOVLW  05
24C0:  MOVWF  x4E
24C2:  MOVLW  40
24C4:  MOVWF  x4D
24C6:  MOVFF  53F,54F
24CA:  CLRF   x50
24CC:  MOVLB  0
24CE:  CALL   145A
24D2:  MOVLB  5
....................       if(sombreado==0) 
24D4:  MOVF   x3E,F
24D6:  BNZ   2532
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
24D8:  MOVF   x3F,W
24DA:  MULLW  05
24DC:  MOVF   FF3,W
24DE:  ADDWF  x3C,W
24E0:  MOVWF  x49
24E2:  MOVF   x3F,W
24E4:  MULLW  08
24E6:  MOVF   FF3,W
24E8:  ADDWF  x3D,W
24EA:  MOVWF  x4A
24EC:  MOVFF  53C,54C
24F0:  MOVFF  53D,54D
24F4:  MOVFF  549,54E
24F8:  MOVWF  x4F
24FA:  MOVLW  01
24FC:  MOVWF  x50
24FE:  CLRF   x51
2500:  MOVLB  0
2502:  CALL   1750
2506:  MOVLW  01
2508:  MOVLB  5
250A:  ADDWF  x3C,W
250C:  MOVWF  x49
250E:  MOVLW  01
2510:  ADDWF  x3D,W
2512:  MOVWF  x4A
2514:  MOVFF  549,54B
2518:  MOVWF  x4C
251A:  MOVLW  05
251C:  MOVWF  x4E
251E:  MOVLW  40
2520:  MOVWF  x4D
2522:  MOVFF  53F,54F
2526:  MOVLW  01
2528:  MOVWF  x50
252A:  MOVLB  0
252C:  CALL   145A
2530:  MOVLB  5
....................    } 
....................    glcd_update(); 
2532:  MOVLB  0
2534:  CALL   123C
.................... } 
2538:  RETLW  00
....................  
.................... #int_rda 
.................... void rda_isr(void)//función de interrupción por recepción de datos USART  
.................... {  
....................    dato[bite]=getch(); 
*
0F36:  CLRF   03
0F38:  MOVLB  4
0F3A:  MOVF   x8B,W
0F3C:  ADDLW  BC
0F3E:  MOVWF  FE9
0F40:  MOVLW  04
0F42:  ADDWFC 03,W
0F44:  MOVWF  FEA
0F46:  BTFSS  F9E.5
0F48:  BRA    0F46
0F4A:  MOVFF  FAE,FEF
....................    if((bite<10 && strcmp(dato[bite],'\r')==0)) 
0F4E:  MOVF   x8B,W
0F50:  SUBLW  09
0F52:  BNC   0F88
0F54:  CLRF   03
0F56:  MOVF   x8B,W
0F58:  ADDLW  BC
0F5A:  MOVWF  FE9
0F5C:  MOVLW  04
0F5E:  ADDWFC 03,W
0F60:  MOVWF  FEA
0F62:  MOVFF  FEF,570
0F66:  MOVLB  5
0F68:  CLRF   x72
0F6A:  MOVFF  570,571
0F6E:  CLRF   x74
0F70:  MOVLW  0D
0F72:  MOVWF  x73
0F74:  MOVLB  0
0F76:  RCALL  0EBE
0F78:  MOVF   01,F
0F7A:  BTFSC  FD8.2
0F7C:  BRA    0F82
0F7E:  MOVLB  4
0F80:  BRA    0F88
....................    { 
....................       bite=0; 
0F82:  MOVLB  4
0F84:  CLRF   x8B
....................    } 
....................    else 
0F86:  BRA    101A
....................    { 
....................       if(bite==10 && strcmp(dato[bite],'\r')==0) 
0F88:  MOVF   x8B,W
0F8A:  SUBLW  0A
0F8C:  BNZ   100C
0F8E:  CLRF   03
0F90:  MOVF   x8B,W
0F92:  ADDLW  BC
0F94:  MOVWF  FE9
0F96:  MOVLW  04
0F98:  ADDWFC 03,W
0F9A:  MOVWF  FEA
0F9C:  MOVFF  FEF,570
0FA0:  MOVLB  5
0FA2:  CLRF   x72
0FA4:  MOVFF  570,571
0FA8:  CLRF   x74
0FAA:  MOVLW  0D
0FAC:  MOVWF  x73
0FAE:  MOVLB  0
0FB0:  RCALL  0EBE
0FB2:  MOVF   01,F
0FB4:  BTFSC  FD8.2
0FB6:  BRA    0FBC
0FB8:  MOVLB  4
0FBA:  BRA    100C
....................       { 
....................          TamanoCadena=bite; 
0FBC:  MOVFF  48B,48C
....................          bite=0; 
0FC0:  MOVLB  4
0FC2:  CLRF   x8B
....................          CadenaRecibida=1; 
0FC4:  BSF    x7D.3
....................          for(i=0;i<TamanoCadena+1;i++) 
0FC6:  CLRF   x8D
0FC8:  MOVLW  01
0FCA:  ADDWF  x8C,W
0FCC:  SUBWF  x8D,W
0FCE:  BC    100A
....................          { 
....................             datoRx[i]=dato[i]; 
0FD0:  CLRF   03
0FD2:  MOVF   x8D,W
0FD4:  ADDLW  D4
0FD6:  MOVWF  01
0FD8:  MOVLW  04
0FDA:  ADDWFC 03,F
0FDC:  MOVLB  5
0FDE:  MOVFF  03,571
0FE2:  CLRF   03
0FE4:  MOVLB  4
0FE6:  MOVF   x8D,W
0FE8:  ADDLW  BC
0FEA:  MOVWF  FE9
0FEC:  MOVLW  04
0FEE:  ADDWFC 03,W
0FF0:  MOVWF  FEA
0FF2:  MOVFF  FEF,572
0FF6:  MOVLB  5
0FF8:  MOVFF  571,FEA
0FFC:  MOVFF  01,FE9
1000:  MOVFF  572,FEF
....................          }    
1004:  MOVLB  4
1006:  INCF   x8D,F
1008:  BRA    0FC8
....................       } 
....................       else 
100A:  BRA    101A
....................       { 
....................          if(bite>10) 
100C:  MOVF   x8B,W
100E:  SUBLW  0A
1010:  BC    1016
....................          { 
....................             bite=0; 
1012:  CLRF   x8B
....................          } 
....................          else 
1014:  BRA    101A
....................          { 
....................             //displayTiempo(bite,50,50,2,1); 
....................             CadenaRecibida=0; 
1016:  BCF    x7D.3
....................             bite++; 
1018:  INCF   x8B,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
101A:  BCF    F9E.5
101C:  MOVLB  0
101E:  GOTO   0060
.................... void EnviarCodigo(void) 
.................... { 
....................    datoTx[0]=Resistencia+48; 
*
1AF8:  MOVLW  30
1AFA:  MOVLB  4
1AFC:  ADDWF  x7F,W
1AFE:  MOVWF  xC6
....................    datoTx[1]=EVDesfogue+48; 
1B00:  MOVLW  30
1B02:  ADDWF  x80,W
1B04:  MOVWF  xC7
....................    datoTx[2]=EVAgua+48; 
1B06:  MOVLW  30
1B08:  ADDWF  x81,W
1B0A:  MOVWF  xC8
....................    datoTx[3]=EVTrampa+48; 
1B0C:  MOVLW  30
1B0E:  ADDWF  x82,W
1B10:  MOVWF  xC9
....................    datoTx[4]=MotorPuerta+48; 
1B12:  MOVLW  30
1B14:  ADDWF  x83,W
1B16:  MOVWF  xCA
....................    datoTx[5]=EVEntradaAgua+48; 
1B18:  MOVLW  30
1B1A:  ADDWF  x84,W
1B1C:  MOVWF  xCB
....................    datoTx[6]=BombaVacio+48; 
1B1E:  MOVLW  30
1B20:  ADDWF  x85,W
1B22:  MOVWF  xCC
....................    datoTx[7]=BombaAgua+48; 
1B24:  MOVLW  30
1B26:  ADDWF  x86,W
1B28:  MOVWF  xCD
....................    datoTx[8]=Control+48; 
1B2A:  MOVLW  30
1B2C:  ADDWF  x87,W
1B2E:  MOVWF  xCE
....................    datoTx[12]=Nivel+48; 
1B30:  MOVLW  30
1B32:  ADDWF  x9C,W
1B34:  MOVWF  xD2
....................    datoTx[9]=Setpoint+48; 
1B36:  MOVLW  30
1B38:  ADDWF  x8E,W
1B3A:  MOVWF  xCF
....................    /*itoa(Setpoint,10, SetTemperatura); 
....................     
....................    for(i=0;i<3;i++) 
....................    { 
....................       if(SetTemperatura[i]==null) 
....................       { 
....................          datoTx[i+9]='n'; 
....................       } 
....................       else 
....................       { 
....................          datoTx[i+9]=SetTemperatura[i]; 
....................       } 
....................    }*/ 
....................    datoTx[13]='\r'; 
1B3C:  MOVLW  0D
1B3E:  MOVWF  xD3
....................        
....................        
....................    for(i=0;i<14;i++) 
1B40:  CLRF   x8D
1B42:  MOVF   x8D,W
1B44:  SUBLW  0D
1B46:  BNC   1B74
....................    { 
....................       putc(datoTx[i]); 
1B48:  CLRF   03
1B4A:  MOVF   x8D,W
1B4C:  ADDLW  C6
1B4E:  MOVWF  FE9
1B50:  MOVLW  04
1B52:  ADDWFC 03,W
1B54:  MOVWF  FEA
1B56:  MOVFF  FEF,53A
1B5A:  MOVLB  5
1B5C:  MOVF   x3A,W
1B5E:  MOVLB  0
1B60:  BRA    1AEE
....................       delay_ms(12); 
1B62:  MOVLW  0C
1B64:  MOVLB  5
1B66:  MOVWF  x3F
1B68:  MOVLB  0
1B6A:  CALL   10EA
....................    }    
1B6E:  MOVLB  4
1B70:  INCF   x8D,F
1B72:  BRA    1B42
.................... } 
1B74:  MOVLB  0
1B76:  RETLW  00
....................  
.................... void Determina(void){ 
....................          Puerta=DatoRx[0]-48; 
*
1F50:  MOVLW  30
1F52:  MOVLB  4
1F54:  SUBWF  xD4,W
1F56:  MOVWF  x70
....................          Parada=DatoRx[1]-48; 
1F58:  MOVLW  30
1F5A:  SUBWF  xD5,W
1F5C:  MOVWF  x71
....................          NivelReservorio=DatoRx[2]-48; 
1F5E:  MOVLW  30
1F60:  SUBWF  xD6,W
1F62:  MOVWF  x72
....................          NivelTanque=DatoRx[3]-48; 
1F64:  MOVLW  30
1F66:  SUBWF  xD7,W
1F68:  MOVWF  x73
....................          Presostato=DatoRx[4]-48; 
1F6A:  MOVLW  30
1F6C:  SUBWF  xD8,W
1F6E:  MOVWF  x74
....................          ADC_Pt100=DatoRx[5]-48; 
1F70:  MOVLW  30
1F72:  SUBWF  xD9,W
1F74:  MOVLB  5
1F76:  CLRF   x40
1F78:  MOVWF  x3F
1F7A:  MOVLB  0
1F7C:  CALL   1114
1F80:  MOVFF  03,4A3
1F84:  MOVFF  02,4A2
1F88:  MOVFF  01,4A1
1F8C:  MOVFF  00,4A0
....................          Alarma=DatoRx[6]-48; 
1F90:  MOVLW  30
1F92:  MOVLB  4
1F94:  SUBWF  xDA,W
1F96:  MOVWF  x7A
....................          AlarmaAgua=DatoRx[7]-48; 
1F98:  MOVLW  30
1F9A:  SUBWF  xDB,W
1F9C:  MOVWF  x7B
....................          /*for(i=0;i<4;i++) 
....................          { 
....................             if(strcmp(datoRx[i+5],'n')==0 ) 
....................             { 
....................                break; 
....................             } 
....................             else 
....................             { 
....................                ADCTemperatura[i]=datoRx[i+5]; 
....................             } 
....................          } 
....................          ADC_Pt100=atof(ADCTemperatura); 
....................          for(i=0;i<4;i++) 
....................          { 
....................             datoRx[i+5]=null; 
....................             ADCTemperatura[i]=null; 
....................          }*/ 
....................          Decimal=DatoRx[9]-48; 
1F9E:  MOVLW  30
1FA0:  SUBWF  xDD,W
1FA2:  MOVWF  x88
....................          ADC_Pt100=ADC_Pt100+((float)Decimal/10); 
1FA4:  MOVLB  5
1FA6:  CLRF   x40
1FA8:  MOVFF  488,53F
1FAC:  MOVLB  0
1FAE:  CALL   1114
1FB2:  MOVFF  00,53A
1FB6:  MOVFF  01,53B
1FBA:  MOVFF  02,53C
1FBE:  MOVFF  03,53D
1FC2:  MOVFF  03,541
1FC6:  MOVFF  02,540
1FCA:  MOVFF  01,53F
1FCE:  MOVFF  00,53E
1FD2:  MOVLB  5
1FD4:  CLRF   x45
1FD6:  CLRF   x44
1FD8:  MOVLW  20
1FDA:  MOVWF  x43
1FDC:  MOVLW  82
1FDE:  MOVWF  x42
1FE0:  MOVLB  0
1FE2:  BRA    1B78
1FE4:  BCF    FD8.1
1FE6:  MOVFF  4A3,541
1FEA:  MOVFF  4A2,540
1FEE:  MOVFF  4A1,53F
1FF2:  MOVFF  4A0,53E
1FF6:  MOVFF  03,545
1FFA:  MOVFF  02,544
1FFE:  MOVFF  01,543
2002:  MOVFF  00,542
2006:  RCALL  1CD8
2008:  MOVFF  03,4A3
200C:  MOVFF  02,4A2
2010:  MOVFF  01,4A1
2014:  MOVFF  00,4A0
.................... } 
2018:  RETLW  00
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................    /* 
....................    if(x==1){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==2){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==3){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==4){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    }*/ 
....................     
....................    if(x==5){ 
*
203E:  MOVLB  5
2040:  MOVF   x3A,W
2042:  SUBLW  05
2044:  BNZ   20E8
....................    for( i = 0 ; i < 64 ; i ++ ) 
2046:  CLRF   x3B
2048:  MOVF   x3B,W
204A:  SUBLW  3F
204C:  BNC   20E8
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
204E:  CLRF   x3C
2050:  MOVF   x3C,W
2052:  SUBLW  0F
2054:  BNC   20E4
....................       {     
....................          for(k=7;k>-1;k--) 
2056:  MOVLW  07
2058:  MOVWF  x3D
205A:  MOVF   x3D,W
205C:  XORLW  80
205E:  SUBLW  7F
2060:  BC    20E0
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
2062:  CLRF   x3F
2064:  MOVFF  53B,53E
2068:  CLRF   x41
206A:  MOVLW  10
206C:  MOVWF  x40
206E:  MOVLB  0
2070:  BRA    201A
2072:  MOVFF  02,53F
2076:  MOVFF  01,53E
207A:  MOVLB  5
207C:  MOVF   x3C,W
207E:  ADDWF  01,W
2080:  MOVWF  01
2082:  MOVLW  00
2084:  ADDWFC 02,W
2086:  MOVWF  03
2088:  MOVF   01,W
208A:  MOVFF  FF2,53E
208E:  BCF    FF2.7
2090:  MOVFF  03,FF7
2094:  MOVLB  0
2096:  CALL   02B2
209A:  MOVLB  5
209C:  BTFSC  x3E.7
209E:  BSF    FF2.7
20A0:  MOVWF  x3E
20A2:  MOVLW  07
20A4:  BSF    FD8.0
20A6:  SUBFWB x3D,W
20A8:  MOVWF  x3F
20AA:  MOVFF  53E,00
20AE:  MOVF   x3F,W
20B0:  MOVWF  01
20B2:  BZ    20BC
20B4:  BCF    FD8.0
20B6:  RRCF   00,F
20B8:  DECFSZ 01,F
20BA:  BRA    20B4
20BC:  BTFSS  00.0
20BE:  BRA    20DC
....................                glcd_pixel( j*8+k,i, ON ); 
20C0:  MOVF   x3C,W
20C2:  MULLW  08
20C4:  MOVF   FF3,W
20C6:  ADDWF  x3D,W
20C8:  MOVWF  x3E
20CA:  MOVWF  x67
20CC:  MOVFF  53B,568
20D0:  MOVLW  01
20D2:  MOVWF  x69
20D4:  MOVLB  0
20D6:  CALL   139E
20DA:  MOVLB  5
....................          }   
20DC:  DECF   x3D,F
20DE:  BRA    205A
....................       } 
20E0:  INCF   x3C,F
20E2:  BRA    2050
....................    } 
20E4:  INCF   x3B,F
20E6:  BRA    2048
....................    } 
....................     
.................... } 
20E8:  MOVLB  0
20EA:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
*
1022:  MOVLW  15
1024:  MOVWF  FCF
1026:  MOVLW  A0
1028:  MOVWF  FCE
....................    tiempos++; 
102A:  MOVLB  4
102C:  INCF   x94,F
102E:  BTFSC  FD8.2
1030:  INCF   x95,F
....................    tiempos3++; 
1032:  INCF   x96,F
1034:  BTFSC  FD8.2
1036:  INCF   x97,F
....................    tiempoctrl++; 
1038:  INCF   x98,F
103A:  BTFSC  FD8.2
103C:  INCF   x99,F
....................        
....................    if(tiempos3>=40 && Exhaust==2) 
103E:  MOVF   x97,F
1040:  BNZ   1048
1042:  MOVF   x96,W
1044:  SUBLW  27
1046:  BC    105A
1048:  MOVF   x93,W
104A:  SUBLW  02
104C:  BNZ   105A
....................    {tiempos3=0;Expulsa=1;tiempo_desfogue++;} 
104E:  CLRF   x97
1050:  CLRF   x96
1052:  BSF    x7C.7
1054:  INCF   x9E,F
1056:  BTFSC  FD8.2
1058:  INCF   x9F,F
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
105A:  MOVF   x94,W
105C:  SUBLW  C8
105E:  BNZ   10E2
1060:  MOVF   x95,F
1062:  BNZ   10E2
....................    {tiempos=0;Lectura=1; 
1064:  CLRF   x95
1066:  CLRF   x94
1068:  BSF    x7C.6
....................     
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
106A:  DECFSZ x91,W
106C:  BRA    10A6
....................       { 
....................                       
....................       Testerilizacion[0]++; 
106E:  INCF   xA4,F
....................       if(Testerilizacion[0]>9) 
1070:  BTFSC  xA4.7
1072:  BRA    107E
1074:  MOVF   xA4,W
1076:  SUBLW  09
1078:  BC    107E
....................          {Testerilizacion[0]=0; 
107A:  CLRF   xA4
....................           Testerilizacion[1]++;} 
107C:  INCF   xA5,F
....................        if(Testerilizacion[1]>5) 
107E:  BTFSC  xA5.7
1080:  BRA    108C
1082:  MOVF   xA5,W
1084:  SUBLW  05
1086:  BC    108C
....................          {Testerilizacion[1]=0; 
1088:  CLRF   xA5
....................           Testerilizacion[2]++;} 
108A:  INCF   xA6,F
....................          if(Testerilizacion[2]>9) 
108C:  BTFSC  xA6.7
108E:  BRA    109A
1090:  MOVF   xA6,W
1092:  SUBLW  09
1094:  BC    109A
....................             {Testerilizacion[2]=0; 
1096:  CLRF   xA6
....................              Testerilizacion[3]++;} 
1098:  INCF   xA7,F
....................             if(Testerilizacion[3]>5) 
109A:  BTFSC  xA7.7
109C:  BRA    10A6
109E:  MOVF   xA7,W
10A0:  SUBLW  05
10A2:  BC    10A6
....................                {Testerilizacion[3]=0;} 
10A4:  CLRF   xA7
....................       }        
....................        
....................     if(tiempo_secado==1) 
10A6:  DECFSZ x92,W
10A8:  BRA    10E2
....................       { 
....................                       
....................       Tsecado[0]++; 
10AA:  INCF   xAC,F
....................       if(Tsecado[0]>9) 
10AC:  BTFSC  xAC.7
10AE:  BRA    10BA
10B0:  MOVF   xAC,W
10B2:  SUBLW  09
10B4:  BC    10BA
....................          {Tsecado[0]=0; 
10B6:  CLRF   xAC
....................           Tsecado[1]++;} 
10B8:  INCF   xAD,F
....................        if(Tsecado[1]>5) 
10BA:  BTFSC  xAD.7
10BC:  BRA    10C8
10BE:  MOVF   xAD,W
10C0:  SUBLW  05
10C2:  BC    10C8
....................          {Tsecado[1]=0; 
10C4:  CLRF   xAD
....................           Tsecado[2]++;} 
10C6:  INCF   xAE,F
....................          if(Tsecado[2]>9) 
10C8:  BTFSC  xAE.7
10CA:  BRA    10D6
10CC:  MOVF   xAE,W
10CE:  SUBLW  09
10D0:  BC    10D6
....................             {Tsecado[2]=0; 
10D2:  CLRF   xAE
....................              Tsecado[3]++;} 
10D4:  INCF   xAF,F
....................             if(Tsecado[3]>5) 
10D6:  BTFSC  xAF.7
10D8:  BRA    10E2
10DA:  MOVF   xAF,W
10DC:  SUBLW  05
10DE:  BC    10E2
....................                {Tsecado[3]=0;} 
10E0:  CLRF   xAF
....................       }   
....................    } 
....................    } 
....................     
10E2:  BCF    F9E.0
10E4:  MOVLB  0
10E6:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
....................    glcd_rect(x1, y, x2, y+7, YES, OFF); 
*
267A:  MOVLW  07
267C:  MOVLB  5
267E:  ADDWF  x3C,W
2680:  MOVWF  x3D
2682:  MOVFF  53A,54C
2686:  MOVFF  53C,54D
268A:  MOVFF  53B,54E
268E:  MOVWF  x4F
2690:  MOVLW  01
2692:  MOVWF  x50
2694:  CLRF   x51
2696:  MOVLB  0
2698:  CALL   1750
.................... } 
269C:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%3.1f",adc); // Converts adc to text 
*
2A0E:  MOVLW  05
2A10:  MOVLB  5
2A12:  MOVWF  x39
2A14:  MOVLW  41
2A16:  MOVWF  x38
2A18:  MOVLW  02
2A1A:  MOVWF  FE9
2A1C:  MOVFF  53D,54D
2A20:  MOVFF  53C,54C
2A24:  MOVFF  53B,54B
2A28:  MOVFF  53A,54A
2A2C:  MOVLW  01
2A2E:  MOVWF  x4E
2A30:  MOVLB  0
2A32:  BRA    285A
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
2A34:  MOVLB  5
2A36:  MOVF   x40,W
2A38:  MULLW  1B
2A3A:  MOVF   FF3,W
2A3C:  ADDWF  x3E,W
2A3E:  MOVWF  x4A
2A40:  MOVF   x40,W
2A42:  MULLW  08
2A44:  MOVF   FF3,W
2A46:  ADDWF  x3F,W
2A48:  MOVWF  x4B
2A4A:  MOVFF  53E,54C
2A4E:  MOVFF  53F,54D
2A52:  MOVFF  54A,54E
2A56:  MOVWF  x4F
2A58:  MOVLW  01
2A5A:  MOVWF  x50
2A5C:  CLRF   x51
2A5E:  MOVLB  0
2A60:  CALL   1750
....................    /*glcd_rect(x, y, x+53, y+15, YES, ON);*/glcd_text57(x, y, voltage, w, ON); 
2A64:  MOVFF  53E,54B
2A68:  MOVFF  53F,54C
2A6C:  MOVLW  05
2A6E:  MOVLB  5
2A70:  MOVWF  x4E
2A72:  MOVLW  41
2A74:  MOVWF  x4D
2A76:  MOVFF  540,54F
2A7A:  MOVLW  01
2A7C:  MOVWF  x50
2A7E:  MOVLB  0
2A80:  CALL   145A
.................... } 
2A84:  GOTO   64AE (RETURN)
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
114A:  MOVLB  5
114C:  RLCF   x3A,W
114E:  MOVWF  00
1150:  RLCF   00,F
1152:  MOVLW  FC
1154:  ANDWF  00,F
1156:  MOVFF  00,01
115A:  MOVF   FC2,W
115C:  ANDLW  C3
115E:  IORWF  00,W
1160:  MOVWF  FC2
1162:  MOVLW  0A
1164:  MOVWF  x3F
1166:  MOVLB  0
1168:  RCALL  10EA
116A:  BSF    FC2.1
116C:  BTFSC  FC2.1
116E:  BRA    116C
1170:  MOVFF  FC4,540
1174:  MOVFF  FC3,53F
1178:  MOVLB  0
117A:  RCALL  1114
117C:  MOVFF  03,53E
1180:  MOVFF  02,53D
1184:  MOVFF  01,53C
1188:  MOVFF  00,53B
118C:  MOVFF  53B,00
1190:  MOVFF  53C,01
1194:  MOVFF  53D,02
1198:  MOVFF  53E,03
.................... } 
119C:  GOTO   2D88 (RETURN)
....................  
.................... void MuestraTiemposProgramados(){ 
.................... // Muestra Valor de esterilizacion programado. 
....................    displayTiempo(Testerilizacionp[3],36,0,0,1);displayTiempo(Testerilizacionp[2],42,0,0,1); 
*
253A:  MOVFF  4AB,53B
253E:  MOVLW  24
2540:  MOVLB  5
2542:  MOVWF  x3C
2544:  CLRF   x3D
2546:  CLRF   x3E
2548:  MOVLW  01
254A:  MOVWF  x3F
254C:  MOVLB  0
254E:  RCALL  23EA
2550:  MOVFF  4AA,53B
2554:  MOVLW  2A
2556:  MOVLB  5
2558:  MOVWF  x3C
255A:  CLRF   x3D
255C:  CLRF   x3E
255E:  MOVLW  01
2560:  MOVWF  x3F
2562:  MOVLB  0
2564:  RCALL  23EA
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,0,2,1);  
2566:  MOVLW  05
2568:  MOVWF  FEA
256A:  MOVLW  1A
256C:  MOVWF  FE9
256E:  MOVFF  FF2,53A
2572:  BCF    FF2.7
2574:  MOVLW  00
2576:  CALL   06CA
257A:  TBLRD*-
257C:  TBLRD*+
257E:  MOVF   FF5,W
2580:  MOVWF  FEE
2582:  IORLW  00
2584:  BNZ   257C
2586:  MOVLB  5
2588:  BTFSC  x3A.7
258A:  BSF    FF2.7
258C:  MOVLW  05
258E:  MOVWF  x3B
2590:  MOVLW  1A
2592:  MOVWF  x3A
2594:  MOVLW  31
2596:  MOVWF  x3C
2598:  CLRF   x3D
259A:  MOVLW  02
259C:  MOVWF  x3E
259E:  MOVLW  01
25A0:  MOVWF  x3F
25A2:  MOVLB  0
25A4:  CALL   1812
....................    displayTiempo(Testerilizacionp[1],54,0,0,1);displayTiempo(Testerilizacionp[0],60,0,0,1); 
25A8:  MOVFF  4A9,53B
25AC:  MOVLW  36
25AE:  MOVLB  5
25B0:  MOVWF  x3C
25B2:  CLRF   x3D
25B4:  CLRF   x3E
25B6:  MOVLW  01
25B8:  MOVWF  x3F
25BA:  MOVLB  0
25BC:  RCALL  23EA
25BE:  MOVFF  4A8,53B
25C2:  MOVLW  3C
25C4:  MOVLB  5
25C6:  MOVWF  x3C
25C8:  CLRF   x3D
25CA:  CLRF   x3E
25CC:  MOVLW  01
25CE:  MOVWF  x3F
25D0:  MOVLB  0
25D2:  RCALL  23EA
.................... // Muestra tiempo de secado programado. 
....................    displayTiempo(Tsecadop[3],36,8,0,1);displayTiempo(Tsecadop[2],42,8,0,1); 
25D4:  MOVFF  4B3,53B
25D8:  MOVLW  24
25DA:  MOVLB  5
25DC:  MOVWF  x3C
25DE:  MOVLW  08
25E0:  MOVWF  x3D
25E2:  CLRF   x3E
25E4:  MOVLW  01
25E6:  MOVWF  x3F
25E8:  MOVLB  0
25EA:  RCALL  23EA
25EC:  MOVFF  4B2,53B
25F0:  MOVLW  2A
25F2:  MOVLB  5
25F4:  MOVWF  x3C
25F6:  MOVLW  08
25F8:  MOVWF  x3D
25FA:  CLRF   x3E
25FC:  MOVLW  01
25FE:  MOVWF  x3F
2600:  MOVLB  0
2602:  RCALL  23EA
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,8,2,1);  
2604:  MOVLW  05
2606:  MOVWF  FEA
2608:  MOVLW  1A
260A:  MOVWF  FE9
260C:  MOVFF  FF2,53A
2610:  BCF    FF2.7
2612:  MOVLW  00
2614:  CALL   06CA
2618:  TBLRD*-
261A:  TBLRD*+
261C:  MOVF   FF5,W
261E:  MOVWF  FEE
2620:  IORLW  00
2622:  BNZ   261A
2624:  MOVLB  5
2626:  BTFSC  x3A.7
2628:  BSF    FF2.7
262A:  MOVLW  05
262C:  MOVWF  x3B
262E:  MOVLW  1A
2630:  MOVWF  x3A
2632:  MOVLW  31
2634:  MOVWF  x3C
2636:  MOVLW  08
2638:  MOVWF  x3D
263A:  MOVLW  02
263C:  MOVWF  x3E
263E:  MOVLW  01
2640:  MOVWF  x3F
2642:  MOVLB  0
2644:  CALL   1812
....................    displayTiempo(Tsecadop[1],54,8,0,1);displayTiempo(Tsecadop[0],60,8,0,1); 
2648:  MOVFF  4B1,53B
264C:  MOVLW  36
264E:  MOVLB  5
2650:  MOVWF  x3C
2652:  MOVLW  08
2654:  MOVWF  x3D
2656:  CLRF   x3E
2658:  MOVLW  01
265A:  MOVWF  x3F
265C:  MOVLB  0
265E:  RCALL  23EA
2660:  MOVFF  4B0,53B
2664:  MOVLW  3C
2666:  MOVLB  5
2668:  MOVWF  x3C
266A:  MOVLW  08
266C:  MOVWF  x3D
266E:  CLRF   x3E
2670:  MOVLW  01
2672:  MOVWF  x3F
2674:  MOVLB  0
2676:  RCALL  23EA
.................... } 
2678:  RETLW  00
....................  
.................... void Leer_Sensor(int media) 
.................... { 
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    V0 = V0/39.40; 
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
....................    Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>media-1) 
....................    {l=0;} 
....................    promedio[l]=Temperature;l++; 
....................           
....................    for(h=0;h<=(media-1);h++) 
....................    { 
....................       Prom+=promedio[h]; 
....................    }  
....................    Prom=Prom/media;    
....................    Prom+=((float)Ajuste-(float)Ajusten); 
....................     
....................    //return Prom; 
.................... } 
....................  
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
1A38:  MOVLW  05
1A3A:  MOVLB  5
1A3C:  MOVWF  x39
1A3E:  MOVLW  40
1A40:  MOVWF  x38
1A42:  MOVFF  53C,549
1A46:  MOVLW  1F
1A48:  MOVWF  x4A
1A4A:  MOVLB  0
1A4C:  BRA    1958
....................     
....................    if(sombreado==1) 
1A4E:  MOVLB  5
1A50:  DECFSZ x3F,W
1A52:  BRA    1AA2
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
1A54:  MOVLW  12
1A56:  ADDWF  x3D,W
1A58:  MOVWF  x49
1A5A:  MOVLW  18
1A5C:  ADDWF  x3E,W
1A5E:  MOVWF  x4A
1A60:  MOVFF  53D,54C
1A64:  MOVFF  53E,54D
1A68:  MOVFF  549,54E
1A6C:  MOVWF  x4F
1A6E:  MOVLW  01
1A70:  MOVWF  x50
1A72:  MOVWF  x51
1A74:  MOVLB  0
1A76:  RCALL  1750
1A78:  MOVLW  02
1A7A:  MOVLB  5
1A7C:  ADDWF  x3D,W
1A7E:  MOVWF  x49
1A80:  MOVLW  01
1A82:  ADDWF  x3E,W
1A84:  MOVWF  x4A
1A86:  MOVFF  549,54B
1A8A:  MOVWF  x4C
1A8C:  MOVLW  05
1A8E:  MOVWF  x4E
1A90:  MOVLW  40
1A92:  MOVWF  x4D
1A94:  MOVLW  02
1A96:  MOVWF  x4F
1A98:  CLRF   x50
1A9A:  MOVLB  0
1A9C:  RCALL  145A
....................    else    
1A9E:  BRA    1AEC
1AA0:  MOVLB  5
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
1AA2:  MOVLW  12
1AA4:  ADDWF  x3D,W
1AA6:  MOVWF  x49
1AA8:  MOVLW  18
1AAA:  ADDWF  x3E,W
1AAC:  MOVWF  x4A
1AAE:  MOVFF  53D,54C
1AB2:  MOVFF  53E,54D
1AB6:  MOVFF  549,54E
1ABA:  MOVWF  x4F
1ABC:  CLRF   x50
1ABE:  CLRF   x51
1AC0:  MOVLB  0
1AC2:  RCALL  1750
1AC4:  MOVLW  02
1AC6:  MOVLB  5
1AC8:  ADDWF  x3D,W
1ACA:  MOVWF  x49
1ACC:  MOVLW  01
1ACE:  ADDWF  x3E,W
1AD0:  MOVWF  x4A
1AD2:  MOVFF  549,54B
1AD6:  MOVWF  x4C
1AD8:  MOVLW  05
1ADA:  MOVWF  x4E
1ADC:  MOVLW  40
1ADE:  MOVWF  x4D
1AE0:  MOVLW  02
1AE2:  MOVWF  x4F
1AE4:  MOVLW  01
1AE6:  MOVWF  x50
1AE8:  MOVLB  0
1AEA:  RCALL  145A
....................  
.................... } 
1AEC:  RETLW  00
....................  
.................... void main() 
.................... { 
*
2B40:  CLRF   FF8
2B42:  BCF    FD0.7
2B44:  BSF    07.7
2B46:  CLRF   FEA
2B48:  CLRF   FE9
2B4A:  BSF    FB8.3
2B4C:  MOVLW  E1
2B4E:  MOVWF  FAF
2B50:  MOVLW  04
2B52:  MOVWF  FB0
2B54:  MOVLW  A6
2B56:  MOVWF  FAC
2B58:  MOVLW  90
2B5A:  MOVWF  FAB
2B5C:  MOVLB  4
2B5E:  CLRF   x70
2B60:  MOVLW  01
2B62:  MOVWF  x71
2B64:  CLRF   x72
2B66:  CLRF   x73
2B68:  CLRF   x74
2B6A:  CLRF   x75
2B6C:  CLRF   x76
2B6E:  CLRF   x77
2B70:  CLRF   x78
2B72:  CLRF   x79
2B74:  CLRF   x7A
2B76:  CLRF   x7B
2B78:  BCF    x7C.0
2B7A:  BCF    x7C.1
2B7C:  BCF    x7C.2
2B7E:  BCF    x7C.3
2B80:  BSF    x7C.4
2B82:  BCF    x7C.5
2B84:  BCF    x7C.6
2B86:  BCF    x7C.7
2B88:  BCF    x7D.0
2B8A:  BCF    x7D.1
2B8C:  BCF    x7D.2
2B8E:  BCF    x7D.3
2B90:  BCF    x7D.4
2B92:  BCF    x7D.5
2B94:  BCF    x7D.6
2B96:  BCF    x7D.7
2B98:  BCF    x7E.0
2B9A:  BCF    x7E.1
2B9C:  BCF    x7E.2
2B9E:  BCF    x7E.3
2BA0:  BCF    x7E.4
2BA2:  BCF    x7E.5
2BA4:  BCF    x7E.6
2BA6:  CLRF   x7F
2BA8:  CLRF   x80
2BAA:  CLRF   x81
2BAC:  CLRF   x82
2BAE:  CLRF   x83
2BB0:  CLRF   x84
2BB2:  CLRF   x85
2BB4:  CLRF   x86
2BB6:  CLRF   x87
2BB8:  CLRF   x88
2BBA:  CLRF   x89
2BBC:  MOVWF  x8A
2BBE:  CLRF   x8B
2BC0:  CLRF   x8C
2BC2:  CLRF   x8D
2BC4:  CLRF   x8E
2BC6:  CLRF   x8F
2BC8:  MOVWF  x90
2BCA:  CLRF   x91
2BCC:  CLRF   x92
2BCE:  CLRF   x93
2BD0:  CLRF   x95
2BD2:  CLRF   x94
2BD4:  CLRF   x97
2BD6:  CLRF   x96
2BD8:  CLRF   x99
2BDA:  CLRF   x98
2BDC:  CLRF   x9B
2BDE:  MOVLW  0F
2BE0:  MOVWF  x9A
2BE2:  CLRF   x9D
2BE4:  CLRF   x9C
2BE6:  CLRF   x9F
2BE8:  CLRF   x9E
2BEA:  CLRF   xA3
2BEC:  CLRF   xA2
2BEE:  CLRF   xA1
2BF0:  CLRF   xA0
2BF2:  CLRF   xE9
2BF4:  CLRF   xE8
2BF6:  CLRF   xE7
2BF8:  CLRF   xE6
2BFA:  CLRF   xED
2BFC:  MOVLW  20
2BFE:  MOVWF  xEC
2C00:  MOVLW  41
2C02:  MOVWF  xEB
2C04:  MOVLW  8B
2C06:  MOVWF  xEA
2C08:  CLRF   xF5
2C0A:  CLRF   xF4
2C0C:  MOVLW  20
2C0E:  MOVWF  xF3
2C10:  MOVLW  82
2C12:  MOVWF  xF2
2C14:  CLRF   xF9
2C16:  CLRF   xF8
2C18:  CLRF   xF7
2C1A:  CLRF   xF6
2C1C:  CLRF   xFD
2C1E:  CLRF   xFC
2C20:  CLRF   xFB
2C22:  CLRF   xFA
2C24:  MOVLB  5
2C26:  CLRF   x01
2C28:  CLRF   x00
2C2A:  MOVLB  4
2C2C:  CLRF   xFF
2C2E:  CLRF   xFE
2C30:  MOVLB  5
2C32:  CLRF   x05
2C34:  CLRF   x04
2C36:  CLRF   x03
2C38:  CLRF   x02
2C3A:  CLRF   x09
2C3C:  CLRF   x08
2C3E:  CLRF   x07
2C40:  CLRF   x06
2C42:  CLRF   x0D
2C44:  CLRF   x0C
2C46:  MOVLW  48
2C48:  MOVWF  x0B
2C4A:  MOVLW  83
2C4C:  MOVWF  x0A
2C4E:  CLRF   x11
2C50:  CLRF   x10
2C52:  MOVLW  20
2C54:  MOVWF  x0F
2C56:  MOVLW  83
2C58:  MOVWF  x0E
2C5A:  CLRF   x15
2C5C:  CLRF   x14
2C5E:  CLRF   x13
2C60:  CLRF   x12
2C62:  CLRF   x19
2C64:  CLRF   x18
2C66:  CLRF   x17
2C68:  CLRF   x16
2C6A:  MOVF   FC1,W
2C6C:  ANDLW  C0
2C6E:  IORLW  0F
2C70:  MOVWF  FC1
2C72:  MOVLW  07
2C74:  MOVWF  FB4
2C76:  CLRF   16
2C78:  CLRF   17
2C7A:  MOVLW  6B
2C7C:  MOVLB  4
2C7E:  MOVWF  x1C
2C80:  MOVLW  50
2C82:  MOVWF  x1D
2C84:  MOVLW  61
2C86:  MOVWF  x1E
2C88:  CLRF   x1F
2C8A:  CLRF   x20
2C8C:  CLRF   x21
2C8E:  CLRF   x22
2C90:  CLRF   x23
2C92:  CLRF   x24
2C94:  CLRF   x25
2C96:  CLRF   x26
2C98:  CLRF   x27
2C9A:  CLRF   x28
2C9C:  CLRF   x29
2C9E:  CLRF   x2A
2CA0:  CLRF   x2B
2CA2:  CLRF   x2C
2CA4:  CLRF   x2D
2CA6:  CLRF   x2E
2CA8:  CLRF   x2F
2CAA:  CLRF   x30
2CAC:  CLRF   x31
2CAE:  CLRF   x32
2CB0:  CLRF   x33
2CB2:  CLRF   x34
2CB4:  CLRF   x35
2CB6:  CLRF   x36
2CB8:  CLRF   x37
2CBA:  CLRF   x38
2CBC:  CLRF   x39
2CBE:  CLRF   x3A
2CC0:  CLRF   x3B
2CC2:  CLRF   x3C
2CC4:  CLRF   x3D
2CC6:  CLRF   x3E
2CC8:  CLRF   x3F
2CCA:  CLRF   x40
2CCC:  CLRF   x41
2CCE:  CLRF   x42
2CD0:  CLRF   x43
2CD2:  CLRF   x44
2CD4:  CLRF   x45
2CD6:  CLRF   x46
2CD8:  CLRF   x47
2CDA:  CLRF   x48
2CDC:  CLRF   x49
2CDE:  CLRF   x4A
2CE0:  CLRF   x4B
2CE2:  CLRF   x4C
2CE4:  CLRF   x4D
2CE6:  CLRF   x4E
2CE8:  CLRF   x4F
2CEA:  CLRF   x50
2CEC:  CLRF   x51
2CEE:  CLRF   x52
2CF0:  CLRF   x53
2CF2:  CLRF   x54
2CF4:  CLRF   x55
2CF6:  CLRF   x56
2CF8:  CLRF   x57
2CFA:  CLRF   x58
2CFC:  CLRF   x59
2CFE:  CLRF   x5A
2D00:  CLRF   x5B
2D02:  CLRF   x5C
2D04:  CLRF   x5D
2D06:  CLRF   x5E
2D08:  CLRF   x5F
2D0A:  CLRF   x60
2D0C:  CLRF   x61
2D0E:  CLRF   x62
2D10:  CLRF   x63
2D12:  CLRF   x64
2D14:  CLRF   x65
2D16:  CLRF   x66
2D18:  CLRF   x67
2D1A:  CLRF   x68
2D1C:  CLRF   x69
2D1E:  CLRF   x6A
2D20:  CLRF   x6B
2D22:  CLRF   x6C
2D24:  CLRF   x6D
2D26:  CLRF   x6E
2D28:  CLRF   x6F
2D2A:  CLRF   xA4
2D2C:  CLRF   xA5
2D2E:  CLRF   xA6
2D30:  CLRF   xA7
2D32:  CLRF   xA8
2D34:  CLRF   xA9
2D36:  CLRF   xAA
2D38:  CLRF   xAB
2D3A:  CLRF   xAC
2D3C:  CLRF   xAD
2D3E:  CLRF   xAE
2D40:  CLRF   xAF
2D42:  CLRF   xB0
2D44:  CLRF   xB1
2D46:  CLRF   xB2
2D48:  CLRF   xB3
2D4A:  CLRF   xB4
2D4C:  CLRF   xB5
2D4E:  CLRF   xB6
2D50:  CLRF   xB7
2D52:  CLRF   xB8
2D54:  CLRF   xB9
2D56:  CLRF   xBA
2D58:  CLRF   xBB
2D5A:  CLRF   xE3
2D5C:  CLRF   xE4
2D5E:  CLRF   xE5
2D60:  MOVLB  5
2D62:  CLRF   x38
2D64:  CLRF   x39
....................    enable_interrupts(INT_RDA);      //Habilita interrupción por recepción RS23    
2D66:  BSF    F9D.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2D68:  MOVLW  85
2D6A:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2D6C:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN3); 
2D6E:  MOVF   FC1,W
2D70:  ANDLW  C0
2D72:  IORLW  0B
2D74:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2D76:  BCF    FC0.0
2D78:  BSF    FC0.1
2D7A:  BCF    FC0.2
2D7C:  BSF    FC0.7
2D7E:  BSF    FC2.0
....................    sensores(0); 
2D80:  CLRF   x3A
2D82:  MOVLB  0
2D84:  GOTO   114A
....................    output_d(0);    
2D88:  CLRF   F95
2D8A:  CLRF   F8C
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
2D8C:  MOVFF  FF2,53A
2D90:  BCF    FF2.7
2D92:  CLRF   FA9
2D94:  BCF    FA6.6
2D96:  BCF    FA6.7
2D98:  BSF    FA6.0
2D9A:  MOVF   FA8,W
2D9C:  MOVLB  5
2D9E:  BTFSC  x3A.7
2DA0:  BSF    FF2.7
2DA2:  MOVLB  4
2DA4:  MOVWF  xA8
2DA6:  MOVFF  FF2,53A
2DAA:  BCF    FF2.7
2DAC:  MOVLW  01
2DAE:  MOVWF  FA9
2DB0:  BCF    FA6.6
2DB2:  BCF    FA6.7
2DB4:  BSF    FA6.0
2DB6:  MOVF   FA8,W
2DB8:  MOVLB  5
2DBA:  BTFSC  x3A.7
2DBC:  BSF    FF2.7
2DBE:  MOVLB  4
2DC0:  MOVWF  xA9
2DC2:  MOVFF  FF2,53A
2DC6:  BCF    FF2.7
2DC8:  MOVLW  02
2DCA:  MOVWF  FA9
2DCC:  BCF    FA6.6
2DCE:  BCF    FA6.7
2DD0:  BSF    FA6.0
2DD2:  MOVF   FA8,W
2DD4:  MOVLB  5
2DD6:  BTFSC  x3A.7
2DD8:  BSF    FF2.7
2DDA:  MOVLB  4
2DDC:  MOVWF  xAA
2DDE:  MOVFF  FF2,53A
2DE2:  BCF    FF2.7
2DE4:  MOVLW  03
2DE6:  MOVWF  FA9
2DE8:  BCF    FA6.6
2DEA:  BCF    FA6.7
2DEC:  BSF    FA6.0
2DEE:  MOVF   FA8,W
2DF0:  MOVLB  5
2DF2:  BTFSC  x3A.7
2DF4:  BSF    FF2.7
2DF6:  MOVLB  4
2DF8:  MOVWF  xAB
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
2DFA:  MOVFF  FF2,53A
2DFE:  BCF    FF2.7
2E00:  MOVLW  04
2E02:  MOVWF  FA9
2E04:  BCF    FA6.6
2E06:  BCF    FA6.7
2E08:  BSF    FA6.0
2E0A:  MOVF   FA8,W
2E0C:  MOVLB  5
2E0E:  BTFSC  x3A.7
2E10:  BSF    FF2.7
2E12:  MOVLB  4
2E14:  MOVWF  xB0
2E16:  MOVFF  FF2,53A
2E1A:  BCF    FF2.7
2E1C:  MOVLW  05
2E1E:  MOVWF  FA9
2E20:  BCF    FA6.6
2E22:  BCF    FA6.7
2E24:  BSF    FA6.0
2E26:  MOVF   FA8,W
2E28:  MOVLB  5
2E2A:  BTFSC  x3A.7
2E2C:  BSF    FF2.7
2E2E:  MOVLB  4
2E30:  MOVWF  xB1
2E32:  MOVFF  FF2,53A
2E36:  BCF    FF2.7
2E38:  MOVLW  06
2E3A:  MOVWF  FA9
2E3C:  BCF    FA6.6
2E3E:  BCF    FA6.7
2E40:  BSF    FA6.0
2E42:  MOVF   FA8,W
2E44:  MOVLB  5
2E46:  BTFSC  x3A.7
2E48:  BSF    FF2.7
2E4A:  MOVLB  4
2E4C:  MOVWF  xB2
2E4E:  MOVFF  FF2,53A
2E52:  BCF    FF2.7
2E54:  MOVLW  07
2E56:  MOVWF  FA9
2E58:  BCF    FA6.6
2E5A:  BCF    FA6.7
2E5C:  BSF    FA6.0
2E5E:  MOVF   FA8,W
2E60:  MOVLB  5
2E62:  BTFSC  x3A.7
2E64:  BSF    FF2.7
2E66:  MOVLB  4
2E68:  MOVWF  xB3
2E6A:  MOVFF  FF2,53A
2E6E:  BCF    FF2.7
2E70:  MOVLW  08
2E72:  MOVWF  FA9
2E74:  BCF    FA6.6
2E76:  BCF    FA6.7
2E78:  BSF    FA6.0
2E7A:  MOVF   FA8,W
2E7C:  MOVLB  5
2E7E:  BTFSC  x3A.7
2E80:  BSF    FF2.7
2E82:  MOVLB  4
2E84:  MOVWF  x8E
....................    Nivel=read_eeprom(9); 
2E86:  MOVFF  FF2,53A
2E8A:  BCF    FF2.7
2E8C:  MOVLW  09
2E8E:  MOVWF  FA9
2E90:  BCF    FA6.6
2E92:  BCF    FA6.7
2E94:  BSF    FA6.0
2E96:  MOVF   FA8,W
2E98:  MOVLB  5
2E9A:  BTFSC  x3A.7
2E9C:  BSF    FF2.7
2E9E:  MOVLB  4
2EA0:  CLRF   x9D
2EA2:  MOVWF  x9C
....................    Password[0]=read_eeprom(10);Password[1]=read_eeprom(11);Password[2]=read_eeprom(12);Password[3]=read_eeprom(13); 
2EA4:  MOVFF  FF2,53A
2EA8:  BCF    FF2.7
2EAA:  MOVLW  0A
2EAC:  MOVWF  FA9
2EAE:  BCF    FA6.6
2EB0:  BCF    FA6.7
2EB2:  BSF    FA6.0
2EB4:  MOVF   FA8,W
2EB6:  MOVLB  5
2EB8:  BTFSC  x3A.7
2EBA:  BSF    FF2.7
2EBC:  MOVLB  4
2EBE:  MOVWF  xB8
2EC0:  MOVFF  FF2,53A
2EC4:  BCF    FF2.7
2EC6:  MOVLW  0B
2EC8:  MOVWF  FA9
2ECA:  BCF    FA6.6
2ECC:  BCF    FA6.7
2ECE:  BSF    FA6.0
2ED0:  MOVF   FA8,W
2ED2:  MOVLB  5
2ED4:  BTFSC  x3A.7
2ED6:  BSF    FF2.7
2ED8:  MOVLB  4
2EDA:  MOVWF  xB9
2EDC:  MOVFF  FF2,53A
2EE0:  BCF    FF2.7
2EE2:  MOVLW  0C
2EE4:  MOVWF  FA9
2EE6:  BCF    FA6.6
2EE8:  BCF    FA6.7
2EEA:  BSF    FA6.0
2EEC:  MOVF   FA8,W
2EEE:  MOVLB  5
2EF0:  BTFSC  x3A.7
2EF2:  BSF    FF2.7
2EF4:  MOVLB  4
2EF6:  MOVWF  xBA
2EF8:  MOVFF  FF2,53A
2EFC:  BCF    FF2.7
2EFE:  MOVLW  0D
2F00:  MOVWF  FA9
2F02:  BCF    FA6.6
2F04:  BCF    FA6.7
2F06:  BSF    FA6.0
2F08:  MOVF   FA8,W
2F0A:  MOVLB  5
2F0C:  BTFSC  x3A.7
2F0E:  BSF    FF2.7
2F10:  MOVLB  4
2F12:  MOVWF  xBB
....................    enable_interrupts(global); 
2F14:  MOVLW  C0
2F16:  IORWF  FF2,F
....................    //Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12);Ajuste=read_eeprom(13);Ajusten=read_eeprom(14); 
....................    //Ganancia2=read_eeprom(15);Minutos=read_eeprom(20);  
....................     
....................    glcd_init(ON);             //Inicializa la glcd 
2F18:  MOVLW  01
2F1A:  MOVLB  5
2F1C:  MOVWF  x3A
2F1E:  MOVLB  0
2F20:  GOTO   12F4
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2F24:  MOVLB  5
2F26:  CLRF   x3B
2F28:  MOVLB  0
2F2A:  CALL   11E2
....................    strcpy(Menus.Letra,"JP Inglobal"); 
2F2E:  MOVLW  05
2F30:  MOVWF  FEA
2F32:  MOVLW  1A
2F34:  MOVWF  FE9
2F36:  MOVFF  FF2,53A
2F3A:  BCF    FF2.7
2F3C:  MOVLW  00
2F3E:  CALL   06E6
2F42:  TBLRD*-
2F44:  TBLRD*+
2F46:  MOVF   FF5,W
2F48:  MOVWF  FEE
2F4A:  IORLW  00
2F4C:  BNZ   2F44
2F4E:  MOVLB  5
2F50:  BTFSC  x3A.7
2F52:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,0,0,2);      
2F54:  MOVLW  05
2F56:  MOVWF  x3B
2F58:  MOVLW  1A
2F5A:  MOVWF  x3A
2F5C:  CLRF   x3C
2F5E:  CLRF   x3D
2F60:  CLRF   x3E
2F62:  MOVLW  02
2F64:  MOVWF  x3F
2F66:  MOVLB  0
2F68:  CALL   1812
....................    strcpy(Menus.Letra,"Autoclave Vertical"); 
2F6C:  MOVLW  05
2F6E:  MOVWF  FEA
2F70:  MOVLW  1A
2F72:  MOVWF  FE9
2F74:  MOVFF  FF2,53A
2F78:  BCF    FF2.7
2F7A:  MOVLW  00
2F7C:  CALL   070C
2F80:  TBLRD*-
2F82:  TBLRD*+
2F84:  MOVF   FF5,W
2F86:  MOVWF  FEE
2F88:  IORLW  00
2F8A:  BNZ   2F82
2F8C:  MOVLB  5
2F8E:  BTFSC  x3A.7
2F90:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,20,0,1);        
2F92:  MOVLW  05
2F94:  MOVWF  x3B
2F96:  MOVLW  1A
2F98:  MOVWF  x3A
2F9A:  CLRF   x3C
2F9C:  MOVLW  14
2F9E:  MOVWF  x3D
2FA0:  CLRF   x3E
2FA2:  MOVLW  01
2FA4:  MOVWF  x3F
2FA6:  MOVLB  0
2FA8:  CALL   1812
....................    strcpy(Menus.Letra," 150 Litros  "); 
2FAC:  MOVLW  05
2FAE:  MOVWF  FEA
2FB0:  MOVLW  1A
2FB2:  MOVWF  FE9
2FB4:  MOVFF  FF2,53A
2FB8:  BCF    FF2.7
2FBA:  MOVLW  00
2FBC:  CALL   073A
2FC0:  TBLRD*-
2FC2:  TBLRD*+
2FC4:  MOVF   FF5,W
2FC6:  MOVWF  FEE
2FC8:  IORLW  00
2FCA:  BNZ   2FC2
2FCC:  MOVLB  5
2FCE:  BTFSC  x3A.7
2FD0:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,35,0,2); 
2FD2:  MOVLW  05
2FD4:  MOVWF  x3B
2FD6:  MOVLW  1A
2FD8:  MOVWF  x3A
2FDA:  CLRF   x3C
2FDC:  MOVLW  23
2FDE:  MOVWF  x3D
2FE0:  CLRF   x3E
2FE2:  MOVLW  02
2FE4:  MOVWF  x3F
2FE6:  MOVLB  0
2FE8:  CALL   1812
....................    delay_ms(1000); 
2FEC:  MOVLW  04
2FEE:  MOVLB  5
2FF0:  MOVWF  x3A
2FF2:  MOVLW  FA
2FF4:  MOVWF  x3F
2FF6:  MOVLB  0
2FF8:  CALL   10EA
2FFC:  MOVLB  5
2FFE:  DECFSZ x3A,F
3000:  BRA    2FF2
....................    delay_ms(1000); 
3002:  MOVLW  04
3004:  MOVWF  x3A
3006:  MOVLW  FA
3008:  MOVWF  x3F
300A:  MOVLB  0
300C:  CALL   10EA
3010:  MOVLB  5
3012:  DECFSZ x3A,F
3014:  BRA    3006
....................     
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
3016:  CLRF   x3B
3018:  MOVLB  0
301A:  CALL   11E2
....................    displayContrasena(Contrasena[0],20,30,1); 
301E:  MOVFF  4B4,53C
3022:  MOVLW  14
3024:  MOVLB  5
3026:  MOVWF  x3D
3028:  MOVLW  1E
302A:  MOVWF  x3E
302C:  MOVLW  01
302E:  MOVWF  x3F
3030:  MOVLB  0
3032:  CALL   1A38
....................    displayContrasena(Contrasena[1],40,30,0); 
3036:  MOVFF  4B5,53C
303A:  MOVLW  28
303C:  MOVLB  5
303E:  MOVWF  x3D
3040:  MOVLW  1E
3042:  MOVWF  x3E
3044:  CLRF   x3F
3046:  MOVLB  0
3048:  CALL   1A38
....................    displayContrasena(Contrasena[2],60,30,0); 
304C:  MOVFF  4B6,53C
3050:  MOVLW  3C
3052:  MOVLB  5
3054:  MOVWF  x3D
3056:  MOVLW  1E
3058:  MOVWF  x3E
305A:  CLRF   x3F
305C:  MOVLB  0
305E:  CALL   1A38
....................    displayContrasena(Contrasena[3],80,30,0); 
3062:  MOVFF  4B7,53C
3066:  MOVLW  50
3068:  MOVLB  5
306A:  MOVWF  x3D
306C:  MOVLW  1E
306E:  MOVWF  x3E
3070:  CLRF   x3F
3072:  MOVLB  0
3074:  CALL   1A38
....................    EnviarCodigo(); 
3078:  CALL   1AF8
....................    delay_ms(500); 
307C:  MOVLW  02
307E:  MOVLB  5
3080:  MOVWF  x3A
3082:  MOVLW  FA
3084:  MOVWF  x3F
3086:  MOVLB  0
3088:  CALL   10EA
308C:  MOVLB  5
308E:  DECFSZ x3A,F
3090:  BRA    3082
....................    Determina(); 
3092:  MOVLB  0
3094:  CALL   1F50
....................    delay_ms(500); 
3098:  MOVLW  02
309A:  MOVLB  5
309C:  MOVWF  x3A
309E:  MOVLW  FA
30A0:  MOVWF  x3F
30A2:  MOVLB  0
30A4:  CALL   10EA
30A8:  MOVLB  5
30AA:  DECFSZ x3A,F
30AC:  BRA    309E
....................    Parada=1; 
30AE:  MOVLW  01
30B0:  MOVLB  4
30B2:  MOVWF  x71
....................    while(true) 
....................    { 
....................       glcd_update(); 
30B4:  MOVLB  0
30B6:  CALL   123C
....................       if(CadenaRecibida==1) 
30BA:  MOVLB  4
30BC:  BTFSS  x7D.3
30BE:  BRA    30CE
....................       { 
....................          Determina(); 
30C0:  MOVLB  0
30C2:  CALL   1F50
....................          EnviarCodigo(); 
30C6:  CALL   1AF8
....................          CadenaRecibida=0; 
30CA:  MOVLB  4
30CC:  BCF    x7D.3
....................       } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
30CE:  MOVF   x89,F
30D0:  BTFSS  FD8.2
30D2:  BRA    3668
....................        
....................       strcpy(Menus.Letra,"Clave"); 
30D4:  MOVLW  05
30D6:  MOVWF  FEA
30D8:  MOVLW  1A
30DA:  MOVWF  FE9
30DC:  MOVFF  FF2,53A
30E0:  BCF    FF2.7
30E2:  MOVLW  00
30E4:  MOVLB  0
30E6:  CALL   0762
30EA:  TBLRD*-
30EC:  TBLRD*+
30EE:  MOVF   FF5,W
30F0:  MOVWF  FEE
30F2:  IORLW  00
30F4:  BNZ   30EC
30F6:  MOVLB  5
30F8:  BTFSC  x3A.7
30FA:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
30FC:  MOVLW  05
30FE:  MOVWF  x3B
3100:  MOVLW  1A
3102:  MOVWF  x3A
3104:  MOVLW  1E
3106:  MOVWF  x3C
3108:  CLRF   x3D
310A:  MOVLW  01
310C:  MOVWF  x3E
310E:  MOVLW  02
3110:  MOVWF  x3F
3112:  MOVLB  0
3114:  CALL   1812
....................        
....................       if(UP)//Si oprime hacia arriba 
3118:  BSF    F92.5
311A:  BTFSS  F80.5
311C:  BRA    31F4
....................       { 
....................          if(Flanco == 0) 
311E:  MOVLB  4
3120:  BTFSC  x7C.0
3122:  BRA    31F2
....................          { 
....................             Flanco = 1;delay_ms(30); 
3124:  BSF    x7C.0
3126:  MOVLW  1E
3128:  MOVLB  5
312A:  MOVWF  x3F
312C:  MOVLB  0
312E:  CALL   10EA
....................             for(i=1;i<=4;i++) 
3132:  MOVLW  01
3134:  MOVLB  4
3136:  MOVWF  x8D
3138:  MOVF   x8D,W
313A:  SUBLW  04
313C:  BNC   31F2
....................             { 
....................                if(unidad==i) 
313E:  MOVF   x8D,W
3140:  SUBWF  x8A,W
3142:  BNZ   31BA
....................                { 
....................                   Contrasena[i-1]++; 
3144:  MOVLW  01
3146:  SUBWF  x8D,W
3148:  CLRF   03
314A:  ADDLW  B4
314C:  MOVWF  FE9
314E:  MOVLW  04
3150:  ADDWFC 03,W
3152:  MOVWF  FEA
3154:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
3156:  MOVLW  01
3158:  SUBWF  x8D,W
315A:  CLRF   03
315C:  ADDLW  B4
315E:  MOVWF  FE9
3160:  MOVLW  04
3162:  ADDWFC 03,W
3164:  MOVWF  FEA
3166:  BTFSC  FEF.7
3168:  BRA    3182
316A:  MOVF   FEF,W
316C:  SUBLW  09
316E:  BC    3182
....................                   { 
....................                      Contrasena[i-1]=0; 
3170:  MOVLW  01
3172:  SUBWF  x8D,W
3174:  CLRF   03
3176:  ADDLW  B4
3178:  MOVWF  FE9
317A:  MOVLW  04
317C:  ADDWFC 03,W
317E:  MOVWF  FEA
3180:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
3182:  MOVLW  01
3184:  SUBWF  x8D,W
3186:  CLRF   03
3188:  ADDLW  B4
318A:  MOVWF  FE9
318C:  MOVLW  04
318E:  ADDWFC 03,W
3190:  MOVWF  FEA
3192:  MOVFF  FEF,53A
3196:  MOVF   x8D,W
3198:  MULLW  14
319A:  MOVFF  FF3,53B
319E:  MOVLB  5
31A0:  MOVFF  53A,53C
31A4:  MOVFF  53B,53D
31A8:  MOVLW  1E
31AA:  MOVWF  x3E
31AC:  MOVLW  01
31AE:  MOVWF  x3F
31B0:  MOVLB  0
31B2:  CALL   1A38
....................                } 
....................                else 
31B6:  BRA    31EC
31B8:  MOVLB  4
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
31BA:  MOVLW  01
31BC:  SUBWF  x8D,W
31BE:  CLRF   03
31C0:  ADDLW  B4
31C2:  MOVWF  FE9
31C4:  MOVLW  04
31C6:  ADDWFC 03,W
31C8:  MOVWF  FEA
31CA:  MOVFF  FEF,53A
31CE:  MOVF   x8D,W
31D0:  MULLW  14
31D2:  MOVFF  FF3,53B
31D6:  MOVLB  5
31D8:  MOVFF  53A,53C
31DC:  MOVFF  53B,53D
31E0:  MOVLW  1E
31E2:  MOVWF  x3E
31E4:  CLRF   x3F
31E6:  MOVLB  0
31E8:  CALL   1A38
....................                } 
....................             } 
31EC:  MOVLB  4
31EE:  INCF   x8D,F
31F0:  BRA    3138
....................          } 
....................       } 
....................          else 
31F2:  BRA    31F8
....................             {Flanco = 0;} 
31F4:  MOVLB  4
31F6:  BCF    x7C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31F8:  BSF    F96.0
31FA:  BTFSS  F84.0
31FC:  BRA    32D0
....................       { 
....................          if(Flanco2 == 0) 
31FE:  BTFSC  x7C.2
3200:  BRA    32CE
....................             {Flanco2 = 1;delay_ms(30); 
3202:  BSF    x7C.2
3204:  MOVLW  1E
3206:  MOVLB  5
3208:  MOVWF  x3F
320A:  MOVLB  0
320C:  CALL   10EA
....................                for(i=1;i<=4;i++) 
3210:  MOVLW  01
3212:  MOVLB  4
3214:  MOVWF  x8D
3216:  MOVF   x8D,W
3218:  SUBLW  04
321A:  BNC   32CE
....................                { 
....................                   if(unidad==i) 
321C:  MOVF   x8D,W
321E:  SUBWF  x8A,W
3220:  BNZ   3296
....................                   {Contrasena[i-1]--;  
3222:  MOVLW  01
3224:  SUBWF  x8D,W
3226:  CLRF   03
3228:  ADDLW  B4
322A:  MOVWF  FE9
322C:  MOVLW  04
322E:  ADDWFC 03,W
3230:  MOVWF  FEA
3232:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
3234:  MOVLW  01
3236:  SUBWF  x8D,W
3238:  CLRF   03
323A:  ADDLW  B4
323C:  MOVWF  FE9
323E:  MOVLW  04
3240:  ADDWFC 03,W
3242:  MOVWF  FEA
3244:  BTFSC  FEF.7
3246:  BRA    324A
3248:  BRA    325E
....................                         {Contrasena[i-1]=9;} 
324A:  MOVLW  01
324C:  SUBWF  x8D,W
324E:  CLRF   03
3250:  ADDLW  B4
3252:  MOVWF  FE9
3254:  MOVLW  04
3256:  ADDWFC 03,W
3258:  MOVWF  FEA
325A:  MOVLW  09
325C:  MOVWF  FEF
....................                    displayContrasena(Contrasena[i-1],i*20,30,1);} 
325E:  MOVLW  01
3260:  SUBWF  x8D,W
3262:  CLRF   03
3264:  ADDLW  B4
3266:  MOVWF  FE9
3268:  MOVLW  04
326A:  ADDWFC 03,W
326C:  MOVWF  FEA
326E:  MOVFF  FEF,53A
3272:  MOVF   x8D,W
3274:  MULLW  14
3276:  MOVFF  FF3,53B
327A:  MOVLB  5
327C:  MOVFF  53A,53C
3280:  MOVFF  53B,53D
3284:  MOVLW  1E
3286:  MOVWF  x3E
3288:  MOVLW  01
328A:  MOVWF  x3F
328C:  MOVLB  0
328E:  CALL   1A38
....................                   else 
3292:  BRA    32C8
3294:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
3296:  MOVLW  01
3298:  SUBWF  x8D,W
329A:  CLRF   03
329C:  ADDLW  B4
329E:  MOVWF  FE9
32A0:  MOVLW  04
32A2:  ADDWFC 03,W
32A4:  MOVWF  FEA
32A6:  MOVFF  FEF,53A
32AA:  MOVF   x8D,W
32AC:  MULLW  14
32AE:  MOVFF  FF3,53B
32B2:  MOVLB  5
32B4:  MOVFF  53A,53C
32B8:  MOVFF  53B,53D
32BC:  MOVLW  1E
32BE:  MOVWF  x3E
32C0:  CLRF   x3F
32C2:  MOVLB  0
32C4:  CALL   1A38
....................                }       
32C8:  MOVLB  4
32CA:  INCF   x8D,F
32CC:  BRA    3216
....................             }      
....................       } 
....................          else 
32CE:  BRA    32D2
....................             {Flanco2 = 0;}   
32D0:  BCF    x7C.2
....................              
....................       if(RIGHT)//Si oprime RIGHT 
32D2:  BSF    F96.1
32D4:  BTFSS  F84.1
32D6:  BRA    3370
....................       { 
....................          if(Flanco1 == 0) 
32D8:  BTFSC  x7C.1
32DA:  BRA    336E
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
32DC:  BSF    x7C.1
32DE:  MOVLW  1E
32E0:  MOVLB  5
32E2:  MOVWF  x3F
32E4:  MOVLB  0
32E6:  CALL   10EA
32EA:  MOVLB  4
32EC:  INCF   x8A,F
....................                for(i=1;i<=4;i++) 
32EE:  MOVLW  01
32F0:  MOVWF  x8D
32F2:  MOVF   x8D,W
32F4:  SUBLW  04
32F6:  BNC   336E
....................                { 
....................                   if(unidad==i) 
32F8:  MOVF   x8D,W
32FA:  SUBWF  x8A,W
32FC:  BNZ   3336
....................                   {displayContrasena(Contrasena[i-1],i*20,30,1);} 
32FE:  MOVLW  01
3300:  SUBWF  x8D,W
3302:  CLRF   03
3304:  ADDLW  B4
3306:  MOVWF  FE9
3308:  MOVLW  04
330A:  ADDWFC 03,W
330C:  MOVWF  FEA
330E:  MOVFF  FEF,53A
3312:  MOVF   x8D,W
3314:  MULLW  14
3316:  MOVFF  FF3,53B
331A:  MOVLB  5
331C:  MOVFF  53A,53C
3320:  MOVFF  53B,53D
3324:  MOVLW  1E
3326:  MOVWF  x3E
3328:  MOVLW  01
332A:  MOVWF  x3F
332C:  MOVLB  0
332E:  CALL   1A38
....................                   else 
3332:  BRA    3368
3334:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
3336:  MOVLW  01
3338:  SUBWF  x8D,W
333A:  CLRF   03
333C:  ADDLW  B4
333E:  MOVWF  FE9
3340:  MOVLW  04
3342:  ADDWFC 03,W
3344:  MOVWF  FEA
3346:  MOVFF  FEF,53A
334A:  MOVF   x8D,W
334C:  MULLW  14
334E:  MOVFF  FF3,53B
3352:  MOVLB  5
3354:  MOVFF  53A,53C
3358:  MOVFF  53B,53D
335C:  MOVLW  1E
335E:  MOVWF  x3E
3360:  CLRF   x3F
3362:  MOVLB  0
3364:  CALL   1A38
....................                } 
3368:  MOVLB  4
336A:  INCF   x8D,F
336C:  BRA    32F2
....................             } 
....................       } 
....................          else 
336E:  BRA    3372
....................             {Flanco1 = 0;}   
3370:  BCF    x7C.1
....................      
....................       if(unidad>4) 
3372:  MOVF   x8A,W
3374:  SUBLW  04
3376:  BTFSC  FD8.0
3378:  BRA    3668
....................       {glcd_fillScreen(OFF);unidad=4; 
337A:  MOVLB  5
337C:  CLRF   x3B
337E:  MOVLB  0
3380:  CALL   11E2
3384:  MOVLW  04
3386:  MOVLB  4
3388:  MOVWF  x8A
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
338A:  MOVF   xB4,W
338C:  SUBLW  03
338E:  BNZ   3476
3390:  MOVF   xB5,W
3392:  SUBLW  08
3394:  BNZ   3476
3396:  MOVF   xB6,W
3398:  SUBLW  09
339A:  BNZ   3476
339C:  MOVF   xB7,W
339E:  SUBLW  02
33A0:  BNZ   3476
....................             {write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
33A2:  MOVLW  0A
33A4:  MOVWF  FA9
33A6:  CLRF   FA8
33A8:  BCF    FA6.6
33AA:  BCF    FA6.7
33AC:  BSF    FA6.2
33AE:  MOVF   FF2,W
33B0:  MOVWF  00
33B2:  BCF    FF2.7
33B4:  MOVLB  F
33B6:  MOVLW  55
33B8:  MOVWF  FA7
33BA:  MOVLW  AA
33BC:  MOVWF  FA7
33BE:  BSF    FA6.1
33C0:  BTFSC  FA6.1
33C2:  BRA    33C0
33C4:  BCF    FA6.2
33C6:  MOVF   00,W
33C8:  IORWF  FF2,F
33CA:  MOVLW  14
33CC:  MOVLB  5
33CE:  MOVWF  x3F
33D0:  MOVLB  0
33D2:  CALL   10EA
33D6:  MOVLW  0B
33D8:  MOVWF  FA9
33DA:  CLRF   FA8
33DC:  BCF    FA6.6
33DE:  BCF    FA6.7
33E0:  BSF    FA6.2
33E2:  MOVF   FF2,W
33E4:  MOVWF  00
33E6:  BCF    FF2.7
33E8:  MOVLB  F
33EA:  MOVLW  55
33EC:  MOVWF  FA7
33EE:  MOVLW  AA
33F0:  MOVWF  FA7
33F2:  BSF    FA6.1
33F4:  BTFSC  FA6.1
33F6:  BRA    33F4
33F8:  BCF    FA6.2
33FA:  MOVF   00,W
33FC:  IORWF  FF2,F
33FE:  MOVLW  14
3400:  MOVLB  5
3402:  MOVWF  x3F
3404:  MOVLB  0
3406:  CALL   10EA
....................              write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
340A:  MOVLW  0C
340C:  MOVWF  FA9
340E:  CLRF   FA8
3410:  BCF    FA6.6
3412:  BCF    FA6.7
3414:  BSF    FA6.2
3416:  MOVF   FF2,W
3418:  MOVWF  00
341A:  BCF    FF2.7
341C:  MOVLB  F
341E:  MOVLW  55
3420:  MOVWF  FA7
3422:  MOVLW  AA
3424:  MOVWF  FA7
3426:  BSF    FA6.1
3428:  BTFSC  FA6.1
342A:  BRA    3428
342C:  BCF    FA6.2
342E:  MOVF   00,W
3430:  IORWF  FF2,F
3432:  MOVLW  14
3434:  MOVLB  5
3436:  MOVWF  x3F
3438:  MOVLB  0
343A:  CALL   10EA
343E:  MOVLW  0D
3440:  MOVWF  FA9
3442:  CLRF   FA8
3444:  BCF    FA6.6
3446:  BCF    FA6.7
3448:  BSF    FA6.2
344A:  MOVF   FF2,W
344C:  MOVWF  00
344E:  BCF    FF2.7
3450:  MOVLB  F
3452:  MOVLW  55
3454:  MOVWF  FA7
3456:  MOVLW  AA
3458:  MOVWF  FA7
345A:  BSF    FA6.1
345C:  BTFSC  FA6.1
345E:  BRA    345C
3460:  BCF    FA6.2
3462:  MOVF   00,W
3464:  IORWF  FF2,F
3466:  MOVLW  14
3468:  MOVLB  5
346A:  MOVWF  x3F
346C:  MOVLB  0
346E:  CALL   10EA
....................              reset_cpu();}         
3472:  RESET
3474:  MOVLB  4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
3476:  MOVF   xB8,W
3478:  SUBWF  xB4,W
347A:  BNZ   354C
347C:  MOVF   xB9,W
347E:  SUBWF  xB5,W
3480:  BNZ   354C
3482:  MOVF   xBA,W
3484:  SUBWF  xB6,W
3486:  BNZ   354C
3488:  MOVF   xBB,W
348A:  SUBWF  xB7,W
348C:  BNZ   354C
....................          { 
....................             glcd_fillScreen(OFF); 
348E:  MOVLB  5
3490:  CLRF   x3B
3492:  MOVLB  0
3494:  CALL   11E2
....................             strcpy(Menus.Letra,"Clave"); 
3498:  MOVLW  05
349A:  MOVWF  FEA
349C:  MOVLW  1A
349E:  MOVWF  FE9
34A0:  MOVFF  FF2,53A
34A4:  BCF    FF2.7
34A6:  MOVLW  00
34A8:  CALL   0762
34AC:  TBLRD*-
34AE:  TBLRD*+
34B0:  MOVF   FF5,W
34B2:  MOVWF  FEE
34B4:  IORLW  00
34B6:  BNZ   34AE
34B8:  MOVLB  5
34BA:  BTFSC  x3A.7
34BC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
34BE:  MOVLW  05
34C0:  MOVWF  x3B
34C2:  MOVLW  1A
34C4:  MOVWF  x3A
34C6:  MOVLW  1E
34C8:  MOVWF  x3C
34CA:  CLRF   x3D
34CC:  CLRF   x3E
34CE:  MOVLW  02
34D0:  MOVWF  x3F
34D2:  MOVLB  0
34D4:  CALL   1812
....................             strcpy(Menus.Letra,"Correcta"); 
34D8:  MOVLW  05
34DA:  MOVWF  FEA
34DC:  MOVLW  1A
34DE:  MOVWF  FE9
34E0:  MOVFF  FF2,53A
34E4:  BCF    FF2.7
34E6:  MOVLW  00
34E8:  CALL   0782
34EC:  TBLRD*-
34EE:  TBLRD*+
34F0:  MOVF   FF5,W
34F2:  MOVWF  FEE
34F4:  IORLW  00
34F6:  BNZ   34EE
34F8:  MOVLB  5
34FA:  BTFSC  x3A.7
34FC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
34FE:  MOVLW  05
3500:  MOVWF  x3B
3502:  MOVLW  1A
3504:  MOVWF  x3A
3506:  MOVLW  0F
3508:  MOVWF  x3C
350A:  MOVLW  1E
350C:  MOVWF  x3D
350E:  CLRF   x3E
3510:  MOVLW  02
3512:  MOVWF  x3F
3514:  MOVLB  0
3516:  CALL   1812
....................             Menu=1;glcd_update();delay_ms(1000); 
351A:  MOVLW  01
351C:  MOVLB  4
351E:  MOVWF  x89
3520:  MOVLB  0
3522:  CALL   123C
3526:  MOVLW  04
3528:  MOVLB  5
352A:  MOVWF  x3A
352C:  MOVLW  FA
352E:  MOVWF  x3F
3530:  MOVLB  0
3532:  CALL   10EA
3536:  MOVLB  5
3538:  DECFSZ x3A,F
353A:  BRA    352C
....................             glcd_fillScreen(OFF);unidad=1; 
353C:  CLRF   x3B
353E:  MOVLB  0
3540:  CALL   11E2
3544:  MOVLW  01
3546:  MOVLB  4
3548:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
354A:  BRA    3668
....................          { 
....................             glcd_fillScreen(OFF); 
354C:  MOVLB  5
354E:  CLRF   x3B
3550:  MOVLB  0
3552:  CALL   11E2
....................             strcpy(Menus.Letra,"Clave"); 
3556:  MOVLW  05
3558:  MOVWF  FEA
355A:  MOVLW  1A
355C:  MOVWF  FE9
355E:  MOVFF  FF2,53A
3562:  BCF    FF2.7
3564:  MOVLW  00
3566:  CALL   0762
356A:  TBLRD*-
356C:  TBLRD*+
356E:  MOVF   FF5,W
3570:  MOVWF  FEE
3572:  IORLW  00
3574:  BNZ   356C
3576:  MOVLB  5
3578:  BTFSC  x3A.7
357A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
357C:  MOVLW  05
357E:  MOVWF  x3B
3580:  MOVLW  1A
3582:  MOVWF  x3A
3584:  MOVLW  1E
3586:  MOVWF  x3C
3588:  CLRF   x3D
358A:  CLRF   x3E
358C:  MOVLW  02
358E:  MOVWF  x3F
3590:  MOVLB  0
3592:  CALL   1812
....................             strcpy(Menus.Letra,"Incorrecta"); 
3596:  MOVLW  05
3598:  MOVWF  FEA
359A:  MOVLW  1A
359C:  MOVWF  FE9
359E:  MOVFF  FF2,53A
35A2:  BCF    FF2.7
35A4:  MOVLW  00
35A6:  CALL   07A6
35AA:  TBLRD*-
35AC:  TBLRD*+
35AE:  MOVF   FF5,W
35B0:  MOVWF  FEE
35B2:  IORLW  00
35B4:  BNZ   35AC
35B6:  MOVLB  5
35B8:  BTFSC  x3A.7
35BA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
35BC:  MOVLW  05
35BE:  MOVWF  x3B
35C0:  MOVLW  1A
35C2:  MOVWF  x3A
35C4:  CLRF   x3C
35C6:  MOVLW  1E
35C8:  MOVWF  x3D
35CA:  CLRF   x3E
35CC:  MOVLW  02
35CE:  MOVWF  x3F
35D0:  MOVLB  0
35D2:  CALL   1812
....................             Menu=0;glcd_update();delay_ms(1000); 
35D6:  MOVLB  4
35D8:  CLRF   x89
35DA:  MOVLB  0
35DC:  CALL   123C
35E0:  MOVLW  04
35E2:  MOVLB  5
35E4:  MOVWF  x3A
35E6:  MOVLW  FA
35E8:  MOVWF  x3F
35EA:  MOVLB  0
35EC:  CALL   10EA
35F0:  MOVLB  5
35F2:  DECFSZ x3A,F
35F4:  BRA    35E6
....................             glcd_fillScreen(OFF);unidad=1; 
35F6:  CLRF   x3B
35F8:  MOVLB  0
35FA:  CALL   11E2
35FE:  MOVLW  01
3600:  MOVLB  4
3602:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
3604:  CLRF   xB4
3606:  CLRF   xB5
3608:  CLRF   xB6
360A:  CLRF   xB7
....................             displayContrasena(Contrasena[0],20,30,1); 
360C:  MOVFF  4B4,53C
3610:  MOVLW  14
3612:  MOVLB  5
3614:  MOVWF  x3D
3616:  MOVLW  1E
3618:  MOVWF  x3E
361A:  MOVLW  01
361C:  MOVWF  x3F
361E:  MOVLB  0
3620:  CALL   1A38
....................             displayContrasena(Contrasena[1],40,30,0); 
3624:  MOVFF  4B5,53C
3628:  MOVLW  28
362A:  MOVLB  5
362C:  MOVWF  x3D
362E:  MOVLW  1E
3630:  MOVWF  x3E
3632:  CLRF   x3F
3634:  MOVLB  0
3636:  CALL   1A38
....................             displayContrasena(Contrasena[2],60,30,0); 
363A:  MOVFF  4B6,53C
363E:  MOVLW  3C
3640:  MOVLB  5
3642:  MOVWF  x3D
3644:  MOVLW  1E
3646:  MOVWF  x3E
3648:  CLRF   x3F
364A:  MOVLB  0
364C:  CALL   1A38
....................             displayContrasena(Contrasena[3],80,30,0); 
3650:  MOVFF  4B7,53C
3654:  MOVLW  50
3656:  MOVLB  5
3658:  MOVWF  x3D
365A:  MOVLW  1E
365C:  MOVWF  x3E
365E:  CLRF   x3F
3660:  MOVLB  0
3662:  CALL   1A38
3666:  MOVLB  4
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1){ //Menu Principal.       
3668:  DECFSZ x89,W
366A:  BRA    3AA0
....................        
....................       if(visual==1) 
366C:  BTFSS  x7C.4
366E:  BRA    3A26
....................       { 
....................          if(Opcion>6) 
3670:  MOVF   x90,W
3672:  SUBLW  06
3674:  BC    367A
....................          {Opcion=1;} 
3676:  MOVLW  01
3678:  MOVWF  x90
....................          if(Opcion<1) 
367A:  MOVF   x90,F
367C:  BNZ   3682
....................          {Opcion=6;} 
367E:  MOVLW  06
3680:  MOVWF  x90
....................           
....................          strcpy(Menus.Letra,"Menu Principal"); 
3682:  MOVLW  05
3684:  MOVWF  FEA
3686:  MOVLW  1A
3688:  MOVWF  FE9
368A:  MOVFF  FF2,53A
368E:  BCF    FF2.7
3690:  MOVLW  00
3692:  MOVLB  0
3694:  CALL   07CC
3698:  TBLRD*-
369A:  TBLRD*+
369C:  MOVF   FF5,W
369E:  MOVWF  FEE
36A0:  IORLW  00
36A2:  BNZ   369A
36A4:  MOVLB  5
36A6:  BTFSC  x3A.7
36A8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,1); 
36AA:  MOVLW  05
36AC:  MOVWF  x3B
36AE:  MOVLW  1A
36B0:  MOVWF  x3A
36B2:  MOVLW  1E
36B4:  MOVWF  x3C
36B6:  CLRF   x3D
36B8:  MOVLW  01
36BA:  MOVWF  x3E
36BC:  MOVWF  x3F
36BE:  MOVLB  0
36C0:  CALL   1812
....................        
....................          if(Opcion==1)    
36C4:  MOVLB  4
36C6:  DECFSZ x90,W
36C8:  BRA    3710
....................             {strcpy(Menus.Letra,"Preciclo"); 
36CA:  MOVLW  05
36CC:  MOVWF  FEA
36CE:  MOVLW  1A
36D0:  MOVWF  FE9
36D2:  MOVFF  FF2,53A
36D6:  BCF    FF2.7
36D8:  MOVLW  00
36DA:  MOVLB  0
36DC:  CALL   07F6
36E0:  TBLRD*-
36E2:  TBLRD*+
36E4:  MOVF   FF5,W
36E6:  MOVWF  FEE
36E8:  IORLW  00
36EA:  BNZ   36E2
36EC:  MOVLB  5
36EE:  BTFSC  x3A.7
36F0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,1,1);} 
36F2:  MOVLW  05
36F4:  MOVWF  x3B
36F6:  MOVLW  1A
36F8:  MOVWF  x3A
36FA:  CLRF   x3C
36FC:  MOVLW  0A
36FE:  MOVWF  x3D
3700:  MOVLW  01
3702:  MOVWF  x3E
3704:  MOVWF  x3F
3706:  MOVLB  0
3708:  CALL   1812
....................          else 
370C:  BRA    3752
370E:  MOVLB  4
....................             {strcpy(Menus.Letra,"Preciclo"); 
3710:  MOVLW  05
3712:  MOVWF  FEA
3714:  MOVLW  1A
3716:  MOVWF  FE9
3718:  MOVFF  FF2,53A
371C:  BCF    FF2.7
371E:  MOVLW  00
3720:  MOVLB  0
3722:  CALL   07F6
3726:  TBLRD*-
3728:  TBLRD*+
372A:  MOVF   FF5,W
372C:  MOVWF  FEE
372E:  IORLW  00
3730:  BNZ   3728
3732:  MOVLB  5
3734:  BTFSC  x3A.7
3736:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,0,1);} 
3738:  MOVLW  05
373A:  MOVWF  x3B
373C:  MOVLW  1A
373E:  MOVWF  x3A
3740:  CLRF   x3C
3742:  MOVLW  0A
3744:  MOVWF  x3D
3746:  CLRF   x3E
3748:  MOVLW  01
374A:  MOVWF  x3F
374C:  MOVLB  0
374E:  CALL   1812
....................           
....................          if(Opcion==2)    
3752:  MOVLB  4
3754:  MOVF   x90,W
3756:  SUBLW  02
3758:  BNZ   37A0
....................             {strcpy(Menus.Letra,"Liquidos"); 
375A:  MOVLW  05
375C:  MOVWF  FEA
375E:  MOVLW  1A
3760:  MOVWF  FE9
3762:  MOVFF  FF2,53A
3766:  BCF    FF2.7
3768:  MOVLW  00
376A:  MOVLB  0
376C:  CALL   081A
3770:  TBLRD*-
3772:  TBLRD*+
3774:  MOVF   FF5,W
3776:  MOVWF  FEE
3778:  IORLW  00
377A:  BNZ   3772
377C:  MOVLB  5
377E:  BTFSC  x3A.7
3780:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,1,1);} 
3782:  MOVLW  05
3784:  MOVWF  x3B
3786:  MOVLW  1A
3788:  MOVWF  x3A
378A:  CLRF   x3C
378C:  MOVLW  13
378E:  MOVWF  x3D
3790:  MOVLW  01
3792:  MOVWF  x3E
3794:  MOVWF  x3F
3796:  MOVLB  0
3798:  CALL   1812
....................          else 
379C:  BRA    37E2
379E:  MOVLB  4
....................             {strcpy(Menus.Letra,"Liquidos"); 
37A0:  MOVLW  05
37A2:  MOVWF  FEA
37A4:  MOVLW  1A
37A6:  MOVWF  FE9
37A8:  MOVFF  FF2,53A
37AC:  BCF    FF2.7
37AE:  MOVLW  00
37B0:  MOVLB  0
37B2:  CALL   081A
37B6:  TBLRD*-
37B8:  TBLRD*+
37BA:  MOVF   FF5,W
37BC:  MOVWF  FEE
37BE:  IORLW  00
37C0:  BNZ   37B8
37C2:  MOVLB  5
37C4:  BTFSC  x3A.7
37C6:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,0,1);}    
37C8:  MOVLW  05
37CA:  MOVWF  x3B
37CC:  MOVLW  1A
37CE:  MOVWF  x3A
37D0:  CLRF   x3C
37D2:  MOVLW  13
37D4:  MOVWF  x3D
37D6:  CLRF   x3E
37D8:  MOVLW  01
37DA:  MOVWF  x3F
37DC:  MOVLB  0
37DE:  CALL   1812
....................              
....................           if(Opcion==3)    
37E2:  MOVLB  4
37E4:  MOVF   x90,W
37E6:  SUBLW  03
37E8:  BNZ   3830
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
37EA:  MOVLW  05
37EC:  MOVWF  FEA
37EE:  MOVLW  1A
37F0:  MOVWF  FE9
37F2:  MOVFF  FF2,53A
37F6:  BCF    FF2.7
37F8:  MOVLW  00
37FA:  MOVLB  0
37FC:  CALL   083E
3800:  TBLRD*-
3802:  TBLRD*+
3804:  MOVF   FF5,W
3806:  MOVWF  FEE
3808:  IORLW  00
380A:  BNZ   3802
380C:  MOVLB  5
380E:  BTFSC  x3A.7
3810:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,1,1);} 
3812:  MOVLW  05
3814:  MOVWF  x3B
3816:  MOVLW  1A
3818:  MOVWF  x3A
381A:  CLRF   x3C
381C:  MOVLW  1C
381E:  MOVWF  x3D
3820:  MOVLW  01
3822:  MOVWF  x3E
3824:  MOVWF  x3F
3826:  MOVLB  0
3828:  CALL   1812
....................          else 
382C:  BRA    3872
382E:  MOVLB  4
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
3830:  MOVLW  05
3832:  MOVWF  FEA
3834:  MOVLW  1A
3836:  MOVWF  FE9
3838:  MOVFF  FF2,53A
383C:  BCF    FF2.7
383E:  MOVLW  00
3840:  MOVLB  0
3842:  CALL   083E
3846:  TBLRD*-
3848:  TBLRD*+
384A:  MOVF   FF5,W
384C:  MOVWF  FEE
384E:  IORLW  00
3850:  BNZ   3848
3852:  MOVLB  5
3854:  BTFSC  x3A.7
3856:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,0,1);} 
3858:  MOVLW  05
385A:  MOVWF  x3B
385C:  MOVLW  1A
385E:  MOVWF  x3A
3860:  CLRF   x3C
3862:  MOVLW  1C
3864:  MOVWF  x3D
3866:  CLRF   x3E
3868:  MOVLW  01
386A:  MOVWF  x3F
386C:  MOVLB  0
386E:  CALL   1812
....................              
....................          if(Opcion==4)    
3872:  MOVLB  4
3874:  MOVF   x90,W
3876:  SUBLW  04
3878:  BNZ   38C0
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
387A:  MOVLW  05
387C:  MOVWF  FEA
387E:  MOVLW  1A
3880:  MOVWF  FE9
3882:  MOVFF  FF2,53A
3886:  BCF    FF2.7
3888:  MOVLW  00
388A:  MOVLB  0
388C:  CALL   086C
3890:  TBLRD*-
3892:  TBLRD*+
3894:  MOVF   FF5,W
3896:  MOVWF  FEE
3898:  IORLW  00
389A:  BNZ   3892
389C:  MOVLB  5
389E:  BTFSC  x3A.7
38A0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,1,1);} 
38A2:  MOVLW  05
38A4:  MOVWF  x3B
38A6:  MOVLW  1A
38A8:  MOVWF  x3A
38AA:  CLRF   x3C
38AC:  MOVLW  25
38AE:  MOVWF  x3D
38B0:  MOVLW  01
38B2:  MOVWF  x3E
38B4:  MOVWF  x3F
38B6:  MOVLB  0
38B8:  CALL   1812
....................          else 
38BC:  BRA    3902
38BE:  MOVLB  4
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
38C0:  MOVLW  05
38C2:  MOVWF  FEA
38C4:  MOVLW  1A
38C6:  MOVWF  FE9
38C8:  MOVFF  FF2,53A
38CC:  BCF    FF2.7
38CE:  MOVLW  00
38D0:  MOVLB  0
38D2:  CALL   086C
38D6:  TBLRD*-
38D8:  TBLRD*+
38DA:  MOVF   FF5,W
38DC:  MOVWF  FEE
38DE:  IORLW  00
38E0:  BNZ   38D8
38E2:  MOVLB  5
38E4:  BTFSC  x3A.7
38E6:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,0,1);}    
38E8:  MOVLW  05
38EA:  MOVWF  x3B
38EC:  MOVLW  1A
38EE:  MOVWF  x3A
38F0:  CLRF   x3C
38F2:  MOVLW  25
38F4:  MOVWF  x3D
38F6:  CLRF   x3E
38F8:  MOVLW  01
38FA:  MOVWF  x3F
38FC:  MOVLB  0
38FE:  CALL   1812
....................              
....................          if(Opcion==5)    
3902:  MOVLB  4
3904:  MOVF   x90,W
3906:  SUBLW  05
3908:  BNZ   3950
....................             {strcpy(Menus.Letra,"Personalizado"); 
390A:  MOVLW  05
390C:  MOVWF  FEA
390E:  MOVLW  1A
3910:  MOVWF  FE9
3912:  MOVFF  FF2,53A
3916:  BCF    FF2.7
3918:  MOVLW  00
391A:  MOVLB  0
391C:  CALL   089C
3920:  TBLRD*-
3922:  TBLRD*+
3924:  MOVF   FF5,W
3926:  MOVWF  FEE
3928:  IORLW  00
392A:  BNZ   3922
392C:  MOVLB  5
392E:  BTFSC  x3A.7
3930:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,1,1);} 
3932:  MOVLW  05
3934:  MOVWF  x3B
3936:  MOVLW  1A
3938:  MOVWF  x3A
393A:  CLRF   x3C
393C:  MOVLW  2E
393E:  MOVWF  x3D
3940:  MOVLW  01
3942:  MOVWF  x3E
3944:  MOVWF  x3F
3946:  MOVLB  0
3948:  CALL   1812
....................          else 
394C:  BRA    3992
394E:  MOVLB  4
....................             {strcpy(Menus.Letra,"Personalizado"); 
3950:  MOVLW  05
3952:  MOVWF  FEA
3954:  MOVLW  1A
3956:  MOVWF  FE9
3958:  MOVFF  FF2,53A
395C:  BCF    FF2.7
395E:  MOVLW  00
3960:  MOVLB  0
3962:  CALL   089C
3966:  TBLRD*-
3968:  TBLRD*+
396A:  MOVF   FF5,W
396C:  MOVWF  FEE
396E:  IORLW  00
3970:  BNZ   3968
3972:  MOVLB  5
3974:  BTFSC  x3A.7
3976:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,0,1);}   
3978:  MOVLW  05
397A:  MOVWF  x3B
397C:  MOVLW  1A
397E:  MOVWF  x3A
3980:  CLRF   x3C
3982:  MOVLW  2E
3984:  MOVWF  x3D
3986:  CLRF   x3E
3988:  MOVLW  01
398A:  MOVWF  x3F
398C:  MOVLB  0
398E:  CALL   1812
....................              
....................          if(Opcion==6)    
3992:  MOVLB  4
3994:  MOVF   x90,W
3996:  SUBLW  06
3998:  BNZ   39E0
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
399A:  MOVLW  05
399C:  MOVWF  FEA
399E:  MOVLW  1A
39A0:  MOVWF  FE9
39A2:  MOVFF  FF2,53A
39A6:  BCF    FF2.7
39A8:  MOVLW  00
39AA:  MOVLB  0
39AC:  CALL   08C4
39B0:  TBLRD*-
39B2:  TBLRD*+
39B4:  MOVF   FF5,W
39B6:  MOVWF  FEE
39B8:  IORLW  00
39BA:  BNZ   39B2
39BC:  MOVLB  5
39BE:  BTFSC  x3A.7
39C0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,1,1);} 
39C2:  MOVLW  05
39C4:  MOVWF  x3B
39C6:  MOVLW  1A
39C8:  MOVWF  x3A
39CA:  CLRF   x3C
39CC:  MOVLW  37
39CE:  MOVWF  x3D
39D0:  MOVLW  01
39D2:  MOVWF  x3E
39D4:  MOVWF  x3F
39D6:  MOVLB  0
39D8:  CALL   1812
....................          else 
39DC:  BRA    3A22
39DE:  MOVLB  4
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
39E0:  MOVLW  05
39E2:  MOVWF  FEA
39E4:  MOVLW  1A
39E6:  MOVWF  FE9
39E8:  MOVFF  FF2,53A
39EC:  BCF    FF2.7
39EE:  MOVLW  00
39F0:  MOVLB  0
39F2:  CALL   08C4
39F6:  TBLRD*-
39F8:  TBLRD*+
39FA:  MOVF   FF5,W
39FC:  MOVWF  FEE
39FE:  IORLW  00
3A00:  BNZ   39F8
3A02:  MOVLB  5
3A04:  BTFSC  x3A.7
3A06:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,0,1);}      
3A08:  MOVLW  05
3A0A:  MOVWF  x3B
3A0C:  MOVLW  1A
3A0E:  MOVWF  x3A
3A10:  CLRF   x3C
3A12:  MOVLW  37
3A14:  MOVWF  x3D
3A16:  CLRF   x3E
3A18:  MOVLW  01
3A1A:  MOVWF  x3F
3A1C:  MOVLB  0
3A1E:  CALL   1812
....................             visual=0; 
3A22:  MOVLB  4
3A24:  BCF    x7C.4
....................       } 
....................       if(UP)//Si oprime hacia arriba 
3A26:  BSF    F92.5
3A28:  BTFSS  F80.5
3A2A:  BRA    3A46
....................          {  if(Flanco == 0)  
3A2C:  BTFSC  x7C.0
3A2E:  BRA    3A44
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
3A30:  BSF    x7C.0
3A32:  MOVLW  1E
3A34:  MOVLB  5
3A36:  MOVWF  x3F
3A38:  MOVLB  0
3A3A:  CALL   10EA
3A3E:  MOVLB  4
3A40:  DECF   x90,F
3A42:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A44:  BRA    3A48
....................                {Flanco = 0;} 
3A46:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
3A48:  BSF    F96.0
3A4A:  BTFSS  F84.0
3A4C:  BRA    3A68
....................          {  if(Flanco2 == 0)  
3A4E:  BTFSC  x7C.2
3A50:  BRA    3A66
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
3A52:  BSF    x7C.2
3A54:  MOVLW  1E
3A56:  MOVLB  5
3A58:  MOVWF  x3F
3A5A:  MOVLB  0
3A5C:  CALL   10EA
3A60:  MOVLB  4
3A62:  INCF   x90,F
3A64:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
3A66:  BRA    3A6A
....................                {Flanco2 = 0;}   
3A68:  BCF    x7C.2
....................                 
....................        if(RIGHT)//Si oprime SET 
3A6A:  BSF    F96.1
3A6C:  BTFSS  F84.1
3A6E:  BRA    3A9E
....................          {  if(Flanco1 == 0)  
3A70:  BTFSC  x7C.1
3A72:  BRA    3A9C
....................                {Flanco1 = 1;delay_ms(30);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);visual=1; 
3A74:  BSF    x7C.1
3A76:  MOVLW  1E
3A78:  MOVLB  5
3A7A:  MOVWF  x3F
3A7C:  MOVLB  0
3A7E:  CALL   10EA
3A82:  MOVLW  03
3A84:  MOVLB  4
3A86:  ADDWF  x90,W
3A88:  MOVWF  x89
3A8A:  MOVLW  01
3A8C:  MOVWF  x90
3A8E:  MOVLB  5
3A90:  CLRF   x3B
3A92:  MOVLB  0
3A94:  CALL   11E2
3A98:  MOVLB  4
3A9A:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A9C:  BRA    3AA0
....................                {Flanco1 = 0;}   
3A9E:  BCF    x7C.1
....................          /*       
....................          if(LEFT)//Si oprime boton de Toma. 
....................          {delay_ms(700);Menu=2;glcd_fillscreen(OFF);}*/ 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
.................... //-Sub-Menus de selección de proceso. 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==4){ // Menu de Pre-ciclo 
3AA0:  MOVF   x89,W
3AA2:  SUBLW  04
3AA4:  BTFSS  FD8.2
3AA6:  BRA    3DCC
....................        
....................       if(visual==1) 
3AA8:  BTFSS  x7C.4
3AAA:  BRA    3BFE
....................       { 
....................          glcd_imagen(2); //Guante 
3AAC:  MOVLW  02
3AAE:  MOVLB  5
3AB0:  MOVWF  x3A
3AB2:  MOVLB  0
3AB4:  CALL   203E
....................          strcpy(Menus.Letra,"Preciclo"); 
3AB8:  MOVLW  05
3ABA:  MOVWF  FEA
3ABC:  MOVLW  1A
3ABE:  MOVWF  FE9
3AC0:  MOVFF  FF2,53A
3AC4:  BCF    FF2.7
3AC6:  MOVLW  00
3AC8:  CALL   07F6
3ACC:  TBLRD*-
3ACE:  TBLRD*+
3AD0:  MOVF   FF5,W
3AD2:  MOVWF  FEE
3AD4:  IORLW  00
3AD6:  BNZ   3ACE
3AD8:  MOVLB  5
3ADA:  BTFSC  x3A.7
3ADC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3ADE:  MOVLW  05
3AE0:  MOVWF  x3B
3AE2:  MOVLW  1A
3AE4:  MOVWF  x3A
3AE6:  MOVLW  14
3AE8:  MOVWF  x3C
3AEA:  CLRF   x3D
3AEC:  MOVLW  01
3AEE:  MOVWF  x3E
3AF0:  MOVLW  02
3AF2:  MOVWF  x3F
3AF4:  MOVLB  0
3AF6:  CALL   1812
....................          
....................          strcpy(Menus.Letra,"Preciclo"); 
3AFA:  MOVLW  05
3AFC:  MOVWF  FEA
3AFE:  MOVLW  1A
3B00:  MOVWF  FE9
3B02:  MOVFF  FF2,53A
3B06:  BCF    FF2.7
3B08:  MOVLW  00
3B0A:  CALL   07F6
3B0E:  TBLRD*-
3B10:  TBLRD*+
3B12:  MOVF   FF5,W
3B14:  MOVWF  FEE
3B16:  IORLW  00
3B18:  BNZ   3B10
3B1A:  MOVLB  5
3B1C:  BTFSC  x3A.7
3B1E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,0,1); 
3B20:  MOVLW  05
3B22:  MOVWF  x3B
3B24:  MOVLW  1A
3B26:  MOVWF  x3A
3B28:  MOVLW  07
3B2A:  MOVWF  x3C
3B2C:  MOVLW  37
3B2E:  MOVWF  x3D
3B30:  CLRF   x3E
3B32:  MOVLW  01
3B34:  MOVWF  x3F
3B36:  MOVLB  0
3B38:  CALL   1812
....................           
....................          strcpy(Menus.Letra,"Temperatura:105 C"); 
3B3C:  MOVLW  05
3B3E:  MOVWF  FEA
3B40:  MOVLW  1A
3B42:  MOVWF  FE9
3B44:  MOVFF  FF2,53A
3B48:  BCF    FF2.7
3B4A:  MOVLW  00
3B4C:  CALL   08EC
3B50:  TBLRD*-
3B52:  TBLRD*+
3B54:  MOVF   FF5,W
3B56:  MOVWF  FEE
3B58:  IORLW  00
3B5A:  BNZ   3B52
3B5C:  MOVLB  5
3B5E:  BTFSC  x3A.7
3B60:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3B62:  MOVLW  05
3B64:  MOVWF  x3B
3B66:  MOVLW  1A
3B68:  MOVWF  x3A
3B6A:  CLRF   x3C
3B6C:  MOVWF  x3D
3B6E:  CLRF   x3E
3B70:  MOVLW  01
3B72:  MOVWF  x3F
3B74:  MOVLB  0
3B76:  CALL   1812
....................          strcpy(Menus.Letra,"T. Esterilizacion:5m"); 
3B7A:  MOVLW  05
3B7C:  MOVWF  FEA
3B7E:  MOVLW  1A
3B80:  MOVWF  FE9
3B82:  MOVFF  FF2,53A
3B86:  BCF    FF2.7
3B88:  MOVLW  00
3B8A:  CALL   0918
3B8E:  TBLRD*-
3B90:  TBLRD*+
3B92:  MOVF   FF5,W
3B94:  MOVWF  FEE
3B96:  IORLW  00
3B98:  BNZ   3B90
3B9A:  MOVLB  5
3B9C:  BTFSC  x3A.7
3B9E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3BA0:  MOVLW  05
3BA2:  MOVWF  x3B
3BA4:  MOVLW  1A
3BA6:  MOVWF  x3A
3BA8:  CLRF   x3C
3BAA:  MOVLW  24
3BAC:  MOVWF  x3D
3BAE:  CLRF   x3E
3BB0:  MOVLW  01
3BB2:  MOVWF  x3F
3BB4:  MOVLB  0
3BB6:  CALL   1812
....................          strcpy(Menus.Letra,"T. Secado= 5m"); 
3BBA:  MOVLW  05
3BBC:  MOVWF  FEA
3BBE:  MOVLW  1A
3BC0:  MOVWF  FE9
3BC2:  MOVFF  FF2,53A
3BC6:  BCF    FF2.7
3BC8:  MOVLW  00
3BCA:  CALL   0948
3BCE:  TBLRD*-
3BD0:  TBLRD*+
3BD2:  MOVF   FF5,W
3BD4:  MOVWF  FEE
3BD6:  IORLW  00
3BD8:  BNZ   3BD0
3BDA:  MOVLB  5
3BDC:  BTFSC  x3A.7
3BDE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1); 
3BE0:  MOVLW  05
3BE2:  MOVWF  x3B
3BE4:  MOVLW  1A
3BE6:  MOVWF  x3A
3BE8:  CLRF   x3C
3BEA:  MOVLW  2E
3BEC:  MOVWF  x3D
3BEE:  CLRF   x3E
3BF0:  MOVLW  01
3BF2:  MOVWF  x3F
3BF4:  MOVLB  0
3BF6:  CALL   1812
....................          visual=0; 
3BFA:  MOVLB  4
3BFC:  BCF    x7C.4
....................       } 
....................        
....................       if(LEFT)// Si oprime Izquier|da 
3BFE:  BSF    F96.2
3C00:  BTFSS  F84.2
3C02:  BRA    3C24
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3C04:  MOVLW  1E
3C06:  MOVLB  5
3C08:  MOVWF  x3F
3C0A:  MOVLB  0
3C0C:  CALL   10EA
3C10:  MOVLW  01
3C12:  MOVLB  4
3C14:  MOVWF  x89
3C16:  MOVLB  5
3C18:  CLRF   x3B
3C1A:  MOVLB  0
3C1C:  CALL   11E2
3C20:  MOVLB  4
3C22:  BSF    x7C.4
....................       } 
....................  
....................       if(RIGHT)// Si oprime derecha 
3C24:  BSF    F96.1
3C26:  BTFSS  F84.1
3C28:  BRA    3DCC
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0;visual=1; 
3C2A:  CLRF   xA8
3C2C:  CLRF   xA9
3C2E:  MOVLW  05
3C30:  MOVWF  xAA
3C32:  CLRF   xAB
3C34:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=0;minutos=0;Setpoint=105;Menu=20; 
3C36:  CLRF   xB0
3C38:  CLRF   xB1
3C3A:  MOVWF  xB2
3C3C:  CLRF   xB3
3C3E:  CLRF   x9B
3C40:  CLRF   x9A
3C42:  MOVLW  69
3C44:  MOVWF  x8E
3C46:  MOVLW  14
3C48:  MOVWF  x89
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
3C4A:  MOVWF  x89
3C4C:  MOVLW  0F
3C4E:  MOVLB  5
3C50:  MOVWF  x4C
3C52:  MOVLW  12
3C54:  MOVWF  x4D
3C56:  MOVLW  1E
3C58:  MOVWF  x4E
3C5A:  MOVLW  35
3C5C:  MOVWF  x4F
3C5E:  CLRF   x50
3C60:  MOVLW  01
3C62:  MOVWF  x51
3C64:  MOVLB  0
3C66:  CALL   1750
3C6A:  MOVLB  4
3C6C:  CLRF   x92
3C6E:  MOVLW  C0
3C70:  IORWF  FF2,F
3C72:  MOVLB  5
3C74:  CLRF   x3B
3C76:  MOVLB  0
3C78:  CALL   11E2
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
3C7C:  MOVLW  05
3C7E:  MOVWF  FEA
3C80:  MOVLW  1A
3C82:  MOVWF  FE9
3C84:  MOVFF  FF2,53A
3C88:  BCF    FF2.7
3C8A:  MOVLW  00
3C8C:  CALL   0970
3C90:  TBLRD*-
3C92:  TBLRD*+
3C94:  MOVF   FF5,W
3C96:  MOVWF  FEE
3C98:  IORLW  00
3C9A:  BNZ   3C92
3C9C:  MOVLB  5
3C9E:  BTFSC  x3A.7
3CA0:  BSF    FF2.7
3CA2:  MOVLW  05
3CA4:  MOVWF  x3B
3CA6:  MOVLW  1A
3CA8:  MOVWF  x3A
3CAA:  CLRF   x3C
3CAC:  MOVLW  37
3CAE:  MOVWF  x3D
3CB0:  MOVLW  02
3CB2:  MOVWF  x3E
3CB4:  MOVLW  01
3CB6:  MOVWF  x3F
3CB8:  MOVLB  0
3CBA:  CALL   1812
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
3CBE:  MOVLW  0F
3CC0:  MOVLB  5
3CC2:  MOVWF  x4C
3CC4:  MOVLW  12
3CC6:  MOVWF  x4D
3CC8:  MOVLW  1E
3CCA:  MOVWF  x4E
3CCC:  MOVLW  35
3CCE:  MOVWF  x4F
3CD0:  CLRF   x50
3CD2:  MOVLW  01
3CD4:  MOVWF  x51
3CD6:  MOVLB  0
3CD8:  CALL   1750
....................          glcd_imagen(5); 
3CDC:  MOVLW  05
3CDE:  MOVLB  5
3CE0:  MOVWF  x3A
3CE2:  MOVLB  0
3CE4:  CALL   203E
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
3CE8:  MOVLW  05
3CEA:  MOVWF  FEA
3CEC:  MOVLW  1A
3CEE:  MOVWF  FE9
3CF0:  MOVFF  FF2,53A
3CF4:  BCF    FF2.7
3CF6:  MOVLW  00
3CF8:  CALL   0996
3CFC:  TBLRD*-
3CFE:  TBLRD*+
3D00:  MOVF   FF5,W
3D02:  MOVWF  FEE
3D04:  IORLW  00
3D06:  BNZ   3CFE
3D08:  MOVLB  5
3D0A:  BTFSC  x3A.7
3D0C:  BSF    FF2.7
3D0E:  MOVLW  05
3D10:  MOVWF  x3B
3D12:  MOVLW  1A
3D14:  MOVWF  x3A
3D16:  CLRF   x3C
3D18:  CLRF   x3D
3D1A:  MOVLW  02
3D1C:  MOVWF  x3E
3D1E:  MOVLW  01
3D20:  MOVWF  x3F
3D22:  MOVLB  0
3D24:  CALL   1812
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
3D28:  MOVLW  05
3D2A:  MOVWF  FEA
3D2C:  MOVLW  1A
3D2E:  MOVWF  FE9
3D30:  MOVFF  FF2,53A
3D34:  BCF    FF2.7
3D36:  MOVLW  00
3D38:  CALL   09B8
3D3C:  TBLRD*-
3D3E:  TBLRD*+
3D40:  MOVF   FF5,W
3D42:  MOVWF  FEE
3D44:  IORLW  00
3D46:  BNZ   3D3E
3D48:  MOVLB  5
3D4A:  BTFSC  x3A.7
3D4C:  BSF    FF2.7
3D4E:  MOVLW  05
3D50:  MOVWF  x3B
3D52:  MOVLW  1A
3D54:  MOVWF  x3A
3D56:  CLRF   x3C
3D58:  MOVLW  08
3D5A:  MOVWF  x3D
3D5C:  MOVLW  02
3D5E:  MOVWF  x3E
3D60:  MOVLW  01
3D62:  MOVWF  x3F
3D64:  MOVLB  0
3D66:  CALL   1812
....................          glcd_circle(95,40,2,NO,ON); 
3D6A:  MOVLW  5F
3D6C:  MOVLB  5
3D6E:  MOVWF  x3A
3D70:  MOVLW  28
3D72:  MOVWF  x3B
3D74:  MOVLW  02
3D76:  MOVWF  x3C
3D78:  CLRF   x3D
3D7A:  MOVLW  01
3D7C:  MOVWF  x3E
3D7E:  MOVLB  0
3D80:  CALL   213A
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
3D84:  MOVLW  05
3D86:  MOVWF  FEA
3D88:  MOVLW  1A
3D8A:  MOVWF  FE9
3D8C:  MOVFF  FF2,53A
3D90:  BCF    FF2.7
3D92:  MOVLW  00
3D94:  CALL   09DA
3D98:  TBLRD*-
3D9A:  TBLRD*+
3D9C:  MOVF   FF5,W
3D9E:  MOVWF  FEE
3DA0:  IORLW  00
3DA2:  BNZ   3D9A
3DA4:  MOVLB  5
3DA6:  BTFSC  x3A.7
3DA8:  BSF    FF2.7
3DAA:  MOVLW  05
3DAC:  MOVWF  x3B
3DAE:  MOVLW  1A
3DB0:  MOVWF  x3A
3DB2:  MOVLW  66
3DB4:  MOVWF  x3C
3DB6:  MOVLW  28
3DB8:  MOVWF  x3D
3DBA:  MOVLW  02
3DBC:  MOVWF  x3E
3DBE:  MOVWF  x3F
3DC0:  MOVLB  0
3DC2:  CALL   1812
....................          MuestraTiemposProgramados(); 
3DC6:  CALL   253A
3DCA:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==5){ // Menu de Liquido       
3DCC:  MOVF   x89,W
3DCE:  SUBLW  05
3DD0:  BTFSS  FD8.2
3DD2:  BRA    3F96
....................        
....................       if(visual==1) 
3DD4:  BTFSS  x7C.4
3DD6:  BRA    3F2C
....................       { 
....................          glcd_imagen(4); //ErlenMeyer con Liquido 
3DD8:  MOVLW  04
3DDA:  MOVLB  5
3DDC:  MOVWF  x3A
3DDE:  MOVLB  0
3DE0:  CALL   203E
....................          strcpy(Menus.Letra,"Liquidos"); 
3DE4:  MOVLW  05
3DE6:  MOVWF  FEA
3DE8:  MOVLW  1A
3DEA:  MOVWF  FE9
3DEC:  MOVFF  FF2,53A
3DF0:  BCF    FF2.7
3DF2:  MOVLW  00
3DF4:  CALL   081A
3DF8:  TBLRD*-
3DFA:  TBLRD*+
3DFC:  MOVF   FF5,W
3DFE:  MOVWF  FEE
3E00:  IORLW  00
3E02:  BNZ   3DFA
3E04:  MOVLB  5
3E06:  BTFSC  x3A.7
3E08:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3E0A:  MOVLW  05
3E0C:  MOVWF  x3B
3E0E:  MOVLW  1A
3E10:  MOVWF  x3A
3E12:  MOVLW  14
3E14:  MOVWF  x3C
3E16:  CLRF   x3D
3E18:  MOVLW  01
3E1A:  MOVWF  x3E
3E1C:  MOVLW  02
3E1E:  MOVWF  x3F
3E20:  MOVLB  0
3E22:  CALL   1812
....................        
....................          strcpy(Menus.Letra,"Liquidos"); 
3E26:  MOVLW  05
3E28:  MOVWF  FEA
3E2A:  MOVLW  1A
3E2C:  MOVWF  FE9
3E2E:  MOVFF  FF2,53A
3E32:  BCF    FF2.7
3E34:  MOVLW  00
3E36:  CALL   081A
3E3A:  TBLRD*-
3E3C:  TBLRD*+
3E3E:  MOVF   FF5,W
3E40:  MOVWF  FEE
3E42:  IORLW  00
3E44:  BNZ   3E3C
3E46:  MOVLB  5
3E48:  BTFSC  x3A.7
3E4A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3E4C:  MOVLW  05
3E4E:  MOVWF  x3B
3E50:  MOVLW  1A
3E52:  MOVWF  x3A
3E54:  MOVLW  07
3E56:  MOVWF  x3C
3E58:  MOVLW  37
3E5A:  MOVWF  x3D
3E5C:  MOVLW  02
3E5E:  MOVWF  x3E
3E60:  MOVLW  01
3E62:  MOVWF  x3F
3E64:  MOVLB  0
3E66:  CALL   1812
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3E6A:  MOVLW  05
3E6C:  MOVWF  FEA
3E6E:  MOVLW  1A
3E70:  MOVWF  FE9
3E72:  MOVFF  FF2,53A
3E76:  BCF    FF2.7
3E78:  MOVLW  00
3E7A:  CALL   09F6
3E7E:  TBLRD*-
3E80:  TBLRD*+
3E82:  MOVF   FF5,W
3E84:  MOVWF  FEE
3E86:  IORLW  00
3E88:  BNZ   3E80
3E8A:  MOVLB  5
3E8C:  BTFSC  x3A.7
3E8E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3E90:  MOVLW  05
3E92:  MOVWF  x3B
3E94:  MOVLW  1A
3E96:  MOVWF  x3A
3E98:  CLRF   x3C
3E9A:  MOVWF  x3D
3E9C:  CLRF   x3E
3E9E:  MOVLW  01
3EA0:  MOVWF  x3F
3EA2:  MOVLB  0
3EA4:  CALL   1812
....................          strcpy(Menus.Letra,"T. Esterilizacion:20m"); 
3EA8:  MOVLW  05
3EAA:  MOVWF  FEA
3EAC:  MOVLW  1A
3EAE:  MOVWF  FE9
3EB0:  MOVFF  FF2,53A
3EB4:  BCF    FF2.7
3EB6:  MOVLW  00
3EB8:  CALL   0A22
3EBC:  TBLRD*-
3EBE:  TBLRD*+
3EC0:  MOVF   FF5,W
3EC2:  MOVWF  FEE
3EC4:  IORLW  00
3EC6:  BNZ   3EBE
3EC8:  MOVLB  5
3ECA:  BTFSC  x3A.7
3ECC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3ECE:  MOVLW  05
3ED0:  MOVWF  x3B
3ED2:  MOVLW  1A
3ED4:  MOVWF  x3A
3ED6:  CLRF   x3C
3ED8:  MOVLW  24
3EDA:  MOVWF  x3D
3EDC:  CLRF   x3E
3EDE:  MOVLW  01
3EE0:  MOVWF  x3F
3EE2:  MOVLB  0
3EE4:  CALL   1812
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3EE8:  MOVLW  05
3EEA:  MOVWF  FEA
3EEC:  MOVLW  1A
3EEE:  MOVWF  FE9
3EF0:  MOVFF  FF2,53A
3EF4:  BCF    FF2.7
3EF6:  MOVLW  00
3EF8:  CALL   0A52
3EFC:  TBLRD*-
3EFE:  TBLRD*+
3F00:  MOVF   FF5,W
3F02:  MOVWF  FEE
3F04:  IORLW  00
3F06:  BNZ   3EFE
3F08:  MOVLB  5
3F0A:  BTFSC  x3A.7
3F0C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);     
3F0E:  MOVLW  05
3F10:  MOVWF  x3B
3F12:  MOVLW  1A
3F14:  MOVWF  x3A
3F16:  CLRF   x3C
3F18:  MOVLW  2E
3F1A:  MOVWF  x3D
3F1C:  CLRF   x3E
3F1E:  MOVLW  01
3F20:  MOVWF  x3F
3F22:  MOVLB  0
3F24:  CALL   1812
....................          visual=0; 
3F28:  MOVLB  4
3F2A:  BCF    x7C.4
....................       }    
....................           
....................       if(LEFT)// Si oprime Izquier|da 
3F2C:  BSF    F96.2
3F2E:  BTFSS  F84.2
3F30:  BRA    3F52
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3F32:  MOVLW  1E
3F34:  MOVLB  5
3F36:  MOVWF  x3F
3F38:  MOVLB  0
3F3A:  CALL   10EA
3F3E:  MOVLW  01
3F40:  MOVLB  4
3F42:  MOVWF  x89
3F44:  MOVLB  5
3F46:  CLRF   x3B
3F48:  MOVLB  0
3F4A:  CALL   11E2
3F4E:  MOVLB  4
3F50:  BSF    x7C.4
....................       }                
....................  
....................       if(RIGHT)// Si oprime derecha 
3F52:  BSF    F96.1
3F54:  BTFSS  F84.1
3F56:  BRA    3F96
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2;desfoguelento=1;visual=1; 
3F58:  CLRF   xA8
3F5A:  CLRF   xA9
3F5C:  CLRF   xAA
3F5E:  MOVLW  02
3F60:  MOVWF  xAB
3F62:  BSF    x7C.5
3F64:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
3F66:  CLRF   xB0
3F68:  CLRF   xB1
3F6A:  CLRF   xB2
3F6C:  CLRF   xB3
3F6E:  MOVLW  79
3F70:  MOVWF  x8E
3F72:  MOVLW  0E
3F74:  MOVWF  x89
3F76:  MOVLW  04
3F78:  MOVLB  5
3F7A:  MOVWF  x3A
3F7C:  MOVLW  AF
3F7E:  MOVWF  x3F
3F80:  MOVLB  0
3F82:  CALL   10EA
3F86:  MOVLB  5
3F88:  DECFSZ x3A,F
3F8A:  BRA    3F7C
3F8C:  CLRF   x3B
3F8E:  MOVLB  0
3F90:  CALL   11E2
3F94:  MOVLB  4
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Instrumental Suave      
3F96:  MOVF   x89,W
3F98:  SUBLW  06
3F9A:  BTFSS  FD8.2
3F9C:  BRA    4160
....................        
....................       if(visual==1) 
3F9E:  BTFSS  x7C.4
3FA0:  BRA    40F4
....................       { 
....................          glcd_imagen(3); //Erlen Meyer 
3FA2:  MOVLW  03
3FA4:  MOVLB  5
3FA6:  MOVWF  x3A
3FA8:  MOVLB  0
3FAA:  CALL   203E
....................           
....................          strcpy(Menus.Letra,"Ins. Suave"); 
3FAE:  MOVLW  05
3FB0:  MOVWF  FEA
3FB2:  MOVLW  1A
3FB4:  MOVWF  FE9
3FB6:  MOVFF  FF2,53A
3FBA:  BCF    FF2.7
3FBC:  MOVLW  00
3FBE:  CALL   0A7C
3FC2:  TBLRD*-
3FC4:  TBLRD*+
3FC6:  MOVF   FF5,W
3FC8:  MOVWF  FEE
3FCA:  IORLW  00
3FCC:  BNZ   3FC4
3FCE:  MOVLB  5
3FD0:  BTFSC  x3A.7
3FD2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
3FD4:  MOVLW  05
3FD6:  MOVWF  x3B
3FD8:  MOVLW  1A
3FDA:  MOVWF  x3A
3FDC:  CLRF   x3C
3FDE:  CLRF   x3D
3FE0:  MOVLW  01
3FE2:  MOVWF  x3E
3FE4:  MOVLW  02
3FE6:  MOVWF  x3F
3FE8:  MOVLB  0
3FEA:  CALL   1812
....................           
....................          strcpy(Menus.Letra,"Instrumental Suave"); 
3FEE:  MOVLW  05
3FF0:  MOVWF  FEA
3FF2:  MOVLW  1A
3FF4:  MOVWF  FE9
3FF6:  MOVFF  FF2,53A
3FFA:  BCF    FF2.7
3FFC:  MOVLW  00
3FFE:  CALL   083E
4002:  TBLRD*-
4004:  TBLRD*+
4006:  MOVF   FF5,W
4008:  MOVWF  FEE
400A:  IORLW  00
400C:  BNZ   4004
400E:  MOVLB  5
4010:  BTFSC  x3A.7
4012:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
4014:  MOVLW  05
4016:  MOVWF  x3B
4018:  MOVLW  1A
401A:  MOVWF  x3A
401C:  MOVLW  07
401E:  MOVWF  x3C
4020:  MOVLW  37
4022:  MOVWF  x3D
4024:  MOVLW  02
4026:  MOVWF  x3E
4028:  MOVLW  01
402A:  MOVWF  x3F
402C:  MOVLB  0
402E:  CALL   1812
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
4032:  MOVLW  05
4034:  MOVWF  FEA
4036:  MOVLW  1A
4038:  MOVWF  FE9
403A:  MOVFF  FF2,53A
403E:  BCF    FF2.7
4040:  MOVLW  00
4042:  CALL   09F6
4046:  TBLRD*-
4048:  TBLRD*+
404A:  MOVF   FF5,W
404C:  MOVWF  FEE
404E:  IORLW  00
4050:  BNZ   4048
4052:  MOVLB  5
4054:  BTFSC  x3A.7
4056:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
4058:  MOVLW  05
405A:  MOVWF  x3B
405C:  MOVLW  1A
405E:  MOVWF  x3A
4060:  CLRF   x3C
4062:  MOVWF  x3D
4064:  CLRF   x3E
4066:  MOVLW  01
4068:  MOVWF  x3F
406A:  MOVLB  0
406C:  CALL   1812
....................          strcpy(Menus.Letra,"T. Esterilizacion:15m"); 
4070:  MOVLW  05
4072:  MOVWF  FEA
4074:  MOVLW  1A
4076:  MOVWF  FE9
4078:  MOVFF  FF2,53A
407C:  BCF    FF2.7
407E:  MOVLW  00
4080:  CALL   0AA2
4084:  TBLRD*-
4086:  TBLRD*+
4088:  MOVF   FF5,W
408A:  MOVWF  FEE
408C:  IORLW  00
408E:  BNZ   4086
4090:  MOVLB  5
4092:  BTFSC  x3A.7
4094:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
4096:  MOVLW  05
4098:  MOVWF  x3B
409A:  MOVLW  1A
409C:  MOVWF  x3A
409E:  CLRF   x3C
40A0:  MOVLW  24
40A2:  MOVWF  x3D
40A4:  CLRF   x3E
40A6:  MOVLW  01
40A8:  MOVWF  x3F
40AA:  MOVLB  0
40AC:  CALL   1812
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
40B0:  MOVLW  05
40B2:  MOVWF  FEA
40B4:  MOVLW  1A
40B6:  MOVWF  FE9
40B8:  MOVFF  FF2,53A
40BC:  BCF    FF2.7
40BE:  MOVLW  00
40C0:  CALL   0A52
40C4:  TBLRD*-
40C6:  TBLRD*+
40C8:  MOVF   FF5,W
40CA:  MOVWF  FEE
40CC:  IORLW  00
40CE:  BNZ   40C6
40D0:  MOVLB  5
40D2:  BTFSC  x3A.7
40D4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
40D6:  MOVLW  05
40D8:  MOVWF  x3B
40DA:  MOVLW  1A
40DC:  MOVWF  x3A
40DE:  CLRF   x3C
40E0:  MOVLW  2E
40E2:  MOVWF  x3D
40E4:  CLRF   x3E
40E6:  MOVLW  01
40E8:  MOVWF  x3F
40EA:  MOVLB  0
40EC:  CALL   1812
....................          visual=0; 
40F0:  MOVLB  4
40F2:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
40F4:  BSF    F96.2
40F6:  BTFSS  F84.2
40F8:  BRA    411A
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
40FA:  MOVLW  1E
40FC:  MOVLB  5
40FE:  MOVWF  x3F
4100:  MOVLB  0
4102:  CALL   10EA
4106:  MOVLW  01
4108:  MOVLB  4
410A:  MOVWF  x89
410C:  MOVLB  5
410E:  CLRF   x3B
4110:  MOVLB  0
4112:  CALL   11E2
4116:  MOVLB  4
4118:  BSF    x7C.4
....................       }             
....................  
....................       if(RIGHT)// Si oprime derecha 
411A:  BSF    F96.1
411C:  BTFSS  F84.1
411E:  BRA    4160
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1;desfoguelento=1;visual=1; 
4120:  CLRF   xA8
4122:  CLRF   xA9
4124:  MOVLW  05
4126:  MOVWF  xAA
4128:  MOVLW  01
412A:  MOVWF  xAB
412C:  BSF    x7C.5
412E:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
4130:  CLRF   xB0
4132:  CLRF   xB1
4134:  CLRF   xB2
4136:  CLRF   xB3
4138:  MOVLW  79
413A:  MOVWF  x8E
413C:  MOVLW  0E
413E:  MOVWF  x89
4140:  MOVLW  04
4142:  MOVLB  5
4144:  MOVWF  x3A
4146:  MOVLW  AF
4148:  MOVWF  x3F
414A:  MOVLB  0
414C:  CALL   10EA
4150:  MOVLB  5
4152:  DECFSZ x3A,F
4154:  BRA    4146
4156:  CLRF   x3B
4158:  MOVLB  0
415A:  CALL   11E2
415E:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==7){ // Menu de textil e instrumental      
4160:  MOVF   x89,W
4162:  SUBLW  07
4164:  BTFSS  FD8.2
4166:  BRA    44A4
....................        
....................       if(visual==1) 
4168:  BTFSS  x7C.4
416A:  BRA    42BC
....................       { 
....................          glcd_imagen(1); //Tijeras y Camisa 
416C:  MOVLW  01
416E:  MOVLB  5
4170:  MOVWF  x3A
4172:  MOVLB  0
4174:  CALL   203E
....................          strcpy(Menus.Letra,"Tex & Ins"); 
4178:  MOVLW  05
417A:  MOVWF  FEA
417C:  MOVLW  1A
417E:  MOVWF  FE9
4180:  MOVFF  FF2,53A
4184:  BCF    FF2.7
4186:  MOVLW  00
4188:  CALL   0AD2
418C:  TBLRD*-
418E:  TBLRD*+
4190:  MOVF   FF5,W
4192:  MOVWF  FEE
4194:  IORLW  00
4196:  BNZ   418E
4198:  MOVLB  5
419A:  BTFSC  x3A.7
419C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
419E:  MOVLW  05
41A0:  MOVWF  x3B
41A2:  MOVLW  1A
41A4:  MOVWF  x3A
41A6:  CLRF   x3C
41A8:  CLRF   x3D
41AA:  MOVLW  01
41AC:  MOVWF  x3E
41AE:  MOVLW  02
41B0:  MOVWF  x3F
41B2:  MOVLB  0
41B4:  CALL   1812
....................        
....................          strcpy(Menus.Letra,"Textil e Instrumental"); 
41B8:  MOVLW  05
41BA:  MOVWF  FEA
41BC:  MOVLW  1A
41BE:  MOVWF  FE9
41C0:  MOVFF  FF2,53A
41C4:  BCF    FF2.7
41C6:  MOVLW  00
41C8:  CALL   086C
41CC:  TBLRD*-
41CE:  TBLRD*+
41D0:  MOVF   FF5,W
41D2:  MOVWF  FEE
41D4:  IORLW  00
41D6:  BNZ   41CE
41D8:  MOVLB  5
41DA:  BTFSC  x3A.7
41DC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
41DE:  MOVLW  05
41E0:  MOVWF  x3B
41E2:  MOVLW  1A
41E4:  MOVWF  x3A
41E6:  CLRF   x3C
41E8:  MOVLW  37
41EA:  MOVWF  x3D
41EC:  MOVLW  02
41EE:  MOVWF  x3E
41F0:  MOVLW  01
41F2:  MOVWF  x3F
41F4:  MOVLB  0
41F6:  CALL   1812
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
41FA:  MOVLW  05
41FC:  MOVWF  FEA
41FE:  MOVLW  1A
4200:  MOVWF  FE9
4202:  MOVFF  FF2,53A
4206:  BCF    FF2.7
4208:  MOVLW  00
420A:  CALL   09F6
420E:  TBLRD*-
4210:  TBLRD*+
4212:  MOVF   FF5,W
4214:  MOVWF  FEE
4216:  IORLW  00
4218:  BNZ   4210
421A:  MOVLB  5
421C:  BTFSC  x3A.7
421E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
4220:  MOVLW  05
4222:  MOVWF  x3B
4224:  MOVLW  1A
4226:  MOVWF  x3A
4228:  CLRF   x3C
422A:  MOVWF  x3D
422C:  CLRF   x3E
422E:  MOVLW  01
4230:  MOVWF  x3F
4232:  MOVLB  0
4234:  CALL   1812
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
4238:  MOVLW  05
423A:  MOVWF  FEA
423C:  MOVLW  1A
423E:  MOVWF  FE9
4240:  MOVFF  FF2,53A
4244:  BCF    FF2.7
4246:  MOVLW  00
4248:  CALL   0AF6
424C:  TBLRD*-
424E:  TBLRD*+
4250:  MOVF   FF5,W
4252:  MOVWF  FEE
4254:  IORLW  00
4256:  BNZ   424E
4258:  MOVLB  5
425A:  BTFSC  x3A.7
425C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
425E:  MOVLW  05
4260:  MOVWF  x3B
4262:  MOVLW  1A
4264:  MOVWF  x3A
4266:  CLRF   x3C
4268:  MOVLW  24
426A:  MOVWF  x3D
426C:  CLRF   x3E
426E:  MOVLW  01
4270:  MOVWF  x3F
4272:  MOVLB  0
4274:  CALL   1812
....................          strcpy(Menus.Letra,"T. Secado= 10m"); 
4278:  MOVLW  05
427A:  MOVWF  FEA
427C:  MOVLW  1A
427E:  MOVWF  FE9
4280:  MOVFF  FF2,53A
4284:  BCF    FF2.7
4286:  MOVLW  00
4288:  CALL   0B26
428C:  TBLRD*-
428E:  TBLRD*+
4290:  MOVF   FF5,W
4292:  MOVWF  FEE
4294:  IORLW  00
4296:  BNZ   428E
4298:  MOVLB  5
429A:  BTFSC  x3A.7
429C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
429E:  MOVLW  05
42A0:  MOVWF  x3B
42A2:  MOVLW  1A
42A4:  MOVWF  x3A
42A6:  CLRF   x3C
42A8:  MOVLW  2E
42AA:  MOVWF  x3D
42AC:  CLRF   x3E
42AE:  MOVLW  01
42B0:  MOVWF  x3F
42B2:  MOVLB  0
42B4:  CALL   1812
....................          visual=0; 
42B8:  MOVLB  4
42BA:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
42BC:  BSF    F96.2
42BE:  BTFSS  F84.2
42C0:  BRA    42E2
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
42C2:  MOVLW  1E
42C4:  MOVLB  5
42C6:  MOVWF  x3F
42C8:  MOVLB  0
42CA:  CALL   10EA
42CE:  MOVLW  01
42D0:  MOVLB  4
42D2:  MOVWF  x89
42D4:  MOVLB  5
42D6:  CLRF   x3B
42D8:  MOVLB  0
42DA:  CALL   11E2
42DE:  MOVLB  4
42E0:  BSF    x7C.4
....................       }                  
....................  
....................       if(RIGHT)// Si oprime derecha 
42E2:  BSF    F96.1
42E4:  BTFSS  F84.1
42E6:  BRA    44A4
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
42E8:  CLRF   xA8
42EA:  CLRF   xA9
42EC:  MOVLW  05
42EE:  MOVWF  xAA
42F0:  MOVLW  02
42F2:  MOVWF  xAB
42F4:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=1;Setpoint=121;Menu=20;delay_ms(700); 
42F6:  CLRF   xB0
42F8:  CLRF   xB1
42FA:  CLRF   xB2
42FC:  MOVLW  01
42FE:  MOVWF  xB3
4300:  MOVLW  79
4302:  MOVWF  x8E
4304:  MOVLW  14
4306:  MOVWF  x89
4308:  MOVLW  04
430A:  MOVLB  5
430C:  MOVWF  x3A
430E:  MOVLW  AF
4310:  MOVWF  x3F
4312:  MOVLB  0
4314:  CALL   10EA
4318:  MOVLB  5
431A:  DECFSZ x3A,F
431C:  BRA    430E
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
431E:  MOVLW  14
4320:  MOVLB  4
4322:  MOVWF  x89
4324:  MOVLW  0F
4326:  MOVLB  5
4328:  MOVWF  x4C
432A:  MOVLW  12
432C:  MOVWF  x4D
432E:  MOVLW  1E
4330:  MOVWF  x4E
4332:  MOVLW  35
4334:  MOVWF  x4F
4336:  CLRF   x50
4338:  MOVLW  01
433A:  MOVWF  x51
433C:  MOVLB  0
433E:  CALL   1750
4342:  MOVLB  4
4344:  CLRF   x92
4346:  MOVLW  C0
4348:  IORWF  FF2,F
434A:  MOVLB  5
434C:  CLRF   x3B
434E:  MOVLB  0
4350:  CALL   11E2
....................          strcpy(Menus.Letra,"Calentando"); 
4354:  MOVLW  05
4356:  MOVWF  FEA
4358:  MOVLW  1A
435A:  MOVWF  FE9
435C:  MOVFF  FF2,53A
4360:  BCF    FF2.7
4362:  MOVLW  00
4364:  CALL   0970
4368:  TBLRD*-
436A:  TBLRD*+
436C:  MOVF   FF5,W
436E:  MOVWF  FEE
4370:  IORLW  00
4372:  BNZ   436A
4374:  MOVLB  5
4376:  BTFSC  x3A.7
4378:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
437A:  MOVLW  05
437C:  MOVWF  x3B
437E:  MOVLW  1A
4380:  MOVWF  x3A
4382:  CLRF   x3C
4384:  MOVLW  37
4386:  MOVWF  x3D
4388:  MOVLW  02
438A:  MOVWF  x3E
438C:  MOVLW  01
438E:  MOVWF  x3F
4390:  MOVLB  0
4392:  CALL   1812
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
4396:  MOVLW  0F
4398:  MOVLB  5
439A:  MOVWF  x4C
439C:  MOVLW  12
439E:  MOVWF  x4D
43A0:  MOVLW  1E
43A2:  MOVWF  x4E
43A4:  MOVLW  35
43A6:  MOVWF  x4F
43A8:  CLRF   x50
43AA:  MOVLW  01
43AC:  MOVWF  x51
43AE:  MOVLB  0
43B0:  CALL   1750
....................          glcd_imagen(5); 
43B4:  MOVLW  05
43B6:  MOVLB  5
43B8:  MOVWF  x3A
43BA:  MOVLB  0
43BC:  CALL   203E
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
43C0:  MOVLW  05
43C2:  MOVWF  FEA
43C4:  MOVLW  1A
43C6:  MOVWF  FE9
43C8:  MOVFF  FF2,53A
43CC:  BCF    FF2.7
43CE:  MOVLW  00
43D0:  CALL   0996
43D4:  TBLRD*-
43D6:  TBLRD*+
43D8:  MOVF   FF5,W
43DA:  MOVWF  FEE
43DC:  IORLW  00
43DE:  BNZ   43D6
43E0:  MOVLB  5
43E2:  BTFSC  x3A.7
43E4:  BSF    FF2.7
43E6:  MOVLW  05
43E8:  MOVWF  x3B
43EA:  MOVLW  1A
43EC:  MOVWF  x3A
43EE:  CLRF   x3C
43F0:  CLRF   x3D
43F2:  MOVLW  02
43F4:  MOVWF  x3E
43F6:  MOVLW  01
43F8:  MOVWF  x3F
43FA:  MOVLB  0
43FC:  CALL   1812
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
4400:  MOVLW  05
4402:  MOVWF  FEA
4404:  MOVLW  1A
4406:  MOVWF  FE9
4408:  MOVFF  FF2,53A
440C:  BCF    FF2.7
440E:  MOVLW  00
4410:  CALL   09B8
4414:  TBLRD*-
4416:  TBLRD*+
4418:  MOVF   FF5,W
441A:  MOVWF  FEE
441C:  IORLW  00
441E:  BNZ   4416
4420:  MOVLB  5
4422:  BTFSC  x3A.7
4424:  BSF    FF2.7
4426:  MOVLW  05
4428:  MOVWF  x3B
442A:  MOVLW  1A
442C:  MOVWF  x3A
442E:  CLRF   x3C
4430:  MOVLW  08
4432:  MOVWF  x3D
4434:  MOVLW  02
4436:  MOVWF  x3E
4438:  MOVLW  01
443A:  MOVWF  x3F
443C:  MOVLB  0
443E:  CALL   1812
....................          glcd_circle(95,40,2,NO,ON); 
4442:  MOVLW  5F
4444:  MOVLB  5
4446:  MOVWF  x3A
4448:  MOVLW  28
444A:  MOVWF  x3B
444C:  MOVLW  02
444E:  MOVWF  x3C
4450:  CLRF   x3D
4452:  MOVLW  01
4454:  MOVWF  x3E
4456:  MOVLB  0
4458:  CALL   213A
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
445C:  MOVLW  05
445E:  MOVWF  FEA
4460:  MOVLW  1A
4462:  MOVWF  FE9
4464:  MOVFF  FF2,53A
4468:  BCF    FF2.7
446A:  MOVLW  00
446C:  CALL   09DA
4470:  TBLRD*-
4472:  TBLRD*+
4474:  MOVF   FF5,W
4476:  MOVWF  FEE
4478:  IORLW  00
447A:  BNZ   4472
447C:  MOVLB  5
447E:  BTFSC  x3A.7
4480:  BSF    FF2.7
4482:  MOVLW  05
4484:  MOVWF  x3B
4486:  MOVLW  1A
4488:  MOVWF  x3A
448A:  MOVLW  66
448C:  MOVWF  x3C
448E:  MOVLW  28
4490:  MOVWF  x3D
4492:  MOVLW  02
4494:  MOVWF  x3E
4496:  MOVWF  x3F
4498:  MOVLB  0
449A:  CALL   1812
....................          MuestraTiemposProgramados(); 
449E:  CALL   253A
44A2:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
.................... // Testerilizacionp[3]<,Tsecadop[3]<,Setpoint 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==8){ // Menu de Proceso Personalizado 
44A4:  MOVF   x89,W
44A6:  SUBLW  08
44A8:  BTFSS  FD8.2
44AA:  BRA    4888
....................          
....................          if(visual==1) 
44AC:  BTFSS  x7C.4
44AE:  BRA    47D4
....................          { 
....................             if(Opcion>5) 
44B0:  MOVF   x90,W
44B2:  SUBLW  05
44B4:  BC    44BA
....................             {Opcion=1;} 
44B6:  MOVLW  01
44B8:  MOVWF  x90
....................             if(Opcion<1) 
44BA:  MOVF   x90,F
44BC:  BNZ   44C2
....................             {Opcion=5;} 
44BE:  MOVLW  05
44C0:  MOVWF  x90
....................              
....................             strcpy(Menus.Letra,"Proceso Personalizado"); 
44C2:  MOVLW  05
44C4:  MOVWF  FEA
44C6:  MOVLW  1A
44C8:  MOVWF  FE9
44CA:  MOVFF  FF2,53A
44CE:  BCF    FF2.7
44D0:  MOVLW  00
44D2:  MOVLB  0
44D4:  CALL   0B50
44D8:  TBLRD*-
44DA:  TBLRD*+
44DC:  MOVF   FF5,W
44DE:  MOVWF  FEE
44E0:  IORLW  00
44E2:  BNZ   44DA
44E4:  MOVLB  5
44E6:  BTFSC  x3A.7
44E8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1); 
44EA:  MOVLW  05
44EC:  MOVWF  x3B
44EE:  MOVLW  1A
44F0:  MOVWF  x3A
44F2:  CLRF   x3C
44F4:  CLRF   x3D
44F6:  MOVLW  01
44F8:  MOVWF  x3E
44FA:  MOVWF  x3F
44FC:  MOVLB  0
44FE:  CALL   1812
....................        
....................             if(Opcion==1)    
4502:  MOVLB  4
4504:  DECFSZ x90,W
4506:  BRA    454E
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
4508:  MOVLW  05
450A:  MOVWF  FEA
450C:  MOVLW  1A
450E:  MOVWF  FE9
4510:  MOVFF  FF2,53A
4514:  BCF    FF2.7
4516:  MOVLW  00
4518:  MOVLB  0
451A:  CALL   0B80
451E:  TBLRD*-
4520:  TBLRD*+
4522:  MOVF   FF5,W
4524:  MOVWF  FEE
4526:  IORLW  00
4528:  BNZ   4520
452A:  MOVLB  5
452C:  BTFSC  x3A.7
452E:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,1,1);} 
4530:  MOVLW  05
4532:  MOVWF  x3B
4534:  MOVLW  1A
4536:  MOVWF  x3A
4538:  CLRF   x3C
453A:  MOVLW  0A
453C:  MOVWF  x3D
453E:  MOVLW  01
4540:  MOVWF  x3E
4542:  MOVWF  x3F
4544:  MOVLB  0
4546:  CALL   1812
....................             else 
454A:  BRA    4590
454C:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
454E:  MOVLW  05
4550:  MOVWF  FEA
4552:  MOVLW  1A
4554:  MOVWF  FE9
4556:  MOVFF  FF2,53A
455A:  BCF    FF2.7
455C:  MOVLW  00
455E:  MOVLB  0
4560:  CALL   0B80
4564:  TBLRD*-
4566:  TBLRD*+
4568:  MOVF   FF5,W
456A:  MOVWF  FEE
456C:  IORLW  00
456E:  BNZ   4566
4570:  MOVLB  5
4572:  BTFSC  x3A.7
4574:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,0,1);} 
4576:  MOVLW  05
4578:  MOVWF  x3B
457A:  MOVLW  1A
457C:  MOVWF  x3A
457E:  CLRF   x3C
4580:  MOVLW  0A
4582:  MOVWF  x3D
4584:  CLRF   x3E
4586:  MOVLW  01
4588:  MOVWF  x3F
458A:  MOVLB  0
458C:  CALL   1812
....................              
....................             if(Opcion==2)    
4590:  MOVLB  4
4592:  MOVF   x90,W
4594:  SUBLW  02
4596:  BNZ   45DE
....................                {strcpy(Menus.Letra,"T. Secado"); 
4598:  MOVLW  05
459A:  MOVWF  FEA
459C:  MOVLW  1A
459E:  MOVWF  FE9
45A0:  MOVFF  FF2,53A
45A4:  BCF    FF2.7
45A6:  MOVLW  00
45A8:  MOVLB  0
45AA:  CALL   0BAC
45AE:  TBLRD*-
45B0:  TBLRD*+
45B2:  MOVF   FF5,W
45B4:  MOVWF  FEE
45B6:  IORLW  00
45B8:  BNZ   45B0
45BA:  MOVLB  5
45BC:  BTFSC  x3A.7
45BE:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,1,1);} 
45C0:  MOVLW  05
45C2:  MOVWF  x3B
45C4:  MOVLW  1A
45C6:  MOVWF  x3A
45C8:  CLRF   x3C
45CA:  MOVLW  14
45CC:  MOVWF  x3D
45CE:  MOVLW  01
45D0:  MOVWF  x3E
45D2:  MOVWF  x3F
45D4:  MOVLB  0
45D6:  CALL   1812
....................             else 
45DA:  BRA    4620
45DC:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Secado"); 
45DE:  MOVLW  05
45E0:  MOVWF  FEA
45E2:  MOVLW  1A
45E4:  MOVWF  FE9
45E6:  MOVFF  FF2,53A
45EA:  BCF    FF2.7
45EC:  MOVLW  00
45EE:  MOVLB  0
45F0:  CALL   0BAC
45F4:  TBLRD*-
45F6:  TBLRD*+
45F8:  MOVF   FF5,W
45FA:  MOVWF  FEE
45FC:  IORLW  00
45FE:  BNZ   45F6
4600:  MOVLB  5
4602:  BTFSC  x3A.7
4604:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,0,1);}    
4606:  MOVLW  05
4608:  MOVWF  x3B
460A:  MOVLW  1A
460C:  MOVWF  x3A
460E:  CLRF   x3C
4610:  MOVLW  14
4612:  MOVWF  x3D
4614:  CLRF   x3E
4616:  MOVLW  01
4618:  MOVWF  x3F
461A:  MOVLB  0
461C:  CALL   1812
....................                 
....................              if(Opcion==3)    
4620:  MOVLB  4
4622:  MOVF   x90,W
4624:  SUBLW  03
4626:  BNZ   466E
....................                {strcpy(Menus.Letra,"Temperatura"); 
4628:  MOVLW  05
462A:  MOVWF  FEA
462C:  MOVLW  1A
462E:  MOVWF  FE9
4630:  MOVFF  FF2,53A
4634:  BCF    FF2.7
4636:  MOVLW  00
4638:  MOVLB  0
463A:  CALL   0BD0
463E:  TBLRD*-
4640:  TBLRD*+
4642:  MOVF   FF5,W
4644:  MOVWF  FEE
4646:  IORLW  00
4648:  BNZ   4640
464A:  MOVLB  5
464C:  BTFSC  x3A.7
464E:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,1,1);} 
4650:  MOVLW  05
4652:  MOVWF  x3B
4654:  MOVLW  1A
4656:  MOVWF  x3A
4658:  CLRF   x3C
465A:  MOVLW  1E
465C:  MOVWF  x3D
465E:  MOVLW  01
4660:  MOVWF  x3E
4662:  MOVWF  x3F
4664:  MOVLB  0
4666:  CALL   1812
....................             else 
466A:  BRA    46B0
466C:  MOVLB  4
....................                {strcpy(Menus.Letra,"Temperatura"); 
466E:  MOVLW  05
4670:  MOVWF  FEA
4672:  MOVLW  1A
4674:  MOVWF  FE9
4676:  MOVFF  FF2,53A
467A:  BCF    FF2.7
467C:  MOVLW  00
467E:  MOVLB  0
4680:  CALL   0BD0
4684:  TBLRD*-
4686:  TBLRD*+
4688:  MOVF   FF5,W
468A:  MOVWF  FEE
468C:  IORLW  00
468E:  BNZ   4686
4690:  MOVLB  5
4692:  BTFSC  x3A.7
4694:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,0,1);} 
4696:  MOVLW  05
4698:  MOVWF  x3B
469A:  MOVLW  1A
469C:  MOVWF  x3A
469E:  CLRF   x3C
46A0:  MOVLW  1E
46A2:  MOVWF  x3D
46A4:  CLRF   x3E
46A6:  MOVLW  01
46A8:  MOVWF  x3F
46AA:  MOVLB  0
46AC:  CALL   1812
....................                 
....................             if(Opcion==4)    
46B0:  MOVLB  4
46B2:  MOVF   x90,W
46B4:  SUBLW  04
46B6:  BNZ   46FE
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
46B8:  MOVLW  05
46BA:  MOVWF  FEA
46BC:  MOVLW  1A
46BE:  MOVWF  FE9
46C0:  MOVFF  FF2,53A
46C4:  BCF    FF2.7
46C6:  MOVLW  00
46C8:  MOVLB  0
46CA:  CALL   0BF6
46CE:  TBLRD*-
46D0:  TBLRD*+
46D2:  MOVF   FF5,W
46D4:  MOVWF  FEE
46D6:  IORLW  00
46D8:  BNZ   46D0
46DA:  MOVLB  5
46DC:  BTFSC  x3A.7
46DE:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,1,1);} 
46E0:  MOVLW  05
46E2:  MOVWF  x3B
46E4:  MOVLW  1A
46E6:  MOVWF  x3A
46E8:  CLRF   x3C
46EA:  MOVLW  28
46EC:  MOVWF  x3D
46EE:  MOVLW  01
46F0:  MOVWF  x3E
46F2:  MOVWF  x3F
46F4:  MOVLB  0
46F6:  CALL   1812
....................             else 
46FA:  BRA    4740
46FC:  MOVLB  4
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
46FE:  MOVLW  05
4700:  MOVWF  FEA
4702:  MOVLW  1A
4704:  MOVWF  FE9
4706:  MOVFF  FF2,53A
470A:  BCF    FF2.7
470C:  MOVLW  00
470E:  MOVLB  0
4710:  CALL   0BF6
4714:  TBLRD*-
4716:  TBLRD*+
4718:  MOVF   FF5,W
471A:  MOVWF  FEE
471C:  IORLW  00
471E:  BNZ   4716
4720:  MOVLB  5
4722:  BTFSC  x3A.7
4724:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,0,1);}    
4726:  MOVLW  05
4728:  MOVWF  x3B
472A:  MOVLW  1A
472C:  MOVWF  x3A
472E:  CLRF   x3C
4730:  MOVLW  28
4732:  MOVWF  x3D
4734:  CLRF   x3E
4736:  MOVLW  01
4738:  MOVWF  x3F
473A:  MOVLB  0
473C:  CALL   1812
....................                 
....................             if(Opcion==5)    
4740:  MOVLB  4
4742:  MOVF   x90,W
4744:  SUBLW  05
4746:  BNZ   478E
....................                {strcpy(Menus.Letra,"Continuar"); 
4748:  MOVLW  05
474A:  MOVWF  FEA
474C:  MOVLW  1A
474E:  MOVWF  FE9
4750:  MOVFF  FF2,53A
4754:  BCF    FF2.7
4756:  MOVLW  00
4758:  MOVLB  0
475A:  CALL   0C22
475E:  TBLRD*-
4760:  TBLRD*+
4762:  MOVF   FF5,W
4764:  MOVWF  FEE
4766:  IORLW  00
4768:  BNZ   4760
476A:  MOVLB  5
476C:  BTFSC  x3A.7
476E:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,1,1);} 
4770:  MOVLW  05
4772:  MOVWF  x3B
4774:  MOVLW  1A
4776:  MOVWF  x3A
4778:  CLRF   x3C
477A:  MOVLW  32
477C:  MOVWF  x3D
477E:  MOVLW  01
4780:  MOVWF  x3E
4782:  MOVWF  x3F
4784:  MOVLB  0
4786:  CALL   1812
....................             else 
478A:  BRA    47D0
478C:  MOVLB  4
....................                {strcpy(Menus.Letra,"Continuar"); 
478E:  MOVLW  05
4790:  MOVWF  FEA
4792:  MOVLW  1A
4794:  MOVWF  FE9
4796:  MOVFF  FF2,53A
479A:  BCF    FF2.7
479C:  MOVLW  00
479E:  MOVLB  0
47A0:  CALL   0C22
47A4:  TBLRD*-
47A6:  TBLRD*+
47A8:  MOVF   FF5,W
47AA:  MOVWF  FEE
47AC:  IORLW  00
47AE:  BNZ   47A6
47B0:  MOVLB  5
47B2:  BTFSC  x3A.7
47B4:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,0,1);}   
47B6:  MOVLW  05
47B8:  MOVWF  x3B
47BA:  MOVLW  1A
47BC:  MOVWF  x3A
47BE:  CLRF   x3C
47C0:  MOVLW  32
47C2:  MOVWF  x3D
47C4:  CLRF   x3E
47C6:  MOVLW  01
47C8:  MOVWF  x3F
47CA:  MOVLB  0
47CC:  CALL   1812
....................                           
....................             visual=0; 
47D0:  MOVLB  4
47D2:  BCF    x7C.4
....................          } 
....................          if(UP)//Si oprime hacia arriba 
47D4:  BSF    F92.5
47D6:  BTFSS  F80.5
47D8:  BRA    47F4
....................          {  if(Flanco == 0)  
47DA:  BTFSC  x7C.0
47DC:  BRA    47F2
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
47DE:  BSF    x7C.0
47E0:  MOVLW  1E
47E2:  MOVLB  5
47E4:  MOVWF  x3F
47E6:  MOVLB  0
47E8:  CALL   10EA
47EC:  MOVLB  4
47EE:  DECF   x90,F
47F0:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
47F2:  BRA    47F6
....................                {Flanco = 0;} 
47F4:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
47F6:  BSF    F96.0
47F8:  BTFSS  F84.0
47FA:  BRA    4816
....................          {  if(Flanco2 == 0)  
47FC:  BTFSC  x7C.2
47FE:  BRA    4814
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
4800:  BSF    x7C.2
4802:  MOVLW  1E
4804:  MOVLB  5
4806:  MOVWF  x3F
4808:  MOVLB  0
480A:  CALL   10EA
480E:  MOVLB  4
4810:  INCF   x90,F
4812:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
4814:  BRA    4818
....................                {Flanco2 = 0;}   
4816:  BCF    x7C.2
....................                 
....................          if(RIGHT)//Si oprime SET 
4818:  BSF    F96.1
481A:  BTFSS  F84.1
481C:  BRA    4856
....................          {  if(Flanco1 == 0)  
481E:  BTFSC  x7C.1
4820:  BRA    4854
....................                {Flanco1 = 1;delay_ms(300);Menu=Opcion+10;Opcion=1;glcd_fillscreen(OFF);visual=1; 
4822:  BSF    x7C.1
4824:  MOVLW  02
4826:  MOVLB  5
4828:  MOVWF  x3A
482A:  MOVLW  96
482C:  MOVWF  x3F
482E:  MOVLB  0
4830:  CALL   10EA
4834:  MOVLB  5
4836:  DECFSZ x3A,F
4838:  BRA    482A
483A:  MOVLW  0A
483C:  MOVLB  4
483E:  ADDWF  x90,W
4840:  MOVWF  x89
4842:  MOVLW  01
4844:  MOVWF  x90
4846:  MOVLB  5
4848:  CLRF   x3B
484A:  MOVLB  0
484C:  CALL   11E2
4850:  MOVLB  4
4852:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
4854:  BRA    4858
....................                {Flanco1 = 0;}   
4856:  BCF    x7C.1
....................                 
....................          if(LEFT)//Si oprime boton de Toma. 
4858:  BSF    F96.2
485A:  BTFSS  F84.2
485C:  BRA    4888
....................          {delay_ms(700);Menu=1;glcd_fillscreen(OFF);visual=1;} 
485E:  MOVLW  04
4860:  MOVLB  5
4862:  MOVWF  x3A
4864:  MOVLW  AF
4866:  MOVWF  x3F
4868:  MOVLB  0
486A:  CALL   10EA
486E:  MOVLB  5
4870:  DECFSZ x3A,F
4872:  BRA    4864
4874:  MOVLW  01
4876:  MOVLB  4
4878:  MOVWF  x89
487A:  MOVLB  5
487C:  CLRF   x3B
487E:  MOVLB  0
4880:  CALL   11E2
4884:  MOVLB  4
4886:  BSF    x7C.4
....................           
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==9){ // Menu de Cambio de Contraseña 
4888:  MOVF   x89,W
488A:  SUBLW  09
488C:  BTFSS  FD8.2
488E:  BRA    4D44
....................          
....................       strcpy(Menus.Letra,"Clave"); 
4890:  MOVLW  05
4892:  MOVWF  FEA
4894:  MOVLW  1A
4896:  MOVWF  FE9
4898:  MOVFF  FF2,53A
489C:  BCF    FF2.7
489E:  MOVLW  00
48A0:  MOVLB  0
48A2:  CALL   0762
48A6:  TBLRD*-
48A8:  TBLRD*+
48AA:  MOVF   FF5,W
48AC:  MOVWF  FEE
48AE:  IORLW  00
48B0:  BNZ   48A8
48B2:  MOVLB  5
48B4:  BTFSC  x3A.7
48B6:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
48B8:  MOVLW  05
48BA:  MOVWF  x3B
48BC:  MOVLW  1A
48BE:  MOVWF  x3A
48C0:  MOVLW  1E
48C2:  MOVWF  x3C
48C4:  CLRF   x3D
48C6:  MOVLW  01
48C8:  MOVWF  x3E
48CA:  MOVLW  02
48CC:  MOVWF  x3F
48CE:  MOVLB  0
48D0:  CALL   1812
....................        
....................       if(unidad==1) 
48D4:  MOVLB  4
48D6:  DECFSZ x8A,W
48D8:  BRA    4938
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1); 
48DA:  MOVFF  4B4,53C
48DE:  MOVLW  14
48E0:  MOVLB  5
48E2:  MOVWF  x3D
48E4:  MOVLW  1E
48E6:  MOVWF  x3E
48E8:  MOVLW  01
48EA:  MOVWF  x3F
48EC:  MOVLB  0
48EE:  CALL   1A38
....................          displayContrasena(Contrasena[1],40,30,0); 
48F2:  MOVFF  4B5,53C
48F6:  MOVLW  28
48F8:  MOVLB  5
48FA:  MOVWF  x3D
48FC:  MOVLW  1E
48FE:  MOVWF  x3E
4900:  CLRF   x3F
4902:  MOVLB  0
4904:  CALL   1A38
....................          displayContrasena(Contrasena[2],60,30,0); 
4908:  MOVFF  4B6,53C
490C:  MOVLW  3C
490E:  MOVLB  5
4910:  MOVWF  x3D
4912:  MOVLW  1E
4914:  MOVWF  x3E
4916:  CLRF   x3F
4918:  MOVLB  0
491A:  CALL   1A38
....................          displayContrasena(Contrasena[3],80,30,0); 
491E:  MOVFF  4B7,53C
4922:  MOVLW  50
4924:  MOVLB  5
4926:  MOVWF  x3D
4928:  MOVLW  1E
492A:  MOVWF  x3E
492C:  CLRF   x3F
492E:  MOVLB  0
4930:  CALL   1A38
....................       } 
....................       else 
4934:  BRA    4A60
4936:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4938:  MOVF   x8A,W
493A:  SUBLW  02
493C:  BNZ   499C
....................          { 
....................             displayContrasena(Contrasena[0],20,30,0); 
493E:  MOVFF  4B4,53C
4942:  MOVLW  14
4944:  MOVLB  5
4946:  MOVWF  x3D
4948:  MOVLW  1E
494A:  MOVWF  x3E
494C:  CLRF   x3F
494E:  MOVLB  0
4950:  CALL   1A38
....................             displayContrasena(Contrasena[1],40,30,1); 
4954:  MOVFF  4B5,53C
4958:  MOVLW  28
495A:  MOVLB  5
495C:  MOVWF  x3D
495E:  MOVLW  1E
4960:  MOVWF  x3E
4962:  MOVLW  01
4964:  MOVWF  x3F
4966:  MOVLB  0
4968:  CALL   1A38
....................             displayContrasena(Contrasena[2],60,30,0); 
496C:  MOVFF  4B6,53C
4970:  MOVLW  3C
4972:  MOVLB  5
4974:  MOVWF  x3D
4976:  MOVLW  1E
4978:  MOVWF  x3E
497A:  CLRF   x3F
497C:  MOVLB  0
497E:  CALL   1A38
....................             displayContrasena(Contrasena[3],80,30,0); 
4982:  MOVFF  4B7,53C
4986:  MOVLW  50
4988:  MOVLB  5
498A:  MOVWF  x3D
498C:  MOVLW  1E
498E:  MOVWF  x3E
4990:  CLRF   x3F
4992:  MOVLB  0
4994:  CALL   1A38
....................          } 
....................          else 
4998:  BRA    4A60
499A:  MOVLB  4
....................          { 
....................             if(unidad==3) 
499C:  MOVF   x8A,W
499E:  SUBLW  03
49A0:  BNZ   4A00
....................             { 
....................                displayContrasena(Contrasena[0],20,30,0); 
49A2:  MOVFF  4B4,53C
49A6:  MOVLW  14
49A8:  MOVLB  5
49AA:  MOVWF  x3D
49AC:  MOVLW  1E
49AE:  MOVWF  x3E
49B0:  CLRF   x3F
49B2:  MOVLB  0
49B4:  CALL   1A38
....................                displayContrasena(Contrasena[1],40,30,0); 
49B8:  MOVFF  4B5,53C
49BC:  MOVLW  28
49BE:  MOVLB  5
49C0:  MOVWF  x3D
49C2:  MOVLW  1E
49C4:  MOVWF  x3E
49C6:  CLRF   x3F
49C8:  MOVLB  0
49CA:  CALL   1A38
....................                displayContrasena(Contrasena[2],60,30,1); 
49CE:  MOVFF  4B6,53C
49D2:  MOVLW  3C
49D4:  MOVLB  5
49D6:  MOVWF  x3D
49D8:  MOVLW  1E
49DA:  MOVWF  x3E
49DC:  MOVLW  01
49DE:  MOVWF  x3F
49E0:  MOVLB  0
49E2:  CALL   1A38
....................                displayContrasena(Contrasena[3],80,30,0); 
49E6:  MOVFF  4B7,53C
49EA:  MOVLW  50
49EC:  MOVLB  5
49EE:  MOVWF  x3D
49F0:  MOVLW  1E
49F2:  MOVWF  x3E
49F4:  CLRF   x3F
49F6:  MOVLB  0
49F8:  CALL   1A38
....................             } 
....................             else 
49FC:  BRA    4A60
49FE:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4A00:  MOVF   x8A,W
4A02:  SUBLW  04
4A04:  BNZ   4A62
....................                { 
....................                   displayContrasena(Contrasena[0],20,30,0); 
4A06:  MOVFF  4B4,53C
4A0A:  MOVLW  14
4A0C:  MOVLB  5
4A0E:  MOVWF  x3D
4A10:  MOVLW  1E
4A12:  MOVWF  x3E
4A14:  CLRF   x3F
4A16:  MOVLB  0
4A18:  CALL   1A38
....................                   displayContrasena(Contrasena[1],40,30,0); 
4A1C:  MOVFF  4B5,53C
4A20:  MOVLW  28
4A22:  MOVLB  5
4A24:  MOVWF  x3D
4A26:  MOVLW  1E
4A28:  MOVWF  x3E
4A2A:  CLRF   x3F
4A2C:  MOVLB  0
4A2E:  CALL   1A38
....................                   displayContrasena(Contrasena[2],60,30,0); 
4A32:  MOVFF  4B6,53C
4A36:  MOVLW  3C
4A38:  MOVLB  5
4A3A:  MOVWF  x3D
4A3C:  MOVLW  1E
4A3E:  MOVWF  x3E
4A40:  CLRF   x3F
4A42:  MOVLB  0
4A44:  CALL   1A38
....................                   displayContrasena(Contrasena[3],80,30,1); 
4A48:  MOVFF  4B7,53C
4A4C:  MOVLW  50
4A4E:  MOVLB  5
4A50:  MOVWF  x3D
4A52:  MOVLW  1E
4A54:  MOVWF  x3E
4A56:  MOVLW  01
4A58:  MOVWF  x3F
4A5A:  MOVLB  0
4A5C:  CALL   1A38
4A60:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4A62:  BSF    F92.5
4A64:  BTFSS  F80.5
4A66:  BRA    4AD0
....................       { 
....................          if(Flanco == 0) 
4A68:  BTFSC  x7C.0
4A6A:  BRA    4ACE
....................          { 
....................             Flanco = 1;delay_ms(30); 
4A6C:  BSF    x7C.0
4A6E:  MOVLW  1E
4A70:  MOVLB  5
4A72:  MOVWF  x3F
4A74:  MOVLB  0
4A76:  CALL   10EA
....................             for(i=1;i<=4;i++) 
4A7A:  MOVLW  01
4A7C:  MOVLB  4
4A7E:  MOVWF  x8D
4A80:  MOVF   x8D,W
4A82:  SUBLW  04
4A84:  BNC   4ACE
....................             { 
....................                if(unidad==i) 
4A86:  MOVF   x8D,W
4A88:  SUBWF  x8A,W
4A8A:  BNZ   4ACA
....................                { 
....................                   Contrasena[i-1]++; 
4A8C:  MOVLW  01
4A8E:  SUBWF  x8D,W
4A90:  CLRF   03
4A92:  ADDLW  B4
4A94:  MOVWF  FE9
4A96:  MOVLW  04
4A98:  ADDWFC 03,W
4A9A:  MOVWF  FEA
4A9C:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
4A9E:  MOVLW  01
4AA0:  SUBWF  x8D,W
4AA2:  CLRF   03
4AA4:  ADDLW  B4
4AA6:  MOVWF  FE9
4AA8:  MOVLW  04
4AAA:  ADDWFC 03,W
4AAC:  MOVWF  FEA
4AAE:  BTFSC  FEF.7
4AB0:  BRA    4ACA
4AB2:  MOVF   FEF,W
4AB4:  SUBLW  09
4AB6:  BC    4ACA
....................                   { 
....................                      Contrasena[i-1]=0; 
4AB8:  MOVLW  01
4ABA:  SUBWF  x8D,W
4ABC:  CLRF   03
4ABE:  ADDLW  B4
4AC0:  MOVWF  FE9
4AC2:  MOVLW  04
4AC4:  ADDWFC 03,W
4AC6:  MOVWF  FEA
4AC8:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4ACA:  INCF   x8D,F
4ACC:  BRA    4A80
....................          } 
....................       } 
....................       else 
4ACE:  BRA    4AD2
....................       { 
....................          Flanco = 0; 
4AD0:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4AD2:  BSF    F96.0
4AD4:  BTFSS  F84.0
4AD6:  BRA    4B3E
....................       { 
....................          if(Flanco2 == 0) 
4AD8:  BTFSC  x7C.2
4ADA:  BRA    4B3C
....................             {Flanco2 = 1;delay_ms(30); 
4ADC:  BSF    x7C.2
4ADE:  MOVLW  1E
4AE0:  MOVLB  5
4AE2:  MOVWF  x3F
4AE4:  MOVLB  0
4AE6:  CALL   10EA
....................                for(i=1;i<=4;i++) 
4AEA:  MOVLW  01
4AEC:  MOVLB  4
4AEE:  MOVWF  x8D
4AF0:  MOVF   x8D,W
4AF2:  SUBLW  04
4AF4:  BNC   4B3C
....................                { 
....................                   if(unidad==i) 
4AF6:  MOVF   x8D,W
4AF8:  SUBWF  x8A,W
4AFA:  BNZ   4B38
....................                   {Contrasena[i-1]--;  
4AFC:  MOVLW  01
4AFE:  SUBWF  x8D,W
4B00:  CLRF   03
4B02:  ADDLW  B4
4B04:  MOVWF  FE9
4B06:  MOVLW  04
4B08:  ADDWFC 03,W
4B0A:  MOVWF  FEA
4B0C:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
4B0E:  MOVLW  01
4B10:  SUBWF  x8D,W
4B12:  CLRF   03
4B14:  ADDLW  B4
4B16:  MOVWF  FE9
4B18:  MOVLW  04
4B1A:  ADDWFC 03,W
4B1C:  MOVWF  FEA
4B1E:  BTFSC  FEF.7
4B20:  BRA    4B24
4B22:  BRA    4B38
....................                         {Contrasena[i-1]=9;} 
4B24:  MOVLW  01
4B26:  SUBWF  x8D,W
4B28:  CLRF   03
4B2A:  ADDLW  B4
4B2C:  MOVWF  FE9
4B2E:  MOVLW  04
4B30:  ADDWFC 03,W
4B32:  MOVWF  FEA
4B34:  MOVLW  09
4B36:  MOVWF  FEF
....................                   } 
....................                }       
4B38:  INCF   x8D,F
4B3A:  BRA    4AF0
....................             }      
....................       } 
....................       else 
4B3C:  BRA    4B40
....................       { 
....................          Flanco2 = 0; 
4B3E:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4B40:  BSF    F96.1
4B42:  BTFSS  F84.1
4B44:  BRA    4B68
....................       { 
....................          if(Flanco1 == 0) 
4B46:  BTFSC  x7C.1
4B48:  BRA    4B66
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4B4A:  BSF    x7C.1
4B4C:  MOVLW  02
4B4E:  MOVLB  5
4B50:  MOVWF  x3A
4B52:  MOVLW  96
4B54:  MOVWF  x3F
4B56:  MOVLB  0
4B58:  CALL   10EA
4B5C:  MOVLB  5
4B5E:  DECFSZ x3A,F
4B60:  BRA    4B52
4B62:  MOVLB  4
4B64:  INCF   x8A,F
....................       } 
....................       else 
4B66:  BRA    4B6A
....................       { 
....................          Flanco1 = 0; 
4B68:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4B6A:  BSF    F96.2
4B6C:  BTFSS  F84.2
4B6E:  BRA    4B98
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
4B70:  MOVLW  04
4B72:  MOVLB  5
4B74:  MOVWF  x3A
4B76:  MOVLW  AF
4B78:  MOVWF  x3F
4B7A:  MOVLB  0
4B7C:  CALL   10EA
4B80:  MOVLB  5
4B82:  DECFSZ x3A,F
4B84:  BRA    4B76
4B86:  MOVLW  01
4B88:  MOVLB  4
4B8A:  MOVWF  x89
4B8C:  MOVLB  5
4B8E:  CLRF   x3B
4B90:  MOVLB  0
4B92:  CALL   11E2
4B96:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
4B98:  MOVF   x8A,W
4B9A:  SUBLW  04
4B9C:  BTFSC  FD8.0
4B9E:  BRA    4D44
....................       {glcd_fillScreen(OFF); 
4BA0:  MOVLB  5
4BA2:  CLRF   x3B
4BA4:  MOVLB  0
4BA6:  CALL   11E2
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
4BAA:  MOVLB  4
4BAC:  MOVF   xB8,W
4BAE:  SUBWF  xB4,W
4BB0:  BNZ   4C82
4BB2:  MOVF   xB9,W
4BB4:  SUBWF  xB5,W
4BB6:  BNZ   4C82
4BB8:  MOVF   xBA,W
4BBA:  SUBWF  xB6,W
4BBC:  BNZ   4C82
4BBE:  MOVF   xBB,W
4BC0:  SUBWF  xB7,W
4BC2:  BNZ   4C82
....................          { 
....................             glcd_fillScreen(OFF); 
4BC4:  MOVLB  5
4BC6:  CLRF   x3B
4BC8:  MOVLB  0
4BCA:  CALL   11E2
....................             strcpy(Menus.Letra,"Clave"); 
4BCE:  MOVLW  05
4BD0:  MOVWF  FEA
4BD2:  MOVLW  1A
4BD4:  MOVWF  FE9
4BD6:  MOVFF  FF2,53A
4BDA:  BCF    FF2.7
4BDC:  MOVLW  00
4BDE:  CALL   0762
4BE2:  TBLRD*-
4BE4:  TBLRD*+
4BE6:  MOVF   FF5,W
4BE8:  MOVWF  FEE
4BEA:  IORLW  00
4BEC:  BNZ   4BE4
4BEE:  MOVLB  5
4BF0:  BTFSC  x3A.7
4BF2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4BF4:  MOVLW  05
4BF6:  MOVWF  x3B
4BF8:  MOVLW  1A
4BFA:  MOVWF  x3A
4BFC:  MOVLW  1E
4BFE:  MOVWF  x3C
4C00:  CLRF   x3D
4C02:  CLRF   x3E
4C04:  MOVLW  02
4C06:  MOVWF  x3F
4C08:  MOVLB  0
4C0A:  CALL   1812
....................             strcpy(Menus.Letra,"Correcta"); 
4C0E:  MOVLW  05
4C10:  MOVWF  FEA
4C12:  MOVLW  1A
4C14:  MOVWF  FE9
4C16:  MOVFF  FF2,53A
4C1A:  BCF    FF2.7
4C1C:  MOVLW  00
4C1E:  CALL   0782
4C22:  TBLRD*-
4C24:  TBLRD*+
4C26:  MOVF   FF5,W
4C28:  MOVWF  FEE
4C2A:  IORLW  00
4C2C:  BNZ   4C24
4C2E:  MOVLB  5
4C30:  BTFSC  x3A.7
4C32:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
4C34:  MOVLW  05
4C36:  MOVWF  x3B
4C38:  MOVLW  1A
4C3A:  MOVWF  x3A
4C3C:  MOVLW  0F
4C3E:  MOVWF  x3C
4C40:  MOVLW  1E
4C42:  MOVWF  x3D
4C44:  CLRF   x3E
4C46:  MOVLW  02
4C48:  MOVWF  x3F
4C4A:  MOVLB  0
4C4C:  CALL   1812
....................             Menu=91;glcd_update();delay_ms(1000); 
4C50:  MOVLW  5B
4C52:  MOVLB  4
4C54:  MOVWF  x89
4C56:  MOVLB  0
4C58:  CALL   123C
4C5C:  MOVLW  04
4C5E:  MOVLB  5
4C60:  MOVWF  x3A
4C62:  MOVLW  FA
4C64:  MOVWF  x3F
4C66:  MOVLB  0
4C68:  CALL   10EA
4C6C:  MOVLB  5
4C6E:  DECFSZ x3A,F
4C70:  BRA    4C62
....................             glcd_fillScreen(OFF);unidad=1; 
4C72:  CLRF   x3B
4C74:  MOVLB  0
4C76:  CALL   11E2
4C7A:  MOVLW  01
4C7C:  MOVLB  4
4C7E:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
4C80:  BRA    4D44
....................          { 
....................             glcd_fillScreen(OFF); 
4C82:  MOVLB  5
4C84:  CLRF   x3B
4C86:  MOVLB  0
4C88:  CALL   11E2
....................             strcpy(Menus.Letra,"Clave"); 
4C8C:  MOVLW  05
4C8E:  MOVWF  FEA
4C90:  MOVLW  1A
4C92:  MOVWF  FE9
4C94:  MOVFF  FF2,53A
4C98:  BCF    FF2.7
4C9A:  MOVLW  00
4C9C:  CALL   0762
4CA0:  TBLRD*-
4CA2:  TBLRD*+
4CA4:  MOVF   FF5,W
4CA6:  MOVWF  FEE
4CA8:  IORLW  00
4CAA:  BNZ   4CA2
4CAC:  MOVLB  5
4CAE:  BTFSC  x3A.7
4CB0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4CB2:  MOVLW  05
4CB4:  MOVWF  x3B
4CB6:  MOVLW  1A
4CB8:  MOVWF  x3A
4CBA:  MOVLW  1E
4CBC:  MOVWF  x3C
4CBE:  CLRF   x3D
4CC0:  CLRF   x3E
4CC2:  MOVLW  02
4CC4:  MOVWF  x3F
4CC6:  MOVLB  0
4CC8:  CALL   1812
....................             strcpy(Menus.Letra,"Incorrecta"); 
4CCC:  MOVLW  05
4CCE:  MOVWF  FEA
4CD0:  MOVLW  1A
4CD2:  MOVWF  FE9
4CD4:  MOVFF  FF2,53A
4CD8:  BCF    FF2.7
4CDA:  MOVLW  00
4CDC:  CALL   07A6
4CE0:  TBLRD*-
4CE2:  TBLRD*+
4CE4:  MOVF   FF5,W
4CE6:  MOVWF  FEE
4CE8:  IORLW  00
4CEA:  BNZ   4CE2
4CEC:  MOVLB  5
4CEE:  BTFSC  x3A.7
4CF0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
4CF2:  MOVLW  05
4CF4:  MOVWF  x3B
4CF6:  MOVLW  1A
4CF8:  MOVWF  x3A
4CFA:  CLRF   x3C
4CFC:  MOVLW  1E
4CFE:  MOVWF  x3D
4D00:  CLRF   x3E
4D02:  MOVLW  02
4D04:  MOVWF  x3F
4D06:  MOVLB  0
4D08:  CALL   1812
....................             Menu=1;glcd_update();delay_ms(1000); 
4D0C:  MOVLW  01
4D0E:  MOVLB  4
4D10:  MOVWF  x89
4D12:  MOVLB  0
4D14:  CALL   123C
4D18:  MOVLW  04
4D1A:  MOVLB  5
4D1C:  MOVWF  x3A
4D1E:  MOVLW  FA
4D20:  MOVWF  x3F
4D22:  MOVLB  0
4D24:  CALL   10EA
4D28:  MOVLB  5
4D2A:  DECFSZ x3A,F
4D2C:  BRA    4D1E
....................             glcd_fillScreen(OFF);unidad=1; 
4D2E:  CLRF   x3B
4D30:  MOVLB  0
4D32:  CALL   11E2
4D36:  MOVLW  01
4D38:  MOVLB  4
4D3A:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
4D3C:  CLRF   xB4
4D3E:  CLRF   xB5
4D40:  CLRF   xB6
4D42:  CLRF   xB7
....................          } 
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==91){ // Menu de Cambio de Contraseña 
4D44:  MOVF   x89,W
4D46:  SUBLW  5B
4D48:  BTFSS  FD8.2
4D4A:  BRA    5124
....................          
....................       strcpy(Menus.Letra,"Clave Nueva"); 
4D4C:  MOVLW  05
4D4E:  MOVWF  FEA
4D50:  MOVLW  1A
4D52:  MOVWF  FE9
4D54:  MOVFF  FF2,53A
4D58:  BCF    FF2.7
4D5A:  MOVLW  00
4D5C:  MOVLB  0
4D5E:  CALL   0C46
4D62:  TBLRD*-
4D64:  TBLRD*+
4D66:  MOVF   FF5,W
4D68:  MOVWF  FEE
4D6A:  IORLW  00
4D6C:  BNZ   4D64
4D6E:  MOVLB  5
4D70:  BTFSC  x3A.7
4D72:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2);      
4D74:  MOVLW  05
4D76:  MOVWF  x3B
4D78:  MOVLW  1A
4D7A:  MOVWF  x3A
4D7C:  CLRF   x3C
4D7E:  CLRF   x3D
4D80:  MOVLW  01
4D82:  MOVWF  x3E
4D84:  MOVLW  02
4D86:  MOVWF  x3F
4D88:  MOVLB  0
4D8A:  CALL   1812
....................        
....................       if(unidad==1) 
4D8E:  MOVLB  4
4D90:  DECFSZ x8A,W
4D92:  BRA    4DF2
....................       { 
....................          displayContrasena(Password[0],20,30,1); 
4D94:  MOVFF  4B8,53C
4D98:  MOVLW  14
4D9A:  MOVLB  5
4D9C:  MOVWF  x3D
4D9E:  MOVLW  1E
4DA0:  MOVWF  x3E
4DA2:  MOVLW  01
4DA4:  MOVWF  x3F
4DA6:  MOVLB  0
4DA8:  CALL   1A38
....................          displayContrasena(Password[1],40,30,0); 
4DAC:  MOVFF  4B9,53C
4DB0:  MOVLW  28
4DB2:  MOVLB  5
4DB4:  MOVWF  x3D
4DB6:  MOVLW  1E
4DB8:  MOVWF  x3E
4DBA:  CLRF   x3F
4DBC:  MOVLB  0
4DBE:  CALL   1A38
....................          displayContrasena(Password[2],60,30,0); 
4DC2:  MOVFF  4BA,53C
4DC6:  MOVLW  3C
4DC8:  MOVLB  5
4DCA:  MOVWF  x3D
4DCC:  MOVLW  1E
4DCE:  MOVWF  x3E
4DD0:  CLRF   x3F
4DD2:  MOVLB  0
4DD4:  CALL   1A38
....................          displayContrasena(Password[3],80,30,0); 
4DD8:  MOVFF  4BB,53C
4DDC:  MOVLW  50
4DDE:  MOVLB  5
4DE0:  MOVWF  x3D
4DE2:  MOVLW  1E
4DE4:  MOVWF  x3E
4DE6:  CLRF   x3F
4DE8:  MOVLB  0
4DEA:  CALL   1A38
....................       } 
....................       else 
4DEE:  BRA    4F1A
4DF0:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4DF2:  MOVF   x8A,W
4DF4:  SUBLW  02
4DF6:  BNZ   4E56
....................          { 
....................             displayContrasena(Password[0],20,30,0); 
4DF8:  MOVFF  4B8,53C
4DFC:  MOVLW  14
4DFE:  MOVLB  5
4E00:  MOVWF  x3D
4E02:  MOVLW  1E
4E04:  MOVWF  x3E
4E06:  CLRF   x3F
4E08:  MOVLB  0
4E0A:  CALL   1A38
....................             displayContrasena(Password[1],40,30,1); 
4E0E:  MOVFF  4B9,53C
4E12:  MOVLW  28
4E14:  MOVLB  5
4E16:  MOVWF  x3D
4E18:  MOVLW  1E
4E1A:  MOVWF  x3E
4E1C:  MOVLW  01
4E1E:  MOVWF  x3F
4E20:  MOVLB  0
4E22:  CALL   1A38
....................             displayContrasena(Password[2],60,30,0); 
4E26:  MOVFF  4BA,53C
4E2A:  MOVLW  3C
4E2C:  MOVLB  5
4E2E:  MOVWF  x3D
4E30:  MOVLW  1E
4E32:  MOVWF  x3E
4E34:  CLRF   x3F
4E36:  MOVLB  0
4E38:  CALL   1A38
....................             displayContrasena(Password[3],80,30,0); 
4E3C:  MOVFF  4BB,53C
4E40:  MOVLW  50
4E42:  MOVLB  5
4E44:  MOVWF  x3D
4E46:  MOVLW  1E
4E48:  MOVWF  x3E
4E4A:  CLRF   x3F
4E4C:  MOVLB  0
4E4E:  CALL   1A38
....................          } 
....................          else 
4E52:  BRA    4F1A
4E54:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4E56:  MOVF   x8A,W
4E58:  SUBLW  03
4E5A:  BNZ   4EBA
....................             { 
....................                displayContrasena(Password[0],20,30,0); 
4E5C:  MOVFF  4B8,53C
4E60:  MOVLW  14
4E62:  MOVLB  5
4E64:  MOVWF  x3D
4E66:  MOVLW  1E
4E68:  MOVWF  x3E
4E6A:  CLRF   x3F
4E6C:  MOVLB  0
4E6E:  CALL   1A38
....................                displayContrasena(Password[1],40,30,0); 
4E72:  MOVFF  4B9,53C
4E76:  MOVLW  28
4E78:  MOVLB  5
4E7A:  MOVWF  x3D
4E7C:  MOVLW  1E
4E7E:  MOVWF  x3E
4E80:  CLRF   x3F
4E82:  MOVLB  0
4E84:  CALL   1A38
....................                displayContrasena(Password[2],60,30,1); 
4E88:  MOVFF  4BA,53C
4E8C:  MOVLW  3C
4E8E:  MOVLB  5
4E90:  MOVWF  x3D
4E92:  MOVLW  1E
4E94:  MOVWF  x3E
4E96:  MOVLW  01
4E98:  MOVWF  x3F
4E9A:  MOVLB  0
4E9C:  CALL   1A38
....................                displayContrasena(Password[3],80,30,0); 
4EA0:  MOVFF  4BB,53C
4EA4:  MOVLW  50
4EA6:  MOVLB  5
4EA8:  MOVWF  x3D
4EAA:  MOVLW  1E
4EAC:  MOVWF  x3E
4EAE:  CLRF   x3F
4EB0:  MOVLB  0
4EB2:  CALL   1A38
....................             } 
....................             else 
4EB6:  BRA    4F1A
4EB8:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4EBA:  MOVF   x8A,W
4EBC:  SUBLW  04
4EBE:  BNZ   4F1C
....................                { 
....................                   displayContrasena(Password[0],20,30,0); 
4EC0:  MOVFF  4B8,53C
4EC4:  MOVLW  14
4EC6:  MOVLB  5
4EC8:  MOVWF  x3D
4ECA:  MOVLW  1E
4ECC:  MOVWF  x3E
4ECE:  CLRF   x3F
4ED0:  MOVLB  0
4ED2:  CALL   1A38
....................                   displayContrasena(Password[1],40,30,0); 
4ED6:  MOVFF  4B9,53C
4EDA:  MOVLW  28
4EDC:  MOVLB  5
4EDE:  MOVWF  x3D
4EE0:  MOVLW  1E
4EE2:  MOVWF  x3E
4EE4:  CLRF   x3F
4EE6:  MOVLB  0
4EE8:  CALL   1A38
....................                   displayContrasena(Password[2],60,30,0); 
4EEC:  MOVFF  4BA,53C
4EF0:  MOVLW  3C
4EF2:  MOVLB  5
4EF4:  MOVWF  x3D
4EF6:  MOVLW  1E
4EF8:  MOVWF  x3E
4EFA:  CLRF   x3F
4EFC:  MOVLB  0
4EFE:  CALL   1A38
....................                   displayContrasena(Password[3],80,30,1); 
4F02:  MOVFF  4BB,53C
4F06:  MOVLW  50
4F08:  MOVLB  5
4F0A:  MOVWF  x3D
4F0C:  MOVLW  1E
4F0E:  MOVWF  x3E
4F10:  MOVLW  01
4F12:  MOVWF  x3F
4F14:  MOVLB  0
4F16:  CALL   1A38
4F1A:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4F1C:  BSF    F92.5
4F1E:  BTFSS  F80.5
4F20:  BRA    4F8A
....................       { 
....................          if(Flanco == 0) 
4F22:  BTFSC  x7C.0
4F24:  BRA    4F88
....................          { 
....................             Flanco = 1;delay_ms(30); 
4F26:  BSF    x7C.0
4F28:  MOVLW  1E
4F2A:  MOVLB  5
4F2C:  MOVWF  x3F
4F2E:  MOVLB  0
4F30:  CALL   10EA
....................             for(i=1;i<=4;i++) 
4F34:  MOVLW  01
4F36:  MOVLB  4
4F38:  MOVWF  x8D
4F3A:  MOVF   x8D,W
4F3C:  SUBLW  04
4F3E:  BNC   4F88
....................             { 
....................                if(unidad==i) 
4F40:  MOVF   x8D,W
4F42:  SUBWF  x8A,W
4F44:  BNZ   4F84
....................                { 
....................                   Password[i-1]++; 
4F46:  MOVLW  01
4F48:  SUBWF  x8D,W
4F4A:  CLRF   03
4F4C:  ADDLW  B8
4F4E:  MOVWF  FE9
4F50:  MOVLW  04
4F52:  ADDWFC 03,W
4F54:  MOVWF  FEA
4F56:  INCF   FEF,F
....................                   if(Password[i-1]>9)    
4F58:  MOVLW  01
4F5A:  SUBWF  x8D,W
4F5C:  CLRF   03
4F5E:  ADDLW  B8
4F60:  MOVWF  FE9
4F62:  MOVLW  04
4F64:  ADDWFC 03,W
4F66:  MOVWF  FEA
4F68:  BTFSC  FEF.7
4F6A:  BRA    4F84
4F6C:  MOVF   FEF,W
4F6E:  SUBLW  09
4F70:  BC    4F84
....................                   { 
....................                      Password[i-1]=0; 
4F72:  MOVLW  01
4F74:  SUBWF  x8D,W
4F76:  CLRF   03
4F78:  ADDLW  B8
4F7A:  MOVWF  FE9
4F7C:  MOVLW  04
4F7E:  ADDWFC 03,W
4F80:  MOVWF  FEA
4F82:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4F84:  INCF   x8D,F
4F86:  BRA    4F3A
....................          } 
....................       } 
....................       else 
4F88:  BRA    4F8C
....................       { 
....................          Flanco = 0; 
4F8A:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4F8C:  BSF    F96.0
4F8E:  BTFSS  F84.0
4F90:  BRA    4FF8
....................       { 
....................          if(Flanco2 == 0) 
4F92:  BTFSC  x7C.2
4F94:  BRA    4FF6
....................             {Flanco2 = 1;delay_ms(30); 
4F96:  BSF    x7C.2
4F98:  MOVLW  1E
4F9A:  MOVLB  5
4F9C:  MOVWF  x3F
4F9E:  MOVLB  0
4FA0:  CALL   10EA
....................                for(i=1;i<=4;i++) 
4FA4:  MOVLW  01
4FA6:  MOVLB  4
4FA8:  MOVWF  x8D
4FAA:  MOVF   x8D,W
4FAC:  SUBLW  04
4FAE:  BNC   4FF6
....................                { 
....................                   if(unidad==i) 
4FB0:  MOVF   x8D,W
4FB2:  SUBWF  x8A,W
4FB4:  BNZ   4FF2
....................                   { 
....................                      Password[i-1]--; 
4FB6:  MOVLW  01
4FB8:  SUBWF  x8D,W
4FBA:  CLRF   03
4FBC:  ADDLW  B8
4FBE:  MOVWF  FE9
4FC0:  MOVLW  04
4FC2:  ADDWFC 03,W
4FC4:  MOVWF  FEA
4FC6:  DECF   FEF,F
....................                      if(Password[i-1]<0) 
4FC8:  MOVLW  01
4FCA:  SUBWF  x8D,W
4FCC:  CLRF   03
4FCE:  ADDLW  B8
4FD0:  MOVWF  FE9
4FD2:  MOVLW  04
4FD4:  ADDWFC 03,W
4FD6:  MOVWF  FEA
4FD8:  BTFSC  FEF.7
4FDA:  BRA    4FDE
4FDC:  BRA    4FF2
....................                      { 
....................                         Password[i-1]=9; 
4FDE:  MOVLW  01
4FE0:  SUBWF  x8D,W
4FE2:  CLRF   03
4FE4:  ADDLW  B8
4FE6:  MOVWF  FE9
4FE8:  MOVLW  04
4FEA:  ADDWFC 03,W
4FEC:  MOVWF  FEA
4FEE:  MOVLW  09
4FF0:  MOVWF  FEF
....................                      } 
....................                   } 
....................                }       
4FF2:  INCF   x8D,F
4FF4:  BRA    4FAA
....................             }      
....................       } 
....................       else 
4FF6:  BRA    4FFA
....................       { 
....................          Flanco2 = 0; 
4FF8:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4FFA:  BSF    F96.1
4FFC:  BTFSS  F84.1
4FFE:  BRA    5022
....................       { 
....................          if(Flanco1 == 0) 
5000:  BTFSC  x7C.1
5002:  BRA    5020
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
5004:  BSF    x7C.1
5006:  MOVLW  02
5008:  MOVLB  5
500A:  MOVWF  x3A
500C:  MOVLW  96
500E:  MOVWF  x3F
5010:  MOVLB  0
5012:  CALL   10EA
5016:  MOVLB  5
5018:  DECFSZ x3A,F
501A:  BRA    500C
501C:  MOVLB  4
501E:  INCF   x8A,F
....................       } 
....................       else 
5020:  BRA    5024
....................       { 
....................          Flanco1 = 0; 
5022:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
5024:  BSF    F96.2
5026:  BTFSS  F84.2
5028:  BRA    5052
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
502A:  MOVLW  04
502C:  MOVLB  5
502E:  MOVWF  x3A
5030:  MOVLW  AF
5032:  MOVWF  x3F
5034:  MOVLB  0
5036:  CALL   10EA
503A:  MOVLB  5
503C:  DECFSZ x3A,F
503E:  BRA    5030
5040:  MOVLW  01
5042:  MOVLB  4
5044:  MOVWF  x89
5046:  MOVLB  5
5048:  CLRF   x3B
504A:  MOVLB  0
504C:  CALL   11E2
5050:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
5052:  MOVF   x8A,W
5054:  SUBLW  04
5056:  BC    5124
....................       { 
....................          Opcion=1;unidad=1; 
5058:  MOVLW  01
505A:  MOVWF  x90
505C:  MOVWF  x8A
....................          write_eeprom(10,Password[0]);write_eeprom(11,Password[1]);write_eeprom(12,Password[2]);write_eeprom(13,Password[3]); 
505E:  MOVLW  0A
5060:  MOVWF  FA9
5062:  MOVFF  4B8,FA8
5066:  BCF    FA6.6
5068:  BCF    FA6.7
506A:  BSF    FA6.2
506C:  MOVF   FF2,W
506E:  MOVWF  00
5070:  BCF    FF2.7
5072:  MOVLB  F
5074:  MOVLW  55
5076:  MOVWF  FA7
5078:  MOVLW  AA
507A:  MOVWF  FA7
507C:  BSF    FA6.1
507E:  BTFSC  FA6.1
5080:  BRA    507E
5082:  BCF    FA6.2
5084:  MOVF   00,W
5086:  IORWF  FF2,F
5088:  MOVLW  0B
508A:  MOVWF  FA9
508C:  MOVFF  4B9,FA8
5090:  BCF    FA6.6
5092:  BCF    FA6.7
5094:  BSF    FA6.2
5096:  MOVF   FF2,W
5098:  MOVWF  00
509A:  BCF    FF2.7
509C:  MOVLW  55
509E:  MOVWF  FA7
50A0:  MOVLW  AA
50A2:  MOVWF  FA7
50A4:  BSF    FA6.1
50A6:  BTFSC  FA6.1
50A8:  BRA    50A6
50AA:  BCF    FA6.2
50AC:  MOVF   00,W
50AE:  IORWF  FF2,F
50B0:  MOVLW  0C
50B2:  MOVWF  FA9
50B4:  MOVFF  4BA,FA8
50B8:  BCF    FA6.6
50BA:  BCF    FA6.7
50BC:  BSF    FA6.2
50BE:  MOVF   FF2,W
50C0:  MOVWF  00
50C2:  BCF    FF2.7
50C4:  MOVLW  55
50C6:  MOVWF  FA7
50C8:  MOVLW  AA
50CA:  MOVWF  FA7
50CC:  BSF    FA6.1
50CE:  BTFSC  FA6.1
50D0:  BRA    50CE
50D2:  BCF    FA6.2
50D4:  MOVF   00,W
50D6:  IORWF  FF2,F
50D8:  MOVLW  0D
50DA:  MOVWF  FA9
50DC:  MOVFF  4BB,FA8
50E0:  BCF    FA6.6
50E2:  BCF    FA6.7
50E4:  BSF    FA6.2
50E6:  MOVF   FF2,W
50E8:  MOVWF  00
50EA:  BCF    FF2.7
50EC:  MOVLW  55
50EE:  MOVWF  FA7
50F0:  MOVLW  AA
50F2:  MOVWF  FA7
50F4:  BSF    FA6.1
50F6:  BTFSC  FA6.1
50F8:  BRA    50F6
50FA:  BCF    FA6.2
50FC:  MOVF   00,W
50FE:  IORWF  FF2,F
....................          delay_ms(1000);glcd_fillScreen(OFF);Menu=1; 
5100:  MOVLW  04
5102:  MOVLB  5
5104:  MOVWF  x3A
5106:  MOVLW  FA
5108:  MOVWF  x3F
510A:  MOVLB  0
510C:  CALL   10EA
5110:  MOVLB  5
5112:  DECFSZ x3A,F
5114:  BRA    5106
5116:  CLRF   x3B
5118:  MOVLB  0
511A:  CALL   11E2
511E:  MOVLW  01
5120:  MOVLB  4
5122:  MOVWF  x89
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==11){ // Menu de Tiempo de Esterilización 
5124:  MOVF   x89,W
5126:  SUBLW  0B
5128:  BTFSS  FD8.2
512A:  BRA    542C
....................       
....................       if(visual==1) 
512C:  BTFSS  x7C.4
512E:  BRA    52BA
....................       { 
....................          if(unidad<1) 
5130:  MOVF   x8A,F
5132:  BNZ   5138
....................          {unidad=4;} 
5134:  MOVLW  04
5136:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra,"T. Ester."); 
5138:  MOVLW  05
513A:  MOVWF  FEA
513C:  MOVLW  1A
513E:  MOVWF  FE9
5140:  MOVFF  FF2,53A
5144:  BCF    FF2.7
5146:  MOVLW  00
5148:  MOVLB  0
514A:  CALL   0C6C
514E:  TBLRD*-
5150:  TBLRD*+
5152:  MOVF   FF5,W
5154:  MOVWF  FEE
5156:  IORLW  00
5158:  BNZ   5150
515A:  MOVLB  5
515C:  BTFSC  x3A.7
515E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5160:  MOVLW  05
5162:  MOVWF  x3B
5164:  MOVLW  1A
5166:  MOVWF  x3A
5168:  CLRF   x3C
516A:  CLRF   x3D
516C:  MOVLW  01
516E:  MOVWF  x3E
5170:  MOVLW  02
5172:  MOVWF  x3F
5174:  MOVLB  0
5176:  CALL   1812
....................           
....................          if(unidad==4) 
517A:  MOVLB  4
517C:  MOVF   x8A,W
517E:  SUBLW  04
5180:  BNZ   51A0
....................          {displayTiempo(Testerilizacionp[3],20,40,1,2);} 
5182:  MOVFF  4AB,53B
5186:  MOVLW  14
5188:  MOVLB  5
518A:  MOVWF  x3C
518C:  MOVLW  28
518E:  MOVWF  x3D
5190:  MOVLW  01
5192:  MOVWF  x3E
5194:  MOVLW  02
5196:  MOVWF  x3F
5198:  MOVLB  0
519A:  CALL   23EA
....................          else 
519E:  BRA    51BA
....................          {displayTiempo(Testerilizacionp[3],20,40,0,2);} 
51A0:  MOVFF  4AB,53B
51A4:  MOVLW  14
51A6:  MOVLB  5
51A8:  MOVWF  x3C
51AA:  MOVLW  28
51AC:  MOVWF  x3D
51AE:  CLRF   x3E
51B0:  MOVLW  02
51B2:  MOVWF  x3F
51B4:  MOVLB  0
51B6:  CALL   23EA
....................           
....................          if(unidad==3) 
51BA:  MOVLB  4
51BC:  MOVF   x8A,W
51BE:  SUBLW  03
51C0:  BNZ   51DE
....................          {displayTiempo(Testerilizacionp[2],40,40,1,2);} 
51C2:  MOVFF  4AA,53B
51C6:  MOVLW  28
51C8:  MOVLB  5
51CA:  MOVWF  x3C
51CC:  MOVWF  x3D
51CE:  MOVLW  01
51D0:  MOVWF  x3E
51D2:  MOVLW  02
51D4:  MOVWF  x3F
51D6:  MOVLB  0
51D8:  CALL   23EA
....................          else 
51DC:  BRA    51F6
....................          {displayTiempo(Testerilizacionp[2],40,40,0,2);} 
51DE:  MOVFF  4AA,53B
51E2:  MOVLW  28
51E4:  MOVLB  5
51E6:  MOVWF  x3C
51E8:  MOVWF  x3D
51EA:  CLRF   x3E
51EC:  MOVLW  02
51EE:  MOVWF  x3F
51F0:  MOVLB  0
51F2:  CALL   23EA
....................           
....................          if(unidad==2) 
51F6:  MOVLB  4
51F8:  MOVF   x8A,W
51FA:  SUBLW  02
51FC:  BNZ   521C
....................          {displayTiempo(Testerilizacionp[1],70,40,1,2);} 
51FE:  MOVFF  4A9,53B
5202:  MOVLW  46
5204:  MOVLB  5
5206:  MOVWF  x3C
5208:  MOVLW  28
520A:  MOVWF  x3D
520C:  MOVLW  01
520E:  MOVWF  x3E
5210:  MOVLW  02
5212:  MOVWF  x3F
5214:  MOVLB  0
5216:  CALL   23EA
....................          else 
521A:  BRA    5236
....................          {displayTiempo(Testerilizacionp[1],70,40,0,2);} 
521C:  MOVFF  4A9,53B
5220:  MOVLW  46
5222:  MOVLB  5
5224:  MOVWF  x3C
5226:  MOVLW  28
5228:  MOVWF  x3D
522A:  CLRF   x3E
522C:  MOVLW  02
522E:  MOVWF  x3F
5230:  MOVLB  0
5232:  CALL   23EA
....................           
....................          if(unidad==1) 
5236:  MOVLB  4
5238:  DECFSZ x8A,W
523A:  BRA    525A
....................          {displayTiempo(Testerilizacionp[0],90,40,1,2);} 
523C:  MOVFF  4A8,53B
5240:  MOVLW  5A
5242:  MOVLB  5
5244:  MOVWF  x3C
5246:  MOVLW  28
5248:  MOVWF  x3D
524A:  MOVLW  01
524C:  MOVWF  x3E
524E:  MOVLW  02
5250:  MOVWF  x3F
5252:  MOVLB  0
5254:  CALL   23EA
....................          else 
5258:  BRA    5274
....................          {displayTiempo(Testerilizacionp[0],90,40,0,2);} 
525A:  MOVFF  4A8,53B
525E:  MOVLW  5A
5260:  MOVLB  5
5262:  MOVWF  x3C
5264:  MOVLW  28
5266:  MOVWF  x3D
5268:  CLRF   x3E
526A:  MOVLW  02
526C:  MOVWF  x3F
526E:  MOVLB  0
5270:  CALL   23EA
....................           
....................          strcpy(Menus.Letra,":"); 
5274:  MOVLW  05
5276:  MOVWF  FEA
5278:  MOVLW  1A
527A:  MOVWF  FE9
527C:  MOVFF  FF2,53A
5280:  BCF    FF2.7
5282:  MOVLW  00
5284:  CALL   06CA
5288:  TBLRD*-
528A:  TBLRD*+
528C:  MOVF   FF5,W
528E:  MOVWF  FEE
5290:  IORLW  00
5292:  BNZ   528A
5294:  MOVLB  5
5296:  BTFSC  x3A.7
5298:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);      
529A:  MOVLW  05
529C:  MOVWF  x3B
529E:  MOVLW  1A
52A0:  MOVWF  x3A
52A2:  MOVLW  3C
52A4:  MOVWF  x3C
52A6:  MOVLW  2A
52A8:  MOVWF  x3D
52AA:  MOVLW  02
52AC:  MOVWF  x3E
52AE:  MOVWF  x3F
52B0:  MOVLB  0
52B2:  CALL   1812
....................           
....................          visual=0; 
52B6:  MOVLB  4
52B8:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
52BA:  BSF    F92.5
52BC:  BTFSS  F80.5
52BE:  BRA    52FC
....................          {   
....................             if(Testerilizacionp[unidad-1]<9) 
52C0:  MOVLW  01
52C2:  SUBWF  x8A,W
52C4:  CLRF   03
52C6:  ADDLW  A8
52C8:  MOVWF  FE9
52CA:  MOVLW  04
52CC:  ADDWFC 03,W
52CE:  MOVWF  FEA
52D0:  BTFSC  FEF.7
52D2:  BRA    52DA
52D4:  MOVF   FEF,W
52D6:  SUBLW  08
52D8:  BNC   52FC
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]++;visual=1; 
52DA:  MOVLW  1E
52DC:  MOVLB  5
52DE:  MOVWF  x3F
52E0:  MOVLB  0
52E2:  CALL   10EA
52E6:  MOVLW  01
52E8:  MOVLB  4
52EA:  SUBWF  x8A,W
52EC:  CLRF   03
52EE:  ADDLW  A8
52F0:  MOVWF  FE9
52F2:  MOVLW  04
52F4:  ADDWFC 03,W
52F6:  MOVWF  FEA
52F8:  INCF   FEF,F
52FA:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
52FC:  BSF    F96.0
52FE:  BTFSS  F84.0
5300:  BRA    533E
....................          {   
....................             if(Testerilizacionp[unidad-1]>0) 
5302:  MOVLW  01
5304:  SUBWF  x8A,W
5306:  CLRF   03
5308:  ADDLW  A8
530A:  MOVWF  FE9
530C:  MOVLW  04
530E:  ADDWFC 03,W
5310:  MOVWF  FEA
5312:  BTFSC  FEF.7
5314:  BRA    533E
5316:  MOVF   FEF,W
5318:  SUBLW  00
531A:  BC    533E
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]--;visual=1;      
531C:  MOVLW  1E
531E:  MOVLB  5
5320:  MOVWF  x3F
5322:  MOVLB  0
5324:  CALL   10EA
5328:  MOVLW  01
532A:  MOVLB  4
532C:  SUBWF  x8A,W
532E:  CLRF   03
5330:  ADDLW  A8
5332:  MOVWF  FE9
5334:  MOVLW  04
5336:  ADDWFC 03,W
5338:  MOVWF  FEA
533A:  DECF   FEF,F
533C:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
533E:  BSF    F96.1
5340:  BTFSS  F84.1
5342:  BRA    5356
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
5344:  MOVLW  1E
5346:  MOVLB  5
5348:  MOVWF  x3F
534A:  MOVLB  0
534C:  CALL   10EA
5350:  MOVLB  4
5352:  DECF   x8A,F
5354:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5356:  BSF    F96.2
5358:  BTFSS  F84.2
535A:  BRA    542C
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
535C:  MOVLW  04
535E:  MOVLB  5
5360:  MOVWF  x3A
5362:  MOVLW  AF
5364:  MOVWF  x3F
5366:  MOVLB  0
5368:  CALL   10EA
536C:  MOVLB  5
536E:  DECFSZ x3A,F
5370:  BRA    5362
5372:  MOVLW  08
5374:  MOVLB  4
5376:  MOVWF  x89
5378:  MOVLB  5
537A:  CLRF   x3B
537C:  MOVLB  0
537E:  CALL   11E2
5382:  MOVLW  01
5384:  MOVLB  4
5386:  MOVWF  x90
5388:  BSF    x7C.4
....................             write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]); 
538A:  CLRF   FA9
538C:  MOVFF  4A8,FA8
5390:  BCF    FA6.6
5392:  BCF    FA6.7
5394:  BSF    FA6.2
5396:  MOVF   FF2,W
5398:  MOVWF  00
539A:  BCF    FF2.7
539C:  MOVLB  F
539E:  MOVLW  55
53A0:  MOVWF  FA7
53A2:  MOVLW  AA
53A4:  MOVWF  FA7
53A6:  BSF    FA6.1
53A8:  BTFSC  FA6.1
53AA:  BRA    53A8
53AC:  BCF    FA6.2
53AE:  MOVF   00,W
53B0:  IORWF  FF2,F
53B2:  MOVLW  01
53B4:  MOVWF  FA9
53B6:  MOVFF  4A9,FA8
53BA:  BCF    FA6.6
53BC:  BCF    FA6.7
53BE:  BSF    FA6.2
53C0:  MOVF   FF2,W
53C2:  MOVWF  00
53C4:  BCF    FF2.7
53C6:  MOVLW  55
53C8:  MOVWF  FA7
53CA:  MOVLW  AA
53CC:  MOVWF  FA7
53CE:  BSF    FA6.1
53D0:  BTFSC  FA6.1
53D2:  BRA    53D0
53D4:  BCF    FA6.2
53D6:  MOVF   00,W
53D8:  IORWF  FF2,F
....................             write_eeprom(2,Testerilizacionp[2]);write_eeprom(3,Testerilizacionp[3]); 
53DA:  MOVLW  02
53DC:  MOVWF  FA9
53DE:  MOVFF  4AA,FA8
53E2:  BCF    FA6.6
53E4:  BCF    FA6.7
53E6:  BSF    FA6.2
53E8:  MOVFF  FF2,00
53EC:  BCF    FF2.7
53EE:  MOVLW  55
53F0:  MOVWF  FA7
53F2:  MOVLW  AA
53F4:  MOVWF  FA7
53F6:  BSF    FA6.1
53F8:  BTFSC  FA6.1
53FA:  BRA    53F8
53FC:  BCF    FA6.2
53FE:  MOVF   00,W
5400:  IORWF  FF2,F
5402:  MOVLW  03
5404:  MOVWF  FA9
5406:  MOVFF  4AB,FA8
540A:  BCF    FA6.6
540C:  BCF    FA6.7
540E:  BSF    FA6.2
5410:  MOVFF  FF2,00
5414:  BCF    FF2.7
5416:  MOVLW  55
5418:  MOVWF  FA7
541A:  MOVLW  AA
541C:  MOVWF  FA7
541E:  BSF    FA6.1
5420:  BTFSC  FA6.1
5422:  BRA    5420
5424:  BCF    FA6.2
5426:  MOVF   00,W
5428:  IORWF  FF2,F
542A:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==12){ // Menu de Tiempo de Secado 
542C:  MOVF   x89,W
542E:  SUBLW  0C
5430:  BTFSS  FD8.2
5432:  BRA    5736
....................       
....................       if(visual==1) 
5434:  BTFSS  x7C.4
5436:  BRA    55C2
....................       { 
....................          if(unidad<1) 
5438:  MOVF   x8A,F
543A:  BNZ   5440
....................          {unidad=4;} 
543C:  MOVLW  04
543E:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra," Secado"); 
5440:  MOVLW  05
5442:  MOVWF  FEA
5444:  MOVLW  1A
5446:  MOVWF  FE9
5448:  MOVFF  FF2,53A
544C:  BCF    FF2.7
544E:  MOVLW  00
5450:  MOVLB  0
5452:  CALL   0C90
5456:  TBLRD*-
5458:  TBLRD*+
545A:  MOVF   FF5,W
545C:  MOVWF  FEE
545E:  IORLW  00
5460:  BNZ   5458
5462:  MOVLB  5
5464:  BTFSC  x3A.7
5466:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5468:  MOVLW  05
546A:  MOVWF  x3B
546C:  MOVLW  1A
546E:  MOVWF  x3A
5470:  CLRF   x3C
5472:  CLRF   x3D
5474:  MOVLW  01
5476:  MOVWF  x3E
5478:  MOVLW  02
547A:  MOVWF  x3F
547C:  MOVLB  0
547E:  CALL   1812
....................           
....................          if(unidad==4) 
5482:  MOVLB  4
5484:  MOVF   x8A,W
5486:  SUBLW  04
5488:  BNZ   54A8
....................          {displayTiempo(Tsecadop[3],20,40,1,2);} 
548A:  MOVFF  4B3,53B
548E:  MOVLW  14
5490:  MOVLB  5
5492:  MOVWF  x3C
5494:  MOVLW  28
5496:  MOVWF  x3D
5498:  MOVLW  01
549A:  MOVWF  x3E
549C:  MOVLW  02
549E:  MOVWF  x3F
54A0:  MOVLB  0
54A2:  CALL   23EA
....................          else 
54A6:  BRA    54C2
....................          {displayTiempo(Tsecadop[3],20,40,0,2);} 
54A8:  MOVFF  4B3,53B
54AC:  MOVLW  14
54AE:  MOVLB  5
54B0:  MOVWF  x3C
54B2:  MOVLW  28
54B4:  MOVWF  x3D
54B6:  CLRF   x3E
54B8:  MOVLW  02
54BA:  MOVWF  x3F
54BC:  MOVLB  0
54BE:  CALL   23EA
....................           
....................          if(unidad==3) 
54C2:  MOVLB  4
54C4:  MOVF   x8A,W
54C6:  SUBLW  03
54C8:  BNZ   54E6
....................          {displayTiempo(Tsecadop[2],40,40,1,2);} 
54CA:  MOVFF  4B2,53B
54CE:  MOVLW  28
54D0:  MOVLB  5
54D2:  MOVWF  x3C
54D4:  MOVWF  x3D
54D6:  MOVLW  01
54D8:  MOVWF  x3E
54DA:  MOVLW  02
54DC:  MOVWF  x3F
54DE:  MOVLB  0
54E0:  CALL   23EA
....................          else 
54E4:  BRA    54FE
....................          {displayTiempo(Tsecadop[2],40,40,0,2);} 
54E6:  MOVFF  4B2,53B
54EA:  MOVLW  28
54EC:  MOVLB  5
54EE:  MOVWF  x3C
54F0:  MOVWF  x3D
54F2:  CLRF   x3E
54F4:  MOVLW  02
54F6:  MOVWF  x3F
54F8:  MOVLB  0
54FA:  CALL   23EA
....................           
....................          if(unidad==2) 
54FE:  MOVLB  4
5500:  MOVF   x8A,W
5502:  SUBLW  02
5504:  BNZ   5524
....................          {displayTiempo(Tsecadop[1],70,40,1,2);} 
5506:  MOVFF  4B1,53B
550A:  MOVLW  46
550C:  MOVLB  5
550E:  MOVWF  x3C
5510:  MOVLW  28
5512:  MOVWF  x3D
5514:  MOVLW  01
5516:  MOVWF  x3E
5518:  MOVLW  02
551A:  MOVWF  x3F
551C:  MOVLB  0
551E:  CALL   23EA
....................          else 
5522:  BRA    553E
....................          {displayTiempo(Tsecadop[1],70,40,0,2);} 
5524:  MOVFF  4B1,53B
5528:  MOVLW  46
552A:  MOVLB  5
552C:  MOVWF  x3C
552E:  MOVLW  28
5530:  MOVWF  x3D
5532:  CLRF   x3E
5534:  MOVLW  02
5536:  MOVWF  x3F
5538:  MOVLB  0
553A:  CALL   23EA
....................           
....................          if(unidad==1) 
553E:  MOVLB  4
5540:  DECFSZ x8A,W
5542:  BRA    5562
....................          {displayTiempo(Tsecadop[0],90,40,1,2);} 
5544:  MOVFF  4B0,53B
5548:  MOVLW  5A
554A:  MOVLB  5
554C:  MOVWF  x3C
554E:  MOVLW  28
5550:  MOVWF  x3D
5552:  MOVLW  01
5554:  MOVWF  x3E
5556:  MOVLW  02
5558:  MOVWF  x3F
555A:  MOVLB  0
555C:  CALL   23EA
....................          else 
5560:  BRA    557C
....................          {displayTiempo(Tsecadop[0],90,40,0,2);} 
5562:  MOVFF  4B0,53B
5566:  MOVLW  5A
5568:  MOVLB  5
556A:  MOVWF  x3C
556C:  MOVLW  28
556E:  MOVWF  x3D
5570:  CLRF   x3E
5572:  MOVLW  02
5574:  MOVWF  x3F
5576:  MOVLB  0
5578:  CALL   23EA
....................           
....................          strcpy(Menus.Letra,":"); 
557C:  MOVLW  05
557E:  MOVWF  FEA
5580:  MOVLW  1A
5582:  MOVWF  FE9
5584:  MOVFF  FF2,53A
5588:  BCF    FF2.7
558A:  MOVLW  00
558C:  CALL   06CA
5590:  TBLRD*-
5592:  TBLRD*+
5594:  MOVF   FF5,W
5596:  MOVWF  FEE
5598:  IORLW  00
559A:  BNZ   5592
559C:  MOVLB  5
559E:  BTFSC  x3A.7
55A0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);  
55A2:  MOVLW  05
55A4:  MOVWF  x3B
55A6:  MOVLW  1A
55A8:  MOVWF  x3A
55AA:  MOVLW  3C
55AC:  MOVWF  x3C
55AE:  MOVLW  2A
55B0:  MOVWF  x3D
55B2:  MOVLW  02
55B4:  MOVWF  x3E
55B6:  MOVWF  x3F
55B8:  MOVLB  0
55BA:  CALL   1812
....................           
....................          visual=0; 
55BE:  MOVLB  4
55C0:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
55C2:  BSF    F92.5
55C4:  BTFSS  F80.5
55C6:  BRA    5604
....................          {   
....................             if(Tsecadop[unidad-1]<9) 
55C8:  MOVLW  01
55CA:  SUBWF  x8A,W
55CC:  CLRF   03
55CE:  ADDLW  B0
55D0:  MOVWF  FE9
55D2:  MOVLW  04
55D4:  ADDWFC 03,W
55D6:  MOVWF  FEA
55D8:  BTFSC  FEF.7
55DA:  BRA    55E2
55DC:  MOVF   FEF,W
55DE:  SUBLW  08
55E0:  BNC   5604
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]++;visual=1; 
55E2:  MOVLW  1E
55E4:  MOVLB  5
55E6:  MOVWF  x3F
55E8:  MOVLB  0
55EA:  CALL   10EA
55EE:  MOVLW  01
55F0:  MOVLB  4
55F2:  SUBWF  x8A,W
55F4:  CLRF   03
55F6:  ADDLW  B0
55F8:  MOVWF  FE9
55FA:  MOVLW  04
55FC:  ADDWFC 03,W
55FE:  MOVWF  FEA
5600:  INCF   FEF,F
5602:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5604:  BSF    F96.0
5606:  BTFSS  F84.0
5608:  BRA    5646
....................          {   
....................             if(Tsecadop[unidad-1]>0) 
560A:  MOVLW  01
560C:  SUBWF  x8A,W
560E:  CLRF   03
5610:  ADDLW  B0
5612:  MOVWF  FE9
5614:  MOVLW  04
5616:  ADDWFC 03,W
5618:  MOVWF  FEA
561A:  BTFSC  FEF.7
561C:  BRA    5646
561E:  MOVF   FEF,W
5620:  SUBLW  00
5622:  BC    5646
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]--;visual=1;      
5624:  MOVLW  1E
5626:  MOVLB  5
5628:  MOVWF  x3F
562A:  MOVLB  0
562C:  CALL   10EA
5630:  MOVLW  01
5632:  MOVLB  4
5634:  SUBWF  x8A,W
5636:  CLRF   03
5638:  ADDLW  B0
563A:  MOVWF  FE9
563C:  MOVLW  04
563E:  ADDWFC 03,W
5640:  MOVWF  FEA
5642:  DECF   FEF,F
5644:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5646:  BSF    F96.1
5648:  BTFSS  F84.1
564A:  BRA    565E
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
564C:  MOVLW  1E
564E:  MOVLB  5
5650:  MOVWF  x3F
5652:  MOVLB  0
5654:  CALL   10EA
5658:  MOVLB  4
565A:  DECF   x8A,F
565C:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
565E:  BSF    F96.2
5660:  BTFSS  F84.2
5662:  BRA    5736
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5664:  MOVLW  04
5666:  MOVLB  5
5668:  MOVWF  x3A
566A:  MOVLW  AF
566C:  MOVWF  x3F
566E:  MOVLB  0
5670:  CALL   10EA
5674:  MOVLB  5
5676:  DECFSZ x3A,F
5678:  BRA    566A
567A:  MOVLW  08
567C:  MOVLB  4
567E:  MOVWF  x89
5680:  MOVLB  5
5682:  CLRF   x3B
5684:  MOVLB  0
5686:  CALL   11E2
568A:  MOVLW  01
568C:  MOVLB  4
568E:  MOVWF  x90
5690:  BSF    x7C.4
....................             write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]); 
5692:  MOVLW  04
5694:  MOVWF  FA9
5696:  MOVFF  4B0,FA8
569A:  BCF    FA6.6
569C:  BCF    FA6.7
569E:  BSF    FA6.2
56A0:  MOVF   FF2,W
56A2:  MOVWF  00
56A4:  BCF    FF2.7
56A6:  MOVLB  F
56A8:  MOVLW  55
56AA:  MOVWF  FA7
56AC:  MOVLW  AA
56AE:  MOVWF  FA7
56B0:  BSF    FA6.1
56B2:  BTFSC  FA6.1
56B4:  BRA    56B2
56B6:  BCF    FA6.2
56B8:  MOVF   00,W
56BA:  IORWF  FF2,F
56BC:  MOVLW  05
56BE:  MOVWF  FA9
56C0:  MOVFF  4B1,FA8
56C4:  BCF    FA6.6
56C6:  BCF    FA6.7
56C8:  BSF    FA6.2
56CA:  MOVF   FF2,W
56CC:  MOVWF  00
56CE:  BCF    FF2.7
56D0:  MOVLW  55
56D2:  MOVWF  FA7
56D4:  MOVLW  AA
56D6:  MOVWF  FA7
56D8:  BSF    FA6.1
56DA:  BTFSC  FA6.1
56DC:  BRA    56DA
56DE:  BCF    FA6.2
56E0:  MOVF   00,W
56E2:  IORWF  FF2,F
....................             write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
56E4:  MOVLW  06
56E6:  MOVWF  FA9
56E8:  MOVFF  4B2,FA8
56EC:  BCF    FA6.6
56EE:  BCF    FA6.7
56F0:  BSF    FA6.2
56F2:  MOVFF  FF2,00
56F6:  BCF    FF2.7
56F8:  MOVLW  55
56FA:  MOVWF  FA7
56FC:  MOVLW  AA
56FE:  MOVWF  FA7
5700:  BSF    FA6.1
5702:  BTFSC  FA6.1
5704:  BRA    5702
5706:  BCF    FA6.2
5708:  MOVF   00,W
570A:  IORWF  FF2,F
570C:  MOVLW  07
570E:  MOVWF  FA9
5710:  MOVFF  4B3,FA8
5714:  BCF    FA6.6
5716:  BCF    FA6.7
5718:  BSF    FA6.2
571A:  MOVFF  FF2,00
571E:  BCF    FF2.7
5720:  MOVLW  55
5722:  MOVWF  FA7
5724:  MOVLW  AA
5726:  MOVWF  FA7
5728:  BSF    FA6.1
572A:  BTFSC  FA6.1
572C:  BRA    572A
572E:  BCF    FA6.2
5730:  MOVF   00,W
5732:  IORWF  FF2,F
5734:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==13){ // Menu de Temperatura 
5736:  MOVF   x89,W
5738:  SUBLW  0D
573A:  BTFSS  FD8.2
573C:  BRA    5874
....................       
....................       if(visual==1) 
573E:  BTFSS  x7C.4
5740:  BRA    57A8
....................       { 
....................          glcd_fillScreen(OFF); 
5742:  MOVLB  5
5744:  CLRF   x3B
5746:  MOVLB  0
5748:  CALL   11E2
....................          strcpy(Menus.Letra,"Temperatura"); 
574C:  MOVLW  05
574E:  MOVWF  FEA
5750:  MOVLW  1A
5752:  MOVWF  FE9
5754:  MOVFF  FF2,53A
5758:  BCF    FF2.7
575A:  MOVLW  00
575C:  CALL   0BD0
5760:  TBLRD*-
5762:  TBLRD*+
5764:  MOVF   FF5,W
5766:  MOVWF  FEE
5768:  IORLW  00
576A:  BNZ   5762
576C:  MOVLB  5
576E:  BTFSC  x3A.7
5770:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5772:  MOVLW  05
5774:  MOVWF  x3B
5776:  MOVLW  1A
5778:  MOVWF  x3A
577A:  CLRF   x3C
577C:  CLRF   x3D
577E:  MOVLW  01
5780:  MOVWF  x3E
5782:  MOVLW  02
5784:  MOVWF  x3F
5786:  MOVLB  0
5788:  CALL   1812
....................           
....................          displayTiempo(Setpoint,30,30,0,3); 
578C:  MOVFF  48E,53B
5790:  MOVLW  1E
5792:  MOVLB  5
5794:  MOVWF  x3C
5796:  MOVWF  x3D
5798:  CLRF   x3E
579A:  MOVLW  03
579C:  MOVWF  x3F
579E:  MOVLB  0
57A0:  CALL   23EA
....................           
....................          visual=0; 
57A4:  MOVLB  4
57A6:  BCF    x7C.4
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
57A8:  BSF    F92.5
57AA:  BTFSS  F80.5
57AC:  BRA    57E0
....................          {   
....................             if(Setpoint<134) 
57AE:  MOVF   x8E,W
57B0:  SUBLW  85
57B2:  BNC   57E0
....................             { 
....................                if(Setpoint<100) 
57B4:  MOVF   x8E,W
57B6:  SUBLW  63
57B8:  BNC   57CE
....................                { 
....................                   Setpoint=100;delay_ms(100);visual=1; 
57BA:  MOVLW  64
57BC:  MOVWF  x8E
57BE:  MOVLB  5
57C0:  MOVWF  x3F
57C2:  MOVLB  0
57C4:  CALL   10EA
57C8:  MOVLB  4
57CA:  BSF    x7C.4
....................                } 
....................                else 
57CC:  BRA    57E0
....................                { 
....................                   delay_ms(30);Setpoint++;visual=1; 
57CE:  MOVLW  1E
57D0:  MOVLB  5
57D2:  MOVWF  x3F
57D4:  MOVLB  0
57D6:  CALL   10EA
57DA:  MOVLB  4
57DC:  INCF   x8E,F
57DE:  BSF    x7C.4
....................                } 
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
57E0:  BSF    F96.0
57E2:  BTFSS  F84.0
57E4:  BRA    57FE
....................          {   
....................             if(Setpoint>105) 
57E6:  MOVF   x8E,W
57E8:  SUBLW  69
57EA:  BC    57FE
....................             { 
....................                delay_ms(30);Setpoint--;visual=1;      
57EC:  MOVLW  1E
57EE:  MOVLB  5
57F0:  MOVWF  x3F
57F2:  MOVLB  0
57F4:  CALL   10EA
57F8:  MOVLB  4
57FA:  DECF   x8E,F
57FC:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
57FE:  BSF    F96.1
5800:  BTFSS  F84.1
5802:  BRA    5814
....................          {   
....................             delay_ms(30);visual=1; 
5804:  MOVLW  1E
5806:  MOVLB  5
5808:  MOVWF  x3F
580A:  MOVLB  0
580C:  CALL   10EA
5810:  MOVLB  4
5812:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5814:  BSF    F96.2
5816:  BTFSS  F84.2
5818:  BRA    5874
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
581A:  MOVLW  04
581C:  MOVLB  5
581E:  MOVWF  x3A
5820:  MOVLW  AF
5822:  MOVWF  x3F
5824:  MOVLB  0
5826:  CALL   10EA
582A:  MOVLB  5
582C:  DECFSZ x3A,F
582E:  BRA    5820
5830:  MOVLW  08
5832:  MOVLB  4
5834:  MOVWF  x89
5836:  MOVLB  5
5838:  CLRF   x3B
583A:  MOVLB  0
583C:  CALL   11E2
5840:  MOVLW  01
5842:  MOVLB  4
5844:  MOVWF  x90
5846:  BSF    x7C.4
....................             write_eeprom(8,Setpoint); 
5848:  MOVLW  08
584A:  MOVWF  FA9
584C:  MOVFF  48E,FA8
5850:  BCF    FA6.6
5852:  BCF    FA6.7
5854:  BSF    FA6.2
5856:  MOVF   FF2,W
5858:  MOVWF  00
585A:  BCF    FF2.7
585C:  MOVLB  F
585E:  MOVLW  55
5860:  MOVWF  FA7
5862:  MOVLW  AA
5864:  MOVWF  FA7
5866:  BSF    FA6.1
5868:  BTFSC  FA6.1
586A:  BRA    5868
586C:  BCF    FA6.2
586E:  MOVF   00,W
5870:  IORWF  FF2,F
5872:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==14){ // Menu de Desfogue 
5874:  MOVF   x89,W
5876:  SUBLW  0E
5878:  BTFSS  FD8.2
587A:  BRA    5B5E
....................       
....................       if(visual==1) 
587C:  BTFSS  x7C.4
587E:  BRA    58E0
....................       {          
....................          strcpy(Menus.Letra," Desfogue"); 
5880:  MOVLW  05
5882:  MOVWF  FEA
5884:  MOVLW  1A
5886:  MOVWF  FE9
5888:  MOVFF  FF2,53A
588C:  BCF    FF2.7
588E:  MOVLW  00
5890:  MOVLB  0
5892:  CALL   0CB2
5896:  TBLRD*-
5898:  TBLRD*+
589A:  MOVF   FF5,W
589C:  MOVWF  FEE
589E:  IORLW  00
58A0:  BNZ   5898
58A2:  MOVLB  5
58A4:  BTFSC  x3A.7
58A6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
58A8:  MOVLW  05
58AA:  MOVWF  x3B
58AC:  MOVLW  1A
58AE:  MOVWF  x3A
58B0:  CLRF   x3C
58B2:  CLRF   x3D
58B4:  MOVLW  01
58B6:  MOVWF  x3E
58B8:  MOVLW  02
58BA:  MOVWF  x3F
58BC:  MOVLB  0
58BE:  CALL   1812
....................           
....................          displayTiempo(Nivel,50,40,0,2); 
58C2:  MOVFF  49C,53B
58C6:  MOVLW  32
58C8:  MOVLB  5
58CA:  MOVWF  x3C
58CC:  MOVLW  28
58CE:  MOVWF  x3D
58D0:  CLRF   x3E
58D2:  MOVLW  02
58D4:  MOVWF  x3F
58D6:  MOVLB  0
58D8:  CALL   23EA
....................           
....................          visual=0; 
58DC:  MOVLB  4
58DE:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
58E0:  BSF    F92.5
58E2:  BTFSS  F80.5
58E4:  BRA    5906
....................          {   
....................             if(Nivel<6) 
58E6:  MOVF   x9D,F
58E8:  BNZ   5906
58EA:  MOVF   x9C,W
58EC:  SUBLW  05
58EE:  BNC   5906
....................             { 
....................                delay_ms(30);Nivel++;visual=1; 
58F0:  MOVLW  1E
58F2:  MOVLB  5
58F4:  MOVWF  x3F
58F6:  MOVLB  0
58F8:  CALL   10EA
58FC:  MOVLB  4
58FE:  INCF   x9C,F
5900:  BTFSC  FD8.2
5902:  INCF   x9D,F
5904:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5906:  BSF    F96.0
5908:  BTFSS  F84.0
590A:  BRA    592E
....................          {   
....................             if(Nivel>1) 
590C:  MOVF   x9D,F
590E:  BNZ   5916
5910:  MOVF   x9C,W
5912:  SUBLW  01
5914:  BC    592E
....................             { 
....................                delay_ms(30);Nivel--;visual=1;      
5916:  MOVLW  1E
5918:  MOVLB  5
591A:  MOVWF  x3F
591C:  MOVLB  0
591E:  CALL   10EA
5922:  MOVLB  4
5924:  MOVF   x9C,W
5926:  BTFSC  FD8.2
5928:  DECF   x9D,F
592A:  DECF   x9C,F
592C:  BSF    x7C.4
....................             } 
....................          } 
....................           
....................          if(desfoguelento==1) 
592E:  BTFSS  x7C.5
5930:  BRA    5AEE
....................          { 
....................             if(RIGHT)//Si oprime SET 
5932:  BSF    F96.1
5934:  BTFSS  F84.1
5936:  BRA    5AEC
....................             {   
....................                write_eeprom(9,Nivel); 
5938:  MOVLW  09
593A:  MOVWF  FA9
593C:  MOVFF  49C,FA8
5940:  BCF    FA6.6
5942:  BCF    FA6.7
5944:  BSF    FA6.2
5946:  MOVF   FF2,W
5948:  MOVWF  00
594A:  BCF    FF2.7
594C:  MOVLB  F
594E:  MOVLW  55
5950:  MOVWF  FA7
5952:  MOVLW  AA
5954:  MOVWF  FA7
5956:  BSF    FA6.1
5958:  BTFSC  FA6.1
595A:  BRA    5958
595C:  BCF    FA6.2
595E:  MOVF   00,W
5960:  IORWF  FF2,F
....................                Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5962:  MOVLW  14
5964:  MOVLB  4
5966:  MOVWF  x89
5968:  MOVLW  0F
596A:  MOVLB  5
596C:  MOVWF  x4C
596E:  MOVLW  12
5970:  MOVWF  x4D
5972:  MOVLW  1E
5974:  MOVWF  x4E
5976:  MOVLW  35
5978:  MOVWF  x4F
597A:  CLRF   x50
597C:  MOVLW  01
597E:  MOVWF  x51
5980:  MOVLB  0
5982:  CALL   1750
5986:  MOVLB  4
5988:  CLRF   x92
598A:  MOVLW  C0
598C:  IORWF  FF2,F
598E:  MOVLB  5
5990:  CLRF   x3B
5992:  MOVLB  0
5994:  CALL   11E2
....................                strcpy(Menus.Letra,"Calentando"); 
5998:  MOVLW  05
599A:  MOVWF  FEA
599C:  MOVLW  1A
599E:  MOVWF  FE9
59A0:  MOVFF  FF2,53A
59A4:  BCF    FF2.7
59A6:  MOVLW  00
59A8:  CALL   0970
59AC:  TBLRD*-
59AE:  TBLRD*+
59B0:  MOVF   FF5,W
59B2:  MOVWF  FEE
59B4:  IORLW  00
59B6:  BNZ   59AE
59B8:  MOVLB  5
59BA:  BTFSC  x3A.7
59BC:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
59BE:  MOVLW  05
59C0:  MOVWF  x3B
59C2:  MOVLW  1A
59C4:  MOVWF  x3A
59C6:  CLRF   x3C
59C8:  MOVLW  37
59CA:  MOVWF  x3D
59CC:  MOVLW  02
59CE:  MOVWF  x3E
59D0:  MOVLW  01
59D2:  MOVWF  x3F
59D4:  MOVLB  0
59D6:  CALL   1812
....................                glcd_rect(15, 18, 30, 53, NO, ON); 
59DA:  MOVLW  0F
59DC:  MOVLB  5
59DE:  MOVWF  x4C
59E0:  MOVLW  12
59E2:  MOVWF  x4D
59E4:  MOVLW  1E
59E6:  MOVWF  x4E
59E8:  MOVLW  35
59EA:  MOVWF  x4F
59EC:  CLRF   x50
59EE:  MOVLW  01
59F0:  MOVWF  x51
59F2:  MOVLB  0
59F4:  CALL   1750
....................                glcd_imagen(5); 
59F8:  MOVLW  05
59FA:  MOVLB  5
59FC:  MOVWF  x3A
59FE:  MOVLB  0
5A00:  CALL   203E
....................                strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5A04:  MOVLW  05
5A06:  MOVWF  FEA
5A08:  MOVLW  1A
5A0A:  MOVWF  FE9
5A0C:  MOVFF  FF2,53A
5A10:  BCF    FF2.7
5A12:  MOVLW  00
5A14:  CALL   0996
5A18:  TBLRD*-
5A1A:  TBLRD*+
5A1C:  MOVF   FF5,W
5A1E:  MOVWF  FEE
5A20:  IORLW  00
5A22:  BNZ   5A1A
5A24:  MOVLB  5
5A26:  BTFSC  x3A.7
5A28:  BSF    FF2.7
5A2A:  MOVLW  05
5A2C:  MOVWF  x3B
5A2E:  MOVLW  1A
5A30:  MOVWF  x3A
5A32:  CLRF   x3C
5A34:  CLRF   x3D
5A36:  MOVLW  02
5A38:  MOVWF  x3E
5A3A:  MOVLW  01
5A3C:  MOVWF  x3F
5A3E:  MOVLB  0
5A40:  CALL   1812
....................                strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5A44:  MOVLW  05
5A46:  MOVWF  FEA
5A48:  MOVLW  1A
5A4A:  MOVWF  FE9
5A4C:  MOVFF  FF2,53A
5A50:  BCF    FF2.7
5A52:  MOVLW  00
5A54:  CALL   09B8
5A58:  TBLRD*-
5A5A:  TBLRD*+
5A5C:  MOVF   FF5,W
5A5E:  MOVWF  FEE
5A60:  IORLW  00
5A62:  BNZ   5A5A
5A64:  MOVLB  5
5A66:  BTFSC  x3A.7
5A68:  BSF    FF2.7
5A6A:  MOVLW  05
5A6C:  MOVWF  x3B
5A6E:  MOVLW  1A
5A70:  MOVWF  x3A
5A72:  CLRF   x3C
5A74:  MOVLW  08
5A76:  MOVWF  x3D
5A78:  MOVLW  02
5A7A:  MOVWF  x3E
5A7C:  MOVLW  01
5A7E:  MOVWF  x3F
5A80:  MOVLB  0
5A82:  CALL   1812
....................                glcd_circle(95,40,2,NO,ON); 
5A86:  MOVLW  5F
5A88:  MOVLB  5
5A8A:  MOVWF  x3A
5A8C:  MOVLW  28
5A8E:  MOVWF  x3B
5A90:  MOVLW  02
5A92:  MOVWF  x3C
5A94:  CLRF   x3D
5A96:  MOVLW  01
5A98:  MOVWF  x3E
5A9A:  MOVLB  0
5A9C:  CALL   213A
....................                strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
5AA0:  MOVLW  05
5AA2:  MOVWF  FEA
5AA4:  MOVLW  1A
5AA6:  MOVWF  FE9
5AA8:  MOVFF  FF2,53A
5AAC:  BCF    FF2.7
5AAE:  MOVLW  00
5AB0:  CALL   09DA
5AB4:  TBLRD*-
5AB6:  TBLRD*+
5AB8:  MOVF   FF5,W
5ABA:  MOVWF  FEE
5ABC:  IORLW  00
5ABE:  BNZ   5AB6
5AC0:  MOVLB  5
5AC2:  BTFSC  x3A.7
5AC4:  BSF    FF2.7
5AC6:  MOVLW  05
5AC8:  MOVWF  x3B
5ACA:  MOVLW  1A
5ACC:  MOVWF  x3A
5ACE:  MOVLW  66
5AD0:  MOVWF  x3C
5AD2:  MOVLW  28
5AD4:  MOVWF  x3D
5AD6:  MOVLW  02
5AD8:  MOVWF  x3E
5ADA:  MOVWF  x3F
5ADC:  MOVLB  0
5ADE:  CALL   1812
....................                MuestraTiemposProgramados(); 
5AE2:  CALL   253A
....................                EnviarCodigo(); 
5AE6:  CALL   1AF8
5AEA:  MOVLB  4
....................             }       
....................          } 
....................          else 
5AEC:  BRA    5B5E
....................          { 
....................             if(LEFT)//Si oprime boton de Toma. 
5AEE:  BSF    F96.2
5AF0:  BTFSS  F84.2
5AF2:  BRA    5B5E
....................             { 
....................                if(Nivel<6) 
5AF4:  MOVF   x9D,F
5AF6:  BNZ   5B02
5AF8:  MOVF   x9C,W
5AFA:  SUBLW  05
5AFC:  BNC   5B02
....................                { 
....................                   desfoguelento=1; 
5AFE:  BSF    x7C.5
....................                } 
....................                else 
5B00:  BRA    5B04
....................                { 
....................                   desfoguelento=0; 
5B02:  BCF    x7C.5
....................                } 
....................                delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5B04:  MOVLW  04
5B06:  MOVLB  5
5B08:  MOVWF  x3A
5B0A:  MOVLW  AF
5B0C:  MOVWF  x3F
5B0E:  MOVLB  0
5B10:  CALL   10EA
5B14:  MOVLB  5
5B16:  DECFSZ x3A,F
5B18:  BRA    5B0A
5B1A:  MOVLW  08
5B1C:  MOVLB  4
5B1E:  MOVWF  x89
5B20:  MOVLB  5
5B22:  CLRF   x3B
5B24:  MOVLB  0
5B26:  CALL   11E2
5B2A:  MOVLW  01
5B2C:  MOVLB  4
5B2E:  MOVWF  x90
5B30:  BSF    x7C.4
....................                write_eeprom(9,Nivel); 
5B32:  MOVLW  09
5B34:  MOVWF  FA9
5B36:  MOVFF  49C,FA8
5B3A:  BCF    FA6.6
5B3C:  BCF    FA6.7
5B3E:  BSF    FA6.2
5B40:  MOVF   FF2,W
5B42:  MOVWF  00
5B44:  BCF    FF2.7
5B46:  MOVLB  F
5B48:  MOVLW  55
5B4A:  MOVWF  FA7
5B4C:  MOVLW  AA
5B4E:  MOVWF  FA7
5B50:  BSF    FA6.1
5B52:  BTFSC  FA6.1
5B54:  BRA    5B52
5B56:  BCF    FA6.2
5B58:  MOVF   00,W
5B5A:  IORWF  FF2,F
5B5C:  MOVLB  4
....................             } 
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==15){ //Menu de Continuar 
5B5E:  MOVF   x89,W
5B60:  SUBLW  0F
5B62:  BTFSS  FD8.2
5B64:  BRA    5EA2
....................        
....................       if(visual==1) 
5B66:  BTFSS  x7C.4
5B68:  BRA    5CCE
....................       { 
....................          strcpy(Menus.Letra,"Continuar"); 
5B6A:  MOVLW  05
5B6C:  MOVWF  FEA
5B6E:  MOVLW  1A
5B70:  MOVWF  FE9
5B72:  MOVFF  FF2,53A
5B76:  BCF    FF2.7
5B78:  MOVLW  00
5B7A:  MOVLB  0
5B7C:  CALL   0C22
5B80:  TBLRD*-
5B82:  TBLRD*+
5B84:  MOVF   FF5,W
5B86:  MOVWF  FEE
5B88:  IORLW  00
5B8A:  BNZ   5B82
5B8C:  MOVLB  5
5B8E:  BTFSC  x3A.7
5B90:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5B92:  MOVLW  05
5B94:  MOVWF  x3B
5B96:  MOVLW  1A
5B98:  MOVWF  x3A
5B9A:  CLRF   x3C
5B9C:  CLRF   x3D
5B9E:  MOVLW  01
5BA0:  MOVWF  x3E
5BA2:  MOVLW  02
5BA4:  MOVWF  x3F
5BA6:  MOVLB  0
5BA8:  CALL   1812
....................           
....................          if(Opcion==2) 
5BAC:  MOVLB  4
5BAE:  MOVF   x90,W
5BB0:  SUBLW  02
5BB2:  BNZ   5C3E
....................          {strcpy(Menus.Letra,"SI"); 
5BB4:  MOVLW  05
5BB6:  MOVWF  FEA
5BB8:  MOVLW  1A
5BBA:  MOVWF  FE9
5BBC:  MOVFF  FF2,53A
5BC0:  BCF    FF2.7
5BC2:  MOVLW  00
5BC4:  MOVLB  0
5BC6:  CALL   0CD6
5BCA:  TBLRD*-
5BCC:  TBLRD*+
5BCE:  MOVF   FF5,W
5BD0:  MOVWF  FEE
5BD2:  IORLW  00
5BD4:  BNZ   5BCC
5BD6:  MOVLB  5
5BD8:  BTFSC  x3A.7
5BDA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,1,2); 
5BDC:  MOVLW  05
5BDE:  MOVWF  x3B
5BE0:  MOVLW  1A
5BE2:  MOVWF  x3A
5BE4:  MOVLW  32
5BE6:  MOVWF  x3C
5BE8:  MOVLW  19
5BEA:  MOVWF  x3D
5BEC:  MOVLW  01
5BEE:  MOVWF  x3E
5BF0:  MOVLW  02
5BF2:  MOVWF  x3F
5BF4:  MOVLB  0
5BF6:  CALL   1812
....................          strcpy(Menus.Letra,"NO"); 
5BFA:  MOVLW  05
5BFC:  MOVWF  FEA
5BFE:  MOVLW  1A
5C00:  MOVWF  FE9
5C02:  MOVFF  FF2,53A
5C06:  BCF    FF2.7
5C08:  MOVLW  00
5C0A:  CALL   0CF4
5C0E:  TBLRD*-
5C10:  TBLRD*+
5C12:  MOVF   FF5,W
5C14:  MOVWF  FEE
5C16:  IORLW  00
5C18:  BNZ   5C10
5C1A:  MOVLB  5
5C1C:  BTFSC  x3A.7
5C1E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,0,2); 
5C20:  MOVLW  05
5C22:  MOVWF  x3B
5C24:  MOVLW  1A
5C26:  MOVWF  x3A
5C28:  MOVLW  32
5C2A:  MOVWF  x3C
5C2C:  MOVLW  2D
5C2E:  MOVWF  x3D
5C30:  CLRF   x3E
5C32:  MOVLW  02
5C34:  MOVWF  x3F
5C36:  MOVLB  0
5C38:  CALL   1812
5C3C:  MOVLB  4
....................          } 
....................          if(Opcion==1) 
5C3E:  DECFSZ x90,W
5C40:  BRA    5CCC
....................          {strcpy(Menus.Letra,"SI"); 
5C42:  MOVLW  05
5C44:  MOVWF  FEA
5C46:  MOVLW  1A
5C48:  MOVWF  FE9
5C4A:  MOVFF  FF2,53A
5C4E:  BCF    FF2.7
5C50:  MOVLW  00
5C52:  MOVLB  0
5C54:  CALL   0CD6
5C58:  TBLRD*-
5C5A:  TBLRD*+
5C5C:  MOVF   FF5,W
5C5E:  MOVWF  FEE
5C60:  IORLW  00
5C62:  BNZ   5C5A
5C64:  MOVLB  5
5C66:  BTFSC  x3A.7
5C68:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,0,2); 
5C6A:  MOVLW  05
5C6C:  MOVWF  x3B
5C6E:  MOVLW  1A
5C70:  MOVWF  x3A
5C72:  MOVLW  32
5C74:  MOVWF  x3C
5C76:  MOVLW  19
5C78:  MOVWF  x3D
5C7A:  CLRF   x3E
5C7C:  MOVLW  02
5C7E:  MOVWF  x3F
5C80:  MOVLB  0
5C82:  CALL   1812
....................          strcpy(Menus.Letra,"NO"); 
5C86:  MOVLW  05
5C88:  MOVWF  FEA
5C8A:  MOVLW  1A
5C8C:  MOVWF  FE9
5C8E:  MOVFF  FF2,53A
5C92:  BCF    FF2.7
5C94:  MOVLW  00
5C96:  CALL   0CF4
5C9A:  TBLRD*-
5C9C:  TBLRD*+
5C9E:  MOVF   FF5,W
5CA0:  MOVWF  FEE
5CA2:  IORLW  00
5CA4:  BNZ   5C9C
5CA6:  MOVLB  5
5CA8:  BTFSC  x3A.7
5CAA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,1,2); 
5CAC:  MOVLW  05
5CAE:  MOVWF  x3B
5CB0:  MOVLW  1A
5CB2:  MOVWF  x3A
5CB4:  MOVLW  32
5CB6:  MOVWF  x3C
5CB8:  MOVLW  2D
5CBA:  MOVWF  x3D
5CBC:  MOVLW  01
5CBE:  MOVWF  x3E
5CC0:  MOVLW  02
5CC2:  MOVWF  x3F
5CC4:  MOVLB  0
5CC6:  CALL   1812
5CCA:  MOVLB  4
....................          } 
....................          visual=0; 
5CCC:  BCF    x7C.4
....................       } 
....................        
....................          
....................       if(UP)//Si oprime hacia arriba 
5CCE:  BSF    F92.5
5CD0:  BTFSS  F80.5
5CD2:  BRA    5CDE
....................       { 
....................          if(Opcion<2) 
5CD4:  MOVF   x90,W
5CD6:  SUBLW  01
5CD8:  BNC   5CDC
....................          { 
....................             Opcion++; 
5CDA:  INCF   x90,F
....................          } 
....................          visual=1; 
5CDC:  BSF    x7C.4
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5CDE:  BSF    F96.0
5CE0:  BTFSS  F84.0
5CE2:  BRA    5CEE
....................       {   
....................          if(Opcion>1) 
5CE4:  MOVF   x90,W
5CE6:  SUBLW  01
5CE8:  BC    5CEC
....................          { 
....................             Opcion--; 
5CEA:  DECF   x90,F
....................          }   
....................          visual=1; 
5CEC:  BSF    x7C.4
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
5CEE:  BSF    F96.1
5CF0:  BTFSS  F84.1
5CF2:  BRA    5E6C
....................       {   
....................          if(Opcion==2) 
5CF4:  MOVF   x90,W
5CF6:  SUBLW  02
5CF8:  BTFSS  FD8.2
5CFA:  BRA    5E3E
....................          { 
....................             Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5CFC:  MOVLW  14
5CFE:  MOVWF  x89
5D00:  MOVLW  0F
5D02:  MOVLB  5
5D04:  MOVWF  x4C
5D06:  MOVLW  12
5D08:  MOVWF  x4D
5D0A:  MOVLW  1E
5D0C:  MOVWF  x4E
5D0E:  MOVLW  35
5D10:  MOVWF  x4F
5D12:  CLRF   x50
5D14:  MOVLW  01
5D16:  MOVWF  x51
5D18:  MOVLB  0
5D1A:  CALL   1750
5D1E:  MOVLB  4
5D20:  CLRF   x92
5D22:  MOVLW  C0
5D24:  IORWF  FF2,F
5D26:  MOVLB  5
5D28:  CLRF   x3B
5D2A:  MOVLB  0
5D2C:  CALL   11E2
....................             strcpy(Menus.Letra,"Calentando"); 
5D30:  MOVLW  05
5D32:  MOVWF  FEA
5D34:  MOVLW  1A
5D36:  MOVWF  FE9
5D38:  MOVFF  FF2,53A
5D3C:  BCF    FF2.7
5D3E:  MOVLW  00
5D40:  CALL   0970
5D44:  TBLRD*-
5D46:  TBLRD*+
5D48:  MOVF   FF5,W
5D4A:  MOVWF  FEE
5D4C:  IORLW  00
5D4E:  BNZ   5D46
5D50:  MOVLB  5
5D52:  BTFSC  x3A.7
5D54:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
5D56:  MOVLW  05
5D58:  MOVWF  x3B
5D5A:  MOVLW  1A
5D5C:  MOVWF  x3A
5D5E:  CLRF   x3C
5D60:  MOVLW  37
5D62:  MOVWF  x3D
5D64:  MOVLW  02
5D66:  MOVWF  x3E
5D68:  MOVLW  01
5D6A:  MOVWF  x3F
5D6C:  MOVLB  0
5D6E:  CALL   1812
....................             glcd_rect(15, 18, 30, 53, NO, ON); 
5D72:  MOVLW  0F
5D74:  MOVLB  5
5D76:  MOVWF  x4C
5D78:  MOVLW  12
5D7A:  MOVWF  x4D
5D7C:  MOVLW  1E
5D7E:  MOVWF  x4E
5D80:  MOVLW  35
5D82:  MOVWF  x4F
5D84:  CLRF   x50
5D86:  MOVLW  01
5D88:  MOVWF  x51
5D8A:  MOVLB  0
5D8C:  CALL   1750
....................             glcd_imagen(5); 
5D90:  MOVLW  05
5D92:  MOVLB  5
5D94:  MOVWF  x3A
5D96:  MOVLB  0
5D98:  CALL   203E
....................             strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5D9C:  MOVLW  05
5D9E:  MOVWF  FEA
5DA0:  MOVLW  1A
5DA2:  MOVWF  FE9
5DA4:  MOVFF  FF2,53A
5DA8:  BCF    FF2.7
5DAA:  MOVLW  00
5DAC:  CALL   0996
5DB0:  TBLRD*-
5DB2:  TBLRD*+
5DB4:  MOVF   FF5,W
5DB6:  MOVWF  FEE
5DB8:  IORLW  00
5DBA:  BNZ   5DB2
5DBC:  MOVLB  5
5DBE:  BTFSC  x3A.7
5DC0:  BSF    FF2.7
5DC2:  MOVLW  05
5DC4:  MOVWF  x3B
5DC6:  MOVLW  1A
5DC8:  MOVWF  x3A
5DCA:  CLRF   x3C
5DCC:  CLRF   x3D
5DCE:  MOVLW  02
5DD0:  MOVWF  x3E
5DD2:  MOVLW  01
5DD4:  MOVWF  x3F
5DD6:  MOVLB  0
5DD8:  CALL   1812
....................             strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5DDC:  MOVLW  05
5DDE:  MOVWF  FEA
5DE0:  MOVLW  1A
5DE2:  MOVWF  FE9
5DE4:  MOVFF  FF2,53A
5DE8:  BCF    FF2.7
5DEA:  MOVLW  00
5DEC:  CALL   09B8
5DF0:  TBLRD*-
5DF2:  TBLRD*+
5DF4:  MOVF   FF5,W
5DF6:  MOVWF  FEE
5DF8:  IORLW  00
5DFA:  BNZ   5DF2
5DFC:  MOVLB  5
5DFE:  BTFSC  x3A.7
5E00:  BSF    FF2.7
5E02:  MOVLW  05
5E04:  MOVWF  x3B
5E06:  MOVLW  1A
5E08:  MOVWF  x3A
5E0A:  CLRF   x3C
5E0C:  MOVLW  08
5E0E:  MOVWF  x3D
5E10:  MOVLW  02
5E12:  MOVWF  x3E
5E14:  MOVLW  01
5E16:  MOVWF  x3F
5E18:  MOVLB  0
5E1A:  CALL   1812
....................             MuestraTiemposProgramados(); 
5E1E:  CALL   253A
....................             if(Nivel<6) 
5E22:  MOVLB  4
5E24:  MOVF   x9D,F
5E26:  BNZ   5E32
5E28:  MOVF   x9C,W
5E2A:  SUBLW  05
5E2C:  BNC   5E32
....................                { 
....................                   desfoguelento=1; 
5E2E:  BSF    x7C.5
....................                } 
....................                else 
5E30:  BRA    5E34
....................                { 
....................                   desfoguelento=0; 
5E32:  BCF    x7C.5
....................                } 
....................                EnviarCodigo(); 
5E34:  MOVLB  0
5E36:  CALL   1AF8
....................          } 
....................          else 
5E3A:  BRA    5E6E
5E3C:  MOVLB  4
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E3E:  MOVLW  04
5E40:  MOVLB  5
5E42:  MOVWF  x3A
5E44:  MOVLW  AF
5E46:  MOVWF  x3F
5E48:  MOVLB  0
5E4A:  CALL   10EA
5E4E:  MOVLB  5
5E50:  DECFSZ x3A,F
5E52:  BRA    5E44
5E54:  MOVLW  08
5E56:  MOVLB  4
5E58:  MOVWF  x89
5E5A:  MOVLB  5
5E5C:  CLRF   x3B
5E5E:  MOVLB  0
5E60:  CALL   11E2
5E64:  MOVLW  01
5E66:  MOVLB  4
5E68:  MOVWF  x90
5E6A:  BSF    x7C.4
5E6C:  MOVLB  0
....................          } 
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
5E6E:  BSF    F96.2
5E70:  BTFSS  F84.2
5E72:  BRA    5EA4
....................       { 
....................          delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E74:  MOVLW  04
5E76:  MOVLB  5
5E78:  MOVWF  x3A
5E7A:  MOVLW  AF
5E7C:  MOVWF  x3F
5E7E:  MOVLB  0
5E80:  CALL   10EA
5E84:  MOVLB  5
5E86:  DECFSZ x3A,F
5E88:  BRA    5E7A
5E8A:  MOVLW  08
5E8C:  MOVLB  4
5E8E:  MOVWF  x89
5E90:  MOVLB  5
5E92:  CLRF   x3B
5E94:  MOVLB  0
5E96:  CALL   11E2
5E9A:  MOVLW  01
5E9C:  MOVLB  4
5E9E:  MOVWF  x90
5EA0:  BSF    x7C.4
5EA2:  MOVLB  0
....................       } 
....................      
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
5EA4:  MOVLB  4
5EA6:  MOVF   x89,W
5EA8:  SUBLW  14
5EAA:  BTFSS  FD8.2
5EAC:  GOTO   69BA
....................    if(flag_agua==1 && Puerta==1 && Parada==1 && tiempo_esterilizacion<2 && Alarma==0 && AlarmaAgua==0) 
5EB0:  BTFSS  x7D.2
5EB2:  BRA    5FDC
5EB4:  DECFSZ x70,W
5EB6:  BRA    5FDC
5EB8:  DECFSZ x71,W
5EBA:  BRA    5FDC
5EBC:  MOVF   x91,W
5EBE:  SUBLW  01
5EC0:  BTFSS  FD8.0
5EC2:  BRA    5FDC
5EC4:  MOVF   x7A,F
5EC6:  BTFSS  FD8.2
5EC8:  BRA    5FDC
5ECA:  MOVF   x7B,F
5ECC:  BTFSS  FD8.2
5ECE:  BRA    5FDC
....................    {   
....................       // Debe enviar a Hardware_Controller flag que indique que puede realizar control. En Hardware_Controller si esta activado el flag** 
....................       // de control debe tener automaticamente la electrovalvula de desfogue cerrada.** 
....................       if(tiempo_esterilizacion==0 && disp_Calentando==0) 
5ED0:  MOVF   x91,F
5ED2:  BNZ   5F4E
5ED4:  BTFSC  x7D.4
5ED6:  BRA    5F4E
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5ED8:  MOVLB  5
5EDA:  CLRF   x4C
5EDC:  MOVLW  37
5EDE:  MOVWF  x4D
5EE0:  MOVLW  7F
5EE2:  MOVWF  x4E
5EE4:  MOVLW  3F
5EE6:  MOVWF  x4F
5EE8:  MOVLW  01
5EEA:  MOVWF  x50
5EEC:  CLRF   x51
5EEE:  MOVLB  0
5EF0:  CALL   1750
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
5EF4:  MOVLW  05
5EF6:  MOVWF  FEA
5EF8:  MOVLW  1A
5EFA:  MOVWF  FE9
5EFC:  MOVFF  FF2,53A
5F00:  BCF    FF2.7
5F02:  MOVLW  00
5F04:  CALL   0970
5F08:  TBLRD*-
5F0A:  TBLRD*+
5F0C:  MOVF   FF5,W
5F0E:  MOVWF  FEE
5F10:  IORLW  00
5F12:  BNZ   5F0A
5F14:  MOVLB  5
5F16:  BTFSC  x3A.7
5F18:  BSF    FF2.7
5F1A:  MOVLW  05
5F1C:  MOVWF  x3B
5F1E:  MOVLW  1A
5F20:  MOVWF  x3A
5F22:  CLRF   x3C
5F24:  MOVLW  37
5F26:  MOVWF  x3D
5F28:  MOVLW  02
5F2A:  MOVWF  x3E
5F2C:  MOVLW  01
5F2E:  MOVWF  x3F
5F30:  MOVLB  0
5F32:  CALL   1812
....................          disp_Calentando=1;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5F36:  MOVLB  4
5F38:  BSF    x7D.4
5F3A:  BCF    x7D.5
5F3C:  BCF    x7D.6
5F3E:  BCF    x7D.7
5F40:  BCF    x7E.0
5F42:  BCF    x7E.1
5F44:  BCF    x7E.2
5F46:  BCF    x7E.3
....................          EVDesfogue=0;Control=1; 
5F48:  CLRF   x80
5F4A:  MOVLW  01
5F4C:  MOVWF  x87
....................       } 
....................       if(tiempo_esterilizacion==1 && disp_Esterilizando==0) 
5F4E:  DECFSZ x91,W
5F50:  BRA    5FCE
5F52:  BTFSC  x7D.7
5F54:  BRA    5FCE
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5F56:  MOVLB  5
5F58:  CLRF   x4C
5F5A:  MOVLW  37
5F5C:  MOVWF  x4D
5F5E:  MOVLW  7F
5F60:  MOVWF  x4E
5F62:  MOVLW  3F
5F64:  MOVWF  x4F
5F66:  MOVLW  01
5F68:  MOVWF  x50
5F6A:  CLRF   x51
5F6C:  MOVLB  0
5F6E:  CALL   1750
....................          strcpy(Menus.Letra,"Esterilizando");displayMenu(Menus.Letra,0,55,2,1); 
5F72:  MOVLW  05
5F74:  MOVWF  FEA
5F76:  MOVLW  1A
5F78:  MOVWF  FE9
5F7A:  MOVFF  FF2,53A
5F7E:  BCF    FF2.7
5F80:  MOVLW  00
5F82:  CALL   0D12
5F86:  TBLRD*-
5F88:  TBLRD*+
5F8A:  MOVF   FF5,W
5F8C:  MOVWF  FEE
5F8E:  IORLW  00
5F90:  BNZ   5F88
5F92:  MOVLB  5
5F94:  BTFSC  x3A.7
5F96:  BSF    FF2.7
5F98:  MOVLW  05
5F9A:  MOVWF  x3B
5F9C:  MOVLW  1A
5F9E:  MOVWF  x3A
5FA0:  CLRF   x3C
5FA2:  MOVLW  37
5FA4:  MOVWF  x3D
5FA6:  MOVLW  02
5FA8:  MOVWF  x3E
5FAA:  MOVLW  01
5FAC:  MOVWF  x3F
5FAE:  MOVLB  0
5FB0:  CALL   1812
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=1;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5FB4:  MOVLB  4
5FB6:  BCF    x7D.4
5FB8:  BCF    x7D.5
5FBA:  BCF    x7D.6
5FBC:  BSF    x7D.7
5FBE:  BCF    x7E.0
5FC0:  BCF    x7E.1
5FC2:  BCF    x7E.2
5FC4:  BCF    x7E.3
....................          EVDesfogue=0;EVTrampa=0;Control=1; 
5FC6:  CLRF   x80
5FC8:  CLRF   x82
5FCA:  MOVLW  01
5FCC:  MOVWF  x87
....................       } 
....................       Control=1; 
5FCE:  MOVLW  01
5FD0:  MOVWF  x87
....................       EnviarCodigo(); 
5FD2:  MOVLB  0
5FD4:  CALL   1AF8
....................    } 
....................    else 
5FD8:  BRA    642A
5FDA:  MOVLB  4
....................    { 
....................       Control=0; 
5FDC:  CLRF   x87
....................       if(Alarma>0) 
5FDE:  MOVF   x7A,F
5FE0:  BTFSC  FD8.2
5FE2:  BRA    60E0
....................       { 
....................          if(Alarma==1) // Alarma de Error de Tiempo: Error por exceso de tiempo de calentamiento. 
5FE4:  DECFSZ x7A,W
5FE6:  BRA    605E
....................          { 
....................             if(disp_Alarma==0) 
5FE8:  BTFSC  x7E.5
5FEA:  BRA    605E
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
5FEC:  MOVLB  5
5FEE:  CLRF   x4C
5FF0:  MOVLW  37
5FF2:  MOVWF  x4D
5FF4:  MOVLW  7F
5FF6:  MOVWF  x4E
5FF8:  MOVLW  3F
5FFA:  MOVWF  x4F
5FFC:  MOVLW  01
5FFE:  MOVWF  x50
6000:  CLRF   x51
6002:  MOVLB  0
6004:  CALL   1750
....................                strcpy(Menus.Letra,"Error:ET01");displayMenu(Menus.Letra,0,55,2,1); 
6008:  MOVLW  05
600A:  MOVWF  FEA
600C:  MOVLW  1A
600E:  MOVWF  FE9
6010:  MOVFF  FF2,53A
6014:  BCF    FF2.7
6016:  MOVLW  00
6018:  CALL   0D3A
601C:  TBLRD*-
601E:  TBLRD*+
6020:  MOVF   FF5,W
6022:  MOVWF  FEE
6024:  IORLW  00
6026:  BNZ   601E
6028:  MOVLB  5
602A:  BTFSC  x3A.7
602C:  BSF    FF2.7
602E:  MOVLW  05
6030:  MOVWF  x3B
6032:  MOVLW  1A
6034:  MOVWF  x3A
6036:  CLRF   x3C
6038:  MOVLW  37
603A:  MOVWF  x3D
603C:  MOVLW  02
603E:  MOVWF  x3E
6040:  MOVLW  01
6042:  MOVWF  x3F
6044:  MOVLB  0
6046:  CALL   1812
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
604A:  MOVLB  4
604C:  BCF    x7D.4
604E:  BCF    x7D.5
6050:  BCF    x7D.6
6052:  BCF    x7D.7
6054:  BCF    x7E.0
6056:  BCF    x7E.1
6058:  BCF    x7E.2
605A:  BCF    x7E.3
....................                disp_Alarma=1; 
605C:  BSF    x7E.5
....................             } 
....................          } 
....................           
....................          if(Alarma==2) // Alarma de Error de Tiempo: Error por Cambio brusco en la Temperatura 
605E:  MOVF   x7A,W
6060:  SUBLW  02
6062:  BNZ   60DE
....................          { 
....................             tiempo_esterilizacion=0;tiempo_secado=0; 
6064:  CLRF   x91
6066:  CLRF   x92
....................             if(disp_Alarma==0) 
6068:  BTFSC  x7E.5
606A:  BRA    60DE
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
606C:  MOVLB  5
606E:  CLRF   x4C
6070:  MOVLW  37
6072:  MOVWF  x4D
6074:  MOVLW  7F
6076:  MOVWF  x4E
6078:  MOVLW  3F
607A:  MOVWF  x4F
607C:  MOVLW  01
607E:  MOVWF  x50
6080:  CLRF   x51
6082:  MOVLB  0
6084:  CALL   1750
....................                strcpy(Menus.Letra,"Error:ET02");displayMenu(Menus.Letra,0,55,2,1); 
6088:  MOVLW  05
608A:  MOVWF  FEA
608C:  MOVLW  1A
608E:  MOVWF  FE9
6090:  MOVFF  FF2,53A
6094:  BCF    FF2.7
6096:  MOVLW  00
6098:  CALL   0D60
609C:  TBLRD*-
609E:  TBLRD*+
60A0:  MOVF   FF5,W
60A2:  MOVWF  FEE
60A4:  IORLW  00
60A6:  BNZ   609E
60A8:  MOVLB  5
60AA:  BTFSC  x3A.7
60AC:  BSF    FF2.7
60AE:  MOVLW  05
60B0:  MOVWF  x3B
60B2:  MOVLW  1A
60B4:  MOVWF  x3A
60B6:  CLRF   x3C
60B8:  MOVLW  37
60BA:  MOVWF  x3D
60BC:  MOVLW  02
60BE:  MOVWF  x3E
60C0:  MOVLW  01
60C2:  MOVWF  x3F
60C4:  MOVLB  0
60C6:  CALL   1812
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
60CA:  MOVLB  4
60CC:  BCF    x7D.4
60CE:  BCF    x7D.5
60D0:  BCF    x7D.6
60D2:  BCF    x7D.7
60D4:  BCF    x7E.0
60D6:  BCF    x7E.1
60D8:  BCF    x7E.2
60DA:  BCF    x7E.3
....................                disp_Alarma=1; 
60DC:  BSF    x7E.5
....................             } 
....................          } 
....................       } 
....................       else 
60DE:  BRA    6424
....................       { 
....................          disp_Alarma=0; 
60E0:  BCF    x7E.5
....................          if(NivelTanque==1 && flag_agua==0 ) 
60E2:  DECFSZ x73,W
60E4:  BRA    60EE
60E6:  BTFSC  x7D.2
60E8:  BRA    60EE
....................          { 
....................             flag_agua=1; 
60EA:  BSF    x7D.2
....................             // Debe enviar a Hardware_Controller que cierre EV de agua 
....................          }  
....................          else 
60EC:  BRA    61E4
....................          { 
....................             if(tiempo_esterilizacion==0 && disp_Llenando==0 && Puerta==1) 
60EE:  MOVF   x91,F
60F0:  BNZ   616C
60F2:  BTFSC  x7D.5
60F4:  BRA    616C
60F6:  DECFSZ x70,W
60F8:  BRA    616C
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
60FA:  MOVLB  5
60FC:  CLRF   x4C
60FE:  MOVLW  37
6100:  MOVWF  x4D
6102:  MOVLW  7F
6104:  MOVWF  x4E
6106:  MOVLW  3F
6108:  MOVWF  x4F
610A:  MOVLW  01
610C:  MOVWF  x50
610E:  CLRF   x51
6110:  MOVLB  0
6112:  CALL   1750
....................                strcpy(Menus.Letra,"Llenando");displayMenu(Menus.Letra,0,55,2,1); 
6116:  MOVLW  05
6118:  MOVWF  FEA
611A:  MOVLW  1A
611C:  MOVWF  FE9
611E:  MOVFF  FF2,53A
6122:  BCF    FF2.7
6124:  MOVLW  00
6126:  CALL   0D86
612A:  TBLRD*-
612C:  TBLRD*+
612E:  MOVF   FF5,W
6130:  MOVWF  FEE
6132:  IORLW  00
6134:  BNZ   612C
6136:  MOVLB  5
6138:  BTFSC  x3A.7
613A:  BSF    FF2.7
613C:  MOVLW  05
613E:  MOVWF  x3B
6140:  MOVLW  1A
6142:  MOVWF  x3A
6144:  CLRF   x3C
6146:  MOVLW  37
6148:  MOVWF  x3D
614A:  MOVLW  02
614C:  MOVWF  x3E
614E:  MOVLW  01
6150:  MOVWF  x3F
6152:  MOVLB  0
6154:  CALL   1812
....................                disp_Calentando=0;disp_Llenando=1;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6158:  MOVLB  4
615A:  BCF    x7D.4
615C:  BSF    x7D.5
615E:  BCF    x7D.6
6160:  BCF    x7D.7
6162:  BCF    x7E.0
6164:  BCF    x7E.1
6166:  BCF    x7E.2
6168:  BCF    x7E.3
....................                // Debe enviar a Hardware_Controller que abra EV de agua y que apague Resistencia 
....................                Control=0; 
616A:  CLRF   x87
....................             } 
....................              
....................             if(AlarmaAgua==1) 
616C:  DECFSZ x7B,W
616E:  BRA    61E4
....................             { 
....................                if(disp_AlarmaAgua==0) 
6170:  BTFSC  x7E.6
6172:  BRA    61E4
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6174:  MOVLB  5
6176:  CLRF   x4C
6178:  MOVLW  37
617A:  MOVWF  x4D
617C:  MOVLW  7F
617E:  MOVWF  x4E
6180:  MOVLW  3F
6182:  MOVWF  x4F
6184:  MOVLW  01
6186:  MOVWF  x50
6188:  CLRF   x51
618A:  MOVLB  0
618C:  CALL   1750
....................                   strcpy(Menus.Letra,"Error:EA01");displayMenu(Menus.Letra,0,55,2,1); 
6190:  MOVLW  05
6192:  MOVWF  FEA
6194:  MOVLW  1A
6196:  MOVWF  FE9
6198:  MOVFF  FF2,53A
619C:  BCF    FF2.7
619E:  MOVLW  00
61A0:  CALL   0DAA
61A4:  TBLRD*-
61A6:  TBLRD*+
61A8:  MOVF   FF5,W
61AA:  MOVWF  FEE
61AC:  IORLW  00
61AE:  BNZ   61A6
61B0:  MOVLB  5
61B2:  BTFSC  x3A.7
61B4:  BSF    FF2.7
61B6:  MOVLW  05
61B8:  MOVWF  x3B
61BA:  MOVLW  1A
61BC:  MOVWF  x3A
61BE:  CLRF   x3C
61C0:  MOVLW  37
61C2:  MOVWF  x3D
61C4:  MOVLW  02
61C6:  MOVWF  x3E
61C8:  MOVLW  01
61CA:  MOVWF  x3F
61CC:  MOVLB  0
61CE:  CALL   1812
....................                   disp_Calentando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
61D2:  MOVLB  4
61D4:  BCF    x7D.4
61D6:  BCF    x7D.6
61D8:  BCF    x7D.7
61DA:  BCF    x7E.0
61DC:  BCF    x7E.1
61DE:  BCF    x7E.2
61E0:  BCF    x7E.3
....................                   disp_AlarmaAgua=1; 
61E2:  BSF    x7E.6
....................                } 
....................             } 
....................          } 
....................           
....................          if(tiempo_esterilizacion==2 && flag_agua==1) 
61E4:  MOVF   x91,W
61E6:  SUBLW  02
61E8:  BTFSS  FD8.2
61EA:  BRA    63AC
61EC:  BTFSS  x7D.2
61EE:  BRA    63AC
....................          { 
....................             // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................             if(desfoguelento==1)    
61F0:  BTFSS  x7C.5
61F2:  BRA    62D2
....................             { 
....................                if(z==0) 
61F4:  BTFSC  x7E.4
61F6:  BRA    6248
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
61F8:  MOVLB  5
61FA:  CLRF   x3A
61FC:  MOVLW  5A
61FE:  MOVWF  x3B
6200:  MOVLW  38
6202:  MOVWF  x3C
6204:  MOVLB  0
6206:  CALL   267A
620A:  MOVLW  19
620C:  MOVLB  5
620E:  MOVWF  x4C
6210:  MOVLW  12
6212:  MOVWF  x4D
6214:  MOVLW  3C
6216:  MOVWF  x4E
6218:  MOVLW  1A
621A:  MOVWF  x4F
621C:  CLRF   x50
621E:  CLRF   x51
6220:  MOVLB  0
6222:  CALL   1750
6226:  MOVLW  37
6228:  MOVLB  5
622A:  MOVWF  x4C
622C:  MOVLW  12
622E:  MOVWF  x4D
6230:  MOVLW  44
6232:  MOVWF  x4E
6234:  MOVLW  35
6236:  MOVWF  x4F
6238:  CLRF   x50
623A:  MOVLW  01
623C:  MOVWF  x51
623E:  MOVLB  0
6240:  CALL   1750
6244:  MOVLB  4
6246:  BSF    x7E.4
....................                } 
....................                if(disp_Despresurizando==0) 
6248:  BTFSC  x7E.0
624A:  BRA    62CA
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
624C:  MOVLB  5
624E:  CLRF   x4C
6250:  MOVLW  37
6252:  MOVWF  x4D
6254:  MOVLW  7F
6256:  MOVWF  x4E
6258:  MOVLW  3F
625A:  MOVWF  x4F
625C:  MOVLW  01
625E:  MOVWF  x50
6260:  CLRF   x51
6262:  MOVLB  0
6264:  CALL   1750
....................                   strcpy(Menus.Letra,"Despresurizando");displayMenu(Menus.Letra,0,55,2,1); 
6268:  MOVLW  05
626A:  MOVWF  FEA
626C:  MOVLW  1A
626E:  MOVWF  FE9
6270:  MOVFF  FF2,53A
6274:  BCF    FF2.7
6276:  MOVLW  00
6278:  CALL   0DD0
627C:  TBLRD*-
627E:  TBLRD*+
6280:  MOVF   FF5,W
6282:  MOVWF  FEE
6284:  IORLW  00
6286:  BNZ   627E
6288:  MOVLB  5
628A:  BTFSC  x3A.7
628C:  BSF    FF2.7
628E:  MOVLW  05
6290:  MOVWF  x3B
6292:  MOVLW  1A
6294:  MOVWF  x3A
6296:  CLRF   x3C
6298:  MOVLW  37
629A:  MOVWF  x3D
629C:  MOVLW  02
629E:  MOVWF  x3E
62A0:  MOVLW  01
62A2:  MOVWF  x3F
62A4:  MOVLB  0
62A6:  CALL   1812
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=0; 
62AA:  MOVLB  4
62AC:  BCF    x7D.4
62AE:  BCF    x7D.5
62B0:  BCF    x7D.6
62B2:  BCF    x7D.7
62B4:  BSF    x7E.0
62B6:  BCF    x7E.1
62B8:  BCF    x7E.2
62BA:  BCF    x7E.3
....................                   glcd_imagen(5); 
62BC:  MOVLW  05
62BE:  MOVLB  5
62C0:  MOVWF  x3A
62C2:  MOVLB  0
62C4:  CALL   203E
62C8:  MOVLB  4
....................                } 
....................                Exhaust=2;tiempo_secado=2; 
62CA:  MOVLW  02
62CC:  MOVWF  x93
62CE:  MOVWF  x92
....................             } 
....................             else 
62D0:  BRA    63AC
....................             { 
....................                if(z==0) 
62D2:  BTFSC  x7E.4
62D4:  BRA    6326
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
62D6:  MOVLB  5
62D8:  CLRF   x3A
62DA:  MOVLW  5A
62DC:  MOVWF  x3B
62DE:  MOVLW  38
62E0:  MOVWF  x3C
62E2:  MOVLB  0
62E4:  CALL   267A
62E8:  MOVLW  19
62EA:  MOVLB  5
62EC:  MOVWF  x4C
62EE:  MOVLW  12
62F0:  MOVWF  x4D
62F2:  MOVLW  3C
62F4:  MOVWF  x4E
62F6:  MOVLW  1A
62F8:  MOVWF  x4F
62FA:  CLRF   x50
62FC:  CLRF   x51
62FE:  MOVLB  0
6300:  CALL   1750
6304:  MOVLW  37
6306:  MOVLB  5
6308:  MOVWF  x4C
630A:  MOVLW  12
630C:  MOVWF  x4D
630E:  MOVLW  44
6310:  MOVWF  x4E
6312:  MOVLW  35
6314:  MOVWF  x4F
6316:  CLRF   x50
6318:  MOVLW  01
631A:  MOVWF  x51
631C:  MOVLB  0
631E:  CALL   1750
6322:  MOVLB  4
6324:  BSF    x7E.4
....................                   //tiempo_secado=1; 
....................                } 
....................                if(disp_Secando==0) 
6326:  BTFSC  x7D.6
6328:  BRA    63A8
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
632A:  MOVLB  5
632C:  CLRF   x4C
632E:  MOVLW  37
6330:  MOVWF  x4D
6332:  MOVLW  7F
6334:  MOVWF  x4E
6336:  MOVLW  3F
6338:  MOVWF  x4F
633A:  MOVLW  01
633C:  MOVWF  x50
633E:  CLRF   x51
6340:  MOVLB  0
6342:  CALL   1750
....................                   strcpy(Menus.Letra,"Secando");displayMenu(Menus.Letra,0,55,2,1); 
6346:  MOVLW  05
6348:  MOVWF  FEA
634A:  MOVLW  1A
634C:  MOVWF  FE9
634E:  MOVFF  FF2,53A
6352:  BCF    FF2.7
6354:  MOVLW  00
6356:  CALL   0DFA
635A:  TBLRD*-
635C:  TBLRD*+
635E:  MOVF   FF5,W
6360:  MOVWF  FEE
6362:  IORLW  00
6364:  BNZ   635C
6366:  MOVLB  5
6368:  BTFSC  x3A.7
636A:  BSF    FF2.7
636C:  MOVLW  05
636E:  MOVWF  x3B
6370:  MOVLW  1A
6372:  MOVWF  x3A
6374:  CLRF   x3C
6376:  MOVLW  37
6378:  MOVWF  x3D
637A:  MOVLW  02
637C:  MOVWF  x3E
637E:  MOVLW  01
6380:  MOVWF  x3F
6382:  MOVLB  0
6384:  CALL   1812
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6388:  MOVLB  4
638A:  BCF    x7D.4
638C:  BCF    x7D.5
638E:  BSF    x7D.6
6390:  BCF    x7D.7
6392:  BCF    x7E.0
6394:  BCF    x7E.1
6396:  BCF    x7E.2
6398:  BCF    x7E.3
....................                   glcd_imagen(5); 
639A:  MOVLW  05
639C:  MOVLB  5
639E:  MOVWF  x3A
63A0:  MOVLB  0
63A2:  CALL   203E
63A6:  MOVLB  4
....................                } 
....................                Exhaust=1; 
63A8:  MOVLW  01
63AA:  MOVWF  x93
....................             } 
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................           
....................          if(Puerta==0) 
63AC:  MOVF   x70,F
63AE:  BNZ   6424
....................          { 
....................             if(disp_Door==0) 
63B0:  BTFSC  x7E.2
63B2:  BRA    6424
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
63B4:  MOVLB  5
63B6:  CLRF   x4C
63B8:  MOVLW  37
63BA:  MOVWF  x4D
63BC:  MOVLW  7F
63BE:  MOVWF  x4E
63C0:  MOVLW  3F
63C2:  MOVWF  x4F
63C4:  MOVLW  01
63C6:  MOVWF  x50
63C8:  CLRF   x51
63CA:  MOVLB  0
63CC:  CALL   1750
....................                strcpy(Menus.Letra,"Puerta Abierta");displayMenu(Menus.Letra,0,55,2,1); 
63D0:  MOVLW  05
63D2:  MOVWF  FEA
63D4:  MOVLW  1A
63D6:  MOVWF  FE9
63D8:  MOVFF  FF2,53A
63DC:  BCF    FF2.7
63DE:  MOVLW  00
63E0:  CALL   0E1C
63E4:  TBLRD*-
63E6:  TBLRD*+
63E8:  MOVF   FF5,W
63EA:  MOVWF  FEE
63EC:  IORLW  00
63EE:  BNZ   63E6
63F0:  MOVLB  5
63F2:  BTFSC  x3A.7
63F4:  BSF    FF2.7
63F6:  MOVLW  05
63F8:  MOVWF  x3B
63FA:  MOVLW  1A
63FC:  MOVWF  x3A
63FE:  CLRF   x3C
6400:  MOVLW  37
6402:  MOVWF  x3D
6404:  MOVLW  02
6406:  MOVWF  x3E
6408:  MOVLW  01
640A:  MOVWF  x3F
640C:  MOVLB  0
640E:  CALL   1812
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=1;disp_Fin=0; 
6412:  MOVLB  4
6414:  BCF    x7D.4
6416:  BCF    x7D.5
6418:  BCF    x7D.6
641A:  BCF    x7D.7
641C:  BCF    x7E.0
641E:  BCF    x7E.1
6420:  BSF    x7E.2
6422:  BCF    x7E.3
....................             }    
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................       } 
....................       EnviarCodigo(); 
6424:  MOVLB  0
6426:  CALL   1AF8
....................    } 
....................  
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
642A:  MOVLB  4
642C:  BTFSS  x7C.6
642E:  BRA    6782
....................    {                       
....................       Lectura=0; 
6430:  BCF    x7C.6
....................       //displayTiempo(NivelTanque,40,30,2,1);  
....................       //displayTiempo(Presostato,40,40,2,1);  
....................       //displayTiempo(ADCTemperatura[2],20,30,2,1);  
....................       //displayT(Prom,20,30,2); 
....................       displayTiempo(Presostato,31,40,2,1); 
6432:  MOVFF  474,53B
6436:  MOVLW  1F
6438:  MOVLB  5
643A:  MOVWF  x3C
643C:  MOVLW  28
643E:  MOVWF  x3D
6440:  MOVLW  02
6442:  MOVWF  x3E
6444:  MOVLW  01
6446:  MOVWF  x3F
6448:  MOVLB  0
644A:  CALL   23EA
....................       glcd_rect(51, 40, 62, 48, YES, OFF);glcd_text57(52, 40, kpa, 1, ON); 
644E:  MOVLW  33
6450:  MOVLB  5
6452:  MOVWF  x4C
6454:  MOVLW  28
6456:  MOVWF  x4D
6458:  MOVLW  3E
645A:  MOVWF  x4E
645C:  MOVLW  30
645E:  MOVWF  x4F
6460:  MOVLW  01
6462:  MOVWF  x50
6464:  CLRF   x51
6466:  MOVLB  0
6468:  CALL   1750
646C:  MOVLW  34
646E:  MOVLB  5
6470:  MOVWF  x4B
6472:  MOVLW  28
6474:  MOVWF  x4C
6476:  MOVLW  04
6478:  MOVWF  x4E
647A:  MOVLW  1C
647C:  MOVWF  x4D
647E:  MOVLW  01
6480:  MOVWF  x4F
6482:  MOVWF  x50
6484:  MOVLB  0
6486:  CALL   145A
....................       displayT(ADC_Pt100,69,20,2); 
648A:  MOVFF  4A3,53D
648E:  MOVFF  4A2,53C
6492:  MOVFF  4A1,53B
6496:  MOVFF  4A0,53A
649A:  MOVLW  45
649C:  MOVLB  5
649E:  MOVWF  x3E
64A0:  MOVLW  14
64A2:  MOVWF  x3F
64A4:  MOVLW  02
64A6:  MOVWF  x40
64A8:  MOVLB  0
64AA:  GOTO   2A0E
....................       glcd_circle(95,40,2,NO,ON); 
64AE:  MOVLW  5F
64B0:  MOVLB  5
64B2:  MOVWF  x3A
64B4:  MOVLW  28
64B6:  MOVWF  x3B
64B8:  MOVLW  02
64BA:  MOVWF  x3C
64BC:  CLRF   x3D
64BE:  MOVLW  01
64C0:  MOVWF  x3E
64C2:  MOVLB  0
64C4:  CALL   213A
....................       strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
64C8:  MOVLW  05
64CA:  MOVWF  FEA
64CC:  MOVLW  1A
64CE:  MOVWF  FE9
64D0:  MOVFF  FF2,53A
64D4:  BCF    FF2.7
64D6:  MOVLW  00
64D8:  CALL   09DA
64DC:  TBLRD*-
64DE:  TBLRD*+
64E0:  MOVF   FF5,W
64E2:  MOVWF  FEE
64E4:  IORLW  00
64E6:  BNZ   64DE
64E8:  MOVLB  5
64EA:  BTFSC  x3A.7
64EC:  BSF    FF2.7
64EE:  MOVLW  05
64F0:  MOVWF  x3B
64F2:  MOVLW  1A
64F4:  MOVWF  x3A
64F6:  MOVLW  66
64F8:  MOVWF  x3C
64FA:  MOVLW  28
64FC:  MOVWF  x3D
64FE:  MOVLW  02
6500:  MOVWF  x3E
6502:  MOVWF  x3F
6504:  MOVLB  0
6506:  CALL   1812
....................       //displayT(Pt,1,20,3); 
....................       displayTiempo(Setpoint,5,20,2,1); 
650A:  MOVFF  48E,53B
650E:  MOVLW  05
6510:  MOVLB  5
6512:  MOVWF  x3C
6514:  MOVLW  14
6516:  MOVWF  x3D
6518:  MOVLW  02
651A:  MOVWF  x3E
651C:  MOVLW  01
651E:  MOVWF  x3F
6520:  MOVLB  0
6522:  CALL   23EA
....................          
....................       if(Visua==1)// Si se activo la visualización desde software 
6526:  MOVLB  4
6528:  BTFSS  x7D.1
652A:  BRA    6634
....................       { 
....................          displayTiempo((int8)desvio,5,30,4,1); 
652C:  MOVFF  515,53D
6530:  MOVFF  514,53C
6534:  MOVFF  513,53B
6538:  MOVFF  512,53A
653C:  MOVLB  0
653E:  CALL   2A88
6542:  MOVFF  01,53A
6546:  MOVFF  01,53B
654A:  MOVLW  05
654C:  MOVLB  5
654E:  MOVWF  x3C
6550:  MOVLW  1E
6552:  MOVWF  x3D
6554:  MOVLW  04
6556:  MOVWF  x3E
6558:  MOVLW  01
655A:  MOVWF  x3F
655C:  MOVLB  0
655E:  CALL   23EA
....................          displayTiempo((int8)Tpulso,5,40,4,1); 
6562:  MOVFF  4F9,53D
6566:  MOVFF  4F8,53C
656A:  MOVFF  4F7,53B
656E:  MOVFF  4F6,53A
6572:  CALL   2A88
6576:  MOVFF  01,53A
657A:  MOVFF  01,53B
657E:  MOVLW  05
6580:  MOVLB  5
6582:  MOVWF  x3C
6584:  MOVLW  28
6586:  MOVWF  x3D
6588:  MOVLW  04
658A:  MOVWF  x3E
658C:  MOVLW  01
658E:  MOVWF  x3F
6590:  MOVLB  0
6592:  CALL   23EA
....................          displayTiempo((int8)Ganancia,30,40,4,1); 
6596:  MOVFF  50D,53D
659A:  MOVFF  50C,53C
659E:  MOVFF  50B,53B
65A2:  MOVFF  50A,53A
65A6:  CALL   2A88
65AA:  MOVFF  01,53A
65AE:  MOVFF  01,53B
65B2:  MOVLW  1E
65B4:  MOVLB  5
65B6:  MOVWF  x3C
65B8:  MOVLW  28
65BA:  MOVWF  x3D
65BC:  MOVLW  04
65BE:  MOVWF  x3E
65C0:  MOVLW  01
65C2:  MOVWF  x3F
65C4:  MOVLB  0
65C6:  CALL   23EA
....................          displayTiempo((int8)Ajuste,30,30,4,1); 
65CA:  MOVFF  477,53B
65CE:  MOVLW  1E
65D0:  MOVLB  5
65D2:  MOVWF  x3C
65D4:  MOVWF  x3D
65D6:  MOVLW  04
65D8:  MOVWF  x3E
65DA:  MOVLW  01
65DC:  MOVWF  x3F
65DE:  MOVLB  0
65E0:  CALL   23EA
....................          displayTiempo((int8)Ajusten,30,20,4,1); 
65E4:  MOVFF  478,53B
65E8:  MOVLW  1E
65EA:  MOVLB  5
65EC:  MOVWF  x3C
65EE:  MOVLW  14
65F0:  MOVWF  x3D
65F2:  MOVLW  04
65F4:  MOVWF  x3E
65F6:  MOVLW  01
65F8:  MOVWF  x3F
65FA:  MOVLB  0
65FC:  CALL   23EA
....................          displayTiempo((int8)Ganancia2,50,40,4,1); 
6600:  MOVFF  511,53D
6604:  MOVFF  510,53C
6608:  MOVFF  50F,53B
660C:  MOVFF  50E,53A
6610:  CALL   2A88
6614:  MOVFF  01,53A
6618:  MOVFF  01,53B
661C:  MOVLW  32
661E:  MOVLB  5
6620:  MOVWF  x3C
6622:  MOVLW  28
6624:  MOVWF  x3D
6626:  MOVLW  04
6628:  MOVWF  x3E
662A:  MOVLW  01
662C:  MOVWF  x3F
662E:  MOVLB  0
6630:  CALL   23EA
....................       } 
....................           
....................       // Muestra Valor de esterilizacion actual. 
....................       displayTiempo(Testerilizacion[3],80,0,0,1);displayTiempo(Testerilizacion[2],86,0,0,1); 
6634:  MOVFF  4A7,53B
6638:  MOVLW  50
663A:  MOVLB  5
663C:  MOVWF  x3C
663E:  CLRF   x3D
6640:  CLRF   x3E
6642:  MOVLW  01
6644:  MOVWF  x3F
6646:  MOVLB  0
6648:  CALL   23EA
664C:  MOVFF  4A6,53B
6650:  MOVLW  56
6652:  MOVLB  5
6654:  MOVWF  x3C
6656:  CLRF   x3D
6658:  CLRF   x3E
665A:  MOVLW  01
665C:  MOVWF  x3F
665E:  MOVLB  0
6660:  CALL   23EA
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,0,2,1);  
6664:  MOVLW  05
6666:  MOVWF  FEA
6668:  MOVLW  1A
666A:  MOVWF  FE9
666C:  MOVFF  FF2,53A
6670:  BCF    FF2.7
6672:  MOVLW  00
6674:  CALL   06CA
6678:  TBLRD*-
667A:  TBLRD*+
667C:  MOVF   FF5,W
667E:  MOVWF  FEE
6680:  IORLW  00
6682:  BNZ   667A
6684:  MOVLB  5
6686:  BTFSC  x3A.7
6688:  BSF    FF2.7
668A:  MOVLW  05
668C:  MOVWF  x3B
668E:  MOVLW  1A
6690:  MOVWF  x3A
6692:  MOVLW  5C
6694:  MOVWF  x3C
6696:  CLRF   x3D
6698:  MOVLW  02
669A:  MOVWF  x3E
669C:  MOVLW  01
669E:  MOVWF  x3F
66A0:  MOVLB  0
66A2:  CALL   1812
....................       displayTiempo(Testerilizacion[1],98,0,0,1);displayTiempo(Testerilizacion[0],104,0,0,1); 
66A6:  MOVFF  4A5,53B
66AA:  MOVLW  62
66AC:  MOVLB  5
66AE:  MOVWF  x3C
66B0:  CLRF   x3D
66B2:  CLRF   x3E
66B4:  MOVLW  01
66B6:  MOVWF  x3F
66B8:  MOVLB  0
66BA:  CALL   23EA
66BE:  MOVFF  4A4,53B
66C2:  MOVLW  68
66C4:  MOVLB  5
66C6:  MOVWF  x3C
66C8:  CLRF   x3D
66CA:  CLRF   x3E
66CC:  MOVLW  01
66CE:  MOVWF  x3F
66D0:  MOVLB  0
66D2:  CALL   23EA
....................       // Muestra tiempo de secado actual. 
....................       displayTiempo(Tsecado[3],80,8,0,1);displayTiempo(Tsecado[2],86,8,0,1); 
66D6:  MOVFF  4AF,53B
66DA:  MOVLW  50
66DC:  MOVLB  5
66DE:  MOVWF  x3C
66E0:  MOVLW  08
66E2:  MOVWF  x3D
66E4:  CLRF   x3E
66E6:  MOVLW  01
66E8:  MOVWF  x3F
66EA:  MOVLB  0
66EC:  CALL   23EA
66F0:  MOVFF  4AE,53B
66F4:  MOVLW  56
66F6:  MOVLB  5
66F8:  MOVWF  x3C
66FA:  MOVLW  08
66FC:  MOVWF  x3D
66FE:  CLRF   x3E
6700:  MOVLW  01
6702:  MOVWF  x3F
6704:  MOVLB  0
6706:  CALL   23EA
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,8,2,1);  
670A:  MOVLW  05
670C:  MOVWF  FEA
670E:  MOVLW  1A
6710:  MOVWF  FE9
6712:  MOVFF  FF2,53A
6716:  BCF    FF2.7
6718:  MOVLW  00
671A:  CALL   06CA
671E:  TBLRD*-
6720:  TBLRD*+
6722:  MOVF   FF5,W
6724:  MOVWF  FEE
6726:  IORLW  00
6728:  BNZ   6720
672A:  MOVLB  5
672C:  BTFSC  x3A.7
672E:  BSF    FF2.7
6730:  MOVLW  05
6732:  MOVWF  x3B
6734:  MOVLW  1A
6736:  MOVWF  x3A
6738:  MOVLW  5C
673A:  MOVWF  x3C
673C:  MOVLW  08
673E:  MOVWF  x3D
6740:  MOVLW  02
6742:  MOVWF  x3E
6744:  MOVLW  01
6746:  MOVWF  x3F
6748:  MOVLB  0
674A:  CALL   1812
....................       displayTiempo(Tsecado[1],98,8,0,1);displayTiempo(Tsecado[0],104,8,0,1); 
674E:  MOVFF  4AD,53B
6752:  MOVLW  62
6754:  MOVLB  5
6756:  MOVWF  x3C
6758:  MOVLW  08
675A:  MOVWF  x3D
675C:  CLRF   x3E
675E:  MOVLW  01
6760:  MOVWF  x3F
6762:  MOVLB  0
6764:  CALL   23EA
6768:  MOVFF  4AC,53B
676C:  MOVLW  68
676E:  MOVLB  5
6770:  MOVWF  x3C
6772:  MOVLW  08
6774:  MOVWF  x3D
6776:  CLRF   x3E
6778:  MOVLW  01
677A:  MOVWF  x3F
677C:  MOVLB  0
677E:  CALL   23EA
....................    } 
....................           
....................    if(ADC_Pt100>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
6782:  MOVLB  5
6784:  CLRF   x40
6786:  MOVFF  48E,53F
678A:  MOVLB  0
678C:  CALL   1114
6790:  MOVFF  00,53A
6794:  MOVFF  01,53B
6798:  MOVFF  02,53C
679C:  MOVFF  03,53D
67A0:  BSF    FD8.1
67A2:  MOVFF  03,541
67A6:  MOVFF  02,540
67AA:  MOVFF  01,53F
67AE:  MOVFF  00,53E
67B2:  MOVLB  5
67B4:  CLRF   x45
67B6:  CLRF   x44
67B8:  CLRF   x43
67BA:  MOVLW  7F
67BC:  MOVWF  x42
67BE:  MOVLB  0
67C0:  CALL   1CD8
67C4:  MOVFF  03,53D
67C8:  MOVFF  02,53C
67CC:  MOVFF  01,53B
67D0:  MOVFF  00,53A
67D4:  MOVFF  4A3,541
67D8:  MOVFF  4A2,540
67DC:  MOVFF  4A1,53F
67E0:  MOVFF  4A0,53E
67E4:  GOTO   2AC4
67E8:  BC    67EC
67EA:  BNZ   6852
....................    { 
....................       if(est==0) 
67EC:  MOVLB  4
67EE:  BTFSC  x7D.0
67F0:  BRA    6854
....................       { 
....................          tiempo_esterilizacion=1; 
67F2:  MOVLW  01
67F4:  MOVWF  x91
....................          Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1; 
67F6:  MOVLB  5
67F8:  CLRF   x3A
67FA:  MOVLW  5A
67FC:  MOVWF  x3B
67FE:  MOVLW  38
6800:  MOVWF  x3C
6802:  MOVLB  0
6804:  CALL   267A
6808:  MOVLW  0F
680A:  MOVLB  5
680C:  MOVWF  x4C
680E:  MOVLW  12
6810:  MOVWF  x4D
6812:  MOVLW  1E
6814:  MOVWF  x4E
6816:  MOVLW  35
6818:  MOVWF  x4F
681A:  CLRF   x50
681C:  CLRF   x51
681E:  MOVLB  0
6820:  CALL   1750
6824:  MOVLW  19
6826:  MOVLB  5
6828:  MOVWF  x4C
682A:  MOVLW  12
682C:  MOVWF  x4D
682E:  MOVLW  3C
6830:  MOVWF  x4E
6832:  MOVLW  1A
6834:  MOVWF  x4F
6836:  CLRF   x50
6838:  MOVLW  01
683A:  MOVWF  x51
683C:  MOVLB  0
683E:  CALL   1750
6842:  MOVLB  4
6844:  BSF    x7D.0
....................          glcd_imagen(5); 
6846:  MOVLW  05
6848:  MOVLB  5
684A:  MOVWF  x3A
684C:  MOVLB  0
684E:  CALL   203E
6852:  MOVLB  4
....................       } 
....................    }   
....................     
....................    if(Exhaust==1 && tiempo_esterilizacion==2)// Si realiza desfogue rapido 
6854:  DECFSZ x93,W
6856:  BRA    6876
6858:  MOVF   x91,W
685A:  SUBLW  02
685C:  BNZ   6876
....................    { 
....................       // Debe enviar a Hardware_Controller que abra EV de desfogue 
....................       Control=0; 
685E:  CLRF   x87
....................       if(Presostato<2) 
6860:  MOVF   x74,W
6862:  SUBLW  01
6864:  BNC   6872
....................       { 
....................          tiempo_secado=1; 
6866:  MOVLW  01
6868:  MOVWF  x92
....................          Control=0;EVDesfogue=3; 
686A:  CLRF   x87
686C:  MOVLW  03
686E:  MOVWF  x80
....................       } 
....................       else 
6870:  BRA    6876
....................       { 
....................          EVDesfogue=1; 
6872:  MOVLW  01
6874:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    if(Exhaust==2 && tiempo_esterilizacion==2 )// Si Debe realizar Rampa 
6876:  MOVF   x93,W
6878:  SUBLW  02
687A:  BNZ   689E
687C:  MOVF   x91,W
687E:  SUBLW  02
6880:  BNZ   689E
....................    {      
....................       // Debe enviar a Hardware_Controller que abra Ejecute modo rampa. 
....................       EVDesfogue=2; 
6882:  MOVLW  02
6884:  MOVWF  x80
....................       Control=0; 
6886:  CLRF   x87
....................       if(Presostato<2) 
6888:  MOVF   x74,W
688A:  SUBLW  01
688C:  BNC   689E
....................       { 
....................          tiempo_esterilizacion=3; 
688E:  MOVLW  03
6890:  MOVWF  x91
....................          tiempo_secado=2; 
6892:  MOVLW  02
6894:  MOVWF  x92
....................          fin_ciclo=1; 
6896:  MOVLW  01
6898:  MOVWF  x8F
....................          EVDesfogue=3; 
689A:  MOVLW  03
689C:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3]) && tiempo_esterilizacion==1) 
689E:  MOVF   xA8,W
68A0:  SUBWF  xA4,W
68A2:  BNZ   68BE
68A4:  MOVF   xA9,W
68A6:  SUBWF  xA5,W
68A8:  BNZ   68BE
68AA:  MOVF   xAA,W
68AC:  SUBWF  xA6,W
68AE:  BNZ   68BE
68B0:  MOVF   xAB,W
68B2:  SUBWF  xA7,W
68B4:  BNZ   68BE
68B6:  DECFSZ x91,W
68B8:  BRA    68BE
....................    { 
....................       tiempo_esterilizacion=2; 
68BA:  MOVLW  02
68BC:  MOVWF  x91
....................    }  
....................     
....................    // Si cumplio el tiempo de secado. 
....................    if((Tsecado[0]>=Tsecadop[0])&&(Tsecado[1]>=Tsecadop[1])&&(Tsecado[2]>=Tsecadop[2])&&(Tsecado[3]>=Tsecadop[3]) && tiempo_secado==1) 
68BE:  MOVF   xB0,W
68C0:  XORLW  80
68C2:  MOVWF  00
68C4:  MOVF   xAC,W
68C6:  XORLW  80
68C8:  SUBWF  00,W
68CA:  BZ    68CE
68CC:  BC    690E
68CE:  MOVF   xB1,W
68D0:  XORLW  80
68D2:  MOVWF  00
68D4:  MOVF   xAD,W
68D6:  XORLW  80
68D8:  SUBWF  00,W
68DA:  BZ    68DE
68DC:  BC    690E
68DE:  MOVF   xB2,W
68E0:  XORLW  80
68E2:  MOVWF  00
68E4:  MOVF   xAE,W
68E6:  XORLW  80
68E8:  SUBWF  00,W
68EA:  BZ    68EE
68EC:  BC    690E
68EE:  MOVF   xB3,W
68F0:  XORLW  80
68F2:  MOVWF  00
68F4:  MOVF   xAF,W
68F6:  XORLW  80
68F8:  SUBWF  00,W
68FA:  BZ    68FE
68FC:  BC    690E
68FE:  DECFSZ x92,W
6900:  BRA    690E
....................    { 
....................       tiempo_esterilizacion=3; 
6902:  MOVLW  03
6904:  MOVWF  x91
....................       tiempo_secado=2; 
6906:  MOVLW  02
6908:  MOVWF  x92
....................       fin_ciclo=1; 
690A:  MOVLW  01
690C:  MOVWF  x8F
....................    } 
....................     
....................    if(fin_ciclo==1) 
690E:  DECFSZ x8F,W
6910:  BRA    69B6
....................    { 
....................       // Debe enviar a Hardware_Controller que apague Resistencia y que cierre EV de desfogue 
....................       Control=0;EVDesfogue=3; 
6912:  CLRF   x87
6914:  MOVLW  03
6916:  MOVWF  x80
....................       if(disp_Fin==0) 
6918:  BTFSC  x7E.3
691A:  BRA    698C
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
691C:  MOVLB  5
691E:  CLRF   x4C
6920:  MOVLW  37
6922:  MOVWF  x4D
6924:  MOVLW  7F
6926:  MOVWF  x4E
6928:  MOVLW  3F
692A:  MOVWF  x4F
692C:  MOVLW  01
692E:  MOVWF  x50
6930:  CLRF   x51
6932:  MOVLB  0
6934:  CALL   1750
....................          strcpy(Menus.Letra,"Ciclo Finalizado");displayMenu(Menus.Letra,0,55,2,1); 
6938:  MOVLW  05
693A:  MOVWF  FEA
693C:  MOVLW  1A
693E:  MOVWF  FE9
6940:  MOVFF  FF2,53A
6944:  BCF    FF2.7
6946:  MOVLW  00
6948:  CALL   0E46
694C:  TBLRD*-
694E:  TBLRD*+
6950:  MOVF   FF5,W
6952:  MOVWF  FEE
6954:  IORLW  00
6956:  BNZ   694E
6958:  MOVLB  5
695A:  BTFSC  x3A.7
695C:  BSF    FF2.7
695E:  MOVLW  05
6960:  MOVWF  x3B
6962:  MOVLW  1A
6964:  MOVWF  x3A
6966:  CLRF   x3C
6968:  MOVLW  37
696A:  MOVWF  x3D
696C:  MOVLW  02
696E:  MOVWF  x3E
6970:  MOVLW  01
6972:  MOVWF  x3F
6974:  MOVLB  0
6976:  CALL   1812
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=1; 
697A:  MOVLB  4
697C:  BCF    x7D.4
697E:  BCF    x7D.5
6980:  BSF    x7D.6
6982:  BCF    x7D.7
6984:  BSF    x7E.0
6986:  BCF    x7E.1
6988:  BCF    x7E.2
698A:  BSF    x7E.3
....................       }    
....................        
....................       if(RIGHT) 
698C:  BSF    F96.1
698E:  BTFSS  F84.1
6990:  BRA    69B6
....................       { 
....................          Control=3; 
6992:  MOVLW  03
6994:  MOVWF  x87
....................          EnviarCodigo(); 
6996:  MOVLB  0
6998:  CALL   1AF8
....................          delay_ms(1000); 
699C:  MOVLW  04
699E:  MOVLB  5
69A0:  MOVWF  x3A
69A2:  MOVLW  FA
69A4:  MOVWF  x3F
69A6:  MOVLB  0
69A8:  CALL   10EA
69AC:  MOVLB  5
69AE:  DECFSZ x3A,F
69B0:  BRA    69A2
....................          reset_cpu(); 
69B2:  RESET
69B4:  MOVLB  4
....................       } 
....................    } 
....................    EVAgua=10; 
69B6:  MOVLW  0A
69B8:  MOVWF  x81
....................    //EnviarCodigo(); 
....................   } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  while(Menu==100) 
....................  { 
69BA:  MOVF   x89,W
69BC:  SUBLW  64
69BE:  BTFSS  FD8.2
69C0:  BRA    6ABE
....................     
....................    displayTiempo(datoRx[0],0,10,2,1); 
69C2:  MOVFF  4D4,53B
69C6:  MOVLB  5
69C8:  CLRF   x3C
69CA:  MOVLW  0A
69CC:  MOVWF  x3D
69CE:  MOVLW  02
69D0:  MOVWF  x3E
69D2:  MOVLW  01
69D4:  MOVWF  x3F
69D6:  MOVLB  0
69D8:  CALL   23EA
....................    displayTiempo(datoRx[1],0,20,2,1); 
69DC:  MOVFF  4D5,53B
69E0:  MOVLB  5
69E2:  CLRF   x3C
69E4:  MOVLW  14
69E6:  MOVWF  x3D
69E8:  MOVLW  02
69EA:  MOVWF  x3E
69EC:  MOVLW  01
69EE:  MOVWF  x3F
69F0:  MOVLB  0
69F2:  CALL   23EA
....................    displayTiempo(datoRx[2],0,30,2,1); 
69F6:  MOVFF  4D6,53B
69FA:  MOVLB  5
69FC:  CLRF   x3C
69FE:  MOVLW  1E
6A00:  MOVWF  x3D
6A02:  MOVLW  02
6A04:  MOVWF  x3E
6A06:  MOVLW  01
6A08:  MOVWF  x3F
6A0A:  MOVLB  0
6A0C:  CALL   23EA
....................    displayTiempo(datoRx[3],0,40,2,1); 
6A10:  MOVFF  4D7,53B
6A14:  MOVLB  5
6A16:  CLRF   x3C
6A18:  MOVLW  28
6A1A:  MOVWF  x3D
6A1C:  MOVLW  02
6A1E:  MOVWF  x3E
6A20:  MOVLW  01
6A22:  MOVWF  x3F
6A24:  MOVLB  0
6A26:  CALL   23EA
....................    displayTiempo(Opcion,0,50,2,1); 
6A2A:  MOVFF  490,53B
6A2E:  MOVLB  5
6A30:  CLRF   x3C
6A32:  MOVLW  32
6A34:  MOVWF  x3D
6A36:  MOVLW  02
6A38:  MOVWF  x3E
6A3A:  MOVLW  01
6A3C:  MOVWF  x3F
6A3E:  MOVLB  0
6A40:  CALL   23EA
....................     
....................    Opcion++; 
6A44:  MOVLB  4
6A46:  INCF   x90,F
....................    Determina(); 
6A48:  MOVLB  0
6A4A:  CALL   1F50
....................    displayTiempo(Puerta,50,10,2,1); 
6A4E:  MOVFF  470,53B
6A52:  MOVLW  32
6A54:  MOVLB  5
6A56:  MOVWF  x3C
6A58:  MOVLW  0A
6A5A:  MOVWF  x3D
6A5C:  MOVLW  02
6A5E:  MOVWF  x3E
6A60:  MOVLW  01
6A62:  MOVWF  x3F
6A64:  MOVLB  0
6A66:  CALL   23EA
....................    displayTiempo(Parada,50,20,2,1); 
6A6A:  MOVFF  471,53B
6A6E:  MOVLW  32
6A70:  MOVLB  5
6A72:  MOVWF  x3C
6A74:  MOVLW  14
6A76:  MOVWF  x3D
6A78:  MOVLW  02
6A7A:  MOVWF  x3E
6A7C:  MOVLW  01
6A7E:  MOVWF  x3F
6A80:  MOVLB  0
6A82:  CALL   23EA
....................    displayTiempo(ADC_Pt100,50,30,2,1);      
6A86:  MOVFF  4A3,53D
6A8A:  MOVFF  4A2,53C
6A8E:  MOVFF  4A1,53B
6A92:  MOVFF  4A0,53A
6A96:  CALL   2A88
6A9A:  MOVFF  01,53A
6A9E:  MOVFF  01,53B
6AA2:  MOVLW  32
6AA4:  MOVLB  5
6AA6:  MOVWF  x3C
6AA8:  MOVLW  1E
6AAA:  MOVWF  x3D
6AAC:  MOVLW  02
6AAE:  MOVWF  x3E
6AB0:  MOVLW  01
6AB2:  MOVWF  x3F
6AB4:  MOVLB  0
6AB6:  CALL   23EA
....................     
....................  } 
6ABA:  MOVLB  4
6ABC:  BRA    69BA
....................  Determina(); 
6ABE:  MOVLB  0
6AC0:  CALL   1F50
....................        
....................       while(Parada==0) 
....................       { 
6AC4:  MOVLB  4
6AC6:  MOVF   x71,F
6AC8:  BNZ   6B8E
....................          delay_ms(100); 
6ACA:  MOVLW  64
6ACC:  MOVLB  5
6ACE:  MOVWF  x3F
6AD0:  MOVLB  0
6AD2:  CALL   10EA
....................          if(disp_Stop==0) 
6AD6:  MOVLB  4
6AD8:  BTFSC  x7E.1
6ADA:  BRA    6B7A
....................          { 
....................             glcd_fillScreen(OFF);  
6ADC:  MOVLB  5
6ADE:  CLRF   x3B
6AE0:  MOVLB  0
6AE2:  CALL   11E2
....................             strcpy(Menus.Letra,"  !Parada!");displayMenu(Menus.Letra,0,10,0,2); 
6AE6:  MOVLW  05
6AE8:  MOVWF  FEA
6AEA:  MOVLW  1A
6AEC:  MOVWF  FE9
6AEE:  MOVFF  FF2,53A
6AF2:  BCF    FF2.7
6AF4:  MOVLW  00
6AF6:  CALL   0E72
6AFA:  TBLRD*-
6AFC:  TBLRD*+
6AFE:  MOVF   FF5,W
6B00:  MOVWF  FEE
6B02:  IORLW  00
6B04:  BNZ   6AFC
6B06:  MOVLB  5
6B08:  BTFSC  x3A.7
6B0A:  BSF    FF2.7
6B0C:  MOVLW  05
6B0E:  MOVWF  x3B
6B10:  MOVLW  1A
6B12:  MOVWF  x3A
6B14:  CLRF   x3C
6B16:  MOVLW  0A
6B18:  MOVWF  x3D
6B1A:  CLRF   x3E
6B1C:  MOVLW  02
6B1E:  MOVWF  x3F
6B20:  MOVLB  0
6B22:  CALL   1812
....................             strcpy(Menus.Letra," !Activada!");displayMenu(Menus.Letra,0,30,0,2);emergency=1; 
6B26:  MOVLW  05
6B28:  MOVWF  FEA
6B2A:  MOVLW  1A
6B2C:  MOVWF  FE9
6B2E:  MOVFF  FF2,53A
6B32:  BCF    FF2.7
6B34:  MOVLW  00
6B36:  CALL   0E98
6B3A:  TBLRD*-
6B3C:  TBLRD*+
6B3E:  MOVF   FF5,W
6B40:  MOVWF  FEE
6B42:  IORLW  00
6B44:  BNZ   6B3C
6B46:  MOVLB  5
6B48:  BTFSC  x3A.7
6B4A:  BSF    FF2.7
6B4C:  MOVLW  05
6B4E:  MOVWF  x3B
6B50:  MOVLW  1A
6B52:  MOVWF  x3A
6B54:  CLRF   x3C
6B56:  MOVLW  1E
6B58:  MOVWF  x3D
6B5A:  CLRF   x3E
6B5C:  MOVLW  02
6B5E:  MOVWF  x3F
6B60:  MOVLB  0
6B62:  CALL   1812
6B66:  MOVLB  4
6B68:  BSF    x7C.3
....................             disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=1;disp_Door=0;disp_Fin=0; 
6B6A:  BCF    x7D.4
6B6C:  BCF    x7D.5
6B6E:  BCF    x7D.6
6B70:  BCF    x7D.7
6B72:  BCF    x7E.0
6B74:  BSF    x7E.1
6B76:  BCF    x7E.2
6B78:  BCF    x7E.3
....................          } 
....................          if(CadenaRecibida==1) 
6B7A:  BTFSS  x7D.3
6B7C:  BRA    6B8C
....................          { 
....................             Determina(); 
6B7E:  MOVLB  0
6B80:  CALL   1F50
....................             EnviarCodigo(); 
6B84:  CALL   1AF8
....................             CadenaRecibida=0; 
6B88:  MOVLB  4
6B8A:  BCF    x7D.3
....................          } 
....................       }    
6B8C:  BRA    6AC6
....................       if(Parada==1) 
6B8E:  DECFSZ x71,W
6B90:  BRA    6BAE
....................       { 
....................          if(emergency==1) 
6B92:  BTFSS  x7C.3
6B94:  BRA    6BAE
....................          {glcd_fillScreen(OFF);emergency=0;visual=1;disp_Stop=0;Menu=1;reset_cpu();} 
6B96:  MOVLB  5
6B98:  CLRF   x3B
6B9A:  MOVLB  0
6B9C:  CALL   11E2
6BA0:  MOVLB  4
6BA2:  BCF    x7C.3
6BA4:  BSF    x7C.4
6BA6:  BCF    x7E.1
6BA8:  MOVLW  01
6BAA:  MOVWF  x89
6BAC:  RESET
....................       } 
....................    } 
6BAE:  GOTO   30B4
.................... } 
6BB2:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
