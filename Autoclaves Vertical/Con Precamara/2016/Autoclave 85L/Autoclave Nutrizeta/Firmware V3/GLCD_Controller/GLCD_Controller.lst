CCS PCH C Compiler, Version 4.104, 5967               23-mar.-16 14:20

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Con Precamara\Autoclave 85L\Autoclave Nutrizeta\Firmware V3\GLCD_Controller\GLCD_Controller.lst

               ROM used: 27990 bytes (85%)
                         Largest free fragment is 4774
               RAM used: 1345 (66%) at main() level
                         1401 (68%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  GOTO   2B64
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   1036
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   0F4A
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
1104:  MOVLW  05
1106:  MOVWF  FEA
1108:  MOVLW  42
110A:  MOVWF  FE9
110C:  MOVF   FEF,W
110E:  BZ    112C
1110:  MOVLW  0F
1112:  MOVWF  01
1114:  CLRF   00
1116:  DECFSZ 00,F
1118:  BRA    1116
111A:  DECFSZ 01,F
111C:  BRA    1114
111E:  MOVLW  8F
1120:  MOVWF  00
1122:  DECFSZ 00,F
1124:  BRA    1122
1126:  NOP   
1128:  DECFSZ FEF,F
112A:  BRA    1110
112C:  RETLW  00
.................... #use RS232(BAUD=2400, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7) 
*
1B08:  BTFSS  F9E.4
1B0A:  BRA    1B08
1B0C:  MOVWF  FAD
1B0E:  GOTO   1B80 (RETURN)
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
*
0ED2:  MOVLB  5
0ED4:  MOVFF  574,FE9
0ED8:  MOVFF  575,FEA
0EDC:  MOVFF  FEF,578
0EE0:  MOVFF  577,03
0EE4:  MOVFF  576,FE9
0EE8:  MOVFF  577,FEA
0EEC:  MOVF   FEF,W
0EEE:  SUBWF  x78,W
0EF0:  BNZ   0F1C
....................       if (*s1 == '\0') 
0EF2:  MOVFF  575,03
0EF6:  MOVFF  574,FE9
0EFA:  MOVFF  03,FEA
0EFE:  MOVF   FEF,F
0F00:  BNZ   0F08
....................          return(0); 
0F02:  MOVLW  00
0F04:  MOVWF  01
0F06:  BRA    0F46
0F08:  MOVFF  575,03
0F0C:  MOVF   x74,W
0F0E:  INCF   x74,F
0F10:  BTFSC  FD8.2
0F12:  INCF   x75,F
0F14:  INCF   x76,F
0F16:  BTFSC  FD8.2
0F18:  INCF   x77,F
0F1A:  BRA    0ED4
....................    return((*s1 < *s2) ? -1: 1); 
0F1C:  MOVFF  575,03
0F20:  MOVFF  574,FE9
0F24:  MOVFF  575,FEA
0F28:  MOVFF  FEF,578
0F2C:  MOVFF  577,03
0F30:  MOVFF  576,FE9
0F34:  MOVFF  577,FEA
0F38:  MOVF   FEF,W
0F3A:  SUBWF  x78,W
0F3C:  BC    0F42
0F3E:  MOVLW  FF
0F40:  BRA    0F44
0F42:  MOVLW  01
0F44:  MOVWF  01
.................... } 
0F46:  MOVLB  0
0F48:  RETLW  00
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D4   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D3   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_D2   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
130E:  BCF    F95.2
1310:  BSF    F8C.2
....................    output_low(GLCD_E); 
1312:  BCF    F95.7
1314:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
1316:  BCF    F95.4
1318:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
131A:  BCF    F95.3
131C:  BCF    F8C.3
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
131E:  BCF    F95.5
1320:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
1322:  MOVLB  5
1324:  CLRF   x53
1326:  MOVLW  C0
1328:  MOVWF  x54
132A:  MOVLB  0
132C:  RCALL  11BA
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
132E:  MOVLW  01
1330:  MOVLB  5
1332:  MOVWF  x53
1334:  MOVLW  C0
1336:  MOVWF  x54
1338:  MOVLB  0
133A:  RCALL  11BA
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
133C:  MOVLB  5
133E:  CLRF   x53
1340:  MOVLW  40
1342:  MOVWF  x54
1344:  MOVLB  0
1346:  RCALL  11BA
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
1348:  MOVLW  01
134A:  MOVLB  5
134C:  MOVWF  x53
134E:  MOVLW  40
1350:  MOVWF  x54
1352:  MOVLB  0
1354:  RCALL  11BA
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
1356:  MOVLB  5
1358:  CLRF   x53
135A:  MOVLW  B8
135C:  MOVWF  x54
135E:  MOVLB  0
1360:  RCALL  11BA
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
1362:  MOVLW  01
1364:  MOVLB  5
1366:  MOVWF  x53
1368:  MOVLW  B8
136A:  MOVWF  x54
136C:  MOVLB  0
136E:  RCALL  11BA
....................  
....................    if(mode == ON) 
1370:  MOVLB  5
1372:  DECFSZ x3D,W
1374:  BRA    1392
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
1376:  CLRF   x53
1378:  MOVLW  3F
137A:  MOVWF  x54
137C:  MOVLB  0
137E:  RCALL  11BA
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
1380:  MOVLW  01
1382:  MOVLB  5
1384:  MOVWF  x53
1386:  MOVLW  3F
1388:  MOVWF  x54
138A:  MOVLB  0
138C:  RCALL  11BA
....................    } 
....................    else 
138E:  BRA    13AA
1390:  MOVLB  5
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
1392:  CLRF   x53
1394:  MOVLW  3E
1396:  MOVWF  x54
1398:  MOVLB  0
139A:  RCALL  11BA
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
139C:  MOVLW  01
139E:  MOVLB  5
13A0:  MOVWF  x53
13A2:  MOVLW  3E
13A4:  MOVWF  x54
13A6:  MOVLB  0
13A8:  RCALL  11BA
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
13AA:  MOVLB  5
13AC:  CLRF   x3E
13AE:  MOVLB  0
13B0:  RCALL  11FC
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
13B2:  RCALL  1256
....................    #endif 
.................... } 
13B4:  GOTO   2F62 (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
1256:  MOVLB  5
1258:  CLRF   x4F
125A:  MOVLW  1C
125C:  MOVWF  x4E
....................    p2 = displayData.right; 
125E:  MOVLW  02
1260:  MOVWF  x51
1262:  MOVLW  1C
1264:  MOVWF  x50
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
1266:  CLRF   x4C
1268:  MOVF   x4C,W
126A:  SUBLW  07
126C:  BNC   130A
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
126E:  BCF    F95.5
1270:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
1272:  CLRF   x53
1274:  MOVLW  40
1276:  MOVWF  x54
1278:  MOVLB  0
127A:  RCALL  11BA
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
127C:  MOVLW  01
127E:  MOVLB  5
1280:  MOVWF  x53
1282:  MOVLW  40
1284:  MOVWF  x54
1286:  MOVLB  0
1288:  RCALL  11BA
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
128A:  MOVLB  5
128C:  MOVF   x4C,W
128E:  IORLW  B8
1290:  MOVWF  x52
1292:  CLRF   x53
1294:  MOVWF  x54
1296:  MOVLB  0
1298:  RCALL  11BA
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
129A:  MOVLB  5
129C:  MOVF   x4C,W
129E:  IORLW  B8
12A0:  MOVWF  x52
12A2:  MOVLW  01
12A4:  MOVWF  x53
12A6:  MOVFF  552,554
12AA:  MOVLB  0
12AC:  RCALL  11BA
....................       output_high(GLCD_DI);                     // Set for data 
12AE:  BCF    F95.5
12B0:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
12B2:  MOVLB  5
12B4:  CLRF   x4D
12B6:  MOVF   x4D,W
12B8:  SUBLW  3F
12BA:  BNC   1306
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
12BC:  MOVFF  54F,03
12C0:  MOVF   x4E,W
12C2:  INCF   x4E,F
12C4:  BTFSC  FD8.2
12C6:  INCF   x4F,F
12C8:  MOVWF  FE9
12CA:  MOVFF  03,FEA
12CE:  MOVFF  FEF,552
12D2:  CLRF   x53
12D4:  MOVFF  552,554
12D8:  MOVLB  0
12DA:  RCALL  11BA
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
12DC:  MOVLB  5
12DE:  MOVFF  551,03
12E2:  MOVF   x50,W
12E4:  INCF   x50,F
12E6:  BTFSC  FD8.2
12E8:  INCF   x51,F
12EA:  MOVWF  FE9
12EC:  MOVFF  03,FEA
12F0:  MOVFF  FEF,552
12F4:  MOVLW  01
12F6:  MOVWF  x53
12F8:  MOVFF  552,554
12FC:  MOVLB  0
12FE:  RCALL  11BA
....................       } 
1300:  MOVLB  5
1302:  INCF   x4D,F
1304:  BRA    12B6
....................    } 
1306:  INCF   x4C,F
1308:  BRA    1268
.................... } 
130A:  MOVLB  0
130C:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
*
13B8:  MOVLB  5
13BA:  CLRF   x70
13BC:  RRCF   x6B,W
13BE:  MOVWF  x6F
13C0:  RRCF   x6F,F
13C2:  RRCF   x6F,F
13C4:  MOVLW  1F
13C6:  ANDWF  x6F,F
....................    temp *= 64; 
13C8:  RLCF   x6F,F
13CA:  RLCF   x70,F
13CC:  RLCF   x6F,F
13CE:  RLCF   x70,F
13D0:  RLCF   x6F,F
13D2:  RLCF   x70,F
13D4:  RLCF   x6F,F
13D6:  RLCF   x70,F
13D8:  RLCF   x6F,F
13DA:  RLCF   x70,F
13DC:  RLCF   x6F,F
13DE:  RLCF   x70,F
13E0:  MOVLW  C0
13E2:  ANDWF  x6F,F
....................    temp += x; 
13E4:  MOVF   x6A,W
13E6:  ADDWF  x6F,F
13E8:  MOVLW  00
13EA:  ADDWFC x70,F
....................  
....................    if(x > 63) 
13EC:  MOVF   x6A,W
13EE:  SUBLW  3F
13F0:  BC    140C
....................    { 
....................       p = displayData.right + temp - 64; 
13F2:  MOVLW  1C
13F4:  ADDWF  x6F,W
13F6:  MOVWF  x71
13F8:  MOVLW  02
13FA:  ADDWFC x70,W
13FC:  MOVWF  x72
13FE:  MOVLW  40
1400:  SUBWF  x71,W
1402:  MOVWF  x6D
1404:  MOVLW  00
1406:  SUBWFB x72,W
1408:  MOVWF  x6E
....................    } 
....................    else 
140A:  BRA    1418
....................    { 
....................       p = displayData.left + temp; 
140C:  MOVLW  1C
140E:  ADDWF  x6F,W
1410:  MOVWF  x6D
1412:  MOVLW  00
1414:  ADDWFC x70,W
1416:  MOVWF  x6E
....................    } 
....................  
....................    if(color) 
1418:  MOVF   x6C,F
141A:  BZ    1446
....................    { 
....................       bit_set(*p, y%8); 
141C:  MOVFF  56E,03
1420:  MOVFF  56D,FE9
1424:  MOVFF  56E,FEA
1428:  MOVF   x6B,W
142A:  ANDLW  07
142C:  MOVWF  x71
142E:  MOVLW  01
1430:  MOVWF  00
1432:  MOVF   x71,W
1434:  MOVWF  01
1436:  BZ    1440
1438:  BCF    FD8.0
143A:  RLCF   00,F
143C:  DECFSZ 01,F
143E:  BRA    1438
1440:  MOVF   00,W
1442:  IORWF  FEF,F
....................    } 
....................    else 
1444:  BRA    1470
....................    { 
....................       bit_clear(*p, y%8); 
1446:  MOVFF  56E,03
144A:  MOVFF  56D,FE9
144E:  MOVFF  56E,FEA
1452:  MOVF   x6B,W
1454:  ANDLW  07
1456:  MOVWF  x71
1458:  MOVLW  01
145A:  MOVWF  00
145C:  MOVF   x71,W
145E:  MOVWF  01
1460:  BZ    146A
1462:  BCF    FD8.0
1464:  RLCF   00,F
1466:  DECFSZ 01,F
1468:  BRA    1462
146A:  MOVF   00,W
146C:  XORLW  FF
146E:  ANDWF  FEF,F
....................    } 
.................... } 
1470:  MOVLB  0
1472:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
11FC:  MOVLB  5
11FE:  CLRF   x41
1200:  MOVLW  1C
1202:  MOVWF  x40
....................    p2 = displayData.right; 
1204:  MOVLW  02
1206:  MOVWF  x43
1208:  MOVLW  1C
120A:  MOVWF  x42
....................    data = 0xFF * color; 
120C:  MOVF   x3E,W
120E:  MULLW  FF
1210:  MOVFF  FF3,53F
....................  
....................    for(i=0; i<512; ++i) 
1214:  CLRF   x45
1216:  CLRF   x44
1218:  MOVF   x45,W
121A:  SUBLW  01
121C:  BNC   1252
....................    { 
....................       *p1++ = data; 
121E:  MOVFF  541,03
1222:  MOVF   x40,W
1224:  INCF   x40,F
1226:  BTFSC  FD8.2
1228:  INCF   x41,F
122A:  MOVWF  FE9
122C:  MOVFF  03,FEA
1230:  MOVFF  53F,FEF
....................       *p2++ = data; 
1234:  MOVFF  543,03
1238:  MOVF   x42,W
123A:  INCF   x42,F
123C:  BTFSC  FD8.2
123E:  INCF   x43,F
1240:  MOVWF  FE9
1242:  MOVFF  03,FEA
1246:  MOVFF  53F,FEF
....................    } 
124A:  INCF   x44,F
124C:  BTFSC  FD8.2
124E:  INCF   x45,F
1250:  BRA    1218
.................... } 
1252:  MOVLB  0
1254:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
11BA:  MOVLB  5
11BC:  MOVF   x53,F
11BE:  BZ    11C6
....................       output_high(GLCD_CS2); 
11C0:  BCF    F95.3
11C2:  BSF    F8C.3
....................    else 
11C4:  BRA    11CA
....................       output_high(GLCD_CS1); 
11C6:  BCF    F95.4
11C8:  BSF    F8C.4
....................  
....................    output_low(GLCD_RW);       // Set for writing 
11CA:  BCF    F95.6
11CC:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
11CE:  CLRF   F93
11D0:  MOVFF  554,F8A
....................    delay_cycles(50); 
11D4:  MOVLW  10
11D6:  MOVWF  00
11D8:  DECFSZ 00,F
11DA:  BRA    11D8
11DC:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
11DE:  BCF    F95.7
11E0:  BSF    F8C.7
....................    delay_cycles(255); 
11E2:  MOVLW  54
11E4:  MOVWF  00
11E6:  DECFSZ 00,F
11E8:  BRA    11E6
11EA:  BRA    11EC
....................    output_low(GLCD_E); 
11EC:  BCF    F95.7
11EE:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
11F0:  BCF    F95.4
11F2:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
11F4:  BCF    F95.3
11F6:  BCF    F8C.3
.................... } 
11F8:  MOVLB  0
11FA:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(50); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(200); 
....................    data = input_b();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
162C:  MOVLW  01
162E:  MOVLB  5
1630:  MOVWF  x63
1632:  MOVWF  x64
1634:  CLRF   x69
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
1636:  MOVF   x5A,W
1638:  SUBWF  x5C,W
163A:  MOVWF  x6A
163C:  MOVF   x6A,W
163E:  BTFSS  x6A.7
1640:  BRA    1648
1642:  MOVLW  00
1644:  BSF    FD8.0
1646:  SUBFWB x6A,W
1648:  CLRF   03
164A:  MOVWF  x61
164C:  MOVFF  03,562
....................    dy = abs((signed int8)(y2 - y1)); 
1650:  MOVF   x5B,W
1652:  SUBWF  x5D,W
1654:  MOVWF  x6A
1656:  MOVF   x6A,W
1658:  BTFSS  x6A.7
165A:  BRA    1662
165C:  MOVLW  00
165E:  BSF    FD8.0
1660:  SUBFWB x6A,W
1662:  CLRF   03
1664:  MOVWF  x5F
1666:  MOVFF  03,560
....................    #endif 
....................  
....................    if(x1 > x2) 
166A:  MOVF   x5A,W
166C:  SUBWF  x5C,W
166E:  BC    1674
....................       addx = -1; 
1670:  MOVLW  FF
1672:  MOVWF  x63
....................    if(y1 > y2) 
1674:  MOVF   x5B,W
1676:  SUBWF  x5D,W
1678:  BC    167E
....................       addy = -1; 
167A:  MOVLW  FF
167C:  MOVWF  x64
....................  
....................    if(dx >= dy) 
167E:  MOVF   x60,W
1680:  SUBWF  x62,W
1682:  BNC   16FA
1684:  BNZ   168C
1686:  MOVF   x5F,W
1688:  SUBWF  x61,W
168A:  BNC   16FA
....................    { 
....................       dy *= 2; 
168C:  BCF    FD8.0
168E:  RLCF   x5F,F
1690:  RLCF   x60,F
....................       P = dy - dx; 
1692:  MOVF   x61,W
1694:  SUBWF  x5F,W
1696:  MOVWF  00
1698:  MOVF   x62,W
169A:  SUBWFB x60,W
169C:  MOVFF  00,565
16A0:  MOVWF  x66
....................       diff = P - dx; 
16A2:  MOVF   x61,W
16A4:  SUBWF  x65,W
16A6:  MOVWF  x67
16A8:  MOVF   x62,W
16AA:  SUBWFB x66,W
16AC:  MOVWF  x68
....................  
....................       for(; i<=dx; ++i) 
16AE:  MOVF   x62,F
16B0:  BNZ   16B8
16B2:  MOVF   x69,W
16B4:  SUBWF  x61,W
16B6:  BNC   16F8
....................       { 
....................          glcd_pixel(x1, y1, color); 
16B8:  MOVFF  55A,56A
16BC:  MOVFF  55B,56B
16C0:  MOVFF  55E,56C
16C4:  MOVLB  0
16C6:  RCALL  13B8
....................  
....................          if(P < 0) 
16C8:  MOVLB  5
16CA:  BTFSC  x66.7
16CC:  BRA    16D0
16CE:  BRA    16E0
....................          { 
....................             P  += dy; 
16D0:  MOVF   x5F,W
16D2:  ADDWF  x65,F
16D4:  MOVF   x60,W
16D6:  ADDWFC x66,F
....................             x1 += addx; 
16D8:  MOVF   x63,W
16DA:  ADDWF  x5A,W
16DC:  MOVWF  x5A
....................          } 
....................          else 
16DE:  BRA    16F4
....................          { 
....................             P  += diff; 
16E0:  MOVF   x67,W
16E2:  ADDWF  x65,F
16E4:  MOVF   x68,W
16E6:  ADDWFC x66,F
....................             x1 += addx; 
16E8:  MOVF   x63,W
16EA:  ADDWF  x5A,W
16EC:  MOVWF  x5A
....................             y1 += addy; 
16EE:  MOVF   x64,W
16F0:  ADDWF  x5B,W
16F2:  MOVWF  x5B
....................          } 
....................       } 
16F4:  INCF   x69,F
16F6:  BRA    16AE
....................    } 
....................    else 
16F8:  BRA    1766
....................    { 
....................       dx *= 2; 
16FA:  BCF    FD8.0
16FC:  RLCF   x61,F
16FE:  RLCF   x62,F
....................       P = dx - dy; 
1700:  MOVF   x5F,W
1702:  SUBWF  x61,W
1704:  MOVWF  00
1706:  MOVF   x60,W
1708:  SUBWFB x62,W
170A:  MOVFF  00,565
170E:  MOVWF  x66
....................       diff = P - dy; 
1710:  MOVF   x5F,W
1712:  SUBWF  x65,W
1714:  MOVWF  x67
1716:  MOVF   x60,W
1718:  SUBWFB x66,W
171A:  MOVWF  x68
....................  
....................       for(; i<=dy; ++i) 
171C:  MOVF   x60,F
171E:  BNZ   1726
1720:  MOVF   x69,W
1722:  SUBWF  x5F,W
1724:  BNC   1766
....................       { 
....................          glcd_pixel(x1, y1, color); 
1726:  MOVFF  55A,56A
172A:  MOVFF  55B,56B
172E:  MOVFF  55E,56C
1732:  MOVLB  0
1734:  RCALL  13B8
....................  
....................          if(P < 0) 
1736:  MOVLB  5
1738:  BTFSC  x66.7
173A:  BRA    173E
173C:  BRA    174E
....................          { 
....................             P  += dx; 
173E:  MOVF   x61,W
1740:  ADDWF  x65,F
1742:  MOVF   x62,W
1744:  ADDWFC x66,F
....................             y1 += addy; 
1746:  MOVF   x64,W
1748:  ADDWF  x5B,W
174A:  MOVWF  x5B
....................          } 
....................          else 
174C:  BRA    1762
....................          { 
....................             P  += diff; 
174E:  MOVF   x67,W
1750:  ADDWF  x65,F
1752:  MOVF   x68,W
1754:  ADDWFC x66,F
....................             x1 += addx; 
1756:  MOVF   x63,W
1758:  ADDWF  x5A,W
175A:  MOVWF  x5A
....................             y1 += addy; 
175C:  MOVF   x64,W
175E:  ADDWF  x5B,W
1760:  MOVWF  x5B
....................          } 
....................       } 
1762:  INCF   x69,F
1764:  BRA    171C
....................    } 
.................... } 
1766:  MOVLB  0
1768:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
176A:  MOVLB  5
176C:  MOVF   x53,F
176E:  BZ    17CC
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
1770:  MOVF   x51,W
1772:  SUBWF  x4F,W
1774:  BC    1780
....................       { 
....................          xmin = x1; 
1776:  MOVFF  54F,556
....................          xmax = x2; 
177A:  MOVFF  551,557
....................       } 
....................       else 
177E:  BRA    1788
....................       { 
....................          xmin = x2; 
1780:  MOVFF  551,556
....................          xmax = x1; 
1784:  MOVFF  54F,557
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
1788:  MOVF   x52,W
178A:  SUBWF  x50,W
178C:  BC    1798
....................       { 
....................          ymin = y1; 
178E:  MOVFF  550,558
....................          ymax = y2; 
1792:  MOVFF  552,559
....................       } 
....................       else 
1796:  BRA    17A0
....................       { 
....................          ymin = y2; 
1798:  MOVFF  552,558
....................          ymax = y1; 
179C:  MOVFF  550,559
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
17A0:  MOVF   x56,W
17A2:  SUBWF  x57,W
17A4:  BNC   17CA
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
17A6:  MOVFF  558,555
17AA:  MOVF   x55,W
17AC:  SUBWF  x59,W
17AE:  BNC   17C6
....................          { 
....................             glcd_pixel(xmin, i, color); 
17B0:  MOVFF  556,56A
17B4:  MOVFF  555,56B
17B8:  MOVFF  554,56C
17BC:  MOVLB  0
17BE:  RCALL  13B8
....................          } 
17C0:  MOVLB  5
17C2:  INCF   x55,F
17C4:  BRA    17AA
....................       } 
17C6:  INCF   x56,F
17C8:  BRA    17A0
....................    } 
....................    else 
17CA:  BRA    1828
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
17CC:  MOVFF  54F,55A
17D0:  MOVFF  550,55B
17D4:  MOVFF  551,55C
17D8:  MOVFF  550,55D
17DC:  MOVFF  554,55E
17E0:  MOVLB  0
17E2:  RCALL  162C
....................       glcd_line(x1, y2, x2, y2, color); 
17E4:  MOVFF  54F,55A
17E8:  MOVFF  552,55B
17EC:  MOVFF  551,55C
17F0:  MOVFF  552,55D
17F4:  MOVFF  554,55E
17F8:  RCALL  162C
....................       glcd_line(x1, y1, x1, y2, color); 
17FA:  MOVFF  54F,55A
17FE:  MOVFF  550,55B
1802:  MOVFF  54F,55C
1806:  MOVFF  552,55D
180A:  MOVFF  554,55E
180E:  RCALL  162C
....................       glcd_line(x2, y1, x2, y2, color); 
1810:  MOVFF  551,55A
1814:  MOVFF  550,55B
1818:  MOVFF  551,55C
181C:  MOVFF  552,55D
1820:  MOVFF  554,55E
1824:  RCALL  162C
1826:  MOVLB  5
....................    } 
.................... } 
1828:  MOVLB  0
182A:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
215E:  MOVLB  5
2160:  CLRF   x42
....................    b = radius; 
2162:  MOVFF  53F,543
....................    P = 1 - radius; 
2166:  MOVLW  01
2168:  BSF    FD8.0
216A:  SUBFWB x3F,W
216C:  MOVWF  x44
....................  
....................    do 
....................    { 
....................       if(fill) 
216E:  MOVF   x40,F
2170:  BZ    223C
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
2172:  MOVF   x42,W
2174:  SUBWF  x3D,W
2176:  MOVWF  x45
2178:  MOVF   x43,W
217A:  ADDWF  x3E,W
217C:  MOVWF  x46
217E:  MOVF   x42,W
2180:  ADDWF  x3D,W
2182:  MOVWF  x47
2184:  MOVF   x43,W
2186:  ADDWF  x3E,W
2188:  MOVWF  x48
218A:  MOVFF  545,55A
218E:  MOVFF  546,55B
2192:  MOVFF  547,55C
2196:  MOVWF  x5D
2198:  MOVFF  541,55E
219C:  MOVLB  0
219E:  CALL   162C
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
21A2:  MOVLB  5
21A4:  MOVF   x42,W
21A6:  SUBWF  x3D,W
21A8:  MOVWF  x45
21AA:  MOVF   x43,W
21AC:  SUBWF  x3E,W
21AE:  MOVWF  x46
21B0:  MOVF   x42,W
21B2:  ADDWF  x3D,W
21B4:  MOVWF  x47
21B6:  MOVF   x43,W
21B8:  SUBWF  x3E,W
21BA:  MOVWF  x48
21BC:  MOVFF  545,55A
21C0:  MOVFF  546,55B
21C4:  MOVFF  547,55C
21C8:  MOVWF  x5D
21CA:  MOVFF  541,55E
21CE:  MOVLB  0
21D0:  CALL   162C
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
21D4:  MOVLB  5
21D6:  MOVF   x43,W
21D8:  SUBWF  x3D,W
21DA:  MOVWF  x45
21DC:  MOVF   x42,W
21DE:  ADDWF  x3E,W
21E0:  MOVWF  x46
21E2:  MOVF   x43,W
21E4:  ADDWF  x3D,W
21E6:  MOVWF  x47
21E8:  MOVF   x42,W
21EA:  ADDWF  x3E,W
21EC:  MOVWF  x48
21EE:  MOVFF  545,55A
21F2:  MOVFF  546,55B
21F6:  MOVFF  547,55C
21FA:  MOVWF  x5D
21FC:  MOVFF  541,55E
2200:  MOVLB  0
2202:  CALL   162C
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
2206:  MOVLB  5
2208:  MOVF   x43,W
220A:  SUBWF  x3D,W
220C:  MOVWF  x45
220E:  MOVF   x42,W
2210:  SUBWF  x3E,W
2212:  MOVWF  x46
2214:  MOVF   x43,W
2216:  ADDWF  x3D,W
2218:  MOVWF  x47
221A:  MOVF   x42,W
221C:  SUBWF  x3E,W
221E:  MOVWF  x48
2220:  MOVFF  545,55A
2224:  MOVFF  546,55B
2228:  MOVFF  547,55C
222C:  MOVWF  x5D
222E:  MOVFF  541,55E
2232:  MOVLB  0
2234:  CALL   162C
....................       } 
....................       else 
2238:  BRA    232A
223A:  MOVLB  5
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
223C:  MOVF   x3D,W
223E:  ADDWF  x42,W
2240:  MOVWF  x45
2242:  MOVF   x3E,W
2244:  ADDWF  x43,W
2246:  MOVWF  x46
2248:  MOVFF  545,56A
224C:  MOVWF  x6B
224E:  MOVFF  541,56C
2252:  MOVLB  0
2254:  CALL   13B8
....................          glcd_pixel(b+x, a+y, color); 
2258:  MOVLB  5
225A:  MOVF   x3D,W
225C:  ADDWF  x43,W
225E:  MOVWF  x45
2260:  MOVF   x3E,W
2262:  ADDWF  x42,W
2264:  MOVWF  x46
2266:  MOVFF  545,56A
226A:  MOVWF  x6B
226C:  MOVFF  541,56C
2270:  MOVLB  0
2272:  CALL   13B8
....................          glcd_pixel(x-a, b+y, color); 
2276:  MOVLB  5
2278:  MOVF   x42,W
227A:  SUBWF  x3D,W
227C:  MOVWF  x45
227E:  MOVF   x3E,W
2280:  ADDWF  x43,W
2282:  MOVWF  x46
2284:  MOVFF  545,56A
2288:  MOVWF  x6B
228A:  MOVFF  541,56C
228E:  MOVLB  0
2290:  CALL   13B8
....................          glcd_pixel(x-b, a+y, color); 
2294:  MOVLB  5
2296:  MOVF   x43,W
2298:  SUBWF  x3D,W
229A:  MOVWF  x45
229C:  MOVF   x3E,W
229E:  ADDWF  x42,W
22A0:  MOVWF  x46
22A2:  MOVFF  545,56A
22A6:  MOVWF  x6B
22A8:  MOVFF  541,56C
22AC:  MOVLB  0
22AE:  CALL   13B8
....................          glcd_pixel(b+x, y-a, color); 
22B2:  MOVLB  5
22B4:  MOVF   x3D,W
22B6:  ADDWF  x43,W
22B8:  MOVWF  x45
22BA:  MOVF   x42,W
22BC:  SUBWF  x3E,W
22BE:  MOVWF  x46
22C0:  MOVFF  545,56A
22C4:  MOVWF  x6B
22C6:  MOVFF  541,56C
22CA:  MOVLB  0
22CC:  CALL   13B8
....................          glcd_pixel(a+x, y-b, color); 
22D0:  MOVLB  5
22D2:  MOVF   x3D,W
22D4:  ADDWF  x42,W
22D6:  MOVWF  x45
22D8:  MOVF   x43,W
22DA:  SUBWF  x3E,W
22DC:  MOVWF  x46
22DE:  MOVFF  545,56A
22E2:  MOVWF  x6B
22E4:  MOVFF  541,56C
22E8:  MOVLB  0
22EA:  CALL   13B8
....................          glcd_pixel(x-a, y-b, color); 
22EE:  MOVLB  5
22F0:  MOVF   x42,W
22F2:  SUBWF  x3D,W
22F4:  MOVWF  x45
22F6:  MOVF   x43,W
22F8:  SUBWF  x3E,W
22FA:  MOVWF  x46
22FC:  MOVFF  545,56A
2300:  MOVWF  x6B
2302:  MOVFF  541,56C
2306:  MOVLB  0
2308:  CALL   13B8
....................          glcd_pixel(x-b, y-a, color); 
230C:  MOVLB  5
230E:  MOVF   x43,W
2310:  SUBWF  x3D,W
2312:  MOVWF  x45
2314:  MOVF   x42,W
2316:  SUBWF  x3E,W
2318:  MOVWF  x46
231A:  MOVFF  545,56A
231E:  MOVWF  x6B
2320:  MOVFF  541,56C
2324:  MOVLB  0
2326:  CALL   13B8
....................       } 
....................  
....................       if(P < 0) 
232A:  MOVLB  5
232C:  BTFSC  x44.7
232E:  BRA    2332
2330:  BRA    234E
....................          P += 3 + 2 * a++; 
2332:  MOVF   x42,W
2334:  INCF   x42,F
2336:  MOVWF  x45
2338:  MOVLW  02
233A:  MOVWF  x46
233C:  MOVFF  545,547
2340:  MOVLB  0
2342:  RCALL  2110
2344:  MOVF   01,W
2346:  ADDLW  03
2348:  MOVLB  5
234A:  ADDWF  x44,F
....................       else 
234C:  BRA    2370
....................          P += 5 + 2 * (a++ - b--); 
234E:  MOVF   x42,W
2350:  INCF   x42,F
2352:  MOVWF  x45
2354:  MOVF   x43,W
2356:  DECF   x43,F
2358:  SUBWF  x45,W
235A:  MOVWF  x45
235C:  MOVLW  02
235E:  MOVWF  x46
2360:  MOVFF  545,547
2364:  MOVLB  0
2366:  RCALL  2110
2368:  MOVF   01,W
236A:  ADDLW  05
236C:  MOVLB  5
236E:  ADDWF  x44,F
....................     } while(a <= b); 
2370:  MOVF   x42,W
2372:  XORLW  80
2374:  MOVWF  00
2376:  MOVF   x43,W
2378:  XORLW  80
237A:  SUBWF  00,W
237C:  BTFSC  FD8.2
237E:  BRA    216E
2380:  BTFSS  FD8.0
2382:  BRA    216E
.................... } 
2384:  MOVLB  0
2386:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
1474:  MOVFF  551,03
1478:  MOVLB  5
147A:  MOVFF  550,FE9
147E:  MOVFF  551,FEA
1482:  MOVF   FEF,F
1484:  BTFSC  FD8.2
1486:  BRA    1628
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
1488:  MOVFF  551,03
148C:  MOVFF  550,FE9
1490:  MOVFF  551,FEA
1494:  MOVF   FEF,W
1496:  SUBLW  52
1498:  BNC   14E8
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
149A:  MOVFF  551,03
149E:  MOVFF  550,FE9
14A2:  MOVFF  551,FEA
14A6:  MOVLW  20
14A8:  SUBWF  FEF,W
14AA:  MULLW  05
14AC:  MOVF   FF3,W
14AE:  CLRF   03
14B0:  MOVWF  x5D
14B2:  MOVLW  05
14B4:  MOVWF  FEA
14B6:  MOVLW  58
14B8:  MOVWF  FE9
14BA:  CLRF   x61
14BC:  MOVFF  55D,560
14C0:  MOVFF  FF2,55E
14C4:  BCF    FF2.7
14C6:  MOVLW  05
14C8:  MOVWF  01
14CA:  CLRF   FF7
14CC:  MOVF   x5D,W
14CE:  MOVLB  0
14D0:  CALL   00A2
14D4:  TBLRD*-
14D6:  TBLRD*+
14D8:  MOVFF  FF5,FEE
14DC:  DECFSZ 01,F
14DE:  BRA    14D6
14E0:  MOVLB  5
14E2:  BTFSC  x5E.7
14E4:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
14E6:  BRA    1552
14E8:  MOVFF  551,03
14EC:  MOVFF  550,FE9
14F0:  MOVFF  551,FEA
14F4:  MOVF   FEF,W
14F6:  SUBLW  7E
14F8:  BNC   1548
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
14FA:  MOVFF  551,03
14FE:  MOVFF  550,FE9
1502:  MOVFF  551,FEA
1506:  MOVLW  53
1508:  SUBWF  FEF,W
150A:  MULLW  05
150C:  MOVF   FF3,W
150E:  CLRF   03
1510:  MOVWF  x5D
1512:  MOVLW  05
1514:  MOVWF  FEA
1516:  MOVLW  58
1518:  MOVWF  FE9
151A:  CLRF   x61
151C:  MOVFF  55D,560
1520:  MOVFF  FF2,55E
1524:  BCF    FF2.7
1526:  MOVLW  05
1528:  MOVWF  01
152A:  CLRF   FF7
152C:  MOVF   x5D,W
152E:  MOVLB  0
1530:  CALL   01BC
1534:  TBLRD*-
1536:  TBLRD*+
1538:  MOVFF  FF5,FEE
153C:  DECFSZ 01,F
153E:  BRA    1536
1540:  MOVLB  5
1542:  BTFSC  x5E.7
1544:  BSF    FF2.7
....................       else 
1546:  BRA    1552
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
1548:  CLRF   x58
154A:  CLRF   x59
154C:  CLRF   x5A
154E:  CLRF   x5B
1550:  CLRF   x5C
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
1552:  MOVFF  551,03
1556:  MOVF   x50,W
1558:  MOVWF  FE9
155A:  MOVFF  03,FEA
155E:  MOVF   FEF,W
1560:  XORLW  0A
1562:  MOVLB  0
1564:  BZ    156C
1566:  XORLW  07
1568:  BZ    157C
156A:  BRA    1582
....................          case '\n': 
....................             y += 7*size + 1; 
156C:  MOVLB  5
156E:  MOVF   x52,W
1570:  MULLW  07
1572:  MOVF   FF3,W
1574:  ADDLW  01
1576:  ADDWF  x4F,F
....................             continue; 
1578:  BRA    161A
157A:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
157C:  MOVLB  5
157E:  CLRF   x4E
....................             continue; 
1580:  BRA    161A
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
1582:  MOVLB  5
1584:  MOVF   x52,W
1586:  MULLW  05
1588:  MOVF   FF3,W
158A:  ADDWF  x4E,W
158C:  SUBLW  7F
158E:  BC    159C
....................       { 
....................          x = 0;                           // Set x at far left position 
1590:  CLRF   x4E
....................          y += 7*size + 1;                 // Set y at next position down 
1592:  MOVF   x52,W
1594:  MULLW  07
1596:  MOVF   FF3,W
1598:  ADDLW  01
159A:  ADDWF  x4F,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
159C:  CLRF   x54
159E:  MOVF   x54,W
15A0:  SUBLW  04
15A2:  BNC   161A
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
15A4:  CLRF   x55
15A6:  MOVF   x55,W
15A8:  SUBLW  06
15AA:  BNC   1612
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
15AC:  CLRF   03
15AE:  MOVF   x54,W
15B0:  ADDLW  58
15B2:  MOVWF  FE9
15B4:  MOVLW  05
15B6:  ADDWFC 03,W
15B8:  MOVWF  FEA
15BA:  MOVFF  FEF,55D
15BE:  MOVFF  55D,00
15C2:  MOVF   x55,W
15C4:  MOVWF  01
15C6:  BZ    15D0
15C8:  BCF    FD8.0
15CA:  RRCF   00,F
15CC:  DECFSZ 01,F
15CE:  BRA    15C8
15D0:  BTFSS  00.0
15D2:  BRA    160E
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
15D4:  CLRF   x56
15D6:  MOVF   x52,W
15D8:  SUBWF  x56,W
15DA:  BC    160E
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
15DC:  CLRF   x57
15DE:  MOVF   x52,W
15E0:  SUBWF  x57,W
15E2:  BC    160A
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
15E4:  MOVF   x57,W
15E6:  ADDWF  x4E,W
15E8:  MOVWF  x5D
15EA:  MOVF   x55,W
15EC:  MULWF  x52
15EE:  MOVF   FF3,W
15F0:  ADDWF  x4F,W
15F2:  ADDWF  x56,W
15F4:  MOVWF  x5E
15F6:  MOVFF  55D,56A
15FA:  MOVWF  x6B
15FC:  MOVFF  553,56C
1600:  MOVLB  0
1602:  RCALL  13B8
....................                   } 
1604:  MOVLB  5
1606:  INCF   x57,F
1608:  BRA    15DE
....................                } 
160A:  INCF   x56,F
160C:  BRA    15D6
....................             } 
....................          } 
160E:  INCF   x55,F
1610:  BRA    15A6
....................       } 
1612:  INCF   x54,F
1614:  MOVF   x52,W
1616:  ADDWF  x4E,F
1618:  BRA    159E
....................    } 
161A:  INCF   x50,F
161C:  BTFSC  FD8.2
161E:  INCF   x51,F
1620:  INCF   x4E,F
1622:  MOVLB  0
1624:  BRA    1474
1626:  MOVLB  5
.................... } 
1628:  MOVLB  0
162A:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... char kpa[]="kPa"; 
.................... float promedio[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... int8 Puerta=0,Parada=1,NivelReservorio=0,NivelTanque=0,Presostato=0,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,Alarma=0,AlarmaAgua=0; 
.................... short Flanco=0,Flanco1=0,Flanco2=0,emergency=0,visual=1,desfoguelento=0,Lectura=0,Expulsa=0, est=0,Visua=0,flag_agua=0,CadenaRecibida=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,z=0; 
.................... short disp_Alarma=0,disp_AlarmaAgua=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Decimal=0; 
.................... int8 Menu=0, unidad=1,bite=0,TamanoCadena=0,i=0; 
.................... int8 Setpoint=0,fin_ciclo=0,Opcion=1,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0,Chksum=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,tiempo_desfogue=0,tinicio=0; 
.................... float ADC_Pt100=0.0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... char dato[10]; 
.................... char datoTx[14]; 
.................... char datoRx[11]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
.................... float V0=0.0,R1=6180.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0; 
....................  
.................... typedef struct{ 
....................    char Letra[30]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void displayMenu(char palabra[30], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
182C:  MOVLB  5
182E:  MOVFF  53D,01
1832:  MOVFF  53E,03
1836:  MOVFF  53D,543
183A:  MOVFF  53E,544
183E:  MOVLW  05
1840:  MOVWF  FEA
1842:  MOVLW  1D
1844:  MOVWF  FE9
1846:  MOVFF  53E,FE2
184A:  MOVFF  53D,FE1
184E:  MOVF   FE7,F
1850:  MOVFF  FE6,FEE
1854:  BNZ   184E
....................    if(sombreado==2) 
1856:  MOVF   x41,W
1858:  SUBLW  02
185A:  BNZ   1884
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
185C:  MOVLW  01
185E:  ADDWF  x3F,W
1860:  MOVWF  x43
1862:  MOVLW  01
1864:  ADDWF  x40,W
1866:  MOVWF  x44
1868:  MOVFF  543,54E
186C:  MOVWF  x4F
186E:  MOVLW  05
1870:  MOVWF  x51
1872:  MOVLW  1D
1874:  MOVWF  x50
1876:  MOVFF  542,552
187A:  MOVLW  01
187C:  MOVWF  x53
187E:  MOVLB  0
1880:  RCALL  1474
1882:  MOVLB  5
....................    if(sombreado==1) 
1884:  DECFSZ x41,W
1886:  BRA    18D2
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
1888:  MOVF   x42,W
188A:  MULLW  08
188C:  MOVF   FF3,W
188E:  ADDWF  x40,W
1890:  MOVWF  x43
1892:  CLRF   x4F
1894:  MOVFF  540,550
1898:  MOVLW  7F
189A:  MOVWF  x51
189C:  MOVFF  543,552
18A0:  MOVLW  01
18A2:  MOVWF  x53
18A4:  MOVWF  x54
18A6:  MOVLB  0
18A8:  RCALL  176A
18AA:  MOVLW  01
18AC:  MOVLB  5
18AE:  ADDWF  x3F,W
18B0:  MOVWF  x43
18B2:  MOVLW  01
18B4:  ADDWF  x40,W
18B6:  MOVWF  x44
18B8:  MOVFF  543,54E
18BC:  MOVWF  x4F
18BE:  MOVLW  05
18C0:  MOVWF  x51
18C2:  MOVLW  1D
18C4:  MOVWF  x50
18C6:  MOVFF  542,552
18CA:  CLRF   x53
18CC:  MOVLB  0
18CE:  RCALL  1474
18D0:  MOVLB  5
....................    if(sombreado==0) 
18D2:  MOVF   x41,F
18D4:  BNZ   1920
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
18D6:  MOVF   x42,W
18D8:  MULLW  08
18DA:  MOVF   FF3,W
18DC:  ADDWF  x40,W
18DE:  MOVWF  x43
18E0:  CLRF   x4F
18E2:  MOVFF  540,550
18E6:  MOVLW  7F
18E8:  MOVWF  x51
18EA:  MOVFF  543,552
18EE:  MOVLW  01
18F0:  MOVWF  x53
18F2:  CLRF   x54
18F4:  MOVLB  0
18F6:  RCALL  176A
18F8:  MOVLW  01
18FA:  MOVLB  5
18FC:  ADDWF  x3F,W
18FE:  MOVWF  x43
1900:  MOVLW  01
1902:  ADDWF  x40,W
1904:  MOVWF  x44
1906:  MOVFF  543,54E
190A:  MOVWF  x4F
190C:  MOVLW  05
190E:  MOVWF  x51
1910:  MOVLW  1D
1912:  MOVWF  x50
1914:  MOVFF  542,552
1918:  MOVLW  01
191A:  MOVWF  x53
191C:  MOVLB  0
191E:  RCALL  1474
....................    glcd_update(); 
1920:  MOVLB  0
1922:  RCALL  1256
.................... } 
1924:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
240E:  MOVLB  5
2410:  MOVF   x41,W
2412:  SUBLW  02
2414:  BNZ   2486
....................    { 
....................       sprintf(voltage, "%03u", digito); 
2416:  MOVLW  05
2418:  MOVWF  x3C
241A:  MOVLW  43
241C:  MOVWF  x3B
241E:  MOVFF  53E,54C
2422:  MOVLW  03
2424:  MOVWF  x4D
2426:  MOVLB  0
2428:  RCALL  2388
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
242A:  MOVLB  5
242C:  MOVF   x42,W
242E:  MULLW  12
2430:  MOVF   FF3,W
2432:  ADDWF  x3F,W
2434:  MOVWF  x4C
2436:  MOVF   x42,W
2438:  MULLW  08
243A:  MOVF   FF3,W
243C:  ADDWF  x40,W
243E:  MOVWF  x4D
2440:  MOVFF  53F,54F
2444:  MOVFF  540,550
2448:  MOVFF  54C,551
244C:  MOVWF  x52
244E:  MOVLW  01
2450:  MOVWF  x53
2452:  MOVWF  x54
2454:  MOVLB  0
2456:  CALL   176A
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
245A:  MOVLW  01
245C:  MOVLB  5
245E:  ADDWF  x3F,W
2460:  MOVWF  x4C
2462:  MOVLW  01
2464:  ADDWF  x40,W
2466:  MOVWF  x4D
2468:  MOVFF  54C,54E
246C:  MOVWF  x4F
246E:  MOVLW  05
2470:  MOVWF  x51
2472:  MOVLW  43
2474:  MOVWF  x50
2476:  MOVFF  542,552
247A:  CLRF   x53
247C:  MOVLB  0
247E:  CALL   1474
....................    } 
....................    else 
2482:  BRA    2554
2484:  MOVLB  5
....................    { 
....................       sprintf(voltage, "%u", digito); 
2486:  MOVLW  05
2488:  MOVWF  x3C
248A:  MOVLW  43
248C:  MOVWF  x3B
248E:  MOVFF  53E,54C
2492:  MOVLW  1B
2494:  MOVWF  x4D
2496:  MOVLB  0
2498:  RCALL  2388
....................     
....................       if(sombreado==1) 
249A:  MOVLB  5
249C:  DECFSZ x41,W
249E:  BRA    24F8
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
24A0:  MOVF   x42,W
24A2:  MULLW  05
24A4:  MOVF   FF3,W
24A6:  ADDWF  x3F,W
24A8:  MOVWF  x4C
24AA:  MOVF   x42,W
24AC:  MULLW  08
24AE:  MOVF   FF3,W
24B0:  ADDWF  x40,W
24B2:  MOVWF  x4D
24B4:  MOVFF  53F,54F
24B8:  MOVFF  540,550
24BC:  MOVFF  54C,551
24C0:  MOVWF  x52
24C2:  MOVLW  01
24C4:  MOVWF  x53
24C6:  MOVWF  x54
24C8:  MOVLB  0
24CA:  CALL   176A
24CE:  MOVLW  01
24D0:  MOVLB  5
24D2:  ADDWF  x3F,W
24D4:  MOVWF  x4C
24D6:  MOVLW  01
24D8:  ADDWF  x40,W
24DA:  MOVWF  x4D
24DC:  MOVFF  54C,54E
24E0:  MOVWF  x4F
24E2:  MOVLW  05
24E4:  MOVWF  x51
24E6:  MOVLW  43
24E8:  MOVWF  x50
24EA:  MOVFF  542,552
24EE:  CLRF   x53
24F0:  MOVLB  0
24F2:  CALL   1474
24F6:  MOVLB  5
....................       if(sombreado==0) 
24F8:  MOVF   x41,F
24FA:  BNZ   2556
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
24FC:  MOVF   x42,W
24FE:  MULLW  05
2500:  MOVF   FF3,W
2502:  ADDWF  x3F,W
2504:  MOVWF  x4C
2506:  MOVF   x42,W
2508:  MULLW  08
250A:  MOVF   FF3,W
250C:  ADDWF  x40,W
250E:  MOVWF  x4D
2510:  MOVFF  53F,54F
2514:  MOVFF  540,550
2518:  MOVFF  54C,551
251C:  MOVWF  x52
251E:  MOVLW  01
2520:  MOVWF  x53
2522:  CLRF   x54
2524:  MOVLB  0
2526:  CALL   176A
252A:  MOVLW  01
252C:  MOVLB  5
252E:  ADDWF  x3F,W
2530:  MOVWF  x4C
2532:  MOVLW  01
2534:  ADDWF  x40,W
2536:  MOVWF  x4D
2538:  MOVFF  54C,54E
253C:  MOVWF  x4F
253E:  MOVLW  05
2540:  MOVWF  x51
2542:  MOVLW  43
2544:  MOVWF  x50
2546:  MOVFF  542,552
254A:  MOVLW  01
254C:  MOVWF  x53
254E:  MOVLB  0
2550:  CALL   1474
2554:  MOVLB  5
....................    } 
....................    glcd_update(); 
2556:  MOVLB  0
2558:  CALL   1256
.................... } 
255C:  RETLW  00
....................  
.................... #int_rda 
.................... void rda_isr(void)//función de interrupción por recepción de datos USART  
.................... {  
....................    dato[bite]=getch(); 
*
0F4A:  CLRF   03
0F4C:  MOVLB  4
0F4E:  MOVF   x8B,W
0F50:  ADDLW  BF
0F52:  MOVWF  FE9
0F54:  MOVLW  04
0F56:  ADDWFC 03,W
0F58:  MOVWF  FEA
0F5A:  BTFSS  F9E.5
0F5C:  BRA    0F5A
0F5E:  MOVFF  FAE,FEF
....................    if((bite<10 && strcmp(dato[bite],'\r')==0)) 
0F62:  MOVF   x8B,W
0F64:  SUBLW  09
0F66:  BNC   0F9C
0F68:  CLRF   03
0F6A:  MOVF   x8B,W
0F6C:  ADDLW  BF
0F6E:  MOVWF  FE9
0F70:  MOVLW  04
0F72:  ADDWFC 03,W
0F74:  MOVWF  FEA
0F76:  MOVFF  FEF,573
0F7A:  MOVLB  5
0F7C:  CLRF   x75
0F7E:  MOVFF  573,574
0F82:  CLRF   x77
0F84:  MOVLW  0D
0F86:  MOVWF  x76
0F88:  MOVLB  0
0F8A:  RCALL  0ED2
0F8C:  MOVF   01,F
0F8E:  BTFSC  FD8.2
0F90:  BRA    0F96
0F92:  MOVLB  4
0F94:  BRA    0F9C
....................    { 
....................       bite=0; 
0F96:  MOVLB  4
0F98:  CLRF   x8B
....................    } 
....................    else 
0F9A:  BRA    102E
....................    { 
....................       if(bite==10 && strcmp(dato[bite],'\r')==0) 
0F9C:  MOVF   x8B,W
0F9E:  SUBLW  0A
0FA0:  BNZ   1020
0FA2:  CLRF   03
0FA4:  MOVF   x8B,W
0FA6:  ADDLW  BF
0FA8:  MOVWF  FE9
0FAA:  MOVLW  04
0FAC:  ADDWFC 03,W
0FAE:  MOVWF  FEA
0FB0:  MOVFF  FEF,573
0FB4:  MOVLB  5
0FB6:  CLRF   x75
0FB8:  MOVFF  573,574
0FBC:  CLRF   x77
0FBE:  MOVLW  0D
0FC0:  MOVWF  x76
0FC2:  MOVLB  0
0FC4:  RCALL  0ED2
0FC6:  MOVF   01,F
0FC8:  BTFSC  FD8.2
0FCA:  BRA    0FD0
0FCC:  MOVLB  4
0FCE:  BRA    1020
....................       { 
....................          TamanoCadena=bite; 
0FD0:  MOVFF  48B,48C
....................          bite=0; 
0FD4:  MOVLB  4
0FD6:  CLRF   x8B
....................          CadenaRecibida=1; 
0FD8:  BSF    x7D.3
....................          for(i=0;i<TamanoCadena+1;i++) 
0FDA:  CLRF   x8D
0FDC:  MOVLW  01
0FDE:  ADDWF  x8C,W
0FE0:  SUBWF  x8D,W
0FE2:  BC    101E
....................          { 
....................             datoRx[i]=dato[i]; 
0FE4:  CLRF   03
0FE6:  MOVF   x8D,W
0FE8:  ADDLW  D7
0FEA:  MOVWF  01
0FEC:  MOVLW  04
0FEE:  ADDWFC 03,F
0FF0:  MOVLB  5
0FF2:  MOVFF  03,574
0FF6:  CLRF   03
0FF8:  MOVLB  4
0FFA:  MOVF   x8D,W
0FFC:  ADDLW  BF
0FFE:  MOVWF  FE9
1000:  MOVLW  04
1002:  ADDWFC 03,W
1004:  MOVWF  FEA
1006:  MOVFF  FEF,575
100A:  MOVLB  5
100C:  MOVFF  574,FEA
1010:  MOVFF  01,FE9
1014:  MOVFF  575,FEF
....................          }    
1018:  MOVLB  4
101A:  INCF   x8D,F
101C:  BRA    0FDC
....................       } 
....................       else 
101E:  BRA    102E
....................       { 
....................          if(bite>10) 
1020:  MOVF   x8B,W
1022:  SUBLW  0A
1024:  BC    102A
....................          { 
....................             bite=0; 
1026:  CLRF   x8B
....................          } 
....................          else 
1028:  BRA    102E
....................          { 
....................             //displayTiempo(bite,50,50,2,1); 
....................             CadenaRecibida=0; 
102A:  BCF    x7D.3
....................             bite++; 
102C:  INCF   x8B,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
102E:  BCF    F9E.5
1030:  MOVLB  0
1032:  GOTO   0060
.................... void EnviarCodigo(void) 
.................... { 
....................    datoTx[0]=Resistencia+48; 
*
1B12:  MOVLW  30
1B14:  MOVLB  4
1B16:  ADDWF  x7F,W
1B18:  MOVWF  xC9
....................    datoTx[1]=EVDesfogue+48; 
1B1A:  MOVLW  30
1B1C:  ADDWF  x80,W
1B1E:  MOVWF  xCA
....................    datoTx[2]=EVAgua+48; 
1B20:  MOVLW  30
1B22:  ADDWF  x81,W
1B24:  MOVWF  xCB
....................    datoTx[3]=EVTrampa+48; 
1B26:  MOVLW  30
1B28:  ADDWF  x82,W
1B2A:  MOVWF  xCC
....................    datoTx[4]=MotorPuerta+48; 
1B2C:  MOVLW  30
1B2E:  ADDWF  x83,W
1B30:  MOVWF  xCD
....................    datoTx[5]=EVEntradaAgua+48; 
1B32:  MOVLW  30
1B34:  ADDWF  x84,W
1B36:  MOVWF  xCE
....................    datoTx[6]=BombaVacio+48; 
1B38:  MOVLW  30
1B3A:  ADDWF  x85,W
1B3C:  MOVWF  xCF
....................    datoTx[7]=BombaAgua+48; 
1B3E:  MOVLW  30
1B40:  ADDWF  x86,W
1B42:  MOVWF  xD0
....................    datoTx[8]=Control+48; 
1B44:  MOVLW  30
1B46:  ADDWF  x87,W
1B48:  MOVWF  xD1
....................    datoTx[12]=Nivel+48; 
1B4A:  MOVLW  30
1B4C:  ADDWF  x9D,W
1B4E:  MOVWF  xD5
....................    datoTx[9]=Setpoint+48; 
1B50:  MOVLW  30
1B52:  ADDWF  x8E,W
1B54:  MOVWF  xD2
....................    datoTx[10]=68; 
1B56:  MOVLW  44
1B58:  MOVWF  xD3
....................    /*itoa(Setpoint,10, SetTemperatura); 
....................     
....................    for(i=0;i<3;i++) 
....................    { 
....................       if(SetTemperatura[i]==null) 
....................       { 
....................          datoTx[i+9]='n'; 
....................       } 
....................       else 
....................       { 
....................          datoTx[i+9]=SetTemperatura[i]; 
....................       } 
....................    }*/ 
....................    datoTx[13]='\r'; 
1B5A:  MOVLW  0D
1B5C:  MOVWF  xD6
....................        
....................        
....................    for(i=0;i<14;i++) 
1B5E:  CLRF   x8D
1B60:  MOVF   x8D,W
1B62:  SUBLW  0D
1B64:  BNC   1B92
....................    { 
....................       putc(datoTx[i]); 
1B66:  CLRF   03
1B68:  MOVF   x8D,W
1B6A:  ADDLW  C9
1B6C:  MOVWF  FE9
1B6E:  MOVLW  04
1B70:  ADDWFC 03,W
1B72:  MOVWF  FEA
1B74:  MOVFF  FEF,53D
1B78:  MOVLB  5
1B7A:  MOVF   x3D,W
1B7C:  MOVLB  0
1B7E:  BRA    1B08
....................       delay_ms(12); 
1B80:  MOVLW  0C
1B82:  MOVLB  5
1B84:  MOVWF  x42
1B86:  MOVLB  0
1B88:  CALL   1104
....................    }    
1B8C:  MOVLB  4
1B8E:  INCF   x8D,F
1B90:  BRA    1B60
.................... } 
1B92:  MOVLB  0
1B94:  RETLW  00
....................  
.................... void Determina(void){ 
....................          Puerta=DatoRx[0]-48; 
*
1F6E:  MOVLW  30
1F70:  MOVLB  4
1F72:  SUBWF  xD7,W
1F74:  MOVWF  x70
....................          Parada=DatoRx[1]-48; 
1F76:  MOVLW  30
1F78:  SUBWF  xD8,W
1F7A:  MOVWF  x71
....................          NivelReservorio=DatoRx[2]-48; 
1F7C:  MOVLW  30
1F7E:  SUBWF  xD9,W
1F80:  MOVWF  x72
....................          NivelTanque=DatoRx[3]-48; 
1F82:  MOVLW  30
1F84:  SUBWF  xDA,W
1F86:  MOVWF  x73
....................          Presostato=DatoRx[4]-48; 
1F88:  MOVLW  30
1F8A:  SUBWF  xDB,W
1F8C:  MOVWF  x74
....................          ADC_Pt100=DatoRx[5]-48; 
1F8E:  MOVLW  30
1F90:  SUBWF  xDC,W
1F92:  MOVLB  5
1F94:  CLRF   x43
1F96:  MOVWF  x42
1F98:  MOVLB  0
1F9A:  CALL   112E
1F9E:  MOVFF  03,4A6
1FA2:  MOVFF  02,4A5
1FA6:  MOVFF  01,4A4
1FAA:  MOVFF  00,4A3
....................          Alarma=DatoRx[6]-48; 
1FAE:  MOVLW  30
1FB0:  MOVLB  4
1FB2:  SUBWF  xDD,W
1FB4:  MOVWF  x7A
....................          AlarmaAgua=DatoRx[7]-48; 
1FB6:  MOVLW  30
1FB8:  SUBWF  xDE,W
1FBA:  MOVWF  x7B
....................          Chksum=DatoRx[8]-48; 
1FBC:  MOVLW  30
1FBE:  SUBWF  xDF,W
1FC0:  MOVWF  x94
....................          Decimal=DatoRx[9]-48; 
1FC2:  MOVLW  30
1FC4:  SUBWF  xE0,W
1FC6:  MOVWF  x88
....................          ADC_Pt100=ADC_Pt100+((float)Decimal/10); 
1FC8:  MOVLB  5
1FCA:  CLRF   x43
1FCC:  MOVFF  488,542
1FD0:  MOVLB  0
1FD2:  CALL   112E
1FD6:  MOVFF  00,53D
1FDA:  MOVFF  01,53E
1FDE:  MOVFF  02,53F
1FE2:  MOVFF  03,540
1FE6:  MOVFF  03,544
1FEA:  MOVFF  02,543
1FEE:  MOVFF  01,542
1FF2:  MOVFF  00,541
1FF6:  MOVLB  5
1FF8:  CLRF   x48
1FFA:  CLRF   x47
1FFC:  MOVLW  20
1FFE:  MOVWF  x46
2000:  MOVLW  82
2002:  MOVWF  x45
2004:  MOVLB  0
2006:  BRA    1B96
2008:  BCF    FD8.1
200A:  MOVFF  4A6,544
200E:  MOVFF  4A5,543
2012:  MOVFF  4A4,542
2016:  MOVFF  4A3,541
201A:  MOVFF  03,548
201E:  MOVFF  02,547
2022:  MOVFF  01,546
2026:  MOVFF  00,545
202A:  RCALL  1CF6
202C:  MOVFF  03,4A6
2030:  MOVFF  02,4A5
2034:  MOVFF  01,4A4
2038:  MOVFF  00,4A3
.................... } 
203C:  RETLW  00
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................     
....................    if(x==5){ 
*
2062:  MOVLB  5
2064:  MOVF   x3D,W
2066:  SUBLW  05
2068:  BNZ   210C
....................    for( i = 0 ; i < 64 ; i ++ ) 
206A:  CLRF   x3E
206C:  MOVF   x3E,W
206E:  SUBLW  3F
2070:  BNC   210C
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
2072:  CLRF   x3F
2074:  MOVF   x3F,W
2076:  SUBLW  0F
2078:  BNC   2108
....................       {     
....................          for(k=7;k>-1;k--) 
207A:  MOVLW  07
207C:  MOVWF  x40
207E:  MOVF   x40,W
2080:  XORLW  80
2082:  SUBLW  7F
2084:  BC    2104
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
2086:  CLRF   x42
2088:  MOVFF  53E,541
208C:  CLRF   x44
208E:  MOVLW  10
2090:  MOVWF  x43
2092:  MOVLB  0
2094:  BRA    203E
2096:  MOVFF  02,542
209A:  MOVFF  01,541
209E:  MOVLB  5
20A0:  MOVF   x3F,W
20A2:  ADDWF  01,W
20A4:  MOVWF  01
20A6:  MOVLW  00
20A8:  ADDWFC 02,W
20AA:  MOVWF  03
20AC:  MOVF   01,W
20AE:  MOVFF  FF2,541
20B2:  BCF    FF2.7
20B4:  MOVFF  03,FF7
20B8:  MOVLB  0
20BA:  CALL   02B2
20BE:  MOVLB  5
20C0:  BTFSC  x41.7
20C2:  BSF    FF2.7
20C4:  MOVWF  x41
20C6:  MOVLW  07
20C8:  BSF    FD8.0
20CA:  SUBFWB x40,W
20CC:  MOVWF  x42
20CE:  MOVFF  541,00
20D2:  MOVF   x42,W
20D4:  MOVWF  01
20D6:  BZ    20E0
20D8:  BCF    FD8.0
20DA:  RRCF   00,F
20DC:  DECFSZ 01,F
20DE:  BRA    20D8
20E0:  BTFSS  00.0
20E2:  BRA    2100
....................                glcd_pixel( j*8+k,i, ON ); 
20E4:  MOVF   x3F,W
20E6:  MULLW  08
20E8:  MOVF   FF3,W
20EA:  ADDWF  x40,W
20EC:  MOVWF  x41
20EE:  MOVWF  x6A
20F0:  MOVFF  53E,56B
20F4:  MOVLW  01
20F6:  MOVWF  x6C
20F8:  MOVLB  0
20FA:  CALL   13B8
20FE:  MOVLB  5
....................          }   
2100:  DECF   x40,F
2102:  BRA    207E
....................       } 
2104:  INCF   x3F,F
2106:  BRA    2074
....................    } 
2108:  INCF   x3E,F
210A:  BRA    206C
....................    } 
....................     
.................... } 
210C:  MOVLB  0
210E:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
*
1036:  MOVLW  15
1038:  MOVWF  FCF
103A:  MOVLW  A0
103C:  MOVWF  FCE
....................    tiempos++; 
103E:  MOVLB  4
1040:  INCF   x95,F
1042:  BTFSC  FD8.2
1044:  INCF   x96,F
....................    tiempos3++; 
1046:  INCF   x97,F
1048:  BTFSC  FD8.2
104A:  INCF   x98,F
....................    tiempoctrl++; 
104C:  INCF   x99,F
104E:  BTFSC  FD8.2
1050:  INCF   x9A,F
....................        
....................    if(tiempos3>=40 && Exhaust==2) 
1052:  MOVF   x98,F
1054:  BNZ   105C
1056:  MOVF   x97,W
1058:  SUBLW  27
105A:  BC    106E
105C:  MOVF   x93,W
105E:  SUBLW  02
1060:  BNZ   106E
....................    {tiempos3=0;Expulsa=1;tiempo_desfogue++;} 
1062:  CLRF   x98
1064:  CLRF   x97
1066:  BSF    x7C.7
1068:  INCF   x9F,F
106A:  BTFSC  FD8.2
106C:  INCF   xA0,F
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
106E:  MOVF   x95,W
1070:  SUBLW  C8
1072:  BNZ   10FC
1074:  MOVF   x96,F
1076:  BNZ   10FC
....................    {tiempos=0;Lectura=1;tinicio++; 
1078:  CLRF   x96
107A:  CLRF   x95
107C:  BSF    x7C.6
107E:  INCF   xA1,F
1080:  BTFSC  FD8.2
1082:  INCF   xA2,F
....................     
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
1084:  DECFSZ x91,W
1086:  BRA    10C0
....................       { 
....................                       
....................       Testerilizacion[0]++; 
1088:  INCF   xA7,F
....................       if(Testerilizacion[0]>9) 
108A:  BTFSC  xA7.7
108C:  BRA    1098
108E:  MOVF   xA7,W
1090:  SUBLW  09
1092:  BC    1098
....................          {Testerilizacion[0]=0; 
1094:  CLRF   xA7
....................           Testerilizacion[1]++;} 
1096:  INCF   xA8,F
....................        if(Testerilizacion[1]>5) 
1098:  BTFSC  xA8.7
109A:  BRA    10A6
109C:  MOVF   xA8,W
109E:  SUBLW  05
10A0:  BC    10A6
....................          {Testerilizacion[1]=0; 
10A2:  CLRF   xA8
....................           Testerilizacion[2]++;} 
10A4:  INCF   xA9,F
....................          if(Testerilizacion[2]>9) 
10A6:  BTFSC  xA9.7
10A8:  BRA    10B4
10AA:  MOVF   xA9,W
10AC:  SUBLW  09
10AE:  BC    10B4
....................             {Testerilizacion[2]=0; 
10B0:  CLRF   xA9
....................              Testerilizacion[3]++;} 
10B2:  INCF   xAA,F
....................             if(Testerilizacion[3]>5) 
10B4:  BTFSC  xAA.7
10B6:  BRA    10C0
10B8:  MOVF   xAA,W
10BA:  SUBLW  05
10BC:  BC    10C0
....................                {Testerilizacion[3]=0;} 
10BE:  CLRF   xAA
....................       }        
....................        
....................     if(tiempo_secado==1) 
10C0:  DECFSZ x92,W
10C2:  BRA    10FC
....................       { 
....................                       
....................       Tsecado[0]++; 
10C4:  INCF   xAF,F
....................       if(Tsecado[0]>9) 
10C6:  BTFSC  xAF.7
10C8:  BRA    10D4
10CA:  MOVF   xAF,W
10CC:  SUBLW  09
10CE:  BC    10D4
....................          {Tsecado[0]=0; 
10D0:  CLRF   xAF
....................           Tsecado[1]++;} 
10D2:  INCF   xB0,F
....................        if(Tsecado[1]>5) 
10D4:  BTFSC  xB0.7
10D6:  BRA    10E2
10D8:  MOVF   xB0,W
10DA:  SUBLW  05
10DC:  BC    10E2
....................          {Tsecado[1]=0; 
10DE:  CLRF   xB0
....................           Tsecado[2]++;} 
10E0:  INCF   xB1,F
....................          if(Tsecado[2]>9) 
10E2:  BTFSC  xB1.7
10E4:  BRA    10F0
10E6:  MOVF   xB1,W
10E8:  SUBLW  09
10EA:  BC    10F0
....................             {Tsecado[2]=0; 
10EC:  CLRF   xB1
....................              Tsecado[3]++;} 
10EE:  INCF   xB2,F
....................             if(Tsecado[3]>5) 
10F0:  BTFSC  xB2.7
10F2:  BRA    10FC
10F4:  MOVF   xB2,W
10F6:  SUBLW  05
10F8:  BC    10FC
....................                {Tsecado[3]=0;} 
10FA:  CLRF   xB2
....................       }   
....................    } 
....................    } 
....................     
10FC:  BCF    F9E.0
10FE:  MOVLB  0
1100:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
....................    glcd_rect(x1, y, x2, y+7, YES, OFF); 
*
269E:  MOVLW  07
26A0:  MOVLB  5
26A2:  ADDWF  x3F,W
26A4:  MOVWF  x40
26A6:  MOVFF  53D,54F
26AA:  MOVFF  53F,550
26AE:  MOVFF  53E,551
26B2:  MOVWF  x52
26B4:  MOVLW  01
26B6:  MOVWF  x53
26B8:  CLRF   x54
26BA:  MOVLB  0
26BC:  CALL   176A
.................... } 
26C0:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%3.1f",adc); // Converts adc to text 
*
2A32:  MOVLW  05
2A34:  MOVLB  5
2A36:  MOVWF  x3C
2A38:  MOVLW  44
2A3A:  MOVWF  x3B
2A3C:  MOVLW  02
2A3E:  MOVWF  FE9
2A40:  MOVFF  540,550
2A44:  MOVFF  53F,54F
2A48:  MOVFF  53E,54E
2A4C:  MOVFF  53D,54D
2A50:  MOVLW  01
2A52:  MOVWF  x51
2A54:  MOVLB  0
2A56:  BRA    287E
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
2A58:  MOVLB  5
2A5A:  MOVF   x43,W
2A5C:  MULLW  1B
2A5E:  MOVF   FF3,W
2A60:  ADDWF  x41,W
2A62:  MOVWF  x4D
2A64:  MOVF   x43,W
2A66:  MULLW  08
2A68:  MOVF   FF3,W
2A6A:  ADDWF  x42,W
2A6C:  MOVWF  x4E
2A6E:  MOVFF  541,54F
2A72:  MOVFF  542,550
2A76:  MOVFF  54D,551
2A7A:  MOVWF  x52
2A7C:  MOVLW  01
2A7E:  MOVWF  x53
2A80:  CLRF   x54
2A82:  MOVLB  0
2A84:  CALL   176A
....................    /*glcd_rect(x, y, x+53, y+15, YES, ON);*/glcd_text57(x, y, voltage, w, ON); 
2A88:  MOVFF  541,54E
2A8C:  MOVFF  542,54F
2A90:  MOVLW  05
2A92:  MOVLB  5
2A94:  MOVWF  x51
2A96:  MOVLW  44
2A98:  MOVWF  x50
2A9A:  MOVFF  543,552
2A9E:  MOVLW  01
2AA0:  MOVWF  x53
2AA2:  MOVLB  0
2AA4:  CALL   1474
.................... } 
2AA8:  GOTO   65CE (RETURN)
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1164:  MOVLB  5
1166:  RLCF   x3D,W
1168:  MOVWF  00
116A:  RLCF   00,F
116C:  MOVLW  FC
116E:  ANDWF  00,F
1170:  MOVFF  00,01
1174:  MOVF   FC2,W
1176:  ANDLW  C3
1178:  IORWF  00,W
117A:  MOVWF  FC2
117C:  MOVLW  0A
117E:  MOVWF  x42
1180:  MOVLB  0
1182:  RCALL  1104
1184:  BSF    FC2.1
1186:  BTFSC  FC2.1
1188:  BRA    1186
118A:  MOVFF  FC4,543
118E:  MOVFF  FC3,542
1192:  MOVLB  0
1194:  RCALL  112E
1196:  MOVFF  03,541
119A:  MOVFF  02,540
119E:  MOVFF  01,53F
11A2:  MOVFF  00,53E
11A6:  MOVFF  53E,00
11AA:  MOVFF  53F,01
11AE:  MOVFF  540,02
11B2:  MOVFF  541,03
.................... } 
11B6:  GOTO   2DCE (RETURN)
....................  
.................... void MuestraTiemposProgramados(){ 
.................... // Muestra Valor de esterilizacion programado. 
....................    displayTiempo(Testerilizacionp[3],36,0,0,1);displayTiempo(Testerilizacionp[2],42,0,0,1); 
*
255E:  MOVFF  4AE,53E
2562:  MOVLW  24
2564:  MOVLB  5
2566:  MOVWF  x3F
2568:  CLRF   x40
256A:  CLRF   x41
256C:  MOVLW  01
256E:  MOVWF  x42
2570:  MOVLB  0
2572:  RCALL  240E
2574:  MOVFF  4AD,53E
2578:  MOVLW  2A
257A:  MOVLB  5
257C:  MOVWF  x3F
257E:  CLRF   x40
2580:  CLRF   x41
2582:  MOVLW  01
2584:  MOVWF  x42
2586:  MOVLB  0
2588:  RCALL  240E
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,0,2,1);  
258A:  MOVLW  05
258C:  MOVWF  FEA
258E:  MOVLW  1D
2590:  MOVWF  FE9
2592:  MOVFF  FF2,53D
2596:  BCF    FF2.7
2598:  MOVLW  00
259A:  CALL   06CA
259E:  TBLRD*-
25A0:  TBLRD*+
25A2:  MOVF   FF5,W
25A4:  MOVWF  FEE
25A6:  IORLW  00
25A8:  BNZ   25A0
25AA:  MOVLB  5
25AC:  BTFSC  x3D.7
25AE:  BSF    FF2.7
25B0:  MOVLW  05
25B2:  MOVWF  x3E
25B4:  MOVLW  1D
25B6:  MOVWF  x3D
25B8:  MOVLW  31
25BA:  MOVWF  x3F
25BC:  CLRF   x40
25BE:  MOVLW  02
25C0:  MOVWF  x41
25C2:  MOVLW  01
25C4:  MOVWF  x42
25C6:  MOVLB  0
25C8:  CALL   182C
....................    displayTiempo(Testerilizacionp[1],54,0,0,1);displayTiempo(Testerilizacionp[0],60,0,0,1); 
25CC:  MOVFF  4AC,53E
25D0:  MOVLW  36
25D2:  MOVLB  5
25D4:  MOVWF  x3F
25D6:  CLRF   x40
25D8:  CLRF   x41
25DA:  MOVLW  01
25DC:  MOVWF  x42
25DE:  MOVLB  0
25E0:  RCALL  240E
25E2:  MOVFF  4AB,53E
25E6:  MOVLW  3C
25E8:  MOVLB  5
25EA:  MOVWF  x3F
25EC:  CLRF   x40
25EE:  CLRF   x41
25F0:  MOVLW  01
25F2:  MOVWF  x42
25F4:  MOVLB  0
25F6:  RCALL  240E
.................... // Muestra tiempo de secado programado. 
....................    displayTiempo(Tsecadop[3],36,8,0,1);displayTiempo(Tsecadop[2],42,8,0,1); 
25F8:  MOVFF  4B6,53E
25FC:  MOVLW  24
25FE:  MOVLB  5
2600:  MOVWF  x3F
2602:  MOVLW  08
2604:  MOVWF  x40
2606:  CLRF   x41
2608:  MOVLW  01
260A:  MOVWF  x42
260C:  MOVLB  0
260E:  RCALL  240E
2610:  MOVFF  4B5,53E
2614:  MOVLW  2A
2616:  MOVLB  5
2618:  MOVWF  x3F
261A:  MOVLW  08
261C:  MOVWF  x40
261E:  CLRF   x41
2620:  MOVLW  01
2622:  MOVWF  x42
2624:  MOVLB  0
2626:  RCALL  240E
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,8,2,1);  
2628:  MOVLW  05
262A:  MOVWF  FEA
262C:  MOVLW  1D
262E:  MOVWF  FE9
2630:  MOVFF  FF2,53D
2634:  BCF    FF2.7
2636:  MOVLW  00
2638:  CALL   06CA
263C:  TBLRD*-
263E:  TBLRD*+
2640:  MOVF   FF5,W
2642:  MOVWF  FEE
2644:  IORLW  00
2646:  BNZ   263E
2648:  MOVLB  5
264A:  BTFSC  x3D.7
264C:  BSF    FF2.7
264E:  MOVLW  05
2650:  MOVWF  x3E
2652:  MOVLW  1D
2654:  MOVWF  x3D
2656:  MOVLW  31
2658:  MOVWF  x3F
265A:  MOVLW  08
265C:  MOVWF  x40
265E:  MOVLW  02
2660:  MOVWF  x41
2662:  MOVLW  01
2664:  MOVWF  x42
2666:  MOVLB  0
2668:  CALL   182C
....................    displayTiempo(Tsecadop[1],54,8,0,1);displayTiempo(Tsecadop[0],60,8,0,1); 
266C:  MOVFF  4B4,53E
2670:  MOVLW  36
2672:  MOVLB  5
2674:  MOVWF  x3F
2676:  MOVLW  08
2678:  MOVWF  x40
267A:  CLRF   x41
267C:  MOVLW  01
267E:  MOVWF  x42
2680:  MOVLB  0
2682:  RCALL  240E
2684:  MOVFF  4B3,53E
2688:  MOVLW  3C
268A:  MOVLB  5
268C:  MOVWF  x3F
268E:  MOVLW  08
2690:  MOVWF  x40
2692:  CLRF   x41
2694:  MOVLW  01
2696:  MOVWF  x42
2698:  MOVLB  0
269A:  RCALL  240E
.................... } 
269C:  RETLW  00
....................  
.................... void Leer_Sensor(int media) 
.................... { 
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    V0 = V0/39.40; 
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
....................    Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>media-1) 
....................    {l=0;} 
....................    promedio[l]=Temperature;l++; 
....................           
....................    for(h=0;h<=(media-1);h++) 
....................    { 
....................       Prom+=promedio[h]; 
....................    }  
....................    Prom=Prom/media;    
....................    Prom+=((float)Ajuste-(float)Ajusten); 
....................     
....................    //return Prom; 
.................... } 
....................  
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
1A52:  MOVLW  05
1A54:  MOVLB  5
1A56:  MOVWF  x3C
1A58:  MOVLW  43
1A5A:  MOVWF  x3B
1A5C:  MOVFF  53F,54C
1A60:  MOVLW  1F
1A62:  MOVWF  x4D
1A64:  MOVLB  0
1A66:  BRA    1972
....................     
....................    if(sombreado==1) 
1A68:  MOVLB  5
1A6A:  DECFSZ x42,W
1A6C:  BRA    1ABC
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
1A6E:  MOVLW  12
1A70:  ADDWF  x40,W
1A72:  MOVWF  x4C
1A74:  MOVLW  18
1A76:  ADDWF  x41,W
1A78:  MOVWF  x4D
1A7A:  MOVFF  540,54F
1A7E:  MOVFF  541,550
1A82:  MOVFF  54C,551
1A86:  MOVWF  x52
1A88:  MOVLW  01
1A8A:  MOVWF  x53
1A8C:  MOVWF  x54
1A8E:  MOVLB  0
1A90:  RCALL  176A
1A92:  MOVLW  02
1A94:  MOVLB  5
1A96:  ADDWF  x40,W
1A98:  MOVWF  x4C
1A9A:  MOVLW  01
1A9C:  ADDWF  x41,W
1A9E:  MOVWF  x4D
1AA0:  MOVFF  54C,54E
1AA4:  MOVWF  x4F
1AA6:  MOVLW  05
1AA8:  MOVWF  x51
1AAA:  MOVLW  43
1AAC:  MOVWF  x50
1AAE:  MOVLW  02
1AB0:  MOVWF  x52
1AB2:  CLRF   x53
1AB4:  MOVLB  0
1AB6:  RCALL  1474
....................    else    
1AB8:  BRA    1B06
1ABA:  MOVLB  5
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
1ABC:  MOVLW  12
1ABE:  ADDWF  x40,W
1AC0:  MOVWF  x4C
1AC2:  MOVLW  18
1AC4:  ADDWF  x41,W
1AC6:  MOVWF  x4D
1AC8:  MOVFF  540,54F
1ACC:  MOVFF  541,550
1AD0:  MOVFF  54C,551
1AD4:  MOVWF  x52
1AD6:  CLRF   x53
1AD8:  CLRF   x54
1ADA:  MOVLB  0
1ADC:  RCALL  176A
1ADE:  MOVLW  02
1AE0:  MOVLB  5
1AE2:  ADDWF  x40,W
1AE4:  MOVWF  x4C
1AE6:  MOVLW  01
1AE8:  ADDWF  x41,W
1AEA:  MOVWF  x4D
1AEC:  MOVFF  54C,54E
1AF0:  MOVWF  x4F
1AF2:  MOVLW  05
1AF4:  MOVWF  x51
1AF6:  MOVLW  43
1AF8:  MOVWF  x50
1AFA:  MOVLW  02
1AFC:  MOVWF  x52
1AFE:  MOVLW  01
1B00:  MOVWF  x53
1B02:  MOVLB  0
1B04:  RCALL  1474
....................  
.................... } 
1B06:  RETLW  00
....................  
.................... void main() 
.................... { 
*
2B64:  CLRF   FF8
2B66:  BCF    FD0.7
2B68:  BSF    07.7
2B6A:  CLRF   FEA
2B6C:  CLRF   FE9
2B6E:  BSF    FB8.3
2B70:  MOVLW  87
2B72:  MOVWF  FAF
2B74:  MOVLW  13
2B76:  MOVWF  FB0
2B78:  MOVLW  A6
2B7A:  MOVWF  FAC
2B7C:  MOVLW  90
2B7E:  MOVWF  FAB
2B80:  MOVLB  4
2B82:  CLRF   x70
2B84:  MOVLW  01
2B86:  MOVWF  x71
2B88:  CLRF   x72
2B8A:  CLRF   x73
2B8C:  CLRF   x74
2B8E:  CLRF   x75
2B90:  CLRF   x76
2B92:  CLRF   x77
2B94:  CLRF   x78
2B96:  CLRF   x79
2B98:  CLRF   x7A
2B9A:  CLRF   x7B
2B9C:  BCF    x7C.0
2B9E:  BCF    x7C.1
2BA0:  BCF    x7C.2
2BA2:  BCF    x7C.3
2BA4:  BSF    x7C.4
2BA6:  BCF    x7C.5
2BA8:  BCF    x7C.6
2BAA:  BCF    x7C.7
2BAC:  BCF    x7D.0
2BAE:  BCF    x7D.1
2BB0:  BCF    x7D.2
2BB2:  BCF    x7D.3
2BB4:  BCF    x7D.4
2BB6:  BCF    x7D.5
2BB8:  BCF    x7D.6
2BBA:  BCF    x7D.7
2BBC:  BCF    x7E.0
2BBE:  BCF    x7E.1
2BC0:  BCF    x7E.2
2BC2:  BCF    x7E.3
2BC4:  BCF    x7E.4
2BC6:  BCF    x7E.5
2BC8:  BCF    x7E.6
2BCA:  CLRF   x7F
2BCC:  CLRF   x80
2BCE:  CLRF   x81
2BD0:  CLRF   x82
2BD2:  CLRF   x83
2BD4:  CLRF   x84
2BD6:  CLRF   x85
2BD8:  CLRF   x86
2BDA:  CLRF   x87
2BDC:  CLRF   x88
2BDE:  CLRF   x89
2BE0:  MOVWF  x8A
2BE2:  CLRF   x8B
2BE4:  CLRF   x8C
2BE6:  CLRF   x8D
2BE8:  CLRF   x8E
2BEA:  CLRF   x8F
2BEC:  MOVWF  x90
2BEE:  CLRF   x91
2BF0:  CLRF   x92
2BF2:  CLRF   x93
2BF4:  CLRF   x94
2BF6:  CLRF   x96
2BF8:  CLRF   x95
2BFA:  CLRF   x98
2BFC:  CLRF   x97
2BFE:  CLRF   x9A
2C00:  CLRF   x99
2C02:  CLRF   x9C
2C04:  MOVLW  0F
2C06:  MOVWF  x9B
2C08:  CLRF   x9E
2C0A:  CLRF   x9D
2C0C:  CLRF   xA0
2C0E:  CLRF   x9F
2C10:  CLRF   xA2
2C12:  CLRF   xA1
2C14:  CLRF   xA6
2C16:  CLRF   xA5
2C18:  CLRF   xA4
2C1A:  CLRF   xA3
2C1C:  CLRF   xEC
2C1E:  CLRF   xEB
2C20:  CLRF   xEA
2C22:  CLRF   xE9
2C24:  CLRF   xF0
2C26:  MOVLW  20
2C28:  MOVWF  xEF
2C2A:  MOVLW  41
2C2C:  MOVWF  xEE
2C2E:  MOVLW  8B
2C30:  MOVWF  xED
2C32:  CLRF   xF8
2C34:  CLRF   xF7
2C36:  MOVLW  20
2C38:  MOVWF  xF6
2C3A:  MOVLW  82
2C3C:  MOVWF  xF5
2C3E:  CLRF   xFC
2C40:  CLRF   xFB
2C42:  CLRF   xFA
2C44:  CLRF   xF9
2C46:  MOVLB  5
2C48:  CLRF   x00
2C4A:  MOVLB  4
2C4C:  CLRF   xFF
2C4E:  CLRF   xFE
2C50:  CLRF   xFD
2C52:  MOVLB  5
2C54:  CLRF   x04
2C56:  CLRF   x03
2C58:  CLRF   x02
2C5A:  CLRF   x01
2C5C:  CLRF   x08
2C5E:  CLRF   x07
2C60:  CLRF   x06
2C62:  CLRF   x05
2C64:  CLRF   x0C
2C66:  CLRF   x0B
2C68:  CLRF   x0A
2C6A:  CLRF   x09
2C6C:  CLRF   x10
2C6E:  CLRF   x0F
2C70:  MOVLW  48
2C72:  MOVWF  x0E
2C74:  MOVLW  83
2C76:  MOVWF  x0D
2C78:  CLRF   x14
2C7A:  CLRF   x13
2C7C:  MOVLW  20
2C7E:  MOVWF  x12
2C80:  MOVLW  83
2C82:  MOVWF  x11
2C84:  CLRF   x18
2C86:  CLRF   x17
2C88:  CLRF   x16
2C8A:  CLRF   x15
2C8C:  CLRF   x1C
2C8E:  CLRF   x1B
2C90:  CLRF   x1A
2C92:  CLRF   x19
2C94:  MOVF   FC1,W
2C96:  ANDLW  C0
2C98:  IORLW  0F
2C9A:  MOVWF  FC1
2C9C:  MOVLW  07
2C9E:  MOVWF  FB4
2CA0:  CLRF   16
2CA2:  CLRF   17
2CA4:  MOVLW  6B
2CA6:  MOVLB  4
2CA8:  MOVWF  x1C
2CAA:  MOVLW  50
2CAC:  MOVWF  x1D
2CAE:  MOVLW  61
2CB0:  MOVWF  x1E
2CB2:  CLRF   x1F
2CB4:  CLRF   x20
2CB6:  CLRF   x21
2CB8:  CLRF   x22
2CBA:  CLRF   x23
2CBC:  CLRF   x24
2CBE:  CLRF   x25
2CC0:  CLRF   x26
2CC2:  CLRF   x27
2CC4:  CLRF   x28
2CC6:  CLRF   x29
2CC8:  CLRF   x2A
2CCA:  CLRF   x2B
2CCC:  CLRF   x2C
2CCE:  CLRF   x2D
2CD0:  CLRF   x2E
2CD2:  CLRF   x2F
2CD4:  CLRF   x30
2CD6:  CLRF   x31
2CD8:  CLRF   x32
2CDA:  CLRF   x33
2CDC:  CLRF   x34
2CDE:  CLRF   x35
2CE0:  CLRF   x36
2CE2:  CLRF   x37
2CE4:  CLRF   x38
2CE6:  CLRF   x39
2CE8:  CLRF   x3A
2CEA:  CLRF   x3B
2CEC:  CLRF   x3C
2CEE:  CLRF   x3D
2CF0:  CLRF   x3E
2CF2:  CLRF   x3F
2CF4:  CLRF   x40
2CF6:  CLRF   x41
2CF8:  CLRF   x42
2CFA:  CLRF   x43
2CFC:  CLRF   x44
2CFE:  CLRF   x45
2D00:  CLRF   x46
2D02:  CLRF   x47
2D04:  CLRF   x48
2D06:  CLRF   x49
2D08:  CLRF   x4A
2D0A:  CLRF   x4B
2D0C:  CLRF   x4C
2D0E:  CLRF   x4D
2D10:  CLRF   x4E
2D12:  CLRF   x4F
2D14:  CLRF   x50
2D16:  CLRF   x51
2D18:  CLRF   x52
2D1A:  CLRF   x53
2D1C:  CLRF   x54
2D1E:  CLRF   x55
2D20:  CLRF   x56
2D22:  CLRF   x57
2D24:  CLRF   x58
2D26:  CLRF   x59
2D28:  CLRF   x5A
2D2A:  CLRF   x5B
2D2C:  CLRF   x5C
2D2E:  CLRF   x5D
2D30:  CLRF   x5E
2D32:  CLRF   x5F
2D34:  CLRF   x60
2D36:  CLRF   x61
2D38:  CLRF   x62
2D3A:  CLRF   x63
2D3C:  CLRF   x64
2D3E:  CLRF   x65
2D40:  CLRF   x66
2D42:  CLRF   x67
2D44:  CLRF   x68
2D46:  CLRF   x69
2D48:  CLRF   x6A
2D4A:  CLRF   x6B
2D4C:  CLRF   x6C
2D4E:  CLRF   x6D
2D50:  CLRF   x6E
2D52:  CLRF   x6F
2D54:  CLRF   xA7
2D56:  CLRF   xA8
2D58:  CLRF   xA9
2D5A:  CLRF   xAA
2D5C:  CLRF   xAB
2D5E:  CLRF   xAC
2D60:  CLRF   xAD
2D62:  CLRF   xAE
2D64:  CLRF   xAF
2D66:  CLRF   xB0
2D68:  CLRF   xB1
2D6A:  CLRF   xB2
2D6C:  CLRF   xB3
2D6E:  CLRF   xB4
2D70:  CLRF   xB5
2D72:  CLRF   xB6
2D74:  CLRF   xB7
2D76:  CLRF   xB8
2D78:  CLRF   xB9
2D7A:  CLRF   xBA
2D7C:  CLRF   xBB
2D7E:  CLRF   xBC
2D80:  CLRF   xBD
2D82:  CLRF   xBE
2D84:  CLRF   xE6
2D86:  CLRF   xE7
2D88:  CLRF   xE8
2D8A:  MOVLB  5
2D8C:  CLRF   x3B
2D8E:  CLRF   x3C
....................    output_d(0); 
2D90:  CLRF   F95
2D92:  CLRF   F8C
....................    delay_ms(1000);    
2D94:  MOVLW  04
2D96:  MOVWF  x3D
2D98:  MOVLW  FA
2D9A:  MOVWF  x42
2D9C:  MOVLB  0
2D9E:  CALL   1104
2DA2:  MOVLB  5
2DA4:  DECFSZ x3D,F
2DA6:  BRA    2D98
....................    enable_interrupts(INT_RDA);      //Habilita interrupción por recepción RS23    
2DA8:  BSF    F9D.5
....................    enable_interrupts(global); 
2DAA:  MOVLW  C0
2DAC:  IORWF  FF2,F
....................        
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2DAE:  MOVLW  85
2DB0:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2DB2:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN3); 
2DB4:  MOVF   FC1,W
2DB6:  ANDLW  C0
2DB8:  IORLW  0B
2DBA:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2DBC:  BCF    FC0.0
2DBE:  BSF    FC0.1
2DC0:  BCF    FC0.2
2DC2:  BSF    FC0.7
2DC4:  BSF    FC2.0
....................    sensores(0);   
2DC6:  CLRF   x3D
2DC8:  MOVLB  0
2DCA:  GOTO   1164
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
2DCE:  MOVFF  FF2,53D
2DD2:  BCF    FF2.7
2DD4:  CLRF   FA9
2DD6:  BCF    FA6.6
2DD8:  BCF    FA6.7
2DDA:  BSF    FA6.0
2DDC:  MOVF   FA8,W
2DDE:  MOVLB  5
2DE0:  BTFSC  x3D.7
2DE2:  BSF    FF2.7
2DE4:  MOVLB  4
2DE6:  MOVWF  xAB
2DE8:  MOVFF  FF2,53D
2DEC:  BCF    FF2.7
2DEE:  MOVLW  01
2DF0:  MOVWF  FA9
2DF2:  BCF    FA6.6
2DF4:  BCF    FA6.7
2DF6:  BSF    FA6.0
2DF8:  MOVF   FA8,W
2DFA:  MOVLB  5
2DFC:  BTFSC  x3D.7
2DFE:  BSF    FF2.7
2E00:  MOVLB  4
2E02:  MOVWF  xAC
2E04:  MOVFF  FF2,53D
2E08:  BCF    FF2.7
2E0A:  MOVLW  02
2E0C:  MOVWF  FA9
2E0E:  BCF    FA6.6
2E10:  BCF    FA6.7
2E12:  BSF    FA6.0
2E14:  MOVF   FA8,W
2E16:  MOVLB  5
2E18:  BTFSC  x3D.7
2E1A:  BSF    FF2.7
2E1C:  MOVLB  4
2E1E:  MOVWF  xAD
2E20:  MOVFF  FF2,53D
2E24:  BCF    FF2.7
2E26:  MOVLW  03
2E28:  MOVWF  FA9
2E2A:  BCF    FA6.6
2E2C:  BCF    FA6.7
2E2E:  BSF    FA6.0
2E30:  MOVF   FA8,W
2E32:  MOVLB  5
2E34:  BTFSC  x3D.7
2E36:  BSF    FF2.7
2E38:  MOVLB  4
2E3A:  MOVWF  xAE
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
2E3C:  MOVFF  FF2,53D
2E40:  BCF    FF2.7
2E42:  MOVLW  04
2E44:  MOVWF  FA9
2E46:  BCF    FA6.6
2E48:  BCF    FA6.7
2E4A:  BSF    FA6.0
2E4C:  MOVF   FA8,W
2E4E:  MOVLB  5
2E50:  BTFSC  x3D.7
2E52:  BSF    FF2.7
2E54:  MOVLB  4
2E56:  MOVWF  xB3
2E58:  MOVFF  FF2,53D
2E5C:  BCF    FF2.7
2E5E:  MOVLW  05
2E60:  MOVWF  FA9
2E62:  BCF    FA6.6
2E64:  BCF    FA6.7
2E66:  BSF    FA6.0
2E68:  MOVF   FA8,W
2E6A:  MOVLB  5
2E6C:  BTFSC  x3D.7
2E6E:  BSF    FF2.7
2E70:  MOVLB  4
2E72:  MOVWF  xB4
2E74:  MOVFF  FF2,53D
2E78:  BCF    FF2.7
2E7A:  MOVLW  06
2E7C:  MOVWF  FA9
2E7E:  BCF    FA6.6
2E80:  BCF    FA6.7
2E82:  BSF    FA6.0
2E84:  MOVF   FA8,W
2E86:  MOVLB  5
2E88:  BTFSC  x3D.7
2E8A:  BSF    FF2.7
2E8C:  MOVLB  4
2E8E:  MOVWF  xB5
2E90:  MOVFF  FF2,53D
2E94:  BCF    FF2.7
2E96:  MOVLW  07
2E98:  MOVWF  FA9
2E9A:  BCF    FA6.6
2E9C:  BCF    FA6.7
2E9E:  BSF    FA6.0
2EA0:  MOVF   FA8,W
2EA2:  MOVLB  5
2EA4:  BTFSC  x3D.7
2EA6:  BSF    FF2.7
2EA8:  MOVLB  4
2EAA:  MOVWF  xB6
2EAC:  MOVFF  FF2,53D
2EB0:  BCF    FF2.7
2EB2:  MOVLW  08
2EB4:  MOVWF  FA9
2EB6:  BCF    FA6.6
2EB8:  BCF    FA6.7
2EBA:  BSF    FA6.0
2EBC:  MOVF   FA8,W
2EBE:  MOVLB  5
2EC0:  BTFSC  x3D.7
2EC2:  BSF    FF2.7
2EC4:  MOVLB  4
2EC6:  MOVWF  x8E
....................    Nivel=read_eeprom(9); 
2EC8:  MOVFF  FF2,53D
2ECC:  BCF    FF2.7
2ECE:  MOVLW  09
2ED0:  MOVWF  FA9
2ED2:  BCF    FA6.6
2ED4:  BCF    FA6.7
2ED6:  BSF    FA6.0
2ED8:  MOVF   FA8,W
2EDA:  MOVLB  5
2EDC:  BTFSC  x3D.7
2EDE:  BSF    FF2.7
2EE0:  MOVLB  4
2EE2:  CLRF   x9E
2EE4:  MOVWF  x9D
....................    Password[0]=read_eeprom(10);Password[1]=read_eeprom(11);Password[2]=read_eeprom(12);Password[3]=read_eeprom(13); 
2EE6:  MOVFF  FF2,53D
2EEA:  BCF    FF2.7
2EEC:  MOVLW  0A
2EEE:  MOVWF  FA9
2EF0:  BCF    FA6.6
2EF2:  BCF    FA6.7
2EF4:  BSF    FA6.0
2EF6:  MOVF   FA8,W
2EF8:  MOVLB  5
2EFA:  BTFSC  x3D.7
2EFC:  BSF    FF2.7
2EFE:  MOVLB  4
2F00:  MOVWF  xBB
2F02:  MOVFF  FF2,53D
2F06:  BCF    FF2.7
2F08:  MOVLW  0B
2F0A:  MOVWF  FA9
2F0C:  BCF    FA6.6
2F0E:  BCF    FA6.7
2F10:  BSF    FA6.0
2F12:  MOVF   FA8,W
2F14:  MOVLB  5
2F16:  BTFSC  x3D.7
2F18:  BSF    FF2.7
2F1A:  MOVLB  4
2F1C:  MOVWF  xBC
2F1E:  MOVFF  FF2,53D
2F22:  BCF    FF2.7
2F24:  MOVLW  0C
2F26:  MOVWF  FA9
2F28:  BCF    FA6.6
2F2A:  BCF    FA6.7
2F2C:  BSF    FA6.0
2F2E:  MOVF   FA8,W
2F30:  MOVLB  5
2F32:  BTFSC  x3D.7
2F34:  BSF    FF2.7
2F36:  MOVLB  4
2F38:  MOVWF  xBD
2F3A:  MOVFF  FF2,53D
2F3E:  BCF    FF2.7
2F40:  MOVLW  0D
2F42:  MOVWF  FA9
2F44:  BCF    FA6.6
2F46:  BCF    FA6.7
2F48:  BSF    FA6.0
2F4A:  MOVF   FA8,W
2F4C:  MOVLB  5
2F4E:  BTFSC  x3D.7
2F50:  BSF    FF2.7
2F52:  MOVLB  4
2F54:  MOVWF  xBE
....................     
....................    glcd_init(ON);             //Inicializa la glcd 
2F56:  MOVLW  01
2F58:  MOVLB  5
2F5A:  MOVWF  x3D
2F5C:  MOVLB  0
2F5E:  GOTO   130E
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2F62:  MOVLB  5
2F64:  CLRF   x3E
2F66:  MOVLB  0
2F68:  CALL   11FC
....................    strcpy(Menus.Letra,"JP Inglobal"); 
2F6C:  MOVLW  05
2F6E:  MOVWF  FEA
2F70:  MOVLW  1D
2F72:  MOVWF  FE9
2F74:  MOVFF  FF2,53D
2F78:  BCF    FF2.7
2F7A:  MOVLW  00
2F7C:  CALL   06E6
2F80:  TBLRD*-
2F82:  TBLRD*+
2F84:  MOVF   FF5,W
2F86:  MOVWF  FEE
2F88:  IORLW  00
2F8A:  BNZ   2F82
2F8C:  MOVLB  5
2F8E:  BTFSC  x3D.7
2F90:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,0,0,2);      
2F92:  MOVLW  05
2F94:  MOVWF  x3E
2F96:  MOVLW  1D
2F98:  MOVWF  x3D
2F9A:  CLRF   x3F
2F9C:  CLRF   x40
2F9E:  CLRF   x41
2FA0:  MOVLW  02
2FA2:  MOVWF  x42
2FA4:  MOVLB  0
2FA6:  CALL   182C
....................    strcpy(Menus.Letra," Autoclave Vertical"); 
2FAA:  MOVLW  05
2FAC:  MOVWF  FEA
2FAE:  MOVLW  1D
2FB0:  MOVWF  FE9
2FB2:  MOVFF  FF2,53D
2FB6:  BCF    FF2.7
2FB8:  MOVLW  00
2FBA:  CALL   070C
2FBE:  TBLRD*-
2FC0:  TBLRD*+
2FC2:  MOVF   FF5,W
2FC4:  MOVWF  FEE
2FC6:  IORLW  00
2FC8:  BNZ   2FC0
2FCA:  MOVLB  5
2FCC:  BTFSC  x3D.7
2FCE:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,20,0,1);        
2FD0:  MOVLW  05
2FD2:  MOVWF  x3E
2FD4:  MOVLW  1D
2FD6:  MOVWF  x3D
2FD8:  CLRF   x3F
2FDA:  MOVLW  14
2FDC:  MOVWF  x40
2FDE:  CLRF   x41
2FE0:  MOVLW  01
2FE2:  MOVWF  x42
2FE4:  MOVLB  0
2FE6:  CALL   182C
....................    strcpy(Menus.Letra,"  85 Litros  "); 
2FEA:  MOVLW  05
2FEC:  MOVWF  FEA
2FEE:  MOVLW  1D
2FF0:  MOVWF  FE9
2FF2:  MOVFF  FF2,53D
2FF6:  BCF    FF2.7
2FF8:  MOVLW  00
2FFA:  CALL   073A
2FFE:  TBLRD*-
3000:  TBLRD*+
3002:  MOVF   FF5,W
3004:  MOVWF  FEE
3006:  IORLW  00
3008:  BNZ   3000
300A:  MOVLB  5
300C:  BTFSC  x3D.7
300E:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,35,0,2); 
3010:  MOVLW  05
3012:  MOVWF  x3E
3014:  MOVLW  1D
3016:  MOVWF  x3D
3018:  CLRF   x3F
301A:  MOVLW  23
301C:  MOVWF  x40
301E:  CLRF   x41
3020:  MOVLW  02
3022:  MOVWF  x42
3024:  MOVLB  0
3026:  CALL   182C
....................    delay_ms(1000); 
302A:  MOVLW  04
302C:  MOVLB  5
302E:  MOVWF  x3D
3030:  MOVLW  FA
3032:  MOVWF  x42
3034:  MOVLB  0
3036:  CALL   1104
303A:  MOVLB  5
303C:  DECFSZ x3D,F
303E:  BRA    3030
....................    delay_ms(1000); 
3040:  MOVLW  04
3042:  MOVWF  x3D
3044:  MOVLW  FA
3046:  MOVWF  x42
3048:  MOVLB  0
304A:  CALL   1104
304E:  MOVLB  5
3050:  DECFSZ x3D,F
3052:  BRA    3044
....................     
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
3054:  CLRF   x3E
3056:  MOVLB  0
3058:  CALL   11FC
....................    displayContrasena(Contrasena[0],20,30,1); 
305C:  MOVFF  4B7,53F
3060:  MOVLW  14
3062:  MOVLB  5
3064:  MOVWF  x40
3066:  MOVLW  1E
3068:  MOVWF  x41
306A:  MOVLW  01
306C:  MOVWF  x42
306E:  MOVLB  0
3070:  CALL   1A52
....................    displayContrasena(Contrasena[1],40,30,0); 
3074:  MOVFF  4B8,53F
3078:  MOVLW  28
307A:  MOVLB  5
307C:  MOVWF  x40
307E:  MOVLW  1E
3080:  MOVWF  x41
3082:  CLRF   x42
3084:  MOVLB  0
3086:  CALL   1A52
....................    displayContrasena(Contrasena[2],60,30,0); 
308A:  MOVFF  4B9,53F
308E:  MOVLW  3C
3090:  MOVLB  5
3092:  MOVWF  x40
3094:  MOVLW  1E
3096:  MOVWF  x41
3098:  CLRF   x42
309A:  MOVLB  0
309C:  CALL   1A52
....................    displayContrasena(Contrasena[3],80,30,0); 
30A0:  MOVFF  4BA,53F
30A4:  MOVLW  50
30A6:  MOVLB  5
30A8:  MOVWF  x40
30AA:  MOVLW  1E
30AC:  MOVWF  x41
30AE:  CLRF   x42
30B0:  MOVLB  0
30B2:  CALL   1A52
....................    Parada=1; 
30B6:  MOVLW  01
30B8:  MOVLB  4
30BA:  MOVWF  x71
....................    EnviarCodigo(); 
30BC:  MOVLB  0
30BE:  CALL   1B12
....................    delay_ms(500); 
30C2:  MOVLW  02
30C4:  MOVLB  5
30C6:  MOVWF  x3D
30C8:  MOVLW  FA
30CA:  MOVWF  x42
30CC:  MOVLB  0
30CE:  CALL   1104
30D2:  MOVLB  5
30D4:  DECFSZ x3D,F
30D6:  BRA    30C8
....................    Determina(); 
30D8:  MOVLB  0
30DA:  CALL   1F6E
....................    delay_ms(500); 
30DE:  MOVLW  02
30E0:  MOVLB  5
30E2:  MOVWF  x3D
30E4:  MOVLW  FA
30E6:  MOVWF  x42
30E8:  MOVLB  0
30EA:  CALL   1104
30EE:  MOVLB  5
30F0:  DECFSZ x3D,F
30F2:  BRA    30E4
....................    while(true) 
....................    { 
....................       glcd_update(); 
30F4:  MOVLB  0
30F6:  CALL   1256
....................        
....................       if(UP || DOWN || RIGHT || LEFT) 
30FA:  BSF    F92.5
30FC:  BTFSC  F80.5
30FE:  BRA    3112
3100:  BSF    F96.0
3102:  BTFSC  F84.0
3104:  BRA    3112
3106:  BSF    F96.1
3108:  BTFSC  F84.1
310A:  BRA    3112
310C:  BSF    F96.2
310E:  BTFSS  F84.2
3110:  BRA    311A
....................       { 
....................          tinicio=0; 
3112:  MOVLB  4
3114:  CLRF   xA2
3116:  CLRF   xA1
3118:  MOVLB  0
....................       } 
....................        
....................       while(tinicio>=14400) 
....................       { 
311A:  MOVLB  4
311C:  MOVF   xA2,W
311E:  SUBLW  37
3120:  BC    3174
3122:  XORLW  FF
3124:  BNZ   312C
3126:  MOVF   xA1,W
3128:  SUBLW  3F
312A:  BC    3174
....................          strcpy(Menus.Letra,"Reinicie"); 
312C:  MOVLW  05
312E:  MOVWF  FEA
3130:  MOVLW  1D
3132:  MOVWF  FE9
3134:  MOVFF  FF2,53D
3138:  BCF    FF2.7
313A:  MOVLW  00
313C:  MOVLB  0
313E:  CALL   0762
3142:  TBLRD*-
3144:  TBLRD*+
3146:  MOVF   FF5,W
3148:  MOVWF  FEE
314A:  IORLW  00
314C:  BNZ   3144
314E:  MOVLB  5
3150:  BTFSC  x3D.7
3152:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,34,1,2); 
3154:  MOVLW  05
3156:  MOVWF  x3E
3158:  MOVLW  1D
315A:  MOVWF  x3D
315C:  CLRF   x3F
315E:  MOVLW  22
3160:  MOVWF  x40
3162:  MOVLW  01
3164:  MOVWF  x41
3166:  MOVLW  02
3168:  MOVWF  x42
316A:  MOVLB  0
316C:  CALL   182C
....................       } 
3170:  BRA    311A
3172:  MOVLB  4
....................        
....................       if(Chksum!=20) 
3174:  MOVF   x94,W
3176:  SUBLW  14
3178:  BZ    31BE
....................       { 
....................          strcpy(Menus.Letra,"Reinicie"); 
317A:  MOVLW  05
317C:  MOVWF  FEA
317E:  MOVLW  1D
3180:  MOVWF  FE9
3182:  MOVFF  FF2,53D
3186:  BCF    FF2.7
3188:  MOVLW  00
318A:  MOVLB  0
318C:  CALL   0762
3190:  TBLRD*-
3192:  TBLRD*+
3194:  MOVF   FF5,W
3196:  MOVWF  FEE
3198:  IORLW  00
319A:  BNZ   3192
319C:  MOVLB  5
319E:  BTFSC  x3D.7
31A0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,34,0,2);    
31A2:  MOVLW  05
31A4:  MOVWF  x3E
31A6:  MOVLW  1D
31A8:  MOVWF  x3D
31AA:  CLRF   x3F
31AC:  MOVLW  22
31AE:  MOVWF  x40
31B0:  CLRF   x41
31B2:  MOVLW  02
31B4:  MOVWF  x42
31B6:  MOVLB  0
31B8:  CALL   182C
31BC:  MOVLB  4
....................           
....................       } 
....................        
....................       if(CadenaRecibida==1) 
31BE:  BTFSS  x7D.3
31C0:  BRA    31D0
....................       { 
....................          Determina(); 
31C2:  MOVLB  0
31C4:  CALL   1F6E
....................          EnviarCodigo(); 
31C8:  CALL   1B12
....................          CadenaRecibida=0; 
31CC:  MOVLB  4
31CE:  BCF    x7D.3
....................       } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
31D0:  MOVF   x89,F
31D2:  BTFSS  FD8.2
31D4:  BRA    376A
....................        
....................       strcpy(Menus.Letra,"Clave"); 
31D6:  MOVLW  05
31D8:  MOVWF  FEA
31DA:  MOVLW  1D
31DC:  MOVWF  FE9
31DE:  MOVFF  FF2,53D
31E2:  BCF    FF2.7
31E4:  MOVLW  00
31E6:  MOVLB  0
31E8:  CALL   0786
31EC:  TBLRD*-
31EE:  TBLRD*+
31F0:  MOVF   FF5,W
31F2:  MOVWF  FEE
31F4:  IORLW  00
31F6:  BNZ   31EE
31F8:  MOVLB  5
31FA:  BTFSC  x3D.7
31FC:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
31FE:  MOVLW  05
3200:  MOVWF  x3E
3202:  MOVLW  1D
3204:  MOVWF  x3D
3206:  MOVLW  1E
3208:  MOVWF  x3F
320A:  CLRF   x40
320C:  MOVLW  01
320E:  MOVWF  x41
3210:  MOVLW  02
3212:  MOVWF  x42
3214:  MOVLB  0
3216:  CALL   182C
....................        
....................       if(UP)//Si oprime hacia arriba 
321A:  BSF    F92.5
321C:  BTFSS  F80.5
321E:  BRA    32F6
....................       { 
....................          if(Flanco == 0) 
3220:  MOVLB  4
3222:  BTFSC  x7C.0
3224:  BRA    32F4
....................          { 
....................             Flanco = 1;delay_ms(30); 
3226:  BSF    x7C.0
3228:  MOVLW  1E
322A:  MOVLB  5
322C:  MOVWF  x42
322E:  MOVLB  0
3230:  CALL   1104
....................             for(i=1;i<=4;i++) 
3234:  MOVLW  01
3236:  MOVLB  4
3238:  MOVWF  x8D
323A:  MOVF   x8D,W
323C:  SUBLW  04
323E:  BNC   32F4
....................             { 
....................                if(unidad==i) 
3240:  MOVF   x8D,W
3242:  SUBWF  x8A,W
3244:  BNZ   32BC
....................                { 
....................                   Contrasena[i-1]++; 
3246:  MOVLW  01
3248:  SUBWF  x8D,W
324A:  CLRF   03
324C:  ADDLW  B7
324E:  MOVWF  FE9
3250:  MOVLW  04
3252:  ADDWFC 03,W
3254:  MOVWF  FEA
3256:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
3258:  MOVLW  01
325A:  SUBWF  x8D,W
325C:  CLRF   03
325E:  ADDLW  B7
3260:  MOVWF  FE9
3262:  MOVLW  04
3264:  ADDWFC 03,W
3266:  MOVWF  FEA
3268:  BTFSC  FEF.7
326A:  BRA    3284
326C:  MOVF   FEF,W
326E:  SUBLW  09
3270:  BC    3284
....................                   { 
....................                      Contrasena[i-1]=0; 
3272:  MOVLW  01
3274:  SUBWF  x8D,W
3276:  CLRF   03
3278:  ADDLW  B7
327A:  MOVWF  FE9
327C:  MOVLW  04
327E:  ADDWFC 03,W
3280:  MOVWF  FEA
3282:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
3284:  MOVLW  01
3286:  SUBWF  x8D,W
3288:  CLRF   03
328A:  ADDLW  B7
328C:  MOVWF  FE9
328E:  MOVLW  04
3290:  ADDWFC 03,W
3292:  MOVWF  FEA
3294:  MOVFF  FEF,53D
3298:  MOVF   x8D,W
329A:  MULLW  14
329C:  MOVFF  FF3,53E
32A0:  MOVLB  5
32A2:  MOVFF  53D,53F
32A6:  MOVFF  53E,540
32AA:  MOVLW  1E
32AC:  MOVWF  x41
32AE:  MOVLW  01
32B0:  MOVWF  x42
32B2:  MOVLB  0
32B4:  CALL   1A52
....................                } 
....................                else 
32B8:  BRA    32EE
32BA:  MOVLB  4
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
32BC:  MOVLW  01
32BE:  SUBWF  x8D,W
32C0:  CLRF   03
32C2:  ADDLW  B7
32C4:  MOVWF  FE9
32C6:  MOVLW  04
32C8:  ADDWFC 03,W
32CA:  MOVWF  FEA
32CC:  MOVFF  FEF,53D
32D0:  MOVF   x8D,W
32D2:  MULLW  14
32D4:  MOVFF  FF3,53E
32D8:  MOVLB  5
32DA:  MOVFF  53D,53F
32DE:  MOVFF  53E,540
32E2:  MOVLW  1E
32E4:  MOVWF  x41
32E6:  CLRF   x42
32E8:  MOVLB  0
32EA:  CALL   1A52
....................                } 
....................             } 
32EE:  MOVLB  4
32F0:  INCF   x8D,F
32F2:  BRA    323A
....................          } 
....................       } 
....................          else 
32F4:  BRA    32FA
....................             {Flanco = 0;} 
32F6:  MOVLB  4
32F8:  BCF    x7C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
32FA:  BSF    F96.0
32FC:  BTFSS  F84.0
32FE:  BRA    33D2
....................       { 
....................          if(Flanco2 == 0) 
3300:  BTFSC  x7C.2
3302:  BRA    33D0
....................             {Flanco2 = 1;delay_ms(30); 
3304:  BSF    x7C.2
3306:  MOVLW  1E
3308:  MOVLB  5
330A:  MOVWF  x42
330C:  MOVLB  0
330E:  CALL   1104
....................                for(i=1;i<=4;i++) 
3312:  MOVLW  01
3314:  MOVLB  4
3316:  MOVWF  x8D
3318:  MOVF   x8D,W
331A:  SUBLW  04
331C:  BNC   33D0
....................                { 
....................                   if(unidad==i) 
331E:  MOVF   x8D,W
3320:  SUBWF  x8A,W
3322:  BNZ   3398
....................                   {Contrasena[i-1]--;  
3324:  MOVLW  01
3326:  SUBWF  x8D,W
3328:  CLRF   03
332A:  ADDLW  B7
332C:  MOVWF  FE9
332E:  MOVLW  04
3330:  ADDWFC 03,W
3332:  MOVWF  FEA
3334:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
3336:  MOVLW  01
3338:  SUBWF  x8D,W
333A:  CLRF   03
333C:  ADDLW  B7
333E:  MOVWF  FE9
3340:  MOVLW  04
3342:  ADDWFC 03,W
3344:  MOVWF  FEA
3346:  BTFSC  FEF.7
3348:  BRA    334C
334A:  BRA    3360
....................                         {Contrasena[i-1]=9;} 
334C:  MOVLW  01
334E:  SUBWF  x8D,W
3350:  CLRF   03
3352:  ADDLW  B7
3354:  MOVWF  FE9
3356:  MOVLW  04
3358:  ADDWFC 03,W
335A:  MOVWF  FEA
335C:  MOVLW  09
335E:  MOVWF  FEF
....................                    displayContrasena(Contrasena[i-1],i*20,30,1);} 
3360:  MOVLW  01
3362:  SUBWF  x8D,W
3364:  CLRF   03
3366:  ADDLW  B7
3368:  MOVWF  FE9
336A:  MOVLW  04
336C:  ADDWFC 03,W
336E:  MOVWF  FEA
3370:  MOVFF  FEF,53D
3374:  MOVF   x8D,W
3376:  MULLW  14
3378:  MOVFF  FF3,53E
337C:  MOVLB  5
337E:  MOVFF  53D,53F
3382:  MOVFF  53E,540
3386:  MOVLW  1E
3388:  MOVWF  x41
338A:  MOVLW  01
338C:  MOVWF  x42
338E:  MOVLB  0
3390:  CALL   1A52
....................                   else 
3394:  BRA    33CA
3396:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
3398:  MOVLW  01
339A:  SUBWF  x8D,W
339C:  CLRF   03
339E:  ADDLW  B7
33A0:  MOVWF  FE9
33A2:  MOVLW  04
33A4:  ADDWFC 03,W
33A6:  MOVWF  FEA
33A8:  MOVFF  FEF,53D
33AC:  MOVF   x8D,W
33AE:  MULLW  14
33B0:  MOVFF  FF3,53E
33B4:  MOVLB  5
33B6:  MOVFF  53D,53F
33BA:  MOVFF  53E,540
33BE:  MOVLW  1E
33C0:  MOVWF  x41
33C2:  CLRF   x42
33C4:  MOVLB  0
33C6:  CALL   1A52
....................                }       
33CA:  MOVLB  4
33CC:  INCF   x8D,F
33CE:  BRA    3318
....................             }      
....................       } 
....................          else 
33D0:  BRA    33D4
....................             {Flanco2 = 0;}   
33D2:  BCF    x7C.2
....................              
....................       if(RIGHT)//Si oprime RIGHT 
33D4:  BSF    F96.1
33D6:  BTFSS  F84.1
33D8:  BRA    3472
....................       { 
....................          if(Flanco1 == 0) 
33DA:  BTFSC  x7C.1
33DC:  BRA    3470
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
33DE:  BSF    x7C.1
33E0:  MOVLW  1E
33E2:  MOVLB  5
33E4:  MOVWF  x42
33E6:  MOVLB  0
33E8:  CALL   1104
33EC:  MOVLB  4
33EE:  INCF   x8A,F
....................                for(i=1;i<=4;i++) 
33F0:  MOVLW  01
33F2:  MOVWF  x8D
33F4:  MOVF   x8D,W
33F6:  SUBLW  04
33F8:  BNC   3470
....................                { 
....................                   if(unidad==i) 
33FA:  MOVF   x8D,W
33FC:  SUBWF  x8A,W
33FE:  BNZ   3438
....................                   {displayContrasena(Contrasena[i-1],i*20,30,1);} 
3400:  MOVLW  01
3402:  SUBWF  x8D,W
3404:  CLRF   03
3406:  ADDLW  B7
3408:  MOVWF  FE9
340A:  MOVLW  04
340C:  ADDWFC 03,W
340E:  MOVWF  FEA
3410:  MOVFF  FEF,53D
3414:  MOVF   x8D,W
3416:  MULLW  14
3418:  MOVFF  FF3,53E
341C:  MOVLB  5
341E:  MOVFF  53D,53F
3422:  MOVFF  53E,540
3426:  MOVLW  1E
3428:  MOVWF  x41
342A:  MOVLW  01
342C:  MOVWF  x42
342E:  MOVLB  0
3430:  CALL   1A52
....................                   else 
3434:  BRA    346A
3436:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
3438:  MOVLW  01
343A:  SUBWF  x8D,W
343C:  CLRF   03
343E:  ADDLW  B7
3440:  MOVWF  FE9
3442:  MOVLW  04
3444:  ADDWFC 03,W
3446:  MOVWF  FEA
3448:  MOVFF  FEF,53D
344C:  MOVF   x8D,W
344E:  MULLW  14
3450:  MOVFF  FF3,53E
3454:  MOVLB  5
3456:  MOVFF  53D,53F
345A:  MOVFF  53E,540
345E:  MOVLW  1E
3460:  MOVWF  x41
3462:  CLRF   x42
3464:  MOVLB  0
3466:  CALL   1A52
....................                } 
346A:  MOVLB  4
346C:  INCF   x8D,F
346E:  BRA    33F4
....................             } 
....................       } 
....................          else 
3470:  BRA    3474
....................             {Flanco1 = 0;}   
3472:  BCF    x7C.1
....................      
....................       if(unidad>4) 
3474:  MOVF   x8A,W
3476:  SUBLW  04
3478:  BTFSC  FD8.0
347A:  BRA    376A
....................       {glcd_fillScreen(OFF);unidad=4; 
347C:  MOVLB  5
347E:  CLRF   x3E
3480:  MOVLB  0
3482:  CALL   11FC
3486:  MOVLW  04
3488:  MOVLB  4
348A:  MOVWF  x8A
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
348C:  MOVF   xB7,W
348E:  SUBLW  03
3490:  BNZ   3578
3492:  MOVF   xB8,W
3494:  SUBLW  08
3496:  BNZ   3578
3498:  MOVF   xB9,W
349A:  SUBLW  09
349C:  BNZ   3578
349E:  MOVF   xBA,W
34A0:  SUBLW  02
34A2:  BNZ   3578
....................             {write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
34A4:  MOVLW  0A
34A6:  MOVWF  FA9
34A8:  CLRF   FA8
34AA:  BCF    FA6.6
34AC:  BCF    FA6.7
34AE:  BSF    FA6.2
34B0:  MOVF   FF2,W
34B2:  MOVWF  00
34B4:  BCF    FF2.7
34B6:  MOVLB  F
34B8:  MOVLW  55
34BA:  MOVWF  FA7
34BC:  MOVLW  AA
34BE:  MOVWF  FA7
34C0:  BSF    FA6.1
34C2:  BTFSC  FA6.1
34C4:  BRA    34C2
34C6:  BCF    FA6.2
34C8:  MOVF   00,W
34CA:  IORWF  FF2,F
34CC:  MOVLW  14
34CE:  MOVLB  5
34D0:  MOVWF  x42
34D2:  MOVLB  0
34D4:  CALL   1104
34D8:  MOVLW  0B
34DA:  MOVWF  FA9
34DC:  CLRF   FA8
34DE:  BCF    FA6.6
34E0:  BCF    FA6.7
34E2:  BSF    FA6.2
34E4:  MOVF   FF2,W
34E6:  MOVWF  00
34E8:  BCF    FF2.7
34EA:  MOVLB  F
34EC:  MOVLW  55
34EE:  MOVWF  FA7
34F0:  MOVLW  AA
34F2:  MOVWF  FA7
34F4:  BSF    FA6.1
34F6:  BTFSC  FA6.1
34F8:  BRA    34F6
34FA:  BCF    FA6.2
34FC:  MOVF   00,W
34FE:  IORWF  FF2,F
3500:  MOVLW  14
3502:  MOVLB  5
3504:  MOVWF  x42
3506:  MOVLB  0
3508:  CALL   1104
....................              write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
350C:  MOVLW  0C
350E:  MOVWF  FA9
3510:  CLRF   FA8
3512:  BCF    FA6.6
3514:  BCF    FA6.7
3516:  BSF    FA6.2
3518:  MOVF   FF2,W
351A:  MOVWF  00
351C:  BCF    FF2.7
351E:  MOVLB  F
3520:  MOVLW  55
3522:  MOVWF  FA7
3524:  MOVLW  AA
3526:  MOVWF  FA7
3528:  BSF    FA6.1
352A:  BTFSC  FA6.1
352C:  BRA    352A
352E:  BCF    FA6.2
3530:  MOVF   00,W
3532:  IORWF  FF2,F
3534:  MOVLW  14
3536:  MOVLB  5
3538:  MOVWF  x42
353A:  MOVLB  0
353C:  CALL   1104
3540:  MOVLW  0D
3542:  MOVWF  FA9
3544:  CLRF   FA8
3546:  BCF    FA6.6
3548:  BCF    FA6.7
354A:  BSF    FA6.2
354C:  MOVF   FF2,W
354E:  MOVWF  00
3550:  BCF    FF2.7
3552:  MOVLB  F
3554:  MOVLW  55
3556:  MOVWF  FA7
3558:  MOVLW  AA
355A:  MOVWF  FA7
355C:  BSF    FA6.1
355E:  BTFSC  FA6.1
3560:  BRA    355E
3562:  BCF    FA6.2
3564:  MOVF   00,W
3566:  IORWF  FF2,F
3568:  MOVLW  14
356A:  MOVLB  5
356C:  MOVWF  x42
356E:  MOVLB  0
3570:  CALL   1104
....................              reset_cpu();}         
3574:  RESET
3576:  MOVLB  4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
3578:  MOVF   xBB,W
357A:  SUBWF  xB7,W
357C:  BNZ   364E
357E:  MOVF   xBC,W
3580:  SUBWF  xB8,W
3582:  BNZ   364E
3584:  MOVF   xBD,W
3586:  SUBWF  xB9,W
3588:  BNZ   364E
358A:  MOVF   xBE,W
358C:  SUBWF  xBA,W
358E:  BNZ   364E
....................          { 
....................             glcd_fillScreen(OFF); 
3590:  MOVLB  5
3592:  CLRF   x3E
3594:  MOVLB  0
3596:  CALL   11FC
....................             strcpy(Menus.Letra,"Clave"); 
359A:  MOVLW  05
359C:  MOVWF  FEA
359E:  MOVLW  1D
35A0:  MOVWF  FE9
35A2:  MOVFF  FF2,53D
35A6:  BCF    FF2.7
35A8:  MOVLW  00
35AA:  CALL   0786
35AE:  TBLRD*-
35B0:  TBLRD*+
35B2:  MOVF   FF5,W
35B4:  MOVWF  FEE
35B6:  IORLW  00
35B8:  BNZ   35B0
35BA:  MOVLB  5
35BC:  BTFSC  x3D.7
35BE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
35C0:  MOVLW  05
35C2:  MOVWF  x3E
35C4:  MOVLW  1D
35C6:  MOVWF  x3D
35C8:  MOVLW  1E
35CA:  MOVWF  x3F
35CC:  CLRF   x40
35CE:  CLRF   x41
35D0:  MOVLW  02
35D2:  MOVWF  x42
35D4:  MOVLB  0
35D6:  CALL   182C
....................             strcpy(Menus.Letra,"Correcta"); 
35DA:  MOVLW  05
35DC:  MOVWF  FEA
35DE:  MOVLW  1D
35E0:  MOVWF  FE9
35E2:  MOVFF  FF2,53D
35E6:  BCF    FF2.7
35E8:  MOVLW  00
35EA:  CALL   07A6
35EE:  TBLRD*-
35F0:  TBLRD*+
35F2:  MOVF   FF5,W
35F4:  MOVWF  FEE
35F6:  IORLW  00
35F8:  BNZ   35F0
35FA:  MOVLB  5
35FC:  BTFSC  x3D.7
35FE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
3600:  MOVLW  05
3602:  MOVWF  x3E
3604:  MOVLW  1D
3606:  MOVWF  x3D
3608:  MOVLW  0F
360A:  MOVWF  x3F
360C:  MOVLW  1E
360E:  MOVWF  x40
3610:  CLRF   x41
3612:  MOVLW  02
3614:  MOVWF  x42
3616:  MOVLB  0
3618:  CALL   182C
....................             Menu=1;glcd_update();delay_ms(1000); 
361C:  MOVLW  01
361E:  MOVLB  4
3620:  MOVWF  x89
3622:  MOVLB  0
3624:  CALL   1256
3628:  MOVLW  04
362A:  MOVLB  5
362C:  MOVWF  x3D
362E:  MOVLW  FA
3630:  MOVWF  x42
3632:  MOVLB  0
3634:  CALL   1104
3638:  MOVLB  5
363A:  DECFSZ x3D,F
363C:  BRA    362E
....................             glcd_fillScreen(OFF);unidad=1; 
363E:  CLRF   x3E
3640:  MOVLB  0
3642:  CALL   11FC
3646:  MOVLW  01
3648:  MOVLB  4
364A:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
364C:  BRA    376A
....................          { 
....................             glcd_fillScreen(OFF); 
364E:  MOVLB  5
3650:  CLRF   x3E
3652:  MOVLB  0
3654:  CALL   11FC
....................             strcpy(Menus.Letra,"Clave"); 
3658:  MOVLW  05
365A:  MOVWF  FEA
365C:  MOVLW  1D
365E:  MOVWF  FE9
3660:  MOVFF  FF2,53D
3664:  BCF    FF2.7
3666:  MOVLW  00
3668:  CALL   0786
366C:  TBLRD*-
366E:  TBLRD*+
3670:  MOVF   FF5,W
3672:  MOVWF  FEE
3674:  IORLW  00
3676:  BNZ   366E
3678:  MOVLB  5
367A:  BTFSC  x3D.7
367C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
367E:  MOVLW  05
3680:  MOVWF  x3E
3682:  MOVLW  1D
3684:  MOVWF  x3D
3686:  MOVLW  1E
3688:  MOVWF  x3F
368A:  CLRF   x40
368C:  CLRF   x41
368E:  MOVLW  02
3690:  MOVWF  x42
3692:  MOVLB  0
3694:  CALL   182C
....................             strcpy(Menus.Letra,"Incorrecta"); 
3698:  MOVLW  05
369A:  MOVWF  FEA
369C:  MOVLW  1D
369E:  MOVWF  FE9
36A0:  MOVFF  FF2,53D
36A4:  BCF    FF2.7
36A6:  MOVLW  00
36A8:  CALL   07CA
36AC:  TBLRD*-
36AE:  TBLRD*+
36B0:  MOVF   FF5,W
36B2:  MOVWF  FEE
36B4:  IORLW  00
36B6:  BNZ   36AE
36B8:  MOVLB  5
36BA:  BTFSC  x3D.7
36BC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
36BE:  MOVLW  05
36C0:  MOVWF  x3E
36C2:  MOVLW  1D
36C4:  MOVWF  x3D
36C6:  CLRF   x3F
36C8:  MOVLW  1E
36CA:  MOVWF  x40
36CC:  CLRF   x41
36CE:  MOVLW  02
36D0:  MOVWF  x42
36D2:  MOVLB  0
36D4:  CALL   182C
....................             Menu=0;glcd_update();delay_ms(1000); 
36D8:  MOVLB  4
36DA:  CLRF   x89
36DC:  MOVLB  0
36DE:  CALL   1256
36E2:  MOVLW  04
36E4:  MOVLB  5
36E6:  MOVWF  x3D
36E8:  MOVLW  FA
36EA:  MOVWF  x42
36EC:  MOVLB  0
36EE:  CALL   1104
36F2:  MOVLB  5
36F4:  DECFSZ x3D,F
36F6:  BRA    36E8
....................             glcd_fillScreen(OFF);unidad=1; 
36F8:  CLRF   x3E
36FA:  MOVLB  0
36FC:  CALL   11FC
3700:  MOVLW  01
3702:  MOVLB  4
3704:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
3706:  CLRF   xB7
3708:  CLRF   xB8
370A:  CLRF   xB9
370C:  CLRF   xBA
....................             displayContrasena(Contrasena[0],20,30,1); 
370E:  MOVFF  4B7,53F
3712:  MOVLW  14
3714:  MOVLB  5
3716:  MOVWF  x40
3718:  MOVLW  1E
371A:  MOVWF  x41
371C:  MOVLW  01
371E:  MOVWF  x42
3720:  MOVLB  0
3722:  CALL   1A52
....................             displayContrasena(Contrasena[1],40,30,0); 
3726:  MOVFF  4B8,53F
372A:  MOVLW  28
372C:  MOVLB  5
372E:  MOVWF  x40
3730:  MOVLW  1E
3732:  MOVWF  x41
3734:  CLRF   x42
3736:  MOVLB  0
3738:  CALL   1A52
....................             displayContrasena(Contrasena[2],60,30,0); 
373C:  MOVFF  4B9,53F
3740:  MOVLW  3C
3742:  MOVLB  5
3744:  MOVWF  x40
3746:  MOVLW  1E
3748:  MOVWF  x41
374A:  CLRF   x42
374C:  MOVLB  0
374E:  CALL   1A52
....................             displayContrasena(Contrasena[3],80,30,0); 
3752:  MOVFF  4BA,53F
3756:  MOVLW  50
3758:  MOVLB  5
375A:  MOVWF  x40
375C:  MOVLW  1E
375E:  MOVWF  x41
3760:  CLRF   x42
3762:  MOVLB  0
3764:  CALL   1A52
3768:  MOVLB  4
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1){ //Menu Principal.       
376A:  DECFSZ x89,W
376C:  BRA    3BA2
....................        
....................       if(visual==1) 
376E:  BTFSS  x7C.4
3770:  BRA    3B28
....................       { 
....................          if(Opcion>6) 
3772:  MOVF   x90,W
3774:  SUBLW  06
3776:  BC    377C
....................          {Opcion=1;} 
3778:  MOVLW  01
377A:  MOVWF  x90
....................          if(Opcion<1) 
377C:  MOVF   x90,F
377E:  BNZ   3784
....................          {Opcion=6;} 
3780:  MOVLW  06
3782:  MOVWF  x90
....................           
....................          strcpy(Menus.Letra,"Menu Principal"); 
3784:  MOVLW  05
3786:  MOVWF  FEA
3788:  MOVLW  1D
378A:  MOVWF  FE9
378C:  MOVFF  FF2,53D
3790:  BCF    FF2.7
3792:  MOVLW  00
3794:  MOVLB  0
3796:  CALL   07F0
379A:  TBLRD*-
379C:  TBLRD*+
379E:  MOVF   FF5,W
37A0:  MOVWF  FEE
37A2:  IORLW  00
37A4:  BNZ   379C
37A6:  MOVLB  5
37A8:  BTFSC  x3D.7
37AA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,1); 
37AC:  MOVLW  05
37AE:  MOVWF  x3E
37B0:  MOVLW  1D
37B2:  MOVWF  x3D
37B4:  MOVLW  1E
37B6:  MOVWF  x3F
37B8:  CLRF   x40
37BA:  MOVLW  01
37BC:  MOVWF  x41
37BE:  MOVWF  x42
37C0:  MOVLB  0
37C2:  CALL   182C
....................        
....................          if(Opcion==1)    
37C6:  MOVLB  4
37C8:  DECFSZ x90,W
37CA:  BRA    3812
....................             {strcpy(Menus.Letra,"Caucho"); 
37CC:  MOVLW  05
37CE:  MOVWF  FEA
37D0:  MOVLW  1D
37D2:  MOVWF  FE9
37D4:  MOVFF  FF2,53D
37D8:  BCF    FF2.7
37DA:  MOVLW  00
37DC:  MOVLB  0
37DE:  CALL   081A
37E2:  TBLRD*-
37E4:  TBLRD*+
37E6:  MOVF   FF5,W
37E8:  MOVWF  FEE
37EA:  IORLW  00
37EC:  BNZ   37E4
37EE:  MOVLB  5
37F0:  BTFSC  x3D.7
37F2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,1,1);} 
37F4:  MOVLW  05
37F6:  MOVWF  x3E
37F8:  MOVLW  1D
37FA:  MOVWF  x3D
37FC:  CLRF   x3F
37FE:  MOVLW  0A
3800:  MOVWF  x40
3802:  MOVLW  01
3804:  MOVWF  x41
3806:  MOVWF  x42
3808:  MOVLB  0
380A:  CALL   182C
....................          else 
380E:  BRA    3854
3810:  MOVLB  4
....................             {strcpy(Menus.Letra,"Caucho"); 
3812:  MOVLW  05
3814:  MOVWF  FEA
3816:  MOVLW  1D
3818:  MOVWF  FE9
381A:  MOVFF  FF2,53D
381E:  BCF    FF2.7
3820:  MOVLW  00
3822:  MOVLB  0
3824:  CALL   081A
3828:  TBLRD*-
382A:  TBLRD*+
382C:  MOVF   FF5,W
382E:  MOVWF  FEE
3830:  IORLW  00
3832:  BNZ   382A
3834:  MOVLB  5
3836:  BTFSC  x3D.7
3838:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,0,1);} 
383A:  MOVLW  05
383C:  MOVWF  x3E
383E:  MOVLW  1D
3840:  MOVWF  x3D
3842:  CLRF   x3F
3844:  MOVLW  0A
3846:  MOVWF  x40
3848:  CLRF   x41
384A:  MOVLW  01
384C:  MOVWF  x42
384E:  MOVLB  0
3850:  CALL   182C
....................           
....................          if(Opcion==2)    
3854:  MOVLB  4
3856:  MOVF   x90,W
3858:  SUBLW  02
385A:  BNZ   38A2
....................             {strcpy(Menus.Letra,"Liquidos"); 
385C:  MOVLW  05
385E:  MOVWF  FEA
3860:  MOVLW  1D
3862:  MOVWF  FE9
3864:  MOVFF  FF2,53D
3868:  BCF    FF2.7
386A:  MOVLW  00
386C:  MOVLB  0
386E:  CALL   083C
3872:  TBLRD*-
3874:  TBLRD*+
3876:  MOVF   FF5,W
3878:  MOVWF  FEE
387A:  IORLW  00
387C:  BNZ   3874
387E:  MOVLB  5
3880:  BTFSC  x3D.7
3882:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,1,1);} 
3884:  MOVLW  05
3886:  MOVWF  x3E
3888:  MOVLW  1D
388A:  MOVWF  x3D
388C:  CLRF   x3F
388E:  MOVLW  13
3890:  MOVWF  x40
3892:  MOVLW  01
3894:  MOVWF  x41
3896:  MOVWF  x42
3898:  MOVLB  0
389A:  CALL   182C
....................          else 
389E:  BRA    38E4
38A0:  MOVLB  4
....................             {strcpy(Menus.Letra,"Liquidos"); 
38A2:  MOVLW  05
38A4:  MOVWF  FEA
38A6:  MOVLW  1D
38A8:  MOVWF  FE9
38AA:  MOVFF  FF2,53D
38AE:  BCF    FF2.7
38B0:  MOVLW  00
38B2:  MOVLB  0
38B4:  CALL   083C
38B8:  TBLRD*-
38BA:  TBLRD*+
38BC:  MOVF   FF5,W
38BE:  MOVWF  FEE
38C0:  IORLW  00
38C2:  BNZ   38BA
38C4:  MOVLB  5
38C6:  BTFSC  x3D.7
38C8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,0,1);}    
38CA:  MOVLW  05
38CC:  MOVWF  x3E
38CE:  MOVLW  1D
38D0:  MOVWF  x3D
38D2:  CLRF   x3F
38D4:  MOVLW  13
38D6:  MOVWF  x40
38D8:  CLRF   x41
38DA:  MOVLW  01
38DC:  MOVWF  x42
38DE:  MOVLB  0
38E0:  CALL   182C
....................              
....................           if(Opcion==3)    
38E4:  MOVLB  4
38E6:  MOVF   x90,W
38E8:  SUBLW  03
38EA:  BNZ   3932
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
38EC:  MOVLW  05
38EE:  MOVWF  FEA
38F0:  MOVLW  1D
38F2:  MOVWF  FE9
38F4:  MOVFF  FF2,53D
38F8:  BCF    FF2.7
38FA:  MOVLW  00
38FC:  MOVLB  0
38FE:  CALL   0860
3902:  TBLRD*-
3904:  TBLRD*+
3906:  MOVF   FF5,W
3908:  MOVWF  FEE
390A:  IORLW  00
390C:  BNZ   3904
390E:  MOVLB  5
3910:  BTFSC  x3D.7
3912:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,1,1);} 
3914:  MOVLW  05
3916:  MOVWF  x3E
3918:  MOVLW  1D
391A:  MOVWF  x3D
391C:  CLRF   x3F
391E:  MOVLW  1C
3920:  MOVWF  x40
3922:  MOVLW  01
3924:  MOVWF  x41
3926:  MOVWF  x42
3928:  MOVLB  0
392A:  CALL   182C
....................          else 
392E:  BRA    3974
3930:  MOVLB  4
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
3932:  MOVLW  05
3934:  MOVWF  FEA
3936:  MOVLW  1D
3938:  MOVWF  FE9
393A:  MOVFF  FF2,53D
393E:  BCF    FF2.7
3940:  MOVLW  00
3942:  MOVLB  0
3944:  CALL   0860
3948:  TBLRD*-
394A:  TBLRD*+
394C:  MOVF   FF5,W
394E:  MOVWF  FEE
3950:  IORLW  00
3952:  BNZ   394A
3954:  MOVLB  5
3956:  BTFSC  x3D.7
3958:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,0,1);} 
395A:  MOVLW  05
395C:  MOVWF  x3E
395E:  MOVLW  1D
3960:  MOVWF  x3D
3962:  CLRF   x3F
3964:  MOVLW  1C
3966:  MOVWF  x40
3968:  CLRF   x41
396A:  MOVLW  01
396C:  MOVWF  x42
396E:  MOVLB  0
3970:  CALL   182C
....................              
....................          if(Opcion==4)    
3974:  MOVLB  4
3976:  MOVF   x90,W
3978:  SUBLW  04
397A:  BNZ   39C2
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
397C:  MOVLW  05
397E:  MOVWF  FEA
3980:  MOVLW  1D
3982:  MOVWF  FE9
3984:  MOVFF  FF2,53D
3988:  BCF    FF2.7
398A:  MOVLW  00
398C:  MOVLB  0
398E:  CALL   088E
3992:  TBLRD*-
3994:  TBLRD*+
3996:  MOVF   FF5,W
3998:  MOVWF  FEE
399A:  IORLW  00
399C:  BNZ   3994
399E:  MOVLB  5
39A0:  BTFSC  x3D.7
39A2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,1,1);} 
39A4:  MOVLW  05
39A6:  MOVWF  x3E
39A8:  MOVLW  1D
39AA:  MOVWF  x3D
39AC:  CLRF   x3F
39AE:  MOVLW  25
39B0:  MOVWF  x40
39B2:  MOVLW  01
39B4:  MOVWF  x41
39B6:  MOVWF  x42
39B8:  MOVLB  0
39BA:  CALL   182C
....................          else 
39BE:  BRA    3A04
39C0:  MOVLB  4
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
39C2:  MOVLW  05
39C4:  MOVWF  FEA
39C6:  MOVLW  1D
39C8:  MOVWF  FE9
39CA:  MOVFF  FF2,53D
39CE:  BCF    FF2.7
39D0:  MOVLW  00
39D2:  MOVLB  0
39D4:  CALL   088E
39D8:  TBLRD*-
39DA:  TBLRD*+
39DC:  MOVF   FF5,W
39DE:  MOVWF  FEE
39E0:  IORLW  00
39E2:  BNZ   39DA
39E4:  MOVLB  5
39E6:  BTFSC  x3D.7
39E8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,0,1);}    
39EA:  MOVLW  05
39EC:  MOVWF  x3E
39EE:  MOVLW  1D
39F0:  MOVWF  x3D
39F2:  CLRF   x3F
39F4:  MOVLW  25
39F6:  MOVWF  x40
39F8:  CLRF   x41
39FA:  MOVLW  01
39FC:  MOVWF  x42
39FE:  MOVLB  0
3A00:  CALL   182C
....................              
....................          if(Opcion==5)    
3A04:  MOVLB  4
3A06:  MOVF   x90,W
3A08:  SUBLW  05
3A0A:  BNZ   3A52
....................             {strcpy(Menus.Letra,"Personalizado"); 
3A0C:  MOVLW  05
3A0E:  MOVWF  FEA
3A10:  MOVLW  1D
3A12:  MOVWF  FE9
3A14:  MOVFF  FF2,53D
3A18:  BCF    FF2.7
3A1A:  MOVLW  00
3A1C:  MOVLB  0
3A1E:  CALL   08BE
3A22:  TBLRD*-
3A24:  TBLRD*+
3A26:  MOVF   FF5,W
3A28:  MOVWF  FEE
3A2A:  IORLW  00
3A2C:  BNZ   3A24
3A2E:  MOVLB  5
3A30:  BTFSC  x3D.7
3A32:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,1,1);} 
3A34:  MOVLW  05
3A36:  MOVWF  x3E
3A38:  MOVLW  1D
3A3A:  MOVWF  x3D
3A3C:  CLRF   x3F
3A3E:  MOVLW  2E
3A40:  MOVWF  x40
3A42:  MOVLW  01
3A44:  MOVWF  x41
3A46:  MOVWF  x42
3A48:  MOVLB  0
3A4A:  CALL   182C
....................          else 
3A4E:  BRA    3A94
3A50:  MOVLB  4
....................             {strcpy(Menus.Letra,"Personalizado"); 
3A52:  MOVLW  05
3A54:  MOVWF  FEA
3A56:  MOVLW  1D
3A58:  MOVWF  FE9
3A5A:  MOVFF  FF2,53D
3A5E:  BCF    FF2.7
3A60:  MOVLW  00
3A62:  MOVLB  0
3A64:  CALL   08BE
3A68:  TBLRD*-
3A6A:  TBLRD*+
3A6C:  MOVF   FF5,W
3A6E:  MOVWF  FEE
3A70:  IORLW  00
3A72:  BNZ   3A6A
3A74:  MOVLB  5
3A76:  BTFSC  x3D.7
3A78:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,0,1);}   
3A7A:  MOVLW  05
3A7C:  MOVWF  x3E
3A7E:  MOVLW  1D
3A80:  MOVWF  x3D
3A82:  CLRF   x3F
3A84:  MOVLW  2E
3A86:  MOVWF  x40
3A88:  CLRF   x41
3A8A:  MOVLW  01
3A8C:  MOVWF  x42
3A8E:  MOVLB  0
3A90:  CALL   182C
....................              
....................          if(Opcion==6)    
3A94:  MOVLB  4
3A96:  MOVF   x90,W
3A98:  SUBLW  06
3A9A:  BNZ   3AE2
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
3A9C:  MOVLW  05
3A9E:  MOVWF  FEA
3AA0:  MOVLW  1D
3AA2:  MOVWF  FE9
3AA4:  MOVFF  FF2,53D
3AA8:  BCF    FF2.7
3AAA:  MOVLW  00
3AAC:  MOVLB  0
3AAE:  CALL   08E6
3AB2:  TBLRD*-
3AB4:  TBLRD*+
3AB6:  MOVF   FF5,W
3AB8:  MOVWF  FEE
3ABA:  IORLW  00
3ABC:  BNZ   3AB4
3ABE:  MOVLB  5
3AC0:  BTFSC  x3D.7
3AC2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,1,1);} 
3AC4:  MOVLW  05
3AC6:  MOVWF  x3E
3AC8:  MOVLW  1D
3ACA:  MOVWF  x3D
3ACC:  CLRF   x3F
3ACE:  MOVLW  37
3AD0:  MOVWF  x40
3AD2:  MOVLW  01
3AD4:  MOVWF  x41
3AD6:  MOVWF  x42
3AD8:  MOVLB  0
3ADA:  CALL   182C
....................          else 
3ADE:  BRA    3B24
3AE0:  MOVLB  4
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
3AE2:  MOVLW  05
3AE4:  MOVWF  FEA
3AE6:  MOVLW  1D
3AE8:  MOVWF  FE9
3AEA:  MOVFF  FF2,53D
3AEE:  BCF    FF2.7
3AF0:  MOVLW  00
3AF2:  MOVLB  0
3AF4:  CALL   08E6
3AF8:  TBLRD*-
3AFA:  TBLRD*+
3AFC:  MOVF   FF5,W
3AFE:  MOVWF  FEE
3B00:  IORLW  00
3B02:  BNZ   3AFA
3B04:  MOVLB  5
3B06:  BTFSC  x3D.7
3B08:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,0,1);}      
3B0A:  MOVLW  05
3B0C:  MOVWF  x3E
3B0E:  MOVLW  1D
3B10:  MOVWF  x3D
3B12:  CLRF   x3F
3B14:  MOVLW  37
3B16:  MOVWF  x40
3B18:  CLRF   x41
3B1A:  MOVLW  01
3B1C:  MOVWF  x42
3B1E:  MOVLB  0
3B20:  CALL   182C
....................             visual=0; 
3B24:  MOVLB  4
3B26:  BCF    x7C.4
....................       } 
....................       if(UP)//Si oprime hacia arriba 
3B28:  BSF    F92.5
3B2A:  BTFSS  F80.5
3B2C:  BRA    3B48
....................          {  if(Flanco == 0)  
3B2E:  BTFSC  x7C.0
3B30:  BRA    3B46
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
3B32:  BSF    x7C.0
3B34:  MOVLW  1E
3B36:  MOVLB  5
3B38:  MOVWF  x42
3B3A:  MOVLB  0
3B3C:  CALL   1104
3B40:  MOVLB  4
3B42:  DECF   x90,F
3B44:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3B46:  BRA    3B4A
....................                {Flanco = 0;} 
3B48:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
3B4A:  BSF    F96.0
3B4C:  BTFSS  F84.0
3B4E:  BRA    3B6A
....................          {  if(Flanco2 == 0)  
3B50:  BTFSC  x7C.2
3B52:  BRA    3B68
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
3B54:  BSF    x7C.2
3B56:  MOVLW  1E
3B58:  MOVLB  5
3B5A:  MOVWF  x42
3B5C:  MOVLB  0
3B5E:  CALL   1104
3B62:  MOVLB  4
3B64:  INCF   x90,F
3B66:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
3B68:  BRA    3B6C
....................                {Flanco2 = 0;}   
3B6A:  BCF    x7C.2
....................                 
....................        if(RIGHT)//Si oprime SET 
3B6C:  BSF    F96.1
3B6E:  BTFSS  F84.1
3B70:  BRA    3BA0
....................          {  if(Flanco1 == 0)  
3B72:  BTFSC  x7C.1
3B74:  BRA    3B9E
....................                {Flanco1 = 1;delay_ms(30);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);visual=1; 
3B76:  BSF    x7C.1
3B78:  MOVLW  1E
3B7A:  MOVLB  5
3B7C:  MOVWF  x42
3B7E:  MOVLB  0
3B80:  CALL   1104
3B84:  MOVLW  03
3B86:  MOVLB  4
3B88:  ADDWF  x90,W
3B8A:  MOVWF  x89
3B8C:  MOVLW  01
3B8E:  MOVWF  x90
3B90:  MOVLB  5
3B92:  CLRF   x3E
3B94:  MOVLB  0
3B96:  CALL   11FC
3B9A:  MOVLB  4
3B9C:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3B9E:  BRA    3BA2
....................                {Flanco1 = 0;}   
3BA0:  BCF    x7C.1
....................          /*       
....................          if(LEFT)//Si oprime boton de Toma. 
....................          {delay_ms(700);Menu=2;glcd_fillscreen(OFF);}*/ 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
.................... //-Sub-Menus de selección de proceso. 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==4){ // Menu de Caucho 
3BA2:  MOVF   x89,W
3BA4:  SUBLW  04
3BA6:  BTFSS  FD8.2
3BA8:  BRA    3ED6
....................        
....................       if(visual==1) 
3BAA:  BTFSS  x7C.4
3BAC:  BRA    3D02
....................       { 
....................          glcd_imagen(2); //Guante 
3BAE:  MOVLW  02
3BB0:  MOVLB  5
3BB2:  MOVWF  x3D
3BB4:  MOVLB  0
3BB6:  CALL   2062
....................          strcpy(Menus.Letra,"Caucho"); 
3BBA:  MOVLW  05
3BBC:  MOVWF  FEA
3BBE:  MOVLW  1D
3BC0:  MOVWF  FE9
3BC2:  MOVFF  FF2,53D
3BC6:  BCF    FF2.7
3BC8:  MOVLW  00
3BCA:  CALL   081A
3BCE:  TBLRD*-
3BD0:  TBLRD*+
3BD2:  MOVF   FF5,W
3BD4:  MOVWF  FEE
3BD6:  IORLW  00
3BD8:  BNZ   3BD0
3BDA:  MOVLB  5
3BDC:  BTFSC  x3D.7
3BDE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3BE0:  MOVLW  05
3BE2:  MOVWF  x3E
3BE4:  MOVLW  1D
3BE6:  MOVWF  x3D
3BE8:  MOVLW  14
3BEA:  MOVWF  x3F
3BEC:  CLRF   x40
3BEE:  MOVLW  01
3BF0:  MOVWF  x41
3BF2:  MOVLW  02
3BF4:  MOVWF  x42
3BF6:  MOVLB  0
3BF8:  CALL   182C
....................          
....................          strcpy(Menus.Letra,"Caucho"); 
3BFC:  MOVLW  05
3BFE:  MOVWF  FEA
3C00:  MOVLW  1D
3C02:  MOVWF  FE9
3C04:  MOVFF  FF2,53D
3C08:  BCF    FF2.7
3C0A:  MOVLW  00
3C0C:  CALL   081A
3C10:  TBLRD*-
3C12:  TBLRD*+
3C14:  MOVF   FF5,W
3C16:  MOVWF  FEE
3C18:  IORLW  00
3C1A:  BNZ   3C12
3C1C:  MOVLB  5
3C1E:  BTFSC  x3D.7
3C20:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,0,1); 
3C22:  MOVLW  05
3C24:  MOVWF  x3E
3C26:  MOVLW  1D
3C28:  MOVWF  x3D
3C2A:  MOVLW  07
3C2C:  MOVWF  x3F
3C2E:  MOVLW  37
3C30:  MOVWF  x40
3C32:  CLRF   x41
3C34:  MOVLW  01
3C36:  MOVWF  x42
3C38:  MOVLB  0
3C3A:  CALL   182C
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3C3E:  MOVLW  05
3C40:  MOVWF  FEA
3C42:  MOVLW  1D
3C44:  MOVWF  FE9
3C46:  MOVFF  FF2,53D
3C4A:  BCF    FF2.7
3C4C:  MOVLW  00
3C4E:  CALL   090E
3C52:  TBLRD*-
3C54:  TBLRD*+
3C56:  MOVF   FF5,W
3C58:  MOVWF  FEE
3C5A:  IORLW  00
3C5C:  BNZ   3C54
3C5E:  MOVLB  5
3C60:  BTFSC  x3D.7
3C62:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3C64:  MOVLW  05
3C66:  MOVWF  x3E
3C68:  MOVLW  1D
3C6A:  MOVWF  x3D
3C6C:  CLRF   x3F
3C6E:  MOVLW  1A
3C70:  MOVWF  x40
3C72:  CLRF   x41
3C74:  MOVLW  01
3C76:  MOVWF  x42
3C78:  MOVLB  0
3C7A:  CALL   182C
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
3C7E:  MOVLW  05
3C80:  MOVWF  FEA
3C82:  MOVLW  1D
3C84:  MOVWF  FE9
3C86:  MOVFF  FF2,53D
3C8A:  BCF    FF2.7
3C8C:  MOVLW  00
3C8E:  CALL   093A
3C92:  TBLRD*-
3C94:  TBLRD*+
3C96:  MOVF   FF5,W
3C98:  MOVWF  FEE
3C9A:  IORLW  00
3C9C:  BNZ   3C94
3C9E:  MOVLB  5
3CA0:  BTFSC  x3D.7
3CA2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3CA4:  MOVLW  05
3CA6:  MOVWF  x3E
3CA8:  MOVLW  1D
3CAA:  MOVWF  x3D
3CAC:  CLRF   x3F
3CAE:  MOVLW  24
3CB0:  MOVWF  x40
3CB2:  CLRF   x41
3CB4:  MOVLW  01
3CB6:  MOVWF  x42
3CB8:  MOVLB  0
3CBA:  CALL   182C
....................          strcpy(Menus.Letra,"T. Secado= 15m"); 
3CBE:  MOVLW  05
3CC0:  MOVWF  FEA
3CC2:  MOVLW  1D
3CC4:  MOVWF  FE9
3CC6:  MOVFF  FF2,53D
3CCA:  BCF    FF2.7
3CCC:  MOVLW  00
3CCE:  CALL   096A
3CD2:  TBLRD*-
3CD4:  TBLRD*+
3CD6:  MOVF   FF5,W
3CD8:  MOVWF  FEE
3CDA:  IORLW  00
3CDC:  BNZ   3CD4
3CDE:  MOVLB  5
3CE0:  BTFSC  x3D.7
3CE2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1); 
3CE4:  MOVLW  05
3CE6:  MOVWF  x3E
3CE8:  MOVLW  1D
3CEA:  MOVWF  x3D
3CEC:  CLRF   x3F
3CEE:  MOVLW  2E
3CF0:  MOVWF  x40
3CF2:  CLRF   x41
3CF4:  MOVLW  01
3CF6:  MOVWF  x42
3CF8:  MOVLB  0
3CFA:  CALL   182C
....................          visual=0; 
3CFE:  MOVLB  4
3D00:  BCF    x7C.4
....................       } 
....................        
....................       if(LEFT)// Si oprime Izquier|da 
3D02:  BSF    F96.2
3D04:  BTFSS  F84.2
3D06:  BRA    3D28
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3D08:  MOVLW  1E
3D0A:  MOVLB  5
3D0C:  MOVWF  x42
3D0E:  MOVLB  0
3D10:  CALL   1104
3D14:  MOVLW  01
3D16:  MOVLB  4
3D18:  MOVWF  x89
3D1A:  MOVLB  5
3D1C:  CLRF   x3E
3D1E:  MOVLB  0
3D20:  CALL   11FC
3D24:  MOVLB  4
3D26:  BSF    x7C.4
....................       } 
....................  
....................       if(RIGHT)// Si oprime derecha 
3D28:  BSF    F96.1
3D2A:  BTFSS  F84.1
3D2C:  BRA    3ED6
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
3D2E:  CLRF   xAB
3D30:  CLRF   xAC
3D32:  MOVLW  05
3D34:  MOVWF  xAD
3D36:  MOVLW  02
3D38:  MOVWF  xAE
3D3A:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;minutos=0;Setpoint=121;Menu=20; 
3D3C:  CLRF   xB3
3D3E:  CLRF   xB4
3D40:  MOVLW  05
3D42:  MOVWF  xB5
3D44:  MOVLW  01
3D46:  MOVWF  xB6
3D48:  CLRF   x9C
3D4A:  CLRF   x9B
3D4C:  MOVLW  79
3D4E:  MOVWF  x8E
3D50:  MOVLW  14
3D52:  MOVWF  x89
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
3D54:  MOVWF  x89
3D56:  MOVLW  0F
3D58:  MOVLB  5
3D5A:  MOVWF  x4F
3D5C:  MOVLW  12
3D5E:  MOVWF  x50
3D60:  MOVLW  1E
3D62:  MOVWF  x51
3D64:  MOVLW  35
3D66:  MOVWF  x52
3D68:  CLRF   x53
3D6A:  MOVLW  01
3D6C:  MOVWF  x54
3D6E:  MOVLB  0
3D70:  CALL   176A
3D74:  MOVLB  4
3D76:  CLRF   x92
3D78:  MOVLW  C0
3D7A:  IORWF  FF2,F
3D7C:  MOVLB  5
3D7E:  CLRF   x3E
3D80:  MOVLB  0
3D82:  CALL   11FC
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
3D86:  MOVLW  05
3D88:  MOVWF  FEA
3D8A:  MOVLW  1D
3D8C:  MOVWF  FE9
3D8E:  MOVFF  FF2,53D
3D92:  BCF    FF2.7
3D94:  MOVLW  00
3D96:  CALL   0994
3D9A:  TBLRD*-
3D9C:  TBLRD*+
3D9E:  MOVF   FF5,W
3DA0:  MOVWF  FEE
3DA2:  IORLW  00
3DA4:  BNZ   3D9C
3DA6:  MOVLB  5
3DA8:  BTFSC  x3D.7
3DAA:  BSF    FF2.7
3DAC:  MOVLW  05
3DAE:  MOVWF  x3E
3DB0:  MOVLW  1D
3DB2:  MOVWF  x3D
3DB4:  CLRF   x3F
3DB6:  MOVLW  37
3DB8:  MOVWF  x40
3DBA:  MOVLW  02
3DBC:  MOVWF  x41
3DBE:  MOVLW  01
3DC0:  MOVWF  x42
3DC2:  MOVLB  0
3DC4:  CALL   182C
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
3DC8:  MOVLW  0F
3DCA:  MOVLB  5
3DCC:  MOVWF  x4F
3DCE:  MOVLW  12
3DD0:  MOVWF  x50
3DD2:  MOVLW  1E
3DD4:  MOVWF  x51
3DD6:  MOVLW  35
3DD8:  MOVWF  x52
3DDA:  CLRF   x53
3DDC:  MOVLW  01
3DDE:  MOVWF  x54
3DE0:  MOVLB  0
3DE2:  CALL   176A
....................          glcd_imagen(5); 
3DE6:  MOVLW  05
3DE8:  MOVLB  5
3DEA:  MOVWF  x3D
3DEC:  MOVLB  0
3DEE:  CALL   2062
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
3DF2:  MOVLW  05
3DF4:  MOVWF  FEA
3DF6:  MOVLW  1D
3DF8:  MOVWF  FE9
3DFA:  MOVFF  FF2,53D
3DFE:  BCF    FF2.7
3E00:  MOVLW  00
3E02:  CALL   09BA
3E06:  TBLRD*-
3E08:  TBLRD*+
3E0A:  MOVF   FF5,W
3E0C:  MOVWF  FEE
3E0E:  IORLW  00
3E10:  BNZ   3E08
3E12:  MOVLB  5
3E14:  BTFSC  x3D.7
3E16:  BSF    FF2.7
3E18:  MOVLW  05
3E1A:  MOVWF  x3E
3E1C:  MOVLW  1D
3E1E:  MOVWF  x3D
3E20:  CLRF   x3F
3E22:  CLRF   x40
3E24:  MOVLW  02
3E26:  MOVWF  x41
3E28:  MOVLW  01
3E2A:  MOVWF  x42
3E2C:  MOVLB  0
3E2E:  CALL   182C
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
3E32:  MOVLW  05
3E34:  MOVWF  FEA
3E36:  MOVLW  1D
3E38:  MOVWF  FE9
3E3A:  MOVFF  FF2,53D
3E3E:  BCF    FF2.7
3E40:  MOVLW  00
3E42:  CALL   09DC
3E46:  TBLRD*-
3E48:  TBLRD*+
3E4A:  MOVF   FF5,W
3E4C:  MOVWF  FEE
3E4E:  IORLW  00
3E50:  BNZ   3E48
3E52:  MOVLB  5
3E54:  BTFSC  x3D.7
3E56:  BSF    FF2.7
3E58:  MOVLW  05
3E5A:  MOVWF  x3E
3E5C:  MOVLW  1D
3E5E:  MOVWF  x3D
3E60:  CLRF   x3F
3E62:  MOVLW  08
3E64:  MOVWF  x40
3E66:  MOVLW  02
3E68:  MOVWF  x41
3E6A:  MOVLW  01
3E6C:  MOVWF  x42
3E6E:  MOVLB  0
3E70:  CALL   182C
....................          glcd_circle(95,40,2,NO,ON); 
3E74:  MOVLW  5F
3E76:  MOVLB  5
3E78:  MOVWF  x3D
3E7A:  MOVLW  28
3E7C:  MOVWF  x3E
3E7E:  MOVLW  02
3E80:  MOVWF  x3F
3E82:  CLRF   x40
3E84:  MOVLW  01
3E86:  MOVWF  x41
3E88:  MOVLB  0
3E8A:  CALL   215E
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
3E8E:  MOVLW  05
3E90:  MOVWF  FEA
3E92:  MOVLW  1D
3E94:  MOVWF  FE9
3E96:  MOVFF  FF2,53D
3E9A:  BCF    FF2.7
3E9C:  MOVLW  00
3E9E:  CALL   09FE
3EA2:  TBLRD*-
3EA4:  TBLRD*+
3EA6:  MOVF   FF5,W
3EA8:  MOVWF  FEE
3EAA:  IORLW  00
3EAC:  BNZ   3EA4
3EAE:  MOVLB  5
3EB0:  BTFSC  x3D.7
3EB2:  BSF    FF2.7
3EB4:  MOVLW  05
3EB6:  MOVWF  x3E
3EB8:  MOVLW  1D
3EBA:  MOVWF  x3D
3EBC:  MOVLW  66
3EBE:  MOVWF  x3F
3EC0:  MOVLW  28
3EC2:  MOVWF  x40
3EC4:  MOVLW  02
3EC6:  MOVWF  x41
3EC8:  MOVWF  x42
3ECA:  MOVLB  0
3ECC:  CALL   182C
....................          MuestraTiemposProgramados(); 
3ED0:  CALL   255E
3ED4:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==5){ // Menu de Liquido       
3ED6:  MOVF   x89,W
3ED8:  SUBLW  05
3EDA:  BTFSS  FD8.2
3EDC:  BRA    40A2
....................        
....................       if(visual==1) 
3EDE:  BTFSS  x7C.4
3EE0:  BRA    4038
....................       { 
....................          glcd_imagen(4); //ErlenMeyer con Liquido 
3EE2:  MOVLW  04
3EE4:  MOVLB  5
3EE6:  MOVWF  x3D
3EE8:  MOVLB  0
3EEA:  CALL   2062
....................          strcpy(Menus.Letra,"Liquidos"); 
3EEE:  MOVLW  05
3EF0:  MOVWF  FEA
3EF2:  MOVLW  1D
3EF4:  MOVWF  FE9
3EF6:  MOVFF  FF2,53D
3EFA:  BCF    FF2.7
3EFC:  MOVLW  00
3EFE:  CALL   083C
3F02:  TBLRD*-
3F04:  TBLRD*+
3F06:  MOVF   FF5,W
3F08:  MOVWF  FEE
3F0A:  IORLW  00
3F0C:  BNZ   3F04
3F0E:  MOVLB  5
3F10:  BTFSC  x3D.7
3F12:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3F14:  MOVLW  05
3F16:  MOVWF  x3E
3F18:  MOVLW  1D
3F1A:  MOVWF  x3D
3F1C:  MOVLW  14
3F1E:  MOVWF  x3F
3F20:  CLRF   x40
3F22:  MOVLW  01
3F24:  MOVWF  x41
3F26:  MOVLW  02
3F28:  MOVWF  x42
3F2A:  MOVLB  0
3F2C:  CALL   182C
....................        
....................          strcpy(Menus.Letra,"Liquidos"); 
3F30:  MOVLW  05
3F32:  MOVWF  FEA
3F34:  MOVLW  1D
3F36:  MOVWF  FE9
3F38:  MOVFF  FF2,53D
3F3C:  BCF    FF2.7
3F3E:  MOVLW  00
3F40:  CALL   083C
3F44:  TBLRD*-
3F46:  TBLRD*+
3F48:  MOVF   FF5,W
3F4A:  MOVWF  FEE
3F4C:  IORLW  00
3F4E:  BNZ   3F46
3F50:  MOVLB  5
3F52:  BTFSC  x3D.7
3F54:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3F56:  MOVLW  05
3F58:  MOVWF  x3E
3F5A:  MOVLW  1D
3F5C:  MOVWF  x3D
3F5E:  MOVLW  07
3F60:  MOVWF  x3F
3F62:  MOVLW  37
3F64:  MOVWF  x40
3F66:  MOVLW  02
3F68:  MOVWF  x41
3F6A:  MOVLW  01
3F6C:  MOVWF  x42
3F6E:  MOVLB  0
3F70:  CALL   182C
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3F74:  MOVLW  05
3F76:  MOVWF  FEA
3F78:  MOVLW  1D
3F7A:  MOVWF  FE9
3F7C:  MOVFF  FF2,53D
3F80:  BCF    FF2.7
3F82:  MOVLW  00
3F84:  CALL   090E
3F88:  TBLRD*-
3F8A:  TBLRD*+
3F8C:  MOVF   FF5,W
3F8E:  MOVWF  FEE
3F90:  IORLW  00
3F92:  BNZ   3F8A
3F94:  MOVLB  5
3F96:  BTFSC  x3D.7
3F98:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3F9A:  MOVLW  05
3F9C:  MOVWF  x3E
3F9E:  MOVLW  1D
3FA0:  MOVWF  x3D
3FA2:  CLRF   x3F
3FA4:  MOVLW  1A
3FA6:  MOVWF  x40
3FA8:  CLRF   x41
3FAA:  MOVLW  01
3FAC:  MOVWF  x42
3FAE:  MOVLB  0
3FB0:  CALL   182C
....................          strcpy(Menus.Letra,"T. Esterilizacion:20m"); 
3FB4:  MOVLW  05
3FB6:  MOVWF  FEA
3FB8:  MOVLW  1D
3FBA:  MOVWF  FE9
3FBC:  MOVFF  FF2,53D
3FC0:  BCF    FF2.7
3FC2:  MOVLW  00
3FC4:  CALL   0A1A
3FC8:  TBLRD*-
3FCA:  TBLRD*+
3FCC:  MOVF   FF5,W
3FCE:  MOVWF  FEE
3FD0:  IORLW  00
3FD2:  BNZ   3FCA
3FD4:  MOVLB  5
3FD6:  BTFSC  x3D.7
3FD8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3FDA:  MOVLW  05
3FDC:  MOVWF  x3E
3FDE:  MOVLW  1D
3FE0:  MOVWF  x3D
3FE2:  CLRF   x3F
3FE4:  MOVLW  24
3FE6:  MOVWF  x40
3FE8:  CLRF   x41
3FEA:  MOVLW  01
3FEC:  MOVWF  x42
3FEE:  MOVLB  0
3FF0:  CALL   182C
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3FF4:  MOVLW  05
3FF6:  MOVWF  FEA
3FF8:  MOVLW  1D
3FFA:  MOVWF  FE9
3FFC:  MOVFF  FF2,53D
4000:  BCF    FF2.7
4002:  MOVLW  00
4004:  CALL   0A4A
4008:  TBLRD*-
400A:  TBLRD*+
400C:  MOVF   FF5,W
400E:  MOVWF  FEE
4010:  IORLW  00
4012:  BNZ   400A
4014:  MOVLB  5
4016:  BTFSC  x3D.7
4018:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);     
401A:  MOVLW  05
401C:  MOVWF  x3E
401E:  MOVLW  1D
4020:  MOVWF  x3D
4022:  CLRF   x3F
4024:  MOVLW  2E
4026:  MOVWF  x40
4028:  CLRF   x41
402A:  MOVLW  01
402C:  MOVWF  x42
402E:  MOVLB  0
4030:  CALL   182C
....................          visual=0; 
4034:  MOVLB  4
4036:  BCF    x7C.4
....................       }    
....................           
....................       if(LEFT)// Si oprime Izquier|da 
4038:  BSF    F96.2
403A:  BTFSS  F84.2
403C:  BRA    405E
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
403E:  MOVLW  1E
4040:  MOVLB  5
4042:  MOVWF  x42
4044:  MOVLB  0
4046:  CALL   1104
404A:  MOVLW  01
404C:  MOVLB  4
404E:  MOVWF  x89
4050:  MOVLB  5
4052:  CLRF   x3E
4054:  MOVLB  0
4056:  CALL   11FC
405A:  MOVLB  4
405C:  BSF    x7C.4
....................       }                
....................  
....................       if(RIGHT)// Si oprime derecha 
405E:  BSF    F96.1
4060:  BTFSS  F84.1
4062:  BRA    40A2
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2;desfoguelento=1;visual=1; 
4064:  CLRF   xAB
4066:  CLRF   xAC
4068:  CLRF   xAD
406A:  MOVLW  02
406C:  MOVWF  xAE
406E:  BSF    x7C.5
4070:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
4072:  CLRF   xB3
4074:  CLRF   xB4
4076:  CLRF   xB5
4078:  CLRF   xB6
407A:  MOVLW  79
407C:  MOVWF  x8E
407E:  MOVLW  0E
4080:  MOVWF  x89
4082:  MOVLW  04
4084:  MOVLB  5
4086:  MOVWF  x3D
4088:  MOVLW  AF
408A:  MOVWF  x42
408C:  MOVLB  0
408E:  CALL   1104
4092:  MOVLB  5
4094:  DECFSZ x3D,F
4096:  BRA    4088
4098:  CLRF   x3E
409A:  MOVLB  0
409C:  CALL   11FC
40A0:  MOVLB  4
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Instrumental Suave      
40A2:  MOVF   x89,W
40A4:  SUBLW  06
40A6:  BTFSS  FD8.2
40A8:  BRA    426E
....................        
....................       if(visual==1) 
40AA:  BTFSS  x7C.4
40AC:  BRA    4202
....................       { 
....................          glcd_imagen(3); //Erlen Meyer 
40AE:  MOVLW  03
40B0:  MOVLB  5
40B2:  MOVWF  x3D
40B4:  MOVLB  0
40B6:  CALL   2062
....................           
....................          strcpy(Menus.Letra,"Ins. Suave"); 
40BA:  MOVLW  05
40BC:  MOVWF  FEA
40BE:  MOVLW  1D
40C0:  MOVWF  FE9
40C2:  MOVFF  FF2,53D
40C6:  BCF    FF2.7
40C8:  MOVLW  00
40CA:  CALL   0A74
40CE:  TBLRD*-
40D0:  TBLRD*+
40D2:  MOVF   FF5,W
40D4:  MOVWF  FEE
40D6:  IORLW  00
40D8:  BNZ   40D0
40DA:  MOVLB  5
40DC:  BTFSC  x3D.7
40DE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
40E0:  MOVLW  05
40E2:  MOVWF  x3E
40E4:  MOVLW  1D
40E6:  MOVWF  x3D
40E8:  CLRF   x3F
40EA:  CLRF   x40
40EC:  MOVLW  01
40EE:  MOVWF  x41
40F0:  MOVLW  02
40F2:  MOVWF  x42
40F4:  MOVLB  0
40F6:  CALL   182C
....................           
....................          strcpy(Menus.Letra,"Instrumental Suave"); 
40FA:  MOVLW  05
40FC:  MOVWF  FEA
40FE:  MOVLW  1D
4100:  MOVWF  FE9
4102:  MOVFF  FF2,53D
4106:  BCF    FF2.7
4108:  MOVLW  00
410A:  CALL   0860
410E:  TBLRD*-
4110:  TBLRD*+
4112:  MOVF   FF5,W
4114:  MOVWF  FEE
4116:  IORLW  00
4118:  BNZ   4110
411A:  MOVLB  5
411C:  BTFSC  x3D.7
411E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
4120:  MOVLW  05
4122:  MOVWF  x3E
4124:  MOVLW  1D
4126:  MOVWF  x3D
4128:  MOVLW  07
412A:  MOVWF  x3F
412C:  MOVLW  37
412E:  MOVWF  x40
4130:  MOVLW  02
4132:  MOVWF  x41
4134:  MOVLW  01
4136:  MOVWF  x42
4138:  MOVLB  0
413A:  CALL   182C
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
413E:  MOVLW  05
4140:  MOVWF  FEA
4142:  MOVLW  1D
4144:  MOVWF  FE9
4146:  MOVFF  FF2,53D
414A:  BCF    FF2.7
414C:  MOVLW  00
414E:  CALL   090E
4152:  TBLRD*-
4154:  TBLRD*+
4156:  MOVF   FF5,W
4158:  MOVWF  FEE
415A:  IORLW  00
415C:  BNZ   4154
415E:  MOVLB  5
4160:  BTFSC  x3D.7
4162:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
4164:  MOVLW  05
4166:  MOVWF  x3E
4168:  MOVLW  1D
416A:  MOVWF  x3D
416C:  CLRF   x3F
416E:  MOVLW  1A
4170:  MOVWF  x40
4172:  CLRF   x41
4174:  MOVLW  01
4176:  MOVWF  x42
4178:  MOVLB  0
417A:  CALL   182C
....................          strcpy(Menus.Letra,"T. Esterilizacion:15m"); 
417E:  MOVLW  05
4180:  MOVWF  FEA
4182:  MOVLW  1D
4184:  MOVWF  FE9
4186:  MOVFF  FF2,53D
418A:  BCF    FF2.7
418C:  MOVLW  00
418E:  CALL   0A9A
4192:  TBLRD*-
4194:  TBLRD*+
4196:  MOVF   FF5,W
4198:  MOVWF  FEE
419A:  IORLW  00
419C:  BNZ   4194
419E:  MOVLB  5
41A0:  BTFSC  x3D.7
41A2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
41A4:  MOVLW  05
41A6:  MOVWF  x3E
41A8:  MOVLW  1D
41AA:  MOVWF  x3D
41AC:  CLRF   x3F
41AE:  MOVLW  24
41B0:  MOVWF  x40
41B2:  CLRF   x41
41B4:  MOVLW  01
41B6:  MOVWF  x42
41B8:  MOVLB  0
41BA:  CALL   182C
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
41BE:  MOVLW  05
41C0:  MOVWF  FEA
41C2:  MOVLW  1D
41C4:  MOVWF  FE9
41C6:  MOVFF  FF2,53D
41CA:  BCF    FF2.7
41CC:  MOVLW  00
41CE:  CALL   0A4A
41D2:  TBLRD*-
41D4:  TBLRD*+
41D6:  MOVF   FF5,W
41D8:  MOVWF  FEE
41DA:  IORLW  00
41DC:  BNZ   41D4
41DE:  MOVLB  5
41E0:  BTFSC  x3D.7
41E2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
41E4:  MOVLW  05
41E6:  MOVWF  x3E
41E8:  MOVLW  1D
41EA:  MOVWF  x3D
41EC:  CLRF   x3F
41EE:  MOVLW  2E
41F0:  MOVWF  x40
41F2:  CLRF   x41
41F4:  MOVLW  01
41F6:  MOVWF  x42
41F8:  MOVLB  0
41FA:  CALL   182C
....................          visual=0; 
41FE:  MOVLB  4
4200:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
4202:  BSF    F96.2
4204:  BTFSS  F84.2
4206:  BRA    4228
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
4208:  MOVLW  1E
420A:  MOVLB  5
420C:  MOVWF  x42
420E:  MOVLB  0
4210:  CALL   1104
4214:  MOVLW  01
4216:  MOVLB  4
4218:  MOVWF  x89
421A:  MOVLB  5
421C:  CLRF   x3E
421E:  MOVLB  0
4220:  CALL   11FC
4224:  MOVLB  4
4226:  BSF    x7C.4
....................       }             
....................  
....................       if(RIGHT)// Si oprime derecha 
4228:  BSF    F96.1
422A:  BTFSS  F84.1
422C:  BRA    426E
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1;desfoguelento=1;visual=1; 
422E:  CLRF   xAB
4230:  CLRF   xAC
4232:  MOVLW  05
4234:  MOVWF  xAD
4236:  MOVLW  01
4238:  MOVWF  xAE
423A:  BSF    x7C.5
423C:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
423E:  CLRF   xB3
4240:  CLRF   xB4
4242:  CLRF   xB5
4244:  CLRF   xB6
4246:  MOVLW  79
4248:  MOVWF  x8E
424A:  MOVLW  0E
424C:  MOVWF  x89
424E:  MOVLW  04
4250:  MOVLB  5
4252:  MOVWF  x3D
4254:  MOVLW  AF
4256:  MOVWF  x42
4258:  MOVLB  0
425A:  CALL   1104
425E:  MOVLB  5
4260:  DECFSZ x3D,F
4262:  BRA    4254
4264:  CLRF   x3E
4266:  MOVLB  0
4268:  CALL   11FC
426C:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==7){ // Menu de textil e instrumental      
426E:  MOVF   x89,W
4270:  SUBLW  07
4272:  BTFSS  FD8.2
4274:  BRA    45B4
....................        
....................       if(visual==1) 
4276:  BTFSS  x7C.4
4278:  BRA    43CC
....................       { 
....................          glcd_imagen(1); //Tijeras y Camisa 
427A:  MOVLW  01
427C:  MOVLB  5
427E:  MOVWF  x3D
4280:  MOVLB  0
4282:  CALL   2062
....................          strcpy(Menus.Letra,"Tex & Ins"); 
4286:  MOVLW  05
4288:  MOVWF  FEA
428A:  MOVLW  1D
428C:  MOVWF  FE9
428E:  MOVFF  FF2,53D
4292:  BCF    FF2.7
4294:  MOVLW  00
4296:  CALL   0ACA
429A:  TBLRD*-
429C:  TBLRD*+
429E:  MOVF   FF5,W
42A0:  MOVWF  FEE
42A2:  IORLW  00
42A4:  BNZ   429C
42A6:  MOVLB  5
42A8:  BTFSC  x3D.7
42AA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
42AC:  MOVLW  05
42AE:  MOVWF  x3E
42B0:  MOVLW  1D
42B2:  MOVWF  x3D
42B4:  CLRF   x3F
42B6:  CLRF   x40
42B8:  MOVLW  01
42BA:  MOVWF  x41
42BC:  MOVLW  02
42BE:  MOVWF  x42
42C0:  MOVLB  0
42C2:  CALL   182C
....................        
....................          strcpy(Menus.Letra,"Textil e Instrumental"); 
42C6:  MOVLW  05
42C8:  MOVWF  FEA
42CA:  MOVLW  1D
42CC:  MOVWF  FE9
42CE:  MOVFF  FF2,53D
42D2:  BCF    FF2.7
42D4:  MOVLW  00
42D6:  CALL   088E
42DA:  TBLRD*-
42DC:  TBLRD*+
42DE:  MOVF   FF5,W
42E0:  MOVWF  FEE
42E2:  IORLW  00
42E4:  BNZ   42DC
42E6:  MOVLB  5
42E8:  BTFSC  x3D.7
42EA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
42EC:  MOVLW  05
42EE:  MOVWF  x3E
42F0:  MOVLW  1D
42F2:  MOVWF  x3D
42F4:  CLRF   x3F
42F6:  MOVLW  37
42F8:  MOVWF  x40
42FA:  MOVLW  02
42FC:  MOVWF  x41
42FE:  MOVLW  01
4300:  MOVWF  x42
4302:  MOVLB  0
4304:  CALL   182C
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
4308:  MOVLW  05
430A:  MOVWF  FEA
430C:  MOVLW  1D
430E:  MOVWF  FE9
4310:  MOVFF  FF2,53D
4314:  BCF    FF2.7
4316:  MOVLW  00
4318:  CALL   090E
431C:  TBLRD*-
431E:  TBLRD*+
4320:  MOVF   FF5,W
4322:  MOVWF  FEE
4324:  IORLW  00
4326:  BNZ   431E
4328:  MOVLB  5
432A:  BTFSC  x3D.7
432C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
432E:  MOVLW  05
4330:  MOVWF  x3E
4332:  MOVLW  1D
4334:  MOVWF  x3D
4336:  CLRF   x3F
4338:  MOVLW  1A
433A:  MOVWF  x40
433C:  CLRF   x41
433E:  MOVLW  01
4340:  MOVWF  x42
4342:  MOVLB  0
4344:  CALL   182C
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
4348:  MOVLW  05
434A:  MOVWF  FEA
434C:  MOVLW  1D
434E:  MOVWF  FE9
4350:  MOVFF  FF2,53D
4354:  BCF    FF2.7
4356:  MOVLW  00
4358:  CALL   093A
435C:  TBLRD*-
435E:  TBLRD*+
4360:  MOVF   FF5,W
4362:  MOVWF  FEE
4364:  IORLW  00
4366:  BNZ   435E
4368:  MOVLB  5
436A:  BTFSC  x3D.7
436C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
436E:  MOVLW  05
4370:  MOVWF  x3E
4372:  MOVLW  1D
4374:  MOVWF  x3D
4376:  CLRF   x3F
4378:  MOVLW  24
437A:  MOVWF  x40
437C:  CLRF   x41
437E:  MOVLW  01
4380:  MOVWF  x42
4382:  MOVLB  0
4384:  CALL   182C
....................          strcpy(Menus.Letra,"T. Secado= 10m"); 
4388:  MOVLW  05
438A:  MOVWF  FEA
438C:  MOVLW  1D
438E:  MOVWF  FE9
4390:  MOVFF  FF2,53D
4394:  BCF    FF2.7
4396:  MOVLW  00
4398:  CALL   0AEE
439C:  TBLRD*-
439E:  TBLRD*+
43A0:  MOVF   FF5,W
43A2:  MOVWF  FEE
43A4:  IORLW  00
43A6:  BNZ   439E
43A8:  MOVLB  5
43AA:  BTFSC  x3D.7
43AC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
43AE:  MOVLW  05
43B0:  MOVWF  x3E
43B2:  MOVLW  1D
43B4:  MOVWF  x3D
43B6:  CLRF   x3F
43B8:  MOVLW  2E
43BA:  MOVWF  x40
43BC:  CLRF   x41
43BE:  MOVLW  01
43C0:  MOVWF  x42
43C2:  MOVLB  0
43C4:  CALL   182C
....................          visual=0; 
43C8:  MOVLB  4
43CA:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
43CC:  BSF    F96.2
43CE:  BTFSS  F84.2
43D0:  BRA    43F2
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
43D2:  MOVLW  1E
43D4:  MOVLB  5
43D6:  MOVWF  x42
43D8:  MOVLB  0
43DA:  CALL   1104
43DE:  MOVLW  01
43E0:  MOVLB  4
43E2:  MOVWF  x89
43E4:  MOVLB  5
43E6:  CLRF   x3E
43E8:  MOVLB  0
43EA:  CALL   11FC
43EE:  MOVLB  4
43F0:  BSF    x7C.4
....................       }                  
....................  
....................       if(RIGHT)// Si oprime derecha 
43F2:  BSF    F96.1
43F4:  BTFSS  F84.1
43F6:  BRA    45B4
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
43F8:  CLRF   xAB
43FA:  CLRF   xAC
43FC:  MOVLW  05
43FE:  MOVWF  xAD
4400:  MOVLW  02
4402:  MOVWF  xAE
4404:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=1;Setpoint=121;Menu=20;delay_ms(700); 
4406:  CLRF   xB3
4408:  CLRF   xB4
440A:  CLRF   xB5
440C:  MOVLW  01
440E:  MOVWF  xB6
4410:  MOVLW  79
4412:  MOVWF  x8E
4414:  MOVLW  14
4416:  MOVWF  x89
4418:  MOVLW  04
441A:  MOVLB  5
441C:  MOVWF  x3D
441E:  MOVLW  AF
4420:  MOVWF  x42
4422:  MOVLB  0
4424:  CALL   1104
4428:  MOVLB  5
442A:  DECFSZ x3D,F
442C:  BRA    441E
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
442E:  MOVLW  14
4430:  MOVLB  4
4432:  MOVWF  x89
4434:  MOVLW  0F
4436:  MOVLB  5
4438:  MOVWF  x4F
443A:  MOVLW  12
443C:  MOVWF  x50
443E:  MOVLW  1E
4440:  MOVWF  x51
4442:  MOVLW  35
4444:  MOVWF  x52
4446:  CLRF   x53
4448:  MOVLW  01
444A:  MOVWF  x54
444C:  MOVLB  0
444E:  CALL   176A
4452:  MOVLB  4
4454:  CLRF   x92
4456:  MOVLW  C0
4458:  IORWF  FF2,F
445A:  MOVLB  5
445C:  CLRF   x3E
445E:  MOVLB  0
4460:  CALL   11FC
....................          strcpy(Menus.Letra,"Calentando"); 
4464:  MOVLW  05
4466:  MOVWF  FEA
4468:  MOVLW  1D
446A:  MOVWF  FE9
446C:  MOVFF  FF2,53D
4470:  BCF    FF2.7
4472:  MOVLW  00
4474:  CALL   0994
4478:  TBLRD*-
447A:  TBLRD*+
447C:  MOVF   FF5,W
447E:  MOVWF  FEE
4480:  IORLW  00
4482:  BNZ   447A
4484:  MOVLB  5
4486:  BTFSC  x3D.7
4488:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
448A:  MOVLW  05
448C:  MOVWF  x3E
448E:  MOVLW  1D
4490:  MOVWF  x3D
4492:  CLRF   x3F
4494:  MOVLW  37
4496:  MOVWF  x40
4498:  MOVLW  02
449A:  MOVWF  x41
449C:  MOVLW  01
449E:  MOVWF  x42
44A0:  MOVLB  0
44A2:  CALL   182C
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
44A6:  MOVLW  0F
44A8:  MOVLB  5
44AA:  MOVWF  x4F
44AC:  MOVLW  12
44AE:  MOVWF  x50
44B0:  MOVLW  1E
44B2:  MOVWF  x51
44B4:  MOVLW  35
44B6:  MOVWF  x52
44B8:  CLRF   x53
44BA:  MOVLW  01
44BC:  MOVWF  x54
44BE:  MOVLB  0
44C0:  CALL   176A
....................          glcd_imagen(5); 
44C4:  MOVLW  05
44C6:  MOVLB  5
44C8:  MOVWF  x3D
44CA:  MOVLB  0
44CC:  CALL   2062
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
44D0:  MOVLW  05
44D2:  MOVWF  FEA
44D4:  MOVLW  1D
44D6:  MOVWF  FE9
44D8:  MOVFF  FF2,53D
44DC:  BCF    FF2.7
44DE:  MOVLW  00
44E0:  CALL   09BA
44E4:  TBLRD*-
44E6:  TBLRD*+
44E8:  MOVF   FF5,W
44EA:  MOVWF  FEE
44EC:  IORLW  00
44EE:  BNZ   44E6
44F0:  MOVLB  5
44F2:  BTFSC  x3D.7
44F4:  BSF    FF2.7
44F6:  MOVLW  05
44F8:  MOVWF  x3E
44FA:  MOVLW  1D
44FC:  MOVWF  x3D
44FE:  CLRF   x3F
4500:  CLRF   x40
4502:  MOVLW  02
4504:  MOVWF  x41
4506:  MOVLW  01
4508:  MOVWF  x42
450A:  MOVLB  0
450C:  CALL   182C
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
4510:  MOVLW  05
4512:  MOVWF  FEA
4514:  MOVLW  1D
4516:  MOVWF  FE9
4518:  MOVFF  FF2,53D
451C:  BCF    FF2.7
451E:  MOVLW  00
4520:  CALL   09DC
4524:  TBLRD*-
4526:  TBLRD*+
4528:  MOVF   FF5,W
452A:  MOVWF  FEE
452C:  IORLW  00
452E:  BNZ   4526
4530:  MOVLB  5
4532:  BTFSC  x3D.7
4534:  BSF    FF2.7
4536:  MOVLW  05
4538:  MOVWF  x3E
453A:  MOVLW  1D
453C:  MOVWF  x3D
453E:  CLRF   x3F
4540:  MOVLW  08
4542:  MOVWF  x40
4544:  MOVLW  02
4546:  MOVWF  x41
4548:  MOVLW  01
454A:  MOVWF  x42
454C:  MOVLB  0
454E:  CALL   182C
....................          glcd_circle(95,40,2,NO,ON); 
4552:  MOVLW  5F
4554:  MOVLB  5
4556:  MOVWF  x3D
4558:  MOVLW  28
455A:  MOVWF  x3E
455C:  MOVLW  02
455E:  MOVWF  x3F
4560:  CLRF   x40
4562:  MOVLW  01
4564:  MOVWF  x41
4566:  MOVLB  0
4568:  CALL   215E
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
456C:  MOVLW  05
456E:  MOVWF  FEA
4570:  MOVLW  1D
4572:  MOVWF  FE9
4574:  MOVFF  FF2,53D
4578:  BCF    FF2.7
457A:  MOVLW  00
457C:  CALL   09FE
4580:  TBLRD*-
4582:  TBLRD*+
4584:  MOVF   FF5,W
4586:  MOVWF  FEE
4588:  IORLW  00
458A:  BNZ   4582
458C:  MOVLB  5
458E:  BTFSC  x3D.7
4590:  BSF    FF2.7
4592:  MOVLW  05
4594:  MOVWF  x3E
4596:  MOVLW  1D
4598:  MOVWF  x3D
459A:  MOVLW  66
459C:  MOVWF  x3F
459E:  MOVLW  28
45A0:  MOVWF  x40
45A2:  MOVLW  02
45A4:  MOVWF  x41
45A6:  MOVWF  x42
45A8:  MOVLB  0
45AA:  CALL   182C
....................          MuestraTiemposProgramados(); 
45AE:  CALL   255E
45B2:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
.................... // Testerilizacionp[3]<,Tsecadop[3]<,Setpoint 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==8){ // Menu de Proceso Personalizado 
45B4:  MOVF   x89,W
45B6:  SUBLW  08
45B8:  BTFSS  FD8.2
45BA:  BRA    4998
....................          
....................          if(visual==1) 
45BC:  BTFSS  x7C.4
45BE:  BRA    48E4
....................          { 
....................             if(Opcion>5) 
45C0:  MOVF   x90,W
45C2:  SUBLW  05
45C4:  BC    45CA
....................             {Opcion=1;} 
45C6:  MOVLW  01
45C8:  MOVWF  x90
....................             if(Opcion<1) 
45CA:  MOVF   x90,F
45CC:  BNZ   45D2
....................             {Opcion=5;} 
45CE:  MOVLW  05
45D0:  MOVWF  x90
....................              
....................             strcpy(Menus.Letra,"Proceso Personalizado"); 
45D2:  MOVLW  05
45D4:  MOVWF  FEA
45D6:  MOVLW  1D
45D8:  MOVWF  FE9
45DA:  MOVFF  FF2,53D
45DE:  BCF    FF2.7
45E0:  MOVLW  00
45E2:  MOVLB  0
45E4:  CALL   0B18
45E8:  TBLRD*-
45EA:  TBLRD*+
45EC:  MOVF   FF5,W
45EE:  MOVWF  FEE
45F0:  IORLW  00
45F2:  BNZ   45EA
45F4:  MOVLB  5
45F6:  BTFSC  x3D.7
45F8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1); 
45FA:  MOVLW  05
45FC:  MOVWF  x3E
45FE:  MOVLW  1D
4600:  MOVWF  x3D
4602:  CLRF   x3F
4604:  CLRF   x40
4606:  MOVLW  01
4608:  MOVWF  x41
460A:  MOVWF  x42
460C:  MOVLB  0
460E:  CALL   182C
....................        
....................             if(Opcion==1)    
4612:  MOVLB  4
4614:  DECFSZ x90,W
4616:  BRA    465E
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
4618:  MOVLW  05
461A:  MOVWF  FEA
461C:  MOVLW  1D
461E:  MOVWF  FE9
4620:  MOVFF  FF2,53D
4624:  BCF    FF2.7
4626:  MOVLW  00
4628:  MOVLB  0
462A:  CALL   0B48
462E:  TBLRD*-
4630:  TBLRD*+
4632:  MOVF   FF5,W
4634:  MOVWF  FEE
4636:  IORLW  00
4638:  BNZ   4630
463A:  MOVLB  5
463C:  BTFSC  x3D.7
463E:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,1,1);} 
4640:  MOVLW  05
4642:  MOVWF  x3E
4644:  MOVLW  1D
4646:  MOVWF  x3D
4648:  CLRF   x3F
464A:  MOVLW  0A
464C:  MOVWF  x40
464E:  MOVLW  01
4650:  MOVWF  x41
4652:  MOVWF  x42
4654:  MOVLB  0
4656:  CALL   182C
....................             else 
465A:  BRA    46A0
465C:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
465E:  MOVLW  05
4660:  MOVWF  FEA
4662:  MOVLW  1D
4664:  MOVWF  FE9
4666:  MOVFF  FF2,53D
466A:  BCF    FF2.7
466C:  MOVLW  00
466E:  MOVLB  0
4670:  CALL   0B48
4674:  TBLRD*-
4676:  TBLRD*+
4678:  MOVF   FF5,W
467A:  MOVWF  FEE
467C:  IORLW  00
467E:  BNZ   4676
4680:  MOVLB  5
4682:  BTFSC  x3D.7
4684:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,0,1);} 
4686:  MOVLW  05
4688:  MOVWF  x3E
468A:  MOVLW  1D
468C:  MOVWF  x3D
468E:  CLRF   x3F
4690:  MOVLW  0A
4692:  MOVWF  x40
4694:  CLRF   x41
4696:  MOVLW  01
4698:  MOVWF  x42
469A:  MOVLB  0
469C:  CALL   182C
....................              
....................             if(Opcion==2)    
46A0:  MOVLB  4
46A2:  MOVF   x90,W
46A4:  SUBLW  02
46A6:  BNZ   46EE
....................                {strcpy(Menus.Letra,"T. Secado"); 
46A8:  MOVLW  05
46AA:  MOVWF  FEA
46AC:  MOVLW  1D
46AE:  MOVWF  FE9
46B0:  MOVFF  FF2,53D
46B4:  BCF    FF2.7
46B6:  MOVLW  00
46B8:  MOVLB  0
46BA:  CALL   0B74
46BE:  TBLRD*-
46C0:  TBLRD*+
46C2:  MOVF   FF5,W
46C4:  MOVWF  FEE
46C6:  IORLW  00
46C8:  BNZ   46C0
46CA:  MOVLB  5
46CC:  BTFSC  x3D.7
46CE:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,1,1);} 
46D0:  MOVLW  05
46D2:  MOVWF  x3E
46D4:  MOVLW  1D
46D6:  MOVWF  x3D
46D8:  CLRF   x3F
46DA:  MOVLW  14
46DC:  MOVWF  x40
46DE:  MOVLW  01
46E0:  MOVWF  x41
46E2:  MOVWF  x42
46E4:  MOVLB  0
46E6:  CALL   182C
....................             else 
46EA:  BRA    4730
46EC:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Secado"); 
46EE:  MOVLW  05
46F0:  MOVWF  FEA
46F2:  MOVLW  1D
46F4:  MOVWF  FE9
46F6:  MOVFF  FF2,53D
46FA:  BCF    FF2.7
46FC:  MOVLW  00
46FE:  MOVLB  0
4700:  CALL   0B74
4704:  TBLRD*-
4706:  TBLRD*+
4708:  MOVF   FF5,W
470A:  MOVWF  FEE
470C:  IORLW  00
470E:  BNZ   4706
4710:  MOVLB  5
4712:  BTFSC  x3D.7
4714:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,0,1);}    
4716:  MOVLW  05
4718:  MOVWF  x3E
471A:  MOVLW  1D
471C:  MOVWF  x3D
471E:  CLRF   x3F
4720:  MOVLW  14
4722:  MOVWF  x40
4724:  CLRF   x41
4726:  MOVLW  01
4728:  MOVWF  x42
472A:  MOVLB  0
472C:  CALL   182C
....................                 
....................              if(Opcion==3)    
4730:  MOVLB  4
4732:  MOVF   x90,W
4734:  SUBLW  03
4736:  BNZ   477E
....................                {strcpy(Menus.Letra,"Temperatura"); 
4738:  MOVLW  05
473A:  MOVWF  FEA
473C:  MOVLW  1D
473E:  MOVWF  FE9
4740:  MOVFF  FF2,53D
4744:  BCF    FF2.7
4746:  MOVLW  00
4748:  MOVLB  0
474A:  CALL   0B98
474E:  TBLRD*-
4750:  TBLRD*+
4752:  MOVF   FF5,W
4754:  MOVWF  FEE
4756:  IORLW  00
4758:  BNZ   4750
475A:  MOVLB  5
475C:  BTFSC  x3D.7
475E:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,1,1);} 
4760:  MOVLW  05
4762:  MOVWF  x3E
4764:  MOVLW  1D
4766:  MOVWF  x3D
4768:  CLRF   x3F
476A:  MOVLW  1E
476C:  MOVWF  x40
476E:  MOVLW  01
4770:  MOVWF  x41
4772:  MOVWF  x42
4774:  MOVLB  0
4776:  CALL   182C
....................             else 
477A:  BRA    47C0
477C:  MOVLB  4
....................                {strcpy(Menus.Letra,"Temperatura"); 
477E:  MOVLW  05
4780:  MOVWF  FEA
4782:  MOVLW  1D
4784:  MOVWF  FE9
4786:  MOVFF  FF2,53D
478A:  BCF    FF2.7
478C:  MOVLW  00
478E:  MOVLB  0
4790:  CALL   0B98
4794:  TBLRD*-
4796:  TBLRD*+
4798:  MOVF   FF5,W
479A:  MOVWF  FEE
479C:  IORLW  00
479E:  BNZ   4796
47A0:  MOVLB  5
47A2:  BTFSC  x3D.7
47A4:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,0,1);} 
47A6:  MOVLW  05
47A8:  MOVWF  x3E
47AA:  MOVLW  1D
47AC:  MOVWF  x3D
47AE:  CLRF   x3F
47B0:  MOVLW  1E
47B2:  MOVWF  x40
47B4:  CLRF   x41
47B6:  MOVLW  01
47B8:  MOVWF  x42
47BA:  MOVLB  0
47BC:  CALL   182C
....................                 
....................             if(Opcion==4)    
47C0:  MOVLB  4
47C2:  MOVF   x90,W
47C4:  SUBLW  04
47C6:  BNZ   480E
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
47C8:  MOVLW  05
47CA:  MOVWF  FEA
47CC:  MOVLW  1D
47CE:  MOVWF  FE9
47D0:  MOVFF  FF2,53D
47D4:  BCF    FF2.7
47D6:  MOVLW  00
47D8:  MOVLB  0
47DA:  CALL   0BBE
47DE:  TBLRD*-
47E0:  TBLRD*+
47E2:  MOVF   FF5,W
47E4:  MOVWF  FEE
47E6:  IORLW  00
47E8:  BNZ   47E0
47EA:  MOVLB  5
47EC:  BTFSC  x3D.7
47EE:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,1,1);} 
47F0:  MOVLW  05
47F2:  MOVWF  x3E
47F4:  MOVLW  1D
47F6:  MOVWF  x3D
47F8:  CLRF   x3F
47FA:  MOVLW  28
47FC:  MOVWF  x40
47FE:  MOVLW  01
4800:  MOVWF  x41
4802:  MOVWF  x42
4804:  MOVLB  0
4806:  CALL   182C
....................             else 
480A:  BRA    4850
480C:  MOVLB  4
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
480E:  MOVLW  05
4810:  MOVWF  FEA
4812:  MOVLW  1D
4814:  MOVWF  FE9
4816:  MOVFF  FF2,53D
481A:  BCF    FF2.7
481C:  MOVLW  00
481E:  MOVLB  0
4820:  CALL   0BBE
4824:  TBLRD*-
4826:  TBLRD*+
4828:  MOVF   FF5,W
482A:  MOVWF  FEE
482C:  IORLW  00
482E:  BNZ   4826
4830:  MOVLB  5
4832:  BTFSC  x3D.7
4834:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,0,1);}    
4836:  MOVLW  05
4838:  MOVWF  x3E
483A:  MOVLW  1D
483C:  MOVWF  x3D
483E:  CLRF   x3F
4840:  MOVLW  28
4842:  MOVWF  x40
4844:  CLRF   x41
4846:  MOVLW  01
4848:  MOVWF  x42
484A:  MOVLB  0
484C:  CALL   182C
....................                 
....................             if(Opcion==5)    
4850:  MOVLB  4
4852:  MOVF   x90,W
4854:  SUBLW  05
4856:  BNZ   489E
....................                {strcpy(Menus.Letra,"Continuar"); 
4858:  MOVLW  05
485A:  MOVWF  FEA
485C:  MOVLW  1D
485E:  MOVWF  FE9
4860:  MOVFF  FF2,53D
4864:  BCF    FF2.7
4866:  MOVLW  00
4868:  MOVLB  0
486A:  CALL   0BEA
486E:  TBLRD*-
4870:  TBLRD*+
4872:  MOVF   FF5,W
4874:  MOVWF  FEE
4876:  IORLW  00
4878:  BNZ   4870
487A:  MOVLB  5
487C:  BTFSC  x3D.7
487E:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,1,1);} 
4880:  MOVLW  05
4882:  MOVWF  x3E
4884:  MOVLW  1D
4886:  MOVWF  x3D
4888:  CLRF   x3F
488A:  MOVLW  32
488C:  MOVWF  x40
488E:  MOVLW  01
4890:  MOVWF  x41
4892:  MOVWF  x42
4894:  MOVLB  0
4896:  CALL   182C
....................             else 
489A:  BRA    48E0
489C:  MOVLB  4
....................                {strcpy(Menus.Letra,"Continuar"); 
489E:  MOVLW  05
48A0:  MOVWF  FEA
48A2:  MOVLW  1D
48A4:  MOVWF  FE9
48A6:  MOVFF  FF2,53D
48AA:  BCF    FF2.7
48AC:  MOVLW  00
48AE:  MOVLB  0
48B0:  CALL   0BEA
48B4:  TBLRD*-
48B6:  TBLRD*+
48B8:  MOVF   FF5,W
48BA:  MOVWF  FEE
48BC:  IORLW  00
48BE:  BNZ   48B6
48C0:  MOVLB  5
48C2:  BTFSC  x3D.7
48C4:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,0,1);}   
48C6:  MOVLW  05
48C8:  MOVWF  x3E
48CA:  MOVLW  1D
48CC:  MOVWF  x3D
48CE:  CLRF   x3F
48D0:  MOVLW  32
48D2:  MOVWF  x40
48D4:  CLRF   x41
48D6:  MOVLW  01
48D8:  MOVWF  x42
48DA:  MOVLB  0
48DC:  CALL   182C
....................                           
....................             visual=0; 
48E0:  MOVLB  4
48E2:  BCF    x7C.4
....................          } 
....................          if(UP)//Si oprime hacia arriba 
48E4:  BSF    F92.5
48E6:  BTFSS  F80.5
48E8:  BRA    4904
....................          {  if(Flanco == 0)  
48EA:  BTFSC  x7C.0
48EC:  BRA    4902
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
48EE:  BSF    x7C.0
48F0:  MOVLW  1E
48F2:  MOVLB  5
48F4:  MOVWF  x42
48F6:  MOVLB  0
48F8:  CALL   1104
48FC:  MOVLB  4
48FE:  DECF   x90,F
4900:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
4902:  BRA    4906
....................                {Flanco = 0;} 
4904:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
4906:  BSF    F96.0
4908:  BTFSS  F84.0
490A:  BRA    4926
....................          {  if(Flanco2 == 0)  
490C:  BTFSC  x7C.2
490E:  BRA    4924
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
4910:  BSF    x7C.2
4912:  MOVLW  1E
4914:  MOVLB  5
4916:  MOVWF  x42
4918:  MOVLB  0
491A:  CALL   1104
491E:  MOVLB  4
4920:  INCF   x90,F
4922:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
4924:  BRA    4928
....................                {Flanco2 = 0;}   
4926:  BCF    x7C.2
....................                 
....................          if(RIGHT)//Si oprime SET 
4928:  BSF    F96.1
492A:  BTFSS  F84.1
492C:  BRA    4966
....................          {  if(Flanco1 == 0)  
492E:  BTFSC  x7C.1
4930:  BRA    4964
....................                {Flanco1 = 1;delay_ms(300);Menu=Opcion+10;Opcion=1;glcd_fillscreen(OFF);visual=1; 
4932:  BSF    x7C.1
4934:  MOVLW  02
4936:  MOVLB  5
4938:  MOVWF  x3D
493A:  MOVLW  96
493C:  MOVWF  x42
493E:  MOVLB  0
4940:  CALL   1104
4944:  MOVLB  5
4946:  DECFSZ x3D,F
4948:  BRA    493A
494A:  MOVLW  0A
494C:  MOVLB  4
494E:  ADDWF  x90,W
4950:  MOVWF  x89
4952:  MOVLW  01
4954:  MOVWF  x90
4956:  MOVLB  5
4958:  CLRF   x3E
495A:  MOVLB  0
495C:  CALL   11FC
4960:  MOVLB  4
4962:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
4964:  BRA    4968
....................                {Flanco1 = 0;}   
4966:  BCF    x7C.1
....................                 
....................          if(LEFT)//Si oprime boton de Toma. 
4968:  BSF    F96.2
496A:  BTFSS  F84.2
496C:  BRA    4998
....................          {delay_ms(700);Menu=1;glcd_fillscreen(OFF);visual=1;} 
496E:  MOVLW  04
4970:  MOVLB  5
4972:  MOVWF  x3D
4974:  MOVLW  AF
4976:  MOVWF  x42
4978:  MOVLB  0
497A:  CALL   1104
497E:  MOVLB  5
4980:  DECFSZ x3D,F
4982:  BRA    4974
4984:  MOVLW  01
4986:  MOVLB  4
4988:  MOVWF  x89
498A:  MOVLB  5
498C:  CLRF   x3E
498E:  MOVLB  0
4990:  CALL   11FC
4994:  MOVLB  4
4996:  BSF    x7C.4
....................           
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==9){ // Menu de Cambio de Contraseña 
4998:  MOVF   x89,W
499A:  SUBLW  09
499C:  BTFSS  FD8.2
499E:  BRA    4E54
....................          
....................       strcpy(Menus.Letra,"Clave"); 
49A0:  MOVLW  05
49A2:  MOVWF  FEA
49A4:  MOVLW  1D
49A6:  MOVWF  FE9
49A8:  MOVFF  FF2,53D
49AC:  BCF    FF2.7
49AE:  MOVLW  00
49B0:  MOVLB  0
49B2:  CALL   0786
49B6:  TBLRD*-
49B8:  TBLRD*+
49BA:  MOVF   FF5,W
49BC:  MOVWF  FEE
49BE:  IORLW  00
49C0:  BNZ   49B8
49C2:  MOVLB  5
49C4:  BTFSC  x3D.7
49C6:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
49C8:  MOVLW  05
49CA:  MOVWF  x3E
49CC:  MOVLW  1D
49CE:  MOVWF  x3D
49D0:  MOVLW  1E
49D2:  MOVWF  x3F
49D4:  CLRF   x40
49D6:  MOVLW  01
49D8:  MOVWF  x41
49DA:  MOVLW  02
49DC:  MOVWF  x42
49DE:  MOVLB  0
49E0:  CALL   182C
....................        
....................       if(unidad==1) 
49E4:  MOVLB  4
49E6:  DECFSZ x8A,W
49E8:  BRA    4A48
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1); 
49EA:  MOVFF  4B7,53F
49EE:  MOVLW  14
49F0:  MOVLB  5
49F2:  MOVWF  x40
49F4:  MOVLW  1E
49F6:  MOVWF  x41
49F8:  MOVLW  01
49FA:  MOVWF  x42
49FC:  MOVLB  0
49FE:  CALL   1A52
....................          displayContrasena(Contrasena[1],40,30,0); 
4A02:  MOVFF  4B8,53F
4A06:  MOVLW  28
4A08:  MOVLB  5
4A0A:  MOVWF  x40
4A0C:  MOVLW  1E
4A0E:  MOVWF  x41
4A10:  CLRF   x42
4A12:  MOVLB  0
4A14:  CALL   1A52
....................          displayContrasena(Contrasena[2],60,30,0); 
4A18:  MOVFF  4B9,53F
4A1C:  MOVLW  3C
4A1E:  MOVLB  5
4A20:  MOVWF  x40
4A22:  MOVLW  1E
4A24:  MOVWF  x41
4A26:  CLRF   x42
4A28:  MOVLB  0
4A2A:  CALL   1A52
....................          displayContrasena(Contrasena[3],80,30,0); 
4A2E:  MOVFF  4BA,53F
4A32:  MOVLW  50
4A34:  MOVLB  5
4A36:  MOVWF  x40
4A38:  MOVLW  1E
4A3A:  MOVWF  x41
4A3C:  CLRF   x42
4A3E:  MOVLB  0
4A40:  CALL   1A52
....................       } 
....................       else 
4A44:  BRA    4B70
4A46:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4A48:  MOVF   x8A,W
4A4A:  SUBLW  02
4A4C:  BNZ   4AAC
....................          { 
....................             displayContrasena(Contrasena[0],20,30,0); 
4A4E:  MOVFF  4B7,53F
4A52:  MOVLW  14
4A54:  MOVLB  5
4A56:  MOVWF  x40
4A58:  MOVLW  1E
4A5A:  MOVWF  x41
4A5C:  CLRF   x42
4A5E:  MOVLB  0
4A60:  CALL   1A52
....................             displayContrasena(Contrasena[1],40,30,1); 
4A64:  MOVFF  4B8,53F
4A68:  MOVLW  28
4A6A:  MOVLB  5
4A6C:  MOVWF  x40
4A6E:  MOVLW  1E
4A70:  MOVWF  x41
4A72:  MOVLW  01
4A74:  MOVWF  x42
4A76:  MOVLB  0
4A78:  CALL   1A52
....................             displayContrasena(Contrasena[2],60,30,0); 
4A7C:  MOVFF  4B9,53F
4A80:  MOVLW  3C
4A82:  MOVLB  5
4A84:  MOVWF  x40
4A86:  MOVLW  1E
4A88:  MOVWF  x41
4A8A:  CLRF   x42
4A8C:  MOVLB  0
4A8E:  CALL   1A52
....................             displayContrasena(Contrasena[3],80,30,0); 
4A92:  MOVFF  4BA,53F
4A96:  MOVLW  50
4A98:  MOVLB  5
4A9A:  MOVWF  x40
4A9C:  MOVLW  1E
4A9E:  MOVWF  x41
4AA0:  CLRF   x42
4AA2:  MOVLB  0
4AA4:  CALL   1A52
....................          } 
....................          else 
4AA8:  BRA    4B70
4AAA:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4AAC:  MOVF   x8A,W
4AAE:  SUBLW  03
4AB0:  BNZ   4B10
....................             { 
....................                displayContrasena(Contrasena[0],20,30,0); 
4AB2:  MOVFF  4B7,53F
4AB6:  MOVLW  14
4AB8:  MOVLB  5
4ABA:  MOVWF  x40
4ABC:  MOVLW  1E
4ABE:  MOVWF  x41
4AC0:  CLRF   x42
4AC2:  MOVLB  0
4AC4:  CALL   1A52
....................                displayContrasena(Contrasena[1],40,30,0); 
4AC8:  MOVFF  4B8,53F
4ACC:  MOVLW  28
4ACE:  MOVLB  5
4AD0:  MOVWF  x40
4AD2:  MOVLW  1E
4AD4:  MOVWF  x41
4AD6:  CLRF   x42
4AD8:  MOVLB  0
4ADA:  CALL   1A52
....................                displayContrasena(Contrasena[2],60,30,1); 
4ADE:  MOVFF  4B9,53F
4AE2:  MOVLW  3C
4AE4:  MOVLB  5
4AE6:  MOVWF  x40
4AE8:  MOVLW  1E
4AEA:  MOVWF  x41
4AEC:  MOVLW  01
4AEE:  MOVWF  x42
4AF0:  MOVLB  0
4AF2:  CALL   1A52
....................                displayContrasena(Contrasena[3],80,30,0); 
4AF6:  MOVFF  4BA,53F
4AFA:  MOVLW  50
4AFC:  MOVLB  5
4AFE:  MOVWF  x40
4B00:  MOVLW  1E
4B02:  MOVWF  x41
4B04:  CLRF   x42
4B06:  MOVLB  0
4B08:  CALL   1A52
....................             } 
....................             else 
4B0C:  BRA    4B70
4B0E:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4B10:  MOVF   x8A,W
4B12:  SUBLW  04
4B14:  BNZ   4B72
....................                { 
....................                   displayContrasena(Contrasena[0],20,30,0); 
4B16:  MOVFF  4B7,53F
4B1A:  MOVLW  14
4B1C:  MOVLB  5
4B1E:  MOVWF  x40
4B20:  MOVLW  1E
4B22:  MOVWF  x41
4B24:  CLRF   x42
4B26:  MOVLB  0
4B28:  CALL   1A52
....................                   displayContrasena(Contrasena[1],40,30,0); 
4B2C:  MOVFF  4B8,53F
4B30:  MOVLW  28
4B32:  MOVLB  5
4B34:  MOVWF  x40
4B36:  MOVLW  1E
4B38:  MOVWF  x41
4B3A:  CLRF   x42
4B3C:  MOVLB  0
4B3E:  CALL   1A52
....................                   displayContrasena(Contrasena[2],60,30,0); 
4B42:  MOVFF  4B9,53F
4B46:  MOVLW  3C
4B48:  MOVLB  5
4B4A:  MOVWF  x40
4B4C:  MOVLW  1E
4B4E:  MOVWF  x41
4B50:  CLRF   x42
4B52:  MOVLB  0
4B54:  CALL   1A52
....................                   displayContrasena(Contrasena[3],80,30,1); 
4B58:  MOVFF  4BA,53F
4B5C:  MOVLW  50
4B5E:  MOVLB  5
4B60:  MOVWF  x40
4B62:  MOVLW  1E
4B64:  MOVWF  x41
4B66:  MOVLW  01
4B68:  MOVWF  x42
4B6A:  MOVLB  0
4B6C:  CALL   1A52
4B70:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4B72:  BSF    F92.5
4B74:  BTFSS  F80.5
4B76:  BRA    4BE0
....................       { 
....................          if(Flanco == 0) 
4B78:  BTFSC  x7C.0
4B7A:  BRA    4BDE
....................          { 
....................             Flanco = 1;delay_ms(30); 
4B7C:  BSF    x7C.0
4B7E:  MOVLW  1E
4B80:  MOVLB  5
4B82:  MOVWF  x42
4B84:  MOVLB  0
4B86:  CALL   1104
....................             for(i=1;i<=4;i++) 
4B8A:  MOVLW  01
4B8C:  MOVLB  4
4B8E:  MOVWF  x8D
4B90:  MOVF   x8D,W
4B92:  SUBLW  04
4B94:  BNC   4BDE
....................             { 
....................                if(unidad==i) 
4B96:  MOVF   x8D,W
4B98:  SUBWF  x8A,W
4B9A:  BNZ   4BDA
....................                { 
....................                   Contrasena[i-1]++; 
4B9C:  MOVLW  01
4B9E:  SUBWF  x8D,W
4BA0:  CLRF   03
4BA2:  ADDLW  B7
4BA4:  MOVWF  FE9
4BA6:  MOVLW  04
4BA8:  ADDWFC 03,W
4BAA:  MOVWF  FEA
4BAC:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
4BAE:  MOVLW  01
4BB0:  SUBWF  x8D,W
4BB2:  CLRF   03
4BB4:  ADDLW  B7
4BB6:  MOVWF  FE9
4BB8:  MOVLW  04
4BBA:  ADDWFC 03,W
4BBC:  MOVWF  FEA
4BBE:  BTFSC  FEF.7
4BC0:  BRA    4BDA
4BC2:  MOVF   FEF,W
4BC4:  SUBLW  09
4BC6:  BC    4BDA
....................                   { 
....................                      Contrasena[i-1]=0; 
4BC8:  MOVLW  01
4BCA:  SUBWF  x8D,W
4BCC:  CLRF   03
4BCE:  ADDLW  B7
4BD0:  MOVWF  FE9
4BD2:  MOVLW  04
4BD4:  ADDWFC 03,W
4BD6:  MOVWF  FEA
4BD8:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4BDA:  INCF   x8D,F
4BDC:  BRA    4B90
....................          } 
....................       } 
....................       else 
4BDE:  BRA    4BE2
....................       { 
....................          Flanco = 0; 
4BE0:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4BE2:  BSF    F96.0
4BE4:  BTFSS  F84.0
4BE6:  BRA    4C4E
....................       { 
....................          if(Flanco2 == 0) 
4BE8:  BTFSC  x7C.2
4BEA:  BRA    4C4C
....................             {Flanco2 = 1;delay_ms(30); 
4BEC:  BSF    x7C.2
4BEE:  MOVLW  1E
4BF0:  MOVLB  5
4BF2:  MOVWF  x42
4BF4:  MOVLB  0
4BF6:  CALL   1104
....................                for(i=1;i<=4;i++) 
4BFA:  MOVLW  01
4BFC:  MOVLB  4
4BFE:  MOVWF  x8D
4C00:  MOVF   x8D,W
4C02:  SUBLW  04
4C04:  BNC   4C4C
....................                { 
....................                   if(unidad==i) 
4C06:  MOVF   x8D,W
4C08:  SUBWF  x8A,W
4C0A:  BNZ   4C48
....................                   {Contrasena[i-1]--;  
4C0C:  MOVLW  01
4C0E:  SUBWF  x8D,W
4C10:  CLRF   03
4C12:  ADDLW  B7
4C14:  MOVWF  FE9
4C16:  MOVLW  04
4C18:  ADDWFC 03,W
4C1A:  MOVWF  FEA
4C1C:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
4C1E:  MOVLW  01
4C20:  SUBWF  x8D,W
4C22:  CLRF   03
4C24:  ADDLW  B7
4C26:  MOVWF  FE9
4C28:  MOVLW  04
4C2A:  ADDWFC 03,W
4C2C:  MOVWF  FEA
4C2E:  BTFSC  FEF.7
4C30:  BRA    4C34
4C32:  BRA    4C48
....................                         {Contrasena[i-1]=9;} 
4C34:  MOVLW  01
4C36:  SUBWF  x8D,W
4C38:  CLRF   03
4C3A:  ADDLW  B7
4C3C:  MOVWF  FE9
4C3E:  MOVLW  04
4C40:  ADDWFC 03,W
4C42:  MOVWF  FEA
4C44:  MOVLW  09
4C46:  MOVWF  FEF
....................                   } 
....................                }       
4C48:  INCF   x8D,F
4C4A:  BRA    4C00
....................             }      
....................       } 
....................       else 
4C4C:  BRA    4C50
....................       { 
....................          Flanco2 = 0; 
4C4E:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4C50:  BSF    F96.1
4C52:  BTFSS  F84.1
4C54:  BRA    4C78
....................       { 
....................          if(Flanco1 == 0) 
4C56:  BTFSC  x7C.1
4C58:  BRA    4C76
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4C5A:  BSF    x7C.1
4C5C:  MOVLW  02
4C5E:  MOVLB  5
4C60:  MOVWF  x3D
4C62:  MOVLW  96
4C64:  MOVWF  x42
4C66:  MOVLB  0
4C68:  CALL   1104
4C6C:  MOVLB  5
4C6E:  DECFSZ x3D,F
4C70:  BRA    4C62
4C72:  MOVLB  4
4C74:  INCF   x8A,F
....................       } 
....................       else 
4C76:  BRA    4C7A
....................       { 
....................          Flanco1 = 0; 
4C78:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4C7A:  BSF    F96.2
4C7C:  BTFSS  F84.2
4C7E:  BRA    4CA8
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
4C80:  MOVLW  04
4C82:  MOVLB  5
4C84:  MOVWF  x3D
4C86:  MOVLW  AF
4C88:  MOVWF  x42
4C8A:  MOVLB  0
4C8C:  CALL   1104
4C90:  MOVLB  5
4C92:  DECFSZ x3D,F
4C94:  BRA    4C86
4C96:  MOVLW  01
4C98:  MOVLB  4
4C9A:  MOVWF  x89
4C9C:  MOVLB  5
4C9E:  CLRF   x3E
4CA0:  MOVLB  0
4CA2:  CALL   11FC
4CA6:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
4CA8:  MOVF   x8A,W
4CAA:  SUBLW  04
4CAC:  BTFSC  FD8.0
4CAE:  BRA    4E54
....................       {glcd_fillScreen(OFF); 
4CB0:  MOVLB  5
4CB2:  CLRF   x3E
4CB4:  MOVLB  0
4CB6:  CALL   11FC
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
4CBA:  MOVLB  4
4CBC:  MOVF   xBB,W
4CBE:  SUBWF  xB7,W
4CC0:  BNZ   4D92
4CC2:  MOVF   xBC,W
4CC4:  SUBWF  xB8,W
4CC6:  BNZ   4D92
4CC8:  MOVF   xBD,W
4CCA:  SUBWF  xB9,W
4CCC:  BNZ   4D92
4CCE:  MOVF   xBE,W
4CD0:  SUBWF  xBA,W
4CD2:  BNZ   4D92
....................          { 
....................             glcd_fillScreen(OFF); 
4CD4:  MOVLB  5
4CD6:  CLRF   x3E
4CD8:  MOVLB  0
4CDA:  CALL   11FC
....................             strcpy(Menus.Letra,"Clave"); 
4CDE:  MOVLW  05
4CE0:  MOVWF  FEA
4CE2:  MOVLW  1D
4CE4:  MOVWF  FE9
4CE6:  MOVFF  FF2,53D
4CEA:  BCF    FF2.7
4CEC:  MOVLW  00
4CEE:  CALL   0786
4CF2:  TBLRD*-
4CF4:  TBLRD*+
4CF6:  MOVF   FF5,W
4CF8:  MOVWF  FEE
4CFA:  IORLW  00
4CFC:  BNZ   4CF4
4CFE:  MOVLB  5
4D00:  BTFSC  x3D.7
4D02:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4D04:  MOVLW  05
4D06:  MOVWF  x3E
4D08:  MOVLW  1D
4D0A:  MOVWF  x3D
4D0C:  MOVLW  1E
4D0E:  MOVWF  x3F
4D10:  CLRF   x40
4D12:  CLRF   x41
4D14:  MOVLW  02
4D16:  MOVWF  x42
4D18:  MOVLB  0
4D1A:  CALL   182C
....................             strcpy(Menus.Letra,"Correcta"); 
4D1E:  MOVLW  05
4D20:  MOVWF  FEA
4D22:  MOVLW  1D
4D24:  MOVWF  FE9
4D26:  MOVFF  FF2,53D
4D2A:  BCF    FF2.7
4D2C:  MOVLW  00
4D2E:  CALL   07A6
4D32:  TBLRD*-
4D34:  TBLRD*+
4D36:  MOVF   FF5,W
4D38:  MOVWF  FEE
4D3A:  IORLW  00
4D3C:  BNZ   4D34
4D3E:  MOVLB  5
4D40:  BTFSC  x3D.7
4D42:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
4D44:  MOVLW  05
4D46:  MOVWF  x3E
4D48:  MOVLW  1D
4D4A:  MOVWF  x3D
4D4C:  MOVLW  0F
4D4E:  MOVWF  x3F
4D50:  MOVLW  1E
4D52:  MOVWF  x40
4D54:  CLRF   x41
4D56:  MOVLW  02
4D58:  MOVWF  x42
4D5A:  MOVLB  0
4D5C:  CALL   182C
....................             Menu=91;glcd_update();delay_ms(1000); 
4D60:  MOVLW  5B
4D62:  MOVLB  4
4D64:  MOVWF  x89
4D66:  MOVLB  0
4D68:  CALL   1256
4D6C:  MOVLW  04
4D6E:  MOVLB  5
4D70:  MOVWF  x3D
4D72:  MOVLW  FA
4D74:  MOVWF  x42
4D76:  MOVLB  0
4D78:  CALL   1104
4D7C:  MOVLB  5
4D7E:  DECFSZ x3D,F
4D80:  BRA    4D72
....................             glcd_fillScreen(OFF);unidad=1; 
4D82:  CLRF   x3E
4D84:  MOVLB  0
4D86:  CALL   11FC
4D8A:  MOVLW  01
4D8C:  MOVLB  4
4D8E:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
4D90:  BRA    4E54
....................          { 
....................             glcd_fillScreen(OFF); 
4D92:  MOVLB  5
4D94:  CLRF   x3E
4D96:  MOVLB  0
4D98:  CALL   11FC
....................             strcpy(Menus.Letra,"Clave"); 
4D9C:  MOVLW  05
4D9E:  MOVWF  FEA
4DA0:  MOVLW  1D
4DA2:  MOVWF  FE9
4DA4:  MOVFF  FF2,53D
4DA8:  BCF    FF2.7
4DAA:  MOVLW  00
4DAC:  CALL   0786
4DB0:  TBLRD*-
4DB2:  TBLRD*+
4DB4:  MOVF   FF5,W
4DB6:  MOVWF  FEE
4DB8:  IORLW  00
4DBA:  BNZ   4DB2
4DBC:  MOVLB  5
4DBE:  BTFSC  x3D.7
4DC0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4DC2:  MOVLW  05
4DC4:  MOVWF  x3E
4DC6:  MOVLW  1D
4DC8:  MOVWF  x3D
4DCA:  MOVLW  1E
4DCC:  MOVWF  x3F
4DCE:  CLRF   x40
4DD0:  CLRF   x41
4DD2:  MOVLW  02
4DD4:  MOVWF  x42
4DD6:  MOVLB  0
4DD8:  CALL   182C
....................             strcpy(Menus.Letra,"Incorrecta"); 
4DDC:  MOVLW  05
4DDE:  MOVWF  FEA
4DE0:  MOVLW  1D
4DE2:  MOVWF  FE9
4DE4:  MOVFF  FF2,53D
4DE8:  BCF    FF2.7
4DEA:  MOVLW  00
4DEC:  CALL   07CA
4DF0:  TBLRD*-
4DF2:  TBLRD*+
4DF4:  MOVF   FF5,W
4DF6:  MOVWF  FEE
4DF8:  IORLW  00
4DFA:  BNZ   4DF2
4DFC:  MOVLB  5
4DFE:  BTFSC  x3D.7
4E00:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
4E02:  MOVLW  05
4E04:  MOVWF  x3E
4E06:  MOVLW  1D
4E08:  MOVWF  x3D
4E0A:  CLRF   x3F
4E0C:  MOVLW  1E
4E0E:  MOVWF  x40
4E10:  CLRF   x41
4E12:  MOVLW  02
4E14:  MOVWF  x42
4E16:  MOVLB  0
4E18:  CALL   182C
....................             Menu=1;glcd_update();delay_ms(1000); 
4E1C:  MOVLW  01
4E1E:  MOVLB  4
4E20:  MOVWF  x89
4E22:  MOVLB  0
4E24:  CALL   1256
4E28:  MOVLW  04
4E2A:  MOVLB  5
4E2C:  MOVWF  x3D
4E2E:  MOVLW  FA
4E30:  MOVWF  x42
4E32:  MOVLB  0
4E34:  CALL   1104
4E38:  MOVLB  5
4E3A:  DECFSZ x3D,F
4E3C:  BRA    4E2E
....................             glcd_fillScreen(OFF);unidad=1; 
4E3E:  CLRF   x3E
4E40:  MOVLB  0
4E42:  CALL   11FC
4E46:  MOVLW  01
4E48:  MOVLB  4
4E4A:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
4E4C:  CLRF   xB7
4E4E:  CLRF   xB8
4E50:  CLRF   xB9
4E52:  CLRF   xBA
....................          } 
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==91){ // Menu de Cambio de Contraseña 
4E54:  MOVF   x89,W
4E56:  SUBLW  5B
4E58:  BTFSS  FD8.2
4E5A:  BRA    5234
....................          
....................       strcpy(Menus.Letra,"Clave Nueva"); 
4E5C:  MOVLW  05
4E5E:  MOVWF  FEA
4E60:  MOVLW  1D
4E62:  MOVWF  FE9
4E64:  MOVFF  FF2,53D
4E68:  BCF    FF2.7
4E6A:  MOVLW  00
4E6C:  MOVLB  0
4E6E:  CALL   0C0E
4E72:  TBLRD*-
4E74:  TBLRD*+
4E76:  MOVF   FF5,W
4E78:  MOVWF  FEE
4E7A:  IORLW  00
4E7C:  BNZ   4E74
4E7E:  MOVLB  5
4E80:  BTFSC  x3D.7
4E82:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2);      
4E84:  MOVLW  05
4E86:  MOVWF  x3E
4E88:  MOVLW  1D
4E8A:  MOVWF  x3D
4E8C:  CLRF   x3F
4E8E:  CLRF   x40
4E90:  MOVLW  01
4E92:  MOVWF  x41
4E94:  MOVLW  02
4E96:  MOVWF  x42
4E98:  MOVLB  0
4E9A:  CALL   182C
....................        
....................       if(unidad==1) 
4E9E:  MOVLB  4
4EA0:  DECFSZ x8A,W
4EA2:  BRA    4F02
....................       { 
....................          displayContrasena(Password[0],20,30,1); 
4EA4:  MOVFF  4BB,53F
4EA8:  MOVLW  14
4EAA:  MOVLB  5
4EAC:  MOVWF  x40
4EAE:  MOVLW  1E
4EB0:  MOVWF  x41
4EB2:  MOVLW  01
4EB4:  MOVWF  x42
4EB6:  MOVLB  0
4EB8:  CALL   1A52
....................          displayContrasena(Password[1],40,30,0); 
4EBC:  MOVFF  4BC,53F
4EC0:  MOVLW  28
4EC2:  MOVLB  5
4EC4:  MOVWF  x40
4EC6:  MOVLW  1E
4EC8:  MOVWF  x41
4ECA:  CLRF   x42
4ECC:  MOVLB  0
4ECE:  CALL   1A52
....................          displayContrasena(Password[2],60,30,0); 
4ED2:  MOVFF  4BD,53F
4ED6:  MOVLW  3C
4ED8:  MOVLB  5
4EDA:  MOVWF  x40
4EDC:  MOVLW  1E
4EDE:  MOVWF  x41
4EE0:  CLRF   x42
4EE2:  MOVLB  0
4EE4:  CALL   1A52
....................          displayContrasena(Password[3],80,30,0); 
4EE8:  MOVFF  4BE,53F
4EEC:  MOVLW  50
4EEE:  MOVLB  5
4EF0:  MOVWF  x40
4EF2:  MOVLW  1E
4EF4:  MOVWF  x41
4EF6:  CLRF   x42
4EF8:  MOVLB  0
4EFA:  CALL   1A52
....................       } 
....................       else 
4EFE:  BRA    502A
4F00:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4F02:  MOVF   x8A,W
4F04:  SUBLW  02
4F06:  BNZ   4F66
....................          { 
....................             displayContrasena(Password[0],20,30,0); 
4F08:  MOVFF  4BB,53F
4F0C:  MOVLW  14
4F0E:  MOVLB  5
4F10:  MOVWF  x40
4F12:  MOVLW  1E
4F14:  MOVWF  x41
4F16:  CLRF   x42
4F18:  MOVLB  0
4F1A:  CALL   1A52
....................             displayContrasena(Password[1],40,30,1); 
4F1E:  MOVFF  4BC,53F
4F22:  MOVLW  28
4F24:  MOVLB  5
4F26:  MOVWF  x40
4F28:  MOVLW  1E
4F2A:  MOVWF  x41
4F2C:  MOVLW  01
4F2E:  MOVWF  x42
4F30:  MOVLB  0
4F32:  CALL   1A52
....................             displayContrasena(Password[2],60,30,0); 
4F36:  MOVFF  4BD,53F
4F3A:  MOVLW  3C
4F3C:  MOVLB  5
4F3E:  MOVWF  x40
4F40:  MOVLW  1E
4F42:  MOVWF  x41
4F44:  CLRF   x42
4F46:  MOVLB  0
4F48:  CALL   1A52
....................             displayContrasena(Password[3],80,30,0); 
4F4C:  MOVFF  4BE,53F
4F50:  MOVLW  50
4F52:  MOVLB  5
4F54:  MOVWF  x40
4F56:  MOVLW  1E
4F58:  MOVWF  x41
4F5A:  CLRF   x42
4F5C:  MOVLB  0
4F5E:  CALL   1A52
....................          } 
....................          else 
4F62:  BRA    502A
4F64:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4F66:  MOVF   x8A,W
4F68:  SUBLW  03
4F6A:  BNZ   4FCA
....................             { 
....................                displayContrasena(Password[0],20,30,0); 
4F6C:  MOVFF  4BB,53F
4F70:  MOVLW  14
4F72:  MOVLB  5
4F74:  MOVWF  x40
4F76:  MOVLW  1E
4F78:  MOVWF  x41
4F7A:  CLRF   x42
4F7C:  MOVLB  0
4F7E:  CALL   1A52
....................                displayContrasena(Password[1],40,30,0); 
4F82:  MOVFF  4BC,53F
4F86:  MOVLW  28
4F88:  MOVLB  5
4F8A:  MOVWF  x40
4F8C:  MOVLW  1E
4F8E:  MOVWF  x41
4F90:  CLRF   x42
4F92:  MOVLB  0
4F94:  CALL   1A52
....................                displayContrasena(Password[2],60,30,1); 
4F98:  MOVFF  4BD,53F
4F9C:  MOVLW  3C
4F9E:  MOVLB  5
4FA0:  MOVWF  x40
4FA2:  MOVLW  1E
4FA4:  MOVWF  x41
4FA6:  MOVLW  01
4FA8:  MOVWF  x42
4FAA:  MOVLB  0
4FAC:  CALL   1A52
....................                displayContrasena(Password[3],80,30,0); 
4FB0:  MOVFF  4BE,53F
4FB4:  MOVLW  50
4FB6:  MOVLB  5
4FB8:  MOVWF  x40
4FBA:  MOVLW  1E
4FBC:  MOVWF  x41
4FBE:  CLRF   x42
4FC0:  MOVLB  0
4FC2:  CALL   1A52
....................             } 
....................             else 
4FC6:  BRA    502A
4FC8:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4FCA:  MOVF   x8A,W
4FCC:  SUBLW  04
4FCE:  BNZ   502C
....................                { 
....................                   displayContrasena(Password[0],20,30,0); 
4FD0:  MOVFF  4BB,53F
4FD4:  MOVLW  14
4FD6:  MOVLB  5
4FD8:  MOVWF  x40
4FDA:  MOVLW  1E
4FDC:  MOVWF  x41
4FDE:  CLRF   x42
4FE0:  MOVLB  0
4FE2:  CALL   1A52
....................                   displayContrasena(Password[1],40,30,0); 
4FE6:  MOVFF  4BC,53F
4FEA:  MOVLW  28
4FEC:  MOVLB  5
4FEE:  MOVWF  x40
4FF0:  MOVLW  1E
4FF2:  MOVWF  x41
4FF4:  CLRF   x42
4FF6:  MOVLB  0
4FF8:  CALL   1A52
....................                   displayContrasena(Password[2],60,30,0); 
4FFC:  MOVFF  4BD,53F
5000:  MOVLW  3C
5002:  MOVLB  5
5004:  MOVWF  x40
5006:  MOVLW  1E
5008:  MOVWF  x41
500A:  CLRF   x42
500C:  MOVLB  0
500E:  CALL   1A52
....................                   displayContrasena(Password[3],80,30,1); 
5012:  MOVFF  4BE,53F
5016:  MOVLW  50
5018:  MOVLB  5
501A:  MOVWF  x40
501C:  MOVLW  1E
501E:  MOVWF  x41
5020:  MOVLW  01
5022:  MOVWF  x42
5024:  MOVLB  0
5026:  CALL   1A52
502A:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
502C:  BSF    F92.5
502E:  BTFSS  F80.5
5030:  BRA    509A
....................       { 
....................          if(Flanco == 0) 
5032:  BTFSC  x7C.0
5034:  BRA    5098
....................          { 
....................             Flanco = 1;delay_ms(30); 
5036:  BSF    x7C.0
5038:  MOVLW  1E
503A:  MOVLB  5
503C:  MOVWF  x42
503E:  MOVLB  0
5040:  CALL   1104
....................             for(i=1;i<=4;i++) 
5044:  MOVLW  01
5046:  MOVLB  4
5048:  MOVWF  x8D
504A:  MOVF   x8D,W
504C:  SUBLW  04
504E:  BNC   5098
....................             { 
....................                if(unidad==i) 
5050:  MOVF   x8D,W
5052:  SUBWF  x8A,W
5054:  BNZ   5094
....................                { 
....................                   Password[i-1]++; 
5056:  MOVLW  01
5058:  SUBWF  x8D,W
505A:  CLRF   03
505C:  ADDLW  BB
505E:  MOVWF  FE9
5060:  MOVLW  04
5062:  ADDWFC 03,W
5064:  MOVWF  FEA
5066:  INCF   FEF,F
....................                   if(Password[i-1]>9)    
5068:  MOVLW  01
506A:  SUBWF  x8D,W
506C:  CLRF   03
506E:  ADDLW  BB
5070:  MOVWF  FE9
5072:  MOVLW  04
5074:  ADDWFC 03,W
5076:  MOVWF  FEA
5078:  BTFSC  FEF.7
507A:  BRA    5094
507C:  MOVF   FEF,W
507E:  SUBLW  09
5080:  BC    5094
....................                   { 
....................                      Password[i-1]=0; 
5082:  MOVLW  01
5084:  SUBWF  x8D,W
5086:  CLRF   03
5088:  ADDLW  BB
508A:  MOVWF  FE9
508C:  MOVLW  04
508E:  ADDWFC 03,W
5090:  MOVWF  FEA
5092:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
5094:  INCF   x8D,F
5096:  BRA    504A
....................          } 
....................       } 
....................       else 
5098:  BRA    509C
....................       { 
....................          Flanco = 0; 
509A:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
509C:  BSF    F96.0
509E:  BTFSS  F84.0
50A0:  BRA    5108
....................       { 
....................          if(Flanco2 == 0) 
50A2:  BTFSC  x7C.2
50A4:  BRA    5106
....................             {Flanco2 = 1;delay_ms(30); 
50A6:  BSF    x7C.2
50A8:  MOVLW  1E
50AA:  MOVLB  5
50AC:  MOVWF  x42
50AE:  MOVLB  0
50B0:  CALL   1104
....................                for(i=1;i<=4;i++) 
50B4:  MOVLW  01
50B6:  MOVLB  4
50B8:  MOVWF  x8D
50BA:  MOVF   x8D,W
50BC:  SUBLW  04
50BE:  BNC   5106
....................                { 
....................                   if(unidad==i) 
50C0:  MOVF   x8D,W
50C2:  SUBWF  x8A,W
50C4:  BNZ   5102
....................                   { 
....................                      Password[i-1]--; 
50C6:  MOVLW  01
50C8:  SUBWF  x8D,W
50CA:  CLRF   03
50CC:  ADDLW  BB
50CE:  MOVWF  FE9
50D0:  MOVLW  04
50D2:  ADDWFC 03,W
50D4:  MOVWF  FEA
50D6:  DECF   FEF,F
....................                      if(Password[i-1]<0) 
50D8:  MOVLW  01
50DA:  SUBWF  x8D,W
50DC:  CLRF   03
50DE:  ADDLW  BB
50E0:  MOVWF  FE9
50E2:  MOVLW  04
50E4:  ADDWFC 03,W
50E6:  MOVWF  FEA
50E8:  BTFSC  FEF.7
50EA:  BRA    50EE
50EC:  BRA    5102
....................                      { 
....................                         Password[i-1]=9; 
50EE:  MOVLW  01
50F0:  SUBWF  x8D,W
50F2:  CLRF   03
50F4:  ADDLW  BB
50F6:  MOVWF  FE9
50F8:  MOVLW  04
50FA:  ADDWFC 03,W
50FC:  MOVWF  FEA
50FE:  MOVLW  09
5100:  MOVWF  FEF
....................                      } 
....................                   } 
....................                }       
5102:  INCF   x8D,F
5104:  BRA    50BA
....................             }      
....................       } 
....................       else 
5106:  BRA    510A
....................       { 
....................          Flanco2 = 0; 
5108:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
510A:  BSF    F96.1
510C:  BTFSS  F84.1
510E:  BRA    5132
....................       { 
....................          if(Flanco1 == 0) 
5110:  BTFSC  x7C.1
5112:  BRA    5130
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
5114:  BSF    x7C.1
5116:  MOVLW  02
5118:  MOVLB  5
511A:  MOVWF  x3D
511C:  MOVLW  96
511E:  MOVWF  x42
5120:  MOVLB  0
5122:  CALL   1104
5126:  MOVLB  5
5128:  DECFSZ x3D,F
512A:  BRA    511C
512C:  MOVLB  4
512E:  INCF   x8A,F
....................       } 
....................       else 
5130:  BRA    5134
....................       { 
....................          Flanco1 = 0; 
5132:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
5134:  BSF    F96.2
5136:  BTFSS  F84.2
5138:  BRA    5162
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
513A:  MOVLW  04
513C:  MOVLB  5
513E:  MOVWF  x3D
5140:  MOVLW  AF
5142:  MOVWF  x42
5144:  MOVLB  0
5146:  CALL   1104
514A:  MOVLB  5
514C:  DECFSZ x3D,F
514E:  BRA    5140
5150:  MOVLW  01
5152:  MOVLB  4
5154:  MOVWF  x89
5156:  MOVLB  5
5158:  CLRF   x3E
515A:  MOVLB  0
515C:  CALL   11FC
5160:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
5162:  MOVF   x8A,W
5164:  SUBLW  04
5166:  BC    5234
....................       { 
....................          Opcion=1;unidad=1; 
5168:  MOVLW  01
516A:  MOVWF  x90
516C:  MOVWF  x8A
....................          write_eeprom(10,Password[0]);write_eeprom(11,Password[1]);write_eeprom(12,Password[2]);write_eeprom(13,Password[3]); 
516E:  MOVLW  0A
5170:  MOVWF  FA9
5172:  MOVFF  4BB,FA8
5176:  BCF    FA6.6
5178:  BCF    FA6.7
517A:  BSF    FA6.2
517C:  MOVF   FF2,W
517E:  MOVWF  00
5180:  BCF    FF2.7
5182:  MOVLB  F
5184:  MOVLW  55
5186:  MOVWF  FA7
5188:  MOVLW  AA
518A:  MOVWF  FA7
518C:  BSF    FA6.1
518E:  BTFSC  FA6.1
5190:  BRA    518E
5192:  BCF    FA6.2
5194:  MOVF   00,W
5196:  IORWF  FF2,F
5198:  MOVLW  0B
519A:  MOVWF  FA9
519C:  MOVFF  4BC,FA8
51A0:  BCF    FA6.6
51A2:  BCF    FA6.7
51A4:  BSF    FA6.2
51A6:  MOVF   FF2,W
51A8:  MOVWF  00
51AA:  BCF    FF2.7
51AC:  MOVLW  55
51AE:  MOVWF  FA7
51B0:  MOVLW  AA
51B2:  MOVWF  FA7
51B4:  BSF    FA6.1
51B6:  BTFSC  FA6.1
51B8:  BRA    51B6
51BA:  BCF    FA6.2
51BC:  MOVF   00,W
51BE:  IORWF  FF2,F
51C0:  MOVLW  0C
51C2:  MOVWF  FA9
51C4:  MOVFF  4BD,FA8
51C8:  BCF    FA6.6
51CA:  BCF    FA6.7
51CC:  BSF    FA6.2
51CE:  MOVF   FF2,W
51D0:  MOVWF  00
51D2:  BCF    FF2.7
51D4:  MOVLW  55
51D6:  MOVWF  FA7
51D8:  MOVLW  AA
51DA:  MOVWF  FA7
51DC:  BSF    FA6.1
51DE:  BTFSC  FA6.1
51E0:  BRA    51DE
51E2:  BCF    FA6.2
51E4:  MOVF   00,W
51E6:  IORWF  FF2,F
51E8:  MOVLW  0D
51EA:  MOVWF  FA9
51EC:  MOVFF  4BE,FA8
51F0:  BCF    FA6.6
51F2:  BCF    FA6.7
51F4:  BSF    FA6.2
51F6:  MOVF   FF2,W
51F8:  MOVWF  00
51FA:  BCF    FF2.7
51FC:  MOVLW  55
51FE:  MOVWF  FA7
5200:  MOVLW  AA
5202:  MOVWF  FA7
5204:  BSF    FA6.1
5206:  BTFSC  FA6.1
5208:  BRA    5206
520A:  BCF    FA6.2
520C:  MOVF   00,W
520E:  IORWF  FF2,F
....................          delay_ms(1000);glcd_fillScreen(OFF);Menu=1; 
5210:  MOVLW  04
5212:  MOVLB  5
5214:  MOVWF  x3D
5216:  MOVLW  FA
5218:  MOVWF  x42
521A:  MOVLB  0
521C:  CALL   1104
5220:  MOVLB  5
5222:  DECFSZ x3D,F
5224:  BRA    5216
5226:  CLRF   x3E
5228:  MOVLB  0
522A:  CALL   11FC
522E:  MOVLW  01
5230:  MOVLB  4
5232:  MOVWF  x89
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==11){ // Menu de Tiempo de Esterilización 
5234:  MOVF   x89,W
5236:  SUBLW  0B
5238:  BTFSS  FD8.2
523A:  BRA    553C
....................       
....................       if(visual==1) 
523C:  BTFSS  x7C.4
523E:  BRA    53CA
....................       { 
....................          if(unidad<1) 
5240:  MOVF   x8A,F
5242:  BNZ   5248
....................          {unidad=4;} 
5244:  MOVLW  04
5246:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra,"T. Ester."); 
5248:  MOVLW  05
524A:  MOVWF  FEA
524C:  MOVLW  1D
524E:  MOVWF  FE9
5250:  MOVFF  FF2,53D
5254:  BCF    FF2.7
5256:  MOVLW  00
5258:  MOVLB  0
525A:  CALL   0C34
525E:  TBLRD*-
5260:  TBLRD*+
5262:  MOVF   FF5,W
5264:  MOVWF  FEE
5266:  IORLW  00
5268:  BNZ   5260
526A:  MOVLB  5
526C:  BTFSC  x3D.7
526E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5270:  MOVLW  05
5272:  MOVWF  x3E
5274:  MOVLW  1D
5276:  MOVWF  x3D
5278:  CLRF   x3F
527A:  CLRF   x40
527C:  MOVLW  01
527E:  MOVWF  x41
5280:  MOVLW  02
5282:  MOVWF  x42
5284:  MOVLB  0
5286:  CALL   182C
....................           
....................          if(unidad==4) 
528A:  MOVLB  4
528C:  MOVF   x8A,W
528E:  SUBLW  04
5290:  BNZ   52B0
....................          {displayTiempo(Testerilizacionp[3],20,40,1,2);} 
5292:  MOVFF  4AE,53E
5296:  MOVLW  14
5298:  MOVLB  5
529A:  MOVWF  x3F
529C:  MOVLW  28
529E:  MOVWF  x40
52A0:  MOVLW  01
52A2:  MOVWF  x41
52A4:  MOVLW  02
52A6:  MOVWF  x42
52A8:  MOVLB  0
52AA:  CALL   240E
....................          else 
52AE:  BRA    52CA
....................          {displayTiempo(Testerilizacionp[3],20,40,0,2);} 
52B0:  MOVFF  4AE,53E
52B4:  MOVLW  14
52B6:  MOVLB  5
52B8:  MOVWF  x3F
52BA:  MOVLW  28
52BC:  MOVWF  x40
52BE:  CLRF   x41
52C0:  MOVLW  02
52C2:  MOVWF  x42
52C4:  MOVLB  0
52C6:  CALL   240E
....................           
....................          if(unidad==3) 
52CA:  MOVLB  4
52CC:  MOVF   x8A,W
52CE:  SUBLW  03
52D0:  BNZ   52EE
....................          {displayTiempo(Testerilizacionp[2],40,40,1,2);} 
52D2:  MOVFF  4AD,53E
52D6:  MOVLW  28
52D8:  MOVLB  5
52DA:  MOVWF  x3F
52DC:  MOVWF  x40
52DE:  MOVLW  01
52E0:  MOVWF  x41
52E2:  MOVLW  02
52E4:  MOVWF  x42
52E6:  MOVLB  0
52E8:  CALL   240E
....................          else 
52EC:  BRA    5306
....................          {displayTiempo(Testerilizacionp[2],40,40,0,2);} 
52EE:  MOVFF  4AD,53E
52F2:  MOVLW  28
52F4:  MOVLB  5
52F6:  MOVWF  x3F
52F8:  MOVWF  x40
52FA:  CLRF   x41
52FC:  MOVLW  02
52FE:  MOVWF  x42
5300:  MOVLB  0
5302:  CALL   240E
....................           
....................          if(unidad==2) 
5306:  MOVLB  4
5308:  MOVF   x8A,W
530A:  SUBLW  02
530C:  BNZ   532C
....................          {displayTiempo(Testerilizacionp[1],70,40,1,2);} 
530E:  MOVFF  4AC,53E
5312:  MOVLW  46
5314:  MOVLB  5
5316:  MOVWF  x3F
5318:  MOVLW  28
531A:  MOVWF  x40
531C:  MOVLW  01
531E:  MOVWF  x41
5320:  MOVLW  02
5322:  MOVWF  x42
5324:  MOVLB  0
5326:  CALL   240E
....................          else 
532A:  BRA    5346
....................          {displayTiempo(Testerilizacionp[1],70,40,0,2);} 
532C:  MOVFF  4AC,53E
5330:  MOVLW  46
5332:  MOVLB  5
5334:  MOVWF  x3F
5336:  MOVLW  28
5338:  MOVWF  x40
533A:  CLRF   x41
533C:  MOVLW  02
533E:  MOVWF  x42
5340:  MOVLB  0
5342:  CALL   240E
....................           
....................          if(unidad==1) 
5346:  MOVLB  4
5348:  DECFSZ x8A,W
534A:  BRA    536A
....................          {displayTiempo(Testerilizacionp[0],90,40,1,2);} 
534C:  MOVFF  4AB,53E
5350:  MOVLW  5A
5352:  MOVLB  5
5354:  MOVWF  x3F
5356:  MOVLW  28
5358:  MOVWF  x40
535A:  MOVLW  01
535C:  MOVWF  x41
535E:  MOVLW  02
5360:  MOVWF  x42
5362:  MOVLB  0
5364:  CALL   240E
....................          else 
5368:  BRA    5384
....................          {displayTiempo(Testerilizacionp[0],90,40,0,2);} 
536A:  MOVFF  4AB,53E
536E:  MOVLW  5A
5370:  MOVLB  5
5372:  MOVWF  x3F
5374:  MOVLW  28
5376:  MOVWF  x40
5378:  CLRF   x41
537A:  MOVLW  02
537C:  MOVWF  x42
537E:  MOVLB  0
5380:  CALL   240E
....................           
....................          strcpy(Menus.Letra,":"); 
5384:  MOVLW  05
5386:  MOVWF  FEA
5388:  MOVLW  1D
538A:  MOVWF  FE9
538C:  MOVFF  FF2,53D
5390:  BCF    FF2.7
5392:  MOVLW  00
5394:  CALL   06CA
5398:  TBLRD*-
539A:  TBLRD*+
539C:  MOVF   FF5,W
539E:  MOVWF  FEE
53A0:  IORLW  00
53A2:  BNZ   539A
53A4:  MOVLB  5
53A6:  BTFSC  x3D.7
53A8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);      
53AA:  MOVLW  05
53AC:  MOVWF  x3E
53AE:  MOVLW  1D
53B0:  MOVWF  x3D
53B2:  MOVLW  3C
53B4:  MOVWF  x3F
53B6:  MOVLW  2A
53B8:  MOVWF  x40
53BA:  MOVLW  02
53BC:  MOVWF  x41
53BE:  MOVWF  x42
53C0:  MOVLB  0
53C2:  CALL   182C
....................           
....................          visual=0; 
53C6:  MOVLB  4
53C8:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
53CA:  BSF    F92.5
53CC:  BTFSS  F80.5
53CE:  BRA    540C
....................          {   
....................             if(Testerilizacionp[unidad-1]<9) 
53D0:  MOVLW  01
53D2:  SUBWF  x8A,W
53D4:  CLRF   03
53D6:  ADDLW  AB
53D8:  MOVWF  FE9
53DA:  MOVLW  04
53DC:  ADDWFC 03,W
53DE:  MOVWF  FEA
53E0:  BTFSC  FEF.7
53E2:  BRA    53EA
53E4:  MOVF   FEF,W
53E6:  SUBLW  08
53E8:  BNC   540C
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]++;visual=1; 
53EA:  MOVLW  1E
53EC:  MOVLB  5
53EE:  MOVWF  x42
53F0:  MOVLB  0
53F2:  CALL   1104
53F6:  MOVLW  01
53F8:  MOVLB  4
53FA:  SUBWF  x8A,W
53FC:  CLRF   03
53FE:  ADDLW  AB
5400:  MOVWF  FE9
5402:  MOVLW  04
5404:  ADDWFC 03,W
5406:  MOVWF  FEA
5408:  INCF   FEF,F
540A:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
540C:  BSF    F96.0
540E:  BTFSS  F84.0
5410:  BRA    544E
....................          {   
....................             if(Testerilizacionp[unidad-1]>0) 
5412:  MOVLW  01
5414:  SUBWF  x8A,W
5416:  CLRF   03
5418:  ADDLW  AB
541A:  MOVWF  FE9
541C:  MOVLW  04
541E:  ADDWFC 03,W
5420:  MOVWF  FEA
5422:  BTFSC  FEF.7
5424:  BRA    544E
5426:  MOVF   FEF,W
5428:  SUBLW  00
542A:  BC    544E
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]--;visual=1;      
542C:  MOVLW  1E
542E:  MOVLB  5
5430:  MOVWF  x42
5432:  MOVLB  0
5434:  CALL   1104
5438:  MOVLW  01
543A:  MOVLB  4
543C:  SUBWF  x8A,W
543E:  CLRF   03
5440:  ADDLW  AB
5442:  MOVWF  FE9
5444:  MOVLW  04
5446:  ADDWFC 03,W
5448:  MOVWF  FEA
544A:  DECF   FEF,F
544C:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
544E:  BSF    F96.1
5450:  BTFSS  F84.1
5452:  BRA    5466
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
5454:  MOVLW  1E
5456:  MOVLB  5
5458:  MOVWF  x42
545A:  MOVLB  0
545C:  CALL   1104
5460:  MOVLB  4
5462:  DECF   x8A,F
5464:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5466:  BSF    F96.2
5468:  BTFSS  F84.2
546A:  BRA    553C
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
546C:  MOVLW  04
546E:  MOVLB  5
5470:  MOVWF  x3D
5472:  MOVLW  AF
5474:  MOVWF  x42
5476:  MOVLB  0
5478:  CALL   1104
547C:  MOVLB  5
547E:  DECFSZ x3D,F
5480:  BRA    5472
5482:  MOVLW  08
5484:  MOVLB  4
5486:  MOVWF  x89
5488:  MOVLB  5
548A:  CLRF   x3E
548C:  MOVLB  0
548E:  CALL   11FC
5492:  MOVLW  01
5494:  MOVLB  4
5496:  MOVWF  x90
5498:  BSF    x7C.4
....................             write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]); 
549A:  CLRF   FA9
549C:  MOVFF  4AB,FA8
54A0:  BCF    FA6.6
54A2:  BCF    FA6.7
54A4:  BSF    FA6.2
54A6:  MOVF   FF2,W
54A8:  MOVWF  00
54AA:  BCF    FF2.7
54AC:  MOVLB  F
54AE:  MOVLW  55
54B0:  MOVWF  FA7
54B2:  MOVLW  AA
54B4:  MOVWF  FA7
54B6:  BSF    FA6.1
54B8:  BTFSC  FA6.1
54BA:  BRA    54B8
54BC:  BCF    FA6.2
54BE:  MOVF   00,W
54C0:  IORWF  FF2,F
54C2:  MOVLW  01
54C4:  MOVWF  FA9
54C6:  MOVFF  4AC,FA8
54CA:  BCF    FA6.6
54CC:  BCF    FA6.7
54CE:  BSF    FA6.2
54D0:  MOVF   FF2,W
54D2:  MOVWF  00
54D4:  BCF    FF2.7
54D6:  MOVLW  55
54D8:  MOVWF  FA7
54DA:  MOVLW  AA
54DC:  MOVWF  FA7
54DE:  BSF    FA6.1
54E0:  BTFSC  FA6.1
54E2:  BRA    54E0
54E4:  BCF    FA6.2
54E6:  MOVF   00,W
54E8:  IORWF  FF2,F
....................             write_eeprom(2,Testerilizacionp[2]);write_eeprom(3,Testerilizacionp[3]); 
54EA:  MOVLW  02
54EC:  MOVWF  FA9
54EE:  MOVFF  4AD,FA8
54F2:  BCF    FA6.6
54F4:  BCF    FA6.7
54F6:  BSF    FA6.2
54F8:  MOVFF  FF2,00
54FC:  BCF    FF2.7
54FE:  MOVLW  55
5500:  MOVWF  FA7
5502:  MOVLW  AA
5504:  MOVWF  FA7
5506:  BSF    FA6.1
5508:  BTFSC  FA6.1
550A:  BRA    5508
550C:  BCF    FA6.2
550E:  MOVF   00,W
5510:  IORWF  FF2,F
5512:  MOVLW  03
5514:  MOVWF  FA9
5516:  MOVFF  4AE,FA8
551A:  BCF    FA6.6
551C:  BCF    FA6.7
551E:  BSF    FA6.2
5520:  MOVFF  FF2,00
5524:  BCF    FF2.7
5526:  MOVLW  55
5528:  MOVWF  FA7
552A:  MOVLW  AA
552C:  MOVWF  FA7
552E:  BSF    FA6.1
5530:  BTFSC  FA6.1
5532:  BRA    5530
5534:  BCF    FA6.2
5536:  MOVF   00,W
5538:  IORWF  FF2,F
553A:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==12){ // Menu de Tiempo de Secado 
553C:  MOVF   x89,W
553E:  SUBLW  0C
5540:  BTFSS  FD8.2
5542:  BRA    5846
....................       
....................       if(visual==1) 
5544:  BTFSS  x7C.4
5546:  BRA    56D2
....................       { 
....................          if(unidad<1) 
5548:  MOVF   x8A,F
554A:  BNZ   5550
....................          {unidad=4;} 
554C:  MOVLW  04
554E:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra," Secado"); 
5550:  MOVLW  05
5552:  MOVWF  FEA
5554:  MOVLW  1D
5556:  MOVWF  FE9
5558:  MOVFF  FF2,53D
555C:  BCF    FF2.7
555E:  MOVLW  00
5560:  MOVLB  0
5562:  CALL   0C58
5566:  TBLRD*-
5568:  TBLRD*+
556A:  MOVF   FF5,W
556C:  MOVWF  FEE
556E:  IORLW  00
5570:  BNZ   5568
5572:  MOVLB  5
5574:  BTFSC  x3D.7
5576:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5578:  MOVLW  05
557A:  MOVWF  x3E
557C:  MOVLW  1D
557E:  MOVWF  x3D
5580:  CLRF   x3F
5582:  CLRF   x40
5584:  MOVLW  01
5586:  MOVWF  x41
5588:  MOVLW  02
558A:  MOVWF  x42
558C:  MOVLB  0
558E:  CALL   182C
....................           
....................          if(unidad==4) 
5592:  MOVLB  4
5594:  MOVF   x8A,W
5596:  SUBLW  04
5598:  BNZ   55B8
....................          {displayTiempo(Tsecadop[3],20,40,1,2);} 
559A:  MOVFF  4B6,53E
559E:  MOVLW  14
55A0:  MOVLB  5
55A2:  MOVWF  x3F
55A4:  MOVLW  28
55A6:  MOVWF  x40
55A8:  MOVLW  01
55AA:  MOVWF  x41
55AC:  MOVLW  02
55AE:  MOVWF  x42
55B0:  MOVLB  0
55B2:  CALL   240E
....................          else 
55B6:  BRA    55D2
....................          {displayTiempo(Tsecadop[3],20,40,0,2);} 
55B8:  MOVFF  4B6,53E
55BC:  MOVLW  14
55BE:  MOVLB  5
55C0:  MOVWF  x3F
55C2:  MOVLW  28
55C4:  MOVWF  x40
55C6:  CLRF   x41
55C8:  MOVLW  02
55CA:  MOVWF  x42
55CC:  MOVLB  0
55CE:  CALL   240E
....................           
....................          if(unidad==3) 
55D2:  MOVLB  4
55D4:  MOVF   x8A,W
55D6:  SUBLW  03
55D8:  BNZ   55F6
....................          {displayTiempo(Tsecadop[2],40,40,1,2);} 
55DA:  MOVFF  4B5,53E
55DE:  MOVLW  28
55E0:  MOVLB  5
55E2:  MOVWF  x3F
55E4:  MOVWF  x40
55E6:  MOVLW  01
55E8:  MOVWF  x41
55EA:  MOVLW  02
55EC:  MOVWF  x42
55EE:  MOVLB  0
55F0:  CALL   240E
....................          else 
55F4:  BRA    560E
....................          {displayTiempo(Tsecadop[2],40,40,0,2);} 
55F6:  MOVFF  4B5,53E
55FA:  MOVLW  28
55FC:  MOVLB  5
55FE:  MOVWF  x3F
5600:  MOVWF  x40
5602:  CLRF   x41
5604:  MOVLW  02
5606:  MOVWF  x42
5608:  MOVLB  0
560A:  CALL   240E
....................           
....................          if(unidad==2) 
560E:  MOVLB  4
5610:  MOVF   x8A,W
5612:  SUBLW  02
5614:  BNZ   5634
....................          {displayTiempo(Tsecadop[1],70,40,1,2);} 
5616:  MOVFF  4B4,53E
561A:  MOVLW  46
561C:  MOVLB  5
561E:  MOVWF  x3F
5620:  MOVLW  28
5622:  MOVWF  x40
5624:  MOVLW  01
5626:  MOVWF  x41
5628:  MOVLW  02
562A:  MOVWF  x42
562C:  MOVLB  0
562E:  CALL   240E
....................          else 
5632:  BRA    564E
....................          {displayTiempo(Tsecadop[1],70,40,0,2);} 
5634:  MOVFF  4B4,53E
5638:  MOVLW  46
563A:  MOVLB  5
563C:  MOVWF  x3F
563E:  MOVLW  28
5640:  MOVWF  x40
5642:  CLRF   x41
5644:  MOVLW  02
5646:  MOVWF  x42
5648:  MOVLB  0
564A:  CALL   240E
....................           
....................          if(unidad==1) 
564E:  MOVLB  4
5650:  DECFSZ x8A,W
5652:  BRA    5672
....................          {displayTiempo(Tsecadop[0],90,40,1,2);} 
5654:  MOVFF  4B3,53E
5658:  MOVLW  5A
565A:  MOVLB  5
565C:  MOVWF  x3F
565E:  MOVLW  28
5660:  MOVWF  x40
5662:  MOVLW  01
5664:  MOVWF  x41
5666:  MOVLW  02
5668:  MOVWF  x42
566A:  MOVLB  0
566C:  CALL   240E
....................          else 
5670:  BRA    568C
....................          {displayTiempo(Tsecadop[0],90,40,0,2);} 
5672:  MOVFF  4B3,53E
5676:  MOVLW  5A
5678:  MOVLB  5
567A:  MOVWF  x3F
567C:  MOVLW  28
567E:  MOVWF  x40
5680:  CLRF   x41
5682:  MOVLW  02
5684:  MOVWF  x42
5686:  MOVLB  0
5688:  CALL   240E
....................           
....................          strcpy(Menus.Letra,":"); 
568C:  MOVLW  05
568E:  MOVWF  FEA
5690:  MOVLW  1D
5692:  MOVWF  FE9
5694:  MOVFF  FF2,53D
5698:  BCF    FF2.7
569A:  MOVLW  00
569C:  CALL   06CA
56A0:  TBLRD*-
56A2:  TBLRD*+
56A4:  MOVF   FF5,W
56A6:  MOVWF  FEE
56A8:  IORLW  00
56AA:  BNZ   56A2
56AC:  MOVLB  5
56AE:  BTFSC  x3D.7
56B0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);  
56B2:  MOVLW  05
56B4:  MOVWF  x3E
56B6:  MOVLW  1D
56B8:  MOVWF  x3D
56BA:  MOVLW  3C
56BC:  MOVWF  x3F
56BE:  MOVLW  2A
56C0:  MOVWF  x40
56C2:  MOVLW  02
56C4:  MOVWF  x41
56C6:  MOVWF  x42
56C8:  MOVLB  0
56CA:  CALL   182C
....................           
....................          visual=0; 
56CE:  MOVLB  4
56D0:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
56D2:  BSF    F92.5
56D4:  BTFSS  F80.5
56D6:  BRA    5714
....................          {   
....................             if(Tsecadop[unidad-1]<9) 
56D8:  MOVLW  01
56DA:  SUBWF  x8A,W
56DC:  CLRF   03
56DE:  ADDLW  B3
56E0:  MOVWF  FE9
56E2:  MOVLW  04
56E4:  ADDWFC 03,W
56E6:  MOVWF  FEA
56E8:  BTFSC  FEF.7
56EA:  BRA    56F2
56EC:  MOVF   FEF,W
56EE:  SUBLW  08
56F0:  BNC   5714
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]++;visual=1; 
56F2:  MOVLW  1E
56F4:  MOVLB  5
56F6:  MOVWF  x42
56F8:  MOVLB  0
56FA:  CALL   1104
56FE:  MOVLW  01
5700:  MOVLB  4
5702:  SUBWF  x8A,W
5704:  CLRF   03
5706:  ADDLW  B3
5708:  MOVWF  FE9
570A:  MOVLW  04
570C:  ADDWFC 03,W
570E:  MOVWF  FEA
5710:  INCF   FEF,F
5712:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5714:  BSF    F96.0
5716:  BTFSS  F84.0
5718:  BRA    5756
....................          {   
....................             if(Tsecadop[unidad-1]>0) 
571A:  MOVLW  01
571C:  SUBWF  x8A,W
571E:  CLRF   03
5720:  ADDLW  B3
5722:  MOVWF  FE9
5724:  MOVLW  04
5726:  ADDWFC 03,W
5728:  MOVWF  FEA
572A:  BTFSC  FEF.7
572C:  BRA    5756
572E:  MOVF   FEF,W
5730:  SUBLW  00
5732:  BC    5756
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]--;visual=1;      
5734:  MOVLW  1E
5736:  MOVLB  5
5738:  MOVWF  x42
573A:  MOVLB  0
573C:  CALL   1104
5740:  MOVLW  01
5742:  MOVLB  4
5744:  SUBWF  x8A,W
5746:  CLRF   03
5748:  ADDLW  B3
574A:  MOVWF  FE9
574C:  MOVLW  04
574E:  ADDWFC 03,W
5750:  MOVWF  FEA
5752:  DECF   FEF,F
5754:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5756:  BSF    F96.1
5758:  BTFSS  F84.1
575A:  BRA    576E
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
575C:  MOVLW  1E
575E:  MOVLB  5
5760:  MOVWF  x42
5762:  MOVLB  0
5764:  CALL   1104
5768:  MOVLB  4
576A:  DECF   x8A,F
576C:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
576E:  BSF    F96.2
5770:  BTFSS  F84.2
5772:  BRA    5846
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5774:  MOVLW  04
5776:  MOVLB  5
5778:  MOVWF  x3D
577A:  MOVLW  AF
577C:  MOVWF  x42
577E:  MOVLB  0
5780:  CALL   1104
5784:  MOVLB  5
5786:  DECFSZ x3D,F
5788:  BRA    577A
578A:  MOVLW  08
578C:  MOVLB  4
578E:  MOVWF  x89
5790:  MOVLB  5
5792:  CLRF   x3E
5794:  MOVLB  0
5796:  CALL   11FC
579A:  MOVLW  01
579C:  MOVLB  4
579E:  MOVWF  x90
57A0:  BSF    x7C.4
....................             write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]); 
57A2:  MOVLW  04
57A4:  MOVWF  FA9
57A6:  MOVFF  4B3,FA8
57AA:  BCF    FA6.6
57AC:  BCF    FA6.7
57AE:  BSF    FA6.2
57B0:  MOVF   FF2,W
57B2:  MOVWF  00
57B4:  BCF    FF2.7
57B6:  MOVLB  F
57B8:  MOVLW  55
57BA:  MOVWF  FA7
57BC:  MOVLW  AA
57BE:  MOVWF  FA7
57C0:  BSF    FA6.1
57C2:  BTFSC  FA6.1
57C4:  BRA    57C2
57C6:  BCF    FA6.2
57C8:  MOVF   00,W
57CA:  IORWF  FF2,F
57CC:  MOVLW  05
57CE:  MOVWF  FA9
57D0:  MOVFF  4B4,FA8
57D4:  BCF    FA6.6
57D6:  BCF    FA6.7
57D8:  BSF    FA6.2
57DA:  MOVF   FF2,W
57DC:  MOVWF  00
57DE:  BCF    FF2.7
57E0:  MOVLW  55
57E2:  MOVWF  FA7
57E4:  MOVLW  AA
57E6:  MOVWF  FA7
57E8:  BSF    FA6.1
57EA:  BTFSC  FA6.1
57EC:  BRA    57EA
57EE:  BCF    FA6.2
57F0:  MOVF   00,W
57F2:  IORWF  FF2,F
....................             write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
57F4:  MOVLW  06
57F6:  MOVWF  FA9
57F8:  MOVFF  4B5,FA8
57FC:  BCF    FA6.6
57FE:  BCF    FA6.7
5800:  BSF    FA6.2
5802:  MOVFF  FF2,00
5806:  BCF    FF2.7
5808:  MOVLW  55
580A:  MOVWF  FA7
580C:  MOVLW  AA
580E:  MOVWF  FA7
5810:  BSF    FA6.1
5812:  BTFSC  FA6.1
5814:  BRA    5812
5816:  BCF    FA6.2
5818:  MOVF   00,W
581A:  IORWF  FF2,F
581C:  MOVLW  07
581E:  MOVWF  FA9
5820:  MOVFF  4B6,FA8
5824:  BCF    FA6.6
5826:  BCF    FA6.7
5828:  BSF    FA6.2
582A:  MOVFF  FF2,00
582E:  BCF    FF2.7
5830:  MOVLW  55
5832:  MOVWF  FA7
5834:  MOVLW  AA
5836:  MOVWF  FA7
5838:  BSF    FA6.1
583A:  BTFSC  FA6.1
583C:  BRA    583A
583E:  BCF    FA6.2
5840:  MOVF   00,W
5842:  IORWF  FF2,F
5844:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==13){ // Menu de Temperatura 
5846:  MOVF   x89,W
5848:  SUBLW  0D
584A:  BTFSS  FD8.2
584C:  BRA    5984
....................       
....................       if(visual==1) 
584E:  BTFSS  x7C.4
5850:  BRA    58B8
....................       { 
....................          glcd_fillScreen(OFF); 
5852:  MOVLB  5
5854:  CLRF   x3E
5856:  MOVLB  0
5858:  CALL   11FC
....................          strcpy(Menus.Letra,"Temperatura"); 
585C:  MOVLW  05
585E:  MOVWF  FEA
5860:  MOVLW  1D
5862:  MOVWF  FE9
5864:  MOVFF  FF2,53D
5868:  BCF    FF2.7
586A:  MOVLW  00
586C:  CALL   0B98
5870:  TBLRD*-
5872:  TBLRD*+
5874:  MOVF   FF5,W
5876:  MOVWF  FEE
5878:  IORLW  00
587A:  BNZ   5872
587C:  MOVLB  5
587E:  BTFSC  x3D.7
5880:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5882:  MOVLW  05
5884:  MOVWF  x3E
5886:  MOVLW  1D
5888:  MOVWF  x3D
588A:  CLRF   x3F
588C:  CLRF   x40
588E:  MOVLW  01
5890:  MOVWF  x41
5892:  MOVLW  02
5894:  MOVWF  x42
5896:  MOVLB  0
5898:  CALL   182C
....................           
....................          displayTiempo(Setpoint,30,30,0,3); 
589C:  MOVFF  48E,53E
58A0:  MOVLW  1E
58A2:  MOVLB  5
58A4:  MOVWF  x3F
58A6:  MOVWF  x40
58A8:  CLRF   x41
58AA:  MOVLW  03
58AC:  MOVWF  x42
58AE:  MOVLB  0
58B0:  CALL   240E
....................           
....................          visual=0; 
58B4:  MOVLB  4
58B6:  BCF    x7C.4
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
58B8:  BSF    F92.5
58BA:  BTFSS  F80.5
58BC:  BRA    58F0
....................          {   
....................             if(Setpoint<134) 
58BE:  MOVF   x8E,W
58C0:  SUBLW  85
58C2:  BNC   58F0
....................             { 
....................                if(Setpoint<100) 
58C4:  MOVF   x8E,W
58C6:  SUBLW  63
58C8:  BNC   58DE
....................                { 
....................                   Setpoint=100;delay_ms(100);visual=1; 
58CA:  MOVLW  64
58CC:  MOVWF  x8E
58CE:  MOVLB  5
58D0:  MOVWF  x42
58D2:  MOVLB  0
58D4:  CALL   1104
58D8:  MOVLB  4
58DA:  BSF    x7C.4
....................                } 
....................                else 
58DC:  BRA    58F0
....................                { 
....................                   delay_ms(30);Setpoint++;visual=1; 
58DE:  MOVLW  1E
58E0:  MOVLB  5
58E2:  MOVWF  x42
58E4:  MOVLB  0
58E6:  CALL   1104
58EA:  MOVLB  4
58EC:  INCF   x8E,F
58EE:  BSF    x7C.4
....................                } 
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
58F0:  BSF    F96.0
58F2:  BTFSS  F84.0
58F4:  BRA    590E
....................          {   
....................             if(Setpoint>105) 
58F6:  MOVF   x8E,W
58F8:  SUBLW  69
58FA:  BC    590E
....................             { 
....................                delay_ms(30);Setpoint--;visual=1;      
58FC:  MOVLW  1E
58FE:  MOVLB  5
5900:  MOVWF  x42
5902:  MOVLB  0
5904:  CALL   1104
5908:  MOVLB  4
590A:  DECF   x8E,F
590C:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
590E:  BSF    F96.1
5910:  BTFSS  F84.1
5912:  BRA    5924
....................          {   
....................             delay_ms(30);visual=1; 
5914:  MOVLW  1E
5916:  MOVLB  5
5918:  MOVWF  x42
591A:  MOVLB  0
591C:  CALL   1104
5920:  MOVLB  4
5922:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5924:  BSF    F96.2
5926:  BTFSS  F84.2
5928:  BRA    5984
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
592A:  MOVLW  04
592C:  MOVLB  5
592E:  MOVWF  x3D
5930:  MOVLW  AF
5932:  MOVWF  x42
5934:  MOVLB  0
5936:  CALL   1104
593A:  MOVLB  5
593C:  DECFSZ x3D,F
593E:  BRA    5930
5940:  MOVLW  08
5942:  MOVLB  4
5944:  MOVWF  x89
5946:  MOVLB  5
5948:  CLRF   x3E
594A:  MOVLB  0
594C:  CALL   11FC
5950:  MOVLW  01
5952:  MOVLB  4
5954:  MOVWF  x90
5956:  BSF    x7C.4
....................             write_eeprom(8,Setpoint); 
5958:  MOVLW  08
595A:  MOVWF  FA9
595C:  MOVFF  48E,FA8
5960:  BCF    FA6.6
5962:  BCF    FA6.7
5964:  BSF    FA6.2
5966:  MOVF   FF2,W
5968:  MOVWF  00
596A:  BCF    FF2.7
596C:  MOVLB  F
596E:  MOVLW  55
5970:  MOVWF  FA7
5972:  MOVLW  AA
5974:  MOVWF  FA7
5976:  BSF    FA6.1
5978:  BTFSC  FA6.1
597A:  BRA    5978
597C:  BCF    FA6.2
597E:  MOVF   00,W
5980:  IORWF  FF2,F
5982:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==14){ // Menu de Desfogue 
5984:  MOVF   x89,W
5986:  SUBLW  0E
5988:  BTFSS  FD8.2
598A:  BRA    5C7E
....................       if(Nivel>6) 
598C:  MOVF   x9E,F
598E:  BNZ   5996
5990:  MOVF   x9D,W
5992:  SUBLW  06
5994:  BC    599C
....................          Nivel=6; 
5996:  CLRF   x9E
5998:  MOVLW  06
599A:  MOVWF  x9D
....................           
....................       if(visual==1) 
599C:  BTFSS  x7C.4
599E:  BRA    5A00
....................       {          
....................          strcpy(Menus.Letra," Desfogue"); 
59A0:  MOVLW  05
59A2:  MOVWF  FEA
59A4:  MOVLW  1D
59A6:  MOVWF  FE9
59A8:  MOVFF  FF2,53D
59AC:  BCF    FF2.7
59AE:  MOVLW  00
59B0:  MOVLB  0
59B2:  CALL   0C7A
59B6:  TBLRD*-
59B8:  TBLRD*+
59BA:  MOVF   FF5,W
59BC:  MOVWF  FEE
59BE:  IORLW  00
59C0:  BNZ   59B8
59C2:  MOVLB  5
59C4:  BTFSC  x3D.7
59C6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
59C8:  MOVLW  05
59CA:  MOVWF  x3E
59CC:  MOVLW  1D
59CE:  MOVWF  x3D
59D0:  CLRF   x3F
59D2:  CLRF   x40
59D4:  MOVLW  01
59D6:  MOVWF  x41
59D8:  MOVLW  02
59DA:  MOVWF  x42
59DC:  MOVLB  0
59DE:  CALL   182C
....................           
....................          displayTiempo(Nivel,50,40,0,2); 
59E2:  MOVFF  49D,53E
59E6:  MOVLW  32
59E8:  MOVLB  5
59EA:  MOVWF  x3F
59EC:  MOVLW  28
59EE:  MOVWF  x40
59F0:  CLRF   x41
59F2:  MOVLW  02
59F4:  MOVWF  x42
59F6:  MOVLB  0
59F8:  CALL   240E
....................           
....................          visual=0; 
59FC:  MOVLB  4
59FE:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
5A00:  BSF    F92.5
5A02:  BTFSS  F80.5
5A04:  BRA    5A26
....................          {   
....................             if(Nivel<6) 
5A06:  MOVF   x9E,F
5A08:  BNZ   5A26
5A0A:  MOVF   x9D,W
5A0C:  SUBLW  05
5A0E:  BNC   5A26
....................             { 
....................                delay_ms(30);Nivel++;visual=1; 
5A10:  MOVLW  1E
5A12:  MOVLB  5
5A14:  MOVWF  x42
5A16:  MOVLB  0
5A18:  CALL   1104
5A1C:  MOVLB  4
5A1E:  INCF   x9D,F
5A20:  BTFSC  FD8.2
5A22:  INCF   x9E,F
5A24:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5A26:  BSF    F96.0
5A28:  BTFSS  F84.0
5A2A:  BRA    5A4E
....................          {   
....................             if(Nivel>1) 
5A2C:  MOVF   x9E,F
5A2E:  BNZ   5A36
5A30:  MOVF   x9D,W
5A32:  SUBLW  01
5A34:  BC    5A4E
....................             { 
....................                delay_ms(30);Nivel--;visual=1;      
5A36:  MOVLW  1E
5A38:  MOVLB  5
5A3A:  MOVWF  x42
5A3C:  MOVLB  0
5A3E:  CALL   1104
5A42:  MOVLB  4
5A44:  MOVF   x9D,W
5A46:  BTFSC  FD8.2
5A48:  DECF   x9E,F
5A4A:  DECF   x9D,F
5A4C:  BSF    x7C.4
....................             } 
....................          } 
....................           
....................          if(desfoguelento==1) 
5A4E:  BTFSS  x7C.5
5A50:  BRA    5C0E
....................          { 
....................             if(RIGHT)//Si oprime SET 
5A52:  BSF    F96.1
5A54:  BTFSS  F84.1
5A56:  BRA    5C0C
....................             {   
....................                write_eeprom(9,Nivel); 
5A58:  MOVLW  09
5A5A:  MOVWF  FA9
5A5C:  MOVFF  49D,FA8
5A60:  BCF    FA6.6
5A62:  BCF    FA6.7
5A64:  BSF    FA6.2
5A66:  MOVF   FF2,W
5A68:  MOVWF  00
5A6A:  BCF    FF2.7
5A6C:  MOVLB  F
5A6E:  MOVLW  55
5A70:  MOVWF  FA7
5A72:  MOVLW  AA
5A74:  MOVWF  FA7
5A76:  BSF    FA6.1
5A78:  BTFSC  FA6.1
5A7A:  BRA    5A78
5A7C:  BCF    FA6.2
5A7E:  MOVF   00,W
5A80:  IORWF  FF2,F
....................                Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5A82:  MOVLW  14
5A84:  MOVLB  4
5A86:  MOVWF  x89
5A88:  MOVLW  0F
5A8A:  MOVLB  5
5A8C:  MOVWF  x4F
5A8E:  MOVLW  12
5A90:  MOVWF  x50
5A92:  MOVLW  1E
5A94:  MOVWF  x51
5A96:  MOVLW  35
5A98:  MOVWF  x52
5A9A:  CLRF   x53
5A9C:  MOVLW  01
5A9E:  MOVWF  x54
5AA0:  MOVLB  0
5AA2:  CALL   176A
5AA6:  MOVLB  4
5AA8:  CLRF   x92
5AAA:  MOVLW  C0
5AAC:  IORWF  FF2,F
5AAE:  MOVLB  5
5AB0:  CLRF   x3E
5AB2:  MOVLB  0
5AB4:  CALL   11FC
....................                strcpy(Menus.Letra,"Calentando"); 
5AB8:  MOVLW  05
5ABA:  MOVWF  FEA
5ABC:  MOVLW  1D
5ABE:  MOVWF  FE9
5AC0:  MOVFF  FF2,53D
5AC4:  BCF    FF2.7
5AC6:  MOVLW  00
5AC8:  CALL   0994
5ACC:  TBLRD*-
5ACE:  TBLRD*+
5AD0:  MOVF   FF5,W
5AD2:  MOVWF  FEE
5AD4:  IORLW  00
5AD6:  BNZ   5ACE
5AD8:  MOVLB  5
5ADA:  BTFSC  x3D.7
5ADC:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
5ADE:  MOVLW  05
5AE0:  MOVWF  x3E
5AE2:  MOVLW  1D
5AE4:  MOVWF  x3D
5AE6:  CLRF   x3F
5AE8:  MOVLW  37
5AEA:  MOVWF  x40
5AEC:  MOVLW  02
5AEE:  MOVWF  x41
5AF0:  MOVLW  01
5AF2:  MOVWF  x42
5AF4:  MOVLB  0
5AF6:  CALL   182C
....................                glcd_rect(15, 18, 30, 53, NO, ON); 
5AFA:  MOVLW  0F
5AFC:  MOVLB  5
5AFE:  MOVWF  x4F
5B00:  MOVLW  12
5B02:  MOVWF  x50
5B04:  MOVLW  1E
5B06:  MOVWF  x51
5B08:  MOVLW  35
5B0A:  MOVWF  x52
5B0C:  CLRF   x53
5B0E:  MOVLW  01
5B10:  MOVWF  x54
5B12:  MOVLB  0
5B14:  CALL   176A
....................                glcd_imagen(5); 
5B18:  MOVLW  05
5B1A:  MOVLB  5
5B1C:  MOVWF  x3D
5B1E:  MOVLB  0
5B20:  CALL   2062
....................                strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5B24:  MOVLW  05
5B26:  MOVWF  FEA
5B28:  MOVLW  1D
5B2A:  MOVWF  FE9
5B2C:  MOVFF  FF2,53D
5B30:  BCF    FF2.7
5B32:  MOVLW  00
5B34:  CALL   09BA
5B38:  TBLRD*-
5B3A:  TBLRD*+
5B3C:  MOVF   FF5,W
5B3E:  MOVWF  FEE
5B40:  IORLW  00
5B42:  BNZ   5B3A
5B44:  MOVLB  5
5B46:  BTFSC  x3D.7
5B48:  BSF    FF2.7
5B4A:  MOVLW  05
5B4C:  MOVWF  x3E
5B4E:  MOVLW  1D
5B50:  MOVWF  x3D
5B52:  CLRF   x3F
5B54:  CLRF   x40
5B56:  MOVLW  02
5B58:  MOVWF  x41
5B5A:  MOVLW  01
5B5C:  MOVWF  x42
5B5E:  MOVLB  0
5B60:  CALL   182C
....................                strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5B64:  MOVLW  05
5B66:  MOVWF  FEA
5B68:  MOVLW  1D
5B6A:  MOVWF  FE9
5B6C:  MOVFF  FF2,53D
5B70:  BCF    FF2.7
5B72:  MOVLW  00
5B74:  CALL   09DC
5B78:  TBLRD*-
5B7A:  TBLRD*+
5B7C:  MOVF   FF5,W
5B7E:  MOVWF  FEE
5B80:  IORLW  00
5B82:  BNZ   5B7A
5B84:  MOVLB  5
5B86:  BTFSC  x3D.7
5B88:  BSF    FF2.7
5B8A:  MOVLW  05
5B8C:  MOVWF  x3E
5B8E:  MOVLW  1D
5B90:  MOVWF  x3D
5B92:  CLRF   x3F
5B94:  MOVLW  08
5B96:  MOVWF  x40
5B98:  MOVLW  02
5B9A:  MOVWF  x41
5B9C:  MOVLW  01
5B9E:  MOVWF  x42
5BA0:  MOVLB  0
5BA2:  CALL   182C
....................                glcd_circle(95,40,2,NO,ON); 
5BA6:  MOVLW  5F
5BA8:  MOVLB  5
5BAA:  MOVWF  x3D
5BAC:  MOVLW  28
5BAE:  MOVWF  x3E
5BB0:  MOVLW  02
5BB2:  MOVWF  x3F
5BB4:  CLRF   x40
5BB6:  MOVLW  01
5BB8:  MOVWF  x41
5BBA:  MOVLB  0
5BBC:  CALL   215E
....................                strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
5BC0:  MOVLW  05
5BC2:  MOVWF  FEA
5BC4:  MOVLW  1D
5BC6:  MOVWF  FE9
5BC8:  MOVFF  FF2,53D
5BCC:  BCF    FF2.7
5BCE:  MOVLW  00
5BD0:  CALL   09FE
5BD4:  TBLRD*-
5BD6:  TBLRD*+
5BD8:  MOVF   FF5,W
5BDA:  MOVWF  FEE
5BDC:  IORLW  00
5BDE:  BNZ   5BD6
5BE0:  MOVLB  5
5BE2:  BTFSC  x3D.7
5BE4:  BSF    FF2.7
5BE6:  MOVLW  05
5BE8:  MOVWF  x3E
5BEA:  MOVLW  1D
5BEC:  MOVWF  x3D
5BEE:  MOVLW  66
5BF0:  MOVWF  x3F
5BF2:  MOVLW  28
5BF4:  MOVWF  x40
5BF6:  MOVLW  02
5BF8:  MOVWF  x41
5BFA:  MOVWF  x42
5BFC:  MOVLB  0
5BFE:  CALL   182C
....................                MuestraTiemposProgramados(); 
5C02:  CALL   255E
....................                EnviarCodigo(); 
5C06:  CALL   1B12
5C0A:  MOVLB  4
....................             }       
....................          } 
....................          else 
5C0C:  BRA    5C7E
....................          { 
....................             if(LEFT)//Si oprime boton de Toma. 
5C0E:  BSF    F96.2
5C10:  BTFSS  F84.2
5C12:  BRA    5C7E
....................             { 
....................                if(Nivel<6) 
5C14:  MOVF   x9E,F
5C16:  BNZ   5C22
5C18:  MOVF   x9D,W
5C1A:  SUBLW  05
5C1C:  BNC   5C22
....................                { 
....................                   desfoguelento=1; 
5C1E:  BSF    x7C.5
....................                } 
....................                else 
5C20:  BRA    5C24
....................                { 
....................                   desfoguelento=0; 
5C22:  BCF    x7C.5
....................                } 
....................                delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5C24:  MOVLW  04
5C26:  MOVLB  5
5C28:  MOVWF  x3D
5C2A:  MOVLW  AF
5C2C:  MOVWF  x42
5C2E:  MOVLB  0
5C30:  CALL   1104
5C34:  MOVLB  5
5C36:  DECFSZ x3D,F
5C38:  BRA    5C2A
5C3A:  MOVLW  08
5C3C:  MOVLB  4
5C3E:  MOVWF  x89
5C40:  MOVLB  5
5C42:  CLRF   x3E
5C44:  MOVLB  0
5C46:  CALL   11FC
5C4A:  MOVLW  01
5C4C:  MOVLB  4
5C4E:  MOVWF  x90
5C50:  BSF    x7C.4
....................                write_eeprom(9,Nivel); 
5C52:  MOVLW  09
5C54:  MOVWF  FA9
5C56:  MOVFF  49D,FA8
5C5A:  BCF    FA6.6
5C5C:  BCF    FA6.7
5C5E:  BSF    FA6.2
5C60:  MOVF   FF2,W
5C62:  MOVWF  00
5C64:  BCF    FF2.7
5C66:  MOVLB  F
5C68:  MOVLW  55
5C6A:  MOVWF  FA7
5C6C:  MOVLW  AA
5C6E:  MOVWF  FA7
5C70:  BSF    FA6.1
5C72:  BTFSC  FA6.1
5C74:  BRA    5C72
5C76:  BCF    FA6.2
5C78:  MOVF   00,W
5C7A:  IORWF  FF2,F
5C7C:  MOVLB  4
....................             } 
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==15){ //Menu de Continuar 
5C7E:  MOVF   x89,W
5C80:  SUBLW  0F
5C82:  BTFSS  FD8.2
5C84:  BRA    5FC2
....................        
....................       if(visual==1) 
5C86:  BTFSS  x7C.4
5C88:  BRA    5DEE
....................       { 
....................          strcpy(Menus.Letra,"Continuar"); 
5C8A:  MOVLW  05
5C8C:  MOVWF  FEA
5C8E:  MOVLW  1D
5C90:  MOVWF  FE9
5C92:  MOVFF  FF2,53D
5C96:  BCF    FF2.7
5C98:  MOVLW  00
5C9A:  MOVLB  0
5C9C:  CALL   0BEA
5CA0:  TBLRD*-
5CA2:  TBLRD*+
5CA4:  MOVF   FF5,W
5CA6:  MOVWF  FEE
5CA8:  IORLW  00
5CAA:  BNZ   5CA2
5CAC:  MOVLB  5
5CAE:  BTFSC  x3D.7
5CB0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5CB2:  MOVLW  05
5CB4:  MOVWF  x3E
5CB6:  MOVLW  1D
5CB8:  MOVWF  x3D
5CBA:  CLRF   x3F
5CBC:  CLRF   x40
5CBE:  MOVLW  01
5CC0:  MOVWF  x41
5CC2:  MOVLW  02
5CC4:  MOVWF  x42
5CC6:  MOVLB  0
5CC8:  CALL   182C
....................           
....................          if(Opcion==2) 
5CCC:  MOVLB  4
5CCE:  MOVF   x90,W
5CD0:  SUBLW  02
5CD2:  BNZ   5D5E
....................          {strcpy(Menus.Letra,"SI"); 
5CD4:  MOVLW  05
5CD6:  MOVWF  FEA
5CD8:  MOVLW  1D
5CDA:  MOVWF  FE9
5CDC:  MOVFF  FF2,53D
5CE0:  BCF    FF2.7
5CE2:  MOVLW  00
5CE4:  MOVLB  0
5CE6:  CALL   0C9E
5CEA:  TBLRD*-
5CEC:  TBLRD*+
5CEE:  MOVF   FF5,W
5CF0:  MOVWF  FEE
5CF2:  IORLW  00
5CF4:  BNZ   5CEC
5CF6:  MOVLB  5
5CF8:  BTFSC  x3D.7
5CFA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,1,2); 
5CFC:  MOVLW  05
5CFE:  MOVWF  x3E
5D00:  MOVLW  1D
5D02:  MOVWF  x3D
5D04:  MOVLW  32
5D06:  MOVWF  x3F
5D08:  MOVLW  19
5D0A:  MOVWF  x40
5D0C:  MOVLW  01
5D0E:  MOVWF  x41
5D10:  MOVLW  02
5D12:  MOVWF  x42
5D14:  MOVLB  0
5D16:  CALL   182C
....................          strcpy(Menus.Letra,"NO"); 
5D1A:  MOVLW  05
5D1C:  MOVWF  FEA
5D1E:  MOVLW  1D
5D20:  MOVWF  FE9
5D22:  MOVFF  FF2,53D
5D26:  BCF    FF2.7
5D28:  MOVLW  00
5D2A:  CALL   0CBC
5D2E:  TBLRD*-
5D30:  TBLRD*+
5D32:  MOVF   FF5,W
5D34:  MOVWF  FEE
5D36:  IORLW  00
5D38:  BNZ   5D30
5D3A:  MOVLB  5
5D3C:  BTFSC  x3D.7
5D3E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,0,2); 
5D40:  MOVLW  05
5D42:  MOVWF  x3E
5D44:  MOVLW  1D
5D46:  MOVWF  x3D
5D48:  MOVLW  32
5D4A:  MOVWF  x3F
5D4C:  MOVLW  2D
5D4E:  MOVWF  x40
5D50:  CLRF   x41
5D52:  MOVLW  02
5D54:  MOVWF  x42
5D56:  MOVLB  0
5D58:  CALL   182C
5D5C:  MOVLB  4
....................          } 
....................          if(Opcion==1) 
5D5E:  DECFSZ x90,W
5D60:  BRA    5DEC
....................          {strcpy(Menus.Letra,"SI"); 
5D62:  MOVLW  05
5D64:  MOVWF  FEA
5D66:  MOVLW  1D
5D68:  MOVWF  FE9
5D6A:  MOVFF  FF2,53D
5D6E:  BCF    FF2.7
5D70:  MOVLW  00
5D72:  MOVLB  0
5D74:  CALL   0C9E
5D78:  TBLRD*-
5D7A:  TBLRD*+
5D7C:  MOVF   FF5,W
5D7E:  MOVWF  FEE
5D80:  IORLW  00
5D82:  BNZ   5D7A
5D84:  MOVLB  5
5D86:  BTFSC  x3D.7
5D88:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,0,2); 
5D8A:  MOVLW  05
5D8C:  MOVWF  x3E
5D8E:  MOVLW  1D
5D90:  MOVWF  x3D
5D92:  MOVLW  32
5D94:  MOVWF  x3F
5D96:  MOVLW  19
5D98:  MOVWF  x40
5D9A:  CLRF   x41
5D9C:  MOVLW  02
5D9E:  MOVWF  x42
5DA0:  MOVLB  0
5DA2:  CALL   182C
....................          strcpy(Menus.Letra,"NO"); 
5DA6:  MOVLW  05
5DA8:  MOVWF  FEA
5DAA:  MOVLW  1D
5DAC:  MOVWF  FE9
5DAE:  MOVFF  FF2,53D
5DB2:  BCF    FF2.7
5DB4:  MOVLW  00
5DB6:  CALL   0CBC
5DBA:  TBLRD*-
5DBC:  TBLRD*+
5DBE:  MOVF   FF5,W
5DC0:  MOVWF  FEE
5DC2:  IORLW  00
5DC4:  BNZ   5DBC
5DC6:  MOVLB  5
5DC8:  BTFSC  x3D.7
5DCA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,1,2); 
5DCC:  MOVLW  05
5DCE:  MOVWF  x3E
5DD0:  MOVLW  1D
5DD2:  MOVWF  x3D
5DD4:  MOVLW  32
5DD6:  MOVWF  x3F
5DD8:  MOVLW  2D
5DDA:  MOVWF  x40
5DDC:  MOVLW  01
5DDE:  MOVWF  x41
5DE0:  MOVLW  02
5DE2:  MOVWF  x42
5DE4:  MOVLB  0
5DE6:  CALL   182C
5DEA:  MOVLB  4
....................          } 
....................          visual=0; 
5DEC:  BCF    x7C.4
....................       } 
....................        
....................          
....................       if(UP)//Si oprime hacia arriba 
5DEE:  BSF    F92.5
5DF0:  BTFSS  F80.5
5DF2:  BRA    5DFE
....................       { 
....................          if(Opcion<2) 
5DF4:  MOVF   x90,W
5DF6:  SUBLW  01
5DF8:  BNC   5DFC
....................          { 
....................             Opcion++; 
5DFA:  INCF   x90,F
....................          } 
....................          visual=1; 
5DFC:  BSF    x7C.4
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5DFE:  BSF    F96.0
5E00:  BTFSS  F84.0
5E02:  BRA    5E0E
....................       {   
....................          if(Opcion>1) 
5E04:  MOVF   x90,W
5E06:  SUBLW  01
5E08:  BC    5E0C
....................          { 
....................             Opcion--; 
5E0A:  DECF   x90,F
....................          }   
....................          visual=1; 
5E0C:  BSF    x7C.4
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
5E0E:  BSF    F96.1
5E10:  BTFSS  F84.1
5E12:  BRA    5F8C
....................       {   
....................          if(Opcion==2) 
5E14:  MOVF   x90,W
5E16:  SUBLW  02
5E18:  BTFSS  FD8.2
5E1A:  BRA    5F5E
....................          { 
....................             Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5E1C:  MOVLW  14
5E1E:  MOVWF  x89
5E20:  MOVLW  0F
5E22:  MOVLB  5
5E24:  MOVWF  x4F
5E26:  MOVLW  12
5E28:  MOVWF  x50
5E2A:  MOVLW  1E
5E2C:  MOVWF  x51
5E2E:  MOVLW  35
5E30:  MOVWF  x52
5E32:  CLRF   x53
5E34:  MOVLW  01
5E36:  MOVWF  x54
5E38:  MOVLB  0
5E3A:  CALL   176A
5E3E:  MOVLB  4
5E40:  CLRF   x92
5E42:  MOVLW  C0
5E44:  IORWF  FF2,F
5E46:  MOVLB  5
5E48:  CLRF   x3E
5E4A:  MOVLB  0
5E4C:  CALL   11FC
....................             strcpy(Menus.Letra,"Calentando"); 
5E50:  MOVLW  05
5E52:  MOVWF  FEA
5E54:  MOVLW  1D
5E56:  MOVWF  FE9
5E58:  MOVFF  FF2,53D
5E5C:  BCF    FF2.7
5E5E:  MOVLW  00
5E60:  CALL   0994
5E64:  TBLRD*-
5E66:  TBLRD*+
5E68:  MOVF   FF5,W
5E6A:  MOVWF  FEE
5E6C:  IORLW  00
5E6E:  BNZ   5E66
5E70:  MOVLB  5
5E72:  BTFSC  x3D.7
5E74:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
5E76:  MOVLW  05
5E78:  MOVWF  x3E
5E7A:  MOVLW  1D
5E7C:  MOVWF  x3D
5E7E:  CLRF   x3F
5E80:  MOVLW  37
5E82:  MOVWF  x40
5E84:  MOVLW  02
5E86:  MOVWF  x41
5E88:  MOVLW  01
5E8A:  MOVWF  x42
5E8C:  MOVLB  0
5E8E:  CALL   182C
....................             glcd_rect(15, 18, 30, 53, NO, ON); 
5E92:  MOVLW  0F
5E94:  MOVLB  5
5E96:  MOVWF  x4F
5E98:  MOVLW  12
5E9A:  MOVWF  x50
5E9C:  MOVLW  1E
5E9E:  MOVWF  x51
5EA0:  MOVLW  35
5EA2:  MOVWF  x52
5EA4:  CLRF   x53
5EA6:  MOVLW  01
5EA8:  MOVWF  x54
5EAA:  MOVLB  0
5EAC:  CALL   176A
....................             glcd_imagen(5); 
5EB0:  MOVLW  05
5EB2:  MOVLB  5
5EB4:  MOVWF  x3D
5EB6:  MOVLB  0
5EB8:  CALL   2062
....................             strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5EBC:  MOVLW  05
5EBE:  MOVWF  FEA
5EC0:  MOVLW  1D
5EC2:  MOVWF  FE9
5EC4:  MOVFF  FF2,53D
5EC8:  BCF    FF2.7
5ECA:  MOVLW  00
5ECC:  CALL   09BA
5ED0:  TBLRD*-
5ED2:  TBLRD*+
5ED4:  MOVF   FF5,W
5ED6:  MOVWF  FEE
5ED8:  IORLW  00
5EDA:  BNZ   5ED2
5EDC:  MOVLB  5
5EDE:  BTFSC  x3D.7
5EE0:  BSF    FF2.7
5EE2:  MOVLW  05
5EE4:  MOVWF  x3E
5EE6:  MOVLW  1D
5EE8:  MOVWF  x3D
5EEA:  CLRF   x3F
5EEC:  CLRF   x40
5EEE:  MOVLW  02
5EF0:  MOVWF  x41
5EF2:  MOVLW  01
5EF4:  MOVWF  x42
5EF6:  MOVLB  0
5EF8:  CALL   182C
....................             strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5EFC:  MOVLW  05
5EFE:  MOVWF  FEA
5F00:  MOVLW  1D
5F02:  MOVWF  FE9
5F04:  MOVFF  FF2,53D
5F08:  BCF    FF2.7
5F0A:  MOVLW  00
5F0C:  CALL   09DC
5F10:  TBLRD*-
5F12:  TBLRD*+
5F14:  MOVF   FF5,W
5F16:  MOVWF  FEE
5F18:  IORLW  00
5F1A:  BNZ   5F12
5F1C:  MOVLB  5
5F1E:  BTFSC  x3D.7
5F20:  BSF    FF2.7
5F22:  MOVLW  05
5F24:  MOVWF  x3E
5F26:  MOVLW  1D
5F28:  MOVWF  x3D
5F2A:  CLRF   x3F
5F2C:  MOVLW  08
5F2E:  MOVWF  x40
5F30:  MOVLW  02
5F32:  MOVWF  x41
5F34:  MOVLW  01
5F36:  MOVWF  x42
5F38:  MOVLB  0
5F3A:  CALL   182C
....................             MuestraTiemposProgramados(); 
5F3E:  CALL   255E
....................             if(Nivel<6) 
5F42:  MOVLB  4
5F44:  MOVF   x9E,F
5F46:  BNZ   5F52
5F48:  MOVF   x9D,W
5F4A:  SUBLW  05
5F4C:  BNC   5F52
....................                { 
....................                   desfoguelento=1; 
5F4E:  BSF    x7C.5
....................                } 
....................                else 
5F50:  BRA    5F54
....................                { 
....................                   desfoguelento=0; 
5F52:  BCF    x7C.5
....................                } 
....................                EnviarCodigo(); 
5F54:  MOVLB  0
5F56:  CALL   1B12
....................          } 
....................          else 
5F5A:  BRA    5F8E
5F5C:  MOVLB  4
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5F5E:  MOVLW  04
5F60:  MOVLB  5
5F62:  MOVWF  x3D
5F64:  MOVLW  AF
5F66:  MOVWF  x42
5F68:  MOVLB  0
5F6A:  CALL   1104
5F6E:  MOVLB  5
5F70:  DECFSZ x3D,F
5F72:  BRA    5F64
5F74:  MOVLW  08
5F76:  MOVLB  4
5F78:  MOVWF  x89
5F7A:  MOVLB  5
5F7C:  CLRF   x3E
5F7E:  MOVLB  0
5F80:  CALL   11FC
5F84:  MOVLW  01
5F86:  MOVLB  4
5F88:  MOVWF  x90
5F8A:  BSF    x7C.4
5F8C:  MOVLB  0
....................          } 
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
5F8E:  BSF    F96.2
5F90:  BTFSS  F84.2
5F92:  BRA    5FC4
....................       { 
....................          delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5F94:  MOVLW  04
5F96:  MOVLB  5
5F98:  MOVWF  x3D
5F9A:  MOVLW  AF
5F9C:  MOVWF  x42
5F9E:  MOVLB  0
5FA0:  CALL   1104
5FA4:  MOVLB  5
5FA6:  DECFSZ x3D,F
5FA8:  BRA    5F9A
5FAA:  MOVLW  08
5FAC:  MOVLB  4
5FAE:  MOVWF  x89
5FB0:  MOVLB  5
5FB2:  CLRF   x3E
5FB4:  MOVLB  0
5FB6:  CALL   11FC
5FBA:  MOVLW  01
5FBC:  MOVLB  4
5FBE:  MOVWF  x90
5FC0:  BSF    x7C.4
5FC2:  MOVLB  0
....................       } 
....................      
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
5FC4:  MOVLB  4
5FC6:  MOVF   x89,W
5FC8:  SUBLW  14
5FCA:  BTFSS  FD8.2
5FCC:  GOTO   6ADA
....................    if(flag_agua==1 && Puerta==1 && Parada==1 && tiempo_esterilizacion<2 && Alarma==0 && AlarmaAgua==0) 
5FD0:  BTFSS  x7D.2
5FD2:  BRA    60FC
5FD4:  DECFSZ x70,W
5FD6:  BRA    60FC
5FD8:  DECFSZ x71,W
5FDA:  BRA    60FC
5FDC:  MOVF   x91,W
5FDE:  SUBLW  01
5FE0:  BTFSS  FD8.0
5FE2:  BRA    60FC
5FE4:  MOVF   x7A,F
5FE6:  BTFSS  FD8.2
5FE8:  BRA    60FC
5FEA:  MOVF   x7B,F
5FEC:  BTFSS  FD8.2
5FEE:  BRA    60FC
....................    {   
....................       // Debe enviar a Hardware_Controller flag que indique que puede realizar control. En Hardware_Controller si esta activado el flag** 
....................       // de control debe tener automaticamente la electrovalvula de desfogue cerrada.** 
....................       if(tiempo_esterilizacion==0 && disp_Calentando==0) 
5FF0:  MOVF   x91,F
5FF2:  BNZ   606E
5FF4:  BTFSC  x7D.4
5FF6:  BRA    606E
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5FF8:  MOVLB  5
5FFA:  CLRF   x4F
5FFC:  MOVLW  37
5FFE:  MOVWF  x50
6000:  MOVLW  7F
6002:  MOVWF  x51
6004:  MOVLW  3F
6006:  MOVWF  x52
6008:  MOVLW  01
600A:  MOVWF  x53
600C:  CLRF   x54
600E:  MOVLB  0
6010:  CALL   176A
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
6014:  MOVLW  05
6016:  MOVWF  FEA
6018:  MOVLW  1D
601A:  MOVWF  FE9
601C:  MOVFF  FF2,53D
6020:  BCF    FF2.7
6022:  MOVLW  00
6024:  CALL   0994
6028:  TBLRD*-
602A:  TBLRD*+
602C:  MOVF   FF5,W
602E:  MOVWF  FEE
6030:  IORLW  00
6032:  BNZ   602A
6034:  MOVLB  5
6036:  BTFSC  x3D.7
6038:  BSF    FF2.7
603A:  MOVLW  05
603C:  MOVWF  x3E
603E:  MOVLW  1D
6040:  MOVWF  x3D
6042:  CLRF   x3F
6044:  MOVLW  37
6046:  MOVWF  x40
6048:  MOVLW  02
604A:  MOVWF  x41
604C:  MOVLW  01
604E:  MOVWF  x42
6050:  MOVLB  0
6052:  CALL   182C
....................          disp_Calentando=1;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6056:  MOVLB  4
6058:  BSF    x7D.4
605A:  BCF    x7D.5
605C:  BCF    x7D.6
605E:  BCF    x7D.7
6060:  BCF    x7E.0
6062:  BCF    x7E.1
6064:  BCF    x7E.2
6066:  BCF    x7E.3
....................          EVDesfogue=0;Control=1; 
6068:  CLRF   x80
606A:  MOVLW  01
606C:  MOVWF  x87
....................       } 
....................       if(tiempo_esterilizacion==1 && disp_Esterilizando==0) 
606E:  DECFSZ x91,W
6070:  BRA    60EE
6072:  BTFSC  x7D.7
6074:  BRA    60EE
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
6076:  MOVLB  5
6078:  CLRF   x4F
607A:  MOVLW  37
607C:  MOVWF  x50
607E:  MOVLW  7F
6080:  MOVWF  x51
6082:  MOVLW  3F
6084:  MOVWF  x52
6086:  MOVLW  01
6088:  MOVWF  x53
608A:  CLRF   x54
608C:  MOVLB  0
608E:  CALL   176A
....................          strcpy(Menus.Letra,"Esterilizando");displayMenu(Menus.Letra,0,55,2,1); 
6092:  MOVLW  05
6094:  MOVWF  FEA
6096:  MOVLW  1D
6098:  MOVWF  FE9
609A:  MOVFF  FF2,53D
609E:  BCF    FF2.7
60A0:  MOVLW  00
60A2:  CALL   0CDA
60A6:  TBLRD*-
60A8:  TBLRD*+
60AA:  MOVF   FF5,W
60AC:  MOVWF  FEE
60AE:  IORLW  00
60B0:  BNZ   60A8
60B2:  MOVLB  5
60B4:  BTFSC  x3D.7
60B6:  BSF    FF2.7
60B8:  MOVLW  05
60BA:  MOVWF  x3E
60BC:  MOVLW  1D
60BE:  MOVWF  x3D
60C0:  CLRF   x3F
60C2:  MOVLW  37
60C4:  MOVWF  x40
60C6:  MOVLW  02
60C8:  MOVWF  x41
60CA:  MOVLW  01
60CC:  MOVWF  x42
60CE:  MOVLB  0
60D0:  CALL   182C
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=1;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
60D4:  MOVLB  4
60D6:  BCF    x7D.4
60D8:  BCF    x7D.5
60DA:  BCF    x7D.6
60DC:  BSF    x7D.7
60DE:  BCF    x7E.0
60E0:  BCF    x7E.1
60E2:  BCF    x7E.2
60E4:  BCF    x7E.3
....................          EVDesfogue=0;EVTrampa=0;Control=1; 
60E6:  CLRF   x80
60E8:  CLRF   x82
60EA:  MOVLW  01
60EC:  MOVWF  x87
....................       } 
....................       Control=1; 
60EE:  MOVLW  01
60F0:  MOVWF  x87
....................       EnviarCodigo(); 
60F2:  MOVLB  0
60F4:  CALL   1B12
....................    } 
....................    else 
60F8:  BRA    654A
60FA:  MOVLB  4
....................    { 
....................       Control=0; 
60FC:  CLRF   x87
....................       if(Alarma>0) 
60FE:  MOVF   x7A,F
6100:  BTFSC  FD8.2
6102:  BRA    6200
....................       { 
....................          if(Alarma==1) // Alarma de Error de Tiempo: Error por exceso de tiempo de calentamiento. 
6104:  DECFSZ x7A,W
6106:  BRA    617E
....................          { 
....................             if(disp_Alarma==0) 
6108:  BTFSC  x7E.5
610A:  BRA    617E
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
610C:  MOVLB  5
610E:  CLRF   x4F
6110:  MOVLW  37
6112:  MOVWF  x50
6114:  MOVLW  7F
6116:  MOVWF  x51
6118:  MOVLW  3F
611A:  MOVWF  x52
611C:  MOVLW  01
611E:  MOVWF  x53
6120:  CLRF   x54
6122:  MOVLB  0
6124:  CALL   176A
....................                strcpy(Menus.Letra,"Error:ET01");displayMenu(Menus.Letra,0,55,2,1); 
6128:  MOVLW  05
612A:  MOVWF  FEA
612C:  MOVLW  1D
612E:  MOVWF  FE9
6130:  MOVFF  FF2,53D
6134:  BCF    FF2.7
6136:  MOVLW  00
6138:  CALL   0D02
613C:  TBLRD*-
613E:  TBLRD*+
6140:  MOVF   FF5,W
6142:  MOVWF  FEE
6144:  IORLW  00
6146:  BNZ   613E
6148:  MOVLB  5
614A:  BTFSC  x3D.7
614C:  BSF    FF2.7
614E:  MOVLW  05
6150:  MOVWF  x3E
6152:  MOVLW  1D
6154:  MOVWF  x3D
6156:  CLRF   x3F
6158:  MOVLW  37
615A:  MOVWF  x40
615C:  MOVLW  02
615E:  MOVWF  x41
6160:  MOVLW  01
6162:  MOVWF  x42
6164:  MOVLB  0
6166:  CALL   182C
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
616A:  MOVLB  4
616C:  BCF    x7D.4
616E:  BCF    x7D.5
6170:  BCF    x7D.6
6172:  BCF    x7D.7
6174:  BCF    x7E.0
6176:  BCF    x7E.1
6178:  BCF    x7E.2
617A:  BCF    x7E.3
....................                disp_Alarma=1; 
617C:  BSF    x7E.5
....................             } 
....................          } 
....................           
....................          if(Alarma==2) // Alarma de Error de Tiempo: Error por Cambio brusco en la Temperatura 
617E:  MOVF   x7A,W
6180:  SUBLW  02
6182:  BNZ   61FE
....................          { 
....................             tiempo_esterilizacion=0;tiempo_secado=0; 
6184:  CLRF   x91
6186:  CLRF   x92
....................             if(disp_Alarma==0) 
6188:  BTFSC  x7E.5
618A:  BRA    61FE
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
618C:  MOVLB  5
618E:  CLRF   x4F
6190:  MOVLW  37
6192:  MOVWF  x50
6194:  MOVLW  7F
6196:  MOVWF  x51
6198:  MOVLW  3F
619A:  MOVWF  x52
619C:  MOVLW  01
619E:  MOVWF  x53
61A0:  CLRF   x54
61A2:  MOVLB  0
61A4:  CALL   176A
....................                strcpy(Menus.Letra,"Error:ET02");displayMenu(Menus.Letra,0,55,2,1); 
61A8:  MOVLW  05
61AA:  MOVWF  FEA
61AC:  MOVLW  1D
61AE:  MOVWF  FE9
61B0:  MOVFF  FF2,53D
61B4:  BCF    FF2.7
61B6:  MOVLW  00
61B8:  CALL   0D28
61BC:  TBLRD*-
61BE:  TBLRD*+
61C0:  MOVF   FF5,W
61C2:  MOVWF  FEE
61C4:  IORLW  00
61C6:  BNZ   61BE
61C8:  MOVLB  5
61CA:  BTFSC  x3D.7
61CC:  BSF    FF2.7
61CE:  MOVLW  05
61D0:  MOVWF  x3E
61D2:  MOVLW  1D
61D4:  MOVWF  x3D
61D6:  CLRF   x3F
61D8:  MOVLW  37
61DA:  MOVWF  x40
61DC:  MOVLW  02
61DE:  MOVWF  x41
61E0:  MOVLW  01
61E2:  MOVWF  x42
61E4:  MOVLB  0
61E6:  CALL   182C
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
61EA:  MOVLB  4
61EC:  BCF    x7D.4
61EE:  BCF    x7D.5
61F0:  BCF    x7D.6
61F2:  BCF    x7D.7
61F4:  BCF    x7E.0
61F6:  BCF    x7E.1
61F8:  BCF    x7E.2
61FA:  BCF    x7E.3
....................                disp_Alarma=1; 
61FC:  BSF    x7E.5
....................             } 
....................          } 
....................       } 
....................       else 
61FE:  BRA    6544
....................       { 
....................          disp_Alarma=0; 
6200:  BCF    x7E.5
....................          if(NivelTanque==1 && flag_agua==0 ) 
6202:  DECFSZ x73,W
6204:  BRA    620E
6206:  BTFSC  x7D.2
6208:  BRA    620E
....................          { 
....................             flag_agua=1; 
620A:  BSF    x7D.2
....................             // Debe enviar a Hardware_Controller que cierre EV de agua 
....................          }  
....................          else 
620C:  BRA    6304
....................          { 
....................             if(tiempo_esterilizacion==0 && disp_Llenando==0 && Puerta==1) 
620E:  MOVF   x91,F
6210:  BNZ   628C
6212:  BTFSC  x7D.5
6214:  BRA    628C
6216:  DECFSZ x70,W
6218:  BRA    628C
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
621A:  MOVLB  5
621C:  CLRF   x4F
621E:  MOVLW  37
6220:  MOVWF  x50
6222:  MOVLW  7F
6224:  MOVWF  x51
6226:  MOVLW  3F
6228:  MOVWF  x52
622A:  MOVLW  01
622C:  MOVWF  x53
622E:  CLRF   x54
6230:  MOVLB  0
6232:  CALL   176A
....................                strcpy(Menus.Letra,"Llenando");displayMenu(Menus.Letra,0,55,2,1); 
6236:  MOVLW  05
6238:  MOVWF  FEA
623A:  MOVLW  1D
623C:  MOVWF  FE9
623E:  MOVFF  FF2,53D
6242:  BCF    FF2.7
6244:  MOVLW  00
6246:  CALL   0D4E
624A:  TBLRD*-
624C:  TBLRD*+
624E:  MOVF   FF5,W
6250:  MOVWF  FEE
6252:  IORLW  00
6254:  BNZ   624C
6256:  MOVLB  5
6258:  BTFSC  x3D.7
625A:  BSF    FF2.7
625C:  MOVLW  05
625E:  MOVWF  x3E
6260:  MOVLW  1D
6262:  MOVWF  x3D
6264:  CLRF   x3F
6266:  MOVLW  37
6268:  MOVWF  x40
626A:  MOVLW  02
626C:  MOVWF  x41
626E:  MOVLW  01
6270:  MOVWF  x42
6272:  MOVLB  0
6274:  CALL   182C
....................                disp_Calentando=0;disp_Llenando=1;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6278:  MOVLB  4
627A:  BCF    x7D.4
627C:  BSF    x7D.5
627E:  BCF    x7D.6
6280:  BCF    x7D.7
6282:  BCF    x7E.0
6284:  BCF    x7E.1
6286:  BCF    x7E.2
6288:  BCF    x7E.3
....................                // Debe enviar a Hardware_Controller que abra EV de agua y que apague Resistencia 
....................                Control=0; 
628A:  CLRF   x87
....................             } 
....................              
....................             if(AlarmaAgua==1) 
628C:  DECFSZ x7B,W
628E:  BRA    6304
....................             { 
....................                if(disp_AlarmaAgua==0) 
6290:  BTFSC  x7E.6
6292:  BRA    6304
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6294:  MOVLB  5
6296:  CLRF   x4F
6298:  MOVLW  37
629A:  MOVWF  x50
629C:  MOVLW  7F
629E:  MOVWF  x51
62A0:  MOVLW  3F
62A2:  MOVWF  x52
62A4:  MOVLW  01
62A6:  MOVWF  x53
62A8:  CLRF   x54
62AA:  MOVLB  0
62AC:  CALL   176A
....................                   strcpy(Menus.Letra,"Error:EA01");displayMenu(Menus.Letra,0,55,2,1); 
62B0:  MOVLW  05
62B2:  MOVWF  FEA
62B4:  MOVLW  1D
62B6:  MOVWF  FE9
62B8:  MOVFF  FF2,53D
62BC:  BCF    FF2.7
62BE:  MOVLW  00
62C0:  CALL   0D72
62C4:  TBLRD*-
62C6:  TBLRD*+
62C8:  MOVF   FF5,W
62CA:  MOVWF  FEE
62CC:  IORLW  00
62CE:  BNZ   62C6
62D0:  MOVLB  5
62D2:  BTFSC  x3D.7
62D4:  BSF    FF2.7
62D6:  MOVLW  05
62D8:  MOVWF  x3E
62DA:  MOVLW  1D
62DC:  MOVWF  x3D
62DE:  CLRF   x3F
62E0:  MOVLW  37
62E2:  MOVWF  x40
62E4:  MOVLW  02
62E6:  MOVWF  x41
62E8:  MOVLW  01
62EA:  MOVWF  x42
62EC:  MOVLB  0
62EE:  CALL   182C
....................                   disp_Calentando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
62F2:  MOVLB  4
62F4:  BCF    x7D.4
62F6:  BCF    x7D.6
62F8:  BCF    x7D.7
62FA:  BCF    x7E.0
62FC:  BCF    x7E.1
62FE:  BCF    x7E.2
6300:  BCF    x7E.3
....................                   disp_AlarmaAgua=1; 
6302:  BSF    x7E.6
....................                } 
....................             } 
....................          } 
....................           
....................          if(tiempo_esterilizacion==2 && flag_agua==1) 
6304:  MOVF   x91,W
6306:  SUBLW  02
6308:  BTFSS  FD8.2
630A:  BRA    64CC
630C:  BTFSS  x7D.2
630E:  BRA    64CC
....................          { 
....................             // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................             if(desfoguelento==1)    
6310:  BTFSS  x7C.5
6312:  BRA    63F2
....................             { 
....................                if(z==0) 
6314:  BTFSC  x7E.4
6316:  BRA    6368
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
6318:  MOVLB  5
631A:  CLRF   x3D
631C:  MOVLW  5A
631E:  MOVWF  x3E
6320:  MOVLW  38
6322:  MOVWF  x3F
6324:  MOVLB  0
6326:  CALL   269E
632A:  MOVLW  19
632C:  MOVLB  5
632E:  MOVWF  x4F
6330:  MOVLW  12
6332:  MOVWF  x50
6334:  MOVLW  3C
6336:  MOVWF  x51
6338:  MOVLW  1A
633A:  MOVWF  x52
633C:  CLRF   x53
633E:  CLRF   x54
6340:  MOVLB  0
6342:  CALL   176A
6346:  MOVLW  37
6348:  MOVLB  5
634A:  MOVWF  x4F
634C:  MOVLW  12
634E:  MOVWF  x50
6350:  MOVLW  44
6352:  MOVWF  x51
6354:  MOVLW  35
6356:  MOVWF  x52
6358:  CLRF   x53
635A:  MOVLW  01
635C:  MOVWF  x54
635E:  MOVLB  0
6360:  CALL   176A
6364:  MOVLB  4
6366:  BSF    x7E.4
....................                } 
....................                if(disp_Despresurizando==0) 
6368:  BTFSC  x7E.0
636A:  BRA    63EA
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
636C:  MOVLB  5
636E:  CLRF   x4F
6370:  MOVLW  37
6372:  MOVWF  x50
6374:  MOVLW  7F
6376:  MOVWF  x51
6378:  MOVLW  3F
637A:  MOVWF  x52
637C:  MOVLW  01
637E:  MOVWF  x53
6380:  CLRF   x54
6382:  MOVLB  0
6384:  CALL   176A
....................                   strcpy(Menus.Letra,"Despresurizando");displayMenu(Menus.Letra,0,55,2,1); 
6388:  MOVLW  05
638A:  MOVWF  FEA
638C:  MOVLW  1D
638E:  MOVWF  FE9
6390:  MOVFF  FF2,53D
6394:  BCF    FF2.7
6396:  MOVLW  00
6398:  CALL   0D98
639C:  TBLRD*-
639E:  TBLRD*+
63A0:  MOVF   FF5,W
63A2:  MOVWF  FEE
63A4:  IORLW  00
63A6:  BNZ   639E
63A8:  MOVLB  5
63AA:  BTFSC  x3D.7
63AC:  BSF    FF2.7
63AE:  MOVLW  05
63B0:  MOVWF  x3E
63B2:  MOVLW  1D
63B4:  MOVWF  x3D
63B6:  CLRF   x3F
63B8:  MOVLW  37
63BA:  MOVWF  x40
63BC:  MOVLW  02
63BE:  MOVWF  x41
63C0:  MOVLW  01
63C2:  MOVWF  x42
63C4:  MOVLB  0
63C6:  CALL   182C
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=0; 
63CA:  MOVLB  4
63CC:  BCF    x7D.4
63CE:  BCF    x7D.5
63D0:  BCF    x7D.6
63D2:  BCF    x7D.7
63D4:  BSF    x7E.0
63D6:  BCF    x7E.1
63D8:  BCF    x7E.2
63DA:  BCF    x7E.3
....................                   glcd_imagen(5); 
63DC:  MOVLW  05
63DE:  MOVLB  5
63E0:  MOVWF  x3D
63E2:  MOVLB  0
63E4:  CALL   2062
63E8:  MOVLB  4
....................                } 
....................                Exhaust=2;tiempo_secado=2; 
63EA:  MOVLW  02
63EC:  MOVWF  x93
63EE:  MOVWF  x92
....................             } 
....................             else 
63F0:  BRA    64CC
....................             { 
....................                if(z==0) 
63F2:  BTFSC  x7E.4
63F4:  BRA    6446
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
63F6:  MOVLB  5
63F8:  CLRF   x3D
63FA:  MOVLW  5A
63FC:  MOVWF  x3E
63FE:  MOVLW  38
6400:  MOVWF  x3F
6402:  MOVLB  0
6404:  CALL   269E
6408:  MOVLW  19
640A:  MOVLB  5
640C:  MOVWF  x4F
640E:  MOVLW  12
6410:  MOVWF  x50
6412:  MOVLW  3C
6414:  MOVWF  x51
6416:  MOVLW  1A
6418:  MOVWF  x52
641A:  CLRF   x53
641C:  CLRF   x54
641E:  MOVLB  0
6420:  CALL   176A
6424:  MOVLW  37
6426:  MOVLB  5
6428:  MOVWF  x4F
642A:  MOVLW  12
642C:  MOVWF  x50
642E:  MOVLW  44
6430:  MOVWF  x51
6432:  MOVLW  35
6434:  MOVWF  x52
6436:  CLRF   x53
6438:  MOVLW  01
643A:  MOVWF  x54
643C:  MOVLB  0
643E:  CALL   176A
6442:  MOVLB  4
6444:  BSF    x7E.4
....................                   //tiempo_secado=1; 
....................                } 
....................                if(disp_Secando==0) 
6446:  BTFSC  x7D.6
6448:  BRA    64C8
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
644A:  MOVLB  5
644C:  CLRF   x4F
644E:  MOVLW  37
6450:  MOVWF  x50
6452:  MOVLW  7F
6454:  MOVWF  x51
6456:  MOVLW  3F
6458:  MOVWF  x52
645A:  MOVLW  01
645C:  MOVWF  x53
645E:  CLRF   x54
6460:  MOVLB  0
6462:  CALL   176A
....................                   strcpy(Menus.Letra,"Secando");displayMenu(Menus.Letra,0,55,2,1); 
6466:  MOVLW  05
6468:  MOVWF  FEA
646A:  MOVLW  1D
646C:  MOVWF  FE9
646E:  MOVFF  FF2,53D
6472:  BCF    FF2.7
6474:  MOVLW  00
6476:  CALL   0DC2
647A:  TBLRD*-
647C:  TBLRD*+
647E:  MOVF   FF5,W
6480:  MOVWF  FEE
6482:  IORLW  00
6484:  BNZ   647C
6486:  MOVLB  5
6488:  BTFSC  x3D.7
648A:  BSF    FF2.7
648C:  MOVLW  05
648E:  MOVWF  x3E
6490:  MOVLW  1D
6492:  MOVWF  x3D
6494:  CLRF   x3F
6496:  MOVLW  37
6498:  MOVWF  x40
649A:  MOVLW  02
649C:  MOVWF  x41
649E:  MOVLW  01
64A0:  MOVWF  x42
64A2:  MOVLB  0
64A4:  CALL   182C
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
64A8:  MOVLB  4
64AA:  BCF    x7D.4
64AC:  BCF    x7D.5
64AE:  BSF    x7D.6
64B0:  BCF    x7D.7
64B2:  BCF    x7E.0
64B4:  BCF    x7E.1
64B6:  BCF    x7E.2
64B8:  BCF    x7E.3
....................                   glcd_imagen(5); 
64BA:  MOVLW  05
64BC:  MOVLB  5
64BE:  MOVWF  x3D
64C0:  MOVLB  0
64C2:  CALL   2062
64C6:  MOVLB  4
....................                } 
....................                Exhaust=1; 
64C8:  MOVLW  01
64CA:  MOVWF  x93
....................             } 
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................           
....................          if(Puerta==0) 
64CC:  MOVF   x70,F
64CE:  BNZ   6544
....................          { 
....................             if(disp_Door==0) 
64D0:  BTFSC  x7E.2
64D2:  BRA    6544
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
64D4:  MOVLB  5
64D6:  CLRF   x4F
64D8:  MOVLW  37
64DA:  MOVWF  x50
64DC:  MOVLW  7F
64DE:  MOVWF  x51
64E0:  MOVLW  3F
64E2:  MOVWF  x52
64E4:  MOVLW  01
64E6:  MOVWF  x53
64E8:  CLRF   x54
64EA:  MOVLB  0
64EC:  CALL   176A
....................                strcpy(Menus.Letra,"Puerta Abierta");displayMenu(Menus.Letra,0,55,2,1); 
64F0:  MOVLW  05
64F2:  MOVWF  FEA
64F4:  MOVLW  1D
64F6:  MOVWF  FE9
64F8:  MOVFF  FF2,53D
64FC:  BCF    FF2.7
64FE:  MOVLW  00
6500:  CALL   0DE4
6504:  TBLRD*-
6506:  TBLRD*+
6508:  MOVF   FF5,W
650A:  MOVWF  FEE
650C:  IORLW  00
650E:  BNZ   6506
6510:  MOVLB  5
6512:  BTFSC  x3D.7
6514:  BSF    FF2.7
6516:  MOVLW  05
6518:  MOVWF  x3E
651A:  MOVLW  1D
651C:  MOVWF  x3D
651E:  CLRF   x3F
6520:  MOVLW  37
6522:  MOVWF  x40
6524:  MOVLW  02
6526:  MOVWF  x41
6528:  MOVLW  01
652A:  MOVWF  x42
652C:  MOVLB  0
652E:  CALL   182C
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=1;disp_Fin=0; 
6532:  MOVLB  4
6534:  BCF    x7D.4
6536:  BCF    x7D.5
6538:  BCF    x7D.6
653A:  BCF    x7D.7
653C:  BCF    x7E.0
653E:  BCF    x7E.1
6540:  BSF    x7E.2
6542:  BCF    x7E.3
....................             }    
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................       } 
....................       EnviarCodigo(); 
6544:  MOVLB  0
6546:  CALL   1B12
....................    } 
....................  
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
654A:  MOVLB  4
654C:  BTFSS  x7C.6
654E:  BRA    68A2
....................    {                       
....................       Lectura=0; 
6550:  BCF    x7C.6
....................       //displayTiempo(NivelTanque,40,30,2,1);  
....................       //displayTiempo(Presostato,40,40,2,1);  
....................       //displayTiempo(ADCTemperatura[2],20,30,2,1);  
....................       //displayT(Prom,20,30,2); 
....................       displayTiempo(Presostato,31,40,2,1); 
6552:  MOVFF  474,53E
6556:  MOVLW  1F
6558:  MOVLB  5
655A:  MOVWF  x3F
655C:  MOVLW  28
655E:  MOVWF  x40
6560:  MOVLW  02
6562:  MOVWF  x41
6564:  MOVLW  01
6566:  MOVWF  x42
6568:  MOVLB  0
656A:  CALL   240E
....................       glcd_rect(51, 40, 62, 48, YES, OFF);glcd_text57(52, 40, kpa, 1, ON); 
656E:  MOVLW  33
6570:  MOVLB  5
6572:  MOVWF  x4F
6574:  MOVLW  28
6576:  MOVWF  x50
6578:  MOVLW  3E
657A:  MOVWF  x51
657C:  MOVLW  30
657E:  MOVWF  x52
6580:  MOVLW  01
6582:  MOVWF  x53
6584:  CLRF   x54
6586:  MOVLB  0
6588:  CALL   176A
658C:  MOVLW  34
658E:  MOVLB  5
6590:  MOVWF  x4E
6592:  MOVLW  28
6594:  MOVWF  x4F
6596:  MOVLW  04
6598:  MOVWF  x51
659A:  MOVLW  1C
659C:  MOVWF  x50
659E:  MOVLW  01
65A0:  MOVWF  x52
65A2:  MOVWF  x53
65A4:  MOVLB  0
65A6:  CALL   1474
....................       displayT(ADC_Pt100,69,20,2); 
65AA:  MOVFF  4A6,540
65AE:  MOVFF  4A5,53F
65B2:  MOVFF  4A4,53E
65B6:  MOVFF  4A3,53D
65BA:  MOVLW  45
65BC:  MOVLB  5
65BE:  MOVWF  x41
65C0:  MOVLW  14
65C2:  MOVWF  x42
65C4:  MOVLW  02
65C6:  MOVWF  x43
65C8:  MOVLB  0
65CA:  GOTO   2A32
....................       glcd_circle(95,40,2,NO,ON); 
65CE:  MOVLW  5F
65D0:  MOVLB  5
65D2:  MOVWF  x3D
65D4:  MOVLW  28
65D6:  MOVWF  x3E
65D8:  MOVLW  02
65DA:  MOVWF  x3F
65DC:  CLRF   x40
65DE:  MOVLW  01
65E0:  MOVWF  x41
65E2:  MOVLB  0
65E4:  CALL   215E
....................       strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
65E8:  MOVLW  05
65EA:  MOVWF  FEA
65EC:  MOVLW  1D
65EE:  MOVWF  FE9
65F0:  MOVFF  FF2,53D
65F4:  BCF    FF2.7
65F6:  MOVLW  00
65F8:  CALL   09FE
65FC:  TBLRD*-
65FE:  TBLRD*+
6600:  MOVF   FF5,W
6602:  MOVWF  FEE
6604:  IORLW  00
6606:  BNZ   65FE
6608:  MOVLB  5
660A:  BTFSC  x3D.7
660C:  BSF    FF2.7
660E:  MOVLW  05
6610:  MOVWF  x3E
6612:  MOVLW  1D
6614:  MOVWF  x3D
6616:  MOVLW  66
6618:  MOVWF  x3F
661A:  MOVLW  28
661C:  MOVWF  x40
661E:  MOVLW  02
6620:  MOVWF  x41
6622:  MOVWF  x42
6624:  MOVLB  0
6626:  CALL   182C
....................       //displayT(Pt,1,20,3); 
....................       displayTiempo(Setpoint,5,20,2,1); 
662A:  MOVFF  48E,53E
662E:  MOVLW  05
6630:  MOVLB  5
6632:  MOVWF  x3F
6634:  MOVLW  14
6636:  MOVWF  x40
6638:  MOVLW  02
663A:  MOVWF  x41
663C:  MOVLW  01
663E:  MOVWF  x42
6640:  MOVLB  0
6642:  CALL   240E
....................          
....................       if(Visua==1)// Si se activo la visualización desde software 
6646:  MOVLB  4
6648:  BTFSS  x7D.1
664A:  BRA    6754
....................       { 
....................          displayTiempo((int8)desvio,5,30,4,1); 
664C:  MOVFF  518,540
6650:  MOVFF  517,53F
6654:  MOVFF  516,53E
6658:  MOVFF  515,53D
665C:  MOVLB  0
665E:  CALL   2AAC
6662:  MOVFF  01,53D
6666:  MOVFF  01,53E
666A:  MOVLW  05
666C:  MOVLB  5
666E:  MOVWF  x3F
6670:  MOVLW  1E
6672:  MOVWF  x40
6674:  MOVLW  04
6676:  MOVWF  x41
6678:  MOVLW  01
667A:  MOVWF  x42
667C:  MOVLB  0
667E:  CALL   240E
....................          displayTiempo((int8)Tpulso,5,40,4,1); 
6682:  MOVFF  4FC,540
6686:  MOVFF  4FB,53F
668A:  MOVFF  4FA,53E
668E:  MOVFF  4F9,53D
6692:  CALL   2AAC
6696:  MOVFF  01,53D
669A:  MOVFF  01,53E
669E:  MOVLW  05
66A0:  MOVLB  5
66A2:  MOVWF  x3F
66A4:  MOVLW  28
66A6:  MOVWF  x40
66A8:  MOVLW  04
66AA:  MOVWF  x41
66AC:  MOVLW  01
66AE:  MOVWF  x42
66B0:  MOVLB  0
66B2:  CALL   240E
....................          displayTiempo((int8)Ganancia,30,40,4,1); 
66B6:  MOVFF  510,540
66BA:  MOVFF  50F,53F
66BE:  MOVFF  50E,53E
66C2:  MOVFF  50D,53D
66C6:  CALL   2AAC
66CA:  MOVFF  01,53D
66CE:  MOVFF  01,53E
66D2:  MOVLW  1E
66D4:  MOVLB  5
66D6:  MOVWF  x3F
66D8:  MOVLW  28
66DA:  MOVWF  x40
66DC:  MOVLW  04
66DE:  MOVWF  x41
66E0:  MOVLW  01
66E2:  MOVWF  x42
66E4:  MOVLB  0
66E6:  CALL   240E
....................          displayTiempo((int8)Ajuste,30,30,4,1); 
66EA:  MOVFF  477,53E
66EE:  MOVLW  1E
66F0:  MOVLB  5
66F2:  MOVWF  x3F
66F4:  MOVWF  x40
66F6:  MOVLW  04
66F8:  MOVWF  x41
66FA:  MOVLW  01
66FC:  MOVWF  x42
66FE:  MOVLB  0
6700:  CALL   240E
....................          displayTiempo((int8)Ajusten,30,20,4,1); 
6704:  MOVFF  478,53E
6708:  MOVLW  1E
670A:  MOVLB  5
670C:  MOVWF  x3F
670E:  MOVLW  14
6710:  MOVWF  x40
6712:  MOVLW  04
6714:  MOVWF  x41
6716:  MOVLW  01
6718:  MOVWF  x42
671A:  MOVLB  0
671C:  CALL   240E
....................          displayTiempo((int8)Ganancia2,50,40,4,1); 
6720:  MOVFF  514,540
6724:  MOVFF  513,53F
6728:  MOVFF  512,53E
672C:  MOVFF  511,53D
6730:  CALL   2AAC
6734:  MOVFF  01,53D
6738:  MOVFF  01,53E
673C:  MOVLW  32
673E:  MOVLB  5
6740:  MOVWF  x3F
6742:  MOVLW  28
6744:  MOVWF  x40
6746:  MOVLW  04
6748:  MOVWF  x41
674A:  MOVLW  01
674C:  MOVWF  x42
674E:  MOVLB  0
6750:  CALL   240E
....................       } 
....................           
....................       // Muestra Valor de esterilizacion actual. 
....................       displayTiempo(Testerilizacion[3],80,0,0,1);displayTiempo(Testerilizacion[2],86,0,0,1); 
6754:  MOVFF  4AA,53E
6758:  MOVLW  50
675A:  MOVLB  5
675C:  MOVWF  x3F
675E:  CLRF   x40
6760:  CLRF   x41
6762:  MOVLW  01
6764:  MOVWF  x42
6766:  MOVLB  0
6768:  CALL   240E
676C:  MOVFF  4A9,53E
6770:  MOVLW  56
6772:  MOVLB  5
6774:  MOVWF  x3F
6776:  CLRF   x40
6778:  CLRF   x41
677A:  MOVLW  01
677C:  MOVWF  x42
677E:  MOVLB  0
6780:  CALL   240E
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,0,2,1);  
6784:  MOVLW  05
6786:  MOVWF  FEA
6788:  MOVLW  1D
678A:  MOVWF  FE9
678C:  MOVFF  FF2,53D
6790:  BCF    FF2.7
6792:  MOVLW  00
6794:  CALL   06CA
6798:  TBLRD*-
679A:  TBLRD*+
679C:  MOVF   FF5,W
679E:  MOVWF  FEE
67A0:  IORLW  00
67A2:  BNZ   679A
67A4:  MOVLB  5
67A6:  BTFSC  x3D.7
67A8:  BSF    FF2.7
67AA:  MOVLW  05
67AC:  MOVWF  x3E
67AE:  MOVLW  1D
67B0:  MOVWF  x3D
67B2:  MOVLW  5C
67B4:  MOVWF  x3F
67B6:  CLRF   x40
67B8:  MOVLW  02
67BA:  MOVWF  x41
67BC:  MOVLW  01
67BE:  MOVWF  x42
67C0:  MOVLB  0
67C2:  CALL   182C
....................       displayTiempo(Testerilizacion[1],98,0,0,1);displayTiempo(Testerilizacion[0],104,0,0,1); 
67C6:  MOVFF  4A8,53E
67CA:  MOVLW  62
67CC:  MOVLB  5
67CE:  MOVWF  x3F
67D0:  CLRF   x40
67D2:  CLRF   x41
67D4:  MOVLW  01
67D6:  MOVWF  x42
67D8:  MOVLB  0
67DA:  CALL   240E
67DE:  MOVFF  4A7,53E
67E2:  MOVLW  68
67E4:  MOVLB  5
67E6:  MOVWF  x3F
67E8:  CLRF   x40
67EA:  CLRF   x41
67EC:  MOVLW  01
67EE:  MOVWF  x42
67F0:  MOVLB  0
67F2:  CALL   240E
....................       // Muestra tiempo de secado actual. 
....................       displayTiempo(Tsecado[3],80,8,0,1);displayTiempo(Tsecado[2],86,8,0,1); 
67F6:  MOVFF  4B2,53E
67FA:  MOVLW  50
67FC:  MOVLB  5
67FE:  MOVWF  x3F
6800:  MOVLW  08
6802:  MOVWF  x40
6804:  CLRF   x41
6806:  MOVLW  01
6808:  MOVWF  x42
680A:  MOVLB  0
680C:  CALL   240E
6810:  MOVFF  4B1,53E
6814:  MOVLW  56
6816:  MOVLB  5
6818:  MOVWF  x3F
681A:  MOVLW  08
681C:  MOVWF  x40
681E:  CLRF   x41
6820:  MOVLW  01
6822:  MOVWF  x42
6824:  MOVLB  0
6826:  CALL   240E
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,8,2,1);  
682A:  MOVLW  05
682C:  MOVWF  FEA
682E:  MOVLW  1D
6830:  MOVWF  FE9
6832:  MOVFF  FF2,53D
6836:  BCF    FF2.7
6838:  MOVLW  00
683A:  CALL   06CA
683E:  TBLRD*-
6840:  TBLRD*+
6842:  MOVF   FF5,W
6844:  MOVWF  FEE
6846:  IORLW  00
6848:  BNZ   6840
684A:  MOVLB  5
684C:  BTFSC  x3D.7
684E:  BSF    FF2.7
6850:  MOVLW  05
6852:  MOVWF  x3E
6854:  MOVLW  1D
6856:  MOVWF  x3D
6858:  MOVLW  5C
685A:  MOVWF  x3F
685C:  MOVLW  08
685E:  MOVWF  x40
6860:  MOVLW  02
6862:  MOVWF  x41
6864:  MOVLW  01
6866:  MOVWF  x42
6868:  MOVLB  0
686A:  CALL   182C
....................       displayTiempo(Tsecado[1],98,8,0,1);displayTiempo(Tsecado[0],104,8,0,1); 
686E:  MOVFF  4B0,53E
6872:  MOVLW  62
6874:  MOVLB  5
6876:  MOVWF  x3F
6878:  MOVLW  08
687A:  MOVWF  x40
687C:  CLRF   x41
687E:  MOVLW  01
6880:  MOVWF  x42
6882:  MOVLB  0
6884:  CALL   240E
6888:  MOVFF  4AF,53E
688C:  MOVLW  68
688E:  MOVLB  5
6890:  MOVWF  x3F
6892:  MOVLW  08
6894:  MOVWF  x40
6896:  CLRF   x41
6898:  MOVLW  01
689A:  MOVWF  x42
689C:  MOVLB  0
689E:  CALL   240E
....................    } 
....................           
....................    if(ADC_Pt100>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
68A2:  MOVLB  5
68A4:  CLRF   x43
68A6:  MOVFF  48E,542
68AA:  MOVLB  0
68AC:  CALL   112E
68B0:  MOVFF  00,53D
68B4:  MOVFF  01,53E
68B8:  MOVFF  02,53F
68BC:  MOVFF  03,540
68C0:  BSF    FD8.1
68C2:  MOVFF  03,544
68C6:  MOVFF  02,543
68CA:  MOVFF  01,542
68CE:  MOVFF  00,541
68D2:  MOVLB  5
68D4:  CLRF   x48
68D6:  CLRF   x47
68D8:  CLRF   x46
68DA:  MOVLW  7F
68DC:  MOVWF  x45
68DE:  MOVLB  0
68E0:  CALL   1CF6
68E4:  MOVFF  03,540
68E8:  MOVFF  02,53F
68EC:  MOVFF  01,53E
68F0:  MOVFF  00,53D
68F4:  MOVFF  4A6,544
68F8:  MOVFF  4A5,543
68FC:  MOVFF  4A4,542
6900:  MOVFF  4A3,541
6904:  GOTO   2AE8
6908:  BC    690C
690A:  BNZ   6972
....................    { 
....................       if(est==0) 
690C:  MOVLB  4
690E:  BTFSC  x7D.0
6910:  BRA    6974
....................       { 
....................          tiempo_esterilizacion=1; 
6912:  MOVLW  01
6914:  MOVWF  x91
....................          Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1; 
6916:  MOVLB  5
6918:  CLRF   x3D
691A:  MOVLW  5A
691C:  MOVWF  x3E
691E:  MOVLW  38
6920:  MOVWF  x3F
6922:  MOVLB  0
6924:  CALL   269E
6928:  MOVLW  0F
692A:  MOVLB  5
692C:  MOVWF  x4F
692E:  MOVLW  12
6930:  MOVWF  x50
6932:  MOVLW  1E
6934:  MOVWF  x51
6936:  MOVLW  35
6938:  MOVWF  x52
693A:  CLRF   x53
693C:  CLRF   x54
693E:  MOVLB  0
6940:  CALL   176A
6944:  MOVLW  19
6946:  MOVLB  5
6948:  MOVWF  x4F
694A:  MOVLW  12
694C:  MOVWF  x50
694E:  MOVLW  3C
6950:  MOVWF  x51
6952:  MOVLW  1A
6954:  MOVWF  x52
6956:  CLRF   x53
6958:  MOVLW  01
695A:  MOVWF  x54
695C:  MOVLB  0
695E:  CALL   176A
6962:  MOVLB  4
6964:  BSF    x7D.0
....................          glcd_imagen(5); 
6966:  MOVLW  05
6968:  MOVLB  5
696A:  MOVWF  x3D
696C:  MOVLB  0
696E:  CALL   2062
6972:  MOVLB  4
....................       } 
....................    }   
....................     
....................    /*if(ADC_Pt100<((float)Setpoint-2.0)) 
....................    { 
....................       glcd_rect(15, 18, 30, 53, NO, ON); 
....................       if(est==1) 
....................       {glcd_rect(25, 18, 60, 26, NO, OFF);} 
....................       est=0;tiempo_esterilizacion=0; 
....................    }*/ 
....................     
....................    if(Exhaust==1 && tiempo_esterilizacion==2)// Si realiza desfogue rapido 
6974:  DECFSZ x93,W
6976:  BRA    6996
6978:  MOVF   x91,W
697A:  SUBLW  02
697C:  BNZ   6996
....................    { 
....................       // Debe enviar a Hardware_Controller que abra EV de desfogue 
....................       Control=0; 
697E:  CLRF   x87
....................       if(Presostato<8) 
6980:  MOVF   x74,W
6982:  SUBLW  07
6984:  BNC   6992
....................       { 
....................          tiempo_secado=1; 
6986:  MOVLW  01
6988:  MOVWF  x92
....................          Control=0;EVDesfogue=3; 
698A:  CLRF   x87
698C:  MOVLW  03
698E:  MOVWF  x80
....................       } 
....................       else 
6990:  BRA    6996
....................       { 
....................          EVDesfogue=1; 
6992:  MOVLW  01
6994:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    if(Exhaust==2 && tiempo_esterilizacion==2 )// Si Debe realizar Rampa 
6996:  MOVF   x93,W
6998:  SUBLW  02
699A:  BNZ   69BE
699C:  MOVF   x91,W
699E:  SUBLW  02
69A0:  BNZ   69BE
....................    {      
....................       // Debe enviar a Hardware_Controller que abra Ejecute modo rampa. 
....................       EVDesfogue=2; 
69A2:  MOVLW  02
69A4:  MOVWF  x80
....................       Control=0; 
69A6:  CLRF   x87
....................       if(Presostato<8) 
69A8:  MOVF   x74,W
69AA:  SUBLW  07
69AC:  BNC   69BE
....................       { 
....................          tiempo_esterilizacion=3; 
69AE:  MOVLW  03
69B0:  MOVWF  x91
....................          tiempo_secado=2; 
69B2:  MOVLW  02
69B4:  MOVWF  x92
....................          fin_ciclo=1; 
69B6:  MOVLW  01
69B8:  MOVWF  x8F
....................          EVDesfogue=3; 
69BA:  MOVLW  03
69BC:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3]) && tiempo_esterilizacion==1) 
69BE:  MOVF   xAB,W
69C0:  SUBWF  xA7,W
69C2:  BNZ   69DE
69C4:  MOVF   xAC,W
69C6:  SUBWF  xA8,W
69C8:  BNZ   69DE
69CA:  MOVF   xAD,W
69CC:  SUBWF  xA9,W
69CE:  BNZ   69DE
69D0:  MOVF   xAE,W
69D2:  SUBWF  xAA,W
69D4:  BNZ   69DE
69D6:  DECFSZ x91,W
69D8:  BRA    69DE
....................    { 
....................       tiempo_esterilizacion=2; 
69DA:  MOVLW  02
69DC:  MOVWF  x91
....................    }  
....................     
....................    // Si cumplio el tiempo de secado. 
....................    if((Tsecado[0]>=Tsecadop[0])&&(Tsecado[1]>=Tsecadop[1])&&(Tsecado[2]>=Tsecadop[2])&&(Tsecado[3]>=Tsecadop[3]) && tiempo_secado==1) 
69DE:  MOVF   xB3,W
69E0:  XORLW  80
69E2:  MOVWF  00
69E4:  MOVF   xAF,W
69E6:  XORLW  80
69E8:  SUBWF  00,W
69EA:  BZ    69EE
69EC:  BC    6A2E
69EE:  MOVF   xB4,W
69F0:  XORLW  80
69F2:  MOVWF  00
69F4:  MOVF   xB0,W
69F6:  XORLW  80
69F8:  SUBWF  00,W
69FA:  BZ    69FE
69FC:  BC    6A2E
69FE:  MOVF   xB5,W
6A00:  XORLW  80
6A02:  MOVWF  00
6A04:  MOVF   xB1,W
6A06:  XORLW  80
6A08:  SUBWF  00,W
6A0A:  BZ    6A0E
6A0C:  BC    6A2E
6A0E:  MOVF   xB6,W
6A10:  XORLW  80
6A12:  MOVWF  00
6A14:  MOVF   xB2,W
6A16:  XORLW  80
6A18:  SUBWF  00,W
6A1A:  BZ    6A1E
6A1C:  BC    6A2E
6A1E:  DECFSZ x92,W
6A20:  BRA    6A2E
....................    { 
....................       tiempo_esterilizacion=3; 
6A22:  MOVLW  03
6A24:  MOVWF  x91
....................       tiempo_secado=2; 
6A26:  MOVLW  02
6A28:  MOVWF  x92
....................       fin_ciclo=1; 
6A2A:  MOVLW  01
6A2C:  MOVWF  x8F
....................    } 
....................     
....................    if(fin_ciclo==1) 
6A2E:  DECFSZ x8F,W
6A30:  BRA    6AD6
....................    { 
....................       // Debe enviar a Hardware_Controller que apague Resistencia y que cierre EV de desfogue 
....................       Control=0;EVDesfogue=3; 
6A32:  CLRF   x87
6A34:  MOVLW  03
6A36:  MOVWF  x80
....................       if(disp_Fin==0) 
6A38:  BTFSC  x7E.3
6A3A:  BRA    6AAC
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
6A3C:  MOVLB  5
6A3E:  CLRF   x4F
6A40:  MOVLW  37
6A42:  MOVWF  x50
6A44:  MOVLW  7F
6A46:  MOVWF  x51
6A48:  MOVLW  3F
6A4A:  MOVWF  x52
6A4C:  MOVLW  01
6A4E:  MOVWF  x53
6A50:  CLRF   x54
6A52:  MOVLB  0
6A54:  CALL   176A
....................          strcpy(Menus.Letra,"Ciclo Finalizado");displayMenu(Menus.Letra,0,55,2,1); 
6A58:  MOVLW  05
6A5A:  MOVWF  FEA
6A5C:  MOVLW  1D
6A5E:  MOVWF  FE9
6A60:  MOVFF  FF2,53D
6A64:  BCF    FF2.7
6A66:  MOVLW  00
6A68:  CALL   0E0E
6A6C:  TBLRD*-
6A6E:  TBLRD*+
6A70:  MOVF   FF5,W
6A72:  MOVWF  FEE
6A74:  IORLW  00
6A76:  BNZ   6A6E
6A78:  MOVLB  5
6A7A:  BTFSC  x3D.7
6A7C:  BSF    FF2.7
6A7E:  MOVLW  05
6A80:  MOVWF  x3E
6A82:  MOVLW  1D
6A84:  MOVWF  x3D
6A86:  CLRF   x3F
6A88:  MOVLW  37
6A8A:  MOVWF  x40
6A8C:  MOVLW  02
6A8E:  MOVWF  x41
6A90:  MOVLW  01
6A92:  MOVWF  x42
6A94:  MOVLB  0
6A96:  CALL   182C
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=1; 
6A9A:  MOVLB  4
6A9C:  BCF    x7D.4
6A9E:  BCF    x7D.5
6AA0:  BSF    x7D.6
6AA2:  BCF    x7D.7
6AA4:  BSF    x7E.0
6AA6:  BCF    x7E.1
6AA8:  BCF    x7E.2
6AAA:  BSF    x7E.3
....................       }    
....................        
....................       if(RIGHT) 
6AAC:  BSF    F96.1
6AAE:  BTFSS  F84.1
6AB0:  BRA    6AD6
....................       { 
....................          Control=3; 
6AB2:  MOVLW  03
6AB4:  MOVWF  x87
....................          EnviarCodigo(); 
6AB6:  MOVLB  0
6AB8:  CALL   1B12
....................          delay_ms(1000); 
6ABC:  MOVLW  04
6ABE:  MOVLB  5
6AC0:  MOVWF  x3D
6AC2:  MOVLW  FA
6AC4:  MOVWF  x42
6AC6:  MOVLB  0
6AC8:  CALL   1104
6ACC:  MOVLB  5
6ACE:  DECFSZ x3D,F
6AD0:  BRA    6AC2
....................          reset_cpu(); 
6AD2:  RESET
6AD4:  MOVLB  4
....................       } 
....................    } 
....................    EVAgua=10; 
6AD6:  MOVLW  0A
6AD8:  MOVWF  x81
....................    //EnviarCodigo(); 
....................   } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  while(Menu==100) 
....................  { 
6ADA:  MOVF   x89,W
6ADC:  SUBLW  64
6ADE:  BTFSS  FD8.2
6AE0:  BRA    6BDE
....................     
....................    displayTiempo(datoRx[0],0,10,2,1); 
6AE2:  MOVFF  4D7,53E
6AE6:  MOVLB  5
6AE8:  CLRF   x3F
6AEA:  MOVLW  0A
6AEC:  MOVWF  x40
6AEE:  MOVLW  02
6AF0:  MOVWF  x41
6AF2:  MOVLW  01
6AF4:  MOVWF  x42
6AF6:  MOVLB  0
6AF8:  CALL   240E
....................    displayTiempo(datoRx[1],0,20,2,1); 
6AFC:  MOVFF  4D8,53E
6B00:  MOVLB  5
6B02:  CLRF   x3F
6B04:  MOVLW  14
6B06:  MOVWF  x40
6B08:  MOVLW  02
6B0A:  MOVWF  x41
6B0C:  MOVLW  01
6B0E:  MOVWF  x42
6B10:  MOVLB  0
6B12:  CALL   240E
....................    displayTiempo(datoRx[2],0,30,2,1); 
6B16:  MOVFF  4D9,53E
6B1A:  MOVLB  5
6B1C:  CLRF   x3F
6B1E:  MOVLW  1E
6B20:  MOVWF  x40
6B22:  MOVLW  02
6B24:  MOVWF  x41
6B26:  MOVLW  01
6B28:  MOVWF  x42
6B2A:  MOVLB  0
6B2C:  CALL   240E
....................    displayTiempo(datoRx[3],0,40,2,1); 
6B30:  MOVFF  4DA,53E
6B34:  MOVLB  5
6B36:  CLRF   x3F
6B38:  MOVLW  28
6B3A:  MOVWF  x40
6B3C:  MOVLW  02
6B3E:  MOVWF  x41
6B40:  MOVLW  01
6B42:  MOVWF  x42
6B44:  MOVLB  0
6B46:  CALL   240E
....................    displayTiempo(Opcion,0,50,2,1); 
6B4A:  MOVFF  490,53E
6B4E:  MOVLB  5
6B50:  CLRF   x3F
6B52:  MOVLW  32
6B54:  MOVWF  x40
6B56:  MOVLW  02
6B58:  MOVWF  x41
6B5A:  MOVLW  01
6B5C:  MOVWF  x42
6B5E:  MOVLB  0
6B60:  CALL   240E
....................     
....................    Opcion++; 
6B64:  MOVLB  4
6B66:  INCF   x90,F
....................    Determina(); 
6B68:  MOVLB  0
6B6A:  CALL   1F6E
....................    displayTiempo(Puerta,50,10,2,1); 
6B6E:  MOVFF  470,53E
6B72:  MOVLW  32
6B74:  MOVLB  5
6B76:  MOVWF  x3F
6B78:  MOVLW  0A
6B7A:  MOVWF  x40
6B7C:  MOVLW  02
6B7E:  MOVWF  x41
6B80:  MOVLW  01
6B82:  MOVWF  x42
6B84:  MOVLB  0
6B86:  CALL   240E
....................    displayTiempo(Parada,50,20,2,1); 
6B8A:  MOVFF  471,53E
6B8E:  MOVLW  32
6B90:  MOVLB  5
6B92:  MOVWF  x3F
6B94:  MOVLW  14
6B96:  MOVWF  x40
6B98:  MOVLW  02
6B9A:  MOVWF  x41
6B9C:  MOVLW  01
6B9E:  MOVWF  x42
6BA0:  MOVLB  0
6BA2:  CALL   240E
....................    displayTiempo(ADC_Pt100,50,30,2,1);      
6BA6:  MOVFF  4A6,540
6BAA:  MOVFF  4A5,53F
6BAE:  MOVFF  4A4,53E
6BB2:  MOVFF  4A3,53D
6BB6:  CALL   2AAC
6BBA:  MOVFF  01,53D
6BBE:  MOVFF  01,53E
6BC2:  MOVLW  32
6BC4:  MOVLB  5
6BC6:  MOVWF  x3F
6BC8:  MOVLW  1E
6BCA:  MOVWF  x40
6BCC:  MOVLW  02
6BCE:  MOVWF  x41
6BD0:  MOVLW  01
6BD2:  MOVWF  x42
6BD4:  MOVLB  0
6BD6:  CALL   240E
....................     
....................  } 
6BDA:  MOVLB  4
6BDC:  BRA    6ADA
....................  Determina(); 
6BDE:  MOVLB  0
6BE0:  CALL   1F6E
....................        
....................       while(Parada==0) 
....................       { 
6BE4:  MOVLB  4
6BE6:  MOVF   x71,F
6BE8:  BNZ   6CAE
....................          delay_ms(100); 
6BEA:  MOVLW  64
6BEC:  MOVLB  5
6BEE:  MOVWF  x42
6BF0:  MOVLB  0
6BF2:  CALL   1104
....................          if(disp_Stop==0) 
6BF6:  MOVLB  4
6BF8:  BTFSC  x7E.1
6BFA:  BRA    6C9A
....................          { 
....................             glcd_fillScreen(OFF);  
6BFC:  MOVLB  5
6BFE:  CLRF   x3E
6C00:  MOVLB  0
6C02:  CALL   11FC
....................             strcpy(Menus.Letra,"  !Parada!");displayMenu(Menus.Letra,0,10,0,2); 
6C06:  MOVLW  05
6C08:  MOVWF  FEA
6C0A:  MOVLW  1D
6C0C:  MOVWF  FE9
6C0E:  MOVFF  FF2,53D
6C12:  BCF    FF2.7
6C14:  MOVLW  00
6C16:  CALL   0E3A
6C1A:  TBLRD*-
6C1C:  TBLRD*+
6C1E:  MOVF   FF5,W
6C20:  MOVWF  FEE
6C22:  IORLW  00
6C24:  BNZ   6C1C
6C26:  MOVLB  5
6C28:  BTFSC  x3D.7
6C2A:  BSF    FF2.7
6C2C:  MOVLW  05
6C2E:  MOVWF  x3E
6C30:  MOVLW  1D
6C32:  MOVWF  x3D
6C34:  CLRF   x3F
6C36:  MOVLW  0A
6C38:  MOVWF  x40
6C3A:  CLRF   x41
6C3C:  MOVLW  02
6C3E:  MOVWF  x42
6C40:  MOVLB  0
6C42:  CALL   182C
....................             strcpy(Menus.Letra," !Activada!");displayMenu(Menus.Letra,0,30,0,2);emergency=1; 
6C46:  MOVLW  05
6C48:  MOVWF  FEA
6C4A:  MOVLW  1D
6C4C:  MOVWF  FE9
6C4E:  MOVFF  FF2,53D
6C52:  BCF    FF2.7
6C54:  MOVLW  00
6C56:  CALL   0E60
6C5A:  TBLRD*-
6C5C:  TBLRD*+
6C5E:  MOVF   FF5,W
6C60:  MOVWF  FEE
6C62:  IORLW  00
6C64:  BNZ   6C5C
6C66:  MOVLB  5
6C68:  BTFSC  x3D.7
6C6A:  BSF    FF2.7
6C6C:  MOVLW  05
6C6E:  MOVWF  x3E
6C70:  MOVLW  1D
6C72:  MOVWF  x3D
6C74:  CLRF   x3F
6C76:  MOVLW  1E
6C78:  MOVWF  x40
6C7A:  CLRF   x41
6C7C:  MOVLW  02
6C7E:  MOVWF  x42
6C80:  MOVLB  0
6C82:  CALL   182C
6C86:  MOVLB  4
6C88:  BSF    x7C.3
....................             disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=1;disp_Door=0;disp_Fin=0; 
6C8A:  BCF    x7D.4
6C8C:  BCF    x7D.5
6C8E:  BCF    x7D.6
6C90:  BCF    x7D.7
6C92:  BCF    x7E.0
6C94:  BSF    x7E.1
6C96:  BCF    x7E.2
6C98:  BCF    x7E.3
....................          } 
....................          if(CadenaRecibida==1) 
6C9A:  BTFSS  x7D.3
6C9C:  BRA    6CAC
....................          { 
....................             Determina(); 
6C9E:  MOVLB  0
6CA0:  CALL   1F6E
....................             EnviarCodigo(); 
6CA4:  CALL   1B12
....................             CadenaRecibida=0; 
6CA8:  MOVLB  4
6CAA:  BCF    x7D.3
....................          } 
....................       }    
6CAC:  BRA    6BE6
....................       if(Parada==1) 
6CAE:  DECFSZ x71,W
6CB0:  BRA    6D52
....................       { 
....................          while(emergency==1) 
....................          { 
6CB2:  BTFSS  x7C.3
6CB4:  BRA    6D52
....................             if(disp_Stop==1) 
6CB6:  BTFSS  x7E.1
6CB8:  BRA    6CC8
....................             { 
....................                glcd_fillScreen(OFF);disp_Stop=0; 
6CBA:  MOVLB  5
6CBC:  CLRF   x3E
6CBE:  MOVLB  0
6CC0:  CALL   11FC
6CC4:  MOVLB  4
6CC6:  BCF    x7E.1
....................             } 
....................          strcpy(Menus.Letra,"!Reinicie!");displayMenu(Menus.Letra,0,10,0,2); 
6CC8:  MOVLW  05
6CCA:  MOVWF  FEA
6CCC:  MOVLW  1D
6CCE:  MOVWF  FE9
6CD0:  MOVFF  FF2,53D
6CD4:  BCF    FF2.7
6CD6:  MOVLW  00
6CD8:  MOVLB  0
6CDA:  CALL   0E86
6CDE:  TBLRD*-
6CE0:  TBLRD*+
6CE2:  MOVF   FF5,W
6CE4:  MOVWF  FEE
6CE6:  IORLW  00
6CE8:  BNZ   6CE0
6CEA:  MOVLB  5
6CEC:  BTFSC  x3D.7
6CEE:  BSF    FF2.7
6CF0:  MOVLW  05
6CF2:  MOVWF  x3E
6CF4:  MOVLW  1D
6CF6:  MOVWF  x3D
6CF8:  CLRF   x3F
6CFA:  MOVLW  0A
6CFC:  MOVWF  x40
6CFE:  CLRF   x41
6D00:  MOVLW  02
6D02:  MOVWF  x42
6D04:  MOVLB  0
6D06:  CALL   182C
....................          strcpy(Menus.Letra,"!el Equipo!");displayMenu(Menus.Letra,0,30,0,2); 
6D0A:  MOVLW  05
6D0C:  MOVWF  FEA
6D0E:  MOVLW  1D
6D10:  MOVWF  FE9
6D12:  MOVFF  FF2,53D
6D16:  BCF    FF2.7
6D18:  MOVLW  00
6D1A:  CALL   0EAC
6D1E:  TBLRD*-
6D20:  TBLRD*+
6D22:  MOVF   FF5,W
6D24:  MOVWF  FEE
6D26:  IORLW  00
6D28:  BNZ   6D20
6D2A:  MOVLB  5
6D2C:  BTFSC  x3D.7
6D2E:  BSF    FF2.7
6D30:  MOVLW  05
6D32:  MOVWF  x3E
6D34:  MOVLW  1D
6D36:  MOVWF  x3D
6D38:  CLRF   x3F
6D3A:  MOVLW  1E
6D3C:  MOVWF  x40
6D3E:  CLRF   x41
6D40:  MOVLW  02
6D42:  MOVWF  x42
6D44:  MOVLB  0
6D46:  CALL   182C
....................          glcd_update();} 
6D4A:  CALL   1256
6D4E:  MOVLB  4
6D50:  BRA    6CB2
....................       } 
....................    } 
6D52:  MOVLB  5
6D54:  GOTO   30F4
.................... } 
6D58:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
