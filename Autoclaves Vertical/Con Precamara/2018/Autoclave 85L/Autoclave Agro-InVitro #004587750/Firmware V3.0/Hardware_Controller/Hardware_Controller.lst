CCS PCH C Compiler, Version 4.104, 5967               27-oct.-16 13:46

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Con Precamara\2016\Autoclave 85L\Autoclave UPTC\Firmware V3\Hardware_Controller\Hardware_Controller.lst

               ROM used: 18316 bytes (56%)
                         Largest free fragment is 14452
               RAM used: 942 (46%) at main() level
                         1028 (50%) worst case
               Stack:    15 worst case (6 in main + 9 for interrupts)

*
0000:  GOTO   34AA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0E1E
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0EA8
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   0D8A
006C:  BTFSS  FA0.5
006E:  GOTO   0078
0072:  BTFSC  FA1.5
0074:  GOTO   0CEA
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
0F0E:  MOVLW  02
0F10:  MOVWF  FEA
0F12:  MOVLW  E2
0F14:  MOVWF  FE9
0F16:  MOVF   FEF,W
0F18:  BZ    0F36
0F1A:  MOVLW  0F
0F1C:  MOVWF  01
0F1E:  CLRF   00
0F20:  DECFSZ 00,F
0F22:  BRA    0F20
0F24:  DECFSZ 01,F
0F26:  BRA    0F1E
0F28:  MOVLW  8F
0F2A:  MOVWF  00
0F2C:  DECFSZ 00,F
0F2E:  BRA    0F2C
0F30:  NOP   
0F32:  DECFSZ FEF,F
0F34:  BRA    0F1A
0F36:  RETLW  00
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xA0) 
*
0D72:  MOVF   FC9,W
0D74:  MOVFF  326,FC9
0D78:  BSF    FC6.4
0D7A:  BCF    F9E.3
0D7C:  BTFSC  FC7.0
0D7E:  BRA    0D7C
0D80:  CLRF   01
0D82:  BTFSC  FC6.4
0D84:  INCF   01,F
0D86:  GOTO   0DBE (RETURN)
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
191C:  MOVLB  3
191E:  BCF    x0C.0
....................    y = x; 
1920:  MOVFF  300,305
1924:  MOVFF  2FF,304
1928:  MOVFF  2FE,303
192C:  MOVFF  2FD,302
....................  
....................    if (x < 0) 
1930:  MOVFF  300,313
1934:  MOVFF  2FF,312
1938:  MOVFF  2FE,311
193C:  MOVFF  2FD,310
1940:  CLRF   x17
1942:  CLRF   x16
1944:  CLRF   x15
1946:  CLRF   x14
1948:  MOVLB  0
194A:  RCALL  1866
194C:  BNC   1958
....................    { 
....................       s = 1; 
194E:  MOVLB  3
1950:  BSF    x0C.0
....................       y = -y; 
1952:  MOVF   x03,W
1954:  XORLW  80
1956:  MOVWF  x03
....................    } 
....................  
....................    if (y <= 32768.0) 
1958:  MOVFF  305,313
195C:  MOVFF  304,312
1960:  MOVFF  303,311
1964:  MOVFF  302,310
1968:  MOVLB  3
196A:  CLRF   x17
196C:  CLRF   x16
196E:  CLRF   x15
1970:  MOVLW  8E
1972:  MOVWF  x14
1974:  MOVLB  0
1976:  RCALL  1866
1978:  BC    197C
197A:  BNZ   19AC
....................   res = (float32)(unsigned int16)y; 
197C:  MOVFF  305,313
1980:  MOVFF  304,312
1984:  MOVFF  303,311
1988:  MOVFF  302,310
198C:  RCALL  18E0
198E:  MOVFF  02,315
1992:  MOVFF  01,314
1996:  CALL   0F38
199A:  MOVFF  03,309
199E:  MOVFF  02,308
19A2:  MOVFF  01,307
19A6:  MOVFF  00,306
....................  
....................  else if (y < 10000000.0) 
19AA:  BRA    1B48
19AC:  MOVFF  305,313
19B0:  MOVFF  304,312
19B4:  MOVFF  303,311
19B8:  MOVFF  302,310
19BC:  MOVLW  80
19BE:  MOVLB  3
19C0:  MOVWF  x17
19C2:  MOVLW  96
19C4:  MOVWF  x16
19C6:  MOVLW  18
19C8:  MOVWF  x15
19CA:  MOVLW  96
19CC:  MOVWF  x14
19CE:  MOVLB  0
19D0:  RCALL  1866
19D2:  BTFSS  FD8.0
19D4:  BRA    1B38
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
19D6:  MOVFF  305,313
19DA:  MOVFF  304,312
19DE:  MOVFF  303,311
19E2:  MOVFF  302,310
19E6:  MOVLB  3
19E8:  CLRF   x17
19EA:  CLRF   x16
19EC:  CLRF   x15
19EE:  MOVLW  8E
19F0:  MOVWF  x14
19F2:  MOVLB  0
19F4:  CALL   0FC2
19F8:  MOVFF  03,313
19FC:  MOVFF  02,312
1A00:  MOVFF  01,311
1A04:  MOVFF  00,310
1A08:  RCALL  18E0
1A0A:  MOVFF  02,30B
1A0E:  MOVFF  01,30A
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1A12:  MOVFF  305,313
1A16:  MOVFF  304,312
1A1A:  MOVFF  303,311
1A1E:  MOVFF  302,310
1A22:  MOVLB  3
1A24:  CLRF   x17
1A26:  CLRF   x16
1A28:  CLRF   x15
1A2A:  MOVLW  8E
1A2C:  MOVWF  x14
1A2E:  MOVLB  0
1A30:  CALL   0FC2
1A34:  MOVFF  00,30D
1A38:  MOVFF  01,30E
1A3C:  MOVFF  02,30F
1A40:  MOVFF  03,310
1A44:  MOVFF  30B,315
1A48:  MOVFF  30A,314
1A4C:  CALL   0F38
1A50:  BSF    FD8.1
1A52:  MOVFF  310,317
1A56:  MOVFF  30F,316
1A5A:  MOVFF  30E,315
1A5E:  MOVFF  30D,314
1A62:  MOVFF  03,31B
1A66:  MOVFF  02,31A
1A6A:  MOVFF  01,319
1A6E:  MOVFF  00,318
1A72:  CALL   1120
1A76:  MOVLB  3
1A78:  CLRF   x13
1A7A:  CLRF   x12
1A7C:  CLRF   x11
1A7E:  MOVLW  8E
1A80:  MOVWF  x10
1A82:  MOVFF  03,317
1A86:  MOVFF  02,316
1A8A:  MOVFF  01,315
1A8E:  MOVFF  00,314
1A92:  MOVLB  0
1A94:  RCALL  1770
1A96:  MOVFF  03,305
1A9A:  MOVFF  02,304
1A9E:  MOVFF  01,303
1AA2:  MOVFF  00,302
....................   res = 32768.0*(float32)l; 
1AA6:  MOVFF  30B,315
1AAA:  MOVFF  30A,314
1AAE:  CALL   0F38
1AB2:  MOVLB  3
1AB4:  CLRF   x13
1AB6:  CLRF   x12
1AB8:  CLRF   x11
1ABA:  MOVLW  8E
1ABC:  MOVWF  x10
1ABE:  MOVFF  03,317
1AC2:  MOVFF  02,316
1AC6:  MOVFF  01,315
1ACA:  MOVFF  00,314
1ACE:  MOVLB  0
1AD0:  RCALL  1770
1AD2:  MOVFF  03,309
1AD6:  MOVFF  02,308
1ADA:  MOVFF  01,307
1ADE:  MOVFF  00,306
....................   res += (float32)(unsigned int16)y; 
1AE2:  MOVFF  305,313
1AE6:  MOVFF  304,312
1AEA:  MOVFF  303,311
1AEE:  MOVFF  302,310
1AF2:  RCALL  18E0
1AF4:  MOVFF  02,315
1AF8:  MOVFF  01,314
1AFC:  CALL   0F38
1B00:  BCF    FD8.1
1B02:  MOVFF  309,317
1B06:  MOVFF  308,316
1B0A:  MOVFF  307,315
1B0E:  MOVFF  306,314
1B12:  MOVFF  03,31B
1B16:  MOVFF  02,31A
1B1A:  MOVFF  01,319
1B1E:  MOVFF  00,318
1B22:  CALL   1120
1B26:  MOVFF  03,309
1B2A:  MOVFF  02,308
1B2E:  MOVFF  01,307
1B32:  MOVFF  00,306
....................  } 
....................  
....................  else 
1B36:  BRA    1B48
....................   res = y; 
1B38:  MOVFF  305,309
1B3C:  MOVFF  304,308
1B40:  MOVFF  303,307
1B44:  MOVFF  302,306
....................  
....................  y = y - (float32)(unsigned int16)y; 
1B48:  MOVFF  305,313
1B4C:  MOVFF  304,312
1B50:  MOVFF  303,311
1B54:  MOVFF  302,310
1B58:  RCALL  18E0
1B5A:  MOVFF  02,315
1B5E:  MOVFF  01,314
1B62:  CALL   0F38
1B66:  BSF    FD8.1
1B68:  MOVFF  305,317
1B6C:  MOVFF  304,316
1B70:  MOVFF  303,315
1B74:  MOVFF  302,314
1B78:  MOVFF  03,31B
1B7C:  MOVFF  02,31A
1B80:  MOVFF  01,319
1B84:  MOVFF  00,318
1B88:  CALL   1120
1B8C:  MOVFF  03,305
1B90:  MOVFF  02,304
1B94:  MOVFF  01,303
1B98:  MOVFF  00,302
....................  
....................  if (s) 
1B9C:  MOVLB  3
1B9E:  BTFSS  x0C.0
1BA0:  BRA    1BA8
....................   res = -res; 
1BA2:  MOVF   x07,W
1BA4:  XORLW  80
1BA6:  MOVWF  x07
....................  
....................  if (y != 0) 
1BA8:  MOVFF  305,313
1BAC:  MOVFF  304,312
1BB0:  MOVFF  303,311
1BB4:  MOVFF  302,310
1BB8:  CLRF   x17
1BBA:  CLRF   x16
1BBC:  CLRF   x15
1BBE:  CLRF   x14
1BC0:  MOVLB  0
1BC2:  RCALL  1866
1BC4:  BZ    1C3E
....................  { 
....................   if (s == 1 && n == 0) 
1BC6:  MOVLB  3
1BC8:  BTFSS  x0C.0
1BCA:  BRA    1C04
1BCC:  MOVF   x01,F
1BCE:  BNZ   1C04
....................    res -= 1.0; 
1BD0:  BSF    FD8.1
1BD2:  MOVFF  309,317
1BD6:  MOVFF  308,316
1BDA:  MOVFF  307,315
1BDE:  MOVFF  306,314
1BE2:  CLRF   x1B
1BE4:  CLRF   x1A
1BE6:  CLRF   x19
1BE8:  MOVLW  7F
1BEA:  MOVWF  x18
1BEC:  MOVLB  0
1BEE:  CALL   1120
1BF2:  MOVFF  03,309
1BF6:  MOVFF  02,308
1BFA:  MOVFF  01,307
1BFE:  MOVFF  00,306
1C02:  MOVLB  3
....................  
....................   if (s == 0 && n == 1) 
1C04:  BTFSC  x0C.0
1C06:  BRA    1C40
1C08:  DECFSZ x01,W
1C0A:  BRA    1C40
....................    res += 1.0; 
1C0C:  BCF    FD8.1
1C0E:  MOVFF  309,317
1C12:  MOVFF  308,316
1C16:  MOVFF  307,315
1C1A:  MOVFF  306,314
1C1E:  CLRF   x1B
1C20:  CLRF   x1A
1C22:  CLRF   x19
1C24:  MOVLW  7F
1C26:  MOVWF  x18
1C28:  MOVLB  0
1C2A:  CALL   1120
1C2E:  MOVFF  03,309
1C32:  MOVFF  02,308
1C36:  MOVFF  01,307
1C3A:  MOVFF  00,306
1C3E:  MOVLB  3
....................  } 
....................  if (x == 0) 
1C40:  MOVFF  300,313
1C44:  MOVFF  2FF,312
1C48:  MOVFF  2FE,311
1C4C:  MOVFF  2FD,310
1C50:  CLRF   x17
1C52:  CLRF   x16
1C54:  CLRF   x15
1C56:  CLRF   x14
1C58:  MOVLB  0
1C5A:  RCALL  1866
1C5C:  BNZ   1C6A
....................     res = 0; 
1C5E:  MOVLB  3
1C60:  CLRF   x09
1C62:  CLRF   x08
1C64:  CLRF   x07
1C66:  CLRF   x06
1C68:  MOVLB  0
....................  
....................  return (res); 
1C6A:  MOVFF  306,00
1C6E:  MOVFF  307,01
1C72:  MOVFF  308,02
1C76:  MOVFF  309,03
.................... } 
1C7A:  RETLW  00
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
*
1C9A:  MOVFF  2FC,300
1C9E:  MOVFF  2FB,2FF
1CA2:  MOVFF  2FA,2FE
1CA6:  MOVFF  2F9,2FD
1CAA:  MOVLB  3
1CAC:  CLRF   x01
1CAE:  MOVLB  0
1CB0:  RCALL  191C
.................... } 
1CB2:  GOTO   1DBA (RETURN)
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
1C7C:  MOVFF  2FC,300
1C80:  MOVFF  2FB,2FF
1C84:  MOVFF  2FA,2FE
1C88:  MOVFF  2F9,2FD
1C8C:  MOVLW  01
1C8E:  MOVLB  3
1C90:  MOVWF  x01
1C92:  MOVLB  0
1C94:  RCALL  191C
.................... } 
1C96:  GOTO   1D72 (RETURN)
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
*
1CB6:  MOVFF  2F0,313
1CBA:  MOVFF  2EF,312
1CBE:  MOVFF  2EE,311
1CC2:  MOVFF  2ED,310
1CC6:  MOVLB  3
1CC8:  CLRF   x17
1CCA:  CLRF   x16
1CCC:  CLRF   x15
1CCE:  CLRF   x14
1CD0:  MOVLB  0
1CD2:  RCALL  1866
1CD4:  BTFSC  FD8.2
1CD6:  BRA    1E16
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
1CD8:  MOVFF  2EC,313
1CDC:  MOVFF  2EB,312
1CE0:  MOVFF  2EA,311
1CE4:  MOVFF  2E9,310
1CE8:  MOVFF  2F0,317
1CEC:  MOVFF  2EF,316
1CF0:  MOVFF  2EE,315
1CF4:  MOVFF  2ED,314
1CF8:  CALL   0FC2
1CFC:  MOVFF  00,2F5
1D00:  MOVFF  01,2F6
1D04:  MOVFF  02,2F7
1D08:  MOVFF  03,2F8
1D0C:  MOVFF  03,313
1D10:  MOVFF  02,312
1D14:  MOVFF  01,311
1D18:  MOVFF  00,310
1D1C:  MOVLB  3
1D1E:  CLRF   x17
1D20:  CLRF   x16
1D22:  CLRF   x15
1D24:  CLRF   x14
1D26:  MOVLB  0
1D28:  RCALL  1866
1D2A:  BNC   1D74
1D2C:  MOVFF  2EC,313
1D30:  MOVFF  2EB,312
1D34:  MOVFF  2EA,311
1D38:  MOVFF  2E9,310
1D3C:  MOVFF  2F0,317
1D40:  MOVFF  2EF,316
1D44:  MOVFF  2EE,315
1D48:  MOVFF  2ED,314
1D4C:  CALL   0FC2
1D50:  MOVFF  00,2F5
1D54:  MOVFF  01,2F6
1D58:  MOVFF  02,2F7
1D5C:  MOVFF  03,2F8
1D60:  MOVFF  03,2FC
1D64:  MOVFF  02,2FB
1D68:  MOVFF  01,2FA
1D6C:  MOVFF  00,2F9
1D70:  BRA    1C7C
1D72:  BRA    1DBA
1D74:  MOVFF  2EC,313
1D78:  MOVFF  2EB,312
1D7C:  MOVFF  2EA,311
1D80:  MOVFF  2E9,310
1D84:  MOVFF  2F0,317
1D88:  MOVFF  2EF,316
1D8C:  MOVFF  2EE,315
1D90:  MOVFF  2ED,314
1D94:  CALL   0FC2
1D98:  MOVFF  00,2F5
1D9C:  MOVFF  01,2F6
1DA0:  MOVFF  02,2F7
1DA4:  MOVFF  03,2F8
1DA8:  MOVFF  03,2FC
1DAC:  MOVFF  02,2FB
1DB0:  MOVFF  01,2FA
1DB4:  MOVFF  00,2F9
1DB8:  BRA    1C9A
1DBA:  MOVFF  03,2F4
1DBE:  MOVFF  02,2F3
1DC2:  MOVFF  01,2F2
1DC6:  MOVFF  00,2F1
....................       return(x-(i*y)); 
1DCA:  MOVFF  2F4,313
1DCE:  MOVFF  2F3,312
1DD2:  MOVFF  2F2,311
1DD6:  MOVFF  2F1,310
1DDA:  MOVFF  2F0,317
1DDE:  MOVFF  2EF,316
1DE2:  MOVFF  2EE,315
1DE6:  MOVFF  2ED,314
1DEA:  RCALL  1770
1DEC:  BSF    FD8.1
1DEE:  MOVFF  2EC,317
1DF2:  MOVFF  2EB,316
1DF6:  MOVFF  2EA,315
1DFA:  MOVFF  2E9,314
1DFE:  MOVFF  03,31B
1E02:  MOVFF  02,31A
1E06:  MOVFF  01,319
1E0A:  MOVFF  00,318
1E0E:  CALL   1120
1E12:  BRA    1E16
....................    } 
....................    else 
1E14:  BRA    1E16
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
1E16:  RETLW  00
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
*
2346:  MOVFF  2F0,313
234A:  MOVFF  2EF,312
234E:  MOVFF  2EE,311
2352:  MOVFF  2ED,310
2356:  MOVLW  18
2358:  MOVLB  3
235A:  MOVWF  x17
235C:  MOVLW  72
235E:  MOVWF  x16
2360:  MOVLW  31
2362:  MOVWF  x15
2364:  MOVLW  7E
2366:  MOVWF  x14
2368:  MOVLB  0
236A:  CALL   0FC2
236E:  MOVFF  03,313
2372:  MOVFF  02,312
2376:  MOVFF  01,311
237A:  MOVFF  00,310
237E:  CALL   18E0
2382:  MOVFF  01,2FD
....................    s = 0; 
2386:  MOVLB  2
2388:  BCF    xFE.0
....................    y = x; 
238A:  MOVFF  2F0,2F4
238E:  MOVFF  2EF,2F3
2392:  MOVFF  2EE,2F2
2396:  MOVFF  2ED,2F1
....................  
....................    if (x < 0) 
239A:  MOVFF  2F0,313
239E:  MOVFF  2EF,312
23A2:  MOVFF  2EE,311
23A6:  MOVFF  2ED,310
23AA:  MOVLB  3
23AC:  CLRF   x17
23AE:  CLRF   x16
23B0:  CLRF   x15
23B2:  CLRF   x14
23B4:  MOVLB  0
23B6:  CALL   1866
23BA:  BNC   23C8
....................    { 
....................       s = 1; 
23BC:  MOVLB  2
23BE:  BSF    xFE.0
....................       n = -n; 
23C0:  NEGF   xFD
....................       y = -y; 
23C2:  MOVF   xF2,W
23C4:  XORLW  80
23C6:  MOVWF  xF2
....................    } 
....................  
....................    res = 0.0; 
23C8:  MOVLB  2
23CA:  CLRF   xF8
23CC:  CLRF   xF7
23CE:  CLRF   xF6
23D0:  CLRF   xF5
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
23D2:  MOVLW  02
23D4:  MOVLB  3
23D6:  MOVWF  x00
23D8:  MOVLW  F5
23DA:  MOVLB  2
23DC:  MOVWF  FE9
23DE:  MOVFF  300,FEA
23E2:  MOVLW  7F
23E4:  ADDWF  xFD,W
23E6:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
23E8:  MOVFF  2F4,313
23EC:  MOVFF  2F3,312
23F0:  MOVFF  2F2,311
23F4:  MOVFF  2F1,310
23F8:  MOVLW  18
23FA:  MOVLB  3
23FC:  MOVWF  x17
23FE:  MOVLW  72
2400:  MOVWF  x16
2402:  MOVLW  31
2404:  MOVWF  x15
2406:  MOVLW  7E
2408:  MOVWF  x14
240A:  MOVLB  0
240C:  CALL   0FC2
2410:  MOVFF  00,2FF
2414:  MOVFF  01,300
2418:  MOVFF  02,301
241C:  MOVFF  03,302
2420:  MOVLB  3
2422:  CLRF   x04
2424:  MOVFF  2FD,303
2428:  BTFSC  x03.7
242A:  DECF   x04,F
242C:  MOVLB  0
242E:  RCALL  1E18
2430:  BSF    FD8.1
2432:  MOVFF  302,317
2436:  MOVFF  301,316
243A:  MOVFF  300,315
243E:  MOVFF  2FF,314
2442:  MOVFF  03,31B
2446:  MOVFF  02,31A
244A:  MOVFF  01,319
244E:  MOVFF  00,318
2452:  CALL   1120
2456:  MOVFF  03,2F4
245A:  MOVFF  02,2F3
245E:  MOVFF  01,2F2
2462:  MOVFF  00,2F1
....................  
....................    r = pe[0]*y + pe[1]; 
2466:  MOVLW  7C
2468:  MOVLB  3
246A:  MOVWF  x13
246C:  MOVLW  88
246E:  MOVWF  x12
2470:  MOVLW  59
2472:  MOVWF  x11
2474:  MOVLW  72
2476:  MOVWF  x10
2478:  MOVFF  2F4,317
247C:  MOVFF  2F3,316
2480:  MOVFF  2F2,315
2484:  MOVFF  2F1,314
2488:  MOVLB  0
248A:  CALL   1770
248E:  MOVFF  00,2FF
2492:  MOVFF  01,300
2496:  MOVFF  02,301
249A:  MOVFF  03,302
249E:  BCF    FD8.1
24A0:  MOVFF  03,317
24A4:  MOVFF  02,316
24A8:  MOVFF  01,315
24AC:  MOVFF  00,314
24B0:  MOVLW  E0
24B2:  MOVLB  3
24B4:  MOVWF  x1B
24B6:  MOVLW  97
24B8:  MOVWF  x1A
24BA:  MOVLW  26
24BC:  MOVWF  x19
24BE:  MOVLW  75
24C0:  MOVWF  x18
24C2:  MOVLB  0
24C4:  CALL   1120
24C8:  MOVFF  03,2FC
24CC:  MOVFF  02,2FB
24D0:  MOVFF  01,2FA
24D4:  MOVFF  00,2F9
....................    r = r*y + pe[2]; 
24D8:  MOVFF  2FC,313
24DC:  MOVFF  2FB,312
24E0:  MOVFF  2FA,311
24E4:  MOVFF  2F9,310
24E8:  MOVFF  2F4,317
24EC:  MOVFF  2F3,316
24F0:  MOVFF  2F2,315
24F4:  MOVFF  2F1,314
24F8:  CALL   1770
24FC:  MOVFF  00,2FF
2500:  MOVFF  01,300
2504:  MOVFF  02,301
2508:  MOVFF  03,302
250C:  BCF    FD8.1
250E:  MOVFF  03,317
2512:  MOVFF  02,316
2516:  MOVFF  01,315
251A:  MOVFF  00,314
251E:  MOVLW  C4
2520:  MOVLB  3
2522:  MOVWF  x1B
2524:  MOVLW  1D
2526:  MOVWF  x1A
2528:  MOVLW  1E
252A:  MOVWF  x19
252C:  MOVLW  78
252E:  MOVWF  x18
2530:  MOVLB  0
2532:  CALL   1120
2536:  MOVFF  03,2FC
253A:  MOVFF  02,2FB
253E:  MOVFF  01,2FA
2542:  MOVFF  00,2F9
....................    r = r*y + pe[3]; 
2546:  MOVFF  2FC,313
254A:  MOVFF  2FB,312
254E:  MOVFF  2FA,311
2552:  MOVFF  2F9,310
2556:  MOVFF  2F4,317
255A:  MOVFF  2F3,316
255E:  MOVFF  2F2,315
2562:  MOVFF  2F1,314
2566:  CALL   1770
256A:  MOVFF  00,2FF
256E:  MOVFF  01,300
2572:  MOVFF  02,301
2576:  MOVFF  03,302
257A:  BCF    FD8.1
257C:  MOVFF  03,317
2580:  MOVFF  02,316
2584:  MOVFF  01,315
2588:  MOVFF  00,314
258C:  MOVLW  5E
258E:  MOVLB  3
2590:  MOVWF  x1B
2592:  MOVLW  50
2594:  MOVWF  x1A
2596:  MOVLW  63
2598:  MOVWF  x19
259A:  MOVLW  7A
259C:  MOVWF  x18
259E:  MOVLB  0
25A0:  CALL   1120
25A4:  MOVFF  03,2FC
25A8:  MOVFF  02,2FB
25AC:  MOVFF  01,2FA
25B0:  MOVFF  00,2F9
....................    r = r*y + pe[4]; 
25B4:  MOVFF  2FC,313
25B8:  MOVFF  2FB,312
25BC:  MOVFF  2FA,311
25C0:  MOVFF  2F9,310
25C4:  MOVFF  2F4,317
25C8:  MOVFF  2F3,316
25CC:  MOVFF  2F2,315
25D0:  MOVFF  2F1,314
25D4:  CALL   1770
25D8:  MOVFF  00,2FF
25DC:  MOVFF  01,300
25E0:  MOVFF  02,301
25E4:  MOVFF  03,302
25E8:  BCF    FD8.1
25EA:  MOVFF  03,317
25EE:  MOVFF  02,316
25F2:  MOVFF  01,315
25F6:  MOVFF  00,314
25FA:  MOVLW  1A
25FC:  MOVLB  3
25FE:  MOVWF  x1B
2600:  MOVLW  FE
2602:  MOVWF  x1A
2604:  MOVLW  75
2606:  MOVWF  x19
2608:  MOVLW  7C
260A:  MOVWF  x18
260C:  MOVLB  0
260E:  CALL   1120
2612:  MOVFF  03,2FC
2616:  MOVFF  02,2FB
261A:  MOVFF  01,2FA
261E:  MOVFF  00,2F9
....................    r = r*y + pe[5]; 
2622:  MOVFF  2FC,313
2626:  MOVFF  2FB,312
262A:  MOVFF  2FA,311
262E:  MOVFF  2F9,310
2632:  MOVFF  2F4,317
2636:  MOVFF  2F3,316
263A:  MOVFF  2F2,315
263E:  MOVFF  2F1,314
2642:  CALL   1770
2646:  MOVFF  00,2FF
264A:  MOVFF  01,300
264E:  MOVFF  02,301
2652:  MOVFF  03,302
2656:  BCF    FD8.1
2658:  MOVFF  03,317
265C:  MOVFF  02,316
2660:  MOVFF  01,315
2664:  MOVFF  00,314
2668:  MOVLW  18
266A:  MOVLB  3
266C:  MOVWF  x1B
266E:  MOVLW  72
2670:  MOVWF  x1A
2672:  MOVLW  31
2674:  MOVWF  x19
2676:  MOVLW  7E
2678:  MOVWF  x18
267A:  MOVLB  0
267C:  CALL   1120
2680:  MOVFF  03,2FC
2684:  MOVFF  02,2FB
2688:  MOVFF  01,2FA
268C:  MOVFF  00,2F9
....................  
....................    res = res*(1.0 + y*r); 
2690:  MOVFF  2F4,313
2694:  MOVFF  2F3,312
2698:  MOVFF  2F2,311
269C:  MOVFF  2F1,310
26A0:  MOVFF  2FC,317
26A4:  MOVFF  2FB,316
26A8:  MOVFF  2FA,315
26AC:  MOVFF  2F9,314
26B0:  CALL   1770
26B4:  BCF    FD8.1
26B6:  MOVLB  3
26B8:  CLRF   x17
26BA:  CLRF   x16
26BC:  CLRF   x15
26BE:  MOVLW  7F
26C0:  MOVWF  x14
26C2:  MOVFF  03,31B
26C6:  MOVFF  02,31A
26CA:  MOVFF  01,319
26CE:  MOVFF  00,318
26D2:  MOVLB  0
26D4:  CALL   1120
26D8:  MOVFF  2F8,313
26DC:  MOVFF  2F7,312
26E0:  MOVFF  2F6,311
26E4:  MOVFF  2F5,310
26E8:  MOVFF  03,317
26EC:  MOVFF  02,316
26F0:  MOVFF  01,315
26F4:  MOVFF  00,314
26F8:  CALL   1770
26FC:  MOVFF  03,2F8
2700:  MOVFF  02,2F7
2704:  MOVFF  01,2F6
2708:  MOVFF  00,2F5
....................  
....................    if (s) 
270C:  MOVLB  2
270E:  BTFSS  xFE.0
2710:  BRA    2746
....................       res = 1.0/res; 
2712:  MOVLB  3
2714:  CLRF   x13
2716:  CLRF   x12
2718:  CLRF   x11
271A:  MOVLW  7F
271C:  MOVWF  x10
271E:  MOVFF  2F8,317
2722:  MOVFF  2F7,316
2726:  MOVFF  2F6,315
272A:  MOVFF  2F5,314
272E:  MOVLB  0
2730:  CALL   0FC2
2734:  MOVFF  03,2F8
2738:  MOVFF  02,2F7
273C:  MOVFF  01,2F6
2740:  MOVFF  00,2F5
2744:  MOVLB  2
....................    return(res); 
2746:  MOVFF  2F5,00
274A:  MOVFF  2F6,01
274E:  MOVFF  2F7,02
2752:  MOVFF  2F8,03
.................... } 
2756:  MOVLB  0
2758:  RETLW  00
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
1E68:  MOVFF  2F0,2F4
1E6C:  MOVFF  2EF,2F3
1E70:  MOVFF  2EE,2F2
1E74:  MOVFF  2ED,2F1
....................  
....................    if (y != 1.0) 
1E78:  MOVFF  2F4,313
1E7C:  MOVFF  2F3,312
1E80:  MOVFF  2F2,311
1E84:  MOVFF  2F1,310
1E88:  MOVLB  3
1E8A:  CLRF   x17
1E8C:  CLRF   x16
1E8E:  CLRF   x15
1E90:  MOVLW  7F
1E92:  MOVWF  x14
1E94:  MOVLB  0
1E96:  RCALL  1866
1E98:  BTFSC  FD8.2
1E9A:  BRA    2328
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
1E9C:  MOVLW  02
1E9E:  MOVLB  3
1EA0:  MOVWF  x03
1EA2:  MOVLW  F1
1EA4:  MOVWF  FE9
1EA6:  MOVFF  303,FEA
1EAA:  MOVLW  7E
1EAC:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
1EAE:  BSF    FD8.1
1EB0:  MOVFF  2F4,317
1EB4:  MOVFF  2F3,316
1EB8:  MOVFF  2F2,315
1EBC:  MOVFF  2F1,314
1EC0:  CLRF   x1B
1EC2:  CLRF   x1A
1EC4:  CLRF   x19
1EC6:  MOVLW  7F
1EC8:  MOVWF  x18
1ECA:  MOVLB  0
1ECC:  CALL   1120
1ED0:  MOVFF  00,302
1ED4:  MOVFF  01,303
1ED8:  MOVFF  02,304
1EDC:  MOVFF  03,305
1EE0:  BCF    FD8.1
1EE2:  MOVFF  2F4,317
1EE6:  MOVFF  2F3,316
1EEA:  MOVFF  2F2,315
1EEE:  MOVFF  2F1,314
1EF2:  MOVLB  3
1EF4:  CLRF   x1B
1EF6:  CLRF   x1A
1EF8:  CLRF   x19
1EFA:  MOVLW  7F
1EFC:  MOVWF  x18
1EFE:  MOVLB  0
1F00:  CALL   1120
1F04:  MOVFF  305,313
1F08:  MOVFF  304,312
1F0C:  MOVFF  303,311
1F10:  MOVFF  302,310
1F14:  MOVFF  03,317
1F18:  MOVFF  02,316
1F1C:  MOVFF  01,315
1F20:  MOVFF  00,314
1F24:  CALL   0FC2
1F28:  MOVFF  03,2F4
1F2C:  MOVFF  02,2F3
1F30:  MOVFF  01,2F2
1F34:  MOVFF  00,2F1
....................  
....................       y2=y*y; 
1F38:  MOVFF  2F4,313
1F3C:  MOVFF  2F3,312
1F40:  MOVFF  2F2,311
1F44:  MOVFF  2F1,310
1F48:  MOVFF  2F4,317
1F4C:  MOVFF  2F3,316
1F50:  MOVFF  2F2,315
1F54:  MOVFF  2F1,314
1F58:  RCALL  1770
1F5A:  MOVFF  03,300
1F5E:  MOVFF  02,2FF
1F62:  MOVFF  01,2FE
1F66:  MOVFF  00,2FD
....................  
....................       res = pl[0]*y2 + pl[1]; 
1F6A:  MOVLW  BC
1F6C:  MOVLB  3
1F6E:  MOVWF  x13
1F70:  MOVLW  24
1F72:  MOVWF  x12
1F74:  MOVLW  67
1F76:  MOVWF  x11
1F78:  MOVLW  7D
1F7A:  MOVWF  x10
1F7C:  MOVFF  300,317
1F80:  MOVFF  2FF,316
1F84:  MOVFF  2FE,315
1F88:  MOVFF  2FD,314
1F8C:  MOVLB  0
1F8E:  CALL   1770
1F92:  MOVFF  00,302
1F96:  MOVFF  01,303
1F9A:  MOVFF  02,304
1F9E:  MOVFF  03,305
1FA2:  BCF    FD8.1
1FA4:  MOVFF  03,317
1FA8:  MOVFF  02,316
1FAC:  MOVFF  01,315
1FB0:  MOVFF  00,314
1FB4:  MOVLW  E3
1FB6:  MOVLB  3
1FB8:  MOVWF  x1B
1FBA:  MOVLW  E4
1FBC:  MOVWF  x1A
1FBE:  MOVLW  90
1FC0:  MOVWF  x19
1FC2:  MOVLW  82
1FC4:  MOVWF  x18
1FC6:  MOVLB  0
1FC8:  CALL   1120
1FCC:  MOVFF  03,2F8
1FD0:  MOVFF  02,2F7
1FD4:  MOVFF  01,2F6
1FD8:  MOVFF  00,2F5
....................       res = res*y2 + pl[2]; 
1FDC:  MOVFF  2F8,313
1FE0:  MOVFF  2F7,312
1FE4:  MOVFF  2F6,311
1FE8:  MOVFF  2F5,310
1FEC:  MOVFF  300,317
1FF0:  MOVFF  2FF,316
1FF4:  MOVFF  2FE,315
1FF8:  MOVFF  2FD,314
1FFC:  CALL   1770
2000:  MOVFF  00,302
2004:  MOVFF  01,303
2008:  MOVFF  02,304
200C:  MOVFF  03,305
2010:  BCF    FD8.1
2012:  MOVFF  03,317
2016:  MOVFF  02,316
201A:  MOVFF  01,315
201E:  MOVFF  00,314
2022:  MOVLW  1C
2024:  MOVLB  3
2026:  MOVWF  x1B
2028:  MOVLW  87
202A:  MOVWF  x1A
202C:  MOVLW  57
202E:  MOVWF  x19
2030:  MOVLW  83
2032:  MOVWF  x18
2034:  MOVLB  0
2036:  CALL   1120
203A:  MOVFF  03,2F8
203E:  MOVFF  02,2F7
2042:  MOVFF  01,2F6
2046:  MOVFF  00,2F5
....................       res = res*y2 + pl[3]; 
204A:  MOVFF  2F8,313
204E:  MOVFF  2F7,312
2052:  MOVFF  2F6,311
2056:  MOVFF  2F5,310
205A:  MOVFF  300,317
205E:  MOVFF  2FF,316
2062:  MOVFF  2FE,315
2066:  MOVFF  2FD,314
206A:  CALL   1770
206E:  MOVFF  00,302
2072:  MOVFF  01,303
2076:  MOVFF  02,304
207A:  MOVFF  03,305
207E:  BCF    FD8.1
2080:  MOVFF  03,317
2084:  MOVFF  02,316
2088:  MOVFF  01,315
208C:  MOVFF  00,314
2090:  MOVLW  AB
2092:  MOVLB  3
2094:  MOVWF  x1B
2096:  MOVLW  E1
2098:  MOVWF  x1A
209A:  MOVLW  9E
209C:  MOVWF  x19
209E:  MOVLW  83
20A0:  MOVWF  x18
20A2:  MOVLB  0
20A4:  CALL   1120
20A8:  MOVFF  03,2F8
20AC:  MOVFF  02,2F7
20B0:  MOVFF  01,2F6
20B4:  MOVFF  00,2F5
....................  
....................       r = ql[0]*y2 + ql[1]; 
20B8:  MOVLB  3
20BA:  CLRF   x13
20BC:  CLRF   x12
20BE:  CLRF   x11
20C0:  MOVLW  7F
20C2:  MOVWF  x10
20C4:  MOVFF  300,317
20C8:  MOVFF  2FF,316
20CC:  MOVFF  2FE,315
20D0:  MOVFF  2FD,314
20D4:  MOVLB  0
20D6:  CALL   1770
20DA:  MOVFF  00,302
20DE:  MOVFF  01,303
20E2:  MOVFF  02,304
20E6:  MOVFF  03,305
20EA:  BCF    FD8.1
20EC:  MOVFF  03,317
20F0:  MOVFF  02,316
20F4:  MOVFF  01,315
20F8:  MOVFF  00,314
20FC:  MOVLW  B4
20FE:  MOVLB  3
2100:  MOVWF  x1B
2102:  MOVLW  2A
2104:  MOVWF  x1A
2106:  MOVLW  82
2108:  MOVWF  x19
210A:  MOVWF  x18
210C:  MOVLB  0
210E:  CALL   1120
2112:  MOVFF  03,2FC
2116:  MOVFF  02,2FB
211A:  MOVFF  01,2FA
211E:  MOVFF  00,2F9
....................       r = r*y2 + ql[2]; 
2122:  MOVFF  2FC,313
2126:  MOVFF  2FB,312
212A:  MOVFF  2FA,311
212E:  MOVFF  2F9,310
2132:  MOVFF  300,317
2136:  MOVFF  2FF,316
213A:  MOVFF  2FE,315
213E:  MOVFF  2FD,314
2142:  CALL   1770
2146:  MOVFF  00,302
214A:  MOVFF  01,303
214E:  MOVFF  02,304
2152:  MOVFF  03,305
2156:  BCF    FD8.1
2158:  MOVFF  03,317
215C:  MOVFF  02,316
2160:  MOVFF  01,315
2164:  MOVFF  00,314
2168:  MOVLW  80
216A:  MOVLB  3
216C:  MOVWF  x1B
216E:  MOVLW  3E
2170:  MOVWF  x1A
2172:  MOVLW  06
2174:  MOVWF  x19
2176:  MOVLW  83
2178:  MOVWF  x18
217A:  MOVLB  0
217C:  CALL   1120
2180:  MOVFF  03,2FC
2184:  MOVFF  02,2FB
2188:  MOVFF  01,2FA
218C:  MOVFF  00,2F9
....................       r = r*y2 + ql[3]; 
2190:  MOVFF  2FC,313
2194:  MOVFF  2FB,312
2198:  MOVFF  2FA,311
219C:  MOVFF  2F9,310
21A0:  MOVFF  300,317
21A4:  MOVFF  2FF,316
21A8:  MOVFF  2FE,315
21AC:  MOVFF  2FD,314
21B0:  CALL   1770
21B4:  MOVFF  00,302
21B8:  MOVFF  01,303
21BC:  MOVFF  02,304
21C0:  MOVFF  03,305
21C4:  BCF    FD8.1
21C6:  MOVFF  03,317
21CA:  MOVFF  02,316
21CE:  MOVFF  01,315
21D2:  MOVFF  00,314
21D6:  MOVLW  AB
21D8:  MOVLB  3
21DA:  MOVWF  x1B
21DC:  MOVLW  E1
21DE:  MOVWF  x1A
21E0:  MOVLW  9E
21E2:  MOVWF  x19
21E4:  MOVLW  82
21E6:  MOVWF  x18
21E8:  MOVLB  0
21EA:  CALL   1120
21EE:  MOVFF  03,2FC
21F2:  MOVFF  02,2FB
21F6:  MOVFF  01,2FA
21FA:  MOVFF  00,2F9
....................  
....................       res = y*res/r; 
21FE:  MOVFF  2F4,313
2202:  MOVFF  2F3,312
2206:  MOVFF  2F2,311
220A:  MOVFF  2F1,310
220E:  MOVFF  2F8,317
2212:  MOVFF  2F7,316
2216:  MOVFF  2F6,315
221A:  MOVFF  2F5,314
221E:  CALL   1770
2222:  MOVFF  00,302
2226:  MOVFF  01,303
222A:  MOVFF  02,304
222E:  MOVFF  03,305
2232:  MOVFF  03,313
2236:  MOVFF  02,312
223A:  MOVFF  01,311
223E:  MOVFF  00,310
2242:  MOVFF  2FC,317
2246:  MOVFF  2FB,316
224A:  MOVFF  2FA,315
224E:  MOVFF  2F9,314
2252:  CALL   0FC2
2256:  MOVFF  03,2F8
225A:  MOVFF  02,2F7
225E:  MOVFF  01,2F6
2262:  MOVFF  00,2F5
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
2266:  MOVLW  02
2268:  MOVLB  3
226A:  MOVWF  x03
226C:  MOVLW  ED
226E:  MOVWF  FE9
2270:  MOVFF  303,FEA
2274:  MOVLW  7E
2276:  SUBWF  FEF,W
2278:  MOVWF  x01
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
227A:  BTFSC  x01.7
227C:  BRA    2280
227E:  BRA    22AA
....................          r = -(float32)-n; 
2280:  MOVLW  00
2282:  BSF    FD8.0
2284:  SUBFWB x01,W
2286:  CLRF   x04
2288:  MOVWF  x03
228A:  BTFSC  x03.7
228C:  DECF   x04,F
228E:  MOVLB  0
2290:  RCALL  1E18
2292:  MOVFF  00,2F9
2296:  MOVF   01,W
2298:  XORLW  80
229A:  MOVLB  2
229C:  MOVWF  xFA
229E:  MOVFF  02,2FB
22A2:  MOVFF  03,2FC
....................       else 
22A6:  BRA    22C8
22A8:  MOVLB  3
....................          r = (float32)n; 
22AA:  CLRF   x04
22AC:  MOVFF  301,303
22B0:  BTFSC  x03.7
22B2:  DECF   x04,F
22B4:  MOVLB  0
22B6:  RCALL  1E18
22B8:  MOVFF  03,2FC
22BC:  MOVFF  02,2FB
22C0:  MOVFF  01,2FA
22C4:  MOVFF  00,2F9
....................  
....................       res += r*LN2; 
22C8:  MOVFF  2FC,313
22CC:  MOVFF  2FB,312
22D0:  MOVFF  2FA,311
22D4:  MOVFF  2F9,310
22D8:  MOVLW  18
22DA:  MOVLB  3
22DC:  MOVWF  x17
22DE:  MOVLW  72
22E0:  MOVWF  x16
22E2:  MOVLW  31
22E4:  MOVWF  x15
22E6:  MOVLW  7E
22E8:  MOVWF  x14
22EA:  MOVLB  0
22EC:  CALL   1770
22F0:  BCF    FD8.1
22F2:  MOVFF  2F8,317
22F6:  MOVFF  2F7,316
22FA:  MOVFF  2F6,315
22FE:  MOVFF  2F5,314
2302:  MOVFF  03,31B
2306:  MOVFF  02,31A
230A:  MOVFF  01,319
230E:  MOVFF  00,318
2312:  CALL   1120
2316:  MOVFF  03,2F8
231A:  MOVFF  02,2F7
231E:  MOVFF  01,2F6
2322:  MOVFF  00,2F5
....................    } 
....................  
....................    else 
2326:  BRA    2334
....................       res = 0.0; 
2328:  MOVLB  2
232A:  CLRF   xF8
232C:  CLRF   xF7
232E:  CLRF   xF6
2330:  CLRF   xF5
2332:  MOVLB  0
....................  
....................    return(res); 
2334:  MOVFF  2F5,00
2338:  MOVFF  2F6,01
233C:  MOVFF  2F7,02
2340:  MOVFF  2F8,03
.................... } 
2344:  RETLW  00
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
*
275A:  MOVFF  2E4,313
275E:  MOVFF  2E3,312
2762:  MOVFF  2E2,311
2766:  MOVFF  2E1,310
276A:  MOVLB  3
276C:  CLRF   x17
276E:  CLRF   x16
2770:  CLRF   x15
2772:  CLRF   x14
2774:  MOVLB  0
2776:  CALL   1866
277A:  BTFSS  FD8.0
277C:  BRA    2930
277E:  MOVFF  2E8,2EC
2782:  MOVFF  2E7,2EB
2786:  MOVFF  2E6,2EA
278A:  MOVFF  2E5,2E9
278E:  MOVLB  2
2790:  CLRF   xF0
2792:  CLRF   xEF
2794:  CLRF   xEE
2796:  MOVLW  7F
2798:  MOVWF  xED
279A:  MOVLB  0
279C:  CALL   1CB6
27A0:  MOVFF  00,2E9
27A4:  MOVFF  01,2EA
27A8:  MOVFF  02,2EB
27AC:  MOVFF  03,2EC
27B0:  MOVFF  03,313
27B4:  MOVFF  02,312
27B8:  MOVFF  01,311
27BC:  MOVFF  00,310
27C0:  MOVLB  3
27C2:  CLRF   x17
27C4:  CLRF   x16
27C6:  CLRF   x15
27C8:  CLRF   x14
27CA:  MOVLB  0
27CC:  CALL   1866
27D0:  BTFSS  FD8.2
27D2:  BRA    2930
....................       if(fmod(y, 2) == 0) { 
27D4:  MOVFF  2E8,2EC
27D8:  MOVFF  2E7,2EB
27DC:  MOVFF  2E6,2EA
27E0:  MOVFF  2E5,2E9
27E4:  MOVLB  2
27E6:  CLRF   xF0
27E8:  CLRF   xEF
27EA:  CLRF   xEE
27EC:  MOVLW  80
27EE:  MOVWF  xED
27F0:  MOVLB  0
27F2:  CALL   1CB6
27F6:  MOVFF  00,2E9
27FA:  MOVFF  01,2EA
27FE:  MOVFF  02,2EB
2802:  MOVFF  03,2EC
2806:  MOVFF  03,313
280A:  MOVFF  02,312
280E:  MOVFF  01,311
2812:  MOVFF  00,310
2816:  MOVLB  3
2818:  CLRF   x17
281A:  CLRF   x16
281C:  CLRF   x15
281E:  CLRF   x14
2820:  MOVLB  0
2822:  CALL   1866
2826:  BNZ   28AA
....................          return (exp(log(-x) * y)); 
2828:  MOVFF  2E1,2E9
282C:  MOVLB  2
282E:  MOVF   xE2,W
2830:  XORLW  80
2832:  MOVWF  xEA
2834:  MOVFF  2E3,2EB
2838:  MOVFF  2E4,2EC
283C:  MOVFF  2E4,2F0
2840:  MOVFF  2E3,2EF
2844:  MOVWF  xEE
2846:  MOVFF  2E1,2ED
284A:  MOVLB  0
284C:  CALL   1E68
2850:  MOVFF  00,2E9
2854:  MOVFF  01,2EA
2858:  MOVFF  02,2EB
285C:  MOVFF  03,2EC
2860:  MOVFF  03,313
2864:  MOVFF  02,312
2868:  MOVFF  01,311
286C:  MOVFF  00,310
2870:  MOVFF  2E8,317
2874:  MOVFF  2E7,316
2878:  MOVFF  2E6,315
287C:  MOVFF  2E5,314
2880:  CALL   1770
2884:  MOVFF  00,2E9
2888:  MOVFF  01,2EA
288C:  MOVFF  02,2EB
2890:  MOVFF  03,2EC
2894:  MOVFF  03,2F0
2898:  MOVFF  02,2EF
289C:  MOVFF  01,2EE
28A0:  MOVFF  00,2ED
28A4:  RCALL  2346
28A6:  BRA    2A64
....................       } else { 
28A8:  BRA    292E
....................          return (-exp(log(-x) * y)); 
28AA:  MOVFF  2E1,2E9
28AE:  MOVLB  2
28B0:  MOVF   xE2,W
28B2:  XORLW  80
28B4:  MOVWF  xEA
28B6:  MOVFF  2E3,2EB
28BA:  MOVFF  2E4,2EC
28BE:  MOVFF  2E4,2F0
28C2:  MOVFF  2E3,2EF
28C6:  MOVWF  xEE
28C8:  MOVFF  2E1,2ED
28CC:  MOVLB  0
28CE:  CALL   1E68
28D2:  MOVFF  00,2E9
28D6:  MOVFF  01,2EA
28DA:  MOVFF  02,2EB
28DE:  MOVFF  03,2EC
28E2:  MOVFF  03,313
28E6:  MOVFF  02,312
28EA:  MOVFF  01,311
28EE:  MOVFF  00,310
28F2:  MOVFF  2E8,317
28F6:  MOVFF  2E7,316
28FA:  MOVFF  2E6,315
28FE:  MOVFF  2E5,314
2902:  CALL   1770
2906:  MOVFF  00,2E9
290A:  MOVFF  01,2EA
290E:  MOVFF  02,2EB
2912:  MOVFF  03,2EC
2916:  MOVFF  03,2F0
291A:  MOVFF  02,2EF
291E:  MOVFF  01,2EE
2922:  MOVFF  00,2ED
2926:  RCALL  2346
2928:  MOVLW  80
292A:  XORWF  01,F
292C:  BRA    2A64
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
292E:  BRA    2A64
2930:  MOVFF  2E4,313
2934:  MOVFF  2E3,312
2938:  MOVFF  2E2,311
293C:  MOVFF  2E1,310
2940:  MOVLB  3
2942:  CLRF   x17
2944:  CLRF   x16
2946:  CLRF   x15
2948:  CLRF   x14
294A:  MOVLB  0
294C:  CALL   1866
2950:  BNC   29B2
2952:  MOVFF  2E8,2EC
2956:  MOVFF  2E7,2EB
295A:  MOVFF  2E6,2EA
295E:  MOVFF  2E5,2E9
2962:  MOVLB  2
2964:  CLRF   xF0
2966:  CLRF   xEF
2968:  CLRF   xEE
296A:  MOVLW  7F
296C:  MOVWF  xED
296E:  MOVLB  0
2970:  CALL   1CB6
2974:  MOVFF  00,2E9
2978:  MOVFF  01,2EA
297C:  MOVFF  02,2EB
2980:  MOVFF  03,2EC
2984:  MOVFF  03,313
2988:  MOVFF  02,312
298C:  MOVFF  01,311
2990:  MOVFF  00,310
2994:  MOVLB  3
2996:  CLRF   x17
2998:  CLRF   x16
299A:  CLRF   x15
299C:  CLRF   x14
299E:  MOVLB  0
29A0:  CALL   1866
29A4:  BZ    29B2
....................       return 0; 
29A6:  CLRF   00
29A8:  CLRF   01
29AA:  CLRF   02
29AC:  CLRF   03
29AE:  BRA    2A64
....................    } else { 
29B0:  BRA    2A64
....................       if(x != 0 || 0 >= y) { 
29B2:  MOVFF  2E4,313
29B6:  MOVFF  2E3,312
29BA:  MOVFF  2E2,311
29BE:  MOVFF  2E1,310
29C2:  MOVLB  3
29C4:  CLRF   x17
29C6:  CLRF   x16
29C8:  CLRF   x15
29CA:  CLRF   x14
29CC:  MOVLB  0
29CE:  CALL   1866
29D2:  BNZ   29F8
29D4:  MOVFF  2E8,313
29D8:  MOVFF  2E7,312
29DC:  MOVFF  2E6,311
29E0:  MOVFF  2E5,310
29E4:  MOVLB  3
29E6:  CLRF   x17
29E8:  CLRF   x16
29EA:  CLRF   x15
29EC:  CLRF   x14
29EE:  MOVLB  0
29F0:  CALL   1866
29F4:  BC    29F8
29F6:  BNZ   2A64
....................          return (exp(log(x) * y)); 
29F8:  MOVFF  2E4,2F0
29FC:  MOVFF  2E3,2EF
2A00:  MOVFF  2E2,2EE
2A04:  MOVFF  2E1,2ED
2A08:  CALL   1E68
2A0C:  MOVFF  00,2E9
2A10:  MOVFF  01,2EA
2A14:  MOVFF  02,2EB
2A18:  MOVFF  03,2EC
2A1C:  MOVFF  03,313
2A20:  MOVFF  02,312
2A24:  MOVFF  01,311
2A28:  MOVFF  00,310
2A2C:  MOVFF  2E8,317
2A30:  MOVFF  2E7,316
2A34:  MOVFF  2E6,315
2A38:  MOVFF  2E5,314
2A3C:  CALL   1770
2A40:  MOVFF  00,2E9
2A44:  MOVFF  01,2EA
2A48:  MOVFF  02,2EB
2A4C:  MOVFF  03,2EC
2A50:  MOVFF  03,2F0
2A54:  MOVFF  02,2EF
2A58:  MOVFF  01,2EE
2A5C:  MOVFF  00,2ED
2A60:  RCALL  2346
2A62:  BRA    2A64
....................       } 
....................    } 
.................... } 
2A64:  RETLW  00
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... // Definición de Entradas 
.................... #define   PRES          !input(PIN_D7) 
.................... #define   TERM          !input(PIN_D6) 
.................... #define   DOOR          !input(PIN_D4) 
.................... #define   STOP          !input(PIN_D5) 
.................... #define   LOW            input(PIN_D0) 
.................... #define   MEDIUM         input(PIN_D1) 
.................... #define   HIGH           input(PIN_D2) 
....................  
.................... // Definición de Salidas 
.................... #define   Resistencia_on     output_bit(PIN_C0,1) 
.................... #define   Resistencia_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia2_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia2_off   output_bit(PIN_C1,0) 
....................  
.................... #define   EV_Desfogue_on     output_bit(PIN_B2,1) 
.................... #define   EV_Desfogue_off    output_bit(PIN_B2,0) 
.................... #define   EV_Paso_on         output_bit(PIN_B3,1) 
.................... #define   EV_Paso_off        output_bit(PIN_B3,0) 
.................... #define   EV_Agua_on         output_bit(PIN_B4,1) 
.................... #define   EV_Agua_off        output_bit(PIN_B4,0) 
.................... #define   Motor_Puerta_on    output_bit(PIN_B6,1) 
.................... #define   Motor_Puerta_off   output_bit(PIN_B6,0) 
.................... #define   Bomba_Vacio_on     output_bit(PIN_B5,1) 
.................... #define   Bomba_Vacio_off    output_bit(PIN_B5,0) 
.................... #define   Bomba_Agua_on      output_bit(PIN_B7,1) 
.................... #define   Bomba_Agua_off     output_bit(PIN_B7,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
2F10:  CLRF   03
2F12:  MOVLB  2
2F14:  MOVF   xDC,W
2F16:  ADDLW  70
2F18:  MOVWF  FE9
2F1A:  MOVLW  0F
2F1C:  ADDWFC 03,W
2F1E:  MOVWF  FEA
2F20:  MOVF   FEF,F
2F22:  BZ    2F3E
2F24:  MOVF   xDC,W
2F26:  MULLW  08
2F28:  MOVF   FF3,W
2F2A:  CLRF   xDE
2F2C:  MOVWF  xDD
2F2E:  MOVWF  FE9
2F30:  MOVLW  04
2F32:  ADDWF  xDE,W
2F34:  MOVWF  FEA
2F36:  MOVFF  FEF,2DD
2F3A:  BTFSS  xDD.7
2F3C:  BRA    2F42
2F3E:  MOVLW  00
2F40:  BRA    2F44
2F42:  MOVLW  01
2F44:  MOVWF  01
.................... } 
2F46:  MOVLB  0
2F48:  GOTO   3CB2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09FC:  CLRF   03
09FE:  MOVLB  3
0A00:  MOVF   x2C,W
0A02:  ADDLW  70
0A04:  MOVWF  FE9
0A06:  MOVLW  0F
0A08:  ADDWFC 03,W
0A0A:  MOVWF  FEA
0A0C:  MOVF   FEF,F
0A0E:  BZ    0A34
0A10:  MOVF   x2C,W
0A12:  MULLW  08
0A14:  MOVF   FF3,W
0A16:  CLRF   x2E
0A18:  MOVWF  x2D
0A1A:  MOVLW  04
0A1C:  ADDWF  x2D,F
0A1E:  MOVLW  00
0A20:  ADDWFC x2E,F
0A22:  MOVFF  32D,FE9
0A26:  MOVLW  04
0A28:  ADDWF  x2E,W
0A2A:  MOVWF  FEA
0A2C:  MOVFF  FEF,32D
0A30:  BTFSS  x2D.7
0A32:  BRA    0A38
0A34:  MOVLW  00
0A36:  BRA    0A3A
0A38:  MOVLW  01
0A3A:  MOVWF  01
.................... } 
0A3C:  MOVLB  0
0A3E:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
2E88:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
2E8A:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
2E8C:  MOVLW  08
2E8E:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
2E90:  MOVF   F94,W
2E92:  IORLW  30
2E94:  MOVLB  2
2E96:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
2E98:  CLRF   1C
2E9A:  CLRF   16
2E9C:  BTFSC  FF2.7
2E9E:  BSF    16.7
2EA0:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
2EA2:  MOVLB  0
2EA4:  CALL   02F6
2EA8:  BTFSC  16.7
2EAA:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
2EAC:  GOTO   2EB2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
2EB6:  CLRF   16
2EB8:  BTFSC  FF2.7
2EBA:  BSF    16.7
2EBC:  BCF    FF2.7
....................    usb_token_reset(); 
2EBE:  CALL   02F6
2EC2:  BTFSC  16.7
2EC4:  BSF    FF2.7
....................    UCON = 0; 
2EC6:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
2EC8:  MOVLW  14
2ECA:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
2ECC:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
2ECE:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
2ED0:  MOVLW  01
2ED2:  MOVWF  1C
.................... } 
2ED4:  GOTO   2EDE (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
2EB0:  BRA    2E88
.................... } 
2EB2:  GOTO   2EFC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
2ED8:  BTFSC  F6D.3
2EDA:  BRA    2EDE
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
2EDC:  BRA    2EB6
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
2EDE:  DECFSZ 1C,W
2EE0:  BRA    2EF8
2EE2:  BTFSC  F6D.5
2EE4:  BRA    2EF8
....................    { 
....................       UIR=0; 
2EE6:  CLRF   F68
....................       UIE=0; 
2EE8:  CLRF   F69
....................       enable_interrupts(INT_USB); 
2EEA:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
2EEC:  MOVLW  C0
2EEE:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
2EF0:  MOVLW  11
2EF2:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
2EF4:  MOVLW  02
2EF6:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
2EF8:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
2EFA:  BRA    2EB0
....................  
....................    do  
....................    { 
....................       usb_task(); 
2EFC:  RCALL  2ED8
....................    } while (usb_state != USB_STATE_POWERED); 
2EFE:  MOVF   1C,W
2F00:  SUBLW  02
2F02:  BNZ   2EFC
.................... } 
2F04:  GOTO   3BC6 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A40:  MOVFF  327,32C
0A44:  RCALL  09FC
0A46:  MOVF   01,F
0A48:  BZ    0B12
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A4A:  MOVLB  3
0A4C:  MOVF   x27,W
0A4E:  MULLW  08
0A50:  MOVF   FF3,W
0A52:  CLRF   x2D
0A54:  MOVWF  x2C
0A56:  MOVLW  04
0A58:  ADDWF  x2C,F
0A5A:  MOVLW  00
0A5C:  ADDWFC x2D,F
0A5E:  MOVLW  01
0A60:  ADDWF  x2C,W
0A62:  MOVWF  01
0A64:  MOVLW  00
0A66:  ADDWFC x2D,W
0A68:  MOVWF  03
0A6A:  MOVFF  01,FE9
0A6E:  MOVLW  04
0A70:  ADDWF  03,W
0A72:  MOVWF  FEA
0A74:  MOVFF  328,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A78:  MOVF   x2A,W
0A7A:  SUBLW  02
0A7C:  BNZ   0AAC
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A7E:  MOVF   x27,W
0A80:  MULLW  08
0A82:  MOVF   FF3,W
0A84:  CLRF   x2D
0A86:  MOVWF  x2C
0A88:  MOVLW  04
0A8A:  ADDWF  x2C,F
0A8C:  MOVLW  00
0A8E:  ADDWFC x2D,F
0A90:  MOVFF  32C,FE9
0A94:  MOVLW  04
0A96:  ADDWF  x2D,W
0A98:  MOVWF  FEA
0A9A:  MOVFF  FEF,32B
....................          if (bit_test(i,6)) 
0A9E:  BTFSS  x2B.6
0AA0:  BRA    0AA6
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0AA2:  CLRF   x2A
....................          else 
0AA4:  BRA    0AAA
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0AA6:  MOVLW  01
0AA8:  MOVWF  x2A
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
0AAA:  BRA    0AD2
0AAC:  MOVF   x2A,W
0AAE:  SUBLW  04
0AB0:  BNZ   0AD2
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0AB2:  MOVF   x27,W
0AB4:  MULLW  08
0AB6:  MOVF   FF3,W
0AB8:  CLRF   x2D
0ABA:  MOVWF  FE9
0ABC:  MOVLW  04
0ABE:  ADDWF  x2D,W
0AC0:  MOVWF  FEA
0AC2:  MOVFF  FEF,32B
....................          if (bit_test(i,6)) 
0AC6:  BTFSS  x2B.6
0AC8:  BRA    0AD0
....................             tgl = USB_DTS_DATA1; 
0ACA:  MOVLW  01
0ACC:  MOVWF  x2A
....................          else 
0ACE:  BRA    0AD2
....................             tgl = USB_DTS_DATA0; 
0AD0:  CLRF   x2A
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0AD2:  DECFSZ x2A,W
0AD4:  BRA    0ADC
....................          i=0xC8;  //DATA1, UOWN 
0AD6:  MOVLW  C8
0AD8:  MOVWF  x2B
....................       else //if (tgl == USB_DTS_DATA0)  
0ADA:  BRA    0AE0
....................          i=0x88; //DATA0, UOWN 
0ADC:  MOVLW  88
0ADE:  MOVWF  x2B
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0AE0:  BTFSC  x29.0
0AE2:  BSF    x2B.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0AE4:  BTFSC  x29.1
0AE6:  BSF    x2B.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AE8:  MOVF   x27,W
0AEA:  MULLW  08
0AEC:  MOVF   FF3,W
0AEE:  CLRF   x2D
0AF0:  MOVWF  x2C
0AF2:  MOVLW  04
0AF4:  ADDWF  x2C,F
0AF6:  MOVLW  00
0AF8:  ADDWFC x2D,F
0AFA:  MOVFF  32C,FE9
0AFE:  MOVLW  04
0B00:  ADDWF  x2D,W
0B02:  MOVWF  FEA
0B04:  MOVFF  32B,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0B08:  MOVLW  01
0B0A:  MOVWF  01
0B0C:  BRA    0B18
....................    } 
....................    else  
0B0E:  BRA    0B10
0B10:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0B12:  MOVLW  00
0B14:  MOVWF  01
0B16:  MOVLB  3
.................... } 
0B18:  MOVLB  0
0B1A:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
3060:  CLRF   16
3062:  BTFSC  FF2.7
3064:  BSF    16.7
3066:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
3068:  MOVFF  2DC,32C
306C:  CALL   09FC
3070:  BTFSC  16.7
3072:  BSF    FF2.7
3074:  MOVF   01,F
3076:  BZ    3108
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
3078:  MOVLB  2
307A:  MOVF   xDC,W
307C:  MULLW  08
307E:  MOVF   FF3,W
3080:  CLRF   xE5
3082:  MOVWF  xE4
3084:  MOVLW  04
3086:  ADDWF  xE4,F
3088:  MOVLW  00
308A:  ADDWFC xE5,F
308C:  MOVLW  02
308E:  ADDWF  xE4,W
3090:  MOVWF  01
3092:  MOVLW  00
3094:  ADDWFC xE5,W
3096:  MOVWF  03
3098:  MOVFF  01,FE9
309C:  MOVLW  04
309E:  ADDWF  03,W
30A0:  MOVWF  FEA
30A2:  MOVFF  FEC,03
30A6:  MOVF   FED,F
30A8:  MOVFF  FEF,2E2
30AC:  MOVFF  03,2E3
....................       memcpy(buff_add, ptr, len);      
30B0:  MOVFF  2E3,FEA
30B4:  MOVFF  2E2,FE9
30B8:  MOVFF  2DE,FE2
30BC:  MOVFF  2DD,FE1
30C0:  MOVFF  2E0,02
30C4:  MOVFF  2DF,01
30C8:  MOVF   01,F
30CA:  BZ    30D0
30CC:  INCF   02,F
30CE:  BRA    30D4
30D0:  MOVF   02,F
30D2:  BZ    30E0
30D4:  MOVFF  FE6,FEE
30D8:  DECFSZ 01,F
30DA:  BRA    30D4
30DC:  DECFSZ 02,F
30DE:  BRA    30D4
30E0:  CLRF   16
30E2:  BTFSC  FF2.7
30E4:  BSF    16.7
30E6:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
30E8:  MOVFF  2DC,327
30EC:  MOVFF  2E0,329
30F0:  MOVFF  2DF,328
30F4:  MOVFF  2E1,32A
30F8:  MOVLB  0
30FA:  CALL   0A40
30FE:  BTFSC  16.7
3100:  BSF    FF2.7
3102:  MOVF   01,W
3104:  BRA    310C
....................    } 
....................    else  
3106:  BRA    3108
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
3108:  MOVLW  00
310A:  MOVWF  01
.................... } 
310C:  GOTO   43E2 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0932:  MOVLB  3
0934:  MOVF   x27,W
0936:  MULLW  08
0938:  MOVF   FF3,W
093A:  CLRF   x2D
093C:  MOVWF  FE9
093E:  MOVLW  04
0940:  ADDWF  x2D,W
0942:  MOVWF  FEA
0944:  MOVFF  FEF,329
....................    if (tgl == USB_DTS_TOGGLE)  
0948:  MOVF   x28,W
094A:  SUBLW  02
094C:  BNZ   095A
....................    { 
....................       if (bit_test(i,6)) 
094E:  BTFSS  x29.6
0950:  BRA    0956
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0952:  CLRF   x28
....................       else 
0954:  BRA    095A
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0956:  MOVLW  01
0958:  MOVWF  x28
....................    } 
....................    if (tgl == USB_DTS_STALL)  
095A:  MOVF   x28,W
095C:  SUBLW  03
095E:  BNZ   0986
....................    { 
....................       i = 0x84; 
0960:  MOVLW  84
0962:  MOVWF  x29
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
0964:  MOVF   x27,W
0966:  MULLW  08
0968:  MOVF   FF3,W
096A:  CLRF   x2D
096C:  MOVWF  x2C
096E:  MOVLW  04
0970:  ADDWF  x2C,F
0972:  MOVLW  00
0974:  ADDWFC x2D,F
0976:  MOVFF  32C,FE9
097A:  MOVLW  04
097C:  ADDWF  x2D,W
097E:  MOVWF  FEA
0980:  MOVLW  84
0982:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
0984:  BRA    0994
0986:  DECFSZ x28,W
0988:  BRA    0990
....................       i = 0xC8;  //DATA1, UOWN 
098A:  MOVLW  C8
098C:  MOVWF  x29
....................    else //if (tgl == USB_DTS_DATA0)  
098E:  BRA    0994
....................       i = 0x88; //DATA0, UOWN 
0990:  MOVLW  88
0992:  MOVWF  x29
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
0994:  BCF    FD8.0
0996:  RLCF   x27,W
0998:  CLRF   03
099A:  MOVFF  FF2,32C
099E:  BCF    FF2.7
09A0:  MOVLB  0
09A2:  CALL   00DA
09A6:  TBLRD*+
09A8:  MOVFF  FF5,03
09AC:  MOVLB  3
09AE:  BTFSC  x2C.7
09B0:  BSF    FF2.7
09B2:  MOVWF  x2A
09B4:  MOVFF  03,32B
....................    EP_BDxCNT_O(endpoint) = len; 
09B8:  MOVF   x27,W
09BA:  MULLW  08
09BC:  MOVF   FF3,W
09BE:  CLRF   x2D
09C0:  MOVWF  x2C
09C2:  MOVLW  01
09C4:  ADDWF  x2C,W
09C6:  MOVWF  01
09C8:  MOVLW  00
09CA:  ADDWFC x2D,W
09CC:  MOVWF  03
09CE:  MOVFF  01,FE9
09D2:  MOVLW  04
09D4:  ADDWF  03,W
09D6:  MOVWF  FEA
09D8:  MOVFF  32A,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09DC:  BTFSC  x2B.0
09DE:  BSF    x29.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09E0:  BTFSC  x2B.1
09E2:  BSF    x29.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09E4:  MOVF   x27,W
09E6:  MULLW  08
09E8:  MOVF   FF3,W
09EA:  CLRF   x2D
09EC:  MOVWF  FE9
09EE:  MOVLW  04
09F0:  ADDWF  x2D,W
09F2:  MOVWF  FEA
09F4:  MOVFF  329,FEF
.................... } 
09F8:  MOVLB  0
09FA:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
2F4C:  MOVLB  2
2F4E:  MOVF   xE1,W
2F50:  MULLW  08
2F52:  MOVF   FF3,W
2F54:  CLRF   xEC
2F56:  MOVWF  xEB
2F58:  MOVLW  02
2F5A:  ADDWF  xEB,W
2F5C:  MOVWF  01
2F5E:  MOVLW  00
2F60:  ADDWFC xEC,W
2F62:  MOVWF  03
2F64:  MOVFF  01,FE9
2F68:  MOVLW  04
2F6A:  ADDWF  03,W
2F6C:  MOVWF  FEA
2F6E:  MOVFF  FEC,03
2F72:  MOVF   FED,F
2F74:  MOVFF  FEF,2E6
2F78:  MOVFF  03,2E7
....................    i = EP_BDxCNT_O(endpoint); 
2F7C:  MOVF   xE1,W
2F7E:  MULLW  08
2F80:  MOVF   FF3,W
2F82:  CLRF   xEC
2F84:  MOVWF  xEB
2F86:  MOVLW  01
2F88:  ADDWF  xEB,W
2F8A:  MOVWF  01
2F8C:  MOVLW  00
2F8E:  ADDWFC xEC,W
2F90:  MOVWF  03
2F92:  MOVFF  01,FE9
2F96:  MOVLW  04
2F98:  ADDWF  03,W
2F9A:  MOVWF  FEA
2F9C:  MOVF   FEF,W
2F9E:  CLRF   03
2FA0:  MOVWF  xE9
2FA2:  MOVFF  03,2EA
....................    st = EP_BDxST_O(endpoint); 
2FA6:  MOVF   xE1,W
2FA8:  MULLW  08
2FAA:  MOVF   FF3,W
2FAC:  CLRF   xEC
2FAE:  MOVWF  FE9
2FB0:  MOVLW  04
2FB2:  ADDWF  xEC,W
2FB4:  MOVWF  FEA
2FB6:  MOVFF  FEF,2E8
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
2FBA:  BTFSC  xE8.0
2FBC:  BSF    xEA.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
2FBE:  BTFSC  xE8.1
2FC0:  BSF    xEA.1
....................  
....................    if (i < max) {max = i;} 
2FC2:  MOVF   xEA,W
2FC4:  SUBWF  xE5,W
2FC6:  BNC   2FD8
2FC8:  BNZ   2FD0
2FCA:  MOVF   xE4,W
2FCC:  SUBWF  xE9,W
2FCE:  BC    2FD8
2FD0:  MOVFF  2EA,2E5
2FD4:  MOVFF  2E9,2E4
....................     
....................    memcpy(ptr, al ,max); 
2FD8:  MOVFF  2E3,FEA
2FDC:  MOVFF  2E2,FE9
2FE0:  MOVFF  2E7,FE2
2FE4:  MOVFF  2E6,FE1
2FE8:  MOVFF  2E5,02
2FEC:  MOVFF  2E4,01
2FF0:  MOVF   01,F
2FF2:  BZ    2FF8
2FF4:  INCF   02,F
2FF6:  BRA    2FFC
2FF8:  MOVF   02,F
2FFA:  BZ    3008
2FFC:  MOVFF  FE6,FEE
3000:  DECFSZ 01,F
3002:  BRA    2FFC
3004:  DECFSZ 02,F
3006:  BRA    2FFC
....................  
....................    return(max); 
3008:  MOVFF  2E4,01
300C:  MOVFF  2E5,02
.................... } 
3010:  MOVLB  0
3012:  GOTO   302C (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
3016:  MOVFF  2DC,2E1
301A:  MOVFF  2DE,2E3
301E:  MOVFF  2DD,2E2
3022:  MOVFF  2E0,2E5
3026:  MOVFF  2DF,2E4
302A:  BRA    2F4C
302C:  MOVFF  02,2E0
3030:  MOVFF  01,2DF
3034:  CLRF   16
3036:  BTFSC  FF2.7
3038:  BSF    16.7
303A:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
303C:  MOVFF  2DC,327
3040:  MOVLW  02
3042:  MOVLB  3
3044:  MOVWF  x28
3046:  MOVLB  0
3048:  CALL   0932
304C:  BTFSC  16.7
304E:  BSF    FF2.7
....................  
....................    return(max); 
3050:  MOVLB  2
3052:  MOVFF  2DF,01
3056:  MOVFF  2E0,02
.................... } 
305A:  MOVLB  0
305C:  GOTO   3CD0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07F8:  MOVLB  3
07FA:  BCF    x28.0
07FC:  BTFSC  x27.7
07FE:  BSF    x28.0
....................    endpoint &= 0x7F; 
0800:  BCF    x27.7
....................     
....................    if (direction)  
0802:  BTFSS  x28.0
0804:  BRA    0828
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
0806:  MOVF   x27,W
0808:  MULLW  08
080A:  MOVF   FF3,W
080C:  CLRF   x2A
080E:  MOVWF  x29
0810:  MOVLW  04
0812:  ADDWF  x29,F
0814:  MOVLW  00
0816:  ADDWFC x2A,F
0818:  MOVFF  329,FE9
081C:  MOVLW  04
081E:  ADDWF  x2A,W
0820:  MOVWF  FEA
0822:  MOVLW  84
0824:  MOVWF  FEF
....................    } 
....................    else  
0826:  BRA    083C
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0828:  MOVF   x27,W
082A:  MULLW  08
082C:  MOVF   FF3,W
082E:  CLRF   x2A
0830:  MOVWF  FE9
0832:  MOVLW  04
0834:  ADDWF  x2A,W
0836:  MOVWF  FEA
0838:  MOVLW  84
083A:  MOVWF  FEF
....................    } 
.................... } 
083C:  MOVLB  0
083E:  GOTO   08D0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07B0:  MOVLB  3
07B2:  BCF    x28.0
07B4:  BTFSC  x27.7
07B6:  BSF    x28.0
....................    endpoint &= 0x7F; 
07B8:  BCF    x27.7
....................     
....................    if (direction)  
07BA:  BTFSS  x28.0
07BC:  BRA    07E0
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07BE:  MOVF   x27,W
07C0:  MULLW  08
07C2:  MOVF   FF3,W
07C4:  CLRF   x2A
07C6:  MOVWF  x29
07C8:  MOVLW  04
07CA:  ADDWF  x29,F
07CC:  MOVLW  00
07CE:  ADDWFC x2A,F
07D0:  MOVFF  329,FE9
07D4:  MOVLW  04
07D6:  ADDWF  x2A,W
07D8:  MOVWF  FEA
07DA:  MOVLW  88
07DC:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
07DE:  BRA    07F2
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07E0:  MOVF   x27,W
07E2:  MULLW  08
07E4:  MOVF   FF3,W
07E6:  CLRF   x2A
07E8:  MOVWF  FE9
07EA:  MOVLW  04
07EC:  ADDWF  x2A,W
07EE:  MOVWF  FEA
07F0:  CLRF   FEF
....................    } 
.................... } 
07F2:  MOVLB  0
07F4:  GOTO   08C0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0842:  MOVLB  3
0844:  BCF    x28.0
0846:  BTFSC  x27.7
0848:  BSF    x28.0
....................    endpoint &= 0x7F; 
084A:  BCF    x27.7
....................     
....................    if (direction)  
084C:  BTFSS  x28.0
084E:  BRA    0872
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0850:  MOVF   x27,W
0852:  MULLW  08
0854:  MOVF   FF3,W
0856:  CLRF   x2B
0858:  MOVWF  x2A
085A:  MOVLW  04
085C:  ADDWF  x2A,F
085E:  MOVLW  00
0860:  ADDWFC x2B,F
0862:  MOVFF  32A,FE9
0866:  MOVLW  04
0868:  ADDWF  x2B,W
086A:  MOVWF  FEA
086C:  MOVFF  FEF,329
....................    } 
....................    else  
0870:  BRA    0886
....................    { 
....................       st=EP_BDxST_O(endpoint); 
0872:  MOVF   x27,W
0874:  MULLW  08
0876:  MOVF   FF3,W
0878:  CLRF   x2B
087A:  MOVWF  FE9
087C:  MOVLW  04
087E:  ADDWF  x2B,W
0880:  MOVWF  FEA
0882:  MOVFF  FEF,329
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
0886:  BTFSS  x29.7
0888:  BRA    088E
088A:  BTFSC  x29.2
088C:  BRA    0892
088E:  MOVLW  00
0890:  BRA    0894
0892:  MOVLW  01
0894:  MOVWF  01
.................... } 
0896:  MOVLB  0
0898:  GOTO   08E8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B26:  MOVFF  328,F6E
....................     
....................    if (address)  
0B2A:  MOVLB  3
0B2C:  MOVF   x28,F
0B2E:  BZ    0B36
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B30:  MOVLW  04
0B32:  MOVWF  1C
....................    } 
....................    else  
0B34:  BRA    0B3A
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B36:  MOVLW  02
0B38:  MOVWF  1C
....................    } 
.................... } 
0B3A:  MOVLB  0
0B3C:  GOTO   0B4A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
047C:  MOVLB  3
047E:  MOVF   x27,F
0480:  BNZ   048E
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0482:  MOVLW  04
0484:  MOVWF  1C
....................       usb_disable_endpoints(); 
0486:  MOVLB  0
0488:  RCALL  02D8
....................    } 
....................    else  
048A:  BRA    0648
048C:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
048E:  MOVLW  05
0490:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0492:  MOVLW  04
0494:  MOVWF  x2A
0496:  MOVLW  90
0498:  MOVWF  x29
....................       for (en=1; en<USB_NUM_UEP; en++)  
049A:  MOVLW  01
049C:  MOVWF  x28
049E:  MOVF   x28,W
04A0:  SUBLW  0F
04A2:  BTFSS  FD8.0
04A4:  BRA    0648
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
04A6:  MOVFF  328,330
04AA:  MOVLB  0
04AC:  RCALL  0284
....................          new_uep = 0; 
04AE:  MOVLB  3
04B0:  CLRF   x2B
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
04B2:  CLRF   03
04B4:  MOVF   x28,W
04B6:  MOVFF  FF2,32F
04BA:  BCF    FF2.7
04BC:  MOVLB  0
04BE:  RCALL  00BA
04C0:  MOVLB  3
04C2:  BTFSC  x2F.7
04C4:  BSF    FF2.7
04C6:  SUBLW  FF
04C8:  BZ    0580
....................          { 
....................             new_uep = 0x04; 
04CA:  MOVLW  04
04CC:  MOVWF  x2B
....................             len = usb_ep_rx_size[en]; 
04CE:  BCF    FD8.0
04D0:  RLCF   x28,W
04D2:  CLRF   03
04D4:  MOVFF  FF2,32F
04D8:  BCF    FF2.7
04DA:  MOVLB  0
04DC:  RCALL  00DA
04DE:  TBLRD*+
04E0:  MOVFF  FF5,03
04E4:  MOVLB  3
04E6:  BTFSC  x2F.7
04E8:  BSF    FF2.7
04EA:  MOVWF  x2C
04EC:  MOVFF  03,32D
....................             EP_BDxCNT_O(en) = len; 
04F0:  MOVF   x28,W
04F2:  MULLW  08
04F4:  MOVF   FF3,W
04F6:  CLRF   x30
04F8:  MOVWF  x2F
04FA:  MOVLW  01
04FC:  ADDWF  x2F,W
04FE:  MOVWF  01
0500:  MOVLW  00
0502:  ADDWFC x30,W
0504:  MOVWF  03
0506:  MOVFF  01,FE9
050A:  MOVLW  04
050C:  ADDWF  03,W
050E:  MOVWF  FEA
0510:  MOVFF  32C,FEF
....................             EP_BDxADR_O(en) = addy; 
0514:  MOVF   x28,W
0516:  MULLW  08
0518:  MOVF   FF3,W
051A:  CLRF   x30
051C:  MOVWF  x2F
051E:  MOVLW  02
0520:  ADDWF  x2F,W
0522:  MOVWF  01
0524:  MOVLW  00
0526:  ADDWFC x30,W
0528:  MOVWF  03
052A:  MOVFF  01,FE9
052E:  MOVLW  04
0530:  ADDWF  03,W
0532:  MOVWF  FEA
0534:  MOVFF  32A,FEC
0538:  MOVF   FED,F
053A:  MOVFF  329,FEF
....................             addy += usb_ep_rx_size[en]; 
053E:  BCF    FD8.0
0540:  RLCF   x28,W
0542:  CLRF   03
0544:  MOVFF  FF2,32F
0548:  BCF    FF2.7
054A:  MOVLB  0
054C:  RCALL  00DA
054E:  TBLRD*+
0550:  MOVFF  FF5,03
0554:  MOVLB  3
0556:  BTFSC  x2F.7
0558:  BSF    FF2.7
055A:  ADDWF  x29,F
055C:  MOVF   03,W
055E:  ADDWFC x2A,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
0560:  MOVLW  88
0562:  MOVWF  x2E
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
0564:  BTFSC  x2D.0
0566:  BSF    x2E.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0568:  BTFSC  x2D.1
056A:  BSF    x2E.1
....................             EP_BDxST_O(en) = i; 
056C:  MOVF   x28,W
056E:  MULLW  08
0570:  MOVF   FF3,W
0572:  CLRF   x30
0574:  MOVWF  FE9
0576:  MOVLW  04
0578:  ADDWF  x30,W
057A:  MOVWF  FEA
057C:  MOVFF  32E,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0580:  CLRF   03
0582:  MOVF   x28,W
0584:  MOVFF  FF2,32F
0588:  BCF    FF2.7
058A:  MOVLB  0
058C:  RCALL  00BA
058E:  MOVLB  3
0590:  BTFSC  x2F.7
0592:  BSF    FF2.7
0594:  SUBLW  FF
0596:  BZ    060E
....................          { 
....................             new_uep |= 0x02; 
0598:  BSF    x2B.1
....................             EP_BDxADR_I(en) = addy; 
059A:  MOVF   x28,W
059C:  MULLW  08
059E:  MOVF   FF3,W
05A0:  CLRF   x30
05A2:  MOVWF  x2F
05A4:  MOVLW  04
05A6:  ADDWF  x2F,F
05A8:  MOVLW  00
05AA:  ADDWFC x30,F
05AC:  MOVLW  02
05AE:  ADDWF  x2F,W
05B0:  MOVWF  01
05B2:  MOVLW  00
05B4:  ADDWFC x30,W
05B6:  MOVWF  03
05B8:  MOVFF  01,FE9
05BC:  MOVLW  04
05BE:  ADDWF  03,W
05C0:  MOVWF  FEA
05C2:  MOVFF  32A,FEC
05C6:  MOVF   FED,F
05C8:  MOVFF  329,FEF
....................             addy += usb_ep_tx_size[en]; 
05CC:  BCF    FD8.0
05CE:  RLCF   x28,W
05D0:  CLRF   03
05D2:  MOVFF  FF2,32F
05D6:  BCF    FF2.7
05D8:  MOVLB  0
05DA:  RCALL  00DA
05DC:  TBLRD*+
05DE:  MOVFF  FF5,03
05E2:  MOVLB  3
05E4:  BTFSC  x2F.7
05E6:  BSF    FF2.7
05E8:  ADDWF  x29,F
05EA:  MOVF   03,W
05EC:  ADDWFC x2A,F
....................             EP_BDxST_I(en) = 0x40; 
05EE:  MOVF   x28,W
05F0:  MULLW  08
05F2:  MOVF   FF3,W
05F4:  CLRF   x30
05F6:  MOVWF  x2F
05F8:  MOVLW  04
05FA:  ADDWF  x2F,F
05FC:  MOVLW  00
05FE:  ADDWFC x30,F
0600:  MOVFF  32F,FE9
0604:  MOVLW  04
0606:  ADDWF  x30,W
0608:  MOVWF  FEA
060A:  MOVLW  40
060C:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
060E:  MOVF   x2B,W
0610:  SUBLW  06
0612:  BNZ   0618
0614:  MOVLW  0E
0616:  MOVWF  x2B
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
0618:  CLRF   03
061A:  MOVF   x28,W
061C:  MOVFF  FF2,32F
0620:  BCF    FF2.7
0622:  MOVLB  0
0624:  RCALL  00BA
0626:  MOVLB  3
0628:  BTFSC  x2F.7
062A:  BSF    FF2.7
062C:  SUBLW  01
062E:  BTFSS  FD8.2
0630:  BSF    x2B.4
....................           
....................          UEP(en) = new_uep; 
0632:  CLRF   03
0634:  MOVF   x28,W
0636:  ADDLW  70
0638:  MOVWF  FE9
063A:  MOVLW  0F
063C:  ADDWFC 03,W
063E:  MOVWF  FEA
0640:  MOVFF  32B,FEF
....................       } 
0644:  INCF   x28,F
0646:  BRA    049E
0648:  MOVLB  0
....................    } 
.................... } 
064A:  GOTO   06F2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
0284:  CLRF   03
0286:  MOVLB  3
0288:  MOVF   x30,W
028A:  ADDLW  70
028C:  MOVWF  FE9
028E:  MOVLW  0F
0290:  ADDWFC 03,W
0292:  MOVWF  FEA
0294:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
0296:  MOVFF  330,331
029A:  MOVLB  0
029C:  RCALL  0220
029E:  MOVF   01,F
02A0:  BZ    02D4
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
02A2:  MOVLB  3
02A4:  MOVF   x30,W
02A6:  MULLW  08
02A8:  MOVF   FF3,W
02AA:  CLRF   x32
02AC:  MOVWF  FE9
02AE:  MOVLW  04
02B0:  ADDWF  x32,W
02B2:  MOVWF  FEA
02B4:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
02B6:  MOVF   x30,W
02B8:  MULLW  08
02BA:  MOVF   FF3,W
02BC:  CLRF   x32
02BE:  MOVWF  x31
02C0:  MOVLW  04
02C2:  ADDWF  x31,F
02C4:  MOVLW  00
02C6:  ADDWFC x32,F
02C8:  MOVFF  331,FE9
02CC:  MOVLW  04
02CE:  ADDWF  x32,W
02D0:  MOVWF  FEA
02D2:  CLRF   FEF
02D4:  MOVLB  0
....................    } 
.................... } 
02D6:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02D8:  MOVLW  01
02DA:  MOVLB  3
02DC:  MOVWF  x2F
02DE:  MOVF   x2F,W
02E0:  SUBLW  0F
02E2:  BNC   02F2
....................       usb_disable_endpoint(i); 
02E4:  MOVFF  32F,330
02E8:  MOVLB  0
02EA:  RCALL  0284
02EC:  MOVLB  3
02EE:  INCF   x2F,F
02F0:  BRA    02DE
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
02F2:  MOVLB  0
02F4:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CEA:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CEC:  MOVF   1C,F
0CEE:  BNZ   0CF2
0CF0:  BRA    0D6E
....................    if (UIR)  
0CF2:  MOVF   F68,F
0CF4:  BZ    0D6E
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CF6:  BTFSS  F68.2
0CF8:  BRA    0D02
0CFA:  BTFSS  F69.2
0CFC:  BRA    0D02
0CFE:  GOTO   01DA
....................  
....................       if (UCON_SUSPND) return; 
0D02:  BTFSS  F6D.1
0D04:  BRA    0D08
0D06:  BRA    0D6E
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0D08:  BTFSS  F68.5
0D0A:  BRA    0D14
0D0C:  BTFSS  F69.5
0D0E:  BRA    0D14
0D10:  GOTO   020A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0D14:  BTFSS  F68.1
0D16:  BRA    0D20
0D18:  BTFSS  F69.1
0D1A:  BRA    0D20
0D1C:  GOTO   0218
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D20:  BTFSS  F68.0
0D22:  BRA    0D2C
0D24:  BTFSS  F69.0
0D26:  BRA    0D2C
0D28:  GOTO   031E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D2C:  BTFSS  F68.4
0D2E:  BRA    0D38
0D30:  BTFSS  F69.4
0D32:  BRA    0D38
0D34:  GOTO   0348
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D38:  BTFSS  F68.6
0D3A:  BRA    0D44
0D3C:  BTFSS  F69.6
0D3E:  BRA    0D44
0D40:  GOTO   0352
....................  
....................       TRNAttempts = 0; 
0D44:  MOVLB  3
0D46:  CLRF   x24
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D48:  BTFSS  F68.3
0D4A:  BRA    0D60
0D4C:  BTFSS  F69.3
0D4E:  BRA    0D60
....................          { 
....................             USTATCopy = U1STAT; 
0D50:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
0D54:  MOVLB  0
0D56:  CALL   0004
....................             usb_isr_tok_dne(); 
0D5A:  BRA    0B70
....................          } 
....................          else 
0D5C:  BRA    0D62
0D5E:  MOVLB  3
....................             break; 
0D60:  BRA    0D6C
....................       } while (TRNAttempts++ < 4); 
0D62:  MOVLB  3
0D64:  MOVF   x24,W
0D66:  INCF   x24,F
0D68:  SUBLW  03
0D6A:  BC    0D48
0D6C:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
0D6E:  GOTO   0078
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
0352:  BCF    F68.6
.................... } 
0354:  GOTO   0D44 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
031E:  CLRF   F6A
....................    UIR = 0; 
0320:  CLRF   F68
....................    UEIE = 0x9F; 
0322:  MOVLW  9F
0324:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
0326:  MOVLW  3D
0328:  MOVWF  F69
....................  
....................    UADDR = 0; 
032A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
032C:  RCALL  02D8
....................     
....................    usb_token_reset(); 
032E:  RCALL  02F6
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
0330:  MOVLW  16
0332:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
0334:  BTFSS  F68.3
0336:  BRA    033C
....................       usb_clear_trn(); 
0338:  RCALL  0004
....................    } 
033A:  BRA    0334
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
033C:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
033E:  RCALL  01EA
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0340:  MOVLW  03
0342:  MOVWF  1C
.................... } 
0344:  GOTO   0D2C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01EA:  MOVLW  40
01EC:  MOVLB  4
01EE:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01F0:  MOVLW  04
01F2:  MOVWF  x03
01F4:  MOVLW  10
01F6:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01F8:  MOVLW  88
01FA:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01FC:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01FE:  MOVLW  04
0200:  MOVWF  x07
0202:  MOVLW  50
0204:  MOVWF  x06
.................... } 
0206:  MOVLB  0
0208:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0218:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
021A:  BCF    F68.1
.................... } 
021C:  GOTO   0D20 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
0348:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
034A:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
034C:  BSF    F6D.1
.................... } 
034E:  GOTO   0D38 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01DA:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01DC:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
01DE:  BTFSS  F68.2
01E0:  BRA    01E6
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01E2:  BCF    F68.2
....................    } 
01E4:  BRA    01DE
.................... } 
01E6:  GOTO   0D02 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
020A:  BTFSS  F70.0
020C:  BRA    0212
....................    { 
....................       usb_init_ep0_setup(); 
020E:  RCALL  01EA
....................       bit_clear(UEP(0), 0); 
0210:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
0212:  BCF    F68.5
.................... } 
0214:  GOTO   0D14 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
0358:  MOVFF  32A,1D
035C:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
035E:  MOVLW  FF
0360:  MOVWF  1D
0362:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B70:  RRCF   1B,W
0B72:  MOVLB  3
0B74:  MOVWF  x25
0B76:  RRCF   x25,F
0B78:  RRCF   x25,F
0B7A:  MOVLW  1F
0B7C:  ANDWF  x25,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B7E:  MOVF   1B,F
0B80:  BNZ   0C20
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B82:  MOVLB  4
0B84:  MOVF   x00,W
0B86:  ANDLW  3C
0B88:  MOVLB  3
0B8A:  MOVWF  x26
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B8C:  MOVLW  43
0B8E:  MOVLB  4
0B90:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B92:  MOVLB  3
0B94:  MOVF   x26,W
0B96:  SUBLW  34
0B98:  BNZ   0BE4
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B9A:  MOVLB  4
0B9C:  MOVF   x04,W
0B9E:  ANDLW  80
0BA0:  BZ    0BA4
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0BA2:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0BA4:  MOVLB  0
0BA6:  BRA    0906
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0BA8:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0BAA:  INCFSZ 1D,W
0BAC:  BRA    0BBC
....................             usb_flush_out(0, USB_DTS_STALL); 
0BAE:  MOVLB  3
0BB0:  CLRF   x27
0BB2:  MOVLW  03
0BB4:  MOVWF  x28
0BB6:  MOVLB  0
0BB8:  RCALL  0932
....................          else  
0BBA:  BRA    0BE0
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BBC:  MOVLB  3
0BBE:  CLRF   x27
0BC0:  MOVLW  02
0BC2:  MOVWF  x28
0BC4:  MOVLB  0
0BC6:  RCALL  0932
....................             if (__setup_0_tx_size != 0xFE) 
0BC8:  MOVF   1D,W
0BCA:  SUBLW  FE
0BCC:  BZ    0BE0
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BCE:  MOVLB  3
0BD0:  CLRF   x27
0BD2:  CLRF   x29
0BD4:  MOVFF  1D,328
0BD8:  MOVLW  04
0BDA:  MOVWF  x2A
0BDC:  MOVLB  0
0BDE:  RCALL  0A40
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BE0:  BRA    0C1C
0BE2:  MOVLB  3
0BE4:  MOVF   x26,W
0BE6:  SUBLW  04
0BE8:  BNZ   0C1E
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BEA:  CLRF   x27
0BEC:  MOVLB  0
0BEE:  RCALL  0B1C
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BF0:  MOVLB  3
0BF2:  CLRF   x27
0BF4:  MOVLW  02
0BF6:  MOVWF  x28
0BF8:  MOVLB  0
0BFA:  RCALL  0932
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BFC:  MOVF   1D,W
0BFE:  SUBLW  FE
0C00:  BZ    0C1A
0C02:  INCFSZ 1D,W
0C04:  BRA    0C08
0C06:  BRA    0C1A
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0C08:  MOVLB  3
0C0A:  CLRF   x27
0C0C:  CLRF   x29
0C0E:  MOVFF  1D,328
0C12:  MOVLW  01
0C14:  MOVWF  x2A
0C16:  MOVLB  0
0C18:  RCALL  0A40
....................          } 
....................       } 
....................       else 
0C1A:  BRA    0C1C
0C1C:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
0C1E:  BRA    0CE4
0C20:  MOVF   1B,W
0C22:  SUBLW  04
0C24:  BNZ   0C56
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C26:  MOVLW  43
0C28:  MOVLB  4
0C2A:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C2C:  MOVLW  FF
0C2E:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
0C30:  MOVLB  3
0C32:  CLRF   x27
0C34:  MOVLB  0
0C36:  RCALL  0B4E
....................       if (__setup_0_tx_size!=0xFF) 
0C38:  INCFSZ 1D,W
0C3A:  BRA    0C3E
0C3C:  BRA    0C52
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C3E:  MOVLB  3
0C40:  CLRF   x27
0C42:  CLRF   x29
0C44:  MOVFF  1D,328
0C48:  MOVLW  02
0C4A:  MOVWF  x2A
0C4C:  MOVLB  0
0C4E:  RCALL  0A40
....................       else 
0C50:  BRA    0C52
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
0C52:  BRA    0CE2
0C54:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C56:  BTFSC  1B.2
0C58:  BRA    0C94
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C5A:  MOVF   x25,W
0C5C:  MULLW  08
0C5E:  MOVF   FF3,W
0C60:  CLRF   x28
0C62:  MOVWF  01
0C64:  MOVLW  04
0C66:  ADDWF  x28,W
0C68:  MOVWF  03
0C6A:  MOVF   x25,W
0C6C:  MULLW  08
0C6E:  MOVF   FF3,W
0C70:  CLRF   x2A
0C72:  MOVWF  FE9
0C74:  MOVLW  04
0C76:  ADDWF  x2A,W
0C78:  MOVWF  FEA
0C7A:  MOVF   FEF,W
0C7C:  ANDLW  43
0C7E:  MOVFF  03,FEA
0C82:  MOVFF  01,FE9
0C86:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C88:  MOVFF  325,327
0C8C:  MOVLB  0
0C8E:  RCALL  0B1C
....................       } 
....................       else  
0C90:  BRA    0CE2
0C92:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C94:  MOVF   x25,W
0C96:  MULLW  08
0C98:  MOVF   FF3,W
0C9A:  CLRF   x28
0C9C:  MOVWF  x27
0C9E:  MOVLW  04
0CA0:  ADDWF  x27,F
0CA2:  MOVLW  00
0CA4:  ADDWFC x28,F
0CA6:  MOVFF  327,01
0CAA:  MOVLW  04
0CAC:  ADDWF  x28,W
0CAE:  MOVWF  03
0CB0:  MOVF   x25,W
0CB2:  MULLW  08
0CB4:  MOVF   FF3,W
0CB6:  CLRF   x2A
0CB8:  MOVWF  x29
0CBA:  MOVLW  04
0CBC:  ADDWF  x29,F
0CBE:  MOVLW  00
0CC0:  ADDWFC x2A,F
0CC2:  MOVFF  329,FE9
0CC6:  MOVLW  04
0CC8:  ADDWF  x2A,W
0CCA:  MOVWF  FEA
0CCC:  MOVF   FEF,W
0CCE:  ANDLW  43
0CD0:  MOVFF  03,FEA
0CD4:  MOVFF  327,FE9
0CD8:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CDA:  MOVFF  325,327
0CDE:  MOVLB  0
0CE0:  RCALL  0B4E
0CE2:  MOVLB  3
....................       } 
....................    } 
.................... } 
0CE4:  MOVLB  0
0CE6:  GOTO   0D5C (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
2F08:  MOVF   18,W
2F0A:  MOVWF  01
.................... } 
2F0C:  GOTO   3CA0 (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02F6:  MOVLB  3
02F8:  CLRF   x25
02FA:  MOVF   x25,F
02FC:  BNZ   0312
....................       USB_Interface[i] = 0;   //reset each interface to default 
02FE:  CLRF   03
0300:  MOVF   x25,W
0302:  ADDLW  21
0304:  MOVWF  FE9
0306:  MOVLW  00
0308:  ADDWFC 03,W
030A:  MOVWF  FEA
030C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
030E:  INCF   x25,F
0310:  BRA    02FA
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
0312:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
0314:  MOVLW  01
0316:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0318:  CLRF   17
.................... } 
031A:  MOVLB  0
031C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0220:  MOVLB  3
0222:  BCF    x32.0
0224:  BTFSC  x31.7
0226:  BSF    x32.0
....................     
....................    endpoint &= 0x7F; 
0228:  BCF    x31.7
....................     
....................    if (endpoint > 16) 
022A:  MOVF   x31,W
022C:  SUBLW  10
022E:  BC    0236
....................       return(FALSE); 
0230:  MOVLW  00
0232:  MOVWF  01
0234:  BRA    0280
....................     
....................    if (direction) { //IN 
0236:  BTFSS  x32.0
0238:  BRA    025E
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
023A:  CLRF   03
023C:  MOVF   x31,W
023E:  MOVFF  FF2,333
0242:  BCF    FF2.7
0244:  MOVLB  0
0246:  RCALL  00BA
0248:  MOVLB  3
024A:  BTFSC  x33.7
024C:  BSF    FF2.7
024E:  SUBLW  FF
0250:  BNZ   0256
0252:  MOVLW  00
0254:  BRA    0258
0256:  MOVLW  01
0258:  MOVWF  01
025A:  BRA    0280
....................    } 
....................    else {   //OUT 
025C:  BRA    0280
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
025E:  CLRF   03
0260:  MOVF   x31,W
0262:  MOVFF  FF2,333
0266:  BCF    FF2.7
0268:  MOVLB  0
026A:  RCALL  00BA
026C:  MOVLB  3
026E:  BTFSC  x33.7
0270:  BSF    FF2.7
0272:  SUBLW  FF
0274:  BNZ   027A
0276:  MOVLW  00
0278:  BRA    027C
027A:  MOVLW  01
027C:  MOVWF  01
027E:  BRA    0280
....................    } 
.................... } 
0280:  MOVLB  0
0282:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B4E:  MOVLB  3
0B50:  MOVF   x27,F
0B52:  BNZ   0B6C
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B54:  DECFSZ 17,W
0B56:  BRA    0B60
0B58:  MOVLB  0
0B5A:  RCALL  0364
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B5C:  BRA    0B6A
0B5E:  MOVLB  3
0B60:  MOVF   17,W
0B62:  SUBLW  02
0B64:  BNZ   0B6C
0B66:  MOVLB  0
0B68:  BRA    0B40
0B6A:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0B6C:  MOVLB  0
0B6E:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B1C:  MOVLB  3
0B1E:  MOVF   x27,F
0B20:  BNZ   0B22
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
0B22:  MOVLB  0
0B24:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
0906:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0908:  MOVLB  4
090A:  MOVF   x10,W
090C:  ANDLW  7F
090E:  XORLW  00
0910:  MOVLB  0
0912:  BZ    091E
0914:  XORLW  01
0916:  BZ    0922
0918:  XORLW  03
091A:  BZ    0926
091C:  BRA    092A
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
091E:  BRA    064E
....................          break; 
0920:  BRA    092E
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
0922:  BRA    0706
....................          break; 
0924:  BRA    092E
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0926:  BRA    089C
....................          break; 
0928:  BRA    092E
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
092A:  RCALL  035E
....................          break; 
092C:  BRA    092E
....................    } 
.................... } 
092E:  GOTO   0BA8 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
064E:  MOVLB  4
0650:  MOVF   x11,W
0652:  XORLW  00
0654:  MOVLB  0
0656:  BZ    0672
0658:  XORLW  01
065A:  BZ    0686
065C:  XORLW  02
065E:  BZ    06A0
0660:  XORLW  06
0662:  BZ    06B8
0664:  XORLW  03
0666:  BZ    06CA
0668:  XORLW  0E
066A:  BZ    06CE
066C:  XORLW  01
066E:  BZ    06DE
0670:  BRA    06FE
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0672:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
0676:  MOVLB  4
0678:  CLRF   x51
....................             usb_request_send_response(2); 
067A:  MOVLW  02
067C:  MOVLB  3
067E:  MOVWF  x2A
0680:  MOVLB  0
0682:  RCALL  0358
....................             break; 
0684:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0686:  MOVLB  4
0688:  DECFSZ x12,W
068A:  BRA    069A
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
068C:  MOVLW  01
068E:  ANDWF  19,F
....................                usb_put_0len_0(); 
0690:  MOVLB  3
0692:  CLRF   x2A
0694:  MOVLB  0
0696:  RCALL  0358
....................             } 
....................             else 
0698:  BRA    069E
....................                usb_request_stall(); 
069A:  MOVLB  0
069C:  RCALL  035E
....................             break; 
069E:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
06A0:  MOVLB  4
06A2:  DECFSZ x12,W
06A4:  BRA    06B2
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
06A6:  BSF    19.1
....................                usb_put_0len_0(); 
06A8:  MOVLB  3
06AA:  CLRF   x2A
06AC:  MOVLB  0
06AE:  RCALL  0358
....................             } 
....................             else 
06B0:  BRA    06B6
....................                usb_request_stall(); 
06B2:  MOVLB  0
06B4:  RCALL  035E
....................             break; 
06B6:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06B8:  MOVLW  02
06BA:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06BC:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06C0:  MOVLB  3
06C2:  CLRF   x2A
06C4:  MOVLB  0
06C6:  RCALL  0358
....................             break; 
06C8:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06CA:  BRA    03FE
....................             break; 
06CC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06CE:  MOVFF  18,450
....................             usb_request_send_response(1); 
06D2:  MOVLW  01
06D4:  MOVLB  3
06D6:  MOVWF  x2A
06D8:  MOVLB  0
06DA:  RCALL  0358
....................             break; 
06DC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06DE:  MOVLB  4
06E0:  MOVF   x12,W
06E2:  SUBLW  01
06E4:  BNC   06FA
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06E6:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06EA:  MOVFF  412,327
06EE:  MOVLB  0
06F0:  BRA    047C
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06F2:  MOVLB  3
06F4:  CLRF   x2A
06F6:  MOVLB  0
06F8:  RCALL  0358
....................             } 
....................             break; 
06FA:  MOVLB  0
06FC:  BRA    0702
....................  
....................       default: 
....................             usb_request_stall(); 
06FE:  RCALL  035E
....................             break; 
0700:  BRA    0702
....................    } 
.................... } 
0702:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
0706:  MOVFF  18,327
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
070A:  MOVLB  4
070C:  MOVF   x11,W
070E:  XORLW  00
0710:  MOVLB  0
0712:  BZ    071E
0714:  XORLW  0A
0716:  BZ    0730
0718:  XORLW  01
071A:  BZ    077E
071C:  BRA    07A8
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
071E:  MOVLB  4
0720:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
0722:  CLRF   x51
....................             usb_request_send_response(2); 
0724:  MOVLW  02
0726:  MOVLB  3
0728:  MOVWF  x2A
072A:  MOVLB  0
072C:  RCALL  0358
....................             break; 
072E:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0730:  MOVLB  3
0732:  MOVF   x27,F
0734:  BZ    0778
0736:  MOVLW  01
0738:  SUBWF  x27,W
073A:  CLRF   03
073C:  MOVFF  FF2,328
0740:  BCF    FF2.7
0742:  MOVLB  0
0744:  RCALL  014C
0746:  MOVLB  3
0748:  BTFSC  x28.7
074A:  BSF    FF2.7
074C:  MOVWF  01
074E:  MOVLB  4
0750:  SUBWF  x14,W
0752:  BTFSS  FD8.0
0754:  BRA    075A
0756:  MOVLB  3
0758:  BRA    0778
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
075A:  CLRF   03
075C:  MOVF   x14,W
075E:  ADDLW  21
0760:  MOVWF  FE9
0762:  MOVLW  00
0764:  ADDWFC 03,W
0766:  MOVWF  FEA
0768:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
076C:  MOVLW  01
076E:  MOVLB  3
0770:  MOVWF  x2A
0772:  MOVLB  0
0774:  RCALL  0358
....................             } 
....................             else 
0776:  BRA    077C
....................                usb_request_stall(); 
0778:  MOVLB  0
077A:  RCALL  035E
....................             break; 
077C:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
077E:  MOVLB  3
0780:  MOVF   x27,F
0782:  BZ    07A2
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
0784:  CLRF   03
0786:  MOVLB  4
0788:  MOVF   x14,W
078A:  ADDLW  21
078C:  MOVWF  FE9
078E:  MOVLW  00
0790:  ADDWFC 03,W
0792:  MOVWF  FEA
0794:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0798:  MOVLB  3
079A:  CLRF   x2A
079C:  MOVLB  0
079E:  RCALL  0358
....................             } 
....................             else 
07A0:  BRA    07A6
....................                usb_request_stall(); 
07A2:  MOVLB  0
07A4:  RCALL  035E
....................             break; 
07A6:  BRA    07AC
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
07A8:  RCALL  035E
....................             break; 
07AA:  BRA    07AC
....................    } 
.................... } 
07AC:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
089C:  MOVFF  414,331
08A0:  RCALL  0220
08A2:  MOVF   01,F
08A4:  BZ    0902
....................       switch(usb_ep0_rx_buffer[1]) { 
08A6:  MOVLB  4
08A8:  MOVF   x11,W
08AA:  XORLW  01
08AC:  MOVLB  0
08AE:  BZ    08BA
08B0:  XORLW  02
08B2:  BZ    08CA
08B4:  XORLW  03
08B6:  BZ    08DA
08B8:  BRA    08FE
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08BA:  MOVFF  414,327
08BE:  BRA    07B0
....................                usb_put_0len_0(); 
08C0:  MOVLB  3
08C2:  CLRF   x2A
08C4:  MOVLB  0
08C6:  RCALL  0358
....................                break; 
08C8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08CA:  MOVFF  414,327
08CE:  BRA    07F8
....................                      usb_put_0len_0(); 
08D0:  MOVLB  3
08D2:  CLRF   x2A
08D4:  MOVLB  0
08D6:  RCALL  0358
....................                      break; 
08D8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08DA:  MOVLB  4
08DC:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08DE:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08E0:  MOVFF  414,327
08E4:  MOVLB  0
08E6:  BRA    0842
08E8:  MOVF   01,F
08EA:  BZ    08F2
....................                   usb_ep0_tx_buffer[0]=1; 
08EC:  MOVLW  01
08EE:  MOVLB  4
08F0:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
08F2:  MOVLW  02
08F4:  MOVLB  3
08F6:  MOVWF  x2A
08F8:  MOVLB  0
08FA:  RCALL  0358
....................                break; 
08FC:  BRA    0902
....................  
....................          default: 
....................             usb_request_stall(); 
08FE:  RCALL  035E
....................             break; 
0900:  BRA    0902
....................       } 
....................    } 
.................... } 
0902:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03FE:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
0400:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
0402:  MOVLB  4
0404:  MOVF   x13,W
0406:  XORLW  01
0408:  MOVLB  0
040A:  BZ    0416
040C:  XORLW  03
040E:  BZ    0420
0410:  XORLW  01
0412:  BZ    0426
0414:  BRA    045C
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
0416:  MOVLW  12
0418:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
041A:  MOVLW  03
041C:  MOVWF  1A
....................             break; 
041E:  BRA    0460
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
0420:  MOVLW  20
0422:  MOVWF  20
....................             break; 
0424:  BRA    0460
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
0426:  MOVLW  02
0428:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
042A:  CLRF   03
042C:  MOVLB  4
042E:  MOVF   x12,W
0430:  MOVFF  FF2,327
0434:  BCF    FF2.7
0436:  MOVLB  0
0438:  RCALL  0180
043A:  MOVLB  3
043C:  BTFSC  x27.7
043E:  BSF    FF2.7
0440:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
0442:  CLRF   03
0444:  MOVF   1F,W
0446:  MOVFF  FF2,327
044A:  BCF    FF2.7
044C:  MOVLB  0
044E:  RCALL  0194
0450:  MOVLB  3
0452:  BTFSC  x27.7
0454:  BSF    FF2.7
0456:  MOVWF  20
....................             break; 
0458:  MOVLB  0
045A:  BRA    0460
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
045C:  RCALL  035E
....................             return; 
045E:  BRA    0478
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
0460:  MOVLB  4
0462:  MOVF   x17,F
0464:  BNZ   0470
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
0466:  MOVF   20,W
0468:  SUBWF  x16,W
046A:  BC    0470
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
046C:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0470:  MOVLW  01
0472:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
0474:  MOVLB  0
0476:  RCALL  0364
.................... } 
0478:  GOTO   0702 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B40:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B42:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0B44:  MOVFF  1E,328
0B48:  BRA    0B26
....................    #endif 
.................... } 
0B4A:  GOTO   0B6A (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
0364:  MOVLB  3
0366:  CLRF   x28
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
0368:  MOVF   20,F
036A:  BZ    03E8
036C:  MOVF   x28,W
036E:  SUBLW  3F
0370:  BNC   03E8
....................       switch(USB_stack_status.getdesc_type) { 
0372:  MOVF   1A,W
0374:  XORLW  00
0376:  MOVLB  0
0378:  BZ    0384
037A:  XORLW  02
037C:  BZ    039C
037E:  XORLW  01
0380:  BZ    03B4
0382:  BRA    03CC
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0384:  CLRF   03
0386:  MOVF   1F,W
0388:  MOVFF  FF2,32A
038C:  BCF    FF2.7
038E:  RCALL  011C
0390:  MOVLB  3
0392:  BTFSC  x2A.7
0394:  BSF    FF2.7
0396:  MOVWF  x29
....................             break; 
0398:  MOVLB  0
039A:  BRA    03CC
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
039C:  CLRF   03
039E:  MOVF   1F,W
03A0:  MOVFF  FF2,32A
03A4:  BCF    FF2.7
03A6:  RCALL  0194
03A8:  MOVLB  3
03AA:  BTFSC  x2A.7
03AC:  BSF    FF2.7
03AE:  MOVWF  x29
....................             break; 
03B0:  MOVLB  0
03B2:  BRA    03CC
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
03B4:  CLRF   03
03B6:  MOVF   1F,W
03B8:  MOVFF  FF2,32A
03BC:  BCF    FF2.7
03BE:  RCALL  015E
03C0:  MOVLB  3
03C2:  BTFSC  x2A.7
03C4:  BSF    FF2.7
03C6:  MOVWF  x29
....................             break; 
03C8:  MOVLB  0
03CA:  BRA    03CC
....................       } 
....................       usb_getdesc_ptr++; 
03CC:  INCF   1F,F
....................       usb_getdesc_len--; 
03CE:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
03D0:  MOVLB  3
03D2:  MOVF   x28,W
03D4:  INCF   x28,F
03D6:  CLRF   03
03D8:  ADDLW  50
03DA:  MOVWF  FE9
03DC:  MOVLW  04
03DE:  ADDWFC 03,W
03E0:  MOVWF  FEA
03E2:  MOVFF  329,FEF
....................    } 
03E6:  BRA    0368
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03E8:  MOVF   20,F
03EA:  BNZ   03F4
03EC:  MOVF   x28,W
03EE:  SUBLW  40
03F0:  BZ    03F4
....................          USB_stack_status.dev_req = NONE; 
03F2:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
03F4:  MOVFF  328,32A
03F8:  MOVLB  0
03FA:  RCALL  0358
.................... } 
03FC:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0; 
.................... short emergency=0,flag_agua=0,flag_agua2=0,CamaraOUT=0,CamaraIN=0,flag_reservorio=0,flag_presostato=0; 
.................... int8 r=0,t=0,TiempoControl=0,z=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Alarma=0,AlarmaAgua=0; 
.................... int8 Puerta=0,Parada=0,NivelReservorio=0,NivelTanque=0,Presostato=0,ADC_Pt100=0,y=0,Chksum=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Nivel=0,t_exhaust=0,tinicio=0,tagua=0,treservorio=0; 
....................  
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0,Visua=0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,R2=0,tiempo_esterilizacion=0,p=0,MediaMovil=2; 
.................... float V0=0.0,R1=6200.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0,d4=0.0,d5=0.0; 
.................... float V1=0.0,Presion=0.0,d6=0.0,d7=0.0,d8=0.0; 
.................... float Setpoint=0.0,Temperatura=0.0,TempUSB=0.0,PresionCamara=0.0,K=0.006429,p1=5.3232,p2=-16.8884,p3=37.3752,p4=-6.2316; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte posicion, buffer[0x10], txbuf[0x11],rxbuf[0x11];     //Buffer de memoria 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0D8A:  BTFSC  FC7.5
0D8C:  BRA    0D96
0D8E:  MOVLB  2
0D90:  CLRF   xDB
0D92:  BTFSC  FC7.2
0D94:  BSF    xDB.7
0D96:  MOVLB  2
0D98:  MOVF   xDB,W
0D9A:  INCF   xDB,F
0D9C:  MOVWF  xA7
....................  
....................    /* Solicitud de lectura del esclavo por el master */ 
....................    if(fstate == 0x80) {          
0D9E:  MOVF   xA7,W
0DA0:  SUBLW  80
0DA2:  BNZ   0DC2
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0DA4:  CLRF   03
0DA6:  MOVF   xA8,W
0DA8:  ADDLW  B9
0DAA:  MOVWF  FE9
0DAC:  MOVLW  02
0DAE:  ADDWFC 03,W
0DB0:  MOVWF  FEA
0DB2:  MOVFF  FEF,325
0DB6:  MOVFF  325,326
0DBA:  MOVLB  0
0DBC:  BRA    0D72
....................       //i2c_write (txbuf[0]);       
....................       //i2c_write ((int8)V2); 
....................    } 
....................    /* Sino está solicitando lectura es que está enviando algo */ 
....................    else {                              //Sino es que hay dato en el bus I2C... 
0DBE:  BRA    0DF6
0DC0:  MOVLB  2
....................       incoming = i2c_read();           //... lo lee 
0DC2:  BCF    FC6.6
0DC4:  BTFSS  F9E.3
0DC6:  BRA    0DC4
0DC8:  MOVF   FC9,W
0DCA:  BSF    FC6.4
0DCC:  MOVLB  3
0DCE:  MOVWF  x24
....................     
....................  
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0DD0:  MOVLB  2
0DD2:  DECFSZ xA7,W
0DD4:  BRA    0DDC
....................          posicion = incoming;          //Se guarda posición 
0DD6:  MOVFF  324,2A8
....................       } 
....................       else if (fState == 2) {          //Información recibida corresponde al dato 
0DDA:  BRA    0DF4
0DDC:  MOVF   xA7,W
0DDE:  SUBLW  02
0DE0:  BNZ   0DF4
....................          rxbuf[posicion] = incoming; 
0DE2:  CLRF   03
0DE4:  MOVF   xA8,W
0DE6:  ADDLW  CA
0DE8:  MOVWF  FE9
0DEA:  MOVLW  02
0DEC:  ADDWFC 03,W
0DEE:  MOVWF  FEA
0DF0:  MOVFF  324,FEF
0DF4:  MOVLB  0
....................       } 
....................   } 
.................... } 
....................  
0DF6:  BCF    F9E.3
0DF8:  GOTO   0078
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
1398:  MOVLB  2
139A:  MOVF   x18,W
139C:  MULLW  04
139E:  MOVF   FF3,W
13A0:  CLRF   03
13A2:  ADDLW  F2
13A4:  MOVWF  FE9
13A6:  MOVLW  01
13A8:  ADDWFC 03,W
13AA:  MOVWF  FEA
13AC:  MOVFF  24F,FEF
13B0:  MOVFF  250,FEC
13B4:  MOVFF  251,FEC
13B8:  MOVFF  252,FEC
....................    y++; 
13BC:  INCF   x18,F
....................    if(y>=2) 
13BE:  MOVF   x18,W
13C0:  SUBLW  01
13C2:  BC    13FE
....................    { 
....................       y=0; 
13C4:  CLRF   x18
....................       Aumento=X[1]-X[0]; 
13C6:  BSF    FD8.1
13C8:  MOVFF  1F9,317
13CC:  MOVFF  1F8,316
13D0:  MOVFF  1F7,315
13D4:  MOVFF  1F6,314
13D8:  MOVFF  1F5,31B
13DC:  MOVFF  1F4,31A
13E0:  MOVFF  1F3,319
13E4:  MOVFF  1F2,318
13E8:  MOVLB  0
13EA:  RCALL  1120
13EC:  MOVFF  03,201
13F0:  MOVFF  02,200
13F4:  MOVFF  01,1FF
13F8:  MOVFF  00,1FE
13FC:  MOVLB  2
....................    } 
.................... } 
13FE:  MOVLB  0
1400:  GOTO   1566 (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
0F6E:  MOVLB  2
0F70:  RLCF   xDD,W
0F72:  MOVWF  00
0F74:  RLCF   00,F
0F76:  MOVLW  FC
0F78:  ANDWF  00,F
0F7A:  MOVFF  00,01
0F7E:  MOVF   FC2,W
0F80:  ANDLW  C3
0F82:  IORWF  00,W
0F84:  MOVWF  FC2
0F86:  MOVLW  01
0F88:  MOVWF  xE2
0F8A:  MOVLB  0
0F8C:  RCALL  0F0E
0F8E:  BSF    FC2.1
0F90:  BTFSC  FC2.1
0F92:  BRA    0F90
0F94:  MOVFF  FC4,315
0F98:  MOVFF  FC3,314
0F9C:  MOVLB  0
0F9E:  RCALL  0F38
0FA0:  MOVFF  03,2E1
0FA4:  MOVFF  02,2E0
0FA8:  MOVFF  01,2DF
0FAC:  MOVFF  00,2DE
0FB0:  MOVFF  2DE,00
0FB4:  MOVFF  2DF,01
0FB8:  MOVFF  2E0,02
0FBC:  MOVFF  2E1,03
.................... } 
0FC0:  RETLW  00
.................... float Leer_Sensor(int media) 
.................... { 
....................    Prom=0.0; 
*
1404:  MOVLB  2
1406:  CLRF   x4E
1408:  CLRF   x4D
140A:  CLRF   x4C
140C:  CLRF   x4B
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
140E:  CLRF   xDD
1410:  MOVLB  0
1412:  RCALL  0F6E
1414:  MOVFF  03,236
1418:  MOVFF  02,235
141C:  MOVFF  01,234
1420:  MOVFF  00,233
....................    V0 = V0/36.7; // Se elimina la ganancia 
1424:  MOVFF  236,313
1428:  MOVFF  235,312
142C:  MOVFF  234,311
1430:  MOVFF  233,310
1434:  MOVLW  CD
1436:  MOVLB  3
1438:  MOVWF  x17
143A:  MOVLW  CC
143C:  MOVWF  x16
143E:  MOVLW  12
1440:  MOVWF  x15
1442:  MOVLW  84
1444:  MOVWF  x14
1446:  MOVLB  0
1448:  RCALL  0FC2
144A:  MOVFF  03,236
144E:  MOVFF  02,235
1452:  MOVFF  01,234
1456:  MOVFF  00,233
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); // Se calcula el valor de la PT100 
145A:  MOVLB  3
145C:  CLRF   x15
145E:  MOVFF  22F,314
1462:  MOVLB  0
1464:  RCALL  0F38
1466:  BCF    FD8.1
1468:  MOVFF  23A,317
146C:  MOVFF  239,316
1470:  MOVFF  238,315
1474:  MOVFF  237,314
1478:  MOVFF  03,31B
147C:  MOVFF  02,31A
1480:  MOVFF  01,319
1484:  MOVFF  00,318
1488:  RCALL  1120
148A:  MOVFF  00,2DD
148E:  MOVFF  01,2DE
1492:  MOVFF  02,2DF
1496:  MOVFF  03,2E0
149A:  MOVLB  3
149C:  CLRF   x13
149E:  MOVLW  C0
14A0:  MOVWF  x12
14A2:  MOVLW  7F
14A4:  MOVWF  x11
14A6:  MOVLW  88
14A8:  MOVWF  x10
14AA:  MOVFF  236,317
14AE:  MOVFF  235,316
14B2:  MOVFF  234,315
14B6:  MOVFF  233,314
14BA:  MOVLB  0
14BC:  RCALL  0FC2
14BE:  MOVFF  00,2E1
14C2:  MOVFF  01,2E2
14C6:  MOVFF  02,2E3
14CA:  MOVFF  03,2E4
14CE:  BSF    FD8.1
14D0:  MOVFF  03,317
14D4:  MOVFF  02,316
14D8:  MOVFF  01,315
14DC:  MOVFF  00,314
14E0:  MOVLB  3
14E2:  CLRF   x1B
14E4:  CLRF   x1A
14E6:  CLRF   x19
14E8:  MOVLW  7F
14EA:  MOVWF  x18
14EC:  MOVLB  0
14EE:  RCALL  1120
14F0:  MOVFF  2E0,313
14F4:  MOVFF  2DF,312
14F8:  MOVFF  2DE,311
14FC:  MOVFF  2DD,310
1500:  MOVFF  03,317
1504:  MOVFF  02,316
1508:  MOVFF  01,315
150C:  MOVFF  00,314
1510:  RCALL  0FC2
1512:  MOVFF  03,23E
1516:  MOVFF  02,23D
151A:  MOVFF  01,23C
151E:  MOVFF  00,23B
....................    Pt=Pt-0.5; 
1522:  BSF    FD8.1
1524:  MOVFF  23E,317
1528:  MOVFF  23D,316
152C:  MOVFF  23C,315
1530:  MOVFF  23B,314
1534:  MOVLB  3
1536:  CLRF   x1B
1538:  CLRF   x1A
153A:  CLRF   x19
153C:  MOVLW  7E
153E:  MOVWF  x18
1540:  MOVLB  0
1542:  RCALL  1120
1544:  MOVFF  03,23E
1548:  MOVFF  02,23D
154C:  MOVFF  01,23C
1550:  MOVFF  00,23B
....................    //Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>(media-1)) 
1554:  MOVLW  01
1556:  MOVLB  2
1558:  SUBWF  xDC,W
155A:  SUBWF  x2C,W
155C:  BZ    1568
155E:  BNC   1568
....................    {l=0;ActualizaRecta();} 
1560:  CLRF   x2C
1562:  MOVLB  0
1564:  BRA    1398
1566:  MOVLB  2
1568:  CLRF   16
156A:  BTFSC  FF2.7
156C:  BSF    16.7
156E:  BCF    FF2.7
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=Pt;l++; 
1570:  MOVLB  3
1572:  CLRF   x25
1574:  MOVFF  22C,324
1578:  CLRF   x27
157A:  MOVLW  04
157C:  MOVWF  x26
157E:  MOVLB  0
1580:  RCALL  0DFC
1582:  BTFSC  16.7
1584:  BSF    FF2.7
1586:  MOVF   01,W
1588:  ADDLW  62
158A:  MOVWF  FE9
158C:  MOVLW  00
158E:  ADDWFC 02,W
1590:  MOVWF  FEA
1592:  MOVFF  23B,FEF
1596:  MOVFF  23C,FEC
159A:  MOVFF  23D,FEC
159E:  MOVFF  23E,FEC
15A2:  MOVLB  2
15A4:  INCF   x2C,F
....................           
....................    for(h=0;h<media;h++) 
15A6:  CLRF   x2B
15A8:  MOVF   xDC,W
15AA:  SUBWF  x2B,W
15AC:  BC    1636
15AE:  CLRF   16
15B0:  BTFSC  FF2.7
15B2:  BSF    16.7
15B4:  BCF    FF2.7
....................    { 
....................       Prom+=promedio[h]; 
15B6:  MOVLB  3
15B8:  CLRF   x25
15BA:  MOVFF  22B,324
15BE:  CLRF   x27
15C0:  MOVLW  04
15C2:  MOVWF  x26
15C4:  MOVLB  0
15C6:  RCALL  0DFC
15C8:  BTFSC  16.7
15CA:  BSF    FF2.7
15CC:  MOVFF  02,03
15D0:  MOVF   01,W
15D2:  ADDLW  62
15D4:  MOVWF  FE9
15D6:  MOVLW  00
15D8:  ADDWFC 02,W
15DA:  MOVWF  FEA
15DC:  MOVFF  FEF,00
15E0:  MOVFF  FEC,01
15E4:  MOVFF  FEC,02
15E8:  MOVFF  FEC,03
15EC:  MOVFF  FEA,2DE
15F0:  MOVFF  FE9,2DD
15F4:  BCF    FD8.1
15F6:  MOVFF  24E,317
15FA:  MOVFF  24D,316
15FE:  MOVFF  24C,315
1602:  MOVFF  24B,314
1606:  MOVFF  03,31B
160A:  MOVFF  02,31A
160E:  MOVFF  01,319
1612:  MOVFF  00,318
1616:  RCALL  1120
1618:  MOVFF  2DE,FEA
161C:  MOVFF  2DD,FE9
1620:  MOVFF  03,24E
1624:  MOVFF  02,24D
1628:  MOVFF  01,24C
162C:  MOVFF  00,24B
....................    }  
1630:  MOVLB  2
1632:  INCF   x2B,F
1634:  BRA    15A8
....................    Prom=Prom/media;    
1636:  MOVLB  3
1638:  CLRF   x15
163A:  MOVFF  2DC,314
163E:  MOVLB  0
1640:  RCALL  0F38
1642:  MOVFF  24E,313
1646:  MOVFF  24D,312
164A:  MOVFF  24C,311
164E:  MOVFF  24B,310
1652:  MOVFF  03,317
1656:  MOVFF  02,316
165A:  MOVFF  01,315
165E:  MOVFF  00,314
1662:  RCALL  0FC2
1664:  MOVFF  03,24E
1668:  MOVFF  02,24D
166C:  MOVFF  01,24C
1670:  MOVFF  00,24B
....................    Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
1674:  BSF    FD8.1
1676:  MOVFF  24E,317
167A:  MOVFF  24D,316
167E:  MOVFF  24C,315
1682:  MOVFF  24B,314
1686:  MOVLB  3
1688:  CLRF   x1B
168A:  CLRF   x1A
168C:  MOVLW  48
168E:  MOVWF  x19
1690:  MOVLW  85
1692:  MOVWF  x18
1694:  MOVLB  0
1696:  RCALL  1120
1698:  MOVFF  00,2DD
169C:  MOVFF  01,2DE
16A0:  MOVFF  02,2DF
16A4:  MOVFF  03,2E0
16A8:  MOVFF  03,313
16AC:  MOVFF  02,312
16B0:  MOVFF  01,311
16B4:  MOVFF  00,310
16B8:  MOVLW  B8
16BA:  MOVLB  3
16BC:  MOVWF  x17
16BE:  MOVLW  1E
16C0:  MOVWF  x16
16C2:  MOVLW  45
16C4:  MOVWF  x15
16C6:  MOVLW  7D
16C8:  MOVWF  x14
16CA:  MOVLB  0
16CC:  RCALL  0FC2
16CE:  MOVFF  03,252
16D2:  MOVFF  02,251
16D6:  MOVFF  01,250
16DA:  MOVFF  00,24F
....................    //Prom+=((float)Ajuste-(float)Ajusten); 
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
16DE:  MOVLB  3
16E0:  CLRF   x15
16E2:  MOVFF  22D,314
16E6:  MOVLB  0
16E8:  RCALL  0F38
16EA:  MOVFF  00,2DD
16EE:  MOVFF  01,2DE
16F2:  MOVFF  02,2DF
16F6:  MOVFF  03,2E0
16FA:  MOVLB  3
16FC:  CLRF   x15
16FE:  MOVFF  22E,314
1702:  MOVLB  0
1704:  RCALL  0F38
1706:  BSF    FD8.1
1708:  MOVFF  2E0,317
170C:  MOVFF  2DF,316
1710:  MOVFF  2DE,315
1714:  MOVFF  2DD,314
1718:  MOVFF  03,31B
171C:  MOVFF  02,31A
1720:  MOVFF  01,319
1724:  MOVFF  00,318
1728:  RCALL  1120
172A:  BCF    FD8.1
172C:  MOVFF  252,317
1730:  MOVFF  251,316
1734:  MOVFF  250,315
1738:  MOVFF  24F,314
173C:  MOVFF  03,31B
1740:  MOVFF  02,31A
1744:  MOVFF  01,319
1748:  MOVFF  00,318
174C:  RCALL  1120
174E:  MOVFF  03,252
1752:  MOVFF  02,251
1756:  MOVFF  01,250
175A:  MOVFF  00,24F
....................     
....................    //return Prom; 
....................    return Temperature; 
175E:  MOVFF  24F,00
1762:  MOVFF  250,01
1766:  MOVFF  251,02
176A:  MOVFF  252,03
.................... } 
176E:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
....................    promediopresion=0.0; 
*
2A66:  MOVLB  1
2A68:  CLRF   xFD
2A6A:  CLRF   xFC
2A6C:  CLRF   xFB
2A6E:  CLRF   xFA
....................    V1 = sensores(1);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
2A70:  MOVLW  01
2A72:  MOVLB  2
2A74:  MOVWF  xDD
2A76:  MOVLB  0
2A78:  CALL   0F6E
2A7C:  MOVFF  03,272
2A80:  MOVFF  02,271
2A84:  MOVFF  01,270
2A88:  MOVFF  00,26F
....................    V1 = V1*(5.0/1023.0); 
2A8C:  MOVFF  272,313
2A90:  MOVFF  271,312
2A94:  MOVFF  270,311
2A98:  MOVFF  26F,310
2A9C:  MOVLW  0A
2A9E:  MOVLB  3
2AA0:  MOVWF  x17
2AA2:  MOVLW  28
2AA4:  MOVWF  x16
2AA6:  MOVLW  20
2AA8:  MOVWF  x15
2AAA:  MOVLW  77
2AAC:  MOVWF  x14
2AAE:  MOVLB  0
2AB0:  CALL   1770
2AB4:  MOVFF  03,272
2AB8:  MOVFF  02,271
2ABC:  MOVFF  01,270
2AC0:  MOVFF  00,26F
....................    //Presion=(V1-0.2)/(K); 
....................     
....................    Presion=(pow(V1,3)*p1)+(pow(V1,2)*p2)+(V1*p3)+p4; // Polinomio obtenido con Matlab 
2AC4:  MOVFF  272,2E4
2AC8:  MOVFF  271,2E3
2ACC:  MOVFF  270,2E2
2AD0:  MOVFF  26F,2E1
2AD4:  MOVLB  2
2AD6:  CLRF   xE8
2AD8:  CLRF   xE7
2ADA:  MOVLW  40
2ADC:  MOVWF  xE6
2ADE:  MOVLW  80
2AE0:  MOVWF  xE5
2AE2:  MOVLB  0
2AE4:  RCALL  275A
2AE6:  MOVFF  00,2DD
2AEA:  MOVFF  01,2DE
2AEE:  MOVFF  02,2DF
2AF2:  MOVFF  03,2E0
2AF6:  MOVFF  03,313
2AFA:  MOVFF  02,312
2AFE:  MOVFF  01,311
2B02:  MOVFF  00,310
2B06:  MOVFF  29A,317
2B0A:  MOVFF  299,316
2B0E:  MOVFF  298,315
2B12:  MOVFF  297,314
2B16:  CALL   1770
2B1A:  MOVFF  00,2DD
2B1E:  MOVFF  01,2DE
2B22:  MOVFF  02,2DF
2B26:  MOVFF  03,2E0
2B2A:  MOVFF  272,2E4
2B2E:  MOVFF  271,2E3
2B32:  MOVFF  270,2E2
2B36:  MOVFF  26F,2E1
2B3A:  MOVLB  2
2B3C:  CLRF   xE8
2B3E:  CLRF   xE7
2B40:  CLRF   xE6
2B42:  MOVLW  80
2B44:  MOVWF  xE5
2B46:  MOVLB  0
2B48:  RCALL  275A
2B4A:  MOVFF  00,2E1
2B4E:  MOVFF  01,2E2
2B52:  MOVFF  02,2E3
2B56:  MOVFF  03,2E4
2B5A:  MOVFF  03,313
2B5E:  MOVFF  02,312
2B62:  MOVFF  01,311
2B66:  MOVFF  00,310
2B6A:  MOVFF  29E,317
2B6E:  MOVFF  29D,316
2B72:  MOVFF  29C,315
2B76:  MOVFF  29B,314
2B7A:  CALL   1770
2B7E:  MOVFF  FEA,2E2
2B82:  MOVFF  FE9,2E1
2B86:  BCF    FD8.1
2B88:  MOVFF  2E0,317
2B8C:  MOVFF  2DF,316
2B90:  MOVFF  2DE,315
2B94:  MOVFF  2DD,314
2B98:  MOVFF  03,31B
2B9C:  MOVFF  02,31A
2BA0:  MOVFF  01,319
2BA4:  MOVFF  00,318
2BA8:  CALL   1120
2BAC:  MOVFF  2E2,FEA
2BB0:  MOVFF  2E1,FE9
2BB4:  MOVFF  00,2DD
2BB8:  MOVFF  01,2DE
2BBC:  MOVFF  02,2DF
2BC0:  MOVFF  03,2E0
2BC4:  MOVFF  272,313
2BC8:  MOVFF  271,312
2BCC:  MOVFF  270,311
2BD0:  MOVFF  26F,310
2BD4:  MOVFF  2A2,317
2BD8:  MOVFF  2A1,316
2BDC:  MOVFF  2A0,315
2BE0:  MOVFF  29F,314
2BE4:  CALL   1770
2BE8:  MOVFF  FEA,2E4
2BEC:  MOVFF  FE9,2E3
2BF0:  BCF    FD8.1
2BF2:  MOVFF  2E0,317
2BF6:  MOVFF  2DF,316
2BFA:  MOVFF  2DE,315
2BFE:  MOVFF  2DD,314
2C02:  MOVFF  03,31B
2C06:  MOVFF  02,31A
2C0A:  MOVFF  01,319
2C0E:  MOVFF  00,318
2C12:  CALL   1120
2C16:  MOVFF  2E4,FEA
2C1A:  MOVFF  2E3,FE9
2C1E:  MOVFF  00,2DD
2C22:  MOVFF  01,2DE
2C26:  MOVFF  02,2DF
2C2A:  MOVFF  03,2E0
2C2E:  MOVFF  FEA,2E6
2C32:  MOVFF  FE9,2E5
2C36:  BCF    FD8.1
2C38:  MOVFF  03,317
2C3C:  MOVFF  02,316
2C40:  MOVFF  01,315
2C44:  MOVFF  00,314
2C48:  MOVFF  2A6,31B
2C4C:  MOVFF  2A5,31A
2C50:  MOVFF  2A4,319
2C54:  MOVFF  2A3,318
2C58:  CALL   1120
2C5C:  MOVFF  2E6,FEA
2C60:  MOVFF  2E5,FE9
2C64:  MOVFF  03,276
2C68:  MOVFF  02,275
2C6C:  MOVFF  01,274
2C70:  MOVFF  00,273
....................    Presion=Presion/0.145; 
2C74:  MOVFF  276,313
2C78:  MOVFF  275,312
2C7C:  MOVFF  274,311
2C80:  MOVFF  273,310
2C84:  MOVLW  E1
2C86:  MOVLB  3
2C88:  MOVWF  x17
2C8A:  MOVLW  7A
2C8C:  MOVWF  x16
2C8E:  MOVLW  14
2C90:  MOVWF  x15
2C92:  MOVLW  7C
2C94:  MOVWF  x14
2C96:  MOVLB  0
2C98:  CALL   0FC2
2C9C:  MOVFF  03,276
2CA0:  MOVFF  02,275
2CA4:  MOVFF  01,274
2CA8:  MOVFF  00,273
....................     
....................    if(Presion<3.0) 
2CAC:  MOVFF  276,313
2CB0:  MOVFF  275,312
2CB4:  MOVFF  274,311
2CB8:  MOVFF  273,310
2CBC:  MOVLB  3
2CBE:  CLRF   x17
2CC0:  CLRF   x16
2CC2:  MOVLW  40
2CC4:  MOVWF  x15
2CC6:  MOVLW  80
2CC8:  MOVWF  x14
2CCA:  MOVLB  0
2CCC:  CALL   1866
2CD0:  BNC   2CDC
....................    { 
....................       Presion=0.0; 
2CD2:  MOVLB  2
2CD4:  CLRF   x76
2CD6:  CLRF   x75
2CD8:  CLRF   x74
2CDA:  CLRF   x73
....................    } 
....................     
....................    if(r>media-1) 
2CDC:  MOVLW  01
2CDE:  MOVLB  2
2CE0:  SUBWF  xDC,W
2CE2:  SUBWF  x03,W
2CE4:  BZ    2CEA
2CE6:  BNC   2CEA
....................    {r=0;} 
2CE8:  CLRF   x03
....................    PromPresion[r]=Presion;r++; 
2CEA:  MOVF   x03,W
2CEC:  MULLW  04
2CEE:  MOVF   FF3,W
2CF0:  CLRF   03
2CF2:  ADDLW  A2
2CF4:  MOVWF  FE9
2CF6:  MOVLW  01
2CF8:  ADDWFC 03,W
2CFA:  MOVWF  FEA
2CFC:  MOVFF  273,FEF
2D00:  MOVFF  274,FEC
2D04:  MOVFF  275,FEC
2D08:  MOVFF  276,FEC
2D0C:  INCF   x03,F
....................           
....................    for(t=0;t<=(media-1);t++) 
2D0E:  CLRF   x04
2D10:  MOVLW  01
2D12:  SUBWF  xDC,W
2D14:  SUBWF  x04,W
2D16:  BZ    2D1A
2D18:  BC    2D8A
....................    { 
....................       promediopresion+=PromPresion[t]; 
2D1A:  MOVF   x04,W
2D1C:  MULLW  04
2D1E:  MOVF   FF3,W
2D20:  CLRF   03
2D22:  ADDLW  A2
2D24:  MOVWF  FE9
2D26:  MOVLW  01
2D28:  ADDWFC 03,W
2D2A:  MOVWF  FEA
2D2C:  MOVFF  FEF,00
2D30:  MOVFF  FEC,01
2D34:  MOVFF  FEC,02
2D38:  MOVFF  FEC,03
2D3C:  MOVFF  FEA,2DE
2D40:  MOVFF  FE9,2DD
2D44:  BCF    FD8.1
2D46:  MOVFF  1FD,317
2D4A:  MOVFF  1FC,316
2D4E:  MOVFF  1FB,315
2D52:  MOVFF  1FA,314
2D56:  MOVFF  03,31B
2D5A:  MOVFF  02,31A
2D5E:  MOVFF  01,319
2D62:  MOVFF  00,318
2D66:  MOVLB  0
2D68:  CALL   1120
2D6C:  MOVFF  2DE,FEA
2D70:  MOVFF  2DD,FE9
2D74:  MOVFF  03,1FD
2D78:  MOVFF  02,1FC
2D7C:  MOVFF  01,1FB
2D80:  MOVFF  00,1FA
....................    }  
2D84:  MOVLB  2
2D86:  INCF   x04,F
2D88:  BRA    2D10
....................    promediopresion=promediopresion/media;    
2D8A:  MOVLB  3
2D8C:  CLRF   x15
2D8E:  MOVFF  2DC,314
2D92:  MOVLB  0
2D94:  CALL   0F38
2D98:  MOVFF  1FD,313
2D9C:  MOVFF  1FC,312
2DA0:  MOVFF  1FB,311
2DA4:  MOVFF  1FA,310
2DA8:  MOVFF  03,317
2DAC:  MOVFF  02,316
2DB0:  MOVFF  01,315
2DB4:  MOVFF  00,314
2DB8:  CALL   0FC2
2DBC:  MOVFF  03,1FD
2DC0:  MOVFF  02,1FC
2DC4:  MOVFF  01,1FB
2DC8:  MOVFF  00,1FA
....................     
....................    return promediopresion; 
2DCC:  MOVFF  1FA,00
2DD0:  MOVFF  1FB,01
2DD4:  MOVFF  1FC,02
2DD8:  MOVFF  1FD,03
.................... } 
2DDC:  RETLW  00
....................  
.................... void Carga_Vector(void){ 
....................    txbuf[0]=Puerta; 
*
2E30:  MOVFF  212,2B9
....................    txbuf[1]=Parada; 
2E34:  MOVFF  213,2BA
....................    txbuf[2]=NivelReservorio; 
2E38:  MOVFF  214,2BB
....................    txbuf[3]=flag_agua; 
2E3C:  MOVLB  2
2E3E:  CLRF   xBC
2E40:  BTFSC  x02.1
2E42:  INCF   xBC,F
....................    txbuf[4]=Presostato; 
2E44:  MOVFF  216,2BD
....................    txbuf[5]=(int8)Temperatura; 
2E48:  MOVFF  28A,313
2E4C:  MOVFF  289,312
2E50:  MOVFF  288,311
2E54:  MOVFF  287,310
2E58:  MOVLB  0
2E5A:  CALL   18E0
2E5E:  MOVFF  01,2BE
....................    txbuf[6]=Alarma; 
2E62:  MOVFF  210,2BF
....................    txbuf[7]=AlarmaAgua; 
2E66:  MOVFF  211,2C0
....................    txbuf[8]=Chksum; 
2E6A:  MOVFF  219,2C1
....................    txbuf[9]=(int8)d3; 
2E6E:  MOVFF  266,313
2E72:  MOVFF  265,312
2E76:  MOVFF  264,311
2E7A:  MOVFF  263,310
2E7E:  CALL   18E0
2E82:  MOVFF  01,2C2
.................... } 
2E86:  RETLW  00
....................  
.................... void Lee_Vector(void){ 
....................    Resistencia=rxbuf[0]; 
*
2DDE:  MOVFF  2CA,207
....................    EVDesfogue=rxbuf[1]; 
2DE2:  MOVFF  2CB,208
....................    EVAgua=rxbuf[2]; 
2DE6:  MOVFF  2CC,209
....................    EVTrampa=rxbuf[3]; 
2DEA:  MOVFF  2CD,20A
....................    MotorPuerta=rxbuf[4]; 
2DEE:  MOVFF  2CE,20B
....................    EVEntradaAgua=rxbuf[5]; 
2DF2:  MOVFF  2CF,20C
....................    BombaVacio=rxbuf[6]; 
2DF6:  MOVFF  2D0,20D
....................    BombaAgua=rxbuf[7]; 
2DFA:  MOVFF  2D1,20E
....................    Control=rxbuf[8]; 
2DFE:  MOVFF  2D2,20F
....................    Setpoint=rxbuf[9]; 
2E02:  MOVLB  3
2E04:  CLRF   x15
2E06:  MOVFF  2D3,314
2E0A:  MOVLB  0
2E0C:  CALL   0F38
2E10:  MOVFF  03,286
2E14:  MOVFF  02,285
2E18:  MOVFF  01,284
2E1C:  MOVFF  00,283
....................    Chksum=rxbuf[10]; 
2E20:  MOVFF  2D4,219
....................    Nivel=rxbuf[12]; 
2E24:  MOVLB  2
2E26:  CLRF   x21
2E28:  MOVFF  2D6,220
.................... } 
2E2C:  MOVLB  0
2E2E:  RETLW  00
....................  
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
*
0E1E:  CLRF   FD7
0E20:  CLRF   FD6
....................    t_exhaust++; 
0E22:  MOVLB  2
0E24:  INCF   x22,F
0E26:  BTFSC  FD8.2
0E28:  INCF   x23,F
....................    if(EVDesfogue==2 && Presostato>=2) 
0E2A:  MOVF   x08,W
0E2C:  SUBLW  02
0E2E:  BNZ   0EA0
0E30:  MOVF   x16,W
0E32:  SUBLW  01
0E34:  BC    0EA0
....................    { 
....................       EV_Agua_off; 
0E36:  BCF    F8A.4
0E38:  BCF    F93.4
....................       EV_Paso_off; 
0E3A:  BCF    F8A.3
0E3C:  BCF    F93.3
....................       Resistencia_off; 
0E3E:  BCF    F8B.0
0E40:  BCF    F94.0
....................       Resistencia2_off; 
0E42:  BCF    F8B.1
0E44:  BCF    F94.1
....................       if(Nivel<6) 
0E46:  MOVF   x21,F
0E48:  BNZ   0E9C
0E4A:  MOVF   x20,W
0E4C:  SUBLW  05
0E4E:  BNC   0E9C
....................       { 
....................          if(t_exhaust<=(9990*Nivel)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0E50:  MOVLW  27
0E52:  MOVLB  3
0E54:  MOVWF  x25
0E56:  MOVLW  06
0E58:  MOVWF  x24
0E5A:  MOVFF  221,327
0E5E:  MOVFF  220,326
0E62:  MOVLB  0
0E64:  RCALL  0DFC
0E66:  MOVFF  02,03
0E6A:  MOVF   01,W
0E6C:  MOVLB  2
0E6E:  MOVF   x23,W
0E70:  SUBWF  02,W
0E72:  BNC   0E82
0E74:  BNZ   0E7C
0E76:  MOVF   x22,W
0E78:  SUBWF  01,W
0E7A:  BNC   0E82
....................          { 
....................             //Resistencia_on; 
....................             EV_Desfogue_on; 
0E7C:  BSF    F8A.2
0E7E:  BCF    F93.2
....................          } 
....................          else          
0E80:  BRA    0E86
....................          { 
....................             //Resistencia_off; 
....................             EV_Desfogue_off; 
0E82:  BCF    F8A.2
0E84:  BCF    F93.2
....................          }    
....................        
....................          if(t_exhaust>=60000) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0E86:  MOVF   x23,W
0E88:  SUBLW  E9
0E8A:  BC    0E9A
0E8C:  XORLW  FF
0E8E:  BNZ   0E96
0E90:  MOVF   x22,W
0E92:  SUBLW  5F
0E94:  BC    0E9A
....................          { 
....................             t_exhaust=0; 
0E96:  CLRF   x23
0E98:  CLRF   x22
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       } 
....................       else 
0E9A:  BRA    0EA0
....................       { 
....................          EV_Desfogue_on; 
0E9C:  BSF    F8A.2
0E9E:  BCF    F93.2
....................       } 
....................    }   
.................... } 
....................  
0EA0:  BCF    FF2.2
0EA2:  MOVLB  0
0EA4:  GOTO   0078
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
0EA8:  MOVLW  15
0EAA:  MOVWF  FCF
0EAC:  MOVLW  A0
0EAE:  MOVWF  FCE
....................    tiempos++; 
0EB0:  MOVLB  2
0EB2:  INCF   x1A,F
0EB4:  BTFSC  FD8.2
0EB6:  INCF   x1B,F
....................    tiempos3++; 
0EB8:  INCF   x1C,F
0EBA:  BTFSC  FD8.2
0EBC:  INCF   x1D,F
....................    tiempoctrl++; 
0EBE:  INCF   x1E,F
0EC0:  BTFSC  FD8.2
0EC2:  INCF   x1F,F
....................     
....................    if(flag_reservorio==1) 
0EC4:  BTFSS  x02.5
0EC6:  BRA    0ECE
....................    { 
....................       treservorio++; 
0EC8:  INCF   x28,F
0ECA:  BTFSC  FD8.2
0ECC:  INCF   x29,F
....................    } 
....................           
....................    if(tiempos3>=100) 
0ECE:  MOVF   x1D,F
0ED0:  BNZ   0ED8
0ED2:  MOVF   x1C,W
0ED4:  SUBLW  63
0ED6:  BC    0EDE
....................    {tiempos3=0;Expulsa=1;} 
0ED8:  CLRF   x1D
0EDA:  CLRF   x1C
0EDC:  BSF    x2A.0
....................     
....................    if(tiempos>=200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0EDE:  MOVF   x1B,F
0EE0:  BNZ   0EE8
0EE2:  MOVF   x1A,W
0EE4:  SUBLW  C7
0EE6:  BC    0F06
....................    { 
....................       tiempos=0;Lectura=1;TiempoControl++; 
0EE8:  CLRF   x1B
0EEA:  CLRF   x1A
0EEC:  BSF    x02.7
0EEE:  INCF   x05,F
....................       if(EVAgua>=1) 
0EF0:  MOVF   x09,W
0EF2:  SUBLW  00
0EF4:  BC    0F06
....................       { 
....................          tinicio++; 
0EF6:  INCF   x24,F
0EF8:  BTFSC  FD8.2
0EFA:  INCF   x25,F
....................          if(flag_agua2==0) 
0EFC:  BTFSC  x02.2
0EFE:  BRA    0F06
....................          { 
....................             tagua++; 
0F00:  INCF   x26,F
0F02:  BTFSC  FD8.2
0F04:  INCF   x27,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0F06:  BCF    F9E.0
0F08:  MOVLB  0
0F0A:  GOTO   0078
.................... void Controla(){ 
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
*
3110:  BCF    FD8.1
3112:  MOVFF  262,317
3116:  MOVFF  261,316
311A:  MOVFF  260,315
311E:  MOVFF  25F,314
3122:  MOVFF  286,31B
3126:  MOVFF  285,31A
312A:  MOVFF  284,319
312E:  MOVFF  283,318
3132:  CALL   1120
3136:  MOVFF  00,2DC
313A:  MOVFF  01,2DD
313E:  MOVFF  02,2DE
3142:  MOVFF  03,2DF
3146:  BSF    FD8.1
3148:  MOVFF  03,317
314C:  MOVFF  02,316
3150:  MOVFF  01,315
3154:  MOVFF  00,314
3158:  MOVFF  28A,31B
315C:  MOVFF  289,31A
3160:  MOVFF  288,319
3164:  MOVFF  287,318
3168:  CALL   1120
316C:  MOVFF  03,24A
3170:  MOVFF  02,249
3174:  MOVFF  01,248
3178:  MOVFF  00,247
....................     
....................    if(error>0.9 && error<15 && Aumento<0.3) 
317C:  MOVLW  66
317E:  MOVLB  3
3180:  MOVWF  x13
3182:  MOVWF  x12
3184:  MOVWF  x11
3186:  MOVLW  7E
3188:  MOVWF  x10
318A:  MOVFF  24A,317
318E:  MOVFF  249,316
3192:  MOVFF  248,315
3196:  MOVFF  247,314
319A:  MOVLB  0
319C:  CALL   1866
31A0:  BNC   3256
31A2:  MOVFF  24A,313
31A6:  MOVFF  249,312
31AA:  MOVFF  248,311
31AE:  MOVFF  247,310
31B2:  MOVLB  3
31B4:  CLRF   x17
31B6:  CLRF   x16
31B8:  MOVLW  70
31BA:  MOVWF  x15
31BC:  MOVLW  82
31BE:  MOVWF  x14
31C0:  MOVLB  0
31C2:  CALL   1866
31C6:  BNC   3256
31C8:  MOVFF  201,313
31CC:  MOVFF  200,312
31D0:  MOVFF  1FF,311
31D4:  MOVFF  1FE,310
31D8:  MOVLW  9A
31DA:  MOVLB  3
31DC:  MOVWF  x17
31DE:  MOVLW  99
31E0:  MOVWF  x16
31E2:  MOVLW  19
31E4:  MOVWF  x15
31E6:  MOVLW  7D
31E8:  MOVWF  x14
31EA:  MOVLB  0
31EC:  CALL   1866
31F0:  BNC   3256
....................    { 
....................       if(Tpulso<9.0) 
31F2:  MOVFF  246,313
31F6:  MOVFF  245,312
31FA:  MOVFF  244,311
31FE:  MOVFF  243,310
3202:  MOVLB  3
3204:  CLRF   x17
3206:  CLRF   x16
3208:  MOVLW  10
320A:  MOVWF  x15
320C:  MOVLW  82
320E:  MOVWF  x14
3210:  MOVLB  0
3212:  CALL   1866
3216:  BNC   3256
....................       { 
....................          if(TiempoControl>=20) 
3218:  MOVLB  2
321A:  MOVF   x05,W
321C:  SUBLW  13
321E:  BC    3258
....................          { 
....................             TiempoControl=0; 
3220:  CLRF   x05
....................             Ganancia+=2; 
3222:  BCF    FD8.1
3224:  MOVFF  25A,317
3228:  MOVFF  259,316
322C:  MOVFF  258,315
3230:  MOVFF  257,314
3234:  MOVLB  3
3236:  CLRF   x1B
3238:  CLRF   x1A
323A:  CLRF   x19
323C:  MOVLW  80
323E:  MOVWF  x18
3240:  MOVLB  0
3242:  CALL   1120
3246:  MOVFF  03,25A
324A:  MOVFF  02,259
324E:  MOVFF  01,258
3252:  MOVFF  00,257
3256:  MOVLB  2
....................          } 
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
3258:  MOVFF  24A,313
325C:  MOVFF  249,312
3260:  MOVFF  248,311
3264:  MOVFF  247,310
3268:  MOVLW  9A
326A:  MOVLB  3
326C:  MOVWF  x17
326E:  MOVLW  99
3270:  MOVWF  x16
3272:  MOVWF  x15
3274:  MOVLW  7D
3276:  MOVWF  x14
3278:  MOVLB  0
327A:  CALL   1866
327E:  BNC   3290
....................    { 
....................       Ganancia=Ganancia2; 
3280:  MOVFF  25E,25A
3284:  MOVFF  25D,259
3288:  MOVFF  25C,258
328C:  MOVFF  25B,257
....................    } 
....................     
....................    if(Ganancia<1) 
3290:  MOVFF  25A,313
3294:  MOVFF  259,312
3298:  MOVFF  258,311
329C:  MOVFF  257,310
32A0:  MOVLB  3
32A2:  CLRF   x17
32A4:  CLRF   x16
32A6:  CLRF   x15
32A8:  MOVLW  7F
32AA:  MOVWF  x14
32AC:  MOVLB  0
32AE:  CALL   1866
32B2:  BNC   32C0
....................    { 
....................       Ganancia=1; 
32B4:  MOVLB  2
32B6:  CLRF   x5A
32B8:  CLRF   x59
32BA:  CLRF   x58
32BC:  MOVLW  7F
32BE:  MOVWF  x57
....................    } 
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
32C0:  MOVFF  24A,313
32C4:  MOVFF  249,312
32C8:  MOVFF  248,311
32CC:  MOVFF  247,310
32D0:  MOVLB  3
32D2:  CLRF   x17
32D4:  CLRF   x16
32D6:  CLRF   x15
32D8:  CLRF   x14
32DA:  MOVLB  0
32DC:  CALL   1866
32E0:  BNC   32EE
....................    { 
....................       error=0.0; 
32E2:  MOVLB  2
32E4:  CLRF   x4A
32E6:  CLRF   x49
32E8:  CLRF   x48
32EA:  CLRF   x47
32EC:  MOVLB  0
....................    } 
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
32EE:  MOVFF  24A,313
32F2:  MOVFF  249,312
32F6:  MOVFF  248,311
32FA:  MOVFF  247,310
32FE:  MOVFF  25A,317
3302:  MOVFF  259,316
3306:  MOVFF  258,315
330A:  MOVFF  257,314
330E:  CALL   1770
3312:  MOVFF  03,256
3316:  MOVFF  02,255
331A:  MOVFF  01,254
331E:  MOVFF  00,253
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
3322:  MOVFF  286,313
3326:  MOVFF  285,312
332A:  MOVFF  284,311
332E:  MOVFF  283,310
3332:  MOVFF  256,317
3336:  MOVFF  255,316
333A:  MOVFF  254,315
333E:  MOVFF  253,314
3342:  CALL   1866
3346:  BNC   3358
....................    { 
....................       tmp=Setpoint; 
3348:  MOVFF  286,256
334C:  MOVFF  285,255
3350:  MOVFF  284,254
3354:  MOVFF  283,253
....................    } 
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
3358:  MOVFF  256,313
335C:  MOVFF  255,312
3360:  MOVFF  254,311
3364:  MOVFF  253,310
3368:  MOVLB  3
336A:  CLRF   x17
336C:  CLRF   x16
336E:  CLRF   x15
3370:  CLRF   x14
3372:  MOVLB  0
3374:  CALL   1866
3378:  BNC   3386
....................    { 
....................       tmp=0.0; 
337A:  MOVLB  2
337C:  CLRF   x56
337E:  CLRF   x55
3380:  CLRF   x54
3382:  CLRF   x53
3384:  MOVLB  0
....................    } 
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    Tpulso=(tmp/Setpoint)*Tciclo;   
3386:  MOVFF  256,313
338A:  MOVFF  255,312
338E:  MOVFF  254,311
3392:  MOVFF  253,310
3396:  MOVFF  286,317
339A:  MOVFF  285,316
339E:  MOVFF  284,315
33A2:  MOVFF  283,314
33A6:  CALL   0FC2
33AA:  MOVFF  00,2DC
33AE:  MOVFF  01,2DD
33B2:  MOVFF  02,2DE
33B6:  MOVFF  03,2DF
33BA:  MOVFF  03,313
33BE:  MOVFF  02,312
33C2:  MOVFF  01,311
33C6:  MOVFF  00,310
33CA:  MOVFF  242,317
33CE:  MOVFF  241,316
33D2:  MOVFF  240,315
33D6:  MOVFF  23F,314
33DA:  CALL   1770
33DE:  MOVFF  03,246
33E2:  MOVFF  02,245
33E6:  MOVFF  01,244
33EA:  MOVFF  00,243
....................                                        
....................    if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
33EE:  MOVFF  246,313
33F2:  MOVFF  245,312
33F6:  MOVFF  244,311
33FA:  MOVFF  243,310
33FE:  MOVLW  0A
3400:  MOVLB  3
3402:  MOVWF  x17
3404:  MOVLW  D7
3406:  MOVWF  x16
3408:  MOVLW  23
340A:  MOVWF  x15
340C:  MOVLW  77
340E:  MOVWF  x14
3410:  MOVLB  0
3412:  CALL   0FC2
3416:  MOVFF  03,313
341A:  MOVFF  02,312
341E:  MOVFF  01,311
3422:  MOVFF  00,310
3426:  CALL   18E0
342A:  MOVFF  02,03
342E:  MOVF   01,W
3430:  MOVLB  2
3432:  MOVF   x1F,W
3434:  SUBWF  02,W
3436:  BNC   344A
3438:  BNZ   3440
343A:  MOVF   x1E,W
343C:  SUBWF  01,W
343E:  BNC   344A
....................    { 
....................       Resistencia_on; 
3440:  BSF    F8B.0
3442:  BCF    F94.0
....................       Resistencia2_on; 
3444:  BSF    F8B.1
3446:  BCF    F94.1
....................    } 
....................    else          
3448:  BRA    3452
....................    { 
....................       Resistencia_off; 
344A:  BCF    F8B.0
344C:  BCF    F94.0
....................       Resistencia2_off; 
344E:  BCF    F8B.1
3450:  BCF    F94.1
....................    } 
....................           
....................    if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
3452:  MOVFF  242,313
3456:  MOVFF  241,312
345A:  MOVFF  240,311
345E:  MOVFF  23F,310
3462:  MOVLW  0A
3464:  MOVLB  3
3466:  MOVWF  x17
3468:  MOVLW  D7
346A:  MOVWF  x16
346C:  MOVLW  23
346E:  MOVWF  x15
3470:  MOVLW  77
3472:  MOVWF  x14
3474:  MOVLB  0
3476:  CALL   0FC2
347A:  MOVFF  03,313
347E:  MOVFF  02,312
3482:  MOVFF  01,311
3486:  MOVFF  00,310
348A:  CALL   18E0
348E:  MOVF   02,W
3490:  MOVWF  03
3492:  MOVLB  2
3494:  SUBWF  x1F,W
3496:  BNC   34A4
3498:  BNZ   34A0
349A:  MOVF   01,W
349C:  SUBWF  x1E,W
349E:  BNC   34A4
....................    { 
....................       tiempoctrl=0; 
34A0:  CLRF   x1F
34A2:  CLRF   x1E
....................    } // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
34A4:  MOVLB  0
34A6:  GOTO   4636 (RETURN)
....................  
.................... void main() 
.................... { 
34AA:  CLRF   FF8
34AC:  BCF    FD0.7
34AE:  BSF    07.7
34B0:  CLRF   FEA
34B2:  CLRF   FE9
34B4:  BSF    F93.1
34B6:  BSF    F93.0
34B8:  MOVLW  A0
34BA:  MOVWF  FC8
34BC:  MOVLW  36
34BE:  MOVWF  FC6
34C0:  CLRF   1C
34C2:  CLRF   20
34C4:  MOVLB  1
34C6:  CLRF   xFD
34C8:  CLRF   xFC
34CA:  CLRF   xFB
34CC:  CLRF   xFA
34CE:  MOVLB  2
34D0:  CLRF   x01
34D2:  CLRF   x00
34D4:  MOVLB  1
34D6:  CLRF   xFF
34D8:  CLRF   xFE
34DA:  MOVLB  2
34DC:  BCF    x02.0
34DE:  BCF    x02.1
34E0:  BCF    x02.2
34E2:  BCF    x02.3
34E4:  BCF    x02.4
34E6:  BCF    x02.5
34E8:  BCF    x02.6
34EA:  CLRF   x03
34EC:  CLRF   x04
34EE:  CLRF   x05
34F0:  CLRF   x06
34F2:  CLRF   x07
34F4:  CLRF   x08
34F6:  CLRF   x09
34F8:  CLRF   x0A
34FA:  CLRF   x0B
34FC:  CLRF   x0C
34FE:  CLRF   x0D
3500:  CLRF   x0E
3502:  CLRF   x0F
3504:  CLRF   x10
3506:  CLRF   x11
3508:  CLRF   x12
350A:  CLRF   x13
350C:  CLRF   x14
350E:  CLRF   x15
3510:  CLRF   x16
3512:  CLRF   x17
3514:  CLRF   x18
3516:  CLRF   x19
3518:  CLRF   x1B
351A:  CLRF   x1A
351C:  CLRF   x1D
351E:  CLRF   x1C
3520:  CLRF   x1F
3522:  CLRF   x1E
3524:  CLRF   x21
3526:  CLRF   x20
3528:  CLRF   x23
352A:  CLRF   x22
352C:  CLRF   x25
352E:  CLRF   x24
3530:  CLRF   x27
3532:  CLRF   x26
3534:  CLRF   x29
3536:  CLRF   x28
3538:  BCF    x02.7
353A:  BCF    x2A.0
353C:  BCF    x2A.1
353E:  CLRF   x2B
3540:  CLRF   x2C
3542:  CLRF   x2D
3544:  CLRF   x2E
3546:  CLRF   x2F
3548:  CLRF   x30
354A:  CLRF   x31
354C:  MOVLW  02
354E:  MOVWF  x32
3550:  CLRF   x36
3552:  CLRF   x35
3554:  CLRF   x34
3556:  CLRF   x33
3558:  CLRF   x3A
355A:  MOVLW  C0
355C:  MOVWF  x39
355E:  MOVLW  41
3560:  MOVWF  x38
3562:  MOVLW  8B
3564:  MOVWF  x37
3566:  CLRF   x42
3568:  CLRF   x41
356A:  MOVLW  20
356C:  MOVWF  x40
356E:  MOVLW  82
3570:  MOVWF  x3F
3572:  CLRF   x46
3574:  CLRF   x45
3576:  CLRF   x44
3578:  CLRF   x43
357A:  CLRF   x4A
357C:  CLRF   x49
357E:  CLRF   x48
3580:  CLRF   x47
3582:  CLRF   x4E
3584:  CLRF   x4D
3586:  CLRF   x4C
3588:  CLRF   x4B
358A:  CLRF   x52
358C:  CLRF   x51
358E:  CLRF   x50
3590:  CLRF   x4F
3592:  CLRF   x56
3594:  CLRF   x55
3596:  CLRF   x54
3598:  CLRF   x53
359A:  CLRF   x5A
359C:  CLRF   x59
359E:  MOVLW  48
35A0:  MOVWF  x58
35A2:  MOVLW  83
35A4:  MOVWF  x57
35A6:  CLRF   x5E
35A8:  CLRF   x5D
35AA:  MOVLW  20
35AC:  MOVWF  x5C
35AE:  MOVLW  83
35B0:  MOVWF  x5B
35B2:  CLRF   x62
35B4:  CLRF   x61
35B6:  CLRF   x60
35B8:  CLRF   x5F
35BA:  CLRF   x66
35BC:  CLRF   x65
35BE:  CLRF   x64
35C0:  CLRF   x63
35C2:  CLRF   x6A
35C4:  CLRF   x69
35C6:  CLRF   x68
35C8:  CLRF   x67
35CA:  CLRF   x6E
35CC:  CLRF   x6D
35CE:  CLRF   x6C
35D0:  CLRF   x6B
35D2:  CLRF   x72
35D4:  CLRF   x71
35D6:  CLRF   x70
35D8:  CLRF   x6F
35DA:  CLRF   x76
35DC:  CLRF   x75
35DE:  CLRF   x74
35E0:  CLRF   x73
35E2:  CLRF   x7A
35E4:  CLRF   x79
35E6:  CLRF   x78
35E8:  CLRF   x77
35EA:  CLRF   x7E
35EC:  CLRF   x7D
35EE:  CLRF   x7C
35F0:  CLRF   x7B
35F2:  CLRF   x82
35F4:  CLRF   x81
35F6:  CLRF   x80
35F8:  CLRF   x7F
35FA:  CLRF   x86
35FC:  CLRF   x85
35FE:  CLRF   x84
3600:  CLRF   x83
3602:  CLRF   x8A
3604:  CLRF   x89
3606:  CLRF   x88
3608:  CLRF   x87
360A:  CLRF   x8E
360C:  CLRF   x8D
360E:  CLRF   x8C
3610:  CLRF   x8B
3612:  CLRF   x92
3614:  CLRF   x91
3616:  CLRF   x90
3618:  CLRF   x8F
361A:  MOVLW  5C
361C:  MOVWF  x96
361E:  MOVLW  AA
3620:  MOVWF  x95
3622:  MOVLW  52
3624:  MOVWF  x94
3626:  MOVLW  77
3628:  MOVWF  x93
362A:  MOVLW  A8
362C:  MOVWF  x9A
362E:  MOVLW  57
3630:  MOVWF  x99
3632:  MOVLW  2A
3634:  MOVWF  x98
3636:  MOVLW  81
3638:  MOVWF  x97
363A:  MOVLW  71
363C:  MOVWF  x9E
363E:  MOVLW  1B
3640:  MOVWF  x9D
3642:  MOVLW  87
3644:  MOVWF  x9C
3646:  MOVLW  83
3648:  MOVWF  x9B
364A:  MOVLW  34
364C:  MOVWF  xA2
364E:  MOVLW  80
3650:  MOVWF  xA1
3652:  MOVLW  15
3654:  MOVWF  xA0
3656:  MOVLW  84
3658:  MOVWF  x9F
365A:  MOVLW  44
365C:  MOVWF  xA6
365E:  MOVLW  69
3660:  MOVWF  xA5
3662:  MOVLW  C7
3664:  MOVWF  xA4
3666:  MOVLW  81
3668:  MOVWF  xA3
366A:  MOVF   FC1,W
366C:  ANDLW  C0
366E:  IORLW  0F
3670:  MOVWF  FC1
3672:  MOVLW  07
3674:  MOVWF  FB4
3676:  MOVLB  0
3678:  CLRF   x62
367A:  CLRF   x63
367C:  CLRF   x64
367E:  CLRF   x65
3680:  CLRF   x66
3682:  CLRF   x67
3684:  CLRF   x68
3686:  CLRF   x69
3688:  CLRF   x6A
368A:  CLRF   x6B
368C:  CLRF   x6C
368E:  CLRF   x6D
3690:  CLRF   x6E
3692:  CLRF   x6F
3694:  CLRF   x70
3696:  CLRF   x71
3698:  CLRF   x72
369A:  CLRF   x73
369C:  CLRF   x74
369E:  CLRF   x75
36A0:  CLRF   x76
36A2:  CLRF   x77
36A4:  CLRF   x78
36A6:  CLRF   x79
36A8:  CLRF   x7A
36AA:  CLRF   x7B
36AC:  CLRF   x7C
36AE:  CLRF   x7D
36B0:  CLRF   x7E
36B2:  CLRF   x7F
36B4:  CLRF   x80
36B6:  CLRF   x81
36B8:  CLRF   x82
36BA:  CLRF   x83
36BC:  CLRF   x84
36BE:  CLRF   x85
36C0:  CLRF   x86
36C2:  CLRF   x87
36C4:  CLRF   x88
36C6:  CLRF   x89
36C8:  CLRF   x8A
36CA:  CLRF   x8B
36CC:  CLRF   x8C
36CE:  CLRF   x8D
36D0:  CLRF   x8E
36D2:  CLRF   x8F
36D4:  CLRF   x90
36D6:  CLRF   x91
36D8:  CLRF   x92
36DA:  CLRF   x93
36DC:  CLRF   x94
36DE:  CLRF   x95
36E0:  CLRF   x96
36E2:  CLRF   x97
36E4:  CLRF   x98
36E6:  CLRF   x99
36E8:  CLRF   x9A
36EA:  CLRF   x9B
36EC:  CLRF   x9C
36EE:  CLRF   x9D
36F0:  CLRF   x9E
36F2:  CLRF   x9F
36F4:  CLRF   xA0
36F6:  CLRF   xA1
36F8:  CLRF   xA2
36FA:  CLRF   xA3
36FC:  CLRF   xA4
36FE:  CLRF   xA5
3700:  CLRF   xA6
3702:  CLRF   xA7
3704:  CLRF   xA8
3706:  CLRF   xA9
3708:  CLRF   xAA
370A:  CLRF   xAB
370C:  CLRF   xAC
370E:  CLRF   xAD
3710:  CLRF   xAE
3712:  CLRF   xAF
3714:  CLRF   xB0
3716:  CLRF   xB1
3718:  CLRF   xB2
371A:  CLRF   xB3
371C:  CLRF   xB4
371E:  CLRF   xB5
3720:  CLRF   xB6
3722:  CLRF   xB7
3724:  CLRF   xB8
3726:  CLRF   xB9
3728:  CLRF   xBA
372A:  CLRF   xBB
372C:  CLRF   xBC
372E:  CLRF   xBD
3730:  CLRF   xBE
3732:  CLRF   xBF
3734:  CLRF   xC0
3736:  CLRF   xC1
3738:  CLRF   xC2
373A:  CLRF   xC3
373C:  CLRF   xC4
373E:  CLRF   xC5
3740:  CLRF   xC6
3742:  CLRF   xC7
3744:  CLRF   xC8
3746:  CLRF   xC9
3748:  CLRF   xCA
374A:  CLRF   xCB
374C:  CLRF   xCC
374E:  CLRF   xCD
3750:  CLRF   xCE
3752:  CLRF   xCF
3754:  CLRF   xD0
3756:  CLRF   xD1
3758:  CLRF   xD2
375A:  CLRF   xD3
375C:  CLRF   xD4
375E:  CLRF   xD5
3760:  CLRF   xD6
3762:  CLRF   xD7
3764:  CLRF   xD8
3766:  CLRF   xD9
3768:  CLRF   xDA
376A:  CLRF   xDB
376C:  CLRF   xDC
376E:  CLRF   xDD
3770:  CLRF   xDE
3772:  CLRF   xDF
3774:  CLRF   xE0
3776:  CLRF   xE1
3778:  CLRF   xE2
377A:  CLRF   xE3
377C:  CLRF   xE4
377E:  CLRF   xE5
3780:  CLRF   xE6
3782:  CLRF   xE7
3784:  CLRF   xE8
3786:  CLRF   xE9
3788:  CLRF   xEA
378A:  CLRF   xEB
378C:  CLRF   xEC
378E:  CLRF   xED
3790:  CLRF   xEE
3792:  CLRF   xEF
3794:  CLRF   xF0
3796:  CLRF   xF1
3798:  CLRF   xF2
379A:  CLRF   xF3
379C:  CLRF   xF4
379E:  CLRF   xF5
37A0:  CLRF   xF6
37A2:  CLRF   xF7
37A4:  CLRF   xF8
37A6:  CLRF   xF9
37A8:  CLRF   xFA
37AA:  CLRF   xFB
37AC:  CLRF   xFC
37AE:  CLRF   xFD
37B0:  CLRF   xFE
37B2:  CLRF   xFF
37B4:  MOVLB  1
37B6:  CLRF   x00
37B8:  CLRF   x01
37BA:  CLRF   x02
37BC:  CLRF   x03
37BE:  CLRF   x04
37C0:  CLRF   x05
37C2:  CLRF   x06
37C4:  CLRF   x07
37C6:  CLRF   x08
37C8:  CLRF   x09
37CA:  CLRF   x0A
37CC:  CLRF   x0B
37CE:  CLRF   x0C
37D0:  CLRF   x0D
37D2:  CLRF   x0E
37D4:  CLRF   x0F
37D6:  CLRF   x10
37D8:  CLRF   x11
37DA:  CLRF   x12
37DC:  CLRF   x13
37DE:  CLRF   x14
37E0:  CLRF   x15
37E2:  CLRF   x16
37E4:  CLRF   x17
37E6:  CLRF   x18
37E8:  CLRF   x19
37EA:  CLRF   x1A
37EC:  CLRF   x1B
37EE:  CLRF   x1C
37F0:  CLRF   x1D
37F2:  CLRF   x1E
37F4:  CLRF   x1F
37F6:  CLRF   x20
37F8:  CLRF   x21
37FA:  CLRF   x22
37FC:  CLRF   x23
37FE:  CLRF   x24
3800:  CLRF   x25
3802:  CLRF   x26
3804:  CLRF   x27
3806:  CLRF   x28
3808:  CLRF   x29
380A:  CLRF   x2A
380C:  CLRF   x2B
380E:  CLRF   x2C
3810:  CLRF   x2D
3812:  CLRF   x2E
3814:  CLRF   x2F
3816:  CLRF   x30
3818:  CLRF   x31
381A:  CLRF   x32
381C:  CLRF   x33
381E:  CLRF   x34
3820:  CLRF   x35
3822:  CLRF   x36
3824:  CLRF   x37
3826:  CLRF   x38
3828:  CLRF   x39
382A:  CLRF   x3A
382C:  CLRF   x3B
382E:  CLRF   x3C
3830:  CLRF   x3D
3832:  CLRF   x3E
3834:  CLRF   x3F
3836:  CLRF   x40
3838:  CLRF   x41
383A:  CLRF   x42
383C:  CLRF   x43
383E:  CLRF   x44
3840:  CLRF   x45
3842:  CLRF   x46
3844:  CLRF   x47
3846:  CLRF   x48
3848:  CLRF   x49
384A:  CLRF   x4A
384C:  CLRF   x4B
384E:  CLRF   x4C
3850:  CLRF   x4D
3852:  CLRF   x4E
3854:  CLRF   x4F
3856:  CLRF   x50
3858:  CLRF   x51
385A:  CLRF   x52
385C:  CLRF   x53
385E:  CLRF   x54
3860:  CLRF   x55
3862:  CLRF   x56
3864:  CLRF   x57
3866:  CLRF   x58
3868:  CLRF   x59
386A:  CLRF   x5A
386C:  CLRF   x5B
386E:  CLRF   x5C
3870:  CLRF   x5D
3872:  CLRF   x5E
3874:  CLRF   x5F
3876:  CLRF   x60
3878:  CLRF   x61
387A:  CLRF   x62
387C:  CLRF   x63
387E:  CLRF   x64
3880:  CLRF   x65
3882:  CLRF   x66
3884:  CLRF   x67
3886:  CLRF   x68
3888:  CLRF   x69
388A:  CLRF   x6A
388C:  CLRF   x6B
388E:  CLRF   x6C
3890:  CLRF   x6D
3892:  CLRF   x6E
3894:  CLRF   x6F
3896:  CLRF   x70
3898:  CLRF   x71
389A:  CLRF   x72
389C:  CLRF   x73
389E:  CLRF   x74
38A0:  CLRF   x75
38A2:  CLRF   x76
38A4:  CLRF   x77
38A6:  CLRF   x78
38A8:  CLRF   x79
38AA:  CLRF   x7A
38AC:  CLRF   x7B
38AE:  CLRF   x7C
38B0:  CLRF   x7D
38B2:  CLRF   x7E
38B4:  CLRF   x7F
38B6:  CLRF   x80
38B8:  CLRF   x81
38BA:  CLRF   x82
38BC:  CLRF   x83
38BE:  CLRF   x84
38C0:  CLRF   x85
38C2:  CLRF   x86
38C4:  CLRF   x87
38C6:  CLRF   x88
38C8:  CLRF   x89
38CA:  CLRF   x8A
38CC:  CLRF   x8B
38CE:  CLRF   x8C
38D0:  CLRF   x8D
38D2:  CLRF   x8E
38D4:  CLRF   x8F
38D6:  CLRF   x90
38D8:  CLRF   x91
38DA:  CLRF   x92
38DC:  CLRF   x93
38DE:  CLRF   x94
38E0:  CLRF   x95
38E2:  CLRF   x96
38E4:  CLRF   x97
38E6:  CLRF   x98
38E8:  CLRF   x99
38EA:  CLRF   x9A
38EC:  CLRF   x9B
38EE:  CLRF   x9C
38F0:  CLRF   x9D
38F2:  CLRF   x9E
38F4:  CLRF   x9F
38F6:  CLRF   xA0
38F8:  CLRF   xA1
38FA:  CLRF   xA2
38FC:  CLRF   xA3
38FE:  CLRF   xA4
3900:  CLRF   xA5
3902:  CLRF   xA6
3904:  CLRF   xA7
3906:  CLRF   xA8
3908:  CLRF   xA9
390A:  CLRF   xAA
390C:  CLRF   xAB
390E:  CLRF   xAC
3910:  CLRF   xAD
3912:  CLRF   xAE
3914:  CLRF   xAF
3916:  CLRF   xB0
3918:  CLRF   xB1
391A:  CLRF   xB2
391C:  CLRF   xB3
391E:  CLRF   xB4
3920:  CLRF   xB5
3922:  CLRF   xB6
3924:  CLRF   xB7
3926:  CLRF   xB8
3928:  CLRF   xB9
392A:  CLRF   xBA
392C:  CLRF   xBB
392E:  CLRF   xBC
3930:  CLRF   xBD
3932:  CLRF   xBE
3934:  CLRF   xBF
3936:  CLRF   xC0
3938:  CLRF   xC1
393A:  CLRF   xC2
393C:  CLRF   xC3
393E:  CLRF   xC4
3940:  CLRF   xC5
3942:  CLRF   xC6
3944:  CLRF   xC7
3946:  CLRF   xC8
3948:  CLRF   xC9
394A:  CLRF   xCA
394C:  CLRF   xCB
394E:  CLRF   xCC
3950:  CLRF   xCD
3952:  CLRF   xCE
3954:  CLRF   xCF
3956:  CLRF   xD0
3958:  CLRF   xD1
395A:  CLRF   xD2
395C:  CLRF   xD3
395E:  CLRF   xD4
3960:  CLRF   xD5
3962:  CLRF   xD6
3964:  CLRF   xD7
3966:  CLRF   xD8
3968:  CLRF   xD9
396A:  CLRF   xDA
396C:  CLRF   xDB
396E:  CLRF   xDC
3970:  CLRF   xDD
3972:  CLRF   xDE
3974:  CLRF   xDF
3976:  CLRF   xE0
3978:  CLRF   xE1
397A:  CLRF   xE2
397C:  CLRF   xE3
397E:  CLRF   xE4
3980:  CLRF   xE5
3982:  CLRF   xE6
3984:  CLRF   xE7
3986:  CLRF   xE8
3988:  CLRF   xE9
398A:  CLRF   xEA
398C:  CLRF   xEB
398E:  CLRF   xEC
3990:  CLRF   xED
3992:  CLRF   xEE
3994:  CLRF   xEF
3996:  CLRF   xF0
3998:  CLRF   xF1
399A:  CLRF   xF2
399C:  CLRF   xF3
399E:  CLRF   xF4
39A0:  CLRF   xF5
39A2:  CLRF   xF6
39A4:  CLRF   xF7
39A6:  CLRF   xF8
39A8:  CLRF   xF9
39AA:  MOVLW  03
39AC:  MOVLB  2
39AE:  MOVWF  xDB
....................    fState = 0; 
39B0:  CLRF   xA7
....................    for (posicion=0;posicion<0x10;posicion++) 
39B2:  CLRF   xA8
39B4:  MOVF   xA8,W
39B6:  SUBLW  0F
39B8:  BNC   39EE
....................    { 
....................       buffer[posicion] = 0x00; 
39BA:  CLRF   03
39BC:  MOVF   xA8,W
39BE:  ADDLW  A9
39C0:  MOVWF  FE9
39C2:  MOVLW  02
39C4:  ADDWFC 03,W
39C6:  MOVWF  FEA
39C8:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
39CA:  CLRF   03
39CC:  MOVF   xA8,W
39CE:  ADDLW  B9
39D0:  MOVWF  FE9
39D2:  MOVLW  02
39D4:  ADDWFC 03,W
39D6:  MOVWF  FEA
39D8:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
39DA:  CLRF   03
39DC:  MOVF   xA8,W
39DE:  ADDLW  CA
39E0:  MOVWF  FE9
39E2:  MOVLW  02
39E4:  ADDWFC 03,W
39E6:  MOVWF  FEA
39E8:  CLRF   FEF
....................    } 
39EA:  INCF   xA8,F
39EC:  BRA    39B4
....................    Temperatura=Leer_Sensor(MediaMovil); 
39EE:  MOVFF  232,2DC
39F2:  MOVLB  0
39F4:  CALL   1404
39F8:  MOVFF  03,28A
39FC:  MOVFF  02,289
3A00:  MOVFF  01,288
3A04:  MOVFF  00,287
....................    PresionCamara=Leer_Sensor_Presion(5); 
3A08:  MOVLW  05
3A0A:  MOVLB  2
3A0C:  MOVWF  xDC
3A0E:  MOVLB  0
3A10:  CALL   2A66
3A14:  MOVFF  03,292
3A18:  MOVFF  02,291
3A1C:  MOVFF  01,290
3A20:  MOVFF  00,28F
....................    Puerta=!DOOR; 
3A24:  BSF    F95.4
3A26:  MOVLB  2
3A28:  CLRF   x12
3A2A:  BTFSC  F83.4
3A2C:  INCF   x12,F
....................    Parada=!STOP; 
3A2E:  BSF    F95.5
3A30:  CLRF   x13
3A32:  BTFSC  F83.5
3A34:  INCF   x13,F
....................    NivelReservorio=LOW; 
3A36:  BSF    F95.0
3A38:  CLRF   x14
3A3A:  BTFSC  F83.0
3A3C:  INCF   x14,F
....................    NivelTanque=MEDIUM; 
3A3E:  BSF    F95.1
3A40:  CLRF   x15
3A42:  BTFSC  F83.1
3A44:  INCF   x15,F
....................    //Temperatura=Leer_Sensor(10);d3=Tem 
....................    Presostato=(int8)PresionCamara; 
3A46:  MOVFF  292,313
3A4A:  MOVFF  291,312
3A4E:  MOVFF  290,311
3A52:  MOVFF  28F,310
3A56:  MOVLB  0
3A58:  CALL   18E0
3A5C:  MOVFF  01,216
....................    Lee_Vector(); 
3A60:  CALL   2DDE
....................    Carga_Vector(); 
3A64:  CALL   2E30
....................    enable_interrupts(INT_SSP); 
3A68:  BSF    F9D.3
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
3A6A:  MOVLW  C8
3A6C:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
3A6E:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
3A70:  MOVLW  85
3A72:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
3A74:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
3A76:  MOVF   FC1,W
3A78:  ANDLW  C0
3A7A:  IORLW  0D
3A7C:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
3A7E:  BCF    FC0.0
3A80:  BSF    FC0.1
3A82:  BCF    FC0.2
3A84:  BSF    FC0.7
3A86:  BSF    FC2.0
....................    enable_interrupts(global); 
3A88:  MOVLW  C0
3A8A:  IORWF  FF2,F
....................    
....................    sensores(0); 
3A8C:  MOVLB  2
3A8E:  CLRF   xDD
3A90:  MOVLB  0
3A92:  CALL   0F6E
....................    Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12); 
3A96:  MOVFF  FF2,2DC
3A9A:  BCF    FF2.7
3A9C:  MOVLW  0A
3A9E:  MOVWF  FA9
3AA0:  BCF    FA6.6
3AA2:  BCF    FA6.7
3AA4:  BSF    FA6.0
3AA6:  MOVF   FA8,W
3AA8:  MOVLB  2
3AAA:  BTFSC  xDC.7
3AAC:  BSF    FF2.7
3AAE:  MOVLB  3
3AB0:  CLRF   x15
3AB2:  MOVWF  x14
3AB4:  MOVLB  0
3AB6:  CALL   0F38
3ABA:  MOVFF  03,25A
3ABE:  MOVFF  02,259
3AC2:  MOVFF  01,258
3AC6:  MOVFF  00,257
3ACA:  MOVFF  FF2,2DC
3ACE:  BCF    FF2.7
3AD0:  MOVLW  0B
3AD2:  MOVWF  FA9
3AD4:  BCF    FA6.6
3AD6:  BCF    FA6.7
3AD8:  BSF    FA6.0
3ADA:  MOVF   FA8,W
3ADC:  MOVLB  2
3ADE:  BTFSC  xDC.7
3AE0:  BSF    FF2.7
3AE2:  MOVLB  3
3AE4:  CLRF   x15
3AE6:  MOVWF  x14
3AE8:  MOVLB  0
3AEA:  CALL   0F38
3AEE:  MOVFF  03,262
3AF2:  MOVFF  02,261
3AF6:  MOVFF  01,260
3AFA:  MOVFF  00,25F
3AFE:  MOVFF  FF2,2DC
3B02:  BCF    FF2.7
3B04:  MOVLW  0C
3B06:  MOVWF  FA9
3B08:  BCF    FA6.6
3B0A:  BCF    FA6.7
3B0C:  BSF    FA6.0
3B0E:  MOVF   FA8,W
3B10:  MOVLB  2
3B12:  BTFSC  xDC.7
3B14:  BSF    FF2.7
3B16:  MOVLB  3
3B18:  CLRF   x15
3B1A:  MOVWF  x14
3B1C:  MOVLB  0
3B1E:  CALL   0F38
3B22:  MOVFF  03,242
3B26:  MOVFF  02,241
3B2A:  MOVFF  01,240
3B2E:  MOVFF  00,23F
....................    Ajuste=read_eeprom(13);Ajusten=read_eeprom(14);Ganancia2=read_eeprom(15); 
3B32:  MOVFF  FF2,2DC
3B36:  BCF    FF2.7
3B38:  MOVLW  0D
3B3A:  MOVWF  FA9
3B3C:  BCF    FA6.6
3B3E:  BCF    FA6.7
3B40:  BSF    FA6.0
3B42:  MOVF   FA8,W
3B44:  MOVLB  2
3B46:  BTFSC  xDC.7
3B48:  BSF    FF2.7
3B4A:  MOVWF  x2D
3B4C:  MOVFF  FF2,2DC
3B50:  BCF    FF2.7
3B52:  MOVLW  0E
3B54:  MOVWF  FA9
3B56:  BCF    FA6.6
3B58:  BCF    FA6.7
3B5A:  BSF    FA6.0
3B5C:  MOVF   FA8,W
3B5E:  BTFSC  xDC.7
3B60:  BSF    FF2.7
3B62:  MOVWF  x2E
3B64:  MOVFF  FF2,2DC
3B68:  BCF    FF2.7
3B6A:  MOVLW  0F
3B6C:  MOVWF  FA9
3B6E:  BCF    FA6.6
3B70:  BCF    FA6.7
3B72:  BSF    FA6.0
3B74:  MOVF   FA8,W
3B76:  BTFSC  xDC.7
3B78:  BSF    FF2.7
3B7A:  MOVLB  3
3B7C:  CLRF   x15
3B7E:  MOVWF  x14
3B80:  MOVLB  0
3B82:  CALL   0F38
3B86:  MOVFF  03,25E
3B8A:  MOVFF  02,25D
3B8E:  MOVFF  01,25C
3B92:  MOVFF  00,25B
....................    MediaMovil=read_eeprom(20); 
3B96:  MOVFF  FF2,2DC
3B9A:  BCF    FF2.7
3B9C:  MOVLW  14
3B9E:  MOVWF  FA9
3BA0:  BCF    FA6.6
3BA2:  BCF    FA6.7
3BA4:  BSF    FA6.0
3BA6:  MOVF   FA8,W
3BA8:  MOVLB  2
3BAA:  BTFSC  xDC.7
3BAC:  BSF    FF2.7
3BAE:  MOVWF  x32
....................    EV_Agua_off;EV_Paso_off;EV_Desfogue_off;Resistencia_off; 
3BB0:  BCF    F8A.4
3BB2:  BCF    F93.4
3BB4:  BCF    F8A.3
3BB6:  BCF    F93.3
3BB8:  BCF    F8A.2
3BBA:  BCF    F93.2
3BBC:  BCF    F8B.0
3BBE:  BCF    F94.0
....................    usb_init(); 
3BC0:  MOVLB  0
3BC2:  GOTO   2EFA
....................    usb_task(); 
3BC6:  CALL   2ED8
....................    Puerta=0;Parada=0;NivelReservorio=0;NivelTanque=0;Presostato=0;ADC_Pt100=0; 
3BCA:  MOVLB  2
3BCC:  CLRF   x12
3BCE:  CLRF   x13
3BD0:  CLRF   x14
3BD2:  CLRF   x15
3BD4:  CLRF   x16
3BD6:  CLRF   x17
....................    tiempo_esterilizacion=0; 
3BD8:  CLRF   x30
....................    for(z=0;z<80;z++) 
3BDA:  CLRF   x06
3BDC:  MOVF   x06,W
3BDE:  SUBLW  4F
3BE0:  BNC   3C02
....................    { 
....................       Temperatura=Leer_Sensor(MediaMovil); 
3BE2:  MOVFF  232,2DC
3BE6:  MOVLB  0
3BE8:  CALL   1404
3BEC:  MOVFF  03,28A
3BF0:  MOVFF  02,289
3BF4:  MOVFF  01,288
3BF8:  MOVFF  00,287
....................    } 
3BFC:  MOVLB  2
3BFE:  INCF   x06,F
3C00:  BRA    3BDC
....................    EV_Agua_off; 
3C02:  BCF    F8A.4
3C04:  BCF    F93.4
....................    
.................... while(true) 
.................... { 
....................    if(STOP || Visua==1) 
3C06:  BSF    F95.5
3C08:  BTFSS  F83.5
3C0A:  BRA    3C10
3C0C:  BTFSS  x2A.1
3C0E:  BRA    3C28
....................    { 
....................       emergency=1; 
3C10:  BSF    x02.0
....................       EV_Desfogue_on; 
3C12:  BSF    F8A.2
3C14:  BCF    F93.2
....................       EV_Agua_off; 
3C16:  BCF    F8A.4
3C18:  BCF    F93.4
....................       Resistencia_off; 
3C1A:  BCF    F8B.0
3C1C:  BCF    F94.0
....................       Resistencia2_off; 
3C1E:  BCF    F8B.1
3C20:  BCF    F94.1
....................       EVDesfogue=0; 
3C22:  CLRF   x08
....................       disable_interrupts(INT_TIMER0); 
3C24:  BCF    FF2.5
....................    }         
....................    else 
3C26:  BRA    3C40
....................    { 
....................       if(emergency==1) 
3C28:  BTFSS  x02.0
3C2A:  BRA    3C40
....................       { 
....................          delay_ms(1500); 
3C2C:  MOVLW  06
3C2E:  MOVWF  xDC
3C30:  MOVLW  FA
3C32:  MOVWF  xE2
3C34:  MOVLB  0
3C36:  CALL   0F0E
3C3A:  MOVLB  2
3C3C:  DECFSZ xDC,F
3C3E:  BRA    3C30
....................       } 
....................    } 
....................     
....................    if(!LOW && !STOP) 
3C40:  BSF    F95.0
3C42:  BTFSC  F83.0
3C44:  BRA    3C60
3C46:  BSF    F95.5
3C48:  BTFSS  F83.5
3C4A:  BRA    3C60
....................    { 
....................       flag_reservorio=0;    
3C4C:  BCF    x02.5
....................       treservorio=0; 
3C4E:  CLRF   x29
3C50:  CLRF   x28
....................       EV_Agua_on; 
3C52:  BSF    F8A.4
3C54:  BCF    F93.4
....................       Resistencia_off;  
3C56:  BCF    F8B.0
3C58:  BCF    F94.0
....................       Resistencia2_off; 
3C5A:  BCF    F8B.1
3C5C:  BCF    F94.1
....................    } 
....................    else 
3C5E:  BRA    3C9A
....................    {       
....................       if(MEDIUM && !STOP) 
3C60:  BSF    F95.1
3C62:  BTFSS  F83.1
3C64:  BRA    3C8C
3C66:  BSF    F95.5
3C68:  BTFSS  F83.5
3C6A:  BRA    3C8C
....................       { 
....................          if(treservorio>=600) 
3C6C:  MOVF   x29,W
3C6E:  SUBLW  01
3C70:  BC    3C88
3C72:  XORLW  FF
3C74:  BNZ   3C7C
3C76:  MOVF   x28,W
3C78:  SUBLW  57
3C7A:  BC    3C88
....................          { 
....................             EV_Agua_off; 
3C7C:  BCF    F8A.4
3C7E:  BCF    F93.4
....................             flag_reservorio=0; 
3C80:  BCF    x02.5
....................             flag_agua=1; 
3C82:  BSF    x02.1
....................             flag_agua2=1; 
3C84:  BSF    x02.2
....................          } 
....................          else 
3C86:  BRA    3C8A
....................          { 
....................             flag_reservorio=1;            
3C88:  BSF    x02.5
....................          } 
....................       } 
....................       else 
3C8A:  BRA    3C9A
....................       { 
....................          treservorio=0; 
3C8C:  CLRF   x29
3C8E:  CLRF   x28
....................          flag_reservorio=0; 
3C90:  BCF    x02.5
....................          if(EVAgua==0) 
3C92:  MOVF   x09,F
3C94:  BNZ   3C9A
....................          { 
....................             EV_Agua_on; 
3C96:  BSF    F8A.4
3C98:  BCF    F93.4
....................          } 
....................       } 
....................    } 
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
3C9A:  MOVLB  0
3C9C:  GOTO   2F08
3CA0:  MOVF   01,F
3CA2:  BTFSC  FD8.2
3CA4:  BRA    43E2
.................... { 
....................    if(usb_kbhit(1)) 
3CA6:  MOVLW  01
3CA8:  MOVLB  2
3CAA:  MOVWF  xDC
3CAC:  MOVLB  0
3CAE:  GOTO   2F10
3CB2:  MOVF   01,F
3CB4:  BTFSC  FD8.2
3CB6:  BRA    3F0E
....................    { 
....................       usb_get_packet(1, rxubuf, Lenbuf); 
3CB8:  MOVLW  01
3CBA:  MOVLB  2
3CBC:  MOVWF  xDC
3CBE:  CLRF   xDE
3CC0:  MOVLW  42
3CC2:  MOVWF  xDD
3CC4:  CLRF   xE0
3CC6:  MOVLW  20
3CC8:  MOVWF  xDF
3CCA:  MOVLB  0
3CCC:  GOTO   3016
....................       if(rxubuf[0]==1) 
3CD0:  DECFSZ 42,W
3CD2:  BRA    3D5C
....................       { 
....................          Ganancia=rxubuf[1];desvio=rxubuf[2];Tciclo=rxubuf[3];MediaMovil=rxubuf[5];Ganancia2=rxubuf[6];Ajuste=rxubuf[7]; 
3CD4:  MOVLB  3
3CD6:  CLRF   x15
3CD8:  MOVFF  43,314
3CDC:  MOVLB  0
3CDE:  CALL   0F38
3CE2:  MOVFF  03,25A
3CE6:  MOVFF  02,259
3CEA:  MOVFF  01,258
3CEE:  MOVFF  00,257
3CF2:  MOVLB  3
3CF4:  CLRF   x15
3CF6:  MOVFF  44,314
3CFA:  MOVLB  0
3CFC:  CALL   0F38
3D00:  MOVFF  03,262
3D04:  MOVFF  02,261
3D08:  MOVFF  01,260
3D0C:  MOVFF  00,25F
3D10:  MOVLB  3
3D12:  CLRF   x15
3D14:  MOVFF  45,314
3D18:  MOVLB  0
3D1A:  CALL   0F38
3D1E:  MOVFF  03,242
3D22:  MOVFF  02,241
3D26:  MOVFF  01,240
3D2A:  MOVFF  00,23F
3D2E:  MOVFF  47,232
3D32:  MOVLB  3
3D34:  CLRF   x15
3D36:  MOVFF  48,314
3D3A:  MOVLB  0
3D3C:  CALL   0F38
3D40:  MOVFF  03,25E
3D44:  MOVFF  02,25D
3D48:  MOVFF  01,25C
3D4C:  MOVFF  00,25B
3D50:  MOVFF  49,22D
....................          Ajusten=rxubuf[10];R2=rxubuf[11]; 
3D54:  MOVFF  4C,22E
3D58:  MOVFF  4D,22F
....................       } // Falta escribir en la eeprom 
....................       if(rxubuf[12]==1)    
3D5C:  DECFSZ 4E,W
3D5E:  BRA    3EE8
....................       { 
....................          write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,MediaMovil); 
3D60:  MOVFF  25A,313
3D64:  MOVFF  259,312
3D68:  MOVFF  258,311
3D6C:  MOVFF  257,310
3D70:  CALL   18E0
3D74:  MOVFF  01,2DC
3D78:  MOVLW  0A
3D7A:  MOVWF  FA9
3D7C:  MOVFF  2DC,FA8
3D80:  BCF    FA6.6
3D82:  BCF    FA6.7
3D84:  BSF    FA6.2
3D86:  MOVF   FF2,W
3D88:  MOVWF  00
3D8A:  BCF    FF2.7
3D8C:  MOVLB  F
3D8E:  MOVLW  55
3D90:  MOVWF  FA7
3D92:  MOVLW  AA
3D94:  MOVWF  FA7
3D96:  BSF    FA6.1
3D98:  BTFSC  FA6.1
3D9A:  BRA    3D98
3D9C:  BCF    FA6.2
3D9E:  MOVF   00,W
3DA0:  IORWF  FF2,F
3DA2:  MOVFF  262,313
3DA6:  MOVFF  261,312
3DAA:  MOVFF  260,311
3DAE:  MOVFF  25F,310
3DB2:  MOVLB  0
3DB4:  CALL   18E0
3DB8:  MOVFF  01,2DC
3DBC:  MOVLW  0B
3DBE:  MOVWF  FA9
3DC0:  MOVFF  2DC,FA8
3DC4:  BCF    FA6.6
3DC6:  BCF    FA6.7
3DC8:  BSF    FA6.2
3DCA:  MOVF   FF2,W
3DCC:  MOVWF  00
3DCE:  BCF    FF2.7
3DD0:  MOVLB  F
3DD2:  MOVLW  55
3DD4:  MOVWF  FA7
3DD6:  MOVLW  AA
3DD8:  MOVWF  FA7
3DDA:  BSF    FA6.1
3DDC:  BTFSC  FA6.1
3DDE:  BRA    3DDC
3DE0:  BCF    FA6.2
3DE2:  MOVF   00,W
3DE4:  IORWF  FF2,F
3DE6:  MOVFF  242,313
3DEA:  MOVFF  241,312
3DEE:  MOVFF  240,311
3DF2:  MOVFF  23F,310
3DF6:  MOVLB  0
3DF8:  CALL   18E0
3DFC:  MOVFF  01,2DC
3E00:  MOVLW  0C
3E02:  MOVWF  FA9
3E04:  MOVFF  2DC,FA8
3E08:  BCF    FA6.6
3E0A:  BCF    FA6.7
3E0C:  BSF    FA6.2
3E0E:  MOVF   FF2,W
3E10:  MOVWF  00
3E12:  BCF    FF2.7
3E14:  MOVLB  F
3E16:  MOVLW  55
3E18:  MOVWF  FA7
3E1A:  MOVLW  AA
3E1C:  MOVWF  FA7
3E1E:  BSF    FA6.1
3E20:  BTFSC  FA6.1
3E22:  BRA    3E20
3E24:  BCF    FA6.2
3E26:  MOVF   00,W
3E28:  IORWF  FF2,F
3E2A:  MOVLW  14
3E2C:  MOVWF  FA9
3E2E:  MOVFF  232,FA8
3E32:  BCF    FA6.6
3E34:  BCF    FA6.7
3E36:  BSF    FA6.2
3E38:  MOVF   FF2,W
3E3A:  MOVWF  00
3E3C:  BCF    FF2.7
3E3E:  MOVLW  55
3E40:  MOVWF  FA7
3E42:  MOVLW  AA
3E44:  MOVWF  FA7
3E46:  BSF    FA6.1
3E48:  BTFSC  FA6.1
3E4A:  BRA    3E48
3E4C:  BCF    FA6.2
3E4E:  MOVF   00,W
3E50:  IORWF  FF2,F
....................          write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);write_eeprom(15,(int8)Ganancia2); 
3E52:  MOVLW  0D
3E54:  MOVWF  FA9
3E56:  MOVFF  22D,FA8
3E5A:  BCF    FA6.6
3E5C:  BCF    FA6.7
3E5E:  BSF    FA6.2
3E60:  MOVF   FF2,W
3E62:  MOVWF  00
3E64:  BCF    FF2.7
3E66:  MOVLW  55
3E68:  MOVWF  FA7
3E6A:  MOVLW  AA
3E6C:  MOVWF  FA7
3E6E:  BSF    FA6.1
3E70:  BTFSC  FA6.1
3E72:  BRA    3E70
3E74:  BCF    FA6.2
3E76:  MOVF   00,W
3E78:  IORWF  FF2,F
3E7A:  MOVLW  0E
3E7C:  MOVWF  FA9
3E7E:  MOVFF  22E,FA8
3E82:  BCF    FA6.6
3E84:  BCF    FA6.7
3E86:  BSF    FA6.2
3E88:  MOVF   FF2,W
3E8A:  MOVWF  00
3E8C:  BCF    FF2.7
3E8E:  MOVLW  55
3E90:  MOVWF  FA7
3E92:  MOVLW  AA
3E94:  MOVWF  FA7
3E96:  BSF    FA6.1
3E98:  BTFSC  FA6.1
3E9A:  BRA    3E98
3E9C:  BCF    FA6.2
3E9E:  MOVF   00,W
3EA0:  IORWF  FF2,F
3EA2:  MOVFF  25E,313
3EA6:  MOVFF  25D,312
3EAA:  MOVFF  25C,311
3EAE:  MOVFF  25B,310
3EB2:  MOVLB  0
3EB4:  CALL   18E0
3EB8:  MOVFF  01,2DC
3EBC:  MOVLW  0F
3EBE:  MOVWF  FA9
3EC0:  MOVFF  2DC,FA8
3EC4:  BCF    FA6.6
3EC6:  BCF    FA6.7
3EC8:  BSF    FA6.2
3ECA:  MOVF   FF2,W
3ECC:  MOVWF  00
3ECE:  BCF    FF2.7
3ED0:  MOVLB  F
3ED2:  MOVLW  55
3ED4:  MOVWF  FA7
3ED6:  MOVLW  AA
3ED8:  MOVWF  FA7
3EDA:  BSF    FA6.1
3EDC:  BTFSC  FA6.1
3EDE:  BRA    3EDC
3EE0:  BCF    FA6.2
3EE2:  MOVF   00,W
3EE4:  IORWF  FF2,F
3EE6:  MOVLB  0
....................       }   
....................        
....................       if(rxubuf[13]==1) 
3EE8:  DECFSZ 4F,W
3EEA:  BRA    3EF4
....................       { 
....................          Visua=1; 
3EEC:  MOVLB  2
3EEE:  BSF    x2A.1
....................       } 
....................       else 
3EF0:  BRA    3EF8
3EF2:  MOVLB  0
....................       { 
....................          Visua=0; 
3EF4:  MOVLB  2
3EF6:  BCF    x2A.1
....................       } 
....................        
....................       if(rxubuf[8]==1)// Camara OUT 
3EF8:  DECFSZ 4A,W
3EFA:  BRA    3F00
....................       { 
....................          CamaraOUT=1; 
3EFC:  BSF    x02.3
....................       } 
....................       else 
3EFE:  BRA    3F02
....................       { 
....................          CamaraOUT=0; 
3F00:  BCF    x02.3
....................       } 
....................        
....................       if(rxubuf[9]==1)// Camara IN 
3F02:  DECFSZ 4B,W
3F04:  BRA    3F0A
....................       { 
....................          CamaraIN=1; 
3F06:  BSF    x02.4
....................       } 
....................       else 
3F08:  BRA    3F0C
....................       { 
....................          CamaraIN=0; 
3F0A:  BCF    x02.4
3F0C:  MOVLB  0
....................       } 
....................     } 
....................      
....................     TempUSB=Temperatura; 
3F0E:  MOVFF  28A,28E
3F12:  MOVFF  289,28D
3F16:  MOVFF  288,28C
3F1A:  MOVFF  287,28B
....................     recbuf[0]=(int8)(TempUSB); 
3F1E:  MOVFF  28E,313
3F22:  MOVFF  28D,312
3F26:  MOVFF  28C,311
3F2A:  MOVFF  28B,310
3F2E:  CALL   18E0
3F32:  MOVFF  01,22
....................     recbuf[1]=120; 
3F36:  MOVLW  78
3F38:  MOVWF  23
....................     d3=TempUSB-(int8)TempUSB; 
3F3A:  MOVFF  28E,313
3F3E:  MOVFF  28D,312
3F42:  MOVFF  28C,311
3F46:  MOVFF  28B,310
3F4A:  CALL   18E0
3F4E:  MOVLB  3
3F50:  CLRF   x15
3F52:  MOVFF  01,314
3F56:  MOVLB  0
3F58:  CALL   0F38
3F5C:  BSF    FD8.1
3F5E:  MOVFF  28E,317
3F62:  MOVFF  28D,316
3F66:  MOVFF  28C,315
3F6A:  MOVFF  28B,314
3F6E:  MOVFF  03,31B
3F72:  MOVFF  02,31A
3F76:  MOVFF  01,319
3F7A:  MOVFF  00,318
3F7E:  CALL   1120
3F82:  MOVFF  03,266
3F86:  MOVFF  02,265
3F8A:  MOVFF  01,264
3F8E:  MOVFF  00,263
....................     d3=d3*10.0; 
3F92:  MOVFF  266,313
3F96:  MOVFF  265,312
3F9A:  MOVFF  264,311
3F9E:  MOVFF  263,310
3FA2:  MOVLB  3
3FA4:  CLRF   x17
3FA6:  CLRF   x16
3FA8:  MOVLW  20
3FAA:  MOVWF  x15
3FAC:  MOVLW  82
3FAE:  MOVWF  x14
3FB0:  MOVLB  0
3FB2:  CALL   1770
3FB6:  MOVFF  03,266
3FBA:  MOVFF  02,265
3FBE:  MOVFF  01,264
3FC2:  MOVFF  00,263
....................     recbuf[2]=(int8)d3; 
3FC6:  MOVFF  266,313
3FCA:  MOVFF  265,312
3FCE:  MOVFF  264,311
3FD2:  MOVFF  263,310
3FD6:  CALL   18E0
3FDA:  MOVFF  01,24
....................     recbuf[3]=(int8)Pt; 
3FDE:  MOVFF  23E,313
3FE2:  MOVFF  23D,312
3FE6:  MOVFF  23C,311
3FEA:  MOVFF  23B,310
3FEE:  CALL   18E0
3FF2:  MOVFF  01,25
....................     recbuf[4]=(int8)Setpoint; 
3FF6:  MOVFF  286,313
3FFA:  MOVFF  285,312
3FFE:  MOVFF  284,311
4002:  MOVFF  283,310
4006:  CALL   18E0
400A:  MOVFF  01,26
....................     recbuf[5]=(int8)PresionCamara; 
400E:  MOVFF  292,313
4012:  MOVFF  291,312
4016:  MOVFF  290,311
401A:  MOVFF  28F,310
401E:  CALL   18E0
4022:  MOVFF  01,27
....................     d4=Pt-(int8)Pt; 
4026:  MOVFF  23E,313
402A:  MOVFF  23D,312
402E:  MOVFF  23C,311
4032:  MOVFF  23B,310
4036:  CALL   18E0
403A:  MOVLB  3
403C:  CLRF   x15
403E:  MOVFF  01,314
4042:  MOVLB  0
4044:  CALL   0F38
4048:  BSF    FD8.1
404A:  MOVFF  23E,317
404E:  MOVFF  23D,316
4052:  MOVFF  23C,315
4056:  MOVFF  23B,314
405A:  MOVFF  03,31B
405E:  MOVFF  02,31A
4062:  MOVFF  01,319
4066:  MOVFF  00,318
406A:  CALL   1120
406E:  MOVFF  03,26A
4072:  MOVFF  02,269
4076:  MOVFF  01,268
407A:  MOVFF  00,267
....................     d4=d4*10.0; 
407E:  MOVFF  26A,313
4082:  MOVFF  269,312
4086:  MOVFF  268,311
408A:  MOVFF  267,310
408E:  MOVLB  3
4090:  CLRF   x17
4092:  CLRF   x16
4094:  MOVLW  20
4096:  MOVWF  x15
4098:  MOVLW  82
409A:  MOVWF  x14
409C:  MOVLB  0
409E:  CALL   1770
40A2:  MOVFF  03,26A
40A6:  MOVFF  02,269
40AA:  MOVFF  01,268
40AE:  MOVFF  00,267
....................     recbuf[6]=(int8)d4; 
40B2:  MOVFF  26A,313
40B6:  MOVFF  269,312
40BA:  MOVFF  268,311
40BE:  MOVFF  267,310
40C2:  CALL   18E0
40C6:  MOVFF  01,28
....................     recbuf[7]=(int8)NivelTanque; 
40CA:  MOVFF  215,29
....................     recbuf[8]=(int8)NivelReservorio; 
40CE:  MOVFF  214,2A
....................     recbuf[9]=(int8)Tpulso; 
40D2:  MOVFF  246,313
40D6:  MOVFF  245,312
40DA:  MOVFF  244,311
40DE:  MOVFF  243,310
40E2:  CALL   18E0
40E6:  MOVFF  01,2B
....................     d5=Tpulso-(int8)Tpulso; 
40EA:  MOVFF  246,313
40EE:  MOVFF  245,312
40F2:  MOVFF  244,311
40F6:  MOVFF  243,310
40FA:  CALL   18E0
40FE:  MOVLB  3
4100:  CLRF   x15
4102:  MOVFF  01,314
4106:  MOVLB  0
4108:  CALL   0F38
410C:  BSF    FD8.1
410E:  MOVFF  246,317
4112:  MOVFF  245,316
4116:  MOVFF  244,315
411A:  MOVFF  243,314
411E:  MOVFF  03,31B
4122:  MOVFF  02,31A
4126:  MOVFF  01,319
412A:  MOVFF  00,318
412E:  CALL   1120
4132:  MOVFF  03,26E
4136:  MOVFF  02,26D
413A:  MOVFF  01,26C
413E:  MOVFF  00,26B
....................     d5=d5*10.0; 
4142:  MOVFF  26E,313
4146:  MOVFF  26D,312
414A:  MOVFF  26C,311
414E:  MOVFF  26B,310
4152:  MOVLB  3
4154:  CLRF   x17
4156:  CLRF   x16
4158:  MOVLW  20
415A:  MOVWF  x15
415C:  MOVLW  82
415E:  MOVWF  x14
4160:  MOVLB  0
4162:  CALL   1770
4166:  MOVFF  03,26E
416A:  MOVFF  02,26D
416E:  MOVFF  01,26C
4172:  MOVFF  00,26B
....................     recbuf[10]=(int8)d5; 
4176:  MOVFF  26E,313
417A:  MOVFF  26D,312
417E:  MOVFF  26C,311
4182:  MOVFF  26B,310
4186:  CALL   18E0
418A:  MOVFF  01,2C
....................     recbuf[11]=(int8)error; 
418E:  MOVFF  24A,313
4192:  MOVFF  249,312
4196:  MOVFF  248,311
419A:  MOVFF  247,310
419E:  CALL   18E0
41A2:  MOVFF  01,2D
....................     d6=error-(int8)error; 
41A6:  MOVFF  24A,313
41AA:  MOVFF  249,312
41AE:  MOVFF  248,311
41B2:  MOVFF  247,310
41B6:  CALL   18E0
41BA:  MOVLB  3
41BC:  CLRF   x15
41BE:  MOVFF  01,314
41C2:  MOVLB  0
41C4:  CALL   0F38
41C8:  BSF    FD8.1
41CA:  MOVFF  24A,317
41CE:  MOVFF  249,316
41D2:  MOVFF  248,315
41D6:  MOVFF  247,314
41DA:  MOVFF  03,31B
41DE:  MOVFF  02,31A
41E2:  MOVFF  01,319
41E6:  MOVFF  00,318
41EA:  CALL   1120
41EE:  MOVFF  03,27A
41F2:  MOVFF  02,279
41F6:  MOVFF  01,278
41FA:  MOVFF  00,277
....................     d6=d6*10.0; 
41FE:  MOVFF  27A,313
4202:  MOVFF  279,312
4206:  MOVFF  278,311
420A:  MOVFF  277,310
420E:  MOVLB  3
4210:  CLRF   x17
4212:  CLRF   x16
4214:  MOVLW  20
4216:  MOVWF  x15
4218:  MOVLW  82
421A:  MOVWF  x14
421C:  MOVLB  0
421E:  CALL   1770
4222:  MOVFF  03,27A
4226:  MOVFF  02,279
422A:  MOVFF  01,278
422E:  MOVFF  00,277
....................     recbuf[12]=(int8)d6; 
4232:  MOVFF  27A,313
4236:  MOVFF  279,312
423A:  MOVFF  278,311
423E:  MOVFF  277,310
4242:  CALL   18E0
4246:  MOVFF  01,2E
....................      
....................     recbuf[13]=(int8)Aumento; 
424A:  MOVFF  201,313
424E:  MOVFF  200,312
4252:  MOVFF  1FF,311
4256:  MOVFF  1FE,310
425A:  CALL   18E0
425E:  MOVFF  01,2F
....................     d7=Aumento-(int8)Aumento; 
4262:  MOVFF  201,313
4266:  MOVFF  200,312
426A:  MOVFF  1FF,311
426E:  MOVFF  1FE,310
4272:  CALL   18E0
4276:  MOVLB  3
4278:  CLRF   x15
427A:  MOVFF  01,314
427E:  MOVLB  0
4280:  CALL   0F38
4284:  BSF    FD8.1
4286:  MOVFF  201,317
428A:  MOVFF  200,316
428E:  MOVFF  1FF,315
4292:  MOVFF  1FE,314
4296:  MOVFF  03,31B
429A:  MOVFF  02,31A
429E:  MOVFF  01,319
42A2:  MOVFF  00,318
42A6:  CALL   1120
42AA:  MOVFF  03,27E
42AE:  MOVFF  02,27D
42B2:  MOVFF  01,27C
42B6:  MOVFF  00,27B
....................     d7=d7*10.0; 
42BA:  MOVFF  27E,313
42BE:  MOVFF  27D,312
42C2:  MOVFF  27C,311
42C6:  MOVFF  27B,310
42CA:  MOVLB  3
42CC:  CLRF   x17
42CE:  CLRF   x16
42D0:  MOVLW  20
42D2:  MOVWF  x15
42D4:  MOVLW  82
42D6:  MOVWF  x14
42D8:  MOVLB  0
42DA:  CALL   1770
42DE:  MOVFF  03,27E
42E2:  MOVFF  02,27D
42E6:  MOVFF  01,27C
42EA:  MOVFF  00,27B
....................     recbuf[14]=(int8)d7; 
42EE:  MOVFF  27E,313
42F2:  MOVFF  27D,312
42F6:  MOVFF  27C,311
42FA:  MOVFF  27B,310
42FE:  CALL   18E0
4302:  MOVFF  01,30
....................      
....................     recbuf[15]=(int8)Ganancia; 
4306:  MOVFF  25A,313
430A:  MOVFF  259,312
430E:  MOVFF  258,311
4312:  MOVFF  257,310
4316:  CALL   18E0
431A:  MOVFF  01,31
....................     d8=Ganancia-(int8)Ganancia; 
431E:  MOVFF  25A,313
4322:  MOVFF  259,312
4326:  MOVFF  258,311
432A:  MOVFF  257,310
432E:  CALL   18E0
4332:  MOVLB  3
4334:  CLRF   x15
4336:  MOVFF  01,314
433A:  MOVLB  0
433C:  CALL   0F38
4340:  BSF    FD8.1
4342:  MOVFF  25A,317
4346:  MOVFF  259,316
434A:  MOVFF  258,315
434E:  MOVFF  257,314
4352:  MOVFF  03,31B
4356:  MOVFF  02,31A
435A:  MOVFF  01,319
435E:  MOVFF  00,318
4362:  CALL   1120
4366:  MOVFF  03,282
436A:  MOVFF  02,281
436E:  MOVFF  01,280
4372:  MOVFF  00,27F
....................     d8=d8*10.0; 
4376:  MOVFF  282,313
437A:  MOVFF  281,312
437E:  MOVFF  280,311
4382:  MOVFF  27F,310
4386:  MOVLB  3
4388:  CLRF   x17
438A:  CLRF   x16
438C:  MOVLW  20
438E:  MOVWF  x15
4390:  MOVLW  82
4392:  MOVWF  x14
4394:  MOVLB  0
4396:  CALL   1770
439A:  MOVFF  03,282
439E:  MOVFF  02,281
43A2:  MOVFF  01,280
43A6:  MOVFF  00,27F
....................     recbuf[16]=(int8)d8; 
43AA:  MOVFF  282,313
43AE:  MOVFF  281,312
43B2:  MOVFF  280,311
43B6:  MOVFF  27F,310
43BA:  CALL   18E0
43BE:  MOVFF  01,32
....................     recbuf[17]=(int8)Puerta; 
43C2:  MOVFF  212,33
....................                 
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
43C6:  MOVLW  01
43C8:  MOVLB  2
43CA:  MOVWF  xDC
43CC:  CLRF   xDE
43CE:  MOVLW  22
43D0:  MOVWF  xDD
43D2:  CLRF   xE0
43D4:  MOVLW  20
43D6:  MOVWF  xDF
43D8:  MOVLW  02
43DA:  MOVWF  xE1
43DC:  MOVLB  0
43DE:  GOTO   3060
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................     
....................    if(Expulsa==1) 
43E2:  MOVLB  2
43E4:  BTFSS  x2A.0
43E6:  BRA    452A
....................    {    
....................       Temperatura=Leer_Sensor(MediaMovil); 
43E8:  MOVFF  232,2DC
43EC:  MOVLB  0
43EE:  CALL   1404
43F2:  MOVFF  03,28A
43F6:  MOVFF  02,289
43FA:  MOVFF  01,288
43FE:  MOVFF  00,287
....................       d3=Temperatura-(int8)Temperatura; 
4402:  MOVFF  28A,313
4406:  MOVFF  289,312
440A:  MOVFF  288,311
440E:  MOVFF  287,310
4412:  CALL   18E0
4416:  MOVLB  3
4418:  CLRF   x15
441A:  MOVFF  01,314
441E:  MOVLB  0
4420:  CALL   0F38
4424:  BSF    FD8.1
4426:  MOVFF  28A,317
442A:  MOVFF  289,316
442E:  MOVFF  288,315
4432:  MOVFF  287,314
4436:  MOVFF  03,31B
443A:  MOVFF  02,31A
443E:  MOVFF  01,319
4442:  MOVFF  00,318
4446:  CALL   1120
444A:  MOVFF  03,266
444E:  MOVFF  02,265
4452:  MOVFF  01,264
4456:  MOVFF  00,263
....................       d3=d3*10.0; 
445A:  MOVFF  266,313
445E:  MOVFF  265,312
4462:  MOVFF  264,311
4466:  MOVFF  263,310
446A:  MOVLB  3
446C:  CLRF   x17
446E:  CLRF   x16
4470:  MOVLW  20
4472:  MOVWF  x15
4474:  MOVLW  82
4476:  MOVWF  x14
4478:  MOVLB  0
447A:  CALL   1770
447E:  MOVFF  03,266
4482:  MOVFF  02,265
4486:  MOVFF  01,264
448A:  MOVFF  00,263
....................       PresionCamara=Leer_Sensor_Presion(5); 
448E:  MOVLW  05
4490:  MOVLB  2
4492:  MOVWF  xDC
4494:  MOVLB  0
4496:  CALL   2A66
449A:  MOVFF  03,292
449E:  MOVFF  02,291
44A2:  MOVFF  01,290
44A6:  MOVFF  00,28F
....................       if(PresionCamara>=255) 
44AA:  MOVLB  3
44AC:  CLRF   x13
44AE:  CLRF   x12
44B0:  MOVLW  7F
44B2:  MOVWF  x11
44B4:  MOVLW  86
44B6:  MOVWF  x10
44B8:  MOVFF  292,317
44BC:  MOVFF  291,316
44C0:  MOVFF  290,315
44C4:  MOVFF  28F,314
44C8:  MOVLB  0
44CA:  CALL   1866
44CE:  BC    44D2
44D0:  BNZ   44E2
....................       { 
....................          PresionCamara=255; 
44D2:  MOVLB  2
44D4:  CLRF   x92
44D6:  CLRF   x91
44D8:  MOVLW  7F
44DA:  MOVWF  x90
44DC:  MOVLW  86
44DE:  MOVWF  x8F
44E0:  MOVLB  0
....................       } 
....................       Puerta=!DOOR; 
44E2:  BSF    F95.4
44E4:  MOVLB  2
44E6:  CLRF   x12
44E8:  BTFSC  F83.4
44EA:  INCF   x12,F
....................       Parada=!STOP; 
44EC:  BSF    F95.5
44EE:  CLRF   x13
44F0:  BTFSC  F83.5
44F2:  INCF   x13,F
....................       NivelReservorio=LOW; 
44F4:  BSF    F95.0
44F6:  CLRF   x14
44F8:  BTFSC  F83.0
44FA:  INCF   x14,F
....................       NivelTanque=MEDIUM; 
44FC:  BSF    F95.1
44FE:  CLRF   x15
4500:  BTFSC  F83.1
4502:  INCF   x15,F
....................       //Temperatura=Leer_Sensor(10); 
....................       Presostato=(int8)PresionCamara; 
4504:  MOVFF  292,313
4508:  MOVFF  291,312
450C:  MOVFF  290,311
4510:  MOVFF  28F,310
4514:  MOVLB  0
4516:  CALL   18E0
451A:  MOVFF  01,216
....................       Lee_Vector(); 
451E:  CALL   2DDE
....................       Carga_Vector(); 
4522:  CALL   2E30
....................       Expulsa=0; 
4526:  MOVLB  2
4528:  BCF    x2A.0
....................    }     
....................  
....................    if(tinicio>7200 && tiempo_esterilizacion==0)//tinicio expresado en segundos       
452A:  MOVF   x25,W
452C:  SUBLW  1B
452E:  BC    457E
4530:  XORLW  FF
4532:  BNZ   453A
4534:  MOVF   x24,W
4536:  SUBLW  20
4538:  BC    457E
453A:  MOVF   x30,F
453C:  BNZ   457E
....................    { 
....................          if(PresionCamara>2.0) 
453E:  MOVLB  3
4540:  CLRF   x13
4542:  CLRF   x12
4544:  CLRF   x11
4546:  MOVLW  80
4548:  MOVWF  x10
454A:  MOVFF  292,317
454E:  MOVFF  291,316
4552:  MOVFF  290,315
4556:  MOVFF  28F,314
455A:  MOVLB  0
455C:  CALL   1866
4560:  BNC   4566
....................          { 
....................             EV_Desfogue_on; 
4562:  BSF    F8A.2
4564:  BCF    F93.2
....................          } 
....................          Alarma=1; 
4566:  MOVLW  01
4568:  MOVLB  2
456A:  MOVWF  x10
....................          EV_Agua_off; 
456C:  BCF    F8A.4
456E:  BCF    F93.4
....................          EV_Paso_off; 
4570:  BCF    F8A.3
4572:  BCF    F93.3
....................          Resistencia_off; 
4574:  BCF    F8B.0
4576:  BCF    F94.0
....................          Resistencia2_off; 
4578:  BCF    F8B.1
457A:  BCF    F94.1
....................    } 
....................    else 
457C:  BRA    4786
....................    {       
....................       if(EVDesfogue<1 && tiempo_esterilizacion==1 && (Temperatura<100.0 || Temperatura>145.0)) 
457E:  MOVF   x08,F
4580:  BNZ   45EE
4582:  DECFSZ x30,W
4584:  BRA    45EE
4586:  MOVFF  28A,313
458A:  MOVFF  289,312
458E:  MOVFF  288,311
4592:  MOVFF  287,310
4596:  MOVLB  3
4598:  CLRF   x17
459A:  CLRF   x16
459C:  MOVLW  48
459E:  MOVWF  x15
45A0:  MOVLW  85
45A2:  MOVWF  x14
45A4:  MOVLB  0
45A6:  CALL   1866
45AA:  BC    45D8
45AC:  MOVLB  3
45AE:  CLRF   x13
45B0:  CLRF   x12
45B2:  MOVLW  11
45B4:  MOVWF  x11
45B6:  MOVLW  86
45B8:  MOVWF  x10
45BA:  MOVFF  28A,317
45BE:  MOVFF  289,316
45C2:  MOVFF  288,315
45C6:  MOVFF  287,314
45CA:  MOVLB  0
45CC:  CALL   1866
45D0:  BTFSC  FD8.0
45D2:  BRA    45D8
45D4:  MOVLB  2
45D6:  BRA    45EE
....................       { 
....................          Alarma=2; 
45D8:  MOVLW  02
45DA:  MOVLB  2
45DC:  MOVWF  x10
....................          EV_Agua_off; 
45DE:  BCF    F8A.4
45E0:  BCF    F93.4
....................          EV_Paso_off; 
45E2:  BCF    F8A.3
45E4:  BCF    F93.3
....................          Resistencia_off; 
45E6:  BCF    F8B.0
45E8:  BCF    F94.0
....................          Resistencia2_off; 
45EA:  BCF    F8B.1
45EC:  BCF    F94.1
....................       } 
....................        
....................       if(tagua>720) // Si se el ingreso de agua al tanque dura mas de 12 minutos se activa la alarma por falta de agua. 
45EE:  MOVF   x27,W
45F0:  SUBLW  01
45F2:  BC    4612
45F4:  XORLW  FF
45F6:  BNZ   45FE
45F8:  MOVF   x26,W
45FA:  SUBLW  D0
45FC:  BC    4612
....................       { 
....................          AlarmaAgua=1;  
45FE:  MOVLW  01
4600:  MOVWF  x11
....................          EV_Agua_off; 
4602:  BCF    F8A.4
4604:  BCF    F93.4
....................          EV_Paso_off; 
4606:  BCF    F8A.3
4608:  BCF    F93.3
....................          Resistencia_off; 
460A:  BCF    F8B.0
460C:  BCF    F94.0
....................          Resistencia2_off; 
460E:  BCF    F8B.1
4610:  BCF    F94.1
....................       } 
....................        
....................       if(Control==1 && !DOOR && !STOP && AlarmaAgua==0 && Alarma==0) // Si esta en condiciones normales para ejecutar el control. 
4612:  DECFSZ x0F,W
4614:  BRA    46CC
4616:  BSF    F95.4
4618:  BTFSS  F83.4
461A:  BRA    46CC
461C:  BSF    F95.5
461E:  BTFSS  F83.5
4620:  BRA    46CC
4622:  MOVF   x11,F
4624:  BNZ   46CC
4626:  MOVF   x10,F
4628:  BNZ   46CC
....................       { 
....................          if(!TERM) 
462A:  BSF    F95.6
462C:  BTFSS  F83.6
462E:  BRA    463A
....................          { 
....................             Controla(); 
4630:  MOVLB  0
4632:  GOTO   3110
....................          } 
....................          else 
4636:  BRA    4644
4638:  MOVLB  2
....................          { 
....................             Resistencia_off; 
463A:  BCF    F8B.0
463C:  BCF    F94.0
....................             Resistencia2_off; 
463E:  BCF    F8B.1
4640:  BCF    F94.1
4642:  MOVLB  0
....................          } 
....................          /* 
....................          if(CamaraOUT==1) // Si desea abrir electrovalvula desde Software de control  
....................          { 
....................             EV_Desfogue_on; 
....................          } 
....................          else 
....................          { 
....................             EV_Desfogue_off;  
....................          }*/ 
....................           
....................          if(PRES) // Si el Presostato se activo indicando que el calderin alcanzo la presión ajustada. 
4644:  BSF    F95.7
4646:  BTFSC  F83.7
4648:  BRA    4688
....................          {   
....................             if(flag_presostato==0) 
464A:  MOVLB  2
464C:  BTFSC  x02.6
464E:  BRA    4688
....................             { 
....................                delay_ms(500); 
4650:  MOVLW  02
4652:  MOVWF  xDC
4654:  MOVLW  FA
4656:  MOVWF  xE2
4658:  MOVLB  0
465A:  CALL   0F0E
465E:  MOVLB  2
4660:  DECFSZ xDC,F
4662:  BRA    4654
....................                if(PRES) 
4664:  BSF    F95.7
4666:  BTFSC  F83.7
4668:  BRA    4688
....................                { 
....................                   EV_Paso_on;  // Electrovalvula que da paso de la precamara a la Camara. 
466A:  BSF    F8A.3
466C:  BCF    F93.3
....................                   delay_ms(1000); 
466E:  MOVLW  04
4670:  MOVWF  xDC
4672:  MOVLW  FA
4674:  MOVWF  xE2
4676:  MOVLB  0
4678:  CALL   0F0E
467C:  MOVLB  2
467E:  DECFSZ xDC,F
4680:  BRA    4672
....................                   EV_Desfogue_off; 
4682:  BCF    F8A.2
4684:  BCF    F93.2
....................                   flag_presostato=1; 
4686:  BSF    x02.6
....................                } 
....................             } 
....................          } 
....................           
....................          if(flag_presostato==1) 
4688:  MOVLB  2
468A:  BTFSS  x02.6
468C:  BRA    46C2
....................          { 
....................             if(Temperatura<90.0) 
468E:  MOVFF  28A,313
4692:  MOVFF  289,312
4696:  MOVFF  288,311
469A:  MOVFF  287,310
469E:  MOVLB  3
46A0:  CLRF   x17
46A2:  CLRF   x16
46A4:  MOVLW  34
46A6:  MOVWF  x15
46A8:  MOVLW  85
46AA:  MOVWF  x14
46AC:  MOVLB  0
46AE:  CALL   1866
46B2:  BNC   46BA
....................             { 
....................                EV_Desfogue_on; 
46B4:  BSF    F8A.2
46B6:  BCF    F93.2
....................             } 
....................             else 
46B8:  BRA    46BE
....................             { 
....................                EV_Desfogue_off;  
46BA:  BCF    F8A.2
46BC:  BCF    F93.2
....................             } 
....................          } 
....................          else 
46BE:  BRA    46C8
46C0:  MOVLB  2
....................          { 
....................             EV_Desfogue_off;  
46C2:  BCF    F8A.2
46C4:  BCF    F93.2
46C6:  MOVLB  0
....................          } 
....................       } 
....................       else 
46C8:  BRA    46DC
46CA:  MOVLB  2
....................       { 
....................          Resistencia_off; 
46CC:  BCF    F8B.0
46CE:  BCF    F94.0
....................          Resistencia2_off; 
46D0:  BCF    F8B.1
46D2:  BCF    F94.1
....................          EV_Paso_off; 
46D4:  BCF    F8A.3
46D6:  BCF    F93.3
....................          flag_presostato=0; 
46D8:  BCF    x02.6
46DA:  MOVLB  0
....................       } 
....................         
....................       if(Temperatura>=(Setpoint-1.0)&&p==3)// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
46DC:  BSF    FD8.1
46DE:  MOVFF  286,317
46E2:  MOVFF  285,316
46E6:  MOVFF  284,315
46EA:  MOVFF  283,314
46EE:  MOVLB  3
46F0:  CLRF   x1B
46F2:  CLRF   x1A
46F4:  CLRF   x19
46F6:  MOVLW  7F
46F8:  MOVWF  x18
46FA:  MOVLB  0
46FC:  CALL   1120
4700:  MOVFF  03,313
4704:  MOVFF  02,312
4708:  MOVFF  01,311
470C:  MOVFF  00,310
4710:  MOVFF  28A,317
4714:  MOVFF  289,316
4718:  MOVFF  288,315
471C:  MOVFF  287,314
4720:  CALL   1866
4724:  BC    4728
4726:  BNZ   473C
4728:  MOVLB  2
472A:  MOVF   x31,W
472C:  SUBLW  03
472E:  BTFSC  FD8.2
4730:  BRA    4736
4732:  MOVLB  0
4734:  BRA    473C
....................       { 
....................          tiempo_esterilizacion=1;     
4736:  MOVLW  01
4738:  MOVWF  x30
....................          p=1; 
473A:  MOVWF  x31
....................          //Ganancia=Ganancia2; 
....................       }         
....................        
....................       if(EVDesfogue==1 ) 
473C:  MOVLB  2
473E:  DECFSZ x08,W
4740:  BRA    4756
....................       { 
....................          EV_Desfogue_on; 
4742:  BSF    F8A.2
4744:  BCF    F93.2
....................          EV_Agua_off; 
4746:  BCF    F8A.4
4748:  BCF    F93.4
....................          EV_Paso_off; 
474A:  BCF    F8A.3
474C:  BCF    F93.3
....................          Resistencia_off; 
474E:  BCF    F8B.0
4750:  BCF    F94.0
....................          Resistencia2_off; 
4752:  BCF    F8B.1
4754:  BCF    F94.1
....................       }  
....................        
....................       if(EVDesfogue==3 && !STOP ) 
4756:  MOVF   x08,W
4758:  SUBLW  03
475A:  BNZ   4786
475C:  BSF    F95.5
475E:  BTFSS  F83.5
4760:  BRA    4786
....................       { 
....................          EV_Paso_off; 
4762:  BCF    F8A.3
4764:  BCF    F93.3
....................          if(Presostato<2) 
4766:  MOVF   x16,W
4768:  SUBLW  01
476A:  BNC   4772
....................          { 
....................             EV_Desfogue_off; 
476C:  BCF    F8A.2
476E:  BCF    F93.2
....................          } 
....................          else 
4770:  BRA    4776
....................          { 
....................             EV_Desfogue_on; 
4772:  BSF    F8A.2
4774:  BCF    F93.2
....................          } 
....................          Resistencia_off; 
4776:  BCF    F8B.0
4778:  BCF    F94.0
....................          Resistencia2_off; 
477A:  BCF    F8B.1
477C:  BCF    F94.1
....................          if(Control==3) 
477E:  MOVF   x0F,W
4780:  SUBLW  03
4782:  BNZ   4786
....................          { 
....................             reset_cpu(); 
4784:  RESET
....................          } 
....................       } 
....................    }     
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................   
....................    } 
4786:  GOTO   3C06
.................... } 
478A:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
