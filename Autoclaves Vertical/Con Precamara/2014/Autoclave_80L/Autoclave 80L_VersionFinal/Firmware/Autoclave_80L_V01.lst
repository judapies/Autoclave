CCS PCH C Compiler, Version 4.104, 5967               09-ago-14 10:44

               Filename: C:\Users\Judapies\Desktop\Autoclave 80L\Firmware\Autoclave_80L_V01.lst

               ROM used: 32046 bytes (98%)
                         Largest free fragment is 722
               RAM used: 818 (40%) at main() level
                         1200 (59%) worst case
               Stack:    14 worst case (5 in main + 9 for interrupts)

*
0000:  GOTO   4144
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   23E4
0054:  BTFSS  FA0.5
0056:  GOTO   0060
005A:  BTFSC  FA1.5
005C:  GOTO   235C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV3,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
24CE:  MOVLW  03
24D0:  MOVWF  FEA
24D2:  MOVLW  9F
24D4:  MOVWF  FE9
24D6:  MOVF   FEF,W
24D8:  BZ    24F6
24DA:  MOVLW  0F
24DC:  MOVWF  01
24DE:  CLRF   00
24E0:  DECFSZ 00,F
24E2:  BRA    24E0
24E4:  DECFSZ 01,F
24E6:  BRA    24DE
24E8:  MOVLW  8F
24EA:  MOVWF  00
24EC:  DECFSZ 00,F
24EE:  BRA    24EC
24F0:  NOP   
24F2:  DECFSZ FEF,F
24F4:  BRA    24DA
24F6:  RETLW  00
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... //#ifndef FAST_GLCD 
.................... //#define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D3   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D4   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C7   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
26C6:  BCF    F94.7
26C8:  BSF    F8B.7
....................    output_low(GLCD_E); 
26CA:  BCF    F95.7
26CC:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
26CE:  BCF    F95.3
26D0:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
26D2:  BCF    F95.4
26D4:  BCF    F8C.4
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
26D6:  BCF    F95.5
26D8:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
26DA:  MOVLB  3
26DC:  CLRF   xCE
26DE:  MOVLW  C0
26E0:  MOVWF  xCF
26E2:  MOVLB  0
26E4:  RCALL  2602
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
26E6:  MOVLW  01
26E8:  MOVLB  3
26EA:  MOVWF  xCE
26EC:  MOVLW  C0
26EE:  MOVWF  xCF
26F0:  MOVLB  0
26F2:  RCALL  2602
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
26F4:  MOVLB  3
26F6:  CLRF   xCE
26F8:  MOVLW  40
26FA:  MOVWF  xCF
26FC:  MOVLB  0
26FE:  RCALL  2602
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
2700:  MOVLW  01
2702:  MOVLB  3
2704:  MOVWF  xCE
2706:  MOVLW  40
2708:  MOVWF  xCF
270A:  MOVLB  0
270C:  RCALL  2602
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
270E:  MOVLB  3
2710:  CLRF   xCE
2712:  MOVLW  B8
2714:  MOVWF  xCF
2716:  MOVLB  0
2718:  RCALL  2602
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
271A:  MOVLW  01
271C:  MOVLB  3
271E:  MOVWF  xCE
2720:  MOVLW  B8
2722:  MOVWF  xCF
2724:  MOVLB  0
2726:  RCALL  2602
....................  
....................    if(mode == ON) 
2728:  MOVLB  3
272A:  DECFSZ x9A,W
272C:  BRA    274A
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
272E:  CLRF   xCE
2730:  MOVLW  3F
2732:  MOVWF  xCF
2734:  MOVLB  0
2736:  RCALL  2602
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
2738:  MOVLW  01
273A:  MOVLB  3
273C:  MOVWF  xCE
273E:  MOVLW  3F
2740:  MOVWF  xCF
2742:  MOVLB  0
2744:  RCALL  2602
....................    } 
....................    else 
2746:  BRA    2762
2748:  MOVLB  3
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
274A:  CLRF   xCE
274C:  MOVLW  3E
274E:  MOVWF  xCF
2750:  MOVLB  0
2752:  RCALL  2602
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
2754:  MOVLW  01
2756:  MOVLB  3
2758:  MOVWF  xCE
275A:  MOVLW  3E
275C:  MOVWF  xCF
275E:  MOVLB  0
2760:  RCALL  2602
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
2762:  MOVLB  3
2764:  CLRF   x9B
2766:  MOVLB  0
2768:  RCALL  2638
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
....................    #endif 
.................... } 
276A:  GOTO   4D44 (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
*
27AC:  MOVLB  3
27AE:  BCF    xCB.0
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
27B0:  MOVF   xC7,W
27B2:  SUBLW  3F
27B4:  BC    27BC
....................    { 
....................       x -= 64; 
27B6:  MOVLW  40
27B8:  SUBWF  xC7,F
....................       side = GLCD_RIGHT; 
27BA:  BSF    xCB.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
27BC:  BCF    F95.5
27BE:  BCF    F8C.5
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
27C0:  BCF    xC7.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
27C2:  BSF    xC7.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
27C4:  MOVLW  00
27C6:  BTFSC  xCB.0
27C8:  MOVLW  01
27CA:  MOVWF  xCE
27CC:  MOVFF  3C7,3CF
27D0:  MOVLB  0
27D2:  RCALL  2602
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
27D4:  MOVLW  00
27D6:  MOVLB  3
27D8:  BTFSC  xCB.0
27DA:  MOVLW  01
27DC:  MOVWF  xCC
27DE:  RRCF   xC8,W
27E0:  MOVWF  00
27E2:  RRCF   00,F
27E4:  RRCF   00,F
27E6:  MOVLW  1F
27E8:  ANDWF  00,F
27EA:  MOVF   00,W
27EC:  ANDLW  BF
27EE:  IORLW  B8
27F0:  MOVWF  xCD
27F2:  MOVFF  3CC,3CE
27F6:  MOVWF  xCF
27F8:  MOVLB  0
27FA:  RCALL  2602
....................    output_high(GLCD_DI);                        // Set for data 
27FC:  BCF    F95.5
27FE:  BSF    F8C.5
....................    glcd_readByte(side);                         // Need two reads to get data 
2800:  MOVLW  00
2802:  MOVLB  3
2804:  BTFSC  xCB.0
2806:  MOVLW  01
2808:  MOVWF  xCD
280A:  MOVLB  0
280C:  RCALL  276E
....................    data = glcd_readByte(side);                  //  at new address 
280E:  MOVLW  00
2810:  MOVLB  3
2812:  BTFSC  xCB.0
2814:  MOVLW  01
2816:  MOVWF  xCD
2818:  MOVLB  0
281A:  RCALL  276E
281C:  MOVFF  01,3CA
....................  
....................    if(color == ON) 
2820:  MOVLB  3
2822:  DECFSZ xC9,W
2824:  BRA    2844
....................       bit_set(data, y%8);        // Turn the pixel on 
2826:  MOVF   xC8,W
2828:  ANDLW  07
282A:  MOVWF  xCC
282C:  MOVLW  01
282E:  MOVWF  00
2830:  MOVF   xCC,W
2832:  MOVWF  01
2834:  BZ    283E
2836:  BCF    FD8.0
2838:  RLCF   00,F
283A:  DECFSZ 01,F
283C:  BRA    2836
283E:  MOVF   00,W
2840:  IORWF  xCA,F
....................    else                          // or 
2842:  BRA    2862
....................       bit_clear(data, y%8);      // turn the pixel off 
2844:  MOVF   xC8,W
2846:  ANDLW  07
2848:  MOVWF  xCC
284A:  MOVLW  01
284C:  MOVWF  00
284E:  MOVF   xCC,W
2850:  MOVWF  01
2852:  BZ    285C
2854:  BCF    FD8.0
2856:  RLCF   00,F
2858:  DECFSZ 01,F
285A:  BRA    2854
285C:  MOVF   00,W
285E:  XORLW  FF
2860:  ANDWF  xCA,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
2862:  BCF    F95.5
2864:  BCF    F8C.5
....................    glcd_writeByte(side, x);      // Set the horizontal address 
2866:  MOVLW  00
2868:  BTFSC  xCB.0
286A:  MOVLW  01
286C:  MOVWF  xCE
286E:  MOVFF  3C7,3CF
2872:  MOVLB  0
2874:  RCALL  2602
....................    output_high(GLCD_DI);         // Set for data 
2876:  BCF    F95.5
2878:  BSF    F8C.5
....................    glcd_writeByte(side, data);   // Write the pixel data 
287A:  MOVLW  00
287C:  MOVLB  3
287E:  BTFSC  xCB.0
2880:  MOVLW  01
2882:  MOVWF  xCE
2884:  MOVFF  3CA,3CF
2888:  MOVLB  0
288A:  RCALL  2602
.................... } 
288C:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................       *p1++ = data; 
....................       *p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
2638:  MOVLB  3
263A:  CLRF   x9C
263C:  MOVF   x9C,W
263E:  SUBLW  07
2640:  BNC   26C2
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
2642:  BCF    F95.5
2644:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
2646:  CLRF   xCE
2648:  MOVLW  40
264A:  MOVWF  xCF
264C:  MOVLB  0
264E:  RCALL  2602
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
2650:  MOVLW  01
2652:  MOVLB  3
2654:  MOVWF  xCE
2656:  MOVLW  40
2658:  MOVWF  xCF
265A:  MOVLB  0
265C:  RCALL  2602
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
265E:  MOVLB  3
2660:  MOVF   x9C,W
2662:  IORLW  B8
2664:  MOVWF  x9E
2666:  CLRF   xCE
2668:  MOVWF  xCF
266A:  MOVLB  0
266C:  RCALL  2602
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
266E:  MOVLB  3
2670:  MOVF   x9C,W
2672:  IORLW  B8
2674:  MOVWF  x9E
2676:  MOVLW  01
2678:  MOVWF  xCE
267A:  MOVFF  39E,3CF
267E:  MOVLB  0
2680:  RCALL  2602
....................       output_high(GLCD_DI);                     // Set for data 
2682:  BCF    F95.5
2684:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
2686:  MOVLB  3
2688:  CLRF   x9D
268A:  MOVF   x9D,W
268C:  SUBLW  3F
268E:  BNC   26BE
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
2690:  MOVF   x9B,W
2692:  MULLW  FF
2694:  MOVFF  FF3,39E
2698:  CLRF   xCE
269A:  MOVFF  39E,3CF
269E:  MOVLB  0
26A0:  RCALL  2602
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
26A2:  MOVLB  3
26A4:  MOVF   x9B,W
26A6:  MULLW  FF
26A8:  MOVFF  FF3,39E
26AC:  MOVLW  01
26AE:  MOVWF  xCE
26B0:  MOVFF  39E,3CF
26B4:  MOVLB  0
26B6:  RCALL  2602
....................       } 
26B8:  MOVLB  3
26BA:  INCF   x9D,F
26BC:  BRA    268A
....................    } 
26BE:  INCF   x9C,F
26C0:  BRA    263C
.................... } 
26C2:  MOVLB  0
26C4:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
2602:  MOVLB  3
2604:  MOVF   xCE,F
2606:  BZ    260E
....................       output_high(GLCD_CS2); 
2608:  BCF    F95.4
260A:  BSF    F8C.4
....................    else 
260C:  BRA    2612
....................       output_high(GLCD_CS1); 
260E:  BCF    F95.3
2610:  BSF    F8C.3
....................  
....................    output_low(GLCD_RW);       // Set for writing 
2612:  BCF    F95.6
2614:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
2616:  CLRF   F93
2618:  MOVFF  3CF,F8A
....................    delay_cycles(1); 
261C:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
261E:  BCF    F95.7
2620:  BSF    F8C.7
....................    delay_cycles(5); 
2622:  BRA    2624
2624:  BRA    2626
2626:  NOP   
....................    output_low(GLCD_E); 
2628:  BCF    F95.7
262A:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
262C:  BCF    F95.3
262E:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
2630:  BCF    F95.4
2632:  BCF    F8C.4
.................... } 
2634:  MOVLB  0
2636:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
*
276E:  MOVLW  FF
2770:  MOVWF  F93
....................    output_high(GLCD_RW);      // Set for reading 
2772:  BCF    F95.6
2774:  BSF    F8C.6
....................  
....................    if(side)                   // Choose which side to write to 
2776:  MOVLB  3
2778:  MOVF   xCD,F
277A:  BZ    2782
....................       output_high(GLCD_CS2); 
277C:  BCF    F95.4
277E:  BSF    F8C.4
....................    else 
2780:  BRA    2786
....................       output_high(GLCD_CS1); 
2782:  BCF    F95.3
2784:  BSF    F8C.3
....................  
....................    delay_cycles(1); 
2786:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
2788:  BCF    F95.7
278A:  BSF    F8C.7
....................    delay_cycles(4); 
278C:  BRA    278E
278E:  BRA    2790
....................    data = input_b();          // Get the data from the display's output register 
2790:  MOVLW  FF
2792:  MOVWF  F93
2794:  MOVFF  F81,3CE
....................    output_low(GLCD_E); 
2798:  BCF    F95.7
279A:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
279C:  BCF    F95.3
279E:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
27A0:  BCF    F95.4
27A2:  BCF    F8C.4
....................    return data;               // Return the read data 
27A4:  MOVFF  3CE,01
.................... } 
27A8:  MOVLB  0
27AA:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
2BF2:  MOVLW  01
2BF4:  MOVLB  3
2BF6:  MOVWF  xC0
2BF8:  MOVWF  xC1
2BFA:  CLRF   xC6
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
2BFC:  MOVF   xB7,W
2BFE:  SUBWF  xB9,W
2C00:  MOVWF  xC7
2C02:  MOVF   xC7,W
2C04:  BTFSS  xC7.7
2C06:  BRA    2C0E
2C08:  MOVLW  00
2C0A:  BSF    FD8.0
2C0C:  SUBFWB xC7,W
2C0E:  CLRF   03
2C10:  MOVWF  xBE
2C12:  MOVFF  03,3BF
....................    dy = abs((signed int8)(y2 - y1)); 
2C16:  MOVF   xB8,W
2C18:  SUBWF  xBA,W
2C1A:  MOVWF  xC7
2C1C:  MOVF   xC7,W
2C1E:  BTFSS  xC7.7
2C20:  BRA    2C28
2C22:  MOVLW  00
2C24:  BSF    FD8.0
2C26:  SUBFWB xC7,W
2C28:  CLRF   03
2C2A:  MOVWF  xBC
2C2C:  MOVFF  03,3BD
....................    #endif 
....................  
....................    if(x1 > x2) 
2C30:  MOVF   xB7,W
2C32:  SUBWF  xB9,W
2C34:  BC    2C3A
....................       addx = -1; 
2C36:  MOVLW  FF
2C38:  MOVWF  xC0
....................    if(y1 > y2) 
2C3A:  MOVF   xB8,W
2C3C:  SUBWF  xBA,W
2C3E:  BC    2C44
....................       addy = -1; 
2C40:  MOVLW  FF
2C42:  MOVWF  xC1
....................  
....................    if(dx >= dy) 
2C44:  MOVF   xBD,W
2C46:  SUBWF  xBF,W
2C48:  BNC   2CC0
2C4A:  BNZ   2C52
2C4C:  MOVF   xBC,W
2C4E:  SUBWF  xBE,W
2C50:  BNC   2CC0
....................    { 
....................       dy *= 2; 
2C52:  BCF    FD8.0
2C54:  RLCF   xBC,F
2C56:  RLCF   xBD,F
....................       P = dy - dx; 
2C58:  MOVF   xBE,W
2C5A:  SUBWF  xBC,W
2C5C:  MOVWF  00
2C5E:  MOVF   xBF,W
2C60:  SUBWFB xBD,W
2C62:  MOVFF  00,3C2
2C66:  MOVWF  xC3
....................       diff = P - dx; 
2C68:  MOVF   xBE,W
2C6A:  SUBWF  xC2,W
2C6C:  MOVWF  xC4
2C6E:  MOVF   xBF,W
2C70:  SUBWFB xC3,W
2C72:  MOVWF  xC5
....................  
....................       for(; i<=dx; ++i) 
2C74:  MOVF   xBF,F
2C76:  BNZ   2C7E
2C78:  MOVF   xC6,W
2C7A:  SUBWF  xBE,W
2C7C:  BNC   2CBE
....................       { 
....................          glcd_pixel(x1, y1, color); 
2C7E:  MOVFF  3B7,3C7
2C82:  MOVFF  3B8,3C8
2C86:  MOVFF  3BB,3C9
2C8A:  MOVLB  0
2C8C:  RCALL  27AC
....................  
....................          if(P < 0) 
2C8E:  MOVLB  3
2C90:  BTFSC  xC3.7
2C92:  BRA    2C96
2C94:  BRA    2CA6
....................          { 
....................             P  += dy; 
2C96:  MOVF   xBC,W
2C98:  ADDWF  xC2,F
2C9A:  MOVF   xBD,W
2C9C:  ADDWFC xC3,F
....................             x1 += addx; 
2C9E:  MOVF   xC0,W
2CA0:  ADDWF  xB7,W
2CA2:  MOVWF  xB7
....................          } 
....................          else 
2CA4:  BRA    2CBA
....................          { 
....................             P  += diff; 
2CA6:  MOVF   xC4,W
2CA8:  ADDWF  xC2,F
2CAA:  MOVF   xC5,W
2CAC:  ADDWFC xC3,F
....................             x1 += addx; 
2CAE:  MOVF   xC0,W
2CB0:  ADDWF  xB7,W
2CB2:  MOVWF  xB7
....................             y1 += addy; 
2CB4:  MOVF   xC1,W
2CB6:  ADDWF  xB8,W
2CB8:  MOVWF  xB8
....................          } 
....................       } 
2CBA:  INCF   xC6,F
2CBC:  BRA    2C74
....................    } 
....................    else 
2CBE:  BRA    2D2C
....................    { 
....................       dx *= 2; 
2CC0:  BCF    FD8.0
2CC2:  RLCF   xBE,F
2CC4:  RLCF   xBF,F
....................       P = dx - dy; 
2CC6:  MOVF   xBC,W
2CC8:  SUBWF  xBE,W
2CCA:  MOVWF  00
2CCC:  MOVF   xBD,W
2CCE:  SUBWFB xBF,W
2CD0:  MOVFF  00,3C2
2CD4:  MOVWF  xC3
....................       diff = P - dy; 
2CD6:  MOVF   xBC,W
2CD8:  SUBWF  xC2,W
2CDA:  MOVWF  xC4
2CDC:  MOVF   xBD,W
2CDE:  SUBWFB xC3,W
2CE0:  MOVWF  xC5
....................  
....................       for(; i<=dy; ++i) 
2CE2:  MOVF   xBD,F
2CE4:  BNZ   2CEC
2CE6:  MOVF   xC6,W
2CE8:  SUBWF  xBC,W
2CEA:  BNC   2D2C
....................       { 
....................          glcd_pixel(x1, y1, color); 
2CEC:  MOVFF  3B7,3C7
2CF0:  MOVFF  3B8,3C8
2CF4:  MOVFF  3BB,3C9
2CF8:  MOVLB  0
2CFA:  RCALL  27AC
....................  
....................          if(P < 0) 
2CFC:  MOVLB  3
2CFE:  BTFSC  xC3.7
2D00:  BRA    2D04
2D02:  BRA    2D14
....................          { 
....................             P  += dx; 
2D04:  MOVF   xBE,W
2D06:  ADDWF  xC2,F
2D08:  MOVF   xBF,W
2D0A:  ADDWFC xC3,F
....................             y1 += addy; 
2D0C:  MOVF   xC1,W
2D0E:  ADDWF  xB8,W
2D10:  MOVWF  xB8
....................          } 
....................          else 
2D12:  BRA    2D28
....................          { 
....................             P  += diff; 
2D14:  MOVF   xC4,W
2D16:  ADDWF  xC2,F
2D18:  MOVF   xC5,W
2D1A:  ADDWFC xC3,F
....................             x1 += addx; 
2D1C:  MOVF   xC0,W
2D1E:  ADDWF  xB7,W
2D20:  MOVWF  xB7
....................             y1 += addy; 
2D22:  MOVF   xC1,W
2D24:  ADDWF  xB8,W
2D26:  MOVWF  xB8
....................          } 
....................       } 
2D28:  INCF   xC6,F
2D2A:  BRA    2CE2
....................    } 
.................... } 
2D2C:  MOVLB  0
2D2E:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
2D30:  MOVLB  3
2D32:  MOVF   xB0,F
2D34:  BZ    2D92
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
2D36:  MOVF   xAE,W
2D38:  SUBWF  xAC,W
2D3A:  BC    2D46
....................       { 
....................          xmin = x1; 
2D3C:  MOVFF  3AC,3B3
....................          xmax = x2; 
2D40:  MOVFF  3AE,3B4
....................       } 
....................       else 
2D44:  BRA    2D4E
....................       { 
....................          xmin = x2; 
2D46:  MOVFF  3AE,3B3
....................          xmax = x1; 
2D4A:  MOVFF  3AC,3B4
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
2D4E:  MOVF   xAF,W
2D50:  SUBWF  xAD,W
2D52:  BC    2D5E
....................       { 
....................          ymin = y1; 
2D54:  MOVFF  3AD,3B5
....................          ymax = y2; 
2D58:  MOVFF  3AF,3B6
....................       } 
....................       else 
2D5C:  BRA    2D66
....................       { 
....................          ymin = y2; 
2D5E:  MOVFF  3AF,3B5
....................          ymax = y1; 
2D62:  MOVFF  3AD,3B6
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
2D66:  MOVF   xB3,W
2D68:  SUBWF  xB4,W
2D6A:  BNC   2D90
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
2D6C:  MOVFF  3B5,3B2
2D70:  MOVF   xB2,W
2D72:  SUBWF  xB6,W
2D74:  BNC   2D8C
....................          { 
....................             glcd_pixel(xmin, i, color); 
2D76:  MOVFF  3B3,3C7
2D7A:  MOVFF  3B2,3C8
2D7E:  MOVFF  3B1,3C9
2D82:  MOVLB  0
2D84:  RCALL  27AC
....................          } 
2D86:  MOVLB  3
2D88:  INCF   xB2,F
2D8A:  BRA    2D70
....................       } 
2D8C:  INCF   xB3,F
2D8E:  BRA    2D66
....................    } 
....................    else 
2D90:  BRA    2DEE
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
2D92:  MOVFF  3AC,3B7
2D96:  MOVFF  3AD,3B8
2D9A:  MOVFF  3AE,3B9
2D9E:  MOVFF  3AD,3BA
2DA2:  MOVFF  3B1,3BB
2DA6:  MOVLB  0
2DA8:  RCALL  2BF2
....................       glcd_line(x1, y2, x2, y2, color); 
2DAA:  MOVFF  3AC,3B7
2DAE:  MOVFF  3AF,3B8
2DB2:  MOVFF  3AE,3B9
2DB6:  MOVFF  3AF,3BA
2DBA:  MOVFF  3B1,3BB
2DBE:  RCALL  2BF2
....................       glcd_line(x1, y1, x1, y2, color); 
2DC0:  MOVFF  3AC,3B7
2DC4:  MOVFF  3AD,3B8
2DC8:  MOVFF  3AC,3B9
2DCC:  MOVFF  3AF,3BA
2DD0:  MOVFF  3B1,3BB
2DD4:  RCALL  2BF2
....................       glcd_line(x2, y1, x2, y2, color); 
2DD6:  MOVFF  3AE,3B7
2DDA:  MOVFF  3AD,3B8
2DDE:  MOVFF  3AE,3B9
2DE2:  MOVFF  3AF,3BA
2DE6:  MOVFF  3B1,3BB
2DEA:  RCALL  2BF2
2DEC:  MOVLB  3
....................    } 
.................... } 
2DEE:  MOVLB  0
2DF0:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
3482:  MOVLB  3
3484:  CLRF   x9F
....................    b = radius; 
3486:  MOVFF  39C,3A0
....................    P = 1 - radius; 
348A:  MOVLW  01
348C:  BSF    FD8.0
348E:  SUBFWB x9C,W
3490:  MOVWF  xA1
....................  
....................    do 
....................    { 
....................       if(fill) 
3492:  MOVF   x9D,F
3494:  BZ    3560
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
3496:  MOVF   x9F,W
3498:  SUBWF  x9A,W
349A:  MOVWF  xA2
349C:  MOVF   xA0,W
349E:  ADDWF  x9B,W
34A0:  MOVWF  xA3
34A2:  MOVF   x9F,W
34A4:  ADDWF  x9A,W
34A6:  MOVWF  xA4
34A8:  MOVF   xA0,W
34AA:  ADDWF  x9B,W
34AC:  MOVWF  xA5
34AE:  MOVFF  3A2,3B7
34B2:  MOVFF  3A3,3B8
34B6:  MOVFF  3A4,3B9
34BA:  MOVWF  xBA
34BC:  MOVFF  39E,3BB
34C0:  MOVLB  0
34C2:  CALL   2BF2
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
34C6:  MOVLB  3
34C8:  MOVF   x9F,W
34CA:  SUBWF  x9A,W
34CC:  MOVWF  xA2
34CE:  MOVF   xA0,W
34D0:  SUBWF  x9B,W
34D2:  MOVWF  xA3
34D4:  MOVF   x9F,W
34D6:  ADDWF  x9A,W
34D8:  MOVWF  xA4
34DA:  MOVF   xA0,W
34DC:  SUBWF  x9B,W
34DE:  MOVWF  xA5
34E0:  MOVFF  3A2,3B7
34E4:  MOVFF  3A3,3B8
34E8:  MOVFF  3A4,3B9
34EC:  MOVWF  xBA
34EE:  MOVFF  39E,3BB
34F2:  MOVLB  0
34F4:  CALL   2BF2
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
34F8:  MOVLB  3
34FA:  MOVF   xA0,W
34FC:  SUBWF  x9A,W
34FE:  MOVWF  xA2
3500:  MOVF   x9F,W
3502:  ADDWF  x9B,W
3504:  MOVWF  xA3
3506:  MOVF   xA0,W
3508:  ADDWF  x9A,W
350A:  MOVWF  xA4
350C:  MOVF   x9F,W
350E:  ADDWF  x9B,W
3510:  MOVWF  xA5
3512:  MOVFF  3A2,3B7
3516:  MOVFF  3A3,3B8
351A:  MOVFF  3A4,3B9
351E:  MOVWF  xBA
3520:  MOVFF  39E,3BB
3524:  MOVLB  0
3526:  CALL   2BF2
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
352A:  MOVLB  3
352C:  MOVF   xA0,W
352E:  SUBWF  x9A,W
3530:  MOVWF  xA2
3532:  MOVF   x9F,W
3534:  SUBWF  x9B,W
3536:  MOVWF  xA3
3538:  MOVF   xA0,W
353A:  ADDWF  x9A,W
353C:  MOVWF  xA4
353E:  MOVF   x9F,W
3540:  SUBWF  x9B,W
3542:  MOVWF  xA5
3544:  MOVFF  3A2,3B7
3548:  MOVFF  3A3,3B8
354C:  MOVFF  3A4,3B9
3550:  MOVWF  xBA
3552:  MOVFF  39E,3BB
3556:  MOVLB  0
3558:  CALL   2BF2
....................       } 
....................       else 
355C:  BRA    364E
355E:  MOVLB  3
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
3560:  MOVF   x9A,W
3562:  ADDWF  x9F,W
3564:  MOVWF  xA2
3566:  MOVF   x9B,W
3568:  ADDWF  xA0,W
356A:  MOVWF  xA3
356C:  MOVFF  3A2,3C7
3570:  MOVWF  xC8
3572:  MOVFF  39E,3C9
3576:  MOVLB  0
3578:  CALL   27AC
....................          glcd_pixel(b+x, a+y, color); 
357C:  MOVLB  3
357E:  MOVF   x9A,W
3580:  ADDWF  xA0,W
3582:  MOVWF  xA2
3584:  MOVF   x9B,W
3586:  ADDWF  x9F,W
3588:  MOVWF  xA3
358A:  MOVFF  3A2,3C7
358E:  MOVWF  xC8
3590:  MOVFF  39E,3C9
3594:  MOVLB  0
3596:  CALL   27AC
....................          glcd_pixel(x-a, b+y, color); 
359A:  MOVLB  3
359C:  MOVF   x9F,W
359E:  SUBWF  x9A,W
35A0:  MOVWF  xA2
35A2:  MOVF   x9B,W
35A4:  ADDWF  xA0,W
35A6:  MOVWF  xA3
35A8:  MOVFF  3A2,3C7
35AC:  MOVWF  xC8
35AE:  MOVFF  39E,3C9
35B2:  MOVLB  0
35B4:  CALL   27AC
....................          glcd_pixel(x-b, a+y, color); 
35B8:  MOVLB  3
35BA:  MOVF   xA0,W
35BC:  SUBWF  x9A,W
35BE:  MOVWF  xA2
35C0:  MOVF   x9B,W
35C2:  ADDWF  x9F,W
35C4:  MOVWF  xA3
35C6:  MOVFF  3A2,3C7
35CA:  MOVWF  xC8
35CC:  MOVFF  39E,3C9
35D0:  MOVLB  0
35D2:  CALL   27AC
....................          glcd_pixel(b+x, y-a, color); 
35D6:  MOVLB  3
35D8:  MOVF   x9A,W
35DA:  ADDWF  xA0,W
35DC:  MOVWF  xA2
35DE:  MOVF   x9F,W
35E0:  SUBWF  x9B,W
35E2:  MOVWF  xA3
35E4:  MOVFF  3A2,3C7
35E8:  MOVWF  xC8
35EA:  MOVFF  39E,3C9
35EE:  MOVLB  0
35F0:  CALL   27AC
....................          glcd_pixel(a+x, y-b, color); 
35F4:  MOVLB  3
35F6:  MOVF   x9A,W
35F8:  ADDWF  x9F,W
35FA:  MOVWF  xA2
35FC:  MOVF   xA0,W
35FE:  SUBWF  x9B,W
3600:  MOVWF  xA3
3602:  MOVFF  3A2,3C7
3606:  MOVWF  xC8
3608:  MOVFF  39E,3C9
360C:  MOVLB  0
360E:  CALL   27AC
....................          glcd_pixel(x-a, y-b, color); 
3612:  MOVLB  3
3614:  MOVF   x9F,W
3616:  SUBWF  x9A,W
3618:  MOVWF  xA2
361A:  MOVF   xA0,W
361C:  SUBWF  x9B,W
361E:  MOVWF  xA3
3620:  MOVFF  3A2,3C7
3624:  MOVWF  xC8
3626:  MOVFF  39E,3C9
362A:  MOVLB  0
362C:  CALL   27AC
....................          glcd_pixel(x-b, y-a, color); 
3630:  MOVLB  3
3632:  MOVF   xA0,W
3634:  SUBWF  x9A,W
3636:  MOVWF  xA2
3638:  MOVF   x9F,W
363A:  SUBWF  x9B,W
363C:  MOVWF  xA3
363E:  MOVFF  3A2,3C7
3642:  MOVWF  xC8
3644:  MOVFF  39E,3C9
3648:  MOVLB  0
364A:  CALL   27AC
....................       } 
....................  
....................       if(P < 0) 
364E:  MOVLB  3
3650:  BTFSC  xA1.7
3652:  BRA    3656
3654:  BRA    3672
....................          P += 3 + 2 * a++; 
3656:  MOVF   x9F,W
3658:  INCF   x9F,F
365A:  MOVWF  xA2
365C:  MOVLW  02
365E:  MOVWF  xA3
3660:  MOVFF  3A2,3A4
3664:  MOVLB  0
3666:  RCALL  3434
3668:  MOVF   01,W
366A:  ADDLW  03
366C:  MOVLB  3
366E:  ADDWF  xA1,F
....................       else 
3670:  BRA    3694
....................          P += 5 + 2 * (a++ - b--); 
3672:  MOVF   x9F,W
3674:  INCF   x9F,F
3676:  MOVWF  xA2
3678:  MOVF   xA0,W
367A:  DECF   xA0,F
367C:  SUBWF  xA2,W
367E:  MOVWF  xA2
3680:  MOVLW  02
3682:  MOVWF  xA3
3684:  MOVFF  3A2,3A4
3688:  MOVLB  0
368A:  RCALL  3434
368C:  MOVF   01,W
368E:  ADDLW  05
3690:  MOVLB  3
3692:  ADDWF  xA1,F
....................     } while(a <= b); 
3694:  MOVF   x9F,W
3696:  XORLW  80
3698:  MOVWF  00
369A:  MOVF   xA0,W
369C:  XORLW  80
369E:  SUBWF  00,W
36A0:  BTFSC  FD8.2
36A2:  BRA    3492
36A4:  BTFSS  FD8.0
36A6:  BRA    3492
.................... } 
36A8:  MOVLB  0
36AA:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
288E:  MOVFF  3AD,03
2892:  MOVLB  3
2894:  MOVFF  3AC,FE9
2898:  MOVFF  3AD,FEA
289C:  MOVF   FEF,F
289E:  BTFSC  FD8.2
28A0:  BRA    2A42
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
28A2:  MOVFF  3AD,03
28A6:  MOVFF  3AC,FE9
28AA:  MOVFF  3AD,FEA
28AE:  MOVF   FEF,W
28B0:  SUBLW  52
28B2:  BNC   2902
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
28B4:  MOVFF  3AD,03
28B8:  MOVFF  3AC,FE9
28BC:  MOVFF  3AD,FEA
28C0:  MOVLW  20
28C2:  SUBWF  FEF,W
28C4:  MULLW  05
28C6:  MOVF   FF3,W
28C8:  CLRF   03
28CA:  MOVWF  xB9
28CC:  MOVLW  03
28CE:  MOVWF  FEA
28D0:  MOVLW  B4
28D2:  MOVWF  FE9
28D4:  CLRF   xBD
28D6:  MOVFF  3B9,3BC
28DA:  MOVFF  FF2,3BA
28DE:  BCF    FF2.7
28E0:  MOVLW  05
28E2:  MOVWF  01
28E4:  CLRF   FF7
28E6:  MOVF   xB9,W
28E8:  MOVLB  0
28EA:  CALL   00A2
28EE:  TBLRD*-
28F0:  TBLRD*+
28F2:  MOVFF  FF5,FEE
28F6:  DECFSZ 01,F
28F8:  BRA    28F0
28FA:  MOVLB  3
28FC:  BTFSC  xBA.7
28FE:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
2900:  BRA    296C
2902:  MOVFF  3AD,03
2906:  MOVFF  3AC,FE9
290A:  MOVFF  3AD,FEA
290E:  MOVF   FEF,W
2910:  SUBLW  7E
2912:  BNC   2962
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
2914:  MOVFF  3AD,03
2918:  MOVFF  3AC,FE9
291C:  MOVFF  3AD,FEA
2920:  MOVLW  53
2922:  SUBWF  FEF,W
2924:  MULLW  05
2926:  MOVF   FF3,W
2928:  CLRF   03
292A:  MOVWF  xB9
292C:  MOVLW  03
292E:  MOVWF  FEA
2930:  MOVLW  B4
2932:  MOVWF  FE9
2934:  CLRF   xBD
2936:  MOVFF  3B9,3BC
293A:  MOVFF  FF2,3BA
293E:  BCF    FF2.7
2940:  MOVLW  05
2942:  MOVWF  01
2944:  CLRF   FF7
2946:  MOVF   xB9,W
2948:  MOVLB  0
294A:  CALL   01BC
294E:  TBLRD*-
2950:  TBLRD*+
2952:  MOVFF  FF5,FEE
2956:  DECFSZ 01,F
2958:  BRA    2950
295A:  MOVLB  3
295C:  BTFSC  xBA.7
295E:  BSF    FF2.7
....................       else 
2960:  BRA    296C
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
2962:  CLRF   xB4
2964:  CLRF   xB5
2966:  CLRF   xB6
2968:  CLRF   xB7
296A:  CLRF   xB8
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
296C:  MOVFF  3AD,03
2970:  MOVF   xAC,W
2972:  MOVWF  FE9
2974:  MOVFF  03,FEA
2978:  MOVF   FEF,W
297A:  XORLW  0A
297C:  MOVLB  0
297E:  BZ    2986
2980:  XORLW  07
2982:  BZ    2996
2984:  BRA    299C
....................          case '\n': 
....................             y += 7*size + 1; 
2986:  MOVLB  3
2988:  MOVF   xAE,W
298A:  MULLW  07
298C:  MOVF   FF3,W
298E:  ADDLW  01
2990:  ADDWF  xAB,F
....................             continue; 
2992:  BRA    2A34
2994:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
2996:  MOVLB  3
2998:  CLRF   xAA
....................             continue; 
299A:  BRA    2A34
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
299C:  MOVLB  3
299E:  MOVF   xAE,W
29A0:  MULLW  05
29A2:  MOVF   FF3,W
29A4:  ADDWF  xAA,W
29A6:  SUBLW  7F
29A8:  BC    29B6
....................       { 
....................          x = 0;                           // Set x at far left position 
29AA:  CLRF   xAA
....................          y += 7*size + 1;                 // Set y at next position down 
29AC:  MOVF   xAE,W
29AE:  MULLW  07
29B0:  MOVF   FF3,W
29B2:  ADDLW  01
29B4:  ADDWF  xAB,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
29B6:  CLRF   xB0
29B8:  MOVF   xB0,W
29BA:  SUBLW  04
29BC:  BNC   2A34
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
29BE:  CLRF   xB1
29C0:  MOVF   xB1,W
29C2:  SUBLW  06
29C4:  BNC   2A2C
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
29C6:  CLRF   03
29C8:  MOVF   xB0,W
29CA:  ADDLW  B4
29CC:  MOVWF  FE9
29CE:  MOVLW  03
29D0:  ADDWFC 03,W
29D2:  MOVWF  FEA
29D4:  MOVFF  FEF,3B9
29D8:  MOVFF  3B9,00
29DC:  MOVF   xB1,W
29DE:  MOVWF  01
29E0:  BZ    29EA
29E2:  BCF    FD8.0
29E4:  RRCF   00,F
29E6:  DECFSZ 01,F
29E8:  BRA    29E2
29EA:  BTFSS  00.0
29EC:  BRA    2A28
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
29EE:  CLRF   xB2
29F0:  MOVF   xAE,W
29F2:  SUBWF  xB2,W
29F4:  BC    2A28
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
29F6:  CLRF   xB3
29F8:  MOVF   xAE,W
29FA:  SUBWF  xB3,W
29FC:  BC    2A24
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
29FE:  MOVF   xB3,W
2A00:  ADDWF  xAA,W
2A02:  MOVWF  xB9
2A04:  MOVF   xB1,W
2A06:  MULWF  xAE
2A08:  MOVF   FF3,W
2A0A:  ADDWF  xAB,W
2A0C:  ADDWF  xB2,W
2A0E:  MOVWF  xBA
2A10:  MOVFF  3B9,3C7
2A14:  MOVWF  xC8
2A16:  MOVFF  3AF,3C9
2A1A:  MOVLB  0
2A1C:  RCALL  27AC
....................                   } 
2A1E:  MOVLB  3
2A20:  INCF   xB3,F
2A22:  BRA    29F8
....................                } 
2A24:  INCF   xB2,F
2A26:  BRA    29F0
....................             } 
....................          } 
2A28:  INCF   xB1,F
2A2A:  BRA    29C0
....................       } 
2A2C:  INCF   xB0,F
2A2E:  MOVF   xAE,W
2A30:  ADDWF  xAA,F
2A32:  BRA    29B8
....................    } 
2A34:  INCF   xAC,F
2A36:  BTFSC  FD8.2
2A38:  INCF   xAD,F
2A3A:  INCF   xAA,F
2A3C:  MOVLB  0
2A3E:  BRA    288E
2A40:  MOVLB  3
.................... } 
2A42:  MOVLB  0
2A44:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A1) 
.................... #define   DOWN          input(PIN_A2) 
.................... #define   RIGHT         input(PIN_A3) 
.................... #define   LEFT          input(PIN_A5) 
.................... #define   STOP          !input(PIN_E0) 
.................... #define   PRESOSTATO    input(PIN_E1) 
.................... #define   PUERTA        !input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Camara_OUT_on     output_bit(PIN_C0,1) 
.................... #define   Camara_OUT_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia_off   output_bit(PIN_C1,0) 
.................... #define   Camara_IN_on      output_bit(PIN_C2,1) 
.................... #define   Camara_IN_off     output_bit(PIN_C2,0) 
.................... #define   Piloto_Stop_on    output_bit(PIN_D1,1) 
.................... #define   Piloto_Stop_off   output_bit(PIN_D1,0) 
.................... #define   Piloto_Fc_on      output_bit(PIN_D0,1) 
.................... #define   Piloto_Fc_off     output_bit(PIN_D0,0) 
.................... #define   Piloto_Puerta_on  output_bit(PIN_D2,1) 
.................... #define   Piloto_Puerta_off output_bit(PIN_D2,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
36B4:  CLRF   03
36B6:  MOVLB  3
36B8:  MOVF   x9A,W
36BA:  ADDLW  70
36BC:  MOVWF  FE9
36BE:  MOVLW  0F
36C0:  ADDWFC 03,W
36C2:  MOVWF  FEA
36C4:  MOVF   FEF,F
36C6:  BZ    36E2
36C8:  MOVF   x9A,W
36CA:  MULLW  08
36CC:  MOVF   FF3,W
36CE:  CLRF   x9C
36D0:  MOVWF  x9B
36D2:  MOVWF  FE9
36D4:  MOVLW  04
36D6:  ADDWF  x9C,W
36D8:  MOVWF  FEA
36DA:  MOVFF  FEF,39B
36DE:  BTFSS  x9B.7
36E0:  BRA    36E6
36E2:  MOVLW  00
36E4:  BRA    36E8
36E6:  MOVLW  01
36E8:  MOVWF  01
.................... } 
36EA:  MOVLB  0
36EC:  GOTO   6612 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
206E:  CLRF   03
2070:  MOVLB  3
2072:  MOVF   xD8,W
2074:  ADDLW  70
2076:  MOVWF  FE9
2078:  MOVLW  0F
207A:  ADDWFC 03,W
207C:  MOVWF  FEA
207E:  MOVF   FEF,F
2080:  BZ    20A6
2082:  MOVF   xD8,W
2084:  MULLW  08
2086:  MOVF   FF3,W
2088:  CLRF   xDA
208A:  MOVWF  xD9
208C:  MOVLW  04
208E:  ADDWF  xD9,F
2090:  MOVLW  00
2092:  ADDWFC xDA,F
2094:  MOVFF  3D9,FE9
2098:  MOVLW  04
209A:  ADDWF  xDA,W
209C:  MOVWF  FEA
209E:  MOVFF  FEF,3D9
20A2:  BTFSS  xD9.7
20A4:  BRA    20AA
20A6:  MOVLW  00
20A8:  BRA    20AC
20AA:  MOVLW  01
20AC:  MOVWF  01
.................... } 
20AE:  MOVLB  0
20B0:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
2582:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
2584:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
2586:  MOVLW  08
2588:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
258A:  MOVF   F94,W
258C:  IORLW  30
258E:  MOVLB  3
2590:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
2592:  CLRF   1C
2594:  CLRF   16
2596:  BTFSC  FF2.7
2598:  BSF    16.7
259A:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
259C:  MOVLB  0
259E:  CALL   1966
25A2:  BTFSC  16.7
25A4:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
25A6:  GOTO   25AC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
25B0:  CLRF   16
25B2:  BTFSC  FF2.7
25B4:  BSF    16.7
25B6:  BCF    FF2.7
....................    usb_token_reset(); 
25B8:  CALL   1966
25BC:  BTFSC  16.7
25BE:  BSF    FF2.7
....................    UCON = 0; 
25C0:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
25C2:  MOVLW  14
25C4:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
25C6:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
25C8:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
25CA:  MOVLW  01
25CC:  MOVWF  1C
.................... } 
25CE:  GOTO   25D8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
25AA:  BRA    2582
.................... } 
25AC:  GOTO   25F6 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
25D2:  BTFSC  F6D.3
25D4:  BRA    25D8
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
25D6:  BRA    25B0
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
25D8:  DECFSZ 1C,W
25DA:  BRA    25F2
25DC:  BTFSC  F6D.5
25DE:  BRA    25F2
....................    { 
....................       UIR=0; 
25E0:  CLRF   F68
....................       UIE=0; 
25E2:  CLRF   F69
....................       enable_interrupts(INT_USB); 
25E4:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
25E6:  MOVLW  C0
25E8:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
25EA:  MOVLW  11
25EC:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
25EE:  MOVLW  02
25F0:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
25F2:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
25F4:  BRA    25AA
....................  
....................    do  
....................    { 
....................       usb_task(); 
25F6:  RCALL  25D2
....................    } while (usb_state != USB_STATE_POWERED); 
25F8:  MOVF   1C,W
25FA:  SUBLW  02
25FC:  BNZ   25F6
.................... } 
25FE:  GOTO   4D34 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
20B2:  MOVFF  3D3,3D8
20B6:  RCALL  206E
20B8:  MOVF   01,F
20BA:  BZ    2184
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
20BC:  MOVLB  3
20BE:  MOVF   xD3,W
20C0:  MULLW  08
20C2:  MOVF   FF3,W
20C4:  CLRF   xD9
20C6:  MOVWF  xD8
20C8:  MOVLW  04
20CA:  ADDWF  xD8,F
20CC:  MOVLW  00
20CE:  ADDWFC xD9,F
20D0:  MOVLW  01
20D2:  ADDWF  xD8,W
20D4:  MOVWF  01
20D6:  MOVLW  00
20D8:  ADDWFC xD9,W
20DA:  MOVWF  03
20DC:  MOVFF  01,FE9
20E0:  MOVLW  04
20E2:  ADDWF  03,W
20E4:  MOVWF  FEA
20E6:  MOVFF  3D4,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
20EA:  MOVF   xD6,W
20EC:  SUBLW  02
20EE:  BNZ   211E
....................       { 
....................          i = EP_BDxST_I(endpoint); 
20F0:  MOVF   xD3,W
20F2:  MULLW  08
20F4:  MOVF   FF3,W
20F6:  CLRF   xD9
20F8:  MOVWF  xD8
20FA:  MOVLW  04
20FC:  ADDWF  xD8,F
20FE:  MOVLW  00
2100:  ADDWFC xD9,F
2102:  MOVFF  3D8,FE9
2106:  MOVLW  04
2108:  ADDWF  xD9,W
210A:  MOVWF  FEA
210C:  MOVFF  FEF,3D7
....................          if (bit_test(i,6)) 
2110:  BTFSS  xD7.6
2112:  BRA    2118
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
2114:  CLRF   xD6
....................          else 
2116:  BRA    211C
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
2118:  MOVLW  01
211A:  MOVWF  xD6
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
211C:  BRA    2144
211E:  MOVF   xD6,W
2120:  SUBLW  04
2122:  BNZ   2144
....................       { 
....................          i = EP_BDxST_O(endpoint); 
2124:  MOVF   xD3,W
2126:  MULLW  08
2128:  MOVF   FF3,W
212A:  CLRF   xD9
212C:  MOVWF  FE9
212E:  MOVLW  04
2130:  ADDWF  xD9,W
2132:  MOVWF  FEA
2134:  MOVFF  FEF,3D7
....................          if (bit_test(i,6)) 
2138:  BTFSS  xD7.6
213A:  BRA    2142
....................             tgl = USB_DTS_DATA1; 
213C:  MOVLW  01
213E:  MOVWF  xD6
....................          else 
2140:  BRA    2144
....................             tgl = USB_DTS_DATA0; 
2142:  CLRF   xD6
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
2144:  DECFSZ xD6,W
2146:  BRA    214E
....................          i=0xC8;  //DATA1, UOWN 
2148:  MOVLW  C8
214A:  MOVWF  xD7
....................       else //if (tgl == USB_DTS_DATA0)  
214C:  BRA    2152
....................          i=0x88; //DATA0, UOWN 
214E:  MOVLW  88
2150:  MOVWF  xD7
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
2152:  BTFSC  xD5.0
2154:  BSF    xD7.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
2156:  BTFSC  xD5.1
2158:  BSF    xD7.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
215A:  MOVF   xD3,W
215C:  MULLW  08
215E:  MOVF   FF3,W
2160:  CLRF   xD9
2162:  MOVWF  xD8
2164:  MOVLW  04
2166:  ADDWF  xD8,F
2168:  MOVLW  00
216A:  ADDWFC xD9,F
216C:  MOVFF  3D8,FE9
2170:  MOVLW  04
2172:  ADDWF  xD9,W
2174:  MOVWF  FEA
2176:  MOVFF  3D7,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
217A:  MOVLW  01
217C:  MOVWF  01
217E:  BRA    218A
....................    } 
....................    else  
2180:  BRA    2182
2182:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
2184:  MOVLW  00
2186:  MOVWF  01
2188:  MOVLB  3
.................... } 
218A:  MOVLB  0
218C:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
3BAE:  CLRF   16
3BB0:  BTFSC  FF2.7
3BB2:  BSF    16.7
3BB4:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
3BB6:  MOVFF  39A,3D8
3BBA:  CALL   206E
3BBE:  BTFSC  16.7
3BC0:  BSF    FF2.7
3BC2:  MOVF   01,F
3BC4:  BZ    3C56
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
3BC6:  MOVLB  3
3BC8:  MOVF   x9A,W
3BCA:  MULLW  08
3BCC:  MOVF   FF3,W
3BCE:  CLRF   xA3
3BD0:  MOVWF  xA2
3BD2:  MOVLW  04
3BD4:  ADDWF  xA2,F
3BD6:  MOVLW  00
3BD8:  ADDWFC xA3,F
3BDA:  MOVLW  02
3BDC:  ADDWF  xA2,W
3BDE:  MOVWF  01
3BE0:  MOVLW  00
3BE2:  ADDWFC xA3,W
3BE4:  MOVWF  03
3BE6:  MOVFF  01,FE9
3BEA:  MOVLW  04
3BEC:  ADDWF  03,W
3BEE:  MOVWF  FEA
3BF0:  MOVFF  FEC,03
3BF4:  MOVF   FED,F
3BF6:  MOVFF  FEF,3A0
3BFA:  MOVFF  03,3A1
....................       memcpy(buff_add, ptr, len);      
3BFE:  MOVFF  3A1,FEA
3C02:  MOVFF  3A0,FE9
3C06:  MOVFF  39C,FE2
3C0A:  MOVFF  39B,FE1
3C0E:  MOVFF  39E,02
3C12:  MOVFF  39D,01
3C16:  MOVF   01,F
3C18:  BZ    3C1E
3C1A:  INCF   02,F
3C1C:  BRA    3C22
3C1E:  MOVF   02,F
3C20:  BZ    3C2E
3C22:  MOVFF  FE6,FEE
3C26:  DECFSZ 01,F
3C28:  BRA    3C22
3C2A:  DECFSZ 02,F
3C2C:  BRA    3C22
3C2E:  CLRF   16
3C30:  BTFSC  FF2.7
3C32:  BSF    16.7
3C34:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
3C36:  MOVFF  39A,3D3
3C3A:  MOVFF  39E,3D5
3C3E:  MOVFF  39D,3D4
3C42:  MOVFF  39F,3D6
3C46:  MOVLB  0
3C48:  CALL   20B2
3C4C:  BTFSC  16.7
3C4E:  BSF    FF2.7
3C50:  MOVF   01,W
3C52:  BRA    3C5A
....................    } 
....................    else  
3C54:  BRA    3C56
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
3C56:  MOVLW  00
3C58:  MOVWF  01
.................... } 
3C5A:  GOTO   690C (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
1FA4:  MOVLB  3
1FA6:  MOVF   xD3,W
1FA8:  MULLW  08
1FAA:  MOVF   FF3,W
1FAC:  CLRF   xD9
1FAE:  MOVWF  FE9
1FB0:  MOVLW  04
1FB2:  ADDWF  xD9,W
1FB4:  MOVWF  FEA
1FB6:  MOVFF  FEF,3D5
....................    if (tgl == USB_DTS_TOGGLE)  
1FBA:  MOVF   xD4,W
1FBC:  SUBLW  02
1FBE:  BNZ   1FCC
....................    { 
....................       if (bit_test(i,6)) 
1FC0:  BTFSS  xD5.6
1FC2:  BRA    1FC8
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
1FC4:  CLRF   xD4
....................       else 
1FC6:  BRA    1FCC
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
1FC8:  MOVLW  01
1FCA:  MOVWF  xD4
....................    } 
....................    if (tgl == USB_DTS_STALL)  
1FCC:  MOVF   xD4,W
1FCE:  SUBLW  03
1FD0:  BNZ   1FF8
....................    { 
....................       i = 0x84; 
1FD2:  MOVLW  84
1FD4:  MOVWF  xD5
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
1FD6:  MOVF   xD3,W
1FD8:  MULLW  08
1FDA:  MOVF   FF3,W
1FDC:  CLRF   xD9
1FDE:  MOVWF  xD8
1FE0:  MOVLW  04
1FE2:  ADDWF  xD8,F
1FE4:  MOVLW  00
1FE6:  ADDWFC xD9,F
1FE8:  MOVFF  3D8,FE9
1FEC:  MOVLW  04
1FEE:  ADDWF  xD9,W
1FF0:  MOVWF  FEA
1FF2:  MOVLW  84
1FF4:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
1FF6:  BRA    2006
1FF8:  DECFSZ xD4,W
1FFA:  BRA    2002
....................       i = 0xC8;  //DATA1, UOWN 
1FFC:  MOVLW  C8
1FFE:  MOVWF  xD5
....................    else //if (tgl == USB_DTS_DATA0)  
2000:  BRA    2006
....................       i = 0x88; //DATA0, UOWN 
2002:  MOVLW  88
2004:  MOVWF  xD5
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
2006:  BCF    FD8.0
2008:  RLCF   xD3,W
200A:  CLRF   03
200C:  MOVFF  FF2,3D8
2010:  BCF    FF2.7
2012:  MOVLB  0
2014:  CALL   174A
2018:  TBLRD*+
201A:  MOVFF  FF5,03
201E:  MOVLB  3
2020:  BTFSC  xD8.7
2022:  BSF    FF2.7
2024:  MOVWF  xD6
2026:  MOVFF  03,3D7
....................    EP_BDxCNT_O(endpoint) = len; 
202A:  MOVF   xD3,W
202C:  MULLW  08
202E:  MOVF   FF3,W
2030:  CLRF   xD9
2032:  MOVWF  xD8
2034:  MOVLW  01
2036:  ADDWF  xD8,W
2038:  MOVWF  01
203A:  MOVLW  00
203C:  ADDWFC xD9,W
203E:  MOVWF  03
2040:  MOVFF  01,FE9
2044:  MOVLW  04
2046:  ADDWF  03,W
2048:  MOVWF  FEA
204A:  MOVFF  3D6,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
204E:  BTFSC  xD7.0
2050:  BSF    xD5.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
2052:  BTFSC  xD7.1
2054:  BSF    xD5.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
2056:  MOVF   xD3,W
2058:  MULLW  08
205A:  MOVF   FF3,W
205C:  CLRF   xD9
205E:  MOVWF  FE9
2060:  MOVLW  04
2062:  ADDWF  xD9,W
2064:  MOVWF  FEA
2066:  MOVFF  3D5,FEF
.................... } 
206A:  MOVLB  0
206C:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
36F0:  MOVLB  3
36F2:  MOVF   x9F,W
36F4:  MULLW  08
36F6:  MOVF   FF3,W
36F8:  CLRF   xAA
36FA:  MOVWF  xA9
36FC:  MOVLW  02
36FE:  ADDWF  xA9,W
3700:  MOVWF  01
3702:  MOVLW  00
3704:  ADDWFC xAA,W
3706:  MOVWF  03
3708:  MOVFF  01,FE9
370C:  MOVLW  04
370E:  ADDWF  03,W
3710:  MOVWF  FEA
3712:  MOVFF  FEC,03
3716:  MOVF   FED,F
3718:  MOVFF  FEF,3A4
371C:  MOVFF  03,3A5
....................    i = EP_BDxCNT_O(endpoint); 
3720:  MOVF   x9F,W
3722:  MULLW  08
3724:  MOVF   FF3,W
3726:  CLRF   xAA
3728:  MOVWF  xA9
372A:  MOVLW  01
372C:  ADDWF  xA9,W
372E:  MOVWF  01
3730:  MOVLW  00
3732:  ADDWFC xAA,W
3734:  MOVWF  03
3736:  MOVFF  01,FE9
373A:  MOVLW  04
373C:  ADDWF  03,W
373E:  MOVWF  FEA
3740:  MOVF   FEF,W
3742:  CLRF   03
3744:  MOVWF  xA7
3746:  MOVFF  03,3A8
....................    st = EP_BDxST_O(endpoint); 
374A:  MOVF   x9F,W
374C:  MULLW  08
374E:  MOVF   FF3,W
3750:  CLRF   xAA
3752:  MOVWF  FE9
3754:  MOVLW  04
3756:  ADDWF  xAA,W
3758:  MOVWF  FEA
375A:  MOVFF  FEF,3A6
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
375E:  BTFSC  xA6.0
3760:  BSF    xA8.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
3762:  BTFSC  xA6.1
3764:  BSF    xA8.1
....................  
....................    if (i < max) {max = i;} 
3766:  MOVF   xA8,W
3768:  SUBWF  xA3,W
376A:  BNC   377C
376C:  BNZ   3774
376E:  MOVF   xA2,W
3770:  SUBWF  xA7,W
3772:  BC    377C
3774:  MOVFF  3A8,3A3
3778:  MOVFF  3A7,3A2
....................     
....................    memcpy(ptr, al ,max); 
377C:  MOVFF  3A1,FEA
3780:  MOVFF  3A0,FE9
3784:  MOVFF  3A5,FE2
3788:  MOVFF  3A4,FE1
378C:  MOVFF  3A3,02
3790:  MOVFF  3A2,01
3794:  MOVF   01,F
3796:  BZ    379C
3798:  INCF   02,F
379A:  BRA    37A0
379C:  MOVF   02,F
379E:  BZ    37AC
37A0:  MOVFF  FE6,FEE
37A4:  DECFSZ 01,F
37A6:  BRA    37A0
37A8:  DECFSZ 02,F
37AA:  BRA    37A0
....................  
....................    return(max); 
37AC:  MOVFF  3A2,01
37B0:  MOVFF  3A3,02
.................... } 
37B4:  MOVLB  0
37B6:  GOTO   37D0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
37BA:  MOVFF  39A,39F
37BE:  MOVFF  39C,3A1
37C2:  MOVFF  39B,3A0
37C6:  MOVFF  39E,3A3
37CA:  MOVFF  39D,3A2
37CE:  BRA    36F0
37D0:  MOVFF  02,39E
37D4:  MOVFF  01,39D
37D8:  CLRF   16
37DA:  BTFSC  FF2.7
37DC:  BSF    16.7
37DE:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
37E0:  MOVFF  39A,3D3
37E4:  MOVLW  02
37E6:  MOVLB  3
37E8:  MOVWF  xD4
37EA:  MOVLB  0
37EC:  CALL   1FA4
37F0:  BTFSC  16.7
37F2:  BSF    FF2.7
....................  
....................    return(max); 
37F4:  MOVLB  3
37F6:  MOVFF  39D,01
37FA:  MOVFF  39E,02
.................... } 
37FE:  MOVLB  0
3800:  GOTO   6630 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1E6A:  MOVLB  3
1E6C:  BCF    xD4.0
1E6E:  BTFSC  xD3.7
1E70:  BSF    xD4.0
....................    endpoint &= 0x7F; 
1E72:  BCF    xD3.7
....................     
....................    if (direction)  
1E74:  BTFSS  xD4.0
1E76:  BRA    1E9A
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
1E78:  MOVF   xD3,W
1E7A:  MULLW  08
1E7C:  MOVF   FF3,W
1E7E:  CLRF   xD6
1E80:  MOVWF  xD5
1E82:  MOVLW  04
1E84:  ADDWF  xD5,F
1E86:  MOVLW  00
1E88:  ADDWFC xD6,F
1E8A:  MOVFF  3D5,FE9
1E8E:  MOVLW  04
1E90:  ADDWF  xD6,W
1E92:  MOVWF  FEA
1E94:  MOVLW  84
1E96:  MOVWF  FEF
....................    } 
....................    else  
1E98:  BRA    1EAE
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
1E9A:  MOVF   xD3,W
1E9C:  MULLW  08
1E9E:  MOVF   FF3,W
1EA0:  CLRF   xD6
1EA2:  MOVWF  FE9
1EA4:  MOVLW  04
1EA6:  ADDWF  xD6,W
1EA8:  MOVWF  FEA
1EAA:  MOVLW  84
1EAC:  MOVWF  FEF
....................    } 
.................... } 
1EAE:  MOVLB  0
1EB0:  GOTO   1F42 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1E22:  MOVLB  3
1E24:  BCF    xD4.0
1E26:  BTFSC  xD3.7
1E28:  BSF    xD4.0
....................    endpoint &= 0x7F; 
1E2A:  BCF    xD3.7
....................     
....................    if (direction)  
1E2C:  BTFSS  xD4.0
1E2E:  BRA    1E52
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
1E30:  MOVF   xD3,W
1E32:  MULLW  08
1E34:  MOVF   FF3,W
1E36:  CLRF   xD6
1E38:  MOVWF  xD5
1E3A:  MOVLW  04
1E3C:  ADDWF  xD5,F
1E3E:  MOVLW  00
1E40:  ADDWFC xD6,F
1E42:  MOVFF  3D5,FE9
1E46:  MOVLW  04
1E48:  ADDWF  xD6,W
1E4A:  MOVWF  FEA
1E4C:  MOVLW  88
1E4E:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
1E50:  BRA    1E64
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
1E52:  MOVF   xD3,W
1E54:  MULLW  08
1E56:  MOVF   FF3,W
1E58:  CLRF   xD6
1E5A:  MOVWF  FE9
1E5C:  MOVLW  04
1E5E:  ADDWF  xD6,W
1E60:  MOVWF  FEA
1E62:  CLRF   FEF
....................    } 
.................... } 
1E64:  MOVLB  0
1E66:  GOTO   1F32 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1EB4:  MOVLB  3
1EB6:  BCF    xD4.0
1EB8:  BTFSC  xD3.7
1EBA:  BSF    xD4.0
....................    endpoint &= 0x7F; 
1EBC:  BCF    xD3.7
....................     
....................    if (direction)  
1EBE:  BTFSS  xD4.0
1EC0:  BRA    1EE4
....................    { 
....................       st=EP_BDxST_I(endpoint); 
1EC2:  MOVF   xD3,W
1EC4:  MULLW  08
1EC6:  MOVF   FF3,W
1EC8:  CLRF   xD7
1ECA:  MOVWF  xD6
1ECC:  MOVLW  04
1ECE:  ADDWF  xD6,F
1ED0:  MOVLW  00
1ED2:  ADDWFC xD7,F
1ED4:  MOVFF  3D6,FE9
1ED8:  MOVLW  04
1EDA:  ADDWF  xD7,W
1EDC:  MOVWF  FEA
1EDE:  MOVFF  FEF,3D5
....................    } 
....................    else  
1EE2:  BRA    1EF8
....................    { 
....................       st=EP_BDxST_O(endpoint); 
1EE4:  MOVF   xD3,W
1EE6:  MULLW  08
1EE8:  MOVF   FF3,W
1EEA:  CLRF   xD7
1EEC:  MOVWF  FE9
1EEE:  MOVLW  04
1EF0:  ADDWF  xD7,W
1EF2:  MOVWF  FEA
1EF4:  MOVFF  FEF,3D5
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
1EF8:  BTFSS  xD5.7
1EFA:  BRA    1F00
1EFC:  BTFSC  xD5.2
1EFE:  BRA    1F04
1F00:  MOVLW  00
1F02:  BRA    1F06
1F04:  MOVLW  01
1F06:  MOVWF  01
.................... } 
1F08:  MOVLB  0
1F0A:  GOTO   1F5A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
2198:  MOVFF  3D4,F6E
....................     
....................    if (address)  
219C:  MOVLB  3
219E:  MOVF   xD4,F
21A0:  BZ    21A8
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
21A2:  MOVLW  04
21A4:  MOVWF  1C
....................    } 
....................    else  
21A6:  BRA    21AC
....................    { 
....................       usb_state = USB_STATE_POWERED; 
21A8:  MOVLW  02
21AA:  MOVWF  1C
....................    } 
.................... } 
21AC:  MOVLB  0
21AE:  GOTO   21BC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
1AEE:  MOVLB  3
1AF0:  MOVF   xD3,F
1AF2:  BNZ   1B00
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
1AF4:  MOVLW  04
1AF6:  MOVWF  1C
....................       usb_disable_endpoints(); 
1AF8:  MOVLB  0
1AFA:  RCALL  1948
....................    } 
....................    else  
1AFC:  BRA    1CBA
1AFE:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
1B00:  MOVLW  05
1B02:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
1B04:  MOVLW  04
1B06:  MOVWF  xD6
1B08:  MOVLW  90
1B0A:  MOVWF  xD5
....................       for (en=1; en<USB_NUM_UEP; en++)  
1B0C:  MOVLW  01
1B0E:  MOVWF  xD4
1B10:  MOVF   xD4,W
1B12:  SUBLW  0F
1B14:  BTFSS  FD8.0
1B16:  BRA    1CBA
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
1B18:  MOVFF  3D4,3DC
1B1C:  MOVLB  0
1B1E:  RCALL  18F4
....................          new_uep = 0; 
1B20:  MOVLB  3
1B22:  CLRF   xD7
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
1B24:  CLRF   03
1B26:  MOVF   xD4,W
1B28:  MOVFF  FF2,3DB
1B2C:  BCF    FF2.7
1B2E:  MOVLB  0
1B30:  RCALL  172A
1B32:  MOVLB  3
1B34:  BTFSC  xDB.7
1B36:  BSF    FF2.7
1B38:  SUBLW  FF
1B3A:  BZ    1BF2
....................          { 
....................             new_uep = 0x04; 
1B3C:  MOVLW  04
1B3E:  MOVWF  xD7
....................             len = usb_ep_rx_size[en]; 
1B40:  BCF    FD8.0
1B42:  RLCF   xD4,W
1B44:  CLRF   03
1B46:  MOVFF  FF2,3DB
1B4A:  BCF    FF2.7
1B4C:  MOVLB  0
1B4E:  RCALL  174A
1B50:  TBLRD*+
1B52:  MOVFF  FF5,03
1B56:  MOVLB  3
1B58:  BTFSC  xDB.7
1B5A:  BSF    FF2.7
1B5C:  MOVWF  xD8
1B5E:  MOVFF  03,3D9
....................             EP_BDxCNT_O(en) = len; 
1B62:  MOVF   xD4,W
1B64:  MULLW  08
1B66:  MOVF   FF3,W
1B68:  CLRF   xDC
1B6A:  MOVWF  xDB
1B6C:  MOVLW  01
1B6E:  ADDWF  xDB,W
1B70:  MOVWF  01
1B72:  MOVLW  00
1B74:  ADDWFC xDC,W
1B76:  MOVWF  03
1B78:  MOVFF  01,FE9
1B7C:  MOVLW  04
1B7E:  ADDWF  03,W
1B80:  MOVWF  FEA
1B82:  MOVFF  3D8,FEF
....................             EP_BDxADR_O(en) = addy; 
1B86:  MOVF   xD4,W
1B88:  MULLW  08
1B8A:  MOVF   FF3,W
1B8C:  CLRF   xDC
1B8E:  MOVWF  xDB
1B90:  MOVLW  02
1B92:  ADDWF  xDB,W
1B94:  MOVWF  01
1B96:  MOVLW  00
1B98:  ADDWFC xDC,W
1B9A:  MOVWF  03
1B9C:  MOVFF  01,FE9
1BA0:  MOVLW  04
1BA2:  ADDWF  03,W
1BA4:  MOVWF  FEA
1BA6:  MOVFF  3D6,FEC
1BAA:  MOVF   FED,F
1BAC:  MOVFF  3D5,FEF
....................             addy += usb_ep_rx_size[en]; 
1BB0:  BCF    FD8.0
1BB2:  RLCF   xD4,W
1BB4:  CLRF   03
1BB6:  MOVFF  FF2,3DB
1BBA:  BCF    FF2.7
1BBC:  MOVLB  0
1BBE:  RCALL  174A
1BC0:  TBLRD*+
1BC2:  MOVFF  FF5,03
1BC6:  MOVLB  3
1BC8:  BTFSC  xDB.7
1BCA:  BSF    FF2.7
1BCC:  ADDWF  xD5,F
1BCE:  MOVF   03,W
1BD0:  ADDWFC xD6,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
1BD2:  MOVLW  88
1BD4:  MOVWF  xDA
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
1BD6:  BTFSC  xD9.0
1BD8:  BSF    xDA.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
1BDA:  BTFSC  xD9.1
1BDC:  BSF    xDA.1
....................             EP_BDxST_O(en) = i; 
1BDE:  MOVF   xD4,W
1BE0:  MULLW  08
1BE2:  MOVF   FF3,W
1BE4:  CLRF   xDC
1BE6:  MOVWF  FE9
1BE8:  MOVLW  04
1BEA:  ADDWF  xDC,W
1BEC:  MOVWF  FEA
1BEE:  MOVFF  3DA,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
1BF2:  CLRF   03
1BF4:  MOVF   xD4,W
1BF6:  MOVFF  FF2,3DB
1BFA:  BCF    FF2.7
1BFC:  MOVLB  0
1BFE:  RCALL  172A
1C00:  MOVLB  3
1C02:  BTFSC  xDB.7
1C04:  BSF    FF2.7
1C06:  SUBLW  FF
1C08:  BZ    1C80
....................          { 
....................             new_uep |= 0x02; 
1C0A:  BSF    xD7.1
....................             EP_BDxADR_I(en) = addy; 
1C0C:  MOVF   xD4,W
1C0E:  MULLW  08
1C10:  MOVF   FF3,W
1C12:  CLRF   xDC
1C14:  MOVWF  xDB
1C16:  MOVLW  04
1C18:  ADDWF  xDB,F
1C1A:  MOVLW  00
1C1C:  ADDWFC xDC,F
1C1E:  MOVLW  02
1C20:  ADDWF  xDB,W
1C22:  MOVWF  01
1C24:  MOVLW  00
1C26:  ADDWFC xDC,W
1C28:  MOVWF  03
1C2A:  MOVFF  01,FE9
1C2E:  MOVLW  04
1C30:  ADDWF  03,W
1C32:  MOVWF  FEA
1C34:  MOVFF  3D6,FEC
1C38:  MOVF   FED,F
1C3A:  MOVFF  3D5,FEF
....................             addy += usb_ep_tx_size[en]; 
1C3E:  BCF    FD8.0
1C40:  RLCF   xD4,W
1C42:  CLRF   03
1C44:  MOVFF  FF2,3DB
1C48:  BCF    FF2.7
1C4A:  MOVLB  0
1C4C:  RCALL  174A
1C4E:  TBLRD*+
1C50:  MOVFF  FF5,03
1C54:  MOVLB  3
1C56:  BTFSC  xDB.7
1C58:  BSF    FF2.7
1C5A:  ADDWF  xD5,F
1C5C:  MOVF   03,W
1C5E:  ADDWFC xD6,F
....................             EP_BDxST_I(en) = 0x40; 
1C60:  MOVF   xD4,W
1C62:  MULLW  08
1C64:  MOVF   FF3,W
1C66:  CLRF   xDC
1C68:  MOVWF  xDB
1C6A:  MOVLW  04
1C6C:  ADDWF  xDB,F
1C6E:  MOVLW  00
1C70:  ADDWFC xDC,F
1C72:  MOVFF  3DB,FE9
1C76:  MOVLW  04
1C78:  ADDWF  xDC,W
1C7A:  MOVWF  FEA
1C7C:  MOVLW  40
1C7E:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
1C80:  MOVF   xD7,W
1C82:  SUBLW  06
1C84:  BNZ   1C8A
1C86:  MOVLW  0E
1C88:  MOVWF  xD7
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
1C8A:  CLRF   03
1C8C:  MOVF   xD4,W
1C8E:  MOVFF  FF2,3DB
1C92:  BCF    FF2.7
1C94:  MOVLB  0
1C96:  RCALL  172A
1C98:  MOVLB  3
1C9A:  BTFSC  xDB.7
1C9C:  BSF    FF2.7
1C9E:  SUBLW  01
1CA0:  BTFSS  FD8.2
1CA2:  BSF    xD7.4
....................           
....................          UEP(en) = new_uep; 
1CA4:  CLRF   03
1CA6:  MOVF   xD4,W
1CA8:  ADDLW  70
1CAA:  MOVWF  FE9
1CAC:  MOVLW  0F
1CAE:  ADDWFC 03,W
1CB0:  MOVWF  FEA
1CB2:  MOVFF  3D7,FEF
....................       } 
1CB6:  INCF   xD4,F
1CB8:  BRA    1B10
1CBA:  MOVLB  0
....................    } 
.................... } 
1CBC:  GOTO   1D64 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
18F4:  CLRF   03
18F6:  MOVLB  3
18F8:  MOVF   xDC,W
18FA:  ADDLW  70
18FC:  MOVWF  FE9
18FE:  MOVLW  0F
1900:  ADDWFC 03,W
1902:  MOVWF  FEA
1904:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
1906:  MOVFF  3DC,3DD
190A:  MOVLB  0
190C:  RCALL  1890
190E:  MOVF   01,F
1910:  BZ    1944
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
1912:  MOVLB  3
1914:  MOVF   xDC,W
1916:  MULLW  08
1918:  MOVF   FF3,W
191A:  CLRF   xDE
191C:  MOVWF  FE9
191E:  MOVLW  04
1920:  ADDWF  xDE,W
1922:  MOVWF  FEA
1924:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
1926:  MOVF   xDC,W
1928:  MULLW  08
192A:  MOVF   FF3,W
192C:  CLRF   xDE
192E:  MOVWF  xDD
1930:  MOVLW  04
1932:  ADDWF  xDD,F
1934:  MOVLW  00
1936:  ADDWFC xDE,F
1938:  MOVFF  3DD,FE9
193C:  MOVLW  04
193E:  ADDWF  xDE,W
1940:  MOVWF  FEA
1942:  CLRF   FEF
1944:  MOVLB  0
....................    } 
.................... } 
1946:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
1948:  MOVLW  01
194A:  MOVLB  3
194C:  MOVWF  xDB
194E:  MOVF   xDB,W
1950:  SUBLW  0F
1952:  BNC   1962
....................       usb_disable_endpoint(i); 
1954:  MOVFF  3DB,3DC
1958:  MOVLB  0
195A:  RCALL  18F4
195C:  MOVLB  3
195E:  INCF   xDB,F
1960:  BRA    194E
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
1962:  MOVLB  0
1964:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
235C:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
235E:  MOVF   1C,F
2360:  BNZ   2364
2362:  BRA    23E0
....................    if (UIR)  
2364:  MOVF   F68,F
2366:  BZ    23E0
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
2368:  BTFSS  F68.2
236A:  BRA    2374
236C:  BTFSS  F69.2
236E:  BRA    2374
2370:  GOTO   184A
....................  
....................       if (UCON_SUSPND) return; 
2374:  BTFSS  F6D.1
2376:  BRA    237A
2378:  BRA    23E0
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
237A:  BTFSS  F68.5
237C:  BRA    2386
237E:  BTFSS  F69.5
2380:  BRA    2386
2382:  GOTO   187A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
2386:  BTFSS  F68.1
2388:  BRA    2392
238A:  BTFSS  F69.1
238C:  BRA    2392
238E:  GOTO   1888
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
2392:  BTFSS  F68.0
2394:  BRA    239E
2396:  BTFSS  F69.0
2398:  BRA    239E
239A:  GOTO   198E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
239E:  BTFSS  F68.4
23A0:  BRA    23AA
23A2:  BTFSS  F69.4
23A4:  BRA    23AA
23A6:  GOTO   19BA
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
23AA:  BTFSS  F68.6
23AC:  BRA    23B6
23AE:  BTFSS  F69.6
23B0:  BRA    23B6
23B2:  GOTO   19C4
....................  
....................       TRNAttempts = 0; 
23B6:  MOVLB  3
23B8:  CLRF   xD0
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
23BA:  BTFSS  F68.3
23BC:  BRA    23D2
23BE:  BTFSS  F69.3
23C0:  BRA    23D2
....................          { 
....................             USTATCopy = U1STAT; 
23C2:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
23C6:  MOVLB  0
23C8:  CALL   0004
....................             usb_isr_tok_dne(); 
23CC:  BRA    21E2
....................          } 
....................          else 
23CE:  BRA    23D4
23D0:  MOVLB  3
....................             break; 
23D2:  BRA    23DE
....................       } while (TRNAttempts++ < 4); 
23D4:  MOVLB  3
23D6:  MOVF   xD0,W
23D8:  INCF   xD0,F
23DA:  SUBLW  03
23DC:  BC    23BA
23DE:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
23E0:  GOTO   0060
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
19C4:  BCF    F68.6
.................... } 
19C6:  GOTO   23B6 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
198E:  CLRF   F6A
....................    UIR = 0; 
1990:  CLRF   F68
....................    UEIE = 0x9F; 
1992:  MOVLW  9F
1994:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
1996:  MOVLW  3D
1998:  MOVWF  F69
....................  
....................    UADDR = 0; 
199A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
199C:  RCALL  1948
....................     
....................    usb_token_reset(); 
199E:  RCALL  1966
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
19A0:  MOVLW  16
19A2:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
19A4:  BTFSS  F68.3
19A6:  BRA    19AE
....................       usb_clear_trn(); 
19A8:  CALL   0004
....................    } 
19AC:  BRA    19A4
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
19AE:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
19B0:  RCALL  185A
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
19B2:  MOVLW  03
19B4:  MOVWF  1C
.................... } 
19B6:  GOTO   239E (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
185A:  MOVLW  40
185C:  MOVLB  4
185E:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
1860:  MOVLW  04
1862:  MOVWF  x03
1864:  MOVLW  10
1866:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
1868:  MOVLW  88
186A:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
186C:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
186E:  MOVLW  04
1870:  MOVWF  x07
1872:  MOVLW  50
1874:  MOVWF  x06
.................... } 
1876:  MOVLB  0
1878:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
1888:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
188A:  BCF    F68.1
.................... } 
188C:  GOTO   2392 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
19BA:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
19BC:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
19BE:  BSF    F6D.1
.................... } 
19C0:  GOTO   23AA (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
184A:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
184C:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
184E:  BTFSS  F68.2
1850:  BRA    1856
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
1852:  BCF    F68.2
....................    } 
1854:  BRA    184E
.................... } 
1856:  GOTO   2374 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
187A:  BTFSS  F70.0
187C:  BRA    1882
....................    { 
....................       usb_init_ep0_setup(); 
187E:  RCALL  185A
....................       bit_clear(UEP(0), 0); 
1880:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
1882:  BCF    F68.5
.................... } 
1884:  GOTO   2386 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
19CA:  MOVFF  3D6,1D
19CE:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
19D0:  MOVLW  FF
19D2:  MOVWF  1D
19D4:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
21E2:  RRCF   1B,W
21E4:  MOVLB  3
21E6:  MOVWF  xD1
21E8:  RRCF   xD1,F
21EA:  RRCF   xD1,F
21EC:  MOVLW  1F
21EE:  ANDWF  xD1,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
21F0:  MOVF   1B,F
21F2:  BNZ   2292
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
21F4:  MOVLB  4
21F6:  MOVF   x00,W
21F8:  ANDLW  3C
21FA:  MOVLB  3
21FC:  MOVWF  xD2
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
21FE:  MOVLW  43
2200:  MOVLB  4
2202:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
2204:  MOVLB  3
2206:  MOVF   xD2,W
2208:  SUBLW  34
220A:  BNZ   2256
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
220C:  MOVLB  4
220E:  MOVF   x04,W
2210:  ANDLW  80
2212:  BZ    2216
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
2214:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
2216:  MOVLB  0
2218:  BRA    1F78
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
221A:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
221C:  INCFSZ 1D,W
221E:  BRA    222E
....................             usb_flush_out(0, USB_DTS_STALL); 
2220:  MOVLB  3
2222:  CLRF   xD3
2224:  MOVLW  03
2226:  MOVWF  xD4
2228:  MOVLB  0
222A:  RCALL  1FA4
....................          else  
222C:  BRA    2252
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
222E:  MOVLB  3
2230:  CLRF   xD3
2232:  MOVLW  02
2234:  MOVWF  xD4
2236:  MOVLB  0
2238:  RCALL  1FA4
....................             if (__setup_0_tx_size != 0xFE) 
223A:  MOVF   1D,W
223C:  SUBLW  FE
223E:  BZ    2252
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
2240:  MOVLB  3
2242:  CLRF   xD3
2244:  CLRF   xD5
2246:  MOVFF  1D,3D4
224A:  MOVLW  04
224C:  MOVWF  xD6
224E:  MOVLB  0
2250:  RCALL  20B2
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
2252:  BRA    228E
2254:  MOVLB  3
2256:  MOVF   xD2,W
2258:  SUBLW  04
225A:  BNZ   2290
....................       { 
....................          usb_isr_tok_out_dne(0); 
225C:  CLRF   xD3
225E:  MOVLB  0
2260:  RCALL  218E
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
2262:  MOVLB  3
2264:  CLRF   xD3
2266:  MOVLW  02
2268:  MOVWF  xD4
226A:  MOVLB  0
226C:  RCALL  1FA4
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
226E:  MOVF   1D,W
2270:  SUBLW  FE
2272:  BZ    228C
2274:  INCFSZ 1D,W
2276:  BRA    227A
2278:  BRA    228C
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
227A:  MOVLB  3
227C:  CLRF   xD3
227E:  CLRF   xD5
2280:  MOVFF  1D,3D4
2284:  MOVLW  01
2286:  MOVWF  xD6
2288:  MOVLB  0
228A:  RCALL  20B2
....................          } 
....................       } 
....................       else 
228C:  BRA    228E
228E:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
2290:  BRA    2356
2292:  MOVF   1B,W
2294:  SUBLW  04
2296:  BNZ   22C8
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
2298:  MOVLW  43
229A:  MOVLB  4
229C:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
229E:  MOVLW  FF
22A0:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
22A2:  MOVLB  3
22A4:  CLRF   xD3
22A6:  MOVLB  0
22A8:  RCALL  21C0
....................       if (__setup_0_tx_size!=0xFF) 
22AA:  INCFSZ 1D,W
22AC:  BRA    22B0
22AE:  BRA    22C4
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
22B0:  MOVLB  3
22B2:  CLRF   xD3
22B4:  CLRF   xD5
22B6:  MOVFF  1D,3D4
22BA:  MOVLW  02
22BC:  MOVWF  xD6
22BE:  MOVLB  0
22C0:  RCALL  20B2
....................       else 
22C2:  BRA    22C4
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
22C4:  BRA    2354
22C6:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
22C8:  BTFSC  1B.2
22CA:  BRA    2306
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
22CC:  MOVF   xD1,W
22CE:  MULLW  08
22D0:  MOVF   FF3,W
22D2:  CLRF   xD4
22D4:  MOVWF  01
22D6:  MOVLW  04
22D8:  ADDWF  xD4,W
22DA:  MOVWF  03
22DC:  MOVF   xD1,W
22DE:  MULLW  08
22E0:  MOVF   FF3,W
22E2:  CLRF   xD6
22E4:  MOVWF  FE9
22E6:  MOVLW  04
22E8:  ADDWF  xD6,W
22EA:  MOVWF  FEA
22EC:  MOVF   FEF,W
22EE:  ANDLW  43
22F0:  MOVFF  03,FEA
22F4:  MOVFF  01,FE9
22F8:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
22FA:  MOVFF  3D1,3D3
22FE:  MOVLB  0
2300:  RCALL  218E
....................       } 
....................       else  
2302:  BRA    2354
2304:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
2306:  MOVF   xD1,W
2308:  MULLW  08
230A:  MOVF   FF3,W
230C:  CLRF   xD4
230E:  MOVWF  xD3
2310:  MOVLW  04
2312:  ADDWF  xD3,F
2314:  MOVLW  00
2316:  ADDWFC xD4,F
2318:  MOVFF  3D3,01
231C:  MOVLW  04
231E:  ADDWF  xD4,W
2320:  MOVWF  03
2322:  MOVF   xD1,W
2324:  MULLW  08
2326:  MOVF   FF3,W
2328:  CLRF   xD6
232A:  MOVWF  xD5
232C:  MOVLW  04
232E:  ADDWF  xD5,F
2330:  MOVLW  00
2332:  ADDWFC xD6,F
2334:  MOVFF  3D5,FE9
2338:  MOVLW  04
233A:  ADDWF  xD6,W
233C:  MOVWF  FEA
233E:  MOVF   FEF,W
2340:  ANDLW  43
2342:  MOVFF  03,FEA
2346:  MOVFF  3D3,FE9
234A:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
234C:  MOVFF  3D1,3D3
2350:  MOVLB  0
2352:  RCALL  21C0
2354:  MOVLB  3
....................       } 
....................    } 
.................... } 
2356:  MOVLB  0
2358:  GOTO   23CE (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
36AC:  MOVF   18,W
36AE:  MOVWF  01
.................... } 
36B0:  GOTO   6600 (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
1966:  MOVLB  3
1968:  CLRF   xD1
196A:  MOVF   xD1,F
196C:  BNZ   1982
....................       USB_Interface[i] = 0;   //reset each interface to default 
196E:  CLRF   03
1970:  MOVF   xD1,W
1972:  ADDLW  21
1974:  MOVWF  FE9
1976:  MOVLW  00
1978:  ADDWFC 03,W
197A:  MOVWF  FEA
197C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
197E:  INCF   xD1,F
1980:  BRA    196A
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
1982:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
1984:  MOVLW  01
1986:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
1988:  CLRF   17
.................... } 
198A:  MOVLB  0
198C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1890:  MOVLB  3
1892:  BCF    xDE.0
1894:  BTFSC  xDD.7
1896:  BSF    xDE.0
....................     
....................    endpoint &= 0x7F; 
1898:  BCF    xDD.7
....................     
....................    if (endpoint > 16) 
189A:  MOVF   xDD,W
189C:  SUBLW  10
189E:  BC    18A6
....................       return(FALSE); 
18A0:  MOVLW  00
18A2:  MOVWF  01
18A4:  BRA    18F0
....................     
....................    if (direction) { //IN 
18A6:  BTFSS  xDE.0
18A8:  BRA    18CE
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
18AA:  CLRF   03
18AC:  MOVF   xDD,W
18AE:  MOVFF  FF2,3DF
18B2:  BCF    FF2.7
18B4:  MOVLB  0
18B6:  RCALL  172A
18B8:  MOVLB  3
18BA:  BTFSC  xDF.7
18BC:  BSF    FF2.7
18BE:  SUBLW  FF
18C0:  BNZ   18C6
18C2:  MOVLW  00
18C4:  BRA    18C8
18C6:  MOVLW  01
18C8:  MOVWF  01
18CA:  BRA    18F0
....................    } 
....................    else {   //OUT 
18CC:  BRA    18F0
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
18CE:  CLRF   03
18D0:  MOVF   xDD,W
18D2:  MOVFF  FF2,3DF
18D6:  BCF    FF2.7
18D8:  MOVLB  0
18DA:  RCALL  172A
18DC:  MOVLB  3
18DE:  BTFSC  xDF.7
18E0:  BSF    FF2.7
18E2:  SUBLW  FF
18E4:  BNZ   18EA
18E6:  MOVLW  00
18E8:  BRA    18EC
18EA:  MOVLW  01
18EC:  MOVWF  01
18EE:  BRA    18F0
....................    } 
.................... } 
18F0:  MOVLB  0
18F2:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
21C0:  MOVLB  3
21C2:  MOVF   xD3,F
21C4:  BNZ   21DE
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
21C6:  DECFSZ 17,W
21C8:  BRA    21D2
21CA:  MOVLB  0
21CC:  RCALL  19D6
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
21CE:  BRA    21DC
21D0:  MOVLB  3
21D2:  MOVF   17,W
21D4:  SUBLW  02
21D6:  BNZ   21DE
21D8:  MOVLB  0
21DA:  BRA    21B2
21DC:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
21DE:  MOVLB  0
21E0:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
218E:  MOVLB  3
2190:  MOVF   xD3,F
2192:  BNZ   2194
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
2194:  MOVLB  0
2196:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
1F78:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
1F7A:  MOVLB  4
1F7C:  MOVF   x10,W
1F7E:  ANDLW  7F
1F80:  XORLW  00
1F82:  MOVLB  0
1F84:  BZ    1F90
1F86:  XORLW  01
1F88:  BZ    1F94
1F8A:  XORLW  03
1F8C:  BZ    1F98
1F8E:  BRA    1F9C
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
1F90:  BRA    1CC0
....................          break; 
1F92:  BRA    1FA0
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
1F94:  BRA    1D78
....................          break; 
1F96:  BRA    1FA0
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
1F98:  BRA    1F0E
....................          break; 
1F9A:  BRA    1FA0
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
1F9C:  RCALL  19D0
....................          break; 
1F9E:  BRA    1FA0
....................    } 
.................... } 
1FA0:  GOTO   221A (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
1CC0:  MOVLB  4
1CC2:  MOVF   x11,W
1CC4:  XORLW  00
1CC6:  MOVLB  0
1CC8:  BZ    1CE4
1CCA:  XORLW  01
1CCC:  BZ    1CF8
1CCE:  XORLW  02
1CD0:  BZ    1D12
1CD2:  XORLW  06
1CD4:  BZ    1D2A
1CD6:  XORLW  03
1CD8:  BZ    1D3C
1CDA:  XORLW  0E
1CDC:  BZ    1D40
1CDE:  XORLW  01
1CE0:  BZ    1D50
1CE2:  BRA    1D70
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
1CE4:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
1CE8:  MOVLB  4
1CEA:  CLRF   x51
....................             usb_request_send_response(2); 
1CEC:  MOVLW  02
1CEE:  MOVLB  3
1CF0:  MOVWF  xD6
1CF2:  MOVLB  0
1CF4:  RCALL  19CA
....................             break; 
1CF6:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1CF8:  MOVLB  4
1CFA:  DECFSZ x12,W
1CFC:  BRA    1D0C
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
1CFE:  MOVLW  01
1D00:  ANDWF  19,F
....................                usb_put_0len_0(); 
1D02:  MOVLB  3
1D04:  CLRF   xD6
1D06:  MOVLB  0
1D08:  RCALL  19CA
....................             } 
....................             else 
1D0A:  BRA    1D10
....................                usb_request_stall(); 
1D0C:  MOVLB  0
1D0E:  RCALL  19D0
....................             break; 
1D10:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1D12:  MOVLB  4
1D14:  DECFSZ x12,W
1D16:  BRA    1D24
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
1D18:  BSF    19.1
....................                usb_put_0len_0(); 
1D1A:  MOVLB  3
1D1C:  CLRF   xD6
1D1E:  MOVLB  0
1D20:  RCALL  19CA
....................             } 
....................             else 
1D22:  BRA    1D28
....................                usb_request_stall(); 
1D24:  MOVLB  0
1D26:  RCALL  19D0
....................             break; 
1D28:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
1D2A:  MOVLW  02
1D2C:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
1D2E:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
1D32:  MOVLB  3
1D34:  CLRF   xD6
1D36:  MOVLB  0
1D38:  RCALL  19CA
....................             break; 
1D3A:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
1D3C:  BRA    1A70
....................             break; 
1D3E:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
1D40:  MOVFF  18,450
....................             usb_request_send_response(1); 
1D44:  MOVLW  01
1D46:  MOVLB  3
1D48:  MOVWF  xD6
1D4A:  MOVLB  0
1D4C:  RCALL  19CA
....................             break; 
1D4E:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
1D50:  MOVLB  4
1D52:  MOVF   x12,W
1D54:  SUBLW  01
1D56:  BNC   1D6C
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
1D58:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
1D5C:  MOVFF  412,3D3
1D60:  MOVLB  0
1D62:  BRA    1AEE
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
1D64:  MOVLB  3
1D66:  CLRF   xD6
1D68:  MOVLB  0
1D6A:  RCALL  19CA
....................             } 
....................             break; 
1D6C:  MOVLB  0
1D6E:  BRA    1D74
....................  
....................       default: 
....................             usb_request_stall(); 
1D70:  RCALL  19D0
....................             break; 
1D72:  BRA    1D74
....................    } 
.................... } 
1D74:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
1D78:  MOVFF  18,3D3
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
1D7C:  MOVLB  4
1D7E:  MOVF   x11,W
1D80:  XORLW  00
1D82:  MOVLB  0
1D84:  BZ    1D90
1D86:  XORLW  0A
1D88:  BZ    1DA2
1D8A:  XORLW  01
1D8C:  BZ    1DF0
1D8E:  BRA    1E1A
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
1D90:  MOVLB  4
1D92:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
1D94:  CLRF   x51
....................             usb_request_send_response(2); 
1D96:  MOVLW  02
1D98:  MOVLB  3
1D9A:  MOVWF  xD6
1D9C:  MOVLB  0
1D9E:  RCALL  19CA
....................             break; 
1DA0:  BRA    1E1E
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
1DA2:  MOVLB  3
1DA4:  MOVF   xD3,F
1DA6:  BZ    1DEA
1DA8:  MOVLW  01
1DAA:  SUBWF  xD3,W
1DAC:  CLRF   03
1DAE:  MOVFF  FF2,3D4
1DB2:  BCF    FF2.7
1DB4:  MOVLB  0
1DB6:  RCALL  17BC
1DB8:  MOVLB  3
1DBA:  BTFSC  xD4.7
1DBC:  BSF    FF2.7
1DBE:  MOVWF  01
1DC0:  MOVLB  4
1DC2:  SUBWF  x14,W
1DC4:  BTFSS  FD8.0
1DC6:  BRA    1DCC
1DC8:  MOVLB  3
1DCA:  BRA    1DEA
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
1DCC:  CLRF   03
1DCE:  MOVF   x14,W
1DD0:  ADDLW  21
1DD2:  MOVWF  FE9
1DD4:  MOVLW  00
1DD6:  ADDWFC 03,W
1DD8:  MOVWF  FEA
1DDA:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
1DDE:  MOVLW  01
1DE0:  MOVLB  3
1DE2:  MOVWF  xD6
1DE4:  MOVLB  0
1DE6:  RCALL  19CA
....................             } 
....................             else 
1DE8:  BRA    1DEE
....................                usb_request_stall(); 
1DEA:  MOVLB  0
1DEC:  RCALL  19D0
....................             break; 
1DEE:  BRA    1E1E
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
1DF0:  MOVLB  3
1DF2:  MOVF   xD3,F
1DF4:  BZ    1E14
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
1DF6:  CLRF   03
1DF8:  MOVLB  4
1DFA:  MOVF   x14,W
1DFC:  ADDLW  21
1DFE:  MOVWF  FE9
1E00:  MOVLW  00
1E02:  ADDWFC 03,W
1E04:  MOVWF  FEA
1E06:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
1E0A:  MOVLB  3
1E0C:  CLRF   xD6
1E0E:  MOVLB  0
1E10:  RCALL  19CA
....................             } 
....................             else 
1E12:  BRA    1E18
....................                usb_request_stall(); 
1E14:  MOVLB  0
1E16:  RCALL  19D0
....................             break; 
1E18:  BRA    1E1E
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
1E1A:  RCALL  19D0
....................             break; 
1E1C:  BRA    1E1E
....................    } 
.................... } 
1E1E:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
1F0E:  MOVFF  414,3DD
1F12:  RCALL  1890
1F14:  MOVF   01,F
1F16:  BZ    1F74
....................       switch(usb_ep0_rx_buffer[1]) { 
1F18:  MOVLB  4
1F1A:  MOVF   x11,W
1F1C:  XORLW  01
1F1E:  MOVLB  0
1F20:  BZ    1F2C
1F22:  XORLW  02
1F24:  BZ    1F3C
1F26:  XORLW  03
1F28:  BZ    1F4C
1F2A:  BRA    1F70
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
1F2C:  MOVFF  414,3D3
1F30:  BRA    1E22
....................                usb_put_0len_0(); 
1F32:  MOVLB  3
1F34:  CLRF   xD6
1F36:  MOVLB  0
1F38:  RCALL  19CA
....................                break; 
1F3A:  BRA    1F74
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
1F3C:  MOVFF  414,3D3
1F40:  BRA    1E6A
....................                      usb_put_0len_0(); 
1F42:  MOVLB  3
1F44:  CLRF   xD6
1F46:  MOVLB  0
1F48:  RCALL  19CA
....................                      break; 
1F4A:  BRA    1F74
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
1F4C:  MOVLB  4
1F4E:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
1F50:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
1F52:  MOVFF  414,3D3
1F56:  MOVLB  0
1F58:  BRA    1EB4
1F5A:  MOVF   01,F
1F5C:  BZ    1F64
....................                   usb_ep0_tx_buffer[0]=1; 
1F5E:  MOVLW  01
1F60:  MOVLB  4
1F62:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
1F64:  MOVLW  02
1F66:  MOVLB  3
1F68:  MOVWF  xD6
1F6A:  MOVLB  0
1F6C:  RCALL  19CA
....................                break; 
1F6E:  BRA    1F74
....................  
....................          default: 
....................             usb_request_stall(); 
1F70:  RCALL  19D0
....................             break; 
1F72:  BRA    1F74
....................       } 
....................    } 
.................... } 
1F74:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
1A70:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
1A72:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
1A74:  MOVLB  4
1A76:  MOVF   x13,W
1A78:  XORLW  01
1A7A:  MOVLB  0
1A7C:  BZ    1A88
1A7E:  XORLW  03
1A80:  BZ    1A92
1A82:  XORLW  01
1A84:  BZ    1A98
1A86:  BRA    1ACE
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
1A88:  MOVLW  12
1A8A:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
1A8C:  MOVLW  03
1A8E:  MOVWF  1A
....................             break; 
1A90:  BRA    1AD2
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
1A92:  MOVLW  20
1A94:  MOVWF  20
....................             break; 
1A96:  BRA    1AD2
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
1A98:  MOVLW  02
1A9A:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
1A9C:  CLRF   03
1A9E:  MOVLB  4
1AA0:  MOVF   x12,W
1AA2:  MOVFF  FF2,3D3
1AA6:  BCF    FF2.7
1AA8:  MOVLB  0
1AAA:  RCALL  17F0
1AAC:  MOVLB  3
1AAE:  BTFSC  xD3.7
1AB0:  BSF    FF2.7
1AB2:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
1AB4:  CLRF   03
1AB6:  MOVF   1F,W
1AB8:  MOVFF  FF2,3D3
1ABC:  BCF    FF2.7
1ABE:  MOVLB  0
1AC0:  RCALL  1804
1AC2:  MOVLB  3
1AC4:  BTFSC  xD3.7
1AC6:  BSF    FF2.7
1AC8:  MOVWF  20
....................             break; 
1ACA:  MOVLB  0
1ACC:  BRA    1AD2
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
1ACE:  RCALL  19D0
....................             return; 
1AD0:  BRA    1AEA
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
1AD2:  MOVLB  4
1AD4:  MOVF   x17,F
1AD6:  BNZ   1AE2
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
1AD8:  MOVF   20,W
1ADA:  SUBWF  x16,W
1ADC:  BC    1AE2
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
1ADE:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
1AE2:  MOVLW  01
1AE4:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
1AE6:  MOVLB  0
1AE8:  RCALL  19D6
.................... } 
1AEA:  GOTO   1D74 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
21B2:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
21B4:  CLRF   17
....................    usb_set_address(USB_address_pending); 
21B6:  MOVFF  1E,3D4
21BA:  BRA    2198
....................    #endif 
.................... } 
21BC:  GOTO   21DC (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
19D6:  MOVLB  3
19D8:  CLRF   xD4
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
19DA:  MOVF   20,F
19DC:  BZ    1A5A
19DE:  MOVF   xD4,W
19E0:  SUBLW  3F
19E2:  BNC   1A5A
....................       switch(USB_stack_status.getdesc_type) { 
19E4:  MOVF   1A,W
19E6:  XORLW  00
19E8:  MOVLB  0
19EA:  BZ    19F6
19EC:  XORLW  02
19EE:  BZ    1A0E
19F0:  XORLW  01
19F2:  BZ    1A26
19F4:  BRA    1A3E
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
19F6:  CLRF   03
19F8:  MOVF   1F,W
19FA:  MOVFF  FF2,3D6
19FE:  BCF    FF2.7
1A00:  RCALL  178C
1A02:  MOVLB  3
1A04:  BTFSC  xD6.7
1A06:  BSF    FF2.7
1A08:  MOVWF  xD5
....................             break; 
1A0A:  MOVLB  0
1A0C:  BRA    1A3E
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
1A0E:  CLRF   03
1A10:  MOVF   1F,W
1A12:  MOVFF  FF2,3D6
1A16:  BCF    FF2.7
1A18:  RCALL  1804
1A1A:  MOVLB  3
1A1C:  BTFSC  xD6.7
1A1E:  BSF    FF2.7
1A20:  MOVWF  xD5
....................             break; 
1A22:  MOVLB  0
1A24:  BRA    1A3E
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
1A26:  CLRF   03
1A28:  MOVF   1F,W
1A2A:  MOVFF  FF2,3D6
1A2E:  BCF    FF2.7
1A30:  RCALL  17CE
1A32:  MOVLB  3
1A34:  BTFSC  xD6.7
1A36:  BSF    FF2.7
1A38:  MOVWF  xD5
....................             break; 
1A3A:  MOVLB  0
1A3C:  BRA    1A3E
....................       } 
....................       usb_getdesc_ptr++; 
1A3E:  INCF   1F,F
....................       usb_getdesc_len--; 
1A40:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
1A42:  MOVLB  3
1A44:  MOVF   xD4,W
1A46:  INCF   xD4,F
1A48:  CLRF   03
1A4A:  ADDLW  50
1A4C:  MOVWF  FE9
1A4E:  MOVLW  04
1A50:  ADDWFC 03,W
1A52:  MOVWF  FEA
1A54:  MOVFF  3D5,FEF
....................    } 
1A58:  BRA    19DA
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
1A5A:  MOVF   20,F
1A5C:  BNZ   1A66
1A5E:  MOVF   xD4,W
1A60:  SUBLW  40
1A62:  BZ    1A66
....................          USB_stack_status.dev_req = NONE; 
1A64:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
1A66:  MOVFF  3D4,3D6
1A6A:  MOVLB  0
1A6C:  RCALL  19CA
.................... } 
1A6E:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32; 
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxbuf[Lenbuf]; 
....................  
.................... char  JP[] = "JP Inglobal", Autoclave[] = "Autoclave Vertical",tiempo_est[]="T est=",tiempo_sec[]="T sec="; 
.................... char  Lts[] = "80 Litros",Fle[] = ">",Fle1[]="<",Param[] = "Ciclo?", Tempe_pre[]="T°:121°C"; 
.................... char  Proc[] = "Proceso",Textil[]= "Textil-Instrumental", Calentando[]="Calentando",Level[]="Nivel"; 
.................... char  Preciclo[]= "Pre-Ciclo",Instrumental[]= "Instrumental Suave", Esterilizando[]="Esterilizando",Secando[]="Secando"; 
.................... char  Liquidos[]= "Liquidos", Vacio[]=":",Creado[]= "Libre", T40[]= "T:121°C",Test40[]= "t_est:25m", Tsec40[]= "t_sec:15m",C[]="C"; 
.................... char  TestC[]= "t_est:5m",TsecC[]= "t_sec:5m", TestI[]= "t_est:15m",Desfogue_Lento[]="Desfogue Lento"; 
.................... char  TL[]= "T:121°C",TestL[]= "t_est:20m",TsecL[]= "t_sec:N/A",ok[]= "OK", T[]="Temperatura"; 
.................... char  T_esterilizacion[]="T Esterilizacion",T_secado[]="T Secado",Desfogue[]="Desfogue Rapido",Si[]="Si",Noo[]="No",Finalizado[]="Finalizado"; 
.................... char  Parada[]="Parada", Emergencia[]="Emergencia", Ultimo[]="Ultimo", Puertas[]="Puerta", Abierta[]="Abierta"; 
.................... int8 Menu=16, n_opcionH=32,n_opcionL=16,unidad=11,Flecha=16,Flecha1=3,Flecha2=16, nMenuL=16, nMenuH=32, Flx=36, Fly=8,Liquid=0; 
.................... short estadot40=0,estadoc=0,estadoi=0,estadol=0,estadop=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,emergency=0; 
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int16 tiempos=0,tiempos3=0,m=0,tiempoctrl=0,Minutos=15,Nivel=0; 
.................... short tiempo_esterilizacion=0,tiempo_secado=0,i=0,n=0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0, est=0,Desfogar=0,Des=0,Visua=0,door=0; 
.................... int8 Setpoint=121,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,fin_ciclo=0,tiempo_desfogue=0; 
.................... float V0=0.0,R1=1002.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,desvio=2.0,d3=0.0; 
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................     
....................    if(x==1){ 
*
30E8:  MOVLB  3
30EA:  DECFSZ x9A,W
30EC:  BRA    3190
....................    for( i = 0 ; i < 64 ; i ++ ) 
30EE:  CLRF   x9B
30F0:  MOVF   x9B,W
30F2:  SUBLW  3F
30F4:  BNC   3190
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
30F6:  CLRF   x9C
30F8:  MOVF   x9C,W
30FA:  SUBLW  0F
30FC:  BNC   318C
....................       {     
....................          for(k=7;k>-1;k--) 
30FE:  MOVLW  07
3100:  MOVWF  x9D
3102:  MOVF   x9D,W
3104:  XORLW  80
3106:  SUBLW  7F
3108:  BC    3188
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
310A:  CLRF   x9F
310C:  MOVFF  39B,39E
3110:  CLRF   xA1
3112:  MOVLW  10
3114:  MOVWF  xA0
3116:  MOVLB  0
3118:  RCALL  30C6
311A:  MOVFF  02,39F
311E:  MOVFF  01,39E
3122:  MOVLB  3
3124:  MOVF   x9C,W
3126:  ADDWF  01,W
3128:  MOVWF  01
312A:  MOVLW  00
312C:  ADDWFC 02,W
312E:  MOVWF  03
3130:  MOVF   01,W
3132:  MOVFF  FF2,39E
3136:  BCF    FF2.7
3138:  MOVFF  03,FF7
313C:  MOVLB  0
313E:  CALL   02B2
3142:  MOVLB  3
3144:  BTFSC  x9E.7
3146:  BSF    FF2.7
3148:  MOVWF  x9E
314A:  MOVLW  07
314C:  BSF    FD8.0
314E:  SUBFWB x9D,W
3150:  MOVWF  x9F
3152:  MOVFF  39E,00
3156:  MOVF   x9F,W
3158:  MOVWF  01
315A:  BZ    3164
315C:  BCF    FD8.0
315E:  RRCF   00,F
3160:  DECFSZ 01,F
3162:  BRA    315C
3164:  BTFSS  00.0
3166:  BRA    3184
....................                glcd_pixel( j*8+k,i, ON ); 
3168:  MOVF   x9C,W
316A:  MULLW  08
316C:  MOVF   FF3,W
316E:  ADDWF  x9D,W
3170:  MOVWF  x9E
3172:  MOVWF  xC7
3174:  MOVFF  39B,3C8
3178:  MOVLW  01
317A:  MOVWF  xC9
317C:  MOVLB  0
317E:  CALL   27AC
3182:  MOVLB  3
....................          }   
3184:  DECF   x9D,F
3186:  BRA    3102
....................       } 
3188:  INCF   x9C,F
318A:  BRA    30F8
....................    } 
318C:  INCF   x9B,F
318E:  BRA    30F0
....................    } 
....................     
....................    if(x==2){ 
3190:  MOVF   x9A,W
3192:  SUBLW  02
3194:  BNZ   3238
....................    for( i = 0 ; i < 64 ; i ++ ) 
3196:  CLRF   x9B
3198:  MOVF   x9B,W
319A:  SUBLW  3F
319C:  BNC   3238
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
319E:  CLRF   x9C
31A0:  MOVF   x9C,W
31A2:  SUBLW  0F
31A4:  BNC   3234
....................       {     
....................          for(k=7;k>-1;k--) 
31A6:  MOVLW  07
31A8:  MOVWF  x9D
31AA:  MOVF   x9D,W
31AC:  XORLW  80
31AE:  SUBLW  7F
31B0:  BC    3230
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
31B2:  CLRF   x9F
31B4:  MOVFF  39B,39E
31B8:  CLRF   xA1
31BA:  MOVLW  10
31BC:  MOVWF  xA0
31BE:  MOVLB  0
31C0:  RCALL  30C6
31C2:  MOVFF  02,39F
31C6:  MOVFF  01,39E
31CA:  MOVLB  3
31CC:  MOVF   x9C,W
31CE:  ADDWF  01,W
31D0:  MOVWF  01
31D2:  MOVLW  00
31D4:  ADDWFC 02,W
31D6:  MOVWF  03
31D8:  MOVF   01,W
31DA:  MOVFF  FF2,39E
31DE:  BCF    FF2.7
31E0:  MOVFF  03,FF7
31E4:  MOVLB  0
31E6:  CALL   06CA
31EA:  MOVLB  3
31EC:  BTFSC  x9E.7
31EE:  BSF    FF2.7
31F0:  MOVWF  x9E
31F2:  MOVLW  07
31F4:  BSF    FD8.0
31F6:  SUBFWB x9D,W
31F8:  MOVWF  x9F
31FA:  MOVFF  39E,00
31FE:  MOVF   x9F,W
3200:  MOVWF  01
3202:  BZ    320C
3204:  BCF    FD8.0
3206:  RRCF   00,F
3208:  DECFSZ 01,F
320A:  BRA    3204
320C:  BTFSS  00.0
320E:  BRA    322C
....................                glcd_pixel( j*8+k,i, ON ); 
3210:  MOVF   x9C,W
3212:  MULLW  08
3214:  MOVF   FF3,W
3216:  ADDWF  x9D,W
3218:  MOVWF  x9E
321A:  MOVWF  xC7
321C:  MOVFF  39B,3C8
3220:  MOVLW  01
3222:  MOVWF  xC9
3224:  MOVLB  0
3226:  CALL   27AC
322A:  MOVLB  3
....................          }   
322C:  DECF   x9D,F
322E:  BRA    31AA
....................       } 
3230:  INCF   x9C,F
3232:  BRA    31A0
....................    } 
3234:  INCF   x9B,F
3236:  BRA    3198
....................    } 
....................     
....................    if(x==3){ 
3238:  MOVF   x9A,W
323A:  SUBLW  03
323C:  BNZ   32E0
....................    for( i = 0 ; i < 64 ; i ++ ) 
323E:  CLRF   x9B
3240:  MOVF   x9B,W
3242:  SUBLW  3F
3244:  BNC   32E0
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3246:  CLRF   x9C
3248:  MOVF   x9C,W
324A:  SUBLW  0F
324C:  BNC   32DC
....................       {     
....................          for(k=7;k>-1;k--) 
324E:  MOVLW  07
3250:  MOVWF  x9D
3252:  MOVF   x9D,W
3254:  XORLW  80
3256:  SUBLW  7F
3258:  BC    32D8
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
325A:  CLRF   x9F
325C:  MOVFF  39B,39E
3260:  CLRF   xA1
3262:  MOVLW  10
3264:  MOVWF  xA0
3266:  MOVLB  0
3268:  RCALL  30C6
326A:  MOVFF  02,39F
326E:  MOVFF  01,39E
3272:  MOVLB  3
3274:  MOVF   x9C,W
3276:  ADDWF  01,W
3278:  MOVWF  01
327A:  MOVLW  00
327C:  ADDWFC 02,W
327E:  MOVWF  03
3280:  MOVF   01,W
3282:  MOVFF  FF2,39E
3286:  BCF    FF2.7
3288:  MOVFF  03,FF7
328C:  MOVLB  0
328E:  CALL   0AE2
3292:  MOVLB  3
3294:  BTFSC  x9E.7
3296:  BSF    FF2.7
3298:  MOVWF  x9E
329A:  MOVLW  07
329C:  BSF    FD8.0
329E:  SUBFWB x9D,W
32A0:  MOVWF  x9F
32A2:  MOVFF  39E,00
32A6:  MOVF   x9F,W
32A8:  MOVWF  01
32AA:  BZ    32B4
32AC:  BCF    FD8.0
32AE:  RRCF   00,F
32B0:  DECFSZ 01,F
32B2:  BRA    32AC
32B4:  BTFSS  00.0
32B6:  BRA    32D4
....................                glcd_pixel( j*8+k,i, ON ); 
32B8:  MOVF   x9C,W
32BA:  MULLW  08
32BC:  MOVF   FF3,W
32BE:  ADDWF  x9D,W
32C0:  MOVWF  x9E
32C2:  MOVWF  xC7
32C4:  MOVFF  39B,3C8
32C8:  MOVLW  01
32CA:  MOVWF  xC9
32CC:  MOVLB  0
32CE:  CALL   27AC
32D2:  MOVLB  3
....................          }   
32D4:  DECF   x9D,F
32D6:  BRA    3252
....................       } 
32D8:  INCF   x9C,F
32DA:  BRA    3248
....................    } 
32DC:  INCF   x9B,F
32DE:  BRA    3240
....................    } 
....................     
....................    if(x==4){ 
32E0:  MOVF   x9A,W
32E2:  SUBLW  04
32E4:  BNZ   3388
....................    for( i = 0 ; i < 64 ; i ++ ) 
32E6:  CLRF   x9B
32E8:  MOVF   x9B,W
32EA:  SUBLW  3F
32EC:  BNC   3388
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
32EE:  CLRF   x9C
32F0:  MOVF   x9C,W
32F2:  SUBLW  0F
32F4:  BNC   3384
....................       {     
....................          for(k=7;k>-1;k--) 
32F6:  MOVLW  07
32F8:  MOVWF  x9D
32FA:  MOVF   x9D,W
32FC:  XORLW  80
32FE:  SUBLW  7F
3300:  BC    3380
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
3302:  CLRF   x9F
3304:  MOVFF  39B,39E
3308:  CLRF   xA1
330A:  MOVLW  10
330C:  MOVWF  xA0
330E:  MOVLB  0
3310:  RCALL  30C6
3312:  MOVFF  02,39F
3316:  MOVFF  01,39E
331A:  MOVLB  3
331C:  MOVF   x9C,W
331E:  ADDWF  01,W
3320:  MOVWF  01
3322:  MOVLW  00
3324:  ADDWFC 02,W
3326:  MOVWF  03
3328:  MOVF   01,W
332A:  MOVFF  FF2,39E
332E:  BCF    FF2.7
3330:  MOVFF  03,FF7
3334:  MOVLB  0
3336:  CALL   0EFA
333A:  MOVLB  3
333C:  BTFSC  x9E.7
333E:  BSF    FF2.7
3340:  MOVWF  x9E
3342:  MOVLW  07
3344:  BSF    FD8.0
3346:  SUBFWB x9D,W
3348:  MOVWF  x9F
334A:  MOVFF  39E,00
334E:  MOVF   x9F,W
3350:  MOVWF  01
3352:  BZ    335C
3354:  BCF    FD8.0
3356:  RRCF   00,F
3358:  DECFSZ 01,F
335A:  BRA    3354
335C:  BTFSS  00.0
335E:  BRA    337C
....................                glcd_pixel( j*8+k,i, ON ); 
3360:  MOVF   x9C,W
3362:  MULLW  08
3364:  MOVF   FF3,W
3366:  ADDWF  x9D,W
3368:  MOVWF  x9E
336A:  MOVWF  xC7
336C:  MOVFF  39B,3C8
3370:  MOVLW  01
3372:  MOVWF  xC9
3374:  MOVLB  0
3376:  CALL   27AC
337A:  MOVLB  3
....................          }   
337C:  DECF   x9D,F
337E:  BRA    32FA
....................       } 
3380:  INCF   x9C,F
3382:  BRA    32F0
....................    } 
3384:  INCF   x9B,F
3386:  BRA    32E8
....................    } 
....................     
....................    if(x==5){ 
3388:  MOVF   x9A,W
338A:  SUBLW  05
338C:  BNZ   3430
....................    for( i = 0 ; i < 64 ; i ++ ) 
338E:  CLRF   x9B
3390:  MOVF   x9B,W
3392:  SUBLW  3F
3394:  BNC   3430
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3396:  CLRF   x9C
3398:  MOVF   x9C,W
339A:  SUBLW  0F
339C:  BNC   342C
....................       {     
....................          for(k=7;k>-1;k--) 
339E:  MOVLW  07
33A0:  MOVWF  x9D
33A2:  MOVF   x9D,W
33A4:  XORLW  80
33A6:  SUBLW  7F
33A8:  BC    3428
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
33AA:  CLRF   x9F
33AC:  MOVFF  39B,39E
33B0:  CLRF   xA1
33B2:  MOVLW  10
33B4:  MOVWF  xA0
33B6:  MOVLB  0
33B8:  RCALL  30C6
33BA:  MOVFF  02,39F
33BE:  MOVFF  01,39E
33C2:  MOVLB  3
33C4:  MOVF   x9C,W
33C6:  ADDWF  01,W
33C8:  MOVWF  01
33CA:  MOVLW  00
33CC:  ADDWFC 02,W
33CE:  MOVWF  03
33D0:  MOVF   01,W
33D2:  MOVFF  FF2,39E
33D6:  BCF    FF2.7
33D8:  MOVFF  03,FF7
33DC:  MOVLB  0
33DE:  CALL   1312
33E2:  MOVLB  3
33E4:  BTFSC  x9E.7
33E6:  BSF    FF2.7
33E8:  MOVWF  x9E
33EA:  MOVLW  07
33EC:  BSF    FD8.0
33EE:  SUBFWB x9D,W
33F0:  MOVWF  x9F
33F2:  MOVFF  39E,00
33F6:  MOVF   x9F,W
33F8:  MOVWF  01
33FA:  BZ    3404
33FC:  BCF    FD8.0
33FE:  RRCF   00,F
3400:  DECFSZ 01,F
3402:  BRA    33FC
3404:  BTFSS  00.0
3406:  BRA    3424
....................                glcd_pixel( j*8+k,i, ON ); 
3408:  MOVF   x9C,W
340A:  MULLW  08
340C:  MOVF   FF3,W
340E:  ADDWF  x9D,W
3410:  MOVWF  x9E
3412:  MOVWF  xC7
3414:  MOVFF  39B,3C8
3418:  MOVLW  01
341A:  MOVWF  xC9
341C:  MOVLB  0
341E:  CALL   27AC
3422:  MOVLB  3
....................          }   
3424:  DECF   x9D,F
3426:  BRA    33A2
....................       } 
3428:  INCF   x9C,F
342A:  BRA    3398
....................    } 
342C:  INCF   x9B,F
342E:  BRA    3390
....................    } 
.................... } 
3430:  MOVLB  0
3432:  RETLW  00
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................   if(x==1) 
*
2FBA:  MOVLB  3
2FBC:  DECFSZ x9B,W
2FBE:  BRA    2FDA
....................    {glcd_text57(7, y, tiempo_est, 1, ON);} 
2FC0:  MOVLW  07
2FC2:  MOVWF  xAA
2FC4:  MOVFF  39C,3AB
2FC8:  CLRF   xAD
2FCA:  MOVLW  81
2FCC:  MOVWF  xAC
2FCE:  MOVLW  01
2FD0:  MOVWF  xAE
2FD2:  MOVWF  xAF
2FD4:  MOVLB  0
2FD6:  RCALL  288E
2FD8:  MOVLB  3
....................    if(x==2) 
2FDA:  MOVF   x9B,W
2FDC:  SUBLW  02
2FDE:  BNZ   2FFA
....................    {glcd_text57(7, y, Param, 1, ON);} 
2FE0:  MOVLW  07
2FE2:  MOVWF  xAA
2FE4:  MOVFF  39C,3AB
2FE8:  CLRF   xAD
2FEA:  MOVLW  9D
2FEC:  MOVWF  xAC
2FEE:  MOVLW  01
2FF0:  MOVWF  xAE
2FF2:  MOVWF  xAF
2FF4:  MOVLB  0
2FF6:  RCALL  288E
2FF8:  MOVLB  3
....................    if(x==3) 
2FFA:  MOVF   x9B,W
2FFC:  SUBLW  03
2FFE:  BNZ   301A
....................    {glcd_text57(7, y, tiempo_sec, 1, ON);  } 
3000:  MOVLW  07
3002:  MOVWF  xAA
3004:  MOVFF  39C,3AB
3008:  CLRF   xAD
300A:  MOVLW  88
300C:  MOVWF  xAC
300E:  MOVLW  01
3010:  MOVWF  xAE
3012:  MOVWF  xAF
3014:  MOVLB  0
3016:  RCALL  288E
3018:  MOVLB  3
....................    if(x==4) 
301A:  MOVF   x9B,W
301C:  SUBLW  04
301E:  BNZ   303A
....................    {glcd_text57(7, y, Textil, 1, ON);  } 
3020:  MOVLW  07
3022:  MOVWF  xAA
3024:  MOVFF  39C,3AB
3028:  CLRF   xAD
302A:  MOVLW  B5
302C:  MOVWF  xAC
302E:  MOVLW  01
3030:  MOVWF  xAE
3032:  MOVWF  xAF
3034:  MOVLB  0
3036:  RCALL  288E
3038:  MOVLB  3
....................    if(x==5) 
303A:  MOVF   x9B,W
303C:  SUBLW  05
303E:  BNZ   305A
....................    {glcd_text57(7, y, Preciclo, 1, ON);  } 
3040:  MOVLW  07
3042:  MOVWF  xAA
3044:  MOVFF  39C,3AB
3048:  CLRF   xAD
304A:  MOVLW  DA
304C:  MOVWF  xAC
304E:  MOVLW  01
3050:  MOVWF  xAE
3052:  MOVWF  xAF
3054:  MOVLB  0
3056:  RCALL  288E
3058:  MOVLB  3
....................    if(x==6) 
305A:  MOVF   x9B,W
305C:  SUBLW  06
305E:  BNZ   307A
....................    {glcd_text57(7, y, Instrumental, 1, ON);  } 
3060:  MOVLW  07
3062:  MOVWF  xAA
3064:  MOVFF  39C,3AB
3068:  CLRF   xAD
306A:  MOVLW  E4
306C:  MOVWF  xAC
306E:  MOVLW  01
3070:  MOVWF  xAE
3072:  MOVWF  xAF
3074:  MOVLB  0
3076:  RCALL  288E
3078:  MOVLB  3
....................    if(x==7) 
307A:  MOVF   x9B,W
307C:  SUBLW  07
307E:  BNZ   309E
....................    {glcd_text57(7, y, Liquidos, 1, ON);  } 
3080:  MOVLW  07
3082:  MOVWF  xAA
3084:  MOVFF  39C,3AB
3088:  MOVLW  01
308A:  MOVWF  xAD
308C:  MOVLW  0D
308E:  MOVWF  xAC
3090:  MOVLW  01
3092:  MOVWF  xAE
3094:  MOVWF  xAF
3096:  MOVLB  0
3098:  CALL   288E
309C:  MOVLB  3
....................    if(x==8) 
309E:  MOVF   x9B,W
30A0:  SUBLW  08
30A2:  BNZ   30C2
....................    {glcd_text57(7, y, Creado, 1, ON);  } 
30A4:  MOVLW  07
30A6:  MOVWF  xAA
30A8:  MOVFF  39C,3AB
30AC:  MOVLW  01
30AE:  MOVWF  xAD
30B0:  MOVLW  18
30B2:  MOVWF  xAC
30B4:  MOVLW  01
30B6:  MOVWF  xAE
30B8:  MOVWF  xAF
30BA:  MOVLB  0
30BC:  CALL   288E
30C0:  MOVLB  3
.................... } 
30C2:  MOVLB  0
30C4:  RETLW  00
....................   
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(35530);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
*
23E4:  MOVLW  8A
23E6:  MOVWF  FCF
23E8:  MOVLW  CA
23EA:  MOVWF  FCE
....................    tiempos++; 
23EC:  MOVLB  2
23EE:  INCF   x03,F
23F0:  BTFSC  FD8.2
23F2:  INCF   x04,F
....................    tiempos3++; 
23F4:  INCF   x05,F
23F6:  BTFSC  FD8.2
23F8:  INCF   x06,F
....................    tiempoctrl++; 
23FA:  INCF   x09,F
23FC:  BTFSC  FD8.2
23FE:  INCF   x0A,F
....................     
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])&&(Liquid==0)) 
2400:  MOVF   x13,W
2402:  SUBWF  x0F,W
2404:  BNZ   241E
2406:  MOVF   x14,W
2408:  SUBWF  x10,W
240A:  BNZ   241E
240C:  MOVF   x15,W
240E:  SUBWF  x11,W
2410:  BNZ   241E
2412:  MOVF   x16,W
2414:  SUBWF  x12,W
2416:  BNZ   241E
2418:  MOVF   x00,F
241A:  BNZ   241E
....................    {tiempo_secado=1;} 
241C:  BSF    x02.3
....................        
....................    if(tiempos3==40) 
241E:  MOVF   x05,W
2420:  SUBLW  28
2422:  BNZ   242E
2424:  MOVF   x06,F
2426:  BNZ   242E
....................    {tiempos3=0;Expulsa=1;} 
2428:  CLRF   x06
242A:  CLRF   x05
242C:  BSF    x02.7
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
242E:  MOVF   x03,W
2430:  SUBLW  C8
2432:  BNZ   24C6
2434:  MOVF   x04,F
2436:  BNZ   24C6
....................    {tiempos=0;Lectura=1; 
2438:  CLRF   x04
243A:  CLRF   x03
243C:  BSF    x02.6
....................     
....................    if(tiempo_desfogue>=30) 
243E:  MOVF   x27,W
2440:  SUBLW  1D
2442:  BC    244A
....................    {Desfogar=1;tiempo_desfogue=0;} 
2444:  BSF    x1F.1
2446:  CLRF   x27
....................    else 
2448:  BRA    244E
....................    {Desfogar=0;tiempo_desfogue++;} 
244A:  BCF    x1F.1
244C:  INCF   x27,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
244E:  BTFSS  x02.2
2450:  BRA    248A
....................       { 
....................                       
....................       Testerilizacion[0]++; 
2452:  INCF   x0F,F
....................       if(Testerilizacion[0]>9) 
2454:  BTFSC  x0F.7
2456:  BRA    2462
2458:  MOVF   x0F,W
245A:  SUBLW  09
245C:  BC    2462
....................          {Testerilizacion[0]=0; 
245E:  CLRF   x0F
....................           Testerilizacion[1]++;} 
2460:  INCF   x10,F
....................        if(Testerilizacion[1]>5) 
2462:  BTFSC  x10.7
2464:  BRA    2470
2466:  MOVF   x10,W
2468:  SUBLW  05
246A:  BC    2470
....................          {Testerilizacion[1]=0; 
246C:  CLRF   x10
....................           Testerilizacion[2]++;} 
246E:  INCF   x11,F
....................          if(Testerilizacion[2]>9) 
2470:  BTFSC  x11.7
2472:  BRA    247E
2474:  MOVF   x11,W
2476:  SUBLW  09
2478:  BC    247E
....................             {Testerilizacion[2]=0; 
247A:  CLRF   x11
....................              Testerilizacion[3]++;} 
247C:  INCF   x12,F
....................             if(Testerilizacion[3]>5) 
247E:  BTFSC  x12.7
2480:  BRA    248A
2482:  MOVF   x12,W
2484:  SUBLW  05
2486:  BC    248A
....................                {Testerilizacion[3]=0;} 
2488:  CLRF   x12
....................       }        
....................        
....................     if(tiempo_secado==1) 
248A:  BTFSS  x02.3
248C:  BRA    24C6
....................       { 
....................                       
....................       Tsecado[0]++; 
248E:  INCF   x17,F
....................       if(Tsecado[0]>9) 
2490:  BTFSC  x17.7
2492:  BRA    249E
2494:  MOVF   x17,W
2496:  SUBLW  09
2498:  BC    249E
....................          {Tsecado[0]=0; 
249A:  CLRF   x17
....................           Tsecado[1]++;} 
249C:  INCF   x18,F
....................        if(Tsecado[1]>5) 
249E:  BTFSC  x18.7
24A0:  BRA    24AC
24A2:  MOVF   x18,W
24A4:  SUBLW  05
24A6:  BC    24AC
....................          {Tsecado[1]=0; 
24A8:  CLRF   x18
....................           Tsecado[2]++;} 
24AA:  INCF   x19,F
....................          if(Tsecado[2]>9) 
24AC:  BTFSC  x19.7
24AE:  BRA    24BA
24B0:  MOVF   x19,W
24B2:  SUBLW  09
24B4:  BC    24BA
....................             {Tsecado[2]=0; 
24B6:  CLRF   x19
....................              Tsecado[3]++;} 
24B8:  INCF   x1A,F
....................             if(Tsecado[3]>5) 
24BA:  BTFSC  x1A.7
24BC:  BRA    24C6
24BE:  MOVF   x1A,W
24C0:  SUBLW  05
24C2:  BC    24C6
....................                {Tsecado[3]=0;} 
24C4:  CLRF   x1A
....................       }   
....................    } 
....................    } 
....................     
24C6:  BCF    F9E.0
24C8:  MOVLB  0
24CA:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
.................... glcd_rect(x1, y, x2, y+7, YES, OFF);            // Clear the old voltage 
*
4120:  MOVLW  07
4122:  MOVLB  3
4124:  ADDWF  x9C,W
4126:  MOVWF  x9D
4128:  MOVFF  39A,3AC
412C:  MOVFF  39C,3AD
4130:  MOVFF  39B,3AE
4134:  MOVWF  xAF
4136:  MOVLW  01
4138:  MOVWF  xB0
413A:  CLRF   xB1
413C:  MOVLB  0
413E:  CALL   2D30
.................... } 
4142:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       sprintf(voltage, "%1.1f",adc); // Converts adc to text 
*
40AE:  MOVLW  03
40B0:  MOVLB  2
40B2:  MOVWF  x59
40B4:  MOVLW  A1
40B6:  MOVWF  x58
40B8:  MOVLW  89
40BA:  MOVWF  FE9
40BC:  MOVFF  39D,3AD
40C0:  MOVFF  39C,3AC
40C4:  MOVFF  39B,3AB
40C8:  MOVFF  39A,3AA
40CC:  MOVLW  01
40CE:  MOVLB  3
40D0:  MOVWF  xAE
40D2:  MOVLB  0
40D4:  BRA    3EFA
....................       glcd_rect(x, y, x+53, y+15, YES, OFF);glcd_text57(x, y, voltage, 2, ON); 
40D6:  MOVLW  35
40D8:  MOVLB  3
40DA:  ADDWF  x9E,W
40DC:  MOVWF  xAA
40DE:  MOVLW  0F
40E0:  ADDWF  x9F,W
40E2:  MOVWF  xAB
40E4:  MOVFF  39E,3AC
40E8:  MOVFF  39F,3AD
40EC:  MOVFF  3AA,3AE
40F0:  MOVWF  xAF
40F2:  MOVLW  01
40F4:  MOVWF  xB0
40F6:  CLRF   xB1
40F8:  MOVLB  0
40FA:  CALL   2D30
40FE:  MOVFF  39E,3AA
4102:  MOVFF  39F,3AB
4106:  MOVLW  03
4108:  MOVLB  3
410A:  MOVWF  xAD
410C:  MOVLW  A1
410E:  MOVWF  xAC
4110:  MOVLW  02
4112:  MOVWF  xAE
4114:  MOVLW  01
4116:  MOVWF  xAF
4118:  MOVLB  0
411A:  CALL   288E
....................        
.................... } 
411E:  RETLW  00
....................   
.................... void displayTiempo(int adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       if(w<4) 
*
2DF2:  MOVLB  3
2DF4:  MOVF   x9E,W
2DF6:  SUBLW  03
2DF8:  BNC   2E14
....................       {sprintf(voltage, "%i",adc);} // Converts adc to text 
2DFA:  MOVLW  03
2DFC:  MOVLB  2
2DFE:  MOVWF  x59
2E00:  MOVLW  9F
2E02:  MOVWF  x58
2E04:  MOVFF  39B,3A8
2E08:  MOVLW  1F
2E0A:  MOVLB  3
2E0C:  MOVWF  xA9
2E0E:  MOVLB  0
2E10:  BRA    2A94
....................       else 
2E12:  BRA    2E2C
....................       {sprintf(voltage, "%u",adc);} // Converts adc to text 
2E14:  MOVLW  03
2E16:  MOVLB  2
2E18:  MOVWF  x59
2E1A:  MOVLW  9F
2E1C:  MOVWF  x58
2E1E:  MOVFF  39B,3A8
2E22:  MOVLW  1B
2E24:  MOVLB  3
2E26:  MOVWF  xA9
2E28:  MOVLB  0
2E2A:  BRA    2B74
....................       if(w==0) 
2E2C:  MOVLB  3
2E2E:  MOVF   x9E,F
2E30:  BNZ   2E4E
....................       {glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
2E32:  MOVFF  39C,3AA
2E36:  MOVFF  39D,3AB
2E3A:  MOVLW  03
2E3C:  MOVWF  xAD
2E3E:  MOVLW  9F
2E40:  MOVWF  xAC
2E42:  MOVLW  01
2E44:  MOVWF  xAE
2E46:  MOVWF  xAF
2E48:  MOVLB  0
2E4A:  RCALL  288E
2E4C:  MOVLB  3
....................       if(w==1) 
2E4E:  DECFSZ x9E,W
2E50:  BRA    2E94
....................       {glcd_rect(x, y, x+5, y+7, YES, OFF);glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
2E52:  MOVLW  05
2E54:  ADDWF  x9C,W
2E56:  MOVWF  xA8
2E58:  MOVLW  07
2E5A:  ADDWF  x9D,W
2E5C:  MOVWF  xA9
2E5E:  MOVFF  39C,3AC
2E62:  MOVFF  39D,3AD
2E66:  MOVFF  3A8,3AE
2E6A:  MOVWF  xAF
2E6C:  MOVLW  01
2E6E:  MOVWF  xB0
2E70:  CLRF   xB1
2E72:  MOVLB  0
2E74:  RCALL  2D30
2E76:  MOVFF  39C,3AA
2E7A:  MOVFF  39D,3AB
2E7E:  MOVLW  03
2E80:  MOVLB  3
2E82:  MOVWF  xAD
2E84:  MOVLW  9F
2E86:  MOVWF  xAC
2E88:  MOVLW  01
2E8A:  MOVWF  xAE
2E8C:  MOVWF  xAF
2E8E:  MOVLB  0
2E90:  RCALL  288E
2E92:  MOVLB  3
....................       if(w==2) 
2E94:  MOVF   x9E,W
2E96:  SUBLW  02
2E98:  BNZ   2EDC
....................       {glcd_rect(x, y, x+5, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
2E9A:  MOVLW  05
2E9C:  ADDWF  x9C,W
2E9E:  MOVWF  xA8
2EA0:  MOVLW  07
2EA2:  ADDWF  x9D,W
2EA4:  MOVWF  xA9
2EA6:  MOVFF  39C,3AC
2EAA:  MOVFF  39D,3AD
2EAE:  MOVFF  3A8,3AE
2EB2:  MOVWF  xAF
2EB4:  MOVLW  01
2EB6:  MOVWF  xB0
2EB8:  MOVWF  xB1
2EBA:  MOVLB  0
2EBC:  RCALL  2D30
2EBE:  MOVFF  39C,3AA
2EC2:  MOVFF  39D,3AB
2EC6:  MOVLW  03
2EC8:  MOVLB  3
2ECA:  MOVWF  xAD
2ECC:  MOVLW  9F
2ECE:  MOVWF  xAC
2ED0:  MOVLW  01
2ED2:  MOVWF  xAE
2ED4:  CLRF   xAF
2ED6:  MOVLB  0
2ED8:  RCALL  288E
2EDA:  MOVLB  3
....................       if(w==3) 
2EDC:  MOVF   x9E,W
2EDE:  SUBLW  03
2EE0:  BNZ   2F26
....................       {glcd_rect(x, y, x+20, y+28, YES, OFF);glcd_text57(x, y, voltage, 2, ON);}            // Clear the old voltage 
2EE2:  MOVLW  14
2EE4:  ADDWF  x9C,W
2EE6:  MOVWF  xA8
2EE8:  MOVLW  1C
2EEA:  ADDWF  x9D,W
2EEC:  MOVWF  xA9
2EEE:  MOVFF  39C,3AC
2EF2:  MOVFF  39D,3AD
2EF6:  MOVFF  3A8,3AE
2EFA:  MOVWF  xAF
2EFC:  MOVLW  01
2EFE:  MOVWF  xB0
2F00:  CLRF   xB1
2F02:  MOVLB  0
2F04:  RCALL  2D30
2F06:  MOVFF  39C,3AA
2F0A:  MOVFF  39D,3AB
2F0E:  MOVLW  03
2F10:  MOVLB  3
2F12:  MOVWF  xAD
2F14:  MOVLW  9F
2F16:  MOVWF  xAC
2F18:  MOVLW  02
2F1A:  MOVWF  xAE
2F1C:  MOVLW  01
2F1E:  MOVWF  xAF
2F20:  MOVLB  0
2F22:  RCALL  288E
2F24:  MOVLB  3
....................       if(w==4) 
2F26:  MOVF   x9E,W
2F28:  SUBLW  04
2F2A:  BNZ   2F6E
....................       {glcd_rect(x, y, x+16, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
2F2C:  MOVLW  10
2F2E:  ADDWF  x9C,W
2F30:  MOVWF  xA8
2F32:  MOVLW  07
2F34:  ADDWF  x9D,W
2F36:  MOVWF  xA9
2F38:  MOVFF  39C,3AC
2F3C:  MOVFF  39D,3AD
2F40:  MOVFF  3A8,3AE
2F44:  MOVWF  xAF
2F46:  MOVLW  01
2F48:  MOVWF  xB0
2F4A:  MOVWF  xB1
2F4C:  MOVLB  0
2F4E:  RCALL  2D30
2F50:  MOVFF  39C,3AA
2F54:  MOVFF  39D,3AB
2F58:  MOVLW  03
2F5A:  MOVLB  3
2F5C:  MOVWF  xAD
2F5E:  MOVLW  9F
2F60:  MOVWF  xAC
2F62:  MOVLW  01
2F64:  MOVWF  xAE
2F66:  CLRF   xAF
2F68:  MOVLB  0
2F6A:  RCALL  288E
2F6C:  MOVLB  3
....................       if(w==5) 
2F6E:  MOVF   x9E,W
2F70:  SUBLW  05
2F72:  BNZ   2FB6
....................       {glcd_rect(x, y, x+12, y+16, YES, ON);glcd_text57(x, y, voltage, 2, OFF);}            // Clear the old voltage 
2F74:  MOVLW  0C
2F76:  ADDWF  x9C,W
2F78:  MOVWF  xA8
2F7A:  MOVLW  10
2F7C:  ADDWF  x9D,W
2F7E:  MOVWF  xA9
2F80:  MOVFF  39C,3AC
2F84:  MOVFF  39D,3AD
2F88:  MOVFF  3A8,3AE
2F8C:  MOVWF  xAF
2F8E:  MOVLW  01
2F90:  MOVWF  xB0
2F92:  MOVWF  xB1
2F94:  MOVLB  0
2F96:  RCALL  2D30
2F98:  MOVFF  39C,3AA
2F9C:  MOVFF  39D,3AB
2FA0:  MOVLW  03
2FA2:  MOVLB  3
2FA4:  MOVWF  xAD
2FA6:  MOVLW  9F
2FA8:  MOVWF  xAC
2FAA:  MOVLW  02
2FAC:  MOVWF  xAE
2FAE:  CLRF   xAF
2FB0:  MOVLB  0
2FB2:  RCALL  288E
2FB4:  MOVLB  3
....................        
.................... } 
2FB6:  MOVLB  0
2FB8:  RETLW  00
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
252E:  MOVLB  3
2530:  RLCF   x9A,W
2532:  MOVWF  00
2534:  RLCF   00,F
2536:  MOVLW  FC
2538:  ANDWF  00,F
253A:  MOVFF  00,01
253E:  MOVF   FC2,W
2540:  ANDLW  C3
2542:  IORWF  00,W
2544:  MOVWF  FC2
2546:  MOVLW  0A
2548:  MOVWF  x9F
254A:  MOVLB  0
254C:  RCALL  24CE
254E:  BSF    FC2.1
2550:  BTFSC  FC2.1
2552:  BRA    2550
2554:  MOVFF  FC4,3A0
2558:  MOVFF  FC3,39F
255C:  MOVLB  0
255E:  RCALL  24F8
2560:  MOVFF  03,39E
2564:  MOVFF  02,39D
2568:  MOVFF  01,39C
256C:  MOVFF  00,39B
2570:  MOVFF  39B,00
2574:  MOVFF  39C,01
2578:  MOVFF  39D,02
257C:  MOVFF  39E,03
.................... } 
2580:  RETLW  00
....................  
....................  
.................... void main() 
.................... { 
*
4144:  CLRF   FF8
4146:  BCF    FD0.7
4148:  BSF    07.7
414A:  CLRF   FEA
414C:  CLRF   FE9
414E:  CLRF   1C
4150:  CLRF   20
4152:  MOVLW  10
4154:  MOVLB  1
4156:  MOVWF  xF5
4158:  MOVLW  20
415A:  MOVWF  xF6
415C:  MOVLW  10
415E:  MOVWF  xF7
4160:  MOVLW  0B
4162:  MOVWF  xF8
4164:  MOVLW  10
4166:  MOVWF  xF9
4168:  MOVLW  03
416A:  MOVWF  xFA
416C:  MOVLW  10
416E:  MOVWF  xFB
4170:  MOVWF  xFC
4172:  MOVLW  20
4174:  MOVWF  xFD
4176:  MOVLW  24
4178:  MOVWF  xFE
417A:  MOVLW  08
417C:  MOVWF  xFF
417E:  MOVLB  2
4180:  CLRF   x00
4182:  BCF    x01.0
4184:  BCF    x01.1
4186:  BCF    x01.2
4188:  BCF    x01.3
418A:  BCF    x01.4
418C:  BCF    x01.5
418E:  BCF    x01.6
4190:  BCF    x01.7
4192:  BCF    x02.0
4194:  BCF    x02.1
4196:  CLRF   x04
4198:  CLRF   x03
419A:  CLRF   x06
419C:  CLRF   x05
419E:  CLRF   x08
41A0:  CLRF   x07
41A2:  CLRF   x0A
41A4:  CLRF   x09
41A6:  CLRF   x0C
41A8:  MOVLW  0F
41AA:  MOVWF  x0B
41AC:  CLRF   x0E
41AE:  CLRF   x0D
41B0:  BCF    x02.2
41B2:  BCF    x02.3
41B4:  BCF    x02.4
41B6:  BCF    x02.5
41B8:  BCF    x02.6
41BA:  BCF    x02.7
41BC:  BCF    x1F.0
41BE:  BCF    x1F.1
41C0:  BCF    x1F.2
41C2:  BCF    x1F.3
41C4:  BCF    x1F.4
41C6:  MOVLW  79
41C8:  MOVWF  x20
41CA:  CLRF   x21
41CC:  CLRF   x22
41CE:  CLRF   x23
41D0:  CLRF   x24
41D2:  CLRF   x25
41D4:  CLRF   x26
41D6:  CLRF   x27
41D8:  CLRF   x2B
41DA:  CLRF   x2A
41DC:  CLRF   x29
41DE:  CLRF   x28
41E0:  CLRF   x2F
41E2:  MOVLW  80
41E4:  MOVWF  x2E
41E6:  MOVLW  7A
41E8:  MOVWF  x2D
41EA:  MOVLW  88
41EC:  MOVWF  x2C
41EE:  CLRF   x37
41F0:  CLRF   x36
41F2:  MOVLW  20
41F4:  MOVWF  x35
41F6:  MOVLW  82
41F8:  MOVWF  x34
41FA:  CLRF   x3B
41FC:  CLRF   x3A
41FE:  CLRF   x39
4200:  CLRF   x38
4202:  CLRF   x3F
4204:  CLRF   x3E
4206:  CLRF   x3D
4208:  CLRF   x3C
420A:  CLRF   x43
420C:  CLRF   x42
420E:  CLRF   x41
4210:  CLRF   x40
4212:  CLRF   x47
4214:  CLRF   x46
4216:  CLRF   x45
4218:  CLRF   x44
421A:  CLRF   x4B
421C:  CLRF   x4A
421E:  CLRF   x49
4220:  CLRF   x48
4222:  CLRF   x4F
4224:  CLRF   x4E
4226:  MOVLW  48
4228:  MOVWF  x4D
422A:  MOVLW  83
422C:  MOVWF  x4C
422E:  CLRF   x53
4230:  CLRF   x52
4232:  CLRF   x51
4234:  MOVLW  80
4236:  MOVWF  x50
4238:  CLRF   x57
423A:  CLRF   x56
423C:  CLRF   x55
423E:  CLRF   x54
4240:  MOVF   FC1,W
4242:  ANDLW  C0
4244:  IORLW  0F
4246:  MOVWF  FC1
4248:  MOVLW  07
424A:  MOVWF  FB4
424C:  MOVLW  4A
424E:  MOVLB  0
4250:  MOVWF  x62
4252:  MOVLW  50
4254:  MOVWF  x63
4256:  MOVLW  20
4258:  MOVWF  x64
425A:  MOVLW  49
425C:  MOVWF  x65
425E:  MOVLW  6E
4260:  MOVWF  x66
4262:  MOVLW  67
4264:  MOVWF  x67
4266:  MOVLW  6C
4268:  MOVWF  x68
426A:  MOVLW  6F
426C:  MOVWF  x69
426E:  MOVLW  62
4270:  MOVWF  x6A
4272:  MOVLW  61
4274:  MOVWF  x6B
4276:  MOVLW  6C
4278:  MOVWF  x6C
427A:  CLRF   x6D
427C:  MOVLW  41
427E:  MOVWF  x6E
4280:  MOVLW  75
4282:  MOVWF  x6F
4284:  MOVLW  74
4286:  MOVWF  x70
4288:  MOVLW  6F
428A:  MOVWF  x71
428C:  MOVLW  63
428E:  MOVWF  x72
4290:  MOVLW  6C
4292:  MOVWF  x73
4294:  MOVLW  61
4296:  MOVWF  x74
4298:  MOVLW  76
429A:  MOVWF  x75
429C:  MOVLW  65
429E:  MOVWF  x76
42A0:  MOVLW  20
42A2:  MOVWF  x77
42A4:  MOVLW  56
42A6:  MOVWF  x78
42A8:  MOVLW  65
42AA:  MOVWF  x79
42AC:  MOVLW  72
42AE:  MOVWF  x7A
42B0:  MOVLW  74
42B2:  MOVWF  x7B
42B4:  MOVLW  69
42B6:  MOVWF  x7C
42B8:  MOVLW  63
42BA:  MOVWF  x7D
42BC:  MOVLW  61
42BE:  MOVWF  x7E
42C0:  MOVLW  6C
42C2:  MOVWF  x7F
42C4:  CLRF   x80
42C6:  MOVLW  54
42C8:  MOVWF  x81
42CA:  MOVLW  20
42CC:  MOVWF  x82
42CE:  MOVLW  65
42D0:  MOVWF  x83
42D2:  MOVLW  73
42D4:  MOVWF  x84
42D6:  MOVLW  74
42D8:  MOVWF  x85
42DA:  MOVLW  3D
42DC:  MOVWF  x86
42DE:  CLRF   x87
42E0:  MOVLW  54
42E2:  MOVWF  x88
42E4:  MOVLW  20
42E6:  MOVWF  x89
42E8:  MOVLW  73
42EA:  MOVWF  x8A
42EC:  MOVLW  65
42EE:  MOVWF  x8B
42F0:  MOVLW  63
42F2:  MOVWF  x8C
42F4:  MOVLW  3D
42F6:  MOVWF  x8D
42F8:  CLRF   x8E
42FA:  MOVLW  38
42FC:  MOVWF  x8F
42FE:  MOVLW  30
4300:  MOVWF  x90
4302:  MOVLW  20
4304:  MOVWF  x91
4306:  MOVLW  4C
4308:  MOVWF  x92
430A:  MOVLW  69
430C:  MOVWF  x93
430E:  MOVLW  74
4310:  MOVWF  x94
4312:  MOVLW  72
4314:  MOVWF  x95
4316:  MOVLW  6F
4318:  MOVWF  x96
431A:  MOVLW  73
431C:  MOVWF  x97
431E:  CLRF   x98
4320:  MOVLW  3E
4322:  MOVWF  x99
4324:  CLRF   x9A
4326:  MOVLW  3C
4328:  MOVWF  x9B
432A:  CLRF   x9C
432C:  MOVLW  43
432E:  MOVWF  x9D
4330:  MOVLW  69
4332:  MOVWF  x9E
4334:  MOVLW  63
4336:  MOVWF  x9F
4338:  MOVLW  6C
433A:  MOVWF  xA0
433C:  MOVLW  6F
433E:  MOVWF  xA1
4340:  MOVLW  3F
4342:  MOVWF  xA2
4344:  CLRF   xA3
4346:  MOVLW  54
4348:  MOVWF  xA4
434A:  MOVLW  B0
434C:  MOVWF  xA5
434E:  MOVLW  3A
4350:  MOVWF  xA6
4352:  MOVLW  31
4354:  MOVWF  xA7
4356:  MOVLW  32
4358:  MOVWF  xA8
435A:  MOVLW  31
435C:  MOVWF  xA9
435E:  MOVLW  B0
4360:  MOVWF  xAA
4362:  MOVLW  43
4364:  MOVWF  xAB
4366:  CLRF   xAC
4368:  MOVLW  50
436A:  MOVWF  xAD
436C:  MOVLW  72
436E:  MOVWF  xAE
4370:  MOVLW  6F
4372:  MOVWF  xAF
4374:  MOVLW  63
4376:  MOVWF  xB0
4378:  MOVLW  65
437A:  MOVWF  xB1
437C:  MOVLW  73
437E:  MOVWF  xB2
4380:  MOVLW  6F
4382:  MOVWF  xB3
4384:  CLRF   xB4
4386:  MOVLW  54
4388:  MOVWF  xB5
438A:  MOVLW  65
438C:  MOVWF  xB6
438E:  MOVLW  78
4390:  MOVWF  xB7
4392:  MOVLW  74
4394:  MOVWF  xB8
4396:  MOVLW  69
4398:  MOVWF  xB9
439A:  MOVLW  6C
439C:  MOVWF  xBA
439E:  MOVLW  2D
43A0:  MOVWF  xBB
43A2:  MOVLW  49
43A4:  MOVWF  xBC
43A6:  MOVLW  6E
43A8:  MOVWF  xBD
43AA:  MOVLW  73
43AC:  MOVWF  xBE
43AE:  MOVLW  74
43B0:  MOVWF  xBF
43B2:  MOVLW  72
43B4:  MOVWF  xC0
43B6:  MOVLW  75
43B8:  MOVWF  xC1
43BA:  MOVLW  6D
43BC:  MOVWF  xC2
43BE:  MOVLW  65
43C0:  MOVWF  xC3
43C2:  MOVLW  6E
43C4:  MOVWF  xC4
43C6:  MOVLW  74
43C8:  MOVWF  xC5
43CA:  MOVLW  61
43CC:  MOVWF  xC6
43CE:  MOVLW  6C
43D0:  MOVWF  xC7
43D2:  CLRF   xC8
43D4:  MOVLW  43
43D6:  MOVWF  xC9
43D8:  MOVLW  61
43DA:  MOVWF  xCA
43DC:  MOVLW  6C
43DE:  MOVWF  xCB
43E0:  MOVLW  65
43E2:  MOVWF  xCC
43E4:  MOVLW  6E
43E6:  MOVWF  xCD
43E8:  MOVLW  74
43EA:  MOVWF  xCE
43EC:  MOVLW  61
43EE:  MOVWF  xCF
43F0:  MOVLW  6E
43F2:  MOVWF  xD0
43F4:  MOVLW  64
43F6:  MOVWF  xD1
43F8:  MOVLW  6F
43FA:  MOVWF  xD2
43FC:  CLRF   xD3
43FE:  MOVLW  4E
4400:  MOVWF  xD4
4402:  MOVLW  69
4404:  MOVWF  xD5
4406:  MOVLW  76
4408:  MOVWF  xD6
440A:  MOVLW  65
440C:  MOVWF  xD7
440E:  MOVLW  6C
4410:  MOVWF  xD8
4412:  CLRF   xD9
4414:  MOVLW  50
4416:  MOVWF  xDA
4418:  MOVLW  72
441A:  MOVWF  xDB
441C:  MOVLW  65
441E:  MOVWF  xDC
4420:  MOVLW  2D
4422:  MOVWF  xDD
4424:  MOVLW  43
4426:  MOVWF  xDE
4428:  MOVLW  69
442A:  MOVWF  xDF
442C:  MOVLW  63
442E:  MOVWF  xE0
4430:  MOVLW  6C
4432:  MOVWF  xE1
4434:  MOVLW  6F
4436:  MOVWF  xE2
4438:  CLRF   xE3
443A:  MOVLW  49
443C:  MOVWF  xE4
443E:  MOVLW  6E
4440:  MOVWF  xE5
4442:  MOVLW  73
4444:  MOVWF  xE6
4446:  MOVLW  74
4448:  MOVWF  xE7
444A:  MOVLW  72
444C:  MOVWF  xE8
444E:  MOVLW  75
4450:  MOVWF  xE9
4452:  MOVLW  6D
4454:  MOVWF  xEA
4456:  MOVLW  65
4458:  MOVWF  xEB
445A:  MOVLW  6E
445C:  MOVWF  xEC
445E:  MOVLW  74
4460:  MOVWF  xED
4462:  MOVLW  61
4464:  MOVWF  xEE
4466:  MOVLW  6C
4468:  MOVWF  xEF
446A:  MOVLW  20
446C:  MOVWF  xF0
446E:  MOVLW  53
4470:  MOVWF  xF1
4472:  MOVLW  75
4474:  MOVWF  xF2
4476:  MOVLW  61
4478:  MOVWF  xF3
447A:  MOVLW  76
447C:  MOVWF  xF4
447E:  MOVLW  65
4480:  MOVWF  xF5
4482:  CLRF   xF6
4484:  MOVLW  45
4486:  MOVWF  xF7
4488:  MOVLW  73
448A:  MOVWF  xF8
448C:  MOVLW  74
448E:  MOVWF  xF9
4490:  MOVLW  65
4492:  MOVWF  xFA
4494:  MOVLW  72
4496:  MOVWF  xFB
4498:  MOVLW  69
449A:  MOVWF  xFC
449C:  MOVLW  6C
449E:  MOVWF  xFD
44A0:  MOVLW  69
44A2:  MOVWF  xFE
44A4:  MOVLW  7A
44A6:  MOVWF  xFF
44A8:  MOVLW  61
44AA:  MOVLB  1
44AC:  MOVWF  x00
44AE:  MOVLW  6E
44B0:  MOVWF  x01
44B2:  MOVLW  64
44B4:  MOVWF  x02
44B6:  MOVLW  6F
44B8:  MOVWF  x03
44BA:  CLRF   x04
44BC:  MOVLW  53
44BE:  MOVWF  x05
44C0:  MOVLW  65
44C2:  MOVWF  x06
44C4:  MOVLW  63
44C6:  MOVWF  x07
44C8:  MOVLW  61
44CA:  MOVWF  x08
44CC:  MOVLW  6E
44CE:  MOVWF  x09
44D0:  MOVLW  64
44D2:  MOVWF  x0A
44D4:  MOVLW  6F
44D6:  MOVWF  x0B
44D8:  CLRF   x0C
44DA:  MOVLW  4C
44DC:  MOVWF  x0D
44DE:  MOVLW  69
44E0:  MOVWF  x0E
44E2:  MOVLW  71
44E4:  MOVWF  x0F
44E6:  MOVLW  75
44E8:  MOVWF  x10
44EA:  MOVLW  69
44EC:  MOVWF  x11
44EE:  MOVLW  64
44F0:  MOVWF  x12
44F2:  MOVLW  6F
44F4:  MOVWF  x13
44F6:  MOVLW  73
44F8:  MOVWF  x14
44FA:  CLRF   x15
44FC:  MOVLW  3A
44FE:  MOVWF  x16
4500:  CLRF   x17
4502:  MOVLW  4C
4504:  MOVWF  x18
4506:  MOVLW  69
4508:  MOVWF  x19
450A:  MOVLW  62
450C:  MOVWF  x1A
450E:  MOVLW  72
4510:  MOVWF  x1B
4512:  MOVLW  65
4514:  MOVWF  x1C
4516:  CLRF   x1D
4518:  MOVLW  54
451A:  MOVWF  x1E
451C:  MOVLW  3A
451E:  MOVWF  x1F
4520:  MOVLW  31
4522:  MOVWF  x20
4524:  MOVLW  32
4526:  MOVWF  x21
4528:  MOVLW  31
452A:  MOVWF  x22
452C:  MOVLW  B0
452E:  MOVWF  x23
4530:  MOVLW  43
4532:  MOVWF  x24
4534:  CLRF   x25
4536:  MOVLW  74
4538:  MOVWF  x26
453A:  MOVLW  5F
453C:  MOVWF  x27
453E:  MOVLW  65
4540:  MOVWF  x28
4542:  MOVLW  73
4544:  MOVWF  x29
4546:  MOVLW  74
4548:  MOVWF  x2A
454A:  MOVLW  3A
454C:  MOVWF  x2B
454E:  MOVLW  32
4550:  MOVWF  x2C
4552:  MOVLW  35
4554:  MOVWF  x2D
4556:  MOVLW  6D
4558:  MOVWF  x2E
455A:  CLRF   x2F
455C:  MOVLW  74
455E:  MOVWF  x30
4560:  MOVLW  5F
4562:  MOVWF  x31
4564:  MOVLW  73
4566:  MOVWF  x32
4568:  MOVLW  65
456A:  MOVWF  x33
456C:  MOVLW  63
456E:  MOVWF  x34
4570:  MOVLW  3A
4572:  MOVWF  x35
4574:  MOVLW  31
4576:  MOVWF  x36
4578:  MOVLW  35
457A:  MOVWF  x37
457C:  MOVLW  6D
457E:  MOVWF  x38
4580:  CLRF   x39
4582:  MOVLW  43
4584:  MOVWF  x3A
4586:  CLRF   x3B
4588:  MOVLW  74
458A:  MOVWF  x3C
458C:  MOVLW  5F
458E:  MOVWF  x3D
4590:  MOVLW  65
4592:  MOVWF  x3E
4594:  MOVLW  73
4596:  MOVWF  x3F
4598:  MOVLW  74
459A:  MOVWF  x40
459C:  MOVLW  3A
459E:  MOVWF  x41
45A0:  MOVLW  35
45A2:  MOVWF  x42
45A4:  MOVLW  6D
45A6:  MOVWF  x43
45A8:  CLRF   x44
45AA:  MOVLW  74
45AC:  MOVWF  x45
45AE:  MOVLW  5F
45B0:  MOVWF  x46
45B2:  MOVLW  73
45B4:  MOVWF  x47
45B6:  MOVLW  65
45B8:  MOVWF  x48
45BA:  MOVLW  63
45BC:  MOVWF  x49
45BE:  MOVLW  3A
45C0:  MOVWF  x4A
45C2:  MOVLW  35
45C4:  MOVWF  x4B
45C6:  MOVLW  6D
45C8:  MOVWF  x4C
45CA:  CLRF   x4D
45CC:  MOVLW  74
45CE:  MOVWF  x4E
45D0:  MOVLW  5F
45D2:  MOVWF  x4F
45D4:  MOVLW  65
45D6:  MOVWF  x50
45D8:  MOVLW  73
45DA:  MOVWF  x51
45DC:  MOVLW  74
45DE:  MOVWF  x52
45E0:  MOVLW  3A
45E2:  MOVWF  x53
45E4:  MOVLW  31
45E6:  MOVWF  x54
45E8:  MOVLW  35
45EA:  MOVWF  x55
45EC:  MOVLW  6D
45EE:  MOVWF  x56
45F0:  CLRF   x57
45F2:  MOVLW  44
45F4:  MOVWF  x58
45F6:  MOVLW  65
45F8:  MOVWF  x59
45FA:  MOVLW  73
45FC:  MOVWF  x5A
45FE:  MOVLW  66
4600:  MOVWF  x5B
4602:  MOVLW  6F
4604:  MOVWF  x5C
4606:  MOVLW  67
4608:  MOVWF  x5D
460A:  MOVLW  75
460C:  MOVWF  x5E
460E:  MOVLW  65
4610:  MOVWF  x5F
4612:  MOVLW  20
4614:  MOVWF  x60
4616:  MOVLW  4C
4618:  MOVWF  x61
461A:  MOVLW  65
461C:  MOVWF  x62
461E:  MOVLW  6E
4620:  MOVWF  x63
4622:  MOVLW  74
4624:  MOVWF  x64
4626:  MOVLW  6F
4628:  MOVWF  x65
462A:  CLRF   x66
462C:  MOVLW  54
462E:  MOVWF  x67
4630:  MOVLW  3A
4632:  MOVWF  x68
4634:  MOVLW  31
4636:  MOVWF  x69
4638:  MOVLW  32
463A:  MOVWF  x6A
463C:  MOVLW  31
463E:  MOVWF  x6B
4640:  MOVLW  B0
4642:  MOVWF  x6C
4644:  MOVLW  43
4646:  MOVWF  x6D
4648:  CLRF   x6E
464A:  MOVLW  74
464C:  MOVWF  x6F
464E:  MOVLW  5F
4650:  MOVWF  x70
4652:  MOVLW  65
4654:  MOVWF  x71
4656:  MOVLW  73
4658:  MOVWF  x72
465A:  MOVLW  74
465C:  MOVWF  x73
465E:  MOVLW  3A
4660:  MOVWF  x74
4662:  MOVLW  32
4664:  MOVWF  x75
4666:  MOVLW  30
4668:  MOVWF  x76
466A:  MOVLW  6D
466C:  MOVWF  x77
466E:  CLRF   x78
4670:  MOVLW  74
4672:  MOVWF  x79
4674:  MOVLW  5F
4676:  MOVWF  x7A
4678:  MOVLW  73
467A:  MOVWF  x7B
467C:  MOVLW  65
467E:  MOVWF  x7C
4680:  MOVLW  63
4682:  MOVWF  x7D
4684:  MOVLW  3A
4686:  MOVWF  x7E
4688:  MOVLW  4E
468A:  MOVWF  x7F
468C:  MOVLW  2F
468E:  MOVWF  x80
4690:  MOVLW  41
4692:  MOVWF  x81
4694:  CLRF   x82
4696:  MOVLW  4F
4698:  MOVWF  x83
469A:  MOVLW  4B
469C:  MOVWF  x84
469E:  CLRF   x85
46A0:  MOVLW  54
46A2:  MOVWF  x86
46A4:  MOVLW  65
46A6:  MOVWF  x87
46A8:  MOVLW  6D
46AA:  MOVWF  x88
46AC:  MOVLW  70
46AE:  MOVWF  x89
46B0:  MOVLW  65
46B2:  MOVWF  x8A
46B4:  MOVLW  72
46B6:  MOVWF  x8B
46B8:  MOVLW  61
46BA:  MOVWF  x8C
46BC:  MOVLW  74
46BE:  MOVWF  x8D
46C0:  MOVLW  75
46C2:  MOVWF  x8E
46C4:  MOVLW  72
46C6:  MOVWF  x8F
46C8:  MOVLW  61
46CA:  MOVWF  x90
46CC:  CLRF   x91
46CE:  MOVLW  54
46D0:  MOVWF  x92
46D2:  MOVLW  20
46D4:  MOVWF  x93
46D6:  MOVLW  45
46D8:  MOVWF  x94
46DA:  MOVLW  73
46DC:  MOVWF  x95
46DE:  MOVLW  74
46E0:  MOVWF  x96
46E2:  MOVLW  65
46E4:  MOVWF  x97
46E6:  MOVLW  72
46E8:  MOVWF  x98
46EA:  MOVLW  69
46EC:  MOVWF  x99
46EE:  MOVLW  6C
46F0:  MOVWF  x9A
46F2:  MOVLW  69
46F4:  MOVWF  x9B
46F6:  MOVLW  7A
46F8:  MOVWF  x9C
46FA:  MOVLW  61
46FC:  MOVWF  x9D
46FE:  MOVLW  63
4700:  MOVWF  x9E
4702:  MOVLW  69
4704:  MOVWF  x9F
4706:  MOVLW  6F
4708:  MOVWF  xA0
470A:  MOVLW  6E
470C:  MOVWF  xA1
470E:  CLRF   xA2
4710:  MOVLW  54
4712:  MOVWF  xA3
4714:  MOVLW  20
4716:  MOVWF  xA4
4718:  MOVLW  53
471A:  MOVWF  xA5
471C:  MOVLW  65
471E:  MOVWF  xA6
4720:  MOVLW  63
4722:  MOVWF  xA7
4724:  MOVLW  61
4726:  MOVWF  xA8
4728:  MOVLW  64
472A:  MOVWF  xA9
472C:  MOVLW  6F
472E:  MOVWF  xAA
4730:  CLRF   xAB
4732:  MOVLW  44
4734:  MOVWF  xAC
4736:  MOVLW  65
4738:  MOVWF  xAD
473A:  MOVLW  73
473C:  MOVWF  xAE
473E:  MOVLW  66
4740:  MOVWF  xAF
4742:  MOVLW  6F
4744:  MOVWF  xB0
4746:  MOVLW  67
4748:  MOVWF  xB1
474A:  MOVLW  75
474C:  MOVWF  xB2
474E:  MOVLW  65
4750:  MOVWF  xB3
4752:  MOVLW  20
4754:  MOVWF  xB4
4756:  MOVLW  52
4758:  MOVWF  xB5
475A:  MOVLW  61
475C:  MOVWF  xB6
475E:  MOVLW  70
4760:  MOVWF  xB7
4762:  MOVLW  69
4764:  MOVWF  xB8
4766:  MOVLW  64
4768:  MOVWF  xB9
476A:  MOVLW  6F
476C:  MOVWF  xBA
476E:  CLRF   xBB
4770:  MOVLW  53
4772:  MOVWF  xBC
4774:  MOVLW  69
4776:  MOVWF  xBD
4778:  CLRF   xBE
477A:  MOVLW  4E
477C:  MOVWF  xBF
477E:  MOVLW  6F
4780:  MOVWF  xC0
4782:  CLRF   xC1
4784:  MOVLW  46
4786:  MOVWF  xC2
4788:  MOVLW  69
478A:  MOVWF  xC3
478C:  MOVLW  6E
478E:  MOVWF  xC4
4790:  MOVLW  61
4792:  MOVWF  xC5
4794:  MOVLW  6C
4796:  MOVWF  xC6
4798:  MOVLW  69
479A:  MOVWF  xC7
479C:  MOVLW  7A
479E:  MOVWF  xC8
47A0:  MOVLW  61
47A2:  MOVWF  xC9
47A4:  MOVLW  64
47A6:  MOVWF  xCA
47A8:  MOVLW  6F
47AA:  MOVWF  xCB
47AC:  CLRF   xCC
47AE:  MOVLW  50
47B0:  MOVWF  xCD
47B2:  MOVLW  61
47B4:  MOVWF  xCE
47B6:  MOVLW  72
47B8:  MOVWF  xCF
47BA:  MOVLW  61
47BC:  MOVWF  xD0
47BE:  MOVLW  64
47C0:  MOVWF  xD1
47C2:  MOVLW  61
47C4:  MOVWF  xD2
47C6:  CLRF   xD3
47C8:  MOVLW  45
47CA:  MOVWF  xD4
47CC:  MOVLW  6D
47CE:  MOVWF  xD5
47D0:  MOVLW  65
47D2:  MOVWF  xD6
47D4:  MOVLW  72
47D6:  MOVWF  xD7
47D8:  MOVLW  67
47DA:  MOVWF  xD8
47DC:  MOVLW  65
47DE:  MOVWF  xD9
47E0:  MOVLW  6E
47E2:  MOVWF  xDA
47E4:  MOVLW  63
47E6:  MOVWF  xDB
47E8:  MOVLW  69
47EA:  MOVWF  xDC
47EC:  MOVLW  61
47EE:  MOVWF  xDD
47F0:  CLRF   xDE
47F2:  MOVLW  55
47F4:  MOVWF  xDF
47F6:  MOVLW  6C
47F8:  MOVWF  xE0
47FA:  MOVLW  74
47FC:  MOVWF  xE1
47FE:  MOVLW  69
4800:  MOVWF  xE2
4802:  MOVLW  6D
4804:  MOVWF  xE3
4806:  MOVLW  6F
4808:  MOVWF  xE4
480A:  CLRF   xE5
480C:  MOVLW  50
480E:  MOVWF  xE6
4810:  MOVLW  75
4812:  MOVWF  xE7
4814:  MOVLW  65
4816:  MOVWF  xE8
4818:  MOVLW  72
481A:  MOVWF  xE9
481C:  MOVLW  74
481E:  MOVWF  xEA
4820:  MOVLW  61
4822:  MOVWF  xEB
4824:  CLRF   xEC
4826:  MOVLW  41
4828:  MOVWF  xED
482A:  MOVLW  62
482C:  MOVWF  xEE
482E:  MOVLW  69
4830:  MOVWF  xEF
4832:  MOVLW  65
4834:  MOVWF  xF0
4836:  MOVLW  72
4838:  MOVWF  xF1
483A:  MOVLW  74
483C:  MOVWF  xF2
483E:  MOVLW  61
4840:  MOVWF  xF3
4842:  CLRF   xF4
4844:  MOVLB  2
4846:  CLRF   x0F
4848:  CLRF   x10
484A:  CLRF   x11
484C:  CLRF   x12
484E:  CLRF   x13
4850:  CLRF   x14
4852:  CLRF   x15
4854:  CLRF   x16
4856:  CLRF   x17
4858:  CLRF   x18
485A:  CLRF   x19
485C:  CLRF   x1A
485E:  CLRF   x1B
4860:  CLRF   x1C
4862:  CLRF   x1D
4864:  CLRF   x1E
4866:  CLRF   x58
4868:  CLRF   x59
....................    // TODO: USER CODE!! 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
486A:  MOVLW  85
486C:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
486E:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
4870:  MOVF   FC1,W
4872:  ANDLW  C0
4874:  IORLW  0E
4876:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
4878:  BCF    FC0.0
487A:  BSF    FC0.1
487C:  BCF    FC0.2
487E:  BSF    FC0.7
4880:  BSF    FC2.0
....................    sensores(0); 
4882:  MOVLB  3
4884:  CLRF   x9A
4886:  MOVLB  0
4888:  CALL   252E
....................    output_d(0); 
488C:  CLRF   F95
488E:  CLRF   F8C
....................    Camara_IN_off;Camara_OUT_off;Resistencia_off;Piloto_Fc_off;Piloto_Stop_off;Piloto_Puerta_off; 
4890:  BCF    F8B.2
4892:  BCF    F94.2
4894:  BCF    F8B.0
4896:  BCF    F94.0
4898:  BCF    F8B.1
489A:  BCF    F94.1
489C:  BCF    F8C.0
489E:  BCF    F95.0
48A0:  BCF    F8C.1
48A2:  BCF    F95.1
48A4:  BCF    F8C.2
48A6:  BCF    F95.2
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
48A8:  MOVFF  FF2,39A
48AC:  BCF    FF2.7
48AE:  CLRF   FA9
48B0:  BCF    FA6.6
48B2:  BCF    FA6.7
48B4:  BSF    FA6.0
48B6:  MOVF   FA8,W
48B8:  MOVLB  3
48BA:  BTFSC  x9A.7
48BC:  BSF    FF2.7
48BE:  MOVLB  2
48C0:  MOVWF  x13
48C2:  MOVFF  FF2,39A
48C6:  BCF    FF2.7
48C8:  MOVLW  01
48CA:  MOVWF  FA9
48CC:  BCF    FA6.6
48CE:  BCF    FA6.7
48D0:  BSF    FA6.0
48D2:  MOVF   FA8,W
48D4:  MOVLB  3
48D6:  BTFSC  x9A.7
48D8:  BSF    FF2.7
48DA:  MOVLB  2
48DC:  MOVWF  x14
48DE:  MOVFF  FF2,39A
48E2:  BCF    FF2.7
48E4:  MOVLW  02
48E6:  MOVWF  FA9
48E8:  BCF    FA6.6
48EA:  BCF    FA6.7
48EC:  BSF    FA6.0
48EE:  MOVF   FA8,W
48F0:  MOVLB  3
48F2:  BTFSC  x9A.7
48F4:  BSF    FF2.7
48F6:  MOVLB  2
48F8:  MOVWF  x15
48FA:  MOVFF  FF2,39A
48FE:  BCF    FF2.7
4900:  MOVLW  03
4902:  MOVWF  FA9
4904:  BCF    FA6.6
4906:  BCF    FA6.7
4908:  BSF    FA6.0
490A:  MOVF   FA8,W
490C:  MOVLB  3
490E:  BTFSC  x9A.7
4910:  BSF    FF2.7
4912:  MOVLB  2
4914:  MOVWF  x16
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
4916:  MOVFF  FF2,39A
491A:  BCF    FF2.7
491C:  MOVLW  04
491E:  MOVWF  FA9
4920:  BCF    FA6.6
4922:  BCF    FA6.7
4924:  BSF    FA6.0
4926:  MOVF   FA8,W
4928:  MOVLB  3
492A:  BTFSC  x9A.7
492C:  BSF    FF2.7
492E:  MOVLB  2
4930:  MOVWF  x1B
4932:  MOVFF  FF2,39A
4936:  BCF    FF2.7
4938:  MOVLW  05
493A:  MOVWF  FA9
493C:  BCF    FA6.6
493E:  BCF    FA6.7
4940:  BSF    FA6.0
4942:  MOVF   FA8,W
4944:  MOVLB  3
4946:  BTFSC  x9A.7
4948:  BSF    FF2.7
494A:  MOVLB  2
494C:  MOVWF  x1C
494E:  MOVFF  FF2,39A
4952:  BCF    FF2.7
4954:  MOVLW  06
4956:  MOVWF  FA9
4958:  BCF    FA6.6
495A:  BCF    FA6.7
495C:  BSF    FA6.0
495E:  MOVF   FA8,W
4960:  MOVLB  3
4962:  BTFSC  x9A.7
4964:  BSF    FF2.7
4966:  MOVLB  2
4968:  MOVWF  x1D
496A:  MOVFF  FF2,39A
496E:  BCF    FF2.7
4970:  MOVLW  07
4972:  MOVWF  FA9
4974:  BCF    FA6.6
4976:  BCF    FA6.7
4978:  BSF    FA6.0
497A:  MOVF   FA8,W
497C:  MOVLB  3
497E:  BTFSC  x9A.7
4980:  BSF    FF2.7
4982:  MOVLB  2
4984:  MOVWF  x1E
4986:  MOVFF  FF2,39A
498A:  BCF    FF2.7
498C:  MOVLW  08
498E:  MOVWF  FA9
4990:  BCF    FA6.6
4992:  BCF    FA6.7
4994:  BSF    FA6.0
4996:  MOVF   FA8,W
4998:  MOVLB  3
499A:  BTFSC  x9A.7
499C:  BSF    FF2.7
499E:  MOVLB  2
49A0:  MOVWF  x20
....................    Nivel=read_eeprom(9);Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12);Ajuste=read_eeprom(13);Ajusten=read_eeprom(14); 
49A2:  MOVFF  FF2,39A
49A6:  BCF    FF2.7
49A8:  MOVLW  09
49AA:  MOVWF  FA9
49AC:  BCF    FA6.6
49AE:  BCF    FA6.7
49B0:  BSF    FA6.0
49B2:  MOVF   FA8,W
49B4:  MOVLB  3
49B6:  BTFSC  x9A.7
49B8:  BSF    FF2.7
49BA:  MOVLB  2
49BC:  CLRF   x0E
49BE:  MOVWF  x0D
49C0:  MOVFF  FF2,39A
49C4:  BCF    FF2.7
49C6:  MOVLW  0A
49C8:  MOVWF  FA9
49CA:  BCF    FA6.6
49CC:  BCF    FA6.7
49CE:  BSF    FA6.0
49D0:  MOVF   FA8,W
49D2:  MOVLB  3
49D4:  BTFSC  x9A.7
49D6:  BSF    FF2.7
49D8:  CLRF   xA0
49DA:  MOVWF  x9F
49DC:  MOVLB  0
49DE:  CALL   24F8
49E2:  MOVFF  03,24F
49E6:  MOVFF  02,24E
49EA:  MOVFF  01,24D
49EE:  MOVFF  00,24C
49F2:  MOVFF  FF2,39A
49F6:  BCF    FF2.7
49F8:  MOVLW  0B
49FA:  MOVWF  FA9
49FC:  BCF    FA6.6
49FE:  BCF    FA6.7
4A00:  BSF    FA6.0
4A02:  MOVF   FA8,W
4A04:  MOVLB  3
4A06:  BTFSC  x9A.7
4A08:  BSF    FF2.7
4A0A:  CLRF   xA0
4A0C:  MOVWF  x9F
4A0E:  MOVLB  0
4A10:  CALL   24F8
4A14:  MOVFF  03,253
4A18:  MOVFF  02,252
4A1C:  MOVFF  01,251
4A20:  MOVFF  00,250
4A24:  MOVFF  FF2,39A
4A28:  BCF    FF2.7
4A2A:  MOVLW  0C
4A2C:  MOVWF  FA9
4A2E:  BCF    FA6.6
4A30:  BCF    FA6.7
4A32:  BSF    FA6.0
4A34:  MOVF   FA8,W
4A36:  MOVLB  3
4A38:  BTFSC  x9A.7
4A3A:  BSF    FF2.7
4A3C:  CLRF   xA0
4A3E:  MOVWF  x9F
4A40:  MOVLB  0
4A42:  CALL   24F8
4A46:  MOVFF  03,237
4A4A:  MOVFF  02,236
4A4E:  MOVFF  01,235
4A52:  MOVFF  00,234
4A56:  MOVFF  FF2,39A
4A5A:  BCF    FF2.7
4A5C:  MOVLW  0D
4A5E:  MOVWF  FA9
4A60:  BCF    FA6.6
4A62:  BCF    FA6.7
4A64:  BSF    FA6.0
4A66:  MOVF   FA8,W
4A68:  MOVLB  3
4A6A:  BTFSC  x9A.7
4A6C:  BSF    FF2.7
4A6E:  MOVLB  2
4A70:  MOVWF  x23
4A72:  MOVFF  FF2,39A
4A76:  BCF    FF2.7
4A78:  MOVLW  0E
4A7A:  MOVWF  FA9
4A7C:  BCF    FA6.6
4A7E:  BCF    FA6.7
4A80:  BSF    FA6.0
4A82:  MOVF   FA8,W
4A84:  MOVLB  3
4A86:  BTFSC  x9A.7
4A88:  BSF    FF2.7
4A8A:  MOVLB  2
4A8C:  MOVWF  x24
....................    Minutos=read_eeprom(20);  
4A8E:  MOVFF  FF2,39A
4A92:  BCF    FF2.7
4A94:  MOVLW  14
4A96:  MOVWF  FA9
4A98:  BCF    FA6.6
4A9A:  BCF    FA6.7
4A9C:  BSF    FA6.0
4A9E:  MOVF   FA8,W
4AA0:  MOVLB  3
4AA2:  BTFSC  x9A.7
4AA4:  BSF    FF2.7
4AA6:  MOVLB  2
4AA8:  CLRF   x0C
4AAA:  MOVWF  x0B
....................    float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
4AAC:  CLRF   x5A
4AAE:  CLRF   x5B
4AB0:  CLRF   x5C
4AB2:  CLRF   x5D
4AB4:  CLRF   x5E
4AB6:  CLRF   x5F
4AB8:  CLRF   x60
4ABA:  CLRF   x61
4ABC:  CLRF   x62
4ABE:  CLRF   x63
4AC0:  CLRF   x64
4AC2:  CLRF   x65
4AC4:  CLRF   x66
4AC6:  CLRF   x67
4AC8:  CLRF   x68
4ACA:  CLRF   x69
4ACC:  CLRF   x6A
4ACE:  CLRF   x6B
4AD0:  CLRF   x6C
4AD2:  CLRF   x6D
4AD4:  CLRF   x6E
4AD6:  CLRF   x6F
4AD8:  CLRF   x70
4ADA:  CLRF   x71
4ADC:  CLRF   x72
4ADE:  CLRF   x73
4AE0:  CLRF   x74
4AE2:  CLRF   x75
4AE4:  CLRF   x76
4AE6:  CLRF   x77
4AE8:  CLRF   x78
4AEA:  CLRF   x79
4AEC:  CLRF   x7A
4AEE:  CLRF   x7B
4AF0:  CLRF   x7C
4AF2:  CLRF   x7D
4AF4:  CLRF   x7E
4AF6:  CLRF   x7F
4AF8:  CLRF   x80
4AFA:  CLRF   x81
4AFC:  CLRF   x82
4AFE:  CLRF   x83
4B00:  CLRF   x84
4B02:  CLRF   x85
4B04:  CLRF   x86
4B06:  CLRF   x87
4B08:  CLRF   x88
4B0A:  CLRF   x89
4B0C:  CLRF   x8A
4B0E:  CLRF   x8B
4B10:  CLRF   x8C
4B12:  CLRF   x8D
4B14:  CLRF   x8E
4B16:  CLRF   x8F
4B18:  CLRF   x90
4B1A:  CLRF   x91
4B1C:  CLRF   x92
4B1E:  CLRF   x93
4B20:  CLRF   x94
4B22:  CLRF   x95
4B24:  CLRF   x96
4B26:  CLRF   x97
4B28:  CLRF   x98
4B2A:  CLRF   x99
4B2C:  CLRF   x9A
4B2E:  CLRF   x9B
4B30:  CLRF   x9C
4B32:  CLRF   x9D
4B34:  CLRF   x9E
4B36:  CLRF   x9F
4B38:  CLRF   xA0
4B3A:  CLRF   xA1
4B3C:  CLRF   xA2
4B3E:  CLRF   xA3
4B40:  CLRF   xA4
4B42:  CLRF   xA5
4B44:  CLRF   xA6
4B46:  CLRF   xA7
4B48:  CLRF   xA8
4B4A:  CLRF   xA9
4B4C:  CLRF   xAA
4B4E:  CLRF   xAB
4B50:  CLRF   xAC
4B52:  CLRF   xAD
4B54:  CLRF   xAE
4B56:  CLRF   xAF
4B58:  CLRF   xB0
4B5A:  CLRF   xB1
4B5C:  CLRF   xB2
4B5E:  CLRF   xB3
4B60:  CLRF   xB4
4B62:  CLRF   xB5
4B64:  CLRF   xB6
4B66:  CLRF   xB7
4B68:  CLRF   xB8
4B6A:  CLRF   xB9
4B6C:  CLRF   xBA
4B6E:  CLRF   xBB
4B70:  CLRF   xBC
4B72:  CLRF   xBD
4B74:  CLRF   xBE
4B76:  CLRF   xBF
4B78:  CLRF   xC0
4B7A:  CLRF   xC1
4B7C:  CLRF   xC2
4B7E:  CLRF   xC3
4B80:  CLRF   xC4
4B82:  CLRF   xC5
4B84:  CLRF   xC6
4B86:  CLRF   xC7
4B88:  CLRF   xC8
4B8A:  CLRF   xC9
4B8C:  CLRF   xCA
4B8E:  CLRF   xCB
4B90:  CLRF   xCC
4B92:  CLRF   xCD
4B94:  CLRF   xCE
4B96:  CLRF   xCF
4B98:  CLRF   xD0
4B9A:  CLRF   xD1
4B9C:  CLRF   xD2
4B9E:  CLRF   xD3
4BA0:  CLRF   xD4
4BA2:  CLRF   xD5
4BA4:  CLRF   xD6
4BA6:  CLRF   xD7
4BA8:  CLRF   xD8
4BAA:  CLRF   xD9
4BAC:  CLRF   xDA
4BAE:  CLRF   xDB
4BB0:  CLRF   xDC
4BB2:  CLRF   xDD
4BB4:  CLRF   xDE
4BB6:  CLRF   xDF
4BB8:  CLRF   xE0
4BBA:  CLRF   xE1
4BBC:  CLRF   xE2
4BBE:  CLRF   xE3
4BC0:  CLRF   xE4
4BC2:  CLRF   xE5
4BC4:  CLRF   xE6
4BC6:  CLRF   xE7
4BC8:  CLRF   xE8
4BCA:  CLRF   xE9
4BCC:  CLRF   xEA
4BCE:  CLRF   xEB
4BD0:  CLRF   xEC
4BD2:  CLRF   xED
4BD4:  CLRF   xEE
4BD6:  CLRF   xEF
4BD8:  CLRF   xF0
4BDA:  CLRF   xF1
4BDC:  CLRF   xF2
4BDE:  CLRF   xF3
4BE0:  CLRF   xF4
4BE2:  CLRF   xF5
4BE4:  CLRF   xF6
4BE6:  CLRF   xF7
4BE8:  CLRF   xF8
4BEA:  CLRF   xF9
4BEC:  CLRF   xFA
4BEE:  CLRF   xFB
4BF0:  CLRF   xFC
4BF2:  CLRF   xFD
4BF4:  CLRF   xFE
4BF6:  CLRF   xFF
4BF8:  MOVLB  3
4BFA:  CLRF   x00
4BFC:  CLRF   x01
4BFE:  CLRF   x02
4C00:  CLRF   x03
4C02:  CLRF   x04
4C04:  CLRF   x05
4C06:  CLRF   x06
4C08:  CLRF   x07
4C0A:  CLRF   x08
4C0C:  CLRF   x09
4C0E:  CLRF   x0A
4C10:  CLRF   x0B
4C12:  CLRF   x0C
4C14:  CLRF   x0D
4C16:  CLRF   x0E
4C18:  CLRF   x0F
4C1A:  CLRF   x10
4C1C:  CLRF   x11
4C1E:  CLRF   x12
4C20:  CLRF   x13
4C22:  CLRF   x14
4C24:  CLRF   x15
4C26:  CLRF   x16
4C28:  CLRF   x17
4C2A:  CLRF   x18
4C2C:  CLRF   x19
4C2E:  CLRF   x1A
4C30:  CLRF   x1B
4C32:  CLRF   x1C
4C34:  CLRF   x1D
4C36:  CLRF   x1E
4C38:  CLRF   x1F
4C3A:  CLRF   x20
4C3C:  CLRF   x21
4C3E:  CLRF   x22
4C40:  CLRF   x23
4C42:  CLRF   x24
4C44:  CLRF   x25
4C46:  CLRF   x26
4C48:  CLRF   x27
4C4A:  CLRF   x28
4C4C:  CLRF   x29
4C4E:  CLRF   x2A
4C50:  CLRF   x2B
4C52:  CLRF   x2C
4C54:  CLRF   x2D
4C56:  CLRF   x2E
4C58:  CLRF   x2F
4C5A:  CLRF   x30
4C5C:  CLRF   x31
4C5E:  CLRF   x32
4C60:  CLRF   x33
4C62:  CLRF   x34
4C64:  CLRF   x35
4C66:  CLRF   x36
4C68:  CLRF   x37
4C6A:  CLRF   x38
4C6C:  CLRF   x39
4C6E:  CLRF   x3A
4C70:  CLRF   x3B
4C72:  CLRF   x3C
4C74:  CLRF   x3D
4C76:  CLRF   x3E
4C78:  CLRF   x3F
4C7A:  CLRF   x40
4C7C:  CLRF   x41
4C7E:  CLRF   x42
4C80:  CLRF   x43
4C82:  CLRF   x44
4C84:  CLRF   x45
4C86:  CLRF   x46
4C88:  CLRF   x47
4C8A:  CLRF   x48
4C8C:  CLRF   x49
4C8E:  CLRF   x4A
4C90:  CLRF   x4B
4C92:  CLRF   x4C
4C94:  CLRF   x4D
4C96:  CLRF   x4E
4C98:  CLRF   x4F
4C9A:  CLRF   x50
4C9C:  CLRF   x51
4C9E:  CLRF   x52
4CA0:  CLRF   x53
4CA2:  CLRF   x54
4CA4:  CLRF   x55
4CA6:  CLRF   x56
4CA8:  CLRF   x57
4CAA:  CLRF   x58
4CAC:  CLRF   x59
4CAE:  CLRF   x5A
4CB0:  CLRF   x5B
4CB2:  CLRF   x5C
4CB4:  CLRF   x5D
4CB6:  CLRF   x5E
4CB8:  CLRF   x5F
4CBA:  CLRF   x60
4CBC:  CLRF   x61
4CBE:  CLRF   x62
4CC0:  CLRF   x63
4CC2:  CLRF   x64
4CC4:  CLRF   x65
4CC6:  CLRF   x66
4CC8:  CLRF   x67
4CCA:  CLRF   x68
4CCC:  CLRF   x69
4CCE:  CLRF   x6A
4CD0:  CLRF   x6B
4CD2:  CLRF   x6C
4CD4:  CLRF   x6D
4CD6:  CLRF   x6E
4CD8:  CLRF   x6F
4CDA:  CLRF   x70
4CDC:  CLRF   x71
4CDE:  CLRF   x72
4CE0:  CLRF   x73
4CE2:  CLRF   x74
4CE4:  CLRF   x75
4CE6:  CLRF   x76
4CE8:  CLRF   x77
4CEA:  CLRF   x78
4CEC:  CLRF   x79
4CEE:  CLRF   x7A
4CF0:  CLRF   x7B
4CF2:  CLRF   x7C
4CF4:  CLRF   x7D
4CF6:  CLRF   x7E
4CF8:  CLRF   x7F
4CFA:  CLRF   x80
4CFC:  CLRF   x81
4CFE:  CLRF   x82
4D00:  CLRF   x83
4D02:  CLRF   x84
4D04:  CLRF   x85
4D06:  CLRF   x86
4D08:  CLRF   x87
4D0A:  CLRF   x88
4D0C:  CLRF   x89
4D0E:  CLRF   x8A
4D10:  CLRF   x8B
4D12:  CLRF   x8C
4D14:  CLRF   x8D
4D16:  CLRF   x8E
4D18:  CLRF   x8F
4D1A:  CLRF   x90
4D1C:  CLRF   x91
4D1E:  CLRF   x92
4D20:  CLRF   x93
4D22:  CLRF   x94
4D24:  CLRF   x95
4D26:  CLRF   x96
4D28:  CLRF   x97
4D2A:  CLRF   x98
4D2C:  CLRF   x99
....................    //float promedio[10]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................    //float promedio2[10]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................    usb_init(); 
4D2E:  MOVLB  0
4D30:  GOTO   25F4
....................    usb_task(); 
4D34:  CALL   25D2
....................    glcd_init(ON);             //Inicializa la glcd 
4D38:  MOVLW  01
4D3A:  MOVLB  3
4D3C:  MOVWF  x9A
4D3E:  MOVLB  0
4D40:  GOTO   26C6
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
4D44:  MOVLB  3
4D46:  CLRF   x9B
4D48:  MOVLB  0
4D4A:  CALL   2638
....................    glcd_text57(0, 0, JP, 2, ON);            // Write the new voltage 
4D4E:  MOVLB  3
4D50:  CLRF   xAA
4D52:  CLRF   xAB
4D54:  CLRF   xAD
4D56:  MOVLW  62
4D58:  MOVWF  xAC
4D5A:  MOVLW  02
4D5C:  MOVWF  xAE
4D5E:  MOVLW  01
4D60:  MOVWF  xAF
4D62:  MOVLB  0
4D64:  CALL   288E
....................    glcd_text57(10, 20, Autoclave, 1, ON);            // Write the new voltage 
4D68:  MOVLW  0A
4D6A:  MOVLB  3
4D6C:  MOVWF  xAA
4D6E:  MOVLW  14
4D70:  MOVWF  xAB
4D72:  CLRF   xAD
4D74:  MOVLW  6E
4D76:  MOVWF  xAC
4D78:  MOVLW  01
4D7A:  MOVWF  xAE
4D7C:  MOVWF  xAF
4D7E:  MOVLB  0
4D80:  CALL   288E
....................    glcd_text57(30, 40, Lts, 1, ON);            // Write the new voltage 
4D84:  MOVLW  1E
4D86:  MOVLB  3
4D88:  MOVWF  xAA
4D8A:  MOVLW  28
4D8C:  MOVWF  xAB
4D8E:  CLRF   xAD
4D90:  MOVLW  8F
4D92:  MOVWF  xAC
4D94:  MOVLW  01
4D96:  MOVWF  xAE
4D98:  MOVWF  xAF
4D9A:  MOVLB  0
4D9C:  CALL   288E
....................    delay_ms(2000); 
4DA0:  MOVLW  08
4DA2:  MOVLB  3
4DA4:  MOVWF  x9A
4DA6:  MOVLW  FA
4DA8:  MOVWF  x9F
4DAA:  MOVLB  0
4DAC:  CALL   24CE
4DB0:  MOVLB  3
4DB2:  DECFSZ x9A,F
4DB4:  BRA    4DA6
....................    if(UP&&RIGHT) 
4DB6:  BSF    F92.1
4DB8:  BTFSS  F80.1
4DBA:  BRA    4EE4
4DBC:  BSF    F92.3
4DBE:  BTFSS  F80.3
4DC0:  BRA    4EE4
....................    {glcd_fillScreen(OFF);      //Limpia la pantalla 
4DC2:  CLRF   x9B
4DC4:  MOVLB  0
4DC6:  CALL   2638
....................       delay_ms(2000); 
4DCA:  MOVLW  08
4DCC:  MOVLB  3
4DCE:  MOVWF  x9A
4DD0:  MOVLW  FA
4DD2:  MOVWF  x9F
4DD4:  MOVLB  0
4DD6:  CALL   24CE
4DDA:  MOVLB  3
4DDC:  DECFSZ x9A,F
4DDE:  BRA    4DD0
....................       for(;;) 
....................       { 
....................          if(UP) 
4DE0:  BSF    F92.1
4DE2:  BTFSS  F80.1
4DE4:  BRA    4E3A
....................          {Minutos++;delay_ms(40);write_eeprom(20,Minutos);delay_ms(300);} 
4DE6:  MOVLB  2
4DE8:  INCF   x0B,F
4DEA:  BTFSC  FD8.2
4DEC:  INCF   x0C,F
4DEE:  MOVLW  28
4DF0:  MOVLB  3
4DF2:  MOVWF  x9F
4DF4:  MOVLB  0
4DF6:  CALL   24CE
4DFA:  MOVLW  14
4DFC:  MOVWF  FA9
4DFE:  MOVFF  20B,FA8
4E02:  BCF    FA6.6
4E04:  BCF    FA6.7
4E06:  BSF    FA6.2
4E08:  MOVF   FF2,W
4E0A:  MOVWF  00
4E0C:  BCF    FF2.7
4E0E:  MOVLB  F
4E10:  MOVLW  55
4E12:  MOVWF  FA7
4E14:  MOVLW  AA
4E16:  MOVWF  FA7
4E18:  BSF    FA6.1
4E1A:  BTFSC  FA6.1
4E1C:  BRA    4E1A
4E1E:  BCF    FA6.2
4E20:  MOVF   00,W
4E22:  IORWF  FF2,F
4E24:  MOVLW  02
4E26:  MOVLB  3
4E28:  MOVWF  x9A
4E2A:  MOVLW  96
4E2C:  MOVWF  x9F
4E2E:  MOVLB  0
4E30:  CALL   24CE
4E34:  MOVLB  3
4E36:  DECFSZ x9A,F
4E38:  BRA    4E2A
....................          if(DOWN) 
4E3A:  BSF    F92.2
4E3C:  BTFSS  F80.2
4E3E:  BRA    4E96
....................          {Minutos--;delay_ms(40);write_eeprom(20,Minutos);delay_ms(300);} 
4E40:  MOVLB  2
4E42:  MOVF   x0B,W
4E44:  BTFSC  FD8.2
4E46:  DECF   x0C,F
4E48:  DECF   x0B,F
4E4A:  MOVLW  28
4E4C:  MOVLB  3
4E4E:  MOVWF  x9F
4E50:  MOVLB  0
4E52:  CALL   24CE
4E56:  MOVLW  14
4E58:  MOVWF  FA9
4E5A:  MOVFF  20B,FA8
4E5E:  BCF    FA6.6
4E60:  BCF    FA6.7
4E62:  BSF    FA6.2
4E64:  MOVF   FF2,W
4E66:  MOVWF  00
4E68:  BCF    FF2.7
4E6A:  MOVLB  F
4E6C:  MOVLW  55
4E6E:  MOVWF  FA7
4E70:  MOVLW  AA
4E72:  MOVWF  FA7
4E74:  BSF    FA6.1
4E76:  BTFSC  FA6.1
4E78:  BRA    4E76
4E7A:  BCF    FA6.2
4E7C:  MOVF   00,W
4E7E:  IORWF  FF2,F
4E80:  MOVLW  02
4E82:  MOVLB  3
4E84:  MOVWF  x9A
4E86:  MOVLW  96
4E88:  MOVWF  x9F
4E8A:  MOVLB  0
4E8C:  CALL   24CE
4E90:  MOVLB  3
4E92:  DECFSZ x9A,F
4E94:  BRA    4E86
....................          if(RIGHT) 
4E96:  BSF    F92.3
4E98:  BTFSS  F80.3
4E9A:  BRA    4ECA
....................          {write_eeprom(20,Minutos);reset_cpu();} 
4E9C:  MOVLW  14
4E9E:  MOVWF  FA9
4EA0:  MOVFF  20B,FA8
4EA4:  BCF    FA6.6
4EA6:  BCF    FA6.7
4EA8:  BSF    FA6.2
4EAA:  MOVF   FF2,W
4EAC:  MOVWF  00
4EAE:  BCF    FF2.7
4EB0:  MOVLB  F
4EB2:  MOVLW  55
4EB4:  MOVWF  FA7
4EB6:  MOVLW  AA
4EB8:  MOVWF  FA7
4EBA:  BSF    FA6.1
4EBC:  BTFSC  FA6.1
4EBE:  BRA    4EBC
4EC0:  BCF    FA6.2
4EC2:  MOVF   00,W
4EC4:  IORWF  FF2,F
4EC6:  RESET
4EC8:  MOVLB  3
....................          displayTiempo(Minutos,20,40,4); 
4ECA:  MOVFF  20B,39B
4ECE:  MOVLW  14
4ED0:  MOVWF  x9C
4ED2:  MOVLW  28
4ED4:  MOVWF  x9D
4ED6:  MOVLW  04
4ED8:  MOVWF  x9E
4EDA:  MOVLB  0
4EDC:  CALL   2DF2
....................       } 
4EE0:  MOVLB  3
4EE2:  BRA    4DE0
....................    } 
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
4EE4:  CLRF   x9B
4EE6:  MOVLB  0
4EE8:  CALL   2638
....................    while(true) 
....................    { 
....................      
....................    while(STOP)       
....................       {delay_ms(100); 
4EEC:  BSF    F96.0
4EEE:  BTFSC  F84.0
4EF0:  BRA    4F72
4EF2:  MOVLW  64
4EF4:  MOVLB  3
4EF6:  MOVWF  x9F
4EF8:  MOVLB  0
4EFA:  CALL   24CE
....................       if(emergency==0) 
4EFE:  MOVLB  2
4F00:  BTFSC  x02.1
4F02:  BRA    4F52
....................          {glcd_fillScreen(OFF); glcd_text57(20, 0, Parada, 2, ON);glcd_text57(0, 40, Emergencia, 2, ON);Menu=16;}  
4F04:  MOVLB  3
4F06:  CLRF   x9B
4F08:  MOVLB  0
4F0A:  CALL   2638
4F0E:  MOVLW  14
4F10:  MOVLB  3
4F12:  MOVWF  xAA
4F14:  CLRF   xAB
4F16:  MOVLW  01
4F18:  MOVWF  xAD
4F1A:  MOVLW  CD
4F1C:  MOVWF  xAC
4F1E:  MOVLW  02
4F20:  MOVWF  xAE
4F22:  MOVLW  01
4F24:  MOVWF  xAF
4F26:  MOVLB  0
4F28:  CALL   288E
4F2C:  MOVLB  3
4F2E:  CLRF   xAA
4F30:  MOVLW  28
4F32:  MOVWF  xAB
4F34:  MOVLW  01
4F36:  MOVWF  xAD
4F38:  MOVLW  D4
4F3A:  MOVWF  xAC
4F3C:  MOVLW  02
4F3E:  MOVWF  xAE
4F40:  MOVLW  01
4F42:  MOVWF  xAF
4F44:  MOVLB  0
4F46:  CALL   288E
4F4A:  MOVLW  10
4F4C:  MOVLB  1
4F4E:  MOVWF  xF5
4F50:  MOVLB  2
....................          Camara_IN_on;Camara_OUT_on;Piloto_Stop_on;Resistencia_off;emergency=1; 
4F52:  BSF    F8B.2
4F54:  BCF    F94.2
4F56:  BSF    F8B.0
4F58:  BCF    F94.0
4F5A:  BSF    F8C.1
4F5C:  BCF    F95.1
4F5E:  BCF    F8B.1
4F60:  BCF    F94.1
4F62:  BSF    x02.1
....................         delay_ms(100);  
4F64:  MOVLW  64
4F66:  MOVLB  3
4F68:  MOVWF  x9F
4F6A:  MOVLB  0
4F6C:  CALL   24CE
....................       }    
4F70:  BRA    4EEC
....................    if(!STOP) 
4F72:  BSF    F96.0
4F74:  BTFSS  F84.0
4F76:  BRA    4F9C
....................       { 
....................          if(emergency==1) 
4F78:  MOVLB  2
4F7A:  BTFSS  x02.1
4F7C:  BRA    4F9A
....................          {glcd_fillScreen(OFF);Camara_IN_off;Camara_OUT_off;Piloto_Stop_off;emergency=0;reset_cpu();} 
4F7E:  MOVLB  3
4F80:  CLRF   x9B
4F82:  MOVLB  0
4F84:  CALL   2638
4F88:  BCF    F8B.2
4F8A:  BCF    F94.2
4F8C:  BCF    F8B.0
4F8E:  BCF    F94.0
4F90:  BCF    F8C.1
4F92:  BCF    F95.1
4F94:  MOVLB  2
4F96:  BCF    x02.1
4F98:  RESET
4F9A:  MOVLB  0
....................       } 
....................     
....................    while(PUERTA)       
....................       {delay_ms(100); 
4F9C:  BSF    F96.2
4F9E:  BTFSC  F84.2
4FA0:  BRA    5024
4FA2:  MOVLW  64
4FA4:  MOVLB  3
4FA6:  MOVWF  x9F
4FA8:  MOVLB  0
4FAA:  CALL   24CE
....................       if(door==0) 
4FAE:  MOVLB  2
4FB0:  BTFSC  x1F.4
4FB2:  BRA    5004
....................          {glcd_fillScreen(OFF); glcd_text57(20, 0, Puertas, 2, ON);glcd_text57(15, 40, Abierta, 2, ON);Menu=16;}  
4FB4:  MOVLB  3
4FB6:  CLRF   x9B
4FB8:  MOVLB  0
4FBA:  CALL   2638
4FBE:  MOVLW  14
4FC0:  MOVLB  3
4FC2:  MOVWF  xAA
4FC4:  CLRF   xAB
4FC6:  MOVLW  01
4FC8:  MOVWF  xAD
4FCA:  MOVLW  E6
4FCC:  MOVWF  xAC
4FCE:  MOVLW  02
4FD0:  MOVWF  xAE
4FD2:  MOVLW  01
4FD4:  MOVWF  xAF
4FD6:  MOVLB  0
4FD8:  CALL   288E
4FDC:  MOVLW  0F
4FDE:  MOVLB  3
4FE0:  MOVWF  xAA
4FE2:  MOVLW  28
4FE4:  MOVWF  xAB
4FE6:  MOVLW  01
4FE8:  MOVWF  xAD
4FEA:  MOVLW  ED
4FEC:  MOVWF  xAC
4FEE:  MOVLW  02
4FF0:  MOVWF  xAE
4FF2:  MOVLW  01
4FF4:  MOVWF  xAF
4FF6:  MOVLB  0
4FF8:  CALL   288E
4FFC:  MOVLW  10
4FFE:  MOVLB  1
5000:  MOVWF  xF5
5002:  MOVLB  2
....................          Camara_IN_off;Camara_OUT_off;Piloto_Puerta_on;Resistencia_off;door=1; 
5004:  BCF    F8B.2
5006:  BCF    F94.2
5008:  BCF    F8B.0
500A:  BCF    F94.0
500C:  BSF    F8C.2
500E:  BCF    F95.2
5010:  BCF    F8B.1
5012:  BCF    F94.1
5014:  BSF    x1F.4
....................         delay_ms(100);  
5016:  MOVLW  64
5018:  MOVLB  3
501A:  MOVWF  x9F
501C:  MOVLB  0
501E:  CALL   24CE
....................       }    
5022:  BRA    4F9C
....................    if(!PUERTA) 
5024:  BSF    F96.2
5026:  BTFSS  F84.2
5028:  BRA    504C
....................       { 
....................          if(door==1) 
502A:  MOVLB  2
502C:  BTFSS  x1F.4
502E:  BRA    504C
....................          {glcd_fillScreen(OFF);Camara_IN_off;Camara_OUT_off;Piloto_Puerta_off;door=0;reset_cpu();} 
5030:  MOVLB  3
5032:  CLRF   x9B
5034:  MOVLB  0
5036:  CALL   2638
503A:  BCF    F8B.2
503C:  BCF    F94.2
503E:  BCF    F8B.0
5040:  BCF    F94.0
5042:  BCF    F8C.2
5044:  BCF    F95.2
5046:  MOVLB  2
5048:  BCF    x1F.4
504A:  RESET
....................       } 
....................        
....................     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==16){ //Menu de Seleccion de Proceso. 
504C:  MOVLB  1
504E:  MOVF   xF5,W
5050:  SUBLW  10
5052:  BTFSS  FD8.2
5054:  BRA    5208
....................       glcd_text57(15, 0, Proc, 2, ON);            // Escribe Proceso en Tamaño 2.  
5056:  MOVLW  0F
5058:  MOVLB  3
505A:  MOVWF  xAA
505C:  CLRF   xAB
505E:  CLRF   xAD
5060:  MOVLW  AD
5062:  MOVWF  xAC
5064:  MOVLW  02
5066:  MOVWF  xAE
5068:  MOVLW  01
506A:  MOVWF  xAF
506C:  MOVLB  0
506E:  CALL   288E
....................          
....................       if(UP)//Si oprime hacia arriba 
5072:  BSF    F92.1
5074:  BTFSS  F80.1
5076:  BRA    50C0
....................       {  if(Flanco == 0)  
5078:  MOVLB  2
507A:  BTFSC  x01.5
507C:  BRA    50BE
....................             {Flecha2=Flecha2-8;Flecha=Flecha-8;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);glcd_text57(0, Flecha+8, Fle, 1, OFF);}} 
507E:  MOVLW  08
5080:  MOVLB  1
5082:  SUBWF  xFB,F
5084:  SUBWF  xF9,F
5086:  MOVLW  01
5088:  ADDWF  xF9,W
508A:  MOVWF  xFA
508C:  MOVLB  2
508E:  BSF    x01.5
5090:  MOVLW  1E
5092:  MOVLB  3
5094:  MOVWF  x9F
5096:  MOVLB  0
5098:  CALL   24CE
509C:  MOVLW  08
509E:  MOVLB  1
50A0:  ADDWF  xF9,W
50A2:  MOVLB  3
50A4:  MOVWF  x9A
50A6:  CLRF   xAA
50A8:  MOVWF  xAB
50AA:  CLRF   xAD
50AC:  MOVLW  99
50AE:  MOVWF  xAC
50B0:  MOVLW  01
50B2:  MOVWF  xAE
50B4:  CLRF   xAF
50B6:  MOVLB  0
50B8:  CALL   288E
50BC:  MOVLB  2
....................          else 
50BE:  BRA    50C4
....................             {Flanco = 0;} 
50C0:  MOVLB  2
50C2:  BCF    x01.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
50C4:  BSF    F92.2
50C6:  BTFSS  F80.2
50C8:  BRA    5110
....................       {  if(Flanco2 == 0)  
50CA:  BTFSC  x01.7
50CC:  BRA    510E
....................             {Flecha2=Flecha2+8;Flecha=Flecha+8;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);glcd_text57(0, Flecha-8, Fle, 1, OFF);}} 
50CE:  MOVLW  08
50D0:  MOVLB  1
50D2:  ADDWF  xFB,F
50D4:  ADDWF  xF9,F
50D6:  MOVLW  01
50D8:  SUBWF  xF9,W
50DA:  MOVWF  xFA
50DC:  MOVLB  2
50DE:  BSF    x01.7
50E0:  MOVLW  1E
50E2:  MOVLB  3
50E4:  MOVWF  x9F
50E6:  MOVLB  0
50E8:  CALL   24CE
50EC:  MOVLW  08
50EE:  MOVLB  1
50F0:  SUBWF  xF9,W
50F2:  MOVLB  3
50F4:  MOVWF  x9A
50F6:  CLRF   xAA
50F8:  MOVWF  xAB
50FA:  CLRF   xAD
50FC:  MOVLW  99
50FE:  MOVWF  xAC
5100:  MOVLW  01
5102:  MOVWF  xAE
5104:  CLRF   xAF
5106:  MOVLB  0
5108:  CALL   288E
510C:  MOVLB  2
....................          else 
510E:  BRA    5112
....................             {Flanco2 = 0;} 
5110:  BCF    x01.7
....................          
....................         if(Flecha2>n_opcionH+16) 
5112:  MOVLW  10
5114:  MOVLB  1
5116:  ADDWF  xF6,W
5118:  SUBWF  xFB,W
511A:  BZ    512A
511C:  BNC   512A
....................         {Flecha2=n_opcionL;Flecha=nMenuL;nMenuL=Flecha2;} 
511E:  MOVFF  1F7,1FB
5122:  MOVFF  1FC,1F9
5126:  MOVFF  1FB,1FC
....................          
....................         if(Flecha2<n_opcionL) 
512A:  MOVF   xF7,W
512C:  SUBWF  xFB,W
512E:  BC    5140
....................         {Flecha2=n_opcionH+16;Flecha=nMenuH+16;Flecha=Flecha2;}                
5130:  MOVLW  10
5132:  ADDWF  xF6,W
5134:  MOVWF  xFB
5136:  MOVLW  10
5138:  ADDWF  xFD,W
513A:  MOVWF  xF9
513C:  MOVFF  1FB,1F9
....................          
....................          
....................         mensajes(5,n_opcionL); 
5140:  MOVLW  05
5142:  MOVLB  3
5144:  MOVWF  x9B
5146:  MOVFF  1F7,39C
514A:  MOVLB  0
514C:  CALL   2FBA
....................         mensajes(7,n_opcionL+8); 
5150:  MOVLW  08
5152:  MOVLB  1
5154:  ADDWF  xF7,W
5156:  MOVLB  3
5158:  MOVWF  x9A
515A:  MOVLW  07
515C:  MOVWF  x9B
515E:  MOVFF  39A,39C
5162:  MOVLB  0
5164:  CALL   2FBA
....................         mensajes(6,n_opcionL+16); 
5168:  MOVLW  10
516A:  MOVLB  1
516C:  ADDWF  xF7,W
516E:  MOVLB  3
5170:  MOVWF  x9A
5172:  MOVLW  06
5174:  MOVWF  x9B
5176:  MOVFF  39A,39C
517A:  MOVLB  0
517C:  CALL   2FBA
....................         mensajes(4,n_opcionL+24); 
5180:  MOVLW  18
5182:  MOVLB  1
5184:  ADDWF  xF7,W
5186:  MOVLB  3
5188:  MOVWF  x9A
518A:  MOVLW  04
518C:  MOVWF  x9B
518E:  MOVFF  39A,39C
5192:  MOVLB  0
5194:  CALL   2FBA
....................         mensajes(8,n_opcionL+32); 
5198:  MOVLW  20
519A:  MOVLB  1
519C:  ADDWF  xF7,W
519E:  MOVLB  3
51A0:  MOVWF  x9A
51A2:  MOVLW  08
51A4:  MOVWF  x9B
51A6:  MOVFF  39A,39C
51AA:  MOVLB  0
51AC:  CALL   2FBA
....................  
....................         glcd_text57(0, Flecha, Fle, 1, ON);            // Write the new voltage         
51B0:  MOVLB  3
51B2:  CLRF   xAA
51B4:  MOVFF  1F9,3AB
51B8:  CLRF   xAD
51BA:  MOVLW  99
51BC:  MOVWF  xAC
51BE:  MOVLW  01
51C0:  MOVWF  xAE
51C2:  MOVWF  xAF
51C4:  MOVLB  0
51C6:  CALL   288E
....................        
....................  
....................       if(RIGHT)// Si oprime derecha 
51CA:  BSF    F92.3
51CC:  BTFSS  F80.3
51CE:  BRA    5202
....................       {  if(Flanco1 == 0)  
51D0:  MOVLB  2
51D2:  BTFSC  x01.6
51D4:  BRA    5200
....................             {Flanco1 = 1;Menu=Flecha2+1;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF); }} 
51D6:  BSF    x01.6
51D8:  MOVLW  01
51DA:  MOVLB  1
51DC:  ADDWF  xFB,W
51DE:  MOVWF  xF5
51E0:  MOVFF  1F7,1FB
51E4:  MOVFF  1F7,1F9
51E8:  MOVLW  1E
51EA:  MOVLB  3
51EC:  MOVWF  x9F
51EE:  MOVLB  0
51F0:  CALL   24CE
51F4:  MOVLB  3
51F6:  CLRF   x9B
51F8:  MOVLB  0
51FA:  CALL   2638
51FE:  MOVLB  2
....................          else 
5200:  BRA    5206
....................             {Flanco1 = 0;}    
5202:  MOVLB  2
5204:  BCF    x01.6
5206:  MOVLB  1
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //-Sub-Menus de selección de proceso. 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==17){ // Menu de Pre-ciclo 
5208:  MOVF   xF5,W
520A:  SUBLW  11
520C:  BTFSS  FD8.2
520E:  BRA    539E
....................       glcd_imagen(2); //Guante 
5210:  MOVLW  02
5212:  MOVLB  3
5214:  MOVWF  x9A
5216:  MOVLB  0
5218:  CALL   30E8
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
521C:  MOVLW  3F
521E:  MOVLB  3
5220:  MOVWF  xAC
5222:  MOVLW  28
5224:  MOVWF  xAD
5226:  MOVLW  64
5228:  MOVWF  xAE
522A:  MOVLW  35
522C:  MOVWF  xAF
522E:  MOVLW  01
5230:  MOVWF  xB0
5232:  MOVWF  xB1
5234:  MOVLB  0
5236:  CALL   2D30
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
523A:  MOVLW  4C
523C:  MOVLB  3
523E:  MOVWF  xAA
5240:  MOVLW  2C
5242:  MOVWF  xAB
5244:  MOVLW  01
5246:  MOVWF  xAD
5248:  MOVLW  83
524A:  MOVWF  xAC
524C:  MOVLW  01
524E:  MOVWF  xAE
5250:  CLRF   xAF
5252:  MOVLB  0
5254:  CALL   288E
....................          
....................       mensajes(5,55); 
5258:  MOVLW  05
525A:  MOVLB  3
525C:  MOVWF  x9B
525E:  MOVLW  37
5260:  MOVWF  x9C
5262:  MOVLB  0
5264:  CALL   2FBA
....................       //glcd_text57(60, 0, DuracionC, 1, ON);            // Write the new voltage         
....................       glcd_text57(53, 10, Tempe_pre, 1, ON);            // Write the new voltage         
5268:  MOVLW  35
526A:  MOVLB  3
526C:  MOVWF  xAA
526E:  MOVLW  0A
5270:  MOVWF  xAB
5272:  CLRF   xAD
5274:  MOVLW  A4
5276:  MOVWF  xAC
5278:  MOVLW  01
527A:  MOVWF  xAE
527C:  MOVWF  xAF
527E:  MOVLB  0
5280:  CALL   288E
....................       glcd_text57(53, 20, TestC, 1, ON); 
5284:  MOVLW  35
5286:  MOVLB  3
5288:  MOVWF  xAA
528A:  MOVLW  14
528C:  MOVWF  xAB
528E:  MOVLW  01
5290:  MOVWF  xAD
5292:  MOVLW  3C
5294:  MOVWF  xAC
5296:  MOVLW  01
5298:  MOVWF  xAE
529A:  MOVWF  xAF
529C:  MOVLB  0
529E:  CALL   288E
....................       glcd_text57(53, 30, TsecC, 1, ON); 
52A2:  MOVLW  35
52A4:  MOVLB  3
52A6:  MOVWF  xAA
52A8:  MOVLW  1E
52AA:  MOVWF  xAB
52AC:  MOVLW  01
52AE:  MOVWF  xAD
52B0:  MOVLW  45
52B2:  MOVWF  xAC
52B4:  MOVLW  01
52B6:  MOVWF  xAE
52B8:  MOVWF  xAF
52BA:  MOVLB  0
52BC:  CALL   288E
....................        
....................       if(LEFT)// Si oprime Izquier|da 
52C0:  BSF    F92.5
52C2:  BTFSS  F80.5
52C4:  BRA    5302
....................        {  if(Flanco3 == 0)  
52C6:  MOVLB  2
52C8:  BTFSC  x02.0
52CA:  BRA    5300
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
52CC:  BSF    x02.0
52CE:  MOVLW  1E
52D0:  MOVLB  3
52D2:  MOVWF  x9F
52D4:  MOVLB  0
52D6:  CALL   24CE
52DA:  MOVLW  10
52DC:  MOVLB  1
52DE:  MOVWF  xF5
52E0:  MOVFF  1F7,1FB
52E4:  MOVFF  1F7,1F9
52E8:  MOVLW  1E
52EA:  MOVLB  3
52EC:  MOVWF  x9F
52EE:  MOVLB  0
52F0:  CALL   24CE
52F4:  MOVLB  3
52F6:  CLRF   x9B
52F8:  MOVLB  0
52FA:  CALL   2638
52FE:  MOVLB  2
....................         } 
....................          else 
5300:  BRA    5306
....................             {Flanco3 = 0;}                 
5302:  MOVLB  2
5304:  BCF    x02.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5306:  BSF    F92.3
5308:  BTFSS  F80.3
530A:  BRA    539A
....................       {  if(Flanco1 == 0)  
530C:  BTFSC  x01.6
530E:  BRA    5398
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5310:  BSF    x01.6
5312:  MOVLW  64
5314:  MOVLB  1
5316:  MOVWF  xF5
5318:  MOVFF  1F7,1FB
531C:  MOVFF  1F7,1F9
5320:  MOVLW  1E
5322:  MOVLB  3
5324:  MOVWF  x9F
5326:  MOVLB  0
5328:  CALL   24CE
532C:  MOVLB  3
532E:  CLRF   x9B
5330:  MOVLB  0
5332:  CALL   2638
5336:  MOVLW  20
5338:  MOVLB  1
533A:  MOVWF  xF6
533C:  MOVLW  10
533E:  MOVWF  xF7
5340:  MOVWF  xFC
5342:  MOVLW  20
5344:  MOVWF  xFD
....................             estadot40=0;estadoc=1;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=121; 
5346:  MOVLB  2
5348:  BCF    x01.0
534A:  BSF    x01.1
534C:  BCF    x01.2
534E:  BCF    x01.3
5350:  BCF    x01.4
5352:  CLRF   x00
5354:  MOVLB  3
5356:  CLRF   xAA
5358:  MOVLW  37
535A:  MOVWF  xAB
535C:  CLRF   xAD
535E:  MOVLW  C9
5360:  MOVWF  xAC
5362:  MOVLW  01
5364:  MOVWF  xAE
5366:  MOVWF  xAF
5368:  MOVLB  0
536A:  CALL   288E
536E:  MOVLW  79
5370:  MOVLB  2
5372:  MOVWF  x20
....................             glcd_rect(15, 18, 30, 53, NO, ON);enable_interrupts(global);}} 
5374:  MOVLW  0F
5376:  MOVLB  3
5378:  MOVWF  xAC
537A:  MOVLW  12
537C:  MOVWF  xAD
537E:  MOVLW  1E
5380:  MOVWF  xAE
5382:  MOVLW  35
5384:  MOVWF  xAF
5386:  CLRF   xB0
5388:  MOVLW  01
538A:  MOVWF  xB1
538C:  MOVLB  0
538E:  CALL   2D30
5392:  MOVLW  C0
5394:  IORWF  FF2,F
5396:  MOVLB  2
....................          else 
5398:  BRA    539C
....................             {Flanco1 = 0;}    
539A:  BCF    x01.6
539C:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==25){ // Menu de Liquido       
539E:  MOVF   xF5,W
53A0:  SUBLW  19
53A2:  BTFSS  FD8.2
53A4:  BRA    54F8
....................       glcd_imagen(4); //ErlenMeyer con Liquido 
53A6:  MOVLW  04
53A8:  MOVLB  3
53AA:  MOVWF  x9A
53AC:  MOVLB  0
53AE:  CALL   30E8
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
53B2:  MOVLW  3F
53B4:  MOVLB  3
53B6:  MOVWF  xAC
53B8:  MOVLW  28
53BA:  MOVWF  xAD
53BC:  MOVLW  64
53BE:  MOVWF  xAE
53C0:  MOVLW  35
53C2:  MOVWF  xAF
53C4:  MOVLW  01
53C6:  MOVWF  xB0
53C8:  MOVWF  xB1
53CA:  MOVLB  0
53CC:  CALL   2D30
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
53D0:  MOVLW  4C
53D2:  MOVLB  3
53D4:  MOVWF  xAA
53D6:  MOVLW  2C
53D8:  MOVWF  xAB
53DA:  MOVLW  01
53DC:  MOVWF  xAD
53DE:  MOVLW  83
53E0:  MOVWF  xAC
53E2:  MOVLW  01
53E4:  MOVWF  xAE
53E6:  CLRF   xAF
53E8:  MOVLB  0
53EA:  CALL   288E
....................          
....................       mensajes(7,55); 
53EE:  MOVLW  07
53F0:  MOVLB  3
53F2:  MOVWF  x9B
53F4:  MOVLW  37
53F6:  MOVWF  x9C
53F8:  MOVLB  0
53FA:  CALL   2FBA
....................       //glcd_text57(60, 0, DuracionL, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TL, 1, ON);            // Write the new voltage         
53FE:  MOVLW  3F
5400:  MOVLB  3
5402:  MOVWF  xAA
5404:  MOVLW  0A
5406:  MOVWF  xAB
5408:  MOVLW  01
540A:  MOVWF  xAD
540C:  MOVLW  67
540E:  MOVWF  xAC
5410:  MOVLW  01
5412:  MOVWF  xAE
5414:  MOVWF  xAF
5416:  MOVLB  0
5418:  CALL   288E
....................       glcd_text57(63, 20, TestL, 1, ON);            // Write the new voltage         
541C:  MOVLW  3F
541E:  MOVLB  3
5420:  MOVWF  xAA
5422:  MOVLW  14
5424:  MOVWF  xAB
5426:  MOVLW  01
5428:  MOVWF  xAD
542A:  MOVLW  6F
542C:  MOVWF  xAC
542E:  MOVLW  01
5430:  MOVWF  xAE
5432:  MOVWF  xAF
5434:  MOVLB  0
5436:  CALL   288E
....................       glcd_text57(63, 30, TsecL, 1, ON);            // Write the new voltage         
543A:  MOVLW  3F
543C:  MOVLB  3
543E:  MOVWF  xAA
5440:  MOVLW  1E
5442:  MOVWF  xAB
5444:  MOVLW  01
5446:  MOVWF  xAD
5448:  MOVLW  79
544A:  MOVWF  xAC
544C:  MOVLW  01
544E:  MOVWF  xAE
5450:  MOVWF  xAF
5452:  MOVLB  0
5454:  CALL   288E
....................        
....................       if(LEFT)// Si oprime Izquier|da 
5458:  BSF    F92.5
545A:  BTFSS  F80.5
545C:  BRA    549A
....................        {  if(Flanco3 == 0)  
545E:  MOVLB  2
5460:  BTFSC  x02.0
5462:  BRA    5498
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5464:  BSF    x02.0
5466:  MOVLW  1E
5468:  MOVLB  3
546A:  MOVWF  x9F
546C:  MOVLB  0
546E:  CALL   24CE
5472:  MOVLW  10
5474:  MOVLB  1
5476:  MOVWF  xF5
5478:  MOVFF  1F7,1FB
547C:  MOVFF  1F7,1F9
5480:  MOVLW  1E
5482:  MOVLB  3
5484:  MOVWF  x9F
5486:  MOVLB  0
5488:  CALL   24CE
548C:  MOVLB  3
548E:  CLRF   x9B
5490:  MOVLB  0
5492:  CALL   2638
5496:  MOVLB  2
....................         } 
....................          else 
5498:  BRA    549E
....................             {Flanco3 = 0;}                 
549A:  MOVLB  2
549C:  BCF    x02.0
....................  
....................       if(RIGHT)// Si oprime derecha 
549E:  BSF    F92.3
54A0:  BTFSS  F80.3
54A2:  BRA    54F4
....................       {  if(Flanco1 == 0)  
54A4:  BTFSC  x01.6
54A6:  BRA    54F2
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
54A8:  BSF    x01.6
54AA:  MOVLW  5A
54AC:  MOVLB  1
54AE:  MOVWF  xF5
54B0:  MOVFF  1F7,1FB
54B4:  MOVFF  1F7,1F9
54B8:  MOVLW  1E
54BA:  MOVLB  3
54BC:  MOVWF  x9F
54BE:  MOVLB  0
54C0:  CALL   24CE
54C4:  MOVLB  3
54C6:  CLRF   x9B
54C8:  MOVLB  0
54CA:  CALL   2638
54CE:  MOVLW  20
54D0:  MOVLB  1
54D2:  MOVWF  xF6
54D4:  MOVLW  10
54D6:  MOVWF  xF7
54D8:  MOVWF  xFC
54DA:  MOVLW  20
54DC:  MOVWF  xFD
....................             estadot40=0;estadoc=0;estadoi=0;estadol=1;estadop=0;Liquid=1;Setpoint=121;}} 
54DE:  MOVLB  2
54E0:  BCF    x01.0
54E2:  BCF    x01.1
54E4:  BCF    x01.2
54E6:  BSF    x01.3
54E8:  BCF    x01.4
54EA:  MOVLW  01
54EC:  MOVWF  x00
54EE:  MOVLW  79
54F0:  MOVWF  x20
....................          else 
54F2:  BRA    54F6
....................             {Flanco1 = 0;}    
54F4:  BCF    x01.6
54F6:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==33){ // Menu de Instrumental Suave      
54F8:  MOVF   xF5,W
54FA:  SUBLW  21
54FC:  BTFSS  FD8.2
54FE:  BRA    5652
....................       glcd_imagen(3); //Erlen Meyer 
5500:  MOVLW  03
5502:  MOVLB  3
5504:  MOVWF  x9A
5506:  MOVLB  0
5508:  CALL   30E8
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
550C:  MOVLW  3F
550E:  MOVLB  3
5510:  MOVWF  xAC
5512:  MOVLW  28
5514:  MOVWF  xAD
5516:  MOVLW  64
5518:  MOVWF  xAE
551A:  MOVLW  35
551C:  MOVWF  xAF
551E:  MOVLW  01
5520:  MOVWF  xB0
5522:  MOVWF  xB1
5524:  MOVLB  0
5526:  CALL   2D30
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
552A:  MOVLW  4C
552C:  MOVLB  3
552E:  MOVWF  xAA
5530:  MOVLW  2C
5532:  MOVWF  xAB
5534:  MOVLW  01
5536:  MOVWF  xAD
5538:  MOVLW  83
553A:  MOVWF  xAC
553C:  MOVLW  01
553E:  MOVWF  xAE
5540:  CLRF   xAF
5542:  MOVLB  0
5544:  CALL   288E
....................          
....................       mensajes(6,55); 
5548:  MOVLW  06
554A:  MOVLB  3
554C:  MOVWF  x9B
554E:  MOVLW  37
5550:  MOVWF  x9C
5552:  MOVLB  0
5554:  CALL   2FBA
....................       //glcd_text57(60, 0, DuracionI, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TL, 1, ON);            // Write the new voltage         
5558:  MOVLW  3F
555A:  MOVLB  3
555C:  MOVWF  xAA
555E:  MOVLW  0A
5560:  MOVWF  xAB
5562:  MOVLW  01
5564:  MOVWF  xAD
5566:  MOVLW  67
5568:  MOVWF  xAC
556A:  MOVLW  01
556C:  MOVWF  xAE
556E:  MOVWF  xAF
5570:  MOVLB  0
5572:  CALL   288E
....................       glcd_text57(63, 20, TestI, 1, ON);            // Write the new voltage         
5576:  MOVLW  3F
5578:  MOVLB  3
557A:  MOVWF  xAA
557C:  MOVLW  14
557E:  MOVWF  xAB
5580:  MOVLW  01
5582:  MOVWF  xAD
5584:  MOVLW  4E
5586:  MOVWF  xAC
5588:  MOVLW  01
558A:  MOVWF  xAE
558C:  MOVWF  xAF
558E:  MOVLB  0
5590:  CALL   288E
....................       glcd_text57(63, 30, TsecL, 1, ON);            // Write the new voltage         
5594:  MOVLW  3F
5596:  MOVLB  3
5598:  MOVWF  xAA
559A:  MOVLW  1E
559C:  MOVWF  xAB
559E:  MOVLW  01
55A0:  MOVWF  xAD
55A2:  MOVLW  79
55A4:  MOVWF  xAC
55A6:  MOVLW  01
55A8:  MOVWF  xAE
55AA:  MOVWF  xAF
55AC:  MOVLB  0
55AE:  CALL   288E
....................  
....................       if(LEFT)// Si oprime Izquier|da 
55B2:  BSF    F92.5
55B4:  BTFSS  F80.5
55B6:  BRA    55F4
....................        {  if(Flanco3 == 0)  
55B8:  MOVLB  2
55BA:  BTFSC  x02.0
55BC:  BRA    55F2
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
55BE:  BSF    x02.0
55C0:  MOVLW  1E
55C2:  MOVLB  3
55C4:  MOVWF  x9F
55C6:  MOVLB  0
55C8:  CALL   24CE
55CC:  MOVLW  10
55CE:  MOVLB  1
55D0:  MOVWF  xF5
55D2:  MOVFF  1F7,1FB
55D6:  MOVFF  1F7,1F9
55DA:  MOVLW  1E
55DC:  MOVLB  3
55DE:  MOVWF  x9F
55E0:  MOVLB  0
55E2:  CALL   24CE
55E6:  MOVLB  3
55E8:  CLRF   x9B
55EA:  MOVLB  0
55EC:  CALL   2638
55F0:  MOVLB  2
....................         } 
....................          else 
55F2:  BRA    55F8
....................             {Flanco3 = 0;}                 
55F4:  MOVLB  2
55F6:  BCF    x02.0
....................  
....................       if(RIGHT)// Si oprime derecha 
55F8:  BSF    F92.3
55FA:  BTFSS  F80.3
55FC:  BRA    564E
....................       {  if(Flanco1 == 0)  
55FE:  BTFSC  x01.6
5600:  BRA    564C
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5602:  BSF    x01.6
5604:  MOVLW  5A
5606:  MOVLB  1
5608:  MOVWF  xF5
560A:  MOVFF  1F7,1FB
560E:  MOVFF  1F7,1F9
5612:  MOVLW  1E
5614:  MOVLB  3
5616:  MOVWF  x9F
5618:  MOVLB  0
561A:  CALL   24CE
561E:  MOVLB  3
5620:  CLRF   x9B
5622:  MOVLB  0
5624:  CALL   2638
5628:  MOVLW  20
562A:  MOVLB  1
562C:  MOVWF  xF6
562E:  MOVLW  10
5630:  MOVWF  xF7
5632:  MOVWF  xFC
5634:  MOVLW  20
5636:  MOVWF  xFD
....................             estadot40=0;estadoc=0;estadoi=1;estadol=0;estadop=0;Liquid=1;Setpoint=121;}} 
5638:  MOVLB  2
563A:  BCF    x01.0
563C:  BCF    x01.1
563E:  BSF    x01.2
5640:  BCF    x01.3
5642:  BCF    x01.4
5644:  MOVLW  01
5646:  MOVWF  x00
5648:  MOVLW  79
564A:  MOVWF  x20
....................          else 
564C:  BRA    5650
....................             {Flanco1 = 0;}    
564E:  BCF    x01.6
5650:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==41){ // Menu de textil e instrumental      
5652:  MOVF   xF5,W
5654:  SUBLW  29
5656:  BTFSS  FD8.2
5658:  BRA    57EA
....................       glcd_imagen(1); //Tijeras y Camisa 
565A:  MOVLW  01
565C:  MOVLB  3
565E:  MOVWF  x9A
5660:  MOVLB  0
5662:  CALL   30E8
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5666:  MOVLW  3F
5668:  MOVLB  3
566A:  MOVWF  xAC
566C:  MOVLW  28
566E:  MOVWF  xAD
5670:  MOVLW  64
5672:  MOVWF  xAE
5674:  MOVLW  35
5676:  MOVWF  xAF
5678:  MOVLW  01
567A:  MOVWF  xB0
567C:  MOVWF  xB1
567E:  MOVLB  0
5680:  CALL   2D30
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
5684:  MOVLW  4C
5686:  MOVLB  3
5688:  MOVWF  xAA
568A:  MOVLW  2C
568C:  MOVWF  xAB
568E:  MOVLW  01
5690:  MOVWF  xAD
5692:  MOVLW  83
5694:  MOVWF  xAC
5696:  MOVLW  01
5698:  MOVWF  xAE
569A:  CLRF   xAF
569C:  MOVLB  0
569E:  CALL   288E
....................          
....................       mensajes(4,55); 
56A2:  MOVLW  04
56A4:  MOVLB  3
56A6:  MOVWF  x9B
56A8:  MOVLW  37
56AA:  MOVWF  x9C
56AC:  MOVLB  0
56AE:  CALL   2FBA
....................       //glcd_text57(60, 0, Duracion40, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, T40, 1, ON);            // Write the new voltage         
56B2:  MOVLW  3F
56B4:  MOVLB  3
56B6:  MOVWF  xAA
56B8:  MOVLW  0A
56BA:  MOVWF  xAB
56BC:  MOVLW  01
56BE:  MOVWF  xAD
56C0:  MOVLW  1E
56C2:  MOVWF  xAC
56C4:  MOVLW  01
56C6:  MOVWF  xAE
56C8:  MOVWF  xAF
56CA:  MOVLB  0
56CC:  CALL   288E
....................       glcd_text57(63, 20, Test40, 1, ON);            // Write the new voltage         
56D0:  MOVLW  3F
56D2:  MOVLB  3
56D4:  MOVWF  xAA
56D6:  MOVLW  14
56D8:  MOVWF  xAB
56DA:  MOVLW  01
56DC:  MOVWF  xAD
56DE:  MOVLW  26
56E0:  MOVWF  xAC
56E2:  MOVLW  01
56E4:  MOVWF  xAE
56E6:  MOVWF  xAF
56E8:  MOVLB  0
56EA:  CALL   288E
....................       glcd_text57(63, 30, Tsec40, 1, ON);            // Write the new voltage         
56EE:  MOVLW  3F
56F0:  MOVLB  3
56F2:  MOVWF  xAA
56F4:  MOVLW  1E
56F6:  MOVWF  xAB
56F8:  MOVLW  01
56FA:  MOVWF  xAD
56FC:  MOVLW  30
56FE:  MOVWF  xAC
5700:  MOVLW  01
5702:  MOVWF  xAE
5704:  MOVWF  xAF
5706:  MOVLB  0
5708:  CALL   288E
....................        
....................       if(LEFT)// Si oprime Izquier|da 
570C:  BSF    F92.5
570E:  BTFSS  F80.5
5710:  BRA    574E
....................        {  if(Flanco3 == 0)  
5712:  MOVLB  2
5714:  BTFSC  x02.0
5716:  BRA    574C
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5718:  BSF    x02.0
571A:  MOVLW  1E
571C:  MOVLB  3
571E:  MOVWF  x9F
5720:  MOVLB  0
5722:  CALL   24CE
5726:  MOVLW  10
5728:  MOVLB  1
572A:  MOVWF  xF5
572C:  MOVFF  1F7,1FB
5730:  MOVFF  1F7,1F9
5734:  MOVLW  1E
5736:  MOVLB  3
5738:  MOVWF  x9F
573A:  MOVLB  0
573C:  CALL   24CE
5740:  MOVLB  3
5742:  CLRF   x9B
5744:  MOVLB  0
5746:  CALL   2638
574A:  MOVLB  2
....................         } 
....................          else 
574C:  BRA    5752
....................             {Flanco3 = 0;}                 
574E:  MOVLB  2
5750:  BCF    x02.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5752:  BSF    F92.3
5754:  BTFSS  F80.3
5756:  BRA    57E6
....................       {  if(Flanco1 == 0)  
5758:  BTFSC  x01.6
575A:  BRA    57E4
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
575C:  BSF    x01.6
575E:  MOVLW  64
5760:  MOVLB  1
5762:  MOVWF  xF5
5764:  MOVFF  1F7,1FB
5768:  MOVFF  1F7,1F9
576C:  MOVLW  1E
576E:  MOVLB  3
5770:  MOVWF  x9F
5772:  MOVLB  0
5774:  CALL   24CE
5778:  MOVLB  3
577A:  CLRF   x9B
577C:  MOVLB  0
577E:  CALL   2638
5782:  MOVLW  20
5784:  MOVLB  1
5786:  MOVWF  xF6
5788:  MOVLW  10
578A:  MOVWF  xF7
578C:  MOVWF  xFC
578E:  MOVLW  20
5790:  MOVWF  xFD
....................             estadot40=1;estadoc=0;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=121; 
5792:  MOVLB  2
5794:  BSF    x01.0
5796:  BCF    x01.1
5798:  BCF    x01.2
579A:  BCF    x01.3
579C:  BCF    x01.4
579E:  CLRF   x00
57A0:  MOVLB  3
57A2:  CLRF   xAA
57A4:  MOVLW  37
57A6:  MOVWF  xAB
57A8:  CLRF   xAD
57AA:  MOVLW  C9
57AC:  MOVWF  xAC
57AE:  MOVLW  01
57B0:  MOVWF  xAE
57B2:  MOVWF  xAF
57B4:  MOVLB  0
57B6:  CALL   288E
57BA:  MOVLW  79
57BC:  MOVLB  2
57BE:  MOVWF  x20
....................             glcd_rect(15, 18, 30, 53, NO, ON);enable_interrupts(global);}} 
57C0:  MOVLW  0F
57C2:  MOVLB  3
57C4:  MOVWF  xAC
57C6:  MOVLW  12
57C8:  MOVWF  xAD
57CA:  MOVLW  1E
57CC:  MOVWF  xAE
57CE:  MOVLW  35
57D0:  MOVWF  xAF
57D2:  CLRF   xB0
57D4:  MOVLW  01
57D6:  MOVWF  xB1
57D8:  MOVLB  0
57DA:  CALL   2D30
57DE:  MOVLW  C0
57E0:  IORWF  FF2,F
57E2:  MOVLB  2
....................          else 
57E4:  BRA    57E8
....................             {Flanco1 = 0;}    
57E6:  BCF    x01.6
57E8:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==49){ // Menu de Proceso Personalizado 
57EA:  MOVF   xF5,W
57EC:  SUBLW  31
57EE:  BTFSS  FD8.2
57F0:  GOTO   6452
....................       glcd_text57(10, 0, T_esterilizacion, 1, ON);            // Escribe Menu en Tamaño 2.          
57F4:  MOVLW  0A
57F6:  MOVLB  3
57F8:  MOVWF  xAA
57FA:  CLRF   xAB
57FC:  MOVLW  01
57FE:  MOVWF  xAD
5800:  MOVLW  92
5802:  MOVWF  xAC
5804:  MOVLW  01
5806:  MOVWF  xAE
5808:  MOVWF  xAF
580A:  MOVLB  0
580C:  CALL   288E
....................        
....................       if(Setpoint>134) 
5810:  MOVLB  2
5812:  MOVF   x20,W
5814:  SUBLW  86
5816:  BC    581C
....................       {Setpoint=105;} 
5818:  MOVLW  69
581A:  MOVWF  x20
....................       if(Setpoint<105) 
581C:  MOVF   x20,W
581E:  SUBLW  68
5820:  BNC   5826
....................       {Setpoint=134;} 
5822:  MOVLW  86
5824:  MOVWF  x20
....................        
....................       if(UP)//Si oprime hacia arriba 
5826:  BSF    F92.1
5828:  BTFSS  F80.1
582A:  BRA    58EA
....................       {  if(Flanco == 0)  
582C:  BTFSC  x01.5
582E:  BRA    58E4
....................             {Flanco = 1;delay_ms(30); 
5830:  BSF    x01.5
5832:  MOVLW  1E
5834:  MOVLB  3
5836:  MOVWF  x9F
5838:  MOVLB  0
583A:  CALL   24CE
....................             if((Flx==36)&&(Fly==8)) 
583E:  MOVLB  1
5840:  MOVF   xFE,W
5842:  SUBLW  24
5844:  BNZ   5852
5846:  MOVF   xFF,W
5848:  SUBLW  08
584A:  BNZ   5852
....................                {Testerilizacionp[3]++;} 
584C:  MOVLB  2
584E:  INCF   x16,F
5850:  MOVLB  1
....................             if((Flx==42)&&(Fly==8)) 
5852:  MOVF   xFE,W
5854:  SUBLW  2A
5856:  BNZ   5864
5858:  MOVF   xFF,W
585A:  SUBLW  08
585C:  BNZ   5864
....................                {Testerilizacionp[2]++;} 
585E:  MOVLB  2
5860:  INCF   x15,F
5862:  MOVLB  1
....................             if((Flx==54)&&(Fly==8)) 
5864:  MOVF   xFE,W
5866:  SUBLW  36
5868:  BNZ   5876
586A:  MOVF   xFF,W
586C:  SUBLW  08
586E:  BNZ   5876
....................                {Testerilizacionp[1]++;} 
5870:  MOVLB  2
5872:  INCF   x14,F
5874:  MOVLB  1
....................             if((Flx==60)&&(Fly==8)) 
5876:  MOVF   xFE,W
5878:  SUBLW  3C
587A:  BNZ   5888
587C:  MOVF   xFF,W
587E:  SUBLW  08
5880:  BNZ   5888
....................                {Testerilizacionp[0]++;} 
5882:  MOVLB  2
5884:  INCF   x13,F
5886:  MOVLB  1
....................              
....................             if((Flx==36)&&(Fly==40)) 
5888:  MOVF   xFE,W
588A:  SUBLW  24
588C:  BNZ   589A
588E:  MOVF   xFF,W
5890:  SUBLW  28
5892:  BNZ   589A
....................                {Tsecadop[3]++;} 
5894:  MOVLB  2
5896:  INCF   x1E,F
5898:  MOVLB  1
....................             if((Flx==42)&&(Fly==40)) 
589A:  MOVF   xFE,W
589C:  SUBLW  2A
589E:  BNZ   58AC
58A0:  MOVF   xFF,W
58A2:  SUBLW  28
58A4:  BNZ   58AC
....................                {Tsecadop[2]++;} 
58A6:  MOVLB  2
58A8:  INCF   x1D,F
58AA:  MOVLB  1
....................             if((Flx==54)&&(Fly==40)) 
58AC:  MOVF   xFE,W
58AE:  SUBLW  36
58B0:  BNZ   58BE
58B2:  MOVF   xFF,W
58B4:  SUBLW  28
58B6:  BNZ   58BE
....................                {Tsecadop[1]++;} 
58B8:  MOVLB  2
58BA:  INCF   x1C,F
58BC:  MOVLB  1
....................             if((Flx==60)&&(Fly==40)) 
58BE:  MOVF   xFE,W
58C0:  SUBLW  3C
58C2:  BNZ   58D0
58C4:  MOVF   xFF,W
58C6:  SUBLW  28
58C8:  BNZ   58D0
....................                {Tsecadop[0]++;}   
58CA:  MOVLB  2
58CC:  INCF   x1B,F
58CE:  MOVLB  1
....................             if(Fly==24)    
58D0:  MOVF   xFF,W
58D2:  SUBLW  18
58D4:  BNZ   58DA
....................             {unidad=1;} 
58D6:  MOVLW  01
58D8:  MOVWF  xF8
....................              
....................             if(Fly==56) 
58DA:  MOVF   xFF,W
58DC:  SUBLW  38
58DE:  BNZ   58E6
....................             {Setpoint++;} 
58E0:  MOVLB  2
58E2:  INCF   x20,F
58E4:  MOVLB  1
....................             } 
....................        } 
....................          else 
58E6:  BRA    58EE
58E8:  MOVLB  2
....................             {Flanco = 0;} 
58EA:  BCF    x01.5
58EC:  MOVLB  1
....................              
....................       if(DOWN)//Si oprime hacia abajo 
58EE:  BSF    F92.2
58F0:  BTFSS  F80.2
58F2:  BRA    59B0
....................       {  if(Flanco2 == 0)  
58F4:  MOVLB  2
58F6:  BTFSC  x01.7
58F8:  BRA    59AC
....................             {Flanco2 = 1;delay_ms(30); 
58FA:  BSF    x01.7
58FC:  MOVLW  1E
58FE:  MOVLB  3
5900:  MOVWF  x9F
5902:  MOVLB  0
5904:  CALL   24CE
....................             if((Flx==36)&&(Fly==8)) 
5908:  MOVLB  1
590A:  MOVF   xFE,W
590C:  SUBLW  24
590E:  BNZ   591C
5910:  MOVF   xFF,W
5912:  SUBLW  08
5914:  BNZ   591C
....................                {Testerilizacionp[3]--;} 
5916:  MOVLB  2
5918:  DECF   x16,F
591A:  MOVLB  1
....................             if((Flx==42)&&(Fly==8)) 
591C:  MOVF   xFE,W
591E:  SUBLW  2A
5920:  BNZ   592E
5922:  MOVF   xFF,W
5924:  SUBLW  08
5926:  BNZ   592E
....................                {Testerilizacionp[2]--;} 
5928:  MOVLB  2
592A:  DECF   x15,F
592C:  MOVLB  1
....................             if((Flx==54)&&(Fly==8)) 
592E:  MOVF   xFE,W
5930:  SUBLW  36
5932:  BNZ   5940
5934:  MOVF   xFF,W
5936:  SUBLW  08
5938:  BNZ   5940
....................                {Testerilizacionp[1]--;} 
593A:  MOVLB  2
593C:  DECF   x14,F
593E:  MOVLB  1
....................             if((Flx==60)&&(Fly==8)) 
5940:  MOVF   xFE,W
5942:  SUBLW  3C
5944:  BNZ   5952
5946:  MOVF   xFF,W
5948:  SUBLW  08
594A:  BNZ   5952
....................                {Testerilizacionp[0]--;} 
594C:  MOVLB  2
594E:  DECF   x13,F
5950:  MOVLB  1
....................              
....................             if((Flx==36)&&(Fly==40)) 
5952:  MOVF   xFE,W
5954:  SUBLW  24
5956:  BNZ   5964
5958:  MOVF   xFF,W
595A:  SUBLW  28
595C:  BNZ   5964
....................                {Tsecadop[3]--;} 
595E:  MOVLB  2
5960:  DECF   x1E,F
5962:  MOVLB  1
....................             if((Flx==42)&&(Fly==40)) 
5964:  MOVF   xFE,W
5966:  SUBLW  2A
5968:  BNZ   5976
596A:  MOVF   xFF,W
596C:  SUBLW  28
596E:  BNZ   5976
....................                {Tsecadop[2]--;} 
5970:  MOVLB  2
5972:  DECF   x1D,F
5974:  MOVLB  1
....................             if((Flx==54)&&(Fly==40)) 
5976:  MOVF   xFE,W
5978:  SUBLW  36
597A:  BNZ   5988
597C:  MOVF   xFF,W
597E:  SUBLW  28
5980:  BNZ   5988
....................                {Tsecadop[1]--;} 
5982:  MOVLB  2
5984:  DECF   x1C,F
5986:  MOVLB  1
....................             if((Flx==60)&&(Fly==40)) 
5988:  MOVF   xFE,W
598A:  SUBLW  3C
598C:  BNZ   599A
598E:  MOVF   xFF,W
5990:  SUBLW  28
5992:  BNZ   599A
....................                {Tsecadop[0]--;}   
5994:  MOVLB  2
5996:  DECF   x1B,F
5998:  MOVLB  1
....................             if(Fly==24)    
599A:  MOVF   xFF,W
599C:  SUBLW  18
599E:  BNZ   59A2
....................                {unidad=0;} 
59A0:  CLRF   xF8
....................             if(Fly==56) 
59A2:  MOVF   xFF,W
59A4:  SUBLW  38
59A6:  BNZ   59AE
....................             {Setpoint--;}                
59A8:  MOVLB  2
59AA:  DECF   x20,F
59AC:  MOVLB  1
....................             } 
....................       } 
....................          else 
59AE:  BRA    59B6
....................             {Flanco2 = 0;} 
59B0:  MOVLB  2
59B2:  BCF    x01.7
59B4:  MOVLB  1
....................              
....................             if((Flx==36)&&(Fly==8)) 
59B6:  MOVF   xFE,W
59B8:  SUBLW  24
59BA:  BNZ   5A24
59BC:  MOVF   xFF,W
59BE:  SUBLW  08
59C0:  BNZ   5A24
....................                {displayTiempo(Testerilizacionp[3],36,8,2);displayTiempo(Testerilizacionp[2],42,8,1); 
59C2:  MOVFF  216,39B
59C6:  MOVLW  24
59C8:  MOVLB  3
59CA:  MOVWF  x9C
59CC:  MOVLW  08
59CE:  MOVWF  x9D
59D0:  MOVLW  02
59D2:  MOVWF  x9E
59D4:  MOVLB  0
59D6:  CALL   2DF2
59DA:  MOVFF  215,39B
59DE:  MOVLW  2A
59E0:  MOVLB  3
59E2:  MOVWF  x9C
59E4:  MOVLW  08
59E6:  MOVWF  x9D
59E8:  MOVLW  01
59EA:  MOVWF  x9E
59EC:  MOVLB  0
59EE:  CALL   2DF2
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);} 
59F2:  MOVFF  214,39B
59F6:  MOVLW  36
59F8:  MOVLB  3
59FA:  MOVWF  x9C
59FC:  MOVLW  08
59FE:  MOVWF  x9D
5A00:  MOVLW  01
5A02:  MOVWF  x9E
5A04:  MOVLB  0
5A06:  CALL   2DF2
5A0A:  MOVFF  213,39B
5A0E:  MOVLW  3C
5A10:  MOVLB  3
5A12:  MOVWF  x9C
5A14:  MOVLW  08
5A16:  MOVWF  x9D
5A18:  MOVLW  01
5A1A:  MOVWF  x9E
5A1C:  MOVLB  0
5A1E:  CALL   2DF2
5A22:  MOVLB  1
....................             if((Flx==42)&&(Fly==8)) 
5A24:  MOVF   xFE,W
5A26:  SUBLW  2A
5A28:  BNZ   5A92
5A2A:  MOVF   xFF,W
5A2C:  SUBLW  08
5A2E:  BNZ   5A92
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,2); 
5A30:  MOVFF  216,39B
5A34:  MOVLW  24
5A36:  MOVLB  3
5A38:  MOVWF  x9C
5A3A:  MOVLW  08
5A3C:  MOVWF  x9D
5A3E:  MOVLW  01
5A40:  MOVWF  x9E
5A42:  MOVLB  0
5A44:  CALL   2DF2
5A48:  MOVFF  215,39B
5A4C:  MOVLW  2A
5A4E:  MOVLB  3
5A50:  MOVWF  x9C
5A52:  MOVLW  08
5A54:  MOVWF  x9D
5A56:  MOVLW  02
5A58:  MOVWF  x9E
5A5A:  MOVLB  0
5A5C:  CALL   2DF2
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);} 
5A60:  MOVFF  214,39B
5A64:  MOVLW  36
5A66:  MOVLB  3
5A68:  MOVWF  x9C
5A6A:  MOVLW  08
5A6C:  MOVWF  x9D
5A6E:  MOVLW  01
5A70:  MOVWF  x9E
5A72:  MOVLB  0
5A74:  CALL   2DF2
5A78:  MOVFF  213,39B
5A7C:  MOVLW  3C
5A7E:  MOVLB  3
5A80:  MOVWF  x9C
5A82:  MOVLW  08
5A84:  MOVWF  x9D
5A86:  MOVLW  01
5A88:  MOVWF  x9E
5A8A:  MOVLB  0
5A8C:  CALL   2DF2
5A90:  MOVLB  1
....................             if((Flx==54)&&(Fly==8)) 
5A92:  MOVF   xFE,W
5A94:  SUBLW  36
5A96:  BNZ   5B00
5A98:  MOVF   xFF,W
5A9A:  SUBLW  08
5A9C:  BNZ   5B00
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
5A9E:  MOVFF  216,39B
5AA2:  MOVLW  24
5AA4:  MOVLB  3
5AA6:  MOVWF  x9C
5AA8:  MOVLW  08
5AAA:  MOVWF  x9D
5AAC:  MOVLW  01
5AAE:  MOVWF  x9E
5AB0:  MOVLB  0
5AB2:  CALL   2DF2
5AB6:  MOVFF  215,39B
5ABA:  MOVLW  2A
5ABC:  MOVLB  3
5ABE:  MOVWF  x9C
5AC0:  MOVLW  08
5AC2:  MOVWF  x9D
5AC4:  MOVLW  01
5AC6:  MOVWF  x9E
5AC8:  MOVLB  0
5ACA:  CALL   2DF2
....................                displayTiempo(Testerilizacionp[1],54,8,2);displayTiempo(Testerilizacionp[0],60,8,1);} 
5ACE:  MOVFF  214,39B
5AD2:  MOVLW  36
5AD4:  MOVLB  3
5AD6:  MOVWF  x9C
5AD8:  MOVLW  08
5ADA:  MOVWF  x9D
5ADC:  MOVLW  02
5ADE:  MOVWF  x9E
5AE0:  MOVLB  0
5AE2:  CALL   2DF2
5AE6:  MOVFF  213,39B
5AEA:  MOVLW  3C
5AEC:  MOVLB  3
5AEE:  MOVWF  x9C
5AF0:  MOVLW  08
5AF2:  MOVWF  x9D
5AF4:  MOVLW  01
5AF6:  MOVWF  x9E
5AF8:  MOVLB  0
5AFA:  CALL   2DF2
5AFE:  MOVLB  1
....................             if((Flx==60)&&(Fly==8)) 
5B00:  MOVF   xFE,W
5B02:  SUBLW  3C
5B04:  BNZ   5B6E
5B06:  MOVF   xFF,W
5B08:  SUBLW  08
5B0A:  BNZ   5B6E
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
5B0C:  MOVFF  216,39B
5B10:  MOVLW  24
5B12:  MOVLB  3
5B14:  MOVWF  x9C
5B16:  MOVLW  08
5B18:  MOVWF  x9D
5B1A:  MOVLW  01
5B1C:  MOVWF  x9E
5B1E:  MOVLB  0
5B20:  CALL   2DF2
5B24:  MOVFF  215,39B
5B28:  MOVLW  2A
5B2A:  MOVLB  3
5B2C:  MOVWF  x9C
5B2E:  MOVLW  08
5B30:  MOVWF  x9D
5B32:  MOVLW  01
5B34:  MOVWF  x9E
5B36:  MOVLB  0
5B38:  CALL   2DF2
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,2);}   
5B3C:  MOVFF  214,39B
5B40:  MOVLW  36
5B42:  MOVLB  3
5B44:  MOVWF  x9C
5B46:  MOVLW  08
5B48:  MOVWF  x9D
5B4A:  MOVLW  01
5B4C:  MOVWF  x9E
5B4E:  MOVLB  0
5B50:  CALL   2DF2
5B54:  MOVFF  213,39B
5B58:  MOVLW  3C
5B5A:  MOVLB  3
5B5C:  MOVWF  x9C
5B5E:  MOVLW  08
5B60:  MOVWF  x9D
5B62:  MOVLW  02
5B64:  MOVWF  x9E
5B66:  MOVLB  0
5B68:  CALL   2DF2
5B6C:  MOVLB  1
....................             if((Fly!=8)) 
5B6E:  MOVF   xFF,W
5B70:  SUBLW  08
5B72:  BZ    5BD4
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
5B74:  MOVFF  216,39B
5B78:  MOVLW  24
5B7A:  MOVLB  3
5B7C:  MOVWF  x9C
5B7E:  MOVLW  08
5B80:  MOVWF  x9D
5B82:  MOVLW  01
5B84:  MOVWF  x9E
5B86:  MOVLB  0
5B88:  CALL   2DF2
5B8C:  MOVFF  215,39B
5B90:  MOVLW  2A
5B92:  MOVLB  3
5B94:  MOVWF  x9C
5B96:  MOVLW  08
5B98:  MOVWF  x9D
5B9A:  MOVLW  01
5B9C:  MOVWF  x9E
5B9E:  MOVLB  0
5BA0:  CALL   2DF2
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);}   
5BA4:  MOVFF  214,39B
5BA8:  MOVLW  36
5BAA:  MOVLB  3
5BAC:  MOVWF  x9C
5BAE:  MOVLW  08
5BB0:  MOVWF  x9D
5BB2:  MOVLW  01
5BB4:  MOVWF  x9E
5BB6:  MOVLB  0
5BB8:  CALL   2DF2
5BBC:  MOVFF  213,39B
5BC0:  MOVLW  3C
5BC2:  MOVLB  3
5BC4:  MOVWF  x9C
5BC6:  MOVLW  08
5BC8:  MOVWF  x9D
5BCA:  MOVLW  01
5BCC:  MOVWF  x9E
5BCE:  MOVLB  0
5BD0:  CALL   2DF2
....................              
....................              
....................       glcd_text57(15, 17, Desfogue, 1, ON);            // Escribe Menu en Tamaño 2.    
5BD4:  MOVLW  0F
5BD6:  MOVLB  3
5BD8:  MOVWF  xAA
5BDA:  MOVLW  11
5BDC:  MOVWF  xAB
5BDE:  MOVLW  01
5BE0:  MOVWF  xAD
5BE2:  MOVLW  AC
5BE4:  MOVWF  xAC
5BE6:  MOVLW  01
5BE8:  MOVWF  xAE
5BEA:  MOVWF  xAF
5BEC:  MOVLB  0
5BEE:  CALL   288E
....................              
....................             if(Fly==24) 
5BF2:  MOVLB  1
5BF4:  MOVF   xFF,W
5BF6:  SUBLW  18
5BF8:  BNZ   5C86
....................                {if(unidad==1) 
5BFA:  DECFSZ xF8,W
5BFC:  BRA    5C40
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, ON);glcd_text57(48, 25, Si, 1, OFF);Liquid=0;} 
5BFE:  MOVLW  30
5C00:  MOVLB  3
5C02:  MOVWF  xAC
5C04:  MOVLW  19
5C06:  MOVWF  xAD
5C08:  MOVLW  3B
5C0A:  MOVWF  xAE
5C0C:  MOVLW  20
5C0E:  MOVWF  xAF
5C10:  MOVLW  01
5C12:  MOVWF  xB0
5C14:  MOVWF  xB1
5C16:  MOVLB  0
5C18:  CALL   2D30
5C1C:  MOVLW  30
5C1E:  MOVLB  3
5C20:  MOVWF  xAA
5C22:  MOVLW  19
5C24:  MOVWF  xAB
5C26:  MOVLW  01
5C28:  MOVWF  xAD
5C2A:  MOVLW  BC
5C2C:  MOVWF  xAC
5C2E:  MOVLW  01
5C30:  MOVWF  xAE
5C32:  CLRF   xAF
5C34:  MOVLB  0
5C36:  CALL   288E
5C3A:  MOVLB  2
5C3C:  CLRF   x00
....................                 else 
5C3E:  BRA    5C82
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, ON);glcd_text57(48, 25, Noo, 1, OFF);Liquid=1;} 
5C40:  MOVLW  30
5C42:  MOVLB  3
5C44:  MOVWF  xAC
5C46:  MOVLW  19
5C48:  MOVWF  xAD
5C4A:  MOVLW  3B
5C4C:  MOVWF  xAE
5C4E:  MOVLW  20
5C50:  MOVWF  xAF
5C52:  MOVLW  01
5C54:  MOVWF  xB0
5C56:  MOVWF  xB1
5C58:  MOVLB  0
5C5A:  CALL   2D30
5C5E:  MOVLW  30
5C60:  MOVLB  3
5C62:  MOVWF  xAA
5C64:  MOVLW  19
5C66:  MOVWF  xAB
5C68:  MOVLW  01
5C6A:  MOVWF  xAD
5C6C:  MOVLW  BF
5C6E:  MOVWF  xAC
5C70:  MOVLW  01
5C72:  MOVWF  xAE
5C74:  CLRF   xAF
5C76:  MOVLB  0
5C78:  CALL   288E
5C7C:  MOVLW  01
5C7E:  MOVLB  2
5C80:  MOVWF  x00
....................                } 
....................             else 
5C82:  BRA    5D04
5C84:  MOVLB  1
....................                {if(unidad==1) 
5C86:  DECFSZ xF8,W
5C88:  BRA    5CC8
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, OFF);glcd_text57(48, 25, Si, 1, ON);} 
5C8A:  MOVLW  30
5C8C:  MOVLB  3
5C8E:  MOVWF  xAC
5C90:  MOVLW  19
5C92:  MOVWF  xAD
5C94:  MOVLW  3B
5C96:  MOVWF  xAE
5C98:  MOVLW  20
5C9A:  MOVWF  xAF
5C9C:  MOVLW  01
5C9E:  MOVWF  xB0
5CA0:  CLRF   xB1
5CA2:  MOVLB  0
5CA4:  CALL   2D30
5CA8:  MOVLW  30
5CAA:  MOVLB  3
5CAC:  MOVWF  xAA
5CAE:  MOVLW  19
5CB0:  MOVWF  xAB
5CB2:  MOVLW  01
5CB4:  MOVWF  xAD
5CB6:  MOVLW  BC
5CB8:  MOVWF  xAC
5CBA:  MOVLW  01
5CBC:  MOVWF  xAE
5CBE:  MOVWF  xAF
5CC0:  MOVLB  0
5CC2:  CALL   288E
....................                 else 
5CC6:  BRA    5D04
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, OFF);glcd_text57(48, 25, Noo, 1, ON);} 
5CC8:  MOVLW  30
5CCA:  MOVLB  3
5CCC:  MOVWF  xAC
5CCE:  MOVLW  19
5CD0:  MOVWF  xAD
5CD2:  MOVLW  3B
5CD4:  MOVWF  xAE
5CD6:  MOVLW  20
5CD8:  MOVWF  xAF
5CDA:  MOVLW  01
5CDC:  MOVWF  xB0
5CDE:  CLRF   xB1
5CE0:  MOVLB  0
5CE2:  CALL   2D30
5CE6:  MOVLW  30
5CE8:  MOVLB  3
5CEA:  MOVWF  xAA
5CEC:  MOVLW  19
5CEE:  MOVWF  xAB
5CF0:  MOVLW  01
5CF2:  MOVWF  xAD
5CF4:  MOVLW  BF
5CF6:  MOVWF  xAC
5CF8:  MOVLW  01
5CFA:  MOVWF  xAE
5CFC:  MOVWF  xAF
5CFE:  MOVLB  0
5D00:  CALL   288E
....................                } 
....................        
....................       if((Flx>60)&&(Fly<40))             
5D04:  MOVLB  1
5D06:  MOVF   xFE,W
5D08:  SUBLW  3C
5D0A:  BC    5D1A
5D0C:  MOVF   xFF,W
5D0E:  SUBLW  27
5D10:  BNC   5D1A
....................          {Flx=36;Fly=Fly+16;} 
5D12:  MOVLW  24
5D14:  MOVWF  xFE
5D16:  MOVLW  10
5D18:  ADDWF  xFF,F
....................       if((Flx<36)&&(Fly<=40))             
5D1A:  MOVF   xFE,W
5D1C:  SUBLW  23
5D1E:  BNC   5D2E
5D20:  MOVF   xFF,W
5D22:  SUBLW  28
5D24:  BNC   5D2E
....................          {Flx=36;Fly=8;}    
5D26:  MOVLW  24
5D28:  MOVWF  xFE
5D2A:  MOVLW  08
5D2C:  MOVWF  xFF
....................        
....................       glcd_text57(48, 8, Vacio, 1, ON); 
5D2E:  MOVLW  30
5D30:  MOVLB  3
5D32:  MOVWF  xAA
5D34:  MOVLW  08
5D36:  MOVWF  xAB
5D38:  MOVLW  01
5D3A:  MOVWF  xAD
5D3C:  MOVLW  16
5D3E:  MOVWF  xAC
5D40:  MOVLW  01
5D42:  MOVWF  xAE
5D44:  MOVWF  xAF
5D46:  MOVLB  0
5D48:  CALL   288E
....................       glcd_text57(48, 42, Vacio, 1, ON); 
5D4C:  MOVLW  30
5D4E:  MOVLB  3
5D50:  MOVWF  xAA
5D52:  MOVLW  2A
5D54:  MOVWF  xAB
5D56:  MOVLW  01
5D58:  MOVWF  xAD
5D5A:  MOVLW  16
5D5C:  MOVWF  xAC
5D5E:  MOVLW  01
5D60:  MOVWF  xAE
5D62:  MOVWF  xAF
5D64:  MOVLB  0
5D66:  CALL   288E
....................        
....................        
....................       glcd_text57(30, 34, T_secado, 1, ON);            // Escribe Menu en Tamaño 2.    
5D6A:  MOVLW  1E
5D6C:  MOVLB  3
5D6E:  MOVWF  xAA
5D70:  MOVLW  22
5D72:  MOVWF  xAB
5D74:  MOVLW  01
5D76:  MOVWF  xAD
5D78:  MOVLW  A3
5D7A:  MOVWF  xAC
5D7C:  MOVLW  01
5D7E:  MOVWF  xAE
5D80:  MOVWF  xAF
5D82:  MOVLB  0
5D84:  CALL   288E
....................       displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
5D88:  MOVFF  21E,39B
5D8C:  MOVLW  24
5D8E:  MOVLB  3
5D90:  MOVWF  x9C
5D92:  MOVLW  2A
5D94:  MOVWF  x9D
5D96:  MOVLW  01
5D98:  MOVWF  x9E
5D9A:  MOVLB  0
5D9C:  CALL   2DF2
5DA0:  MOVFF  21D,39B
5DA4:  MOVLW  2A
5DA6:  MOVLB  3
5DA8:  MOVWF  x9C
5DAA:  MOVWF  x9D
5DAC:  MOVLW  01
5DAE:  MOVWF  x9E
5DB0:  MOVLB  0
5DB2:  CALL   2DF2
....................       displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1); 
5DB6:  MOVFF  21C,39B
5DBA:  MOVLW  36
5DBC:  MOVLB  3
5DBE:  MOVWF  x9C
5DC0:  MOVLW  2A
5DC2:  MOVWF  x9D
5DC4:  MOVLW  01
5DC6:  MOVWF  x9E
5DC8:  MOVLB  0
5DCA:  CALL   2DF2
5DCE:  MOVFF  21B,39B
5DD2:  MOVLW  3C
5DD4:  MOVLB  3
5DD6:  MOVWF  x9C
5DD8:  MOVLW  2A
5DDA:  MOVWF  x9D
5DDC:  MOVLW  01
5DDE:  MOVWF  x9E
5DE0:  MOVLB  0
5DE2:  CALL   2DF2
....................  
....................             if(Fly==40) // Si posición en y esta en donde aparece lo de tiempo de secado 
5DE6:  MOVLB  1
5DE8:  MOVF   xFF,W
5DEA:  SUBLW  28
5DEC:  BTFSS  FD8.2
5DEE:  BRA    5FB8
....................                {if(unidad==1) // Si se acepto el desfogue rapido. 
5DF0:  DECFSZ xF8,W
5DF2:  BRA    5FA6
....................                 
....................                   {  if(Flx==36) // Si esta en la decena de minutos. 
5DF4:  MOVF   xFE,W
5DF6:  SUBLW  24
5DF8:  BNZ   5E5A
....................                         {displayTiempo(Tsecadop[3],36,42,2);displayTiempo(Tsecadop[2],42,42,1); 
5DFA:  MOVFF  21E,39B
5DFE:  MOVLW  24
5E00:  MOVLB  3
5E02:  MOVWF  x9C
5E04:  MOVLW  2A
5E06:  MOVWF  x9D
5E08:  MOVLW  02
5E0A:  MOVWF  x9E
5E0C:  MOVLB  0
5E0E:  CALL   2DF2
5E12:  MOVFF  21D,39B
5E16:  MOVLW  2A
5E18:  MOVLB  3
5E1A:  MOVWF  x9C
5E1C:  MOVWF  x9D
5E1E:  MOVLW  01
5E20:  MOVWF  x9E
5E22:  MOVLB  0
5E24:  CALL   2DF2
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1);} 
5E28:  MOVFF  21C,39B
5E2C:  MOVLW  36
5E2E:  MOVLB  3
5E30:  MOVWF  x9C
5E32:  MOVLW  2A
5E34:  MOVWF  x9D
5E36:  MOVLW  01
5E38:  MOVWF  x9E
5E3A:  MOVLB  0
5E3C:  CALL   2DF2
5E40:  MOVFF  21B,39B
5E44:  MOVLW  3C
5E46:  MOVLB  3
5E48:  MOVWF  x9C
5E4A:  MOVLW  2A
5E4C:  MOVWF  x9D
5E4E:  MOVLW  01
5E50:  MOVWF  x9E
5E52:  MOVLB  0
5E54:  CALL   2DF2
5E58:  MOVLB  1
....................                          
....................                      if(Flx==42) // Si esta en la unidad de minutos. 
5E5A:  MOVF   xFE,W
5E5C:  SUBLW  2A
5E5E:  BNZ   5EC0
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,2); 
5E60:  MOVFF  21E,39B
5E64:  MOVLW  24
5E66:  MOVLB  3
5E68:  MOVWF  x9C
5E6A:  MOVLW  2A
5E6C:  MOVWF  x9D
5E6E:  MOVLW  01
5E70:  MOVWF  x9E
5E72:  MOVLB  0
5E74:  CALL   2DF2
5E78:  MOVFF  21D,39B
5E7C:  MOVLW  2A
5E7E:  MOVLB  3
5E80:  MOVWF  x9C
5E82:  MOVWF  x9D
5E84:  MOVLW  02
5E86:  MOVWF  x9E
5E88:  MOVLB  0
5E8A:  CALL   2DF2
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1);} 
5E8E:  MOVFF  21C,39B
5E92:  MOVLW  36
5E94:  MOVLB  3
5E96:  MOVWF  x9C
5E98:  MOVLW  2A
5E9A:  MOVWF  x9D
5E9C:  MOVLW  01
5E9E:  MOVWF  x9E
5EA0:  MOVLB  0
5EA2:  CALL   2DF2
5EA6:  MOVFF  21B,39B
5EAA:  MOVLW  3C
5EAC:  MOVLB  3
5EAE:  MOVWF  x9C
5EB0:  MOVLW  2A
5EB2:  MOVWF  x9D
5EB4:  MOVLW  01
5EB6:  MOVWF  x9E
5EB8:  MOVLB  0
5EBA:  CALL   2DF2
5EBE:  MOVLB  1
....................                          
....................                      if(Flx==54) // Si esta en la decena de segundos. 
5EC0:  MOVF   xFE,W
5EC2:  SUBLW  36
5EC4:  BNZ   5F26
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
5EC6:  MOVFF  21E,39B
5ECA:  MOVLW  24
5ECC:  MOVLB  3
5ECE:  MOVWF  x9C
5ED0:  MOVLW  2A
5ED2:  MOVWF  x9D
5ED4:  MOVLW  01
5ED6:  MOVWF  x9E
5ED8:  MOVLB  0
5EDA:  CALL   2DF2
5EDE:  MOVFF  21D,39B
5EE2:  MOVLW  2A
5EE4:  MOVLB  3
5EE6:  MOVWF  x9C
5EE8:  MOVWF  x9D
5EEA:  MOVLW  01
5EEC:  MOVWF  x9E
5EEE:  MOVLB  0
5EF0:  CALL   2DF2
....................                         displayTiempo(Tsecadop[1],54,42,2);displayTiempo(Tsecadop[0],60,42,1);} 
5EF4:  MOVFF  21C,39B
5EF8:  MOVLW  36
5EFA:  MOVLB  3
5EFC:  MOVWF  x9C
5EFE:  MOVLW  2A
5F00:  MOVWF  x9D
5F02:  MOVLW  02
5F04:  MOVWF  x9E
5F06:  MOVLB  0
5F08:  CALL   2DF2
5F0C:  MOVFF  21B,39B
5F10:  MOVLW  3C
5F12:  MOVLB  3
5F14:  MOVWF  x9C
5F16:  MOVLW  2A
5F18:  MOVWF  x9D
5F1A:  MOVLW  01
5F1C:  MOVWF  x9E
5F1E:  MOVLB  0
5F20:  CALL   2DF2
5F24:  MOVLB  1
....................                          
....................                      if(Flx==60) // Si esta en la decena de segundos. 
5F26:  MOVF   xFE,W
5F28:  SUBLW  3C
5F2A:  BNZ   5F8C
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
5F2C:  MOVFF  21E,39B
5F30:  MOVLW  24
5F32:  MOVLB  3
5F34:  MOVWF  x9C
5F36:  MOVLW  2A
5F38:  MOVWF  x9D
5F3A:  MOVLW  01
5F3C:  MOVWF  x9E
5F3E:  MOVLB  0
5F40:  CALL   2DF2
5F44:  MOVFF  21D,39B
5F48:  MOVLW  2A
5F4A:  MOVLB  3
5F4C:  MOVWF  x9C
5F4E:  MOVWF  x9D
5F50:  MOVLW  01
5F52:  MOVWF  x9E
5F54:  MOVLB  0
5F56:  CALL   2DF2
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,2);} 
5F5A:  MOVFF  21C,39B
5F5E:  MOVLW  36
5F60:  MOVLB  3
5F62:  MOVWF  x9C
5F64:  MOVLW  2A
5F66:  MOVWF  x9D
5F68:  MOVLW  01
5F6A:  MOVWF  x9E
5F6C:  MOVLB  0
5F6E:  CALL   2DF2
5F72:  MOVFF  21B,39B
5F76:  MOVLW  3C
5F78:  MOVLB  3
5F7A:  MOVWF  x9C
5F7C:  MOVLW  2A
5F7E:  MOVWF  x9D
5F80:  MOVLW  02
5F82:  MOVWF  x9E
5F84:  MOVLB  0
5F86:  CALL   2DF2
5F8A:  MOVLB  1
....................                          
....................                      if(Flx>60) // Si paso de unidades de segundos, quiere decir que acepto lo programado y vuelve a Menú principal.   
5F8C:  MOVF   xFE,W
5F8E:  SUBLW  3C
5F90:  BC    5FA4
....................                         {Fly=Fly+16;estadot40=0;estadoc=0;estadoi=0;estadol=0;estadop=1;}  
5F92:  MOVLW  10
5F94:  ADDWF  xFF,F
5F96:  MOVLB  2
5F98:  BCF    x01.0
5F9A:  BCF    x01.1
5F9C:  BCF    x01.2
5F9E:  BCF    x01.3
5FA0:  BSF    x01.4
5FA2:  MOVLB  1
....................                          
....................                } 
....................                 else 
5FA4:  BRA    5FB8
....................                   {Fly=56;estadot40=0;estadoc=0;estadoi=0;estadol=0;estadop=1;} 
5FA6:  MOVLW  38
5FA8:  MOVWF  xFF
5FAA:  MOVLB  2
5FAC:  BCF    x01.0
5FAE:  BCF    x01.1
5FB0:  BCF    x01.2
5FB2:  BCF    x01.3
5FB4:  BSF    x01.4
5FB6:  MOVLB  1
....................                } 
....................                 
....................                 
....................                if(Fly==56) 
5FB8:  MOVF   xFF,W
5FBA:  SUBLW  38
5FBC:  BNZ   602C
....................                {glcd_text57(0, 55, T, 1, ON); // Muestra la palabra Temperatura de esterilización 
5FBE:  MOVLB  3
5FC0:  CLRF   xAA
5FC2:  MOVLW  37
5FC4:  MOVWF  xAB
5FC6:  MOVLW  01
5FC8:  MOVWF  xAD
5FCA:  MOVLW  86
5FCC:  MOVWF  xAC
5FCE:  MOVLW  01
5FD0:  MOVWF  xAE
5FD2:  MOVWF  xAF
5FD4:  MOVLB  0
5FD6:  CALL   288E
....................                glcd_text57(66, 55, Vacio, 1, ON); //  
5FDA:  MOVLW  42
5FDC:  MOVLB  3
5FDE:  MOVWF  xAA
5FE0:  MOVLW  37
5FE2:  MOVWF  xAB
5FE4:  MOVLW  01
5FE6:  MOVWF  xAD
5FE8:  MOVLW  16
5FEA:  MOVWF  xAC
5FEC:  MOVLW  01
5FEE:  MOVWF  xAE
5FF0:  MOVWF  xAF
5FF2:  MOVLB  0
5FF4:  CALL   288E
....................                displayTiempo(Setpoint,72,55,4); 
5FF8:  MOVFF  220,39B
5FFC:  MOVLW  48
5FFE:  MOVLB  3
6000:  MOVWF  x9C
6002:  MOVLW  37
6004:  MOVWF  x9D
6006:  MOVLW  04
6008:  MOVWF  x9E
600A:  MOVLB  0
600C:  CALL   2DF2
....................                glcd_circle(93,55,2,NO,ON); 
6010:  MOVLW  5D
6012:  MOVLB  3
6014:  MOVWF  x9A
6016:  MOVLW  37
6018:  MOVWF  x9B
601A:  MOVLW  02
601C:  MOVWF  x9C
601E:  CLRF   x9D
6020:  MOVLW  01
6022:  MOVWF  x9E
6024:  MOVLB  0
6026:  CALL   3482
602A:  MOVLB  1
....................                } 
....................                if(Fly!=56) 
602C:  MOVF   xFF,W
602E:  SUBLW  38
6030:  BZ    60A0
....................                {  glcd_text57(0, 55, T, 1, ON); // Muestra la palabra Temperatura de esterilización 
6032:  MOVLB  3
6034:  CLRF   xAA
6036:  MOVLW  37
6038:  MOVWF  xAB
603A:  MOVLW  01
603C:  MOVWF  xAD
603E:  MOVLW  86
6040:  MOVWF  xAC
6042:  MOVLW  01
6044:  MOVWF  xAE
6046:  MOVWF  xAF
6048:  MOVLB  0
604A:  CALL   288E
....................                glcd_text57(66, 55, Vacio, 1, ON); //  
604E:  MOVLW  42
6050:  MOVLB  3
6052:  MOVWF  xAA
6054:  MOVLW  37
6056:  MOVWF  xAB
6058:  MOVLW  01
605A:  MOVWF  xAD
605C:  MOVLW  16
605E:  MOVWF  xAC
6060:  MOVLW  01
6062:  MOVWF  xAE
6064:  MOVWF  xAF
6066:  MOVLB  0
6068:  CALL   288E
....................                displayTiempo(Setpoint,72,55,1); 
606C:  MOVFF  220,39B
6070:  MOVLW  48
6072:  MOVLB  3
6074:  MOVWF  x9C
6076:  MOVLW  37
6078:  MOVWF  x9D
607A:  MOVLW  01
607C:  MOVWF  x9E
607E:  MOVLB  0
6080:  CALL   2DF2
....................                glcd_circle(93,55,2,NO,ON); 
6084:  MOVLW  5D
6086:  MOVLB  3
6088:  MOVWF  x9A
608A:  MOVLW  37
608C:  MOVWF  x9B
608E:  MOVLW  02
6090:  MOVWF  x9C
6092:  CLRF   x9D
6094:  MOVLW  01
6096:  MOVWF  x9E
6098:  MOVLB  0
609A:  CALL   3482
609E:  MOVLB  1
....................                } 
....................                 
....................        if(LEFT)// Si oprime Izquier|da 
60A0:  BSF    F92.5
60A2:  BTFSS  F80.5
60A4:  BRA    614E
....................        {  if(Flanco3 == 0)  
60A6:  MOVLB  2
60A8:  BTFSC  x02.0
60AA:  BRA    614C
....................             {Flanco3 = 1; 
60AC:  BSF    x02.0
....................                if(Fly==24){Fly=Fly-16;} 
60AE:  MOVLB  1
60B0:  MOVF   xFF,W
60B2:  SUBLW  18
60B4:  BNZ   60BC
60B6:  MOVLW  10
60B8:  SUBWF  xFF,F
....................                else{Flx=Flx-6;} 
60BA:  BRA    60C0
60BC:  MOVLW  06
60BE:  SUBWF  xFE,F
....................                if((Fly==40)&&(Flx<36)){Fly=Fly-16;} 
60C0:  MOVF   xFF,W
60C2:  SUBLW  28
60C4:  BNZ   60D0
60C6:  MOVF   xFE,W
60C8:  SUBLW  23
60CA:  BNC   60D0
60CC:  MOVLW  10
60CE:  SUBWF  xFF,F
....................                if((Fly==8)&&(Flx<36)){Menu=16;glcd_fillScreen(OFF);Flecha2=n_opcionL; Flecha=n_opcionL;n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;} 
60D0:  MOVF   xFF,W
60D2:  SUBLW  08
60D4:  BNZ   6102
60D6:  MOVF   xFE,W
60D8:  SUBLW  23
60DA:  BNC   6102
60DC:  MOVLW  10
60DE:  MOVWF  xF5
60E0:  MOVLB  3
60E2:  CLRF   x9B
60E4:  MOVLB  0
60E6:  CALL   2638
60EA:  MOVFF  1F7,1FB
60EE:  MOVFF  1F7,1F9
60F2:  MOVLW  20
60F4:  MOVLB  1
60F6:  MOVWF  xF6
60F8:  MOVLW  10
60FA:  MOVWF  xF7
60FC:  MOVWF  xFC
60FE:  MOVLW  20
6100:  MOVWF  xFD
....................                if(Flx==48){Flx=42;};if(Flx==55){Flx=30;};delay_ms(30);delay_ms(30); 
6102:  MOVF   xFE,W
6104:  SUBLW  30
6106:  BNZ   610C
6108:  MOVLW  2A
610A:  MOVWF  xFE
610C:  MOVF   xFE,W
610E:  SUBLW  37
6110:  BNZ   6116
6112:  MOVLW  1E
6114:  MOVWF  xFE
6116:  MOVLW  1E
6118:  MOVLB  3
611A:  MOVWF  x9F
611C:  MOVLB  0
611E:  CALL   24CE
6122:  MOVLW  1E
6124:  MOVLB  3
6126:  MOVWF  x9F
6128:  MOVLB  0
612A:  CALL   24CE
....................                if(Fly==56){Fly=8;Flx=36;};delay_ms(30); 
612E:  MOVLB  1
6130:  MOVF   xFF,W
6132:  SUBLW  38
6134:  BNZ   613E
6136:  MOVLW  08
6138:  MOVWF  xFF
613A:  MOVLW  24
613C:  MOVWF  xFE
613E:  MOVLW  1E
6140:  MOVLB  3
6142:  MOVWF  x9F
6144:  MOVLB  0
6146:  CALL   24CE
614A:  MOVLB  2
....................              } 
....................         } 
....................          else 
614C:  BRA    6152
....................             {Flanco3 = 0;}                 
614E:  MOVLB  2
6150:  BCF    x02.0
....................                 
....................         if(Testerilizacionp[0]<0) // Si esta unidad es menor a 0 pasa a 9. 
6152:  BTFSC  x13.7
6154:  BRA    6158
6156:  BRA    615C
....................           {Testerilizacionp[0]=9;} 
6158:  MOVLW  09
615A:  MOVWF  x13
....................         if(Testerilizacionp[1]<0) // Si esta unidad es menor a 0 pasa a 5. 
615C:  BTFSC  x14.7
615E:  BRA    6162
6160:  BRA    6166
....................           {Testerilizacionp[1]=5;} 
6162:  MOVLW  05
6164:  MOVWF  x14
....................         if(Testerilizacionp[2]<0) // Si esta unidad es menor a 0 pasa a 9. 
6166:  BTFSC  x15.7
6168:  BRA    616C
616A:  BRA    6170
....................           {Testerilizacionp[2]=9;} 
616C:  MOVLW  09
616E:  MOVWF  x15
....................         if(Testerilizacionp[3]<0) // Si esta unidad es menor a 0 pasa a 9. 
6170:  BTFSC  x16.7
6172:  BRA    6176
6174:  BRA    617A
....................           {Testerilizacionp[3]=9;}   
6176:  MOVLW  09
6178:  MOVWF  x16
....................            
....................         if(Testerilizacionp[0]>9) // Si esta unidad es mayor a 9 pasa a 0. 
617A:  BTFSC  x13.7
617C:  BRA    6186
617E:  MOVF   x13,W
6180:  SUBLW  09
6182:  BC    6186
....................           {Testerilizacionp[0]=0;} 
6184:  CLRF   x13
....................         if(Testerilizacionp[1]>5) // Si esta unidad es mayor a 5 pasa a 0. 
6186:  BTFSC  x14.7
6188:  BRA    6192
618A:  MOVF   x14,W
618C:  SUBLW  05
618E:  BC    6192
....................           {Testerilizacionp[1]=0;} 
6190:  CLRF   x14
....................         if(Testerilizacionp[2]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6192:  BTFSC  x15.7
6194:  BRA    619E
6196:  MOVF   x15,W
6198:  SUBLW  09
619A:  BC    619E
....................           {Testerilizacionp[2]=0;} 
619C:  CLRF   x15
....................         if(Testerilizacionp[3]>9) // Si esta unidad es mayor a 9 pasa a 0. 
619E:  BTFSC  x16.7
61A0:  BRA    61AA
61A2:  MOVF   x16,W
61A4:  SUBLW  09
61A6:  BC    61AA
....................           {Testerilizacionp[3]=0;}     
61A8:  CLRF   x16
....................            
....................         if(Tsecadop[0]<0) // Si esta unidad es menor a 0 pasa a 9. 
61AA:  BTFSC  x1B.7
61AC:  BRA    61B0
61AE:  BRA    61B4
....................           {Tsecadop[0]=9;} 
61B0:  MOVLW  09
61B2:  MOVWF  x1B
....................         if(Tsecadop[1]<0) // Si esta unidad es menor a 0 pasa a 5. 
61B4:  BTFSC  x1C.7
61B6:  BRA    61BA
61B8:  BRA    61BE
....................           {Tsecadop[1]=5;} 
61BA:  MOVLW  05
61BC:  MOVWF  x1C
....................         if(Tsecadop[2]<0) // Si esta unidad es menor a 0 pasa a 9. 
61BE:  BTFSC  x1D.7
61C0:  BRA    61C4
61C2:  BRA    61C8
....................           {Tsecadop[2]=9;} 
61C4:  MOVLW  09
61C6:  MOVWF  x1D
....................         if(Tsecadop[3]<0) // Si esta unidad es menor a 0 pasa a 9. 
61C8:  BTFSC  x1E.7
61CA:  BRA    61CE
61CC:  BRA    61D2
....................           {Tsecadop[3]=9;}   
61CE:  MOVLW  09
61D0:  MOVWF  x1E
....................            
....................         if(Tsecadop[0]>9) // Si esta unidad es mayor a 9 pasa a 0. 
61D2:  BTFSC  x1B.7
61D4:  BRA    61DE
61D6:  MOVF   x1B,W
61D8:  SUBLW  09
61DA:  BC    61DE
....................           {Tsecadop[0]=0;} 
61DC:  CLRF   x1B
....................         if(Tsecadop[1]>5) // Si esta unidad es mayor a 5 pasa a 0. 
61DE:  BTFSC  x1C.7
61E0:  BRA    61EA
61E2:  MOVF   x1C,W
61E4:  SUBLW  05
61E6:  BC    61EA
....................           {Tsecadop[1]=0;} 
61E8:  CLRF   x1C
....................         if(Tsecadop[2]>9) // Si esta unidad es mayor a 9 pasa a 0. 
61EA:  BTFSC  x1D.7
61EC:  BRA    61F6
61EE:  MOVF   x1D,W
61F0:  SUBLW  09
61F2:  BC    61F6
....................           {Tsecadop[2]=0;} 
61F4:  CLRF   x1D
....................         if(Tsecadop[3]>9) // Si esta unidad es mayor a 9 pasa a 0. 
61F6:  BTFSC  x1E.7
61F8:  BRA    6202
61FA:  MOVF   x1E,W
61FC:  SUBLW  09
61FE:  BC    6202
....................           {Tsecadop[3]=0;}       
6200:  CLRF   x1E
....................           
....................          if(RIGHT)// Si oprime derecha 
6202:  BSF    F92.3
6204:  BTFSS  F80.3
6206:  BRA    644E
....................       {  if(Flanco1 == 0)  
6208:  BTFSC  x01.6
620A:  BRA    644C
....................             {Flanco1 = 1; 
620C:  BSF    x01.6
....................                if(Fly==24){Fly=Fly+16;} 
620E:  MOVLB  1
6210:  MOVF   xFF,W
6212:  SUBLW  18
6214:  BNZ   621C
6216:  MOVLW  10
6218:  ADDWF  xFF,F
....................                else{Flx=Flx+6;} 
621A:  BRA    6220
621C:  MOVLW  06
621E:  ADDWF  xFE,F
....................                if(Flx==48){Flx=54;};if(Flx==30){Flx=55;};delay_ms(30); 
6220:  MOVF   xFE,W
6222:  SUBLW  30
6224:  BNZ   622A
6226:  MOVLW  36
6228:  MOVWF  xFE
622A:  MOVF   xFE,W
622C:  SUBLW  1E
622E:  BNZ   6234
6230:  MOVLW  37
6232:  MOVWF  xFE
6234:  MOVLW  1E
6236:  MOVLB  3
6238:  MOVWF  x9F
623A:  MOVLB  0
623C:  CALL   24CE
....................                if(Fly==56) 
6240:  MOVLB  1
6242:  MOVF   xFF,W
6244:  SUBLW  38
6246:  BTFSS  FD8.2
6248:  BRA    644A
....................                { write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]);write_eeprom(2,Testerilizacionp[2]); 
624A:  CLRF   FA9
624C:  MOVFF  213,FA8
6250:  BCF    FA6.6
6252:  BCF    FA6.7
6254:  BSF    FA6.2
6256:  MOVF   FF2,W
6258:  MOVWF  00
625A:  BCF    FF2.7
625C:  MOVLB  F
625E:  MOVLW  55
6260:  MOVWF  FA7
6262:  MOVLW  AA
6264:  MOVWF  FA7
6266:  BSF    FA6.1
6268:  BTFSC  FA6.1
626A:  BRA    6268
626C:  BCF    FA6.2
626E:  MOVF   00,W
6270:  IORWF  FF2,F
6272:  MOVLW  01
6274:  MOVWF  FA9
6276:  MOVFF  214,FA8
627A:  BCF    FA6.6
627C:  BCF    FA6.7
627E:  BSF    FA6.2
6280:  MOVF   FF2,W
6282:  MOVWF  00
6284:  BCF    FF2.7
6286:  MOVLW  55
6288:  MOVWF  FA7
628A:  MOVLW  AA
628C:  MOVWF  FA7
628E:  BSF    FA6.1
6290:  BTFSC  FA6.1
6292:  BRA    6290
6294:  BCF    FA6.2
6296:  MOVF   00,W
6298:  IORWF  FF2,F
629A:  MOVLW  02
629C:  MOVWF  FA9
629E:  MOVFF  215,FA8
62A2:  BCF    FA6.6
62A4:  BCF    FA6.7
62A6:  BSF    FA6.2
62A8:  MOVF   FF2,W
62AA:  MOVWF  00
62AC:  BCF    FF2.7
62AE:  MOVLW  55
62B0:  MOVWF  FA7
62B2:  MOVLW  AA
62B4:  MOVWF  FA7
62B6:  BSF    FA6.1
62B8:  BTFSC  FA6.1
62BA:  BRA    62B8
62BC:  BCF    FA6.2
62BE:  MOVF   00,W
62C0:  IORWF  FF2,F
....................                  write_eeprom(3,Testerilizacionp[3]); 
62C2:  MOVLW  03
62C4:  MOVWF  FA9
62C6:  MOVFF  216,FA8
62CA:  BCF    FA6.6
62CC:  BCF    FA6.7
62CE:  BSF    FA6.2
62D0:  MOVFF  FF2,00
62D4:  BCF    FF2.7
62D6:  MOVLW  55
62D8:  MOVWF  FA7
62DA:  MOVLW  AA
62DC:  MOVWF  FA7
62DE:  BSF    FA6.1
62E0:  BTFSC  FA6.1
62E2:  BRA    62E0
62E4:  BCF    FA6.2
62E6:  MOVF   00,W
62E8:  IORWF  FF2,F
....................                  write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]);write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
62EA:  MOVLW  04
62EC:  MOVWF  FA9
62EE:  MOVFF  21B,FA8
62F2:  BCF    FA6.6
62F4:  BCF    FA6.7
62F6:  BSF    FA6.2
62F8:  MOVFF  FF2,00
62FC:  BCF    FF2.7
62FE:  MOVLW  55
6300:  MOVWF  FA7
6302:  MOVLW  AA
6304:  MOVWF  FA7
6306:  BSF    FA6.1
6308:  BTFSC  FA6.1
630A:  BRA    6308
630C:  BCF    FA6.2
630E:  MOVF   00,W
6310:  IORWF  FF2,F
6312:  MOVLW  05
6314:  MOVWF  FA9
6316:  MOVFF  21C,FA8
631A:  BCF    FA6.6
631C:  BCF    FA6.7
631E:  BSF    FA6.2
6320:  MOVFF  FF2,00
6324:  BCF    FF2.7
6326:  MOVLW  55
6328:  MOVWF  FA7
632A:  MOVLW  AA
632C:  MOVWF  FA7
632E:  BSF    FA6.1
6330:  BTFSC  FA6.1
6332:  BRA    6330
6334:  BCF    FA6.2
6336:  MOVF   00,W
6338:  IORWF  FF2,F
633A:  MOVLW  06
633C:  MOVWF  FA9
633E:  MOVFF  21D,FA8
6342:  BCF    FA6.6
6344:  BCF    FA6.7
6346:  BSF    FA6.2
6348:  MOVFF  FF2,00
634C:  BCF    FF2.7
634E:  MOVLW  55
6350:  MOVWF  FA7
6352:  MOVLW  AA
6354:  MOVWF  FA7
6356:  BSF    FA6.1
6358:  BTFSC  FA6.1
635A:  BRA    6358
635C:  BCF    FA6.2
635E:  MOVF   00,W
6360:  IORWF  FF2,F
6362:  MOVLW  07
6364:  MOVWF  FA9
6366:  MOVFF  21E,FA8
636A:  BCF    FA6.6
636C:  BCF    FA6.7
636E:  BSF    FA6.2
6370:  MOVFF  FF2,00
6374:  BCF    FF2.7
6376:  MOVLW  55
6378:  MOVWF  FA7
637A:  MOVLW  AA
637C:  MOVWF  FA7
637E:  BSF    FA6.1
6380:  BTFSC  FA6.1
6382:  BRA    6380
6384:  BCF    FA6.2
6386:  MOVF   00,W
6388:  IORWF  FF2,F
....................                  write_eeprom(8,Setpoint); 
638A:  MOVLW  08
638C:  MOVWF  FA9
638E:  MOVFF  220,FA8
6392:  BCF    FA6.6
6394:  BCF    FA6.7
6396:  BSF    FA6.2
6398:  MOVFF  FF2,00
639C:  BCF    FF2.7
639E:  MOVLW  55
63A0:  MOVWF  FA7
63A2:  MOVLW  AA
63A4:  MOVWF  FA7
63A6:  BSF    FA6.1
63A8:  BTFSC  FA6.1
63AA:  BRA    63A8
63AC:  BCF    FA6.2
63AE:  MOVF   00,W
63B0:  IORWF  FF2,F
....................                  if(Liquid==1) 
63B2:  MOVLB  2
63B4:  DECFSZ x00,W
63B6:  BRA    63CA
....................                  {Menu=90;glcd_fillScreen(OFF);} 
63B8:  MOVLW  5A
63BA:  MOVLB  1
63BC:  MOVWF  xF5
63BE:  MOVLB  3
63C0:  CLRF   x9B
63C2:  MOVLB  0
63C4:  CALL   2638
....................                  else 
63C8:  BRA    642A
....................                  {Menu=100;glcd_rect(25, 18, 40, 53, NO, ON);Flecha2=n_opcionL; Flecha=n_opcionL; 
63CA:  MOVLW  64
63CC:  MOVLB  1
63CE:  MOVWF  xF5
63D0:  MOVLW  19
63D2:  MOVLB  3
63D4:  MOVWF  xAC
63D6:  MOVLW  12
63D8:  MOVWF  xAD
63DA:  MOVLW  28
63DC:  MOVWF  xAE
63DE:  MOVLW  35
63E0:  MOVWF  xAF
63E2:  CLRF   xB0
63E4:  MOVLW  01
63E6:  MOVWF  xB1
63E8:  MOVLB  0
63EA:  CALL   2D30
63EE:  MOVFF  1F7,1FB
63F2:  MOVFF  1F7,1F9
....................                  n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;glcd_fillScreen(OFF);glcd_text57(0, 55, Calentando, 1, ON);} 
63F6:  MOVLW  20
63F8:  MOVLB  1
63FA:  MOVWF  xF6
63FC:  MOVLW  10
63FE:  MOVWF  xF7
6400:  MOVWF  xFC
6402:  MOVLW  20
6404:  MOVWF  xFD
6406:  MOVLB  3
6408:  CLRF   x9B
640A:  MOVLB  0
640C:  CALL   2638
6410:  MOVLB  3
6412:  CLRF   xAA
6414:  MOVLW  37
6416:  MOVWF  xAB
6418:  CLRF   xAD
641A:  MOVLW  C9
641C:  MOVWF  xAC
641E:  MOVLW  01
6420:  MOVWF  xAE
6422:  MOVWF  xAF
6424:  MOVLB  0
6426:  CALL   288E
....................                  glcd_rect(15, 18, 30, 53, NO, ON); 
642A:  MOVLW  0F
642C:  MOVLB  3
642E:  MOVWF  xAC
6430:  MOVLW  12
6432:  MOVWF  xAD
6434:  MOVLW  1E
6436:  MOVWF  xAE
6438:  MOVLW  35
643A:  MOVWF  xAF
643C:  CLRF   xB0
643E:  MOVLW  01
6440:  MOVWF  xB1
6442:  MOVLB  0
6444:  CALL   2D30
6448:  MOVLB  1
644A:  MOVLB  2
....................                } 
....................              } 
....................        } 
....................          else 
644C:  BRA    6450
....................             {Flanco1 = 0;} 
644E:  BCF    x01.6
6450:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       if(Menu==90){ // Este es el menu de variación de desfogue. 
6452:  MOVF   xF5,W
6454:  SUBLW  5A
6456:  BTFSS  FD8.2
6458:  BRA    65FA
....................       glcd_text57(20,2,Desfogue_Lento,1,ON); 
645A:  MOVLW  14
645C:  MOVLB  3
645E:  MOVWF  xAA
6460:  MOVLW  02
6462:  MOVWF  xAB
6464:  MOVLW  01
6466:  MOVWF  xAD
6468:  MOVLW  58
646A:  MOVWF  xAC
646C:  MOVLW  01
646E:  MOVWF  xAE
6470:  MOVWF  xAF
6472:  MOVLB  0
6474:  CALL   288E
....................       glcd_text57(30,15,Level,2,ON); 
6478:  MOVLW  1E
647A:  MOVLB  3
647C:  MOVWF  xAA
647E:  MOVLW  0F
6480:  MOVWF  xAB
6482:  CLRF   xAD
6484:  MOVLW  D4
6486:  MOVWF  xAC
6488:  MOVLW  02
648A:  MOVWF  xAE
648C:  MOVLW  01
648E:  MOVWF  xAF
6490:  MOVLB  0
6492:  CALL   288E
....................       displayTiempo(Nivel,50,41,5); 
6496:  MOVFF  20D,39B
649A:  MOVLW  32
649C:  MOVLB  3
649E:  MOVWF  x9C
64A0:  MOVLW  29
64A2:  MOVWF  x9D
64A4:  MOVLW  05
64A6:  MOVWF  x9E
64A8:  MOVLB  0
64AA:  CALL   2DF2
....................       glcd_rect(0,0,127,29,NO,ON); 
64AE:  MOVLB  3
64B0:  CLRF   xAC
64B2:  CLRF   xAD
64B4:  MOVLW  7F
64B6:  MOVWF  xAE
64B8:  MOVLW  1D
64BA:  MOVWF  xAF
64BC:  CLRF   xB0
64BE:  MOVLW  01
64C0:  MOVWF  xB1
64C2:  MOVLB  0
64C4:  CALL   2D30
....................        
....................       if(UP)//Si oprime hacia arriba 
64C8:  BSF    F92.1
64CA:  BTFSS  F80.1
64CC:  BRA    64EC
....................       {  if(Flanco == 0)  
64CE:  MOVLB  2
64D0:  BTFSC  x01.5
64D2:  BRA    64EA
....................             {Flanco = 1;delay_ms(30);Nivel++; 
64D4:  BSF    x01.5
64D6:  MOVLW  1E
64D8:  MOVLB  3
64DA:  MOVWF  x9F
64DC:  MOVLB  0
64DE:  CALL   24CE
64E2:  MOVLB  2
64E4:  INCF   x0D,F
64E6:  BTFSC  FD8.2
64E8:  INCF   x0E,F
....................             } 
....................        } 
....................          else 
64EA:  BRA    64F0
....................             {Flanco = 0;} 
64EC:  MOVLB  2
64EE:  BCF    x01.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
64F0:  BSF    F92.2
64F2:  BTFSS  F80.2
64F4:  BRA    6514
....................       {  if(Flanco2 == 0)  
64F6:  BTFSC  x01.7
64F8:  BRA    6512
....................             {Flanco2 = 1;delay_ms(30);Nivel--;               
64FA:  BSF    x01.7
64FC:  MOVLW  1E
64FE:  MOVLB  3
6500:  MOVWF  x9F
6502:  MOVLB  0
6504:  CALL   24CE
6508:  MOVLB  2
650A:  MOVF   x0D,W
650C:  BTFSC  FD8.2
650E:  DECF   x0E,F
6510:  DECF   x0D,F
....................             } 
....................       } 
....................          else 
6512:  BRA    6516
....................             {Flanco2 = 0;} 
6514:  BCF    x01.7
....................       if(Nivel>6) 
6516:  MOVF   x0E,F
6518:  BNZ   6520
651A:  MOVF   x0D,W
651C:  SUBLW  06
651E:  BC    6526
....................       {Nivel=1;} 
6520:  CLRF   x0E
6522:  MOVLW  01
6524:  MOVWF  x0D
....................       if(Nivel<1) 
6526:  MOVF   x0D,F
6528:  BNZ   6534
652A:  MOVF   x0E,F
652C:  BNZ   6534
....................       {Nivel=6;} 
652E:  CLRF   x0E
6530:  MOVLW  06
6532:  MOVWF  x0D
....................        
....................       if(RIGHT)// Si oprime derecha 
6534:  BSF    F92.3
6536:  BTFSS  F80.3
6538:  BRA    65F8
....................       {  if(Flanco1 == 0)  
653A:  BTFSC  x01.6
653C:  BRA    65F6
....................             {Flanco1 = 1; 
653E:  BSF    x01.6
....................                Menu=100;glcd_rect(15, 18, 30, 53, NO, ON);enable_interrupts(global);glcd_fillScreen(OFF);Flecha2=n_opcionL; Flecha=n_opcionL; 
6540:  MOVLW  64
6542:  MOVLB  1
6544:  MOVWF  xF5
6546:  MOVLW  0F
6548:  MOVLB  3
654A:  MOVWF  xAC
654C:  MOVLW  12
654E:  MOVWF  xAD
6550:  MOVLW  1E
6552:  MOVWF  xAE
6554:  MOVLW  35
6556:  MOVWF  xAF
6558:  CLRF   xB0
655A:  MOVLW  01
655C:  MOVWF  xB1
655E:  MOVLB  0
6560:  CALL   2D30
6564:  MOVLW  C0
6566:  IORWF  FF2,F
6568:  MOVLB  3
656A:  CLRF   x9B
656C:  MOVLB  0
656E:  CALL   2638
6572:  MOVFF  1F7,1FB
6576:  MOVFF  1F7,1F9
....................                n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;glcd_text57(0, 55, Calentando, 1, ON);write_eeprom(9,Nivel); 
657A:  MOVLW  20
657C:  MOVLB  1
657E:  MOVWF  xF6
6580:  MOVLW  10
6582:  MOVWF  xF7
6584:  MOVWF  xFC
6586:  MOVLW  20
6588:  MOVWF  xFD
658A:  MOVLB  3
658C:  CLRF   xAA
658E:  MOVLW  37
6590:  MOVWF  xAB
6592:  CLRF   xAD
6594:  MOVLW  C9
6596:  MOVWF  xAC
6598:  MOVLW  01
659A:  MOVWF  xAE
659C:  MOVWF  xAF
659E:  MOVLB  0
65A0:  CALL   288E
65A4:  MOVLW  09
65A6:  MOVWF  FA9
65A8:  MOVFF  20D,FA8
65AC:  BCF    FA6.6
65AE:  BCF    FA6.7
65B0:  BSF    FA6.2
65B2:  MOVF   FF2,W
65B4:  MOVWF  00
65B6:  BCF    FF2.7
65B8:  MOVLB  F
65BA:  MOVLW  55
65BC:  MOVWF  FA7
65BE:  MOVLW  AA
65C0:  MOVWF  FA7
65C2:  BSF    FA6.1
65C4:  BTFSC  FA6.1
65C6:  BRA    65C4
65C8:  BCF    FA6.2
65CA:  MOVF   00,W
65CC:  IORWF  FF2,F
....................                glcd_rect(15, 18, 30, 53, NO, ON);Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0; 
65CE:  MOVLW  0F
65D0:  MOVLB  3
65D2:  MOVWF  xAC
65D4:  MOVLW  12
65D6:  MOVWF  xAD
65D8:  MOVLW  1E
65DA:  MOVWF  xAE
65DC:  MOVLW  35
65DE:  MOVWF  xAF
65E0:  CLRF   xB0
65E2:  MOVLW  01
65E4:  MOVWF  xB1
65E6:  MOVLB  0
65E8:  CALL   2D30
65EC:  MOVLB  2
65EE:  CLRF   x1B
65F0:  CLRF   x1C
65F2:  CLRF   x1D
65F4:  CLRF   x1E
....................              } 
....................        } 
....................          else 
65F6:  BRA    65FA
....................             {Flanco1 = 0;} 
65F8:  BCF    x01.6
....................           
....................       } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
65FA:  MOVLB  0
65FC:  GOTO   36AC
6600:  MOVF   01,F
6602:  BTFSC  FD8.2
6604:  BRA    690C
....................             { 
....................                if(usb_kbhit(1)) 
6606:  MOVLW  01
6608:  MOVLB  3
660A:  MOVWF  x9A
660C:  MOVLB  0
660E:  GOTO   36B4
6612:  MOVF   01,F
6614:  BTFSC  FD8.2
6616:  BRA    6800
....................                   {usb_get_packet(1, rxbuf, Lenbuf); 
6618:  MOVLW  01
661A:  MOVLB  3
661C:  MOVWF  x9A
661E:  CLRF   x9C
6620:  MOVLW  42
6622:  MOVWF  x9B
6624:  CLRF   x9E
6626:  MOVLW  20
6628:  MOVWF  x9D
662A:  MOVLB  0
662C:  GOTO   37BA
....................                      if(rxbuf[0]==1) 
6630:  DECFSZ 42,W
6632:  BRA    66A8
....................                         {Ganancia=rxbuf[1];desvio=rxbuf[2];Tciclo=rxbuf[3];Setpoint=rxbuf[4];Minutos=rxbuf[5];Ajuste=rxbuf[7]; 
6634:  MOVLB  3
6636:  CLRF   xA0
6638:  MOVFF  43,39F
663C:  MOVLB  0
663E:  CALL   24F8
6642:  MOVFF  03,24F
6646:  MOVFF  02,24E
664A:  MOVFF  01,24D
664E:  MOVFF  00,24C
6652:  MOVLB  3
6654:  CLRF   xA0
6656:  MOVFF  44,39F
665A:  MOVLB  0
665C:  CALL   24F8
6660:  MOVFF  03,253
6664:  MOVFF  02,252
6668:  MOVFF  01,251
666C:  MOVFF  00,250
6670:  MOVLB  3
6672:  CLRF   xA0
6674:  MOVFF  45,39F
6678:  MOVLB  0
667A:  CALL   24F8
667E:  MOVFF  03,237
6682:  MOVFF  02,236
6686:  MOVFF  01,235
668A:  MOVFF  00,234
668E:  MOVFF  46,220
6692:  MOVLB  2
6694:  CLRF   x0C
6696:  MOVFF  47,20B
669A:  MOVFF  49,223
....................                         Ajusten=rxbuf[10];R2=rxbuf[11];} // Falta escribir en la eeprom 
669E:  MOVFF  4C,224
66A2:  MOVFF  4D,225
66A6:  MOVLB  0
....................                      if(rxbuf[12]==1)    
66A8:  DECFSZ 4E,W
66AA:  BRA    67F0
....................                         {write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,Minutos); 
66AC:  MOVFF  24F,39D
66B0:  MOVFF  24E,39C
66B4:  MOVFF  24D,39B
66B8:  MOVFF  24C,39A
66BC:  CALL   3804
66C0:  MOVFF  01,39A
66C4:  MOVLW  0A
66C6:  MOVWF  FA9
66C8:  MOVFF  39A,FA8
66CC:  BCF    FA6.6
66CE:  BCF    FA6.7
66D0:  BSF    FA6.2
66D2:  MOVF   FF2,W
66D4:  MOVWF  00
66D6:  BCF    FF2.7
66D8:  MOVLB  F
66DA:  MOVLW  55
66DC:  MOVWF  FA7
66DE:  MOVLW  AA
66E0:  MOVWF  FA7
66E2:  BSF    FA6.1
66E4:  BTFSC  FA6.1
66E6:  BRA    66E4
66E8:  BCF    FA6.2
66EA:  MOVF   00,W
66EC:  IORWF  FF2,F
66EE:  MOVFF  253,39D
66F2:  MOVFF  252,39C
66F6:  MOVFF  251,39B
66FA:  MOVFF  250,39A
66FE:  MOVLB  0
6700:  CALL   3804
6704:  MOVFF  01,39A
6708:  MOVLW  0B
670A:  MOVWF  FA9
670C:  MOVFF  39A,FA8
6710:  BCF    FA6.6
6712:  BCF    FA6.7
6714:  BSF    FA6.2
6716:  MOVF   FF2,W
6718:  MOVWF  00
671A:  BCF    FF2.7
671C:  MOVLB  F
671E:  MOVLW  55
6720:  MOVWF  FA7
6722:  MOVLW  AA
6724:  MOVWF  FA7
6726:  BSF    FA6.1
6728:  BTFSC  FA6.1
672A:  BRA    6728
672C:  BCF    FA6.2
672E:  MOVF   00,W
6730:  IORWF  FF2,F
6732:  MOVFF  237,39D
6736:  MOVFF  236,39C
673A:  MOVFF  235,39B
673E:  MOVFF  234,39A
6742:  MOVLB  0
6744:  CALL   3804
6748:  MOVFF  01,39A
674C:  MOVLW  0C
674E:  MOVWF  FA9
6750:  MOVFF  39A,FA8
6754:  BCF    FA6.6
6756:  BCF    FA6.7
6758:  BSF    FA6.2
675A:  MOVF   FF2,W
675C:  MOVWF  00
675E:  BCF    FF2.7
6760:  MOVLB  F
6762:  MOVLW  55
6764:  MOVWF  FA7
6766:  MOVLW  AA
6768:  MOVWF  FA7
676A:  BSF    FA6.1
676C:  BTFSC  FA6.1
676E:  BRA    676C
6770:  BCF    FA6.2
6772:  MOVF   00,W
6774:  IORWF  FF2,F
6776:  MOVLW  14
6778:  MOVWF  FA9
677A:  MOVFF  20B,FA8
677E:  BCF    FA6.6
6780:  BCF    FA6.7
6782:  BSF    FA6.2
6784:  MOVF   FF2,W
6786:  MOVWF  00
6788:  BCF    FF2.7
678A:  MOVLW  55
678C:  MOVWF  FA7
678E:  MOVLW  AA
6790:  MOVWF  FA7
6792:  BSF    FA6.1
6794:  BTFSC  FA6.1
6796:  BRA    6794
6798:  BCF    FA6.2
679A:  MOVF   00,W
679C:  IORWF  FF2,F
....................                         write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);} 
679E:  MOVLW  0D
67A0:  MOVWF  FA9
67A2:  MOVFF  223,FA8
67A6:  BCF    FA6.6
67A8:  BCF    FA6.7
67AA:  BSF    FA6.2
67AC:  MOVFF  FF2,00
67B0:  BCF    FF2.7
67B2:  MOVLW  55
67B4:  MOVWF  FA7
67B6:  MOVLW  AA
67B8:  MOVWF  FA7
67BA:  BSF    FA6.1
67BC:  BTFSC  FA6.1
67BE:  BRA    67BC
67C0:  BCF    FA6.2
67C2:  MOVF   00,W
67C4:  IORWF  FF2,F
67C6:  MOVLW  0E
67C8:  MOVWF  FA9
67CA:  MOVFF  224,FA8
67CE:  BCF    FA6.6
67D0:  BCF    FA6.7
67D2:  BSF    FA6.2
67D4:  MOVFF  FF2,00
67D8:  BCF    FF2.7
67DA:  MOVLW  55
67DC:  MOVWF  FA7
67DE:  MOVLW  AA
67E0:  MOVWF  FA7
67E2:  BSF    FA6.1
67E4:  BTFSC  FA6.1
67E6:  BRA    67E4
67E8:  BCF    FA6.2
67EA:  MOVF   00,W
67EC:  IORWF  FF2,F
67EE:  MOVLB  0
....................                      if(rxbuf[13]==1)    
67F0:  DECFSZ 4F,W
67F2:  BRA    67FA
....................                         {Visua=1;} 
67F4:  MOVLB  2
67F6:  BSF    x1F.3
....................                      else    
67F8:  BRA    67FE
....................                         {Visua=0;} 
67FA:  MOVLB  2
67FC:  BCF    x1F.3
67FE:  MOVLB  0
....................                   } 
....................                 
....................                recbuf[0]=(int8)Prom; 
6800:  MOVFF  243,39D
6804:  MOVFF  242,39C
6808:  MOVFF  241,39B
680C:  MOVFF  240,39A
6810:  CALL   3804
6814:  MOVFF  01,22
....................                recbuf[1]=120; 
6818:  MOVLW  78
681A:  MOVWF  23
....................                d3=Prom-(int8)Prom; 
681C:  MOVFF  243,39D
6820:  MOVFF  242,39C
6824:  MOVFF  241,39B
6828:  MOVFF  240,39A
682C:  CALL   3804
6830:  MOVLB  3
6832:  CLRF   xA0
6834:  MOVFF  01,39F
6838:  MOVLB  0
683A:  CALL   24F8
683E:  BSF    FD8.1
6840:  MOVFF  243,3A5
6844:  MOVFF  242,3A4
6848:  MOVFF  241,3A3
684C:  MOVFF  240,3A2
6850:  MOVFF  03,3A9
6854:  MOVFF  02,3A8
6858:  MOVFF  01,3A7
685C:  MOVFF  00,3A6
6860:  CALL   3840
6864:  MOVFF  03,257
6868:  MOVFF  02,256
686C:  MOVFF  01,255
6870:  MOVFF  00,254
....................                d3=d3*10.0; 
6874:  MOVFF  257,3BA
6878:  MOVFF  256,3B9
687C:  MOVFF  255,3B8
6880:  MOVFF  254,3B7
6884:  MOVLB  3
6886:  CLRF   xBE
6888:  CLRF   xBD
688A:  MOVLW  20
688C:  MOVWF  xBC
688E:  MOVLW  82
6890:  MOVWF  xBB
6892:  MOVLB  0
6894:  CALL   3AB8
6898:  MOVFF  03,257
689C:  MOVFF  02,256
68A0:  MOVFF  01,255
68A4:  MOVFF  00,254
....................                recbuf[2]=(int8)d3; 
68A8:  MOVFF  257,39D
68AC:  MOVFF  256,39C
68B0:  MOVFF  255,39B
68B4:  MOVFF  254,39A
68B8:  CALL   3804
68BC:  MOVFF  01,24
....................                recbuf[3]=(int8)Pt; 
68C0:  MOVFF  233,39D
68C4:  MOVFF  232,39C
68C8:  MOVFF  231,39B
68CC:  MOVFF  230,39A
68D0:  CALL   3804
68D4:  MOVFF  01,25
....................                recbuf[4]=(int8)V0; 
68D8:  MOVFF  22B,39D
68DC:  MOVFF  22A,39C
68E0:  MOVFF  229,39B
68E4:  MOVFF  228,39A
68E8:  CALL   3804
68EC:  MOVFF  01,26
....................                           
.................... //             if(rxbuf[8]==1) 
.................... //               {Camara_OUT_on;} 
.................... //             if(rxbuf[8]==0) 
.................... //               {Camara_OUT_off;}   
....................                 
.................... //           if(rxbuf[9]==1) 
.................... //            {Camara_IN_on;} 
.................... //             if((rxbuf[9]==0)&&(Prom<(float)Open)) 
.................... //               {Camara_IN_off;}     
....................                 
....................                  
....................                 usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
68F0:  MOVLW  01
68F2:  MOVLB  3
68F4:  MOVWF  x9A
68F6:  CLRF   x9C
68F8:  MOVLW  22
68FA:  MOVWF  x9B
68FC:  CLRF   x9E
68FE:  MOVLW  20
6900:  MOVWF  x9D
6902:  MOVLW  02
6904:  MOVWF  x9F
6906:  MOVLB  0
6908:  GOTO   3BAE
....................              } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       if(Menu==100){ // Este es el menu de cuando el proceso se inicio. 
690C:  MOVLB  1
690E:  MOVF   xF5,W
6910:  SUBLW  64
6912:  BTFSS  FD8.2
6914:  GOTO   75F0
....................  
....................       if(n==0) 
6918:  MOVLB  2
691A:  BTFSC  x02.5
691C:  BRA    6CC2
....................       {glcd_imagen(5);glcd_text57(0, 0, tiempo_est, 1, ON);glcd_text57(0, 8, tiempo_sec, 1, ON);// Muestra grafica de proceso y palabras. 
691E:  MOVLW  05
6920:  MOVLB  3
6922:  MOVWF  x9A
6924:  MOVLB  0
6926:  CALL   30E8
692A:  MOVLB  3
692C:  CLRF   xAA
692E:  CLRF   xAB
6930:  CLRF   xAD
6932:  MOVLW  81
6934:  MOVWF  xAC
6936:  MOVLW  01
6938:  MOVWF  xAE
693A:  MOVWF  xAF
693C:  MOVLB  0
693E:  CALL   288E
6942:  MOVLB  3
6944:  CLRF   xAA
6946:  MOVLW  08
6948:  MOVWF  xAB
694A:  CLRF   xAD
694C:  MOVLW  88
694E:  MOVWF  xAC
6950:  MOVLW  01
6952:  MOVWF  xAE
6954:  MOVWF  xAF
6956:  MOVLB  0
6958:  CALL   288E
....................        glcd_circle(95,40,2,NO,ON); 
695C:  MOVLW  5F
695E:  MOVLB  3
6960:  MOVWF  x9A
6962:  MOVLW  28
6964:  MOVWF  x9B
6966:  MOVLW  02
6968:  MOVWF  x9C
696A:  CLRF   x9D
696C:  MOVLW  01
696E:  MOVWF  x9E
6970:  MOVLB  0
6972:  CALL   3482
....................        glcd_text57(102,40, C, 2, ON); 
6976:  MOVLW  66
6978:  MOVLB  3
697A:  MOVWF  xAA
697C:  MOVLW  28
697E:  MOVWF  xAB
6980:  MOVLW  01
6982:  MOVWF  xAD
6984:  MOVLW  3A
6986:  MOVWF  xAC
6988:  MOVLW  02
698A:  MOVWF  xAE
698C:  MOVLW  01
698E:  MOVWF  xAF
6990:  MOVLB  0
6992:  CALL   288E
....................        if(estadot40==1)// Si selecciono programa de Textil e instrumental. Ajusta tiempos de esterilización y secado. 
6996:  MOVLB  2
6998:  BTFSS  x01.0
699A:  BRA    69B8
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2; 
699C:  CLRF   x13
699E:  CLRF   x14
69A0:  MOVLW  05
69A2:  MOVWF  x15
69A4:  MOVLW  02
69A6:  MOVWF  x16
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;Setpoint=121;} 
69A8:  CLRF   x1B
69AA:  CLRF   x1C
69AC:  MOVLW  05
69AE:  MOVWF  x1D
69B0:  MOVLW  01
69B2:  MOVWF  x1E
69B4:  MOVLW  79
69B6:  MOVWF  x20
....................        
....................       if(estadoc==1)// Si selecciono programa de Precalentamiento. Ajusta tiempos de esterilización y secado. 
69B8:  BTFSS  x01.1
69BA:  BRA    69D6
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0; 
69BC:  CLRF   x13
69BE:  CLRF   x14
69C0:  MOVLW  05
69C2:  MOVWF  x15
69C4:  CLRF   x16
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=0;minutos=0;Setpoint=121;} 
69C6:  CLRF   x1B
69C8:  CLRF   x1C
69CA:  MOVWF  x1D
69CC:  CLRF   x1E
69CE:  CLRF   x0C
69D0:  CLRF   x0B
69D2:  MOVLW  79
69D4:  MOVWF  x20
....................        
....................       if(estadoi==1)// Si selecciono programa de Instrumental Suave. Ajusta tiempos de esterilización y secado. 
69D6:  BTFSS  x01.2
69D8:  BRA    69F2
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1; 
69DA:  CLRF   x13
69DC:  CLRF   x14
69DE:  MOVLW  05
69E0:  MOVWF  x15
69E2:  MOVLW  01
69E4:  MOVWF  x16
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;} 
69E6:  CLRF   x1B
69E8:  CLRF   x1C
69EA:  CLRF   x1D
69EC:  CLRF   x1E
69EE:  MOVLW  79
69F0:  MOVWF  x20
....................        
....................       if(estadol==1)// Si selecciono programa de Liquidos. Ajusta tiempos de esterilización y secado. 
69F2:  BTFSS  x01.3
69F4:  BRA    6A0C
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2; 
69F6:  CLRF   x13
69F8:  CLRF   x14
69FA:  CLRF   x15
69FC:  MOVLW  02
69FE:  MOVWF  x16
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;} 
6A00:  CLRF   x1B
6A02:  CLRF   x1C
6A04:  CLRF   x1D
6A06:  CLRF   x1E
6A08:  MOVLW  79
6A0A:  MOVWF  x20
....................         
....................       // Muestra Valor de esterilizacion programado. 
....................       displayTiempo(Testerilizacionp[3],36,0,0);displayTiempo(Testerilizacionp[2],42,0,0);glcd_text57(48, 0, Vacio, 1, ON); 
6A0C:  MOVFF  216,39B
6A10:  MOVLW  24
6A12:  MOVLB  3
6A14:  MOVWF  x9C
6A16:  CLRF   x9D
6A18:  CLRF   x9E
6A1A:  MOVLB  0
6A1C:  CALL   2DF2
6A20:  MOVFF  215,39B
6A24:  MOVLW  2A
6A26:  MOVLB  3
6A28:  MOVWF  x9C
6A2A:  CLRF   x9D
6A2C:  CLRF   x9E
6A2E:  MOVLB  0
6A30:  CALL   2DF2
6A34:  MOVLW  30
6A36:  MOVLB  3
6A38:  MOVWF  xAA
6A3A:  CLRF   xAB
6A3C:  MOVLW  01
6A3E:  MOVWF  xAD
6A40:  MOVLW  16
6A42:  MOVWF  xAC
6A44:  MOVLW  01
6A46:  MOVWF  xAE
6A48:  MOVWF  xAF
6A4A:  MOVLB  0
6A4C:  CALL   288E
....................       displayTiempo(Testerilizacionp[1],54,0,0);displayTiempo(Testerilizacionp[0],60,0,0); 
6A50:  MOVFF  214,39B
6A54:  MOVLW  36
6A56:  MOVLB  3
6A58:  MOVWF  x9C
6A5A:  CLRF   x9D
6A5C:  CLRF   x9E
6A5E:  MOVLB  0
6A60:  CALL   2DF2
6A64:  MOVFF  213,39B
6A68:  MOVLW  3C
6A6A:  MOVLB  3
6A6C:  MOVWF  x9C
6A6E:  CLRF   x9D
6A70:  CLRF   x9E
6A72:  MOVLB  0
6A74:  CALL   2DF2
....................       // Muestra tiempo de secado programado. 
....................       displayTiempo(Tsecadop[3],36,8,0);displayTiempo(Tsecadop[2],42,8,0);glcd_text57(48, 8, Vacio, 1, ON); 
6A78:  MOVFF  21E,39B
6A7C:  MOVLW  24
6A7E:  MOVLB  3
6A80:  MOVWF  x9C
6A82:  MOVLW  08
6A84:  MOVWF  x9D
6A86:  CLRF   x9E
6A88:  MOVLB  0
6A8A:  CALL   2DF2
6A8E:  MOVFF  21D,39B
6A92:  MOVLW  2A
6A94:  MOVLB  3
6A96:  MOVWF  x9C
6A98:  MOVLW  08
6A9A:  MOVWF  x9D
6A9C:  CLRF   x9E
6A9E:  MOVLB  0
6AA0:  CALL   2DF2
6AA4:  MOVLW  30
6AA6:  MOVLB  3
6AA8:  MOVWF  xAA
6AAA:  MOVLW  08
6AAC:  MOVWF  xAB
6AAE:  MOVLW  01
6AB0:  MOVWF  xAD
6AB2:  MOVLW  16
6AB4:  MOVWF  xAC
6AB6:  MOVLW  01
6AB8:  MOVWF  xAE
6ABA:  MOVWF  xAF
6ABC:  MOVLB  0
6ABE:  CALL   288E
....................       displayTiempo(Tsecadop[1],54,8,0);displayTiempo(Tsecadop[0],60,8,0); 
6AC2:  MOVFF  21C,39B
6AC6:  MOVLW  36
6AC8:  MOVLB  3
6ACA:  MOVWF  x9C
6ACC:  MOVLW  08
6ACE:  MOVWF  x9D
6AD0:  CLRF   x9E
6AD2:  MOVLB  0
6AD4:  CALL   2DF2
6AD8:  MOVFF  21B,39B
6ADC:  MOVLW  3C
6ADE:  MOVLB  3
6AE0:  MOVWF  x9C
6AE2:  MOVLW  08
6AE4:  MOVWF  x9D
6AE6:  CLRF   x9E
6AE8:  MOVLB  0
6AEA:  CALL   2DF2
....................           
....................       V0 = sensores(0); 
6AEE:  MOVLB  3
6AF0:  CLRF   x9A
6AF2:  MOVLB  0
6AF4:  CALL   252E
6AF8:  MOVFF  03,22B
6AFC:  MOVFF  02,22A
6B00:  MOVFF  01,229
6B04:  MOVFF  00,228
....................       V0 = V0/4.86; 
6B08:  MOVFF  22B,3A1
6B0C:  MOVFF  22A,3A0
6B10:  MOVFF  229,39F
6B14:  MOVFF  228,39E
6B18:  MOVLW  1F
6B1A:  MOVLB  3
6B1C:  MOVWF  xA5
6B1E:  MOVLW  85
6B20:  MOVWF  xA4
6B22:  MOVLW  1B
6B24:  MOVWF  xA3
6B26:  MOVLW  81
6B28:  MOVWF  xA2
6B2A:  MOVLB  0
6B2C:  CALL   3C5E
6B30:  MOVFF  03,22B
6B34:  MOVFF  02,22A
6B38:  MOVFF  01,229
6B3C:  MOVFF  00,228
....................       //rPt=(V0*R1)/(1023.0-V0);Temperature=(Pt-100.0972)/0.3850; 
....................       Pt=(R1+(float)R2)/((1023.0/V0)-1); 
6B40:  MOVLB  3
6B42:  CLRF   xA0
6B44:  MOVFF  225,39F
6B48:  MOVLB  0
6B4A:  CALL   24F8
6B4E:  BCF    FD8.1
6B50:  MOVFF  22F,3A5
6B54:  MOVFF  22E,3A4
6B58:  MOVFF  22D,3A3
6B5C:  MOVFF  22C,3A2
6B60:  MOVFF  03,3A9
6B64:  MOVFF  02,3A8
6B68:  MOVFF  01,3A7
6B6C:  MOVFF  00,3A6
6B70:  CALL   3840
6B74:  MOVFF  00,39A
6B78:  MOVFF  01,39B
6B7C:  MOVFF  02,39C
6B80:  MOVFF  03,39D
6B84:  MOVLB  3
6B86:  CLRF   xA1
6B88:  MOVLW  C0
6B8A:  MOVWF  xA0
6B8C:  MOVLW  7F
6B8E:  MOVWF  x9F
6B90:  MOVLW  88
6B92:  MOVWF  x9E
6B94:  MOVFF  22B,3A5
6B98:  MOVFF  22A,3A4
6B9C:  MOVFF  229,3A3
6BA0:  MOVFF  228,3A2
6BA4:  MOVLB  0
6BA6:  CALL   3C5E
6BAA:  MOVFF  00,39E
6BAE:  MOVFF  01,39F
6BB2:  MOVFF  02,3A0
6BB6:  MOVFF  03,3A1
6BBA:  BSF    FD8.1
6BBC:  MOVFF  03,3A5
6BC0:  MOVFF  02,3A4
6BC4:  MOVFF  01,3A3
6BC8:  MOVFF  00,3A2
6BCC:  MOVLB  3
6BCE:  CLRF   xA9
6BD0:  CLRF   xA8
6BD2:  CLRF   xA7
6BD4:  MOVLW  7F
6BD6:  MOVWF  xA6
6BD8:  MOVLB  0
6BDA:  CALL   3840
6BDE:  MOVFF  39D,3A1
6BE2:  MOVFF  39C,3A0
6BE6:  MOVFF  39B,39F
6BEA:  MOVFF  39A,39E
6BEE:  MOVFF  03,3A5
6BF2:  MOVFF  02,3A4
6BF6:  MOVFF  01,3A3
6BFA:  MOVFF  00,3A2
6BFE:  CALL   3C5E
6C02:  MOVFF  03,233
6C06:  MOVFF  02,232
6C0A:  MOVFF  01,231
6C0E:  MOVFF  00,230
....................       //Temperature=(Pt-100.1395)/0.3838;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................       Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
6C12:  BSF    FD8.1
6C14:  MOVFF  233,3A5
6C18:  MOVFF  232,3A4
6C1C:  MOVFF  231,3A3
6C20:  MOVFF  230,3A2
6C24:  MOVLB  3
6C26:  CLRF   xA9
6C28:  CLRF   xA8
6C2A:  MOVLW  48
6C2C:  MOVWF  xA7
6C2E:  MOVLW  85
6C30:  MOVWF  xA6
6C32:  MOVLB  0
6C34:  CALL   3840
6C38:  MOVFF  00,39A
6C3C:  MOVFF  01,39B
6C40:  MOVFF  02,39C
6C44:  MOVFF  03,39D
6C48:  MOVFF  03,3A1
6C4C:  MOVFF  02,3A0
6C50:  MOVFF  01,39F
6C54:  MOVFF  00,39E
6C58:  MOVLW  B8
6C5A:  MOVLB  3
6C5C:  MOVWF  xA5
6C5E:  MOVLW  1E
6C60:  MOVWF  xA4
6C62:  MOVLW  45
6C64:  MOVWF  xA3
6C66:  MOVLW  7D
6C68:  MOVWF  xA2
6C6A:  MOVLB  0
6C6C:  CALL   3C5E
6C70:  MOVFF  03,247
6C74:  MOVFF  02,246
6C78:  MOVFF  01,245
6C7C:  MOVFF  00,244
....................       for(h=0;h<=79;h++) 
6C80:  MOVLB  2
6C82:  CLRF   x21
6C84:  MOVF   x21,W
6C86:  SUBLW  4F
6C88:  BNC   6CC0
....................             { 
....................                promedio[h]=Temperature; 
6C8A:  MOVLB  3
6C8C:  CLRF   x9F
6C8E:  MOVFF  221,39E
6C92:  CLRF   xA1
6C94:  MOVLW  04
6C96:  MOVWF  xA0
6C98:  MOVLB  0
6C9A:  CALL   30C6
6C9E:  MOVF   01,W
6CA0:  ADDLW  5A
6CA2:  MOVWF  FE9
6CA4:  MOVLW  02
6CA6:  ADDWFC 02,W
6CA8:  MOVWF  FEA
6CAA:  MOVFF  244,FEF
6CAE:  MOVFF  245,FEC
6CB2:  MOVFF  246,FEC
6CB6:  MOVFF  247,FEC
....................             }  
6CBA:  MOVLB  2
6CBC:  INCF   x21,F
6CBE:  BRA    6C84
....................        n=1;      
6CC0:  BSF    x02.5
....................       } 
....................  
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................          error=desvio+(float)Setpoint-Prom;      // Cálculo del error ****** 
6CC2:  MOVLB  3
6CC4:  CLRF   xA0
6CC6:  MOVFF  220,39F
6CCA:  MOVLB  0
6CCC:  CALL   24F8
6CD0:  BCF    FD8.1
6CD2:  MOVFF  253,3A5
6CD6:  MOVFF  252,3A4
6CDA:  MOVFF  251,3A3
6CDE:  MOVFF  250,3A2
6CE2:  MOVFF  03,3A9
6CE6:  MOVFF  02,3A8
6CEA:  MOVFF  01,3A7
6CEE:  MOVFF  00,3A6
6CF2:  CALL   3840
6CF6:  MOVFF  00,39A
6CFA:  MOVFF  01,39B
6CFE:  MOVFF  02,39C
6D02:  MOVFF  03,39D
6D06:  BSF    FD8.1
6D08:  MOVFF  03,3A5
6D0C:  MOVFF  02,3A4
6D10:  MOVFF  01,3A3
6D14:  MOVFF  00,3A2
6D18:  MOVFF  243,3A9
6D1C:  MOVFF  242,3A8
6D20:  MOVFF  241,3A7
6D24:  MOVFF  240,3A6
6D28:  CALL   3840
6D2C:  MOVFF  03,23F
6D30:  MOVFF  02,23E
6D34:  MOVFF  01,23D
6D38:  MOVFF  00,23C
....................  
....................          tmp=error*Ganancia;  // Control Proporcional. 
6D3C:  MOVFF  23F,3BA
6D40:  MOVFF  23E,3B9
6D44:  MOVFF  23D,3B8
6D48:  MOVFF  23C,3B7
6D4C:  MOVFF  24F,3BE
6D50:  MOVFF  24E,3BD
6D54:  MOVFF  24D,3BC
6D58:  MOVFF  24C,3BB
6D5C:  CALL   3AB8
6D60:  MOVFF  03,24B
6D64:  MOVFF  02,24A
6D68:  MOVFF  01,249
6D6C:  MOVFF  00,248
....................           
....................          if(tmp>Setpoint)   // Anti Wind-UP       
6D70:  MOVLB  3
6D72:  CLRF   xA0
6D74:  MOVFF  220,39F
6D78:  MOVLB  0
6D7A:  CALL   24F8
6D7E:  MOVFF  03,39D
6D82:  MOVFF  02,39C
6D86:  MOVFF  01,39B
6D8A:  MOVFF  00,39A
6D8E:  MOVFF  24B,3A1
6D92:  MOVFF  24A,3A0
6D96:  MOVFF  249,39F
6D9A:  MOVFF  248,39E
6D9E:  CALL   3DBC
6DA2:  BNC   6DC2
....................             {tmp=Setpoint;} 
6DA4:  MOVLB  3
6DA6:  CLRF   xA0
6DA8:  MOVFF  220,39F
6DAC:  MOVLB  0
6DAE:  CALL   24F8
6DB2:  MOVFF  03,24B
6DB6:  MOVFF  02,24A
6DBA:  MOVFF  01,249
6DBE:  MOVFF  00,248
....................              
....................          if(tmp<0.0)     // Anti Wind_DOWN     
6DC2:  MOVFF  24B,39D
6DC6:  MOVFF  24A,39C
6DCA:  MOVFF  249,39B
6DCE:  MOVFF  248,39A
6DD2:  MOVLB  3
6DD4:  CLRF   xA1
6DD6:  CLRF   xA0
6DD8:  CLRF   x9F
6DDA:  CLRF   x9E
6DDC:  MOVLB  0
6DDE:  CALL   3DBC
6DE2:  BNC   6DEE
....................             {tmp=0.0;}    
6DE4:  MOVLB  2
6DE6:  CLRF   x4B
6DE8:  CLRF   x4A
6DEA:  CLRF   x49
6DEC:  CLRF   x48
....................        
....................          Tpulso=(tmp/Setpoint)*Tciclo;  // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
6DEE:  MOVLB  3
6DF0:  CLRF   xA0
6DF2:  MOVFF  220,39F
6DF6:  MOVLB  0
6DF8:  CALL   24F8
6DFC:  MOVFF  24B,3A1
6E00:  MOVFF  24A,3A0
6E04:  MOVFF  249,39F
6E08:  MOVFF  248,39E
6E0C:  MOVFF  03,3A5
6E10:  MOVFF  02,3A4
6E14:  MOVFF  01,3A3
6E18:  MOVFF  00,3A2
6E1C:  CALL   3C5E
6E20:  MOVFF  00,39A
6E24:  MOVFF  01,39B
6E28:  MOVFF  02,39C
6E2C:  MOVFF  03,39D
6E30:  MOVFF  03,3BA
6E34:  MOVFF  02,3B9
6E38:  MOVFF  01,3B8
6E3C:  MOVFF  00,3B7
6E40:  MOVFF  237,3BE
6E44:  MOVFF  236,3BD
6E48:  MOVFF  235,3BC
6E4C:  MOVFF  234,3BB
6E50:  CALL   3AB8
6E54:  MOVFF  03,23B
6E58:  MOVFF  02,23A
6E5C:  MOVFF  01,239
6E60:  MOVFF  00,238
....................                                    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................           
....................          if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
6E64:  MOVFF  23B,3A1
6E68:  MOVFF  23A,3A0
6E6C:  MOVFF  239,39F
6E70:  MOVFF  238,39E
6E74:  MOVLW  0A
6E76:  MOVLB  3
6E78:  MOVWF  xA5
6E7A:  MOVLW  D7
6E7C:  MOVWF  xA4
6E7E:  MOVLW  23
6E80:  MOVWF  xA3
6E82:  MOVLW  77
6E84:  MOVWF  xA2
6E86:  MOVLB  0
6E88:  CALL   3C5E
6E8C:  MOVFF  03,39D
6E90:  MOVFF  02,39C
6E94:  MOVFF  01,39B
6E98:  MOVFF  00,39A
6E9C:  CALL   3804
6EA0:  MOVFF  02,03
6EA4:  MOVF   01,W
6EA6:  MOVLB  2
6EA8:  MOVF   x0A,W
6EAA:  SUBWF  02,W
6EAC:  BNC   6EBC
6EAE:  BNZ   6EB6
6EB0:  MOVF   x09,W
6EB2:  SUBWF  01,W
6EB4:  BNC   6EBC
....................          {Resistencia_on;} 
6EB6:  BSF    F8B.1
6EB8:  BCF    F94.1
....................          else 
6EBA:  BRA    6EC0
....................           
....................          {Resistencia_off;} 
6EBC:  BCF    F8B.1
6EBE:  BCF    F94.1
....................           
....................          if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
6EC0:  MOVFF  237,3A1
6EC4:  MOVFF  236,3A0
6EC8:  MOVFF  235,39F
6ECC:  MOVFF  234,39E
6ED0:  MOVLW  0A
6ED2:  MOVLB  3
6ED4:  MOVWF  xA5
6ED6:  MOVLW  D7
6ED8:  MOVWF  xA4
6EDA:  MOVLW  23
6EDC:  MOVWF  xA3
6EDE:  MOVLW  77
6EE0:  MOVWF  xA2
6EE2:  MOVLB  0
6EE4:  CALL   3C5E
6EE8:  MOVFF  03,39D
6EEC:  MOVFF  02,39C
6EF0:  MOVFF  01,39B
6EF4:  MOVFF  00,39A
6EF8:  CALL   3804
6EFC:  MOVF   02,W
6EFE:  MOVWF  03
6F00:  MOVLB  2
6F02:  SUBWF  x0A,W
6F04:  BNC   6F12
6F06:  BNZ   6F0E
6F08:  MOVF   01,W
6F0A:  SUBWF  x09,W
6F0C:  BNC   6F12
....................          {tiempoctrl=0;} // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
6F0E:  CLRF   x0A
6F10:  CLRF   x09
.................... //--------------------------------------------------------------------------------------------------------------------//          
....................    
....................    if(Expulsa==1) 
6F12:  BTFSS  x02.7
6F14:  BRA    722E
....................    {        V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
6F16:  MOVLB  3
6F18:  CLRF   x9A
6F1A:  MOVLB  0
6F1C:  CALL   252E
6F20:  MOVFF  03,22B
6F24:  MOVFF  02,22A
6F28:  MOVFF  01,229
6F2C:  MOVFF  00,228
....................             V0 = V0/4.86; 
6F30:  MOVFF  22B,3A1
6F34:  MOVFF  22A,3A0
6F38:  MOVFF  229,39F
6F3C:  MOVFF  228,39E
6F40:  MOVLW  1F
6F42:  MOVLB  3
6F44:  MOVWF  xA5
6F46:  MOVLW  85
6F48:  MOVWF  xA4
6F4A:  MOVLW  1B
6F4C:  MOVWF  xA3
6F4E:  MOVLW  81
6F50:  MOVWF  xA2
6F52:  MOVLB  0
6F54:  CALL   3C5E
6F58:  MOVFF  03,22B
6F5C:  MOVFF  02,22A
6F60:  MOVFF  01,229
6F64:  MOVFF  00,228
....................             Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
6F68:  MOVLB  3
6F6A:  CLRF   xA0
6F6C:  MOVFF  225,39F
6F70:  MOVLB  0
6F72:  CALL   24F8
6F76:  BCF    FD8.1
6F78:  MOVFF  22F,3A5
6F7C:  MOVFF  22E,3A4
6F80:  MOVFF  22D,3A3
6F84:  MOVFF  22C,3A2
6F88:  MOVFF  03,3A9
6F8C:  MOVFF  02,3A8
6F90:  MOVFF  01,3A7
6F94:  MOVFF  00,3A6
6F98:  CALL   3840
6F9C:  MOVFF  00,39A
6FA0:  MOVFF  01,39B
6FA4:  MOVFF  02,39C
6FA8:  MOVFF  03,39D
6FAC:  MOVLB  3
6FAE:  CLRF   xA1
6FB0:  MOVLW  C0
6FB2:  MOVWF  xA0
6FB4:  MOVLW  7F
6FB6:  MOVWF  x9F
6FB8:  MOVLW  88
6FBA:  MOVWF  x9E
6FBC:  MOVFF  22B,3A5
6FC0:  MOVFF  22A,3A4
6FC4:  MOVFF  229,3A3
6FC8:  MOVFF  228,3A2
6FCC:  MOVLB  0
6FCE:  CALL   3C5E
6FD2:  MOVFF  00,39E
6FD6:  MOVFF  01,39F
6FDA:  MOVFF  02,3A0
6FDE:  MOVFF  03,3A1
6FE2:  BSF    FD8.1
6FE4:  MOVFF  03,3A5
6FE8:  MOVFF  02,3A4
6FEC:  MOVFF  01,3A3
6FF0:  MOVFF  00,3A2
6FF4:  MOVLB  3
6FF6:  CLRF   xA9
6FF8:  CLRF   xA8
6FFA:  CLRF   xA7
6FFC:  MOVLW  7F
6FFE:  MOVWF  xA6
7000:  MOVLB  0
7002:  CALL   3840
7006:  MOVFF  39D,3A1
700A:  MOVFF  39C,3A0
700E:  MOVFF  39B,39F
7012:  MOVFF  39A,39E
7016:  MOVFF  03,3A5
701A:  MOVFF  02,3A4
701E:  MOVFF  01,3A3
7022:  MOVFF  00,3A2
7026:  CALL   3C5E
702A:  MOVFF  03,233
702E:  MOVFF  02,232
7032:  MOVFF  01,231
7036:  MOVFF  00,230
.................... //            Temperature=(Pt-100.0972)/0.3850;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................             Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
703A:  BSF    FD8.1
703C:  MOVFF  233,3A5
7040:  MOVFF  232,3A4
7044:  MOVFF  231,3A3
7048:  MOVFF  230,3A2
704C:  MOVLB  3
704E:  CLRF   xA9
7050:  CLRF   xA8
7052:  MOVLW  48
7054:  MOVWF  xA7
7056:  MOVLW  85
7058:  MOVWF  xA6
705A:  MOVLB  0
705C:  CALL   3840
7060:  MOVFF  00,39A
7064:  MOVFF  01,39B
7068:  MOVFF  02,39C
706C:  MOVFF  03,39D
7070:  MOVFF  03,3A1
7074:  MOVFF  02,3A0
7078:  MOVFF  01,39F
707C:  MOVFF  00,39E
7080:  MOVLW  B8
7082:  MOVLB  3
7084:  MOVWF  xA5
7086:  MOVLW  1E
7088:  MOVWF  xA4
708A:  MOVLW  45
708C:  MOVWF  xA3
708E:  MOVLW  7D
7090:  MOVWF  xA2
7092:  MOVLB  0
7094:  CALL   3C5E
7098:  MOVFF  03,247
709C:  MOVFF  02,246
70A0:  MOVFF  01,245
70A4:  MOVFF  00,244
....................              
....................             if(l>79) 
70A8:  MOVLB  2
70AA:  MOVF   x22,W
70AC:  SUBLW  4F
70AE:  BC    70B2
....................             {l=0;} 
70B0:  CLRF   x22
....................             promedio[l]=Temperature;l++; 
70B2:  MOVLB  3
70B4:  CLRF   x9F
70B6:  MOVFF  222,39E
70BA:  CLRF   xA1
70BC:  MOVLW  04
70BE:  MOVWF  xA0
70C0:  MOVLB  0
70C2:  CALL   30C6
70C6:  MOVF   01,W
70C8:  ADDLW  5A
70CA:  MOVWF  FE9
70CC:  MOVLW  02
70CE:  ADDWFC 02,W
70D0:  MOVWF  FEA
70D2:  MOVFF  244,FEF
70D6:  MOVFF  245,FEC
70DA:  MOVFF  246,FEC
70DE:  MOVFF  247,FEC
70E2:  MOVLB  2
70E4:  INCF   x22,F
....................           
....................             for(h=0;h<=79;h++) 
70E6:  CLRF   x21
70E8:  MOVF   x21,W
70EA:  SUBLW  4F
70EC:  BNC   716E
....................             { 
....................                Prom+=promedio[h]; 
70EE:  MOVLB  3
70F0:  CLRF   x9F
70F2:  MOVFF  221,39E
70F6:  CLRF   xA1
70F8:  MOVLW  04
70FA:  MOVWF  xA0
70FC:  MOVLB  0
70FE:  CALL   30C6
7102:  MOVFF  02,03
7106:  MOVF   01,W
7108:  ADDLW  5A
710A:  MOVWF  FE9
710C:  MOVLW  02
710E:  ADDWFC 02,W
7110:  MOVWF  FEA
7112:  MOVFF  FEF,00
7116:  MOVFF  FEC,01
711A:  MOVFF  FEC,02
711E:  MOVFF  FEC,03
7122:  MOVFF  FEA,39B
7126:  MOVFF  FE9,39A
712A:  BCF    FD8.1
712C:  MOVFF  243,3A5
7130:  MOVFF  242,3A4
7134:  MOVFF  241,3A3
7138:  MOVFF  240,3A2
713C:  MOVFF  03,3A9
7140:  MOVFF  02,3A8
7144:  MOVFF  01,3A7
7148:  MOVFF  00,3A6
714C:  CALL   3840
7150:  MOVFF  39B,FEA
7154:  MOVFF  39A,FE9
7158:  MOVFF  03,243
715C:  MOVFF  02,242
7160:  MOVFF  01,241
7164:  MOVFF  00,240
....................             }  
7168:  MOVLB  2
716A:  INCF   x21,F
716C:  BRA    70E8
....................                Prom=Prom/81;    
716E:  MOVFF  243,3A1
7172:  MOVFF  242,3A0
7176:  MOVFF  241,39F
717A:  MOVFF  240,39E
717E:  MOVLB  3
7180:  CLRF   xA5
7182:  CLRF   xA4
7184:  MOVLW  22
7186:  MOVWF  xA3
7188:  MOVLW  85
718A:  MOVWF  xA2
718C:  MOVLB  0
718E:  CALL   3C5E
7192:  MOVFF  03,243
7196:  MOVFF  02,242
719A:  MOVFF  01,241
719E:  MOVFF  00,240
....................                Prom+=((float)Ajuste-(float)Ajusten); 
71A2:  MOVLB  3
71A4:  CLRF   xA0
71A6:  MOVFF  223,39F
71AA:  MOVLB  0
71AC:  CALL   24F8
71B0:  MOVFF  00,39A
71B4:  MOVFF  01,39B
71B8:  MOVFF  02,39C
71BC:  MOVFF  03,39D
71C0:  MOVLB  3
71C2:  CLRF   xA0
71C4:  MOVFF  224,39F
71C8:  MOVLB  0
71CA:  CALL   24F8
71CE:  BSF    FD8.1
71D0:  MOVFF  39D,3A5
71D4:  MOVFF  39C,3A4
71D8:  MOVFF  39B,3A3
71DC:  MOVFF  39A,3A2
71E0:  MOVFF  03,3A9
71E4:  MOVFF  02,3A8
71E8:  MOVFF  01,3A7
71EC:  MOVFF  00,3A6
71F0:  CALL   3840
71F4:  BCF    FD8.1
71F6:  MOVFF  243,3A5
71FA:  MOVFF  242,3A4
71FE:  MOVFF  241,3A3
7202:  MOVFF  240,3A2
7206:  MOVFF  03,3A9
720A:  MOVFF  02,3A8
720E:  MOVFF  01,3A7
7212:  MOVFF  00,3A6
7216:  CALL   3840
721A:  MOVFF  03,243
721E:  MOVFF  02,242
7222:  MOVFF  01,241
7226:  MOVFF  00,240
....................       Expulsa=0; 
722A:  MOVLB  2
722C:  BCF    x02.7
....................    }           
....................  
....................          if(Lectura==1) 
722E:  BTFSS  x02.6
7230:  BRA    7428
....................          {                       
....................             Lectura=0; 
7232:  BCF    x02.6
....................              
....................          displayT(Prom,69,20,3); 
7234:  MOVFF  243,39D
7238:  MOVFF  242,39C
723C:  MOVFF  241,39B
7240:  MOVFF  240,39A
7244:  MOVLW  45
7246:  MOVLB  3
7248:  MOVWF  x9E
724A:  MOVLW  14
724C:  MOVWF  x9F
724E:  MOVLW  03
7250:  MOVWF  xA0
7252:  MOVLB  0
7254:  CALL   40AE
....................          //displayT(Pt,1,20,3); 
....................          displayTiempo(Setpoint,5,20,4); 
7258:  MOVFF  220,39B
725C:  MOVLW  05
725E:  MOVLB  3
7260:  MOVWF  x9C
7262:  MOVLW  14
7264:  MOVWF  x9D
7266:  MOVLW  04
7268:  MOVWF  x9E
726A:  MOVLB  0
726C:  CALL   2DF2
....................           
....................          if(Visua==1) 
7270:  MOVLB  2
7272:  BTFSS  x1F.3
7274:  BRA    7336
....................             {displayTiempo((int8)desvio,5,30,4); 
7276:  MOVFF  253,39D
727A:  MOVFF  252,39C
727E:  MOVFF  251,39B
7282:  MOVFF  250,39A
7286:  MOVLB  0
7288:  CALL   3804
728C:  MOVFF  01,39A
7290:  MOVFF  01,39B
7294:  MOVLW  05
7296:  MOVLB  3
7298:  MOVWF  x9C
729A:  MOVLW  1E
729C:  MOVWF  x9D
729E:  MOVLW  04
72A0:  MOVWF  x9E
72A2:  MOVLB  0
72A4:  CALL   2DF2
....................              displayTiempo((int8)Tpulso,5,40,4); 
72A8:  MOVFF  23B,39D
72AC:  MOVFF  23A,39C
72B0:  MOVFF  239,39B
72B4:  MOVFF  238,39A
72B8:  CALL   3804
72BC:  MOVFF  01,39A
72C0:  MOVFF  01,39B
72C4:  MOVLW  05
72C6:  MOVLB  3
72C8:  MOVWF  x9C
72CA:  MOVLW  28
72CC:  MOVWF  x9D
72CE:  MOVLW  04
72D0:  MOVWF  x9E
72D2:  MOVLB  0
72D4:  CALL   2DF2
....................              displayTiempo((int8)Ganancia,30,40,4); 
72D8:  MOVFF  24F,39D
72DC:  MOVFF  24E,39C
72E0:  MOVFF  24D,39B
72E4:  MOVFF  24C,39A
72E8:  CALL   3804
72EC:  MOVFF  01,39A
72F0:  MOVFF  01,39B
72F4:  MOVLW  1E
72F6:  MOVLB  3
72F8:  MOVWF  x9C
72FA:  MOVLW  28
72FC:  MOVWF  x9D
72FE:  MOVLW  04
7300:  MOVWF  x9E
7302:  MOVLB  0
7304:  CALL   2DF2
....................              displayTiempo((int8)Ajuste,30,30,4); 
7308:  MOVFF  223,39B
730C:  MOVLW  1E
730E:  MOVLB  3
7310:  MOVWF  x9C
7312:  MOVWF  x9D
7314:  MOVLW  04
7316:  MOVWF  x9E
7318:  MOVLB  0
731A:  CALL   2DF2
....................              displayTiempo((int8)Ajusten,30,20,4); 
731E:  MOVFF  224,39B
7322:  MOVLW  1E
7324:  MOVLB  3
7326:  MOVWF  x9C
7328:  MOVLW  14
732A:  MOVWF  x9D
732C:  MOVLW  04
732E:  MOVWF  x9E
7330:  MOVLB  0
7332:  CALL   2DF2
....................             } 
....................           
....................          // Muestra Valor de esterilizacion actual. 
....................          displayTiempo(Testerilizacion[3],80,0,1);displayTiempo(Testerilizacion[2],86,0,1);glcd_text57(92, 0, Vacio, 1, ON); 
7336:  MOVFF  212,39B
733A:  MOVLW  50
733C:  MOVLB  3
733E:  MOVWF  x9C
7340:  CLRF   x9D
7342:  MOVLW  01
7344:  MOVWF  x9E
7346:  MOVLB  0
7348:  CALL   2DF2
734C:  MOVFF  211,39B
7350:  MOVLW  56
7352:  MOVLB  3
7354:  MOVWF  x9C
7356:  CLRF   x9D
7358:  MOVLW  01
735A:  MOVWF  x9E
735C:  MOVLB  0
735E:  CALL   2DF2
7362:  MOVLW  5C
7364:  MOVLB  3
7366:  MOVWF  xAA
7368:  CLRF   xAB
736A:  MOVLW  01
736C:  MOVWF  xAD
736E:  MOVLW  16
7370:  MOVWF  xAC
7372:  MOVLW  01
7374:  MOVWF  xAE
7376:  MOVWF  xAF
7378:  MOVLB  0
737A:  CALL   288E
....................          displayTiempo(Testerilizacion[1],98,0,1);displayTiempo(Testerilizacion[0],104,0,1); 
737E:  MOVFF  210,39B
7382:  MOVLW  62
7384:  MOVLB  3
7386:  MOVWF  x9C
7388:  CLRF   x9D
738A:  MOVLW  01
738C:  MOVWF  x9E
738E:  MOVLB  0
7390:  CALL   2DF2
7394:  MOVFF  20F,39B
7398:  MOVLW  68
739A:  MOVLB  3
739C:  MOVWF  x9C
739E:  CLRF   x9D
73A0:  MOVLW  01
73A2:  MOVWF  x9E
73A4:  MOVLB  0
73A6:  CALL   2DF2
....................          // Muestra tiempo de secado actual. 
....................          displayTiempo(Tsecado[3],80,8,1);displayTiempo(Tsecado[2],86,8,1);glcd_text57(92, 8, Vacio, 1, ON); 
73AA:  MOVFF  21A,39B
73AE:  MOVLW  50
73B0:  MOVLB  3
73B2:  MOVWF  x9C
73B4:  MOVLW  08
73B6:  MOVWF  x9D
73B8:  MOVLW  01
73BA:  MOVWF  x9E
73BC:  MOVLB  0
73BE:  CALL   2DF2
73C2:  MOVFF  219,39B
73C6:  MOVLW  56
73C8:  MOVLB  3
73CA:  MOVWF  x9C
73CC:  MOVLW  08
73CE:  MOVWF  x9D
73D0:  MOVLW  01
73D2:  MOVWF  x9E
73D4:  MOVLB  0
73D6:  CALL   2DF2
73DA:  MOVLW  5C
73DC:  MOVLB  3
73DE:  MOVWF  xAA
73E0:  MOVLW  08
73E2:  MOVWF  xAB
73E4:  MOVLW  01
73E6:  MOVWF  xAD
73E8:  MOVLW  16
73EA:  MOVWF  xAC
73EC:  MOVLW  01
73EE:  MOVWF  xAE
73F0:  MOVWF  xAF
73F2:  MOVLB  0
73F4:  CALL   288E
....................          displayTiempo(Tsecado[1],98,8,1);displayTiempo(Tsecado[0],104,8,1); 
73F8:  MOVFF  218,39B
73FC:  MOVLW  62
73FE:  MOVLB  3
7400:  MOVWF  x9C
7402:  MOVLW  08
7404:  MOVWF  x9D
7406:  MOVLW  01
7408:  MOVWF  x9E
740A:  MOVLB  0
740C:  CALL   2DF2
7410:  MOVFF  217,39B
7414:  MOVLW  68
7416:  MOVLB  3
7418:  MOVWF  x9C
741A:  MOVLW  08
741C:  MOVWF  x9D
741E:  MOVLW  01
7420:  MOVWF  x9E
7422:  MOVLB  0
7424:  CALL   2DF2
....................          } 
....................           
....................        
....................          if(Prom>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
7428:  MOVLB  3
742A:  CLRF   xA0
742C:  MOVFF  220,39F
7430:  MOVLB  0
7432:  CALL   24F8
7436:  MOVFF  00,39A
743A:  MOVFF  01,39B
743E:  MOVFF  02,39C
7442:  MOVFF  03,39D
7446:  BSF    FD8.1
7448:  MOVFF  03,3A5
744C:  MOVFF  02,3A4
7450:  MOVFF  01,3A3
7454:  MOVFF  00,3A2
7458:  MOVLB  3
745A:  CLRF   xA9
745C:  CLRF   xA8
745E:  CLRF   xA7
7460:  MOVLW  7F
7462:  MOVWF  xA6
7464:  MOVLB  0
7466:  CALL   3840
746A:  MOVFF  03,39D
746E:  MOVFF  02,39C
7472:  MOVFF  01,39B
7476:  MOVFF  00,39A
747A:  MOVFF  243,3A1
747E:  MOVFF  242,3A0
7482:  MOVFF  241,39F
7486:  MOVFF  240,39E
748A:  CALL   3DBC
748E:  BC    7492
7490:  BNZ   7510
....................             {Des=0; 
7492:  MOVLB  2
7494:  BCF    x1F.2
....................             if(tiempo_secado==0) 
7496:  BTFSC  x02.3
7498:  BRA    750C
....................                {glcd_text57(0, 56, Esterilizando, 1, ON);tiempo_esterilizacion=1; 
749A:  MOVLB  3
749C:  CLRF   xAA
749E:  MOVLW  38
74A0:  MOVWF  xAB
74A2:  CLRF   xAD
74A4:  MOVLW  F7
74A6:  MOVWF  xAC
74A8:  MOVLW  01
74AA:  MOVWF  xAE
74AC:  MOVWF  xAF
74AE:  MOVLB  0
74B0:  CALL   288E
74B4:  MOVLB  2
74B6:  BSF    x02.2
....................                if(est==0) 
74B8:  BTFSC  x1F.0
74BA:  BRA    750C
....................                   {Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1;} 
74BC:  MOVLB  3
74BE:  CLRF   x9A
74C0:  MOVLW  5A
74C2:  MOVWF  x9B
74C4:  MOVLW  38
74C6:  MOVWF  x9C
74C8:  MOVLB  0
74CA:  CALL   4120
74CE:  MOVLW  0F
74D0:  MOVLB  3
74D2:  MOVWF  xAC
74D4:  MOVLW  12
74D6:  MOVWF  xAD
74D8:  MOVLW  1E
74DA:  MOVWF  xAE
74DC:  MOVLW  35
74DE:  MOVWF  xAF
74E0:  CLRF   xB0
74E2:  CLRF   xB1
74E4:  MOVLB  0
74E6:  CALL   2D30
74EA:  MOVLW  19
74EC:  MOVLB  3
74EE:  MOVWF  xAC
74F0:  MOVLW  12
74F2:  MOVWF  xAD
74F4:  MOVLW  3C
74F6:  MOVWF  xAE
74F8:  MOVLW  1A
74FA:  MOVWF  xAF
74FC:  CLRF   xB0
74FE:  MOVLW  01
7500:  MOVWF  xB1
7502:  MOVLB  0
7504:  CALL   2D30
7508:  MOVLB  2
750A:  BSF    x1F.0
....................                } 
....................              } 
....................          else 
750C:  BRA    751A
750E:  MOVLB  0
....................             { 
....................              if(PRESOSTATO) 
7510:  BSF    F96.1
7512:  BTFSS  F84.1
7514:  BRA    751C
....................                {Des=1;} 
7516:  MOVLB  2
7518:  BSF    x1F.2
751A:  MOVLB  0
....................             } 
....................          
....................           if(Des==1) 
751C:  MOVLB  2
751E:  BTFSS  x1F.2
7520:  BRA    7542
....................              { Camara_IN_on;  
7522:  BSF    F8B.2
7524:  BCF    F94.2
....................                if(Desfogar==1) 
7526:  BTFSS  x1F.1
7528:  BRA    7542
....................                  {Camara_OUT_on;delay_ms(200);Camara_OUT_off;Desfogar=0;} 
752A:  BSF    F8B.0
752C:  BCF    F94.0
752E:  MOVLW  C8
7530:  MOVLB  3
7532:  MOVWF  x9F
7534:  MOVLB  0
7536:  CALL   24CE
753A:  BCF    F8B.0
753C:  BCF    F94.0
753E:  MOVLB  2
7540:  BCF    x1F.1
....................              }    
....................            
....................           
....................        
....................       if((tiempo_secado==1)&&(Liquid==0)) //Si no selecciono un programa con desfogue lento, Hacer desfogue total. 
7542:  BTFSS  x02.3
7544:  BRA    7552
7546:  MOVF   x00,F
7548:  BNZ   7552
....................       {Menu=101;} 
754A:  MOVLW  65
754C:  MOVLB  1
754E:  MOVWF  xF5
7550:  MOVLB  2
....................       
....................       if(tiempo_secado==0) //Si esta calentando, debe tener la electrovalvula cerrada. 
7552:  BTFSC  x02.3
7554:  BRA    755A
....................       {Camara_OUT_off;} 
7556:  BCF    F8B.0
7558:  BCF    F94.0
....................              
....................       // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................       if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])) 
755A:  MOVF   x13,W
755C:  SUBWF  x0F,W
755E:  BNZ   75F2
7560:  MOVF   x14,W
7562:  SUBWF  x10,W
7564:  BNZ   75F2
7566:  MOVF   x15,W
7568:  SUBWF  x11,W
756A:  BNZ   75F2
756C:  MOVF   x16,W
756E:  SUBWF  x12,W
7570:  BNZ   75F2
....................       {tiempo_esterilizacion=0; 
7572:  BCF    x02.2
....................        
....................       // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................       if(Liquid==1)    
7574:  DECFSZ x00,W
7576:  BRA    75F2
....................          {tiempo_secado=0; 
7578:  BCF    x02.3
....................             if(i==0) 
757A:  BTFSC  x02.4
757C:  BRA    75F2
....................               {Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);i=1; 
757E:  MOVLB  3
7580:  CLRF   x9A
7582:  MOVLW  5A
7584:  MOVWF  x9B
7586:  MOVLW  38
7588:  MOVWF  x9C
758A:  MOVLB  0
758C:  CALL   4120
7590:  MOVLW  19
7592:  MOVLB  3
7594:  MOVWF  xAC
7596:  MOVLW  12
7598:  MOVWF  xAD
759A:  MOVLW  3C
759C:  MOVWF  xAE
759E:  MOVLW  1A
75A0:  MOVWF  xAF
75A2:  CLRF   xB0
75A4:  CLRF   xB1
75A6:  MOVLB  0
75A8:  CALL   2D30
75AC:  MOVLW  37
75AE:  MOVLB  3
75B0:  MOVWF  xAC
75B2:  MOVLW  12
75B4:  MOVWF  xAD
75B6:  MOVLW  44
75B8:  MOVWF  xAE
75BA:  MOVLW  35
75BC:  MOVWF  xAF
75BE:  CLRF   xB0
75C0:  MOVLW  01
75C2:  MOVWF  xB1
75C4:  MOVLB  0
75C6:  CALL   2D30
75CA:  MOVLB  2
75CC:  BSF    x02.4
....................               glcd_text57(0, 56, Desfogue_Lento, 1, ON);Menu=101;} 
75CE:  MOVLB  3
75D0:  CLRF   xAA
75D2:  MOVLW  38
75D4:  MOVWF  xAB
75D6:  MOVLW  01
75D8:  MOVWF  xAD
75DA:  MOVLW  58
75DC:  MOVWF  xAC
75DE:  MOVLW  01
75E0:  MOVWF  xAE
75E2:  MOVWF  xAF
75E4:  MOVLB  0
75E6:  CALL   288E
75EA:  MOVLW  65
75EC:  MOVLB  1
75EE:  MOVWF  xF5
75F0:  MOVLB  2
....................          } 
....................       } 
....................       
....................     } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
....................    if(Menu==101) 
75F2:  MOVLB  1
75F4:  MOVF   xF5,W
75F6:  SUBLW  65
75F8:  BTFSS  FD8.2
75FA:  BRA    7B7C
....................    {        V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
75FC:  MOVLB  3
75FE:  CLRF   x9A
7600:  MOVLB  0
7602:  CALL   252E
7606:  MOVFF  03,22B
760A:  MOVFF  02,22A
760E:  MOVFF  01,229
7612:  MOVFF  00,228
....................             V0 = V0/4.86; 
7616:  MOVFF  22B,3A1
761A:  MOVFF  22A,3A0
761E:  MOVFF  229,39F
7622:  MOVFF  228,39E
7626:  MOVLW  1F
7628:  MOVLB  3
762A:  MOVWF  xA5
762C:  MOVLW  85
762E:  MOVWF  xA4
7630:  MOVLW  1B
7632:  MOVWF  xA3
7634:  MOVLW  81
7636:  MOVWF  xA2
7638:  MOVLB  0
763A:  CALL   3C5E
763E:  MOVFF  03,22B
7642:  MOVFF  02,22A
7646:  MOVFF  01,229
764A:  MOVFF  00,228
....................             Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
764E:  MOVLB  3
7650:  CLRF   xA0
7652:  MOVFF  225,39F
7656:  MOVLB  0
7658:  CALL   24F8
765C:  BCF    FD8.1
765E:  MOVFF  22F,3A5
7662:  MOVFF  22E,3A4
7666:  MOVFF  22D,3A3
766A:  MOVFF  22C,3A2
766E:  MOVFF  03,3A9
7672:  MOVFF  02,3A8
7676:  MOVFF  01,3A7
767A:  MOVFF  00,3A6
767E:  CALL   3840
7682:  MOVFF  00,39A
7686:  MOVFF  01,39B
768A:  MOVFF  02,39C
768E:  MOVFF  03,39D
7692:  MOVLB  3
7694:  CLRF   xA1
7696:  MOVLW  C0
7698:  MOVWF  xA0
769A:  MOVLW  7F
769C:  MOVWF  x9F
769E:  MOVLW  88
76A0:  MOVWF  x9E
76A2:  MOVFF  22B,3A5
76A6:  MOVFF  22A,3A4
76AA:  MOVFF  229,3A3
76AE:  MOVFF  228,3A2
76B2:  MOVLB  0
76B4:  CALL   3C5E
76B8:  MOVFF  00,39E
76BC:  MOVFF  01,39F
76C0:  MOVFF  02,3A0
76C4:  MOVFF  03,3A1
76C8:  BSF    FD8.1
76CA:  MOVFF  03,3A5
76CE:  MOVFF  02,3A4
76D2:  MOVFF  01,3A3
76D6:  MOVFF  00,3A2
76DA:  MOVLB  3
76DC:  CLRF   xA9
76DE:  CLRF   xA8
76E0:  CLRF   xA7
76E2:  MOVLW  7F
76E4:  MOVWF  xA6
76E6:  MOVLB  0
76E8:  CALL   3840
76EC:  MOVFF  39D,3A1
76F0:  MOVFF  39C,3A0
76F4:  MOVFF  39B,39F
76F8:  MOVFF  39A,39E
76FC:  MOVFF  03,3A5
7700:  MOVFF  02,3A4
7704:  MOVFF  01,3A3
7708:  MOVFF  00,3A2
770C:  CALL   3C5E
7710:  MOVFF  03,233
7714:  MOVFF  02,232
7718:  MOVFF  01,231
771C:  MOVFF  00,230
....................             //Temperature=(Pt-100.0972)/0.3850;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................             Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
7720:  BSF    FD8.1
7722:  MOVFF  233,3A5
7726:  MOVFF  232,3A4
772A:  MOVFF  231,3A3
772E:  MOVFF  230,3A2
7732:  MOVLB  3
7734:  CLRF   xA9
7736:  CLRF   xA8
7738:  MOVLW  48
773A:  MOVWF  xA7
773C:  MOVLW  85
773E:  MOVWF  xA6
7740:  MOVLB  0
7742:  CALL   3840
7746:  MOVFF  00,39A
774A:  MOVFF  01,39B
774E:  MOVFF  02,39C
7752:  MOVFF  03,39D
7756:  MOVFF  03,3A1
775A:  MOVFF  02,3A0
775E:  MOVFF  01,39F
7762:  MOVFF  00,39E
7766:  MOVLW  B8
7768:  MOVLB  3
776A:  MOVWF  xA5
776C:  MOVLW  1E
776E:  MOVWF  xA4
7770:  MOVLW  45
7772:  MOVWF  xA3
7774:  MOVLW  7D
7776:  MOVWF  xA2
7778:  MOVLB  0
777A:  CALL   3C5E
777E:  MOVFF  03,247
7782:  MOVFF  02,246
7786:  MOVFF  01,245
778A:  MOVFF  00,244
....................              
....................             if(l>79) 
778E:  MOVLB  2
7790:  MOVF   x22,W
7792:  SUBLW  4F
7794:  BC    7798
....................             {l=0;} 
7796:  CLRF   x22
....................             promedio[l]=Temperature;l++; 
7798:  MOVLB  3
779A:  CLRF   x9F
779C:  MOVFF  222,39E
77A0:  CLRF   xA1
77A2:  MOVLW  04
77A4:  MOVWF  xA0
77A6:  MOVLB  0
77A8:  CALL   30C6
77AC:  MOVF   01,W
77AE:  ADDLW  5A
77B0:  MOVWF  FE9
77B2:  MOVLW  02
77B4:  ADDWFC 02,W
77B6:  MOVWF  FEA
77B8:  MOVFF  244,FEF
77BC:  MOVFF  245,FEC
77C0:  MOVFF  246,FEC
77C4:  MOVFF  247,FEC
77C8:  MOVLB  2
77CA:  INCF   x22,F
....................           
....................             for(h=0;h<=79;h++) 
77CC:  CLRF   x21
77CE:  MOVF   x21,W
77D0:  SUBLW  4F
77D2:  BNC   7854
....................             { 
....................                Prom+=promedio[h]; 
77D4:  MOVLB  3
77D6:  CLRF   x9F
77D8:  MOVFF  221,39E
77DC:  CLRF   xA1
77DE:  MOVLW  04
77E0:  MOVWF  xA0
77E2:  MOVLB  0
77E4:  CALL   30C6
77E8:  MOVFF  02,03
77EC:  MOVF   01,W
77EE:  ADDLW  5A
77F0:  MOVWF  FE9
77F2:  MOVLW  02
77F4:  ADDWFC 02,W
77F6:  MOVWF  FEA
77F8:  MOVFF  FEF,00
77FC:  MOVFF  FEC,01
7800:  MOVFF  FEC,02
7804:  MOVFF  FEC,03
7808:  MOVFF  FEA,39B
780C:  MOVFF  FE9,39A
7810:  BCF    FD8.1
7812:  MOVFF  243,3A5
7816:  MOVFF  242,3A4
781A:  MOVFF  241,3A3
781E:  MOVFF  240,3A2
7822:  MOVFF  03,3A9
7826:  MOVFF  02,3A8
782A:  MOVFF  01,3A7
782E:  MOVFF  00,3A6
7832:  CALL   3840
7836:  MOVFF  39B,FEA
783A:  MOVFF  39A,FE9
783E:  MOVFF  03,243
7842:  MOVFF  02,242
7846:  MOVFF  01,241
784A:  MOVFF  00,240
....................             }  
784E:  MOVLB  2
7850:  INCF   x21,F
7852:  BRA    77CE
....................                Prom=Prom/81;    
7854:  MOVFF  243,3A1
7858:  MOVFF  242,3A0
785C:  MOVFF  241,39F
7860:  MOVFF  240,39E
7864:  MOVLB  3
7866:  CLRF   xA5
7868:  CLRF   xA4
786A:  MOVLW  22
786C:  MOVWF  xA3
786E:  MOVLW  85
7870:  MOVWF  xA2
7872:  MOVLB  0
7874:  CALL   3C5E
7878:  MOVFF  03,243
787C:  MOVFF  02,242
7880:  MOVFF  01,241
7884:  MOVFF  00,240
....................                Prom+=((float)Ajuste-(float)Ajusten); 
7888:  MOVLB  3
788A:  CLRF   xA0
788C:  MOVFF  223,39F
7890:  MOVLB  0
7892:  CALL   24F8
7896:  MOVFF  00,39A
789A:  MOVFF  01,39B
789E:  MOVFF  02,39C
78A2:  MOVFF  03,39D
78A6:  MOVLB  3
78A8:  CLRF   xA0
78AA:  MOVFF  224,39F
78AE:  MOVLB  0
78B0:  CALL   24F8
78B4:  BSF    FD8.1
78B6:  MOVFF  39D,3A5
78BA:  MOVFF  39C,3A4
78BE:  MOVFF  39B,3A3
78C2:  MOVFF  39A,3A2
78C6:  MOVFF  03,3A9
78CA:  MOVFF  02,3A8
78CE:  MOVFF  01,3A7
78D2:  MOVFF  00,3A6
78D6:  CALL   3840
78DA:  BCF    FD8.1
78DC:  MOVFF  243,3A5
78E0:  MOVFF  242,3A4
78E4:  MOVFF  241,3A3
78E8:  MOVFF  240,3A2
78EC:  MOVFF  03,3A9
78F0:  MOVFF  02,3A8
78F4:  MOVFF  01,3A7
78F8:  MOVFF  00,3A6
78FC:  CALL   3840
7900:  MOVFF  03,243
7904:  MOVFF  02,242
7908:  MOVFF  01,241
790C:  MOVFF  00,240
....................                 
....................          if(Lectura==1) 
7910:  MOVLB  2
7912:  BTFSS  x02.6
7914:  BRA    79D4
....................          {                       
....................             Lectura=0; 
7916:  BCF    x02.6
....................             displayT(Prom,69,20,3); 
7918:  MOVFF  243,39D
791C:  MOVFF  242,39C
7920:  MOVFF  241,39B
7924:  MOVFF  240,39A
7928:  MOVLW  45
792A:  MOVLB  3
792C:  MOVWF  x9E
792E:  MOVLW  14
7930:  MOVWF  x9F
7932:  MOVLW  03
7934:  MOVWF  xA0
7936:  MOVLB  0
7938:  CALL   40AE
....................             //displayT(Pt,1,20,3); 
....................             displayTiempo(Setpoint,5,20,4); 
793C:  MOVFF  220,39B
7940:  MOVLW  05
7942:  MOVLB  3
7944:  MOVWF  x9C
7946:  MOVLW  14
7948:  MOVWF  x9D
794A:  MOVLW  04
794C:  MOVWF  x9E
794E:  MOVLB  0
7950:  CALL   2DF2
....................             // Muestra tiempo de secado actual. 
....................             displayTiempo(Tsecado[3],80,8,1);displayTiempo(Tsecado[2],86,8,1);glcd_text57(92, 8, Vacio, 1, ON); 
7954:  MOVFF  21A,39B
7958:  MOVLW  50
795A:  MOVLB  3
795C:  MOVWF  x9C
795E:  MOVLW  08
7960:  MOVWF  x9D
7962:  MOVLW  01
7964:  MOVWF  x9E
7966:  MOVLB  0
7968:  CALL   2DF2
796C:  MOVFF  219,39B
7970:  MOVLW  56
7972:  MOVLB  3
7974:  MOVWF  x9C
7976:  MOVLW  08
7978:  MOVWF  x9D
797A:  MOVLW  01
797C:  MOVWF  x9E
797E:  MOVLB  0
7980:  CALL   2DF2
7984:  MOVLW  5C
7986:  MOVLB  3
7988:  MOVWF  xAA
798A:  MOVLW  08
798C:  MOVWF  xAB
798E:  MOVLW  01
7990:  MOVWF  xAD
7992:  MOVLW  16
7994:  MOVWF  xAC
7996:  MOVLW  01
7998:  MOVWF  xAE
799A:  MOVWF  xAF
799C:  MOVLB  0
799E:  CALL   288E
....................             displayTiempo(Tsecado[1],98,8,1);displayTiempo(Tsecado[0],104,8,1); 
79A2:  MOVFF  218,39B
79A6:  MOVLW  62
79A8:  MOVLB  3
79AA:  MOVWF  x9C
79AC:  MOVLW  08
79AE:  MOVWF  x9D
79B0:  MOVLW  01
79B2:  MOVWF  x9E
79B4:  MOVLB  0
79B6:  CALL   2DF2
79BA:  MOVFF  217,39B
79BE:  MOVLW  68
79C0:  MOVLB  3
79C2:  MOVWF  x9C
79C4:  MOVLW  08
79C6:  MOVWF  x9D
79C8:  MOVLW  01
79CA:  MOVWF  x9E
79CC:  MOVLB  0
79CE:  CALL   2DF2
79D2:  MOVLB  2
....................          }   
....................           
....................       if(Liquid==1) 
79D4:  DECFSZ x00,W
79D6:  BRA    7AC4
....................          { 
....................          if(m<Minutos*15)// Utilizado para realizar la rampa. 
79D8:  MOVFF  20C,39F
79DC:  MOVFF  20B,39E
79E0:  MOVLB  3
79E2:  CLRF   xA1
79E4:  MOVLW  0F
79E6:  MOVWF  xA0
79E8:  MOVLB  0
79EA:  CALL   30C6
79EE:  MOVFF  02,03
79F2:  MOVF   01,W
79F4:  MOVLB  2
79F6:  MOVF   x08,W
79F8:  SUBWF  02,W
79FA:  BNC   7AAE
79FC:  BNZ   7A04
79FE:  MOVF   01,W
7A00:  SUBWF  x07,W
7A02:  BC    7AAE
....................          {Resistencia_off;Camara_IN_off;Camara_OUT_on;delay_ms(100*Nivel);Camara_OUT_off;delay_ms(2000-(100*Nivel));m++; } 
7A04:  BCF    F8B.1
7A06:  BCF    F94.1
7A08:  BCF    F8B.2
7A0A:  BCF    F94.2
7A0C:  BSF    F8B.0
7A0E:  BCF    F94.0
7A10:  MOVLB  3
7A12:  CLRF   x9F
7A14:  MOVLW  64
7A16:  MOVWF  x9E
7A18:  MOVFF  20E,3A1
7A1C:  MOVFF  20D,3A0
7A20:  MOVLB  0
7A22:  CALL   30C6
7A26:  MOVFF  02,39B
7A2A:  MOVFF  01,39A
7A2E:  MOVFF  02,39C
7A32:  MOVLB  3
7A34:  INCF   x9C,F
7A36:  DECF   x9C,F
7A38:  BTFSC  FD8.2
7A3A:  BRA    7A4A
7A3C:  MOVLW  FF
7A3E:  MOVWF  x9F
7A40:  MOVLB  0
7A42:  CALL   24CE
7A46:  MOVLB  3
7A48:  BRA    7A36
7A4A:  MOVFF  39A,39F
7A4E:  MOVLB  0
7A50:  CALL   24CE
7A54:  BCF    F8B.0
7A56:  BCF    F94.0
7A58:  MOVLB  3
7A5A:  CLRF   x9F
7A5C:  MOVLW  64
7A5E:  MOVWF  x9E
7A60:  MOVFF  20E,3A1
7A64:  MOVFF  20D,3A0
7A68:  MOVLB  0
7A6A:  CALL   30C6
7A6E:  MOVFF  02,03
7A72:  MOVF   01,W
7A74:  XORLW  FF
7A76:  ADDLW  D1
7A78:  MOVLB  3
7A7A:  MOVWF  x9A
7A7C:  MOVLW  07
7A7E:  SUBFWB 02,W
7A80:  MOVWF  x9B
7A82:  MOVWF  x9C
7A84:  INCF   x9C,F
7A86:  DECF   x9C,F
7A88:  BTFSC  FD8.2
7A8A:  BRA    7A9A
7A8C:  MOVLW  FF
7A8E:  MOVWF  x9F
7A90:  MOVLB  0
7A92:  CALL   24CE
7A96:  MOVLB  3
7A98:  BRA    7A86
7A9A:  MOVFF  39A,39F
7A9E:  MOVLB  0
7AA0:  CALL   24CE
7AA4:  MOVLB  2
7AA6:  INCF   x07,F
7AA8:  BTFSC  FD8.2
7AAA:  INCF   x08,F
....................       else    
7AAC:  BRA    7AC4
....................          {   
....................             fin_ciclo=1;Menu=102;glcd_fillScreen(OFF); 
7AAE:  MOVLW  01
7AB0:  MOVWF  x26
7AB2:  MOVLW  66
7AB4:  MOVLB  1
7AB6:  MOVWF  xF5
7AB8:  MOVLB  3
7ABA:  CLRF   x9B
7ABC:  MOVLB  0
7ABE:  CALL   2638
7AC2:  MOVLB  2
....................          } 
....................          } 
....................           
....................          if(Liquid==0) 
7AC4:  MOVF   x00,F
7AC6:  BNZ   7B7A
....................          { 
....................             tiempo_esterilizacion=0;Des=0; 
7AC8:  BCF    x02.2
7ACA:  BCF    x1F.2
....................             if(i==0) 
7ACC:  BTFSC  x02.4
7ACE:  BRA    7B20
....................                {Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);i=1;}  
7AD0:  MOVLB  3
7AD2:  CLRF   x9A
7AD4:  MOVLW  5A
7AD6:  MOVWF  x9B
7AD8:  MOVLW  38
7ADA:  MOVWF  x9C
7ADC:  MOVLB  0
7ADE:  CALL   4120
7AE2:  MOVLW  19
7AE4:  MOVLB  3
7AE6:  MOVWF  xAC
7AE8:  MOVLW  12
7AEA:  MOVWF  xAD
7AEC:  MOVLW  3C
7AEE:  MOVWF  xAE
7AF0:  MOVLW  1A
7AF2:  MOVWF  xAF
7AF4:  CLRF   xB0
7AF6:  CLRF   xB1
7AF8:  MOVLB  0
7AFA:  CALL   2D30
7AFE:  MOVLW  37
7B00:  MOVLB  3
7B02:  MOVWF  xAC
7B04:  MOVLW  12
7B06:  MOVWF  xAD
7B08:  MOVLW  44
7B0A:  MOVWF  xAE
7B0C:  MOVLW  35
7B0E:  MOVWF  xAF
7B10:  CLRF   xB0
7B12:  MOVLW  01
7B14:  MOVWF  xB1
7B16:  MOVLB  0
7B18:  CALL   2D30
7B1C:  MOVLB  2
7B1E:  BSF    x02.4
....................                Camara_OUT_on;Camara_IN_off;Resistencia_off;glcd_text57(0, 56, Secando, 1, ON); 
7B20:  BSF    F8B.0
7B22:  BCF    F94.0
7B24:  BCF    F8B.2
7B26:  BCF    F94.2
7B28:  BCF    F8B.1
7B2A:  BCF    F94.1
7B2C:  MOVLB  3
7B2E:  CLRF   xAA
7B30:  MOVLW  38
7B32:  MOVWF  xAB
7B34:  MOVLW  01
7B36:  MOVWF  xAD
7B38:  MOVLW  05
7B3A:  MOVWF  xAC
7B3C:  MOVLW  01
7B3E:  MOVWF  xAE
7B40:  MOVWF  xAF
7B42:  MOVLB  0
7B44:  CALL   288E
....................                 
....................             if((Tsecado[0]==Tsecadop[0])&&(Tsecado[1]==Tsecadop[1])&&(Tsecado[2]==Tsecadop[2])&&(Tsecado[3]==Tsecadop[3]))// Si cumplio 
7B48:  MOVLB  2
7B4A:  MOVF   x1B,W
7B4C:  SUBWF  x17,W
7B4E:  BNZ   7B7A
7B50:  MOVF   x1C,W
7B52:  SUBWF  x18,W
7B54:  BNZ   7B7A
7B56:  MOVF   x1D,W
7B58:  SUBWF  x19,W
7B5A:  BNZ   7B7A
7B5C:  MOVF   x1E,W
7B5E:  SUBWF  x1A,W
7B60:  BNZ   7B7A
....................             {   
....................                Menu=102;fin_ciclo=1;glcd_fillScreen(OFF);//tiempo de secado sin seleccionar ningun programa de desfogue lento, activa fin de ciclo. 
7B62:  MOVLW  66
7B64:  MOVLB  1
7B66:  MOVWF  xF5
7B68:  MOVLW  01
7B6A:  MOVLB  2
7B6C:  MOVWF  x26
7B6E:  MOVLB  3
7B70:  CLRF   x9B
7B72:  MOVLB  0
7B74:  CALL   2638
7B78:  MOVLB  2
7B7A:  MOVLB  1
....................             } 
....................          } 
....................    } 
....................     
....................    if(Menu==102) 
7B7C:  MOVF   xF5,W
7B7E:  SUBLW  66
7B80:  BTFSS  FD8.2
7B82:  BRA    7D26
....................    { 
....................       if(fin_ciclo==0) 
7B84:  MOVLB  2
7B86:  MOVF   x26,F
7B88:  BNZ   7C66
....................       { 
....................         glcd_text57(30, 0, Ultimo, 2, ON);glcd_text57(35, 20, Param, 2, ON); 
7B8A:  MOVLW  1E
7B8C:  MOVLB  3
7B8E:  MOVWF  xAA
7B90:  CLRF   xAB
7B92:  MOVLW  01
7B94:  MOVWF  xAD
7B96:  MOVLW  DF
7B98:  MOVWF  xAC
7B9A:  MOVLW  02
7B9C:  MOVWF  xAE
7B9E:  MOVLW  01
7BA0:  MOVWF  xAF
7BA2:  MOVLB  0
7BA4:  CALL   288E
7BA8:  MOVLW  23
7BAA:  MOVLB  3
7BAC:  MOVWF  xAA
7BAE:  MOVLW  14
7BB0:  MOVWF  xAB
7BB2:  CLRF   xAD
7BB4:  MOVLW  9D
7BB6:  MOVWF  xAC
7BB8:  MOVLW  02
7BBA:  MOVWF  xAE
7BBC:  MOVLW  01
7BBE:  MOVWF  xAF
7BC0:  MOVLB  0
7BC2:  CALL   288E
....................         glcd_text57(50, 40, Fle, 1, ON); glcd_text57(70, 40, Fle1, 1, ON); 
7BC6:  MOVLW  32
7BC8:  MOVLB  3
7BCA:  MOVWF  xAA
7BCC:  MOVLW  28
7BCE:  MOVWF  xAB
7BD0:  CLRF   xAD
7BD2:  MOVLW  99
7BD4:  MOVWF  xAC
7BD6:  MOVLW  01
7BD8:  MOVWF  xAE
7BDA:  MOVWF  xAF
7BDC:  MOVLB  0
7BDE:  CALL   288E
7BE2:  MOVLW  46
7BE4:  MOVLB  3
7BE6:  MOVWF  xAA
7BE8:  MOVLW  28
7BEA:  MOVWF  xAB
7BEC:  CLRF   xAD
7BEE:  MOVLW  9B
7BF0:  MOVWF  xAC
7BF2:  MOVLW  01
7BF4:  MOVWF  xAE
7BF6:  MOVWF  xAF
7BF8:  MOVLB  0
7BFA:  CALL   288E
....................         glcd_text57(50, 50, Si, 1, ON); glcd_text57(70, 50, Noo, 1, ON); 
7BFE:  MOVLW  32
7C00:  MOVLB  3
7C02:  MOVWF  xAA
7C04:  MOVWF  xAB
7C06:  MOVLW  01
7C08:  MOVWF  xAD
7C0A:  MOVLW  BC
7C0C:  MOVWF  xAC
7C0E:  MOVLW  01
7C10:  MOVWF  xAE
7C12:  MOVWF  xAF
7C14:  MOVLB  0
7C16:  CALL   288E
7C1A:  MOVLW  46
7C1C:  MOVLB  3
7C1E:  MOVWF  xAA
7C20:  MOVLW  32
7C22:  MOVWF  xAB
7C24:  MOVLW  01
7C26:  MOVWF  xAD
7C28:  MOVLW  BF
7C2A:  MOVWF  xAC
7C2C:  MOVLW  01
7C2E:  MOVWF  xAE
7C30:  MOVWF  xAF
7C32:  MOVLB  0
7C34:  CALL   288E
....................          
....................         if(LEFT) 
7C38:  BSF    F92.5
7C3A:  BTFSS  F80.5
7C3C:  BRA    7C4E
....................         {fin_ciclo=1;glcd_fillScreen(OFF);} 
7C3E:  MOVLW  01
7C40:  MOVLB  2
7C42:  MOVWF  x26
7C44:  MOVLB  3
7C46:  CLRF   x9B
7C48:  MOVLB  0
7C4A:  CALL   2638
....................          
....................         if(RIGHT) 
7C4E:  BSF    F92.3
7C50:  BTFSS  F80.3
7C52:  BRA    7C64
....................         {fin_ciclo=3;glcd_fillScreen(OFF);} 
7C54:  MOVLW  03
7C56:  MOVLB  2
7C58:  MOVWF  x26
7C5A:  MOVLB  3
7C5C:  CLRF   x9B
7C5E:  MOVLB  0
7C60:  CALL   2638
7C64:  MOVLB  2
....................          
....................       } 
....................     
....................       if(fin_ciclo==1) //Si termino proceso. 
7C66:  DECFSZ x26,W
7C68:  BRA    7CB4
....................             {glcd_fillScreen(OFF); glcd_text57(20, 0, Proc, 2, ON);glcd_text57(10, 40, Finalizado, 2, ON);fin_ciclo++;} 
7C6A:  MOVLB  3
7C6C:  CLRF   x9B
7C6E:  MOVLB  0
7C70:  CALL   2638
7C74:  MOVLW  14
7C76:  MOVLB  3
7C78:  MOVWF  xAA
7C7A:  CLRF   xAB
7C7C:  CLRF   xAD
7C7E:  MOVLW  AD
7C80:  MOVWF  xAC
7C82:  MOVLW  02
7C84:  MOVWF  xAE
7C86:  MOVLW  01
7C88:  MOVWF  xAF
7C8A:  MOVLB  0
7C8C:  CALL   288E
7C90:  MOVLW  0A
7C92:  MOVLB  3
7C94:  MOVWF  xAA
7C96:  MOVLW  28
7C98:  MOVWF  xAB
7C9A:  MOVLW  01
7C9C:  MOVWF  xAD
7C9E:  MOVLW  C2
7CA0:  MOVWF  xAC
7CA2:  MOVLW  02
7CA4:  MOVWF  xAE
7CA6:  MOVLW  01
7CA8:  MOVWF  xAF
7CAA:  MOVLB  0
7CAC:  CALL   288E
7CB0:  MOVLB  2
7CB2:  INCF   x26,F
....................             if(fin_ciclo==2) 
7CB4:  MOVF   x26,W
7CB6:  SUBLW  02
7CB8:  BNZ   7CD2
....................             {Camara_OUT_off;Camara_IN_off;Resistencia_off;Piloto_Fc_on; 
7CBA:  BCF    F8B.0
7CBC:  BCF    F94.0
7CBE:  BCF    F8B.2
7CC0:  BCF    F94.2
7CC2:  BCF    F8B.1
7CC4:  BCF    F94.1
7CC6:  BSF    F8C.0
7CC8:  BCF    F95.0
....................                if(LEFT) 
7CCA:  BSF    F92.5
7CCC:  BTFSS  F80.5
7CCE:  BRA    7CD2
....................                {reset_cpu();} 
7CD0:  RESET
....................             } 
....................             if(fin_ciclo==3) 
7CD2:  MOVF   x26,W
7CD4:  SUBLW  03
7CD6:  BNZ   7D26
....................             {glcd_text57(20, 0, Proc, 2, ON);glcd_text57(10, 40, Finalizado, 2, ON);Camara_OUT_on;Camara_IN_on;Resistencia_off;Piloto_Fc_on;} 
7CD8:  MOVLW  14
7CDA:  MOVLB  3
7CDC:  MOVWF  xAA
7CDE:  CLRF   xAB
7CE0:  CLRF   xAD
7CE2:  MOVLW  AD
7CE4:  MOVWF  xAC
7CE6:  MOVLW  02
7CE8:  MOVWF  xAE
7CEA:  MOVLW  01
7CEC:  MOVWF  xAF
7CEE:  MOVLB  0
7CF0:  CALL   288E
7CF4:  MOVLW  0A
7CF6:  MOVLB  3
7CF8:  MOVWF  xAA
7CFA:  MOVLW  28
7CFC:  MOVWF  xAB
7CFE:  MOVLW  01
7D00:  MOVWF  xAD
7D02:  MOVLW  C2
7D04:  MOVWF  xAC
7D06:  MOVLW  02
7D08:  MOVWF  xAE
7D0A:  MOVLW  01
7D0C:  MOVWF  xAF
7D0E:  MOVLB  0
7D10:  CALL   288E
7D14:  BSF    F8B.0
7D16:  BCF    F94.0
7D18:  BSF    F8B.2
7D1A:  BCF    F94.2
7D1C:  BCF    F8B.1
7D1E:  BCF    F94.1
7D20:  BSF    F8C.0
7D22:  BCF    F95.0
7D24:  MOVLB  2
....................    } 
....................          
....................    } 
7D26:  MOVLB  0
7D28:  GOTO   4EEC
.................... } 
7D2C:  SLEEP 

Configuration Fuses:
   Word  1: CE30   IESO FCMEN HSPLL PLL1 CPUDIV3 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
