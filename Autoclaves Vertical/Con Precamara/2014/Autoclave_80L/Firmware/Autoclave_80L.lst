CCS PCH C Compiler, Version 4.104, 5967               21-ago-14 15:35

               Filename: H:\JP\Autoclave\Autoclave_80L\Firmware\Autoclave_80L.lst

               ROM used: 29758 bytes (91%)
                         Largest free fragment is 3010
               RAM used: 827 (40%) at main() level
                         1213 (59%) worst case
               Stack:    14 worst case (5 in main + 9 for interrupts)

*
0000:  GOTO   4170
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   23E4
0054:  BTFSS  FA0.5
0056:  GOTO   0060
005A:  BTFSC  FA1.5
005C:  GOTO   235C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Inicio Proceso, Ciclo y Cambio de Contraseña. 
.................... // Falta Agregar Control de Temperatura para PT100. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV4,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
24DC:  MOVLW  03
24DE:  MOVWF  FEA
24E0:  MOVLW  A8
24E2:  MOVWF  FE9
24E4:  MOVF   FEF,W
24E6:  BZ    2504
24E8:  MOVLW  0F
24EA:  MOVWF  01
24EC:  CLRF   00
24EE:  DECFSZ 00,F
24F0:  BRA    24EE
24F2:  DECFSZ 01,F
24F4:  BRA    24EC
24F6:  MOVLW  8F
24F8:  MOVWF  00
24FA:  DECFSZ 00,F
24FC:  BRA    24FA
24FE:  NOP   
2500:  DECFSZ FEF,F
2502:  BRA    24E8
2504:  RETLW  00
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... //#ifndef FAST_GLCD 
.................... //#define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D3   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D4   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C7   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
26D4:  BCF    F94.7
26D6:  BSF    F8B.7
....................    output_low(GLCD_E); 
26D8:  BCF    F95.7
26DA:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
26DC:  BCF    F95.3
26DE:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
26E0:  BCF    F95.4
26E2:  BCF    F8C.4
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
26E4:  BCF    F95.5
26E6:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
26E8:  MOVLB  3
26EA:  CLRF   xDB
26EC:  MOVLW  C0
26EE:  MOVWF  xDC
26F0:  MOVLB  0
26F2:  RCALL  2610
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
26F4:  MOVLW  01
26F6:  MOVLB  3
26F8:  MOVWF  xDB
26FA:  MOVLW  C0
26FC:  MOVWF  xDC
26FE:  MOVLB  0
2700:  RCALL  2610
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
2702:  MOVLB  3
2704:  CLRF   xDB
2706:  MOVLW  40
2708:  MOVWF  xDC
270A:  MOVLB  0
270C:  RCALL  2610
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
270E:  MOVLW  01
2710:  MOVLB  3
2712:  MOVWF  xDB
2714:  MOVLW  40
2716:  MOVWF  xDC
2718:  MOVLB  0
271A:  RCALL  2610
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
271C:  MOVLB  3
271E:  CLRF   xDB
2720:  MOVLW  B8
2722:  MOVWF  xDC
2724:  MOVLB  0
2726:  RCALL  2610
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
2728:  MOVLW  01
272A:  MOVLB  3
272C:  MOVWF  xDB
272E:  MOVLW  B8
2730:  MOVWF  xDC
2732:  MOVLB  0
2734:  RCALL  2610
....................  
....................    if(mode == ON) 
2736:  MOVLB  3
2738:  DECFSZ xA3,W
273A:  BRA    2758
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
273C:  CLRF   xDB
273E:  MOVLW  3F
2740:  MOVWF  xDC
2742:  MOVLB  0
2744:  RCALL  2610
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
2746:  MOVLW  01
2748:  MOVLB  3
274A:  MOVWF  xDB
274C:  MOVLW  3F
274E:  MOVWF  xDC
2750:  MOVLB  0
2752:  RCALL  2610
....................    } 
....................    else 
2754:  BRA    2770
2756:  MOVLB  3
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
2758:  CLRF   xDB
275A:  MOVLW  3E
275C:  MOVWF  xDC
275E:  MOVLB  0
2760:  RCALL  2610
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
2762:  MOVLW  01
2764:  MOVLB  3
2766:  MOVWF  xDB
2768:  MOVLW  3E
276A:  MOVWF  xDC
276C:  MOVLB  0
276E:  RCALL  2610
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
2770:  MOVLB  3
2772:  CLRF   xA4
2774:  MOVLB  0
2776:  RCALL  2646
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
....................    #endif 
.................... } 
2778:  GOTO   4C9A (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
*
27BA:  MOVLB  3
27BC:  BCF    xD8.0
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
27BE:  MOVF   xD4,W
27C0:  SUBLW  3F
27C2:  BC    27CA
....................    { 
....................       x -= 64; 
27C4:  MOVLW  40
27C6:  SUBWF  xD4,F
....................       side = GLCD_RIGHT; 
27C8:  BSF    xD8.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
27CA:  BCF    F95.5
27CC:  BCF    F8C.5
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
27CE:  BCF    xD4.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
27D0:  BSF    xD4.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
27D2:  MOVLW  00
27D4:  BTFSC  xD8.0
27D6:  MOVLW  01
27D8:  MOVWF  xDB
27DA:  MOVFF  3D4,3DC
27DE:  MOVLB  0
27E0:  RCALL  2610
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
27E2:  MOVLW  00
27E4:  MOVLB  3
27E6:  BTFSC  xD8.0
27E8:  MOVLW  01
27EA:  MOVWF  xD9
27EC:  RRCF   xD5,W
27EE:  MOVWF  00
27F0:  RRCF   00,F
27F2:  RRCF   00,F
27F4:  MOVLW  1F
27F6:  ANDWF  00,F
27F8:  MOVF   00,W
27FA:  ANDLW  BF
27FC:  IORLW  B8
27FE:  MOVWF  xDA
2800:  MOVFF  3D9,3DB
2804:  MOVWF  xDC
2806:  MOVLB  0
2808:  RCALL  2610
....................    output_high(GLCD_DI);                        // Set for data 
280A:  BCF    F95.5
280C:  BSF    F8C.5
....................    glcd_readByte(side);                         // Need two reads to get data 
280E:  MOVLW  00
2810:  MOVLB  3
2812:  BTFSC  xD8.0
2814:  MOVLW  01
2816:  MOVWF  xDA
2818:  MOVLB  0
281A:  RCALL  277C
....................    data = glcd_readByte(side);                  //  at new address 
281C:  MOVLW  00
281E:  MOVLB  3
2820:  BTFSC  xD8.0
2822:  MOVLW  01
2824:  MOVWF  xDA
2826:  MOVLB  0
2828:  RCALL  277C
282A:  MOVFF  01,3D7
....................  
....................    if(color == ON) 
282E:  MOVLB  3
2830:  DECFSZ xD6,W
2832:  BRA    2852
....................       bit_set(data, y%8);        // Turn the pixel on 
2834:  MOVF   xD5,W
2836:  ANDLW  07
2838:  MOVWF  xD9
283A:  MOVLW  01
283C:  MOVWF  00
283E:  MOVF   xD9,W
2840:  MOVWF  01
2842:  BZ    284C
2844:  BCF    FD8.0
2846:  RLCF   00,F
2848:  DECFSZ 01,F
284A:  BRA    2844
284C:  MOVF   00,W
284E:  IORWF  xD7,F
....................    else                          // or 
2850:  BRA    2870
....................       bit_clear(data, y%8);      // turn the pixel off 
2852:  MOVF   xD5,W
2854:  ANDLW  07
2856:  MOVWF  xD9
2858:  MOVLW  01
285A:  MOVWF  00
285C:  MOVF   xD9,W
285E:  MOVWF  01
2860:  BZ    286A
2862:  BCF    FD8.0
2864:  RLCF   00,F
2866:  DECFSZ 01,F
2868:  BRA    2862
286A:  MOVF   00,W
286C:  XORLW  FF
286E:  ANDWF  xD7,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
2870:  BCF    F95.5
2872:  BCF    F8C.5
....................    glcd_writeByte(side, x);      // Set the horizontal address 
2874:  MOVLW  00
2876:  BTFSC  xD8.0
2878:  MOVLW  01
287A:  MOVWF  xDB
287C:  MOVFF  3D4,3DC
2880:  MOVLB  0
2882:  RCALL  2610
....................    output_high(GLCD_DI);         // Set for data 
2884:  BCF    F95.5
2886:  BSF    F8C.5
....................    glcd_writeByte(side, data);   // Write the pixel data 
2888:  MOVLW  00
288A:  MOVLB  3
288C:  BTFSC  xD8.0
288E:  MOVLW  01
2890:  MOVWF  xDB
2892:  MOVFF  3D7,3DC
2896:  MOVLB  0
2898:  RCALL  2610
.................... } 
289A:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................       *p1++ = data; 
....................       *p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
2646:  MOVLB  3
2648:  CLRF   xA5
264A:  MOVF   xA5,W
264C:  SUBLW  07
264E:  BNC   26D0
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
2650:  BCF    F95.5
2652:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
2654:  CLRF   xDB
2656:  MOVLW  40
2658:  MOVWF  xDC
265A:  MOVLB  0
265C:  RCALL  2610
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
265E:  MOVLW  01
2660:  MOVLB  3
2662:  MOVWF  xDB
2664:  MOVLW  40
2666:  MOVWF  xDC
2668:  MOVLB  0
266A:  RCALL  2610
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
266C:  MOVLB  3
266E:  MOVF   xA5,W
2670:  IORLW  B8
2672:  MOVWF  xA7
2674:  CLRF   xDB
2676:  MOVWF  xDC
2678:  MOVLB  0
267A:  RCALL  2610
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
267C:  MOVLB  3
267E:  MOVF   xA5,W
2680:  IORLW  B8
2682:  MOVWF  xA7
2684:  MOVLW  01
2686:  MOVWF  xDB
2688:  MOVFF  3A7,3DC
268C:  MOVLB  0
268E:  RCALL  2610
....................       output_high(GLCD_DI);                     // Set for data 
2690:  BCF    F95.5
2692:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
2694:  MOVLB  3
2696:  CLRF   xA6
2698:  MOVF   xA6,W
269A:  SUBLW  3F
269C:  BNC   26CC
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
269E:  MOVF   xA4,W
26A0:  MULLW  FF
26A2:  MOVFF  FF3,3A7
26A6:  CLRF   xDB
26A8:  MOVFF  3A7,3DC
26AC:  MOVLB  0
26AE:  RCALL  2610
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
26B0:  MOVLB  3
26B2:  MOVF   xA4,W
26B4:  MULLW  FF
26B6:  MOVFF  FF3,3A7
26BA:  MOVLW  01
26BC:  MOVWF  xDB
26BE:  MOVFF  3A7,3DC
26C2:  MOVLB  0
26C4:  RCALL  2610
....................       } 
26C6:  MOVLB  3
26C8:  INCF   xA6,F
26CA:  BRA    2698
....................    } 
26CC:  INCF   xA5,F
26CE:  BRA    264A
.................... } 
26D0:  MOVLB  0
26D2:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
2610:  MOVLB  3
2612:  MOVF   xDB,F
2614:  BZ    261C
....................       output_high(GLCD_CS2); 
2616:  BCF    F95.4
2618:  BSF    F8C.4
....................    else 
261A:  BRA    2620
....................       output_high(GLCD_CS1); 
261C:  BCF    F95.3
261E:  BSF    F8C.3
....................  
....................    output_low(GLCD_RW);       // Set for writing 
2620:  BCF    F95.6
2622:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
2624:  CLRF   F93
2626:  MOVFF  3DC,F8A
....................    delay_cycles(1); 
262A:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
262C:  BCF    F95.7
262E:  BSF    F8C.7
....................    delay_cycles(5); 
2630:  BRA    2632
2632:  BRA    2634
2634:  NOP   
....................    output_low(GLCD_E); 
2636:  BCF    F95.7
2638:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
263A:  BCF    F95.3
263C:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
263E:  BCF    F95.4
2640:  BCF    F8C.4
.................... } 
2642:  MOVLB  0
2644:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
*
277C:  MOVLW  FF
277E:  MOVWF  F93
....................    output_high(GLCD_RW);      // Set for reading 
2780:  BCF    F95.6
2782:  BSF    F8C.6
....................  
....................    if(side)                   // Choose which side to write to 
2784:  MOVLB  3
2786:  MOVF   xDA,F
2788:  BZ    2790
....................       output_high(GLCD_CS2); 
278A:  BCF    F95.4
278C:  BSF    F8C.4
....................    else 
278E:  BRA    2794
....................       output_high(GLCD_CS1); 
2790:  BCF    F95.3
2792:  BSF    F8C.3
....................  
....................    delay_cycles(1); 
2794:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
2796:  BCF    F95.7
2798:  BSF    F8C.7
....................    delay_cycles(4); 
279A:  BRA    279C
279C:  BRA    279E
....................    data = input_b();          // Get the data from the display's output register 
279E:  MOVLW  FF
27A0:  MOVWF  F93
27A2:  MOVFF  F81,3DB
....................    output_low(GLCD_E); 
27A6:  BCF    F95.7
27A8:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
27AA:  BCF    F95.3
27AC:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
27AE:  BCF    F95.4
27B0:  BCF    F8C.4
....................    return data;               // Return the read data 
27B2:  MOVFF  3DB,01
.................... } 
27B6:  MOVLB  0
27B8:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
2DDC:  MOVLW  01
2DDE:  MOVLB  3
2DE0:  MOVWF  xCD
2DE2:  MOVWF  xCE
2DE4:  CLRF   xD3
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
2DE6:  MOVF   xC4,W
2DE8:  SUBWF  xC6,W
2DEA:  MOVWF  xD4
2DEC:  MOVF   xD4,W
2DEE:  BTFSS  xD4.7
2DF0:  BRA    2DF8
2DF2:  MOVLW  00
2DF4:  BSF    FD8.0
2DF6:  SUBFWB xD4,W
2DF8:  CLRF   03
2DFA:  MOVWF  xCB
2DFC:  MOVFF  03,3CC
....................    dy = abs((signed int8)(y2 - y1)); 
2E00:  MOVF   xC5,W
2E02:  SUBWF  xC7,W
2E04:  MOVWF  xD4
2E06:  MOVF   xD4,W
2E08:  BTFSS  xD4.7
2E0A:  BRA    2E12
2E0C:  MOVLW  00
2E0E:  BSF    FD8.0
2E10:  SUBFWB xD4,W
2E12:  CLRF   03
2E14:  MOVWF  xC9
2E16:  MOVFF  03,3CA
....................    #endif 
....................  
....................    if(x1 > x2) 
2E1A:  MOVF   xC4,W
2E1C:  SUBWF  xC6,W
2E1E:  BC    2E24
....................       addx = -1; 
2E20:  MOVLW  FF
2E22:  MOVWF  xCD
....................    if(y1 > y2) 
2E24:  MOVF   xC5,W
2E26:  SUBWF  xC7,W
2E28:  BC    2E2E
....................       addy = -1; 
2E2A:  MOVLW  FF
2E2C:  MOVWF  xCE
....................  
....................    if(dx >= dy) 
2E2E:  MOVF   xCA,W
2E30:  SUBWF  xCC,W
2E32:  BNC   2EAA
2E34:  BNZ   2E3C
2E36:  MOVF   xC9,W
2E38:  SUBWF  xCB,W
2E3A:  BNC   2EAA
....................    { 
....................       dy *= 2; 
2E3C:  BCF    FD8.0
2E3E:  RLCF   xC9,F
2E40:  RLCF   xCA,F
....................       P = dy - dx; 
2E42:  MOVF   xCB,W
2E44:  SUBWF  xC9,W
2E46:  MOVWF  00
2E48:  MOVF   xCC,W
2E4A:  SUBWFB xCA,W
2E4C:  MOVFF  00,3CF
2E50:  MOVWF  xD0
....................       diff = P - dx; 
2E52:  MOVF   xCB,W
2E54:  SUBWF  xCF,W
2E56:  MOVWF  xD1
2E58:  MOVF   xCC,W
2E5A:  SUBWFB xD0,W
2E5C:  MOVWF  xD2
....................  
....................       for(; i<=dx; ++i) 
2E5E:  MOVF   xCC,F
2E60:  BNZ   2E68
2E62:  MOVF   xD3,W
2E64:  SUBWF  xCB,W
2E66:  BNC   2EA8
....................       { 
....................          glcd_pixel(x1, y1, color); 
2E68:  MOVFF  3C4,3D4
2E6C:  MOVFF  3C5,3D5
2E70:  MOVFF  3C8,3D6
2E74:  MOVLB  0
2E76:  RCALL  27BA
....................  
....................          if(P < 0) 
2E78:  MOVLB  3
2E7A:  BTFSC  xD0.7
2E7C:  BRA    2E80
2E7E:  BRA    2E90
....................          { 
....................             P  += dy; 
2E80:  MOVF   xC9,W
2E82:  ADDWF  xCF,F
2E84:  MOVF   xCA,W
2E86:  ADDWFC xD0,F
....................             x1 += addx; 
2E88:  MOVF   xCD,W
2E8A:  ADDWF  xC4,W
2E8C:  MOVWF  xC4
....................          } 
....................          else 
2E8E:  BRA    2EA4
....................          { 
....................             P  += diff; 
2E90:  MOVF   xD1,W
2E92:  ADDWF  xCF,F
2E94:  MOVF   xD2,W
2E96:  ADDWFC xD0,F
....................             x1 += addx; 
2E98:  MOVF   xCD,W
2E9A:  ADDWF  xC4,W
2E9C:  MOVWF  xC4
....................             y1 += addy; 
2E9E:  MOVF   xCE,W
2EA0:  ADDWF  xC5,W
2EA2:  MOVWF  xC5
....................          } 
....................       } 
2EA4:  INCF   xD3,F
2EA6:  BRA    2E5E
....................    } 
....................    else 
2EA8:  BRA    2F16
....................    { 
....................       dx *= 2; 
2EAA:  BCF    FD8.0
2EAC:  RLCF   xCB,F
2EAE:  RLCF   xCC,F
....................       P = dx - dy; 
2EB0:  MOVF   xC9,W
2EB2:  SUBWF  xCB,W
2EB4:  MOVWF  00
2EB6:  MOVF   xCA,W
2EB8:  SUBWFB xCC,W
2EBA:  MOVFF  00,3CF
2EBE:  MOVWF  xD0
....................       diff = P - dy; 
2EC0:  MOVF   xC9,W
2EC2:  SUBWF  xCF,W
2EC4:  MOVWF  xD1
2EC6:  MOVF   xCA,W
2EC8:  SUBWFB xD0,W
2ECA:  MOVWF  xD2
....................  
....................       for(; i<=dy; ++i) 
2ECC:  MOVF   xCA,F
2ECE:  BNZ   2ED6
2ED0:  MOVF   xD3,W
2ED2:  SUBWF  xC9,W
2ED4:  BNC   2F16
....................       { 
....................          glcd_pixel(x1, y1, color); 
2ED6:  MOVFF  3C4,3D4
2EDA:  MOVFF  3C5,3D5
2EDE:  MOVFF  3C8,3D6
2EE2:  MOVLB  0
2EE4:  RCALL  27BA
....................  
....................          if(P < 0) 
2EE6:  MOVLB  3
2EE8:  BTFSC  xD0.7
2EEA:  BRA    2EEE
2EEC:  BRA    2EFE
....................          { 
....................             P  += dx; 
2EEE:  MOVF   xCB,W
2EF0:  ADDWF  xCF,F
2EF2:  MOVF   xCC,W
2EF4:  ADDWFC xD0,F
....................             y1 += addy; 
2EF6:  MOVF   xCE,W
2EF8:  ADDWF  xC5,W
2EFA:  MOVWF  xC5
....................          } 
....................          else 
2EFC:  BRA    2F12
....................          { 
....................             P  += diff; 
2EFE:  MOVF   xD1,W
2F00:  ADDWF  xCF,F
2F02:  MOVF   xD2,W
2F04:  ADDWFC xD0,F
....................             x1 += addx; 
2F06:  MOVF   xCD,W
2F08:  ADDWF  xC4,W
2F0A:  MOVWF  xC4
....................             y1 += addy; 
2F0C:  MOVF   xCE,W
2F0E:  ADDWF  xC5,W
2F10:  MOVWF  xC5
....................          } 
....................       } 
2F12:  INCF   xD3,F
2F14:  BRA    2ECC
....................    } 
.................... } 
2F16:  MOVLB  0
2F18:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
2F1A:  MOVLB  3
2F1C:  MOVF   xBD,F
2F1E:  BZ    2F7C
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
2F20:  MOVF   xBB,W
2F22:  SUBWF  xB9,W
2F24:  BC    2F30
....................       { 
....................          xmin = x1; 
2F26:  MOVFF  3B9,3C0
....................          xmax = x2; 
2F2A:  MOVFF  3BB,3C1
....................       } 
....................       else 
2F2E:  BRA    2F38
....................       { 
....................          xmin = x2; 
2F30:  MOVFF  3BB,3C0
....................          xmax = x1; 
2F34:  MOVFF  3B9,3C1
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
2F38:  MOVF   xBC,W
2F3A:  SUBWF  xBA,W
2F3C:  BC    2F48
....................       { 
....................          ymin = y1; 
2F3E:  MOVFF  3BA,3C2
....................          ymax = y2; 
2F42:  MOVFF  3BC,3C3
....................       } 
....................       else 
2F46:  BRA    2F50
....................       { 
....................          ymin = y2; 
2F48:  MOVFF  3BC,3C2
....................          ymax = y1; 
2F4C:  MOVFF  3BA,3C3
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
2F50:  MOVF   xC0,W
2F52:  SUBWF  xC1,W
2F54:  BNC   2F7A
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
2F56:  MOVFF  3C2,3BF
2F5A:  MOVF   xBF,W
2F5C:  SUBWF  xC3,W
2F5E:  BNC   2F76
....................          { 
....................             glcd_pixel(xmin, i, color); 
2F60:  MOVFF  3C0,3D4
2F64:  MOVFF  3BF,3D5
2F68:  MOVFF  3BE,3D6
2F6C:  MOVLB  0
2F6E:  RCALL  27BA
....................          } 
2F70:  MOVLB  3
2F72:  INCF   xBF,F
2F74:  BRA    2F5A
....................       } 
2F76:  INCF   xC0,F
2F78:  BRA    2F50
....................    } 
....................    else 
2F7A:  BRA    2FD8
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
2F7C:  MOVFF  3B9,3C4
2F80:  MOVFF  3BA,3C5
2F84:  MOVFF  3BB,3C6
2F88:  MOVFF  3BA,3C7
2F8C:  MOVFF  3BE,3C8
2F90:  MOVLB  0
2F92:  RCALL  2DDC
....................       glcd_line(x1, y2, x2, y2, color); 
2F94:  MOVFF  3B9,3C4
2F98:  MOVFF  3BC,3C5
2F9C:  MOVFF  3BB,3C6
2FA0:  MOVFF  3BC,3C7
2FA4:  MOVFF  3BE,3C8
2FA8:  RCALL  2DDC
....................       glcd_line(x1, y1, x1, y2, color); 
2FAA:  MOVFF  3B9,3C4
2FAE:  MOVFF  3BA,3C5
2FB2:  MOVFF  3B9,3C6
2FB6:  MOVFF  3BC,3C7
2FBA:  MOVFF  3BE,3C8
2FBE:  RCALL  2DDC
....................       glcd_line(x2, y1, x2, y2, color); 
2FC0:  MOVFF  3BB,3C4
2FC4:  MOVFF  3BA,3C5
2FC8:  MOVFF  3BB,3C6
2FCC:  MOVFF  3BC,3C7
2FD0:  MOVFF  3BE,3C8
2FD4:  RCALL  2DDC
2FD6:  MOVLB  3
....................    } 
.................... } 
2FD8:  MOVLB  0
2FDA:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
388E:  MOVLB  3
3890:  CLRF   xA8
....................    b = radius; 
3892:  MOVFF  3A5,3A9
....................    P = 1 - radius; 
3896:  MOVLW  01
3898:  BSF    FD8.0
389A:  SUBFWB xA5,W
389C:  MOVWF  xAA
....................  
....................    do 
....................    { 
....................       if(fill) 
389E:  MOVF   xA6,F
38A0:  BZ    396C
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
38A2:  MOVF   xA8,W
38A4:  SUBWF  xA3,W
38A6:  MOVWF  xAB
38A8:  MOVF   xA9,W
38AA:  ADDWF  xA4,W
38AC:  MOVWF  xAC
38AE:  MOVF   xA8,W
38B0:  ADDWF  xA3,W
38B2:  MOVWF  xAD
38B4:  MOVF   xA9,W
38B6:  ADDWF  xA4,W
38B8:  MOVWF  xAE
38BA:  MOVFF  3AB,3C4
38BE:  MOVFF  3AC,3C5
38C2:  MOVFF  3AD,3C6
38C6:  MOVWF  xC7
38C8:  MOVFF  3A7,3C8
38CC:  MOVLB  0
38CE:  CALL   2DDC
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
38D2:  MOVLB  3
38D4:  MOVF   xA8,W
38D6:  SUBWF  xA3,W
38D8:  MOVWF  xAB
38DA:  MOVF   xA9,W
38DC:  SUBWF  xA4,W
38DE:  MOVWF  xAC
38E0:  MOVF   xA8,W
38E2:  ADDWF  xA3,W
38E4:  MOVWF  xAD
38E6:  MOVF   xA9,W
38E8:  SUBWF  xA4,W
38EA:  MOVWF  xAE
38EC:  MOVFF  3AB,3C4
38F0:  MOVFF  3AC,3C5
38F4:  MOVFF  3AD,3C6
38F8:  MOVWF  xC7
38FA:  MOVFF  3A7,3C8
38FE:  MOVLB  0
3900:  CALL   2DDC
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
3904:  MOVLB  3
3906:  MOVF   xA9,W
3908:  SUBWF  xA3,W
390A:  MOVWF  xAB
390C:  MOVF   xA8,W
390E:  ADDWF  xA4,W
3910:  MOVWF  xAC
3912:  MOVF   xA9,W
3914:  ADDWF  xA3,W
3916:  MOVWF  xAD
3918:  MOVF   xA8,W
391A:  ADDWF  xA4,W
391C:  MOVWF  xAE
391E:  MOVFF  3AB,3C4
3922:  MOVFF  3AC,3C5
3926:  MOVFF  3AD,3C6
392A:  MOVWF  xC7
392C:  MOVFF  3A7,3C8
3930:  MOVLB  0
3932:  CALL   2DDC
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
3936:  MOVLB  3
3938:  MOVF   xA9,W
393A:  SUBWF  xA3,W
393C:  MOVWF  xAB
393E:  MOVF   xA8,W
3940:  SUBWF  xA4,W
3942:  MOVWF  xAC
3944:  MOVF   xA9,W
3946:  ADDWF  xA3,W
3948:  MOVWF  xAD
394A:  MOVF   xA8,W
394C:  SUBWF  xA4,W
394E:  MOVWF  xAE
3950:  MOVFF  3AB,3C4
3954:  MOVFF  3AC,3C5
3958:  MOVFF  3AD,3C6
395C:  MOVWF  xC7
395E:  MOVFF  3A7,3C8
3962:  MOVLB  0
3964:  CALL   2DDC
....................       } 
....................       else 
3968:  BRA    3A5A
396A:  MOVLB  3
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
396C:  MOVF   xA3,W
396E:  ADDWF  xA8,W
3970:  MOVWF  xAB
3972:  MOVF   xA4,W
3974:  ADDWF  xA9,W
3976:  MOVWF  xAC
3978:  MOVFF  3AB,3D4
397C:  MOVWF  xD5
397E:  MOVFF  3A7,3D6
3982:  MOVLB  0
3984:  CALL   27BA
....................          glcd_pixel(b+x, a+y, color); 
3988:  MOVLB  3
398A:  MOVF   xA3,W
398C:  ADDWF  xA9,W
398E:  MOVWF  xAB
3990:  MOVF   xA4,W
3992:  ADDWF  xA8,W
3994:  MOVWF  xAC
3996:  MOVFF  3AB,3D4
399A:  MOVWF  xD5
399C:  MOVFF  3A7,3D6
39A0:  MOVLB  0
39A2:  CALL   27BA
....................          glcd_pixel(x-a, b+y, color); 
39A6:  MOVLB  3
39A8:  MOVF   xA8,W
39AA:  SUBWF  xA3,W
39AC:  MOVWF  xAB
39AE:  MOVF   xA4,W
39B0:  ADDWF  xA9,W
39B2:  MOVWF  xAC
39B4:  MOVFF  3AB,3D4
39B8:  MOVWF  xD5
39BA:  MOVFF  3A7,3D6
39BE:  MOVLB  0
39C0:  CALL   27BA
....................          glcd_pixel(x-b, a+y, color); 
39C4:  MOVLB  3
39C6:  MOVF   xA9,W
39C8:  SUBWF  xA3,W
39CA:  MOVWF  xAB
39CC:  MOVF   xA4,W
39CE:  ADDWF  xA8,W
39D0:  MOVWF  xAC
39D2:  MOVFF  3AB,3D4
39D6:  MOVWF  xD5
39D8:  MOVFF  3A7,3D6
39DC:  MOVLB  0
39DE:  CALL   27BA
....................          glcd_pixel(b+x, y-a, color); 
39E2:  MOVLB  3
39E4:  MOVF   xA3,W
39E6:  ADDWF  xA9,W
39E8:  MOVWF  xAB
39EA:  MOVF   xA8,W
39EC:  SUBWF  xA4,W
39EE:  MOVWF  xAC
39F0:  MOVFF  3AB,3D4
39F4:  MOVWF  xD5
39F6:  MOVFF  3A7,3D6
39FA:  MOVLB  0
39FC:  CALL   27BA
....................          glcd_pixel(a+x, y-b, color); 
3A00:  MOVLB  3
3A02:  MOVF   xA3,W
3A04:  ADDWF  xA8,W
3A06:  MOVWF  xAB
3A08:  MOVF   xA9,W
3A0A:  SUBWF  xA4,W
3A0C:  MOVWF  xAC
3A0E:  MOVFF  3AB,3D4
3A12:  MOVWF  xD5
3A14:  MOVFF  3A7,3D6
3A18:  MOVLB  0
3A1A:  CALL   27BA
....................          glcd_pixel(x-a, y-b, color); 
3A1E:  MOVLB  3
3A20:  MOVF   xA8,W
3A22:  SUBWF  xA3,W
3A24:  MOVWF  xAB
3A26:  MOVF   xA9,W
3A28:  SUBWF  xA4,W
3A2A:  MOVWF  xAC
3A2C:  MOVFF  3AB,3D4
3A30:  MOVWF  xD5
3A32:  MOVFF  3A7,3D6
3A36:  MOVLB  0
3A38:  CALL   27BA
....................          glcd_pixel(x-b, y-a, color); 
3A3C:  MOVLB  3
3A3E:  MOVF   xA9,W
3A40:  SUBWF  xA3,W
3A42:  MOVWF  xAB
3A44:  MOVF   xA8,W
3A46:  SUBWF  xA4,W
3A48:  MOVWF  xAC
3A4A:  MOVFF  3AB,3D4
3A4E:  MOVWF  xD5
3A50:  MOVFF  3A7,3D6
3A54:  MOVLB  0
3A56:  CALL   27BA
....................       } 
....................  
....................       if(P < 0) 
3A5A:  MOVLB  3
3A5C:  BTFSC  xAA.7
3A5E:  BRA    3A62
3A60:  BRA    3A7E
....................          P += 3 + 2 * a++; 
3A62:  MOVF   xA8,W
3A64:  INCF   xA8,F
3A66:  MOVWF  xAB
3A68:  MOVLW  02
3A6A:  MOVWF  xAC
3A6C:  MOVFF  3AB,3AD
3A70:  MOVLB  0
3A72:  RCALL  3840
3A74:  MOVF   01,W
3A76:  ADDLW  03
3A78:  MOVLB  3
3A7A:  ADDWF  xAA,F
....................       else 
3A7C:  BRA    3AA0
....................          P += 5 + 2 * (a++ - b--); 
3A7E:  MOVF   xA8,W
3A80:  INCF   xA8,F
3A82:  MOVWF  xAB
3A84:  MOVF   xA9,W
3A86:  DECF   xA9,F
3A88:  SUBWF  xAB,W
3A8A:  MOVWF  xAB
3A8C:  MOVLW  02
3A8E:  MOVWF  xAC
3A90:  MOVFF  3AB,3AD
3A94:  MOVLB  0
3A96:  RCALL  3840
3A98:  MOVF   01,W
3A9A:  ADDLW  05
3A9C:  MOVLB  3
3A9E:  ADDWF  xAA,F
....................     } while(a <= b); 
3AA0:  MOVF   xA8,W
3AA2:  XORLW  80
3AA4:  MOVWF  00
3AA6:  MOVF   xA9,W
3AA8:  XORLW  80
3AAA:  SUBWF  00,W
3AAC:  BTFSC  FD8.2
3AAE:  BRA    389E
3AB0:  BTFSS  FD8.0
3AB2:  BRA    389E
.................... } 
3AB4:  MOVLB  0
3AB6:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
289C:  MOVFF  3BA,03
28A0:  MOVLB  3
28A2:  MOVFF  3B9,FE9
28A6:  MOVFF  3BA,FEA
28AA:  MOVF   FEF,F
28AC:  BTFSC  FD8.2
28AE:  BRA    2A50
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
28B0:  MOVFF  3BA,03
28B4:  MOVFF  3B9,FE9
28B8:  MOVFF  3BA,FEA
28BC:  MOVF   FEF,W
28BE:  SUBLW  52
28C0:  BNC   2910
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
28C2:  MOVFF  3BA,03
28C6:  MOVFF  3B9,FE9
28CA:  MOVFF  3BA,FEA
28CE:  MOVLW  20
28D0:  SUBWF  FEF,W
28D2:  MULLW  05
28D4:  MOVF   FF3,W
28D6:  CLRF   03
28D8:  MOVWF  xC6
28DA:  MOVLW  03
28DC:  MOVWF  FEA
28DE:  MOVLW  C1
28E0:  MOVWF  FE9
28E2:  CLRF   xCA
28E4:  MOVFF  3C6,3C9
28E8:  MOVFF  FF2,3C7
28EC:  BCF    FF2.7
28EE:  MOVLW  05
28F0:  MOVWF  01
28F2:  CLRF   FF7
28F4:  MOVF   xC6,W
28F6:  MOVLB  0
28F8:  CALL   00A2
28FC:  TBLRD*-
28FE:  TBLRD*+
2900:  MOVFF  FF5,FEE
2904:  DECFSZ 01,F
2906:  BRA    28FE
2908:  MOVLB  3
290A:  BTFSC  xC7.7
290C:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
290E:  BRA    297A
2910:  MOVFF  3BA,03
2914:  MOVFF  3B9,FE9
2918:  MOVFF  3BA,FEA
291C:  MOVF   FEF,W
291E:  SUBLW  7E
2920:  BNC   2970
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
2922:  MOVFF  3BA,03
2926:  MOVFF  3B9,FE9
292A:  MOVFF  3BA,FEA
292E:  MOVLW  53
2930:  SUBWF  FEF,W
2932:  MULLW  05
2934:  MOVF   FF3,W
2936:  CLRF   03
2938:  MOVWF  xC6
293A:  MOVLW  03
293C:  MOVWF  FEA
293E:  MOVLW  C1
2940:  MOVWF  FE9
2942:  CLRF   xCA
2944:  MOVFF  3C6,3C9
2948:  MOVFF  FF2,3C7
294C:  BCF    FF2.7
294E:  MOVLW  05
2950:  MOVWF  01
2952:  CLRF   FF7
2954:  MOVF   xC6,W
2956:  MOVLB  0
2958:  CALL   01BC
295C:  TBLRD*-
295E:  TBLRD*+
2960:  MOVFF  FF5,FEE
2964:  DECFSZ 01,F
2966:  BRA    295E
2968:  MOVLB  3
296A:  BTFSC  xC7.7
296C:  BSF    FF2.7
....................       else 
296E:  BRA    297A
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
2970:  CLRF   xC1
2972:  CLRF   xC2
2974:  CLRF   xC3
2976:  CLRF   xC4
2978:  CLRF   xC5
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
297A:  MOVFF  3BA,03
297E:  MOVF   xB9,W
2980:  MOVWF  FE9
2982:  MOVFF  03,FEA
2986:  MOVF   FEF,W
2988:  XORLW  0A
298A:  MOVLB  0
298C:  BZ    2994
298E:  XORLW  07
2990:  BZ    29A4
2992:  BRA    29AA
....................          case '\n': 
....................             y += 7*size + 1; 
2994:  MOVLB  3
2996:  MOVF   xBB,W
2998:  MULLW  07
299A:  MOVF   FF3,W
299C:  ADDLW  01
299E:  ADDWF  xB8,F
....................             continue; 
29A0:  BRA    2A42
29A2:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
29A4:  MOVLB  3
29A6:  CLRF   xB7
....................             continue; 
29A8:  BRA    2A42
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
29AA:  MOVLB  3
29AC:  MOVF   xBB,W
29AE:  MULLW  05
29B0:  MOVF   FF3,W
29B2:  ADDWF  xB7,W
29B4:  SUBLW  7F
29B6:  BC    29C4
....................       { 
....................          x = 0;                           // Set x at far left position 
29B8:  CLRF   xB7
....................          y += 7*size + 1;                 // Set y at next position down 
29BA:  MOVF   xBB,W
29BC:  MULLW  07
29BE:  MOVF   FF3,W
29C0:  ADDLW  01
29C2:  ADDWF  xB8,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
29C4:  CLRF   xBD
29C6:  MOVF   xBD,W
29C8:  SUBLW  04
29CA:  BNC   2A42
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
29CC:  CLRF   xBE
29CE:  MOVF   xBE,W
29D0:  SUBLW  06
29D2:  BNC   2A3A
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
29D4:  CLRF   03
29D6:  MOVF   xBD,W
29D8:  ADDLW  C1
29DA:  MOVWF  FE9
29DC:  MOVLW  03
29DE:  ADDWFC 03,W
29E0:  MOVWF  FEA
29E2:  MOVFF  FEF,3C6
29E6:  MOVFF  3C6,00
29EA:  MOVF   xBE,W
29EC:  MOVWF  01
29EE:  BZ    29F8
29F0:  BCF    FD8.0
29F2:  RRCF   00,F
29F4:  DECFSZ 01,F
29F6:  BRA    29F0
29F8:  BTFSS  00.0
29FA:  BRA    2A36
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
29FC:  CLRF   xBF
29FE:  MOVF   xBB,W
2A00:  SUBWF  xBF,W
2A02:  BC    2A36
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
2A04:  CLRF   xC0
2A06:  MOVF   xBB,W
2A08:  SUBWF  xC0,W
2A0A:  BC    2A32
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
2A0C:  MOVF   xC0,W
2A0E:  ADDWF  xB7,W
2A10:  MOVWF  xC6
2A12:  MOVF   xBE,W
2A14:  MULWF  xBB
2A16:  MOVF   FF3,W
2A18:  ADDWF  xB8,W
2A1A:  ADDWF  xBF,W
2A1C:  MOVWF  xC7
2A1E:  MOVFF  3C6,3D4
2A22:  MOVWF  xD5
2A24:  MOVFF  3BC,3D6
2A28:  MOVLB  0
2A2A:  RCALL  27BA
....................                   } 
2A2C:  MOVLB  3
2A2E:  INCF   xC0,F
2A30:  BRA    2A06
....................                } 
2A32:  INCF   xBF,F
2A34:  BRA    29FE
....................             } 
....................          } 
2A36:  INCF   xBE,F
2A38:  BRA    29CE
....................       } 
2A3A:  INCF   xBD,F
2A3C:  MOVF   xBB,W
2A3E:  ADDWF  xB7,F
2A40:  BRA    29C6
....................    } 
2A42:  INCF   xB9,F
2A44:  BTFSC  FD8.2
2A46:  INCF   xBA,F
2A48:  INCF   xB7,F
2A4A:  MOVLB  0
2A4C:  BRA    289C
2A4E:  MOVLB  3
.................... } 
2A50:  MOVLB  0
2A52:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A1) 
.................... #define   DOWN          input(PIN_A2) 
.................... #define   RIGHT         input(PIN_A3) 
.................... #define   LEFT          input(PIN_A5) 
.................... #define   AL1           input(PIN_E0) 
.................... //#define   AL2           input(PIN_A6) 
....................  
.................... // Definición de otros puertos 
.................... #define   Camara_OUT_on     output_bit(PIN_C0,1) 
.................... #define   Camara_OUT_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia_off   output_bit(PIN_C1,0) 
.................... #define   Camara_IN_on      output_bit(PIN_C2,1) 
.................... #define   Camara_IN_off     output_bit(PIN_C2,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
3AC0:  CLRF   03
3AC2:  MOVLB  3
3AC4:  MOVF   xA3,W
3AC6:  ADDLW  70
3AC8:  MOVWF  FE9
3ACA:  MOVLW  0F
3ACC:  ADDWFC 03,W
3ACE:  MOVWF  FEA
3AD0:  MOVF   FEF,F
3AD2:  BZ    3AEE
3AD4:  MOVF   xA3,W
3AD6:  MULLW  08
3AD8:  MOVF   FF3,W
3ADA:  CLRF   xA5
3ADC:  MOVWF  xA4
3ADE:  MOVWF  FE9
3AE0:  MOVLW  04
3AE2:  ADDWF  xA5,W
3AE4:  MOVWF  FEA
3AE6:  MOVFF  FEF,3A4
3AEA:  BTFSS  xA4.7
3AEC:  BRA    3AF2
3AEE:  MOVLW  00
3AF0:  BRA    3AF4
3AF2:  MOVLW  01
3AF4:  MOVWF  01
.................... } 
3AF6:  MOVLB  0
3AF8:  GOTO   6480 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
206E:  CLRF   03
2070:  MOVLB  3
2072:  MOVF   xE5,W
2074:  ADDLW  70
2076:  MOVWF  FE9
2078:  MOVLW  0F
207A:  ADDWFC 03,W
207C:  MOVWF  FEA
207E:  MOVF   FEF,F
2080:  BZ    20A6
2082:  MOVF   xE5,W
2084:  MULLW  08
2086:  MOVF   FF3,W
2088:  CLRF   xE7
208A:  MOVWF  xE6
208C:  MOVLW  04
208E:  ADDWF  xE6,F
2090:  MOVLW  00
2092:  ADDWFC xE7,F
2094:  MOVFF  3E6,FE9
2098:  MOVLW  04
209A:  ADDWF  xE7,W
209C:  MOVWF  FEA
209E:  MOVFF  FEF,3E6
20A2:  BTFSS  xE6.7
20A4:  BRA    20AA
20A6:  MOVLW  00
20A8:  BRA    20AC
20AA:  MOVLW  01
20AC:  MOVWF  01
.................... } 
20AE:  MOVLB  0
20B0:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
2590:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
2592:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
2594:  MOVLW  08
2596:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
2598:  MOVF   F94,W
259A:  IORLW  30
259C:  MOVLB  3
259E:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
25A0:  CLRF   1C
25A2:  CLRF   16
25A4:  BTFSC  FF2.7
25A6:  BSF    16.7
25A8:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
25AA:  MOVLB  0
25AC:  CALL   1966
25B0:  BTFSC  16.7
25B2:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
25B4:  GOTO   25BA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
25BE:  CLRF   16
25C0:  BTFSC  FF2.7
25C2:  BSF    16.7
25C4:  BCF    FF2.7
....................    usb_token_reset(); 
25C6:  CALL   1966
25CA:  BTFSC  16.7
25CC:  BSF    FF2.7
....................    UCON = 0; 
25CE:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
25D0:  MOVLW  14
25D2:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
25D4:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
25D6:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
25D8:  MOVLW  01
25DA:  MOVWF  1C
.................... } 
25DC:  GOTO   25E6 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
25B8:  BRA    2590
.................... } 
25BA:  GOTO   2604 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
25E0:  BTFSC  F6D.3
25E2:  BRA    25E6
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
25E4:  BRA    25BE
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
25E6:  DECFSZ 1C,W
25E8:  BRA    2600
25EA:  BTFSC  F6D.5
25EC:  BRA    2600
....................    { 
....................       UIR=0; 
25EE:  CLRF   F68
....................       UIE=0; 
25F0:  CLRF   F69
....................       enable_interrupts(INT_USB); 
25F2:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
25F4:  MOVLW  C0
25F6:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
25F8:  MOVLW  11
25FA:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
25FC:  MOVLW  02
25FE:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
2600:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
2602:  BRA    25B8
....................  
....................    do  
....................    { 
....................       usb_task(); 
2604:  RCALL  25E0
....................    } while (usb_state != USB_STATE_POWERED); 
2606:  MOVF   1C,W
2608:  SUBLW  02
260A:  BNZ   2604
.................... } 
260C:  GOTO   4C8A (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
20B2:  MOVFF  3E0,3E5
20B6:  RCALL  206E
20B8:  MOVF   01,F
20BA:  BZ    2184
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
20BC:  MOVLB  3
20BE:  MOVF   xE0,W
20C0:  MULLW  08
20C2:  MOVF   FF3,W
20C4:  CLRF   xE6
20C6:  MOVWF  xE5
20C8:  MOVLW  04
20CA:  ADDWF  xE5,F
20CC:  MOVLW  00
20CE:  ADDWFC xE6,F
20D0:  MOVLW  01
20D2:  ADDWF  xE5,W
20D4:  MOVWF  01
20D6:  MOVLW  00
20D8:  ADDWFC xE6,W
20DA:  MOVWF  03
20DC:  MOVFF  01,FE9
20E0:  MOVLW  04
20E2:  ADDWF  03,W
20E4:  MOVWF  FEA
20E6:  MOVFF  3E1,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
20EA:  MOVF   xE3,W
20EC:  SUBLW  02
20EE:  BNZ   211E
....................       { 
....................          i = EP_BDxST_I(endpoint); 
20F0:  MOVF   xE0,W
20F2:  MULLW  08
20F4:  MOVF   FF3,W
20F6:  CLRF   xE6
20F8:  MOVWF  xE5
20FA:  MOVLW  04
20FC:  ADDWF  xE5,F
20FE:  MOVLW  00
2100:  ADDWFC xE6,F
2102:  MOVFF  3E5,FE9
2106:  MOVLW  04
2108:  ADDWF  xE6,W
210A:  MOVWF  FEA
210C:  MOVFF  FEF,3E4
....................          if (bit_test(i,6)) 
2110:  BTFSS  xE4.6
2112:  BRA    2118
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
2114:  CLRF   xE3
....................          else 
2116:  BRA    211C
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
2118:  MOVLW  01
211A:  MOVWF  xE3
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
211C:  BRA    2144
211E:  MOVF   xE3,W
2120:  SUBLW  04
2122:  BNZ   2144
....................       { 
....................          i = EP_BDxST_O(endpoint); 
2124:  MOVF   xE0,W
2126:  MULLW  08
2128:  MOVF   FF3,W
212A:  CLRF   xE6
212C:  MOVWF  FE9
212E:  MOVLW  04
2130:  ADDWF  xE6,W
2132:  MOVWF  FEA
2134:  MOVFF  FEF,3E4
....................          if (bit_test(i,6)) 
2138:  BTFSS  xE4.6
213A:  BRA    2142
....................             tgl = USB_DTS_DATA1; 
213C:  MOVLW  01
213E:  MOVWF  xE3
....................          else 
2140:  BRA    2144
....................             tgl = USB_DTS_DATA0; 
2142:  CLRF   xE3
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
2144:  DECFSZ xE3,W
2146:  BRA    214E
....................          i=0xC8;  //DATA1, UOWN 
2148:  MOVLW  C8
214A:  MOVWF  xE4
....................       else //if (tgl == USB_DTS_DATA0)  
214C:  BRA    2152
....................          i=0x88; //DATA0, UOWN 
214E:  MOVLW  88
2150:  MOVWF  xE4
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
2152:  BTFSC  xE2.0
2154:  BSF    xE4.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
2156:  BTFSC  xE2.1
2158:  BSF    xE4.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
215A:  MOVF   xE0,W
215C:  MULLW  08
215E:  MOVF   FF3,W
2160:  CLRF   xE6
2162:  MOVWF  xE5
2164:  MOVLW  04
2166:  ADDWF  xE5,F
2168:  MOVLW  00
216A:  ADDWFC xE6,F
216C:  MOVFF  3E5,FE9
2170:  MOVLW  04
2172:  ADDWF  xE6,W
2174:  MOVWF  FEA
2176:  MOVFF  3E4,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
217A:  MOVLW  01
217C:  MOVWF  01
217E:  BRA    218A
....................    } 
....................    else  
2180:  BRA    2182
2182:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
2184:  MOVLW  00
2186:  MOVWF  01
2188:  MOVLB  3
.................... } 
218A:  MOVLB  0
218C:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
3F3E:  CLRF   16
3F40:  BTFSC  FF2.7
3F42:  BSF    16.7
3F44:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
3F46:  MOVFF  3A3,3E5
3F4A:  CALL   206E
3F4E:  BTFSC  16.7
3F50:  BSF    FF2.7
3F52:  MOVF   01,F
3F54:  BZ    3FE6
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
3F56:  MOVLB  3
3F58:  MOVF   xA3,W
3F5A:  MULLW  08
3F5C:  MOVF   FF3,W
3F5E:  CLRF   xAC
3F60:  MOVWF  xAB
3F62:  MOVLW  04
3F64:  ADDWF  xAB,F
3F66:  MOVLW  00
3F68:  ADDWFC xAC,F
3F6A:  MOVLW  02
3F6C:  ADDWF  xAB,W
3F6E:  MOVWF  01
3F70:  MOVLW  00
3F72:  ADDWFC xAC,W
3F74:  MOVWF  03
3F76:  MOVFF  01,FE9
3F7A:  MOVLW  04
3F7C:  ADDWF  03,W
3F7E:  MOVWF  FEA
3F80:  MOVFF  FEC,03
3F84:  MOVF   FED,F
3F86:  MOVFF  FEF,3A9
3F8A:  MOVFF  03,3AA
....................       memcpy(buff_add, ptr, len);      
3F8E:  MOVFF  3AA,FEA
3F92:  MOVFF  3A9,FE9
3F96:  MOVFF  3A5,FE2
3F9A:  MOVFF  3A4,FE1
3F9E:  MOVFF  3A7,02
3FA2:  MOVFF  3A6,01
3FA6:  MOVF   01,F
3FA8:  BZ    3FAE
3FAA:  INCF   02,F
3FAC:  BRA    3FB2
3FAE:  MOVF   02,F
3FB0:  BZ    3FBE
3FB2:  MOVFF  FE6,FEE
3FB6:  DECFSZ 01,F
3FB8:  BRA    3FB2
3FBA:  DECFSZ 02,F
3FBC:  BRA    3FB2
3FBE:  CLRF   16
3FC0:  BTFSC  FF2.7
3FC2:  BSF    16.7
3FC4:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
3FC6:  MOVFF  3A3,3E0
3FCA:  MOVFF  3A7,3E2
3FCE:  MOVFF  3A6,3E1
3FD2:  MOVFF  3A8,3E3
3FD6:  MOVLB  0
3FD8:  CALL   20B2
3FDC:  BTFSC  16.7
3FDE:  BSF    FF2.7
3FE0:  MOVF   01,W
3FE2:  BRA    3FEA
....................    } 
....................    else  
3FE4:  BRA    3FE6
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
3FE6:  MOVLW  00
3FE8:  MOVWF  01
.................... } 
3FEA:  GOTO   6672 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
1FA4:  MOVLB  3
1FA6:  MOVF   xE0,W
1FA8:  MULLW  08
1FAA:  MOVF   FF3,W
1FAC:  CLRF   xE6
1FAE:  MOVWF  FE9
1FB0:  MOVLW  04
1FB2:  ADDWF  xE6,W
1FB4:  MOVWF  FEA
1FB6:  MOVFF  FEF,3E2
....................    if (tgl == USB_DTS_TOGGLE)  
1FBA:  MOVF   xE1,W
1FBC:  SUBLW  02
1FBE:  BNZ   1FCC
....................    { 
....................       if (bit_test(i,6)) 
1FC0:  BTFSS  xE2.6
1FC2:  BRA    1FC8
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
1FC4:  CLRF   xE1
....................       else 
1FC6:  BRA    1FCC
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
1FC8:  MOVLW  01
1FCA:  MOVWF  xE1
....................    } 
....................    if (tgl == USB_DTS_STALL)  
1FCC:  MOVF   xE1,W
1FCE:  SUBLW  03
1FD0:  BNZ   1FF8
....................    { 
....................       i = 0x84; 
1FD2:  MOVLW  84
1FD4:  MOVWF  xE2
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
1FD6:  MOVF   xE0,W
1FD8:  MULLW  08
1FDA:  MOVF   FF3,W
1FDC:  CLRF   xE6
1FDE:  MOVWF  xE5
1FE0:  MOVLW  04
1FE2:  ADDWF  xE5,F
1FE4:  MOVLW  00
1FE6:  ADDWFC xE6,F
1FE8:  MOVFF  3E5,FE9
1FEC:  MOVLW  04
1FEE:  ADDWF  xE6,W
1FF0:  MOVWF  FEA
1FF2:  MOVLW  84
1FF4:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
1FF6:  BRA    2006
1FF8:  DECFSZ xE1,W
1FFA:  BRA    2002
....................       i = 0xC8;  //DATA1, UOWN 
1FFC:  MOVLW  C8
1FFE:  MOVWF  xE2
....................    else //if (tgl == USB_DTS_DATA0)  
2000:  BRA    2006
....................       i = 0x88; //DATA0, UOWN 
2002:  MOVLW  88
2004:  MOVWF  xE2
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
2006:  BCF    FD8.0
2008:  RLCF   xE0,W
200A:  CLRF   03
200C:  MOVFF  FF2,3E5
2010:  BCF    FF2.7
2012:  MOVLB  0
2014:  CALL   174A
2018:  TBLRD*+
201A:  MOVFF  FF5,03
201E:  MOVLB  3
2020:  BTFSC  xE5.7
2022:  BSF    FF2.7
2024:  MOVWF  xE3
2026:  MOVFF  03,3E4
....................    EP_BDxCNT_O(endpoint) = len; 
202A:  MOVF   xE0,W
202C:  MULLW  08
202E:  MOVF   FF3,W
2030:  CLRF   xE6
2032:  MOVWF  xE5
2034:  MOVLW  01
2036:  ADDWF  xE5,W
2038:  MOVWF  01
203A:  MOVLW  00
203C:  ADDWFC xE6,W
203E:  MOVWF  03
2040:  MOVFF  01,FE9
2044:  MOVLW  04
2046:  ADDWF  03,W
2048:  MOVWF  FEA
204A:  MOVFF  3E3,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
204E:  BTFSC  xE4.0
2050:  BSF    xE2.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
2052:  BTFSC  xE4.1
2054:  BSF    xE2.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
2056:  MOVF   xE0,W
2058:  MULLW  08
205A:  MOVF   FF3,W
205C:  CLRF   xE6
205E:  MOVWF  FE9
2060:  MOVLW  04
2062:  ADDWF  xE6,W
2064:  MOVWF  FEA
2066:  MOVFF  3E2,FEF
.................... } 
206A:  MOVLB  0
206C:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
3AFC:  MOVLB  3
3AFE:  MOVF   xA8,W
3B00:  MULLW  08
3B02:  MOVF   FF3,W
3B04:  CLRF   xB3
3B06:  MOVWF  xB2
3B08:  MOVLW  02
3B0A:  ADDWF  xB2,W
3B0C:  MOVWF  01
3B0E:  MOVLW  00
3B10:  ADDWFC xB3,W
3B12:  MOVWF  03
3B14:  MOVFF  01,FE9
3B18:  MOVLW  04
3B1A:  ADDWF  03,W
3B1C:  MOVWF  FEA
3B1E:  MOVFF  FEC,03
3B22:  MOVF   FED,F
3B24:  MOVFF  FEF,3AD
3B28:  MOVFF  03,3AE
....................    i = EP_BDxCNT_O(endpoint); 
3B2C:  MOVF   xA8,W
3B2E:  MULLW  08
3B30:  MOVF   FF3,W
3B32:  CLRF   xB3
3B34:  MOVWF  xB2
3B36:  MOVLW  01
3B38:  ADDWF  xB2,W
3B3A:  MOVWF  01
3B3C:  MOVLW  00
3B3E:  ADDWFC xB3,W
3B40:  MOVWF  03
3B42:  MOVFF  01,FE9
3B46:  MOVLW  04
3B48:  ADDWF  03,W
3B4A:  MOVWF  FEA
3B4C:  MOVF   FEF,W
3B4E:  CLRF   03
3B50:  MOVWF  xB0
3B52:  MOVFF  03,3B1
....................    st = EP_BDxST_O(endpoint); 
3B56:  MOVF   xA8,W
3B58:  MULLW  08
3B5A:  MOVF   FF3,W
3B5C:  CLRF   xB3
3B5E:  MOVWF  FE9
3B60:  MOVLW  04
3B62:  ADDWF  xB3,W
3B64:  MOVWF  FEA
3B66:  MOVFF  FEF,3AF
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
3B6A:  BTFSC  xAF.0
3B6C:  BSF    xB1.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
3B6E:  BTFSC  xAF.1
3B70:  BSF    xB1.1
....................  
....................    if (i < max) {max = i;} 
3B72:  MOVF   xB1,W
3B74:  SUBWF  xAC,W
3B76:  BNC   3B88
3B78:  BNZ   3B80
3B7A:  MOVF   xAB,W
3B7C:  SUBWF  xB0,W
3B7E:  BC    3B88
3B80:  MOVFF  3B1,3AC
3B84:  MOVFF  3B0,3AB
....................     
....................    memcpy(ptr, al ,max); 
3B88:  MOVFF  3AA,FEA
3B8C:  MOVFF  3A9,FE9
3B90:  MOVFF  3AE,FE2
3B94:  MOVFF  3AD,FE1
3B98:  MOVFF  3AC,02
3B9C:  MOVFF  3AB,01
3BA0:  MOVF   01,F
3BA2:  BZ    3BA8
3BA4:  INCF   02,F
3BA6:  BRA    3BAC
3BA8:  MOVF   02,F
3BAA:  BZ    3BB8
3BAC:  MOVFF  FE6,FEE
3BB0:  DECFSZ 01,F
3BB2:  BRA    3BAC
3BB4:  DECFSZ 02,F
3BB6:  BRA    3BAC
....................  
....................    return(max); 
3BB8:  MOVFF  3AB,01
3BBC:  MOVFF  3AC,02
.................... } 
3BC0:  MOVLB  0
3BC2:  GOTO   3BDC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
3BC6:  MOVFF  3A3,3A8
3BCA:  MOVFF  3A5,3AA
3BCE:  MOVFF  3A4,3A9
3BD2:  MOVFF  3A7,3AC
3BD6:  MOVFF  3A6,3AB
3BDA:  BRA    3AFC
3BDC:  MOVFF  02,3A7
3BE0:  MOVFF  01,3A6
3BE4:  CLRF   16
3BE6:  BTFSC  FF2.7
3BE8:  BSF    16.7
3BEA:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
3BEC:  MOVFF  3A3,3E0
3BF0:  MOVLW  02
3BF2:  MOVLB  3
3BF4:  MOVWF  xE1
3BF6:  MOVLB  0
3BF8:  CALL   1FA4
3BFC:  BTFSC  16.7
3BFE:  BSF    FF2.7
....................  
....................    return(max); 
3C00:  MOVLB  3
3C02:  MOVFF  3A6,01
3C06:  MOVFF  3A7,02
.................... } 
3C0A:  MOVLB  0
3C0C:  GOTO   649C (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1E6A:  MOVLB  3
1E6C:  BCF    xE1.0
1E6E:  BTFSC  xE0.7
1E70:  BSF    xE1.0
....................    endpoint &= 0x7F; 
1E72:  BCF    xE0.7
....................     
....................    if (direction)  
1E74:  BTFSS  xE1.0
1E76:  BRA    1E9A
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
1E78:  MOVF   xE0,W
1E7A:  MULLW  08
1E7C:  MOVF   FF3,W
1E7E:  CLRF   xE3
1E80:  MOVWF  xE2
1E82:  MOVLW  04
1E84:  ADDWF  xE2,F
1E86:  MOVLW  00
1E88:  ADDWFC xE3,F
1E8A:  MOVFF  3E2,FE9
1E8E:  MOVLW  04
1E90:  ADDWF  xE3,W
1E92:  MOVWF  FEA
1E94:  MOVLW  84
1E96:  MOVWF  FEF
....................    } 
....................    else  
1E98:  BRA    1EAE
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
1E9A:  MOVF   xE0,W
1E9C:  MULLW  08
1E9E:  MOVF   FF3,W
1EA0:  CLRF   xE3
1EA2:  MOVWF  FE9
1EA4:  MOVLW  04
1EA6:  ADDWF  xE3,W
1EA8:  MOVWF  FEA
1EAA:  MOVLW  84
1EAC:  MOVWF  FEF
....................    } 
.................... } 
1EAE:  MOVLB  0
1EB0:  GOTO   1F42 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1E22:  MOVLB  3
1E24:  BCF    xE1.0
1E26:  BTFSC  xE0.7
1E28:  BSF    xE1.0
....................    endpoint &= 0x7F; 
1E2A:  BCF    xE0.7
....................     
....................    if (direction)  
1E2C:  BTFSS  xE1.0
1E2E:  BRA    1E52
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
1E30:  MOVF   xE0,W
1E32:  MULLW  08
1E34:  MOVF   FF3,W
1E36:  CLRF   xE3
1E38:  MOVWF  xE2
1E3A:  MOVLW  04
1E3C:  ADDWF  xE2,F
1E3E:  MOVLW  00
1E40:  ADDWFC xE3,F
1E42:  MOVFF  3E2,FE9
1E46:  MOVLW  04
1E48:  ADDWF  xE3,W
1E4A:  MOVWF  FEA
1E4C:  MOVLW  88
1E4E:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
1E50:  BRA    1E64
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
1E52:  MOVF   xE0,W
1E54:  MULLW  08
1E56:  MOVF   FF3,W
1E58:  CLRF   xE3
1E5A:  MOVWF  FE9
1E5C:  MOVLW  04
1E5E:  ADDWF  xE3,W
1E60:  MOVWF  FEA
1E62:  CLRF   FEF
....................    } 
.................... } 
1E64:  MOVLB  0
1E66:  GOTO   1F32 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1EB4:  MOVLB  3
1EB6:  BCF    xE1.0
1EB8:  BTFSC  xE0.7
1EBA:  BSF    xE1.0
....................    endpoint &= 0x7F; 
1EBC:  BCF    xE0.7
....................     
....................    if (direction)  
1EBE:  BTFSS  xE1.0
1EC0:  BRA    1EE4
....................    { 
....................       st=EP_BDxST_I(endpoint); 
1EC2:  MOVF   xE0,W
1EC4:  MULLW  08
1EC6:  MOVF   FF3,W
1EC8:  CLRF   xE4
1ECA:  MOVWF  xE3
1ECC:  MOVLW  04
1ECE:  ADDWF  xE3,F
1ED0:  MOVLW  00
1ED2:  ADDWFC xE4,F
1ED4:  MOVFF  3E3,FE9
1ED8:  MOVLW  04
1EDA:  ADDWF  xE4,W
1EDC:  MOVWF  FEA
1EDE:  MOVFF  FEF,3E2
....................    } 
....................    else  
1EE2:  BRA    1EF8
....................    { 
....................       st=EP_BDxST_O(endpoint); 
1EE4:  MOVF   xE0,W
1EE6:  MULLW  08
1EE8:  MOVF   FF3,W
1EEA:  CLRF   xE4
1EEC:  MOVWF  FE9
1EEE:  MOVLW  04
1EF0:  ADDWF  xE4,W
1EF2:  MOVWF  FEA
1EF4:  MOVFF  FEF,3E2
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
1EF8:  BTFSS  xE2.7
1EFA:  BRA    1F00
1EFC:  BTFSC  xE2.2
1EFE:  BRA    1F04
1F00:  MOVLW  00
1F02:  BRA    1F06
1F04:  MOVLW  01
1F06:  MOVWF  01
.................... } 
1F08:  MOVLB  0
1F0A:  GOTO   1F5A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
2198:  MOVFF  3E1,F6E
....................     
....................    if (address)  
219C:  MOVLB  3
219E:  MOVF   xE1,F
21A0:  BZ    21A8
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
21A2:  MOVLW  04
21A4:  MOVWF  1C
....................    } 
....................    else  
21A6:  BRA    21AC
....................    { 
....................       usb_state = USB_STATE_POWERED; 
21A8:  MOVLW  02
21AA:  MOVWF  1C
....................    } 
.................... } 
21AC:  MOVLB  0
21AE:  GOTO   21BC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
1AEE:  MOVLB  3
1AF0:  MOVF   xE0,F
1AF2:  BNZ   1B00
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
1AF4:  MOVLW  04
1AF6:  MOVWF  1C
....................       usb_disable_endpoints(); 
1AF8:  MOVLB  0
1AFA:  RCALL  1948
....................    } 
....................    else  
1AFC:  BRA    1CBA
1AFE:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
1B00:  MOVLW  05
1B02:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
1B04:  MOVLW  04
1B06:  MOVWF  xE3
1B08:  MOVLW  90
1B0A:  MOVWF  xE2
....................       for (en=1; en<USB_NUM_UEP; en++)  
1B0C:  MOVLW  01
1B0E:  MOVWF  xE1
1B10:  MOVF   xE1,W
1B12:  SUBLW  0F
1B14:  BTFSS  FD8.0
1B16:  BRA    1CBA
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
1B18:  MOVFF  3E1,3E9
1B1C:  MOVLB  0
1B1E:  RCALL  18F4
....................          new_uep = 0; 
1B20:  MOVLB  3
1B22:  CLRF   xE4
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
1B24:  CLRF   03
1B26:  MOVF   xE1,W
1B28:  MOVFF  FF2,3E8
1B2C:  BCF    FF2.7
1B2E:  MOVLB  0
1B30:  RCALL  172A
1B32:  MOVLB  3
1B34:  BTFSC  xE8.7
1B36:  BSF    FF2.7
1B38:  SUBLW  FF
1B3A:  BZ    1BF2
....................          { 
....................             new_uep = 0x04; 
1B3C:  MOVLW  04
1B3E:  MOVWF  xE4
....................             len = usb_ep_rx_size[en]; 
1B40:  BCF    FD8.0
1B42:  RLCF   xE1,W
1B44:  CLRF   03
1B46:  MOVFF  FF2,3E8
1B4A:  BCF    FF2.7
1B4C:  MOVLB  0
1B4E:  RCALL  174A
1B50:  TBLRD*+
1B52:  MOVFF  FF5,03
1B56:  MOVLB  3
1B58:  BTFSC  xE8.7
1B5A:  BSF    FF2.7
1B5C:  MOVWF  xE5
1B5E:  MOVFF  03,3E6
....................             EP_BDxCNT_O(en) = len; 
1B62:  MOVF   xE1,W
1B64:  MULLW  08
1B66:  MOVF   FF3,W
1B68:  CLRF   xE9
1B6A:  MOVWF  xE8
1B6C:  MOVLW  01
1B6E:  ADDWF  xE8,W
1B70:  MOVWF  01
1B72:  MOVLW  00
1B74:  ADDWFC xE9,W
1B76:  MOVWF  03
1B78:  MOVFF  01,FE9
1B7C:  MOVLW  04
1B7E:  ADDWF  03,W
1B80:  MOVWF  FEA
1B82:  MOVFF  3E5,FEF
....................             EP_BDxADR_O(en) = addy; 
1B86:  MOVF   xE1,W
1B88:  MULLW  08
1B8A:  MOVF   FF3,W
1B8C:  CLRF   xE9
1B8E:  MOVWF  xE8
1B90:  MOVLW  02
1B92:  ADDWF  xE8,W
1B94:  MOVWF  01
1B96:  MOVLW  00
1B98:  ADDWFC xE9,W
1B9A:  MOVWF  03
1B9C:  MOVFF  01,FE9
1BA0:  MOVLW  04
1BA2:  ADDWF  03,W
1BA4:  MOVWF  FEA
1BA6:  MOVFF  3E3,FEC
1BAA:  MOVF   FED,F
1BAC:  MOVFF  3E2,FEF
....................             addy += usb_ep_rx_size[en]; 
1BB0:  BCF    FD8.0
1BB2:  RLCF   xE1,W
1BB4:  CLRF   03
1BB6:  MOVFF  FF2,3E8
1BBA:  BCF    FF2.7
1BBC:  MOVLB  0
1BBE:  RCALL  174A
1BC0:  TBLRD*+
1BC2:  MOVFF  FF5,03
1BC6:  MOVLB  3
1BC8:  BTFSC  xE8.7
1BCA:  BSF    FF2.7
1BCC:  ADDWF  xE2,F
1BCE:  MOVF   03,W
1BD0:  ADDWFC xE3,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
1BD2:  MOVLW  88
1BD4:  MOVWF  xE7
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
1BD6:  BTFSC  xE6.0
1BD8:  BSF    xE7.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
1BDA:  BTFSC  xE6.1
1BDC:  BSF    xE7.1
....................             EP_BDxST_O(en) = i; 
1BDE:  MOVF   xE1,W
1BE0:  MULLW  08
1BE2:  MOVF   FF3,W
1BE4:  CLRF   xE9
1BE6:  MOVWF  FE9
1BE8:  MOVLW  04
1BEA:  ADDWF  xE9,W
1BEC:  MOVWF  FEA
1BEE:  MOVFF  3E7,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
1BF2:  CLRF   03
1BF4:  MOVF   xE1,W
1BF6:  MOVFF  FF2,3E8
1BFA:  BCF    FF2.7
1BFC:  MOVLB  0
1BFE:  RCALL  172A
1C00:  MOVLB  3
1C02:  BTFSC  xE8.7
1C04:  BSF    FF2.7
1C06:  SUBLW  FF
1C08:  BZ    1C80
....................          { 
....................             new_uep |= 0x02; 
1C0A:  BSF    xE4.1
....................             EP_BDxADR_I(en) = addy; 
1C0C:  MOVF   xE1,W
1C0E:  MULLW  08
1C10:  MOVF   FF3,W
1C12:  CLRF   xE9
1C14:  MOVWF  xE8
1C16:  MOVLW  04
1C18:  ADDWF  xE8,F
1C1A:  MOVLW  00
1C1C:  ADDWFC xE9,F
1C1E:  MOVLW  02
1C20:  ADDWF  xE8,W
1C22:  MOVWF  01
1C24:  MOVLW  00
1C26:  ADDWFC xE9,W
1C28:  MOVWF  03
1C2A:  MOVFF  01,FE9
1C2E:  MOVLW  04
1C30:  ADDWF  03,W
1C32:  MOVWF  FEA
1C34:  MOVFF  3E3,FEC
1C38:  MOVF   FED,F
1C3A:  MOVFF  3E2,FEF
....................             addy += usb_ep_tx_size[en]; 
1C3E:  BCF    FD8.0
1C40:  RLCF   xE1,W
1C42:  CLRF   03
1C44:  MOVFF  FF2,3E8
1C48:  BCF    FF2.7
1C4A:  MOVLB  0
1C4C:  RCALL  174A
1C4E:  TBLRD*+
1C50:  MOVFF  FF5,03
1C54:  MOVLB  3
1C56:  BTFSC  xE8.7
1C58:  BSF    FF2.7
1C5A:  ADDWF  xE2,F
1C5C:  MOVF   03,W
1C5E:  ADDWFC xE3,F
....................             EP_BDxST_I(en) = 0x40; 
1C60:  MOVF   xE1,W
1C62:  MULLW  08
1C64:  MOVF   FF3,W
1C66:  CLRF   xE9
1C68:  MOVWF  xE8
1C6A:  MOVLW  04
1C6C:  ADDWF  xE8,F
1C6E:  MOVLW  00
1C70:  ADDWFC xE9,F
1C72:  MOVFF  3E8,FE9
1C76:  MOVLW  04
1C78:  ADDWF  xE9,W
1C7A:  MOVWF  FEA
1C7C:  MOVLW  40
1C7E:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
1C80:  MOVF   xE4,W
1C82:  SUBLW  06
1C84:  BNZ   1C8A
1C86:  MOVLW  0E
1C88:  MOVWF  xE4
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
1C8A:  CLRF   03
1C8C:  MOVF   xE1,W
1C8E:  MOVFF  FF2,3E8
1C92:  BCF    FF2.7
1C94:  MOVLB  0
1C96:  RCALL  172A
1C98:  MOVLB  3
1C9A:  BTFSC  xE8.7
1C9C:  BSF    FF2.7
1C9E:  SUBLW  01
1CA0:  BTFSS  FD8.2
1CA2:  BSF    xE4.4
....................           
....................          UEP(en) = new_uep; 
1CA4:  CLRF   03
1CA6:  MOVF   xE1,W
1CA8:  ADDLW  70
1CAA:  MOVWF  FE9
1CAC:  MOVLW  0F
1CAE:  ADDWFC 03,W
1CB0:  MOVWF  FEA
1CB2:  MOVFF  3E4,FEF
....................       } 
1CB6:  INCF   xE1,F
1CB8:  BRA    1B10
1CBA:  MOVLB  0
....................    } 
.................... } 
1CBC:  GOTO   1D64 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
18F4:  CLRF   03
18F6:  MOVLB  3
18F8:  MOVF   xE9,W
18FA:  ADDLW  70
18FC:  MOVWF  FE9
18FE:  MOVLW  0F
1900:  ADDWFC 03,W
1902:  MOVWF  FEA
1904:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
1906:  MOVFF  3E9,3EA
190A:  MOVLB  0
190C:  RCALL  1890
190E:  MOVF   01,F
1910:  BZ    1944
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
1912:  MOVLB  3
1914:  MOVF   xE9,W
1916:  MULLW  08
1918:  MOVF   FF3,W
191A:  CLRF   xEB
191C:  MOVWF  FE9
191E:  MOVLW  04
1920:  ADDWF  xEB,W
1922:  MOVWF  FEA
1924:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
1926:  MOVF   xE9,W
1928:  MULLW  08
192A:  MOVF   FF3,W
192C:  CLRF   xEB
192E:  MOVWF  xEA
1930:  MOVLW  04
1932:  ADDWF  xEA,F
1934:  MOVLW  00
1936:  ADDWFC xEB,F
1938:  MOVFF  3EA,FE9
193C:  MOVLW  04
193E:  ADDWF  xEB,W
1940:  MOVWF  FEA
1942:  CLRF   FEF
1944:  MOVLB  0
....................    } 
.................... } 
1946:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
1948:  MOVLW  01
194A:  MOVLB  3
194C:  MOVWF  xE8
194E:  MOVF   xE8,W
1950:  SUBLW  0F
1952:  BNC   1962
....................       usb_disable_endpoint(i); 
1954:  MOVFF  3E8,3E9
1958:  MOVLB  0
195A:  RCALL  18F4
195C:  MOVLB  3
195E:  INCF   xE8,F
1960:  BRA    194E
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
1962:  MOVLB  0
1964:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
235C:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
235E:  MOVF   1C,F
2360:  BNZ   2364
2362:  BRA    23E0
....................    if (UIR)  
2364:  MOVF   F68,F
2366:  BZ    23E0
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
2368:  BTFSS  F68.2
236A:  BRA    2374
236C:  BTFSS  F69.2
236E:  BRA    2374
2370:  GOTO   184A
....................  
....................       if (UCON_SUSPND) return; 
2374:  BTFSS  F6D.1
2376:  BRA    237A
2378:  BRA    23E0
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
237A:  BTFSS  F68.5
237C:  BRA    2386
237E:  BTFSS  F69.5
2380:  BRA    2386
2382:  GOTO   187A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
2386:  BTFSS  F68.1
2388:  BRA    2392
238A:  BTFSS  F69.1
238C:  BRA    2392
238E:  GOTO   1888
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
2392:  BTFSS  F68.0
2394:  BRA    239E
2396:  BTFSS  F69.0
2398:  BRA    239E
239A:  GOTO   198E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
239E:  BTFSS  F68.4
23A0:  BRA    23AA
23A2:  BTFSS  F69.4
23A4:  BRA    23AA
23A6:  GOTO   19BA
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
23AA:  BTFSS  F68.6
23AC:  BRA    23B6
23AE:  BTFSS  F69.6
23B0:  BRA    23B6
23B2:  GOTO   19C4
....................  
....................       TRNAttempts = 0; 
23B6:  MOVLB  3
23B8:  CLRF   xDD
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
23BA:  BTFSS  F68.3
23BC:  BRA    23D2
23BE:  BTFSS  F69.3
23C0:  BRA    23D2
....................          { 
....................             USTATCopy = U1STAT; 
23C2:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
23C6:  MOVLB  0
23C8:  CALL   0004
....................             usb_isr_tok_dne(); 
23CC:  BRA    21E2
....................          } 
....................          else 
23CE:  BRA    23D4
23D0:  MOVLB  3
....................             break; 
23D2:  BRA    23DE
....................       } while (TRNAttempts++ < 4); 
23D4:  MOVLB  3
23D6:  MOVF   xDD,W
23D8:  INCF   xDD,F
23DA:  SUBLW  03
23DC:  BC    23BA
23DE:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
23E0:  GOTO   0060
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
19C4:  BCF    F68.6
.................... } 
19C6:  GOTO   23B6 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
198E:  CLRF   F6A
....................    UIR = 0; 
1990:  CLRF   F68
....................    UEIE = 0x9F; 
1992:  MOVLW  9F
1994:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
1996:  MOVLW  3D
1998:  MOVWF  F69
....................  
....................    UADDR = 0; 
199A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
199C:  RCALL  1948
....................     
....................    usb_token_reset(); 
199E:  RCALL  1966
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
19A0:  MOVLW  16
19A2:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
19A4:  BTFSS  F68.3
19A6:  BRA    19AE
....................       usb_clear_trn(); 
19A8:  CALL   0004
....................    } 
19AC:  BRA    19A4
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
19AE:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
19B0:  RCALL  185A
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
19B2:  MOVLW  03
19B4:  MOVWF  1C
.................... } 
19B6:  GOTO   239E (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
185A:  MOVLW  40
185C:  MOVLB  4
185E:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
1860:  MOVLW  04
1862:  MOVWF  x03
1864:  MOVLW  10
1866:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
1868:  MOVLW  88
186A:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
186C:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
186E:  MOVLW  04
1870:  MOVWF  x07
1872:  MOVLW  50
1874:  MOVWF  x06
.................... } 
1876:  MOVLB  0
1878:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
1888:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
188A:  BCF    F68.1
.................... } 
188C:  GOTO   2392 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
19BA:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
19BC:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
19BE:  BSF    F6D.1
.................... } 
19C0:  GOTO   23AA (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
184A:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
184C:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
184E:  BTFSS  F68.2
1850:  BRA    1856
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
1852:  BCF    F68.2
....................    } 
1854:  BRA    184E
.................... } 
1856:  GOTO   2374 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
187A:  BTFSS  F70.0
187C:  BRA    1882
....................    { 
....................       usb_init_ep0_setup(); 
187E:  RCALL  185A
....................       bit_clear(UEP(0), 0); 
1880:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
1882:  BCF    F68.5
.................... } 
1884:  GOTO   2386 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
19CA:  MOVFF  3E3,1D
19CE:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
19D0:  MOVLW  FF
19D2:  MOVWF  1D
19D4:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
21E2:  RRCF   1B,W
21E4:  MOVLB  3
21E6:  MOVWF  xDE
21E8:  RRCF   xDE,F
21EA:  RRCF   xDE,F
21EC:  MOVLW  1F
21EE:  ANDWF  xDE,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
21F0:  MOVF   1B,F
21F2:  BNZ   2292
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
21F4:  MOVLB  4
21F6:  MOVF   x00,W
21F8:  ANDLW  3C
21FA:  MOVLB  3
21FC:  MOVWF  xDF
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
21FE:  MOVLW  43
2200:  MOVLB  4
2202:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
2204:  MOVLB  3
2206:  MOVF   xDF,W
2208:  SUBLW  34
220A:  BNZ   2256
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
220C:  MOVLB  4
220E:  MOVF   x04,W
2210:  ANDLW  80
2212:  BZ    2216
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
2214:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
2216:  MOVLB  0
2218:  BRA    1F78
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
221A:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
221C:  INCFSZ 1D,W
221E:  BRA    222E
....................             usb_flush_out(0, USB_DTS_STALL); 
2220:  MOVLB  3
2222:  CLRF   xE0
2224:  MOVLW  03
2226:  MOVWF  xE1
2228:  MOVLB  0
222A:  RCALL  1FA4
....................          else  
222C:  BRA    2252
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
222E:  MOVLB  3
2230:  CLRF   xE0
2232:  MOVLW  02
2234:  MOVWF  xE1
2236:  MOVLB  0
2238:  RCALL  1FA4
....................             if (__setup_0_tx_size != 0xFE) 
223A:  MOVF   1D,W
223C:  SUBLW  FE
223E:  BZ    2252
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
2240:  MOVLB  3
2242:  CLRF   xE0
2244:  CLRF   xE2
2246:  MOVFF  1D,3E1
224A:  MOVLW  04
224C:  MOVWF  xE3
224E:  MOVLB  0
2250:  RCALL  20B2
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
2252:  BRA    228E
2254:  MOVLB  3
2256:  MOVF   xDF,W
2258:  SUBLW  04
225A:  BNZ   2290
....................       { 
....................          usb_isr_tok_out_dne(0); 
225C:  CLRF   xE0
225E:  MOVLB  0
2260:  RCALL  218E
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
2262:  MOVLB  3
2264:  CLRF   xE0
2266:  MOVLW  02
2268:  MOVWF  xE1
226A:  MOVLB  0
226C:  RCALL  1FA4
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
226E:  MOVF   1D,W
2270:  SUBLW  FE
2272:  BZ    228C
2274:  INCFSZ 1D,W
2276:  BRA    227A
2278:  BRA    228C
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
227A:  MOVLB  3
227C:  CLRF   xE0
227E:  CLRF   xE2
2280:  MOVFF  1D,3E1
2284:  MOVLW  01
2286:  MOVWF  xE3
2288:  MOVLB  0
228A:  RCALL  20B2
....................          } 
....................       } 
....................       else 
228C:  BRA    228E
228E:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
2290:  BRA    2356
2292:  MOVF   1B,W
2294:  SUBLW  04
2296:  BNZ   22C8
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
2298:  MOVLW  43
229A:  MOVLB  4
229C:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
229E:  MOVLW  FF
22A0:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
22A2:  MOVLB  3
22A4:  CLRF   xE0
22A6:  MOVLB  0
22A8:  RCALL  21C0
....................       if (__setup_0_tx_size!=0xFF) 
22AA:  INCFSZ 1D,W
22AC:  BRA    22B0
22AE:  BRA    22C4
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
22B0:  MOVLB  3
22B2:  CLRF   xE0
22B4:  CLRF   xE2
22B6:  MOVFF  1D,3E1
22BA:  MOVLW  02
22BC:  MOVWF  xE3
22BE:  MOVLB  0
22C0:  RCALL  20B2
....................       else 
22C2:  BRA    22C4
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
22C4:  BRA    2354
22C6:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
22C8:  BTFSC  1B.2
22CA:  BRA    2306
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
22CC:  MOVF   xDE,W
22CE:  MULLW  08
22D0:  MOVF   FF3,W
22D2:  CLRF   xE1
22D4:  MOVWF  01
22D6:  MOVLW  04
22D8:  ADDWF  xE1,W
22DA:  MOVWF  03
22DC:  MOVF   xDE,W
22DE:  MULLW  08
22E0:  MOVF   FF3,W
22E2:  CLRF   xE3
22E4:  MOVWF  FE9
22E6:  MOVLW  04
22E8:  ADDWF  xE3,W
22EA:  MOVWF  FEA
22EC:  MOVF   FEF,W
22EE:  ANDLW  43
22F0:  MOVFF  03,FEA
22F4:  MOVFF  01,FE9
22F8:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
22FA:  MOVFF  3DE,3E0
22FE:  MOVLB  0
2300:  RCALL  218E
....................       } 
....................       else  
2302:  BRA    2354
2304:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
2306:  MOVF   xDE,W
2308:  MULLW  08
230A:  MOVF   FF3,W
230C:  CLRF   xE1
230E:  MOVWF  xE0
2310:  MOVLW  04
2312:  ADDWF  xE0,F
2314:  MOVLW  00
2316:  ADDWFC xE1,F
2318:  MOVFF  3E0,01
231C:  MOVLW  04
231E:  ADDWF  xE1,W
2320:  MOVWF  03
2322:  MOVF   xDE,W
2324:  MULLW  08
2326:  MOVF   FF3,W
2328:  CLRF   xE3
232A:  MOVWF  xE2
232C:  MOVLW  04
232E:  ADDWF  xE2,F
2330:  MOVLW  00
2332:  ADDWFC xE3,F
2334:  MOVFF  3E2,FE9
2338:  MOVLW  04
233A:  ADDWF  xE3,W
233C:  MOVWF  FEA
233E:  MOVF   FEF,W
2340:  ANDLW  43
2342:  MOVFF  03,FEA
2346:  MOVFF  3E0,FE9
234A:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
234C:  MOVFF  3DE,3E0
2350:  MOVLB  0
2352:  RCALL  21C0
2354:  MOVLB  3
....................       } 
....................    } 
.................... } 
2356:  MOVLB  0
2358:  GOTO   23CE (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
3AB8:  MOVF   18,W
3ABA:  MOVWF  01
.................... } 
3ABC:  GOTO   646E (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
1966:  MOVLB  3
1968:  CLRF   xDE
196A:  MOVF   xDE,F
196C:  BNZ   1982
....................       USB_Interface[i] = 0;   //reset each interface to default 
196E:  CLRF   03
1970:  MOVF   xDE,W
1972:  ADDLW  21
1974:  MOVWF  FE9
1976:  MOVLW  00
1978:  ADDWFC 03,W
197A:  MOVWF  FEA
197C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
197E:  INCF   xDE,F
1980:  BRA    196A
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
1982:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
1984:  MOVLW  01
1986:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
1988:  CLRF   17
.................... } 
198A:  MOVLB  0
198C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1890:  MOVLB  3
1892:  BCF    xEB.0
1894:  BTFSC  xEA.7
1896:  BSF    xEB.0
....................     
....................    endpoint &= 0x7F; 
1898:  BCF    xEA.7
....................     
....................    if (endpoint > 16) 
189A:  MOVF   xEA,W
189C:  SUBLW  10
189E:  BC    18A6
....................       return(FALSE); 
18A0:  MOVLW  00
18A2:  MOVWF  01
18A4:  BRA    18F0
....................     
....................    if (direction) { //IN 
18A6:  BTFSS  xEB.0
18A8:  BRA    18CE
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
18AA:  CLRF   03
18AC:  MOVF   xEA,W
18AE:  MOVFF  FF2,3EC
18B2:  BCF    FF2.7
18B4:  MOVLB  0
18B6:  RCALL  172A
18B8:  MOVLB  3
18BA:  BTFSC  xEC.7
18BC:  BSF    FF2.7
18BE:  SUBLW  FF
18C0:  BNZ   18C6
18C2:  MOVLW  00
18C4:  BRA    18C8
18C6:  MOVLW  01
18C8:  MOVWF  01
18CA:  BRA    18F0
....................    } 
....................    else {   //OUT 
18CC:  BRA    18F0
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
18CE:  CLRF   03
18D0:  MOVF   xEA,W
18D2:  MOVFF  FF2,3EC
18D6:  BCF    FF2.7
18D8:  MOVLB  0
18DA:  RCALL  172A
18DC:  MOVLB  3
18DE:  BTFSC  xEC.7
18E0:  BSF    FF2.7
18E2:  SUBLW  FF
18E4:  BNZ   18EA
18E6:  MOVLW  00
18E8:  BRA    18EC
18EA:  MOVLW  01
18EC:  MOVWF  01
18EE:  BRA    18F0
....................    } 
.................... } 
18F0:  MOVLB  0
18F2:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
21C0:  MOVLB  3
21C2:  MOVF   xE0,F
21C4:  BNZ   21DE
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
21C6:  DECFSZ 17,W
21C8:  BRA    21D2
21CA:  MOVLB  0
21CC:  RCALL  19D6
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
21CE:  BRA    21DC
21D0:  MOVLB  3
21D2:  MOVF   17,W
21D4:  SUBLW  02
21D6:  BNZ   21DE
21D8:  MOVLB  0
21DA:  BRA    21B2
21DC:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
21DE:  MOVLB  0
21E0:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
218E:  MOVLB  3
2190:  MOVF   xE0,F
2192:  BNZ   2194
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
2194:  MOVLB  0
2196:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
1F78:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
1F7A:  MOVLB  4
1F7C:  MOVF   x10,W
1F7E:  ANDLW  7F
1F80:  XORLW  00
1F82:  MOVLB  0
1F84:  BZ    1F90
1F86:  XORLW  01
1F88:  BZ    1F94
1F8A:  XORLW  03
1F8C:  BZ    1F98
1F8E:  BRA    1F9C
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
1F90:  BRA    1CC0
....................          break; 
1F92:  BRA    1FA0
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
1F94:  BRA    1D78
....................          break; 
1F96:  BRA    1FA0
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
1F98:  BRA    1F0E
....................          break; 
1F9A:  BRA    1FA0
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
1F9C:  RCALL  19D0
....................          break; 
1F9E:  BRA    1FA0
....................    } 
.................... } 
1FA0:  GOTO   221A (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
1CC0:  MOVLB  4
1CC2:  MOVF   x11,W
1CC4:  XORLW  00
1CC6:  MOVLB  0
1CC8:  BZ    1CE4
1CCA:  XORLW  01
1CCC:  BZ    1CF8
1CCE:  XORLW  02
1CD0:  BZ    1D12
1CD2:  XORLW  06
1CD4:  BZ    1D2A
1CD6:  XORLW  03
1CD8:  BZ    1D3C
1CDA:  XORLW  0E
1CDC:  BZ    1D40
1CDE:  XORLW  01
1CE0:  BZ    1D50
1CE2:  BRA    1D70
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
1CE4:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
1CE8:  MOVLB  4
1CEA:  CLRF   x51
....................             usb_request_send_response(2); 
1CEC:  MOVLW  02
1CEE:  MOVLB  3
1CF0:  MOVWF  xE3
1CF2:  MOVLB  0
1CF4:  RCALL  19CA
....................             break; 
1CF6:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1CF8:  MOVLB  4
1CFA:  DECFSZ x12,W
1CFC:  BRA    1D0C
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
1CFE:  MOVLW  01
1D00:  ANDWF  19,F
....................                usb_put_0len_0(); 
1D02:  MOVLB  3
1D04:  CLRF   xE3
1D06:  MOVLB  0
1D08:  RCALL  19CA
....................             } 
....................             else 
1D0A:  BRA    1D10
....................                usb_request_stall(); 
1D0C:  MOVLB  0
1D0E:  RCALL  19D0
....................             break; 
1D10:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1D12:  MOVLB  4
1D14:  DECFSZ x12,W
1D16:  BRA    1D24
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
1D18:  BSF    19.1
....................                usb_put_0len_0(); 
1D1A:  MOVLB  3
1D1C:  CLRF   xE3
1D1E:  MOVLB  0
1D20:  RCALL  19CA
....................             } 
....................             else 
1D22:  BRA    1D28
....................                usb_request_stall(); 
1D24:  MOVLB  0
1D26:  RCALL  19D0
....................             break; 
1D28:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
1D2A:  MOVLW  02
1D2C:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
1D2E:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
1D32:  MOVLB  3
1D34:  CLRF   xE3
1D36:  MOVLB  0
1D38:  RCALL  19CA
....................             break; 
1D3A:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
1D3C:  BRA    1A70
....................             break; 
1D3E:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
1D40:  MOVFF  18,450
....................             usb_request_send_response(1); 
1D44:  MOVLW  01
1D46:  MOVLB  3
1D48:  MOVWF  xE3
1D4A:  MOVLB  0
1D4C:  RCALL  19CA
....................             break; 
1D4E:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
1D50:  MOVLB  4
1D52:  MOVF   x12,W
1D54:  SUBLW  01
1D56:  BNC   1D6C
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
1D58:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
1D5C:  MOVFF  412,3E0
1D60:  MOVLB  0
1D62:  BRA    1AEE
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
1D64:  MOVLB  3
1D66:  CLRF   xE3
1D68:  MOVLB  0
1D6A:  RCALL  19CA
....................             } 
....................             break; 
1D6C:  MOVLB  0
1D6E:  BRA    1D74
....................  
....................       default: 
....................             usb_request_stall(); 
1D70:  RCALL  19D0
....................             break; 
1D72:  BRA    1D74
....................    } 
.................... } 
1D74:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
1D78:  MOVFF  18,3E0
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
1D7C:  MOVLB  4
1D7E:  MOVF   x11,W
1D80:  XORLW  00
1D82:  MOVLB  0
1D84:  BZ    1D90
1D86:  XORLW  0A
1D88:  BZ    1DA2
1D8A:  XORLW  01
1D8C:  BZ    1DF0
1D8E:  BRA    1E1A
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
1D90:  MOVLB  4
1D92:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
1D94:  CLRF   x51
....................             usb_request_send_response(2); 
1D96:  MOVLW  02
1D98:  MOVLB  3
1D9A:  MOVWF  xE3
1D9C:  MOVLB  0
1D9E:  RCALL  19CA
....................             break; 
1DA0:  BRA    1E1E
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
1DA2:  MOVLB  3
1DA4:  MOVF   xE0,F
1DA6:  BZ    1DEA
1DA8:  MOVLW  01
1DAA:  SUBWF  xE0,W
1DAC:  CLRF   03
1DAE:  MOVFF  FF2,3E1
1DB2:  BCF    FF2.7
1DB4:  MOVLB  0
1DB6:  RCALL  17BC
1DB8:  MOVLB  3
1DBA:  BTFSC  xE1.7
1DBC:  BSF    FF2.7
1DBE:  MOVWF  01
1DC0:  MOVLB  4
1DC2:  SUBWF  x14,W
1DC4:  BTFSS  FD8.0
1DC6:  BRA    1DCC
1DC8:  MOVLB  3
1DCA:  BRA    1DEA
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
1DCC:  CLRF   03
1DCE:  MOVF   x14,W
1DD0:  ADDLW  21
1DD2:  MOVWF  FE9
1DD4:  MOVLW  00
1DD6:  ADDWFC 03,W
1DD8:  MOVWF  FEA
1DDA:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
1DDE:  MOVLW  01
1DE0:  MOVLB  3
1DE2:  MOVWF  xE3
1DE4:  MOVLB  0
1DE6:  RCALL  19CA
....................             } 
....................             else 
1DE8:  BRA    1DEE
....................                usb_request_stall(); 
1DEA:  MOVLB  0
1DEC:  RCALL  19D0
....................             break; 
1DEE:  BRA    1E1E
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
1DF0:  MOVLB  3
1DF2:  MOVF   xE0,F
1DF4:  BZ    1E14
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
1DF6:  CLRF   03
1DF8:  MOVLB  4
1DFA:  MOVF   x14,W
1DFC:  ADDLW  21
1DFE:  MOVWF  FE9
1E00:  MOVLW  00
1E02:  ADDWFC 03,W
1E04:  MOVWF  FEA
1E06:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
1E0A:  MOVLB  3
1E0C:  CLRF   xE3
1E0E:  MOVLB  0
1E10:  RCALL  19CA
....................             } 
....................             else 
1E12:  BRA    1E18
....................                usb_request_stall(); 
1E14:  MOVLB  0
1E16:  RCALL  19D0
....................             break; 
1E18:  BRA    1E1E
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
1E1A:  RCALL  19D0
....................             break; 
1E1C:  BRA    1E1E
....................    } 
.................... } 
1E1E:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
1F0E:  MOVFF  414,3EA
1F12:  RCALL  1890
1F14:  MOVF   01,F
1F16:  BZ    1F74
....................       switch(usb_ep0_rx_buffer[1]) { 
1F18:  MOVLB  4
1F1A:  MOVF   x11,W
1F1C:  XORLW  01
1F1E:  MOVLB  0
1F20:  BZ    1F2C
1F22:  XORLW  02
1F24:  BZ    1F3C
1F26:  XORLW  03
1F28:  BZ    1F4C
1F2A:  BRA    1F70
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
1F2C:  MOVFF  414,3E0
1F30:  BRA    1E22
....................                usb_put_0len_0(); 
1F32:  MOVLB  3
1F34:  CLRF   xE3
1F36:  MOVLB  0
1F38:  RCALL  19CA
....................                break; 
1F3A:  BRA    1F74
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
1F3C:  MOVFF  414,3E0
1F40:  BRA    1E6A
....................                      usb_put_0len_0(); 
1F42:  MOVLB  3
1F44:  CLRF   xE3
1F46:  MOVLB  0
1F48:  RCALL  19CA
....................                      break; 
1F4A:  BRA    1F74
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
1F4C:  MOVLB  4
1F4E:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
1F50:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
1F52:  MOVFF  414,3E0
1F56:  MOVLB  0
1F58:  BRA    1EB4
1F5A:  MOVF   01,F
1F5C:  BZ    1F64
....................                   usb_ep0_tx_buffer[0]=1; 
1F5E:  MOVLW  01
1F60:  MOVLB  4
1F62:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
1F64:  MOVLW  02
1F66:  MOVLB  3
1F68:  MOVWF  xE3
1F6A:  MOVLB  0
1F6C:  RCALL  19CA
....................                break; 
1F6E:  BRA    1F74
....................  
....................          default: 
....................             usb_request_stall(); 
1F70:  RCALL  19D0
....................             break; 
1F72:  BRA    1F74
....................       } 
....................    } 
.................... } 
1F74:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
1A70:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
1A72:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
1A74:  MOVLB  4
1A76:  MOVF   x13,W
1A78:  XORLW  01
1A7A:  MOVLB  0
1A7C:  BZ    1A88
1A7E:  XORLW  03
1A80:  BZ    1A92
1A82:  XORLW  01
1A84:  BZ    1A98
1A86:  BRA    1ACE
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
1A88:  MOVLW  12
1A8A:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
1A8C:  MOVLW  03
1A8E:  MOVWF  1A
....................             break; 
1A90:  BRA    1AD2
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
1A92:  MOVLW  20
1A94:  MOVWF  20
....................             break; 
1A96:  BRA    1AD2
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
1A98:  MOVLW  02
1A9A:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
1A9C:  CLRF   03
1A9E:  MOVLB  4
1AA0:  MOVF   x12,W
1AA2:  MOVFF  FF2,3E0
1AA6:  BCF    FF2.7
1AA8:  MOVLB  0
1AAA:  RCALL  17F0
1AAC:  MOVLB  3
1AAE:  BTFSC  xE0.7
1AB0:  BSF    FF2.7
1AB2:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
1AB4:  CLRF   03
1AB6:  MOVF   1F,W
1AB8:  MOVFF  FF2,3E0
1ABC:  BCF    FF2.7
1ABE:  MOVLB  0
1AC0:  RCALL  1804
1AC2:  MOVLB  3
1AC4:  BTFSC  xE0.7
1AC6:  BSF    FF2.7
1AC8:  MOVWF  20
....................             break; 
1ACA:  MOVLB  0
1ACC:  BRA    1AD2
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
1ACE:  RCALL  19D0
....................             return; 
1AD0:  BRA    1AEA
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
1AD2:  MOVLB  4
1AD4:  MOVF   x17,F
1AD6:  BNZ   1AE2
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
1AD8:  MOVF   20,W
1ADA:  SUBWF  x16,W
1ADC:  BC    1AE2
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
1ADE:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
1AE2:  MOVLW  01
1AE4:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
1AE6:  MOVLB  0
1AE8:  RCALL  19D6
.................... } 
1AEA:  GOTO   1D74 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
21B2:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
21B4:  CLRF   17
....................    usb_set_address(USB_address_pending); 
21B6:  MOVFF  1E,3E1
21BA:  BRA    2198
....................    #endif 
.................... } 
21BC:  GOTO   21DC (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
19D6:  MOVLB  3
19D8:  CLRF   xE1
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
19DA:  MOVF   20,F
19DC:  BZ    1A5A
19DE:  MOVF   xE1,W
19E0:  SUBLW  3F
19E2:  BNC   1A5A
....................       switch(USB_stack_status.getdesc_type) { 
19E4:  MOVF   1A,W
19E6:  XORLW  00
19E8:  MOVLB  0
19EA:  BZ    19F6
19EC:  XORLW  02
19EE:  BZ    1A0E
19F0:  XORLW  01
19F2:  BZ    1A26
19F4:  BRA    1A3E
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
19F6:  CLRF   03
19F8:  MOVF   1F,W
19FA:  MOVFF  FF2,3E3
19FE:  BCF    FF2.7
1A00:  RCALL  178C
1A02:  MOVLB  3
1A04:  BTFSC  xE3.7
1A06:  BSF    FF2.7
1A08:  MOVWF  xE2
....................             break; 
1A0A:  MOVLB  0
1A0C:  BRA    1A3E
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
1A0E:  CLRF   03
1A10:  MOVF   1F,W
1A12:  MOVFF  FF2,3E3
1A16:  BCF    FF2.7
1A18:  RCALL  1804
1A1A:  MOVLB  3
1A1C:  BTFSC  xE3.7
1A1E:  BSF    FF2.7
1A20:  MOVWF  xE2
....................             break; 
1A22:  MOVLB  0
1A24:  BRA    1A3E
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
1A26:  CLRF   03
1A28:  MOVF   1F,W
1A2A:  MOVFF  FF2,3E3
1A2E:  BCF    FF2.7
1A30:  RCALL  17CE
1A32:  MOVLB  3
1A34:  BTFSC  xE3.7
1A36:  BSF    FF2.7
1A38:  MOVWF  xE2
....................             break; 
1A3A:  MOVLB  0
1A3C:  BRA    1A3E
....................       } 
....................       usb_getdesc_ptr++; 
1A3E:  INCF   1F,F
....................       usb_getdesc_len--; 
1A40:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
1A42:  MOVLB  3
1A44:  MOVF   xE1,W
1A46:  INCF   xE1,F
1A48:  CLRF   03
1A4A:  ADDLW  50
1A4C:  MOVWF  FE9
1A4E:  MOVLW  04
1A50:  ADDWFC 03,W
1A52:  MOVWF  FEA
1A54:  MOVFF  3E2,FEF
....................    } 
1A58:  BRA    19DA
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
1A5A:  MOVF   20,F
1A5C:  BNZ   1A66
1A5E:  MOVF   xE1,W
1A60:  SUBLW  40
1A62:  BZ    1A66
....................          USB_stack_status.dev_req = NONE; 
1A64:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
1A66:  MOVFF  3E1,3E3
1A6A:  MOVLB  0
1A6C:  RCALL  19CA
.................... } 
1A6E:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32; 
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxbuf[Lenbuf]; 
....................  
.................... char  JP[] = "JP Inglobal", Autoclave[] = "Autoclave Vertical",tiempo_est[]="T est=",tiempo_sec[]="T sec="; 
.................... char  Lts[] = "80 Litros",Contra[] = "Cambio Contrasena",Men[] = "Menu",Fle[] = ">",Tempe[] = "Iniciar Proceso",Param[] = "Ciclo"; 
.................... char  Proc[] = "Proceso",Textil[]= "Textil-Instrumental", Calentando[]="Calentando",Level[]="Nivel"; 
.................... char  Caucho[]= "Caucho",Instrumental[]= "Instrumental Suave", Esterilizando[]="Esterilizando",Secando[]="Secando"; 
.................... char  Liquidos[]= "Liquidos", Vacio[]=":",Creado[]= "Libre", T40[]= "T:134°C",Test40[]= "t_est:5m", Tsec40[]= "t_sec:15m",C[]="C"; 
.................... char  TC[]= "T:121°C",TestC[]= "t_est:25m",TsecC[]= "t_sec:15m", TI[]= "T:121°C",TestI[]= "t_est:20m",Desfogue_Lento[]="Desfogue Lento"; 
.................... char  TsecI[]= "t_sec:N/A",TL[]= "T:121°C",TestL[]= "t_est:20m",TsecL[]= "t_sec:N/A",ok[]= "OK", T[]="Temperatura"; 
.................... char  T_esterilizacion[]="T Esterilizacion",T_secado[]="T Secado",Desfogue[]="Desfogue Rapido",Si[]="Si",Noo[]="No",Finalizado[]="Finalizado"; 
.................... int8 Menu=0, n_opcionH=32,n_opcionL=16,unidad=11,Flecha=16,Flecha1=3,Flecha2=16, nMenuL=16, nMenuH=32, Flx=36, Fly=8,Liquid=0; 
.................... short estadot40=0,estadoc=0,estadoi=0,estadol=0,estadop=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0; 
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int16 tiempos=0,tiempos3=0,m=0,tiempoctrl=0; 
.................... short tiempo_esterilizacion=0,tiempo_secado=0,fin_ciclo=0,i=0,n=0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... // Variables para Pt100 
.................... short Lectura=0,modifica=0,Expulsa=0, est=0; 
.................... int Setpoint=121,h=0,l=0,Nivel,Minutos=10,Open=100,Ajuste=0,CUR=100,Ajusten=0,R2=0; 
.................... float V0,R1=1000.7,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=10.0,desvio=0.0,d3=0.0; 
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................     
....................    if(x==1){ 
*
3180:  MOVLB  3
3182:  DECFSZ xA3,W
3184:  BRA    3228
....................    for( i = 0 ; i < 64 ; i ++ ) 
3186:  CLRF   xA4
3188:  MOVF   xA4,W
318A:  SUBLW  3F
318C:  BNC   3228
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
318E:  CLRF   xA5
3190:  MOVF   xA5,W
3192:  SUBLW  0F
3194:  BNC   3224
....................       {     
....................          for(k=7;k>-1;k--) 
3196:  MOVLW  07
3198:  MOVWF  xA6
319A:  MOVF   xA6,W
319C:  XORLW  80
319E:  SUBLW  7F
31A0:  BC    3220
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
31A2:  CLRF   xA8
31A4:  MOVFF  3A4,3A7
31A8:  CLRF   xAA
31AA:  MOVLW  10
31AC:  MOVWF  xA9
31AE:  MOVLB  0
31B0:  RCALL  315E
31B2:  MOVFF  02,3A8
31B6:  MOVFF  01,3A7
31BA:  MOVLB  3
31BC:  MOVF   xA5,W
31BE:  ADDWF  01,W
31C0:  MOVWF  01
31C2:  MOVLW  00
31C4:  ADDWFC 02,W
31C6:  MOVWF  03
31C8:  MOVF   01,W
31CA:  MOVFF  FF2,3A7
31CE:  BCF    FF2.7
31D0:  MOVFF  03,FF7
31D4:  MOVLB  0
31D6:  CALL   02B2
31DA:  MOVLB  3
31DC:  BTFSC  xA7.7
31DE:  BSF    FF2.7
31E0:  MOVWF  xA7
31E2:  MOVLW  07
31E4:  BSF    FD8.0
31E6:  SUBFWB xA6,W
31E8:  MOVWF  xA8
31EA:  MOVFF  3A7,00
31EE:  MOVF   xA8,W
31F0:  MOVWF  01
31F2:  BZ    31FC
31F4:  BCF    FD8.0
31F6:  RRCF   00,F
31F8:  DECFSZ 01,F
31FA:  BRA    31F4
31FC:  BTFSS  00.0
31FE:  BRA    321C
....................                glcd_pixel( j*8+k,i, ON ); 
3200:  MOVF   xA5,W
3202:  MULLW  08
3204:  MOVF   FF3,W
3206:  ADDWF  xA6,W
3208:  MOVWF  xA7
320A:  MOVWF  xD4
320C:  MOVFF  3A4,3D5
3210:  MOVLW  01
3212:  MOVWF  xD6
3214:  MOVLB  0
3216:  CALL   27BA
321A:  MOVLB  3
....................          }   
321C:  DECF   xA6,F
321E:  BRA    319A
....................       } 
3220:  INCF   xA5,F
3222:  BRA    3190
....................    } 
3224:  INCF   xA4,F
3226:  BRA    3188
....................    } 
....................     
....................    if(x==2){ 
3228:  MOVF   xA3,W
322A:  SUBLW  02
322C:  BNZ   32D0
....................    for( i = 0 ; i < 64 ; i ++ ) 
322E:  CLRF   xA4
3230:  MOVF   xA4,W
3232:  SUBLW  3F
3234:  BNC   32D0
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3236:  CLRF   xA5
3238:  MOVF   xA5,W
323A:  SUBLW  0F
323C:  BNC   32CC
....................       {     
....................          for(k=7;k>-1;k--) 
323E:  MOVLW  07
3240:  MOVWF  xA6
3242:  MOVF   xA6,W
3244:  XORLW  80
3246:  SUBLW  7F
3248:  BC    32C8
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
324A:  CLRF   xA8
324C:  MOVFF  3A4,3A7
3250:  CLRF   xAA
3252:  MOVLW  10
3254:  MOVWF  xA9
3256:  MOVLB  0
3258:  RCALL  315E
325A:  MOVFF  02,3A8
325E:  MOVFF  01,3A7
3262:  MOVLB  3
3264:  MOVF   xA5,W
3266:  ADDWF  01,W
3268:  MOVWF  01
326A:  MOVLW  00
326C:  ADDWFC 02,W
326E:  MOVWF  03
3270:  MOVF   01,W
3272:  MOVFF  FF2,3A7
3276:  BCF    FF2.7
3278:  MOVFF  03,FF7
327C:  MOVLB  0
327E:  CALL   06CA
3282:  MOVLB  3
3284:  BTFSC  xA7.7
3286:  BSF    FF2.7
3288:  MOVWF  xA7
328A:  MOVLW  07
328C:  BSF    FD8.0
328E:  SUBFWB xA6,W
3290:  MOVWF  xA8
3292:  MOVFF  3A7,00
3296:  MOVF   xA8,W
3298:  MOVWF  01
329A:  BZ    32A4
329C:  BCF    FD8.0
329E:  RRCF   00,F
32A0:  DECFSZ 01,F
32A2:  BRA    329C
32A4:  BTFSS  00.0
32A6:  BRA    32C4
....................                glcd_pixel( j*8+k,i, ON ); 
32A8:  MOVF   xA5,W
32AA:  MULLW  08
32AC:  MOVF   FF3,W
32AE:  ADDWF  xA6,W
32B0:  MOVWF  xA7
32B2:  MOVWF  xD4
32B4:  MOVFF  3A4,3D5
32B8:  MOVLW  01
32BA:  MOVWF  xD6
32BC:  MOVLB  0
32BE:  CALL   27BA
32C2:  MOVLB  3
....................          }   
32C4:  DECF   xA6,F
32C6:  BRA    3242
....................       } 
32C8:  INCF   xA5,F
32CA:  BRA    3238
....................    } 
32CC:  INCF   xA4,F
32CE:  BRA    3230
....................    } 
....................     
....................    if(x==3){ 
32D0:  MOVF   xA3,W
32D2:  SUBLW  03
32D4:  BNZ   3378
....................    for( i = 0 ; i < 64 ; i ++ ) 
32D6:  CLRF   xA4
32D8:  MOVF   xA4,W
32DA:  SUBLW  3F
32DC:  BNC   3378
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
32DE:  CLRF   xA5
32E0:  MOVF   xA5,W
32E2:  SUBLW  0F
32E4:  BNC   3374
....................       {     
....................          for(k=7;k>-1;k--) 
32E6:  MOVLW  07
32E8:  MOVWF  xA6
32EA:  MOVF   xA6,W
32EC:  XORLW  80
32EE:  SUBLW  7F
32F0:  BC    3370
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
32F2:  CLRF   xA8
32F4:  MOVFF  3A4,3A7
32F8:  CLRF   xAA
32FA:  MOVLW  10
32FC:  MOVWF  xA9
32FE:  MOVLB  0
3300:  RCALL  315E
3302:  MOVFF  02,3A8
3306:  MOVFF  01,3A7
330A:  MOVLB  3
330C:  MOVF   xA5,W
330E:  ADDWF  01,W
3310:  MOVWF  01
3312:  MOVLW  00
3314:  ADDWFC 02,W
3316:  MOVWF  03
3318:  MOVF   01,W
331A:  MOVFF  FF2,3A7
331E:  BCF    FF2.7
3320:  MOVFF  03,FF7
3324:  MOVLB  0
3326:  CALL   0AE2
332A:  MOVLB  3
332C:  BTFSC  xA7.7
332E:  BSF    FF2.7
3330:  MOVWF  xA7
3332:  MOVLW  07
3334:  BSF    FD8.0
3336:  SUBFWB xA6,W
3338:  MOVWF  xA8
333A:  MOVFF  3A7,00
333E:  MOVF   xA8,W
3340:  MOVWF  01
3342:  BZ    334C
3344:  BCF    FD8.0
3346:  RRCF   00,F
3348:  DECFSZ 01,F
334A:  BRA    3344
334C:  BTFSS  00.0
334E:  BRA    336C
....................                glcd_pixel( j*8+k,i, ON ); 
3350:  MOVF   xA5,W
3352:  MULLW  08
3354:  MOVF   FF3,W
3356:  ADDWF  xA6,W
3358:  MOVWF  xA7
335A:  MOVWF  xD4
335C:  MOVFF  3A4,3D5
3360:  MOVLW  01
3362:  MOVWF  xD6
3364:  MOVLB  0
3366:  CALL   27BA
336A:  MOVLB  3
....................          }   
336C:  DECF   xA6,F
336E:  BRA    32EA
....................       } 
3370:  INCF   xA5,F
3372:  BRA    32E0
....................    } 
3374:  INCF   xA4,F
3376:  BRA    32D8
....................    } 
....................     
....................    if(x==4){ 
3378:  MOVF   xA3,W
337A:  SUBLW  04
337C:  BNZ   3420
....................    for( i = 0 ; i < 64 ; i ++ ) 
337E:  CLRF   xA4
3380:  MOVF   xA4,W
3382:  SUBLW  3F
3384:  BNC   3420
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3386:  CLRF   xA5
3388:  MOVF   xA5,W
338A:  SUBLW  0F
338C:  BNC   341C
....................       {     
....................          for(k=7;k>-1;k--) 
338E:  MOVLW  07
3390:  MOVWF  xA6
3392:  MOVF   xA6,W
3394:  XORLW  80
3396:  SUBLW  7F
3398:  BC    3418
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
339A:  CLRF   xA8
339C:  MOVFF  3A4,3A7
33A0:  CLRF   xAA
33A2:  MOVLW  10
33A4:  MOVWF  xA9
33A6:  MOVLB  0
33A8:  RCALL  315E
33AA:  MOVFF  02,3A8
33AE:  MOVFF  01,3A7
33B2:  MOVLB  3
33B4:  MOVF   xA5,W
33B6:  ADDWF  01,W
33B8:  MOVWF  01
33BA:  MOVLW  00
33BC:  ADDWFC 02,W
33BE:  MOVWF  03
33C0:  MOVF   01,W
33C2:  MOVFF  FF2,3A7
33C6:  BCF    FF2.7
33C8:  MOVFF  03,FF7
33CC:  MOVLB  0
33CE:  CALL   0EFA
33D2:  MOVLB  3
33D4:  BTFSC  xA7.7
33D6:  BSF    FF2.7
33D8:  MOVWF  xA7
33DA:  MOVLW  07
33DC:  BSF    FD8.0
33DE:  SUBFWB xA6,W
33E0:  MOVWF  xA8
33E2:  MOVFF  3A7,00
33E6:  MOVF   xA8,W
33E8:  MOVWF  01
33EA:  BZ    33F4
33EC:  BCF    FD8.0
33EE:  RRCF   00,F
33F0:  DECFSZ 01,F
33F2:  BRA    33EC
33F4:  BTFSS  00.0
33F6:  BRA    3414
....................                glcd_pixel( j*8+k,i, ON ); 
33F8:  MOVF   xA5,W
33FA:  MULLW  08
33FC:  MOVF   FF3,W
33FE:  ADDWF  xA6,W
3400:  MOVWF  xA7
3402:  MOVWF  xD4
3404:  MOVFF  3A4,3D5
3408:  MOVLW  01
340A:  MOVWF  xD6
340C:  MOVLB  0
340E:  CALL   27BA
3412:  MOVLB  3
....................          }   
3414:  DECF   xA6,F
3416:  BRA    3392
....................       } 
3418:  INCF   xA5,F
341A:  BRA    3388
....................    } 
341C:  INCF   xA4,F
341E:  BRA    3380
....................    } 
....................     
....................    if(x==5){ 
3420:  MOVF   xA3,W
3422:  SUBLW  05
3424:  BNZ   34C8
....................    for( i = 0 ; i < 64 ; i ++ ) 
3426:  CLRF   xA4
3428:  MOVF   xA4,W
342A:  SUBLW  3F
342C:  BNC   34C8
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
342E:  CLRF   xA5
3430:  MOVF   xA5,W
3432:  SUBLW  0F
3434:  BNC   34C4
....................       {     
....................          for(k=7;k>-1;k--) 
3436:  MOVLW  07
3438:  MOVWF  xA6
343A:  MOVF   xA6,W
343C:  XORLW  80
343E:  SUBLW  7F
3440:  BC    34C0
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
3442:  CLRF   xA8
3444:  MOVFF  3A4,3A7
3448:  CLRF   xAA
344A:  MOVLW  10
344C:  MOVWF  xA9
344E:  MOVLB  0
3450:  RCALL  315E
3452:  MOVFF  02,3A8
3456:  MOVFF  01,3A7
345A:  MOVLB  3
345C:  MOVF   xA5,W
345E:  ADDWF  01,W
3460:  MOVWF  01
3462:  MOVLW  00
3464:  ADDWFC 02,W
3466:  MOVWF  03
3468:  MOVF   01,W
346A:  MOVFF  FF2,3A7
346E:  BCF    FF2.7
3470:  MOVFF  03,FF7
3474:  MOVLB  0
3476:  CALL   1312
347A:  MOVLB  3
347C:  BTFSC  xA7.7
347E:  BSF    FF2.7
3480:  MOVWF  xA7
3482:  MOVLW  07
3484:  BSF    FD8.0
3486:  SUBFWB xA6,W
3488:  MOVWF  xA8
348A:  MOVFF  3A7,00
348E:  MOVF   xA8,W
3490:  MOVWF  01
3492:  BZ    349C
3494:  BCF    FD8.0
3496:  RRCF   00,F
3498:  DECFSZ 01,F
349A:  BRA    3494
349C:  BTFSS  00.0
349E:  BRA    34BC
....................                glcd_pixel( j*8+k,i, ON ); 
34A0:  MOVF   xA5,W
34A2:  MULLW  08
34A4:  MOVF   FF3,W
34A6:  ADDWF  xA6,W
34A8:  MOVWF  xA7
34AA:  MOVWF  xD4
34AC:  MOVFF  3A4,3D5
34B0:  MOVLW  01
34B2:  MOVWF  xD6
34B4:  MOVLB  0
34B6:  CALL   27BA
34BA:  MOVLB  3
....................          }   
34BC:  DECF   xA6,F
34BE:  BRA    343A
....................       } 
34C0:  INCF   xA5,F
34C2:  BRA    3430
....................    } 
34C4:  INCF   xA4,F
34C6:  BRA    3428
....................    } 
.................... } 
34C8:  MOVLB  0
34CA:  RETLW  00
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................   if(x==1) 
*
304A:  MOVLB  3
304C:  DECFSZ xA4,W
304E:  BRA    306A
....................    {glcd_text57(7, y, Tempe, 1, ON);} 
3050:  MOVLW  07
3052:  MOVWF  xB7
3054:  MOVFF  3A5,3B8
3058:  CLRF   xBA
305A:  MOVLW  B2
305C:  MOVWF  xB9
305E:  MOVLW  01
3060:  MOVWF  xBB
3062:  MOVWF  xBC
3064:  MOVLB  0
3066:  RCALL  289C
3068:  MOVLB  3
....................    if(x==2) 
306A:  MOVF   xA4,W
306C:  SUBLW  02
306E:  BNZ   308A
....................    {glcd_text57(7, y, Param, 1, ON);} 
3070:  MOVLW  07
3072:  MOVWF  xB7
3074:  MOVFF  3A5,3B8
3078:  CLRF   xBA
307A:  MOVLW  C2
307C:  MOVWF  xB9
307E:  MOVLW  01
3080:  MOVWF  xBB
3082:  MOVWF  xBC
3084:  MOVLB  0
3086:  RCALL  289C
3088:  MOVLB  3
....................    if(x==3) 
308A:  MOVF   xA4,W
308C:  SUBLW  03
308E:  BNZ   30AC
....................    {glcd_text57(7, y, Contra, 1, ON);  } 
3090:  MOVLW  07
3092:  MOVWF  xB7
3094:  MOVFF  3A5,3B8
3098:  CLRF   xBA
309A:  MOVLW  99
309C:  MOVWF  xB9
309E:  MOVLW  01
30A0:  MOVWF  xBB
30A2:  MOVWF  xBC
30A4:  MOVLB  0
30A6:  CALL   289C
30AA:  MOVLB  3
....................    if(x==4) 
30AC:  MOVF   xA4,W
30AE:  SUBLW  04
30B0:  BNZ   30CE
....................    {glcd_text57(7, y, Textil, 1, ON);  } 
30B2:  MOVLW  07
30B4:  MOVWF  xB7
30B6:  MOVFF  3A5,3B8
30BA:  CLRF   xBA
30BC:  MOVLW  D0
30BE:  MOVWF  xB9
30C0:  MOVLW  01
30C2:  MOVWF  xBB
30C4:  MOVWF  xBC
30C6:  MOVLB  0
30C8:  CALL   289C
30CC:  MOVLB  3
....................    if(x==5) 
30CE:  MOVF   xA4,W
30D0:  SUBLW  05
30D2:  BNZ   30F0
....................    {glcd_text57(7, y, Caucho, 1, ON);  } 
30D4:  MOVLW  07
30D6:  MOVWF  xB7
30D8:  MOVFF  3A5,3B8
30DC:  CLRF   xBA
30DE:  MOVLW  F5
30E0:  MOVWF  xB9
30E2:  MOVLW  01
30E4:  MOVWF  xBB
30E6:  MOVWF  xBC
30E8:  MOVLB  0
30EA:  CALL   289C
30EE:  MOVLB  3
....................    if(x==6) 
30F0:  MOVF   xA4,W
30F2:  SUBLW  06
30F4:  BNZ   3112
....................    {glcd_text57(7, y, Instrumental, 1, ON);  } 
30F6:  MOVLW  07
30F8:  MOVWF  xB7
30FA:  MOVFF  3A5,3B8
30FE:  CLRF   xBA
3100:  MOVLW  FC
3102:  MOVWF  xB9
3104:  MOVLW  01
3106:  MOVWF  xBB
3108:  MOVWF  xBC
310A:  MOVLB  0
310C:  CALL   289C
3110:  MOVLB  3
....................    if(x==7) 
3112:  MOVF   xA4,W
3114:  SUBLW  07
3116:  BNZ   3136
....................    {glcd_text57(7, y, Liquidos, 1, ON);  } 
3118:  MOVLW  07
311A:  MOVWF  xB7
311C:  MOVFF  3A5,3B8
3120:  MOVLW  01
3122:  MOVWF  xBA
3124:  MOVLW  25
3126:  MOVWF  xB9
3128:  MOVLW  01
312A:  MOVWF  xBB
312C:  MOVWF  xBC
312E:  MOVLB  0
3130:  CALL   289C
3134:  MOVLB  3
....................    if(x==8) 
3136:  MOVF   xA4,W
3138:  SUBLW  08
313A:  BNZ   315A
....................    {glcd_text57(7, y, Creado, 1, ON);  } 
313C:  MOVLW  07
313E:  MOVWF  xB7
3140:  MOVFF  3A5,3B8
3144:  MOVLW  01
3146:  MOVWF  xBA
3148:  MOVLW  30
314A:  MOVWF  xB9
314C:  MOVLW  01
314E:  MOVWF  xBB
3150:  MOVWF  xBC
3152:  MOVLB  0
3154:  CALL   289C
3158:  MOVLB  3
.................... } 
315A:  MOVLB  0
315C:  RETLW  00
....................   
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(36530);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
*
23E4:  MOVLW  8E
23E6:  MOVWF  FCF
23E8:  MOVLW  B2
23EA:  MOVWF  FCE
....................    tiempos++; 
23EC:  MOVLB  2
23EE:  INCF   x0E,F
23F0:  BTFSC  FD8.2
23F2:  INCF   x0F,F
....................    tiempos3++; 
23F4:  INCF   x10,F
23F6:  BTFSC  FD8.2
23F8:  INCF   x11,F
....................    tiempoctrl++; 
23FA:  INCF   x14,F
23FC:  BTFSC  FD8.2
23FE:  INCF   x15,F
....................     
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])) 
2400:  MOVF   x1A,W
2402:  SUBWF  x16,W
2404:  BNZ   241A
2406:  MOVF   x1B,W
2408:  SUBWF  x17,W
240A:  BNZ   241A
240C:  MOVF   x1C,W
240E:  SUBWF  x18,W
2410:  BNZ   241A
2412:  MOVF   x1D,W
2414:  SUBWF  x19,W
2416:  BNZ   241A
....................    {tiempo_secado=1;} 
2418:  BSF    x0D.2
....................     
....................       if((Tsecado[0]==Tsecadop[0])&&(Tsecado[1]==Tsecadop[1])&&(Tsecado[2]==Tsecadop[2])&&(Tsecado[3]==Tsecadop[3]))// Si cumplio 
241A:  MOVF   x22,W
241C:  SUBWF  x1E,W
241E:  BNZ   243A
2420:  MOVF   x23,W
2422:  SUBWF  x1F,W
2424:  BNZ   243A
2426:  MOVF   x24,W
2428:  SUBWF  x20,W
242A:  BNZ   243A
242C:  MOVF   x25,W
242E:  SUBWF  x21,W
2430:  BNZ   243A
....................       { 
....................          if(Liquid==0) 
2432:  MOVF   x0B,F
2434:  BNZ   243A
....................          {tiempo_secado=0;fin_ciclo=1;}//tiempo de secado sin seleccionar ningun programa de desfogue lento, activa fin de ciclo. 
2436:  BCF    x0D.2
2438:  BSF    x0D.3
....................       } 
....................     
....................    if(tiempos3==12000) 
243A:  MOVF   x10,W
243C:  SUBLW  E0
243E:  BNZ   244C
2440:  MOVF   x11,W
2442:  SUBLW  2E
2444:  BNZ   244C
....................    {tiempos3=0;Expulsa=1;} 
2446:  CLRF   x11
2448:  CLRF   x10
244A:  BSF    x26.0
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
244C:  MOVF   x0E,W
244E:  SUBLW  C8
2450:  BNZ   24D4
2452:  MOVF   x0F,F
2454:  BNZ   24D4
....................    {tiempos=0;Lectura=1; 
2456:  CLRF   x0F
2458:  CLRF   x0E
245A:  BSF    x0D.6
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
245C:  BTFSS  x0D.1
245E:  BRA    2498
....................       { 
....................                       
....................       Testerilizacion[0]++; 
2460:  INCF   x16,F
....................       if(Testerilizacion[0]>9) 
2462:  BTFSC  x16.7
2464:  BRA    2470
2466:  MOVF   x16,W
2468:  SUBLW  09
246A:  BC    2470
....................          {Testerilizacion[0]=0; 
246C:  CLRF   x16
....................           Testerilizacion[1]++;} 
246E:  INCF   x17,F
....................        if(Testerilizacion[1]>5) 
2470:  BTFSC  x17.7
2472:  BRA    247E
2474:  MOVF   x17,W
2476:  SUBLW  05
2478:  BC    247E
....................          {Testerilizacion[1]=0; 
247A:  CLRF   x17
....................           Testerilizacion[2]++;} 
247C:  INCF   x18,F
....................          if(Testerilizacion[2]>9) 
247E:  BTFSC  x18.7
2480:  BRA    248C
2482:  MOVF   x18,W
2484:  SUBLW  09
2486:  BC    248C
....................             {Testerilizacion[2]=0; 
2488:  CLRF   x18
....................              Testerilizacion[3]++;} 
248A:  INCF   x19,F
....................             if(Testerilizacion[3]>5) 
248C:  BTFSC  x19.7
248E:  BRA    2498
2490:  MOVF   x19,W
2492:  SUBLW  05
2494:  BC    2498
....................                {Testerilizacion[3]=0;} 
2496:  CLRF   x19
....................       }        
....................        
....................     if(tiempo_secado==1) 
2498:  BTFSS  x0D.2
249A:  BRA    24D4
....................       { 
....................                       
....................       Tsecado[0]++; 
249C:  INCF   x1E,F
....................       if(Tsecado[0]>9) 
249E:  BTFSC  x1E.7
24A0:  BRA    24AC
24A2:  MOVF   x1E,W
24A4:  SUBLW  09
24A6:  BC    24AC
....................          {Tsecado[0]=0; 
24A8:  CLRF   x1E
....................           Tsecado[1]++;} 
24AA:  INCF   x1F,F
....................        if(Tsecado[1]>5) 
24AC:  BTFSC  x1F.7
24AE:  BRA    24BA
24B0:  MOVF   x1F,W
24B2:  SUBLW  05
24B4:  BC    24BA
....................          {Tsecado[1]=0; 
24B6:  CLRF   x1F
....................           Tsecado[2]++;} 
24B8:  INCF   x20,F
....................          if(Tsecado[2]>9) 
24BA:  BTFSC  x20.7
24BC:  BRA    24C8
24BE:  MOVF   x20,W
24C0:  SUBLW  09
24C2:  BC    24C8
....................             {Tsecado[2]=0; 
24C4:  CLRF   x20
....................              Tsecado[3]++;} 
24C6:  INCF   x21,F
....................             if(Tsecado[3]>5) 
24C8:  BTFSC  x21.7
24CA:  BRA    24D4
24CC:  MOVF   x21,W
24CE:  SUBLW  05
24D0:  BC    24D4
....................                {Tsecado[3]=0;} 
24D2:  CLRF   x21
....................       }   
....................    } 
....................    } 
....................     
24D4:  BCF    F9E.0
24D6:  MOVLB  0
24D8:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
.................... glcd_rect(x1, y, x2, y+7, YES, OFF);            // Clear the old voltage 
*
414C:  MOVLW  07
414E:  MOVLB  3
4150:  ADDWF  xA5,W
4152:  MOVWF  xA6
4154:  MOVFF  3A3,3B9
4158:  MOVFF  3A5,3BA
415C:  MOVFF  3A4,3BB
4160:  MOVWF  xBC
4162:  MOVLW  01
4164:  MOVWF  xBD
4166:  CLRF   xBE
4168:  MOVLB  0
416A:  CALL   2F1A
.................... } 
416E:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       sprintf(voltage, "%1.1f",adc); // Converts adc to text 
*
2FDC:  MOVLW  03
2FDE:  MOVLB  2
2FE0:  MOVWF  x62
2FE2:  MOVLW  AE
2FE4:  MOVWF  x61
2FE6:  MOVLW  89
2FE8:  MOVWF  FE9
2FEA:  MOVFF  3AA,3BA
2FEE:  MOVFF  3A9,3B9
2FF2:  MOVFF  3A8,3B8
2FF6:  MOVFF  3A7,3B7
2FFA:  MOVLW  01
2FFC:  MOVLB  3
2FFE:  MOVWF  xBB
3000:  MOVLB  0
3002:  BRA    2C30
....................       glcd_rect(x, y, x+42, y+15, YES, OFF);glcd_text57(x, y, voltage, 2, ON); 
3004:  MOVLW  2A
3006:  MOVLB  3
3008:  ADDWF  xAB,W
300A:  MOVWF  xB7
300C:  MOVLW  0F
300E:  ADDWF  xAC,W
3010:  MOVWF  xB8
3012:  MOVFF  3AB,3B9
3016:  MOVFF  3AC,3BA
301A:  MOVFF  3B7,3BB
301E:  MOVWF  xBC
3020:  MOVLW  01
3022:  MOVWF  xBD
3024:  CLRF   xBE
3026:  MOVLB  0
3028:  RCALL  2F1A
302A:  MOVFF  3AB,3B7
302E:  MOVFF  3AC,3B8
3032:  MOVLW  03
3034:  MOVLB  3
3036:  MOVWF  xBA
3038:  MOVLW  AE
303A:  MOVWF  xB9
303C:  MOVLW  02
303E:  MOVWF  xBB
3040:  MOVLW  01
3042:  MOVWF  xBC
3044:  MOVLB  0
3046:  RCALL  289C
....................        
.................... } 
3048:  RETLW  00
....................   
.................... void displayTiempo(int adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       if(w<4) 
*
3664:  MOVLB  3
3666:  MOVF   xA7,W
3668:  SUBLW  03
366A:  BNC   3686
....................       {sprintf(voltage, "%i",adc);} // Converts adc to text 
366C:  MOVLW  03
366E:  MOVLB  2
3670:  MOVWF  x62
3672:  MOVLW  A8
3674:  MOVWF  x61
3676:  MOVFF  3A4,3B1
367A:  MOVLW  1F
367C:  MOVLB  3
367E:  MOVWF  xB2
3680:  MOVLB  0
3682:  BRA    34F8
....................       else 
3684:  BRA    369E
....................       {sprintf(voltage, "%u",adc);} // Converts adc to text 
3686:  MOVLW  03
3688:  MOVLB  2
368A:  MOVWF  x62
368C:  MOVLW  A8
368E:  MOVWF  x61
3690:  MOVFF  3A4,3B1
3694:  MOVLW  1B
3696:  MOVLB  3
3698:  MOVWF  xB2
369A:  MOVLB  0
369C:  BRA    35E0
....................       if(w==0) 
369E:  MOVLB  3
36A0:  MOVF   xA7,F
36A2:  BNZ   36C2
....................       {glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
36A4:  MOVFF  3A5,3B7
36A8:  MOVFF  3A6,3B8
36AC:  MOVLW  03
36AE:  MOVWF  xBA
36B0:  MOVLW  A8
36B2:  MOVWF  xB9
36B4:  MOVLW  01
36B6:  MOVWF  xBB
36B8:  MOVWF  xBC
36BA:  MOVLB  0
36BC:  CALL   289C
36C0:  MOVLB  3
....................       if(w==1) 
36C2:  DECFSZ xA7,W
36C4:  BRA    370A
....................       {glcd_rect(x, y, x+5, y+7, YES, OFF);glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
36C6:  MOVLW  05
36C8:  ADDWF  xA5,W
36CA:  MOVWF  xB1
36CC:  MOVLW  07
36CE:  ADDWF  xA6,W
36D0:  MOVWF  xB2
36D2:  MOVFF  3A5,3B9
36D6:  MOVFF  3A6,3BA
36DA:  MOVFF  3B1,3BB
36DE:  MOVWF  xBC
36E0:  MOVLW  01
36E2:  MOVWF  xBD
36E4:  CLRF   xBE
36E6:  MOVLB  0
36E8:  RCALL  2F1A
36EA:  MOVFF  3A5,3B7
36EE:  MOVFF  3A6,3B8
36F2:  MOVLW  03
36F4:  MOVLB  3
36F6:  MOVWF  xBA
36F8:  MOVLW  A8
36FA:  MOVWF  xB9
36FC:  MOVLW  01
36FE:  MOVWF  xBB
3700:  MOVWF  xBC
3702:  MOVLB  0
3704:  CALL   289C
3708:  MOVLB  3
....................       if(w==2) 
370A:  MOVF   xA7,W
370C:  SUBLW  02
370E:  BNZ   3756
....................       {glcd_rect(x, y, x+5, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
3710:  MOVLW  05
3712:  ADDWF  xA5,W
3714:  MOVWF  xB1
3716:  MOVLW  07
3718:  ADDWF  xA6,W
371A:  MOVWF  xB2
371C:  MOVFF  3A5,3B9
3720:  MOVFF  3A6,3BA
3724:  MOVFF  3B1,3BB
3728:  MOVWF  xBC
372A:  MOVLW  01
372C:  MOVWF  xBD
372E:  MOVWF  xBE
3730:  MOVLB  0
3732:  CALL   2F1A
3736:  MOVFF  3A5,3B7
373A:  MOVFF  3A6,3B8
373E:  MOVLW  03
3740:  MOVLB  3
3742:  MOVWF  xBA
3744:  MOVLW  A8
3746:  MOVWF  xB9
3748:  MOVLW  01
374A:  MOVWF  xBB
374C:  CLRF   xBC
374E:  MOVLB  0
3750:  CALL   289C
3754:  MOVLB  3
....................       if(w==3) 
3756:  MOVF   xA7,W
3758:  SUBLW  03
375A:  BNZ   37A4
....................       {glcd_rect(x, y, x+20, y+28, YES, OFF);glcd_text57(x, y, voltage, 2, ON);}            // Clear the old voltage 
375C:  MOVLW  14
375E:  ADDWF  xA5,W
3760:  MOVWF  xB1
3762:  MOVLW  1C
3764:  ADDWF  xA6,W
3766:  MOVWF  xB2
3768:  MOVFF  3A5,3B9
376C:  MOVFF  3A6,3BA
3770:  MOVFF  3B1,3BB
3774:  MOVWF  xBC
3776:  MOVLW  01
3778:  MOVWF  xBD
377A:  CLRF   xBE
377C:  MOVLB  0
377E:  CALL   2F1A
3782:  MOVFF  3A5,3B7
3786:  MOVFF  3A6,3B8
378A:  MOVLW  03
378C:  MOVLB  3
378E:  MOVWF  xBA
3790:  MOVLW  A8
3792:  MOVWF  xB9
3794:  MOVLW  02
3796:  MOVWF  xBB
3798:  MOVLW  01
379A:  MOVWF  xBC
379C:  MOVLB  0
379E:  CALL   289C
37A2:  MOVLB  3
....................       if(w==4) 
37A4:  MOVF   xA7,W
37A6:  SUBLW  04
37A8:  BNZ   37F0
....................       {glcd_rect(x, y, x+16, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
37AA:  MOVLW  10
37AC:  ADDWF  xA5,W
37AE:  MOVWF  xB1
37B0:  MOVLW  07
37B2:  ADDWF  xA6,W
37B4:  MOVWF  xB2
37B6:  MOVFF  3A5,3B9
37BA:  MOVFF  3A6,3BA
37BE:  MOVFF  3B1,3BB
37C2:  MOVWF  xBC
37C4:  MOVLW  01
37C6:  MOVWF  xBD
37C8:  MOVWF  xBE
37CA:  MOVLB  0
37CC:  CALL   2F1A
37D0:  MOVFF  3A5,3B7
37D4:  MOVFF  3A6,3B8
37D8:  MOVLW  03
37DA:  MOVLB  3
37DC:  MOVWF  xBA
37DE:  MOVLW  A8
37E0:  MOVWF  xB9
37E2:  MOVLW  01
37E4:  MOVWF  xBB
37E6:  CLRF   xBC
37E8:  MOVLB  0
37EA:  CALL   289C
37EE:  MOVLB  3
....................       if(w==5) 
37F0:  MOVF   xA7,W
37F2:  SUBLW  05
37F4:  BNZ   383C
....................       {glcd_rect(x, y, x+12, y+16, YES, ON);glcd_text57(x, y, voltage, 2, OFF);}            // Clear the old voltage 
37F6:  MOVLW  0C
37F8:  ADDWF  xA5,W
37FA:  MOVWF  xB1
37FC:  MOVLW  10
37FE:  ADDWF  xA6,W
3800:  MOVWF  xB2
3802:  MOVFF  3A5,3B9
3806:  MOVFF  3A6,3BA
380A:  MOVFF  3B1,3BB
380E:  MOVWF  xBC
3810:  MOVLW  01
3812:  MOVWF  xBD
3814:  MOVWF  xBE
3816:  MOVLB  0
3818:  CALL   2F1A
381C:  MOVFF  3A5,3B7
3820:  MOVFF  3A6,3B8
3824:  MOVLW  03
3826:  MOVLB  3
3828:  MOVWF  xBA
382A:  MOVLW  A8
382C:  MOVWF  xB9
382E:  MOVLW  02
3830:  MOVWF  xBB
3832:  CLRF   xBC
3834:  MOVLB  0
3836:  CALL   289C
383A:  MOVLB  3
....................        
.................... } 
383C:  MOVLB  0
383E:  RETLW  00
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
253C:  MOVLB  3
253E:  RLCF   xA3,W
2540:  MOVWF  00
2542:  RLCF   00,F
2544:  MOVLW  FC
2546:  ANDWF  00,F
2548:  MOVFF  00,01
254C:  MOVF   FC2,W
254E:  ANDLW  C3
2550:  IORWF  00,W
2552:  MOVWF  FC2
2554:  MOVLW  0A
2556:  MOVWF  xA8
2558:  MOVLB  0
255A:  RCALL  24DC
255C:  BSF    FC2.1
255E:  BTFSC  FC2.1
2560:  BRA    255E
2562:  MOVFF  FC4,3A9
2566:  MOVFF  FC3,3A8
256A:  MOVLB  0
256C:  RCALL  2506
256E:  MOVFF  03,3A7
2572:  MOVFF  02,3A6
2576:  MOVFF  01,3A5
257A:  MOVFF  00,3A4
257E:  MOVFF  3A4,00
2582:  MOVFF  3A5,01
2586:  MOVFF  3A6,02
258A:  MOVFF  3A7,03
.................... } 
258E:  RETLW  00
....................  
....................  
.................... void main() 
.................... { 
*
4170:  CLRF   FF8
4172:  BCF    FD0.7
4174:  BSF    07.7
4176:  CLRF   FEA
4178:  CLRF   FE9
417A:  CLRF   1C
417C:  CLRF   20
417E:  MOVLB  2
4180:  CLRF   x00
4182:  MOVLW  20
4184:  MOVWF  x01
4186:  MOVLW  10
4188:  MOVWF  x02
418A:  MOVLW  0B
418C:  MOVWF  x03
418E:  MOVLW  10
4190:  MOVWF  x04
4192:  MOVLW  03
4194:  MOVWF  x05
4196:  MOVLW  10
4198:  MOVWF  x06
419A:  MOVWF  x07
419C:  MOVLW  20
419E:  MOVWF  x08
41A0:  MOVLW  24
41A2:  MOVWF  x09
41A4:  MOVLW  08
41A6:  MOVWF  x0A
41A8:  CLRF   x0B
41AA:  BCF    x0C.0
41AC:  BCF    x0C.1
41AE:  BCF    x0C.2
41B0:  BCF    x0C.3
41B2:  BCF    x0C.4
41B4:  BCF    x0C.5
41B6:  BCF    x0C.6
41B8:  BCF    x0C.7
41BA:  BCF    x0D.0
41BC:  CLRF   x0F
41BE:  CLRF   x0E
41C0:  CLRF   x11
41C2:  CLRF   x10
41C4:  CLRF   x13
41C6:  CLRF   x12
41C8:  CLRF   x15
41CA:  CLRF   x14
41CC:  BCF    x0D.1
41CE:  BCF    x0D.2
41D0:  BCF    x0D.3
41D2:  BCF    x0D.4
41D4:  BCF    x0D.5
41D6:  BCF    x0D.6
41D8:  BCF    x0D.7
41DA:  BCF    x26.0
41DC:  BCF    x26.1
41DE:  MOVLW  79
41E0:  MOVWF  x27
41E2:  CLRF   x28
41E4:  CLRF   x29
41E6:  MOVLW  0A
41E8:  MOVWF  x2B
41EA:  MOVLW  64
41EC:  MOVWF  x2C
41EE:  CLRF   x2D
41F0:  MOVWF  x2E
41F2:  CLRF   x2F
41F4:  CLRF   x30
41F6:  MOVLW  CD
41F8:  MOVWF  x38
41FA:  MOVLW  2C
41FC:  MOVWF  x37
41FE:  MOVLW  7A
4200:  MOVWF  x36
4202:  MOVLW  88
4204:  MOVWF  x35
4206:  CLRF   x40
4208:  CLRF   x3F
420A:  MOVLW  20
420C:  MOVWF  x3E
420E:  MOVLW  82
4210:  MOVWF  x3D
4212:  CLRF   x44
4214:  CLRF   x43
4216:  CLRF   x42
4218:  CLRF   x41
421A:  CLRF   x48
421C:  CLRF   x47
421E:  CLRF   x46
4220:  CLRF   x45
4222:  CLRF   x4C
4224:  CLRF   x4B
4226:  CLRF   x4A
4228:  CLRF   x49
422A:  CLRF   x50
422C:  CLRF   x4F
422E:  CLRF   x4E
4230:  CLRF   x4D
4232:  CLRF   x54
4234:  CLRF   x53
4236:  CLRF   x52
4238:  CLRF   x51
423A:  CLRF   x58
423C:  CLRF   x57
423E:  MOVLW  20
4240:  MOVWF  x56
4242:  MOVLW  82
4244:  MOVWF  x55
4246:  CLRF   x5C
4248:  CLRF   x5B
424A:  CLRF   x5A
424C:  CLRF   x59
424E:  CLRF   x60
4250:  CLRF   x5F
4252:  CLRF   x5E
4254:  CLRF   x5D
4256:  MOVF   FC1,W
4258:  ANDLW  C0
425A:  IORLW  0F
425C:  MOVWF  FC1
425E:  MOVLW  07
4260:  MOVWF  FB4
4262:  MOVLW  4A
4264:  MOVLB  0
4266:  MOVWF  x62
4268:  MOVLW  50
426A:  MOVWF  x63
426C:  MOVLW  20
426E:  MOVWF  x64
4270:  MOVLW  49
4272:  MOVWF  x65
4274:  MOVLW  6E
4276:  MOVWF  x66
4278:  MOVLW  67
427A:  MOVWF  x67
427C:  MOVLW  6C
427E:  MOVWF  x68
4280:  MOVLW  6F
4282:  MOVWF  x69
4284:  MOVLW  62
4286:  MOVWF  x6A
4288:  MOVLW  61
428A:  MOVWF  x6B
428C:  MOVLW  6C
428E:  MOVWF  x6C
4290:  CLRF   x6D
4292:  MOVLW  41
4294:  MOVWF  x6E
4296:  MOVLW  75
4298:  MOVWF  x6F
429A:  MOVLW  74
429C:  MOVWF  x70
429E:  MOVLW  6F
42A0:  MOVWF  x71
42A2:  MOVLW  63
42A4:  MOVWF  x72
42A6:  MOVLW  6C
42A8:  MOVWF  x73
42AA:  MOVLW  61
42AC:  MOVWF  x74
42AE:  MOVLW  76
42B0:  MOVWF  x75
42B2:  MOVLW  65
42B4:  MOVWF  x76
42B6:  MOVLW  20
42B8:  MOVWF  x77
42BA:  MOVLW  56
42BC:  MOVWF  x78
42BE:  MOVLW  65
42C0:  MOVWF  x79
42C2:  MOVLW  72
42C4:  MOVWF  x7A
42C6:  MOVLW  74
42C8:  MOVWF  x7B
42CA:  MOVLW  69
42CC:  MOVWF  x7C
42CE:  MOVLW  63
42D0:  MOVWF  x7D
42D2:  MOVLW  61
42D4:  MOVWF  x7E
42D6:  MOVLW  6C
42D8:  MOVWF  x7F
42DA:  CLRF   x80
42DC:  MOVLW  54
42DE:  MOVWF  x81
42E0:  MOVLW  20
42E2:  MOVWF  x82
42E4:  MOVLW  65
42E6:  MOVWF  x83
42E8:  MOVLW  73
42EA:  MOVWF  x84
42EC:  MOVLW  74
42EE:  MOVWF  x85
42F0:  MOVLW  3D
42F2:  MOVWF  x86
42F4:  CLRF   x87
42F6:  MOVLW  54
42F8:  MOVWF  x88
42FA:  MOVLW  20
42FC:  MOVWF  x89
42FE:  MOVLW  73
4300:  MOVWF  x8A
4302:  MOVLW  65
4304:  MOVWF  x8B
4306:  MOVLW  63
4308:  MOVWF  x8C
430A:  MOVLW  3D
430C:  MOVWF  x8D
430E:  CLRF   x8E
4310:  MOVLW  38
4312:  MOVWF  x8F
4314:  MOVLW  30
4316:  MOVWF  x90
4318:  MOVLW  20
431A:  MOVWF  x91
431C:  MOVLW  4C
431E:  MOVWF  x92
4320:  MOVLW  69
4322:  MOVWF  x93
4324:  MOVLW  74
4326:  MOVWF  x94
4328:  MOVLW  72
432A:  MOVWF  x95
432C:  MOVLW  6F
432E:  MOVWF  x96
4330:  MOVLW  73
4332:  MOVWF  x97
4334:  CLRF   x98
4336:  MOVLW  43
4338:  MOVWF  x99
433A:  MOVLW  61
433C:  MOVWF  x9A
433E:  MOVLW  6D
4340:  MOVWF  x9B
4342:  MOVLW  62
4344:  MOVWF  x9C
4346:  MOVLW  69
4348:  MOVWF  x9D
434A:  MOVLW  6F
434C:  MOVWF  x9E
434E:  MOVLW  20
4350:  MOVWF  x9F
4352:  MOVLW  43
4354:  MOVWF  xA0
4356:  MOVLW  6F
4358:  MOVWF  xA1
435A:  MOVLW  6E
435C:  MOVWF  xA2
435E:  MOVLW  74
4360:  MOVWF  xA3
4362:  MOVLW  72
4364:  MOVWF  xA4
4366:  MOVLW  61
4368:  MOVWF  xA5
436A:  MOVLW  73
436C:  MOVWF  xA6
436E:  MOVLW  65
4370:  MOVWF  xA7
4372:  MOVLW  6E
4374:  MOVWF  xA8
4376:  MOVLW  61
4378:  MOVWF  xA9
437A:  CLRF   xAA
437C:  MOVLW  4D
437E:  MOVWF  xAB
4380:  MOVLW  65
4382:  MOVWF  xAC
4384:  MOVLW  6E
4386:  MOVWF  xAD
4388:  MOVLW  75
438A:  MOVWF  xAE
438C:  CLRF   xAF
438E:  MOVLW  3E
4390:  MOVWF  xB0
4392:  CLRF   xB1
4394:  MOVLW  49
4396:  MOVWF  xB2
4398:  MOVLW  6E
439A:  MOVWF  xB3
439C:  MOVLW  69
439E:  MOVWF  xB4
43A0:  MOVLW  63
43A2:  MOVWF  xB5
43A4:  MOVLW  69
43A6:  MOVWF  xB6
43A8:  MOVLW  61
43AA:  MOVWF  xB7
43AC:  MOVLW  72
43AE:  MOVWF  xB8
43B0:  MOVLW  20
43B2:  MOVWF  xB9
43B4:  MOVLW  50
43B6:  MOVWF  xBA
43B8:  MOVLW  72
43BA:  MOVWF  xBB
43BC:  MOVLW  6F
43BE:  MOVWF  xBC
43C0:  MOVLW  63
43C2:  MOVWF  xBD
43C4:  MOVLW  65
43C6:  MOVWF  xBE
43C8:  MOVLW  73
43CA:  MOVWF  xBF
43CC:  MOVLW  6F
43CE:  MOVWF  xC0
43D0:  CLRF   xC1
43D2:  MOVLW  43
43D4:  MOVWF  xC2
43D6:  MOVLW  69
43D8:  MOVWF  xC3
43DA:  MOVLW  63
43DC:  MOVWF  xC4
43DE:  MOVLW  6C
43E0:  MOVWF  xC5
43E2:  MOVLW  6F
43E4:  MOVWF  xC6
43E6:  CLRF   xC7
43E8:  MOVLW  50
43EA:  MOVWF  xC8
43EC:  MOVLW  72
43EE:  MOVWF  xC9
43F0:  MOVLW  6F
43F2:  MOVWF  xCA
43F4:  MOVLW  63
43F6:  MOVWF  xCB
43F8:  MOVLW  65
43FA:  MOVWF  xCC
43FC:  MOVLW  73
43FE:  MOVWF  xCD
4400:  MOVLW  6F
4402:  MOVWF  xCE
4404:  CLRF   xCF
4406:  MOVLW  54
4408:  MOVWF  xD0
440A:  MOVLW  65
440C:  MOVWF  xD1
440E:  MOVLW  78
4410:  MOVWF  xD2
4412:  MOVLW  74
4414:  MOVWF  xD3
4416:  MOVLW  69
4418:  MOVWF  xD4
441A:  MOVLW  6C
441C:  MOVWF  xD5
441E:  MOVLW  2D
4420:  MOVWF  xD6
4422:  MOVLW  49
4424:  MOVWF  xD7
4426:  MOVLW  6E
4428:  MOVWF  xD8
442A:  MOVLW  73
442C:  MOVWF  xD9
442E:  MOVLW  74
4430:  MOVWF  xDA
4432:  MOVLW  72
4434:  MOVWF  xDB
4436:  MOVLW  75
4438:  MOVWF  xDC
443A:  MOVLW  6D
443C:  MOVWF  xDD
443E:  MOVLW  65
4440:  MOVWF  xDE
4442:  MOVLW  6E
4444:  MOVWF  xDF
4446:  MOVLW  74
4448:  MOVWF  xE0
444A:  MOVLW  61
444C:  MOVWF  xE1
444E:  MOVLW  6C
4450:  MOVWF  xE2
4452:  CLRF   xE3
4454:  MOVLW  43
4456:  MOVWF  xE4
4458:  MOVLW  61
445A:  MOVWF  xE5
445C:  MOVLW  6C
445E:  MOVWF  xE6
4460:  MOVLW  65
4462:  MOVWF  xE7
4464:  MOVLW  6E
4466:  MOVWF  xE8
4468:  MOVLW  74
446A:  MOVWF  xE9
446C:  MOVLW  61
446E:  MOVWF  xEA
4470:  MOVLW  6E
4472:  MOVWF  xEB
4474:  MOVLW  64
4476:  MOVWF  xEC
4478:  MOVLW  6F
447A:  MOVWF  xED
447C:  CLRF   xEE
447E:  MOVLW  4E
4480:  MOVWF  xEF
4482:  MOVLW  69
4484:  MOVWF  xF0
4486:  MOVLW  76
4488:  MOVWF  xF1
448A:  MOVLW  65
448C:  MOVWF  xF2
448E:  MOVLW  6C
4490:  MOVWF  xF3
4492:  CLRF   xF4
4494:  MOVLW  43
4496:  MOVWF  xF5
4498:  MOVLW  61
449A:  MOVWF  xF6
449C:  MOVLW  75
449E:  MOVWF  xF7
44A0:  MOVLW  63
44A2:  MOVWF  xF8
44A4:  MOVLW  68
44A6:  MOVWF  xF9
44A8:  MOVLW  6F
44AA:  MOVWF  xFA
44AC:  CLRF   xFB
44AE:  MOVLW  49
44B0:  MOVWF  xFC
44B2:  MOVLW  6E
44B4:  MOVWF  xFD
44B6:  MOVLW  73
44B8:  MOVWF  xFE
44BA:  MOVLW  74
44BC:  MOVWF  xFF
44BE:  MOVLW  72
44C0:  MOVLB  1
44C2:  MOVWF  x00
44C4:  MOVLW  75
44C6:  MOVWF  x01
44C8:  MOVLW  6D
44CA:  MOVWF  x02
44CC:  MOVLW  65
44CE:  MOVWF  x03
44D0:  MOVLW  6E
44D2:  MOVWF  x04
44D4:  MOVLW  74
44D6:  MOVWF  x05
44D8:  MOVLW  61
44DA:  MOVWF  x06
44DC:  MOVLW  6C
44DE:  MOVWF  x07
44E0:  MOVLW  20
44E2:  MOVWF  x08
44E4:  MOVLW  53
44E6:  MOVWF  x09
44E8:  MOVLW  75
44EA:  MOVWF  x0A
44EC:  MOVLW  61
44EE:  MOVWF  x0B
44F0:  MOVLW  76
44F2:  MOVWF  x0C
44F4:  MOVLW  65
44F6:  MOVWF  x0D
44F8:  CLRF   x0E
44FA:  MOVLW  45
44FC:  MOVWF  x0F
44FE:  MOVLW  73
4500:  MOVWF  x10
4502:  MOVLW  74
4504:  MOVWF  x11
4506:  MOVLW  65
4508:  MOVWF  x12
450A:  MOVLW  72
450C:  MOVWF  x13
450E:  MOVLW  69
4510:  MOVWF  x14
4512:  MOVLW  6C
4514:  MOVWF  x15
4516:  MOVLW  69
4518:  MOVWF  x16
451A:  MOVLW  7A
451C:  MOVWF  x17
451E:  MOVLW  61
4520:  MOVWF  x18
4522:  MOVLW  6E
4524:  MOVWF  x19
4526:  MOVLW  64
4528:  MOVWF  x1A
452A:  MOVLW  6F
452C:  MOVWF  x1B
452E:  CLRF   x1C
4530:  MOVLW  53
4532:  MOVWF  x1D
4534:  MOVLW  65
4536:  MOVWF  x1E
4538:  MOVLW  63
453A:  MOVWF  x1F
453C:  MOVLW  61
453E:  MOVWF  x20
4540:  MOVLW  6E
4542:  MOVWF  x21
4544:  MOVLW  64
4546:  MOVWF  x22
4548:  MOVLW  6F
454A:  MOVWF  x23
454C:  CLRF   x24
454E:  MOVLW  4C
4550:  MOVWF  x25
4552:  MOVLW  69
4554:  MOVWF  x26
4556:  MOVLW  71
4558:  MOVWF  x27
455A:  MOVLW  75
455C:  MOVWF  x28
455E:  MOVLW  69
4560:  MOVWF  x29
4562:  MOVLW  64
4564:  MOVWF  x2A
4566:  MOVLW  6F
4568:  MOVWF  x2B
456A:  MOVLW  73
456C:  MOVWF  x2C
456E:  CLRF   x2D
4570:  MOVLW  3A
4572:  MOVWF  x2E
4574:  CLRF   x2F
4576:  MOVLW  4C
4578:  MOVWF  x30
457A:  MOVLW  69
457C:  MOVWF  x31
457E:  MOVLW  62
4580:  MOVWF  x32
4582:  MOVLW  72
4584:  MOVWF  x33
4586:  MOVLW  65
4588:  MOVWF  x34
458A:  CLRF   x35
458C:  MOVLW  54
458E:  MOVWF  x36
4590:  MOVLW  3A
4592:  MOVWF  x37
4594:  MOVLW  31
4596:  MOVWF  x38
4598:  MOVLW  33
459A:  MOVWF  x39
459C:  MOVLW  34
459E:  MOVWF  x3A
45A0:  MOVLW  B0
45A2:  MOVWF  x3B
45A4:  MOVLW  43
45A6:  MOVWF  x3C
45A8:  CLRF   x3D
45AA:  MOVLW  74
45AC:  MOVWF  x3E
45AE:  MOVLW  5F
45B0:  MOVWF  x3F
45B2:  MOVLW  65
45B4:  MOVWF  x40
45B6:  MOVLW  73
45B8:  MOVWF  x41
45BA:  MOVLW  74
45BC:  MOVWF  x42
45BE:  MOVLW  3A
45C0:  MOVWF  x43
45C2:  MOVLW  35
45C4:  MOVWF  x44
45C6:  MOVLW  6D
45C8:  MOVWF  x45
45CA:  CLRF   x46
45CC:  MOVLW  74
45CE:  MOVWF  x47
45D0:  MOVLW  5F
45D2:  MOVWF  x48
45D4:  MOVLW  73
45D6:  MOVWF  x49
45D8:  MOVLW  65
45DA:  MOVWF  x4A
45DC:  MOVLW  63
45DE:  MOVWF  x4B
45E0:  MOVLW  3A
45E2:  MOVWF  x4C
45E4:  MOVLW  31
45E6:  MOVWF  x4D
45E8:  MOVLW  35
45EA:  MOVWF  x4E
45EC:  MOVLW  6D
45EE:  MOVWF  x4F
45F0:  CLRF   x50
45F2:  MOVLW  43
45F4:  MOVWF  x51
45F6:  CLRF   x52
45F8:  MOVLW  54
45FA:  MOVWF  x53
45FC:  MOVLW  3A
45FE:  MOVWF  x54
4600:  MOVLW  31
4602:  MOVWF  x55
4604:  MOVLW  32
4606:  MOVWF  x56
4608:  MOVLW  31
460A:  MOVWF  x57
460C:  MOVLW  B0
460E:  MOVWF  x58
4610:  MOVLW  43
4612:  MOVWF  x59
4614:  CLRF   x5A
4616:  MOVLW  74
4618:  MOVWF  x5B
461A:  MOVLW  5F
461C:  MOVWF  x5C
461E:  MOVLW  65
4620:  MOVWF  x5D
4622:  MOVLW  73
4624:  MOVWF  x5E
4626:  MOVLW  74
4628:  MOVWF  x5F
462A:  MOVLW  3A
462C:  MOVWF  x60
462E:  MOVLW  32
4630:  MOVWF  x61
4632:  MOVLW  35
4634:  MOVWF  x62
4636:  MOVLW  6D
4638:  MOVWF  x63
463A:  CLRF   x64
463C:  MOVLW  74
463E:  MOVWF  x65
4640:  MOVLW  5F
4642:  MOVWF  x66
4644:  MOVLW  73
4646:  MOVWF  x67
4648:  MOVLW  65
464A:  MOVWF  x68
464C:  MOVLW  63
464E:  MOVWF  x69
4650:  MOVLW  3A
4652:  MOVWF  x6A
4654:  MOVLW  31
4656:  MOVWF  x6B
4658:  MOVLW  35
465A:  MOVWF  x6C
465C:  MOVLW  6D
465E:  MOVWF  x6D
4660:  CLRF   x6E
4662:  MOVLW  54
4664:  MOVWF  x6F
4666:  MOVLW  3A
4668:  MOVWF  x70
466A:  MOVLW  31
466C:  MOVWF  x71
466E:  MOVLW  32
4670:  MOVWF  x72
4672:  MOVLW  31
4674:  MOVWF  x73
4676:  MOVLW  B0
4678:  MOVWF  x74
467A:  MOVLW  43
467C:  MOVWF  x75
467E:  CLRF   x76
4680:  MOVLW  74
4682:  MOVWF  x77
4684:  MOVLW  5F
4686:  MOVWF  x78
4688:  MOVLW  65
468A:  MOVWF  x79
468C:  MOVLW  73
468E:  MOVWF  x7A
4690:  MOVLW  74
4692:  MOVWF  x7B
4694:  MOVLW  3A
4696:  MOVWF  x7C
4698:  MOVLW  32
469A:  MOVWF  x7D
469C:  MOVLW  30
469E:  MOVWF  x7E
46A0:  MOVLW  6D
46A2:  MOVWF  x7F
46A4:  CLRF   x80
46A6:  MOVLW  44
46A8:  MOVWF  x81
46AA:  MOVLW  65
46AC:  MOVWF  x82
46AE:  MOVLW  73
46B0:  MOVWF  x83
46B2:  MOVLW  66
46B4:  MOVWF  x84
46B6:  MOVLW  6F
46B8:  MOVWF  x85
46BA:  MOVLW  67
46BC:  MOVWF  x86
46BE:  MOVLW  75
46C0:  MOVWF  x87
46C2:  MOVLW  65
46C4:  MOVWF  x88
46C6:  MOVLW  20
46C8:  MOVWF  x89
46CA:  MOVLW  4C
46CC:  MOVWF  x8A
46CE:  MOVLW  65
46D0:  MOVWF  x8B
46D2:  MOVLW  6E
46D4:  MOVWF  x8C
46D6:  MOVLW  74
46D8:  MOVWF  x8D
46DA:  MOVLW  6F
46DC:  MOVWF  x8E
46DE:  CLRF   x8F
46E0:  MOVLW  74
46E2:  MOVWF  x90
46E4:  MOVLW  5F
46E6:  MOVWF  x91
46E8:  MOVLW  73
46EA:  MOVWF  x92
46EC:  MOVLW  65
46EE:  MOVWF  x93
46F0:  MOVLW  63
46F2:  MOVWF  x94
46F4:  MOVLW  3A
46F6:  MOVWF  x95
46F8:  MOVLW  4E
46FA:  MOVWF  x96
46FC:  MOVLW  2F
46FE:  MOVWF  x97
4700:  MOVLW  41
4702:  MOVWF  x98
4704:  CLRF   x99
4706:  MOVLW  54
4708:  MOVWF  x9A
470A:  MOVLW  3A
470C:  MOVWF  x9B
470E:  MOVLW  31
4710:  MOVWF  x9C
4712:  MOVLW  32
4714:  MOVWF  x9D
4716:  MOVLW  31
4718:  MOVWF  x9E
471A:  MOVLW  B0
471C:  MOVWF  x9F
471E:  MOVLW  43
4720:  MOVWF  xA0
4722:  CLRF   xA1
4724:  MOVLW  74
4726:  MOVWF  xA2
4728:  MOVLW  5F
472A:  MOVWF  xA3
472C:  MOVLW  65
472E:  MOVWF  xA4
4730:  MOVLW  73
4732:  MOVWF  xA5
4734:  MOVLW  74
4736:  MOVWF  xA6
4738:  MOVLW  3A
473A:  MOVWF  xA7
473C:  MOVLW  32
473E:  MOVWF  xA8
4740:  MOVLW  30
4742:  MOVWF  xA9
4744:  MOVLW  6D
4746:  MOVWF  xAA
4748:  CLRF   xAB
474A:  MOVLW  74
474C:  MOVWF  xAC
474E:  MOVLW  5F
4750:  MOVWF  xAD
4752:  MOVLW  73
4754:  MOVWF  xAE
4756:  MOVLW  65
4758:  MOVWF  xAF
475A:  MOVLW  63
475C:  MOVWF  xB0
475E:  MOVLW  3A
4760:  MOVWF  xB1
4762:  MOVLW  4E
4764:  MOVWF  xB2
4766:  MOVLW  2F
4768:  MOVWF  xB3
476A:  MOVLW  41
476C:  MOVWF  xB4
476E:  CLRF   xB5
4770:  MOVLW  4F
4772:  MOVWF  xB6
4774:  MOVLW  4B
4776:  MOVWF  xB7
4778:  CLRF   xB8
477A:  MOVLW  54
477C:  MOVWF  xB9
477E:  MOVLW  65
4780:  MOVWF  xBA
4782:  MOVLW  6D
4784:  MOVWF  xBB
4786:  MOVLW  70
4788:  MOVWF  xBC
478A:  MOVLW  65
478C:  MOVWF  xBD
478E:  MOVLW  72
4790:  MOVWF  xBE
4792:  MOVLW  61
4794:  MOVWF  xBF
4796:  MOVLW  74
4798:  MOVWF  xC0
479A:  MOVLW  75
479C:  MOVWF  xC1
479E:  MOVLW  72
47A0:  MOVWF  xC2
47A2:  MOVLW  61
47A4:  MOVWF  xC3
47A6:  CLRF   xC4
47A8:  MOVLW  54
47AA:  MOVWF  xC5
47AC:  MOVLW  20
47AE:  MOVWF  xC6
47B0:  MOVLW  45
47B2:  MOVWF  xC7
47B4:  MOVLW  73
47B6:  MOVWF  xC8
47B8:  MOVLW  74
47BA:  MOVWF  xC9
47BC:  MOVLW  65
47BE:  MOVWF  xCA
47C0:  MOVLW  72
47C2:  MOVWF  xCB
47C4:  MOVLW  69
47C6:  MOVWF  xCC
47C8:  MOVLW  6C
47CA:  MOVWF  xCD
47CC:  MOVLW  69
47CE:  MOVWF  xCE
47D0:  MOVLW  7A
47D2:  MOVWF  xCF
47D4:  MOVLW  61
47D6:  MOVWF  xD0
47D8:  MOVLW  63
47DA:  MOVWF  xD1
47DC:  MOVLW  69
47DE:  MOVWF  xD2
47E0:  MOVLW  6F
47E2:  MOVWF  xD3
47E4:  MOVLW  6E
47E6:  MOVWF  xD4
47E8:  CLRF   xD5
47EA:  MOVLW  54
47EC:  MOVWF  xD6
47EE:  MOVLW  20
47F0:  MOVWF  xD7
47F2:  MOVLW  53
47F4:  MOVWF  xD8
47F6:  MOVLW  65
47F8:  MOVWF  xD9
47FA:  MOVLW  63
47FC:  MOVWF  xDA
47FE:  MOVLW  61
4800:  MOVWF  xDB
4802:  MOVLW  64
4804:  MOVWF  xDC
4806:  MOVLW  6F
4808:  MOVWF  xDD
480A:  CLRF   xDE
480C:  MOVLW  44
480E:  MOVWF  xDF
4810:  MOVLW  65
4812:  MOVWF  xE0
4814:  MOVLW  73
4816:  MOVWF  xE1
4818:  MOVLW  66
481A:  MOVWF  xE2
481C:  MOVLW  6F
481E:  MOVWF  xE3
4820:  MOVLW  67
4822:  MOVWF  xE4
4824:  MOVLW  75
4826:  MOVWF  xE5
4828:  MOVLW  65
482A:  MOVWF  xE6
482C:  MOVLW  20
482E:  MOVWF  xE7
4830:  MOVLW  52
4832:  MOVWF  xE8
4834:  MOVLW  61
4836:  MOVWF  xE9
4838:  MOVLW  70
483A:  MOVWF  xEA
483C:  MOVLW  69
483E:  MOVWF  xEB
4840:  MOVLW  64
4842:  MOVWF  xEC
4844:  MOVLW  6F
4846:  MOVWF  xED
4848:  CLRF   xEE
484A:  MOVLW  53
484C:  MOVWF  xEF
484E:  MOVLW  69
4850:  MOVWF  xF0
4852:  CLRF   xF1
4854:  MOVLW  4E
4856:  MOVWF  xF2
4858:  MOVLW  6F
485A:  MOVWF  xF3
485C:  CLRF   xF4
485E:  MOVLW  46
4860:  MOVWF  xF5
4862:  MOVLW  69
4864:  MOVWF  xF6
4866:  MOVLW  6E
4868:  MOVWF  xF7
486A:  MOVLW  61
486C:  MOVWF  xF8
486E:  MOVLW  6C
4870:  MOVWF  xF9
4872:  MOVLW  69
4874:  MOVWF  xFA
4876:  MOVLW  7A
4878:  MOVWF  xFB
487A:  MOVLW  61
487C:  MOVWF  xFC
487E:  MOVLW  64
4880:  MOVWF  xFD
4882:  MOVLW  6F
4884:  MOVWF  xFE
4886:  CLRF   xFF
4888:  MOVLB  2
488A:  CLRF   x16
488C:  CLRF   x17
488E:  CLRF   x18
4890:  CLRF   x19
4892:  CLRF   x1A
4894:  CLRF   x1B
4896:  CLRF   x1C
4898:  CLRF   x1D
489A:  CLRF   x1E
489C:  CLRF   x1F
489E:  CLRF   x20
48A0:  CLRF   x21
48A2:  CLRF   x22
48A4:  CLRF   x23
48A6:  CLRF   x24
48A8:  CLRF   x25
48AA:  CLRF   x61
48AC:  CLRF   x62
....................    // TODO: USER CODE!! 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
48AE:  MOVLW  85
48B0:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
48B2:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
48B4:  MOVF   FC1,W
48B6:  ANDLW  C0
48B8:  IORLW  0E
48BA:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
48BC:  BCF    FC0.0
48BE:  BSF    FC0.1
48C0:  BCF    FC0.2
48C2:  BSF    FC0.7
48C4:  BSF    FC2.0
....................    sensores(0); 
48C6:  MOVLB  3
48C8:  CLRF   xA3
48CA:  MOVLB  0
48CC:  CALL   253C
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
48D0:  MOVFF  FF2,3A3
48D4:  BCF    FF2.7
48D6:  CLRF   FA9
48D8:  BCF    FA6.6
48DA:  BCF    FA6.7
48DC:  BSF    FA6.0
48DE:  MOVF   FA8,W
48E0:  MOVLB  3
48E2:  BTFSC  xA3.7
48E4:  BSF    FF2.7
48E6:  MOVLB  2
48E8:  MOVWF  x1A
48EA:  MOVFF  FF2,3A3
48EE:  BCF    FF2.7
48F0:  MOVLW  01
48F2:  MOVWF  FA9
48F4:  BCF    FA6.6
48F6:  BCF    FA6.7
48F8:  BSF    FA6.0
48FA:  MOVF   FA8,W
48FC:  MOVLB  3
48FE:  BTFSC  xA3.7
4900:  BSF    FF2.7
4902:  MOVLB  2
4904:  MOVWF  x1B
4906:  MOVFF  FF2,3A3
490A:  BCF    FF2.7
490C:  MOVLW  02
490E:  MOVWF  FA9
4910:  BCF    FA6.6
4912:  BCF    FA6.7
4914:  BSF    FA6.0
4916:  MOVF   FA8,W
4918:  MOVLB  3
491A:  BTFSC  xA3.7
491C:  BSF    FF2.7
491E:  MOVLB  2
4920:  MOVWF  x1C
4922:  MOVFF  FF2,3A3
4926:  BCF    FF2.7
4928:  MOVLW  03
492A:  MOVWF  FA9
492C:  BCF    FA6.6
492E:  BCF    FA6.7
4930:  BSF    FA6.0
4932:  MOVF   FA8,W
4934:  MOVLB  3
4936:  BTFSC  xA3.7
4938:  BSF    FF2.7
493A:  MOVLB  2
493C:  MOVWF  x1D
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
493E:  MOVFF  FF2,3A3
4942:  BCF    FF2.7
4944:  MOVLW  04
4946:  MOVWF  FA9
4948:  BCF    FA6.6
494A:  BCF    FA6.7
494C:  BSF    FA6.0
494E:  MOVF   FA8,W
4950:  MOVLB  3
4952:  BTFSC  xA3.7
4954:  BSF    FF2.7
4956:  MOVLB  2
4958:  MOVWF  x22
495A:  MOVFF  FF2,3A3
495E:  BCF    FF2.7
4960:  MOVLW  05
4962:  MOVWF  FA9
4964:  BCF    FA6.6
4966:  BCF    FA6.7
4968:  BSF    FA6.0
496A:  MOVF   FA8,W
496C:  MOVLB  3
496E:  BTFSC  xA3.7
4970:  BSF    FF2.7
4972:  MOVLB  2
4974:  MOVWF  x23
4976:  MOVFF  FF2,3A3
497A:  BCF    FF2.7
497C:  MOVLW  06
497E:  MOVWF  FA9
4980:  BCF    FA6.6
4982:  BCF    FA6.7
4984:  BSF    FA6.0
4986:  MOVF   FA8,W
4988:  MOVLB  3
498A:  BTFSC  xA3.7
498C:  BSF    FF2.7
498E:  MOVLB  2
4990:  MOVWF  x24
4992:  MOVFF  FF2,3A3
4996:  BCF    FF2.7
4998:  MOVLW  07
499A:  MOVWF  FA9
499C:  BCF    FA6.6
499E:  BCF    FA6.7
49A0:  BSF    FA6.0
49A2:  MOVF   FA8,W
49A4:  MOVLB  3
49A6:  BTFSC  xA3.7
49A8:  BSF    FF2.7
49AA:  MOVLB  2
49AC:  MOVWF  x25
49AE:  MOVFF  FF2,3A3
49B2:  BCF    FF2.7
49B4:  MOVLW  08
49B6:  MOVWF  FA9
49B8:  BCF    FA6.6
49BA:  BCF    FA6.7
49BC:  BSF    FA6.0
49BE:  MOVF   FA8,W
49C0:  MOVLB  3
49C2:  BTFSC  xA3.7
49C4:  BSF    FF2.7
49C6:  MOVLB  2
49C8:  MOVWF  x27
....................    Nivel=read_eeprom(9);Minutos=read_eeprom(20); 
49CA:  MOVFF  FF2,3A3
49CE:  BCF    FF2.7
49D0:  MOVLW  09
49D2:  MOVWF  FA9
49D4:  BCF    FA6.6
49D6:  BCF    FA6.7
49D8:  BSF    FA6.0
49DA:  MOVF   FA8,W
49DC:  MOVLB  3
49DE:  BTFSC  xA3.7
49E0:  BSF    FF2.7
49E2:  MOVLB  2
49E4:  MOVWF  x2A
49E6:  MOVFF  FF2,3A3
49EA:  BCF    FF2.7
49EC:  MOVLW  14
49EE:  MOVWF  FA9
49F0:  BCF    FA6.6
49F2:  BCF    FA6.7
49F4:  BSF    FA6.0
49F6:  MOVF   FA8,W
49F8:  MOVLB  3
49FA:  BTFSC  xA3.7
49FC:  BSF    FF2.7
49FE:  MOVLB  2
4A00:  MOVWF  x2B
....................    float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
4A02:  CLRF   x63
4A04:  CLRF   x64
4A06:  CLRF   x65
4A08:  CLRF   x66
4A0A:  CLRF   x67
4A0C:  CLRF   x68
4A0E:  CLRF   x69
4A10:  CLRF   x6A
4A12:  CLRF   x6B
4A14:  CLRF   x6C
4A16:  CLRF   x6D
4A18:  CLRF   x6E
4A1A:  CLRF   x6F
4A1C:  CLRF   x70
4A1E:  CLRF   x71
4A20:  CLRF   x72
4A22:  CLRF   x73
4A24:  CLRF   x74
4A26:  CLRF   x75
4A28:  CLRF   x76
4A2A:  CLRF   x77
4A2C:  CLRF   x78
4A2E:  CLRF   x79
4A30:  CLRF   x7A
4A32:  CLRF   x7B
4A34:  CLRF   x7C
4A36:  CLRF   x7D
4A38:  CLRF   x7E
4A3A:  CLRF   x7F
4A3C:  CLRF   x80
4A3E:  CLRF   x81
4A40:  CLRF   x82
4A42:  CLRF   x83
4A44:  CLRF   x84
4A46:  CLRF   x85
4A48:  CLRF   x86
4A4A:  CLRF   x87
4A4C:  CLRF   x88
4A4E:  CLRF   x89
4A50:  CLRF   x8A
4A52:  CLRF   x8B
4A54:  CLRF   x8C
4A56:  CLRF   x8D
4A58:  CLRF   x8E
4A5A:  CLRF   x8F
4A5C:  CLRF   x90
4A5E:  CLRF   x91
4A60:  CLRF   x92
4A62:  CLRF   x93
4A64:  CLRF   x94
4A66:  CLRF   x95
4A68:  CLRF   x96
4A6A:  CLRF   x97
4A6C:  CLRF   x98
4A6E:  CLRF   x99
4A70:  CLRF   x9A
4A72:  CLRF   x9B
4A74:  CLRF   x9C
4A76:  CLRF   x9D
4A78:  CLRF   x9E
4A7A:  CLRF   x9F
4A7C:  CLRF   xA0
4A7E:  CLRF   xA1
4A80:  CLRF   xA2
4A82:  CLRF   xA3
4A84:  CLRF   xA4
4A86:  CLRF   xA5
4A88:  CLRF   xA6
4A8A:  CLRF   xA7
4A8C:  CLRF   xA8
4A8E:  CLRF   xA9
4A90:  CLRF   xAA
4A92:  CLRF   xAB
4A94:  CLRF   xAC
4A96:  CLRF   xAD
4A98:  CLRF   xAE
4A9A:  CLRF   xAF
4A9C:  CLRF   xB0
4A9E:  CLRF   xB1
4AA0:  CLRF   xB2
4AA2:  CLRF   xB3
4AA4:  CLRF   xB4
4AA6:  CLRF   xB5
4AA8:  CLRF   xB6
4AAA:  CLRF   xB7
4AAC:  CLRF   xB8
4AAE:  CLRF   xB9
4AB0:  CLRF   xBA
4AB2:  CLRF   xBB
4AB4:  CLRF   xBC
4AB6:  CLRF   xBD
4AB8:  CLRF   xBE
4ABA:  CLRF   xBF
4ABC:  CLRF   xC0
4ABE:  CLRF   xC1
4AC0:  CLRF   xC2
4AC2:  CLRF   xC3
4AC4:  CLRF   xC4
4AC6:  CLRF   xC5
4AC8:  CLRF   xC6
4ACA:  CLRF   xC7
4ACC:  CLRF   xC8
4ACE:  CLRF   xC9
4AD0:  CLRF   xCA
4AD2:  CLRF   xCB
4AD4:  CLRF   xCC
4AD6:  CLRF   xCD
4AD8:  CLRF   xCE
4ADA:  CLRF   xCF
4ADC:  CLRF   xD0
4ADE:  CLRF   xD1
4AE0:  CLRF   xD2
4AE2:  CLRF   xD3
4AE4:  CLRF   xD4
4AE6:  CLRF   xD5
4AE8:  CLRF   xD6
4AEA:  CLRF   xD7
4AEC:  CLRF   xD8
4AEE:  CLRF   xD9
4AF0:  CLRF   xDA
4AF2:  CLRF   xDB
4AF4:  CLRF   xDC
4AF6:  CLRF   xDD
4AF8:  CLRF   xDE
4AFA:  CLRF   xDF
4AFC:  CLRF   xE0
4AFE:  CLRF   xE1
4B00:  CLRF   xE2
4B02:  CLRF   xE3
4B04:  CLRF   xE4
4B06:  CLRF   xE5
4B08:  CLRF   xE6
4B0A:  CLRF   xE7
4B0C:  CLRF   xE8
4B0E:  CLRF   xE9
4B10:  CLRF   xEA
4B12:  CLRF   xEB
4B14:  CLRF   xEC
4B16:  CLRF   xED
4B18:  CLRF   xEE
4B1A:  CLRF   xEF
4B1C:  CLRF   xF0
4B1E:  CLRF   xF1
4B20:  CLRF   xF2
4B22:  CLRF   xF3
4B24:  CLRF   xF4
4B26:  CLRF   xF5
4B28:  CLRF   xF6
4B2A:  CLRF   xF7
4B2C:  CLRF   xF8
4B2E:  CLRF   xF9
4B30:  CLRF   xFA
4B32:  CLRF   xFB
4B34:  CLRF   xFC
4B36:  CLRF   xFD
4B38:  CLRF   xFE
4B3A:  CLRF   xFF
4B3C:  MOVLB  3
4B3E:  CLRF   x00
4B40:  CLRF   x01
4B42:  CLRF   x02
4B44:  CLRF   x03
4B46:  CLRF   x04
4B48:  CLRF   x05
4B4A:  CLRF   x06
4B4C:  CLRF   x07
4B4E:  CLRF   x08
4B50:  CLRF   x09
4B52:  CLRF   x0A
4B54:  CLRF   x0B
4B56:  CLRF   x0C
4B58:  CLRF   x0D
4B5A:  CLRF   x0E
4B5C:  CLRF   x0F
4B5E:  CLRF   x10
4B60:  CLRF   x11
4B62:  CLRF   x12
4B64:  CLRF   x13
4B66:  CLRF   x14
4B68:  CLRF   x15
4B6A:  CLRF   x16
4B6C:  CLRF   x17
4B6E:  CLRF   x18
4B70:  CLRF   x19
4B72:  CLRF   x1A
4B74:  CLRF   x1B
4B76:  CLRF   x1C
4B78:  CLRF   x1D
4B7A:  CLRF   x1E
4B7C:  CLRF   x1F
4B7E:  CLRF   x20
4B80:  CLRF   x21
4B82:  CLRF   x22
4B84:  CLRF   x23
4B86:  CLRF   x24
4B88:  CLRF   x25
4B8A:  CLRF   x26
4B8C:  CLRF   x27
4B8E:  CLRF   x28
4B90:  CLRF   x29
4B92:  CLRF   x2A
4B94:  CLRF   x2B
4B96:  CLRF   x2C
4B98:  CLRF   x2D
4B9A:  CLRF   x2E
4B9C:  CLRF   x2F
4B9E:  CLRF   x30
4BA0:  CLRF   x31
4BA2:  CLRF   x32
4BA4:  CLRF   x33
4BA6:  CLRF   x34
4BA8:  CLRF   x35
4BAA:  CLRF   x36
4BAC:  CLRF   x37
4BAE:  CLRF   x38
4BB0:  CLRF   x39
4BB2:  CLRF   x3A
4BB4:  CLRF   x3B
4BB6:  CLRF   x3C
4BB8:  CLRF   x3D
4BBA:  CLRF   x3E
4BBC:  CLRF   x3F
4BBE:  CLRF   x40
4BC0:  CLRF   x41
4BC2:  CLRF   x42
4BC4:  CLRF   x43
4BC6:  CLRF   x44
4BC8:  CLRF   x45
4BCA:  CLRF   x46
4BCC:  CLRF   x47
4BCE:  CLRF   x48
4BD0:  CLRF   x49
4BD2:  CLRF   x4A
4BD4:  CLRF   x4B
4BD6:  CLRF   x4C
4BD8:  CLRF   x4D
4BDA:  CLRF   x4E
4BDC:  CLRF   x4F
4BDE:  CLRF   x50
4BE0:  CLRF   x51
4BE2:  CLRF   x52
4BE4:  CLRF   x53
4BE6:  CLRF   x54
4BE8:  CLRF   x55
4BEA:  CLRF   x56
4BEC:  CLRF   x57
4BEE:  CLRF   x58
4BF0:  CLRF   x59
4BF2:  CLRF   x5A
4BF4:  CLRF   x5B
4BF6:  CLRF   x5C
4BF8:  CLRF   x5D
4BFA:  CLRF   x5E
4BFC:  CLRF   x5F
4BFE:  CLRF   x60
4C00:  CLRF   x61
4C02:  CLRF   x62
4C04:  CLRF   x63
4C06:  CLRF   x64
4C08:  CLRF   x65
4C0A:  CLRF   x66
4C0C:  CLRF   x67
4C0E:  CLRF   x68
4C10:  CLRF   x69
4C12:  CLRF   x6A
4C14:  CLRF   x6B
4C16:  CLRF   x6C
4C18:  CLRF   x6D
4C1A:  CLRF   x6E
4C1C:  CLRF   x6F
4C1E:  CLRF   x70
4C20:  CLRF   x71
4C22:  CLRF   x72
4C24:  CLRF   x73
4C26:  CLRF   x74
4C28:  CLRF   x75
4C2A:  CLRF   x76
4C2C:  CLRF   x77
4C2E:  CLRF   x78
4C30:  CLRF   x79
4C32:  CLRF   x7A
4C34:  CLRF   x7B
4C36:  CLRF   x7C
4C38:  CLRF   x7D
4C3A:  CLRF   x7E
4C3C:  CLRF   x7F
4C3E:  CLRF   x80
4C40:  CLRF   x81
4C42:  CLRF   x82
4C44:  CLRF   x83
4C46:  CLRF   x84
4C48:  CLRF   x85
4C4A:  CLRF   x86
4C4C:  CLRF   x87
4C4E:  CLRF   x88
4C50:  CLRF   x89
4C52:  CLRF   x8A
4C54:  CLRF   x8B
4C56:  CLRF   x8C
4C58:  CLRF   x8D
4C5A:  CLRF   x8E
4C5C:  CLRF   x8F
4C5E:  CLRF   x90
4C60:  CLRF   x91
4C62:  CLRF   x92
4C64:  CLRF   x93
4C66:  CLRF   x94
4C68:  CLRF   x95
4C6A:  CLRF   x96
4C6C:  CLRF   x97
4C6E:  CLRF   x98
4C70:  CLRF   x99
4C72:  CLRF   x9A
4C74:  CLRF   x9B
4C76:  CLRF   x9C
4C78:  CLRF   x9D
4C7A:  CLRF   x9E
4C7C:  CLRF   x9F
4C7E:  CLRF   xA0
4C80:  CLRF   xA1
4C82:  CLRF   xA2
....................    //float promedio[10]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................    //float promedio2[10]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................    usb_init(); 
4C84:  MOVLB  0
4C86:  GOTO   2602
....................    usb_task(); 
4C8A:  CALL   25E0
....................    //usb_wait_for_enumeration(); 
....................    glcd_init(ON);             //Inicializa la glcd 
4C8E:  MOVLW  01
4C90:  MOVLB  3
4C92:  MOVWF  xA3
4C94:  MOVLB  0
4C96:  GOTO   26D4
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
4C9A:  MOVLB  3
4C9C:  CLRF   xA4
4C9E:  MOVLB  0
4CA0:  CALL   2646
....................    glcd_text57(0, 0, JP, 2, ON);            // Write the new voltage 
4CA4:  MOVLB  3
4CA6:  CLRF   xB7
4CA8:  CLRF   xB8
4CAA:  CLRF   xBA
4CAC:  MOVLW  62
4CAE:  MOVWF  xB9
4CB0:  MOVLW  02
4CB2:  MOVWF  xBB
4CB4:  MOVLW  01
4CB6:  MOVWF  xBC
4CB8:  MOVLB  0
4CBA:  CALL   289C
....................    glcd_text57(10, 20, Autoclave, 1, ON);            // Write the new voltage 
4CBE:  MOVLW  0A
4CC0:  MOVLB  3
4CC2:  MOVWF  xB7
4CC4:  MOVLW  14
4CC6:  MOVWF  xB8
4CC8:  CLRF   xBA
4CCA:  MOVLW  6E
4CCC:  MOVWF  xB9
4CCE:  MOVLW  01
4CD0:  MOVWF  xBB
4CD2:  MOVWF  xBC
4CD4:  MOVLB  0
4CD6:  CALL   289C
....................    glcd_text57(30, 40, Lts, 1, ON);            // Write the new voltage 
4CDA:  MOVLW  1E
4CDC:  MOVLB  3
4CDE:  MOVWF  xB7
4CE0:  MOVLW  28
4CE2:  MOVWF  xB8
4CE4:  CLRF   xBA
4CE6:  MOVLW  8F
4CE8:  MOVWF  xB9
4CEA:  MOVLW  01
4CEC:  MOVWF  xBB
4CEE:  MOVWF  xBC
4CF0:  MOVLB  0
4CF2:  CALL   289C
....................    delay_ms(2000); 
4CF6:  MOVLW  08
4CF8:  MOVLB  3
4CFA:  MOVWF  xA3
4CFC:  MOVLW  FA
4CFE:  MOVWF  xA8
4D00:  MOVLB  0
4D02:  CALL   24DC
4D06:  MOVLB  3
4D08:  DECFSZ xA3,F
4D0A:  BRA    4CFC
....................    if(UP&&RIGHT) 
4D0C:  BSF    F92.1
4D0E:  BTFSS  F80.1
4D10:  BRA    4E04
4D12:  BSF    F92.3
4D14:  BTFSS  F80.3
4D16:  BRA    4E04
....................    {glcd_fillScreen(OFF);      //Limpia la pantalla 
4D18:  CLRF   xA4
4D1A:  MOVLB  0
4D1C:  CALL   2646
....................       delay_ms(2000); 
4D20:  MOVLW  08
4D22:  MOVLB  3
4D24:  MOVWF  xA3
4D26:  MOVLW  FA
4D28:  MOVWF  xA8
4D2A:  MOVLB  0
4D2C:  CALL   24DC
4D30:  MOVLB  3
4D32:  DECFSZ xA3,F
4D34:  BRA    4D26
....................       for(;;) 
....................       { 
....................          if(UP) 
4D36:  BSF    F92.1
4D38:  BTFSS  F80.1
4D3A:  BRA    4D78
....................          {Minutos++;delay_ms(40);write_eeprom(20,Minutos);} 
4D3C:  MOVLB  2
4D3E:  INCF   x2B,F
4D40:  MOVLW  28
4D42:  MOVLB  3
4D44:  MOVWF  xA8
4D46:  MOVLB  0
4D48:  CALL   24DC
4D4C:  MOVLW  14
4D4E:  MOVWF  FA9
4D50:  MOVFF  22B,FA8
4D54:  BCF    FA6.6
4D56:  BCF    FA6.7
4D58:  BSF    FA6.2
4D5A:  MOVF   FF2,W
4D5C:  MOVWF  00
4D5E:  BCF    FF2.7
4D60:  MOVLB  F
4D62:  MOVLW  55
4D64:  MOVWF  FA7
4D66:  MOVLW  AA
4D68:  MOVWF  FA7
4D6A:  BSF    FA6.1
4D6C:  BTFSC  FA6.1
4D6E:  BRA    4D6C
4D70:  BCF    FA6.2
4D72:  MOVF   00,W
4D74:  IORWF  FF2,F
4D76:  MOVLB  3
....................          if(DOWN) 
4D78:  BSF    F92.2
4D7A:  BTFSS  F80.2
4D7C:  BRA    4DBA
....................          {Minutos--;delay_ms(40);write_eeprom(20,Minutos);} 
4D7E:  MOVLB  2
4D80:  DECF   x2B,F
4D82:  MOVLW  28
4D84:  MOVLB  3
4D86:  MOVWF  xA8
4D88:  MOVLB  0
4D8A:  CALL   24DC
4D8E:  MOVLW  14
4D90:  MOVWF  FA9
4D92:  MOVFF  22B,FA8
4D96:  BCF    FA6.6
4D98:  BCF    FA6.7
4D9A:  BSF    FA6.2
4D9C:  MOVF   FF2,W
4D9E:  MOVWF  00
4DA0:  BCF    FF2.7
4DA2:  MOVLB  F
4DA4:  MOVLW  55
4DA6:  MOVWF  FA7
4DA8:  MOVLW  AA
4DAA:  MOVWF  FA7
4DAC:  BSF    FA6.1
4DAE:  BTFSC  FA6.1
4DB0:  BRA    4DAE
4DB2:  BCF    FA6.2
4DB4:  MOVF   00,W
4DB6:  IORWF  FF2,F
4DB8:  MOVLB  3
....................          if(RIGHT) 
4DBA:  BSF    F92.3
4DBC:  BTFSS  F80.3
4DBE:  BRA    4DC2
....................          {reset_cpu();} 
4DC0:  RESET
....................          displayT((float)Minutos,20,20,3); 
4DC2:  CLRF   xA9
4DC4:  MOVFF  22B,3A8
4DC8:  MOVLB  0
4DCA:  CALL   2506
4DCE:  MOVFF  00,3A3
4DD2:  MOVFF  01,3A4
4DD6:  MOVFF  02,3A5
4DDA:  MOVFF  03,3A6
4DDE:  MOVFF  03,3AA
4DE2:  MOVFF  02,3A9
4DE6:  MOVFF  01,3A8
4DEA:  MOVFF  00,3A7
4DEE:  MOVLW  14
4DF0:  MOVLB  3
4DF2:  MOVWF  xAB
4DF4:  MOVWF  xAC
4DF6:  MOVLW  03
4DF8:  MOVWF  xAD
4DFA:  MOVLB  0
4DFC:  CALL   2FDC
....................       } 
4E00:  MOVLB  3
4E02:  BRA    4D36
....................    } 
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
4E04:  CLRF   xA4
4E06:  MOVLB  0
4E08:  CALL   2646
....................    while(true) 
....................    { 
....................      
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................     if(Menu==0){// Menu Principal, Muestra= Inicio Proceso, Proceso y cambio de contraseña 
4E0C:  MOVLB  2
4E0E:  MOVF   x00,F
4E10:  BTFSS  FD8.2
4E12:  BRA    4F86
....................       glcd_rect(0, 14, 127, 0, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
4E14:  MOVLB  3
4E16:  CLRF   xB9
4E18:  MOVLW  0E
4E1A:  MOVWF  xBA
4E1C:  MOVLW  7F
4E1E:  MOVWF  xBB
4E20:  CLRF   xBC
4E22:  MOVLW  01
4E24:  MOVWF  xBD
4E26:  MOVWF  xBE
4E28:  MOVLB  0
4E2A:  CALL   2F1A
....................       glcd_text57(40, 0, Men, 2, OFF);            // Escribe Menu en Tamaño 2.  
4E2E:  MOVLW  28
4E30:  MOVLB  3
4E32:  MOVWF  xB7
4E34:  CLRF   xB8
4E36:  CLRF   xBA
4E38:  MOVLW  AB
4E3A:  MOVWF  xB9
4E3C:  MOVLW  02
4E3E:  MOVWF  xBB
4E40:  CLRF   xBC
4E42:  MOVLB  0
4E44:  CALL   289C
....................          
....................    if(UP)//Si oprime hacia arriba 
4E48:  BSF    F92.1
4E4A:  BTFSS  F80.1
4E4C:  BRA    4E92
....................       {  if(Flanco == 0)  
4E4E:  MOVLB  2
4E50:  BTFSC  x0C.5
4E52:  BRA    4E90
....................             {Flecha2=Flecha2-8;Flecha=Flecha-8;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);glcd_text57(0, Flecha+8, Fle, 1, OFF);}} 
4E54:  MOVLW  08
4E56:  SUBWF  x06,F
4E58:  SUBWF  x04,F
4E5A:  MOVLW  01
4E5C:  ADDWF  x04,W
4E5E:  MOVWF  x05
4E60:  BSF    x0C.5
4E62:  MOVLW  1E
4E64:  MOVLB  3
4E66:  MOVWF  xA8
4E68:  MOVLB  0
4E6A:  CALL   24DC
4E6E:  MOVLW  08
4E70:  MOVLB  2
4E72:  ADDWF  x04,W
4E74:  MOVLB  3
4E76:  MOVWF  xA3
4E78:  CLRF   xB7
4E7A:  MOVWF  xB8
4E7C:  CLRF   xBA
4E7E:  MOVLW  B0
4E80:  MOVWF  xB9
4E82:  MOVLW  01
4E84:  MOVWF  xBB
4E86:  CLRF   xBC
4E88:  MOVLB  0
4E8A:  CALL   289C
4E8E:  MOVLB  2
....................          else 
4E90:  BRA    4E96
....................             {Flanco = 0;} 
4E92:  MOVLB  2
4E94:  BCF    x0C.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4E96:  BSF    F92.2
4E98:  BTFSS  F80.2
4E9A:  BRA    4EDE
....................       {  if(Flanco2 == 0)  
4E9C:  BTFSC  x0C.7
4E9E:  BRA    4EDC
....................             {Flecha2=Flecha2+8;Flecha=Flecha+8;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);glcd_text57(0, Flecha-8, Fle, 1, OFF);}} 
4EA0:  MOVLW  08
4EA2:  ADDWF  x06,F
4EA4:  ADDWF  x04,F
4EA6:  MOVLW  01
4EA8:  SUBWF  x04,W
4EAA:  MOVWF  x05
4EAC:  BSF    x0C.7
4EAE:  MOVLW  1E
4EB0:  MOVLB  3
4EB2:  MOVWF  xA8
4EB4:  MOVLB  0
4EB6:  CALL   24DC
4EBA:  MOVLW  08
4EBC:  MOVLB  2
4EBE:  SUBWF  x04,W
4EC0:  MOVLB  3
4EC2:  MOVWF  xA3
4EC4:  CLRF   xB7
4EC6:  MOVWF  xB8
4EC8:  CLRF   xBA
4ECA:  MOVLW  B0
4ECC:  MOVWF  xB9
4ECE:  MOVLW  01
4ED0:  MOVWF  xBB
4ED2:  CLRF   xBC
4ED4:  MOVLB  0
4ED6:  CALL   289C
4EDA:  MOVLB  2
....................          else 
4EDC:  BRA    4EE0
....................             {Flanco2 = 0;} 
4EDE:  BCF    x0C.7
....................          
....................         if(Flecha2>n_opcionH-8) 
4EE0:  MOVLW  08
4EE2:  SUBWF  x01,W
4EE4:  SUBWF  x06,W
4EE6:  BZ    4EF6
4EE8:  BNC   4EF6
....................         {Flecha2=n_opcionL;Flecha=nMenuL;nMenuL=Flecha2;} 
4EEA:  MOVFF  202,206
4EEE:  MOVFF  207,204
4EF2:  MOVFF  206,207
....................          
....................         if(Flecha2<n_opcionL) 
4EF6:  MOVF   x02,W
4EF8:  SUBWF  x06,W
4EFA:  BC    4F0C
....................         {Flecha2=n_opcionH-8;Flecha=nmenuH-8;Flecha=Flecha2;}                
4EFC:  MOVLW  08
4EFE:  SUBWF  x01,W
4F00:  MOVWF  x06
4F02:  MOVLW  08
4F04:  SUBWF  x08,W
4F06:  MOVWF  x04
4F08:  MOVFF  206,204
....................          
....................          
....................         mensajes(2,n_opcionL); 
4F0C:  MOVLW  02
4F0E:  MOVLB  3
4F10:  MOVWF  xA4
4F12:  MOVFF  202,3A5
4F16:  MOVLB  0
4F18:  CALL   304A
....................         mensajes(3,n_opcionL+8); 
4F1C:  MOVLW  08
4F1E:  MOVLB  2
4F20:  ADDWF  x02,W
4F22:  MOVLB  3
4F24:  MOVWF  xA3
4F26:  MOVLW  03
4F28:  MOVWF  xA4
4F2A:  MOVFF  3A3,3A5
4F2E:  MOVLB  0
4F30:  CALL   304A
....................         //mensajes(3,n_opcionL+16); 
....................  
....................         glcd_text57(0, Flecha, Fle, 1, ON);            // Write the new voltage         
4F34:  MOVLB  3
4F36:  CLRF   xB7
4F38:  MOVFF  204,3B8
4F3C:  CLRF   xBA
4F3E:  MOVLW  B0
4F40:  MOVWF  xB9
4F42:  MOVLW  01
4F44:  MOVWF  xBB
4F46:  MOVWF  xBC
4F48:  MOVLB  0
4F4A:  CALL   289C
....................        
....................  
....................       if(RIGHT)// Si oprime derecha 
4F4E:  BSF    F92.3
4F50:  BTFSS  F80.3
4F52:  BRA    4F82
....................       {  if(Flanco1 == 0)  
4F54:  MOVLB  2
4F56:  BTFSC  x0C.6
4F58:  BRA    4F80
....................             {Flanco1 = 1;Menu=Flecha2;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);  
4F5A:  BSF    x0C.6
4F5C:  MOVFF  206,200
4F60:  MOVFF  202,206
4F64:  MOVFF  202,204
4F68:  MOVLW  1E
4F6A:  MOVLB  3
4F6C:  MOVWF  xA8
4F6E:  MOVLB  0
4F70:  CALL   24DC
4F74:  MOVLB  3
4F76:  CLRF   xA4
4F78:  MOVLB  0
4F7A:  CALL   2646
4F7E:  MOVLB  2
....................             }} 
....................          else 
4F80:  BRA    4F86
....................             {Flanco1 = 0;}    
4F82:  MOVLB  2
4F84:  BCF    x0C.6
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==16){ //Menu de Seleccion de Proceso. 
4F86:  MOVF   x00,W
4F88:  SUBLW  10
4F8A:  BTFSS  FD8.2
4F8C:  BRA    5132
....................       glcd_text57(15, 0, Proc, 2, ON);            // Escribe Proceso en Tamaño 2.  
4F8E:  MOVLW  0F
4F90:  MOVLB  3
4F92:  MOVWF  xB7
4F94:  CLRF   xB8
4F96:  CLRF   xBA
4F98:  MOVLW  C8
4F9A:  MOVWF  xB9
4F9C:  MOVLW  02
4F9E:  MOVWF  xBB
4FA0:  MOVLW  01
4FA2:  MOVWF  xBC
4FA4:  MOVLB  0
4FA6:  CALL   289C
....................          
....................       if(UP)//Si oprime hacia arriba 
4FAA:  BSF    F92.1
4FAC:  BTFSS  F80.1
4FAE:  BRA    4FF4
....................       {  if(Flanco == 0)  
4FB0:  MOVLB  2
4FB2:  BTFSC  x0C.5
4FB4:  BRA    4FF2
....................             {Flecha2=Flecha2-8;Flecha=Flecha-8;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);glcd_text57(0, Flecha+8, Fle, 1, OFF);}} 
4FB6:  MOVLW  08
4FB8:  SUBWF  x06,F
4FBA:  SUBWF  x04,F
4FBC:  MOVLW  01
4FBE:  ADDWF  x04,W
4FC0:  MOVWF  x05
4FC2:  BSF    x0C.5
4FC4:  MOVLW  1E
4FC6:  MOVLB  3
4FC8:  MOVWF  xA8
4FCA:  MOVLB  0
4FCC:  CALL   24DC
4FD0:  MOVLW  08
4FD2:  MOVLB  2
4FD4:  ADDWF  x04,W
4FD6:  MOVLB  3
4FD8:  MOVWF  xA3
4FDA:  CLRF   xB7
4FDC:  MOVWF  xB8
4FDE:  CLRF   xBA
4FE0:  MOVLW  B0
4FE2:  MOVWF  xB9
4FE4:  MOVLW  01
4FE6:  MOVWF  xBB
4FE8:  CLRF   xBC
4FEA:  MOVLB  0
4FEC:  CALL   289C
4FF0:  MOVLB  2
....................          else 
4FF2:  BRA    4FF8
....................             {Flanco = 0;} 
4FF4:  MOVLB  2
4FF6:  BCF    x0C.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4FF8:  BSF    F92.2
4FFA:  BTFSS  F80.2
4FFC:  BRA    5040
....................       {  if(Flanco2 == 0)  
4FFE:  BTFSC  x0C.7
5000:  BRA    503E
....................             {Flecha2=Flecha2+8;Flecha=Flecha+8;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);glcd_text57(0, Flecha-8, Fle, 1, OFF);}} 
5002:  MOVLW  08
5004:  ADDWF  x06,F
5006:  ADDWF  x04,F
5008:  MOVLW  01
500A:  SUBWF  x04,W
500C:  MOVWF  x05
500E:  BSF    x0C.7
5010:  MOVLW  1E
5012:  MOVLB  3
5014:  MOVWF  xA8
5016:  MOVLB  0
5018:  CALL   24DC
501C:  MOVLW  08
501E:  MOVLB  2
5020:  SUBWF  x04,W
5022:  MOVLB  3
5024:  MOVWF  xA3
5026:  CLRF   xB7
5028:  MOVWF  xB8
502A:  CLRF   xBA
502C:  MOVLW  B0
502E:  MOVWF  xB9
5030:  MOVLW  01
5032:  MOVWF  xBB
5034:  CLRF   xBC
5036:  MOVLB  0
5038:  CALL   289C
503C:  MOVLB  2
....................          else 
503E:  BRA    5042
....................             {Flanco2 = 0;} 
5040:  BCF    x0C.7
....................          
....................         if(Flecha2>n_opcionH+16) 
5042:  MOVLW  10
5044:  ADDWF  x01,W
5046:  SUBWF  x06,W
5048:  BZ    5058
504A:  BNC   5058
....................         {Flecha2=n_opcionL;Flecha=nMenuL;nMenuL=Flecha2;} 
504C:  MOVFF  202,206
5050:  MOVFF  207,204
5054:  MOVFF  206,207
....................          
....................         if(Flecha2<n_opcionL) 
5058:  MOVF   x02,W
505A:  SUBWF  x06,W
505C:  BC    506E
....................         {Flecha2=n_opcionH+16;Flecha=nMenuH+16;Flecha=Flecha2;}                
505E:  MOVLW  10
5060:  ADDWF  x01,W
5062:  MOVWF  x06
5064:  MOVLW  10
5066:  ADDWF  x08,W
5068:  MOVWF  x04
506A:  MOVFF  206,204
....................          
....................          
....................         mensajes(7,n_opcionL); 
506E:  MOVLW  07
5070:  MOVLB  3
5072:  MOVWF  xA4
5074:  MOVFF  202,3A5
5078:  MOVLB  0
507A:  CALL   304A
....................         mensajes(6,n_opcionL+8); 
507E:  MOVLW  08
5080:  MOVLB  2
5082:  ADDWF  x02,W
5084:  MOVLB  3
5086:  MOVWF  xA3
5088:  MOVLW  06
508A:  MOVWF  xA4
508C:  MOVFF  3A3,3A5
5090:  MOVLB  0
5092:  CALL   304A
....................         mensajes(4,n_opcionL+16); 
5096:  MOVLW  10
5098:  MOVLB  2
509A:  ADDWF  x02,W
509C:  MOVLB  3
509E:  MOVWF  xA3
50A0:  MOVLW  04
50A2:  MOVWF  xA4
50A4:  MOVFF  3A3,3A5
50A8:  MOVLB  0
50AA:  CALL   304A
....................         mensajes(5,n_opcionL+24); 
50AE:  MOVLW  18
50B0:  MOVLB  2
50B2:  ADDWF  x02,W
50B4:  MOVLB  3
50B6:  MOVWF  xA3
50B8:  MOVLW  05
50BA:  MOVWF  xA4
50BC:  MOVFF  3A3,3A5
50C0:  MOVLB  0
50C2:  CALL   304A
....................         mensajes(8,n_opcionL+32); 
50C6:  MOVLW  20
50C8:  MOVLB  2
50CA:  ADDWF  x02,W
50CC:  MOVLB  3
50CE:  MOVWF  xA3
50D0:  MOVLW  08
50D2:  MOVWF  xA4
50D4:  MOVFF  3A3,3A5
50D8:  MOVLB  0
50DA:  CALL   304A
....................  
....................         glcd_text57(0, Flecha, Fle, 1, ON);            // Write the new voltage         
50DE:  MOVLB  3
50E0:  CLRF   xB7
50E2:  MOVFF  204,3B8
50E6:  CLRF   xBA
50E8:  MOVLW  B0
50EA:  MOVWF  xB9
50EC:  MOVLW  01
50EE:  MOVWF  xBB
50F0:  MOVWF  xBC
50F2:  MOVLB  0
50F4:  CALL   289C
....................        
....................  
....................       if(RIGHT)// Si oprime derecha 
50F8:  BSF    F92.3
50FA:  BTFSS  F80.3
50FC:  BRA    512E
....................       {  if(Flanco1 == 0)  
50FE:  MOVLB  2
5100:  BTFSC  x0C.6
5102:  BRA    512C
....................             {Flanco1 = 1;Menu=Flecha2+1;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF); }} 
5104:  BSF    x0C.6
5106:  MOVLW  01
5108:  ADDWF  x06,W
510A:  MOVWF  x00
510C:  MOVFF  202,206
5110:  MOVFF  202,204
5114:  MOVLW  1E
5116:  MOVLB  3
5118:  MOVWF  xA8
511A:  MOVLB  0
511C:  CALL   24DC
5120:  MOVLB  3
5122:  CLRF   xA4
5124:  MOVLB  0
5126:  CALL   2646
512A:  MOVLB  2
....................          else 
512C:  BRA    5132
....................             {Flanco1 = 0;}    
512E:  MOVLB  2
5130:  BCF    x0C.6
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //-Sub-Menus de selección de proceso. 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==17){ // Menu de Liquido       
5132:  MOVF   x00,W
5134:  SUBLW  11
5136:  BTFSS  FD8.2
5138:  BRA    5286
....................       glcd_imagen(4); //ErlenMeyer con Liquido 
513A:  MOVLW  04
513C:  MOVLB  3
513E:  MOVWF  xA3
5140:  MOVLB  0
5142:  CALL   3180
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5146:  MOVLW  3F
5148:  MOVLB  3
514A:  MOVWF  xB9
514C:  MOVLW  28
514E:  MOVWF  xBA
5150:  MOVLW  64
5152:  MOVWF  xBB
5154:  MOVLW  35
5156:  MOVWF  xBC
5158:  MOVLW  01
515A:  MOVWF  xBD
515C:  MOVWF  xBE
515E:  MOVLB  0
5160:  CALL   2F1A
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
5164:  MOVLW  4C
5166:  MOVLB  3
5168:  MOVWF  xB7
516A:  MOVLW  2C
516C:  MOVWF  xB8
516E:  MOVLW  01
5170:  MOVWF  xBA
5172:  MOVLW  B6
5174:  MOVWF  xB9
5176:  MOVLW  01
5178:  MOVWF  xBB
517A:  CLRF   xBC
517C:  MOVLB  0
517E:  CALL   289C
....................          
....................       mensajes(7,55); 
5182:  MOVLW  07
5184:  MOVLB  3
5186:  MOVWF  xA4
5188:  MOVLW  37
518A:  MOVWF  xA5
518C:  MOVLB  0
518E:  CALL   304A
....................       //glcd_text57(60, 0, DuracionL, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TL, 1, ON);            // Write the new voltage         
5192:  MOVLW  3F
5194:  MOVLB  3
5196:  MOVWF  xB7
5198:  MOVLW  0A
519A:  MOVWF  xB8
519C:  MOVLW  01
519E:  MOVWF  xBA
51A0:  MOVLW  9A
51A2:  MOVWF  xB9
51A4:  MOVLW  01
51A6:  MOVWF  xBB
51A8:  MOVWF  xBC
51AA:  MOVLB  0
51AC:  CALL   289C
....................       glcd_text57(63, 20, TestL, 1, ON);            // Write the new voltage         
51B0:  MOVLW  3F
51B2:  MOVLB  3
51B4:  MOVWF  xB7
51B6:  MOVLW  14
51B8:  MOVWF  xB8
51BA:  MOVLW  01
51BC:  MOVWF  xBA
51BE:  MOVLW  A2
51C0:  MOVWF  xB9
51C2:  MOVLW  01
51C4:  MOVWF  xBB
51C6:  MOVWF  xBC
51C8:  MOVLB  0
51CA:  CALL   289C
....................       glcd_text57(63, 30, TsecL, 1, ON);            // Write the new voltage         
51CE:  MOVLW  3F
51D0:  MOVLB  3
51D2:  MOVWF  xB7
51D4:  MOVLW  1E
51D6:  MOVWF  xB8
51D8:  MOVLW  01
51DA:  MOVWF  xBA
51DC:  MOVLW  AC
51DE:  MOVWF  xB9
51E0:  MOVLW  01
51E2:  MOVWF  xBB
51E4:  MOVWF  xBC
51E6:  MOVLB  0
51E8:  CALL   289C
....................        
....................       if(LEFT)// Si oprime Izquier|da 
51EC:  BSF    F92.5
51EE:  BTFSS  F80.5
51F0:  BRA    522E
....................        {  if(Flanco3 == 0)  
51F2:  MOVLB  2
51F4:  BTFSC  x0D.0
51F6:  BRA    522C
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
51F8:  BSF    x0D.0
51FA:  MOVLW  1E
51FC:  MOVLB  3
51FE:  MOVWF  xA8
5200:  MOVLB  0
5202:  CALL   24DC
5206:  MOVLW  10
5208:  MOVLB  2
520A:  MOVWF  x00
520C:  MOVFF  202,206
5210:  MOVFF  202,204
5214:  MOVLW  1E
5216:  MOVLB  3
5218:  MOVWF  xA8
521A:  MOVLB  0
521C:  CALL   24DC
5220:  MOVLB  3
5222:  CLRF   xA4
5224:  MOVLB  0
5226:  CALL   2646
522A:  MOVLB  2
....................         } 
....................          else 
522C:  BRA    5232
....................             {Flanco3 = 0;}                 
522E:  MOVLB  2
5230:  BCF    x0D.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5232:  BSF    F92.3
5234:  BTFSS  F80.3
5236:  BRA    5284
....................       {  if(Flanco1 == 0)  
5238:  BTFSC  x0C.6
523A:  BRA    5282
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
523C:  BSF    x0C.6
523E:  MOVLW  5A
5240:  MOVWF  x00
5242:  MOVFF  202,206
5246:  MOVFF  202,204
524A:  MOVLW  1E
524C:  MOVLB  3
524E:  MOVWF  xA8
5250:  MOVLB  0
5252:  CALL   24DC
5256:  MOVLB  3
5258:  CLRF   xA4
525A:  MOVLB  0
525C:  CALL   2646
5260:  MOVLW  20
5262:  MOVLB  2
5264:  MOVWF  x01
5266:  MOVLW  10
5268:  MOVWF  x02
526A:  MOVWF  x07
526C:  MOVLW  20
526E:  MOVWF  x08
....................             estadot40=0;estadoc=0;estadoi=0;estadol=1;estadop=0;Liquid=1;Setpoint=121;}} 
5270:  BCF    x0C.0
5272:  BCF    x0C.1
5274:  BCF    x0C.2
5276:  BSF    x0C.3
5278:  BCF    x0C.4
527A:  MOVLW  01
527C:  MOVWF  x0B
527E:  MOVLW  79
5280:  MOVWF  x27
....................          else 
5282:  BRA    5286
....................             {Flanco1 = 0;}    
5284:  BCF    x0C.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==25){ // Menu de Instrumental Suave      
5286:  MOVF   x00,W
5288:  SUBLW  19
528A:  BTFSS  FD8.2
528C:  BRA    53DA
....................       glcd_imagen(3); //Erlen Meyer 
528E:  MOVLW  03
5290:  MOVLB  3
5292:  MOVWF  xA3
5294:  MOVLB  0
5296:  CALL   3180
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
529A:  MOVLW  3F
529C:  MOVLB  3
529E:  MOVWF  xB9
52A0:  MOVLW  28
52A2:  MOVWF  xBA
52A4:  MOVLW  64
52A6:  MOVWF  xBB
52A8:  MOVLW  35
52AA:  MOVWF  xBC
52AC:  MOVLW  01
52AE:  MOVWF  xBD
52B0:  MOVWF  xBE
52B2:  MOVLB  0
52B4:  CALL   2F1A
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
52B8:  MOVLW  4C
52BA:  MOVLB  3
52BC:  MOVWF  xB7
52BE:  MOVLW  2C
52C0:  MOVWF  xB8
52C2:  MOVLW  01
52C4:  MOVWF  xBA
52C6:  MOVLW  B6
52C8:  MOVWF  xB9
52CA:  MOVLW  01
52CC:  MOVWF  xBB
52CE:  CLRF   xBC
52D0:  MOVLB  0
52D2:  CALL   289C
....................          
....................       mensajes(6,55); 
52D6:  MOVLW  06
52D8:  MOVLB  3
52DA:  MOVWF  xA4
52DC:  MOVLW  37
52DE:  MOVWF  xA5
52E0:  MOVLB  0
52E2:  CALL   304A
....................       //glcd_text57(60, 0, DuracionI, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TI, 1, ON);            // Write the new voltage         
52E6:  MOVLW  3F
52E8:  MOVLB  3
52EA:  MOVWF  xB7
52EC:  MOVLW  0A
52EE:  MOVWF  xB8
52F0:  MOVLW  01
52F2:  MOVWF  xBA
52F4:  MOVLW  6F
52F6:  MOVWF  xB9
52F8:  MOVLW  01
52FA:  MOVWF  xBB
52FC:  MOVWF  xBC
52FE:  MOVLB  0
5300:  CALL   289C
....................       glcd_text57(63, 20, TestI, 1, ON);            // Write the new voltage         
5304:  MOVLW  3F
5306:  MOVLB  3
5308:  MOVWF  xB7
530A:  MOVLW  14
530C:  MOVWF  xB8
530E:  MOVLW  01
5310:  MOVWF  xBA
5312:  MOVLW  77
5314:  MOVWF  xB9
5316:  MOVLW  01
5318:  MOVWF  xBB
531A:  MOVWF  xBC
531C:  MOVLB  0
531E:  CALL   289C
....................       glcd_text57(63, 30, TsecI, 1, ON);            // Write the new voltage         
5322:  MOVLW  3F
5324:  MOVLB  3
5326:  MOVWF  xB7
5328:  MOVLW  1E
532A:  MOVWF  xB8
532C:  MOVLW  01
532E:  MOVWF  xBA
5330:  MOVLW  90
5332:  MOVWF  xB9
5334:  MOVLW  01
5336:  MOVWF  xBB
5338:  MOVWF  xBC
533A:  MOVLB  0
533C:  CALL   289C
....................  
....................       if(LEFT)// Si oprime Izquier|da 
5340:  BSF    F92.5
5342:  BTFSS  F80.5
5344:  BRA    5382
....................        {  if(Flanco3 == 0)  
5346:  MOVLB  2
5348:  BTFSC  x0D.0
534A:  BRA    5380
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
534C:  BSF    x0D.0
534E:  MOVLW  1E
5350:  MOVLB  3
5352:  MOVWF  xA8
5354:  MOVLB  0
5356:  CALL   24DC
535A:  MOVLW  10
535C:  MOVLB  2
535E:  MOVWF  x00
5360:  MOVFF  202,206
5364:  MOVFF  202,204
5368:  MOVLW  1E
536A:  MOVLB  3
536C:  MOVWF  xA8
536E:  MOVLB  0
5370:  CALL   24DC
5374:  MOVLB  3
5376:  CLRF   xA4
5378:  MOVLB  0
537A:  CALL   2646
537E:  MOVLB  2
....................         } 
....................          else 
5380:  BRA    5386
....................             {Flanco3 = 0;}                 
5382:  MOVLB  2
5384:  BCF    x0D.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5386:  BSF    F92.3
5388:  BTFSS  F80.3
538A:  BRA    53D8
....................       {  if(Flanco1 == 0)  
538C:  BTFSC  x0C.6
538E:  BRA    53D6
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5390:  BSF    x0C.6
5392:  MOVLW  5A
5394:  MOVWF  x00
5396:  MOVFF  202,206
539A:  MOVFF  202,204
539E:  MOVLW  1E
53A0:  MOVLB  3
53A2:  MOVWF  xA8
53A4:  MOVLB  0
53A6:  CALL   24DC
53AA:  MOVLB  3
53AC:  CLRF   xA4
53AE:  MOVLB  0
53B0:  CALL   2646
53B4:  MOVLW  20
53B6:  MOVLB  2
53B8:  MOVWF  x01
53BA:  MOVLW  10
53BC:  MOVWF  x02
53BE:  MOVWF  x07
53C0:  MOVLW  20
53C2:  MOVWF  x08
....................             estadot40=0;estadoc=0;estadoi=1;estadol=0;estadop=0;Liquid=1;Setpoint=121;}} 
53C4:  BCF    x0C.0
53C6:  BCF    x0C.1
53C8:  BSF    x0C.2
53CA:  BCF    x0C.3
53CC:  BCF    x0C.4
53CE:  MOVLW  01
53D0:  MOVWF  x0B
53D2:  MOVLW  79
53D4:  MOVWF  x27
....................          else 
53D6:  BRA    53DA
....................             {Flanco1 = 0;}    
53D8:  BCF    x0C.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==33){ // Menu de textil e instrumental      
53DA:  MOVF   x00,W
53DC:  SUBLW  21
53DE:  BTFSS  FD8.2
53E0:  BRA    556C
....................       glcd_imagen(1); //Tijeras y Camisa 
53E2:  MOVLW  01
53E4:  MOVLB  3
53E6:  MOVWF  xA3
53E8:  MOVLB  0
53EA:  CALL   3180
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
53EE:  MOVLW  3F
53F0:  MOVLB  3
53F2:  MOVWF  xB9
53F4:  MOVLW  28
53F6:  MOVWF  xBA
53F8:  MOVLW  64
53FA:  MOVWF  xBB
53FC:  MOVLW  35
53FE:  MOVWF  xBC
5400:  MOVLW  01
5402:  MOVWF  xBD
5404:  MOVWF  xBE
5406:  MOVLB  0
5408:  CALL   2F1A
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
540C:  MOVLW  4C
540E:  MOVLB  3
5410:  MOVWF  xB7
5412:  MOVLW  2C
5414:  MOVWF  xB8
5416:  MOVLW  01
5418:  MOVWF  xBA
541A:  MOVLW  B6
541C:  MOVWF  xB9
541E:  MOVLW  01
5420:  MOVWF  xBB
5422:  CLRF   xBC
5424:  MOVLB  0
5426:  CALL   289C
....................          
....................       mensajes(4,55); 
542A:  MOVLW  04
542C:  MOVLB  3
542E:  MOVWF  xA4
5430:  MOVLW  37
5432:  MOVWF  xA5
5434:  MOVLB  0
5436:  CALL   304A
....................       //glcd_text57(60, 0, Duracion40, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, T40, 1, ON);            // Write the new voltage         
543A:  MOVLW  3F
543C:  MOVLB  3
543E:  MOVWF  xB7
5440:  MOVLW  0A
5442:  MOVWF  xB8
5444:  MOVLW  01
5446:  MOVWF  xBA
5448:  MOVLW  36
544A:  MOVWF  xB9
544C:  MOVLW  01
544E:  MOVWF  xBB
5450:  MOVWF  xBC
5452:  MOVLB  0
5454:  CALL   289C
....................       glcd_text57(63, 20, Test40, 1, ON);            // Write the new voltage         
5458:  MOVLW  3F
545A:  MOVLB  3
545C:  MOVWF  xB7
545E:  MOVLW  14
5460:  MOVWF  xB8
5462:  MOVLW  01
5464:  MOVWF  xBA
5466:  MOVLW  3E
5468:  MOVWF  xB9
546A:  MOVLW  01
546C:  MOVWF  xBB
546E:  MOVWF  xBC
5470:  MOVLB  0
5472:  CALL   289C
....................       glcd_text57(63, 30, Tsec40, 1, ON);            // Write the new voltage         
5476:  MOVLW  3F
5478:  MOVLB  3
547A:  MOVWF  xB7
547C:  MOVLW  1E
547E:  MOVWF  xB8
5480:  MOVLW  01
5482:  MOVWF  xBA
5484:  MOVLW  47
5486:  MOVWF  xB9
5488:  MOVLW  01
548A:  MOVWF  xBB
548C:  MOVWF  xBC
548E:  MOVLB  0
5490:  CALL   289C
....................        
....................       if(LEFT)// Si oprime Izquier|da 
5494:  BSF    F92.5
5496:  BTFSS  F80.5
5498:  BRA    54D6
....................        {  if(Flanco3 == 0)  
549A:  MOVLB  2
549C:  BTFSC  x0D.0
549E:  BRA    54D4
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
54A0:  BSF    x0D.0
54A2:  MOVLW  1E
54A4:  MOVLB  3
54A6:  MOVWF  xA8
54A8:  MOVLB  0
54AA:  CALL   24DC
54AE:  MOVLW  10
54B0:  MOVLB  2
54B2:  MOVWF  x00
54B4:  MOVFF  202,206
54B8:  MOVFF  202,204
54BC:  MOVLW  1E
54BE:  MOVLB  3
54C0:  MOVWF  xA8
54C2:  MOVLB  0
54C4:  CALL   24DC
54C8:  MOVLB  3
54CA:  CLRF   xA4
54CC:  MOVLB  0
54CE:  CALL   2646
54D2:  MOVLB  2
....................         } 
....................          else 
54D4:  BRA    54DA
....................             {Flanco3 = 0;}                 
54D6:  MOVLB  2
54D8:  BCF    x0D.0
....................  
....................       if(RIGHT)// Si oprime derecha 
54DA:  BSF    F92.3
54DC:  BTFSS  F80.3
54DE:  BRA    556A
....................       {  if(Flanco1 == 0)  
54E0:  BTFSC  x0C.6
54E2:  BRA    5568
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
54E4:  BSF    x0C.6
54E6:  MOVLW  64
54E8:  MOVWF  x00
54EA:  MOVFF  202,206
54EE:  MOVFF  202,204
54F2:  MOVLW  1E
54F4:  MOVLB  3
54F6:  MOVWF  xA8
54F8:  MOVLB  0
54FA:  CALL   24DC
54FE:  MOVLB  3
5500:  CLRF   xA4
5502:  MOVLB  0
5504:  CALL   2646
5508:  MOVLW  20
550A:  MOVLB  2
550C:  MOVWF  x01
550E:  MOVLW  10
5510:  MOVWF  x02
5512:  MOVWF  x07
5514:  MOVLW  20
5516:  MOVWF  x08
....................             estadot40=1;estadoc=0;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=134; 
5518:  BSF    x0C.0
551A:  BCF    x0C.1
551C:  BCF    x0C.2
551E:  BCF    x0C.3
5520:  BCF    x0C.4
5522:  CLRF   x0B
5524:  MOVLB  3
5526:  CLRF   xB7
5528:  MOVLW  37
552A:  MOVWF  xB8
552C:  CLRF   xBA
552E:  MOVLW  E4
5530:  MOVWF  xB9
5532:  MOVLW  01
5534:  MOVWF  xBB
5536:  MOVWF  xBC
5538:  MOVLB  0
553A:  CALL   289C
553E:  MOVLW  86
5540:  MOVLB  2
5542:  MOVWF  x27
....................             glcd_rect(25, 18, 40, 53, NO, ON);enable_interrupts(global);}} 
5544:  MOVLW  19
5546:  MOVLB  3
5548:  MOVWF  xB9
554A:  MOVLW  12
554C:  MOVWF  xBA
554E:  MOVLW  28
5550:  MOVWF  xBB
5552:  MOVLW  35
5554:  MOVWF  xBC
5556:  CLRF   xBD
5558:  MOVLW  01
555A:  MOVWF  xBE
555C:  MOVLB  0
555E:  CALL   2F1A
5562:  MOVLW  C0
5564:  IORWF  FF2,F
5566:  MOVLB  2
....................          else 
5568:  BRA    556C
....................             {Flanco1 = 0;}    
556A:  BCF    x0C.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==41){ // Menu de Caucho      
556C:  MOVF   x00,W
556E:  SUBLW  29
5570:  BTFSS  FD8.2
5572:  BRA    56FE
....................       glcd_imagen(2); //Guante 
5574:  MOVLW  02
5576:  MOVLB  3
5578:  MOVWF  xA3
557A:  MOVLB  0
557C:  CALL   3180
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5580:  MOVLW  3F
5582:  MOVLB  3
5584:  MOVWF  xB9
5586:  MOVLW  28
5588:  MOVWF  xBA
558A:  MOVLW  64
558C:  MOVWF  xBB
558E:  MOVLW  35
5590:  MOVWF  xBC
5592:  MOVLW  01
5594:  MOVWF  xBD
5596:  MOVWF  xBE
5598:  MOVLB  0
559A:  CALL   2F1A
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
559E:  MOVLW  4C
55A0:  MOVLB  3
55A2:  MOVWF  xB7
55A4:  MOVLW  2C
55A6:  MOVWF  xB8
55A8:  MOVLW  01
55AA:  MOVWF  xBA
55AC:  MOVLW  B6
55AE:  MOVWF  xB9
55B0:  MOVLW  01
55B2:  MOVWF  xBB
55B4:  CLRF   xBC
55B6:  MOVLB  0
55B8:  CALL   289C
....................          
....................       mensajes(5,55); 
55BC:  MOVLW  05
55BE:  MOVLB  3
55C0:  MOVWF  xA4
55C2:  MOVLW  37
55C4:  MOVWF  xA5
55C6:  MOVLB  0
55C8:  CALL   304A
....................       //glcd_text57(60, 0, DuracionC, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TC, 1, ON);            // Write the new voltage         
55CC:  MOVLW  3F
55CE:  MOVLB  3
55D0:  MOVWF  xB7
55D2:  MOVLW  0A
55D4:  MOVWF  xB8
55D6:  MOVLW  01
55D8:  MOVWF  xBA
55DA:  MOVLW  53
55DC:  MOVWF  xB9
55DE:  MOVLW  01
55E0:  MOVWF  xBB
55E2:  MOVWF  xBC
55E4:  MOVLB  0
55E6:  CALL   289C
....................       glcd_text57(63, 20, TestC, 1, ON);            // Write the new voltage         
55EA:  MOVLW  3F
55EC:  MOVLB  3
55EE:  MOVWF  xB7
55F0:  MOVLW  14
55F2:  MOVWF  xB8
55F4:  MOVLW  01
55F6:  MOVWF  xBA
55F8:  MOVLW  5B
55FA:  MOVWF  xB9
55FC:  MOVLW  01
55FE:  MOVWF  xBB
5600:  MOVWF  xBC
5602:  MOVLB  0
5604:  CALL   289C
....................       glcd_text57(63, 30, TsecC, 1, ON);            // Write the new voltage         
5608:  MOVLW  3F
560A:  MOVLB  3
560C:  MOVWF  xB7
560E:  MOVLW  1E
5610:  MOVWF  xB8
5612:  MOVLW  01
5614:  MOVWF  xBA
5616:  MOVLW  65
5618:  MOVWF  xB9
561A:  MOVLW  01
561C:  MOVWF  xBB
561E:  MOVWF  xBC
5620:  MOVLB  0
5622:  CALL   289C
....................        
....................       if(LEFT)// Si oprime Izquier|da 
5626:  BSF    F92.5
5628:  BTFSS  F80.5
562A:  BRA    5668
....................        {  if(Flanco3 == 0)  
562C:  MOVLB  2
562E:  BTFSC  x0D.0
5630:  BRA    5666
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5632:  BSF    x0D.0
5634:  MOVLW  1E
5636:  MOVLB  3
5638:  MOVWF  xA8
563A:  MOVLB  0
563C:  CALL   24DC
5640:  MOVLW  10
5642:  MOVLB  2
5644:  MOVWF  x00
5646:  MOVFF  202,206
564A:  MOVFF  202,204
564E:  MOVLW  1E
5650:  MOVLB  3
5652:  MOVWF  xA8
5654:  MOVLB  0
5656:  CALL   24DC
565A:  MOVLB  3
565C:  CLRF   xA4
565E:  MOVLB  0
5660:  CALL   2646
5664:  MOVLB  2
....................         } 
....................          else 
5666:  BRA    566C
....................             {Flanco3 = 0;}                 
5668:  MOVLB  2
566A:  BCF    x0D.0
....................  
....................       if(RIGHT)// Si oprime derecha 
566C:  BSF    F92.3
566E:  BTFSS  F80.3
5670:  BRA    56FC
....................       {  if(Flanco1 == 0)  
5672:  BTFSC  x0C.6
5674:  BRA    56FA
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5676:  BSF    x0C.6
5678:  MOVLW  64
567A:  MOVWF  x00
567C:  MOVFF  202,206
5680:  MOVFF  202,204
5684:  MOVLW  1E
5686:  MOVLB  3
5688:  MOVWF  xA8
568A:  MOVLB  0
568C:  CALL   24DC
5690:  MOVLB  3
5692:  CLRF   xA4
5694:  MOVLB  0
5696:  CALL   2646
569A:  MOVLW  20
569C:  MOVLB  2
569E:  MOVWF  x01
56A0:  MOVLW  10
56A2:  MOVWF  x02
56A4:  MOVWF  x07
56A6:  MOVLW  20
56A8:  MOVWF  x08
....................             estadot40=0;estadoc=1;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=121; 
56AA:  BCF    x0C.0
56AC:  BSF    x0C.1
56AE:  BCF    x0C.2
56B0:  BCF    x0C.3
56B2:  BCF    x0C.4
56B4:  CLRF   x0B
56B6:  MOVLB  3
56B8:  CLRF   xB7
56BA:  MOVLW  37
56BC:  MOVWF  xB8
56BE:  CLRF   xBA
56C0:  MOVLW  E4
56C2:  MOVWF  xB9
56C4:  MOVLW  01
56C6:  MOVWF  xBB
56C8:  MOVWF  xBC
56CA:  MOVLB  0
56CC:  CALL   289C
56D0:  MOVLW  79
56D2:  MOVLB  2
56D4:  MOVWF  x27
....................             glcd_rect(25, 18, 40, 53, NO, ON);enable_interrupts(global);}} 
56D6:  MOVLW  19
56D8:  MOVLB  3
56DA:  MOVWF  xB9
56DC:  MOVLW  12
56DE:  MOVWF  xBA
56E0:  MOVLW  28
56E2:  MOVWF  xBB
56E4:  MOVLW  35
56E6:  MOVWF  xBC
56E8:  CLRF   xBD
56EA:  MOVLW  01
56EC:  MOVWF  xBE
56EE:  MOVLB  0
56F0:  CALL   2F1A
56F4:  MOVLW  C0
56F6:  IORWF  FF2,F
56F8:  MOVLB  2
....................          else 
56FA:  BRA    56FE
....................             {Flanco1 = 0;}    
56FC:  BCF    x0C.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==49){ // Menu de Proceso Personalizado 
56FE:  MOVF   x00,W
5700:  SUBLW  31
5702:  BTFSS  FD8.2
5704:  GOTO   62CA
....................       glcd_text57(10, 0, T_esterilizacion, 1, ON);            // Escribe Menu en Tamaño 2.          
5708:  MOVLW  0A
570A:  MOVLB  3
570C:  MOVWF  xB7
570E:  CLRF   xB8
5710:  MOVLW  01
5712:  MOVWF  xBA
5714:  MOVLW  C5
5716:  MOVWF  xB9
5718:  MOVLW  01
571A:  MOVWF  xBB
571C:  MOVWF  xBC
571E:  MOVLB  0
5720:  CALL   289C
....................        
....................       if(UP)//Si oprime hacia arriba 
5724:  BSF    F92.1
5726:  BTFSS  F80.1
5728:  BRA    57C4
....................       {  if(Flanco == 0)  
572A:  MOVLB  2
572C:  BTFSC  x0C.5
572E:  BRA    57C2
....................             {Flanco = 1;delay_ms(30); 
5730:  BSF    x0C.5
5732:  MOVLW  1E
5734:  MOVLB  3
5736:  MOVWF  xA8
5738:  MOVLB  0
573A:  CALL   24DC
....................             if((Flx==36)&&(Fly==8)) 
573E:  MOVLB  2
5740:  MOVF   x09,W
5742:  SUBLW  24
5744:  BNZ   574E
5746:  MOVF   x0A,W
5748:  SUBLW  08
574A:  BNZ   574E
....................                {Testerilizacionp[3]++;} 
574C:  INCF   x1D,F
....................             if((Flx==42)&&(Fly==8)) 
574E:  MOVF   x09,W
5750:  SUBLW  2A
5752:  BNZ   575C
5754:  MOVF   x0A,W
5756:  SUBLW  08
5758:  BNZ   575C
....................                {Testerilizacionp[2]++;} 
575A:  INCF   x1C,F
....................             if((Flx==54)&&(Fly==8)) 
575C:  MOVF   x09,W
575E:  SUBLW  36
5760:  BNZ   576A
5762:  MOVF   x0A,W
5764:  SUBLW  08
5766:  BNZ   576A
....................                {Testerilizacionp[1]++;} 
5768:  INCF   x1B,F
....................             if((Flx==60)&&(Fly==8)) 
576A:  MOVF   x09,W
576C:  SUBLW  3C
576E:  BNZ   5778
5770:  MOVF   x0A,W
5772:  SUBLW  08
5774:  BNZ   5778
....................                {Testerilizacionp[0]++;} 
5776:  INCF   x1A,F
....................              
....................             if((Flx==36)&&(Fly==40)) 
5778:  MOVF   x09,W
577A:  SUBLW  24
577C:  BNZ   5786
577E:  MOVF   x0A,W
5780:  SUBLW  28
5782:  BNZ   5786
....................                {Tsecadop[3]++;} 
5784:  INCF   x25,F
....................             if((Flx==42)&&(Fly==40)) 
5786:  MOVF   x09,W
5788:  SUBLW  2A
578A:  BNZ   5794
578C:  MOVF   x0A,W
578E:  SUBLW  28
5790:  BNZ   5794
....................                {Tsecadop[2]++;} 
5792:  INCF   x24,F
....................             if((Flx==54)&&(Fly==40)) 
5794:  MOVF   x09,W
5796:  SUBLW  36
5798:  BNZ   57A2
579A:  MOVF   x0A,W
579C:  SUBLW  28
579E:  BNZ   57A2
....................                {Tsecadop[1]++;} 
57A0:  INCF   x23,F
....................             if((Flx==60)&&(Fly==40)) 
57A2:  MOVF   x09,W
57A4:  SUBLW  3C
57A6:  BNZ   57B0
57A8:  MOVF   x0A,W
57AA:  SUBLW  28
57AC:  BNZ   57B0
....................                {Tsecadop[0]++;}   
57AE:  INCF   x22,F
....................             if(Fly==24)    
57B0:  MOVF   x0A,W
57B2:  SUBLW  18
57B4:  BNZ   57BA
....................             {unidad=1;} 
57B6:  MOVLW  01
57B8:  MOVWF  x03
....................              
....................             if(Fly==56) 
57BA:  MOVF   x0A,W
57BC:  SUBLW  38
57BE:  BNZ   57C2
....................             {Setpoint++;} 
57C0:  INCF   x27,F
....................             } 
....................        } 
....................          else 
57C2:  BRA    57C8
....................             {Flanco = 0;} 
57C4:  MOVLB  2
57C6:  BCF    x0C.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
57C8:  BSF    F92.2
57CA:  BTFSS  F80.2
57CC:  BRA    5864
....................       {  if(Flanco2 == 0)  
57CE:  BTFSC  x0C.7
57D0:  BRA    5862
....................             {Flanco2 = 1;delay_ms(30); 
57D2:  BSF    x0C.7
57D4:  MOVLW  1E
57D6:  MOVLB  3
57D8:  MOVWF  xA8
57DA:  MOVLB  0
57DC:  CALL   24DC
....................             if((Flx==36)&&(Fly==8)) 
57E0:  MOVLB  2
57E2:  MOVF   x09,W
57E4:  SUBLW  24
57E6:  BNZ   57F0
57E8:  MOVF   x0A,W
57EA:  SUBLW  08
57EC:  BNZ   57F0
....................                {Testerilizacionp[3]--;} 
57EE:  DECF   x1D,F
....................             if((Flx==42)&&(Fly==8)) 
57F0:  MOVF   x09,W
57F2:  SUBLW  2A
57F4:  BNZ   57FE
57F6:  MOVF   x0A,W
57F8:  SUBLW  08
57FA:  BNZ   57FE
....................                {Testerilizacionp[2]--;} 
57FC:  DECF   x1C,F
....................             if((Flx==54)&&(Fly==8)) 
57FE:  MOVF   x09,W
5800:  SUBLW  36
5802:  BNZ   580C
5804:  MOVF   x0A,W
5806:  SUBLW  08
5808:  BNZ   580C
....................                {Testerilizacionp[1]--;} 
580A:  DECF   x1B,F
....................             if((Flx==60)&&(Fly==8)) 
580C:  MOVF   x09,W
580E:  SUBLW  3C
5810:  BNZ   581A
5812:  MOVF   x0A,W
5814:  SUBLW  08
5816:  BNZ   581A
....................                {Testerilizacionp[0]--;} 
5818:  DECF   x1A,F
....................              
....................             if((Flx==36)&&(Fly==40)) 
581A:  MOVF   x09,W
581C:  SUBLW  24
581E:  BNZ   5828
5820:  MOVF   x0A,W
5822:  SUBLW  28
5824:  BNZ   5828
....................                {Tsecadop[3]--;} 
5826:  DECF   x25,F
....................             if((Flx==42)&&(Fly==40)) 
5828:  MOVF   x09,W
582A:  SUBLW  2A
582C:  BNZ   5836
582E:  MOVF   x0A,W
5830:  SUBLW  28
5832:  BNZ   5836
....................                {Tsecadop[2]--;} 
5834:  DECF   x24,F
....................             if((Flx==54)&&(Fly==40)) 
5836:  MOVF   x09,W
5838:  SUBLW  36
583A:  BNZ   5844
583C:  MOVF   x0A,W
583E:  SUBLW  28
5840:  BNZ   5844
....................                {Tsecadop[1]--;} 
5842:  DECF   x23,F
....................             if((Flx==60)&&(Fly==40)) 
5844:  MOVF   x09,W
5846:  SUBLW  3C
5848:  BNZ   5852
584A:  MOVF   x0A,W
584C:  SUBLW  28
584E:  BNZ   5852
....................                {Tsecadop[0]--;}   
5850:  DECF   x22,F
....................             if(Fly==24)    
5852:  MOVF   x0A,W
5854:  SUBLW  18
5856:  BNZ   585A
....................                {unidad=0;} 
5858:  CLRF   x03
....................             if(Fly==56) 
585A:  MOVF   x0A,W
585C:  SUBLW  38
585E:  BNZ   5862
....................             {Setpoint--;}                
5860:  DECF   x27,F
....................             } 
....................       } 
....................          else 
5862:  BRA    5866
....................             {Flanco2 = 0;} 
5864:  BCF    x0C.7
....................              
....................             if((Flx==36)&&(Fly==8)) 
5866:  MOVF   x09,W
5868:  SUBLW  24
586A:  BNZ   58D4
586C:  MOVF   x0A,W
586E:  SUBLW  08
5870:  BNZ   58D4
....................                {displayTiempo(Testerilizacionp[3],36,8,2);displayTiempo(Testerilizacionp[2],42,8,1); 
5872:  MOVFF  21D,3A4
5876:  MOVLW  24
5878:  MOVLB  3
587A:  MOVWF  xA5
587C:  MOVLW  08
587E:  MOVWF  xA6
5880:  MOVLW  02
5882:  MOVWF  xA7
5884:  MOVLB  0
5886:  CALL   3664
588A:  MOVFF  21C,3A4
588E:  MOVLW  2A
5890:  MOVLB  3
5892:  MOVWF  xA5
5894:  MOVLW  08
5896:  MOVWF  xA6
5898:  MOVLW  01
589A:  MOVWF  xA7
589C:  MOVLB  0
589E:  CALL   3664
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);} 
58A2:  MOVFF  21B,3A4
58A6:  MOVLW  36
58A8:  MOVLB  3
58AA:  MOVWF  xA5
58AC:  MOVLW  08
58AE:  MOVWF  xA6
58B0:  MOVLW  01
58B2:  MOVWF  xA7
58B4:  MOVLB  0
58B6:  CALL   3664
58BA:  MOVFF  21A,3A4
58BE:  MOVLW  3C
58C0:  MOVLB  3
58C2:  MOVWF  xA5
58C4:  MOVLW  08
58C6:  MOVWF  xA6
58C8:  MOVLW  01
58CA:  MOVWF  xA7
58CC:  MOVLB  0
58CE:  CALL   3664
58D2:  MOVLB  2
....................             if((Flx==42)&&(Fly==8)) 
58D4:  MOVF   x09,W
58D6:  SUBLW  2A
58D8:  BNZ   5942
58DA:  MOVF   x0A,W
58DC:  SUBLW  08
58DE:  BNZ   5942
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,2); 
58E0:  MOVFF  21D,3A4
58E4:  MOVLW  24
58E6:  MOVLB  3
58E8:  MOVWF  xA5
58EA:  MOVLW  08
58EC:  MOVWF  xA6
58EE:  MOVLW  01
58F0:  MOVWF  xA7
58F2:  MOVLB  0
58F4:  CALL   3664
58F8:  MOVFF  21C,3A4
58FC:  MOVLW  2A
58FE:  MOVLB  3
5900:  MOVWF  xA5
5902:  MOVLW  08
5904:  MOVWF  xA6
5906:  MOVLW  02
5908:  MOVWF  xA7
590A:  MOVLB  0
590C:  CALL   3664
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);} 
5910:  MOVFF  21B,3A4
5914:  MOVLW  36
5916:  MOVLB  3
5918:  MOVWF  xA5
591A:  MOVLW  08
591C:  MOVWF  xA6
591E:  MOVLW  01
5920:  MOVWF  xA7
5922:  MOVLB  0
5924:  CALL   3664
5928:  MOVFF  21A,3A4
592C:  MOVLW  3C
592E:  MOVLB  3
5930:  MOVWF  xA5
5932:  MOVLW  08
5934:  MOVWF  xA6
5936:  MOVLW  01
5938:  MOVWF  xA7
593A:  MOVLB  0
593C:  CALL   3664
5940:  MOVLB  2
....................             if((Flx==54)&&(Fly==8)) 
5942:  MOVF   x09,W
5944:  SUBLW  36
5946:  BNZ   59B0
5948:  MOVF   x0A,W
594A:  SUBLW  08
594C:  BNZ   59B0
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
594E:  MOVFF  21D,3A4
5952:  MOVLW  24
5954:  MOVLB  3
5956:  MOVWF  xA5
5958:  MOVLW  08
595A:  MOVWF  xA6
595C:  MOVLW  01
595E:  MOVWF  xA7
5960:  MOVLB  0
5962:  CALL   3664
5966:  MOVFF  21C,3A4
596A:  MOVLW  2A
596C:  MOVLB  3
596E:  MOVWF  xA5
5970:  MOVLW  08
5972:  MOVWF  xA6
5974:  MOVLW  01
5976:  MOVWF  xA7
5978:  MOVLB  0
597A:  CALL   3664
....................                displayTiempo(Testerilizacionp[1],54,8,2);displayTiempo(Testerilizacionp[0],60,8,1);} 
597E:  MOVFF  21B,3A4
5982:  MOVLW  36
5984:  MOVLB  3
5986:  MOVWF  xA5
5988:  MOVLW  08
598A:  MOVWF  xA6
598C:  MOVLW  02
598E:  MOVWF  xA7
5990:  MOVLB  0
5992:  CALL   3664
5996:  MOVFF  21A,3A4
599A:  MOVLW  3C
599C:  MOVLB  3
599E:  MOVWF  xA5
59A0:  MOVLW  08
59A2:  MOVWF  xA6
59A4:  MOVLW  01
59A6:  MOVWF  xA7
59A8:  MOVLB  0
59AA:  CALL   3664
59AE:  MOVLB  2
....................             if((Flx==60)&&(Fly==8)) 
59B0:  MOVF   x09,W
59B2:  SUBLW  3C
59B4:  BNZ   5A1E
59B6:  MOVF   x0A,W
59B8:  SUBLW  08
59BA:  BNZ   5A1E
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
59BC:  MOVFF  21D,3A4
59C0:  MOVLW  24
59C2:  MOVLB  3
59C4:  MOVWF  xA5
59C6:  MOVLW  08
59C8:  MOVWF  xA6
59CA:  MOVLW  01
59CC:  MOVWF  xA7
59CE:  MOVLB  0
59D0:  CALL   3664
59D4:  MOVFF  21C,3A4
59D8:  MOVLW  2A
59DA:  MOVLB  3
59DC:  MOVWF  xA5
59DE:  MOVLW  08
59E0:  MOVWF  xA6
59E2:  MOVLW  01
59E4:  MOVWF  xA7
59E6:  MOVLB  0
59E8:  CALL   3664
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,2);}   
59EC:  MOVFF  21B,3A4
59F0:  MOVLW  36
59F2:  MOVLB  3
59F4:  MOVWF  xA5
59F6:  MOVLW  08
59F8:  MOVWF  xA6
59FA:  MOVLW  01
59FC:  MOVWF  xA7
59FE:  MOVLB  0
5A00:  CALL   3664
5A04:  MOVFF  21A,3A4
5A08:  MOVLW  3C
5A0A:  MOVLB  3
5A0C:  MOVWF  xA5
5A0E:  MOVLW  08
5A10:  MOVWF  xA6
5A12:  MOVLW  02
5A14:  MOVWF  xA7
5A16:  MOVLB  0
5A18:  CALL   3664
5A1C:  MOVLB  2
....................             if((Fly!=8)) 
5A1E:  MOVF   x0A,W
5A20:  SUBLW  08
5A22:  BZ    5A84
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
5A24:  MOVFF  21D,3A4
5A28:  MOVLW  24
5A2A:  MOVLB  3
5A2C:  MOVWF  xA5
5A2E:  MOVLW  08
5A30:  MOVWF  xA6
5A32:  MOVLW  01
5A34:  MOVWF  xA7
5A36:  MOVLB  0
5A38:  CALL   3664
5A3C:  MOVFF  21C,3A4
5A40:  MOVLW  2A
5A42:  MOVLB  3
5A44:  MOVWF  xA5
5A46:  MOVLW  08
5A48:  MOVWF  xA6
5A4A:  MOVLW  01
5A4C:  MOVWF  xA7
5A4E:  MOVLB  0
5A50:  CALL   3664
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);}   
5A54:  MOVFF  21B,3A4
5A58:  MOVLW  36
5A5A:  MOVLB  3
5A5C:  MOVWF  xA5
5A5E:  MOVLW  08
5A60:  MOVWF  xA6
5A62:  MOVLW  01
5A64:  MOVWF  xA7
5A66:  MOVLB  0
5A68:  CALL   3664
5A6C:  MOVFF  21A,3A4
5A70:  MOVLW  3C
5A72:  MOVLB  3
5A74:  MOVWF  xA5
5A76:  MOVLW  08
5A78:  MOVWF  xA6
5A7A:  MOVLW  01
5A7C:  MOVWF  xA7
5A7E:  MOVLB  0
5A80:  CALL   3664
....................              
....................              
....................       glcd_text57(15, 17, Desfogue, 1, ON);            // Escribe Menu en Tamaño 2.    
5A84:  MOVLW  0F
5A86:  MOVLB  3
5A88:  MOVWF  xB7
5A8A:  MOVLW  11
5A8C:  MOVWF  xB8
5A8E:  MOVLW  01
5A90:  MOVWF  xBA
5A92:  MOVLW  DF
5A94:  MOVWF  xB9
5A96:  MOVLW  01
5A98:  MOVWF  xBB
5A9A:  MOVWF  xBC
5A9C:  MOVLB  0
5A9E:  CALL   289C
....................              
....................             if(Fly==24) 
5AA2:  MOVLB  2
5AA4:  MOVF   x0A,W
5AA6:  SUBLW  18
5AA8:  BNZ   5B34
....................                {if(unidad==1) 
5AAA:  DECFSZ x03,W
5AAC:  BRA    5AF0
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, ON);glcd_text57(48, 25, Si, 1, OFF);Liquid=0;} 
5AAE:  MOVLW  30
5AB0:  MOVLB  3
5AB2:  MOVWF  xB9
5AB4:  MOVLW  19
5AB6:  MOVWF  xBA
5AB8:  MOVLW  3B
5ABA:  MOVWF  xBB
5ABC:  MOVLW  20
5ABE:  MOVWF  xBC
5AC0:  MOVLW  01
5AC2:  MOVWF  xBD
5AC4:  MOVWF  xBE
5AC6:  MOVLB  0
5AC8:  CALL   2F1A
5ACC:  MOVLW  30
5ACE:  MOVLB  3
5AD0:  MOVWF  xB7
5AD2:  MOVLW  19
5AD4:  MOVWF  xB8
5AD6:  MOVLW  01
5AD8:  MOVWF  xBA
5ADA:  MOVLW  EF
5ADC:  MOVWF  xB9
5ADE:  MOVLW  01
5AE0:  MOVWF  xBB
5AE2:  CLRF   xBC
5AE4:  MOVLB  0
5AE6:  CALL   289C
5AEA:  MOVLB  2
5AEC:  CLRF   x0B
....................                 else 
5AEE:  BRA    5B32
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, ON);glcd_text57(48, 25, Noo, 1, OFF);Liquid=1;} 
5AF0:  MOVLW  30
5AF2:  MOVLB  3
5AF4:  MOVWF  xB9
5AF6:  MOVLW  19
5AF8:  MOVWF  xBA
5AFA:  MOVLW  3B
5AFC:  MOVWF  xBB
5AFE:  MOVLW  20
5B00:  MOVWF  xBC
5B02:  MOVLW  01
5B04:  MOVWF  xBD
5B06:  MOVWF  xBE
5B08:  MOVLB  0
5B0A:  CALL   2F1A
5B0E:  MOVLW  30
5B10:  MOVLB  3
5B12:  MOVWF  xB7
5B14:  MOVLW  19
5B16:  MOVWF  xB8
5B18:  MOVLW  01
5B1A:  MOVWF  xBA
5B1C:  MOVLW  F2
5B1E:  MOVWF  xB9
5B20:  MOVLW  01
5B22:  MOVWF  xBB
5B24:  CLRF   xBC
5B26:  MOVLB  0
5B28:  CALL   289C
5B2C:  MOVLW  01
5B2E:  MOVLB  2
5B30:  MOVWF  x0B
....................                } 
....................             else 
5B32:  BRA    5BB4
....................                {if(unidad==1) 
5B34:  DECFSZ x03,W
5B36:  BRA    5B76
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, OFF);glcd_text57(48, 25, Si, 1, ON);} 
5B38:  MOVLW  30
5B3A:  MOVLB  3
5B3C:  MOVWF  xB9
5B3E:  MOVLW  19
5B40:  MOVWF  xBA
5B42:  MOVLW  3B
5B44:  MOVWF  xBB
5B46:  MOVLW  20
5B48:  MOVWF  xBC
5B4A:  MOVLW  01
5B4C:  MOVWF  xBD
5B4E:  CLRF   xBE
5B50:  MOVLB  0
5B52:  CALL   2F1A
5B56:  MOVLW  30
5B58:  MOVLB  3
5B5A:  MOVWF  xB7
5B5C:  MOVLW  19
5B5E:  MOVWF  xB8
5B60:  MOVLW  01
5B62:  MOVWF  xBA
5B64:  MOVLW  EF
5B66:  MOVWF  xB9
5B68:  MOVLW  01
5B6A:  MOVWF  xBB
5B6C:  MOVWF  xBC
5B6E:  MOVLB  0
5B70:  CALL   289C
....................                 else 
5B74:  BRA    5BB2
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, OFF);glcd_text57(48, 25, Noo, 1, ON);} 
5B76:  MOVLW  30
5B78:  MOVLB  3
5B7A:  MOVWF  xB9
5B7C:  MOVLW  19
5B7E:  MOVWF  xBA
5B80:  MOVLW  3B
5B82:  MOVWF  xBB
5B84:  MOVLW  20
5B86:  MOVWF  xBC
5B88:  MOVLW  01
5B8A:  MOVWF  xBD
5B8C:  CLRF   xBE
5B8E:  MOVLB  0
5B90:  CALL   2F1A
5B94:  MOVLW  30
5B96:  MOVLB  3
5B98:  MOVWF  xB7
5B9A:  MOVLW  19
5B9C:  MOVWF  xB8
5B9E:  MOVLW  01
5BA0:  MOVWF  xBA
5BA2:  MOVLW  F2
5BA4:  MOVWF  xB9
5BA6:  MOVLW  01
5BA8:  MOVWF  xBB
5BAA:  MOVWF  xBC
5BAC:  MOVLB  0
5BAE:  CALL   289C
5BB2:  MOVLB  2
....................                } 
....................        
....................       if((Flx>60)&&(Fly<40))             
5BB4:  MOVF   x09,W
5BB6:  SUBLW  3C
5BB8:  BC    5BC8
5BBA:  MOVF   x0A,W
5BBC:  SUBLW  27
5BBE:  BNC   5BC8
....................          {Flx=36;Fly=Fly+16;} 
5BC0:  MOVLW  24
5BC2:  MOVWF  x09
5BC4:  MOVLW  10
5BC6:  ADDWF  x0A,F
....................       if((Flx<36)&&(Fly<=40))             
5BC8:  MOVF   x09,W
5BCA:  SUBLW  23
5BCC:  BNC   5BDC
5BCE:  MOVF   x0A,W
5BD0:  SUBLW  28
5BD2:  BNC   5BDC
....................          {Flx=36;Fly=8;}    
5BD4:  MOVLW  24
5BD6:  MOVWF  x09
5BD8:  MOVLW  08
5BDA:  MOVWF  x0A
....................        
....................       glcd_text57(48, 8, Vacio, 1, ON); 
5BDC:  MOVLW  30
5BDE:  MOVLB  3
5BE0:  MOVWF  xB7
5BE2:  MOVLW  08
5BE4:  MOVWF  xB8
5BE6:  MOVLW  01
5BE8:  MOVWF  xBA
5BEA:  MOVLW  2E
5BEC:  MOVWF  xB9
5BEE:  MOVLW  01
5BF0:  MOVWF  xBB
5BF2:  MOVWF  xBC
5BF4:  MOVLB  0
5BF6:  CALL   289C
....................       glcd_text57(48, 42, Vacio, 1, ON); 
5BFA:  MOVLW  30
5BFC:  MOVLB  3
5BFE:  MOVWF  xB7
5C00:  MOVLW  2A
5C02:  MOVWF  xB8
5C04:  MOVLW  01
5C06:  MOVWF  xBA
5C08:  MOVLW  2E
5C0A:  MOVWF  xB9
5C0C:  MOVLW  01
5C0E:  MOVWF  xBB
5C10:  MOVWF  xBC
5C12:  MOVLB  0
5C14:  CALL   289C
....................        
....................        
....................       glcd_text57(30, 34, T_secado, 1, ON);            // Escribe Menu en Tamaño 2.    
5C18:  MOVLW  1E
5C1A:  MOVLB  3
5C1C:  MOVWF  xB7
5C1E:  MOVLW  22
5C20:  MOVWF  xB8
5C22:  MOVLW  01
5C24:  MOVWF  xBA
5C26:  MOVLW  D6
5C28:  MOVWF  xB9
5C2A:  MOVLW  01
5C2C:  MOVWF  xBB
5C2E:  MOVWF  xBC
5C30:  MOVLB  0
5C32:  CALL   289C
....................       displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
5C36:  MOVFF  225,3A4
5C3A:  MOVLW  24
5C3C:  MOVLB  3
5C3E:  MOVWF  xA5
5C40:  MOVLW  2A
5C42:  MOVWF  xA6
5C44:  MOVLW  01
5C46:  MOVWF  xA7
5C48:  MOVLB  0
5C4A:  CALL   3664
5C4E:  MOVFF  224,3A4
5C52:  MOVLW  2A
5C54:  MOVLB  3
5C56:  MOVWF  xA5
5C58:  MOVWF  xA6
5C5A:  MOVLW  01
5C5C:  MOVWF  xA7
5C5E:  MOVLB  0
5C60:  CALL   3664
....................       displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1); 
5C64:  MOVFF  223,3A4
5C68:  MOVLW  36
5C6A:  MOVLB  3
5C6C:  MOVWF  xA5
5C6E:  MOVLW  2A
5C70:  MOVWF  xA6
5C72:  MOVLW  01
5C74:  MOVWF  xA7
5C76:  MOVLB  0
5C78:  CALL   3664
5C7C:  MOVFF  222,3A4
5C80:  MOVLW  3C
5C82:  MOVLB  3
5C84:  MOVWF  xA5
5C86:  MOVLW  2A
5C88:  MOVWF  xA6
5C8A:  MOVLW  01
5C8C:  MOVWF  xA7
5C8E:  MOVLB  0
5C90:  CALL   3664
....................  
....................             if(Fly==40) // Si posición en y esta en donde aparece lo de tiempo de secado 
5C94:  MOVLB  2
5C96:  MOVF   x0A,W
5C98:  SUBLW  28
5C9A:  BTFSS  FD8.2
5C9C:  BRA    5E5E
....................                {if(unidad==1) // Si se acepto el desfogue rapido. 
5C9E:  DECFSZ x03,W
5CA0:  BRA    5E50
....................                 
....................                   {  if(Flx==36) // Si esta en la decena de minutos. 
5CA2:  MOVF   x09,W
5CA4:  SUBLW  24
5CA6:  BNZ   5D08
....................                         {displayTiempo(Tsecadop[3],36,42,2);displayTiempo(Tsecadop[2],42,42,1); 
5CA8:  MOVFF  225,3A4
5CAC:  MOVLW  24
5CAE:  MOVLB  3
5CB0:  MOVWF  xA5
5CB2:  MOVLW  2A
5CB4:  MOVWF  xA6
5CB6:  MOVLW  02
5CB8:  MOVWF  xA7
5CBA:  MOVLB  0
5CBC:  CALL   3664
5CC0:  MOVFF  224,3A4
5CC4:  MOVLW  2A
5CC6:  MOVLB  3
5CC8:  MOVWF  xA5
5CCA:  MOVWF  xA6
5CCC:  MOVLW  01
5CCE:  MOVWF  xA7
5CD0:  MOVLB  0
5CD2:  CALL   3664
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1);} 
5CD6:  MOVFF  223,3A4
5CDA:  MOVLW  36
5CDC:  MOVLB  3
5CDE:  MOVWF  xA5
5CE0:  MOVLW  2A
5CE2:  MOVWF  xA6
5CE4:  MOVLW  01
5CE6:  MOVWF  xA7
5CE8:  MOVLB  0
5CEA:  CALL   3664
5CEE:  MOVFF  222,3A4
5CF2:  MOVLW  3C
5CF4:  MOVLB  3
5CF6:  MOVWF  xA5
5CF8:  MOVLW  2A
5CFA:  MOVWF  xA6
5CFC:  MOVLW  01
5CFE:  MOVWF  xA7
5D00:  MOVLB  0
5D02:  CALL   3664
5D06:  MOVLB  2
....................                          
....................                      if(Flx==42) // Si esta en la unidad de minutos. 
5D08:  MOVF   x09,W
5D0A:  SUBLW  2A
5D0C:  BNZ   5D6E
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,2); 
5D0E:  MOVFF  225,3A4
5D12:  MOVLW  24
5D14:  MOVLB  3
5D16:  MOVWF  xA5
5D18:  MOVLW  2A
5D1A:  MOVWF  xA6
5D1C:  MOVLW  01
5D1E:  MOVWF  xA7
5D20:  MOVLB  0
5D22:  CALL   3664
5D26:  MOVFF  224,3A4
5D2A:  MOVLW  2A
5D2C:  MOVLB  3
5D2E:  MOVWF  xA5
5D30:  MOVWF  xA6
5D32:  MOVLW  02
5D34:  MOVWF  xA7
5D36:  MOVLB  0
5D38:  CALL   3664
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1);} 
5D3C:  MOVFF  223,3A4
5D40:  MOVLW  36
5D42:  MOVLB  3
5D44:  MOVWF  xA5
5D46:  MOVLW  2A
5D48:  MOVWF  xA6
5D4A:  MOVLW  01
5D4C:  MOVWF  xA7
5D4E:  MOVLB  0
5D50:  CALL   3664
5D54:  MOVFF  222,3A4
5D58:  MOVLW  3C
5D5A:  MOVLB  3
5D5C:  MOVWF  xA5
5D5E:  MOVLW  2A
5D60:  MOVWF  xA6
5D62:  MOVLW  01
5D64:  MOVWF  xA7
5D66:  MOVLB  0
5D68:  CALL   3664
5D6C:  MOVLB  2
....................                          
....................                      if(Flx==54) // Si esta en la decena de segundos. 
5D6E:  MOVF   x09,W
5D70:  SUBLW  36
5D72:  BNZ   5DD4
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
5D74:  MOVFF  225,3A4
5D78:  MOVLW  24
5D7A:  MOVLB  3
5D7C:  MOVWF  xA5
5D7E:  MOVLW  2A
5D80:  MOVWF  xA6
5D82:  MOVLW  01
5D84:  MOVWF  xA7
5D86:  MOVLB  0
5D88:  CALL   3664
5D8C:  MOVFF  224,3A4
5D90:  MOVLW  2A
5D92:  MOVLB  3
5D94:  MOVWF  xA5
5D96:  MOVWF  xA6
5D98:  MOVLW  01
5D9A:  MOVWF  xA7
5D9C:  MOVLB  0
5D9E:  CALL   3664
....................                         displayTiempo(Tsecadop[1],54,42,2);displayTiempo(Tsecadop[0],60,42,1);} 
5DA2:  MOVFF  223,3A4
5DA6:  MOVLW  36
5DA8:  MOVLB  3
5DAA:  MOVWF  xA5
5DAC:  MOVLW  2A
5DAE:  MOVWF  xA6
5DB0:  MOVLW  02
5DB2:  MOVWF  xA7
5DB4:  MOVLB  0
5DB6:  CALL   3664
5DBA:  MOVFF  222,3A4
5DBE:  MOVLW  3C
5DC0:  MOVLB  3
5DC2:  MOVWF  xA5
5DC4:  MOVLW  2A
5DC6:  MOVWF  xA6
5DC8:  MOVLW  01
5DCA:  MOVWF  xA7
5DCC:  MOVLB  0
5DCE:  CALL   3664
5DD2:  MOVLB  2
....................                          
....................                      if(Flx==60) // Si esta en la decena de segundos. 
5DD4:  MOVF   x09,W
5DD6:  SUBLW  3C
5DD8:  BNZ   5E3A
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
5DDA:  MOVFF  225,3A4
5DDE:  MOVLW  24
5DE0:  MOVLB  3
5DE2:  MOVWF  xA5
5DE4:  MOVLW  2A
5DE6:  MOVWF  xA6
5DE8:  MOVLW  01
5DEA:  MOVWF  xA7
5DEC:  MOVLB  0
5DEE:  CALL   3664
5DF2:  MOVFF  224,3A4
5DF6:  MOVLW  2A
5DF8:  MOVLB  3
5DFA:  MOVWF  xA5
5DFC:  MOVWF  xA6
5DFE:  MOVLW  01
5E00:  MOVWF  xA7
5E02:  MOVLB  0
5E04:  CALL   3664
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,2);} 
5E08:  MOVFF  223,3A4
5E0C:  MOVLW  36
5E0E:  MOVLB  3
5E10:  MOVWF  xA5
5E12:  MOVLW  2A
5E14:  MOVWF  xA6
5E16:  MOVLW  01
5E18:  MOVWF  xA7
5E1A:  MOVLB  0
5E1C:  CALL   3664
5E20:  MOVFF  222,3A4
5E24:  MOVLW  3C
5E26:  MOVLB  3
5E28:  MOVWF  xA5
5E2A:  MOVLW  2A
5E2C:  MOVWF  xA6
5E2E:  MOVLW  02
5E30:  MOVWF  xA7
5E32:  MOVLB  0
5E34:  CALL   3664
5E38:  MOVLB  2
....................                          
....................                      if(Flx>60) // Si paso de unidades de segundos, quiere decir que acepto lo programado y vuelve a Menú principal.   
5E3A:  MOVF   x09,W
5E3C:  SUBLW  3C
5E3E:  BC    5E4E
....................                         {Fly=Fly+16;estadot40=0;estadoc=0;estadoi=0;estadol=0;estadop=1;}  
5E40:  MOVLW  10
5E42:  ADDWF  x0A,F
5E44:  BCF    x0C.0
5E46:  BCF    x0C.1
5E48:  BCF    x0C.2
5E4A:  BCF    x0C.3
5E4C:  BSF    x0C.4
....................                          
....................                } 
....................                 else 
5E4E:  BRA    5E5E
....................                   {Fly=56;estadot40=0;estadoc=0;estadoi=0;estadol=0;estadop=1;} 
5E50:  MOVLW  38
5E52:  MOVWF  x0A
5E54:  BCF    x0C.0
5E56:  BCF    x0C.1
5E58:  BCF    x0C.2
5E5A:  BCF    x0C.3
5E5C:  BSF    x0C.4
....................                } 
....................                 
....................                 
....................                if(Fly==56) 
5E5E:  MOVF   x0A,W
5E60:  SUBLW  38
5E62:  BNZ   5ED2
....................                {glcd_text57(0, 55, T, 1, ON); // Muestra la palabra Temperatura de esterilización 
5E64:  MOVLB  3
5E66:  CLRF   xB7
5E68:  MOVLW  37
5E6A:  MOVWF  xB8
5E6C:  MOVLW  01
5E6E:  MOVWF  xBA
5E70:  MOVLW  B9
5E72:  MOVWF  xB9
5E74:  MOVLW  01
5E76:  MOVWF  xBB
5E78:  MOVWF  xBC
5E7A:  MOVLB  0
5E7C:  CALL   289C
....................                glcd_text57(66, 55, Vacio, 1, ON); //  
5E80:  MOVLW  42
5E82:  MOVLB  3
5E84:  MOVWF  xB7
5E86:  MOVLW  37
5E88:  MOVWF  xB8
5E8A:  MOVLW  01
5E8C:  MOVWF  xBA
5E8E:  MOVLW  2E
5E90:  MOVWF  xB9
5E92:  MOVLW  01
5E94:  MOVWF  xBB
5E96:  MOVWF  xBC
5E98:  MOVLB  0
5E9A:  CALL   289C
....................                displayTiempo(Setpoint,72,55,4); 
5E9E:  MOVFF  227,3A4
5EA2:  MOVLW  48
5EA4:  MOVLB  3
5EA6:  MOVWF  xA5
5EA8:  MOVLW  37
5EAA:  MOVWF  xA6
5EAC:  MOVLW  04
5EAE:  MOVWF  xA7
5EB0:  MOVLB  0
5EB2:  CALL   3664
....................                glcd_circle(93,55,2,NO,ON); 
5EB6:  MOVLW  5D
5EB8:  MOVLB  3
5EBA:  MOVWF  xA3
5EBC:  MOVLW  37
5EBE:  MOVWF  xA4
5EC0:  MOVLW  02
5EC2:  MOVWF  xA5
5EC4:  CLRF   xA6
5EC6:  MOVLW  01
5EC8:  MOVWF  xA7
5ECA:  MOVLB  0
5ECC:  CALL   388E
5ED0:  MOVLB  2
....................                } 
....................                if(Fly!=56) 
5ED2:  MOVF   x0A,W
5ED4:  SUBLW  38
5ED6:  BZ    5F46
....................                {  glcd_text57(0, 55, T, 1, ON); // Muestra la palabra Temperatura de esterilización 
5ED8:  MOVLB  3
5EDA:  CLRF   xB7
5EDC:  MOVLW  37
5EDE:  MOVWF  xB8
5EE0:  MOVLW  01
5EE2:  MOVWF  xBA
5EE4:  MOVLW  B9
5EE6:  MOVWF  xB9
5EE8:  MOVLW  01
5EEA:  MOVWF  xBB
5EEC:  MOVWF  xBC
5EEE:  MOVLB  0
5EF0:  CALL   289C
....................                glcd_text57(66, 55, Vacio, 1, ON); //  
5EF4:  MOVLW  42
5EF6:  MOVLB  3
5EF8:  MOVWF  xB7
5EFA:  MOVLW  37
5EFC:  MOVWF  xB8
5EFE:  MOVLW  01
5F00:  MOVWF  xBA
5F02:  MOVLW  2E
5F04:  MOVWF  xB9
5F06:  MOVLW  01
5F08:  MOVWF  xBB
5F0A:  MOVWF  xBC
5F0C:  MOVLB  0
5F0E:  CALL   289C
....................                displayTiempo(Setpoint,72,55,1); 
5F12:  MOVFF  227,3A4
5F16:  MOVLW  48
5F18:  MOVLB  3
5F1A:  MOVWF  xA5
5F1C:  MOVLW  37
5F1E:  MOVWF  xA6
5F20:  MOVLW  01
5F22:  MOVWF  xA7
5F24:  MOVLB  0
5F26:  CALL   3664
....................                glcd_circle(93,55,2,NO,ON); 
5F2A:  MOVLW  5D
5F2C:  MOVLB  3
5F2E:  MOVWF  xA3
5F30:  MOVLW  37
5F32:  MOVWF  xA4
5F34:  MOVLW  02
5F36:  MOVWF  xA5
5F38:  CLRF   xA6
5F3A:  MOVLW  01
5F3C:  MOVWF  xA7
5F3E:  MOVLB  0
5F40:  CALL   388E
5F44:  MOVLB  2
....................                } 
....................                 
....................        if(LEFT)// Si oprime Izquier|da 
5F46:  BSF    F92.5
5F48:  BTFSS  F80.5
5F4A:  BRA    5FEE
....................        {  if(Flanco3 == 0)  
5F4C:  BTFSC  x0D.0
5F4E:  BRA    5FEC
....................             {Flanco3 = 1; 
5F50:  BSF    x0D.0
....................                if(Fly==24){Fly=Fly-16;} 
5F52:  MOVF   x0A,W
5F54:  SUBLW  18
5F56:  BNZ   5F5E
5F58:  MOVLW  10
5F5A:  SUBWF  x0A,F
....................                else{Flx=Flx-6;} 
5F5C:  BRA    5F62
5F5E:  MOVLW  06
5F60:  SUBWF  x09,F
....................                if((Fly==40)&&(Flx<36)){Fly=Fly-16;} 
5F62:  MOVF   x0A,W
5F64:  SUBLW  28
5F66:  BNZ   5F72
5F68:  MOVF   x09,W
5F6A:  SUBLW  23
5F6C:  BNC   5F72
5F6E:  MOVLW  10
5F70:  SUBWF  x0A,F
....................                if((Fly==8)&&(Flx<36)){Menu=0;glcd_fillScreen(OFF);Flecha2=n_opcionL; Flecha=n_opcionL;n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;}               
5F72:  MOVF   x0A,W
5F74:  SUBLW  08
5F76:  BNZ   5FA2
5F78:  MOVF   x09,W
5F7A:  SUBLW  23
5F7C:  BNC   5FA2
5F7E:  CLRF   x00
5F80:  MOVLB  3
5F82:  CLRF   xA4
5F84:  MOVLB  0
5F86:  CALL   2646
5F8A:  MOVFF  202,206
5F8E:  MOVFF  202,204
5F92:  MOVLW  20
5F94:  MOVLB  2
5F96:  MOVWF  x01
5F98:  MOVLW  10
5F9A:  MOVWF  x02
5F9C:  MOVWF  x07
5F9E:  MOVLW  20
5FA0:  MOVWF  x08
....................                if(Flx==48){Flx=42;};if(Flx==55){Flx=30;};delay_ms(30);delay_ms(30); 
5FA2:  MOVF   x09,W
5FA4:  SUBLW  30
5FA6:  BNZ   5FAC
5FA8:  MOVLW  2A
5FAA:  MOVWF  x09
5FAC:  MOVF   x09,W
5FAE:  SUBLW  37
5FB0:  BNZ   5FB6
5FB2:  MOVLW  1E
5FB4:  MOVWF  x09
5FB6:  MOVLW  1E
5FB8:  MOVLB  3
5FBA:  MOVWF  xA8
5FBC:  MOVLB  0
5FBE:  CALL   24DC
5FC2:  MOVLW  1E
5FC4:  MOVLB  3
5FC6:  MOVWF  xA8
5FC8:  MOVLB  0
5FCA:  CALL   24DC
....................                if(Fly==56){Fly=8;Flx=36;};delay_ms(30); 
5FCE:  MOVLB  2
5FD0:  MOVF   x0A,W
5FD2:  SUBLW  38
5FD4:  BNZ   5FDE
5FD6:  MOVLW  08
5FD8:  MOVWF  x0A
5FDA:  MOVLW  24
5FDC:  MOVWF  x09
5FDE:  MOVLW  1E
5FE0:  MOVLB  3
5FE2:  MOVWF  xA8
5FE4:  MOVLB  0
5FE6:  CALL   24DC
5FEA:  MOVLB  2
....................              } 
....................         } 
....................          else 
5FEC:  BRA    5FF0
....................             {Flanco3 = 0;}                 
5FEE:  BCF    x0D.0
....................                 
....................         if(Testerilizacionp[0]<0) // Si esta unidad es menor a 0 pasa a 9. 
5FF0:  BTFSC  x1A.7
5FF2:  BRA    5FF6
5FF4:  BRA    5FFA
....................           {Testerilizacionp[0]=9;} 
5FF6:  MOVLW  09
5FF8:  MOVWF  x1A
....................         if(Testerilizacionp[1]<0) // Si esta unidad es menor a 0 pasa a 5. 
5FFA:  BTFSC  x1B.7
5FFC:  BRA    6000
5FFE:  BRA    6004
....................           {Testerilizacionp[1]=5;} 
6000:  MOVLW  05
6002:  MOVWF  x1B
....................         if(Testerilizacionp[2]<0) // Si esta unidad es menor a 0 pasa a 9. 
6004:  BTFSC  x1C.7
6006:  BRA    600A
6008:  BRA    600E
....................           {Testerilizacionp[2]=9;} 
600A:  MOVLW  09
600C:  MOVWF  x1C
....................         if(Testerilizacionp[3]<0) // Si esta unidad es menor a 0 pasa a 9. 
600E:  BTFSC  x1D.7
6010:  BRA    6014
6012:  BRA    6018
....................           {Testerilizacionp[3]=9;}   
6014:  MOVLW  09
6016:  MOVWF  x1D
....................            
....................         if(Testerilizacionp[0]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6018:  BTFSC  x1A.7
601A:  BRA    6024
601C:  MOVF   x1A,W
601E:  SUBLW  09
6020:  BC    6024
....................           {Testerilizacionp[0]=0;} 
6022:  CLRF   x1A
....................         if(Testerilizacionp[1]>5) // Si esta unidad es mayor a 5 pasa a 0. 
6024:  BTFSC  x1B.7
6026:  BRA    6030
6028:  MOVF   x1B,W
602A:  SUBLW  05
602C:  BC    6030
....................           {Testerilizacionp[1]=0;} 
602E:  CLRF   x1B
....................         if(Testerilizacionp[2]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6030:  BTFSC  x1C.7
6032:  BRA    603C
6034:  MOVF   x1C,W
6036:  SUBLW  09
6038:  BC    603C
....................           {Testerilizacionp[2]=0;} 
603A:  CLRF   x1C
....................         if(Testerilizacionp[3]>9) // Si esta unidad es mayor a 9 pasa a 0. 
603C:  BTFSC  x1D.7
603E:  BRA    6048
6040:  MOVF   x1D,W
6042:  SUBLW  09
6044:  BC    6048
....................           {Testerilizacionp[3]=0;}     
6046:  CLRF   x1D
....................            
....................         if(Tsecadop[0]<0) // Si esta unidad es menor a 0 pasa a 9. 
6048:  BTFSC  x22.7
604A:  BRA    604E
604C:  BRA    6052
....................           {Tsecadop[0]=9;} 
604E:  MOVLW  09
6050:  MOVWF  x22
....................         if(Tsecadop[1]<0) // Si esta unidad es menor a 0 pasa a 5. 
6052:  BTFSC  x23.7
6054:  BRA    6058
6056:  BRA    605C
....................           {Tsecadop[1]=5;} 
6058:  MOVLW  05
605A:  MOVWF  x23
....................         if(Tsecadop[2]<0) // Si esta unidad es menor a 0 pasa a 9. 
605C:  BTFSC  x24.7
605E:  BRA    6062
6060:  BRA    6066
....................           {Tsecadop[2]=9;} 
6062:  MOVLW  09
6064:  MOVWF  x24
....................         if(Tsecadop[3]<0) // Si esta unidad es menor a 0 pasa a 9. 
6066:  BTFSC  x25.7
6068:  BRA    606C
606A:  BRA    6070
....................           {Tsecadop[3]=9;}   
606C:  MOVLW  09
606E:  MOVWF  x25
....................            
....................         if(Tsecadop[0]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6070:  BTFSC  x22.7
6072:  BRA    607C
6074:  MOVF   x22,W
6076:  SUBLW  09
6078:  BC    607C
....................           {Tsecadop[0]=0;} 
607A:  CLRF   x22
....................         if(Tsecadop[1]>5) // Si esta unidad es mayor a 5 pasa a 0. 
607C:  BTFSC  x23.7
607E:  BRA    6088
6080:  MOVF   x23,W
6082:  SUBLW  05
6084:  BC    6088
....................           {Tsecadop[1]=0;} 
6086:  CLRF   x23
....................         if(Tsecadop[2]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6088:  BTFSC  x24.7
608A:  BRA    6094
608C:  MOVF   x24,W
608E:  SUBLW  09
6090:  BC    6094
....................           {Tsecadop[2]=0;} 
6092:  CLRF   x24
....................         if(Tsecadop[3]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6094:  BTFSC  x25.7
6096:  BRA    60A0
6098:  MOVF   x25,W
609A:  SUBLW  09
609C:  BC    60A0
....................           {Tsecadop[3]=0;}       
609E:  CLRF   x25
....................           
....................          if(RIGHT)// Si oprime derecha 
60A0:  BSF    F92.3
60A2:  BTFSS  F80.3
60A4:  BRA    62C8
....................       {  if(Flanco1 == 0)  
60A6:  BTFSC  x0C.6
60A8:  BRA    62C6
....................             {Flanco1 = 1; 
60AA:  BSF    x0C.6
....................                if(Fly==24){Fly=Fly+16;} 
60AC:  MOVF   x0A,W
60AE:  SUBLW  18
60B0:  BNZ   60B8
60B2:  MOVLW  10
60B4:  ADDWF  x0A,F
....................                else{Flx=Flx+6;} 
60B6:  BRA    60BC
60B8:  MOVLW  06
60BA:  ADDWF  x09,F
....................                if(Flx==48){Flx=54;};if(Flx==30){Flx=55;};delay_ms(30); 
60BC:  MOVF   x09,W
60BE:  SUBLW  30
60C0:  BNZ   60C6
60C2:  MOVLW  36
60C4:  MOVWF  x09
60C6:  MOVF   x09,W
60C8:  SUBLW  1E
60CA:  BNZ   60D0
60CC:  MOVLW  37
60CE:  MOVWF  x09
60D0:  MOVLW  1E
60D2:  MOVLB  3
60D4:  MOVWF  xA8
60D6:  MOVLB  0
60D8:  CALL   24DC
....................                if(Fly==56) 
60DC:  MOVLB  2
60DE:  MOVF   x0A,W
60E0:  SUBLW  38
60E2:  BTFSS  FD8.2
60E4:  BRA    62C6
....................                { write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]);write_eeprom(2,Testerilizacionp[2]); 
60E6:  CLRF   FA9
60E8:  MOVFF  21A,FA8
60EC:  BCF    FA6.6
60EE:  BCF    FA6.7
60F0:  BSF    FA6.2
60F2:  MOVF   FF2,W
60F4:  MOVWF  00
60F6:  BCF    FF2.7
60F8:  MOVLB  F
60FA:  MOVLW  55
60FC:  MOVWF  FA7
60FE:  MOVLW  AA
6100:  MOVWF  FA7
6102:  BSF    FA6.1
6104:  BTFSC  FA6.1
6106:  BRA    6104
6108:  BCF    FA6.2
610A:  MOVF   00,W
610C:  IORWF  FF2,F
610E:  MOVLW  01
6110:  MOVWF  FA9
6112:  MOVFF  21B,FA8
6116:  BCF    FA6.6
6118:  BCF    FA6.7
611A:  BSF    FA6.2
611C:  MOVF   FF2,W
611E:  MOVWF  00
6120:  BCF    FF2.7
6122:  MOVLW  55
6124:  MOVWF  FA7
6126:  MOVLW  AA
6128:  MOVWF  FA7
612A:  BSF    FA6.1
612C:  BTFSC  FA6.1
612E:  BRA    612C
6130:  BCF    FA6.2
6132:  MOVF   00,W
6134:  IORWF  FF2,F
6136:  MOVLW  02
6138:  MOVWF  FA9
613A:  MOVFF  21C,FA8
613E:  BCF    FA6.6
6140:  BCF    FA6.7
6142:  BSF    FA6.2
6144:  MOVF   FF2,W
6146:  MOVWF  00
6148:  BCF    FF2.7
614A:  MOVLW  55
614C:  MOVWF  FA7
614E:  MOVLW  AA
6150:  MOVWF  FA7
6152:  BSF    FA6.1
6154:  BTFSC  FA6.1
6156:  BRA    6154
6158:  BCF    FA6.2
615A:  MOVF   00,W
615C:  IORWF  FF2,F
....................                  write_eeprom(3,Testerilizacionp[3]); 
615E:  MOVLW  03
6160:  MOVWF  FA9
6162:  MOVFF  21D,FA8
6166:  BCF    FA6.6
6168:  BCF    FA6.7
616A:  BSF    FA6.2
616C:  MOVFF  FF2,00
6170:  BCF    FF2.7
6172:  MOVLW  55
6174:  MOVWF  FA7
6176:  MOVLW  AA
6178:  MOVWF  FA7
617A:  BSF    FA6.1
617C:  BTFSC  FA6.1
617E:  BRA    617C
6180:  BCF    FA6.2
6182:  MOVF   00,W
6184:  IORWF  FF2,F
....................                  write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]);write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
6186:  MOVLW  04
6188:  MOVWF  FA9
618A:  MOVFF  222,FA8
618E:  BCF    FA6.6
6190:  BCF    FA6.7
6192:  BSF    FA6.2
6194:  MOVFF  FF2,00
6198:  BCF    FF2.7
619A:  MOVLW  55
619C:  MOVWF  FA7
619E:  MOVLW  AA
61A0:  MOVWF  FA7
61A2:  BSF    FA6.1
61A4:  BTFSC  FA6.1
61A6:  BRA    61A4
61A8:  BCF    FA6.2
61AA:  MOVF   00,W
61AC:  IORWF  FF2,F
61AE:  MOVLW  05
61B0:  MOVWF  FA9
61B2:  MOVFF  223,FA8
61B6:  BCF    FA6.6
61B8:  BCF    FA6.7
61BA:  BSF    FA6.2
61BC:  MOVFF  FF2,00
61C0:  BCF    FF2.7
61C2:  MOVLW  55
61C4:  MOVWF  FA7
61C6:  MOVLW  AA
61C8:  MOVWF  FA7
61CA:  BSF    FA6.1
61CC:  BTFSC  FA6.1
61CE:  BRA    61CC
61D0:  BCF    FA6.2
61D2:  MOVF   00,W
61D4:  IORWF  FF2,F
61D6:  MOVLW  06
61D8:  MOVWF  FA9
61DA:  MOVFF  224,FA8
61DE:  BCF    FA6.6
61E0:  BCF    FA6.7
61E2:  BSF    FA6.2
61E4:  MOVFF  FF2,00
61E8:  BCF    FF2.7
61EA:  MOVLW  55
61EC:  MOVWF  FA7
61EE:  MOVLW  AA
61F0:  MOVWF  FA7
61F2:  BSF    FA6.1
61F4:  BTFSC  FA6.1
61F6:  BRA    61F4
61F8:  BCF    FA6.2
61FA:  MOVF   00,W
61FC:  IORWF  FF2,F
61FE:  MOVLW  07
6200:  MOVWF  FA9
6202:  MOVFF  225,FA8
6206:  BCF    FA6.6
6208:  BCF    FA6.7
620A:  BSF    FA6.2
620C:  MOVFF  FF2,00
6210:  BCF    FF2.7
6212:  MOVLW  55
6214:  MOVWF  FA7
6216:  MOVLW  AA
6218:  MOVWF  FA7
621A:  BSF    FA6.1
621C:  BTFSC  FA6.1
621E:  BRA    621C
6220:  BCF    FA6.2
6222:  MOVF   00,W
6224:  IORWF  FF2,F
....................                  write_eeprom(8,Setpoint); 
6226:  MOVLW  08
6228:  MOVWF  FA9
622A:  MOVFF  227,FA8
622E:  BCF    FA6.6
6230:  BCF    FA6.7
6232:  BSF    FA6.2
6234:  MOVFF  FF2,00
6238:  BCF    FF2.7
623A:  MOVLW  55
623C:  MOVWF  FA7
623E:  MOVLW  AA
6240:  MOVWF  FA7
6242:  BSF    FA6.1
6244:  BTFSC  FA6.1
6246:  BRA    6244
6248:  BCF    FA6.2
624A:  MOVF   00,W
624C:  IORWF  FF2,F
....................                  if(Liquid==1) 
624E:  MOVLB  2
6250:  DECFSZ x0B,W
6252:  BRA    6266
....................                  {Menu=90;glcd_fillScreen(OFF);} 
6254:  MOVLW  5A
6256:  MOVWF  x00
6258:  MOVLB  3
625A:  CLRF   xA4
625C:  MOVLB  0
625E:  CALL   2646
....................                  else 
6262:  BRA    62C4
6264:  MOVLB  2
....................                  {Menu=100;glcd_rect(25, 18, 40, 53, NO, ON);Flecha2=n_opcionL; Flecha=n_opcionL; 
6266:  MOVLW  64
6268:  MOVWF  x00
626A:  MOVLW  19
626C:  MOVLB  3
626E:  MOVWF  xB9
6270:  MOVLW  12
6272:  MOVWF  xBA
6274:  MOVLW  28
6276:  MOVWF  xBB
6278:  MOVLW  35
627A:  MOVWF  xBC
627C:  CLRF   xBD
627E:  MOVLW  01
6280:  MOVWF  xBE
6282:  MOVLB  0
6284:  CALL   2F1A
6288:  MOVFF  202,206
628C:  MOVFF  202,204
....................                  n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;glcd_fillScreen(OFF);glcd_text57(0, 55, Calentando, 1, ON);} 
6290:  MOVLW  20
6292:  MOVLB  2
6294:  MOVWF  x01
6296:  MOVLW  10
6298:  MOVWF  x02
629A:  MOVWF  x07
629C:  MOVLW  20
629E:  MOVWF  x08
62A0:  MOVLB  3
62A2:  CLRF   xA4
62A4:  MOVLB  0
62A6:  CALL   2646
62AA:  MOVLB  3
62AC:  CLRF   xB7
62AE:  MOVLW  37
62B0:  MOVWF  xB8
62B2:  CLRF   xBA
62B4:  MOVLW  E4
62B6:  MOVWF  xB9
62B8:  MOVLW  01
62BA:  MOVWF  xBB
62BC:  MOVWF  xBC
62BE:  MOVLB  0
62C0:  CALL   289C
62C4:  MOVLB  2
....................                } 
....................              } 
....................        } 
....................          else 
62C6:  BRA    62CA
....................             {Flanco1 = 0;} 
62C8:  BCF    x0C.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       if(Menu==90){ // Este es el menu de variación de desfogue. 
62CA:  MOVF   x00,W
62CC:  SUBLW  5A
62CE:  BTFSS  FD8.2
62D0:  BRA    645E
....................       glcd_text57(20,2,Desfogue_Lento,1,ON); 
62D2:  MOVLW  14
62D4:  MOVLB  3
62D6:  MOVWF  xB7
62D8:  MOVLW  02
62DA:  MOVWF  xB8
62DC:  MOVLW  01
62DE:  MOVWF  xBA
62E0:  MOVLW  81
62E2:  MOVWF  xB9
62E4:  MOVLW  01
62E6:  MOVWF  xBB
62E8:  MOVWF  xBC
62EA:  MOVLB  0
62EC:  CALL   289C
....................       glcd_text57(30,15,Level,2,ON); 
62F0:  MOVLW  1E
62F2:  MOVLB  3
62F4:  MOVWF  xB7
62F6:  MOVLW  0F
62F8:  MOVWF  xB8
62FA:  CLRF   xBA
62FC:  MOVLW  EF
62FE:  MOVWF  xB9
6300:  MOVLW  02
6302:  MOVWF  xBB
6304:  MOVLW  01
6306:  MOVWF  xBC
6308:  MOVLB  0
630A:  CALL   289C
....................       displayTiempo(Nivel,50,41,5); 
630E:  MOVFF  22A,3A4
6312:  MOVLW  32
6314:  MOVLB  3
6316:  MOVWF  xA5
6318:  MOVLW  29
631A:  MOVWF  xA6
631C:  MOVLW  05
631E:  MOVWF  xA7
6320:  MOVLB  0
6322:  CALL   3664
....................       glcd_rect(0,0,127,29,NO,ON); 
6326:  MOVLB  3
6328:  CLRF   xB9
632A:  CLRF   xBA
632C:  MOVLW  7F
632E:  MOVWF  xBB
6330:  MOVLW  1D
6332:  MOVWF  xBC
6334:  CLRF   xBD
6336:  MOVLW  01
6338:  MOVWF  xBE
633A:  MOVLB  0
633C:  CALL   2F1A
....................        
....................       if(UP)//Si oprime hacia arriba 
6340:  BSF    F92.1
6342:  BTFSS  F80.1
6344:  BRA    6360
....................       {  if(Flanco == 0)  
6346:  MOVLB  2
6348:  BTFSC  x0C.5
634A:  BRA    635E
....................             {Flanco = 1;delay_ms(30);Nivel++; 
634C:  BSF    x0C.5
634E:  MOVLW  1E
6350:  MOVLB  3
6352:  MOVWF  xA8
6354:  MOVLB  0
6356:  CALL   24DC
635A:  MOVLB  2
635C:  INCF   x2A,F
....................             } 
....................        } 
....................          else 
635E:  BRA    6364
....................             {Flanco = 0;} 
6360:  MOVLB  2
6362:  BCF    x0C.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
6364:  BSF    F92.2
6366:  BTFSS  F80.2
6368:  BRA    6382
....................       {  if(Flanco2 == 0)  
636A:  BTFSC  x0C.7
636C:  BRA    6380
....................             {Flanco2 = 1;delay_ms(30);Nivel--;               
636E:  BSF    x0C.7
6370:  MOVLW  1E
6372:  MOVLB  3
6374:  MOVWF  xA8
6376:  MOVLB  0
6378:  CALL   24DC
637C:  MOVLB  2
637E:  DECF   x2A,F
....................             } 
....................       } 
....................          else 
6380:  BRA    6384
....................             {Flanco2 = 0;} 
6382:  BCF    x0C.7
....................       if(Nivel>6) 
6384:  MOVF   x2A,W
6386:  SUBLW  06
6388:  BC    638E
....................       {Nivel=1;} 
638A:  MOVLW  01
638C:  MOVWF  x2A
....................       if(Nivel<1) 
638E:  MOVF   x2A,F
6390:  BNZ   6396
....................       {Nivel=6;} 
6392:  MOVLW  06
6394:  MOVWF  x2A
....................        
....................       if(RIGHT)// Si oprime derecha 
6396:  BSF    F92.3
6398:  BTFSS  F80.3
639A:  BRA    645C
....................       {  if(Flanco1 == 0)  
639C:  BTFSC  x0C.6
639E:  BRA    645A
....................             {Flanco1 = 1; 
63A0:  BSF    x0C.6
....................                Menu=100;glcd_rect(25, 18, 40, 53, NO, ON);enable_interrupts(global);glcd_fillScreen(OFF);Flecha2=n_opcionL; Flecha=n_opcionL; 
63A2:  MOVLW  64
63A4:  MOVWF  x00
63A6:  MOVLW  19
63A8:  MOVLB  3
63AA:  MOVWF  xB9
63AC:  MOVLW  12
63AE:  MOVWF  xBA
63B0:  MOVLW  28
63B2:  MOVWF  xBB
63B4:  MOVLW  35
63B6:  MOVWF  xBC
63B8:  CLRF   xBD
63BA:  MOVLW  01
63BC:  MOVWF  xBE
63BE:  MOVLB  0
63C0:  CALL   2F1A
63C4:  MOVLW  C0
63C6:  IORWF  FF2,F
63C8:  MOVLB  3
63CA:  CLRF   xA4
63CC:  MOVLB  0
63CE:  CALL   2646
63D2:  MOVFF  202,206
63D6:  MOVFF  202,204
....................                n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;glcd_text57(0, 55, Calentando, 1, ON);write_eeprom(9,Nivel); 
63DA:  MOVLW  20
63DC:  MOVLB  2
63DE:  MOVWF  x01
63E0:  MOVLW  10
63E2:  MOVWF  x02
63E4:  MOVWF  x07
63E6:  MOVLW  20
63E8:  MOVWF  x08
63EA:  MOVLB  3
63EC:  CLRF   xB7
63EE:  MOVLW  37
63F0:  MOVWF  xB8
63F2:  CLRF   xBA
63F4:  MOVLW  E4
63F6:  MOVWF  xB9
63F8:  MOVLW  01
63FA:  MOVWF  xBB
63FC:  MOVWF  xBC
63FE:  MOVLB  0
6400:  CALL   289C
6404:  MOVLW  09
6406:  MOVWF  FA9
6408:  MOVFF  22A,FA8
640C:  BCF    FA6.6
640E:  BCF    FA6.7
6410:  BSF    FA6.2
6412:  MOVF   FF2,W
6414:  MOVWF  00
6416:  BCF    FF2.7
6418:  MOVLB  F
641A:  MOVLW  55
641C:  MOVWF  FA7
641E:  MOVLW  AA
6420:  MOVWF  FA7
6422:  BSF    FA6.1
6424:  BTFSC  FA6.1
6426:  BRA    6424
6428:  BCF    FA6.2
642A:  MOVF   00,W
642C:  IORWF  FF2,F
....................                glcd_rect(25, 18, 40, 53, NO, ON);Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1; 
642E:  MOVLW  19
6430:  MOVLB  3
6432:  MOVWF  xB9
6434:  MOVLW  12
6436:  MOVWF  xBA
6438:  MOVLW  28
643A:  MOVWF  xBB
643C:  MOVLW  35
643E:  MOVWF  xBC
6440:  CLRF   xBD
6442:  MOVLW  01
6444:  MOVWF  xBE
6446:  MOVLB  0
6448:  CALL   2F1A
644C:  MOVLB  2
644E:  CLRF   x22
6450:  CLRF   x23
6452:  MOVLW  05
6454:  MOVWF  x24
6456:  MOVLW  01
6458:  MOVWF  x25
....................              } 
....................        } 
....................          else 
645A:  BRA    645E
....................             {Flanco1 = 0;} 
645C:  BCF    x0C.6
....................           
....................       } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       while(Menu==100){ // Este es el menu de cuando el proceso se inicio. 
645E:  MOVF   x00,W
6460:  SUBLW  64
6462:  BTFSS  FD8.2
6464:  GOTO   7438
....................  
....................          if(usb_enumerated()) 
6468:  MOVLB  0
646A:  GOTO   3AB8
646E:  MOVF   01,F
6470:  BTFSC  FD8.2
6472:  BRA    6672
....................             { 
....................                if(usb_kbhit(1)) 
6474:  MOVLW  01
6476:  MOVLB  3
6478:  MOVWF  xA3
647A:  MOVLB  0
647C:  GOTO   3AC0
6480:  MOVF   01,F
6482:  BZ    6512
....................                   {usb_get_packet(1, rxbuf, Lenbuf); 
6484:  MOVLW  01
6486:  MOVLB  3
6488:  MOVWF  xA3
648A:  CLRF   xA5
648C:  MOVLW  42
648E:  MOVWF  xA4
6490:  CLRF   xA7
6492:  MOVLW  20
6494:  MOVWF  xA6
6496:  MOVLB  0
6498:  GOTO   3BC6
....................                      if(rxbuf[0]==1) 
649C:  DECFSZ 42,W
649E:  BRA    6512
....................                         {Ganancia=rxbuf[1];desvio=rxbuf[2];Tciclo=rxbuf[3];Setpoint=rxbuf[4];Minutos=rxbuf[5];Open=rxbuf[6];Ajuste=rxbuf[7]; 
64A0:  MOVLB  3
64A2:  CLRF   xA9
64A4:  MOVFF  43,3A8
64A8:  MOVLB  0
64AA:  CALL   2506
64AE:  MOVFF  03,258
64B2:  MOVFF  02,257
64B6:  MOVFF  01,256
64BA:  MOVFF  00,255
64BE:  MOVLB  3
64C0:  CLRF   xA9
64C2:  MOVFF  44,3A8
64C6:  MOVLB  0
64C8:  CALL   2506
64CC:  MOVFF  03,25C
64D0:  MOVFF  02,25B
64D4:  MOVFF  01,25A
64D8:  MOVFF  00,259
64DC:  MOVLB  3
64DE:  CLRF   xA9
64E0:  MOVFF  45,3A8
64E4:  MOVLB  0
64E6:  CALL   2506
64EA:  MOVFF  03,240
64EE:  MOVFF  02,23F
64F2:  MOVFF  01,23E
64F6:  MOVFF  00,23D
64FA:  MOVFF  46,227
64FE:  MOVFF  47,22B
6502:  MOVFF  48,22C
6506:  MOVFF  49,22D
....................                         Ajusten=rxbuf[10];R2=rxbuf[11];} // Falta escribir en la eeprom 
650A:  MOVFF  4C,22F
650E:  MOVFF  4D,230
....................                   } 
....................                 
....................                recbuf[0]=(int8)Prom; 
6512:  MOVFF  24C,3A6
6516:  MOVFF  24B,3A5
651A:  MOVFF  24A,3A4
651E:  MOVFF  249,3A3
6522:  CALL   3C10
6526:  MOVFF  01,22
....................                recbuf[1]=120; 
652A:  MOVLW  78
652C:  MOVWF  23
....................                d3=Prom-(int8)Prom; 
652E:  MOVFF  24C,3A6
6532:  MOVFF  24B,3A5
6536:  MOVFF  24A,3A4
653A:  MOVFF  249,3A3
653E:  CALL   3C10
6542:  MOVLB  3
6544:  CLRF   xA9
6546:  MOVFF  01,3A8
654A:  MOVLB  0
654C:  CALL   2506
6550:  BSF    FD8.1
6552:  MOVFF  24C,3AE
6556:  MOVFF  24B,3AD
655A:  MOVFF  24A,3AC
655E:  MOVFF  249,3AB
6562:  MOVFF  03,3B2
6566:  MOVFF  02,3B1
656A:  MOVFF  01,3B0
656E:  MOVFF  00,3AF
6572:  CALL   3C4C
6576:  MOVFF  03,260
657A:  MOVFF  02,25F
657E:  MOVFF  01,25E
6582:  MOVFF  00,25D
....................                d3=d3*10.0; 
6586:  MOVFF  260,3C7
658A:  MOVFF  25F,3C6
658E:  MOVFF  25E,3C5
6592:  MOVFF  25D,3C4
6596:  MOVLB  3
6598:  CLRF   xCB
659A:  CLRF   xCA
659C:  MOVLW  20
659E:  MOVWF  xC9
65A0:  MOVLW  82
65A2:  MOVWF  xC8
65A4:  MOVLB  0
65A6:  CALL   2A54
65AA:  MOVFF  03,260
65AE:  MOVFF  02,25F
65B2:  MOVFF  01,25E
65B6:  MOVFF  00,25D
....................                recbuf[2]=(int8)d3; 
65BA:  MOVFF  260,3A6
65BE:  MOVFF  25F,3A5
65C2:  MOVFF  25E,3A4
65C6:  MOVFF  25D,3A3
65CA:  CALL   3C10
65CE:  MOVFF  01,24
....................                recbuf[3]=(int8)Pt; 
65D2:  MOVFF  23C,3A6
65D6:  MOVFF  23B,3A5
65DA:  MOVFF  23A,3A4
65DE:  MOVFF  239,3A3
65E2:  CALL   3C10
65E6:  MOVFF  01,25
....................                recbuf[4]=(int8)V0; 
65EA:  MOVFF  234,3A6
65EE:  MOVFF  233,3A5
65F2:  MOVFF  232,3A4
65F6:  MOVFF  231,3A3
65FA:  CALL   3C10
65FE:  MOVFF  01,26
....................                           
....................              if(rxbuf[8]==1) 
6602:  DECFSZ 4A,W
6604:  BRA    660A
....................                {Camara_OUT_on;} 
6606:  BSF    F8B.0
6608:  BCF    F94.0
....................              if(rxbuf[8]==0) 
660A:  MOVF   4A,F
660C:  BNZ   6612
....................                {Camara_OUT_off;}   
660E:  BCF    F8B.0
6610:  BCF    F94.0
....................                 
....................              if(rxbuf[9]==1) 
6612:  DECFSZ 4B,W
6614:  BRA    661A
....................                {Camara_IN_on;} 
6616:  BSF    F8B.2
6618:  BCF    F94.2
....................              if((rxbuf[9]==0)&&(Prom<(float)Open)) 
661A:  MOVF   4B,F
661C:  BNZ   6656
661E:  MOVLB  3
6620:  CLRF   xA9
6622:  MOVFF  22C,3A8
6626:  MOVLB  0
6628:  CALL   2506
662C:  MOVFF  24C,3A6
6630:  MOVFF  24B,3A5
6634:  MOVFF  24A,3A4
6638:  MOVFF  249,3A3
663C:  MOVFF  03,3AA
6640:  MOVFF  02,3A9
6644:  MOVFF  01,3A8
6648:  MOVFF  00,3A7
664C:  CALL   3EC4
6650:  BNC   6656
....................                {Camara_IN_off;}     
6652:  BCF    F8B.2
6654:  BCF    F94.2
....................                 
....................                  
....................                 usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
6656:  MOVLW  01
6658:  MOVLB  3
665A:  MOVWF  xA3
665C:  CLRF   xA5
665E:  MOVLW  22
6660:  MOVWF  xA4
6662:  CLRF   xA7
6664:  MOVLW  20
6666:  MOVWF  xA6
6668:  MOVLW  02
666A:  MOVWF  xA8
666C:  MOVLB  0
666E:  GOTO   3F3E
....................              } 
....................  
....................       if(n==0) 
6672:  MOVLB  2
6674:  BTFSC  x0D.5
6676:  BRA    69EE
....................       {glcd_imagen(5);glcd_text57(0, 0, tiempo_est, 1, ON);glcd_text57(0, 8, tiempo_sec, 1, ON);// Muestra grafica de proceso y palabras. 
6678:  MOVLW  05
667A:  MOVLB  3
667C:  MOVWF  xA3
667E:  MOVLB  0
6680:  CALL   3180
6684:  MOVLB  3
6686:  CLRF   xB7
6688:  CLRF   xB8
668A:  CLRF   xBA
668C:  MOVLW  81
668E:  MOVWF  xB9
6690:  MOVLW  01
6692:  MOVWF  xBB
6694:  MOVWF  xBC
6696:  MOVLB  0
6698:  CALL   289C
669C:  MOVLB  3
669E:  CLRF   xB7
66A0:  MOVLW  08
66A2:  MOVWF  xB8
66A4:  CLRF   xBA
66A6:  MOVLW  88
66A8:  MOVWF  xB9
66AA:  MOVLW  01
66AC:  MOVWF  xBB
66AE:  MOVWF  xBC
66B0:  MOVLB  0
66B2:  CALL   289C
....................        glcd_circle(95,40,2,NO,ON); 
66B6:  MOVLW  5F
66B8:  MOVLB  3
66BA:  MOVWF  xA3
66BC:  MOVLW  28
66BE:  MOVWF  xA4
66C0:  MOVLW  02
66C2:  MOVWF  xA5
66C4:  CLRF   xA6
66C6:  MOVLW  01
66C8:  MOVWF  xA7
66CA:  MOVLB  0
66CC:  CALL   388E
....................        glcd_text57(102,40, C, 2, ON); 
66D0:  MOVLW  66
66D2:  MOVLB  3
66D4:  MOVWF  xB7
66D6:  MOVLW  28
66D8:  MOVWF  xB8
66DA:  MOVLW  01
66DC:  MOVWF  xBA
66DE:  MOVLW  51
66E0:  MOVWF  xB9
66E2:  MOVLW  02
66E4:  MOVWF  xBB
66E6:  MOVLW  01
66E8:  MOVWF  xBC
66EA:  MOVLB  0
66EC:  CALL   289C
....................        if(estadot40==1)// Si selecciono programa de Textil e instrumental. Ajusta tiempos de esterilización y secado. 
66F0:  MOVLB  2
66F2:  BTFSS  x0C.0
66F4:  BRA    670E
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0; 
66F6:  CLRF   x1A
66F8:  CLRF   x1B
66FA:  MOVLW  05
66FC:  MOVWF  x1C
66FE:  CLRF   x1D
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;Setpoint=134;} 
6700:  CLRF   x22
6702:  CLRF   x23
6704:  MOVWF  x24
6706:  MOVLW  01
6708:  MOVWF  x25
670A:  MOVLW  86
670C:  MOVWF  x27
....................        
....................       if(estadoc==1)// Si selecciono programa de Caucho. Ajusta tiempos de esterilización y secado. 
670E:  BTFSS  x0C.1
6710:  BRA    6730
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2; 
6712:  CLRF   x1A
6714:  CLRF   x1B
6716:  MOVLW  05
6718:  MOVWF  x1C
671A:  MOVLW  02
671C:  MOVWF  x1D
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;minutos=0;Setpoint=121;} 
671E:  CLRF   x22
6720:  CLRF   x23
6722:  MOVLW  05
6724:  MOVWF  x24
6726:  MOVLW  01
6728:  MOVWF  x25
672A:  CLRF   x2B
672C:  MOVLW  79
672E:  MOVWF  x27
....................        
....................       if(estadoi==1)// Si selecciono programa de Instrumental Suave. Ajusta tiempos de esterilización y secado. 
6730:  BTFSS  x0C.2
6732:  BRA    674E
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2; 
6734:  CLRF   x1A
6736:  CLRF   x1B
6738:  CLRF   x1C
673A:  MOVLW  02
673C:  MOVWF  x1D
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;minutos=10;Setpoint=121;} 
673E:  CLRF   x22
6740:  CLRF   x23
6742:  CLRF   x24
6744:  CLRF   x25
6746:  MOVLW  0A
6748:  MOVWF  x2B
674A:  MOVLW  79
674C:  MOVWF  x27
....................        
....................       if(estadol==1)// Si selecciono programa de Liquidos. Ajusta tiempos de esterilización y secado. 
674E:  BTFSS  x0C.3
6750:  BRA    676C
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2; 
6752:  CLRF   x1A
6754:  CLRF   x1B
6756:  CLRF   x1C
6758:  MOVLW  02
675A:  MOVWF  x1D
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;minutos=10;Setpoint=121;} 
675C:  CLRF   x22
675E:  CLRF   x23
6760:  CLRF   x24
6762:  CLRF   x25
6764:  MOVLW  0A
6766:  MOVWF  x2B
6768:  MOVLW  79
676A:  MOVWF  x27
....................         
....................       // Muestra Valor de esterilizacion programado. 
....................       displayTiempo(Testerilizacionp[3],36,0,0);displayTiempo(Testerilizacionp[2],42,0,0);glcd_text57(48, 0, Vacio, 1, ON); 
676C:  MOVFF  21D,3A4
6770:  MOVLW  24
6772:  MOVLB  3
6774:  MOVWF  xA5
6776:  CLRF   xA6
6778:  CLRF   xA7
677A:  MOVLB  0
677C:  CALL   3664
6780:  MOVFF  21C,3A4
6784:  MOVLW  2A
6786:  MOVLB  3
6788:  MOVWF  xA5
678A:  CLRF   xA6
678C:  CLRF   xA7
678E:  MOVLB  0
6790:  CALL   3664
6794:  MOVLW  30
6796:  MOVLB  3
6798:  MOVWF  xB7
679A:  CLRF   xB8
679C:  MOVLW  01
679E:  MOVWF  xBA
67A0:  MOVLW  2E
67A2:  MOVWF  xB9
67A4:  MOVLW  01
67A6:  MOVWF  xBB
67A8:  MOVWF  xBC
67AA:  MOVLB  0
67AC:  CALL   289C
....................       displayTiempo(Testerilizacionp[1],54,0,0);displayTiempo(Testerilizacionp[0],60,0,0); 
67B0:  MOVFF  21B,3A4
67B4:  MOVLW  36
67B6:  MOVLB  3
67B8:  MOVWF  xA5
67BA:  CLRF   xA6
67BC:  CLRF   xA7
67BE:  MOVLB  0
67C0:  CALL   3664
67C4:  MOVFF  21A,3A4
67C8:  MOVLW  3C
67CA:  MOVLB  3
67CC:  MOVWF  xA5
67CE:  CLRF   xA6
67D0:  CLRF   xA7
67D2:  MOVLB  0
67D4:  CALL   3664
....................       // Muestra tiempo de secado programado. 
....................       displayTiempo(Tsecadop[3],36,8,0);displayTiempo(Tsecadop[2],42,8,0);glcd_text57(48, 8, Vacio, 1, ON); 
67D8:  MOVFF  225,3A4
67DC:  MOVLW  24
67DE:  MOVLB  3
67E0:  MOVWF  xA5
67E2:  MOVLW  08
67E4:  MOVWF  xA6
67E6:  CLRF   xA7
67E8:  MOVLB  0
67EA:  CALL   3664
67EE:  MOVFF  224,3A4
67F2:  MOVLW  2A
67F4:  MOVLB  3
67F6:  MOVWF  xA5
67F8:  MOVLW  08
67FA:  MOVWF  xA6
67FC:  CLRF   xA7
67FE:  MOVLB  0
6800:  CALL   3664
6804:  MOVLW  30
6806:  MOVLB  3
6808:  MOVWF  xB7
680A:  MOVLW  08
680C:  MOVWF  xB8
680E:  MOVLW  01
6810:  MOVWF  xBA
6812:  MOVLW  2E
6814:  MOVWF  xB9
6816:  MOVLW  01
6818:  MOVWF  xBB
681A:  MOVWF  xBC
681C:  MOVLB  0
681E:  CALL   289C
....................       displayTiempo(Tsecadop[1],54,8,0);displayTiempo(Tsecadop[0],60,8,0); 
6822:  MOVFF  223,3A4
6826:  MOVLW  36
6828:  MOVLB  3
682A:  MOVWF  xA5
682C:  MOVLW  08
682E:  MOVWF  xA6
6830:  CLRF   xA7
6832:  MOVLB  0
6834:  CALL   3664
6838:  MOVFF  222,3A4
683C:  MOVLW  3C
683E:  MOVLB  3
6840:  MOVWF  xA5
6842:  MOVLW  08
6844:  MOVWF  xA6
6846:  CLRF   xA7
6848:  MOVLB  0
684A:  CALL   3664
....................           
....................       V0 = sensores(0); 
684E:  MOVLB  3
6850:  CLRF   xA3
6852:  MOVLB  0
6854:  CALL   253C
6858:  MOVFF  03,234
685C:  MOVFF  02,233
6860:  MOVFF  01,232
6864:  MOVFF  00,231
....................       //rPt=(V0*R1)/(1023.0-V0);Temperature=(Pt-100.0972)/0.3850; 
....................       Pt=(R1+(float)R2)/((1023.0/V0)-1); 
6868:  MOVLB  3
686A:  CLRF   xA9
686C:  MOVFF  230,3A8
6870:  MOVLB  0
6872:  CALL   2506
6876:  BCF    FD8.1
6878:  MOVFF  238,3AE
687C:  MOVFF  237,3AD
6880:  MOVFF  236,3AC
6884:  MOVFF  235,3AB
6888:  MOVFF  03,3B2
688C:  MOVFF  02,3B1
6890:  MOVFF  01,3B0
6894:  MOVFF  00,3AF
6898:  CALL   3C4C
689C:  MOVFF  00,3A3
68A0:  MOVFF  01,3A4
68A4:  MOVFF  02,3A5
68A8:  MOVFF  03,3A6
68AC:  MOVLB  3
68AE:  CLRF   xAA
68B0:  MOVLW  C0
68B2:  MOVWF  xA9
68B4:  MOVLW  7F
68B6:  MOVWF  xA8
68B8:  MOVLW  88
68BA:  MOVWF  xA7
68BC:  MOVFF  234,3AE
68C0:  MOVFF  233,3AD
68C4:  MOVFF  232,3AC
68C8:  MOVFF  231,3AB
68CC:  MOVLB  0
68CE:  CALL   3FEE
68D2:  MOVFF  00,3A7
68D6:  MOVFF  01,3A8
68DA:  MOVFF  02,3A9
68DE:  MOVFF  03,3AA
68E2:  BSF    FD8.1
68E4:  MOVFF  03,3AE
68E8:  MOVFF  02,3AD
68EC:  MOVFF  01,3AC
68F0:  MOVFF  00,3AB
68F4:  MOVLB  3
68F6:  CLRF   xB2
68F8:  CLRF   xB1
68FA:  CLRF   xB0
68FC:  MOVLW  7F
68FE:  MOVWF  xAF
6900:  MOVLB  0
6902:  CALL   3C4C
6906:  MOVFF  3A6,3AA
690A:  MOVFF  3A5,3A9
690E:  MOVFF  3A4,3A8
6912:  MOVFF  3A3,3A7
6916:  MOVFF  03,3AE
691A:  MOVFF  02,3AD
691E:  MOVFF  01,3AC
6922:  MOVFF  00,3AB
6926:  CALL   3FEE
692A:  MOVFF  03,23C
692E:  MOVFF  02,23B
6932:  MOVFF  01,23A
6936:  MOVFF  00,239
....................       Temperature=(Pt-100.1395)/0.3838;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
693A:  BSF    FD8.1
693C:  MOVFF  23C,3AE
6940:  MOVFF  23B,3AD
6944:  MOVFF  23A,3AC
6948:  MOVFF  239,3AB
694C:  MOVLW  6D
694E:  MOVLB  3
6950:  MOVWF  xB2
6952:  MOVLW  47
6954:  MOVWF  xB1
6956:  MOVLW  48
6958:  MOVWF  xB0
695A:  MOVLW  85
695C:  MOVWF  xAF
695E:  MOVLB  0
6960:  CALL   3C4C
6964:  MOVFF  00,3A3
6968:  MOVFF  01,3A4
696C:  MOVFF  02,3A5
6970:  MOVFF  03,3A6
6974:  MOVFF  03,3AA
6978:  MOVFF  02,3A9
697C:  MOVFF  01,3A8
6980:  MOVFF  00,3A7
6984:  MOVLW  6F
6986:  MOVLB  3
6988:  MOVWF  xAE
698A:  MOVLW  81
698C:  MOVWF  xAD
698E:  MOVLW  44
6990:  MOVWF  xAC
6992:  MOVLW  7D
6994:  MOVWF  xAB
6996:  MOVLB  0
6998:  CALL   3FEE
699C:  MOVFF  03,250
69A0:  MOVFF  02,24F
69A4:  MOVFF  01,24E
69A8:  MOVFF  00,24D
....................       for(h=0;h<=79;h++) 
69AC:  MOVLB  2
69AE:  CLRF   x28
69B0:  MOVF   x28,W
69B2:  SUBLW  4F
69B4:  BNC   69EC
....................             { 
....................                promedio[h]=Temperature; 
69B6:  MOVLB  3
69B8:  CLRF   xA8
69BA:  MOVFF  228,3A7
69BE:  CLRF   xAA
69C0:  MOVLW  04
69C2:  MOVWF  xA9
69C4:  MOVLB  0
69C6:  CALL   315E
69CA:  MOVF   01,W
69CC:  ADDLW  63
69CE:  MOVWF  FE9
69D0:  MOVLW  02
69D2:  ADDWFC 02,W
69D4:  MOVWF  FEA
69D6:  MOVFF  24D,FEF
69DA:  MOVFF  24E,FEC
69DE:  MOVFF  24F,FEC
69E2:  MOVFF  250,FEC
....................             }  
69E6:  MOVLB  2
69E8:  INCF   x28,F
69EA:  BRA    69B0
....................        n=1;      
69EC:  BSF    x0D.5
....................       } 
....................  
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................          error=desvio+(float)Setpoint-Prom;      // Cálculo del error ****** 
69EE:  MOVLB  3
69F0:  CLRF   xA9
69F2:  MOVFF  227,3A8
69F6:  MOVLB  0
69F8:  CALL   2506
69FC:  BCF    FD8.1
69FE:  MOVFF  25C,3AE
6A02:  MOVFF  25B,3AD
6A06:  MOVFF  25A,3AC
6A0A:  MOVFF  259,3AB
6A0E:  MOVFF  03,3B2
6A12:  MOVFF  02,3B1
6A16:  MOVFF  01,3B0
6A1A:  MOVFF  00,3AF
6A1E:  CALL   3C4C
6A22:  MOVFF  00,3A3
6A26:  MOVFF  01,3A4
6A2A:  MOVFF  02,3A5
6A2E:  MOVFF  03,3A6
6A32:  BSF    FD8.1
6A34:  MOVFF  03,3AE
6A38:  MOVFF  02,3AD
6A3C:  MOVFF  01,3AC
6A40:  MOVFF  00,3AB
6A44:  MOVFF  24C,3B2
6A48:  MOVFF  24B,3B1
6A4C:  MOVFF  24A,3B0
6A50:  MOVFF  249,3AF
6A54:  CALL   3C4C
6A58:  MOVFF  03,248
6A5C:  MOVFF  02,247
6A60:  MOVFF  01,246
6A64:  MOVFF  00,245
....................  
....................          tmp=error*Ganancia;  // Control Proporcional. 
6A68:  MOVFF  248,3C7
6A6C:  MOVFF  247,3C6
6A70:  MOVFF  246,3C5
6A74:  MOVFF  245,3C4
6A78:  MOVFF  258,3CB
6A7C:  MOVFF  257,3CA
6A80:  MOVFF  256,3C9
6A84:  MOVFF  255,3C8
6A88:  CALL   2A54
6A8C:  MOVFF  03,254
6A90:  MOVFF  02,253
6A94:  MOVFF  01,252
6A98:  MOVFF  00,251
....................           
....................          if(tmp>Setpoint)   // Anti Wind-UP       
6A9C:  MOVLB  3
6A9E:  CLRF   xA9
6AA0:  MOVFF  227,3A8
6AA4:  MOVLB  0
6AA6:  CALL   2506
6AAA:  MOVFF  03,3A6
6AAE:  MOVFF  02,3A5
6AB2:  MOVFF  01,3A4
6AB6:  MOVFF  00,3A3
6ABA:  MOVFF  254,3AA
6ABE:  MOVFF  253,3A9
6AC2:  MOVFF  252,3A8
6AC6:  MOVFF  251,3A7
6ACA:  CALL   3EC4
6ACE:  BNC   6AEE
....................             {tmp=Setpoint;} 
6AD0:  MOVLB  3
6AD2:  CLRF   xA9
6AD4:  MOVFF  227,3A8
6AD8:  MOVLB  0
6ADA:  CALL   2506
6ADE:  MOVFF  03,254
6AE2:  MOVFF  02,253
6AE6:  MOVFF  01,252
6AEA:  MOVFF  00,251
....................              
....................          if(tmp<0.0)     // Anti Wind_DOWN     
6AEE:  MOVFF  254,3A6
6AF2:  MOVFF  253,3A5
6AF6:  MOVFF  252,3A4
6AFA:  MOVFF  251,3A3
6AFE:  MOVLB  3
6B00:  CLRF   xAA
6B02:  CLRF   xA9
6B04:  CLRF   xA8
6B06:  CLRF   xA7
6B08:  MOVLB  0
6B0A:  CALL   3EC4
6B0E:  BNC   6B1A
....................             {tmp=0.0;}    
6B10:  MOVLB  2
6B12:  CLRF   x54
6B14:  CLRF   x53
6B16:  CLRF   x52
6B18:  CLRF   x51
....................        
....................          Tpulso=(tmp/Setpoint)*Tciclo;  // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
6B1A:  MOVLB  3
6B1C:  CLRF   xA9
6B1E:  MOVFF  227,3A8
6B22:  MOVLB  0
6B24:  CALL   2506
6B28:  MOVFF  254,3AA
6B2C:  MOVFF  253,3A9
6B30:  MOVFF  252,3A8
6B34:  MOVFF  251,3A7
6B38:  MOVFF  03,3AE
6B3C:  MOVFF  02,3AD
6B40:  MOVFF  01,3AC
6B44:  MOVFF  00,3AB
6B48:  CALL   3FEE
6B4C:  MOVFF  00,3A3
6B50:  MOVFF  01,3A4
6B54:  MOVFF  02,3A5
6B58:  MOVFF  03,3A6
6B5C:  MOVFF  03,3C7
6B60:  MOVFF  02,3C6
6B64:  MOVFF  01,3C5
6B68:  MOVFF  00,3C4
6B6C:  MOVFF  240,3CB
6B70:  MOVFF  23F,3CA
6B74:  MOVFF  23E,3C9
6B78:  MOVFF  23D,3C8
6B7C:  CALL   2A54
6B80:  MOVFF  03,244
6B84:  MOVFF  02,243
6B88:  MOVFF  01,242
6B8C:  MOVFF  00,241
....................                                    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................           
....................          if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
6B90:  MOVFF  244,3AA
6B94:  MOVFF  243,3A9
6B98:  MOVFF  242,3A8
6B9C:  MOVFF  241,3A7
6BA0:  MOVLW  0A
6BA2:  MOVLB  3
6BA4:  MOVWF  xAE
6BA6:  MOVLW  D7
6BA8:  MOVWF  xAD
6BAA:  MOVLW  23
6BAC:  MOVWF  xAC
6BAE:  MOVLW  77
6BB0:  MOVWF  xAB
6BB2:  MOVLB  0
6BB4:  CALL   3FEE
6BB8:  MOVFF  03,3A6
6BBC:  MOVFF  02,3A5
6BC0:  MOVFF  01,3A4
6BC4:  MOVFF  00,3A3
6BC8:  CALL   3C10
6BCC:  MOVFF  02,03
6BD0:  MOVF   01,W
6BD2:  MOVLB  2
6BD4:  MOVF   x15,W
6BD6:  SUBWF  02,W
6BD8:  BNC   6BE8
6BDA:  BNZ   6BE2
6BDC:  MOVF   x14,W
6BDE:  SUBWF  01,W
6BE0:  BNC   6BE8
....................          {Resistencia_on;} 
6BE2:  BSF    F8B.1
6BE4:  BCF    F94.1
....................          else 
6BE6:  BRA    6BEC
....................          {Resistencia_off;} 
6BE8:  BCF    F8B.1
6BEA:  BCF    F94.1
....................           
....................          if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
6BEC:  MOVFF  240,3AA
6BF0:  MOVFF  23F,3A9
6BF4:  MOVFF  23E,3A8
6BF8:  MOVFF  23D,3A7
6BFC:  MOVLW  0A
6BFE:  MOVLB  3
6C00:  MOVWF  xAE
6C02:  MOVLW  D7
6C04:  MOVWF  xAD
6C06:  MOVLW  23
6C08:  MOVWF  xAC
6C0A:  MOVLW  77
6C0C:  MOVWF  xAB
6C0E:  MOVLB  0
6C10:  CALL   3FEE
6C14:  MOVFF  03,3A6
6C18:  MOVFF  02,3A5
6C1C:  MOVFF  01,3A4
6C20:  MOVFF  00,3A3
6C24:  CALL   3C10
6C28:  MOVF   02,W
6C2A:  MOVWF  03
6C2C:  MOVLB  2
6C2E:  SUBWF  x15,W
6C30:  BNC   6C3E
6C32:  BNZ   6C3A
6C34:  MOVF   01,W
6C36:  SUBWF  x14,W
6C38:  BNC   6C3E
....................          {tiempoctrl=0;} // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
6C3A:  CLRF   x15
6C3C:  CLRF   x14
.................... //--------------------------------------------------------------------------------------------------------------------//          
....................              
....................          if(Lectura==1) 
6C3E:  BTFSS  x0D.6
6C40:  BRA    7084
....................          {          
....................             V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
6C42:  MOVLB  3
6C44:  CLRF   xA3
6C46:  MOVLB  0
6C48:  CALL   253C
6C4C:  MOVFF  03,234
6C50:  MOVFF  02,233
6C54:  MOVFF  01,232
6C58:  MOVFF  00,231
....................             Pt=(R1+(float)R2)/((1023.0/V0)-1); 
6C5C:  MOVLB  3
6C5E:  CLRF   xA9
6C60:  MOVFF  230,3A8
6C64:  MOVLB  0
6C66:  CALL   2506
6C6A:  BCF    FD8.1
6C6C:  MOVFF  238,3AE
6C70:  MOVFF  237,3AD
6C74:  MOVFF  236,3AC
6C78:  MOVFF  235,3AB
6C7C:  MOVFF  03,3B2
6C80:  MOVFF  02,3B1
6C84:  MOVFF  01,3B0
6C88:  MOVFF  00,3AF
6C8C:  CALL   3C4C
6C90:  MOVFF  00,3A3
6C94:  MOVFF  01,3A4
6C98:  MOVFF  02,3A5
6C9C:  MOVFF  03,3A6
6CA0:  MOVLB  3
6CA2:  CLRF   xAA
6CA4:  MOVLW  C0
6CA6:  MOVWF  xA9
6CA8:  MOVLW  7F
6CAA:  MOVWF  xA8
6CAC:  MOVLW  88
6CAE:  MOVWF  xA7
6CB0:  MOVFF  234,3AE
6CB4:  MOVFF  233,3AD
6CB8:  MOVFF  232,3AC
6CBC:  MOVFF  231,3AB
6CC0:  MOVLB  0
6CC2:  CALL   3FEE
6CC6:  MOVFF  00,3A7
6CCA:  MOVFF  01,3A8
6CCE:  MOVFF  02,3A9
6CD2:  MOVFF  03,3AA
6CD6:  BSF    FD8.1
6CD8:  MOVFF  03,3AE
6CDC:  MOVFF  02,3AD
6CE0:  MOVFF  01,3AC
6CE4:  MOVFF  00,3AB
6CE8:  MOVLB  3
6CEA:  CLRF   xB2
6CEC:  CLRF   xB1
6CEE:  CLRF   xB0
6CF0:  MOVLW  7F
6CF2:  MOVWF  xAF
6CF4:  MOVLB  0
6CF6:  CALL   3C4C
6CFA:  MOVFF  3A6,3AA
6CFE:  MOVFF  3A5,3A9
6D02:  MOVFF  3A4,3A8
6D06:  MOVFF  3A3,3A7
6D0A:  MOVFF  03,3AE
6D0E:  MOVFF  02,3AD
6D12:  MOVFF  01,3AC
6D16:  MOVFF  00,3AB
6D1A:  CALL   3FEE
6D1E:  MOVFF  03,23C
6D22:  MOVFF  02,23B
6D26:  MOVFF  01,23A
6D2A:  MOVFF  00,239
.................... //            Temperature=(Pt-100.0972)/0.3850;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................             Temperature=(Pt-100.1395)/0.3838;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
6D2E:  BSF    FD8.1
6D30:  MOVFF  23C,3AE
6D34:  MOVFF  23B,3AD
6D38:  MOVFF  23A,3AC
6D3C:  MOVFF  239,3AB
6D40:  MOVLW  6D
6D42:  MOVLB  3
6D44:  MOVWF  xB2
6D46:  MOVLW  47
6D48:  MOVWF  xB1
6D4A:  MOVLW  48
6D4C:  MOVWF  xB0
6D4E:  MOVLW  85
6D50:  MOVWF  xAF
6D52:  MOVLB  0
6D54:  CALL   3C4C
6D58:  MOVFF  00,3A3
6D5C:  MOVFF  01,3A4
6D60:  MOVFF  02,3A5
6D64:  MOVFF  03,3A6
6D68:  MOVFF  03,3AA
6D6C:  MOVFF  02,3A9
6D70:  MOVFF  01,3A8
6D74:  MOVFF  00,3A7
6D78:  MOVLW  6F
6D7A:  MOVLB  3
6D7C:  MOVWF  xAE
6D7E:  MOVLW  81
6D80:  MOVWF  xAD
6D82:  MOVLW  44
6D84:  MOVWF  xAC
6D86:  MOVLW  7D
6D88:  MOVWF  xAB
6D8A:  MOVLB  0
6D8C:  CALL   3FEE
6D90:  MOVFF  03,250
6D94:  MOVFF  02,24F
6D98:  MOVFF  01,24E
6D9C:  MOVFF  00,24D
....................              
....................             if(l>=80) 
6DA0:  MOVLB  2
6DA2:  MOVF   x29,W
6DA4:  SUBLW  4F
6DA6:  BC    6DAA
....................             {l=0;} 
6DA8:  CLRF   x29
....................             promedio[l]=Temperature;l++; 
6DAA:  MOVLB  3
6DAC:  CLRF   xA8
6DAE:  MOVFF  229,3A7
6DB2:  CLRF   xAA
6DB4:  MOVLW  04
6DB6:  MOVWF  xA9
6DB8:  MOVLB  0
6DBA:  CALL   315E
6DBE:  MOVF   01,W
6DC0:  ADDLW  63
6DC2:  MOVWF  FE9
6DC4:  MOVLW  02
6DC6:  ADDWFC 02,W
6DC8:  MOVWF  FEA
6DCA:  MOVFF  24D,FEF
6DCE:  MOVFF  24E,FEC
6DD2:  MOVFF  24F,FEC
6DD6:  MOVFF  250,FEC
6DDA:  MOVLB  2
6DDC:  INCF   x29,F
....................           
....................             for(h=0;h<=79;h++) 
6DDE:  CLRF   x28
6DE0:  MOVF   x28,W
6DE2:  SUBLW  4F
6DE4:  BNC   6E66
....................             { 
....................                Prom+=promedio[h]; 
6DE6:  MOVLB  3
6DE8:  CLRF   xA8
6DEA:  MOVFF  228,3A7
6DEE:  CLRF   xAA
6DF0:  MOVLW  04
6DF2:  MOVWF  xA9
6DF4:  MOVLB  0
6DF6:  CALL   315E
6DFA:  MOVFF  02,03
6DFE:  MOVF   01,W
6E00:  ADDLW  63
6E02:  MOVWF  FE9
6E04:  MOVLW  02
6E06:  ADDWFC 02,W
6E08:  MOVWF  FEA
6E0A:  MOVFF  FEF,00
6E0E:  MOVFF  FEC,01
6E12:  MOVFF  FEC,02
6E16:  MOVFF  FEC,03
6E1A:  MOVFF  FEA,3A4
6E1E:  MOVFF  FE9,3A3
6E22:  BCF    FD8.1
6E24:  MOVFF  24C,3AE
6E28:  MOVFF  24B,3AD
6E2C:  MOVFF  24A,3AC
6E30:  MOVFF  249,3AB
6E34:  MOVFF  03,3B2
6E38:  MOVFF  02,3B1
6E3C:  MOVFF  01,3B0
6E40:  MOVFF  00,3AF
6E44:  CALL   3C4C
6E48:  MOVFF  3A4,FEA
6E4C:  MOVFF  3A3,FE9
6E50:  MOVFF  03,24C
6E54:  MOVFF  02,24B
6E58:  MOVFF  01,24A
6E5C:  MOVFF  00,249
....................             }  
6E60:  MOVLB  2
6E62:  INCF   x28,F
6E64:  BRA    6DE0
....................                Prom=Prom/80;    
6E66:  MOVFF  24C,3AA
6E6A:  MOVFF  24B,3A9
6E6E:  MOVFF  24A,3A8
6E72:  MOVFF  249,3A7
6E76:  MOVLB  3
6E78:  CLRF   xAE
6E7A:  CLRF   xAD
6E7C:  MOVLW  20
6E7E:  MOVWF  xAC
6E80:  MOVLW  85
6E82:  MOVWF  xAB
6E84:  MOVLB  0
6E86:  CALL   3FEE
6E8A:  MOVFF  03,24C
6E8E:  MOVFF  02,24B
6E92:  MOVFF  01,24A
6E96:  MOVFF  00,249
....................                Prom+=((float)Ajuste-(float)Ajusten); 
6E9A:  MOVLB  3
6E9C:  CLRF   xA9
6E9E:  MOVFF  22D,3A8
6EA2:  MOVLB  0
6EA4:  CALL   2506
6EA8:  MOVFF  00,3A3
6EAC:  MOVFF  01,3A4
6EB0:  MOVFF  02,3A5
6EB4:  MOVFF  03,3A6
6EB8:  MOVLB  3
6EBA:  CLRF   xA9
6EBC:  MOVFF  22F,3A8
6EC0:  MOVLB  0
6EC2:  CALL   2506
6EC6:  BSF    FD8.1
6EC8:  MOVFF  3A6,3AE
6ECC:  MOVFF  3A5,3AD
6ED0:  MOVFF  3A4,3AC
6ED4:  MOVFF  3A3,3AB
6ED8:  MOVFF  03,3B2
6EDC:  MOVFF  02,3B1
6EE0:  MOVFF  01,3B0
6EE4:  MOVFF  00,3AF
6EE8:  CALL   3C4C
6EEC:  BCF    FD8.1
6EEE:  MOVFF  24C,3AE
6EF2:  MOVFF  24B,3AD
6EF6:  MOVFF  24A,3AC
6EFA:  MOVFF  249,3AB
6EFE:  MOVFF  03,3B2
6F02:  MOVFF  02,3B1
6F06:  MOVFF  01,3B0
6F0A:  MOVFF  00,3AF
6F0E:  CALL   3C4C
6F12:  MOVFF  03,24C
6F16:  MOVFF  02,24B
6F1A:  MOVFF  01,24A
6F1E:  MOVFF  00,249
....................               
....................             Lectura=0; 
6F22:  MOVLB  2
6F24:  BCF    x0D.6
....................              
....................          displayT(Prom,79,20,3); 
6F26:  MOVFF  24C,3AA
6F2A:  MOVFF  24B,3A9
6F2E:  MOVFF  24A,3A8
6F32:  MOVFF  249,3A7
6F36:  MOVLW  4F
6F38:  MOVLB  3
6F3A:  MOVWF  xAB
6F3C:  MOVLW  14
6F3E:  MOVWF  xAC
6F40:  MOVLW  03
6F42:  MOVWF  xAD
6F44:  MOVLB  0
6F46:  CALL   2FDC
....................          displayTiempo(Setpoint,8,20,4); 
6F4A:  MOVFF  227,3A4
6F4E:  MOVLW  08
6F50:  MOVLB  3
6F52:  MOVWF  xA5
6F54:  MOVLW  14
6F56:  MOVWF  xA6
6F58:  MOVLW  04
6F5A:  MOVWF  xA7
6F5C:  MOVLB  0
6F5E:  CALL   3664
....................          displayTiempo((int8)Tpulso,8,40,4); 
6F62:  MOVFF  244,3A6
6F66:  MOVFF  243,3A5
6F6A:  MOVFF  242,3A4
6F6E:  MOVFF  241,3A3
6F72:  CALL   3C10
6F76:  MOVFF  01,3A3
6F7A:  MOVFF  01,3A4
6F7E:  MOVLW  08
6F80:  MOVLB  3
6F82:  MOVWF  xA5
6F84:  MOVLW  28
6F86:  MOVWF  xA6
6F88:  MOVLW  04
6F8A:  MOVWF  xA7
6F8C:  MOVLB  0
6F8E:  CALL   3664
....................           
....................          // Muestra Valor de esterilizacion actual. 
....................          displayTiempo(Testerilizacion[3],80,0,1);displayTiempo(Testerilizacion[2],86,0,1);glcd_text57(92, 0, Vacio, 1, ON); 
6F92:  MOVFF  219,3A4
6F96:  MOVLW  50
6F98:  MOVLB  3
6F9A:  MOVWF  xA5
6F9C:  CLRF   xA6
6F9E:  MOVLW  01
6FA0:  MOVWF  xA7
6FA2:  MOVLB  0
6FA4:  CALL   3664
6FA8:  MOVFF  218,3A4
6FAC:  MOVLW  56
6FAE:  MOVLB  3
6FB0:  MOVWF  xA5
6FB2:  CLRF   xA6
6FB4:  MOVLW  01
6FB6:  MOVWF  xA7
6FB8:  MOVLB  0
6FBA:  CALL   3664
6FBE:  MOVLW  5C
6FC0:  MOVLB  3
6FC2:  MOVWF  xB7
6FC4:  CLRF   xB8
6FC6:  MOVLW  01
6FC8:  MOVWF  xBA
6FCA:  MOVLW  2E
6FCC:  MOVWF  xB9
6FCE:  MOVLW  01
6FD0:  MOVWF  xBB
6FD2:  MOVWF  xBC
6FD4:  MOVLB  0
6FD6:  CALL   289C
....................          displayTiempo(Testerilizacion[1],98,0,1);displayTiempo(Testerilizacion[0],104,0,1); 
6FDA:  MOVFF  217,3A4
6FDE:  MOVLW  62
6FE0:  MOVLB  3
6FE2:  MOVWF  xA5
6FE4:  CLRF   xA6
6FE6:  MOVLW  01
6FE8:  MOVWF  xA7
6FEA:  MOVLB  0
6FEC:  CALL   3664
6FF0:  MOVFF  216,3A4
6FF4:  MOVLW  68
6FF6:  MOVLB  3
6FF8:  MOVWF  xA5
6FFA:  CLRF   xA6
6FFC:  MOVLW  01
6FFE:  MOVWF  xA7
7000:  MOVLB  0
7002:  CALL   3664
....................          // Muestra tiempo de secado actual. 
....................          displayTiempo(Tsecado[3],80,8,1);displayTiempo(Tsecado[2],86,8,1);glcd_text57(92, 8, Vacio, 1, ON); 
7006:  MOVFF  221,3A4
700A:  MOVLW  50
700C:  MOVLB  3
700E:  MOVWF  xA5
7010:  MOVLW  08
7012:  MOVWF  xA6
7014:  MOVLW  01
7016:  MOVWF  xA7
7018:  MOVLB  0
701A:  CALL   3664
701E:  MOVFF  220,3A4
7022:  MOVLW  56
7024:  MOVLB  3
7026:  MOVWF  xA5
7028:  MOVLW  08
702A:  MOVWF  xA6
702C:  MOVLW  01
702E:  MOVWF  xA7
7030:  MOVLB  0
7032:  CALL   3664
7036:  MOVLW  5C
7038:  MOVLB  3
703A:  MOVWF  xB7
703C:  MOVLW  08
703E:  MOVWF  xB8
7040:  MOVLW  01
7042:  MOVWF  xBA
7044:  MOVLW  2E
7046:  MOVWF  xB9
7048:  MOVLW  01
704A:  MOVWF  xBB
704C:  MOVWF  xBC
704E:  MOVLB  0
7050:  CALL   289C
....................          displayTiempo(Tsecado[1],98,8,1);displayTiempo(Tsecado[0],104,8,1); 
7054:  MOVFF  21F,3A4
7058:  MOVLW  62
705A:  MOVLB  3
705C:  MOVWF  xA5
705E:  MOVLW  08
7060:  MOVWF  xA6
7062:  MOVLW  01
7064:  MOVWF  xA7
7066:  MOVLB  0
7068:  CALL   3664
706C:  MOVFF  21E,3A4
7070:  MOVLW  68
7072:  MOVLB  3
7074:  MOVWF  xA5
7076:  MOVLW  08
7078:  MOVWF  xA6
707A:  MOVLW  01
707C:  MOVWF  xA7
707E:  MOVLB  0
7080:  CALL   3664
....................          } 
....................           
....................        
....................          if(Prom>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
7084:  MOVLB  3
7086:  CLRF   xA9
7088:  MOVFF  227,3A8
708C:  MOVLB  0
708E:  CALL   2506
7092:  MOVFF  00,3A3
7096:  MOVFF  01,3A4
709A:  MOVFF  02,3A5
709E:  MOVFF  03,3A6
70A2:  BSF    FD8.1
70A4:  MOVFF  03,3AE
70A8:  MOVFF  02,3AD
70AC:  MOVFF  01,3AC
70B0:  MOVFF  00,3AB
70B4:  MOVLB  3
70B6:  CLRF   xB2
70B8:  CLRF   xB1
70BA:  CLRF   xB0
70BC:  MOVLW  7F
70BE:  MOVWF  xAF
70C0:  MOVLB  0
70C2:  CALL   3C4C
70C6:  MOVFF  03,3A6
70CA:  MOVFF  02,3A5
70CE:  MOVFF  01,3A4
70D2:  MOVFF  00,3A3
70D6:  MOVFF  24C,3AA
70DA:  MOVFF  24B,3A9
70DE:  MOVFF  24A,3A8
70E2:  MOVFF  249,3A7
70E6:  CALL   3EC4
70EA:  BC    70EE
70EC:  BNZ   7168
....................             { 
....................             if(tiempo_secado==0) 
70EE:  MOVLB  2
70F0:  BTFSC  x0D.2
70F2:  BRA    7168
....................                {glcd_text57(0, 56, Esterilizando, 1, ON);tiempo_esterilizacion=1; 
70F4:  MOVLB  3
70F6:  CLRF   xB7
70F8:  MOVLW  38
70FA:  MOVWF  xB8
70FC:  MOVLW  01
70FE:  MOVWF  xBA
7100:  MOVLW  0F
7102:  MOVWF  xB9
7104:  MOVLW  01
7106:  MOVWF  xBB
7108:  MOVWF  xBC
710A:  MOVLB  0
710C:  CALL   289C
7110:  MOVLB  2
7112:  BSF    x0D.1
....................                if(est==0) 
7114:  BTFSC  x26.1
7116:  BRA    7168
....................                   {Limpia(0,90,56);glcd_rect(25, 18, 40, 53, NO, OFF);glcd_rect(40, 18, 75, 26, NO, ON);est=1;} 
7118:  MOVLB  3
711A:  CLRF   xA3
711C:  MOVLW  5A
711E:  MOVWF  xA4
7120:  MOVLW  38
7122:  MOVWF  xA5
7124:  MOVLB  0
7126:  CALL   414C
712A:  MOVLW  19
712C:  MOVLB  3
712E:  MOVWF  xB9
7130:  MOVLW  12
7132:  MOVWF  xBA
7134:  MOVLW  28
7136:  MOVWF  xBB
7138:  MOVLW  35
713A:  MOVWF  xBC
713C:  CLRF   xBD
713E:  CLRF   xBE
7140:  MOVLB  0
7142:  CALL   2F1A
7146:  MOVLW  28
7148:  MOVLB  3
714A:  MOVWF  xB9
714C:  MOVLW  12
714E:  MOVWF  xBA
7150:  MOVLW  4B
7152:  MOVWF  xBB
7154:  MOVLW  1A
7156:  MOVWF  xBC
7158:  CLRF   xBD
715A:  MOVLW  01
715C:  MOVWF  xBE
715E:  MOVLB  0
7160:  CALL   2F1A
7164:  MOVLB  2
7166:  BSF    x26.1
....................                } 
....................              } 
....................            
....................           if((Prom>=(float)Open)&&(Prom<((float)Setpoint-1.0))) 
7168:  MOVLB  3
716A:  CLRF   xA9
716C:  MOVFF  22C,3A8
7170:  MOVLB  0
7172:  CALL   2506
7176:  MOVFF  03,3A6
717A:  MOVFF  02,3A5
717E:  MOVFF  01,3A4
7182:  MOVFF  00,3A3
7186:  MOVFF  24C,3AA
718A:  MOVFF  24B,3A9
718E:  MOVFF  24A,3A8
7192:  MOVFF  249,3A7
7196:  CALL   3EC4
719A:  BC    719E
719C:  BNZ   7228
719E:  MOVLB  3
71A0:  CLRF   xA9
71A2:  MOVFF  227,3A8
71A6:  MOVLB  0
71A8:  CALL   2506
71AC:  MOVFF  00,3A3
71B0:  MOVFF  01,3A4
71B4:  MOVFF  02,3A5
71B8:  MOVFF  03,3A6
71BC:  BSF    FD8.1
71BE:  MOVFF  03,3AE
71C2:  MOVFF  02,3AD
71C6:  MOVFF  01,3AC
71CA:  MOVFF  00,3AB
71CE:  MOVLB  3
71D0:  CLRF   xB2
71D2:  CLRF   xB1
71D4:  CLRF   xB0
71D6:  MOVLW  7F
71D8:  MOVWF  xAF
71DA:  MOVLB  0
71DC:  CALL   3C4C
71E0:  MOVFF  24C,3A6
71E4:  MOVFF  24B,3A5
71E8:  MOVFF  24A,3A4
71EC:  MOVFF  249,3A3
71F0:  MOVFF  03,3AA
71F4:  MOVFF  02,3A9
71F8:  MOVFF  01,3A8
71FC:  MOVFF  00,3A7
7200:  CALL   3EC4
7204:  BNC   7228
....................              {Camara_IN_on; 
7206:  BSF    F8B.2
7208:  BCF    F94.2
....................                if(Expulsa==1) 
720A:  MOVLB  2
720C:  BTFSS  x26.0
720E:  BRA    7228
....................                  {Camara_OUT_on;delay_ms(250);Camara_OUT_off;Expulsa=0;} 
7210:  BSF    F8B.0
7212:  BCF    F94.0
7214:  MOVLW  FA
7216:  MOVLB  3
7218:  MOVWF  xA8
721A:  MOVLB  0
721C:  CALL   24DC
7220:  BCF    F8B.0
7222:  BCF    F94.0
7224:  MOVLB  2
7226:  BCF    x26.0
....................              } 
....................           
....................        
....................       if((tiempo_secado==1)&&(Liquid==0)) //Si no selecciono un programa con desfogue lento, Hacer desfogue total. 
7228:  MOVLB  2
722A:  BTFSS  x0D.2
722C:  BRA    72AA
722E:  MOVF   x0B,F
7230:  BNZ   72AA
....................       {tiempo_esterilizacion=0; 
7232:  BCF    x0D.1
....................          if(i==0) 
7234:  BTFSC  x0D.4
7236:  BRA    7288
....................             {Limpia(0,90,56);glcd_rect(40, 18, 75, 26, NO, OFF);glcd_rect(65, 18, 78, 53, NO, ON);i=1;}  
7238:  MOVLB  3
723A:  CLRF   xA3
723C:  MOVLW  5A
723E:  MOVWF  xA4
7240:  MOVLW  38
7242:  MOVWF  xA5
7244:  MOVLB  0
7246:  CALL   414C
724A:  MOVLW  28
724C:  MOVLB  3
724E:  MOVWF  xB9
7250:  MOVLW  12
7252:  MOVWF  xBA
7254:  MOVLW  4B
7256:  MOVWF  xBB
7258:  MOVLW  1A
725A:  MOVWF  xBC
725C:  CLRF   xBD
725E:  CLRF   xBE
7260:  MOVLB  0
7262:  CALL   2F1A
7266:  MOVLW  41
7268:  MOVLB  3
726A:  MOVWF  xB9
726C:  MOVLW  12
726E:  MOVWF  xBA
7270:  MOVLW  4E
7272:  MOVWF  xBB
7274:  MOVLW  35
7276:  MOVWF  xBC
7278:  CLRF   xBD
727A:  MOVLW  01
727C:  MOVWF  xBE
727E:  MOVLB  0
7280:  CALL   2F1A
7284:  MOVLB  2
7286:  BSF    x0D.4
....................          Camara_OUT_on;glcd_text57(0, 56, Secando, 1, ON); 
7288:  BSF    F8B.0
728A:  BCF    F94.0
728C:  MOVLB  3
728E:  CLRF   xB7
7290:  MOVLW  38
7292:  MOVWF  xB8
7294:  MOVLW  01
7296:  MOVWF  xBA
7298:  MOVLW  1D
729A:  MOVWF  xB9
729C:  MOVLW  01
729E:  MOVWF  xBB
72A0:  MOVWF  xBC
72A2:  MOVLB  0
72A4:  CALL   289C
72A8:  MOVLB  2
....................       } 
....................       
....................       if(tiempo_secado==0) //Si esta calentando, debe tener la electrovalvula cerrada. 
72AA:  BTFSC  x0D.2
72AC:  BRA    72B2
....................       {Camara_OUT_off;} 
72AE:  BCF    F8B.0
72B0:  BCF    F94.0
....................              
....................       // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................       if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])) 
72B2:  MOVF   x1A,W
72B4:  SUBWF  x16,W
72B6:  BTFSS  FD8.2
72B8:  BRA    7434
72BA:  MOVF   x1B,W
72BC:  SUBWF  x17,W
72BE:  BTFSS  FD8.2
72C0:  BRA    7434
72C2:  MOVF   x1C,W
72C4:  SUBWF  x18,W
72C6:  BTFSS  FD8.2
72C8:  BRA    7434
72CA:  MOVF   x1D,W
72CC:  SUBWF  x19,W
72CE:  BTFSS  FD8.2
72D0:  BRA    7434
....................       {tiempo_esterilizacion=0;tiempo_secado=1; 
72D2:  BCF    x0D.1
72D4:  BSF    x0D.2
....................        
....................       // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................       if(Liquid==1)    
72D6:  DECFSZ x0B,W
72D8:  BRA    73C8
....................          {tiempo_secado=0; 
72DA:  BCF    x0D.2
....................             if(i==0) 
72DC:  BTFSC  x0D.4
72DE:  BRA    734E
....................               {Limpia(0,90,56);glcd_rect(40, 18, 75, 26, NO, OFF);glcd_rect(65, 18, 78, 53, NO, ON);i=1; 
72E0:  MOVLB  3
72E2:  CLRF   xA3
72E4:  MOVLW  5A
72E6:  MOVWF  xA4
72E8:  MOVLW  38
72EA:  MOVWF  xA5
72EC:  MOVLB  0
72EE:  CALL   414C
72F2:  MOVLW  28
72F4:  MOVLB  3
72F6:  MOVWF  xB9
72F8:  MOVLW  12
72FA:  MOVWF  xBA
72FC:  MOVLW  4B
72FE:  MOVWF  xBB
7300:  MOVLW  1A
7302:  MOVWF  xBC
7304:  CLRF   xBD
7306:  CLRF   xBE
7308:  MOVLB  0
730A:  CALL   2F1A
730E:  MOVLW  41
7310:  MOVLB  3
7312:  MOVWF  xB9
7314:  MOVLW  12
7316:  MOVWF  xBA
7318:  MOVLW  4E
731A:  MOVWF  xBB
731C:  MOVLW  35
731E:  MOVWF  xBC
7320:  CLRF   xBD
7322:  MOVLW  01
7324:  MOVWF  xBE
7326:  MOVLB  0
7328:  CALL   2F1A
732C:  MOVLB  2
732E:  BSF    x0D.4
....................               glcd_text57(0, 56, Desfogue_Lento, 1, ON);} 
7330:  MOVLB  3
7332:  CLRF   xB7
7334:  MOVLW  38
7336:  MOVWF  xB8
7338:  MOVLW  01
733A:  MOVWF  xBA
733C:  MOVLW  81
733E:  MOVWF  xB9
7340:  MOVLW  01
7342:  MOVWF  xBB
7344:  MOVWF  xBC
7346:  MOVLB  0
7348:  CALL   289C
734C:  MOVLB  2
....................             
....................          for(m=0;m<Minutos*15;m++)// Utilizado para realizar la rampa. 
734E:  CLRF   x13
7350:  CLRF   x12
7352:  MOVF   x2B,W
7354:  MULLW  0F
7356:  MOVF   FF3,W
7358:  MOVF   x13,F
735A:  BNZ   73C6
735C:  SUBWF  x12,W
735E:  BC    73C6
....................          {Resistencia_off;Camara_IN_off;Camara_OUT_on;delay_ms(100*Nivel);Camara_OUT_off;delay_ms(2000-(100*Nivel));}      
7360:  BCF    F8B.1
7362:  BCF    F94.1
7364:  BCF    F8B.2
7366:  BCF    F94.2
7368:  BSF    F8B.0
736A:  BCF    F94.0
736C:  MOVF   x2A,W
736E:  MULLW  64
7370:  MOVFF  FF3,3A3
7374:  MOVFF  3A3,3A8
7378:  MOVLB  0
737A:  CALL   24DC
737E:  BCF    F8B.0
7380:  BCF    F94.0
7382:  MOVLB  2
7384:  MOVF   x2A,W
7386:  MULLW  64
7388:  MOVF   FF3,W
738A:  XORLW  FF
738C:  ADDLW  D1
738E:  MOVLB  3
7390:  MOVWF  xA3
7392:  MOVLW  07
7394:  BTFSS  FD8.0
7396:  DECF   FE8,F
7398:  MOVWF  xA4
739A:  MOVWF  xA5
739C:  INCF   xA5,F
739E:  DECF   xA5,F
73A0:  BTFSC  FD8.2
73A2:  BRA    73B2
73A4:  MOVLW  FF
73A6:  MOVWF  xA8
73A8:  MOVLB  0
73AA:  CALL   24DC
73AE:  MOVLB  3
73B0:  BRA    739E
73B2:  MOVFF  3A3,3A8
73B6:  MOVLB  0
73B8:  CALL   24DC
73BC:  MOVLB  2
73BE:  INCF   x12,F
73C0:  BTFSC  FD8.2
73C2:  INCF   x13,F
73C4:  BRA    7352
....................          fin_ciclo=1; 
73C6:  BSF    x0D.3
....................          } 
....................       while(fin_ciclo==1) //Si termino proceso. 
....................       {Camara_OUT_off;Camara_IN_off;glcd_fillScreen(OFF); glcd_text57(20, 0, Proc, 2, ON);glcd_text57(10, 40, Finalizado, 2, ON);delay_ms(30000);}    
73C8:  BTFSS  x0D.3
73CA:  BRA    7434
73CC:  BCF    F8B.0
73CE:  BCF    F94.0
73D0:  BCF    F8B.2
73D2:  BCF    F94.2
73D4:  MOVLB  3
73D6:  CLRF   xA4
73D8:  MOVLB  0
73DA:  CALL   2646
73DE:  MOVLW  14
73E0:  MOVLB  3
73E2:  MOVWF  xB7
73E4:  CLRF   xB8
73E6:  CLRF   xBA
73E8:  MOVLW  C8
73EA:  MOVWF  xB9
73EC:  MOVLW  02
73EE:  MOVWF  xBB
73F0:  MOVLW  01
73F2:  MOVWF  xBC
73F4:  MOVLB  0
73F6:  CALL   289C
73FA:  MOVLW  0A
73FC:  MOVLB  3
73FE:  MOVWF  xB7
7400:  MOVLW  28
7402:  MOVWF  xB8
7404:  MOVLW  01
7406:  MOVWF  xBA
7408:  MOVLW  F5
740A:  MOVWF  xB9
740C:  MOVLW  02
740E:  MOVWF  xBB
7410:  MOVLW  01
7412:  MOVWF  xBC
7414:  MOVLB  0
7416:  CALL   289C
741A:  MOVLW  78
741C:  MOVLB  3
741E:  MOVWF  xA3
7420:  MOVLW  FA
7422:  MOVWF  xA8
7424:  MOVLB  0
7426:  CALL   24DC
742A:  MOVLB  3
742C:  DECFSZ xA3,F
742E:  BRA    7420
7430:  MOVLB  2
7432:  BRA    73C8
....................       } 
....................       
....................     } 
7434:  GOTO   645E
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................        
....................    } 
7438:  GOTO   4E0E
.................... } 
743C:  SLEEP 

Configuration Fuses:
   Word  1: CE38   IESO FCMEN HSPLL PLL1 CPUDIV4 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
