CCS PCH C Compiler, Version 4.104, 5967               08-ago-14 08:35

               Filename: H:\JP\Autoclave\Autoclave_80L\Firmware\Autoclave_80L_V01.lst

               ROM used: 29688 bytes (91%)
                         Largest free fragment is 3080
               RAM used: 839 (41%) at main() level
                         1225 (60%) worst case
               Stack:    14 worst case (5 in main + 9 for interrupts)

*
0000:  GOTO   416E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   23E4
0054:  BTFSS  FA0.5
0056:  GOTO   0060
005A:  BTFSC  FA1.5
005C:  GOTO   235C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Inicio Proceso, Ciclo y Cambio de Contraseña. 
.................... // Falta Agregar Control de Temperatura para PT100. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV3,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
24DA:  MOVLW  03
24DC:  MOVWF  FEA
24DE:  MOVLW  B4
24E0:  MOVWF  FE9
24E2:  MOVF   FEF,W
24E4:  BZ    2502
24E6:  MOVLW  0F
24E8:  MOVWF  01
24EA:  CLRF   00
24EC:  DECFSZ 00,F
24EE:  BRA    24EC
24F0:  DECFSZ 01,F
24F2:  BRA    24EA
24F4:  MOVLW  8F
24F6:  MOVWF  00
24F8:  DECFSZ 00,F
24FA:  BRA    24F8
24FC:  NOP   
24FE:  DECFSZ FEF,F
2500:  BRA    24E6
2502:  RETLW  00
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... //#ifndef FAST_GLCD 
.................... //#define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D3   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D4   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C7   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
26D2:  BCF    F94.7
26D4:  BSF    F8B.7
....................    output_low(GLCD_E); 
26D6:  BCF    F95.7
26D8:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
26DA:  BCF    F95.3
26DC:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
26DE:  BCF    F95.4
26E0:  BCF    F8C.4
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
26E2:  BCF    F95.5
26E4:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
26E6:  MOVLB  3
26E8:  CLRF   xE7
26EA:  MOVLW  C0
26EC:  MOVWF  xE8
26EE:  MOVLB  0
26F0:  RCALL  260E
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
26F2:  MOVLW  01
26F4:  MOVLB  3
26F6:  MOVWF  xE7
26F8:  MOVLW  C0
26FA:  MOVWF  xE8
26FC:  MOVLB  0
26FE:  RCALL  260E
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
2700:  MOVLB  3
2702:  CLRF   xE7
2704:  MOVLW  40
2706:  MOVWF  xE8
2708:  MOVLB  0
270A:  RCALL  260E
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
270C:  MOVLW  01
270E:  MOVLB  3
2710:  MOVWF  xE7
2712:  MOVLW  40
2714:  MOVWF  xE8
2716:  MOVLB  0
2718:  RCALL  260E
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
271A:  MOVLB  3
271C:  CLRF   xE7
271E:  MOVLW  B8
2720:  MOVWF  xE8
2722:  MOVLB  0
2724:  RCALL  260E
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
2726:  MOVLW  01
2728:  MOVLB  3
272A:  MOVWF  xE7
272C:  MOVLW  B8
272E:  MOVWF  xE8
2730:  MOVLB  0
2732:  RCALL  260E
....................  
....................    if(mode == ON) 
2734:  MOVLB  3
2736:  DECFSZ xAF,W
2738:  BRA    2756
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
273A:  CLRF   xE7
273C:  MOVLW  3F
273E:  MOVWF  xE8
2740:  MOVLB  0
2742:  RCALL  260E
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
2744:  MOVLW  01
2746:  MOVLB  3
2748:  MOVWF  xE7
274A:  MOVLW  3F
274C:  MOVWF  xE8
274E:  MOVLB  0
2750:  RCALL  260E
....................    } 
....................    else 
2752:  BRA    276E
2754:  MOVLB  3
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
2756:  CLRF   xE7
2758:  MOVLW  3E
275A:  MOVWF  xE8
275C:  MOVLB  0
275E:  RCALL  260E
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
2760:  MOVLW  01
2762:  MOVLB  3
2764:  MOVWF  xE7
2766:  MOVLW  3E
2768:  MOVWF  xE8
276A:  MOVLB  0
276C:  RCALL  260E
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
276E:  MOVLB  3
2770:  CLRF   xB0
2772:  MOVLB  0
2774:  RCALL  2644
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
....................    #endif 
.................... } 
2776:  GOTO   4CD4 (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
*
27B8:  MOVLB  3
27BA:  BCF    xE4.0
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
27BC:  MOVF   xE0,W
27BE:  SUBLW  3F
27C0:  BC    27C8
....................    { 
....................       x -= 64; 
27C2:  MOVLW  40
27C4:  SUBWF  xE0,F
....................       side = GLCD_RIGHT; 
27C6:  BSF    xE4.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
27C8:  BCF    F95.5
27CA:  BCF    F8C.5
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
27CC:  BCF    xE0.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
27CE:  BSF    xE0.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
27D0:  MOVLW  00
27D2:  BTFSC  xE4.0
27D4:  MOVLW  01
27D6:  MOVWF  xE7
27D8:  MOVFF  3E0,3E8
27DC:  MOVLB  0
27DE:  RCALL  260E
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
27E0:  MOVLW  00
27E2:  MOVLB  3
27E4:  BTFSC  xE4.0
27E6:  MOVLW  01
27E8:  MOVWF  xE5
27EA:  RRCF   xE1,W
27EC:  MOVWF  00
27EE:  RRCF   00,F
27F0:  RRCF   00,F
27F2:  MOVLW  1F
27F4:  ANDWF  00,F
27F6:  MOVF   00,W
27F8:  ANDLW  BF
27FA:  IORLW  B8
27FC:  MOVWF  xE6
27FE:  MOVFF  3E5,3E7
2802:  MOVWF  xE8
2804:  MOVLB  0
2806:  RCALL  260E
....................    output_high(GLCD_DI);                        // Set for data 
2808:  BCF    F95.5
280A:  BSF    F8C.5
....................    glcd_readByte(side);                         // Need two reads to get data 
280C:  MOVLW  00
280E:  MOVLB  3
2810:  BTFSC  xE4.0
2812:  MOVLW  01
2814:  MOVWF  xE6
2816:  MOVLB  0
2818:  RCALL  277A
....................    data = glcd_readByte(side);                  //  at new address 
281A:  MOVLW  00
281C:  MOVLB  3
281E:  BTFSC  xE4.0
2820:  MOVLW  01
2822:  MOVWF  xE6
2824:  MOVLB  0
2826:  RCALL  277A
2828:  MOVFF  01,3E3
....................  
....................    if(color == ON) 
282C:  MOVLB  3
282E:  DECFSZ xE2,W
2830:  BRA    2850
....................       bit_set(data, y%8);        // Turn the pixel on 
2832:  MOVF   xE1,W
2834:  ANDLW  07
2836:  MOVWF  xE5
2838:  MOVLW  01
283A:  MOVWF  00
283C:  MOVF   xE5,W
283E:  MOVWF  01
2840:  BZ    284A
2842:  BCF    FD8.0
2844:  RLCF   00,F
2846:  DECFSZ 01,F
2848:  BRA    2842
284A:  MOVF   00,W
284C:  IORWF  xE3,F
....................    else                          // or 
284E:  BRA    286E
....................       bit_clear(data, y%8);      // turn the pixel off 
2850:  MOVF   xE1,W
2852:  ANDLW  07
2854:  MOVWF  xE5
2856:  MOVLW  01
2858:  MOVWF  00
285A:  MOVF   xE5,W
285C:  MOVWF  01
285E:  BZ    2868
2860:  BCF    FD8.0
2862:  RLCF   00,F
2864:  DECFSZ 01,F
2866:  BRA    2860
2868:  MOVF   00,W
286A:  XORLW  FF
286C:  ANDWF  xE3,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
286E:  BCF    F95.5
2870:  BCF    F8C.5
....................    glcd_writeByte(side, x);      // Set the horizontal address 
2872:  MOVLW  00
2874:  BTFSC  xE4.0
2876:  MOVLW  01
2878:  MOVWF  xE7
287A:  MOVFF  3E0,3E8
287E:  MOVLB  0
2880:  RCALL  260E
....................    output_high(GLCD_DI);         // Set for data 
2882:  BCF    F95.5
2884:  BSF    F8C.5
....................    glcd_writeByte(side, data);   // Write the pixel data 
2886:  MOVLW  00
2888:  MOVLB  3
288A:  BTFSC  xE4.0
288C:  MOVLW  01
288E:  MOVWF  xE7
2890:  MOVFF  3E3,3E8
2894:  MOVLB  0
2896:  RCALL  260E
.................... } 
2898:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................       *p1++ = data; 
....................       *p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
2644:  MOVLB  3
2646:  CLRF   xB1
2648:  MOVF   xB1,W
264A:  SUBLW  07
264C:  BNC   26CE
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
264E:  BCF    F95.5
2650:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
2652:  CLRF   xE7
2654:  MOVLW  40
2656:  MOVWF  xE8
2658:  MOVLB  0
265A:  RCALL  260E
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
265C:  MOVLW  01
265E:  MOVLB  3
2660:  MOVWF  xE7
2662:  MOVLW  40
2664:  MOVWF  xE8
2666:  MOVLB  0
2668:  RCALL  260E
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
266A:  MOVLB  3
266C:  MOVF   xB1,W
266E:  IORLW  B8
2670:  MOVWF  xB3
2672:  CLRF   xE7
2674:  MOVWF  xE8
2676:  MOVLB  0
2678:  RCALL  260E
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
267A:  MOVLB  3
267C:  MOVF   xB1,W
267E:  IORLW  B8
2680:  MOVWF  xB3
2682:  MOVLW  01
2684:  MOVWF  xE7
2686:  MOVFF  3B3,3E8
268A:  MOVLB  0
268C:  RCALL  260E
....................       output_high(GLCD_DI);                     // Set for data 
268E:  BCF    F95.5
2690:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
2692:  MOVLB  3
2694:  CLRF   xB2
2696:  MOVF   xB2,W
2698:  SUBLW  3F
269A:  BNC   26CA
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
269C:  MOVF   xB0,W
269E:  MULLW  FF
26A0:  MOVFF  FF3,3B3
26A4:  CLRF   xE7
26A6:  MOVFF  3B3,3E8
26AA:  MOVLB  0
26AC:  RCALL  260E
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
26AE:  MOVLB  3
26B0:  MOVF   xB0,W
26B2:  MULLW  FF
26B4:  MOVFF  FF3,3B3
26B8:  MOVLW  01
26BA:  MOVWF  xE7
26BC:  MOVFF  3B3,3E8
26C0:  MOVLB  0
26C2:  RCALL  260E
....................       } 
26C4:  MOVLB  3
26C6:  INCF   xB2,F
26C8:  BRA    2696
....................    } 
26CA:  INCF   xB1,F
26CC:  BRA    2648
.................... } 
26CE:  MOVLB  0
26D0:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
260E:  MOVLB  3
2610:  MOVF   xE7,F
2612:  BZ    261A
....................       output_high(GLCD_CS2); 
2614:  BCF    F95.4
2616:  BSF    F8C.4
....................    else 
2618:  BRA    261E
....................       output_high(GLCD_CS1); 
261A:  BCF    F95.3
261C:  BSF    F8C.3
....................  
....................    output_low(GLCD_RW);       // Set for writing 
261E:  BCF    F95.6
2620:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
2622:  CLRF   F93
2624:  MOVFF  3E8,F8A
....................    delay_cycles(1); 
2628:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
262A:  BCF    F95.7
262C:  BSF    F8C.7
....................    delay_cycles(5); 
262E:  BRA    2630
2630:  BRA    2632
2632:  NOP   
....................    output_low(GLCD_E); 
2634:  BCF    F95.7
2636:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
2638:  BCF    F95.3
263A:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
263C:  BCF    F95.4
263E:  BCF    F8C.4
.................... } 
2640:  MOVLB  0
2642:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
*
277A:  MOVLW  FF
277C:  MOVWF  F93
....................    output_high(GLCD_RW);      // Set for reading 
277E:  BCF    F95.6
2780:  BSF    F8C.6
....................  
....................    if(side)                   // Choose which side to write to 
2782:  MOVLB  3
2784:  MOVF   xE6,F
2786:  BZ    278E
....................       output_high(GLCD_CS2); 
2788:  BCF    F95.4
278A:  BSF    F8C.4
....................    else 
278C:  BRA    2792
....................       output_high(GLCD_CS1); 
278E:  BCF    F95.3
2790:  BSF    F8C.3
....................  
....................    delay_cycles(1); 
2792:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
2794:  BCF    F95.7
2796:  BSF    F8C.7
....................    delay_cycles(4); 
2798:  BRA    279A
279A:  BRA    279C
....................    data = input_b();          // Get the data from the display's output register 
279C:  MOVLW  FF
279E:  MOVWF  F93
27A0:  MOVFF  F81,3E7
....................    output_low(GLCD_E); 
27A4:  BCF    F95.7
27A6:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
27A8:  BCF    F95.3
27AA:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
27AC:  BCF    F95.4
27AE:  BCF    F8C.4
....................    return data;               // Return the read data 
27B0:  MOVFF  3E7,01
.................... } 
27B4:  MOVLB  0
27B6:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
2DDA:  MOVLW  01
2DDC:  MOVLB  3
2DDE:  MOVWF  xD9
2DE0:  MOVWF  xDA
2DE2:  CLRF   xDF
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
2DE4:  MOVF   xD0,W
2DE6:  SUBWF  xD2,W
2DE8:  MOVWF  xE0
2DEA:  MOVF   xE0,W
2DEC:  BTFSS  xE0.7
2DEE:  BRA    2DF6
2DF0:  MOVLW  00
2DF2:  BSF    FD8.0
2DF4:  SUBFWB xE0,W
2DF6:  CLRF   03
2DF8:  MOVWF  xD7
2DFA:  MOVFF  03,3D8
....................    dy = abs((signed int8)(y2 - y1)); 
2DFE:  MOVF   xD1,W
2E00:  SUBWF  xD3,W
2E02:  MOVWF  xE0
2E04:  MOVF   xE0,W
2E06:  BTFSS  xE0.7
2E08:  BRA    2E10
2E0A:  MOVLW  00
2E0C:  BSF    FD8.0
2E0E:  SUBFWB xE0,W
2E10:  CLRF   03
2E12:  MOVWF  xD5
2E14:  MOVFF  03,3D6
....................    #endif 
....................  
....................    if(x1 > x2) 
2E18:  MOVF   xD0,W
2E1A:  SUBWF  xD2,W
2E1C:  BC    2E22
....................       addx = -1; 
2E1E:  MOVLW  FF
2E20:  MOVWF  xD9
....................    if(y1 > y2) 
2E22:  MOVF   xD1,W
2E24:  SUBWF  xD3,W
2E26:  BC    2E2C
....................       addy = -1; 
2E28:  MOVLW  FF
2E2A:  MOVWF  xDA
....................  
....................    if(dx >= dy) 
2E2C:  MOVF   xD6,W
2E2E:  SUBWF  xD8,W
2E30:  BNC   2EA8
2E32:  BNZ   2E3A
2E34:  MOVF   xD5,W
2E36:  SUBWF  xD7,W
2E38:  BNC   2EA8
....................    { 
....................       dy *= 2; 
2E3A:  BCF    FD8.0
2E3C:  RLCF   xD5,F
2E3E:  RLCF   xD6,F
....................       P = dy - dx; 
2E40:  MOVF   xD7,W
2E42:  SUBWF  xD5,W
2E44:  MOVWF  00
2E46:  MOVF   xD8,W
2E48:  SUBWFB xD6,W
2E4A:  MOVFF  00,3DB
2E4E:  MOVWF  xDC
....................       diff = P - dx; 
2E50:  MOVF   xD7,W
2E52:  SUBWF  xDB,W
2E54:  MOVWF  xDD
2E56:  MOVF   xD8,W
2E58:  SUBWFB xDC,W
2E5A:  MOVWF  xDE
....................  
....................       for(; i<=dx; ++i) 
2E5C:  MOVF   xD8,F
2E5E:  BNZ   2E66
2E60:  MOVF   xDF,W
2E62:  SUBWF  xD7,W
2E64:  BNC   2EA6
....................       { 
....................          glcd_pixel(x1, y1, color); 
2E66:  MOVFF  3D0,3E0
2E6A:  MOVFF  3D1,3E1
2E6E:  MOVFF  3D4,3E2
2E72:  MOVLB  0
2E74:  RCALL  27B8
....................  
....................          if(P < 0) 
2E76:  MOVLB  3
2E78:  BTFSC  xDC.7
2E7A:  BRA    2E7E
2E7C:  BRA    2E8E
....................          { 
....................             P  += dy; 
2E7E:  MOVF   xD5,W
2E80:  ADDWF  xDB,F
2E82:  MOVF   xD6,W
2E84:  ADDWFC xDC,F
....................             x1 += addx; 
2E86:  MOVF   xD9,W
2E88:  ADDWF  xD0,W
2E8A:  MOVWF  xD0
....................          } 
....................          else 
2E8C:  BRA    2EA2
....................          { 
....................             P  += diff; 
2E8E:  MOVF   xDD,W
2E90:  ADDWF  xDB,F
2E92:  MOVF   xDE,W
2E94:  ADDWFC xDC,F
....................             x1 += addx; 
2E96:  MOVF   xD9,W
2E98:  ADDWF  xD0,W
2E9A:  MOVWF  xD0
....................             y1 += addy; 
2E9C:  MOVF   xDA,W
2E9E:  ADDWF  xD1,W
2EA0:  MOVWF  xD1
....................          } 
....................       } 
2EA2:  INCF   xDF,F
2EA4:  BRA    2E5C
....................    } 
....................    else 
2EA6:  BRA    2F14
....................    { 
....................       dx *= 2; 
2EA8:  BCF    FD8.0
2EAA:  RLCF   xD7,F
2EAC:  RLCF   xD8,F
....................       P = dx - dy; 
2EAE:  MOVF   xD5,W
2EB0:  SUBWF  xD7,W
2EB2:  MOVWF  00
2EB4:  MOVF   xD6,W
2EB6:  SUBWFB xD8,W
2EB8:  MOVFF  00,3DB
2EBC:  MOVWF  xDC
....................       diff = P - dy; 
2EBE:  MOVF   xD5,W
2EC0:  SUBWF  xDB,W
2EC2:  MOVWF  xDD
2EC4:  MOVF   xD6,W
2EC6:  SUBWFB xDC,W
2EC8:  MOVWF  xDE
....................  
....................       for(; i<=dy; ++i) 
2ECA:  MOVF   xD6,F
2ECC:  BNZ   2ED4
2ECE:  MOVF   xDF,W
2ED0:  SUBWF  xD5,W
2ED2:  BNC   2F14
....................       { 
....................          glcd_pixel(x1, y1, color); 
2ED4:  MOVFF  3D0,3E0
2ED8:  MOVFF  3D1,3E1
2EDC:  MOVFF  3D4,3E2
2EE0:  MOVLB  0
2EE2:  RCALL  27B8
....................  
....................          if(P < 0) 
2EE4:  MOVLB  3
2EE6:  BTFSC  xDC.7
2EE8:  BRA    2EEC
2EEA:  BRA    2EFC
....................          { 
....................             P  += dx; 
2EEC:  MOVF   xD7,W
2EEE:  ADDWF  xDB,F
2EF0:  MOVF   xD8,W
2EF2:  ADDWFC xDC,F
....................             y1 += addy; 
2EF4:  MOVF   xDA,W
2EF6:  ADDWF  xD1,W
2EF8:  MOVWF  xD1
....................          } 
....................          else 
2EFA:  BRA    2F10
....................          { 
....................             P  += diff; 
2EFC:  MOVF   xDD,W
2EFE:  ADDWF  xDB,F
2F00:  MOVF   xDE,W
2F02:  ADDWFC xDC,F
....................             x1 += addx; 
2F04:  MOVF   xD9,W
2F06:  ADDWF  xD0,W
2F08:  MOVWF  xD0
....................             y1 += addy; 
2F0A:  MOVF   xDA,W
2F0C:  ADDWF  xD1,W
2F0E:  MOVWF  xD1
....................          } 
....................       } 
2F10:  INCF   xDF,F
2F12:  BRA    2ECA
....................    } 
.................... } 
2F14:  MOVLB  0
2F16:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
2F18:  MOVLB  3
2F1A:  MOVF   xC9,F
2F1C:  BZ    2F7A
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
2F1E:  MOVF   xC7,W
2F20:  SUBWF  xC5,W
2F22:  BC    2F2E
....................       { 
....................          xmin = x1; 
2F24:  MOVFF  3C5,3CC
....................          xmax = x2; 
2F28:  MOVFF  3C7,3CD
....................       } 
....................       else 
2F2C:  BRA    2F36
....................       { 
....................          xmin = x2; 
2F2E:  MOVFF  3C7,3CC
....................          xmax = x1; 
2F32:  MOVFF  3C5,3CD
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
2F36:  MOVF   xC8,W
2F38:  SUBWF  xC6,W
2F3A:  BC    2F46
....................       { 
....................          ymin = y1; 
2F3C:  MOVFF  3C6,3CE
....................          ymax = y2; 
2F40:  MOVFF  3C8,3CF
....................       } 
....................       else 
2F44:  BRA    2F4E
....................       { 
....................          ymin = y2; 
2F46:  MOVFF  3C8,3CE
....................          ymax = y1; 
2F4A:  MOVFF  3C6,3CF
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
2F4E:  MOVF   xCC,W
2F50:  SUBWF  xCD,W
2F52:  BNC   2F78
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
2F54:  MOVFF  3CE,3CB
2F58:  MOVF   xCB,W
2F5A:  SUBWF  xCF,W
2F5C:  BNC   2F74
....................          { 
....................             glcd_pixel(xmin, i, color); 
2F5E:  MOVFF  3CC,3E0
2F62:  MOVFF  3CB,3E1
2F66:  MOVFF  3CA,3E2
2F6A:  MOVLB  0
2F6C:  RCALL  27B8
....................          } 
2F6E:  MOVLB  3
2F70:  INCF   xCB,F
2F72:  BRA    2F58
....................       } 
2F74:  INCF   xCC,F
2F76:  BRA    2F4E
....................    } 
....................    else 
2F78:  BRA    2FD6
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
2F7A:  MOVFF  3C5,3D0
2F7E:  MOVFF  3C6,3D1
2F82:  MOVFF  3C7,3D2
2F86:  MOVFF  3C6,3D3
2F8A:  MOVFF  3CA,3D4
2F8E:  MOVLB  0
2F90:  RCALL  2DDA
....................       glcd_line(x1, y2, x2, y2, color); 
2F92:  MOVFF  3C5,3D0
2F96:  MOVFF  3C8,3D1
2F9A:  MOVFF  3C7,3D2
2F9E:  MOVFF  3C8,3D3
2FA2:  MOVFF  3CA,3D4
2FA6:  RCALL  2DDA
....................       glcd_line(x1, y1, x1, y2, color); 
2FA8:  MOVFF  3C5,3D0
2FAC:  MOVFF  3C6,3D1
2FB0:  MOVFF  3C5,3D2
2FB4:  MOVFF  3C8,3D3
2FB8:  MOVFF  3CA,3D4
2FBC:  RCALL  2DDA
....................       glcd_line(x2, y1, x2, y2, color); 
2FBE:  MOVFF  3C7,3D0
2FC2:  MOVFF  3C6,3D1
2FC6:  MOVFF  3C7,3D2
2FCA:  MOVFF  3C8,3D3
2FCE:  MOVFF  3CA,3D4
2FD2:  RCALL  2DDA
2FD4:  MOVLB  3
....................    } 
.................... } 
2FD6:  MOVLB  0
2FD8:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
388C:  MOVLB  3
388E:  CLRF   xB4
....................    b = radius; 
3890:  MOVFF  3B1,3B5
....................    P = 1 - radius; 
3894:  MOVLW  01
3896:  BSF    FD8.0
3898:  SUBFWB xB1,W
389A:  MOVWF  xB6
....................  
....................    do 
....................    { 
....................       if(fill) 
389C:  MOVF   xB2,F
389E:  BZ    396A
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
38A0:  MOVF   xB4,W
38A2:  SUBWF  xAF,W
38A4:  MOVWF  xB7
38A6:  MOVF   xB5,W
38A8:  ADDWF  xB0,W
38AA:  MOVWF  xB8
38AC:  MOVF   xB4,W
38AE:  ADDWF  xAF,W
38B0:  MOVWF  xB9
38B2:  MOVF   xB5,W
38B4:  ADDWF  xB0,W
38B6:  MOVWF  xBA
38B8:  MOVFF  3B7,3D0
38BC:  MOVFF  3B8,3D1
38C0:  MOVFF  3B9,3D2
38C4:  MOVWF  xD3
38C6:  MOVFF  3B3,3D4
38CA:  MOVLB  0
38CC:  CALL   2DDA
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
38D0:  MOVLB  3
38D2:  MOVF   xB4,W
38D4:  SUBWF  xAF,W
38D6:  MOVWF  xB7
38D8:  MOVF   xB5,W
38DA:  SUBWF  xB0,W
38DC:  MOVWF  xB8
38DE:  MOVF   xB4,W
38E0:  ADDWF  xAF,W
38E2:  MOVWF  xB9
38E4:  MOVF   xB5,W
38E6:  SUBWF  xB0,W
38E8:  MOVWF  xBA
38EA:  MOVFF  3B7,3D0
38EE:  MOVFF  3B8,3D1
38F2:  MOVFF  3B9,3D2
38F6:  MOVWF  xD3
38F8:  MOVFF  3B3,3D4
38FC:  MOVLB  0
38FE:  CALL   2DDA
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
3902:  MOVLB  3
3904:  MOVF   xB5,W
3906:  SUBWF  xAF,W
3908:  MOVWF  xB7
390A:  MOVF   xB4,W
390C:  ADDWF  xB0,W
390E:  MOVWF  xB8
3910:  MOVF   xB5,W
3912:  ADDWF  xAF,W
3914:  MOVWF  xB9
3916:  MOVF   xB4,W
3918:  ADDWF  xB0,W
391A:  MOVWF  xBA
391C:  MOVFF  3B7,3D0
3920:  MOVFF  3B8,3D1
3924:  MOVFF  3B9,3D2
3928:  MOVWF  xD3
392A:  MOVFF  3B3,3D4
392E:  MOVLB  0
3930:  CALL   2DDA
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
3934:  MOVLB  3
3936:  MOVF   xB5,W
3938:  SUBWF  xAF,W
393A:  MOVWF  xB7
393C:  MOVF   xB4,W
393E:  SUBWF  xB0,W
3940:  MOVWF  xB8
3942:  MOVF   xB5,W
3944:  ADDWF  xAF,W
3946:  MOVWF  xB9
3948:  MOVF   xB4,W
394A:  SUBWF  xB0,W
394C:  MOVWF  xBA
394E:  MOVFF  3B7,3D0
3952:  MOVFF  3B8,3D1
3956:  MOVFF  3B9,3D2
395A:  MOVWF  xD3
395C:  MOVFF  3B3,3D4
3960:  MOVLB  0
3962:  CALL   2DDA
....................       } 
....................       else 
3966:  BRA    3A58
3968:  MOVLB  3
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
396A:  MOVF   xAF,W
396C:  ADDWF  xB4,W
396E:  MOVWF  xB7
3970:  MOVF   xB0,W
3972:  ADDWF  xB5,W
3974:  MOVWF  xB8
3976:  MOVFF  3B7,3E0
397A:  MOVWF  xE1
397C:  MOVFF  3B3,3E2
3980:  MOVLB  0
3982:  CALL   27B8
....................          glcd_pixel(b+x, a+y, color); 
3986:  MOVLB  3
3988:  MOVF   xAF,W
398A:  ADDWF  xB5,W
398C:  MOVWF  xB7
398E:  MOVF   xB0,W
3990:  ADDWF  xB4,W
3992:  MOVWF  xB8
3994:  MOVFF  3B7,3E0
3998:  MOVWF  xE1
399A:  MOVFF  3B3,3E2
399E:  MOVLB  0
39A0:  CALL   27B8
....................          glcd_pixel(x-a, b+y, color); 
39A4:  MOVLB  3
39A6:  MOVF   xB4,W
39A8:  SUBWF  xAF,W
39AA:  MOVWF  xB7
39AC:  MOVF   xB0,W
39AE:  ADDWF  xB5,W
39B0:  MOVWF  xB8
39B2:  MOVFF  3B7,3E0
39B6:  MOVWF  xE1
39B8:  MOVFF  3B3,3E2
39BC:  MOVLB  0
39BE:  CALL   27B8
....................          glcd_pixel(x-b, a+y, color); 
39C2:  MOVLB  3
39C4:  MOVF   xB5,W
39C6:  SUBWF  xAF,W
39C8:  MOVWF  xB7
39CA:  MOVF   xB0,W
39CC:  ADDWF  xB4,W
39CE:  MOVWF  xB8
39D0:  MOVFF  3B7,3E0
39D4:  MOVWF  xE1
39D6:  MOVFF  3B3,3E2
39DA:  MOVLB  0
39DC:  CALL   27B8
....................          glcd_pixel(b+x, y-a, color); 
39E0:  MOVLB  3
39E2:  MOVF   xAF,W
39E4:  ADDWF  xB5,W
39E6:  MOVWF  xB7
39E8:  MOVF   xB4,W
39EA:  SUBWF  xB0,W
39EC:  MOVWF  xB8
39EE:  MOVFF  3B7,3E0
39F2:  MOVWF  xE1
39F4:  MOVFF  3B3,3E2
39F8:  MOVLB  0
39FA:  CALL   27B8
....................          glcd_pixel(a+x, y-b, color); 
39FE:  MOVLB  3
3A00:  MOVF   xAF,W
3A02:  ADDWF  xB4,W
3A04:  MOVWF  xB7
3A06:  MOVF   xB5,W
3A08:  SUBWF  xB0,W
3A0A:  MOVWF  xB8
3A0C:  MOVFF  3B7,3E0
3A10:  MOVWF  xE1
3A12:  MOVFF  3B3,3E2
3A16:  MOVLB  0
3A18:  CALL   27B8
....................          glcd_pixel(x-a, y-b, color); 
3A1C:  MOVLB  3
3A1E:  MOVF   xB4,W
3A20:  SUBWF  xAF,W
3A22:  MOVWF  xB7
3A24:  MOVF   xB5,W
3A26:  SUBWF  xB0,W
3A28:  MOVWF  xB8
3A2A:  MOVFF  3B7,3E0
3A2E:  MOVWF  xE1
3A30:  MOVFF  3B3,3E2
3A34:  MOVLB  0
3A36:  CALL   27B8
....................          glcd_pixel(x-b, y-a, color); 
3A3A:  MOVLB  3
3A3C:  MOVF   xB5,W
3A3E:  SUBWF  xAF,W
3A40:  MOVWF  xB7
3A42:  MOVF   xB4,W
3A44:  SUBWF  xB0,W
3A46:  MOVWF  xB8
3A48:  MOVFF  3B7,3E0
3A4C:  MOVWF  xE1
3A4E:  MOVFF  3B3,3E2
3A52:  MOVLB  0
3A54:  CALL   27B8
....................       } 
....................  
....................       if(P < 0) 
3A58:  MOVLB  3
3A5A:  BTFSC  xB6.7
3A5C:  BRA    3A60
3A5E:  BRA    3A7C
....................          P += 3 + 2 * a++; 
3A60:  MOVF   xB4,W
3A62:  INCF   xB4,F
3A64:  MOVWF  xB7
3A66:  MOVLW  02
3A68:  MOVWF  xB8
3A6A:  MOVFF  3B7,3B9
3A6E:  MOVLB  0
3A70:  RCALL  383E
3A72:  MOVF   01,W
3A74:  ADDLW  03
3A76:  MOVLB  3
3A78:  ADDWF  xB6,F
....................       else 
3A7A:  BRA    3A9E
....................          P += 5 + 2 * (a++ - b--); 
3A7C:  MOVF   xB4,W
3A7E:  INCF   xB4,F
3A80:  MOVWF  xB7
3A82:  MOVF   xB5,W
3A84:  DECF   xB5,F
3A86:  SUBWF  xB7,W
3A88:  MOVWF  xB7
3A8A:  MOVLW  02
3A8C:  MOVWF  xB8
3A8E:  MOVFF  3B7,3B9
3A92:  MOVLB  0
3A94:  RCALL  383E
3A96:  MOVF   01,W
3A98:  ADDLW  05
3A9A:  MOVLB  3
3A9C:  ADDWF  xB6,F
....................     } while(a <= b); 
3A9E:  MOVF   xB4,W
3AA0:  XORLW  80
3AA2:  MOVWF  00
3AA4:  MOVF   xB5,W
3AA6:  XORLW  80
3AA8:  SUBWF  00,W
3AAA:  BTFSC  FD8.2
3AAC:  BRA    389C
3AAE:  BTFSS  FD8.0
3AB0:  BRA    389C
.................... } 
3AB2:  MOVLB  0
3AB4:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
289A:  MOVFF  3C6,03
289E:  MOVLB  3
28A0:  MOVFF  3C5,FE9
28A4:  MOVFF  3C6,FEA
28A8:  MOVF   FEF,F
28AA:  BTFSC  FD8.2
28AC:  BRA    2A4E
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
28AE:  MOVFF  3C6,03
28B2:  MOVFF  3C5,FE9
28B6:  MOVFF  3C6,FEA
28BA:  MOVF   FEF,W
28BC:  SUBLW  52
28BE:  BNC   290E
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
28C0:  MOVFF  3C6,03
28C4:  MOVFF  3C5,FE9
28C8:  MOVFF  3C6,FEA
28CC:  MOVLW  20
28CE:  SUBWF  FEF,W
28D0:  MULLW  05
28D2:  MOVF   FF3,W
28D4:  CLRF   03
28D6:  MOVWF  xD2
28D8:  MOVLW  03
28DA:  MOVWF  FEA
28DC:  MOVLW  CD
28DE:  MOVWF  FE9
28E0:  CLRF   xD6
28E2:  MOVFF  3D2,3D5
28E6:  MOVFF  FF2,3D3
28EA:  BCF    FF2.7
28EC:  MOVLW  05
28EE:  MOVWF  01
28F0:  CLRF   FF7
28F2:  MOVF   xD2,W
28F4:  MOVLB  0
28F6:  CALL   00A2
28FA:  TBLRD*-
28FC:  TBLRD*+
28FE:  MOVFF  FF5,FEE
2902:  DECFSZ 01,F
2904:  BRA    28FC
2906:  MOVLB  3
2908:  BTFSC  xD3.7
290A:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
290C:  BRA    2978
290E:  MOVFF  3C6,03
2912:  MOVFF  3C5,FE9
2916:  MOVFF  3C6,FEA
291A:  MOVF   FEF,W
291C:  SUBLW  7E
291E:  BNC   296E
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
2920:  MOVFF  3C6,03
2924:  MOVFF  3C5,FE9
2928:  MOVFF  3C6,FEA
292C:  MOVLW  53
292E:  SUBWF  FEF,W
2930:  MULLW  05
2932:  MOVF   FF3,W
2934:  CLRF   03
2936:  MOVWF  xD2
2938:  MOVLW  03
293A:  MOVWF  FEA
293C:  MOVLW  CD
293E:  MOVWF  FE9
2940:  CLRF   xD6
2942:  MOVFF  3D2,3D5
2946:  MOVFF  FF2,3D3
294A:  BCF    FF2.7
294C:  MOVLW  05
294E:  MOVWF  01
2950:  CLRF   FF7
2952:  MOVF   xD2,W
2954:  MOVLB  0
2956:  CALL   01BC
295A:  TBLRD*-
295C:  TBLRD*+
295E:  MOVFF  FF5,FEE
2962:  DECFSZ 01,F
2964:  BRA    295C
2966:  MOVLB  3
2968:  BTFSC  xD3.7
296A:  BSF    FF2.7
....................       else 
296C:  BRA    2978
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
296E:  CLRF   xCD
2970:  CLRF   xCE
2972:  CLRF   xCF
2974:  CLRF   xD0
2976:  CLRF   xD1
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
2978:  MOVFF  3C6,03
297C:  MOVF   xC5,W
297E:  MOVWF  FE9
2980:  MOVFF  03,FEA
2984:  MOVF   FEF,W
2986:  XORLW  0A
2988:  MOVLB  0
298A:  BZ    2992
298C:  XORLW  07
298E:  BZ    29A2
2990:  BRA    29A8
....................          case '\n': 
....................             y += 7*size + 1; 
2992:  MOVLB  3
2994:  MOVF   xC7,W
2996:  MULLW  07
2998:  MOVF   FF3,W
299A:  ADDLW  01
299C:  ADDWF  xC4,F
....................             continue; 
299E:  BRA    2A40
29A0:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
29A2:  MOVLB  3
29A4:  CLRF   xC3
....................             continue; 
29A6:  BRA    2A40
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
29A8:  MOVLB  3
29AA:  MOVF   xC7,W
29AC:  MULLW  05
29AE:  MOVF   FF3,W
29B0:  ADDWF  xC3,W
29B2:  SUBLW  7F
29B4:  BC    29C2
....................       { 
....................          x = 0;                           // Set x at far left position 
29B6:  CLRF   xC3
....................          y += 7*size + 1;                 // Set y at next position down 
29B8:  MOVF   xC7,W
29BA:  MULLW  07
29BC:  MOVF   FF3,W
29BE:  ADDLW  01
29C0:  ADDWF  xC4,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
29C2:  CLRF   xC9
29C4:  MOVF   xC9,W
29C6:  SUBLW  04
29C8:  BNC   2A40
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
29CA:  CLRF   xCA
29CC:  MOVF   xCA,W
29CE:  SUBLW  06
29D0:  BNC   2A38
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
29D2:  CLRF   03
29D4:  MOVF   xC9,W
29D6:  ADDLW  CD
29D8:  MOVWF  FE9
29DA:  MOVLW  03
29DC:  ADDWFC 03,W
29DE:  MOVWF  FEA
29E0:  MOVFF  FEF,3D2
29E4:  MOVFF  3D2,00
29E8:  MOVF   xCA,W
29EA:  MOVWF  01
29EC:  BZ    29F6
29EE:  BCF    FD8.0
29F0:  RRCF   00,F
29F2:  DECFSZ 01,F
29F4:  BRA    29EE
29F6:  BTFSS  00.0
29F8:  BRA    2A34
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
29FA:  CLRF   xCB
29FC:  MOVF   xC7,W
29FE:  SUBWF  xCB,W
2A00:  BC    2A34
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
2A02:  CLRF   xCC
2A04:  MOVF   xC7,W
2A06:  SUBWF  xCC,W
2A08:  BC    2A30
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
2A0A:  MOVF   xCC,W
2A0C:  ADDWF  xC3,W
2A0E:  MOVWF  xD2
2A10:  MOVF   xCA,W
2A12:  MULWF  xC7
2A14:  MOVF   FF3,W
2A16:  ADDWF  xC4,W
2A18:  ADDWF  xCB,W
2A1A:  MOVWF  xD3
2A1C:  MOVFF  3D2,3E0
2A20:  MOVWF  xE1
2A22:  MOVFF  3C8,3E2
2A26:  MOVLB  0
2A28:  RCALL  27B8
....................                   } 
2A2A:  MOVLB  3
2A2C:  INCF   xCC,F
2A2E:  BRA    2A04
....................                } 
2A30:  INCF   xCB,F
2A32:  BRA    29FC
....................             } 
....................          } 
2A34:  INCF   xCA,F
2A36:  BRA    29CC
....................       } 
2A38:  INCF   xC9,F
2A3A:  MOVF   xC7,W
2A3C:  ADDWF  xC3,F
2A3E:  BRA    29C4
....................    } 
2A40:  INCF   xC5,F
2A42:  BTFSC  FD8.2
2A44:  INCF   xC6,F
2A46:  INCF   xC3,F
2A48:  MOVLB  0
2A4A:  BRA    289A
2A4C:  MOVLB  3
.................... } 
2A4E:  MOVLB  0
2A50:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A1) 
.................... #define   DOWN          input(PIN_A2) 
.................... #define   RIGHT         input(PIN_A3) 
.................... #define   LEFT          input(PIN_A5) 
.................... #define   STOP          !input(PIN_E0) 
.................... #define   PRESOSTATO    input(PIN_E1) 
.................... #define   PUERTA        input(PIN_E2) 
.................... //#define   AL2           input(PIN_A6) 
....................  
.................... // Definición de otros puertos 
.................... #define   Camara_OUT_on     output_bit(PIN_C0,1) 
.................... #define   Camara_OUT_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia_off   output_bit(PIN_C1,0) 
.................... #define   Camara_IN_on      output_bit(PIN_C2,1) 
.................... #define   Camara_IN_off     output_bit(PIN_C2,0) 
.................... #define   Piloto_Stop_on    output_bit(PIN_D0,1) 
.................... #define   Piloto_Stop_off   output_bit(PIN_D0,0) 
.................... #define   Piloto_Fc_on      output_bit(PIN_D1,1) 
.................... #define   Piloto_Fc_off     output_bit(PIN_D1,0) 
.................... #define   Piloto_Puerta_on  output_bit(PIN_D2,1) 
.................... #define   Piloto_Puerta_off output_bit(PIN_D2,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
3ABE:  CLRF   03
3AC0:  MOVLB  3
3AC2:  MOVF   xAF,W
3AC4:  ADDLW  70
3AC6:  MOVWF  FE9
3AC8:  MOVLW  0F
3ACA:  ADDWFC 03,W
3ACC:  MOVWF  FEA
3ACE:  MOVF   FEF,F
3AD0:  BZ    3AEC
3AD2:  MOVF   xAF,W
3AD4:  MULLW  08
3AD6:  MOVF   FF3,W
3AD8:  CLRF   xB1
3ADA:  MOVWF  xB0
3ADC:  MOVWF  FE9
3ADE:  MOVLW  04
3AE0:  ADDWF  xB1,W
3AE2:  MOVWF  FEA
3AE4:  MOVFF  FEF,3B0
3AE8:  BTFSS  xB0.7
3AEA:  BRA    3AF0
3AEC:  MOVLW  00
3AEE:  BRA    3AF2
3AF0:  MOVLW  01
3AF2:  MOVWF  01
.................... } 
3AF4:  MOVLB  0
3AF6:  GOTO   63C0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
206E:  CLRF   03
2070:  MOVLB  3
2072:  MOVF   xF1,W
2074:  ADDLW  70
2076:  MOVWF  FE9
2078:  MOVLW  0F
207A:  ADDWFC 03,W
207C:  MOVWF  FEA
207E:  MOVF   FEF,F
2080:  BZ    20A6
2082:  MOVF   xF1,W
2084:  MULLW  08
2086:  MOVF   FF3,W
2088:  CLRF   xF3
208A:  MOVWF  xF2
208C:  MOVLW  04
208E:  ADDWF  xF2,F
2090:  MOVLW  00
2092:  ADDWFC xF3,F
2094:  MOVFF  3F2,FE9
2098:  MOVLW  04
209A:  ADDWF  xF3,W
209C:  MOVWF  FEA
209E:  MOVFF  FEF,3F2
20A2:  BTFSS  xF2.7
20A4:  BRA    20AA
20A6:  MOVLW  00
20A8:  BRA    20AC
20AA:  MOVLW  01
20AC:  MOVWF  01
.................... } 
20AE:  MOVLB  0
20B0:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
258E:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
2590:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
2592:  MOVLW  08
2594:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
2596:  MOVF   F94,W
2598:  IORLW  30
259A:  MOVLB  3
259C:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
259E:  CLRF   1C
25A0:  CLRF   16
25A2:  BTFSC  FF2.7
25A4:  BSF    16.7
25A6:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
25A8:  MOVLB  0
25AA:  CALL   1966
25AE:  BTFSC  16.7
25B0:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
25B2:  GOTO   25B8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
25BC:  CLRF   16
25BE:  BTFSC  FF2.7
25C0:  BSF    16.7
25C2:  BCF    FF2.7
....................    usb_token_reset(); 
25C4:  CALL   1966
25C8:  BTFSC  16.7
25CA:  BSF    FF2.7
....................    UCON = 0; 
25CC:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
25CE:  MOVLW  14
25D0:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
25D2:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
25D4:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
25D6:  MOVLW  01
25D8:  MOVWF  1C
.................... } 
25DA:  GOTO   25E4 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
25B6:  BRA    258E
.................... } 
25B8:  GOTO   2602 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
25DE:  BTFSC  F6D.3
25E0:  BRA    25E4
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
25E2:  BRA    25BC
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
25E4:  DECFSZ 1C,W
25E6:  BRA    25FE
25E8:  BTFSC  F6D.5
25EA:  BRA    25FE
....................    { 
....................       UIR=0; 
25EC:  CLRF   F68
....................       UIE=0; 
25EE:  CLRF   F69
....................       enable_interrupts(INT_USB); 
25F0:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
25F2:  MOVLW  C0
25F4:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
25F6:  MOVLW  11
25F8:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
25FA:  MOVLW  02
25FC:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
25FE:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
2600:  BRA    25B6
....................  
....................    do  
....................    { 
....................       usb_task(); 
2602:  RCALL  25DE
....................    } while (usb_state != USB_STATE_POWERED); 
2604:  MOVF   1C,W
2606:  SUBLW  02
2608:  BNZ   2602
.................... } 
260A:  GOTO   4CC4 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
20B2:  MOVFF  3EC,3F1
20B6:  RCALL  206E
20B8:  MOVF   01,F
20BA:  BZ    2184
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
20BC:  MOVLB  3
20BE:  MOVF   xEC,W
20C0:  MULLW  08
20C2:  MOVF   FF3,W
20C4:  CLRF   xF2
20C6:  MOVWF  xF1
20C8:  MOVLW  04
20CA:  ADDWF  xF1,F
20CC:  MOVLW  00
20CE:  ADDWFC xF2,F
20D0:  MOVLW  01
20D2:  ADDWF  xF1,W
20D4:  MOVWF  01
20D6:  MOVLW  00
20D8:  ADDWFC xF2,W
20DA:  MOVWF  03
20DC:  MOVFF  01,FE9
20E0:  MOVLW  04
20E2:  ADDWF  03,W
20E4:  MOVWF  FEA
20E6:  MOVFF  3ED,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
20EA:  MOVF   xEF,W
20EC:  SUBLW  02
20EE:  BNZ   211E
....................       { 
....................          i = EP_BDxST_I(endpoint); 
20F0:  MOVF   xEC,W
20F2:  MULLW  08
20F4:  MOVF   FF3,W
20F6:  CLRF   xF2
20F8:  MOVWF  xF1
20FA:  MOVLW  04
20FC:  ADDWF  xF1,F
20FE:  MOVLW  00
2100:  ADDWFC xF2,F
2102:  MOVFF  3F1,FE9
2106:  MOVLW  04
2108:  ADDWF  xF2,W
210A:  MOVWF  FEA
210C:  MOVFF  FEF,3F0
....................          if (bit_test(i,6)) 
2110:  BTFSS  xF0.6
2112:  BRA    2118
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
2114:  CLRF   xEF
....................          else 
2116:  BRA    211C
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
2118:  MOVLW  01
211A:  MOVWF  xEF
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
211C:  BRA    2144
211E:  MOVF   xEF,W
2120:  SUBLW  04
2122:  BNZ   2144
....................       { 
....................          i = EP_BDxST_O(endpoint); 
2124:  MOVF   xEC,W
2126:  MULLW  08
2128:  MOVF   FF3,W
212A:  CLRF   xF2
212C:  MOVWF  FE9
212E:  MOVLW  04
2130:  ADDWF  xF2,W
2132:  MOVWF  FEA
2134:  MOVFF  FEF,3F0
....................          if (bit_test(i,6)) 
2138:  BTFSS  xF0.6
213A:  BRA    2142
....................             tgl = USB_DTS_DATA1; 
213C:  MOVLW  01
213E:  MOVWF  xEF
....................          else 
2140:  BRA    2144
....................             tgl = USB_DTS_DATA0; 
2142:  CLRF   xEF
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
2144:  DECFSZ xEF,W
2146:  BRA    214E
....................          i=0xC8;  //DATA1, UOWN 
2148:  MOVLW  C8
214A:  MOVWF  xF0
....................       else //if (tgl == USB_DTS_DATA0)  
214C:  BRA    2152
....................          i=0x88; //DATA0, UOWN 
214E:  MOVLW  88
2150:  MOVWF  xF0
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
2152:  BTFSC  xEE.0
2154:  BSF    xF0.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
2156:  BTFSC  xEE.1
2158:  BSF    xF0.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
215A:  MOVF   xEC,W
215C:  MULLW  08
215E:  MOVF   FF3,W
2160:  CLRF   xF2
2162:  MOVWF  xF1
2164:  MOVLW  04
2166:  ADDWF  xF1,F
2168:  MOVLW  00
216A:  ADDWFC xF2,F
216C:  MOVFF  3F1,FE9
2170:  MOVLW  04
2172:  ADDWF  xF2,W
2174:  MOVWF  FEA
2176:  MOVFF  3F0,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
217A:  MOVLW  01
217C:  MOVWF  01
217E:  BRA    218A
....................    } 
....................    else  
2180:  BRA    2182
2182:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
2184:  MOVLW  00
2186:  MOVWF  01
2188:  MOVLB  3
.................... } 
218A:  MOVLB  0
218C:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
3F3C:  CLRF   16
3F3E:  BTFSC  FF2.7
3F40:  BSF    16.7
3F42:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
3F44:  MOVFF  3AF,3F1
3F48:  CALL   206E
3F4C:  BTFSC  16.7
3F4E:  BSF    FF2.7
3F50:  MOVF   01,F
3F52:  BZ    3FE4
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
3F54:  MOVLB  3
3F56:  MOVF   xAF,W
3F58:  MULLW  08
3F5A:  MOVF   FF3,W
3F5C:  CLRF   xB8
3F5E:  MOVWF  xB7
3F60:  MOVLW  04
3F62:  ADDWF  xB7,F
3F64:  MOVLW  00
3F66:  ADDWFC xB8,F
3F68:  MOVLW  02
3F6A:  ADDWF  xB7,W
3F6C:  MOVWF  01
3F6E:  MOVLW  00
3F70:  ADDWFC xB8,W
3F72:  MOVWF  03
3F74:  MOVFF  01,FE9
3F78:  MOVLW  04
3F7A:  ADDWF  03,W
3F7C:  MOVWF  FEA
3F7E:  MOVFF  FEC,03
3F82:  MOVF   FED,F
3F84:  MOVFF  FEF,3B5
3F88:  MOVFF  03,3B6
....................       memcpy(buff_add, ptr, len);      
3F8C:  MOVFF  3B6,FEA
3F90:  MOVFF  3B5,FE9
3F94:  MOVFF  3B1,FE2
3F98:  MOVFF  3B0,FE1
3F9C:  MOVFF  3B3,02
3FA0:  MOVFF  3B2,01
3FA4:  MOVF   01,F
3FA6:  BZ    3FAC
3FA8:  INCF   02,F
3FAA:  BRA    3FB0
3FAC:  MOVF   02,F
3FAE:  BZ    3FBC
3FB0:  MOVFF  FE6,FEE
3FB4:  DECFSZ 01,F
3FB6:  BRA    3FB0
3FB8:  DECFSZ 02,F
3FBA:  BRA    3FB0
3FBC:  CLRF   16
3FBE:  BTFSC  FF2.7
3FC0:  BSF    16.7
3FC2:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
3FC4:  MOVFF  3AF,3EC
3FC8:  MOVFF  3B3,3EE
3FCC:  MOVFF  3B2,3ED
3FD0:  MOVFF  3B4,3EF
3FD4:  MOVLB  0
3FD6:  CALL   20B2
3FDA:  BTFSC  16.7
3FDC:  BSF    FF2.7
3FDE:  MOVF   01,W
3FE0:  BRA    3FE8
....................    } 
....................    else  
3FE2:  BRA    3FE4
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
3FE4:  MOVLW  00
3FE6:  MOVWF  01
.................... } 
3FE8:  GOTO   65B2 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
1FA4:  MOVLB  3
1FA6:  MOVF   xEC,W
1FA8:  MULLW  08
1FAA:  MOVF   FF3,W
1FAC:  CLRF   xF2
1FAE:  MOVWF  FE9
1FB0:  MOVLW  04
1FB2:  ADDWF  xF2,W
1FB4:  MOVWF  FEA
1FB6:  MOVFF  FEF,3EE
....................    if (tgl == USB_DTS_TOGGLE)  
1FBA:  MOVF   xED,W
1FBC:  SUBLW  02
1FBE:  BNZ   1FCC
....................    { 
....................       if (bit_test(i,6)) 
1FC0:  BTFSS  xEE.6
1FC2:  BRA    1FC8
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
1FC4:  CLRF   xED
....................       else 
1FC6:  BRA    1FCC
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
1FC8:  MOVLW  01
1FCA:  MOVWF  xED
....................    } 
....................    if (tgl == USB_DTS_STALL)  
1FCC:  MOVF   xED,W
1FCE:  SUBLW  03
1FD0:  BNZ   1FF8
....................    { 
....................       i = 0x84; 
1FD2:  MOVLW  84
1FD4:  MOVWF  xEE
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
1FD6:  MOVF   xEC,W
1FD8:  MULLW  08
1FDA:  MOVF   FF3,W
1FDC:  CLRF   xF2
1FDE:  MOVWF  xF1
1FE0:  MOVLW  04
1FE2:  ADDWF  xF1,F
1FE4:  MOVLW  00
1FE6:  ADDWFC xF2,F
1FE8:  MOVFF  3F1,FE9
1FEC:  MOVLW  04
1FEE:  ADDWF  xF2,W
1FF0:  MOVWF  FEA
1FF2:  MOVLW  84
1FF4:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
1FF6:  BRA    2006
1FF8:  DECFSZ xED,W
1FFA:  BRA    2002
....................       i = 0xC8;  //DATA1, UOWN 
1FFC:  MOVLW  C8
1FFE:  MOVWF  xEE
....................    else //if (tgl == USB_DTS_DATA0)  
2000:  BRA    2006
....................       i = 0x88; //DATA0, UOWN 
2002:  MOVLW  88
2004:  MOVWF  xEE
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
2006:  BCF    FD8.0
2008:  RLCF   xEC,W
200A:  CLRF   03
200C:  MOVFF  FF2,3F1
2010:  BCF    FF2.7
2012:  MOVLB  0
2014:  CALL   174A
2018:  TBLRD*+
201A:  MOVFF  FF5,03
201E:  MOVLB  3
2020:  BTFSC  xF1.7
2022:  BSF    FF2.7
2024:  MOVWF  xEF
2026:  MOVFF  03,3F0
....................    EP_BDxCNT_O(endpoint) = len; 
202A:  MOVF   xEC,W
202C:  MULLW  08
202E:  MOVF   FF3,W
2030:  CLRF   xF2
2032:  MOVWF  xF1
2034:  MOVLW  01
2036:  ADDWF  xF1,W
2038:  MOVWF  01
203A:  MOVLW  00
203C:  ADDWFC xF2,W
203E:  MOVWF  03
2040:  MOVFF  01,FE9
2044:  MOVLW  04
2046:  ADDWF  03,W
2048:  MOVWF  FEA
204A:  MOVFF  3EF,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
204E:  BTFSC  xF0.0
2050:  BSF    xEE.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
2052:  BTFSC  xF0.1
2054:  BSF    xEE.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
2056:  MOVF   xEC,W
2058:  MULLW  08
205A:  MOVF   FF3,W
205C:  CLRF   xF2
205E:  MOVWF  FE9
2060:  MOVLW  04
2062:  ADDWF  xF2,W
2064:  MOVWF  FEA
2066:  MOVFF  3EE,FEF
.................... } 
206A:  MOVLB  0
206C:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
3AFA:  MOVLB  3
3AFC:  MOVF   xB4,W
3AFE:  MULLW  08
3B00:  MOVF   FF3,W
3B02:  CLRF   xBF
3B04:  MOVWF  xBE
3B06:  MOVLW  02
3B08:  ADDWF  xBE,W
3B0A:  MOVWF  01
3B0C:  MOVLW  00
3B0E:  ADDWFC xBF,W
3B10:  MOVWF  03
3B12:  MOVFF  01,FE9
3B16:  MOVLW  04
3B18:  ADDWF  03,W
3B1A:  MOVWF  FEA
3B1C:  MOVFF  FEC,03
3B20:  MOVF   FED,F
3B22:  MOVFF  FEF,3B9
3B26:  MOVFF  03,3BA
....................    i = EP_BDxCNT_O(endpoint); 
3B2A:  MOVF   xB4,W
3B2C:  MULLW  08
3B2E:  MOVF   FF3,W
3B30:  CLRF   xBF
3B32:  MOVWF  xBE
3B34:  MOVLW  01
3B36:  ADDWF  xBE,W
3B38:  MOVWF  01
3B3A:  MOVLW  00
3B3C:  ADDWFC xBF,W
3B3E:  MOVWF  03
3B40:  MOVFF  01,FE9
3B44:  MOVLW  04
3B46:  ADDWF  03,W
3B48:  MOVWF  FEA
3B4A:  MOVF   FEF,W
3B4C:  CLRF   03
3B4E:  MOVWF  xBC
3B50:  MOVFF  03,3BD
....................    st = EP_BDxST_O(endpoint); 
3B54:  MOVF   xB4,W
3B56:  MULLW  08
3B58:  MOVF   FF3,W
3B5A:  CLRF   xBF
3B5C:  MOVWF  FE9
3B5E:  MOVLW  04
3B60:  ADDWF  xBF,W
3B62:  MOVWF  FEA
3B64:  MOVFF  FEF,3BB
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
3B68:  BTFSC  xBB.0
3B6A:  BSF    xBD.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
3B6C:  BTFSC  xBB.1
3B6E:  BSF    xBD.1
....................  
....................    if (i < max) {max = i;} 
3B70:  MOVF   xBD,W
3B72:  SUBWF  xB8,W
3B74:  BNC   3B86
3B76:  BNZ   3B7E
3B78:  MOVF   xB7,W
3B7A:  SUBWF  xBC,W
3B7C:  BC    3B86
3B7E:  MOVFF  3BD,3B8
3B82:  MOVFF  3BC,3B7
....................     
....................    memcpy(ptr, al ,max); 
3B86:  MOVFF  3B6,FEA
3B8A:  MOVFF  3B5,FE9
3B8E:  MOVFF  3BA,FE2
3B92:  MOVFF  3B9,FE1
3B96:  MOVFF  3B8,02
3B9A:  MOVFF  3B7,01
3B9E:  MOVF   01,F
3BA0:  BZ    3BA6
3BA2:  INCF   02,F
3BA4:  BRA    3BAA
3BA6:  MOVF   02,F
3BA8:  BZ    3BB6
3BAA:  MOVFF  FE6,FEE
3BAE:  DECFSZ 01,F
3BB0:  BRA    3BAA
3BB2:  DECFSZ 02,F
3BB4:  BRA    3BAA
....................  
....................    return(max); 
3BB6:  MOVFF  3B7,01
3BBA:  MOVFF  3B8,02
.................... } 
3BBE:  MOVLB  0
3BC0:  GOTO   3BDA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
3BC4:  MOVFF  3AF,3B4
3BC8:  MOVFF  3B1,3B6
3BCC:  MOVFF  3B0,3B5
3BD0:  MOVFF  3B3,3B8
3BD4:  MOVFF  3B2,3B7
3BD8:  BRA    3AFA
3BDA:  MOVFF  02,3B3
3BDE:  MOVFF  01,3B2
3BE2:  CLRF   16
3BE4:  BTFSC  FF2.7
3BE6:  BSF    16.7
3BE8:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
3BEA:  MOVFF  3AF,3EC
3BEE:  MOVLW  02
3BF0:  MOVLB  3
3BF2:  MOVWF  xED
3BF4:  MOVLB  0
3BF6:  CALL   1FA4
3BFA:  BTFSC  16.7
3BFC:  BSF    FF2.7
....................  
....................    return(max); 
3BFE:  MOVLB  3
3C00:  MOVFF  3B2,01
3C04:  MOVFF  3B3,02
.................... } 
3C08:  MOVLB  0
3C0A:  GOTO   63DC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1E6A:  MOVLB  3
1E6C:  BCF    xED.0
1E6E:  BTFSC  xEC.7
1E70:  BSF    xED.0
....................    endpoint &= 0x7F; 
1E72:  BCF    xEC.7
....................     
....................    if (direction)  
1E74:  BTFSS  xED.0
1E76:  BRA    1E9A
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
1E78:  MOVF   xEC,W
1E7A:  MULLW  08
1E7C:  MOVF   FF3,W
1E7E:  CLRF   xEF
1E80:  MOVWF  xEE
1E82:  MOVLW  04
1E84:  ADDWF  xEE,F
1E86:  MOVLW  00
1E88:  ADDWFC xEF,F
1E8A:  MOVFF  3EE,FE9
1E8E:  MOVLW  04
1E90:  ADDWF  xEF,W
1E92:  MOVWF  FEA
1E94:  MOVLW  84
1E96:  MOVWF  FEF
....................    } 
....................    else  
1E98:  BRA    1EAE
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
1E9A:  MOVF   xEC,W
1E9C:  MULLW  08
1E9E:  MOVF   FF3,W
1EA0:  CLRF   xEF
1EA2:  MOVWF  FE9
1EA4:  MOVLW  04
1EA6:  ADDWF  xEF,W
1EA8:  MOVWF  FEA
1EAA:  MOVLW  84
1EAC:  MOVWF  FEF
....................    } 
.................... } 
1EAE:  MOVLB  0
1EB0:  GOTO   1F42 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1E22:  MOVLB  3
1E24:  BCF    xED.0
1E26:  BTFSC  xEC.7
1E28:  BSF    xED.0
....................    endpoint &= 0x7F; 
1E2A:  BCF    xEC.7
....................     
....................    if (direction)  
1E2C:  BTFSS  xED.0
1E2E:  BRA    1E52
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
1E30:  MOVF   xEC,W
1E32:  MULLW  08
1E34:  MOVF   FF3,W
1E36:  CLRF   xEF
1E38:  MOVWF  xEE
1E3A:  MOVLW  04
1E3C:  ADDWF  xEE,F
1E3E:  MOVLW  00
1E40:  ADDWFC xEF,F
1E42:  MOVFF  3EE,FE9
1E46:  MOVLW  04
1E48:  ADDWF  xEF,W
1E4A:  MOVWF  FEA
1E4C:  MOVLW  88
1E4E:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
1E50:  BRA    1E64
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
1E52:  MOVF   xEC,W
1E54:  MULLW  08
1E56:  MOVF   FF3,W
1E58:  CLRF   xEF
1E5A:  MOVWF  FE9
1E5C:  MOVLW  04
1E5E:  ADDWF  xEF,W
1E60:  MOVWF  FEA
1E62:  CLRF   FEF
....................    } 
.................... } 
1E64:  MOVLB  0
1E66:  GOTO   1F32 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1EB4:  MOVLB  3
1EB6:  BCF    xED.0
1EB8:  BTFSC  xEC.7
1EBA:  BSF    xED.0
....................    endpoint &= 0x7F; 
1EBC:  BCF    xEC.7
....................     
....................    if (direction)  
1EBE:  BTFSS  xED.0
1EC0:  BRA    1EE4
....................    { 
....................       st=EP_BDxST_I(endpoint); 
1EC2:  MOVF   xEC,W
1EC4:  MULLW  08
1EC6:  MOVF   FF3,W
1EC8:  CLRF   xF0
1ECA:  MOVWF  xEF
1ECC:  MOVLW  04
1ECE:  ADDWF  xEF,F
1ED0:  MOVLW  00
1ED2:  ADDWFC xF0,F
1ED4:  MOVFF  3EF,FE9
1ED8:  MOVLW  04
1EDA:  ADDWF  xF0,W
1EDC:  MOVWF  FEA
1EDE:  MOVFF  FEF,3EE
....................    } 
....................    else  
1EE2:  BRA    1EF8
....................    { 
....................       st=EP_BDxST_O(endpoint); 
1EE4:  MOVF   xEC,W
1EE6:  MULLW  08
1EE8:  MOVF   FF3,W
1EEA:  CLRF   xF0
1EEC:  MOVWF  FE9
1EEE:  MOVLW  04
1EF0:  ADDWF  xF0,W
1EF2:  MOVWF  FEA
1EF4:  MOVFF  FEF,3EE
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
1EF8:  BTFSS  xEE.7
1EFA:  BRA    1F00
1EFC:  BTFSC  xEE.2
1EFE:  BRA    1F04
1F00:  MOVLW  00
1F02:  BRA    1F06
1F04:  MOVLW  01
1F06:  MOVWF  01
.................... } 
1F08:  MOVLB  0
1F0A:  GOTO   1F5A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
2198:  MOVFF  3ED,F6E
....................     
....................    if (address)  
219C:  MOVLB  3
219E:  MOVF   xED,F
21A0:  BZ    21A8
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
21A2:  MOVLW  04
21A4:  MOVWF  1C
....................    } 
....................    else  
21A6:  BRA    21AC
....................    { 
....................       usb_state = USB_STATE_POWERED; 
21A8:  MOVLW  02
21AA:  MOVWF  1C
....................    } 
.................... } 
21AC:  MOVLB  0
21AE:  GOTO   21BC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
1AEE:  MOVLB  3
1AF0:  MOVF   xEC,F
1AF2:  BNZ   1B00
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
1AF4:  MOVLW  04
1AF6:  MOVWF  1C
....................       usb_disable_endpoints(); 
1AF8:  MOVLB  0
1AFA:  RCALL  1948
....................    } 
....................    else  
1AFC:  BRA    1CBA
1AFE:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
1B00:  MOVLW  05
1B02:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
1B04:  MOVLW  04
1B06:  MOVWF  xEF
1B08:  MOVLW  90
1B0A:  MOVWF  xEE
....................       for (en=1; en<USB_NUM_UEP; en++)  
1B0C:  MOVLW  01
1B0E:  MOVWF  xED
1B10:  MOVF   xED,W
1B12:  SUBLW  0F
1B14:  BTFSS  FD8.0
1B16:  BRA    1CBA
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
1B18:  MOVFF  3ED,3F5
1B1C:  MOVLB  0
1B1E:  RCALL  18F4
....................          new_uep = 0; 
1B20:  MOVLB  3
1B22:  CLRF   xF0
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
1B24:  CLRF   03
1B26:  MOVF   xED,W
1B28:  MOVFF  FF2,3F4
1B2C:  BCF    FF2.7
1B2E:  MOVLB  0
1B30:  RCALL  172A
1B32:  MOVLB  3
1B34:  BTFSC  xF4.7
1B36:  BSF    FF2.7
1B38:  SUBLW  FF
1B3A:  BZ    1BF2
....................          { 
....................             new_uep = 0x04; 
1B3C:  MOVLW  04
1B3E:  MOVWF  xF0
....................             len = usb_ep_rx_size[en]; 
1B40:  BCF    FD8.0
1B42:  RLCF   xED,W
1B44:  CLRF   03
1B46:  MOVFF  FF2,3F4
1B4A:  BCF    FF2.7
1B4C:  MOVLB  0
1B4E:  RCALL  174A
1B50:  TBLRD*+
1B52:  MOVFF  FF5,03
1B56:  MOVLB  3
1B58:  BTFSC  xF4.7
1B5A:  BSF    FF2.7
1B5C:  MOVWF  xF1
1B5E:  MOVFF  03,3F2
....................             EP_BDxCNT_O(en) = len; 
1B62:  MOVF   xED,W
1B64:  MULLW  08
1B66:  MOVF   FF3,W
1B68:  CLRF   xF5
1B6A:  MOVWF  xF4
1B6C:  MOVLW  01
1B6E:  ADDWF  xF4,W
1B70:  MOVWF  01
1B72:  MOVLW  00
1B74:  ADDWFC xF5,W
1B76:  MOVWF  03
1B78:  MOVFF  01,FE9
1B7C:  MOVLW  04
1B7E:  ADDWF  03,W
1B80:  MOVWF  FEA
1B82:  MOVFF  3F1,FEF
....................             EP_BDxADR_O(en) = addy; 
1B86:  MOVF   xED,W
1B88:  MULLW  08
1B8A:  MOVF   FF3,W
1B8C:  CLRF   xF5
1B8E:  MOVWF  xF4
1B90:  MOVLW  02
1B92:  ADDWF  xF4,W
1B94:  MOVWF  01
1B96:  MOVLW  00
1B98:  ADDWFC xF5,W
1B9A:  MOVWF  03
1B9C:  MOVFF  01,FE9
1BA0:  MOVLW  04
1BA2:  ADDWF  03,W
1BA4:  MOVWF  FEA
1BA6:  MOVFF  3EF,FEC
1BAA:  MOVF   FED,F
1BAC:  MOVFF  3EE,FEF
....................             addy += usb_ep_rx_size[en]; 
1BB0:  BCF    FD8.0
1BB2:  RLCF   xED,W
1BB4:  CLRF   03
1BB6:  MOVFF  FF2,3F4
1BBA:  BCF    FF2.7
1BBC:  MOVLB  0
1BBE:  RCALL  174A
1BC0:  TBLRD*+
1BC2:  MOVFF  FF5,03
1BC6:  MOVLB  3
1BC8:  BTFSC  xF4.7
1BCA:  BSF    FF2.7
1BCC:  ADDWF  xEE,F
1BCE:  MOVF   03,W
1BD0:  ADDWFC xEF,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
1BD2:  MOVLW  88
1BD4:  MOVWF  xF3
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
1BD6:  BTFSC  xF2.0
1BD8:  BSF    xF3.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
1BDA:  BTFSC  xF2.1
1BDC:  BSF    xF3.1
....................             EP_BDxST_O(en) = i; 
1BDE:  MOVF   xED,W
1BE0:  MULLW  08
1BE2:  MOVF   FF3,W
1BE4:  CLRF   xF5
1BE6:  MOVWF  FE9
1BE8:  MOVLW  04
1BEA:  ADDWF  xF5,W
1BEC:  MOVWF  FEA
1BEE:  MOVFF  3F3,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
1BF2:  CLRF   03
1BF4:  MOVF   xED,W
1BF6:  MOVFF  FF2,3F4
1BFA:  BCF    FF2.7
1BFC:  MOVLB  0
1BFE:  RCALL  172A
1C00:  MOVLB  3
1C02:  BTFSC  xF4.7
1C04:  BSF    FF2.7
1C06:  SUBLW  FF
1C08:  BZ    1C80
....................          { 
....................             new_uep |= 0x02; 
1C0A:  BSF    xF0.1
....................             EP_BDxADR_I(en) = addy; 
1C0C:  MOVF   xED,W
1C0E:  MULLW  08
1C10:  MOVF   FF3,W
1C12:  CLRF   xF5
1C14:  MOVWF  xF4
1C16:  MOVLW  04
1C18:  ADDWF  xF4,F
1C1A:  MOVLW  00
1C1C:  ADDWFC xF5,F
1C1E:  MOVLW  02
1C20:  ADDWF  xF4,W
1C22:  MOVWF  01
1C24:  MOVLW  00
1C26:  ADDWFC xF5,W
1C28:  MOVWF  03
1C2A:  MOVFF  01,FE9
1C2E:  MOVLW  04
1C30:  ADDWF  03,W
1C32:  MOVWF  FEA
1C34:  MOVFF  3EF,FEC
1C38:  MOVF   FED,F
1C3A:  MOVFF  3EE,FEF
....................             addy += usb_ep_tx_size[en]; 
1C3E:  BCF    FD8.0
1C40:  RLCF   xED,W
1C42:  CLRF   03
1C44:  MOVFF  FF2,3F4
1C48:  BCF    FF2.7
1C4A:  MOVLB  0
1C4C:  RCALL  174A
1C4E:  TBLRD*+
1C50:  MOVFF  FF5,03
1C54:  MOVLB  3
1C56:  BTFSC  xF4.7
1C58:  BSF    FF2.7
1C5A:  ADDWF  xEE,F
1C5C:  MOVF   03,W
1C5E:  ADDWFC xEF,F
....................             EP_BDxST_I(en) = 0x40; 
1C60:  MOVF   xED,W
1C62:  MULLW  08
1C64:  MOVF   FF3,W
1C66:  CLRF   xF5
1C68:  MOVWF  xF4
1C6A:  MOVLW  04
1C6C:  ADDWF  xF4,F
1C6E:  MOVLW  00
1C70:  ADDWFC xF5,F
1C72:  MOVFF  3F4,FE9
1C76:  MOVLW  04
1C78:  ADDWF  xF5,W
1C7A:  MOVWF  FEA
1C7C:  MOVLW  40
1C7E:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
1C80:  MOVF   xF0,W
1C82:  SUBLW  06
1C84:  BNZ   1C8A
1C86:  MOVLW  0E
1C88:  MOVWF  xF0
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
1C8A:  CLRF   03
1C8C:  MOVF   xED,W
1C8E:  MOVFF  FF2,3F4
1C92:  BCF    FF2.7
1C94:  MOVLB  0
1C96:  RCALL  172A
1C98:  MOVLB  3
1C9A:  BTFSC  xF4.7
1C9C:  BSF    FF2.7
1C9E:  SUBLW  01
1CA0:  BTFSS  FD8.2
1CA2:  BSF    xF0.4
....................           
....................          UEP(en) = new_uep; 
1CA4:  CLRF   03
1CA6:  MOVF   xED,W
1CA8:  ADDLW  70
1CAA:  MOVWF  FE9
1CAC:  MOVLW  0F
1CAE:  ADDWFC 03,W
1CB0:  MOVWF  FEA
1CB2:  MOVFF  3F0,FEF
....................       } 
1CB6:  INCF   xED,F
1CB8:  BRA    1B10
1CBA:  MOVLB  0
....................    } 
.................... } 
1CBC:  GOTO   1D64 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
18F4:  CLRF   03
18F6:  MOVLB  3
18F8:  MOVF   xF5,W
18FA:  ADDLW  70
18FC:  MOVWF  FE9
18FE:  MOVLW  0F
1900:  ADDWFC 03,W
1902:  MOVWF  FEA
1904:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
1906:  MOVFF  3F5,3F6
190A:  MOVLB  0
190C:  RCALL  1890
190E:  MOVF   01,F
1910:  BZ    1944
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
1912:  MOVLB  3
1914:  MOVF   xF5,W
1916:  MULLW  08
1918:  MOVF   FF3,W
191A:  CLRF   xF7
191C:  MOVWF  FE9
191E:  MOVLW  04
1920:  ADDWF  xF7,W
1922:  MOVWF  FEA
1924:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
1926:  MOVF   xF5,W
1928:  MULLW  08
192A:  MOVF   FF3,W
192C:  CLRF   xF7
192E:  MOVWF  xF6
1930:  MOVLW  04
1932:  ADDWF  xF6,F
1934:  MOVLW  00
1936:  ADDWFC xF7,F
1938:  MOVFF  3F6,FE9
193C:  MOVLW  04
193E:  ADDWF  xF7,W
1940:  MOVWF  FEA
1942:  CLRF   FEF
1944:  MOVLB  0
....................    } 
.................... } 
1946:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
1948:  MOVLW  01
194A:  MOVLB  3
194C:  MOVWF  xF4
194E:  MOVF   xF4,W
1950:  SUBLW  0F
1952:  BNC   1962
....................       usb_disable_endpoint(i); 
1954:  MOVFF  3F4,3F5
1958:  MOVLB  0
195A:  RCALL  18F4
195C:  MOVLB  3
195E:  INCF   xF4,F
1960:  BRA    194E
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
1962:  MOVLB  0
1964:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
235C:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
235E:  MOVF   1C,F
2360:  BNZ   2364
2362:  BRA    23E0
....................    if (UIR)  
2364:  MOVF   F68,F
2366:  BZ    23E0
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
2368:  BTFSS  F68.2
236A:  BRA    2374
236C:  BTFSS  F69.2
236E:  BRA    2374
2370:  GOTO   184A
....................  
....................       if (UCON_SUSPND) return; 
2374:  BTFSS  F6D.1
2376:  BRA    237A
2378:  BRA    23E0
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
237A:  BTFSS  F68.5
237C:  BRA    2386
237E:  BTFSS  F69.5
2380:  BRA    2386
2382:  GOTO   187A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
2386:  BTFSS  F68.1
2388:  BRA    2392
238A:  BTFSS  F69.1
238C:  BRA    2392
238E:  GOTO   1888
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
2392:  BTFSS  F68.0
2394:  BRA    239E
2396:  BTFSS  F69.0
2398:  BRA    239E
239A:  GOTO   198E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
239E:  BTFSS  F68.4
23A0:  BRA    23AA
23A2:  BTFSS  F69.4
23A4:  BRA    23AA
23A6:  GOTO   19BA
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
23AA:  BTFSS  F68.6
23AC:  BRA    23B6
23AE:  BTFSS  F69.6
23B0:  BRA    23B6
23B2:  GOTO   19C4
....................  
....................       TRNAttempts = 0; 
23B6:  MOVLB  3
23B8:  CLRF   xE9
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
23BA:  BTFSS  F68.3
23BC:  BRA    23D2
23BE:  BTFSS  F69.3
23C0:  BRA    23D2
....................          { 
....................             USTATCopy = U1STAT; 
23C2:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
23C6:  MOVLB  0
23C8:  CALL   0004
....................             usb_isr_tok_dne(); 
23CC:  BRA    21E2
....................          } 
....................          else 
23CE:  BRA    23D4
23D0:  MOVLB  3
....................             break; 
23D2:  BRA    23DE
....................       } while (TRNAttempts++ < 4); 
23D4:  MOVLB  3
23D6:  MOVF   xE9,W
23D8:  INCF   xE9,F
23DA:  SUBLW  03
23DC:  BC    23BA
23DE:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
23E0:  GOTO   0060
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
19C4:  BCF    F68.6
.................... } 
19C6:  GOTO   23B6 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
198E:  CLRF   F6A
....................    UIR = 0; 
1990:  CLRF   F68
....................    UEIE = 0x9F; 
1992:  MOVLW  9F
1994:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
1996:  MOVLW  3D
1998:  MOVWF  F69
....................  
....................    UADDR = 0; 
199A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
199C:  RCALL  1948
....................     
....................    usb_token_reset(); 
199E:  RCALL  1966
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
19A0:  MOVLW  16
19A2:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
19A4:  BTFSS  F68.3
19A6:  BRA    19AE
....................       usb_clear_trn(); 
19A8:  CALL   0004
....................    } 
19AC:  BRA    19A4
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
19AE:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
19B0:  RCALL  185A
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
19B2:  MOVLW  03
19B4:  MOVWF  1C
.................... } 
19B6:  GOTO   239E (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
185A:  MOVLW  40
185C:  MOVLB  4
185E:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
1860:  MOVLW  04
1862:  MOVWF  x03
1864:  MOVLW  10
1866:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
1868:  MOVLW  88
186A:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
186C:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
186E:  MOVLW  04
1870:  MOVWF  x07
1872:  MOVLW  50
1874:  MOVWF  x06
.................... } 
1876:  MOVLB  0
1878:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
1888:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
188A:  BCF    F68.1
.................... } 
188C:  GOTO   2392 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
19BA:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
19BC:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
19BE:  BSF    F6D.1
.................... } 
19C0:  GOTO   23AA (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
184A:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
184C:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
184E:  BTFSS  F68.2
1850:  BRA    1856
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
1852:  BCF    F68.2
....................    } 
1854:  BRA    184E
.................... } 
1856:  GOTO   2374 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
187A:  BTFSS  F70.0
187C:  BRA    1882
....................    { 
....................       usb_init_ep0_setup(); 
187E:  RCALL  185A
....................       bit_clear(UEP(0), 0); 
1880:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
1882:  BCF    F68.5
.................... } 
1884:  GOTO   2386 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
19CA:  MOVFF  3EF,1D
19CE:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
19D0:  MOVLW  FF
19D2:  MOVWF  1D
19D4:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
21E2:  RRCF   1B,W
21E4:  MOVLB  3
21E6:  MOVWF  xEA
21E8:  RRCF   xEA,F
21EA:  RRCF   xEA,F
21EC:  MOVLW  1F
21EE:  ANDWF  xEA,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
21F0:  MOVF   1B,F
21F2:  BNZ   2292
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
21F4:  MOVLB  4
21F6:  MOVF   x00,W
21F8:  ANDLW  3C
21FA:  MOVLB  3
21FC:  MOVWF  xEB
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
21FE:  MOVLW  43
2200:  MOVLB  4
2202:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
2204:  MOVLB  3
2206:  MOVF   xEB,W
2208:  SUBLW  34
220A:  BNZ   2256
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
220C:  MOVLB  4
220E:  MOVF   x04,W
2210:  ANDLW  80
2212:  BZ    2216
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
2214:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
2216:  MOVLB  0
2218:  BRA    1F78
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
221A:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
221C:  INCFSZ 1D,W
221E:  BRA    222E
....................             usb_flush_out(0, USB_DTS_STALL); 
2220:  MOVLB  3
2222:  CLRF   xEC
2224:  MOVLW  03
2226:  MOVWF  xED
2228:  MOVLB  0
222A:  RCALL  1FA4
....................          else  
222C:  BRA    2252
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
222E:  MOVLB  3
2230:  CLRF   xEC
2232:  MOVLW  02
2234:  MOVWF  xED
2236:  MOVLB  0
2238:  RCALL  1FA4
....................             if (__setup_0_tx_size != 0xFE) 
223A:  MOVF   1D,W
223C:  SUBLW  FE
223E:  BZ    2252
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
2240:  MOVLB  3
2242:  CLRF   xEC
2244:  CLRF   xEE
2246:  MOVFF  1D,3ED
224A:  MOVLW  04
224C:  MOVWF  xEF
224E:  MOVLB  0
2250:  RCALL  20B2
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
2252:  BRA    228E
2254:  MOVLB  3
2256:  MOVF   xEB,W
2258:  SUBLW  04
225A:  BNZ   2290
....................       { 
....................          usb_isr_tok_out_dne(0); 
225C:  CLRF   xEC
225E:  MOVLB  0
2260:  RCALL  218E
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
2262:  MOVLB  3
2264:  CLRF   xEC
2266:  MOVLW  02
2268:  MOVWF  xED
226A:  MOVLB  0
226C:  RCALL  1FA4
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
226E:  MOVF   1D,W
2270:  SUBLW  FE
2272:  BZ    228C
2274:  INCFSZ 1D,W
2276:  BRA    227A
2278:  BRA    228C
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
227A:  MOVLB  3
227C:  CLRF   xEC
227E:  CLRF   xEE
2280:  MOVFF  1D,3ED
2284:  MOVLW  01
2286:  MOVWF  xEF
2288:  MOVLB  0
228A:  RCALL  20B2
....................          } 
....................       } 
....................       else 
228C:  BRA    228E
228E:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
2290:  BRA    2356
2292:  MOVF   1B,W
2294:  SUBLW  04
2296:  BNZ   22C8
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
2298:  MOVLW  43
229A:  MOVLB  4
229C:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
229E:  MOVLW  FF
22A0:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
22A2:  MOVLB  3
22A4:  CLRF   xEC
22A6:  MOVLB  0
22A8:  RCALL  21C0
....................       if (__setup_0_tx_size!=0xFF) 
22AA:  INCFSZ 1D,W
22AC:  BRA    22B0
22AE:  BRA    22C4
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
22B0:  MOVLB  3
22B2:  CLRF   xEC
22B4:  CLRF   xEE
22B6:  MOVFF  1D,3ED
22BA:  MOVLW  02
22BC:  MOVWF  xEF
22BE:  MOVLB  0
22C0:  RCALL  20B2
....................       else 
22C2:  BRA    22C4
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
22C4:  BRA    2354
22C6:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
22C8:  BTFSC  1B.2
22CA:  BRA    2306
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
22CC:  MOVF   xEA,W
22CE:  MULLW  08
22D0:  MOVF   FF3,W
22D2:  CLRF   xED
22D4:  MOVWF  01
22D6:  MOVLW  04
22D8:  ADDWF  xED,W
22DA:  MOVWF  03
22DC:  MOVF   xEA,W
22DE:  MULLW  08
22E0:  MOVF   FF3,W
22E2:  CLRF   xEF
22E4:  MOVWF  FE9
22E6:  MOVLW  04
22E8:  ADDWF  xEF,W
22EA:  MOVWF  FEA
22EC:  MOVF   FEF,W
22EE:  ANDLW  43
22F0:  MOVFF  03,FEA
22F4:  MOVFF  01,FE9
22F8:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
22FA:  MOVFF  3EA,3EC
22FE:  MOVLB  0
2300:  RCALL  218E
....................       } 
....................       else  
2302:  BRA    2354
2304:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
2306:  MOVF   xEA,W
2308:  MULLW  08
230A:  MOVF   FF3,W
230C:  CLRF   xED
230E:  MOVWF  xEC
2310:  MOVLW  04
2312:  ADDWF  xEC,F
2314:  MOVLW  00
2316:  ADDWFC xED,F
2318:  MOVFF  3EC,01
231C:  MOVLW  04
231E:  ADDWF  xED,W
2320:  MOVWF  03
2322:  MOVF   xEA,W
2324:  MULLW  08
2326:  MOVF   FF3,W
2328:  CLRF   xEF
232A:  MOVWF  xEE
232C:  MOVLW  04
232E:  ADDWF  xEE,F
2330:  MOVLW  00
2332:  ADDWFC xEF,F
2334:  MOVFF  3EE,FE9
2338:  MOVLW  04
233A:  ADDWF  xEF,W
233C:  MOVWF  FEA
233E:  MOVF   FEF,W
2340:  ANDLW  43
2342:  MOVFF  03,FEA
2346:  MOVFF  3EC,FE9
234A:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
234C:  MOVFF  3EA,3EC
2350:  MOVLB  0
2352:  RCALL  21C0
2354:  MOVLB  3
....................       } 
....................    } 
.................... } 
2356:  MOVLB  0
2358:  GOTO   23CE (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
3AB6:  MOVF   18,W
3AB8:  MOVWF  01
.................... } 
3ABA:  GOTO   63AE (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
1966:  MOVLB  3
1968:  CLRF   xEA
196A:  MOVF   xEA,F
196C:  BNZ   1982
....................       USB_Interface[i] = 0;   //reset each interface to default 
196E:  CLRF   03
1970:  MOVF   xEA,W
1972:  ADDLW  21
1974:  MOVWF  FE9
1976:  MOVLW  00
1978:  ADDWFC 03,W
197A:  MOVWF  FEA
197C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
197E:  INCF   xEA,F
1980:  BRA    196A
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
1982:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
1984:  MOVLW  01
1986:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
1988:  CLRF   17
.................... } 
198A:  MOVLB  0
198C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1890:  MOVLB  3
1892:  BCF    xF7.0
1894:  BTFSC  xF6.7
1896:  BSF    xF7.0
....................     
....................    endpoint &= 0x7F; 
1898:  BCF    xF6.7
....................     
....................    if (endpoint > 16) 
189A:  MOVF   xF6,W
189C:  SUBLW  10
189E:  BC    18A6
....................       return(FALSE); 
18A0:  MOVLW  00
18A2:  MOVWF  01
18A4:  BRA    18F0
....................     
....................    if (direction) { //IN 
18A6:  BTFSS  xF7.0
18A8:  BRA    18CE
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
18AA:  CLRF   03
18AC:  MOVF   xF6,W
18AE:  MOVFF  FF2,3F8
18B2:  BCF    FF2.7
18B4:  MOVLB  0
18B6:  RCALL  172A
18B8:  MOVLB  3
18BA:  BTFSC  xF8.7
18BC:  BSF    FF2.7
18BE:  SUBLW  FF
18C0:  BNZ   18C6
18C2:  MOVLW  00
18C4:  BRA    18C8
18C6:  MOVLW  01
18C8:  MOVWF  01
18CA:  BRA    18F0
....................    } 
....................    else {   //OUT 
18CC:  BRA    18F0
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
18CE:  CLRF   03
18D0:  MOVF   xF6,W
18D2:  MOVFF  FF2,3F8
18D6:  BCF    FF2.7
18D8:  MOVLB  0
18DA:  RCALL  172A
18DC:  MOVLB  3
18DE:  BTFSC  xF8.7
18E0:  BSF    FF2.7
18E2:  SUBLW  FF
18E4:  BNZ   18EA
18E6:  MOVLW  00
18E8:  BRA    18EC
18EA:  MOVLW  01
18EC:  MOVWF  01
18EE:  BRA    18F0
....................    } 
.................... } 
18F0:  MOVLB  0
18F2:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
21C0:  MOVLB  3
21C2:  MOVF   xEC,F
21C4:  BNZ   21DE
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
21C6:  DECFSZ 17,W
21C8:  BRA    21D2
21CA:  MOVLB  0
21CC:  RCALL  19D6
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
21CE:  BRA    21DC
21D0:  MOVLB  3
21D2:  MOVF   17,W
21D4:  SUBLW  02
21D6:  BNZ   21DE
21D8:  MOVLB  0
21DA:  BRA    21B2
21DC:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
21DE:  MOVLB  0
21E0:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
218E:  MOVLB  3
2190:  MOVF   xEC,F
2192:  BNZ   2194
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
2194:  MOVLB  0
2196:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
1F78:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
1F7A:  MOVLB  4
1F7C:  MOVF   x10,W
1F7E:  ANDLW  7F
1F80:  XORLW  00
1F82:  MOVLB  0
1F84:  BZ    1F90
1F86:  XORLW  01
1F88:  BZ    1F94
1F8A:  XORLW  03
1F8C:  BZ    1F98
1F8E:  BRA    1F9C
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
1F90:  BRA    1CC0
....................          break; 
1F92:  BRA    1FA0
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
1F94:  BRA    1D78
....................          break; 
1F96:  BRA    1FA0
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
1F98:  BRA    1F0E
....................          break; 
1F9A:  BRA    1FA0
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
1F9C:  RCALL  19D0
....................          break; 
1F9E:  BRA    1FA0
....................    } 
.................... } 
1FA0:  GOTO   221A (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
1CC0:  MOVLB  4
1CC2:  MOVF   x11,W
1CC4:  XORLW  00
1CC6:  MOVLB  0
1CC8:  BZ    1CE4
1CCA:  XORLW  01
1CCC:  BZ    1CF8
1CCE:  XORLW  02
1CD0:  BZ    1D12
1CD2:  XORLW  06
1CD4:  BZ    1D2A
1CD6:  XORLW  03
1CD8:  BZ    1D3C
1CDA:  XORLW  0E
1CDC:  BZ    1D40
1CDE:  XORLW  01
1CE0:  BZ    1D50
1CE2:  BRA    1D70
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
1CE4:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
1CE8:  MOVLB  4
1CEA:  CLRF   x51
....................             usb_request_send_response(2); 
1CEC:  MOVLW  02
1CEE:  MOVLB  3
1CF0:  MOVWF  xEF
1CF2:  MOVLB  0
1CF4:  RCALL  19CA
....................             break; 
1CF6:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1CF8:  MOVLB  4
1CFA:  DECFSZ x12,W
1CFC:  BRA    1D0C
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
1CFE:  MOVLW  01
1D00:  ANDWF  19,F
....................                usb_put_0len_0(); 
1D02:  MOVLB  3
1D04:  CLRF   xEF
1D06:  MOVLB  0
1D08:  RCALL  19CA
....................             } 
....................             else 
1D0A:  BRA    1D10
....................                usb_request_stall(); 
1D0C:  MOVLB  0
1D0E:  RCALL  19D0
....................             break; 
1D10:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1D12:  MOVLB  4
1D14:  DECFSZ x12,W
1D16:  BRA    1D24
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
1D18:  BSF    19.1
....................                usb_put_0len_0(); 
1D1A:  MOVLB  3
1D1C:  CLRF   xEF
1D1E:  MOVLB  0
1D20:  RCALL  19CA
....................             } 
....................             else 
1D22:  BRA    1D28
....................                usb_request_stall(); 
1D24:  MOVLB  0
1D26:  RCALL  19D0
....................             break; 
1D28:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
1D2A:  MOVLW  02
1D2C:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
1D2E:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
1D32:  MOVLB  3
1D34:  CLRF   xEF
1D36:  MOVLB  0
1D38:  RCALL  19CA
....................             break; 
1D3A:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
1D3C:  BRA    1A70
....................             break; 
1D3E:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
1D40:  MOVFF  18,450
....................             usb_request_send_response(1); 
1D44:  MOVLW  01
1D46:  MOVLB  3
1D48:  MOVWF  xEF
1D4A:  MOVLB  0
1D4C:  RCALL  19CA
....................             break; 
1D4E:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
1D50:  MOVLB  4
1D52:  MOVF   x12,W
1D54:  SUBLW  01
1D56:  BNC   1D6C
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
1D58:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
1D5C:  MOVFF  412,3EC
1D60:  MOVLB  0
1D62:  BRA    1AEE
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
1D64:  MOVLB  3
1D66:  CLRF   xEF
1D68:  MOVLB  0
1D6A:  RCALL  19CA
....................             } 
....................             break; 
1D6C:  MOVLB  0
1D6E:  BRA    1D74
....................  
....................       default: 
....................             usb_request_stall(); 
1D70:  RCALL  19D0
....................             break; 
1D72:  BRA    1D74
....................    } 
.................... } 
1D74:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
1D78:  MOVFF  18,3EC
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
1D7C:  MOVLB  4
1D7E:  MOVF   x11,W
1D80:  XORLW  00
1D82:  MOVLB  0
1D84:  BZ    1D90
1D86:  XORLW  0A
1D88:  BZ    1DA2
1D8A:  XORLW  01
1D8C:  BZ    1DF0
1D8E:  BRA    1E1A
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
1D90:  MOVLB  4
1D92:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
1D94:  CLRF   x51
....................             usb_request_send_response(2); 
1D96:  MOVLW  02
1D98:  MOVLB  3
1D9A:  MOVWF  xEF
1D9C:  MOVLB  0
1D9E:  RCALL  19CA
....................             break; 
1DA0:  BRA    1E1E
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
1DA2:  MOVLB  3
1DA4:  MOVF   xEC,F
1DA6:  BZ    1DEA
1DA8:  MOVLW  01
1DAA:  SUBWF  xEC,W
1DAC:  CLRF   03
1DAE:  MOVFF  FF2,3ED
1DB2:  BCF    FF2.7
1DB4:  MOVLB  0
1DB6:  RCALL  17BC
1DB8:  MOVLB  3
1DBA:  BTFSC  xED.7
1DBC:  BSF    FF2.7
1DBE:  MOVWF  01
1DC0:  MOVLB  4
1DC2:  SUBWF  x14,W
1DC4:  BTFSS  FD8.0
1DC6:  BRA    1DCC
1DC8:  MOVLB  3
1DCA:  BRA    1DEA
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
1DCC:  CLRF   03
1DCE:  MOVF   x14,W
1DD0:  ADDLW  21
1DD2:  MOVWF  FE9
1DD4:  MOVLW  00
1DD6:  ADDWFC 03,W
1DD8:  MOVWF  FEA
1DDA:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
1DDE:  MOVLW  01
1DE0:  MOVLB  3
1DE2:  MOVWF  xEF
1DE4:  MOVLB  0
1DE6:  RCALL  19CA
....................             } 
....................             else 
1DE8:  BRA    1DEE
....................                usb_request_stall(); 
1DEA:  MOVLB  0
1DEC:  RCALL  19D0
....................             break; 
1DEE:  BRA    1E1E
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
1DF0:  MOVLB  3
1DF2:  MOVF   xEC,F
1DF4:  BZ    1E14
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
1DF6:  CLRF   03
1DF8:  MOVLB  4
1DFA:  MOVF   x14,W
1DFC:  ADDLW  21
1DFE:  MOVWF  FE9
1E00:  MOVLW  00
1E02:  ADDWFC 03,W
1E04:  MOVWF  FEA
1E06:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
1E0A:  MOVLB  3
1E0C:  CLRF   xEF
1E0E:  MOVLB  0
1E10:  RCALL  19CA
....................             } 
....................             else 
1E12:  BRA    1E18
....................                usb_request_stall(); 
1E14:  MOVLB  0
1E16:  RCALL  19D0
....................             break; 
1E18:  BRA    1E1E
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
1E1A:  RCALL  19D0
....................             break; 
1E1C:  BRA    1E1E
....................    } 
.................... } 
1E1E:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
1F0E:  MOVFF  414,3F6
1F12:  RCALL  1890
1F14:  MOVF   01,F
1F16:  BZ    1F74
....................       switch(usb_ep0_rx_buffer[1]) { 
1F18:  MOVLB  4
1F1A:  MOVF   x11,W
1F1C:  XORLW  01
1F1E:  MOVLB  0
1F20:  BZ    1F2C
1F22:  XORLW  02
1F24:  BZ    1F3C
1F26:  XORLW  03
1F28:  BZ    1F4C
1F2A:  BRA    1F70
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
1F2C:  MOVFF  414,3EC
1F30:  BRA    1E22
....................                usb_put_0len_0(); 
1F32:  MOVLB  3
1F34:  CLRF   xEF
1F36:  MOVLB  0
1F38:  RCALL  19CA
....................                break; 
1F3A:  BRA    1F74
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
1F3C:  MOVFF  414,3EC
1F40:  BRA    1E6A
....................                      usb_put_0len_0(); 
1F42:  MOVLB  3
1F44:  CLRF   xEF
1F46:  MOVLB  0
1F48:  RCALL  19CA
....................                      break; 
1F4A:  BRA    1F74
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
1F4C:  MOVLB  4
1F4E:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
1F50:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
1F52:  MOVFF  414,3EC
1F56:  MOVLB  0
1F58:  BRA    1EB4
1F5A:  MOVF   01,F
1F5C:  BZ    1F64
....................                   usb_ep0_tx_buffer[0]=1; 
1F5E:  MOVLW  01
1F60:  MOVLB  4
1F62:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
1F64:  MOVLW  02
1F66:  MOVLB  3
1F68:  MOVWF  xEF
1F6A:  MOVLB  0
1F6C:  RCALL  19CA
....................                break; 
1F6E:  BRA    1F74
....................  
....................          default: 
....................             usb_request_stall(); 
1F70:  RCALL  19D0
....................             break; 
1F72:  BRA    1F74
....................       } 
....................    } 
.................... } 
1F74:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
1A70:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
1A72:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
1A74:  MOVLB  4
1A76:  MOVF   x13,W
1A78:  XORLW  01
1A7A:  MOVLB  0
1A7C:  BZ    1A88
1A7E:  XORLW  03
1A80:  BZ    1A92
1A82:  XORLW  01
1A84:  BZ    1A98
1A86:  BRA    1ACE
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
1A88:  MOVLW  12
1A8A:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
1A8C:  MOVLW  03
1A8E:  MOVWF  1A
....................             break; 
1A90:  BRA    1AD2
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
1A92:  MOVLW  20
1A94:  MOVWF  20
....................             break; 
1A96:  BRA    1AD2
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
1A98:  MOVLW  02
1A9A:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
1A9C:  CLRF   03
1A9E:  MOVLB  4
1AA0:  MOVF   x12,W
1AA2:  MOVFF  FF2,3EC
1AA6:  BCF    FF2.7
1AA8:  MOVLB  0
1AAA:  RCALL  17F0
1AAC:  MOVLB  3
1AAE:  BTFSC  xEC.7
1AB0:  BSF    FF2.7
1AB2:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
1AB4:  CLRF   03
1AB6:  MOVF   1F,W
1AB8:  MOVFF  FF2,3EC
1ABC:  BCF    FF2.7
1ABE:  MOVLB  0
1AC0:  RCALL  1804
1AC2:  MOVLB  3
1AC4:  BTFSC  xEC.7
1AC6:  BSF    FF2.7
1AC8:  MOVWF  20
....................             break; 
1ACA:  MOVLB  0
1ACC:  BRA    1AD2
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
1ACE:  RCALL  19D0
....................             return; 
1AD0:  BRA    1AEA
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
1AD2:  MOVLB  4
1AD4:  MOVF   x17,F
1AD6:  BNZ   1AE2
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
1AD8:  MOVF   20,W
1ADA:  SUBWF  x16,W
1ADC:  BC    1AE2
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
1ADE:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
1AE2:  MOVLW  01
1AE4:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
1AE6:  MOVLB  0
1AE8:  RCALL  19D6
.................... } 
1AEA:  GOTO   1D74 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
21B2:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
21B4:  CLRF   17
....................    usb_set_address(USB_address_pending); 
21B6:  MOVFF  1E,3ED
21BA:  BRA    2198
....................    #endif 
.................... } 
21BC:  GOTO   21DC (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
19D6:  MOVLB  3
19D8:  CLRF   xED
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
19DA:  MOVF   20,F
19DC:  BZ    1A5A
19DE:  MOVF   xED,W
19E0:  SUBLW  3F
19E2:  BNC   1A5A
....................       switch(USB_stack_status.getdesc_type) { 
19E4:  MOVF   1A,W
19E6:  XORLW  00
19E8:  MOVLB  0
19EA:  BZ    19F6
19EC:  XORLW  02
19EE:  BZ    1A0E
19F0:  XORLW  01
19F2:  BZ    1A26
19F4:  BRA    1A3E
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
19F6:  CLRF   03
19F8:  MOVF   1F,W
19FA:  MOVFF  FF2,3EF
19FE:  BCF    FF2.7
1A00:  RCALL  178C
1A02:  MOVLB  3
1A04:  BTFSC  xEF.7
1A06:  BSF    FF2.7
1A08:  MOVWF  xEE
....................             break; 
1A0A:  MOVLB  0
1A0C:  BRA    1A3E
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
1A0E:  CLRF   03
1A10:  MOVF   1F,W
1A12:  MOVFF  FF2,3EF
1A16:  BCF    FF2.7
1A18:  RCALL  1804
1A1A:  MOVLB  3
1A1C:  BTFSC  xEF.7
1A1E:  BSF    FF2.7
1A20:  MOVWF  xEE
....................             break; 
1A22:  MOVLB  0
1A24:  BRA    1A3E
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
1A26:  CLRF   03
1A28:  MOVF   1F,W
1A2A:  MOVFF  FF2,3EF
1A2E:  BCF    FF2.7
1A30:  RCALL  17CE
1A32:  MOVLB  3
1A34:  BTFSC  xEF.7
1A36:  BSF    FF2.7
1A38:  MOVWF  xEE
....................             break; 
1A3A:  MOVLB  0
1A3C:  BRA    1A3E
....................       } 
....................       usb_getdesc_ptr++; 
1A3E:  INCF   1F,F
....................       usb_getdesc_len--; 
1A40:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
1A42:  MOVLB  3
1A44:  MOVF   xED,W
1A46:  INCF   xED,F
1A48:  CLRF   03
1A4A:  ADDLW  50
1A4C:  MOVWF  FE9
1A4E:  MOVLW  04
1A50:  ADDWFC 03,W
1A52:  MOVWF  FEA
1A54:  MOVFF  3EE,FEF
....................    } 
1A58:  BRA    19DA
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
1A5A:  MOVF   20,F
1A5C:  BNZ   1A66
1A5E:  MOVF   xED,W
1A60:  SUBLW  40
1A62:  BZ    1A66
....................          USB_stack_status.dev_req = NONE; 
1A64:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
1A66:  MOVFF  3ED,3EF
1A6A:  MOVLB  0
1A6C:  RCALL  19CA
.................... } 
1A6E:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32; 
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxbuf[Lenbuf]; 
....................  
.................... char  JP[] = "JP Inglobal", Autoclave[] = "Autoclave Vertical",tiempo_est[]="T est=",tiempo_sec[]="T sec="; 
.................... char  Lts[] = "80 Litros",Contra[] = "Cambio Contrasena",Fle[] = ">",Tempe[] = "Iniciar Proceso",Param[] = "Ciclo"; 
.................... char  Proc[] = "Proceso",Textil[]= "Textil-Instrumental", Calentando[]="Calentando",Level[]="Nivel"; 
.................... char  Caucho[]= "Caucho",Instrumental[]= "Instrumental Suave", Esterilizando[]="Esterilizando",Secando[]="Secando"; 
.................... char  Liquidos[]= "Liquidos", Vacio[]=":",Creado[]= "Libre", T40[]= "T:134°C",Test40[]= "t_est:5m", Tsec40[]= "t_sec:15m",C[]="C"; 
.................... char  TC[]= "T:121°C",TestC[]= "t_est:25m",TsecC[]= "t_sec:15m", TI[]= "T:121°C",TestI[]= "t_est:20m",Desfogue_Lento[]="Desfogue Lento"; 
.................... char  TsecI[]= "t_sec:N/A",TL[]= "T:121°C",TestL[]= "t_est:20m",TsecL[]= "t_sec:N/A",ok[]= "OK", T[]="Temperatura"; 
.................... char  T_esterilizacion[]="T Esterilizacion",T_secado[]="T Secado",Desfogue[]="Desfogue Rapido",Si[]="Si",Noo[]="No",Finalizado[]="Finalizado"; 
.................... char  Parada[]="Parada", Emergencia[]="Emergencia"; 
.................... int8 Menu=16, n_opcionH=32,n_opcionL=16,unidad=11,Flecha=16,Flecha1=3,Flecha2=16, nMenuL=16, nMenuH=32, Flx=36, Fly=8,Liquid=0; 
.................... short estadot40=0,estadoc=0,estadoi=0,estadol=0,estadop=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,emergency=0; 
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int16 tiempos=0,tiempos3=0,m=0,tiempoctrl=0; 
.................... short tiempo_esterilizacion=0,tiempo_secado=0,fin_ciclo=0,i=0,n=0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0, est=0; 
.................... int Setpoint=121,h=0,l=0,Nivel=0,Minutos=15,Open=80,Ajuste=0,Ajusten=0,R2=0; 
.................... float V0=0.0,R1=997.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,desvio=2.0,d3=0.0; 
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................     
....................    if(x==1){ 
*
317E:  MOVLB  3
3180:  DECFSZ xAF,W
3182:  BRA    3226
....................    for( i = 0 ; i < 64 ; i ++ ) 
3184:  CLRF   xB0
3186:  MOVF   xB0,W
3188:  SUBLW  3F
318A:  BNC   3226
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
318C:  CLRF   xB1
318E:  MOVF   xB1,W
3190:  SUBLW  0F
3192:  BNC   3222
....................       {     
....................          for(k=7;k>-1;k--) 
3194:  MOVLW  07
3196:  MOVWF  xB2
3198:  MOVF   xB2,W
319A:  XORLW  80
319C:  SUBLW  7F
319E:  BC    321E
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
31A0:  CLRF   xB4
31A2:  MOVFF  3B0,3B3
31A6:  CLRF   xB6
31A8:  MOVLW  10
31AA:  MOVWF  xB5
31AC:  MOVLB  0
31AE:  RCALL  315C
31B0:  MOVFF  02,3B4
31B4:  MOVFF  01,3B3
31B8:  MOVLB  3
31BA:  MOVF   xB1,W
31BC:  ADDWF  01,W
31BE:  MOVWF  01
31C0:  MOVLW  00
31C2:  ADDWFC 02,W
31C4:  MOVWF  03
31C6:  MOVF   01,W
31C8:  MOVFF  FF2,3B3
31CC:  BCF    FF2.7
31CE:  MOVFF  03,FF7
31D2:  MOVLB  0
31D4:  CALL   02B2
31D8:  MOVLB  3
31DA:  BTFSC  xB3.7
31DC:  BSF    FF2.7
31DE:  MOVWF  xB3
31E0:  MOVLW  07
31E2:  BSF    FD8.0
31E4:  SUBFWB xB2,W
31E6:  MOVWF  xB4
31E8:  MOVFF  3B3,00
31EC:  MOVF   xB4,W
31EE:  MOVWF  01
31F0:  BZ    31FA
31F2:  BCF    FD8.0
31F4:  RRCF   00,F
31F6:  DECFSZ 01,F
31F8:  BRA    31F2
31FA:  BTFSS  00.0
31FC:  BRA    321A
....................                glcd_pixel( j*8+k,i, ON ); 
31FE:  MOVF   xB1,W
3200:  MULLW  08
3202:  MOVF   FF3,W
3204:  ADDWF  xB2,W
3206:  MOVWF  xB3
3208:  MOVWF  xE0
320A:  MOVFF  3B0,3E1
320E:  MOVLW  01
3210:  MOVWF  xE2
3212:  MOVLB  0
3214:  CALL   27B8
3218:  MOVLB  3
....................          }   
321A:  DECF   xB2,F
321C:  BRA    3198
....................       } 
321E:  INCF   xB1,F
3220:  BRA    318E
....................    } 
3222:  INCF   xB0,F
3224:  BRA    3186
....................    } 
....................     
....................    if(x==2){ 
3226:  MOVF   xAF,W
3228:  SUBLW  02
322A:  BNZ   32CE
....................    for( i = 0 ; i < 64 ; i ++ ) 
322C:  CLRF   xB0
322E:  MOVF   xB0,W
3230:  SUBLW  3F
3232:  BNC   32CE
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3234:  CLRF   xB1
3236:  MOVF   xB1,W
3238:  SUBLW  0F
323A:  BNC   32CA
....................       {     
....................          for(k=7;k>-1;k--) 
323C:  MOVLW  07
323E:  MOVWF  xB2
3240:  MOVF   xB2,W
3242:  XORLW  80
3244:  SUBLW  7F
3246:  BC    32C6
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
3248:  CLRF   xB4
324A:  MOVFF  3B0,3B3
324E:  CLRF   xB6
3250:  MOVLW  10
3252:  MOVWF  xB5
3254:  MOVLB  0
3256:  RCALL  315C
3258:  MOVFF  02,3B4
325C:  MOVFF  01,3B3
3260:  MOVLB  3
3262:  MOVF   xB1,W
3264:  ADDWF  01,W
3266:  MOVWF  01
3268:  MOVLW  00
326A:  ADDWFC 02,W
326C:  MOVWF  03
326E:  MOVF   01,W
3270:  MOVFF  FF2,3B3
3274:  BCF    FF2.7
3276:  MOVFF  03,FF7
327A:  MOVLB  0
327C:  CALL   06CA
3280:  MOVLB  3
3282:  BTFSC  xB3.7
3284:  BSF    FF2.7
3286:  MOVWF  xB3
3288:  MOVLW  07
328A:  BSF    FD8.0
328C:  SUBFWB xB2,W
328E:  MOVWF  xB4
3290:  MOVFF  3B3,00
3294:  MOVF   xB4,W
3296:  MOVWF  01
3298:  BZ    32A2
329A:  BCF    FD8.0
329C:  RRCF   00,F
329E:  DECFSZ 01,F
32A0:  BRA    329A
32A2:  BTFSS  00.0
32A4:  BRA    32C2
....................                glcd_pixel( j*8+k,i, ON ); 
32A6:  MOVF   xB1,W
32A8:  MULLW  08
32AA:  MOVF   FF3,W
32AC:  ADDWF  xB2,W
32AE:  MOVWF  xB3
32B0:  MOVWF  xE0
32B2:  MOVFF  3B0,3E1
32B6:  MOVLW  01
32B8:  MOVWF  xE2
32BA:  MOVLB  0
32BC:  CALL   27B8
32C0:  MOVLB  3
....................          }   
32C2:  DECF   xB2,F
32C4:  BRA    3240
....................       } 
32C6:  INCF   xB1,F
32C8:  BRA    3236
....................    } 
32CA:  INCF   xB0,F
32CC:  BRA    322E
....................    } 
....................     
....................    if(x==3){ 
32CE:  MOVF   xAF,W
32D0:  SUBLW  03
32D2:  BNZ   3376
....................    for( i = 0 ; i < 64 ; i ++ ) 
32D4:  CLRF   xB0
32D6:  MOVF   xB0,W
32D8:  SUBLW  3F
32DA:  BNC   3376
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
32DC:  CLRF   xB1
32DE:  MOVF   xB1,W
32E0:  SUBLW  0F
32E2:  BNC   3372
....................       {     
....................          for(k=7;k>-1;k--) 
32E4:  MOVLW  07
32E6:  MOVWF  xB2
32E8:  MOVF   xB2,W
32EA:  XORLW  80
32EC:  SUBLW  7F
32EE:  BC    336E
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
32F0:  CLRF   xB4
32F2:  MOVFF  3B0,3B3
32F6:  CLRF   xB6
32F8:  MOVLW  10
32FA:  MOVWF  xB5
32FC:  MOVLB  0
32FE:  RCALL  315C
3300:  MOVFF  02,3B4
3304:  MOVFF  01,3B3
3308:  MOVLB  3
330A:  MOVF   xB1,W
330C:  ADDWF  01,W
330E:  MOVWF  01
3310:  MOVLW  00
3312:  ADDWFC 02,W
3314:  MOVWF  03
3316:  MOVF   01,W
3318:  MOVFF  FF2,3B3
331C:  BCF    FF2.7
331E:  MOVFF  03,FF7
3322:  MOVLB  0
3324:  CALL   0AE2
3328:  MOVLB  3
332A:  BTFSC  xB3.7
332C:  BSF    FF2.7
332E:  MOVWF  xB3
3330:  MOVLW  07
3332:  BSF    FD8.0
3334:  SUBFWB xB2,W
3336:  MOVWF  xB4
3338:  MOVFF  3B3,00
333C:  MOVF   xB4,W
333E:  MOVWF  01
3340:  BZ    334A
3342:  BCF    FD8.0
3344:  RRCF   00,F
3346:  DECFSZ 01,F
3348:  BRA    3342
334A:  BTFSS  00.0
334C:  BRA    336A
....................                glcd_pixel( j*8+k,i, ON ); 
334E:  MOVF   xB1,W
3350:  MULLW  08
3352:  MOVF   FF3,W
3354:  ADDWF  xB2,W
3356:  MOVWF  xB3
3358:  MOVWF  xE0
335A:  MOVFF  3B0,3E1
335E:  MOVLW  01
3360:  MOVWF  xE2
3362:  MOVLB  0
3364:  CALL   27B8
3368:  MOVLB  3
....................          }   
336A:  DECF   xB2,F
336C:  BRA    32E8
....................       } 
336E:  INCF   xB1,F
3370:  BRA    32DE
....................    } 
3372:  INCF   xB0,F
3374:  BRA    32D6
....................    } 
....................     
....................    if(x==4){ 
3376:  MOVF   xAF,W
3378:  SUBLW  04
337A:  BNZ   341E
....................    for( i = 0 ; i < 64 ; i ++ ) 
337C:  CLRF   xB0
337E:  MOVF   xB0,W
3380:  SUBLW  3F
3382:  BNC   341E
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3384:  CLRF   xB1
3386:  MOVF   xB1,W
3388:  SUBLW  0F
338A:  BNC   341A
....................       {     
....................          for(k=7;k>-1;k--) 
338C:  MOVLW  07
338E:  MOVWF  xB2
3390:  MOVF   xB2,W
3392:  XORLW  80
3394:  SUBLW  7F
3396:  BC    3416
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
3398:  CLRF   xB4
339A:  MOVFF  3B0,3B3
339E:  CLRF   xB6
33A0:  MOVLW  10
33A2:  MOVWF  xB5
33A4:  MOVLB  0
33A6:  RCALL  315C
33A8:  MOVFF  02,3B4
33AC:  MOVFF  01,3B3
33B0:  MOVLB  3
33B2:  MOVF   xB1,W
33B4:  ADDWF  01,W
33B6:  MOVWF  01
33B8:  MOVLW  00
33BA:  ADDWFC 02,W
33BC:  MOVWF  03
33BE:  MOVF   01,W
33C0:  MOVFF  FF2,3B3
33C4:  BCF    FF2.7
33C6:  MOVFF  03,FF7
33CA:  MOVLB  0
33CC:  CALL   0EFA
33D0:  MOVLB  3
33D2:  BTFSC  xB3.7
33D4:  BSF    FF2.7
33D6:  MOVWF  xB3
33D8:  MOVLW  07
33DA:  BSF    FD8.0
33DC:  SUBFWB xB2,W
33DE:  MOVWF  xB4
33E0:  MOVFF  3B3,00
33E4:  MOVF   xB4,W
33E6:  MOVWF  01
33E8:  BZ    33F2
33EA:  BCF    FD8.0
33EC:  RRCF   00,F
33EE:  DECFSZ 01,F
33F0:  BRA    33EA
33F2:  BTFSS  00.0
33F4:  BRA    3412
....................                glcd_pixel( j*8+k,i, ON ); 
33F6:  MOVF   xB1,W
33F8:  MULLW  08
33FA:  MOVF   FF3,W
33FC:  ADDWF  xB2,W
33FE:  MOVWF  xB3
3400:  MOVWF  xE0
3402:  MOVFF  3B0,3E1
3406:  MOVLW  01
3408:  MOVWF  xE2
340A:  MOVLB  0
340C:  CALL   27B8
3410:  MOVLB  3
....................          }   
3412:  DECF   xB2,F
3414:  BRA    3390
....................       } 
3416:  INCF   xB1,F
3418:  BRA    3386
....................    } 
341A:  INCF   xB0,F
341C:  BRA    337E
....................    } 
....................     
....................    if(x==5){ 
341E:  MOVF   xAF,W
3420:  SUBLW  05
3422:  BNZ   34C6
....................    for( i = 0 ; i < 64 ; i ++ ) 
3424:  CLRF   xB0
3426:  MOVF   xB0,W
3428:  SUBLW  3F
342A:  BNC   34C6
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
342C:  CLRF   xB1
342E:  MOVF   xB1,W
3430:  SUBLW  0F
3432:  BNC   34C2
....................       {     
....................          for(k=7;k>-1;k--) 
3434:  MOVLW  07
3436:  MOVWF  xB2
3438:  MOVF   xB2,W
343A:  XORLW  80
343C:  SUBLW  7F
343E:  BC    34BE
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
3440:  CLRF   xB4
3442:  MOVFF  3B0,3B3
3446:  CLRF   xB6
3448:  MOVLW  10
344A:  MOVWF  xB5
344C:  MOVLB  0
344E:  RCALL  315C
3450:  MOVFF  02,3B4
3454:  MOVFF  01,3B3
3458:  MOVLB  3
345A:  MOVF   xB1,W
345C:  ADDWF  01,W
345E:  MOVWF  01
3460:  MOVLW  00
3462:  ADDWFC 02,W
3464:  MOVWF  03
3466:  MOVF   01,W
3468:  MOVFF  FF2,3B3
346C:  BCF    FF2.7
346E:  MOVFF  03,FF7
3472:  MOVLB  0
3474:  CALL   1312
3478:  MOVLB  3
347A:  BTFSC  xB3.7
347C:  BSF    FF2.7
347E:  MOVWF  xB3
3480:  MOVLW  07
3482:  BSF    FD8.0
3484:  SUBFWB xB2,W
3486:  MOVWF  xB4
3488:  MOVFF  3B3,00
348C:  MOVF   xB4,W
348E:  MOVWF  01
3490:  BZ    349A
3492:  BCF    FD8.0
3494:  RRCF   00,F
3496:  DECFSZ 01,F
3498:  BRA    3492
349A:  BTFSS  00.0
349C:  BRA    34BA
....................                glcd_pixel( j*8+k,i, ON ); 
349E:  MOVF   xB1,W
34A0:  MULLW  08
34A2:  MOVF   FF3,W
34A4:  ADDWF  xB2,W
34A6:  MOVWF  xB3
34A8:  MOVWF  xE0
34AA:  MOVFF  3B0,3E1
34AE:  MOVLW  01
34B0:  MOVWF  xE2
34B2:  MOVLB  0
34B4:  CALL   27B8
34B8:  MOVLB  3
....................          }   
34BA:  DECF   xB2,F
34BC:  BRA    3438
....................       } 
34BE:  INCF   xB1,F
34C0:  BRA    342E
....................    } 
34C2:  INCF   xB0,F
34C4:  BRA    3426
....................    } 
.................... } 
34C6:  MOVLB  0
34C8:  RETLW  00
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................   if(x==1) 
*
3048:  MOVLB  3
304A:  DECFSZ xB0,W
304C:  BRA    3068
....................    {glcd_text57(7, y, Tempe, 1, ON);} 
304E:  MOVLW  07
3050:  MOVWF  xC3
3052:  MOVFF  3B1,3C4
3056:  CLRF   xC6
3058:  MOVLW  AD
305A:  MOVWF  xC5
305C:  MOVLW  01
305E:  MOVWF  xC7
3060:  MOVWF  xC8
3062:  MOVLB  0
3064:  RCALL  289A
3066:  MOVLB  3
....................    if(x==2) 
3068:  MOVF   xB0,W
306A:  SUBLW  02
306C:  BNZ   3088
....................    {glcd_text57(7, y, Param, 1, ON);} 
306E:  MOVLW  07
3070:  MOVWF  xC3
3072:  MOVFF  3B1,3C4
3076:  CLRF   xC6
3078:  MOVLW  BD
307A:  MOVWF  xC5
307C:  MOVLW  01
307E:  MOVWF  xC7
3080:  MOVWF  xC8
3082:  MOVLB  0
3084:  RCALL  289A
3086:  MOVLB  3
....................    if(x==3) 
3088:  MOVF   xB0,W
308A:  SUBLW  03
308C:  BNZ   30AA
....................    {glcd_text57(7, y, Contra, 1, ON);  } 
308E:  MOVLW  07
3090:  MOVWF  xC3
3092:  MOVFF  3B1,3C4
3096:  CLRF   xC6
3098:  MOVLW  99
309A:  MOVWF  xC5
309C:  MOVLW  01
309E:  MOVWF  xC7
30A0:  MOVWF  xC8
30A2:  MOVLB  0
30A4:  CALL   289A
30A8:  MOVLB  3
....................    if(x==4) 
30AA:  MOVF   xB0,W
30AC:  SUBLW  04
30AE:  BNZ   30CC
....................    {glcd_text57(7, y, Textil, 1, ON);  } 
30B0:  MOVLW  07
30B2:  MOVWF  xC3
30B4:  MOVFF  3B1,3C4
30B8:  CLRF   xC6
30BA:  MOVLW  CB
30BC:  MOVWF  xC5
30BE:  MOVLW  01
30C0:  MOVWF  xC7
30C2:  MOVWF  xC8
30C4:  MOVLB  0
30C6:  CALL   289A
30CA:  MOVLB  3
....................    if(x==5) 
30CC:  MOVF   xB0,W
30CE:  SUBLW  05
30D0:  BNZ   30EE
....................    {glcd_text57(7, y, Caucho, 1, ON);  } 
30D2:  MOVLW  07
30D4:  MOVWF  xC3
30D6:  MOVFF  3B1,3C4
30DA:  CLRF   xC6
30DC:  MOVLW  F0
30DE:  MOVWF  xC5
30E0:  MOVLW  01
30E2:  MOVWF  xC7
30E4:  MOVWF  xC8
30E6:  MOVLB  0
30E8:  CALL   289A
30EC:  MOVLB  3
....................    if(x==6) 
30EE:  MOVF   xB0,W
30F0:  SUBLW  06
30F2:  BNZ   3110
....................    {glcd_text57(7, y, Instrumental, 1, ON);  } 
30F4:  MOVLW  07
30F6:  MOVWF  xC3
30F8:  MOVFF  3B1,3C4
30FC:  CLRF   xC6
30FE:  MOVLW  F7
3100:  MOVWF  xC5
3102:  MOVLW  01
3104:  MOVWF  xC7
3106:  MOVWF  xC8
3108:  MOVLB  0
310A:  CALL   289A
310E:  MOVLB  3
....................    if(x==7) 
3110:  MOVF   xB0,W
3112:  SUBLW  07
3114:  BNZ   3134
....................    {glcd_text57(7, y, Liquidos, 1, ON);  } 
3116:  MOVLW  07
3118:  MOVWF  xC3
311A:  MOVFF  3B1,3C4
311E:  MOVLW  01
3120:  MOVWF  xC6
3122:  MOVLW  20
3124:  MOVWF  xC5
3126:  MOVLW  01
3128:  MOVWF  xC7
312A:  MOVWF  xC8
312C:  MOVLB  0
312E:  CALL   289A
3132:  MOVLB  3
....................    if(x==8) 
3134:  MOVF   xB0,W
3136:  SUBLW  08
3138:  BNZ   3158
....................    {glcd_text57(7, y, Creado, 1, ON);  } 
313A:  MOVLW  07
313C:  MOVWF  xC3
313E:  MOVFF  3B1,3C4
3142:  MOVLW  01
3144:  MOVWF  xC6
3146:  MOVLW  2B
3148:  MOVWF  xC5
314A:  MOVLW  01
314C:  MOVWF  xC7
314E:  MOVWF  xC8
3150:  MOVLB  0
3152:  CALL   289A
3156:  MOVLB  3
.................... } 
3158:  MOVLB  0
315A:  RETLW  00
....................   
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(36530);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
*
23E4:  MOVLW  8E
23E6:  MOVWF  FCF
23E8:  MOVLW  B2
23EA:  MOVWF  FCE
....................    tiempos++; 
23EC:  MOVLB  2
23EE:  INCF   x1B,F
23F0:  BTFSC  FD8.2
23F2:  INCF   x1C,F
....................    tiempos3++; 
23F4:  INCF   x1D,F
23F6:  BTFSC  FD8.2
23F8:  INCF   x1E,F
....................    tiempoctrl++; 
23FA:  INCF   x21,F
23FC:  BTFSC  FD8.2
23FE:  INCF   x22,F
....................     
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])) 
2400:  MOVF   x27,W
2402:  SUBWF  x23,W
2404:  BNZ   241A
2406:  MOVF   x28,W
2408:  SUBWF  x24,W
240A:  BNZ   241A
240C:  MOVF   x29,W
240E:  SUBWF  x25,W
2410:  BNZ   241A
2412:  MOVF   x2A,W
2414:  SUBWF  x26,W
2416:  BNZ   241A
....................    {tiempo_secado=1;} 
2418:  BSF    x1A.3
....................     
....................       if((Tsecado[0]==Tsecadop[0])&&(Tsecado[1]==Tsecadop[1])&&(Tsecado[2]==Tsecadop[2])&&(Tsecado[3]==Tsecadop[3]))// Si cumplio 
241A:  MOVF   x2F,W
241C:  SUBWF  x2B,W
241E:  BNZ   243A
2420:  MOVF   x30,W
2422:  SUBWF  x2C,W
2424:  BNZ   243A
2426:  MOVF   x31,W
2428:  SUBWF  x2D,W
242A:  BNZ   243A
242C:  MOVF   x32,W
242E:  SUBWF  x2E,W
2430:  BNZ   243A
....................       { 
....................          if(Liquid==0) 
2432:  MOVF   x18,F
2434:  BNZ   243A
....................          {tiempo_secado=0;fin_ciclo=1;}//tiempo de secado sin seleccionar ningun programa de desfogue lento, activa fin de ciclo. 
2436:  BCF    x1A.3
2438:  BSF    x1A.4
....................       } 
....................     
....................    if(tiempos3==20) 
243A:  MOVF   x1D,W
243C:  SUBLW  14
243E:  BNZ   244A
2440:  MOVF   x1E,F
2442:  BNZ   244A
....................    {tiempos3=0;Expulsa=1;} 
2444:  CLRF   x1E
2446:  CLRF   x1D
2448:  BSF    x33.0
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
244A:  MOVF   x1B,W
244C:  SUBLW  C8
244E:  BNZ   24D2
2450:  MOVF   x1C,F
2452:  BNZ   24D2
....................    {tiempos=0;Lectura=1; 
2454:  CLRF   x1C
2456:  CLRF   x1B
2458:  BSF    x1A.7
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
245A:  BTFSS  x1A.2
245C:  BRA    2496
....................       { 
....................                       
....................       Testerilizacion[0]++; 
245E:  INCF   x23,F
....................       if(Testerilizacion[0]>9) 
2460:  BTFSC  x23.7
2462:  BRA    246E
2464:  MOVF   x23,W
2466:  SUBLW  09
2468:  BC    246E
....................          {Testerilizacion[0]=0; 
246A:  CLRF   x23
....................           Testerilizacion[1]++;} 
246C:  INCF   x24,F
....................        if(Testerilizacion[1]>5) 
246E:  BTFSC  x24.7
2470:  BRA    247C
2472:  MOVF   x24,W
2474:  SUBLW  05
2476:  BC    247C
....................          {Testerilizacion[1]=0; 
2478:  CLRF   x24
....................           Testerilizacion[2]++;} 
247A:  INCF   x25,F
....................          if(Testerilizacion[2]>9) 
247C:  BTFSC  x25.7
247E:  BRA    248A
2480:  MOVF   x25,W
2482:  SUBLW  09
2484:  BC    248A
....................             {Testerilizacion[2]=0; 
2486:  CLRF   x25
....................              Testerilizacion[3]++;} 
2488:  INCF   x26,F
....................             if(Testerilizacion[3]>5) 
248A:  BTFSC  x26.7
248C:  BRA    2496
248E:  MOVF   x26,W
2490:  SUBLW  05
2492:  BC    2496
....................                {Testerilizacion[3]=0;} 
2494:  CLRF   x26
....................       }        
....................        
....................     if(tiempo_secado==1) 
2496:  BTFSS  x1A.3
2498:  BRA    24D2
....................       { 
....................                       
....................       Tsecado[0]++; 
249A:  INCF   x2B,F
....................       if(Tsecado[0]>9) 
249C:  BTFSC  x2B.7
249E:  BRA    24AA
24A0:  MOVF   x2B,W
24A2:  SUBLW  09
24A4:  BC    24AA
....................          {Tsecado[0]=0; 
24A6:  CLRF   x2B
....................           Tsecado[1]++;} 
24A8:  INCF   x2C,F
....................        if(Tsecado[1]>5) 
24AA:  BTFSC  x2C.7
24AC:  BRA    24B8
24AE:  MOVF   x2C,W
24B0:  SUBLW  05
24B2:  BC    24B8
....................          {Tsecado[1]=0; 
24B4:  CLRF   x2C
....................           Tsecado[2]++;} 
24B6:  INCF   x2D,F
....................          if(Tsecado[2]>9) 
24B8:  BTFSC  x2D.7
24BA:  BRA    24C6
24BC:  MOVF   x2D,W
24BE:  SUBLW  09
24C0:  BC    24C6
....................             {Tsecado[2]=0; 
24C2:  CLRF   x2D
....................              Tsecado[3]++;} 
24C4:  INCF   x2E,F
....................             if(Tsecado[3]>5) 
24C6:  BTFSC  x2E.7
24C8:  BRA    24D2
24CA:  MOVF   x2E,W
24CC:  SUBLW  05
24CE:  BC    24D2
....................                {Tsecado[3]=0;} 
24D0:  CLRF   x2E
....................       }   
....................    } 
....................    } 
....................     
24D2:  BCF    F9E.0
24D4:  MOVLB  0
24D6:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
.................... glcd_rect(x1, y, x2, y+7, YES, OFF);            // Clear the old voltage 
*
414A:  MOVLW  07
414C:  MOVLB  3
414E:  ADDWF  xB1,W
4150:  MOVWF  xB2
4152:  MOVFF  3AF,3C5
4156:  MOVFF  3B1,3C6
415A:  MOVFF  3B0,3C7
415E:  MOVWF  xC8
4160:  MOVLW  01
4162:  MOVWF  xC9
4164:  CLRF   xCA
4166:  MOVLB  0
4168:  CALL   2F18
.................... } 
416C:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       sprintf(voltage, "%1.1f",adc); // Converts adc to text 
*
2FDA:  MOVLW  03
2FDC:  MOVLB  2
2FDE:  MOVWF  x6E
2FE0:  MOVLW  BA
2FE2:  MOVWF  x6D
2FE4:  MOVLW  89
2FE6:  MOVWF  FE9
2FE8:  MOVFF  3B6,3C6
2FEC:  MOVFF  3B5,3C5
2FF0:  MOVFF  3B4,3C4
2FF4:  MOVFF  3B3,3C3
2FF8:  MOVLW  01
2FFA:  MOVLB  3
2FFC:  MOVWF  xC7
2FFE:  MOVLB  0
3000:  BRA    2C2E
....................       glcd_rect(x, y, x+53, y+15, YES, OFF);glcd_text57(x, y, voltage, 2, ON); 
3002:  MOVLW  35
3004:  MOVLB  3
3006:  ADDWF  xB7,W
3008:  MOVWF  xC3
300A:  MOVLW  0F
300C:  ADDWF  xB8,W
300E:  MOVWF  xC4
3010:  MOVFF  3B7,3C5
3014:  MOVFF  3B8,3C6
3018:  MOVFF  3C3,3C7
301C:  MOVWF  xC8
301E:  MOVLW  01
3020:  MOVWF  xC9
3022:  CLRF   xCA
3024:  MOVLB  0
3026:  RCALL  2F18
3028:  MOVFF  3B7,3C3
302C:  MOVFF  3B8,3C4
3030:  MOVLW  03
3032:  MOVLB  3
3034:  MOVWF  xC6
3036:  MOVLW  BA
3038:  MOVWF  xC5
303A:  MOVLW  02
303C:  MOVWF  xC7
303E:  MOVLW  01
3040:  MOVWF  xC8
3042:  MOVLB  0
3044:  RCALL  289A
....................        
.................... } 
3046:  RETLW  00
....................   
.................... void displayTiempo(int adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       if(w<4) 
*
3662:  MOVLB  3
3664:  MOVF   xB3,W
3666:  SUBLW  03
3668:  BNC   3684
....................       {sprintf(voltage, "%i",adc);} // Converts adc to text 
366A:  MOVLW  03
366C:  MOVLB  2
366E:  MOVWF  x6E
3670:  MOVLW  B4
3672:  MOVWF  x6D
3674:  MOVFF  3B0,3BD
3678:  MOVLW  1F
367A:  MOVLB  3
367C:  MOVWF  xBE
367E:  MOVLB  0
3680:  BRA    34F6
....................       else 
3682:  BRA    369C
....................       {sprintf(voltage, "%u",adc);} // Converts adc to text 
3684:  MOVLW  03
3686:  MOVLB  2
3688:  MOVWF  x6E
368A:  MOVLW  B4
368C:  MOVWF  x6D
368E:  MOVFF  3B0,3BD
3692:  MOVLW  1B
3694:  MOVLB  3
3696:  MOVWF  xBE
3698:  MOVLB  0
369A:  BRA    35DE
....................       if(w==0) 
369C:  MOVLB  3
369E:  MOVF   xB3,F
36A0:  BNZ   36C0
....................       {glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
36A2:  MOVFF  3B1,3C3
36A6:  MOVFF  3B2,3C4
36AA:  MOVLW  03
36AC:  MOVWF  xC6
36AE:  MOVLW  B4
36B0:  MOVWF  xC5
36B2:  MOVLW  01
36B4:  MOVWF  xC7
36B6:  MOVWF  xC8
36B8:  MOVLB  0
36BA:  CALL   289A
36BE:  MOVLB  3
....................       if(w==1) 
36C0:  DECFSZ xB3,W
36C2:  BRA    3708
....................       {glcd_rect(x, y, x+5, y+7, YES, OFF);glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
36C4:  MOVLW  05
36C6:  ADDWF  xB1,W
36C8:  MOVWF  xBD
36CA:  MOVLW  07
36CC:  ADDWF  xB2,W
36CE:  MOVWF  xBE
36D0:  MOVFF  3B1,3C5
36D4:  MOVFF  3B2,3C6
36D8:  MOVFF  3BD,3C7
36DC:  MOVWF  xC8
36DE:  MOVLW  01
36E0:  MOVWF  xC9
36E2:  CLRF   xCA
36E4:  MOVLB  0
36E6:  RCALL  2F18
36E8:  MOVFF  3B1,3C3
36EC:  MOVFF  3B2,3C4
36F0:  MOVLW  03
36F2:  MOVLB  3
36F4:  MOVWF  xC6
36F6:  MOVLW  B4
36F8:  MOVWF  xC5
36FA:  MOVLW  01
36FC:  MOVWF  xC7
36FE:  MOVWF  xC8
3700:  MOVLB  0
3702:  CALL   289A
3706:  MOVLB  3
....................       if(w==2) 
3708:  MOVF   xB3,W
370A:  SUBLW  02
370C:  BNZ   3754
....................       {glcd_rect(x, y, x+5, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
370E:  MOVLW  05
3710:  ADDWF  xB1,W
3712:  MOVWF  xBD
3714:  MOVLW  07
3716:  ADDWF  xB2,W
3718:  MOVWF  xBE
371A:  MOVFF  3B1,3C5
371E:  MOVFF  3B2,3C6
3722:  MOVFF  3BD,3C7
3726:  MOVWF  xC8
3728:  MOVLW  01
372A:  MOVWF  xC9
372C:  MOVWF  xCA
372E:  MOVLB  0
3730:  CALL   2F18
3734:  MOVFF  3B1,3C3
3738:  MOVFF  3B2,3C4
373C:  MOVLW  03
373E:  MOVLB  3
3740:  MOVWF  xC6
3742:  MOVLW  B4
3744:  MOVWF  xC5
3746:  MOVLW  01
3748:  MOVWF  xC7
374A:  CLRF   xC8
374C:  MOVLB  0
374E:  CALL   289A
3752:  MOVLB  3
....................       if(w==3) 
3754:  MOVF   xB3,W
3756:  SUBLW  03
3758:  BNZ   37A2
....................       {glcd_rect(x, y, x+20, y+28, YES, OFF);glcd_text57(x, y, voltage, 2, ON);}            // Clear the old voltage 
375A:  MOVLW  14
375C:  ADDWF  xB1,W
375E:  MOVWF  xBD
3760:  MOVLW  1C
3762:  ADDWF  xB2,W
3764:  MOVWF  xBE
3766:  MOVFF  3B1,3C5
376A:  MOVFF  3B2,3C6
376E:  MOVFF  3BD,3C7
3772:  MOVWF  xC8
3774:  MOVLW  01
3776:  MOVWF  xC9
3778:  CLRF   xCA
377A:  MOVLB  0
377C:  CALL   2F18
3780:  MOVFF  3B1,3C3
3784:  MOVFF  3B2,3C4
3788:  MOVLW  03
378A:  MOVLB  3
378C:  MOVWF  xC6
378E:  MOVLW  B4
3790:  MOVWF  xC5
3792:  MOVLW  02
3794:  MOVWF  xC7
3796:  MOVLW  01
3798:  MOVWF  xC8
379A:  MOVLB  0
379C:  CALL   289A
37A0:  MOVLB  3
....................       if(w==4) 
37A2:  MOVF   xB3,W
37A4:  SUBLW  04
37A6:  BNZ   37EE
....................       {glcd_rect(x, y, x+16, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
37A8:  MOVLW  10
37AA:  ADDWF  xB1,W
37AC:  MOVWF  xBD
37AE:  MOVLW  07
37B0:  ADDWF  xB2,W
37B2:  MOVWF  xBE
37B4:  MOVFF  3B1,3C5
37B8:  MOVFF  3B2,3C6
37BC:  MOVFF  3BD,3C7
37C0:  MOVWF  xC8
37C2:  MOVLW  01
37C4:  MOVWF  xC9
37C6:  MOVWF  xCA
37C8:  MOVLB  0
37CA:  CALL   2F18
37CE:  MOVFF  3B1,3C3
37D2:  MOVFF  3B2,3C4
37D6:  MOVLW  03
37D8:  MOVLB  3
37DA:  MOVWF  xC6
37DC:  MOVLW  B4
37DE:  MOVWF  xC5
37E0:  MOVLW  01
37E2:  MOVWF  xC7
37E4:  CLRF   xC8
37E6:  MOVLB  0
37E8:  CALL   289A
37EC:  MOVLB  3
....................       if(w==5) 
37EE:  MOVF   xB3,W
37F0:  SUBLW  05
37F2:  BNZ   383A
....................       {glcd_rect(x, y, x+12, y+16, YES, ON);glcd_text57(x, y, voltage, 2, OFF);}            // Clear the old voltage 
37F4:  MOVLW  0C
37F6:  ADDWF  xB1,W
37F8:  MOVWF  xBD
37FA:  MOVLW  10
37FC:  ADDWF  xB2,W
37FE:  MOVWF  xBE
3800:  MOVFF  3B1,3C5
3804:  MOVFF  3B2,3C6
3808:  MOVFF  3BD,3C7
380C:  MOVWF  xC8
380E:  MOVLW  01
3810:  MOVWF  xC9
3812:  MOVWF  xCA
3814:  MOVLB  0
3816:  CALL   2F18
381A:  MOVFF  3B1,3C3
381E:  MOVFF  3B2,3C4
3822:  MOVLW  03
3824:  MOVLB  3
3826:  MOVWF  xC6
3828:  MOVLW  B4
382A:  MOVWF  xC5
382C:  MOVLW  02
382E:  MOVWF  xC7
3830:  CLRF   xC8
3832:  MOVLB  0
3834:  CALL   289A
3838:  MOVLB  3
....................        
.................... } 
383A:  MOVLB  0
383C:  RETLW  00
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
253A:  MOVLB  3
253C:  RLCF   xAF,W
253E:  MOVWF  00
2540:  RLCF   00,F
2542:  MOVLW  FC
2544:  ANDWF  00,F
2546:  MOVFF  00,01
254A:  MOVF   FC2,W
254C:  ANDLW  C3
254E:  IORWF  00,W
2550:  MOVWF  FC2
2552:  MOVLW  0A
2554:  MOVWF  xB4
2556:  MOVLB  0
2558:  RCALL  24DA
255A:  BSF    FC2.1
255C:  BTFSC  FC2.1
255E:  BRA    255C
2560:  MOVFF  FC4,3B5
2564:  MOVFF  FC3,3B4
2568:  MOVLB  0
256A:  RCALL  2504
256C:  MOVFF  03,3B3
2570:  MOVFF  02,3B2
2574:  MOVFF  01,3B1
2578:  MOVFF  00,3B0
257C:  MOVFF  3B0,00
2580:  MOVFF  3B1,01
2584:  MOVFF  3B2,02
2588:  MOVFF  3B3,03
.................... } 
258C:  RETLW  00
....................  
....................  
.................... void main() 
.................... { 
*
416E:  CLRF   FF8
4170:  BCF    FD0.7
4172:  BSF    07.7
4174:  CLRF   FEA
4176:  CLRF   FE9
4178:  CLRF   1C
417A:  CLRF   20
417C:  MOVLW  10
417E:  MOVLB  2
4180:  MOVWF  x0D
4182:  MOVLW  20
4184:  MOVWF  x0E
4186:  MOVLW  10
4188:  MOVWF  x0F
418A:  MOVLW  0B
418C:  MOVWF  x10
418E:  MOVLW  10
4190:  MOVWF  x11
4192:  MOVLW  03
4194:  MOVWF  x12
4196:  MOVLW  10
4198:  MOVWF  x13
419A:  MOVWF  x14
419C:  MOVLW  20
419E:  MOVWF  x15
41A0:  MOVLW  24
41A2:  MOVWF  x16
41A4:  MOVLW  08
41A6:  MOVWF  x17
41A8:  CLRF   x18
41AA:  BCF    x19.0
41AC:  BCF    x19.1
41AE:  BCF    x19.2
41B0:  BCF    x19.3
41B2:  BCF    x19.4
41B4:  BCF    x19.5
41B6:  BCF    x19.6
41B8:  BCF    x19.7
41BA:  BCF    x1A.0
41BC:  BCF    x1A.1
41BE:  CLRF   x1C
41C0:  CLRF   x1B
41C2:  CLRF   x1E
41C4:  CLRF   x1D
41C6:  CLRF   x20
41C8:  CLRF   x1F
41CA:  CLRF   x22
41CC:  CLRF   x21
41CE:  BCF    x1A.2
41D0:  BCF    x1A.3
41D2:  BCF    x1A.4
41D4:  BCF    x1A.5
41D6:  BCF    x1A.6
41D8:  BCF    x1A.7
41DA:  BCF    x33.0
41DC:  BCF    x33.1
41DE:  MOVLW  79
41E0:  MOVWF  x34
41E2:  CLRF   x35
41E4:  CLRF   x36
41E6:  CLRF   x37
41E8:  MOVLW  0F
41EA:  MOVWF  x38
41EC:  MOVLW  50
41EE:  MOVWF  x39
41F0:  CLRF   x3A
41F2:  CLRF   x3B
41F4:  CLRF   x3C
41F6:  CLRF   x40
41F8:  CLRF   x3F
41FA:  CLRF   x3E
41FC:  CLRF   x3D
41FE:  CLRF   x44
4200:  MOVLW  40
4202:  MOVWF  x43
4204:  MOVLW  79
4206:  MOVWF  x42
4208:  MOVLW  88
420A:  MOVWF  x41
420C:  CLRF   x4C
420E:  CLRF   x4B
4210:  MOVLW  20
4212:  MOVWF  x4A
4214:  MOVLW  82
4216:  MOVWF  x49
4218:  CLRF   x50
421A:  CLRF   x4F
421C:  CLRF   x4E
421E:  CLRF   x4D
4220:  CLRF   x54
4222:  CLRF   x53
4224:  CLRF   x52
4226:  CLRF   x51
4228:  CLRF   x58
422A:  CLRF   x57
422C:  CLRF   x56
422E:  CLRF   x55
4230:  CLRF   x5C
4232:  CLRF   x5B
4234:  CLRF   x5A
4236:  CLRF   x59
4238:  CLRF   x60
423A:  CLRF   x5F
423C:  CLRF   x5E
423E:  CLRF   x5D
4240:  CLRF   x64
4242:  CLRF   x63
4244:  MOVLW  48
4246:  MOVWF  x62
4248:  MOVLW  83
424A:  MOVWF  x61
424C:  CLRF   x68
424E:  CLRF   x67
4250:  CLRF   x66
4252:  MOVLW  80
4254:  MOVWF  x65
4256:  CLRF   x6C
4258:  CLRF   x6B
425A:  CLRF   x6A
425C:  CLRF   x69
425E:  MOVF   FC1,W
4260:  ANDLW  C0
4262:  IORLW  0F
4264:  MOVWF  FC1
4266:  MOVLW  07
4268:  MOVWF  FB4
426A:  MOVLW  4A
426C:  MOVLB  0
426E:  MOVWF  x62
4270:  MOVLW  50
4272:  MOVWF  x63
4274:  MOVLW  20
4276:  MOVWF  x64
4278:  MOVLW  49
427A:  MOVWF  x65
427C:  MOVLW  6E
427E:  MOVWF  x66
4280:  MOVLW  67
4282:  MOVWF  x67
4284:  MOVLW  6C
4286:  MOVWF  x68
4288:  MOVLW  6F
428A:  MOVWF  x69
428C:  MOVLW  62
428E:  MOVWF  x6A
4290:  MOVLW  61
4292:  MOVWF  x6B
4294:  MOVLW  6C
4296:  MOVWF  x6C
4298:  CLRF   x6D
429A:  MOVLW  41
429C:  MOVWF  x6E
429E:  MOVLW  75
42A0:  MOVWF  x6F
42A2:  MOVLW  74
42A4:  MOVWF  x70
42A6:  MOVLW  6F
42A8:  MOVWF  x71
42AA:  MOVLW  63
42AC:  MOVWF  x72
42AE:  MOVLW  6C
42B0:  MOVWF  x73
42B2:  MOVLW  61
42B4:  MOVWF  x74
42B6:  MOVLW  76
42B8:  MOVWF  x75
42BA:  MOVLW  65
42BC:  MOVWF  x76
42BE:  MOVLW  20
42C0:  MOVWF  x77
42C2:  MOVLW  56
42C4:  MOVWF  x78
42C6:  MOVLW  65
42C8:  MOVWF  x79
42CA:  MOVLW  72
42CC:  MOVWF  x7A
42CE:  MOVLW  74
42D0:  MOVWF  x7B
42D2:  MOVLW  69
42D4:  MOVWF  x7C
42D6:  MOVLW  63
42D8:  MOVWF  x7D
42DA:  MOVLW  61
42DC:  MOVWF  x7E
42DE:  MOVLW  6C
42E0:  MOVWF  x7F
42E2:  CLRF   x80
42E4:  MOVLW  54
42E6:  MOVWF  x81
42E8:  MOVLW  20
42EA:  MOVWF  x82
42EC:  MOVLW  65
42EE:  MOVWF  x83
42F0:  MOVLW  73
42F2:  MOVWF  x84
42F4:  MOVLW  74
42F6:  MOVWF  x85
42F8:  MOVLW  3D
42FA:  MOVWF  x86
42FC:  CLRF   x87
42FE:  MOVLW  54
4300:  MOVWF  x88
4302:  MOVLW  20
4304:  MOVWF  x89
4306:  MOVLW  73
4308:  MOVWF  x8A
430A:  MOVLW  65
430C:  MOVWF  x8B
430E:  MOVLW  63
4310:  MOVWF  x8C
4312:  MOVLW  3D
4314:  MOVWF  x8D
4316:  CLRF   x8E
4318:  MOVLW  38
431A:  MOVWF  x8F
431C:  MOVLW  30
431E:  MOVWF  x90
4320:  MOVLW  20
4322:  MOVWF  x91
4324:  MOVLW  4C
4326:  MOVWF  x92
4328:  MOVLW  69
432A:  MOVWF  x93
432C:  MOVLW  74
432E:  MOVWF  x94
4330:  MOVLW  72
4332:  MOVWF  x95
4334:  MOVLW  6F
4336:  MOVWF  x96
4338:  MOVLW  73
433A:  MOVWF  x97
433C:  CLRF   x98
433E:  MOVLW  43
4340:  MOVWF  x99
4342:  MOVLW  61
4344:  MOVWF  x9A
4346:  MOVLW  6D
4348:  MOVWF  x9B
434A:  MOVLW  62
434C:  MOVWF  x9C
434E:  MOVLW  69
4350:  MOVWF  x9D
4352:  MOVLW  6F
4354:  MOVWF  x9E
4356:  MOVLW  20
4358:  MOVWF  x9F
435A:  MOVLW  43
435C:  MOVWF  xA0
435E:  MOVLW  6F
4360:  MOVWF  xA1
4362:  MOVLW  6E
4364:  MOVWF  xA2
4366:  MOVLW  74
4368:  MOVWF  xA3
436A:  MOVLW  72
436C:  MOVWF  xA4
436E:  MOVLW  61
4370:  MOVWF  xA5
4372:  MOVLW  73
4374:  MOVWF  xA6
4376:  MOVLW  65
4378:  MOVWF  xA7
437A:  MOVLW  6E
437C:  MOVWF  xA8
437E:  MOVLW  61
4380:  MOVWF  xA9
4382:  CLRF   xAA
4384:  MOVLW  3E
4386:  MOVWF  xAB
4388:  CLRF   xAC
438A:  MOVLW  49
438C:  MOVWF  xAD
438E:  MOVLW  6E
4390:  MOVWF  xAE
4392:  MOVLW  69
4394:  MOVWF  xAF
4396:  MOVLW  63
4398:  MOVWF  xB0
439A:  MOVLW  69
439C:  MOVWF  xB1
439E:  MOVLW  61
43A0:  MOVWF  xB2
43A2:  MOVLW  72
43A4:  MOVWF  xB3
43A6:  MOVLW  20
43A8:  MOVWF  xB4
43AA:  MOVLW  50
43AC:  MOVWF  xB5
43AE:  MOVLW  72
43B0:  MOVWF  xB6
43B2:  MOVLW  6F
43B4:  MOVWF  xB7
43B6:  MOVLW  63
43B8:  MOVWF  xB8
43BA:  MOVLW  65
43BC:  MOVWF  xB9
43BE:  MOVLW  73
43C0:  MOVWF  xBA
43C2:  MOVLW  6F
43C4:  MOVWF  xBB
43C6:  CLRF   xBC
43C8:  MOVLW  43
43CA:  MOVWF  xBD
43CC:  MOVLW  69
43CE:  MOVWF  xBE
43D0:  MOVLW  63
43D2:  MOVWF  xBF
43D4:  MOVLW  6C
43D6:  MOVWF  xC0
43D8:  MOVLW  6F
43DA:  MOVWF  xC1
43DC:  CLRF   xC2
43DE:  MOVLW  50
43E0:  MOVWF  xC3
43E2:  MOVLW  72
43E4:  MOVWF  xC4
43E6:  MOVLW  6F
43E8:  MOVWF  xC5
43EA:  MOVLW  63
43EC:  MOVWF  xC6
43EE:  MOVLW  65
43F0:  MOVWF  xC7
43F2:  MOVLW  73
43F4:  MOVWF  xC8
43F6:  MOVLW  6F
43F8:  MOVWF  xC9
43FA:  CLRF   xCA
43FC:  MOVLW  54
43FE:  MOVWF  xCB
4400:  MOVLW  65
4402:  MOVWF  xCC
4404:  MOVLW  78
4406:  MOVWF  xCD
4408:  MOVLW  74
440A:  MOVWF  xCE
440C:  MOVLW  69
440E:  MOVWF  xCF
4410:  MOVLW  6C
4412:  MOVWF  xD0
4414:  MOVLW  2D
4416:  MOVWF  xD1
4418:  MOVLW  49
441A:  MOVWF  xD2
441C:  MOVLW  6E
441E:  MOVWF  xD3
4420:  MOVLW  73
4422:  MOVWF  xD4
4424:  MOVLW  74
4426:  MOVWF  xD5
4428:  MOVLW  72
442A:  MOVWF  xD6
442C:  MOVLW  75
442E:  MOVWF  xD7
4430:  MOVLW  6D
4432:  MOVWF  xD8
4434:  MOVLW  65
4436:  MOVWF  xD9
4438:  MOVLW  6E
443A:  MOVWF  xDA
443C:  MOVLW  74
443E:  MOVWF  xDB
4440:  MOVLW  61
4442:  MOVWF  xDC
4444:  MOVLW  6C
4446:  MOVWF  xDD
4448:  CLRF   xDE
444A:  MOVLW  43
444C:  MOVWF  xDF
444E:  MOVLW  61
4450:  MOVWF  xE0
4452:  MOVLW  6C
4454:  MOVWF  xE1
4456:  MOVLW  65
4458:  MOVWF  xE2
445A:  MOVLW  6E
445C:  MOVWF  xE3
445E:  MOVLW  74
4460:  MOVWF  xE4
4462:  MOVLW  61
4464:  MOVWF  xE5
4466:  MOVLW  6E
4468:  MOVWF  xE6
446A:  MOVLW  64
446C:  MOVWF  xE7
446E:  MOVLW  6F
4470:  MOVWF  xE8
4472:  CLRF   xE9
4474:  MOVLW  4E
4476:  MOVWF  xEA
4478:  MOVLW  69
447A:  MOVWF  xEB
447C:  MOVLW  76
447E:  MOVWF  xEC
4480:  MOVLW  65
4482:  MOVWF  xED
4484:  MOVLW  6C
4486:  MOVWF  xEE
4488:  CLRF   xEF
448A:  MOVLW  43
448C:  MOVWF  xF0
448E:  MOVLW  61
4490:  MOVWF  xF1
4492:  MOVLW  75
4494:  MOVWF  xF2
4496:  MOVLW  63
4498:  MOVWF  xF3
449A:  MOVLW  68
449C:  MOVWF  xF4
449E:  MOVLW  6F
44A0:  MOVWF  xF5
44A2:  CLRF   xF6
44A4:  MOVLW  49
44A6:  MOVWF  xF7
44A8:  MOVLW  6E
44AA:  MOVWF  xF8
44AC:  MOVLW  73
44AE:  MOVWF  xF9
44B0:  MOVLW  74
44B2:  MOVWF  xFA
44B4:  MOVLW  72
44B6:  MOVWF  xFB
44B8:  MOVLW  75
44BA:  MOVWF  xFC
44BC:  MOVLW  6D
44BE:  MOVWF  xFD
44C0:  MOVLW  65
44C2:  MOVWF  xFE
44C4:  MOVLW  6E
44C6:  MOVWF  xFF
44C8:  MOVLW  74
44CA:  MOVLB  1
44CC:  MOVWF  x00
44CE:  MOVLW  61
44D0:  MOVWF  x01
44D2:  MOVLW  6C
44D4:  MOVWF  x02
44D6:  MOVLW  20
44D8:  MOVWF  x03
44DA:  MOVLW  53
44DC:  MOVWF  x04
44DE:  MOVLW  75
44E0:  MOVWF  x05
44E2:  MOVLW  61
44E4:  MOVWF  x06
44E6:  MOVLW  76
44E8:  MOVWF  x07
44EA:  MOVLW  65
44EC:  MOVWF  x08
44EE:  CLRF   x09
44F0:  MOVLW  45
44F2:  MOVWF  x0A
44F4:  MOVLW  73
44F6:  MOVWF  x0B
44F8:  MOVLW  74
44FA:  MOVWF  x0C
44FC:  MOVLW  65
44FE:  MOVWF  x0D
4500:  MOVLW  72
4502:  MOVWF  x0E
4504:  MOVLW  69
4506:  MOVWF  x0F
4508:  MOVLW  6C
450A:  MOVWF  x10
450C:  MOVLW  69
450E:  MOVWF  x11
4510:  MOVLW  7A
4512:  MOVWF  x12
4514:  MOVLW  61
4516:  MOVWF  x13
4518:  MOVLW  6E
451A:  MOVWF  x14
451C:  MOVLW  64
451E:  MOVWF  x15
4520:  MOVLW  6F
4522:  MOVWF  x16
4524:  CLRF   x17
4526:  MOVLW  53
4528:  MOVWF  x18
452A:  MOVLW  65
452C:  MOVWF  x19
452E:  MOVLW  63
4530:  MOVWF  x1A
4532:  MOVLW  61
4534:  MOVWF  x1B
4536:  MOVLW  6E
4538:  MOVWF  x1C
453A:  MOVLW  64
453C:  MOVWF  x1D
453E:  MOVLW  6F
4540:  MOVWF  x1E
4542:  CLRF   x1F
4544:  MOVLW  4C
4546:  MOVWF  x20
4548:  MOVLW  69
454A:  MOVWF  x21
454C:  MOVLW  71
454E:  MOVWF  x22
4550:  MOVLW  75
4552:  MOVWF  x23
4554:  MOVLW  69
4556:  MOVWF  x24
4558:  MOVLW  64
455A:  MOVWF  x25
455C:  MOVLW  6F
455E:  MOVWF  x26
4560:  MOVLW  73
4562:  MOVWF  x27
4564:  CLRF   x28
4566:  MOVLW  3A
4568:  MOVWF  x29
456A:  CLRF   x2A
456C:  MOVLW  4C
456E:  MOVWF  x2B
4570:  MOVLW  69
4572:  MOVWF  x2C
4574:  MOVLW  62
4576:  MOVWF  x2D
4578:  MOVLW  72
457A:  MOVWF  x2E
457C:  MOVLW  65
457E:  MOVWF  x2F
4580:  CLRF   x30
4582:  MOVLW  54
4584:  MOVWF  x31
4586:  MOVLW  3A
4588:  MOVWF  x32
458A:  MOVLW  31
458C:  MOVWF  x33
458E:  MOVLW  33
4590:  MOVWF  x34
4592:  MOVLW  34
4594:  MOVWF  x35
4596:  MOVLW  B0
4598:  MOVWF  x36
459A:  MOVLW  43
459C:  MOVWF  x37
459E:  CLRF   x38
45A0:  MOVLW  74
45A2:  MOVWF  x39
45A4:  MOVLW  5F
45A6:  MOVWF  x3A
45A8:  MOVLW  65
45AA:  MOVWF  x3B
45AC:  MOVLW  73
45AE:  MOVWF  x3C
45B0:  MOVLW  74
45B2:  MOVWF  x3D
45B4:  MOVLW  3A
45B6:  MOVWF  x3E
45B8:  MOVLW  35
45BA:  MOVWF  x3F
45BC:  MOVLW  6D
45BE:  MOVWF  x40
45C0:  CLRF   x41
45C2:  MOVLW  74
45C4:  MOVWF  x42
45C6:  MOVLW  5F
45C8:  MOVWF  x43
45CA:  MOVLW  73
45CC:  MOVWF  x44
45CE:  MOVLW  65
45D0:  MOVWF  x45
45D2:  MOVLW  63
45D4:  MOVWF  x46
45D6:  MOVLW  3A
45D8:  MOVWF  x47
45DA:  MOVLW  31
45DC:  MOVWF  x48
45DE:  MOVLW  35
45E0:  MOVWF  x49
45E2:  MOVLW  6D
45E4:  MOVWF  x4A
45E6:  CLRF   x4B
45E8:  MOVLW  43
45EA:  MOVWF  x4C
45EC:  CLRF   x4D
45EE:  MOVLW  54
45F0:  MOVWF  x4E
45F2:  MOVLW  3A
45F4:  MOVWF  x4F
45F6:  MOVLW  31
45F8:  MOVWF  x50
45FA:  MOVLW  32
45FC:  MOVWF  x51
45FE:  MOVLW  31
4600:  MOVWF  x52
4602:  MOVLW  B0
4604:  MOVWF  x53
4606:  MOVLW  43
4608:  MOVWF  x54
460A:  CLRF   x55
460C:  MOVLW  74
460E:  MOVWF  x56
4610:  MOVLW  5F
4612:  MOVWF  x57
4614:  MOVLW  65
4616:  MOVWF  x58
4618:  MOVLW  73
461A:  MOVWF  x59
461C:  MOVLW  74
461E:  MOVWF  x5A
4620:  MOVLW  3A
4622:  MOVWF  x5B
4624:  MOVLW  32
4626:  MOVWF  x5C
4628:  MOVLW  35
462A:  MOVWF  x5D
462C:  MOVLW  6D
462E:  MOVWF  x5E
4630:  CLRF   x5F
4632:  MOVLW  74
4634:  MOVWF  x60
4636:  MOVLW  5F
4638:  MOVWF  x61
463A:  MOVLW  73
463C:  MOVWF  x62
463E:  MOVLW  65
4640:  MOVWF  x63
4642:  MOVLW  63
4644:  MOVWF  x64
4646:  MOVLW  3A
4648:  MOVWF  x65
464A:  MOVLW  31
464C:  MOVWF  x66
464E:  MOVLW  35
4650:  MOVWF  x67
4652:  MOVLW  6D
4654:  MOVWF  x68
4656:  CLRF   x69
4658:  MOVLW  54
465A:  MOVWF  x6A
465C:  MOVLW  3A
465E:  MOVWF  x6B
4660:  MOVLW  31
4662:  MOVWF  x6C
4664:  MOVLW  32
4666:  MOVWF  x6D
4668:  MOVLW  31
466A:  MOVWF  x6E
466C:  MOVLW  B0
466E:  MOVWF  x6F
4670:  MOVLW  43
4672:  MOVWF  x70
4674:  CLRF   x71
4676:  MOVLW  74
4678:  MOVWF  x72
467A:  MOVLW  5F
467C:  MOVWF  x73
467E:  MOVLW  65
4680:  MOVWF  x74
4682:  MOVLW  73
4684:  MOVWF  x75
4686:  MOVLW  74
4688:  MOVWF  x76
468A:  MOVLW  3A
468C:  MOVWF  x77
468E:  MOVLW  32
4690:  MOVWF  x78
4692:  MOVLW  30
4694:  MOVWF  x79
4696:  MOVLW  6D
4698:  MOVWF  x7A
469A:  CLRF   x7B
469C:  MOVLW  44
469E:  MOVWF  x7C
46A0:  MOVLW  65
46A2:  MOVWF  x7D
46A4:  MOVLW  73
46A6:  MOVWF  x7E
46A8:  MOVLW  66
46AA:  MOVWF  x7F
46AC:  MOVLW  6F
46AE:  MOVWF  x80
46B0:  MOVLW  67
46B2:  MOVWF  x81
46B4:  MOVLW  75
46B6:  MOVWF  x82
46B8:  MOVLW  65
46BA:  MOVWF  x83
46BC:  MOVLW  20
46BE:  MOVWF  x84
46C0:  MOVLW  4C
46C2:  MOVWF  x85
46C4:  MOVLW  65
46C6:  MOVWF  x86
46C8:  MOVLW  6E
46CA:  MOVWF  x87
46CC:  MOVLW  74
46CE:  MOVWF  x88
46D0:  MOVLW  6F
46D2:  MOVWF  x89
46D4:  CLRF   x8A
46D6:  MOVLW  74
46D8:  MOVWF  x8B
46DA:  MOVLW  5F
46DC:  MOVWF  x8C
46DE:  MOVLW  73
46E0:  MOVWF  x8D
46E2:  MOVLW  65
46E4:  MOVWF  x8E
46E6:  MOVLW  63
46E8:  MOVWF  x8F
46EA:  MOVLW  3A
46EC:  MOVWF  x90
46EE:  MOVLW  4E
46F0:  MOVWF  x91
46F2:  MOVLW  2F
46F4:  MOVWF  x92
46F6:  MOVLW  41
46F8:  MOVWF  x93
46FA:  CLRF   x94
46FC:  MOVLW  54
46FE:  MOVWF  x95
4700:  MOVLW  3A
4702:  MOVWF  x96
4704:  MOVLW  31
4706:  MOVWF  x97
4708:  MOVLW  32
470A:  MOVWF  x98
470C:  MOVLW  31
470E:  MOVWF  x99
4710:  MOVLW  B0
4712:  MOVWF  x9A
4714:  MOVLW  43
4716:  MOVWF  x9B
4718:  CLRF   x9C
471A:  MOVLW  74
471C:  MOVWF  x9D
471E:  MOVLW  5F
4720:  MOVWF  x9E
4722:  MOVLW  65
4724:  MOVWF  x9F
4726:  MOVLW  73
4728:  MOVWF  xA0
472A:  MOVLW  74
472C:  MOVWF  xA1
472E:  MOVLW  3A
4730:  MOVWF  xA2
4732:  MOVLW  32
4734:  MOVWF  xA3
4736:  MOVLW  30
4738:  MOVWF  xA4
473A:  MOVLW  6D
473C:  MOVWF  xA5
473E:  CLRF   xA6
4740:  MOVLW  74
4742:  MOVWF  xA7
4744:  MOVLW  5F
4746:  MOVWF  xA8
4748:  MOVLW  73
474A:  MOVWF  xA9
474C:  MOVLW  65
474E:  MOVWF  xAA
4750:  MOVLW  63
4752:  MOVWF  xAB
4754:  MOVLW  3A
4756:  MOVWF  xAC
4758:  MOVLW  4E
475A:  MOVWF  xAD
475C:  MOVLW  2F
475E:  MOVWF  xAE
4760:  MOVLW  41
4762:  MOVWF  xAF
4764:  CLRF   xB0
4766:  MOVLW  4F
4768:  MOVWF  xB1
476A:  MOVLW  4B
476C:  MOVWF  xB2
476E:  CLRF   xB3
4770:  MOVLW  54
4772:  MOVWF  xB4
4774:  MOVLW  65
4776:  MOVWF  xB5
4778:  MOVLW  6D
477A:  MOVWF  xB6
477C:  MOVLW  70
477E:  MOVWF  xB7
4780:  MOVLW  65
4782:  MOVWF  xB8
4784:  MOVLW  72
4786:  MOVWF  xB9
4788:  MOVLW  61
478A:  MOVWF  xBA
478C:  MOVLW  74
478E:  MOVWF  xBB
4790:  MOVLW  75
4792:  MOVWF  xBC
4794:  MOVLW  72
4796:  MOVWF  xBD
4798:  MOVLW  61
479A:  MOVWF  xBE
479C:  CLRF   xBF
479E:  MOVLW  54
47A0:  MOVWF  xC0
47A2:  MOVLW  20
47A4:  MOVWF  xC1
47A6:  MOVLW  45
47A8:  MOVWF  xC2
47AA:  MOVLW  73
47AC:  MOVWF  xC3
47AE:  MOVLW  74
47B0:  MOVWF  xC4
47B2:  MOVLW  65
47B4:  MOVWF  xC5
47B6:  MOVLW  72
47B8:  MOVWF  xC6
47BA:  MOVLW  69
47BC:  MOVWF  xC7
47BE:  MOVLW  6C
47C0:  MOVWF  xC8
47C2:  MOVLW  69
47C4:  MOVWF  xC9
47C6:  MOVLW  7A
47C8:  MOVWF  xCA
47CA:  MOVLW  61
47CC:  MOVWF  xCB
47CE:  MOVLW  63
47D0:  MOVWF  xCC
47D2:  MOVLW  69
47D4:  MOVWF  xCD
47D6:  MOVLW  6F
47D8:  MOVWF  xCE
47DA:  MOVLW  6E
47DC:  MOVWF  xCF
47DE:  CLRF   xD0
47E0:  MOVLW  54
47E2:  MOVWF  xD1
47E4:  MOVLW  20
47E6:  MOVWF  xD2
47E8:  MOVLW  53
47EA:  MOVWF  xD3
47EC:  MOVLW  65
47EE:  MOVWF  xD4
47F0:  MOVLW  63
47F2:  MOVWF  xD5
47F4:  MOVLW  61
47F6:  MOVWF  xD6
47F8:  MOVLW  64
47FA:  MOVWF  xD7
47FC:  MOVLW  6F
47FE:  MOVWF  xD8
4800:  CLRF   xD9
4802:  MOVLW  44
4804:  MOVWF  xDA
4806:  MOVLW  65
4808:  MOVWF  xDB
480A:  MOVLW  73
480C:  MOVWF  xDC
480E:  MOVLW  66
4810:  MOVWF  xDD
4812:  MOVLW  6F
4814:  MOVWF  xDE
4816:  MOVLW  67
4818:  MOVWF  xDF
481A:  MOVLW  75
481C:  MOVWF  xE0
481E:  MOVLW  65
4820:  MOVWF  xE1
4822:  MOVLW  20
4824:  MOVWF  xE2
4826:  MOVLW  52
4828:  MOVWF  xE3
482A:  MOVLW  61
482C:  MOVWF  xE4
482E:  MOVLW  70
4830:  MOVWF  xE5
4832:  MOVLW  69
4834:  MOVWF  xE6
4836:  MOVLW  64
4838:  MOVWF  xE7
483A:  MOVLW  6F
483C:  MOVWF  xE8
483E:  CLRF   xE9
4840:  MOVLW  53
4842:  MOVWF  xEA
4844:  MOVLW  69
4846:  MOVWF  xEB
4848:  CLRF   xEC
484A:  MOVLW  4E
484C:  MOVWF  xED
484E:  MOVLW  6F
4850:  MOVWF  xEE
4852:  CLRF   xEF
4854:  MOVLW  46
4856:  MOVWF  xF0
4858:  MOVLW  69
485A:  MOVWF  xF1
485C:  MOVLW  6E
485E:  MOVWF  xF2
4860:  MOVLW  61
4862:  MOVWF  xF3
4864:  MOVLW  6C
4866:  MOVWF  xF4
4868:  MOVLW  69
486A:  MOVWF  xF5
486C:  MOVLW  7A
486E:  MOVWF  xF6
4870:  MOVLW  61
4872:  MOVWF  xF7
4874:  MOVLW  64
4876:  MOVWF  xF8
4878:  MOVLW  6F
487A:  MOVWF  xF9
487C:  CLRF   xFA
487E:  MOVLW  50
4880:  MOVWF  xFB
4882:  MOVLW  61
4884:  MOVWF  xFC
4886:  MOVLW  72
4888:  MOVWF  xFD
488A:  MOVLW  61
488C:  MOVWF  xFE
488E:  MOVLW  64
4890:  MOVWF  xFF
4892:  MOVLW  61
4894:  MOVLB  2
4896:  MOVWF  x00
4898:  CLRF   x01
489A:  MOVLW  45
489C:  MOVWF  x02
489E:  MOVLW  6D
48A0:  MOVWF  x03
48A2:  MOVLW  65
48A4:  MOVWF  x04
48A6:  MOVLW  72
48A8:  MOVWF  x05
48AA:  MOVLW  67
48AC:  MOVWF  x06
48AE:  MOVLW  65
48B0:  MOVWF  x07
48B2:  MOVLW  6E
48B4:  MOVWF  x08
48B6:  MOVLW  63
48B8:  MOVWF  x09
48BA:  MOVLW  69
48BC:  MOVWF  x0A
48BE:  MOVLW  61
48C0:  MOVWF  x0B
48C2:  CLRF   x0C
48C4:  CLRF   x23
48C6:  CLRF   x24
48C8:  CLRF   x25
48CA:  CLRF   x26
48CC:  CLRF   x27
48CE:  CLRF   x28
48D0:  CLRF   x29
48D2:  CLRF   x2A
48D4:  CLRF   x2B
48D6:  CLRF   x2C
48D8:  CLRF   x2D
48DA:  CLRF   x2E
48DC:  CLRF   x2F
48DE:  CLRF   x30
48E0:  CLRF   x31
48E2:  CLRF   x32
48E4:  CLRF   x6D
48E6:  CLRF   x6E
....................    // TODO: USER CODE!! 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
48E8:  MOVLW  85
48EA:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
48EC:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
48EE:  MOVF   FC1,W
48F0:  ANDLW  C0
48F2:  IORLW  0E
48F4:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
48F6:  BCF    FC0.0
48F8:  BSF    FC0.1
48FA:  BCF    FC0.2
48FC:  BSF    FC0.7
48FE:  BSF    FC2.0
....................    sensores(0); 
4900:  MOVLB  3
4902:  CLRF   xAF
4904:  MOVLB  0
4906:  CALL   253A
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
490A:  MOVFF  FF2,3AF
490E:  BCF    FF2.7
4910:  CLRF   FA9
4912:  BCF    FA6.6
4914:  BCF    FA6.7
4916:  BSF    FA6.0
4918:  MOVF   FA8,W
491A:  MOVLB  3
491C:  BTFSC  xAF.7
491E:  BSF    FF2.7
4920:  MOVLB  2
4922:  MOVWF  x27
4924:  MOVFF  FF2,3AF
4928:  BCF    FF2.7
492A:  MOVLW  01
492C:  MOVWF  FA9
492E:  BCF    FA6.6
4930:  BCF    FA6.7
4932:  BSF    FA6.0
4934:  MOVF   FA8,W
4936:  MOVLB  3
4938:  BTFSC  xAF.7
493A:  BSF    FF2.7
493C:  MOVLB  2
493E:  MOVWF  x28
4940:  MOVFF  FF2,3AF
4944:  BCF    FF2.7
4946:  MOVLW  02
4948:  MOVWF  FA9
494A:  BCF    FA6.6
494C:  BCF    FA6.7
494E:  BSF    FA6.0
4950:  MOVF   FA8,W
4952:  MOVLB  3
4954:  BTFSC  xAF.7
4956:  BSF    FF2.7
4958:  MOVLB  2
495A:  MOVWF  x29
495C:  MOVFF  FF2,3AF
4960:  BCF    FF2.7
4962:  MOVLW  03
4964:  MOVWF  FA9
4966:  BCF    FA6.6
4968:  BCF    FA6.7
496A:  BSF    FA6.0
496C:  MOVF   FA8,W
496E:  MOVLB  3
4970:  BTFSC  xAF.7
4972:  BSF    FF2.7
4974:  MOVLB  2
4976:  MOVWF  x2A
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
4978:  MOVFF  FF2,3AF
497C:  BCF    FF2.7
497E:  MOVLW  04
4980:  MOVWF  FA9
4982:  BCF    FA6.6
4984:  BCF    FA6.7
4986:  BSF    FA6.0
4988:  MOVF   FA8,W
498A:  MOVLB  3
498C:  BTFSC  xAF.7
498E:  BSF    FF2.7
4990:  MOVLB  2
4992:  MOVWF  x2F
4994:  MOVFF  FF2,3AF
4998:  BCF    FF2.7
499A:  MOVLW  05
499C:  MOVWF  FA9
499E:  BCF    FA6.6
49A0:  BCF    FA6.7
49A2:  BSF    FA6.0
49A4:  MOVF   FA8,W
49A6:  MOVLB  3
49A8:  BTFSC  xAF.7
49AA:  BSF    FF2.7
49AC:  MOVLB  2
49AE:  MOVWF  x30
49B0:  MOVFF  FF2,3AF
49B4:  BCF    FF2.7
49B6:  MOVLW  06
49B8:  MOVWF  FA9
49BA:  BCF    FA6.6
49BC:  BCF    FA6.7
49BE:  BSF    FA6.0
49C0:  MOVF   FA8,W
49C2:  MOVLB  3
49C4:  BTFSC  xAF.7
49C6:  BSF    FF2.7
49C8:  MOVLB  2
49CA:  MOVWF  x31
49CC:  MOVFF  FF2,3AF
49D0:  BCF    FF2.7
49D2:  MOVLW  07
49D4:  MOVWF  FA9
49D6:  BCF    FA6.6
49D8:  BCF    FA6.7
49DA:  BSF    FA6.0
49DC:  MOVF   FA8,W
49DE:  MOVLB  3
49E0:  BTFSC  xAF.7
49E2:  BSF    FF2.7
49E4:  MOVLB  2
49E6:  MOVWF  x32
49E8:  MOVFF  FF2,3AF
49EC:  BCF    FF2.7
49EE:  MOVLW  08
49F0:  MOVWF  FA9
49F2:  BCF    FA6.6
49F4:  BCF    FA6.7
49F6:  BSF    FA6.0
49F8:  MOVF   FA8,W
49FA:  MOVLB  3
49FC:  BTFSC  xAF.7
49FE:  BSF    FF2.7
4A00:  MOVLB  2
4A02:  MOVWF  x34
....................    Nivel=read_eeprom(9);Minutos=read_eeprom(20); 
4A04:  MOVFF  FF2,3AF
4A08:  BCF    FF2.7
4A0A:  MOVLW  09
4A0C:  MOVWF  FA9
4A0E:  BCF    FA6.6
4A10:  BCF    FA6.7
4A12:  BSF    FA6.0
4A14:  MOVF   FA8,W
4A16:  MOVLB  3
4A18:  BTFSC  xAF.7
4A1A:  BSF    FF2.7
4A1C:  MOVLB  2
4A1E:  MOVWF  x37
4A20:  MOVFF  FF2,3AF
4A24:  BCF    FF2.7
4A26:  MOVLW  14
4A28:  MOVWF  FA9
4A2A:  BCF    FA6.6
4A2C:  BCF    FA6.7
4A2E:  BSF    FA6.0
4A30:  MOVF   FA8,W
4A32:  MOVLB  3
4A34:  BTFSC  xAF.7
4A36:  BSF    FF2.7
4A38:  MOVLB  2
4A3A:  MOVWF  x38
....................    float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
4A3C:  CLRF   x6F
4A3E:  CLRF   x70
4A40:  CLRF   x71
4A42:  CLRF   x72
4A44:  CLRF   x73
4A46:  CLRF   x74
4A48:  CLRF   x75
4A4A:  CLRF   x76
4A4C:  CLRF   x77
4A4E:  CLRF   x78
4A50:  CLRF   x79
4A52:  CLRF   x7A
4A54:  CLRF   x7B
4A56:  CLRF   x7C
4A58:  CLRF   x7D
4A5A:  CLRF   x7E
4A5C:  CLRF   x7F
4A5E:  CLRF   x80
4A60:  CLRF   x81
4A62:  CLRF   x82
4A64:  CLRF   x83
4A66:  CLRF   x84
4A68:  CLRF   x85
4A6A:  CLRF   x86
4A6C:  CLRF   x87
4A6E:  CLRF   x88
4A70:  CLRF   x89
4A72:  CLRF   x8A
4A74:  CLRF   x8B
4A76:  CLRF   x8C
4A78:  CLRF   x8D
4A7A:  CLRF   x8E
4A7C:  CLRF   x8F
4A7E:  CLRF   x90
4A80:  CLRF   x91
4A82:  CLRF   x92
4A84:  CLRF   x93
4A86:  CLRF   x94
4A88:  CLRF   x95
4A8A:  CLRF   x96
4A8C:  CLRF   x97
4A8E:  CLRF   x98
4A90:  CLRF   x99
4A92:  CLRF   x9A
4A94:  CLRF   x9B
4A96:  CLRF   x9C
4A98:  CLRF   x9D
4A9A:  CLRF   x9E
4A9C:  CLRF   x9F
4A9E:  CLRF   xA0
4AA0:  CLRF   xA1
4AA2:  CLRF   xA2
4AA4:  CLRF   xA3
4AA6:  CLRF   xA4
4AA8:  CLRF   xA5
4AAA:  CLRF   xA6
4AAC:  CLRF   xA7
4AAE:  CLRF   xA8
4AB0:  CLRF   xA9
4AB2:  CLRF   xAA
4AB4:  CLRF   xAB
4AB6:  CLRF   xAC
4AB8:  CLRF   xAD
4ABA:  CLRF   xAE
4ABC:  CLRF   xAF
4ABE:  CLRF   xB0
4AC0:  CLRF   xB1
4AC2:  CLRF   xB2
4AC4:  CLRF   xB3
4AC6:  CLRF   xB4
4AC8:  CLRF   xB5
4ACA:  CLRF   xB6
4ACC:  CLRF   xB7
4ACE:  CLRF   xB8
4AD0:  CLRF   xB9
4AD2:  CLRF   xBA
4AD4:  CLRF   xBB
4AD6:  CLRF   xBC
4AD8:  CLRF   xBD
4ADA:  CLRF   xBE
4ADC:  CLRF   xBF
4ADE:  CLRF   xC0
4AE0:  CLRF   xC1
4AE2:  CLRF   xC2
4AE4:  CLRF   xC3
4AE6:  CLRF   xC4
4AE8:  CLRF   xC5
4AEA:  CLRF   xC6
4AEC:  CLRF   xC7
4AEE:  CLRF   xC8
4AF0:  CLRF   xC9
4AF2:  CLRF   xCA
4AF4:  CLRF   xCB
4AF6:  CLRF   xCC
4AF8:  CLRF   xCD
4AFA:  CLRF   xCE
4AFC:  CLRF   xCF
4AFE:  CLRF   xD0
4B00:  CLRF   xD1
4B02:  CLRF   xD2
4B04:  CLRF   xD3
4B06:  CLRF   xD4
4B08:  CLRF   xD5
4B0A:  CLRF   xD6
4B0C:  CLRF   xD7
4B0E:  CLRF   xD8
4B10:  CLRF   xD9
4B12:  CLRF   xDA
4B14:  CLRF   xDB
4B16:  CLRF   xDC
4B18:  CLRF   xDD
4B1A:  CLRF   xDE
4B1C:  CLRF   xDF
4B1E:  CLRF   xE0
4B20:  CLRF   xE1
4B22:  CLRF   xE2
4B24:  CLRF   xE3
4B26:  CLRF   xE4
4B28:  CLRF   xE5
4B2A:  CLRF   xE6
4B2C:  CLRF   xE7
4B2E:  CLRF   xE8
4B30:  CLRF   xE9
4B32:  CLRF   xEA
4B34:  CLRF   xEB
4B36:  CLRF   xEC
4B38:  CLRF   xED
4B3A:  CLRF   xEE
4B3C:  CLRF   xEF
4B3E:  CLRF   xF0
4B40:  CLRF   xF1
4B42:  CLRF   xF2
4B44:  CLRF   xF3
4B46:  CLRF   xF4
4B48:  CLRF   xF5
4B4A:  CLRF   xF6
4B4C:  CLRF   xF7
4B4E:  CLRF   xF8
4B50:  CLRF   xF9
4B52:  CLRF   xFA
4B54:  CLRF   xFB
4B56:  CLRF   xFC
4B58:  CLRF   xFD
4B5A:  CLRF   xFE
4B5C:  CLRF   xFF
4B5E:  MOVLB  3
4B60:  CLRF   x00
4B62:  CLRF   x01
4B64:  CLRF   x02
4B66:  CLRF   x03
4B68:  CLRF   x04
4B6A:  CLRF   x05
4B6C:  CLRF   x06
4B6E:  CLRF   x07
4B70:  CLRF   x08
4B72:  CLRF   x09
4B74:  CLRF   x0A
4B76:  CLRF   x0B
4B78:  CLRF   x0C
4B7A:  CLRF   x0D
4B7C:  CLRF   x0E
4B7E:  CLRF   x0F
4B80:  CLRF   x10
4B82:  CLRF   x11
4B84:  CLRF   x12
4B86:  CLRF   x13
4B88:  CLRF   x14
4B8A:  CLRF   x15
4B8C:  CLRF   x16
4B8E:  CLRF   x17
4B90:  CLRF   x18
4B92:  CLRF   x19
4B94:  CLRF   x1A
4B96:  CLRF   x1B
4B98:  CLRF   x1C
4B9A:  CLRF   x1D
4B9C:  CLRF   x1E
4B9E:  CLRF   x1F
4BA0:  CLRF   x20
4BA2:  CLRF   x21
4BA4:  CLRF   x22
4BA6:  CLRF   x23
4BA8:  CLRF   x24
4BAA:  CLRF   x25
4BAC:  CLRF   x26
4BAE:  CLRF   x27
4BB0:  CLRF   x28
4BB2:  CLRF   x29
4BB4:  CLRF   x2A
4BB6:  CLRF   x2B
4BB8:  CLRF   x2C
4BBA:  CLRF   x2D
4BBC:  CLRF   x2E
4BBE:  CLRF   x2F
4BC0:  CLRF   x30
4BC2:  CLRF   x31
4BC4:  CLRF   x32
4BC6:  CLRF   x33
4BC8:  CLRF   x34
4BCA:  CLRF   x35
4BCC:  CLRF   x36
4BCE:  CLRF   x37
4BD0:  CLRF   x38
4BD2:  CLRF   x39
4BD4:  CLRF   x3A
4BD6:  CLRF   x3B
4BD8:  CLRF   x3C
4BDA:  CLRF   x3D
4BDC:  CLRF   x3E
4BDE:  CLRF   x3F
4BE0:  CLRF   x40
4BE2:  CLRF   x41
4BE4:  CLRF   x42
4BE6:  CLRF   x43
4BE8:  CLRF   x44
4BEA:  CLRF   x45
4BEC:  CLRF   x46
4BEE:  CLRF   x47
4BF0:  CLRF   x48
4BF2:  CLRF   x49
4BF4:  CLRF   x4A
4BF6:  CLRF   x4B
4BF8:  CLRF   x4C
4BFA:  CLRF   x4D
4BFC:  CLRF   x4E
4BFE:  CLRF   x4F
4C00:  CLRF   x50
4C02:  CLRF   x51
4C04:  CLRF   x52
4C06:  CLRF   x53
4C08:  CLRF   x54
4C0A:  CLRF   x55
4C0C:  CLRF   x56
4C0E:  CLRF   x57
4C10:  CLRF   x58
4C12:  CLRF   x59
4C14:  CLRF   x5A
4C16:  CLRF   x5B
4C18:  CLRF   x5C
4C1A:  CLRF   x5D
4C1C:  CLRF   x5E
4C1E:  CLRF   x5F
4C20:  CLRF   x60
4C22:  CLRF   x61
4C24:  CLRF   x62
4C26:  CLRF   x63
4C28:  CLRF   x64
4C2A:  CLRF   x65
4C2C:  CLRF   x66
4C2E:  CLRF   x67
4C30:  CLRF   x68
4C32:  CLRF   x69
4C34:  CLRF   x6A
4C36:  CLRF   x6B
4C38:  CLRF   x6C
4C3A:  CLRF   x6D
4C3C:  CLRF   x6E
4C3E:  CLRF   x6F
4C40:  CLRF   x70
4C42:  CLRF   x71
4C44:  CLRF   x72
4C46:  CLRF   x73
4C48:  CLRF   x74
4C4A:  CLRF   x75
4C4C:  CLRF   x76
4C4E:  CLRF   x77
4C50:  CLRF   x78
4C52:  CLRF   x79
4C54:  CLRF   x7A
4C56:  CLRF   x7B
4C58:  CLRF   x7C
4C5A:  CLRF   x7D
4C5C:  CLRF   x7E
4C5E:  CLRF   x7F
4C60:  CLRF   x80
4C62:  CLRF   x81
4C64:  CLRF   x82
4C66:  CLRF   x83
4C68:  CLRF   x84
4C6A:  CLRF   x85
4C6C:  CLRF   x86
4C6E:  CLRF   x87
4C70:  CLRF   x88
4C72:  CLRF   x89
4C74:  CLRF   x8A
4C76:  CLRF   x8B
4C78:  CLRF   x8C
4C7A:  CLRF   x8D
4C7C:  CLRF   x8E
4C7E:  CLRF   x8F
4C80:  CLRF   x90
4C82:  CLRF   x91
4C84:  CLRF   x92
4C86:  CLRF   x93
4C88:  CLRF   x94
4C8A:  CLRF   x95
4C8C:  CLRF   x96
4C8E:  CLRF   x97
4C90:  CLRF   x98
4C92:  CLRF   x99
4C94:  CLRF   x9A
4C96:  CLRF   x9B
4C98:  CLRF   x9C
4C9A:  CLRF   x9D
4C9C:  CLRF   x9E
4C9E:  CLRF   x9F
4CA0:  CLRF   xA0
4CA2:  CLRF   xA1
4CA4:  CLRF   xA2
4CA6:  CLRF   xA3
4CA8:  CLRF   xA4
4CAA:  CLRF   xA5
4CAC:  CLRF   xA6
4CAE:  CLRF   xA7
4CB0:  CLRF   xA8
4CB2:  CLRF   xA9
4CB4:  CLRF   xAA
4CB6:  CLRF   xAB
4CB8:  CLRF   xAC
4CBA:  CLRF   xAD
4CBC:  CLRF   xAE
....................    //float promedio[10]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................    //float promedio2[10]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................    usb_init(); 
4CBE:  MOVLB  0
4CC0:  GOTO   2600
....................    usb_task(); 
4CC4:  CALL   25DE
....................    glcd_init(ON);             //Inicializa la glcd 
4CC8:  MOVLW  01
4CCA:  MOVLB  3
4CCC:  MOVWF  xAF
4CCE:  MOVLB  0
4CD0:  GOTO   26D2
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
4CD4:  MOVLB  3
4CD6:  CLRF   xB0
4CD8:  MOVLB  0
4CDA:  CALL   2644
....................    glcd_text57(0, 0, JP, 2, ON);            // Write the new voltage 
4CDE:  MOVLB  3
4CE0:  CLRF   xC3
4CE2:  CLRF   xC4
4CE4:  CLRF   xC6
4CE6:  MOVLW  62
4CE8:  MOVWF  xC5
4CEA:  MOVLW  02
4CEC:  MOVWF  xC7
4CEE:  MOVLW  01
4CF0:  MOVWF  xC8
4CF2:  MOVLB  0
4CF4:  CALL   289A
....................    glcd_text57(10, 20, Autoclave, 1, ON);            // Write the new voltage 
4CF8:  MOVLW  0A
4CFA:  MOVLB  3
4CFC:  MOVWF  xC3
4CFE:  MOVLW  14
4D00:  MOVWF  xC4
4D02:  CLRF   xC6
4D04:  MOVLW  6E
4D06:  MOVWF  xC5
4D08:  MOVLW  01
4D0A:  MOVWF  xC7
4D0C:  MOVWF  xC8
4D0E:  MOVLB  0
4D10:  CALL   289A
....................    glcd_text57(30, 40, Lts, 1, ON);            // Write the new voltage 
4D14:  MOVLW  1E
4D16:  MOVLB  3
4D18:  MOVWF  xC3
4D1A:  MOVLW  28
4D1C:  MOVWF  xC4
4D1E:  CLRF   xC6
4D20:  MOVLW  8F
4D22:  MOVWF  xC5
4D24:  MOVLW  01
4D26:  MOVWF  xC7
4D28:  MOVWF  xC8
4D2A:  MOVLB  0
4D2C:  CALL   289A
....................    delay_ms(2000); 
4D30:  MOVLW  08
4D32:  MOVLB  3
4D34:  MOVWF  xAF
4D36:  MOVLW  FA
4D38:  MOVWF  xB4
4D3A:  MOVLB  0
4D3C:  CALL   24DA
4D40:  MOVLB  3
4D42:  DECFSZ xAF,F
4D44:  BRA    4D36
....................    if(UP&&RIGHT) 
4D46:  BSF    F92.1
4D48:  BTFSS  F80.1
4D4A:  BRA    4E3E
4D4C:  BSF    F92.3
4D4E:  BTFSS  F80.3
4D50:  BRA    4E3E
....................    {glcd_fillScreen(OFF);      //Limpia la pantalla 
4D52:  CLRF   xB0
4D54:  MOVLB  0
4D56:  CALL   2644
....................       delay_ms(2000); 
4D5A:  MOVLW  08
4D5C:  MOVLB  3
4D5E:  MOVWF  xAF
4D60:  MOVLW  FA
4D62:  MOVWF  xB4
4D64:  MOVLB  0
4D66:  CALL   24DA
4D6A:  MOVLB  3
4D6C:  DECFSZ xAF,F
4D6E:  BRA    4D60
....................       for(;;) 
....................       { 
....................          if(UP) 
4D70:  BSF    F92.1
4D72:  BTFSS  F80.1
4D74:  BRA    4DB2
....................          {Minutos++;delay_ms(40);write_eeprom(20,Minutos);} 
4D76:  MOVLB  2
4D78:  INCF   x38,F
4D7A:  MOVLW  28
4D7C:  MOVLB  3
4D7E:  MOVWF  xB4
4D80:  MOVLB  0
4D82:  CALL   24DA
4D86:  MOVLW  14
4D88:  MOVWF  FA9
4D8A:  MOVFF  238,FA8
4D8E:  BCF    FA6.6
4D90:  BCF    FA6.7
4D92:  BSF    FA6.2
4D94:  MOVF   FF2,W
4D96:  MOVWF  00
4D98:  BCF    FF2.7
4D9A:  MOVLB  F
4D9C:  MOVLW  55
4D9E:  MOVWF  FA7
4DA0:  MOVLW  AA
4DA2:  MOVWF  FA7
4DA4:  BSF    FA6.1
4DA6:  BTFSC  FA6.1
4DA8:  BRA    4DA6
4DAA:  BCF    FA6.2
4DAC:  MOVF   00,W
4DAE:  IORWF  FF2,F
4DB0:  MOVLB  3
....................          if(DOWN) 
4DB2:  BSF    F92.2
4DB4:  BTFSS  F80.2
4DB6:  BRA    4DF4
....................          {Minutos--;delay_ms(40);write_eeprom(20,Minutos);} 
4DB8:  MOVLB  2
4DBA:  DECF   x38,F
4DBC:  MOVLW  28
4DBE:  MOVLB  3
4DC0:  MOVWF  xB4
4DC2:  MOVLB  0
4DC4:  CALL   24DA
4DC8:  MOVLW  14
4DCA:  MOVWF  FA9
4DCC:  MOVFF  238,FA8
4DD0:  BCF    FA6.6
4DD2:  BCF    FA6.7
4DD4:  BSF    FA6.2
4DD6:  MOVF   FF2,W
4DD8:  MOVWF  00
4DDA:  BCF    FF2.7
4DDC:  MOVLB  F
4DDE:  MOVLW  55
4DE0:  MOVWF  FA7
4DE2:  MOVLW  AA
4DE4:  MOVWF  FA7
4DE6:  BSF    FA6.1
4DE8:  BTFSC  FA6.1
4DEA:  BRA    4DE8
4DEC:  BCF    FA6.2
4DEE:  MOVF   00,W
4DF0:  IORWF  FF2,F
4DF2:  MOVLB  3
....................          if(RIGHT) 
4DF4:  BSF    F92.3
4DF6:  BTFSS  F80.3
4DF8:  BRA    4DFC
....................          {reset_cpu();} 
4DFA:  RESET
....................          displayT((float)Minutos,20,20,3); 
4DFC:  CLRF   xB5
4DFE:  MOVFF  238,3B4
4E02:  MOVLB  0
4E04:  CALL   2504
4E08:  MOVFF  00,3AF
4E0C:  MOVFF  01,3B0
4E10:  MOVFF  02,3B1
4E14:  MOVFF  03,3B2
4E18:  MOVFF  03,3B6
4E1C:  MOVFF  02,3B5
4E20:  MOVFF  01,3B4
4E24:  MOVFF  00,3B3
4E28:  MOVLW  14
4E2A:  MOVLB  3
4E2C:  MOVWF  xB7
4E2E:  MOVWF  xB8
4E30:  MOVLW  03
4E32:  MOVWF  xB9
4E34:  MOVLB  0
4E36:  CALL   2FDA
....................       } 
4E3A:  MOVLB  3
4E3C:  BRA    4D70
....................    } 
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
4E3E:  CLRF   xB0
4E40:  MOVLB  0
4E42:  CALL   2644
....................    while(true) 
....................    { 
....................      
....................    if(STOP)       
4E46:  BSF    F96.0
4E48:  BTFSC  F84.0
4E4A:  BRA    4EA4
....................       {Camara_IN_off;Camara_OUT_on;Piloto_Stop_on;Resistencia_off;emergency=1; 
4E4C:  BCF    F8B.2
4E4E:  BCF    F94.2
4E50:  BSF    F8B.0
4E52:  BCF    F94.0
4E54:  BSF    F8C.0
4E56:  BCF    F95.0
4E58:  BCF    F8B.1
4E5A:  BCF    F94.1
4E5C:  MOVLB  2
4E5E:  BSF    x1A.1
....................       glcd_fillScreen(OFF); glcd_text57(20, 0, Parada, 2, ON);glcd_text57(0, 40, Emergencia, 2, ON);}  
4E60:  MOVLB  3
4E62:  CLRF   xB0
4E64:  MOVLB  0
4E66:  CALL   2644
4E6A:  MOVLW  14
4E6C:  MOVLB  3
4E6E:  MOVWF  xC3
4E70:  CLRF   xC4
4E72:  MOVLW  01
4E74:  MOVWF  xC6
4E76:  MOVLW  FB
4E78:  MOVWF  xC5
4E7A:  MOVLW  02
4E7C:  MOVWF  xC7
4E7E:  MOVLW  01
4E80:  MOVWF  xC8
4E82:  MOVLB  0
4E84:  CALL   289A
4E88:  MOVLB  3
4E8A:  CLRF   xC3
4E8C:  MOVLW  28
4E8E:  MOVWF  xC4
4E90:  MOVLW  02
4E92:  MOVWF  xC6
4E94:  MOVWF  xC5
4E96:  MOVWF  xC7
4E98:  MOVLW  01
4E9A:  MOVWF  xC8
4E9C:  MOVLB  0
4E9E:  CALL   289A
....................    else 
4EA2:  BRA    4EC4
....................       { 
....................          if(emergency==1) 
4EA4:  MOVLB  2
4EA6:  BTFSS  x1A.1
4EA8:  BRA    4EC4
....................          {glcd_fillScreen(OFF);Camara_IN_off;Camara_OUT_off;Piloto_Stop_off;emergency=0;} 
4EAA:  MOVLB  3
4EAC:  CLRF   xB0
4EAE:  MOVLB  0
4EB0:  CALL   2644
4EB4:  BCF    F8B.2
4EB6:  BCF    F94.2
4EB8:  BCF    F8B.0
4EBA:  BCF    F94.0
4EBC:  BCF    F8C.0
4EBE:  BCF    F95.0
4EC0:  MOVLB  2
4EC2:  BCF    x1A.1
....................       } 
....................        
....................     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==16){ //Menu de Seleccion de Proceso. 
4EC4:  MOVLB  2
4EC6:  MOVF   x0D,W
4EC8:  SUBLW  10
4ECA:  BTFSS  FD8.2
4ECC:  BRA    5072
....................       glcd_text57(15, 0, Proc, 2, ON);            // Escribe Proceso en Tamaño 2.  
4ECE:  MOVLW  0F
4ED0:  MOVLB  3
4ED2:  MOVWF  xC3
4ED4:  CLRF   xC4
4ED6:  CLRF   xC6
4ED8:  MOVLW  C3
4EDA:  MOVWF  xC5
4EDC:  MOVLW  02
4EDE:  MOVWF  xC7
4EE0:  MOVLW  01
4EE2:  MOVWF  xC8
4EE4:  MOVLB  0
4EE6:  CALL   289A
....................          
....................       if(UP)//Si oprime hacia arriba 
4EEA:  BSF    F92.1
4EEC:  BTFSS  F80.1
4EEE:  BRA    4F34
....................       {  if(Flanco == 0)  
4EF0:  MOVLB  2
4EF2:  BTFSC  x19.5
4EF4:  BRA    4F32
....................             {Flecha2=Flecha2-8;Flecha=Flecha-8;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);glcd_text57(0, Flecha+8, Fle, 1, OFF);}} 
4EF6:  MOVLW  08
4EF8:  SUBWF  x13,F
4EFA:  SUBWF  x11,F
4EFC:  MOVLW  01
4EFE:  ADDWF  x11,W
4F00:  MOVWF  x12
4F02:  BSF    x19.5
4F04:  MOVLW  1E
4F06:  MOVLB  3
4F08:  MOVWF  xB4
4F0A:  MOVLB  0
4F0C:  CALL   24DA
4F10:  MOVLW  08
4F12:  MOVLB  2
4F14:  ADDWF  x11,W
4F16:  MOVLB  3
4F18:  MOVWF  xAF
4F1A:  CLRF   xC3
4F1C:  MOVWF  xC4
4F1E:  CLRF   xC6
4F20:  MOVLW  AB
4F22:  MOVWF  xC5
4F24:  MOVLW  01
4F26:  MOVWF  xC7
4F28:  CLRF   xC8
4F2A:  MOVLB  0
4F2C:  CALL   289A
4F30:  MOVLB  2
....................          else 
4F32:  BRA    4F38
....................             {Flanco = 0;} 
4F34:  MOVLB  2
4F36:  BCF    x19.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4F38:  BSF    F92.2
4F3A:  BTFSS  F80.2
4F3C:  BRA    4F80
....................       {  if(Flanco2 == 0)  
4F3E:  BTFSC  x19.7
4F40:  BRA    4F7E
....................             {Flecha2=Flecha2+8;Flecha=Flecha+8;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);glcd_text57(0, Flecha-8, Fle, 1, OFF);}} 
4F42:  MOVLW  08
4F44:  ADDWF  x13,F
4F46:  ADDWF  x11,F
4F48:  MOVLW  01
4F4A:  SUBWF  x11,W
4F4C:  MOVWF  x12
4F4E:  BSF    x19.7
4F50:  MOVLW  1E
4F52:  MOVLB  3
4F54:  MOVWF  xB4
4F56:  MOVLB  0
4F58:  CALL   24DA
4F5C:  MOVLW  08
4F5E:  MOVLB  2
4F60:  SUBWF  x11,W
4F62:  MOVLB  3
4F64:  MOVWF  xAF
4F66:  CLRF   xC3
4F68:  MOVWF  xC4
4F6A:  CLRF   xC6
4F6C:  MOVLW  AB
4F6E:  MOVWF  xC5
4F70:  MOVLW  01
4F72:  MOVWF  xC7
4F74:  CLRF   xC8
4F76:  MOVLB  0
4F78:  CALL   289A
4F7C:  MOVLB  2
....................          else 
4F7E:  BRA    4F82
....................             {Flanco2 = 0;} 
4F80:  BCF    x19.7
....................          
....................         if(Flecha2>n_opcionH+16) 
4F82:  MOVLW  10
4F84:  ADDWF  x0E,W
4F86:  SUBWF  x13,W
4F88:  BZ    4F98
4F8A:  BNC   4F98
....................         {Flecha2=n_opcionL;Flecha=nMenuL;nMenuL=Flecha2;} 
4F8C:  MOVFF  20F,213
4F90:  MOVFF  214,211
4F94:  MOVFF  213,214
....................          
....................         if(Flecha2<n_opcionL) 
4F98:  MOVF   x0F,W
4F9A:  SUBWF  x13,W
4F9C:  BC    4FAE
....................         {Flecha2=n_opcionH+16;Flecha=nMenuH+16;Flecha=Flecha2;}                
4F9E:  MOVLW  10
4FA0:  ADDWF  x0E,W
4FA2:  MOVWF  x13
4FA4:  MOVLW  10
4FA6:  ADDWF  x15,W
4FA8:  MOVWF  x11
4FAA:  MOVFF  213,211
....................          
....................          
....................         mensajes(7,n_opcionL); 
4FAE:  MOVLW  07
4FB0:  MOVLB  3
4FB2:  MOVWF  xB0
4FB4:  MOVFF  20F,3B1
4FB8:  MOVLB  0
4FBA:  CALL   3048
....................         mensajes(6,n_opcionL+8); 
4FBE:  MOVLW  08
4FC0:  MOVLB  2
4FC2:  ADDWF  x0F,W
4FC4:  MOVLB  3
4FC6:  MOVWF  xAF
4FC8:  MOVLW  06
4FCA:  MOVWF  xB0
4FCC:  MOVFF  3AF,3B1
4FD0:  MOVLB  0
4FD2:  CALL   3048
....................         mensajes(4,n_opcionL+16); 
4FD6:  MOVLW  10
4FD8:  MOVLB  2
4FDA:  ADDWF  x0F,W
4FDC:  MOVLB  3
4FDE:  MOVWF  xAF
4FE0:  MOVLW  04
4FE2:  MOVWF  xB0
4FE4:  MOVFF  3AF,3B1
4FE8:  MOVLB  0
4FEA:  CALL   3048
....................         mensajes(5,n_opcionL+24); 
4FEE:  MOVLW  18
4FF0:  MOVLB  2
4FF2:  ADDWF  x0F,W
4FF4:  MOVLB  3
4FF6:  MOVWF  xAF
4FF8:  MOVLW  05
4FFA:  MOVWF  xB0
4FFC:  MOVFF  3AF,3B1
5000:  MOVLB  0
5002:  CALL   3048
....................         mensajes(8,n_opcionL+32); 
5006:  MOVLW  20
5008:  MOVLB  2
500A:  ADDWF  x0F,W
500C:  MOVLB  3
500E:  MOVWF  xAF
5010:  MOVLW  08
5012:  MOVWF  xB0
5014:  MOVFF  3AF,3B1
5018:  MOVLB  0
501A:  CALL   3048
....................  
....................         glcd_text57(0, Flecha, Fle, 1, ON);            // Write the new voltage         
501E:  MOVLB  3
5020:  CLRF   xC3
5022:  MOVFF  211,3C4
5026:  CLRF   xC6
5028:  MOVLW  AB
502A:  MOVWF  xC5
502C:  MOVLW  01
502E:  MOVWF  xC7
5030:  MOVWF  xC8
5032:  MOVLB  0
5034:  CALL   289A
....................        
....................  
....................       if(RIGHT)// Si oprime derecha 
5038:  BSF    F92.3
503A:  BTFSS  F80.3
503C:  BRA    506E
....................       {  if(Flanco1 == 0)  
503E:  MOVLB  2
5040:  BTFSC  x19.6
5042:  BRA    506C
....................             {Flanco1 = 1;Menu=Flecha2+1;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF); }} 
5044:  BSF    x19.6
5046:  MOVLW  01
5048:  ADDWF  x13,W
504A:  MOVWF  x0D
504C:  MOVFF  20F,213
5050:  MOVFF  20F,211
5054:  MOVLW  1E
5056:  MOVLB  3
5058:  MOVWF  xB4
505A:  MOVLB  0
505C:  CALL   24DA
5060:  MOVLB  3
5062:  CLRF   xB0
5064:  MOVLB  0
5066:  CALL   2644
506A:  MOVLB  2
....................          else 
506C:  BRA    5072
....................             {Flanco1 = 0;}    
506E:  MOVLB  2
5070:  BCF    x19.6
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //-Sub-Menus de selección de proceso. 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==17){ // Menu de Liquido       
5072:  MOVF   x0D,W
5074:  SUBLW  11
5076:  BTFSS  FD8.2
5078:  BRA    51C6
....................       glcd_imagen(4); //ErlenMeyer con Liquido 
507A:  MOVLW  04
507C:  MOVLB  3
507E:  MOVWF  xAF
5080:  MOVLB  0
5082:  CALL   317E
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5086:  MOVLW  3F
5088:  MOVLB  3
508A:  MOVWF  xC5
508C:  MOVLW  28
508E:  MOVWF  xC6
5090:  MOVLW  64
5092:  MOVWF  xC7
5094:  MOVLW  35
5096:  MOVWF  xC8
5098:  MOVLW  01
509A:  MOVWF  xC9
509C:  MOVWF  xCA
509E:  MOVLB  0
50A0:  CALL   2F18
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
50A4:  MOVLW  4C
50A6:  MOVLB  3
50A8:  MOVWF  xC3
50AA:  MOVLW  2C
50AC:  MOVWF  xC4
50AE:  MOVLW  01
50B0:  MOVWF  xC6
50B2:  MOVLW  B1
50B4:  MOVWF  xC5
50B6:  MOVLW  01
50B8:  MOVWF  xC7
50BA:  CLRF   xC8
50BC:  MOVLB  0
50BE:  CALL   289A
....................          
....................       mensajes(7,55); 
50C2:  MOVLW  07
50C4:  MOVLB  3
50C6:  MOVWF  xB0
50C8:  MOVLW  37
50CA:  MOVWF  xB1
50CC:  MOVLB  0
50CE:  CALL   3048
....................       //glcd_text57(60, 0, DuracionL, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TL, 1, ON);            // Write the new voltage         
50D2:  MOVLW  3F
50D4:  MOVLB  3
50D6:  MOVWF  xC3
50D8:  MOVLW  0A
50DA:  MOVWF  xC4
50DC:  MOVLW  01
50DE:  MOVWF  xC6
50E0:  MOVLW  95
50E2:  MOVWF  xC5
50E4:  MOVLW  01
50E6:  MOVWF  xC7
50E8:  MOVWF  xC8
50EA:  MOVLB  0
50EC:  CALL   289A
....................       glcd_text57(63, 20, TestL, 1, ON);            // Write the new voltage         
50F0:  MOVLW  3F
50F2:  MOVLB  3
50F4:  MOVWF  xC3
50F6:  MOVLW  14
50F8:  MOVWF  xC4
50FA:  MOVLW  01
50FC:  MOVWF  xC6
50FE:  MOVLW  9D
5100:  MOVWF  xC5
5102:  MOVLW  01
5104:  MOVWF  xC7
5106:  MOVWF  xC8
5108:  MOVLB  0
510A:  CALL   289A
....................       glcd_text57(63, 30, TsecL, 1, ON);            // Write the new voltage         
510E:  MOVLW  3F
5110:  MOVLB  3
5112:  MOVWF  xC3
5114:  MOVLW  1E
5116:  MOVWF  xC4
5118:  MOVLW  01
511A:  MOVWF  xC6
511C:  MOVLW  A7
511E:  MOVWF  xC5
5120:  MOVLW  01
5122:  MOVWF  xC7
5124:  MOVWF  xC8
5126:  MOVLB  0
5128:  CALL   289A
....................        
....................       if(LEFT)// Si oprime Izquier|da 
512C:  BSF    F92.5
512E:  BTFSS  F80.5
5130:  BRA    516E
....................        {  if(Flanco3 == 0)  
5132:  MOVLB  2
5134:  BTFSC  x1A.0
5136:  BRA    516C
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5138:  BSF    x1A.0
513A:  MOVLW  1E
513C:  MOVLB  3
513E:  MOVWF  xB4
5140:  MOVLB  0
5142:  CALL   24DA
5146:  MOVLW  10
5148:  MOVLB  2
514A:  MOVWF  x0D
514C:  MOVFF  20F,213
5150:  MOVFF  20F,211
5154:  MOVLW  1E
5156:  MOVLB  3
5158:  MOVWF  xB4
515A:  MOVLB  0
515C:  CALL   24DA
5160:  MOVLB  3
5162:  CLRF   xB0
5164:  MOVLB  0
5166:  CALL   2644
516A:  MOVLB  2
....................         } 
....................          else 
516C:  BRA    5172
....................             {Flanco3 = 0;}                 
516E:  MOVLB  2
5170:  BCF    x1A.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5172:  BSF    F92.3
5174:  BTFSS  F80.3
5176:  BRA    51C4
....................       {  if(Flanco1 == 0)  
5178:  BTFSC  x19.6
517A:  BRA    51C2
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
517C:  BSF    x19.6
517E:  MOVLW  5A
5180:  MOVWF  x0D
5182:  MOVFF  20F,213
5186:  MOVFF  20F,211
518A:  MOVLW  1E
518C:  MOVLB  3
518E:  MOVWF  xB4
5190:  MOVLB  0
5192:  CALL   24DA
5196:  MOVLB  3
5198:  CLRF   xB0
519A:  MOVLB  0
519C:  CALL   2644
51A0:  MOVLW  20
51A2:  MOVLB  2
51A4:  MOVWF  x0E
51A6:  MOVLW  10
51A8:  MOVWF  x0F
51AA:  MOVWF  x14
51AC:  MOVLW  20
51AE:  MOVWF  x15
....................             estadot40=0;estadoc=0;estadoi=0;estadol=1;estadop=0;Liquid=1;Setpoint=121;}} 
51B0:  BCF    x19.0
51B2:  BCF    x19.1
51B4:  BCF    x19.2
51B6:  BSF    x19.3
51B8:  BCF    x19.4
51BA:  MOVLW  01
51BC:  MOVWF  x18
51BE:  MOVLW  79
51C0:  MOVWF  x34
....................          else 
51C2:  BRA    51C6
....................             {Flanco1 = 0;}    
51C4:  BCF    x19.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==25){ // Menu de Instrumental Suave      
51C6:  MOVF   x0D,W
51C8:  SUBLW  19
51CA:  BTFSS  FD8.2
51CC:  BRA    531A
....................       glcd_imagen(3); //Erlen Meyer 
51CE:  MOVLW  03
51D0:  MOVLB  3
51D2:  MOVWF  xAF
51D4:  MOVLB  0
51D6:  CALL   317E
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
51DA:  MOVLW  3F
51DC:  MOVLB  3
51DE:  MOVWF  xC5
51E0:  MOVLW  28
51E2:  MOVWF  xC6
51E4:  MOVLW  64
51E6:  MOVWF  xC7
51E8:  MOVLW  35
51EA:  MOVWF  xC8
51EC:  MOVLW  01
51EE:  MOVWF  xC9
51F0:  MOVWF  xCA
51F2:  MOVLB  0
51F4:  CALL   2F18
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
51F8:  MOVLW  4C
51FA:  MOVLB  3
51FC:  MOVWF  xC3
51FE:  MOVLW  2C
5200:  MOVWF  xC4
5202:  MOVLW  01
5204:  MOVWF  xC6
5206:  MOVLW  B1
5208:  MOVWF  xC5
520A:  MOVLW  01
520C:  MOVWF  xC7
520E:  CLRF   xC8
5210:  MOVLB  0
5212:  CALL   289A
....................          
....................       mensajes(6,55); 
5216:  MOVLW  06
5218:  MOVLB  3
521A:  MOVWF  xB0
521C:  MOVLW  37
521E:  MOVWF  xB1
5220:  MOVLB  0
5222:  CALL   3048
....................       //glcd_text57(60, 0, DuracionI, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TI, 1, ON);            // Write the new voltage         
5226:  MOVLW  3F
5228:  MOVLB  3
522A:  MOVWF  xC3
522C:  MOVLW  0A
522E:  MOVWF  xC4
5230:  MOVLW  01
5232:  MOVWF  xC6
5234:  MOVLW  6A
5236:  MOVWF  xC5
5238:  MOVLW  01
523A:  MOVWF  xC7
523C:  MOVWF  xC8
523E:  MOVLB  0
5240:  CALL   289A
....................       glcd_text57(63, 20, TestI, 1, ON);            // Write the new voltage         
5244:  MOVLW  3F
5246:  MOVLB  3
5248:  MOVWF  xC3
524A:  MOVLW  14
524C:  MOVWF  xC4
524E:  MOVLW  01
5250:  MOVWF  xC6
5252:  MOVLW  72
5254:  MOVWF  xC5
5256:  MOVLW  01
5258:  MOVWF  xC7
525A:  MOVWF  xC8
525C:  MOVLB  0
525E:  CALL   289A
....................       glcd_text57(63, 30, TsecI, 1, ON);            // Write the new voltage         
5262:  MOVLW  3F
5264:  MOVLB  3
5266:  MOVWF  xC3
5268:  MOVLW  1E
526A:  MOVWF  xC4
526C:  MOVLW  01
526E:  MOVWF  xC6
5270:  MOVLW  8B
5272:  MOVWF  xC5
5274:  MOVLW  01
5276:  MOVWF  xC7
5278:  MOVWF  xC8
527A:  MOVLB  0
527C:  CALL   289A
....................  
....................       if(LEFT)// Si oprime Izquier|da 
5280:  BSF    F92.5
5282:  BTFSS  F80.5
5284:  BRA    52C2
....................        {  if(Flanco3 == 0)  
5286:  MOVLB  2
5288:  BTFSC  x1A.0
528A:  BRA    52C0
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
528C:  BSF    x1A.0
528E:  MOVLW  1E
5290:  MOVLB  3
5292:  MOVWF  xB4
5294:  MOVLB  0
5296:  CALL   24DA
529A:  MOVLW  10
529C:  MOVLB  2
529E:  MOVWF  x0D
52A0:  MOVFF  20F,213
52A4:  MOVFF  20F,211
52A8:  MOVLW  1E
52AA:  MOVLB  3
52AC:  MOVWF  xB4
52AE:  MOVLB  0
52B0:  CALL   24DA
52B4:  MOVLB  3
52B6:  CLRF   xB0
52B8:  MOVLB  0
52BA:  CALL   2644
52BE:  MOVLB  2
....................         } 
....................          else 
52C0:  BRA    52C6
....................             {Flanco3 = 0;}                 
52C2:  MOVLB  2
52C4:  BCF    x1A.0
....................  
....................       if(RIGHT)// Si oprime derecha 
52C6:  BSF    F92.3
52C8:  BTFSS  F80.3
52CA:  BRA    5318
....................       {  if(Flanco1 == 0)  
52CC:  BTFSC  x19.6
52CE:  BRA    5316
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
52D0:  BSF    x19.6
52D2:  MOVLW  5A
52D4:  MOVWF  x0D
52D6:  MOVFF  20F,213
52DA:  MOVFF  20F,211
52DE:  MOVLW  1E
52E0:  MOVLB  3
52E2:  MOVWF  xB4
52E4:  MOVLB  0
52E6:  CALL   24DA
52EA:  MOVLB  3
52EC:  CLRF   xB0
52EE:  MOVLB  0
52F0:  CALL   2644
52F4:  MOVLW  20
52F6:  MOVLB  2
52F8:  MOVWF  x0E
52FA:  MOVLW  10
52FC:  MOVWF  x0F
52FE:  MOVWF  x14
5300:  MOVLW  20
5302:  MOVWF  x15
....................             estadot40=0;estadoc=0;estadoi=1;estadol=0;estadop=0;Liquid=1;Setpoint=121;}} 
5304:  BCF    x19.0
5306:  BCF    x19.1
5308:  BSF    x19.2
530A:  BCF    x19.3
530C:  BCF    x19.4
530E:  MOVLW  01
5310:  MOVWF  x18
5312:  MOVLW  79
5314:  MOVWF  x34
....................          else 
5316:  BRA    531A
....................             {Flanco1 = 0;}    
5318:  BCF    x19.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==33){ // Menu de textil e instrumental      
531A:  MOVF   x0D,W
531C:  SUBLW  21
531E:  BTFSS  FD8.2
5320:  BRA    54AC
....................       glcd_imagen(1); //Tijeras y Camisa 
5322:  MOVLW  01
5324:  MOVLB  3
5326:  MOVWF  xAF
5328:  MOVLB  0
532A:  CALL   317E
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
532E:  MOVLW  3F
5330:  MOVLB  3
5332:  MOVWF  xC5
5334:  MOVLW  28
5336:  MOVWF  xC6
5338:  MOVLW  64
533A:  MOVWF  xC7
533C:  MOVLW  35
533E:  MOVWF  xC8
5340:  MOVLW  01
5342:  MOVWF  xC9
5344:  MOVWF  xCA
5346:  MOVLB  0
5348:  CALL   2F18
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
534C:  MOVLW  4C
534E:  MOVLB  3
5350:  MOVWF  xC3
5352:  MOVLW  2C
5354:  MOVWF  xC4
5356:  MOVLW  01
5358:  MOVWF  xC6
535A:  MOVLW  B1
535C:  MOVWF  xC5
535E:  MOVLW  01
5360:  MOVWF  xC7
5362:  CLRF   xC8
5364:  MOVLB  0
5366:  CALL   289A
....................          
....................       mensajes(4,55); 
536A:  MOVLW  04
536C:  MOVLB  3
536E:  MOVWF  xB0
5370:  MOVLW  37
5372:  MOVWF  xB1
5374:  MOVLB  0
5376:  CALL   3048
....................       //glcd_text57(60, 0, Duracion40, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, T40, 1, ON);            // Write the new voltage         
537A:  MOVLW  3F
537C:  MOVLB  3
537E:  MOVWF  xC3
5380:  MOVLW  0A
5382:  MOVWF  xC4
5384:  MOVLW  01
5386:  MOVWF  xC6
5388:  MOVLW  31
538A:  MOVWF  xC5
538C:  MOVLW  01
538E:  MOVWF  xC7
5390:  MOVWF  xC8
5392:  MOVLB  0
5394:  CALL   289A
....................       glcd_text57(63, 20, Test40, 1, ON);            // Write the new voltage         
5398:  MOVLW  3F
539A:  MOVLB  3
539C:  MOVWF  xC3
539E:  MOVLW  14
53A0:  MOVWF  xC4
53A2:  MOVLW  01
53A4:  MOVWF  xC6
53A6:  MOVLW  39
53A8:  MOVWF  xC5
53AA:  MOVLW  01
53AC:  MOVWF  xC7
53AE:  MOVWF  xC8
53B0:  MOVLB  0
53B2:  CALL   289A
....................       glcd_text57(63, 30, Tsec40, 1, ON);            // Write the new voltage         
53B6:  MOVLW  3F
53B8:  MOVLB  3
53BA:  MOVWF  xC3
53BC:  MOVLW  1E
53BE:  MOVWF  xC4
53C0:  MOVLW  01
53C2:  MOVWF  xC6
53C4:  MOVLW  42
53C6:  MOVWF  xC5
53C8:  MOVLW  01
53CA:  MOVWF  xC7
53CC:  MOVWF  xC8
53CE:  MOVLB  0
53D0:  CALL   289A
....................        
....................       if(LEFT)// Si oprime Izquier|da 
53D4:  BSF    F92.5
53D6:  BTFSS  F80.5
53D8:  BRA    5416
....................        {  if(Flanco3 == 0)  
53DA:  MOVLB  2
53DC:  BTFSC  x1A.0
53DE:  BRA    5414
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
53E0:  BSF    x1A.0
53E2:  MOVLW  1E
53E4:  MOVLB  3
53E6:  MOVWF  xB4
53E8:  MOVLB  0
53EA:  CALL   24DA
53EE:  MOVLW  10
53F0:  MOVLB  2
53F2:  MOVWF  x0D
53F4:  MOVFF  20F,213
53F8:  MOVFF  20F,211
53FC:  MOVLW  1E
53FE:  MOVLB  3
5400:  MOVWF  xB4
5402:  MOVLB  0
5404:  CALL   24DA
5408:  MOVLB  3
540A:  CLRF   xB0
540C:  MOVLB  0
540E:  CALL   2644
5412:  MOVLB  2
....................         } 
....................          else 
5414:  BRA    541A
....................             {Flanco3 = 0;}                 
5416:  MOVLB  2
5418:  BCF    x1A.0
....................  
....................       if(RIGHT)// Si oprime derecha 
541A:  BSF    F92.3
541C:  BTFSS  F80.3
541E:  BRA    54AA
....................       {  if(Flanco1 == 0)  
5420:  BTFSC  x19.6
5422:  BRA    54A8
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5424:  BSF    x19.6
5426:  MOVLW  64
5428:  MOVWF  x0D
542A:  MOVFF  20F,213
542E:  MOVFF  20F,211
5432:  MOVLW  1E
5434:  MOVLB  3
5436:  MOVWF  xB4
5438:  MOVLB  0
543A:  CALL   24DA
543E:  MOVLB  3
5440:  CLRF   xB0
5442:  MOVLB  0
5444:  CALL   2644
5448:  MOVLW  20
544A:  MOVLB  2
544C:  MOVWF  x0E
544E:  MOVLW  10
5450:  MOVWF  x0F
5452:  MOVWF  x14
5454:  MOVLW  20
5456:  MOVWF  x15
....................             estadot40=1;estadoc=0;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=134; 
5458:  BSF    x19.0
545A:  BCF    x19.1
545C:  BCF    x19.2
545E:  BCF    x19.3
5460:  BCF    x19.4
5462:  CLRF   x18
5464:  MOVLB  3
5466:  CLRF   xC3
5468:  MOVLW  37
546A:  MOVWF  xC4
546C:  CLRF   xC6
546E:  MOVLW  DF
5470:  MOVWF  xC5
5472:  MOVLW  01
5474:  MOVWF  xC7
5476:  MOVWF  xC8
5478:  MOVLB  0
547A:  CALL   289A
547E:  MOVLW  86
5480:  MOVLB  2
5482:  MOVWF  x34
....................             glcd_rect(25, 18, 40, 53, NO, ON);enable_interrupts(global);}} 
5484:  MOVLW  19
5486:  MOVLB  3
5488:  MOVWF  xC5
548A:  MOVLW  12
548C:  MOVWF  xC6
548E:  MOVLW  28
5490:  MOVWF  xC7
5492:  MOVLW  35
5494:  MOVWF  xC8
5496:  CLRF   xC9
5498:  MOVLW  01
549A:  MOVWF  xCA
549C:  MOVLB  0
549E:  CALL   2F18
54A2:  MOVLW  C0
54A4:  IORWF  FF2,F
54A6:  MOVLB  2
....................          else 
54A8:  BRA    54AC
....................             {Flanco1 = 0;}    
54AA:  BCF    x19.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==41){ // Menu de Caucho      
54AC:  MOVF   x0D,W
54AE:  SUBLW  29
54B0:  BTFSS  FD8.2
54B2:  BRA    563E
....................       glcd_imagen(2); //Guante 
54B4:  MOVLW  02
54B6:  MOVLB  3
54B8:  MOVWF  xAF
54BA:  MOVLB  0
54BC:  CALL   317E
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
54C0:  MOVLW  3F
54C2:  MOVLB  3
54C4:  MOVWF  xC5
54C6:  MOVLW  28
54C8:  MOVWF  xC6
54CA:  MOVLW  64
54CC:  MOVWF  xC7
54CE:  MOVLW  35
54D0:  MOVWF  xC8
54D2:  MOVLW  01
54D4:  MOVWF  xC9
54D6:  MOVWF  xCA
54D8:  MOVLB  0
54DA:  CALL   2F18
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
54DE:  MOVLW  4C
54E0:  MOVLB  3
54E2:  MOVWF  xC3
54E4:  MOVLW  2C
54E6:  MOVWF  xC4
54E8:  MOVLW  01
54EA:  MOVWF  xC6
54EC:  MOVLW  B1
54EE:  MOVWF  xC5
54F0:  MOVLW  01
54F2:  MOVWF  xC7
54F4:  CLRF   xC8
54F6:  MOVLB  0
54F8:  CALL   289A
....................          
....................       mensajes(5,55); 
54FC:  MOVLW  05
54FE:  MOVLB  3
5500:  MOVWF  xB0
5502:  MOVLW  37
5504:  MOVWF  xB1
5506:  MOVLB  0
5508:  CALL   3048
....................       //glcd_text57(60, 0, DuracionC, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TC, 1, ON);            // Write the new voltage         
550C:  MOVLW  3F
550E:  MOVLB  3
5510:  MOVWF  xC3
5512:  MOVLW  0A
5514:  MOVWF  xC4
5516:  MOVLW  01
5518:  MOVWF  xC6
551A:  MOVLW  4E
551C:  MOVWF  xC5
551E:  MOVLW  01
5520:  MOVWF  xC7
5522:  MOVWF  xC8
5524:  MOVLB  0
5526:  CALL   289A
....................       glcd_text57(63, 20, TestC, 1, ON);            // Write the new voltage         
552A:  MOVLW  3F
552C:  MOVLB  3
552E:  MOVWF  xC3
5530:  MOVLW  14
5532:  MOVWF  xC4
5534:  MOVLW  01
5536:  MOVWF  xC6
5538:  MOVLW  56
553A:  MOVWF  xC5
553C:  MOVLW  01
553E:  MOVWF  xC7
5540:  MOVWF  xC8
5542:  MOVLB  0
5544:  CALL   289A
....................       glcd_text57(63, 30, TsecC, 1, ON);            // Write the new voltage         
5548:  MOVLW  3F
554A:  MOVLB  3
554C:  MOVWF  xC3
554E:  MOVLW  1E
5550:  MOVWF  xC4
5552:  MOVLW  01
5554:  MOVWF  xC6
5556:  MOVLW  60
5558:  MOVWF  xC5
555A:  MOVLW  01
555C:  MOVWF  xC7
555E:  MOVWF  xC8
5560:  MOVLB  0
5562:  CALL   289A
....................        
....................       if(LEFT)// Si oprime Izquier|da 
5566:  BSF    F92.5
5568:  BTFSS  F80.5
556A:  BRA    55A8
....................        {  if(Flanco3 == 0)  
556C:  MOVLB  2
556E:  BTFSC  x1A.0
5570:  BRA    55A6
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5572:  BSF    x1A.0
5574:  MOVLW  1E
5576:  MOVLB  3
5578:  MOVWF  xB4
557A:  MOVLB  0
557C:  CALL   24DA
5580:  MOVLW  10
5582:  MOVLB  2
5584:  MOVWF  x0D
5586:  MOVFF  20F,213
558A:  MOVFF  20F,211
558E:  MOVLW  1E
5590:  MOVLB  3
5592:  MOVWF  xB4
5594:  MOVLB  0
5596:  CALL   24DA
559A:  MOVLB  3
559C:  CLRF   xB0
559E:  MOVLB  0
55A0:  CALL   2644
55A4:  MOVLB  2
....................         } 
....................          else 
55A6:  BRA    55AC
....................             {Flanco3 = 0;}                 
55A8:  MOVLB  2
55AA:  BCF    x1A.0
....................  
....................       if(RIGHT)// Si oprime derecha 
55AC:  BSF    F92.3
55AE:  BTFSS  F80.3
55B0:  BRA    563C
....................       {  if(Flanco1 == 0)  
55B2:  BTFSC  x19.6
55B4:  BRA    563A
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
55B6:  BSF    x19.6
55B8:  MOVLW  64
55BA:  MOVWF  x0D
55BC:  MOVFF  20F,213
55C0:  MOVFF  20F,211
55C4:  MOVLW  1E
55C6:  MOVLB  3
55C8:  MOVWF  xB4
55CA:  MOVLB  0
55CC:  CALL   24DA
55D0:  MOVLB  3
55D2:  CLRF   xB0
55D4:  MOVLB  0
55D6:  CALL   2644
55DA:  MOVLW  20
55DC:  MOVLB  2
55DE:  MOVWF  x0E
55E0:  MOVLW  10
55E2:  MOVWF  x0F
55E4:  MOVWF  x14
55E6:  MOVLW  20
55E8:  MOVWF  x15
....................             estadot40=0;estadoc=1;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=121; 
55EA:  BCF    x19.0
55EC:  BSF    x19.1
55EE:  BCF    x19.2
55F0:  BCF    x19.3
55F2:  BCF    x19.4
55F4:  CLRF   x18
55F6:  MOVLB  3
55F8:  CLRF   xC3
55FA:  MOVLW  37
55FC:  MOVWF  xC4
55FE:  CLRF   xC6
5600:  MOVLW  DF
5602:  MOVWF  xC5
5604:  MOVLW  01
5606:  MOVWF  xC7
5608:  MOVWF  xC8
560A:  MOVLB  0
560C:  CALL   289A
5610:  MOVLW  79
5612:  MOVLB  2
5614:  MOVWF  x34
....................             glcd_rect(25, 18, 40, 53, NO, ON);enable_interrupts(global);}} 
5616:  MOVLW  19
5618:  MOVLB  3
561A:  MOVWF  xC5
561C:  MOVLW  12
561E:  MOVWF  xC6
5620:  MOVLW  28
5622:  MOVWF  xC7
5624:  MOVLW  35
5626:  MOVWF  xC8
5628:  CLRF   xC9
562A:  MOVLW  01
562C:  MOVWF  xCA
562E:  MOVLB  0
5630:  CALL   2F18
5634:  MOVLW  C0
5636:  IORWF  FF2,F
5638:  MOVLB  2
....................          else 
563A:  BRA    563E
....................             {Flanco1 = 0;}    
563C:  BCF    x19.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==49){ // Menu de Proceso Personalizado 
563E:  MOVF   x0D,W
5640:  SUBLW  31
5642:  BTFSS  FD8.2
5644:  GOTO   620A
....................       glcd_text57(10, 0, T_esterilizacion, 1, ON);            // Escribe Menu en Tamaño 2.          
5648:  MOVLW  0A
564A:  MOVLB  3
564C:  MOVWF  xC3
564E:  CLRF   xC4
5650:  MOVLW  01
5652:  MOVWF  xC6
5654:  MOVLW  C0
5656:  MOVWF  xC5
5658:  MOVLW  01
565A:  MOVWF  xC7
565C:  MOVWF  xC8
565E:  MOVLB  0
5660:  CALL   289A
....................        
....................       if(UP)//Si oprime hacia arriba 
5664:  BSF    F92.1
5666:  BTFSS  F80.1
5668:  BRA    5704
....................       {  if(Flanco == 0)  
566A:  MOVLB  2
566C:  BTFSC  x19.5
566E:  BRA    5702
....................             {Flanco = 1;delay_ms(30); 
5670:  BSF    x19.5
5672:  MOVLW  1E
5674:  MOVLB  3
5676:  MOVWF  xB4
5678:  MOVLB  0
567A:  CALL   24DA
....................             if((Flx==36)&&(Fly==8)) 
567E:  MOVLB  2
5680:  MOVF   x16,W
5682:  SUBLW  24
5684:  BNZ   568E
5686:  MOVF   x17,W
5688:  SUBLW  08
568A:  BNZ   568E
....................                {Testerilizacionp[3]++;} 
568C:  INCF   x2A,F
....................             if((Flx==42)&&(Fly==8)) 
568E:  MOVF   x16,W
5690:  SUBLW  2A
5692:  BNZ   569C
5694:  MOVF   x17,W
5696:  SUBLW  08
5698:  BNZ   569C
....................                {Testerilizacionp[2]++;} 
569A:  INCF   x29,F
....................             if((Flx==54)&&(Fly==8)) 
569C:  MOVF   x16,W
569E:  SUBLW  36
56A0:  BNZ   56AA
56A2:  MOVF   x17,W
56A4:  SUBLW  08
56A6:  BNZ   56AA
....................                {Testerilizacionp[1]++;} 
56A8:  INCF   x28,F
....................             if((Flx==60)&&(Fly==8)) 
56AA:  MOVF   x16,W
56AC:  SUBLW  3C
56AE:  BNZ   56B8
56B0:  MOVF   x17,W
56B2:  SUBLW  08
56B4:  BNZ   56B8
....................                {Testerilizacionp[0]++;} 
56B6:  INCF   x27,F
....................              
....................             if((Flx==36)&&(Fly==40)) 
56B8:  MOVF   x16,W
56BA:  SUBLW  24
56BC:  BNZ   56C6
56BE:  MOVF   x17,W
56C0:  SUBLW  28
56C2:  BNZ   56C6
....................                {Tsecadop[3]++;} 
56C4:  INCF   x32,F
....................             if((Flx==42)&&(Fly==40)) 
56C6:  MOVF   x16,W
56C8:  SUBLW  2A
56CA:  BNZ   56D4
56CC:  MOVF   x17,W
56CE:  SUBLW  28
56D0:  BNZ   56D4
....................                {Tsecadop[2]++;} 
56D2:  INCF   x31,F
....................             if((Flx==54)&&(Fly==40)) 
56D4:  MOVF   x16,W
56D6:  SUBLW  36
56D8:  BNZ   56E2
56DA:  MOVF   x17,W
56DC:  SUBLW  28
56DE:  BNZ   56E2
....................                {Tsecadop[1]++;} 
56E0:  INCF   x30,F
....................             if((Flx==60)&&(Fly==40)) 
56E2:  MOVF   x16,W
56E4:  SUBLW  3C
56E6:  BNZ   56F0
56E8:  MOVF   x17,W
56EA:  SUBLW  28
56EC:  BNZ   56F0
....................                {Tsecadop[0]++;}   
56EE:  INCF   x2F,F
....................             if(Fly==24)    
56F0:  MOVF   x17,W
56F2:  SUBLW  18
56F4:  BNZ   56FA
....................             {unidad=1;} 
56F6:  MOVLW  01
56F8:  MOVWF  x10
....................              
....................             if(Fly==56) 
56FA:  MOVF   x17,W
56FC:  SUBLW  38
56FE:  BNZ   5702
....................             {Setpoint++;} 
5700:  INCF   x34,F
....................             } 
....................        } 
....................          else 
5702:  BRA    5708
....................             {Flanco = 0;} 
5704:  MOVLB  2
5706:  BCF    x19.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5708:  BSF    F92.2
570A:  BTFSS  F80.2
570C:  BRA    57A4
....................       {  if(Flanco2 == 0)  
570E:  BTFSC  x19.7
5710:  BRA    57A2
....................             {Flanco2 = 1;delay_ms(30); 
5712:  BSF    x19.7
5714:  MOVLW  1E
5716:  MOVLB  3
5718:  MOVWF  xB4
571A:  MOVLB  0
571C:  CALL   24DA
....................             if((Flx==36)&&(Fly==8)) 
5720:  MOVLB  2
5722:  MOVF   x16,W
5724:  SUBLW  24
5726:  BNZ   5730
5728:  MOVF   x17,W
572A:  SUBLW  08
572C:  BNZ   5730
....................                {Testerilizacionp[3]--;} 
572E:  DECF   x2A,F
....................             if((Flx==42)&&(Fly==8)) 
5730:  MOVF   x16,W
5732:  SUBLW  2A
5734:  BNZ   573E
5736:  MOVF   x17,W
5738:  SUBLW  08
573A:  BNZ   573E
....................                {Testerilizacionp[2]--;} 
573C:  DECF   x29,F
....................             if((Flx==54)&&(Fly==8)) 
573E:  MOVF   x16,W
5740:  SUBLW  36
5742:  BNZ   574C
5744:  MOVF   x17,W
5746:  SUBLW  08
5748:  BNZ   574C
....................                {Testerilizacionp[1]--;} 
574A:  DECF   x28,F
....................             if((Flx==60)&&(Fly==8)) 
574C:  MOVF   x16,W
574E:  SUBLW  3C
5750:  BNZ   575A
5752:  MOVF   x17,W
5754:  SUBLW  08
5756:  BNZ   575A
....................                {Testerilizacionp[0]--;} 
5758:  DECF   x27,F
....................              
....................             if((Flx==36)&&(Fly==40)) 
575A:  MOVF   x16,W
575C:  SUBLW  24
575E:  BNZ   5768
5760:  MOVF   x17,W
5762:  SUBLW  28
5764:  BNZ   5768
....................                {Tsecadop[3]--;} 
5766:  DECF   x32,F
....................             if((Flx==42)&&(Fly==40)) 
5768:  MOVF   x16,W
576A:  SUBLW  2A
576C:  BNZ   5776
576E:  MOVF   x17,W
5770:  SUBLW  28
5772:  BNZ   5776
....................                {Tsecadop[2]--;} 
5774:  DECF   x31,F
....................             if((Flx==54)&&(Fly==40)) 
5776:  MOVF   x16,W
5778:  SUBLW  36
577A:  BNZ   5784
577C:  MOVF   x17,W
577E:  SUBLW  28
5780:  BNZ   5784
....................                {Tsecadop[1]--;} 
5782:  DECF   x30,F
....................             if((Flx==60)&&(Fly==40)) 
5784:  MOVF   x16,W
5786:  SUBLW  3C
5788:  BNZ   5792
578A:  MOVF   x17,W
578C:  SUBLW  28
578E:  BNZ   5792
....................                {Tsecadop[0]--;}   
5790:  DECF   x2F,F
....................             if(Fly==24)    
5792:  MOVF   x17,W
5794:  SUBLW  18
5796:  BNZ   579A
....................                {unidad=0;} 
5798:  CLRF   x10
....................             if(Fly==56) 
579A:  MOVF   x17,W
579C:  SUBLW  38
579E:  BNZ   57A2
....................             {Setpoint--;}                
57A0:  DECF   x34,F
....................             } 
....................       } 
....................          else 
57A2:  BRA    57A6
....................             {Flanco2 = 0;} 
57A4:  BCF    x19.7
....................              
....................             if((Flx==36)&&(Fly==8)) 
57A6:  MOVF   x16,W
57A8:  SUBLW  24
57AA:  BNZ   5814
57AC:  MOVF   x17,W
57AE:  SUBLW  08
57B0:  BNZ   5814
....................                {displayTiempo(Testerilizacionp[3],36,8,2);displayTiempo(Testerilizacionp[2],42,8,1); 
57B2:  MOVFF  22A,3B0
57B6:  MOVLW  24
57B8:  MOVLB  3
57BA:  MOVWF  xB1
57BC:  MOVLW  08
57BE:  MOVWF  xB2
57C0:  MOVLW  02
57C2:  MOVWF  xB3
57C4:  MOVLB  0
57C6:  CALL   3662
57CA:  MOVFF  229,3B0
57CE:  MOVLW  2A
57D0:  MOVLB  3
57D2:  MOVWF  xB1
57D4:  MOVLW  08
57D6:  MOVWF  xB2
57D8:  MOVLW  01
57DA:  MOVWF  xB3
57DC:  MOVLB  0
57DE:  CALL   3662
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);} 
57E2:  MOVFF  228,3B0
57E6:  MOVLW  36
57E8:  MOVLB  3
57EA:  MOVWF  xB1
57EC:  MOVLW  08
57EE:  MOVWF  xB2
57F0:  MOVLW  01
57F2:  MOVWF  xB3
57F4:  MOVLB  0
57F6:  CALL   3662
57FA:  MOVFF  227,3B0
57FE:  MOVLW  3C
5800:  MOVLB  3
5802:  MOVWF  xB1
5804:  MOVLW  08
5806:  MOVWF  xB2
5808:  MOVLW  01
580A:  MOVWF  xB3
580C:  MOVLB  0
580E:  CALL   3662
5812:  MOVLB  2
....................             if((Flx==42)&&(Fly==8)) 
5814:  MOVF   x16,W
5816:  SUBLW  2A
5818:  BNZ   5882
581A:  MOVF   x17,W
581C:  SUBLW  08
581E:  BNZ   5882
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,2); 
5820:  MOVFF  22A,3B0
5824:  MOVLW  24
5826:  MOVLB  3
5828:  MOVWF  xB1
582A:  MOVLW  08
582C:  MOVWF  xB2
582E:  MOVLW  01
5830:  MOVWF  xB3
5832:  MOVLB  0
5834:  CALL   3662
5838:  MOVFF  229,3B0
583C:  MOVLW  2A
583E:  MOVLB  3
5840:  MOVWF  xB1
5842:  MOVLW  08
5844:  MOVWF  xB2
5846:  MOVLW  02
5848:  MOVWF  xB3
584A:  MOVLB  0
584C:  CALL   3662
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);} 
5850:  MOVFF  228,3B0
5854:  MOVLW  36
5856:  MOVLB  3
5858:  MOVWF  xB1
585A:  MOVLW  08
585C:  MOVWF  xB2
585E:  MOVLW  01
5860:  MOVWF  xB3
5862:  MOVLB  0
5864:  CALL   3662
5868:  MOVFF  227,3B0
586C:  MOVLW  3C
586E:  MOVLB  3
5870:  MOVWF  xB1
5872:  MOVLW  08
5874:  MOVWF  xB2
5876:  MOVLW  01
5878:  MOVWF  xB3
587A:  MOVLB  0
587C:  CALL   3662
5880:  MOVLB  2
....................             if((Flx==54)&&(Fly==8)) 
5882:  MOVF   x16,W
5884:  SUBLW  36
5886:  BNZ   58F0
5888:  MOVF   x17,W
588A:  SUBLW  08
588C:  BNZ   58F0
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
588E:  MOVFF  22A,3B0
5892:  MOVLW  24
5894:  MOVLB  3
5896:  MOVWF  xB1
5898:  MOVLW  08
589A:  MOVWF  xB2
589C:  MOVLW  01
589E:  MOVWF  xB3
58A0:  MOVLB  0
58A2:  CALL   3662
58A6:  MOVFF  229,3B0
58AA:  MOVLW  2A
58AC:  MOVLB  3
58AE:  MOVWF  xB1
58B0:  MOVLW  08
58B2:  MOVWF  xB2
58B4:  MOVLW  01
58B6:  MOVWF  xB3
58B8:  MOVLB  0
58BA:  CALL   3662
....................                displayTiempo(Testerilizacionp[1],54,8,2);displayTiempo(Testerilizacionp[0],60,8,1);} 
58BE:  MOVFF  228,3B0
58C2:  MOVLW  36
58C4:  MOVLB  3
58C6:  MOVWF  xB1
58C8:  MOVLW  08
58CA:  MOVWF  xB2
58CC:  MOVLW  02
58CE:  MOVWF  xB3
58D0:  MOVLB  0
58D2:  CALL   3662
58D6:  MOVFF  227,3B0
58DA:  MOVLW  3C
58DC:  MOVLB  3
58DE:  MOVWF  xB1
58E0:  MOVLW  08
58E2:  MOVWF  xB2
58E4:  MOVLW  01
58E6:  MOVWF  xB3
58E8:  MOVLB  0
58EA:  CALL   3662
58EE:  MOVLB  2
....................             if((Flx==60)&&(Fly==8)) 
58F0:  MOVF   x16,W
58F2:  SUBLW  3C
58F4:  BNZ   595E
58F6:  MOVF   x17,W
58F8:  SUBLW  08
58FA:  BNZ   595E
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
58FC:  MOVFF  22A,3B0
5900:  MOVLW  24
5902:  MOVLB  3
5904:  MOVWF  xB1
5906:  MOVLW  08
5908:  MOVWF  xB2
590A:  MOVLW  01
590C:  MOVWF  xB3
590E:  MOVLB  0
5910:  CALL   3662
5914:  MOVFF  229,3B0
5918:  MOVLW  2A
591A:  MOVLB  3
591C:  MOVWF  xB1
591E:  MOVLW  08
5920:  MOVWF  xB2
5922:  MOVLW  01
5924:  MOVWF  xB3
5926:  MOVLB  0
5928:  CALL   3662
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,2);}   
592C:  MOVFF  228,3B0
5930:  MOVLW  36
5932:  MOVLB  3
5934:  MOVWF  xB1
5936:  MOVLW  08
5938:  MOVWF  xB2
593A:  MOVLW  01
593C:  MOVWF  xB3
593E:  MOVLB  0
5940:  CALL   3662
5944:  MOVFF  227,3B0
5948:  MOVLW  3C
594A:  MOVLB  3
594C:  MOVWF  xB1
594E:  MOVLW  08
5950:  MOVWF  xB2
5952:  MOVLW  02
5954:  MOVWF  xB3
5956:  MOVLB  0
5958:  CALL   3662
595C:  MOVLB  2
....................             if((Fly!=8)) 
595E:  MOVF   x17,W
5960:  SUBLW  08
5962:  BZ    59C4
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
5964:  MOVFF  22A,3B0
5968:  MOVLW  24
596A:  MOVLB  3
596C:  MOVWF  xB1
596E:  MOVLW  08
5970:  MOVWF  xB2
5972:  MOVLW  01
5974:  MOVWF  xB3
5976:  MOVLB  0
5978:  CALL   3662
597C:  MOVFF  229,3B0
5980:  MOVLW  2A
5982:  MOVLB  3
5984:  MOVWF  xB1
5986:  MOVLW  08
5988:  MOVWF  xB2
598A:  MOVLW  01
598C:  MOVWF  xB3
598E:  MOVLB  0
5990:  CALL   3662
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);}   
5994:  MOVFF  228,3B0
5998:  MOVLW  36
599A:  MOVLB  3
599C:  MOVWF  xB1
599E:  MOVLW  08
59A0:  MOVWF  xB2
59A2:  MOVLW  01
59A4:  MOVWF  xB3
59A6:  MOVLB  0
59A8:  CALL   3662
59AC:  MOVFF  227,3B0
59B0:  MOVLW  3C
59B2:  MOVLB  3
59B4:  MOVWF  xB1
59B6:  MOVLW  08
59B8:  MOVWF  xB2
59BA:  MOVLW  01
59BC:  MOVWF  xB3
59BE:  MOVLB  0
59C0:  CALL   3662
....................              
....................              
....................       glcd_text57(15, 17, Desfogue, 1, ON);            // Escribe Menu en Tamaño 2.    
59C4:  MOVLW  0F
59C6:  MOVLB  3
59C8:  MOVWF  xC3
59CA:  MOVLW  11
59CC:  MOVWF  xC4
59CE:  MOVLW  01
59D0:  MOVWF  xC6
59D2:  MOVLW  DA
59D4:  MOVWF  xC5
59D6:  MOVLW  01
59D8:  MOVWF  xC7
59DA:  MOVWF  xC8
59DC:  MOVLB  0
59DE:  CALL   289A
....................              
....................             if(Fly==24) 
59E2:  MOVLB  2
59E4:  MOVF   x17,W
59E6:  SUBLW  18
59E8:  BNZ   5A74
....................                {if(unidad==1) 
59EA:  DECFSZ x10,W
59EC:  BRA    5A30
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, ON);glcd_text57(48, 25, Si, 1, OFF);Liquid=0;} 
59EE:  MOVLW  30
59F0:  MOVLB  3
59F2:  MOVWF  xC5
59F4:  MOVLW  19
59F6:  MOVWF  xC6
59F8:  MOVLW  3B
59FA:  MOVWF  xC7
59FC:  MOVLW  20
59FE:  MOVWF  xC8
5A00:  MOVLW  01
5A02:  MOVWF  xC9
5A04:  MOVWF  xCA
5A06:  MOVLB  0
5A08:  CALL   2F18
5A0C:  MOVLW  30
5A0E:  MOVLB  3
5A10:  MOVWF  xC3
5A12:  MOVLW  19
5A14:  MOVWF  xC4
5A16:  MOVLW  01
5A18:  MOVWF  xC6
5A1A:  MOVLW  EA
5A1C:  MOVWF  xC5
5A1E:  MOVLW  01
5A20:  MOVWF  xC7
5A22:  CLRF   xC8
5A24:  MOVLB  0
5A26:  CALL   289A
5A2A:  MOVLB  2
5A2C:  CLRF   x18
....................                 else 
5A2E:  BRA    5A72
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, ON);glcd_text57(48, 25, Noo, 1, OFF);Liquid=1;} 
5A30:  MOVLW  30
5A32:  MOVLB  3
5A34:  MOVWF  xC5
5A36:  MOVLW  19
5A38:  MOVWF  xC6
5A3A:  MOVLW  3B
5A3C:  MOVWF  xC7
5A3E:  MOVLW  20
5A40:  MOVWF  xC8
5A42:  MOVLW  01
5A44:  MOVWF  xC9
5A46:  MOVWF  xCA
5A48:  MOVLB  0
5A4A:  CALL   2F18
5A4E:  MOVLW  30
5A50:  MOVLB  3
5A52:  MOVWF  xC3
5A54:  MOVLW  19
5A56:  MOVWF  xC4
5A58:  MOVLW  01
5A5A:  MOVWF  xC6
5A5C:  MOVLW  ED
5A5E:  MOVWF  xC5
5A60:  MOVLW  01
5A62:  MOVWF  xC7
5A64:  CLRF   xC8
5A66:  MOVLB  0
5A68:  CALL   289A
5A6C:  MOVLW  01
5A6E:  MOVLB  2
5A70:  MOVWF  x18
....................                } 
....................             else 
5A72:  BRA    5AF4
....................                {if(unidad==1) 
5A74:  DECFSZ x10,W
5A76:  BRA    5AB6
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, OFF);glcd_text57(48, 25, Si, 1, ON);} 
5A78:  MOVLW  30
5A7A:  MOVLB  3
5A7C:  MOVWF  xC5
5A7E:  MOVLW  19
5A80:  MOVWF  xC6
5A82:  MOVLW  3B
5A84:  MOVWF  xC7
5A86:  MOVLW  20
5A88:  MOVWF  xC8
5A8A:  MOVLW  01
5A8C:  MOVWF  xC9
5A8E:  CLRF   xCA
5A90:  MOVLB  0
5A92:  CALL   2F18
5A96:  MOVLW  30
5A98:  MOVLB  3
5A9A:  MOVWF  xC3
5A9C:  MOVLW  19
5A9E:  MOVWF  xC4
5AA0:  MOVLW  01
5AA2:  MOVWF  xC6
5AA4:  MOVLW  EA
5AA6:  MOVWF  xC5
5AA8:  MOVLW  01
5AAA:  MOVWF  xC7
5AAC:  MOVWF  xC8
5AAE:  MOVLB  0
5AB0:  CALL   289A
....................                 else 
5AB4:  BRA    5AF2
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, OFF);glcd_text57(48, 25, Noo, 1, ON);} 
5AB6:  MOVLW  30
5AB8:  MOVLB  3
5ABA:  MOVWF  xC5
5ABC:  MOVLW  19
5ABE:  MOVWF  xC6
5AC0:  MOVLW  3B
5AC2:  MOVWF  xC7
5AC4:  MOVLW  20
5AC6:  MOVWF  xC8
5AC8:  MOVLW  01
5ACA:  MOVWF  xC9
5ACC:  CLRF   xCA
5ACE:  MOVLB  0
5AD0:  CALL   2F18
5AD4:  MOVLW  30
5AD6:  MOVLB  3
5AD8:  MOVWF  xC3
5ADA:  MOVLW  19
5ADC:  MOVWF  xC4
5ADE:  MOVLW  01
5AE0:  MOVWF  xC6
5AE2:  MOVLW  ED
5AE4:  MOVWF  xC5
5AE6:  MOVLW  01
5AE8:  MOVWF  xC7
5AEA:  MOVWF  xC8
5AEC:  MOVLB  0
5AEE:  CALL   289A
5AF2:  MOVLB  2
....................                } 
....................        
....................       if((Flx>60)&&(Fly<40))             
5AF4:  MOVF   x16,W
5AF6:  SUBLW  3C
5AF8:  BC    5B08
5AFA:  MOVF   x17,W
5AFC:  SUBLW  27
5AFE:  BNC   5B08
....................          {Flx=36;Fly=Fly+16;} 
5B00:  MOVLW  24
5B02:  MOVWF  x16
5B04:  MOVLW  10
5B06:  ADDWF  x17,F
....................       if((Flx<36)&&(Fly<=40))             
5B08:  MOVF   x16,W
5B0A:  SUBLW  23
5B0C:  BNC   5B1C
5B0E:  MOVF   x17,W
5B10:  SUBLW  28
5B12:  BNC   5B1C
....................          {Flx=36;Fly=8;}    
5B14:  MOVLW  24
5B16:  MOVWF  x16
5B18:  MOVLW  08
5B1A:  MOVWF  x17
....................        
....................       glcd_text57(48, 8, Vacio, 1, ON); 
5B1C:  MOVLW  30
5B1E:  MOVLB  3
5B20:  MOVWF  xC3
5B22:  MOVLW  08
5B24:  MOVWF  xC4
5B26:  MOVLW  01
5B28:  MOVWF  xC6
5B2A:  MOVLW  29
5B2C:  MOVWF  xC5
5B2E:  MOVLW  01
5B30:  MOVWF  xC7
5B32:  MOVWF  xC8
5B34:  MOVLB  0
5B36:  CALL   289A
....................       glcd_text57(48, 42, Vacio, 1, ON); 
5B3A:  MOVLW  30
5B3C:  MOVLB  3
5B3E:  MOVWF  xC3
5B40:  MOVLW  2A
5B42:  MOVWF  xC4
5B44:  MOVLW  01
5B46:  MOVWF  xC6
5B48:  MOVLW  29
5B4A:  MOVWF  xC5
5B4C:  MOVLW  01
5B4E:  MOVWF  xC7
5B50:  MOVWF  xC8
5B52:  MOVLB  0
5B54:  CALL   289A
....................        
....................        
....................       glcd_text57(30, 34, T_secado, 1, ON);            // Escribe Menu en Tamaño 2.    
5B58:  MOVLW  1E
5B5A:  MOVLB  3
5B5C:  MOVWF  xC3
5B5E:  MOVLW  22
5B60:  MOVWF  xC4
5B62:  MOVLW  01
5B64:  MOVWF  xC6
5B66:  MOVLW  D1
5B68:  MOVWF  xC5
5B6A:  MOVLW  01
5B6C:  MOVWF  xC7
5B6E:  MOVWF  xC8
5B70:  MOVLB  0
5B72:  CALL   289A
....................       displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
5B76:  MOVFF  232,3B0
5B7A:  MOVLW  24
5B7C:  MOVLB  3
5B7E:  MOVWF  xB1
5B80:  MOVLW  2A
5B82:  MOVWF  xB2
5B84:  MOVLW  01
5B86:  MOVWF  xB3
5B88:  MOVLB  0
5B8A:  CALL   3662
5B8E:  MOVFF  231,3B0
5B92:  MOVLW  2A
5B94:  MOVLB  3
5B96:  MOVWF  xB1
5B98:  MOVWF  xB2
5B9A:  MOVLW  01
5B9C:  MOVWF  xB3
5B9E:  MOVLB  0
5BA0:  CALL   3662
....................       displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1); 
5BA4:  MOVFF  230,3B0
5BA8:  MOVLW  36
5BAA:  MOVLB  3
5BAC:  MOVWF  xB1
5BAE:  MOVLW  2A
5BB0:  MOVWF  xB2
5BB2:  MOVLW  01
5BB4:  MOVWF  xB3
5BB6:  MOVLB  0
5BB8:  CALL   3662
5BBC:  MOVFF  22F,3B0
5BC0:  MOVLW  3C
5BC2:  MOVLB  3
5BC4:  MOVWF  xB1
5BC6:  MOVLW  2A
5BC8:  MOVWF  xB2
5BCA:  MOVLW  01
5BCC:  MOVWF  xB3
5BCE:  MOVLB  0
5BD0:  CALL   3662
....................  
....................             if(Fly==40) // Si posición en y esta en donde aparece lo de tiempo de secado 
5BD4:  MOVLB  2
5BD6:  MOVF   x17,W
5BD8:  SUBLW  28
5BDA:  BTFSS  FD8.2
5BDC:  BRA    5D9E
....................                {if(unidad==1) // Si se acepto el desfogue rapido. 
5BDE:  DECFSZ x10,W
5BE0:  BRA    5D90
....................                 
....................                   {  if(Flx==36) // Si esta en la decena de minutos. 
5BE2:  MOVF   x16,W
5BE4:  SUBLW  24
5BE6:  BNZ   5C48
....................                         {displayTiempo(Tsecadop[3],36,42,2);displayTiempo(Tsecadop[2],42,42,1); 
5BE8:  MOVFF  232,3B0
5BEC:  MOVLW  24
5BEE:  MOVLB  3
5BF0:  MOVWF  xB1
5BF2:  MOVLW  2A
5BF4:  MOVWF  xB2
5BF6:  MOVLW  02
5BF8:  MOVWF  xB3
5BFA:  MOVLB  0
5BFC:  CALL   3662
5C00:  MOVFF  231,3B0
5C04:  MOVLW  2A
5C06:  MOVLB  3
5C08:  MOVWF  xB1
5C0A:  MOVWF  xB2
5C0C:  MOVLW  01
5C0E:  MOVWF  xB3
5C10:  MOVLB  0
5C12:  CALL   3662
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1);} 
5C16:  MOVFF  230,3B0
5C1A:  MOVLW  36
5C1C:  MOVLB  3
5C1E:  MOVWF  xB1
5C20:  MOVLW  2A
5C22:  MOVWF  xB2
5C24:  MOVLW  01
5C26:  MOVWF  xB3
5C28:  MOVLB  0
5C2A:  CALL   3662
5C2E:  MOVFF  22F,3B0
5C32:  MOVLW  3C
5C34:  MOVLB  3
5C36:  MOVWF  xB1
5C38:  MOVLW  2A
5C3A:  MOVWF  xB2
5C3C:  MOVLW  01
5C3E:  MOVWF  xB3
5C40:  MOVLB  0
5C42:  CALL   3662
5C46:  MOVLB  2
....................                          
....................                      if(Flx==42) // Si esta en la unidad de minutos. 
5C48:  MOVF   x16,W
5C4A:  SUBLW  2A
5C4C:  BNZ   5CAE
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,2); 
5C4E:  MOVFF  232,3B0
5C52:  MOVLW  24
5C54:  MOVLB  3
5C56:  MOVWF  xB1
5C58:  MOVLW  2A
5C5A:  MOVWF  xB2
5C5C:  MOVLW  01
5C5E:  MOVWF  xB3
5C60:  MOVLB  0
5C62:  CALL   3662
5C66:  MOVFF  231,3B0
5C6A:  MOVLW  2A
5C6C:  MOVLB  3
5C6E:  MOVWF  xB1
5C70:  MOVWF  xB2
5C72:  MOVLW  02
5C74:  MOVWF  xB3
5C76:  MOVLB  0
5C78:  CALL   3662
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1);} 
5C7C:  MOVFF  230,3B0
5C80:  MOVLW  36
5C82:  MOVLB  3
5C84:  MOVWF  xB1
5C86:  MOVLW  2A
5C88:  MOVWF  xB2
5C8A:  MOVLW  01
5C8C:  MOVWF  xB3
5C8E:  MOVLB  0
5C90:  CALL   3662
5C94:  MOVFF  22F,3B0
5C98:  MOVLW  3C
5C9A:  MOVLB  3
5C9C:  MOVWF  xB1
5C9E:  MOVLW  2A
5CA0:  MOVWF  xB2
5CA2:  MOVLW  01
5CA4:  MOVWF  xB3
5CA6:  MOVLB  0
5CA8:  CALL   3662
5CAC:  MOVLB  2
....................                          
....................                      if(Flx==54) // Si esta en la decena de segundos. 
5CAE:  MOVF   x16,W
5CB0:  SUBLW  36
5CB2:  BNZ   5D14
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
5CB4:  MOVFF  232,3B0
5CB8:  MOVLW  24
5CBA:  MOVLB  3
5CBC:  MOVWF  xB1
5CBE:  MOVLW  2A
5CC0:  MOVWF  xB2
5CC2:  MOVLW  01
5CC4:  MOVWF  xB3
5CC6:  MOVLB  0
5CC8:  CALL   3662
5CCC:  MOVFF  231,3B0
5CD0:  MOVLW  2A
5CD2:  MOVLB  3
5CD4:  MOVWF  xB1
5CD6:  MOVWF  xB2
5CD8:  MOVLW  01
5CDA:  MOVWF  xB3
5CDC:  MOVLB  0
5CDE:  CALL   3662
....................                         displayTiempo(Tsecadop[1],54,42,2);displayTiempo(Tsecadop[0],60,42,1);} 
5CE2:  MOVFF  230,3B0
5CE6:  MOVLW  36
5CE8:  MOVLB  3
5CEA:  MOVWF  xB1
5CEC:  MOVLW  2A
5CEE:  MOVWF  xB2
5CF0:  MOVLW  02
5CF2:  MOVWF  xB3
5CF4:  MOVLB  0
5CF6:  CALL   3662
5CFA:  MOVFF  22F,3B0
5CFE:  MOVLW  3C
5D00:  MOVLB  3
5D02:  MOVWF  xB1
5D04:  MOVLW  2A
5D06:  MOVWF  xB2
5D08:  MOVLW  01
5D0A:  MOVWF  xB3
5D0C:  MOVLB  0
5D0E:  CALL   3662
5D12:  MOVLB  2
....................                          
....................                      if(Flx==60) // Si esta en la decena de segundos. 
5D14:  MOVF   x16,W
5D16:  SUBLW  3C
5D18:  BNZ   5D7A
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
5D1A:  MOVFF  232,3B0
5D1E:  MOVLW  24
5D20:  MOVLB  3
5D22:  MOVWF  xB1
5D24:  MOVLW  2A
5D26:  MOVWF  xB2
5D28:  MOVLW  01
5D2A:  MOVWF  xB3
5D2C:  MOVLB  0
5D2E:  CALL   3662
5D32:  MOVFF  231,3B0
5D36:  MOVLW  2A
5D38:  MOVLB  3
5D3A:  MOVWF  xB1
5D3C:  MOVWF  xB2
5D3E:  MOVLW  01
5D40:  MOVWF  xB3
5D42:  MOVLB  0
5D44:  CALL   3662
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,2);} 
5D48:  MOVFF  230,3B0
5D4C:  MOVLW  36
5D4E:  MOVLB  3
5D50:  MOVWF  xB1
5D52:  MOVLW  2A
5D54:  MOVWF  xB2
5D56:  MOVLW  01
5D58:  MOVWF  xB3
5D5A:  MOVLB  0
5D5C:  CALL   3662
5D60:  MOVFF  22F,3B0
5D64:  MOVLW  3C
5D66:  MOVLB  3
5D68:  MOVWF  xB1
5D6A:  MOVLW  2A
5D6C:  MOVWF  xB2
5D6E:  MOVLW  02
5D70:  MOVWF  xB3
5D72:  MOVLB  0
5D74:  CALL   3662
5D78:  MOVLB  2
....................                          
....................                      if(Flx>60) // Si paso de unidades de segundos, quiere decir que acepto lo programado y vuelve a Menú principal.   
5D7A:  MOVF   x16,W
5D7C:  SUBLW  3C
5D7E:  BC    5D8E
....................                         {Fly=Fly+16;estadot40=0;estadoc=0;estadoi=0;estadol=0;estadop=1;}  
5D80:  MOVLW  10
5D82:  ADDWF  x17,F
5D84:  BCF    x19.0
5D86:  BCF    x19.1
5D88:  BCF    x19.2
5D8A:  BCF    x19.3
5D8C:  BSF    x19.4
....................                          
....................                } 
....................                 else 
5D8E:  BRA    5D9E
....................                   {Fly=56;estadot40=0;estadoc=0;estadoi=0;estadol=0;estadop=1;} 
5D90:  MOVLW  38
5D92:  MOVWF  x17
5D94:  BCF    x19.0
5D96:  BCF    x19.1
5D98:  BCF    x19.2
5D9A:  BCF    x19.3
5D9C:  BSF    x19.4
....................                } 
....................                 
....................                 
....................                if(Fly==56) 
5D9E:  MOVF   x17,W
5DA0:  SUBLW  38
5DA2:  BNZ   5E12
....................                {glcd_text57(0, 55, T, 1, ON); // Muestra la palabra Temperatura de esterilización 
5DA4:  MOVLB  3
5DA6:  CLRF   xC3
5DA8:  MOVLW  37
5DAA:  MOVWF  xC4
5DAC:  MOVLW  01
5DAE:  MOVWF  xC6
5DB0:  MOVLW  B4
5DB2:  MOVWF  xC5
5DB4:  MOVLW  01
5DB6:  MOVWF  xC7
5DB8:  MOVWF  xC8
5DBA:  MOVLB  0
5DBC:  CALL   289A
....................                glcd_text57(66, 55, Vacio, 1, ON); //  
5DC0:  MOVLW  42
5DC2:  MOVLB  3
5DC4:  MOVWF  xC3
5DC6:  MOVLW  37
5DC8:  MOVWF  xC4
5DCA:  MOVLW  01
5DCC:  MOVWF  xC6
5DCE:  MOVLW  29
5DD0:  MOVWF  xC5
5DD2:  MOVLW  01
5DD4:  MOVWF  xC7
5DD6:  MOVWF  xC8
5DD8:  MOVLB  0
5DDA:  CALL   289A
....................                displayTiempo(Setpoint,72,55,4); 
5DDE:  MOVFF  234,3B0
5DE2:  MOVLW  48
5DE4:  MOVLB  3
5DE6:  MOVWF  xB1
5DE8:  MOVLW  37
5DEA:  MOVWF  xB2
5DEC:  MOVLW  04
5DEE:  MOVWF  xB3
5DF0:  MOVLB  0
5DF2:  CALL   3662
....................                glcd_circle(93,55,2,NO,ON); 
5DF6:  MOVLW  5D
5DF8:  MOVLB  3
5DFA:  MOVWF  xAF
5DFC:  MOVLW  37
5DFE:  MOVWF  xB0
5E00:  MOVLW  02
5E02:  MOVWF  xB1
5E04:  CLRF   xB2
5E06:  MOVLW  01
5E08:  MOVWF  xB3
5E0A:  MOVLB  0
5E0C:  CALL   388C
5E10:  MOVLB  2
....................                } 
....................                if(Fly!=56) 
5E12:  MOVF   x17,W
5E14:  SUBLW  38
5E16:  BZ    5E86
....................                {  glcd_text57(0, 55, T, 1, ON); // Muestra la palabra Temperatura de esterilización 
5E18:  MOVLB  3
5E1A:  CLRF   xC3
5E1C:  MOVLW  37
5E1E:  MOVWF  xC4
5E20:  MOVLW  01
5E22:  MOVWF  xC6
5E24:  MOVLW  B4
5E26:  MOVWF  xC5
5E28:  MOVLW  01
5E2A:  MOVWF  xC7
5E2C:  MOVWF  xC8
5E2E:  MOVLB  0
5E30:  CALL   289A
....................                glcd_text57(66, 55, Vacio, 1, ON); //  
5E34:  MOVLW  42
5E36:  MOVLB  3
5E38:  MOVWF  xC3
5E3A:  MOVLW  37
5E3C:  MOVWF  xC4
5E3E:  MOVLW  01
5E40:  MOVWF  xC6
5E42:  MOVLW  29
5E44:  MOVWF  xC5
5E46:  MOVLW  01
5E48:  MOVWF  xC7
5E4A:  MOVWF  xC8
5E4C:  MOVLB  0
5E4E:  CALL   289A
....................                displayTiempo(Setpoint,72,55,1); 
5E52:  MOVFF  234,3B0
5E56:  MOVLW  48
5E58:  MOVLB  3
5E5A:  MOVWF  xB1
5E5C:  MOVLW  37
5E5E:  MOVWF  xB2
5E60:  MOVLW  01
5E62:  MOVWF  xB3
5E64:  MOVLB  0
5E66:  CALL   3662
....................                glcd_circle(93,55,2,NO,ON); 
5E6A:  MOVLW  5D
5E6C:  MOVLB  3
5E6E:  MOVWF  xAF
5E70:  MOVLW  37
5E72:  MOVWF  xB0
5E74:  MOVLW  02
5E76:  MOVWF  xB1
5E78:  CLRF   xB2
5E7A:  MOVLW  01
5E7C:  MOVWF  xB3
5E7E:  MOVLB  0
5E80:  CALL   388C
5E84:  MOVLB  2
....................                } 
....................                 
....................        if(LEFT)// Si oprime Izquier|da 
5E86:  BSF    F92.5
5E88:  BTFSS  F80.5
5E8A:  BRA    5F2E
....................        {  if(Flanco3 == 0)  
5E8C:  BTFSC  x1A.0
5E8E:  BRA    5F2C
....................             {Flanco3 = 1; 
5E90:  BSF    x1A.0
....................                if(Fly==24){Fly=Fly-16;} 
5E92:  MOVF   x17,W
5E94:  SUBLW  18
5E96:  BNZ   5E9E
5E98:  MOVLW  10
5E9A:  SUBWF  x17,F
....................                else{Flx=Flx-6;} 
5E9C:  BRA    5EA2
5E9E:  MOVLW  06
5EA0:  SUBWF  x16,F
....................                if((Fly==40)&&(Flx<36)){Fly=Fly-16;} 
5EA2:  MOVF   x17,W
5EA4:  SUBLW  28
5EA6:  BNZ   5EB2
5EA8:  MOVF   x16,W
5EAA:  SUBLW  23
5EAC:  BNC   5EB2
5EAE:  MOVLW  10
5EB0:  SUBWF  x17,F
....................                if((Fly==8)&&(Flx<36)){Menu=0;glcd_fillScreen(OFF);Flecha2=n_opcionL; Flecha=n_opcionL;n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;}               
5EB2:  MOVF   x17,W
5EB4:  SUBLW  08
5EB6:  BNZ   5EE2
5EB8:  MOVF   x16,W
5EBA:  SUBLW  23
5EBC:  BNC   5EE2
5EBE:  CLRF   x0D
5EC0:  MOVLB  3
5EC2:  CLRF   xB0
5EC4:  MOVLB  0
5EC6:  CALL   2644
5ECA:  MOVFF  20F,213
5ECE:  MOVFF  20F,211
5ED2:  MOVLW  20
5ED4:  MOVLB  2
5ED6:  MOVWF  x0E
5ED8:  MOVLW  10
5EDA:  MOVWF  x0F
5EDC:  MOVWF  x14
5EDE:  MOVLW  20
5EE0:  MOVWF  x15
....................                if(Flx==48){Flx=42;};if(Flx==55){Flx=30;};delay_ms(30);delay_ms(30); 
5EE2:  MOVF   x16,W
5EE4:  SUBLW  30
5EE6:  BNZ   5EEC
5EE8:  MOVLW  2A
5EEA:  MOVWF  x16
5EEC:  MOVF   x16,W
5EEE:  SUBLW  37
5EF0:  BNZ   5EF6
5EF2:  MOVLW  1E
5EF4:  MOVWF  x16
5EF6:  MOVLW  1E
5EF8:  MOVLB  3
5EFA:  MOVWF  xB4
5EFC:  MOVLB  0
5EFE:  CALL   24DA
5F02:  MOVLW  1E
5F04:  MOVLB  3
5F06:  MOVWF  xB4
5F08:  MOVLB  0
5F0A:  CALL   24DA
....................                if(Fly==56){Fly=8;Flx=36;};delay_ms(30); 
5F0E:  MOVLB  2
5F10:  MOVF   x17,W
5F12:  SUBLW  38
5F14:  BNZ   5F1E
5F16:  MOVLW  08
5F18:  MOVWF  x17
5F1A:  MOVLW  24
5F1C:  MOVWF  x16
5F1E:  MOVLW  1E
5F20:  MOVLB  3
5F22:  MOVWF  xB4
5F24:  MOVLB  0
5F26:  CALL   24DA
5F2A:  MOVLB  2
....................              } 
....................         } 
....................          else 
5F2C:  BRA    5F30
....................             {Flanco3 = 0;}                 
5F2E:  BCF    x1A.0
....................                 
....................         if(Testerilizacionp[0]<0) // Si esta unidad es menor a 0 pasa a 9. 
5F30:  BTFSC  x27.7
5F32:  BRA    5F36
5F34:  BRA    5F3A
....................           {Testerilizacionp[0]=9;} 
5F36:  MOVLW  09
5F38:  MOVWF  x27
....................         if(Testerilizacionp[1]<0) // Si esta unidad es menor a 0 pasa a 5. 
5F3A:  BTFSC  x28.7
5F3C:  BRA    5F40
5F3E:  BRA    5F44
....................           {Testerilizacionp[1]=5;} 
5F40:  MOVLW  05
5F42:  MOVWF  x28
....................         if(Testerilizacionp[2]<0) // Si esta unidad es menor a 0 pasa a 9. 
5F44:  BTFSC  x29.7
5F46:  BRA    5F4A
5F48:  BRA    5F4E
....................           {Testerilizacionp[2]=9;} 
5F4A:  MOVLW  09
5F4C:  MOVWF  x29
....................         if(Testerilizacionp[3]<0) // Si esta unidad es menor a 0 pasa a 9. 
5F4E:  BTFSC  x2A.7
5F50:  BRA    5F54
5F52:  BRA    5F58
....................           {Testerilizacionp[3]=9;}   
5F54:  MOVLW  09
5F56:  MOVWF  x2A
....................            
....................         if(Testerilizacionp[0]>9) // Si esta unidad es mayor a 9 pasa a 0. 
5F58:  BTFSC  x27.7
5F5A:  BRA    5F64
5F5C:  MOVF   x27,W
5F5E:  SUBLW  09
5F60:  BC    5F64
....................           {Testerilizacionp[0]=0;} 
5F62:  CLRF   x27
....................         if(Testerilizacionp[1]>5) // Si esta unidad es mayor a 5 pasa a 0. 
5F64:  BTFSC  x28.7
5F66:  BRA    5F70
5F68:  MOVF   x28,W
5F6A:  SUBLW  05
5F6C:  BC    5F70
....................           {Testerilizacionp[1]=0;} 
5F6E:  CLRF   x28
....................         if(Testerilizacionp[2]>9) // Si esta unidad es mayor a 9 pasa a 0. 
5F70:  BTFSC  x29.7
5F72:  BRA    5F7C
5F74:  MOVF   x29,W
5F76:  SUBLW  09
5F78:  BC    5F7C
....................           {Testerilizacionp[2]=0;} 
5F7A:  CLRF   x29
....................         if(Testerilizacionp[3]>9) // Si esta unidad es mayor a 9 pasa a 0. 
5F7C:  BTFSC  x2A.7
5F7E:  BRA    5F88
5F80:  MOVF   x2A,W
5F82:  SUBLW  09
5F84:  BC    5F88
....................           {Testerilizacionp[3]=0;}     
5F86:  CLRF   x2A
....................            
....................         if(Tsecadop[0]<0) // Si esta unidad es menor a 0 pasa a 9. 
5F88:  BTFSC  x2F.7
5F8A:  BRA    5F8E
5F8C:  BRA    5F92
....................           {Tsecadop[0]=9;} 
5F8E:  MOVLW  09
5F90:  MOVWF  x2F
....................         if(Tsecadop[1]<0) // Si esta unidad es menor a 0 pasa a 5. 
5F92:  BTFSC  x30.7
5F94:  BRA    5F98
5F96:  BRA    5F9C
....................           {Tsecadop[1]=5;} 
5F98:  MOVLW  05
5F9A:  MOVWF  x30
....................         if(Tsecadop[2]<0) // Si esta unidad es menor a 0 pasa a 9. 
5F9C:  BTFSC  x31.7
5F9E:  BRA    5FA2
5FA0:  BRA    5FA6
....................           {Tsecadop[2]=9;} 
5FA2:  MOVLW  09
5FA4:  MOVWF  x31
....................         if(Tsecadop[3]<0) // Si esta unidad es menor a 0 pasa a 9. 
5FA6:  BTFSC  x32.7
5FA8:  BRA    5FAC
5FAA:  BRA    5FB0
....................           {Tsecadop[3]=9;}   
5FAC:  MOVLW  09
5FAE:  MOVWF  x32
....................            
....................         if(Tsecadop[0]>9) // Si esta unidad es mayor a 9 pasa a 0. 
5FB0:  BTFSC  x2F.7
5FB2:  BRA    5FBC
5FB4:  MOVF   x2F,W
5FB6:  SUBLW  09
5FB8:  BC    5FBC
....................           {Tsecadop[0]=0;} 
5FBA:  CLRF   x2F
....................         if(Tsecadop[1]>5) // Si esta unidad es mayor a 5 pasa a 0. 
5FBC:  BTFSC  x30.7
5FBE:  BRA    5FC8
5FC0:  MOVF   x30,W
5FC2:  SUBLW  05
5FC4:  BC    5FC8
....................           {Tsecadop[1]=0;} 
5FC6:  CLRF   x30
....................         if(Tsecadop[2]>9) // Si esta unidad es mayor a 9 pasa a 0. 
5FC8:  BTFSC  x31.7
5FCA:  BRA    5FD4
5FCC:  MOVF   x31,W
5FCE:  SUBLW  09
5FD0:  BC    5FD4
....................           {Tsecadop[2]=0;} 
5FD2:  CLRF   x31
....................         if(Tsecadop[3]>9) // Si esta unidad es mayor a 9 pasa a 0. 
5FD4:  BTFSC  x32.7
5FD6:  BRA    5FE0
5FD8:  MOVF   x32,W
5FDA:  SUBLW  09
5FDC:  BC    5FE0
....................           {Tsecadop[3]=0;}       
5FDE:  CLRF   x32
....................           
....................          if(RIGHT)// Si oprime derecha 
5FE0:  BSF    F92.3
5FE2:  BTFSS  F80.3
5FE4:  BRA    6208
....................       {  if(Flanco1 == 0)  
5FE6:  BTFSC  x19.6
5FE8:  BRA    6206
....................             {Flanco1 = 1; 
5FEA:  BSF    x19.6
....................                if(Fly==24){Fly=Fly+16;} 
5FEC:  MOVF   x17,W
5FEE:  SUBLW  18
5FF0:  BNZ   5FF8
5FF2:  MOVLW  10
5FF4:  ADDWF  x17,F
....................                else{Flx=Flx+6;} 
5FF6:  BRA    5FFC
5FF8:  MOVLW  06
5FFA:  ADDWF  x16,F
....................                if(Flx==48){Flx=54;};if(Flx==30){Flx=55;};delay_ms(30); 
5FFC:  MOVF   x16,W
5FFE:  SUBLW  30
6000:  BNZ   6006
6002:  MOVLW  36
6004:  MOVWF  x16
6006:  MOVF   x16,W
6008:  SUBLW  1E
600A:  BNZ   6010
600C:  MOVLW  37
600E:  MOVWF  x16
6010:  MOVLW  1E
6012:  MOVLB  3
6014:  MOVWF  xB4
6016:  MOVLB  0
6018:  CALL   24DA
....................                if(Fly==56) 
601C:  MOVLB  2
601E:  MOVF   x17,W
6020:  SUBLW  38
6022:  BTFSS  FD8.2
6024:  BRA    6206
....................                { write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]);write_eeprom(2,Testerilizacionp[2]); 
6026:  CLRF   FA9
6028:  MOVFF  227,FA8
602C:  BCF    FA6.6
602E:  BCF    FA6.7
6030:  BSF    FA6.2
6032:  MOVF   FF2,W
6034:  MOVWF  00
6036:  BCF    FF2.7
6038:  MOVLB  F
603A:  MOVLW  55
603C:  MOVWF  FA7
603E:  MOVLW  AA
6040:  MOVWF  FA7
6042:  BSF    FA6.1
6044:  BTFSC  FA6.1
6046:  BRA    6044
6048:  BCF    FA6.2
604A:  MOVF   00,W
604C:  IORWF  FF2,F
604E:  MOVLW  01
6050:  MOVWF  FA9
6052:  MOVFF  228,FA8
6056:  BCF    FA6.6
6058:  BCF    FA6.7
605A:  BSF    FA6.2
605C:  MOVF   FF2,W
605E:  MOVWF  00
6060:  BCF    FF2.7
6062:  MOVLW  55
6064:  MOVWF  FA7
6066:  MOVLW  AA
6068:  MOVWF  FA7
606A:  BSF    FA6.1
606C:  BTFSC  FA6.1
606E:  BRA    606C
6070:  BCF    FA6.2
6072:  MOVF   00,W
6074:  IORWF  FF2,F
6076:  MOVLW  02
6078:  MOVWF  FA9
607A:  MOVFF  229,FA8
607E:  BCF    FA6.6
6080:  BCF    FA6.7
6082:  BSF    FA6.2
6084:  MOVF   FF2,W
6086:  MOVWF  00
6088:  BCF    FF2.7
608A:  MOVLW  55
608C:  MOVWF  FA7
608E:  MOVLW  AA
6090:  MOVWF  FA7
6092:  BSF    FA6.1
6094:  BTFSC  FA6.1
6096:  BRA    6094
6098:  BCF    FA6.2
609A:  MOVF   00,W
609C:  IORWF  FF2,F
....................                  write_eeprom(3,Testerilizacionp[3]); 
609E:  MOVLW  03
60A0:  MOVWF  FA9
60A2:  MOVFF  22A,FA8
60A6:  BCF    FA6.6
60A8:  BCF    FA6.7
60AA:  BSF    FA6.2
60AC:  MOVFF  FF2,00
60B0:  BCF    FF2.7
60B2:  MOVLW  55
60B4:  MOVWF  FA7
60B6:  MOVLW  AA
60B8:  MOVWF  FA7
60BA:  BSF    FA6.1
60BC:  BTFSC  FA6.1
60BE:  BRA    60BC
60C0:  BCF    FA6.2
60C2:  MOVF   00,W
60C4:  IORWF  FF2,F
....................                  write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]);write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
60C6:  MOVLW  04
60C8:  MOVWF  FA9
60CA:  MOVFF  22F,FA8
60CE:  BCF    FA6.6
60D0:  BCF    FA6.7
60D2:  BSF    FA6.2
60D4:  MOVFF  FF2,00
60D8:  BCF    FF2.7
60DA:  MOVLW  55
60DC:  MOVWF  FA7
60DE:  MOVLW  AA
60E0:  MOVWF  FA7
60E2:  BSF    FA6.1
60E4:  BTFSC  FA6.1
60E6:  BRA    60E4
60E8:  BCF    FA6.2
60EA:  MOVF   00,W
60EC:  IORWF  FF2,F
60EE:  MOVLW  05
60F0:  MOVWF  FA9
60F2:  MOVFF  230,FA8
60F6:  BCF    FA6.6
60F8:  BCF    FA6.7
60FA:  BSF    FA6.2
60FC:  MOVFF  FF2,00
6100:  BCF    FF2.7
6102:  MOVLW  55
6104:  MOVWF  FA7
6106:  MOVLW  AA
6108:  MOVWF  FA7
610A:  BSF    FA6.1
610C:  BTFSC  FA6.1
610E:  BRA    610C
6110:  BCF    FA6.2
6112:  MOVF   00,W
6114:  IORWF  FF2,F
6116:  MOVLW  06
6118:  MOVWF  FA9
611A:  MOVFF  231,FA8
611E:  BCF    FA6.6
6120:  BCF    FA6.7
6122:  BSF    FA6.2
6124:  MOVFF  FF2,00
6128:  BCF    FF2.7
612A:  MOVLW  55
612C:  MOVWF  FA7
612E:  MOVLW  AA
6130:  MOVWF  FA7
6132:  BSF    FA6.1
6134:  BTFSC  FA6.1
6136:  BRA    6134
6138:  BCF    FA6.2
613A:  MOVF   00,W
613C:  IORWF  FF2,F
613E:  MOVLW  07
6140:  MOVWF  FA9
6142:  MOVFF  232,FA8
6146:  BCF    FA6.6
6148:  BCF    FA6.7
614A:  BSF    FA6.2
614C:  MOVFF  FF2,00
6150:  BCF    FF2.7
6152:  MOVLW  55
6154:  MOVWF  FA7
6156:  MOVLW  AA
6158:  MOVWF  FA7
615A:  BSF    FA6.1
615C:  BTFSC  FA6.1
615E:  BRA    615C
6160:  BCF    FA6.2
6162:  MOVF   00,W
6164:  IORWF  FF2,F
....................                  write_eeprom(8,Setpoint); 
6166:  MOVLW  08
6168:  MOVWF  FA9
616A:  MOVFF  234,FA8
616E:  BCF    FA6.6
6170:  BCF    FA6.7
6172:  BSF    FA6.2
6174:  MOVFF  FF2,00
6178:  BCF    FF2.7
617A:  MOVLW  55
617C:  MOVWF  FA7
617E:  MOVLW  AA
6180:  MOVWF  FA7
6182:  BSF    FA6.1
6184:  BTFSC  FA6.1
6186:  BRA    6184
6188:  BCF    FA6.2
618A:  MOVF   00,W
618C:  IORWF  FF2,F
....................                  if(Liquid==1) 
618E:  MOVLB  2
6190:  DECFSZ x18,W
6192:  BRA    61A6
....................                  {Menu=90;glcd_fillScreen(OFF);} 
6194:  MOVLW  5A
6196:  MOVWF  x0D
6198:  MOVLB  3
619A:  CLRF   xB0
619C:  MOVLB  0
619E:  CALL   2644
....................                  else 
61A2:  BRA    6204
61A4:  MOVLB  2
....................                  {Menu=100;glcd_rect(25, 18, 40, 53, NO, ON);Flecha2=n_opcionL; Flecha=n_opcionL; 
61A6:  MOVLW  64
61A8:  MOVWF  x0D
61AA:  MOVLW  19
61AC:  MOVLB  3
61AE:  MOVWF  xC5
61B0:  MOVLW  12
61B2:  MOVWF  xC6
61B4:  MOVLW  28
61B6:  MOVWF  xC7
61B8:  MOVLW  35
61BA:  MOVWF  xC8
61BC:  CLRF   xC9
61BE:  MOVLW  01
61C0:  MOVWF  xCA
61C2:  MOVLB  0
61C4:  CALL   2F18
61C8:  MOVFF  20F,213
61CC:  MOVFF  20F,211
....................                  n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;glcd_fillScreen(OFF);glcd_text57(0, 55, Calentando, 1, ON);} 
61D0:  MOVLW  20
61D2:  MOVLB  2
61D4:  MOVWF  x0E
61D6:  MOVLW  10
61D8:  MOVWF  x0F
61DA:  MOVWF  x14
61DC:  MOVLW  20
61DE:  MOVWF  x15
61E0:  MOVLB  3
61E2:  CLRF   xB0
61E4:  MOVLB  0
61E6:  CALL   2644
61EA:  MOVLB  3
61EC:  CLRF   xC3
61EE:  MOVLW  37
61F0:  MOVWF  xC4
61F2:  CLRF   xC6
61F4:  MOVLW  DF
61F6:  MOVWF  xC5
61F8:  MOVLW  01
61FA:  MOVWF  xC7
61FC:  MOVWF  xC8
61FE:  MOVLB  0
6200:  CALL   289A
6204:  MOVLB  2
....................                } 
....................              } 
....................        } 
....................          else 
6206:  BRA    620A
....................             {Flanco1 = 0;} 
6208:  BCF    x19.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-s-------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       if(Menu==90){ // Este es el menu de variación de desfogue. 
620A:  MOVF   x0D,W
620C:  SUBLW  5A
620E:  BTFSS  FD8.2
6210:  BRA    639E
....................       glcd_text57(20,2,Desfogue_Lento,1,ON); 
6212:  MOVLW  14
6214:  MOVLB  3
6216:  MOVWF  xC3
6218:  MOVLW  02
621A:  MOVWF  xC4
621C:  MOVLW  01
621E:  MOVWF  xC6
6220:  MOVLW  7C
6222:  MOVWF  xC5
6224:  MOVLW  01
6226:  MOVWF  xC7
6228:  MOVWF  xC8
622A:  MOVLB  0
622C:  CALL   289A
....................       glcd_text57(30,15,Level,2,ON); 
6230:  MOVLW  1E
6232:  MOVLB  3
6234:  MOVWF  xC3
6236:  MOVLW  0F
6238:  MOVWF  xC4
623A:  CLRF   xC6
623C:  MOVLW  EA
623E:  MOVWF  xC5
6240:  MOVLW  02
6242:  MOVWF  xC7
6244:  MOVLW  01
6246:  MOVWF  xC8
6248:  MOVLB  0
624A:  CALL   289A
....................       displayTiempo(Nivel,50,41,5); 
624E:  MOVFF  237,3B0
6252:  MOVLW  32
6254:  MOVLB  3
6256:  MOVWF  xB1
6258:  MOVLW  29
625A:  MOVWF  xB2
625C:  MOVLW  05
625E:  MOVWF  xB3
6260:  MOVLB  0
6262:  CALL   3662
....................       glcd_rect(0,0,127,29,NO,ON); 
6266:  MOVLB  3
6268:  CLRF   xC5
626A:  CLRF   xC6
626C:  MOVLW  7F
626E:  MOVWF  xC7
6270:  MOVLW  1D
6272:  MOVWF  xC8
6274:  CLRF   xC9
6276:  MOVLW  01
6278:  MOVWF  xCA
627A:  MOVLB  0
627C:  CALL   2F18
....................        
....................       if(UP)//Si oprime hacia arriba 
6280:  BSF    F92.1
6282:  BTFSS  F80.1
6284:  BRA    62A0
....................       {  if(Flanco == 0)  
6286:  MOVLB  2
6288:  BTFSC  x19.5
628A:  BRA    629E
....................             {Flanco = 1;delay_ms(30);Nivel++; 
628C:  BSF    x19.5
628E:  MOVLW  1E
6290:  MOVLB  3
6292:  MOVWF  xB4
6294:  MOVLB  0
6296:  CALL   24DA
629A:  MOVLB  2
629C:  INCF   x37,F
....................             } 
....................        } 
....................          else 
629E:  BRA    62A4
....................             {Flanco = 0;} 
62A0:  MOVLB  2
62A2:  BCF    x19.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
62A4:  BSF    F92.2
62A6:  BTFSS  F80.2
62A8:  BRA    62C2
....................       {  if(Flanco2 == 0)  
62AA:  BTFSC  x19.7
62AC:  BRA    62C0
....................             {Flanco2 = 1;delay_ms(30);Nivel--;               
62AE:  BSF    x19.7
62B0:  MOVLW  1E
62B2:  MOVLB  3
62B4:  MOVWF  xB4
62B6:  MOVLB  0
62B8:  CALL   24DA
62BC:  MOVLB  2
62BE:  DECF   x37,F
....................             } 
....................       } 
....................          else 
62C0:  BRA    62C4
....................             {Flanco2 = 0;} 
62C2:  BCF    x19.7
....................       if(Nivel>6) 
62C4:  MOVF   x37,W
62C6:  SUBLW  06
62C8:  BC    62CE
....................       {Nivel=1;} 
62CA:  MOVLW  01
62CC:  MOVWF  x37
....................       if(Nivel<1) 
62CE:  MOVF   x37,F
62D0:  BNZ   62D6
....................       {Nivel=6;} 
62D2:  MOVLW  06
62D4:  MOVWF  x37
....................        
....................       if(RIGHT)// Si oprime derecha 
62D6:  BSF    F92.3
62D8:  BTFSS  F80.3
62DA:  BRA    639C
....................       {  if(Flanco1 == 0)  
62DC:  BTFSC  x19.6
62DE:  BRA    639A
....................             {Flanco1 = 1; 
62E0:  BSF    x19.6
....................                Menu=100;glcd_rect(25, 18, 40, 53, NO, ON);enable_interrupts(global);glcd_fillScreen(OFF);Flecha2=n_opcionL; Flecha=n_opcionL; 
62E2:  MOVLW  64
62E4:  MOVWF  x0D
62E6:  MOVLW  19
62E8:  MOVLB  3
62EA:  MOVWF  xC5
62EC:  MOVLW  12
62EE:  MOVWF  xC6
62F0:  MOVLW  28
62F2:  MOVWF  xC7
62F4:  MOVLW  35
62F6:  MOVWF  xC8
62F8:  CLRF   xC9
62FA:  MOVLW  01
62FC:  MOVWF  xCA
62FE:  MOVLB  0
6300:  CALL   2F18
6304:  MOVLW  C0
6306:  IORWF  FF2,F
6308:  MOVLB  3
630A:  CLRF   xB0
630C:  MOVLB  0
630E:  CALL   2644
6312:  MOVFF  20F,213
6316:  MOVFF  20F,211
....................                n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;glcd_text57(0, 55, Calentando, 1, ON);write_eeprom(9,Nivel); 
631A:  MOVLW  20
631C:  MOVLB  2
631E:  MOVWF  x0E
6320:  MOVLW  10
6322:  MOVWF  x0F
6324:  MOVWF  x14
6326:  MOVLW  20
6328:  MOVWF  x15
632A:  MOVLB  3
632C:  CLRF   xC3
632E:  MOVLW  37
6330:  MOVWF  xC4
6332:  CLRF   xC6
6334:  MOVLW  DF
6336:  MOVWF  xC5
6338:  MOVLW  01
633A:  MOVWF  xC7
633C:  MOVWF  xC8
633E:  MOVLB  0
6340:  CALL   289A
6344:  MOVLW  09
6346:  MOVWF  FA9
6348:  MOVFF  237,FA8
634C:  BCF    FA6.6
634E:  BCF    FA6.7
6350:  BSF    FA6.2
6352:  MOVF   FF2,W
6354:  MOVWF  00
6356:  BCF    FF2.7
6358:  MOVLB  F
635A:  MOVLW  55
635C:  MOVWF  FA7
635E:  MOVLW  AA
6360:  MOVWF  FA7
6362:  BSF    FA6.1
6364:  BTFSC  FA6.1
6366:  BRA    6364
6368:  BCF    FA6.2
636A:  MOVF   00,W
636C:  IORWF  FF2,F
....................                glcd_rect(25, 18, 40, 53, NO, ON);Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1; 
636E:  MOVLW  19
6370:  MOVLB  3
6372:  MOVWF  xC5
6374:  MOVLW  12
6376:  MOVWF  xC6
6378:  MOVLW  28
637A:  MOVWF  xC7
637C:  MOVLW  35
637E:  MOVWF  xC8
6380:  CLRF   xC9
6382:  MOVLW  01
6384:  MOVWF  xCA
6386:  MOVLB  0
6388:  CALL   2F18
638C:  MOVLB  2
638E:  CLRF   x2F
6390:  CLRF   x30
6392:  MOVLW  05
6394:  MOVWF  x31
6396:  MOVLW  01
6398:  MOVWF  x32
....................              } 
....................        } 
....................          else 
639A:  BRA    639E
....................             {Flanco1 = 0;} 
639C:  BCF    x19.6
....................           
....................       } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       if(Menu==100){ // Este es el menu de cuando el proceso se inicio. 
639E:  MOVF   x0D,W
63A0:  SUBLW  64
63A2:  BTFSS  FD8.2
63A4:  GOTO   73F0
....................  
....................          if(usb_enumerated()) 
63A8:  MOVLB  0
63AA:  GOTO   3AB6
63AE:  MOVF   01,F
63B0:  BTFSC  FD8.2
63B2:  BRA    65B2
....................             { 
....................                if(usb_kbhit(1)) 
63B4:  MOVLW  01
63B6:  MOVLB  3
63B8:  MOVWF  xAF
63BA:  MOVLB  0
63BC:  GOTO   3ABE
63C0:  MOVF   01,F
63C2:  BZ    6452
....................                   {usb_get_packet(1, rxbuf, Lenbuf); 
63C4:  MOVLW  01
63C6:  MOVLB  3
63C8:  MOVWF  xAF
63CA:  CLRF   xB1
63CC:  MOVLW  42
63CE:  MOVWF  xB0
63D0:  CLRF   xB3
63D2:  MOVLW  20
63D4:  MOVWF  xB2
63D6:  MOVLB  0
63D8:  GOTO   3BC4
....................                      if(rxbuf[0]==1) 
63DC:  DECFSZ 42,W
63DE:  BRA    6452
....................                         {Ganancia=rxbuf[1];desvio=rxbuf[2];Tciclo=rxbuf[3];Setpoint=rxbuf[4];Minutos=rxbuf[5];Open=rxbuf[6];Ajuste=rxbuf[7]; 
63E0:  MOVLB  3
63E2:  CLRF   xB5
63E4:  MOVFF  43,3B4
63E8:  MOVLB  0
63EA:  CALL   2504
63EE:  MOVFF  03,264
63F2:  MOVFF  02,263
63F6:  MOVFF  01,262
63FA:  MOVFF  00,261
63FE:  MOVLB  3
6400:  CLRF   xB5
6402:  MOVFF  44,3B4
6406:  MOVLB  0
6408:  CALL   2504
640C:  MOVFF  03,268
6410:  MOVFF  02,267
6414:  MOVFF  01,266
6418:  MOVFF  00,265
641C:  MOVLB  3
641E:  CLRF   xB5
6420:  MOVFF  45,3B4
6424:  MOVLB  0
6426:  CALL   2504
642A:  MOVFF  03,24C
642E:  MOVFF  02,24B
6432:  MOVFF  01,24A
6436:  MOVFF  00,249
643A:  MOVFF  46,234
643E:  MOVFF  47,238
6442:  MOVFF  48,239
6446:  MOVFF  49,23A
....................                         Ajusten=rxbuf[10];R2=rxbuf[11];} // Falta escribir en la eeprom 
644A:  MOVFF  4C,23B
644E:  MOVFF  4D,23C
....................                   } 
....................                 
....................                recbuf[0]=(int8)Prom; 
6452:  MOVFF  258,3B2
6456:  MOVFF  257,3B1
645A:  MOVFF  256,3B0
645E:  MOVFF  255,3AF
6462:  CALL   3C0E
6466:  MOVFF  01,22
....................                recbuf[1]=120; 
646A:  MOVLW  78
646C:  MOVWF  23
....................                d3=Prom-(int8)Prom; 
646E:  MOVFF  258,3B2
6472:  MOVFF  257,3B1
6476:  MOVFF  256,3B0
647A:  MOVFF  255,3AF
647E:  CALL   3C0E
6482:  MOVLB  3
6484:  CLRF   xB5
6486:  MOVFF  01,3B4
648A:  MOVLB  0
648C:  CALL   2504
6490:  BSF    FD8.1
6492:  MOVFF  258,3BA
6496:  MOVFF  257,3B9
649A:  MOVFF  256,3B8
649E:  MOVFF  255,3B7
64A2:  MOVFF  03,3BE
64A6:  MOVFF  02,3BD
64AA:  MOVFF  01,3BC
64AE:  MOVFF  00,3BB
64B2:  CALL   3C4A
64B6:  MOVFF  03,26C
64BA:  MOVFF  02,26B
64BE:  MOVFF  01,26A
64C2:  MOVFF  00,269
....................                d3=d3*10.0; 
64C6:  MOVFF  26C,3D3
64CA:  MOVFF  26B,3D2
64CE:  MOVFF  26A,3D1
64D2:  MOVFF  269,3D0
64D6:  MOVLB  3
64D8:  CLRF   xD7
64DA:  CLRF   xD6
64DC:  MOVLW  20
64DE:  MOVWF  xD5
64E0:  MOVLW  82
64E2:  MOVWF  xD4
64E4:  MOVLB  0
64E6:  CALL   2A52
64EA:  MOVFF  03,26C
64EE:  MOVFF  02,26B
64F2:  MOVFF  01,26A
64F6:  MOVFF  00,269
....................                recbuf[2]=(int8)d3; 
64FA:  MOVFF  26C,3B2
64FE:  MOVFF  26B,3B1
6502:  MOVFF  26A,3B0
6506:  MOVFF  269,3AF
650A:  CALL   3C0E
650E:  MOVFF  01,24
....................                recbuf[3]=(int8)Pt; 
6512:  MOVFF  248,3B2
6516:  MOVFF  247,3B1
651A:  MOVFF  246,3B0
651E:  MOVFF  245,3AF
6522:  CALL   3C0E
6526:  MOVFF  01,25
....................                recbuf[4]=(int8)V0; 
652A:  MOVFF  240,3B2
652E:  MOVFF  23F,3B1
6532:  MOVFF  23E,3B0
6536:  MOVFF  23D,3AF
653A:  CALL   3C0E
653E:  MOVFF  01,26
....................                           
....................              if(rxbuf[8]==1) 
6542:  DECFSZ 4A,W
6544:  BRA    654A
....................                {Camara_OUT_on;} 
6546:  BSF    F8B.0
6548:  BCF    F94.0
....................              if(rxbuf[8]==0) 
654A:  MOVF   4A,F
654C:  BNZ   6552
....................                {Camara_OUT_off;}   
654E:  BCF    F8B.0
6550:  BCF    F94.0
....................                 
....................              if(rxbuf[9]==1) 
6552:  DECFSZ 4B,W
6554:  BRA    655A
....................                {Camara_IN_on;} 
6556:  BSF    F8B.2
6558:  BCF    F94.2
....................              if((rxbuf[9]==0)&&(Prom<(float)Open)) 
655A:  MOVF   4B,F
655C:  BNZ   6596
655E:  MOVLB  3
6560:  CLRF   xB5
6562:  MOVFF  239,3B4
6566:  MOVLB  0
6568:  CALL   2504
656C:  MOVFF  258,3B2
6570:  MOVFF  257,3B1
6574:  MOVFF  256,3B0
6578:  MOVFF  255,3AF
657C:  MOVFF  03,3B6
6580:  MOVFF  02,3B5
6584:  MOVFF  01,3B4
6588:  MOVFF  00,3B3
658C:  CALL   3EC2
6590:  BNC   6596
....................                {Camara_IN_off;}     
6592:  BCF    F8B.2
6594:  BCF    F94.2
....................                 
....................                  
....................                 usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
6596:  MOVLW  01
6598:  MOVLB  3
659A:  MOVWF  xAF
659C:  CLRF   xB1
659E:  MOVLW  22
65A0:  MOVWF  xB0
65A2:  CLRF   xB3
65A4:  MOVLW  20
65A6:  MOVWF  xB2
65A8:  MOVLW  02
65AA:  MOVWF  xB4
65AC:  MOVLB  0
65AE:  GOTO   3F3C
....................              } 
....................  
....................       if(n==0) 
65B2:  MOVLB  2
65B4:  BTFSC  x1A.6
65B6:  BRA    6966
....................       {glcd_imagen(5);glcd_text57(0, 0, tiempo_est, 1, ON);glcd_text57(0, 8, tiempo_sec, 1, ON);// Muestra grafica de proceso y palabras. 
65B8:  MOVLW  05
65BA:  MOVLB  3
65BC:  MOVWF  xAF
65BE:  MOVLB  0
65C0:  CALL   317E
65C4:  MOVLB  3
65C6:  CLRF   xC3
65C8:  CLRF   xC4
65CA:  CLRF   xC6
65CC:  MOVLW  81
65CE:  MOVWF  xC5
65D0:  MOVLW  01
65D2:  MOVWF  xC7
65D4:  MOVWF  xC8
65D6:  MOVLB  0
65D8:  CALL   289A
65DC:  MOVLB  3
65DE:  CLRF   xC3
65E0:  MOVLW  08
65E2:  MOVWF  xC4
65E4:  CLRF   xC6
65E6:  MOVLW  88
65E8:  MOVWF  xC5
65EA:  MOVLW  01
65EC:  MOVWF  xC7
65EE:  MOVWF  xC8
65F0:  MOVLB  0
65F2:  CALL   289A
....................        glcd_circle(95,40,2,NO,ON); 
65F6:  MOVLW  5F
65F8:  MOVLB  3
65FA:  MOVWF  xAF
65FC:  MOVLW  28
65FE:  MOVWF  xB0
6600:  MOVLW  02
6602:  MOVWF  xB1
6604:  CLRF   xB2
6606:  MOVLW  01
6608:  MOVWF  xB3
660A:  MOVLB  0
660C:  CALL   388C
....................        glcd_text57(102,40, C, 2, ON); 
6610:  MOVLW  66
6612:  MOVLB  3
6614:  MOVWF  xC3
6616:  MOVLW  28
6618:  MOVWF  xC4
661A:  MOVLW  01
661C:  MOVWF  xC6
661E:  MOVLW  4C
6620:  MOVWF  xC5
6622:  MOVLW  02
6624:  MOVWF  xC7
6626:  MOVLW  01
6628:  MOVWF  xC8
662A:  MOVLB  0
662C:  CALL   289A
....................        if(estadot40==1)// Si selecciono programa de Textil e instrumental. Ajusta tiempos de esterilización y secado. 
6630:  MOVLB  2
6632:  BTFSS  x19.0
6634:  BRA    664E
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0; 
6636:  CLRF   x27
6638:  CLRF   x28
663A:  MOVLW  05
663C:  MOVWF  x29
663E:  CLRF   x2A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;Setpoint=134;} 
6640:  CLRF   x2F
6642:  CLRF   x30
6644:  MOVWF  x31
6646:  MOVLW  01
6648:  MOVWF  x32
664A:  MOVLW  86
664C:  MOVWF  x34
....................        
....................       if(estadoc==1)// Si selecciono programa de Caucho. Ajusta tiempos de esterilización y secado. 
664E:  BTFSS  x19.1
6650:  BRA    6670
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2; 
6652:  CLRF   x27
6654:  CLRF   x28
6656:  MOVLW  05
6658:  MOVWF  x29
665A:  MOVLW  02
665C:  MOVWF  x2A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;minutos=0;Setpoint=121;} 
665E:  CLRF   x2F
6660:  CLRF   x30
6662:  MOVLW  05
6664:  MOVWF  x31
6666:  MOVLW  01
6668:  MOVWF  x32
666A:  CLRF   x38
666C:  MOVLW  79
666E:  MOVWF  x34
....................        
....................       if(estadoi==1)// Si selecciono programa de Instrumental Suave. Ajusta tiempos de esterilización y secado. 
6670:  BTFSS  x19.2
6672:  BRA    668E
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2; 
6674:  CLRF   x27
6676:  CLRF   x28
6678:  CLRF   x29
667A:  MOVLW  02
667C:  MOVWF  x2A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;minutos=10;Setpoint=121;} 
667E:  CLRF   x2F
6680:  CLRF   x30
6682:  CLRF   x31
6684:  CLRF   x32
6686:  MOVLW  0A
6688:  MOVWF  x38
668A:  MOVLW  79
668C:  MOVWF  x34
....................        
....................       if(estadol==1)// Si selecciono programa de Liquidos. Ajusta tiempos de esterilización y secado. 
668E:  BTFSS  x19.3
6690:  BRA    66AC
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2; 
6692:  CLRF   x27
6694:  CLRF   x28
6696:  CLRF   x29
6698:  MOVLW  02
669A:  MOVWF  x2A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;minutos=10;Setpoint=121;} 
669C:  CLRF   x2F
669E:  CLRF   x30
66A0:  CLRF   x31
66A2:  CLRF   x32
66A4:  MOVLW  0A
66A6:  MOVWF  x38
66A8:  MOVLW  79
66AA:  MOVWF  x34
....................         
....................       // Muestra Valor de esterilizacion programado. 
....................       displayTiempo(Testerilizacionp[3],36,0,0);displayTiempo(Testerilizacionp[2],42,0,0);glcd_text57(48, 0, Vacio, 1, ON); 
66AC:  MOVFF  22A,3B0
66B0:  MOVLW  24
66B2:  MOVLB  3
66B4:  MOVWF  xB1
66B6:  CLRF   xB2
66B8:  CLRF   xB3
66BA:  MOVLB  0
66BC:  CALL   3662
66C0:  MOVFF  229,3B0
66C4:  MOVLW  2A
66C6:  MOVLB  3
66C8:  MOVWF  xB1
66CA:  CLRF   xB2
66CC:  CLRF   xB3
66CE:  MOVLB  0
66D0:  CALL   3662
66D4:  MOVLW  30
66D6:  MOVLB  3
66D8:  MOVWF  xC3
66DA:  CLRF   xC4
66DC:  MOVLW  01
66DE:  MOVWF  xC6
66E0:  MOVLW  29
66E2:  MOVWF  xC5
66E4:  MOVLW  01
66E6:  MOVWF  xC7
66E8:  MOVWF  xC8
66EA:  MOVLB  0
66EC:  CALL   289A
....................       displayTiempo(Testerilizacionp[1],54,0,0);displayTiempo(Testerilizacionp[0],60,0,0); 
66F0:  MOVFF  228,3B0
66F4:  MOVLW  36
66F6:  MOVLB  3
66F8:  MOVWF  xB1
66FA:  CLRF   xB2
66FC:  CLRF   xB3
66FE:  MOVLB  0
6700:  CALL   3662
6704:  MOVFF  227,3B0
6708:  MOVLW  3C
670A:  MOVLB  3
670C:  MOVWF  xB1
670E:  CLRF   xB2
6710:  CLRF   xB3
6712:  MOVLB  0
6714:  CALL   3662
....................       // Muestra tiempo de secado programado. 
....................       displayTiempo(Tsecadop[3],36,8,0);displayTiempo(Tsecadop[2],42,8,0);glcd_text57(48, 8, Vacio, 1, ON); 
6718:  MOVFF  232,3B0
671C:  MOVLW  24
671E:  MOVLB  3
6720:  MOVWF  xB1
6722:  MOVLW  08
6724:  MOVWF  xB2
6726:  CLRF   xB3
6728:  MOVLB  0
672A:  CALL   3662
672E:  MOVFF  231,3B0
6732:  MOVLW  2A
6734:  MOVLB  3
6736:  MOVWF  xB1
6738:  MOVLW  08
673A:  MOVWF  xB2
673C:  CLRF   xB3
673E:  MOVLB  0
6740:  CALL   3662
6744:  MOVLW  30
6746:  MOVLB  3
6748:  MOVWF  xC3
674A:  MOVLW  08
674C:  MOVWF  xC4
674E:  MOVLW  01
6750:  MOVWF  xC6
6752:  MOVLW  29
6754:  MOVWF  xC5
6756:  MOVLW  01
6758:  MOVWF  xC7
675A:  MOVWF  xC8
675C:  MOVLB  0
675E:  CALL   289A
....................       displayTiempo(Tsecadop[1],54,8,0);displayTiempo(Tsecadop[0],60,8,0); 
6762:  MOVFF  230,3B0
6766:  MOVLW  36
6768:  MOVLB  3
676A:  MOVWF  xB1
676C:  MOVLW  08
676E:  MOVWF  xB2
6770:  CLRF   xB3
6772:  MOVLB  0
6774:  CALL   3662
6778:  MOVFF  22F,3B0
677C:  MOVLW  3C
677E:  MOVLB  3
6780:  MOVWF  xB1
6782:  MOVLW  08
6784:  MOVWF  xB2
6786:  CLRF   xB3
6788:  MOVLB  0
678A:  CALL   3662
....................           
....................       V0 = sensores(0); 
678E:  MOVLB  3
6790:  CLRF   xAF
6792:  MOVLB  0
6794:  CALL   253A
6798:  MOVFF  03,240
679C:  MOVFF  02,23F
67A0:  MOVFF  01,23E
67A4:  MOVFF  00,23D
....................       V0 = V0/4.94; 
67A8:  MOVFF  240,3B6
67AC:  MOVFF  23F,3B5
67B0:  MOVFF  23E,3B4
67B4:  MOVFF  23D,3B3
67B8:  MOVLW  7B
67BA:  MOVLB  3
67BC:  MOVWF  xBA
67BE:  MOVLW  14
67C0:  MOVWF  xB9
67C2:  MOVLW  1E
67C4:  MOVWF  xB8
67C6:  MOVLW  81
67C8:  MOVWF  xB7
67CA:  MOVLB  0
67CC:  CALL   3FEC
67D0:  MOVFF  03,240
67D4:  MOVFF  02,23F
67D8:  MOVFF  01,23E
67DC:  MOVFF  00,23D
....................       //rPt=(V0*R1)/(1023.0-V0);Temperature=(Pt-100.0972)/0.3850; 
....................       Pt=(R1+(float)R2)/((1023.0/V0)-1); 
67E0:  MOVLB  3
67E2:  CLRF   xB5
67E4:  MOVFF  23C,3B4
67E8:  MOVLB  0
67EA:  CALL   2504
67EE:  BCF    FD8.1
67F0:  MOVFF  244,3BA
67F4:  MOVFF  243,3B9
67F8:  MOVFF  242,3B8
67FC:  MOVFF  241,3B7
6800:  MOVFF  03,3BE
6804:  MOVFF  02,3BD
6808:  MOVFF  01,3BC
680C:  MOVFF  00,3BB
6810:  CALL   3C4A
6814:  MOVFF  00,3AF
6818:  MOVFF  01,3B0
681C:  MOVFF  02,3B1
6820:  MOVFF  03,3B2
6824:  MOVLB  3
6826:  CLRF   xB6
6828:  MOVLW  C0
682A:  MOVWF  xB5
682C:  MOVLW  7F
682E:  MOVWF  xB4
6830:  MOVLW  88
6832:  MOVWF  xB3
6834:  MOVFF  240,3BA
6838:  MOVFF  23F,3B9
683C:  MOVFF  23E,3B8
6840:  MOVFF  23D,3B7
6844:  MOVLB  0
6846:  CALL   3FEC
684A:  MOVFF  00,3B3
684E:  MOVFF  01,3B4
6852:  MOVFF  02,3B5
6856:  MOVFF  03,3B6
685A:  BSF    FD8.1
685C:  MOVFF  03,3BA
6860:  MOVFF  02,3B9
6864:  MOVFF  01,3B8
6868:  MOVFF  00,3B7
686C:  MOVLB  3
686E:  CLRF   xBE
6870:  CLRF   xBD
6872:  CLRF   xBC
6874:  MOVLW  7F
6876:  MOVWF  xBB
6878:  MOVLB  0
687A:  CALL   3C4A
687E:  MOVFF  3B2,3B6
6882:  MOVFF  3B1,3B5
6886:  MOVFF  3B0,3B4
688A:  MOVFF  3AF,3B3
688E:  MOVFF  03,3BA
6892:  MOVFF  02,3B9
6896:  MOVFF  01,3B8
689A:  MOVFF  00,3B7
689E:  CALL   3FEC
68A2:  MOVFF  03,248
68A6:  MOVFF  02,247
68AA:  MOVFF  01,246
68AE:  MOVFF  00,245
....................       Temperature=(Pt-100.1395)/0.3838;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
68B2:  BSF    FD8.1
68B4:  MOVFF  248,3BA
68B8:  MOVFF  247,3B9
68BC:  MOVFF  246,3B8
68C0:  MOVFF  245,3B7
68C4:  MOVLW  6D
68C6:  MOVLB  3
68C8:  MOVWF  xBE
68CA:  MOVLW  47
68CC:  MOVWF  xBD
68CE:  MOVLW  48
68D0:  MOVWF  xBC
68D2:  MOVLW  85
68D4:  MOVWF  xBB
68D6:  MOVLB  0
68D8:  CALL   3C4A
68DC:  MOVFF  00,3AF
68E0:  MOVFF  01,3B0
68E4:  MOVFF  02,3B1
68E8:  MOVFF  03,3B2
68EC:  MOVFF  03,3B6
68F0:  MOVFF  02,3B5
68F4:  MOVFF  01,3B4
68F8:  MOVFF  00,3B3
68FC:  MOVLW  6F
68FE:  MOVLB  3
6900:  MOVWF  xBA
6902:  MOVLW  81
6904:  MOVWF  xB9
6906:  MOVLW  44
6908:  MOVWF  xB8
690A:  MOVLW  7D
690C:  MOVWF  xB7
690E:  MOVLB  0
6910:  CALL   3FEC
6914:  MOVFF  03,25C
6918:  MOVFF  02,25B
691C:  MOVFF  01,25A
6920:  MOVFF  00,259
....................       for(h=0;h<=79;h++) 
6924:  MOVLB  2
6926:  CLRF   x35
6928:  MOVF   x35,W
692A:  SUBLW  4F
692C:  BNC   6964
....................             { 
....................                promedio[h]=Temperature; 
692E:  MOVLB  3
6930:  CLRF   xB4
6932:  MOVFF  235,3B3
6936:  CLRF   xB6
6938:  MOVLW  04
693A:  MOVWF  xB5
693C:  MOVLB  0
693E:  CALL   315C
6942:  MOVF   01,W
6944:  ADDLW  6F
6946:  MOVWF  FE9
6948:  MOVLW  02
694A:  ADDWFC 02,W
694C:  MOVWF  FEA
694E:  MOVFF  259,FEF
6952:  MOVFF  25A,FEC
6956:  MOVFF  25B,FEC
695A:  MOVFF  25C,FEC
....................             }  
695E:  MOVLB  2
6960:  INCF   x35,F
6962:  BRA    6928
....................        n=1;      
6964:  BSF    x1A.6
....................       } 
....................  
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................          error=desvio+(float)Setpoint-Prom;      // Cálculo del error ****** 
6966:  MOVLB  3
6968:  CLRF   xB5
696A:  MOVFF  234,3B4
696E:  MOVLB  0
6970:  CALL   2504
6974:  BCF    FD8.1
6976:  MOVFF  268,3BA
697A:  MOVFF  267,3B9
697E:  MOVFF  266,3B8
6982:  MOVFF  265,3B7
6986:  MOVFF  03,3BE
698A:  MOVFF  02,3BD
698E:  MOVFF  01,3BC
6992:  MOVFF  00,3BB
6996:  CALL   3C4A
699A:  MOVFF  00,3AF
699E:  MOVFF  01,3B0
69A2:  MOVFF  02,3B1
69A6:  MOVFF  03,3B2
69AA:  BSF    FD8.1
69AC:  MOVFF  03,3BA
69B0:  MOVFF  02,3B9
69B4:  MOVFF  01,3B8
69B8:  MOVFF  00,3B7
69BC:  MOVFF  258,3BE
69C0:  MOVFF  257,3BD
69C4:  MOVFF  256,3BC
69C8:  MOVFF  255,3BB
69CC:  CALL   3C4A
69D0:  MOVFF  03,254
69D4:  MOVFF  02,253
69D8:  MOVFF  01,252
69DC:  MOVFF  00,251
....................  
....................          tmp=error*Ganancia;  // Control Proporcional. 
69E0:  MOVFF  254,3D3
69E4:  MOVFF  253,3D2
69E8:  MOVFF  252,3D1
69EC:  MOVFF  251,3D0
69F0:  MOVFF  264,3D7
69F4:  MOVFF  263,3D6
69F8:  MOVFF  262,3D5
69FC:  MOVFF  261,3D4
6A00:  CALL   2A52
6A04:  MOVFF  03,260
6A08:  MOVFF  02,25F
6A0C:  MOVFF  01,25E
6A10:  MOVFF  00,25D
....................           
....................          if(tmp>Setpoint)   // Anti Wind-UP       
6A14:  MOVLB  3
6A16:  CLRF   xB5
6A18:  MOVFF  234,3B4
6A1C:  MOVLB  0
6A1E:  CALL   2504
6A22:  MOVFF  03,3B2
6A26:  MOVFF  02,3B1
6A2A:  MOVFF  01,3B0
6A2E:  MOVFF  00,3AF
6A32:  MOVFF  260,3B6
6A36:  MOVFF  25F,3B5
6A3A:  MOVFF  25E,3B4
6A3E:  MOVFF  25D,3B3
6A42:  CALL   3EC2
6A46:  BNC   6A66
....................             {tmp=Setpoint;} 
6A48:  MOVLB  3
6A4A:  CLRF   xB5
6A4C:  MOVFF  234,3B4
6A50:  MOVLB  0
6A52:  CALL   2504
6A56:  MOVFF  03,260
6A5A:  MOVFF  02,25F
6A5E:  MOVFF  01,25E
6A62:  MOVFF  00,25D
....................              
....................          if(tmp<0.0)     // Anti Wind_DOWN     
6A66:  MOVFF  260,3B2
6A6A:  MOVFF  25F,3B1
6A6E:  MOVFF  25E,3B0
6A72:  MOVFF  25D,3AF
6A76:  MOVLB  3
6A78:  CLRF   xB6
6A7A:  CLRF   xB5
6A7C:  CLRF   xB4
6A7E:  CLRF   xB3
6A80:  MOVLB  0
6A82:  CALL   3EC2
6A86:  BNC   6A92
....................             {tmp=0.0;}    
6A88:  MOVLB  2
6A8A:  CLRF   x60
6A8C:  CLRF   x5F
6A8E:  CLRF   x5E
6A90:  CLRF   x5D
....................        
....................          Tpulso=(tmp/Setpoint)*Tciclo;  // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
6A92:  MOVLB  3
6A94:  CLRF   xB5
6A96:  MOVFF  234,3B4
6A9A:  MOVLB  0
6A9C:  CALL   2504
6AA0:  MOVFF  260,3B6
6AA4:  MOVFF  25F,3B5
6AA8:  MOVFF  25E,3B4
6AAC:  MOVFF  25D,3B3
6AB0:  MOVFF  03,3BA
6AB4:  MOVFF  02,3B9
6AB8:  MOVFF  01,3B8
6ABC:  MOVFF  00,3B7
6AC0:  CALL   3FEC
6AC4:  MOVFF  00,3AF
6AC8:  MOVFF  01,3B0
6ACC:  MOVFF  02,3B1
6AD0:  MOVFF  03,3B2
6AD4:  MOVFF  03,3D3
6AD8:  MOVFF  02,3D2
6ADC:  MOVFF  01,3D1
6AE0:  MOVFF  00,3D0
6AE4:  MOVFF  24C,3D7
6AE8:  MOVFF  24B,3D6
6AEC:  MOVFF  24A,3D5
6AF0:  MOVFF  249,3D4
6AF4:  CALL   2A52
6AF8:  MOVFF  03,250
6AFC:  MOVFF  02,24F
6B00:  MOVFF  01,24E
6B04:  MOVFF  00,24D
....................                                    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................           
....................          if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
6B08:  MOVFF  250,3B6
6B0C:  MOVFF  24F,3B5
6B10:  MOVFF  24E,3B4
6B14:  MOVFF  24D,3B3
6B18:  MOVLW  0A
6B1A:  MOVLB  3
6B1C:  MOVWF  xBA
6B1E:  MOVLW  D7
6B20:  MOVWF  xB9
6B22:  MOVLW  23
6B24:  MOVWF  xB8
6B26:  MOVLW  77
6B28:  MOVWF  xB7
6B2A:  MOVLB  0
6B2C:  CALL   3FEC
6B30:  MOVFF  03,3B2
6B34:  MOVFF  02,3B1
6B38:  MOVFF  01,3B0
6B3C:  MOVFF  00,3AF
6B40:  CALL   3C0E
6B44:  MOVFF  02,03
6B48:  MOVF   01,W
6B4A:  MOVLB  2
6B4C:  MOVF   x22,W
6B4E:  SUBWF  02,W
6B50:  BNC   6B60
6B52:  BNZ   6B5A
6B54:  MOVF   x21,W
6B56:  SUBWF  01,W
6B58:  BNC   6B60
....................          {Resistencia_on;} 
6B5A:  BSF    F8B.1
6B5C:  BCF    F94.1
....................          else 
6B5E:  BRA    6B64
....................          {Resistencia_off;} 
6B60:  BCF    F8B.1
6B62:  BCF    F94.1
....................           
....................          if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
6B64:  MOVFF  24C,3B6
6B68:  MOVFF  24B,3B5
6B6C:  MOVFF  24A,3B4
6B70:  MOVFF  249,3B3
6B74:  MOVLW  0A
6B76:  MOVLB  3
6B78:  MOVWF  xBA
6B7A:  MOVLW  D7
6B7C:  MOVWF  xB9
6B7E:  MOVLW  23
6B80:  MOVWF  xB8
6B82:  MOVLW  77
6B84:  MOVWF  xB7
6B86:  MOVLB  0
6B88:  CALL   3FEC
6B8C:  MOVFF  03,3B2
6B90:  MOVFF  02,3B1
6B94:  MOVFF  01,3B0
6B98:  MOVFF  00,3AF
6B9C:  CALL   3C0E
6BA0:  MOVF   02,W
6BA2:  MOVWF  03
6BA4:  MOVLB  2
6BA6:  SUBWF  x22,W
6BA8:  BNC   6BB6
6BAA:  BNZ   6BB2
6BAC:  MOVF   01,W
6BAE:  SUBWF  x21,W
6BB0:  BNC   6BB6
....................          {tiempoctrl=0;} // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
6BB2:  CLRF   x22
6BB4:  CLRF   x21
.................... //--------------------------------------------------------------------------------------------------------------------//          
....................    
....................    if(Expulsa==1) 
6BB6:  BTFSS  x33.0
6BB8:  BRA    6ED2
....................    {   V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
6BBA:  MOVLB  3
6BBC:  CLRF   xAF
6BBE:  MOVLB  0
6BC0:  CALL   253A
6BC4:  MOVFF  03,240
6BC8:  MOVFF  02,23F
6BCC:  MOVFF  01,23E
6BD0:  MOVFF  00,23D
....................             V0 = V0/4.94; 
6BD4:  MOVFF  240,3B6
6BD8:  MOVFF  23F,3B5
6BDC:  MOVFF  23E,3B4
6BE0:  MOVFF  23D,3B3
6BE4:  MOVLW  7B
6BE6:  MOVLB  3
6BE8:  MOVWF  xBA
6BEA:  MOVLW  14
6BEC:  MOVWF  xB9
6BEE:  MOVLW  1E
6BF0:  MOVWF  xB8
6BF2:  MOVLW  81
6BF4:  MOVWF  xB7
6BF6:  MOVLB  0
6BF8:  CALL   3FEC
6BFC:  MOVFF  03,240
6C00:  MOVFF  02,23F
6C04:  MOVFF  01,23E
6C08:  MOVFF  00,23D
....................             Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
6C0C:  MOVLB  3
6C0E:  CLRF   xB5
6C10:  MOVFF  23C,3B4
6C14:  MOVLB  0
6C16:  CALL   2504
6C1A:  BCF    FD8.1
6C1C:  MOVFF  244,3BA
6C20:  MOVFF  243,3B9
6C24:  MOVFF  242,3B8
6C28:  MOVFF  241,3B7
6C2C:  MOVFF  03,3BE
6C30:  MOVFF  02,3BD
6C34:  MOVFF  01,3BC
6C38:  MOVFF  00,3BB
6C3C:  CALL   3C4A
6C40:  MOVFF  00,3AF
6C44:  MOVFF  01,3B0
6C48:  MOVFF  02,3B1
6C4C:  MOVFF  03,3B2
6C50:  MOVLB  3
6C52:  CLRF   xB6
6C54:  MOVLW  C0
6C56:  MOVWF  xB5
6C58:  MOVLW  7F
6C5A:  MOVWF  xB4
6C5C:  MOVLW  88
6C5E:  MOVWF  xB3
6C60:  MOVFF  240,3BA
6C64:  MOVFF  23F,3B9
6C68:  MOVFF  23E,3B8
6C6C:  MOVFF  23D,3B7
6C70:  MOVLB  0
6C72:  CALL   3FEC
6C76:  MOVFF  00,3B3
6C7A:  MOVFF  01,3B4
6C7E:  MOVFF  02,3B5
6C82:  MOVFF  03,3B6
6C86:  BSF    FD8.1
6C88:  MOVFF  03,3BA
6C8C:  MOVFF  02,3B9
6C90:  MOVFF  01,3B8
6C94:  MOVFF  00,3B7
6C98:  MOVLB  3
6C9A:  CLRF   xBE
6C9C:  CLRF   xBD
6C9E:  CLRF   xBC
6CA0:  MOVLW  7F
6CA2:  MOVWF  xBB
6CA4:  MOVLB  0
6CA6:  CALL   3C4A
6CAA:  MOVFF  3B2,3B6
6CAE:  MOVFF  3B1,3B5
6CB2:  MOVFF  3B0,3B4
6CB6:  MOVFF  3AF,3B3
6CBA:  MOVFF  03,3BA
6CBE:  MOVFF  02,3B9
6CC2:  MOVFF  01,3B8
6CC6:  MOVFF  00,3B7
6CCA:  CALL   3FEC
6CCE:  MOVFF  03,248
6CD2:  MOVFF  02,247
6CD6:  MOVFF  01,246
6CDA:  MOVFF  00,245
.................... //            Temperature=(Pt-100.0972)/0.3850;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................             Temperature=(Pt-100.0)/(0.00385*100.0);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
6CDE:  BSF    FD8.1
6CE0:  MOVFF  248,3BA
6CE4:  MOVFF  247,3B9
6CE8:  MOVFF  246,3B8
6CEC:  MOVFF  245,3B7
6CF0:  MOVLB  3
6CF2:  CLRF   xBE
6CF4:  CLRF   xBD
6CF6:  MOVLW  48
6CF8:  MOVWF  xBC
6CFA:  MOVLW  85
6CFC:  MOVWF  xBB
6CFE:  MOVLB  0
6D00:  CALL   3C4A
6D04:  MOVFF  00,3AF
6D08:  MOVFF  01,3B0
6D0C:  MOVFF  02,3B1
6D10:  MOVFF  03,3B2
6D14:  MOVFF  03,3B6
6D18:  MOVFF  02,3B5
6D1C:  MOVFF  01,3B4
6D20:  MOVFF  00,3B3
6D24:  MOVLW  B8
6D26:  MOVLB  3
6D28:  MOVWF  xBA
6D2A:  MOVLW  1E
6D2C:  MOVWF  xB9
6D2E:  MOVLW  45
6D30:  MOVWF  xB8
6D32:  MOVLW  7D
6D34:  MOVWF  xB7
6D36:  MOVLB  0
6D38:  CALL   3FEC
6D3C:  MOVFF  03,25C
6D40:  MOVFF  02,25B
6D44:  MOVFF  01,25A
6D48:  MOVFF  00,259
....................              
....................             if(l>79) 
6D4C:  MOVLB  2
6D4E:  MOVF   x36,W
6D50:  SUBLW  4F
6D52:  BC    6D56
....................             {l=0;} 
6D54:  CLRF   x36
....................             promedio[l]=Temperature;l++; 
6D56:  MOVLB  3
6D58:  CLRF   xB4
6D5A:  MOVFF  236,3B3
6D5E:  CLRF   xB6
6D60:  MOVLW  04
6D62:  MOVWF  xB5
6D64:  MOVLB  0
6D66:  CALL   315C
6D6A:  MOVF   01,W
6D6C:  ADDLW  6F
6D6E:  MOVWF  FE9
6D70:  MOVLW  02
6D72:  ADDWFC 02,W
6D74:  MOVWF  FEA
6D76:  MOVFF  259,FEF
6D7A:  MOVFF  25A,FEC
6D7E:  MOVFF  25B,FEC
6D82:  MOVFF  25C,FEC
6D86:  MOVLB  2
6D88:  INCF   x36,F
....................           
....................             for(h=0;h<=79;h++) 
6D8A:  CLRF   x35
6D8C:  MOVF   x35,W
6D8E:  SUBLW  4F
6D90:  BNC   6E12
....................             { 
....................                Prom+=promedio[h]; 
6D92:  MOVLB  3
6D94:  CLRF   xB4
6D96:  MOVFF  235,3B3
6D9A:  CLRF   xB6
6D9C:  MOVLW  04
6D9E:  MOVWF  xB5
6DA0:  MOVLB  0
6DA2:  CALL   315C
6DA6:  MOVFF  02,03
6DAA:  MOVF   01,W
6DAC:  ADDLW  6F
6DAE:  MOVWF  FE9
6DB0:  MOVLW  02
6DB2:  ADDWFC 02,W
6DB4:  MOVWF  FEA
6DB6:  MOVFF  FEF,00
6DBA:  MOVFF  FEC,01
6DBE:  MOVFF  FEC,02
6DC2:  MOVFF  FEC,03
6DC6:  MOVFF  FEA,3B0
6DCA:  MOVFF  FE9,3AF
6DCE:  BCF    FD8.1
6DD0:  MOVFF  258,3BA
6DD4:  MOVFF  257,3B9
6DD8:  MOVFF  256,3B8
6DDC:  MOVFF  255,3B7
6DE0:  MOVFF  03,3BE
6DE4:  MOVFF  02,3BD
6DE8:  MOVFF  01,3BC
6DEC:  MOVFF  00,3BB
6DF0:  CALL   3C4A
6DF4:  MOVFF  3B0,FEA
6DF8:  MOVFF  3AF,FE9
6DFC:  MOVFF  03,258
6E00:  MOVFF  02,257
6E04:  MOVFF  01,256
6E08:  MOVFF  00,255
....................             }  
6E0C:  MOVLB  2
6E0E:  INCF   x35,F
6E10:  BRA    6D8C
....................                Prom=Prom/81;    
6E12:  MOVFF  258,3B6
6E16:  MOVFF  257,3B5
6E1A:  MOVFF  256,3B4
6E1E:  MOVFF  255,3B3
6E22:  MOVLB  3
6E24:  CLRF   xBA
6E26:  CLRF   xB9
6E28:  MOVLW  22
6E2A:  MOVWF  xB8
6E2C:  MOVLW  85
6E2E:  MOVWF  xB7
6E30:  MOVLB  0
6E32:  CALL   3FEC
6E36:  MOVFF  03,258
6E3A:  MOVFF  02,257
6E3E:  MOVFF  01,256
6E42:  MOVFF  00,255
....................                Prom+=((float)Ajuste-(float)Ajusten); 
6E46:  MOVLB  3
6E48:  CLRF   xB5
6E4A:  MOVFF  23A,3B4
6E4E:  MOVLB  0
6E50:  CALL   2504
6E54:  MOVFF  00,3AF
6E58:  MOVFF  01,3B0
6E5C:  MOVFF  02,3B1
6E60:  MOVFF  03,3B2
6E64:  MOVLB  3
6E66:  CLRF   xB5
6E68:  MOVFF  23B,3B4
6E6C:  MOVLB  0
6E6E:  CALL   2504
6E72:  BSF    FD8.1
6E74:  MOVFF  3B2,3BA
6E78:  MOVFF  3B1,3B9
6E7C:  MOVFF  3B0,3B8
6E80:  MOVFF  3AF,3B7
6E84:  MOVFF  03,3BE
6E88:  MOVFF  02,3BD
6E8C:  MOVFF  01,3BC
6E90:  MOVFF  00,3BB
6E94:  CALL   3C4A
6E98:  BCF    FD8.1
6E9A:  MOVFF  258,3BA
6E9E:  MOVFF  257,3B9
6EA2:  MOVFF  256,3B8
6EA6:  MOVFF  255,3B7
6EAA:  MOVFF  03,3BE
6EAE:  MOVFF  02,3BD
6EB2:  MOVFF  01,3BC
6EB6:  MOVFF  00,3BB
6EBA:  CALL   3C4A
6EBE:  MOVFF  03,258
6EC2:  MOVFF  02,257
6EC6:  MOVFF  01,256
6ECA:  MOVFF  00,255
....................       Expulsa=0; 
6ECE:  MOVLB  2
6ED0:  BCF    x33.0
....................    }           
....................  
....................          if(Lectura==1) 
6ED2:  BTFSS  x1A.7
6ED4:  BRA    705A
....................          {                       
....................             Lectura=0; 
6ED6:  BCF    x1A.7
....................              
....................          displayT(Prom,69,20,3); 
6ED8:  MOVFF  258,3B6
6EDC:  MOVFF  257,3B5
6EE0:  MOVFF  256,3B4
6EE4:  MOVFF  255,3B3
6EE8:  MOVLW  45
6EEA:  MOVLB  3
6EEC:  MOVWF  xB7
6EEE:  MOVLW  14
6EF0:  MOVWF  xB8
6EF2:  MOVLW  03
6EF4:  MOVWF  xB9
6EF6:  MOVLB  0
6EF8:  CALL   2FDA
....................          displayT(Pt,1,20,3); 
6EFC:  MOVFF  248,3B6
6F00:  MOVFF  247,3B5
6F04:  MOVFF  246,3B4
6F08:  MOVFF  245,3B3
6F0C:  MOVLW  01
6F0E:  MOVLB  3
6F10:  MOVWF  xB7
6F12:  MOVLW  14
6F14:  MOVWF  xB8
6F16:  MOVLW  03
6F18:  MOVWF  xB9
6F1A:  MOVLB  0
6F1C:  CALL   2FDA
....................          displayTiempo(Setpoint,1,40,4); 
6F20:  MOVFF  234,3B0
6F24:  MOVLW  01
6F26:  MOVLB  3
6F28:  MOVWF  xB1
6F2A:  MOVLW  28
6F2C:  MOVWF  xB2
6F2E:  MOVLW  04
6F30:  MOVWF  xB3
6F32:  MOVLB  0
6F34:  CALL   3662
....................          displayTiempo((int8)Tpulso,14,40,4); 
6F38:  MOVFF  250,3B2
6F3C:  MOVFF  24F,3B1
6F40:  MOVFF  24E,3B0
6F44:  MOVFF  24D,3AF
6F48:  CALL   3C0E
6F4C:  MOVFF  01,3AF
6F50:  MOVFF  01,3B0
6F54:  MOVLW  0E
6F56:  MOVLB  3
6F58:  MOVWF  xB1
6F5A:  MOVLW  28
6F5C:  MOVWF  xB2
6F5E:  MOVLW  04
6F60:  MOVWF  xB3
6F62:  MOVLB  0
6F64:  CALL   3662
....................           
....................          // Muestra Valor de esterilizacion actual. 
....................          displayTiempo(Testerilizacion[3],80,0,1);displayTiempo(Testerilizacion[2],86,0,1);glcd_text57(92, 0, Vacio, 1, ON); 
6F68:  MOVFF  226,3B0
6F6C:  MOVLW  50
6F6E:  MOVLB  3
6F70:  MOVWF  xB1
6F72:  CLRF   xB2
6F74:  MOVLW  01
6F76:  MOVWF  xB3
6F78:  MOVLB  0
6F7A:  CALL   3662
6F7E:  MOVFF  225,3B0
6F82:  MOVLW  56
6F84:  MOVLB  3
6F86:  MOVWF  xB1
6F88:  CLRF   xB2
6F8A:  MOVLW  01
6F8C:  MOVWF  xB3
6F8E:  MOVLB  0
6F90:  CALL   3662
6F94:  MOVLW  5C
6F96:  MOVLB  3
6F98:  MOVWF  xC3
6F9A:  CLRF   xC4
6F9C:  MOVLW  01
6F9E:  MOVWF  xC6
6FA0:  MOVLW  29
6FA2:  MOVWF  xC5
6FA4:  MOVLW  01
6FA6:  MOVWF  xC7
6FA8:  MOVWF  xC8
6FAA:  MOVLB  0
6FAC:  CALL   289A
....................          displayTiempo(Testerilizacion[1],98,0,1);displayTiempo(Testerilizacion[0],104,0,1); 
6FB0:  MOVFF  224,3B0
6FB4:  MOVLW  62
6FB6:  MOVLB  3
6FB8:  MOVWF  xB1
6FBA:  CLRF   xB2
6FBC:  MOVLW  01
6FBE:  MOVWF  xB3
6FC0:  MOVLB  0
6FC2:  CALL   3662
6FC6:  MOVFF  223,3B0
6FCA:  MOVLW  68
6FCC:  MOVLB  3
6FCE:  MOVWF  xB1
6FD0:  CLRF   xB2
6FD2:  MOVLW  01
6FD4:  MOVWF  xB3
6FD6:  MOVLB  0
6FD8:  CALL   3662
....................          // Muestra tiempo de secado actual. 
....................          displayTiempo(Tsecado[3],80,8,1);displayTiempo(Tsecado[2],86,8,1);glcd_text57(92, 8, Vacio, 1, ON); 
6FDC:  MOVFF  22E,3B0
6FE0:  MOVLW  50
6FE2:  MOVLB  3
6FE4:  MOVWF  xB1
6FE6:  MOVLW  08
6FE8:  MOVWF  xB2
6FEA:  MOVLW  01
6FEC:  MOVWF  xB3
6FEE:  MOVLB  0
6FF0:  CALL   3662
6FF4:  MOVFF  22D,3B0
6FF8:  MOVLW  56
6FFA:  MOVLB  3
6FFC:  MOVWF  xB1
6FFE:  MOVLW  08
7000:  MOVWF  xB2
7002:  MOVLW  01
7004:  MOVWF  xB3
7006:  MOVLB  0
7008:  CALL   3662
700C:  MOVLW  5C
700E:  MOVLB  3
7010:  MOVWF  xC3
7012:  MOVLW  08
7014:  MOVWF  xC4
7016:  MOVLW  01
7018:  MOVWF  xC6
701A:  MOVLW  29
701C:  MOVWF  xC5
701E:  MOVLW  01
7020:  MOVWF  xC7
7022:  MOVWF  xC8
7024:  MOVLB  0
7026:  CALL   289A
....................          displayTiempo(Tsecado[1],98,8,1);displayTiempo(Tsecado[0],104,8,1); 
702A:  MOVFF  22C,3B0
702E:  MOVLW  62
7030:  MOVLB  3
7032:  MOVWF  xB1
7034:  MOVLW  08
7036:  MOVWF  xB2
7038:  MOVLW  01
703A:  MOVWF  xB3
703C:  MOVLB  0
703E:  CALL   3662
7042:  MOVFF  22B,3B0
7046:  MOVLW  68
7048:  MOVLB  3
704A:  MOVWF  xB1
704C:  MOVLW  08
704E:  MOVWF  xB2
7050:  MOVLW  01
7052:  MOVWF  xB3
7054:  MOVLB  0
7056:  CALL   3662
....................          } 
....................           
....................        
....................          if(Prom>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
705A:  MOVLB  3
705C:  CLRF   xB5
705E:  MOVFF  234,3B4
7062:  MOVLB  0
7064:  CALL   2504
7068:  MOVFF  00,3AF
706C:  MOVFF  01,3B0
7070:  MOVFF  02,3B1
7074:  MOVFF  03,3B2
7078:  BSF    FD8.1
707A:  MOVFF  03,3BA
707E:  MOVFF  02,3B9
7082:  MOVFF  01,3B8
7086:  MOVFF  00,3B7
708A:  MOVLB  3
708C:  CLRF   xBE
708E:  CLRF   xBD
7090:  CLRF   xBC
7092:  MOVLW  7F
7094:  MOVWF  xBB
7096:  MOVLB  0
7098:  CALL   3C4A
709C:  MOVFF  03,3B2
70A0:  MOVFF  02,3B1
70A4:  MOVFF  01,3B0
70A8:  MOVFF  00,3AF
70AC:  MOVFF  258,3B6
70B0:  MOVFF  257,3B5
70B4:  MOVFF  256,3B4
70B8:  MOVFF  255,3B3
70BC:  CALL   3EC2
70C0:  BC    70C4
70C2:  BNZ   713E
....................             { 
....................             if(tiempo_secado==0) 
70C4:  MOVLB  2
70C6:  BTFSC  x1A.3
70C8:  BRA    713E
....................                {glcd_text57(0, 56, Esterilizando, 1, ON);tiempo_esterilizacion=1; 
70CA:  MOVLB  3
70CC:  CLRF   xC3
70CE:  MOVLW  38
70D0:  MOVWF  xC4
70D2:  MOVLW  01
70D4:  MOVWF  xC6
70D6:  MOVLW  0A
70D8:  MOVWF  xC5
70DA:  MOVLW  01
70DC:  MOVWF  xC7
70DE:  MOVWF  xC8
70E0:  MOVLB  0
70E2:  CALL   289A
70E6:  MOVLB  2
70E8:  BSF    x1A.2
....................                if(est==0) 
70EA:  BTFSC  x33.1
70EC:  BRA    713E
....................                   {Limpia(0,90,56);glcd_rect(25, 18, 40, 53, NO, OFF);glcd_rect(40, 18, 75, 26, NO, ON);est=1;} 
70EE:  MOVLB  3
70F0:  CLRF   xAF
70F2:  MOVLW  5A
70F4:  MOVWF  xB0
70F6:  MOVLW  38
70F8:  MOVWF  xB1
70FA:  MOVLB  0
70FC:  CALL   414A
7100:  MOVLW  19
7102:  MOVLB  3
7104:  MOVWF  xC5
7106:  MOVLW  12
7108:  MOVWF  xC6
710A:  MOVLW  28
710C:  MOVWF  xC7
710E:  MOVLW  35
7110:  MOVWF  xC8
7112:  CLRF   xC9
7114:  CLRF   xCA
7116:  MOVLB  0
7118:  CALL   2F18
711C:  MOVLW  28
711E:  MOVLB  3
7120:  MOVWF  xC5
7122:  MOVLW  12
7124:  MOVWF  xC6
7126:  MOVLW  4B
7128:  MOVWF  xC7
712A:  MOVLW  1A
712C:  MOVWF  xC8
712E:  CLRF   xC9
7130:  MOVLW  01
7132:  MOVWF  xCA
7134:  MOVLB  0
7136:  CALL   2F18
713A:  MOVLB  2
713C:  BSF    x33.1
....................                } 
....................              } 
....................            
....................           if((Prom>=(float)Open)&&(Prom<((float)Setpoint-1.0))) 
713E:  MOVLB  3
7140:  CLRF   xB5
7142:  MOVFF  239,3B4
7146:  MOVLB  0
7148:  CALL   2504
714C:  MOVFF  03,3B2
7150:  MOVFF  02,3B1
7154:  MOVFF  01,3B0
7158:  MOVFF  00,3AF
715C:  MOVFF  258,3B6
7160:  MOVFF  257,3B5
7164:  MOVFF  256,3B4
7168:  MOVFF  255,3B3
716C:  CALL   3EC2
7170:  BC    7174
7172:  BNZ   71E0
7174:  MOVLB  3
7176:  CLRF   xB5
7178:  MOVFF  234,3B4
717C:  MOVLB  0
717E:  CALL   2504
7182:  MOVFF  00,3AF
7186:  MOVFF  01,3B0
718A:  MOVFF  02,3B1
718E:  MOVFF  03,3B2
7192:  BSF    FD8.1
7194:  MOVFF  03,3BA
7198:  MOVFF  02,3B9
719C:  MOVFF  01,3B8
71A0:  MOVFF  00,3B7
71A4:  MOVLB  3
71A6:  CLRF   xBE
71A8:  CLRF   xBD
71AA:  CLRF   xBC
71AC:  MOVLW  7F
71AE:  MOVWF  xBB
71B0:  MOVLB  0
71B2:  CALL   3C4A
71B6:  MOVFF  258,3B2
71BA:  MOVFF  257,3B1
71BE:  MOVFF  256,3B0
71C2:  MOVFF  255,3AF
71C6:  MOVFF  03,3B6
71CA:  MOVFF  02,3B5
71CE:  MOVFF  01,3B4
71D2:  MOVFF  00,3B3
71D6:  CALL   3EC2
71DA:  BNC   71E0
....................              {Camara_IN_on; 
71DC:  BSF    F8B.2
71DE:  BCF    F94.2
.................... //               if(Expulsa==1) 
.................... //                 {Camara_OUT_on;delay_ms(250);Camara_OUT_off;Expulsa=0;} 
....................              } 
....................           
....................        
....................       if((tiempo_secado==1)&&(Liquid==0)) //Si no selecciono un programa con desfogue lento, Hacer desfogue total. 
71E0:  MOVLB  2
71E2:  BTFSS  x1A.3
71E4:  BRA    7262
71E6:  MOVF   x18,F
71E8:  BNZ   7262
....................       {tiempo_esterilizacion=0; 
71EA:  BCF    x1A.2
....................          if(i==0) 
71EC:  BTFSC  x1A.5
71EE:  BRA    7240
....................             {Limpia(0,90,56);glcd_rect(40, 18, 75, 26, NO, OFF);glcd_rect(65, 18, 78, 53, NO, ON);i=1;}  
71F0:  MOVLB  3
71F2:  CLRF   xAF
71F4:  MOVLW  5A
71F6:  MOVWF  xB0
71F8:  MOVLW  38
71FA:  MOVWF  xB1
71FC:  MOVLB  0
71FE:  CALL   414A
7202:  MOVLW  28
7204:  MOVLB  3
7206:  MOVWF  xC5
7208:  MOVLW  12
720A:  MOVWF  xC6
720C:  MOVLW  4B
720E:  MOVWF  xC7
7210:  MOVLW  1A
7212:  MOVWF  xC8
7214:  CLRF   xC9
7216:  CLRF   xCA
7218:  MOVLB  0
721A:  CALL   2F18
721E:  MOVLW  41
7220:  MOVLB  3
7222:  MOVWF  xC5
7224:  MOVLW  12
7226:  MOVWF  xC6
7228:  MOVLW  4E
722A:  MOVWF  xC7
722C:  MOVLW  35
722E:  MOVWF  xC8
7230:  CLRF   xC9
7232:  MOVLW  01
7234:  MOVWF  xCA
7236:  MOVLB  0
7238:  CALL   2F18
723C:  MOVLB  2
723E:  BSF    x1A.5
....................          Camara_OUT_on;glcd_text57(0, 56, Secando, 1, ON); 
7240:  BSF    F8B.0
7242:  BCF    F94.0
7244:  MOVLB  3
7246:  CLRF   xC3
7248:  MOVLW  38
724A:  MOVWF  xC4
724C:  MOVLW  01
724E:  MOVWF  xC6
7250:  MOVLW  18
7252:  MOVWF  xC5
7254:  MOVLW  01
7256:  MOVWF  xC7
7258:  MOVWF  xC8
725A:  MOVLB  0
725C:  CALL   289A
7260:  MOVLB  2
....................       } 
....................       
....................       if(tiempo_secado==0) //Si esta calentando, debe tener la electrovalvula cerrada. 
7262:  BTFSC  x1A.3
7264:  BRA    726A
....................       {Camara_OUT_off;} 
7266:  BCF    F8B.0
7268:  BCF    F94.0
....................              
....................       // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................       if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])) 
726A:  MOVF   x27,W
726C:  SUBWF  x23,W
726E:  BTFSS  FD8.2
7270:  BRA    73F0
7272:  MOVF   x28,W
7274:  SUBWF  x24,W
7276:  BTFSS  FD8.2
7278:  BRA    73F0
727A:  MOVF   x29,W
727C:  SUBWF  x25,W
727E:  BTFSS  FD8.2
7280:  BRA    73F0
7282:  MOVF   x2A,W
7284:  SUBWF  x26,W
7286:  BTFSS  FD8.2
7288:  BRA    73F0
....................       {tiempo_esterilizacion=0;tiempo_secado=1; 
728A:  BCF    x1A.2
728C:  BSF    x1A.3
....................        
....................       // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................       if(Liquid==1)    
728E:  DECFSZ x18,W
7290:  BRA    7380
....................          {tiempo_secado=0; 
7292:  BCF    x1A.3
....................             if(i==0) 
7294:  BTFSC  x1A.5
7296:  BRA    7306
....................               {Limpia(0,90,56);glcd_rect(40, 18, 75, 26, NO, OFF);glcd_rect(65, 18, 78, 53, NO, ON);i=1; 
7298:  MOVLB  3
729A:  CLRF   xAF
729C:  MOVLW  5A
729E:  MOVWF  xB0
72A0:  MOVLW  38
72A2:  MOVWF  xB1
72A4:  MOVLB  0
72A6:  CALL   414A
72AA:  MOVLW  28
72AC:  MOVLB  3
72AE:  MOVWF  xC5
72B0:  MOVLW  12
72B2:  MOVWF  xC6
72B4:  MOVLW  4B
72B6:  MOVWF  xC7
72B8:  MOVLW  1A
72BA:  MOVWF  xC8
72BC:  CLRF   xC9
72BE:  CLRF   xCA
72C0:  MOVLB  0
72C2:  CALL   2F18
72C6:  MOVLW  41
72C8:  MOVLB  3
72CA:  MOVWF  xC5
72CC:  MOVLW  12
72CE:  MOVWF  xC6
72D0:  MOVLW  4E
72D2:  MOVWF  xC7
72D4:  MOVLW  35
72D6:  MOVWF  xC8
72D8:  CLRF   xC9
72DA:  MOVLW  01
72DC:  MOVWF  xCA
72DE:  MOVLB  0
72E0:  CALL   2F18
72E4:  MOVLB  2
72E6:  BSF    x1A.5
....................               glcd_text57(0, 56, Desfogue_Lento, 1, ON);} 
72E8:  MOVLB  3
72EA:  CLRF   xC3
72EC:  MOVLW  38
72EE:  MOVWF  xC4
72F0:  MOVLW  01
72F2:  MOVWF  xC6
72F4:  MOVLW  7C
72F6:  MOVWF  xC5
72F8:  MOVLW  01
72FA:  MOVWF  xC7
72FC:  MOVWF  xC8
72FE:  MOVLB  0
7300:  CALL   289A
7304:  MOVLB  2
....................             
....................          for(m=0;m<Minutos*15;m++)// Utilizado para realizar la rampa. 
7306:  CLRF   x20
7308:  CLRF   x1F
730A:  MOVF   x38,W
730C:  MULLW  0F
730E:  MOVF   FF3,W
7310:  MOVF   x20,F
7312:  BNZ   737E
7314:  SUBWF  x1F,W
7316:  BC    737E
....................          {Resistencia_off;Camara_IN_off;Camara_OUT_on;delay_ms(200*Nivel);Camara_OUT_off;delay_ms(2000-(200*Nivel));}      
7318:  BCF    F8B.1
731A:  BCF    F94.1
731C:  BCF    F8B.2
731E:  BCF    F94.2
7320:  BSF    F8B.0
7322:  BCF    F94.0
7324:  MOVF   x37,W
7326:  MULLW  C8
7328:  MOVFF  FF3,3AF
732C:  MOVFF  3AF,3B4
7330:  MOVLB  0
7332:  CALL   24DA
7336:  BCF    F8B.0
7338:  BCF    F94.0
733A:  MOVLB  2
733C:  MOVF   x37,W
733E:  MULLW  C8
7340:  MOVF   FF3,W
7342:  XORLW  FF
7344:  ADDLW  D1
7346:  MOVLB  3
7348:  MOVWF  xAF
734A:  MOVLW  07
734C:  BTFSS  FD8.0
734E:  DECF   FE8,F
7350:  MOVWF  xB0
7352:  MOVWF  xB1
7354:  INCF   xB1,F
7356:  DECF   xB1,F
7358:  BTFSC  FD8.2
735A:  BRA    736A
735C:  MOVLW  FF
735E:  MOVWF  xB4
7360:  MOVLB  0
7362:  CALL   24DA
7366:  MOVLB  3
7368:  BRA    7356
736A:  MOVFF  3AF,3B4
736E:  MOVLB  0
7370:  CALL   24DA
7374:  MOVLB  2
7376:  INCF   x1F,F
7378:  BTFSC  FD8.2
737A:  INCF   x20,F
737C:  BRA    730A
....................          fin_ciclo=1; 
737E:  BSF    x1A.4
....................          } 
....................       while(fin_ciclo==1) //Si termino proceso. 
....................       {Camara_OUT_off;Camara_IN_off;glcd_fillScreen(OFF); glcd_text57(20, 0, Proc, 2, ON);glcd_text57(10, 40, Finalizado, 2, ON); 
7380:  BTFSS  x1A.4
7382:  BRA    73F0
7384:  BCF    F8B.0
7386:  BCF    F94.0
7388:  BCF    F8B.2
738A:  BCF    F94.2
738C:  MOVLB  3
738E:  CLRF   xB0
7390:  MOVLB  0
7392:  CALL   2644
7396:  MOVLW  14
7398:  MOVLB  3
739A:  MOVWF  xC3
739C:  CLRF   xC4
739E:  CLRF   xC6
73A0:  MOVLW  C3
73A2:  MOVWF  xC5
73A4:  MOVLW  02
73A6:  MOVWF  xC7
73A8:  MOVLW  01
73AA:  MOVWF  xC8
73AC:  MOVLB  0
73AE:  CALL   289A
73B2:  MOVLW  0A
73B4:  MOVLB  3
73B6:  MOVWF  xC3
73B8:  MOVLW  28
73BA:  MOVWF  xC4
73BC:  MOVLW  01
73BE:  MOVWF  xC6
73C0:  MOVLW  F0
73C2:  MOVWF  xC5
73C4:  MOVLW  02
73C6:  MOVWF  xC7
73C8:  MOVLW  01
73CA:  MOVWF  xC8
73CC:  MOVLB  0
73CE:  CALL   289A
....................        Piloto_Fc_on;delay_ms(30000);} 
73D2:  BSF    F8C.1
73D4:  BCF    F95.1
73D6:  MOVLW  78
73D8:  MOVLB  3
73DA:  MOVWF  xAF
73DC:  MOVLW  FA
73DE:  MOVWF  xB4
73E0:  MOVLB  0
73E2:  CALL   24DA
73E6:  MOVLB  3
73E8:  DECFSZ xAF,F
73EA:  BRA    73DC
73EC:  MOVLB  2
73EE:  BRA    7380
....................       } 
....................       
....................     } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................        
....................    } 
73F0:  MOVLB  0
73F2:  GOTO   4E46
.................... } 
73F6:  SLEEP 

Configuration Fuses:
   Word  1: CE30   IESO FCMEN HSPLL PLL1 CPUDIV3 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
