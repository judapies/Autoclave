CCS PCH C Compiler, Version 4.104, 5967               15-may.-18 10:17

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Con Precamara\2017\Autoclave 110L\Autoclave Analitika #004587673\Firmware V3.1\Hardware_Controller\Hardware_Controller.lst

               ROM used: 14888 bytes (45%)
                         Largest free fragment is 17880
               RAM used: 1041 (51%) at main() level
                         1076 (53%) worst case
               Stack:    13 worst case (4 in main + 9 for interrupts)

*
0000:  GOTO   248A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0E1A
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0EA4
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   0D8A
006C:  BTFSS  FA0.5
006E:  GOTO   0078
0072:  BTFSC  FA1.5
0074:  GOTO   0CEA
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
0F0A:  MOVLW  03
0F0C:  MOVWF  FEA
0F0E:  MOVLW  45
0F10:  MOVWF  FE9
0F12:  MOVF   FEF,W
0F14:  BZ    0F32
0F16:  MOVLW  0F
0F18:  MOVWF  01
0F1A:  CLRF   00
0F1C:  DECFSZ 00,F
0F1E:  BRA    0F1C
0F20:  DECFSZ 01,F
0F22:  BRA    0F1A
0F24:  MOVLW  8F
0F26:  MOVWF  00
0F28:  DECFSZ 00,F
0F2A:  BRA    0F28
0F2C:  NOP   
0F2E:  DECFSZ FEF,F
0F30:  BRA    0F16
0F32:  RETLW  00
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xA0) 
*
0D72:  MOVF   FC9,W
0D74:  MOVFF  356,FC9
0D78:  BSF    FC6.4
0D7A:  BCF    F9E.3
0D7C:  BTFSC  FC7.0
0D7E:  BRA    0D7C
0D80:  CLRF   01
0D82:  BTFSC  FC6.4
0D84:  INCF   01,F
0D86:  GOTO   0DBE (RETURN)
.................... // Definición de Entradas 
.................... #define   PRES          !input(PIN_D7) 
.................... #define   TERM          input(PIN_D6) 
.................... #define   DOOR          !input(PIN_D4) 
.................... #define   STOP          !input(PIN_D5) 
.................... #define   LOW            input(PIN_D0) 
.................... #define   MEDIUM         input(PIN_D1) 
.................... #define   HIGH           input(PIN_D2) 
....................  
.................... // Definición de Salidas 
.................... #define   Resistencia_on     output_bit(PIN_C0,1) 
.................... #define   Resistencia_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia2_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia2_off   output_bit(PIN_C1,0) 
....................  
.................... #define   EV_Desfogue_on     output_bit(PIN_B6,1) 
.................... #define   EV_Desfogue_off    output_bit(PIN_B6,0) 
.................... #define   EV_Paso_on         output_bit(PIN_B5,1) 
.................... #define   EV_Paso_off        output_bit(PIN_B5,0) 
.................... #define   EV_Agua_on         output_bit(PIN_B4,1) 
.................... #define   EV_Agua_off        output_bit(PIN_B4,0) 
.................... #define   Motor_Puerta_on    output_bit(PIN_B2,1) 
.................... #define   Motor_Puerta_off   output_bit(PIN_B2,0) 
.................... #define   Bomba_Vacio_on     output_bit(PIN_B3,1) 
.................... #define   Bomba_Vacio_off    output_bit(PIN_B3,0) 
.................... #define   Bomba_Agua_on      output_bit(PIN_B7,1) 
.................... #define   Bomba_Agua_off     output_bit(PIN_B7,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
1EF4:  CLRF   03
1EF6:  MOVLB  3
1EF8:  MOVF   x3F,W
1EFA:  ADDLW  70
1EFC:  MOVWF  FE9
1EFE:  MOVLW  0F
1F00:  ADDWFC 03,W
1F02:  MOVWF  FEA
1F04:  MOVF   FEF,F
1F06:  BZ    1F22
1F08:  MOVF   x3F,W
1F0A:  MULLW  08
1F0C:  MOVF   FF3,W
1F0E:  CLRF   x41
1F10:  MOVWF  x40
1F12:  MOVWF  FE9
1F14:  MOVLW  04
1F16:  ADDWF  x41,W
1F18:  MOVWF  FEA
1F1A:  MOVFF  FEF,340
1F1E:  BTFSS  x40.7
1F20:  BRA    1F26
1F22:  MOVLW  00
1F24:  BRA    1F28
1F26:  MOVLW  01
1F28:  MOVWF  01
.................... } 
1F2A:  MOVLB  0
1F2C:  GOTO   2E4C (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09FC:  CLRF   03
09FE:  MOVLB  3
0A00:  MOVF   x5C,W
0A02:  ADDLW  70
0A04:  MOVWF  FE9
0A06:  MOVLW  0F
0A08:  ADDWFC 03,W
0A0A:  MOVWF  FEA
0A0C:  MOVF   FEF,F
0A0E:  BZ    0A34
0A10:  MOVF   x5C,W
0A12:  MULLW  08
0A14:  MOVF   FF3,W
0A16:  CLRF   x5E
0A18:  MOVWF  x5D
0A1A:  MOVLW  04
0A1C:  ADDWF  x5D,F
0A1E:  MOVLW  00
0A20:  ADDWFC x5E,F
0A22:  MOVFF  35D,FE9
0A26:  MOVLW  04
0A28:  ADDWF  x5E,W
0A2A:  MOVWF  FEA
0A2C:  MOVFF  FEF,35D
0A30:  BTFSS  x5D.7
0A32:  BRA    0A38
0A34:  MOVLW  00
0A36:  BRA    0A3A
0A38:  MOVLW  01
0A3A:  MOVWF  01
.................... } 
0A3C:  MOVLB  0
0A3E:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
1E6C:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
1E6E:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
1E70:  MOVLW  08
1E72:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
1E74:  MOVF   F94,W
1E76:  IORLW  30
1E78:  MOVLB  3
1E7A:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
1E7C:  CLRF   1C
1E7E:  CLRF   16
1E80:  BTFSC  FF2.7
1E82:  BSF    16.7
1E84:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
1E86:  MOVLB  0
1E88:  CALL   02F6
1E8C:  BTFSC  16.7
1E8E:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
1E90:  GOTO   1E96 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
1E9A:  CLRF   16
1E9C:  BTFSC  FF2.7
1E9E:  BSF    16.7
1EA0:  BCF    FF2.7
....................    usb_token_reset(); 
1EA2:  CALL   02F6
1EA6:  BTFSC  16.7
1EA8:  BSF    FF2.7
....................    UCON = 0; 
1EAA:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
1EAC:  MOVLW  14
1EAE:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
1EB0:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
1EB2:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
1EB4:  MOVLW  01
1EB6:  MOVWF  1C
.................... } 
1EB8:  GOTO   1EC2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
1E94:  BRA    1E6C
.................... } 
1E96:  GOTO   1EE0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
1EBC:  BTFSC  F6D.3
1EBE:  BRA    1EC2
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
1EC0:  BRA    1E9A
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
1EC2:  DECFSZ 1C,W
1EC4:  BRA    1EDC
1EC6:  BTFSC  F6D.5
1EC8:  BRA    1EDC
....................    { 
....................       UIR=0; 
1ECA:  CLRF   F68
....................       UIE=0; 
1ECC:  CLRF   F69
....................       enable_interrupts(INT_USB); 
1ECE:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
1ED0:  MOVLW  C0
1ED2:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
1ED4:  MOVLW  11
1ED6:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
1ED8:  MOVLW  02
1EDA:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
1EDC:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
1EDE:  BRA    1E94
....................  
....................    do  
....................    { 
....................       usb_task(); 
1EE0:  RCALL  1EBC
....................    } while (usb_state != USB_STATE_POWERED); 
1EE2:  MOVF   1C,W
1EE4:  SUBLW  02
1EE6:  BNZ   1EE0
.................... } 
1EE8:  GOTO   2C84 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A40:  MOVFF  357,35C
0A44:  RCALL  09FC
0A46:  MOVF   01,F
0A48:  BZ    0B12
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A4A:  MOVLB  3
0A4C:  MOVF   x57,W
0A4E:  MULLW  08
0A50:  MOVF   FF3,W
0A52:  CLRF   x5D
0A54:  MOVWF  x5C
0A56:  MOVLW  04
0A58:  ADDWF  x5C,F
0A5A:  MOVLW  00
0A5C:  ADDWFC x5D,F
0A5E:  MOVLW  01
0A60:  ADDWF  x5C,W
0A62:  MOVWF  01
0A64:  MOVLW  00
0A66:  ADDWFC x5D,W
0A68:  MOVWF  03
0A6A:  MOVFF  01,FE9
0A6E:  MOVLW  04
0A70:  ADDWF  03,W
0A72:  MOVWF  FEA
0A74:  MOVFF  358,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A78:  MOVF   x5A,W
0A7A:  SUBLW  02
0A7C:  BNZ   0AAC
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A7E:  MOVF   x57,W
0A80:  MULLW  08
0A82:  MOVF   FF3,W
0A84:  CLRF   x5D
0A86:  MOVWF  x5C
0A88:  MOVLW  04
0A8A:  ADDWF  x5C,F
0A8C:  MOVLW  00
0A8E:  ADDWFC x5D,F
0A90:  MOVFF  35C,FE9
0A94:  MOVLW  04
0A96:  ADDWF  x5D,W
0A98:  MOVWF  FEA
0A9A:  MOVFF  FEF,35B
....................          if (bit_test(i,6)) 
0A9E:  BTFSS  x5B.6
0AA0:  BRA    0AA6
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0AA2:  CLRF   x5A
....................          else 
0AA4:  BRA    0AAA
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0AA6:  MOVLW  01
0AA8:  MOVWF  x5A
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
0AAA:  BRA    0AD2
0AAC:  MOVF   x5A,W
0AAE:  SUBLW  04
0AB0:  BNZ   0AD2
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0AB2:  MOVF   x57,W
0AB4:  MULLW  08
0AB6:  MOVF   FF3,W
0AB8:  CLRF   x5D
0ABA:  MOVWF  FE9
0ABC:  MOVLW  04
0ABE:  ADDWF  x5D,W
0AC0:  MOVWF  FEA
0AC2:  MOVFF  FEF,35B
....................          if (bit_test(i,6)) 
0AC6:  BTFSS  x5B.6
0AC8:  BRA    0AD0
....................             tgl = USB_DTS_DATA1; 
0ACA:  MOVLW  01
0ACC:  MOVWF  x5A
....................          else 
0ACE:  BRA    0AD2
....................             tgl = USB_DTS_DATA0; 
0AD0:  CLRF   x5A
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0AD2:  DECFSZ x5A,W
0AD4:  BRA    0ADC
....................          i=0xC8;  //DATA1, UOWN 
0AD6:  MOVLW  C8
0AD8:  MOVWF  x5B
....................       else //if (tgl == USB_DTS_DATA0)  
0ADA:  BRA    0AE0
....................          i=0x88; //DATA0, UOWN 
0ADC:  MOVLW  88
0ADE:  MOVWF  x5B
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0AE0:  BTFSC  x59.0
0AE2:  BSF    x5B.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0AE4:  BTFSC  x59.1
0AE6:  BSF    x5B.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AE8:  MOVF   x57,W
0AEA:  MULLW  08
0AEC:  MOVF   FF3,W
0AEE:  CLRF   x5D
0AF0:  MOVWF  x5C
0AF2:  MOVLW  04
0AF4:  ADDWF  x5C,F
0AF6:  MOVLW  00
0AF8:  ADDWFC x5D,F
0AFA:  MOVFF  35C,FE9
0AFE:  MOVLW  04
0B00:  ADDWF  x5D,W
0B02:  MOVWF  FEA
0B04:  MOVFF  35B,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0B08:  MOVLW  01
0B0A:  MOVWF  01
0B0C:  BRA    0B18
....................    } 
....................    else  
0B0E:  BRA    0B10
0B10:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0B12:  MOVLW  00
0B14:  MOVWF  01
0B16:  MOVLB  3
.................... } 
0B18:  MOVLB  0
0B1A:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
2044:  CLRF   16
2046:  BTFSC  FF2.7
2048:  BSF    16.7
204A:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
204C:  MOVFF  33F,35C
2050:  CALL   09FC
2054:  BTFSC  16.7
2056:  BSF    FF2.7
2058:  MOVF   01,F
205A:  BZ    20EC
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
205C:  MOVLB  3
205E:  MOVF   x3F,W
2060:  MULLW  08
2062:  MOVF   FF3,W
2064:  CLRF   x48
2066:  MOVWF  x47
2068:  MOVLW  04
206A:  ADDWF  x47,F
206C:  MOVLW  00
206E:  ADDWFC x48,F
2070:  MOVLW  02
2072:  ADDWF  x47,W
2074:  MOVWF  01
2076:  MOVLW  00
2078:  ADDWFC x48,W
207A:  MOVWF  03
207C:  MOVFF  01,FE9
2080:  MOVLW  04
2082:  ADDWF  03,W
2084:  MOVWF  FEA
2086:  MOVFF  FEC,03
208A:  MOVF   FED,F
208C:  MOVFF  FEF,345
2090:  MOVFF  03,346
....................       memcpy(buff_add, ptr, len);      
2094:  MOVFF  346,FEA
2098:  MOVFF  345,FE9
209C:  MOVFF  341,FE2
20A0:  MOVFF  340,FE1
20A4:  MOVFF  343,02
20A8:  MOVFF  342,01
20AC:  MOVF   01,F
20AE:  BZ    20B4
20B0:  INCF   02,F
20B2:  BRA    20B8
20B4:  MOVF   02,F
20B6:  BZ    20C4
20B8:  MOVFF  FE6,FEE
20BC:  DECFSZ 01,F
20BE:  BRA    20B8
20C0:  DECFSZ 02,F
20C2:  BRA    20B8
20C4:  CLRF   16
20C6:  BTFSC  FF2.7
20C8:  BSF    16.7
20CA:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
20CC:  MOVFF  33F,357
20D0:  MOVFF  343,359
20D4:  MOVFF  342,358
20D8:  MOVFF  344,35A
20DC:  MOVLB  0
20DE:  CALL   0A40
20E2:  BTFSC  16.7
20E4:  BSF    FF2.7
20E6:  MOVF   01,W
20E8:  BRA    20F0
....................    } 
....................    else  
20EA:  BRA    20EC
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
20EC:  MOVLW  00
20EE:  MOVWF  01
.................... } 
20F0:  GOTO   3590 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0932:  MOVLB  3
0934:  MOVF   x57,W
0936:  MULLW  08
0938:  MOVF   FF3,W
093A:  CLRF   x5D
093C:  MOVWF  FE9
093E:  MOVLW  04
0940:  ADDWF  x5D,W
0942:  MOVWF  FEA
0944:  MOVFF  FEF,359
....................    if (tgl == USB_DTS_TOGGLE)  
0948:  MOVF   x58,W
094A:  SUBLW  02
094C:  BNZ   095A
....................    { 
....................       if (bit_test(i,6)) 
094E:  BTFSS  x59.6
0950:  BRA    0956
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0952:  CLRF   x58
....................       else 
0954:  BRA    095A
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0956:  MOVLW  01
0958:  MOVWF  x58
....................    } 
....................    if (tgl == USB_DTS_STALL)  
095A:  MOVF   x58,W
095C:  SUBLW  03
095E:  BNZ   0986
....................    { 
....................       i = 0x84; 
0960:  MOVLW  84
0962:  MOVWF  x59
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
0964:  MOVF   x57,W
0966:  MULLW  08
0968:  MOVF   FF3,W
096A:  CLRF   x5D
096C:  MOVWF  x5C
096E:  MOVLW  04
0970:  ADDWF  x5C,F
0972:  MOVLW  00
0974:  ADDWFC x5D,F
0976:  MOVFF  35C,FE9
097A:  MOVLW  04
097C:  ADDWF  x5D,W
097E:  MOVWF  FEA
0980:  MOVLW  84
0982:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
0984:  BRA    0994
0986:  DECFSZ x58,W
0988:  BRA    0990
....................       i = 0xC8;  //DATA1, UOWN 
098A:  MOVLW  C8
098C:  MOVWF  x59
....................    else //if (tgl == USB_DTS_DATA0)  
098E:  BRA    0994
....................       i = 0x88; //DATA0, UOWN 
0990:  MOVLW  88
0992:  MOVWF  x59
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
0994:  BCF    FD8.0
0996:  RLCF   x57,W
0998:  CLRF   03
099A:  MOVFF  FF2,35C
099E:  BCF    FF2.7
09A0:  MOVLB  0
09A2:  CALL   00DA
09A6:  TBLRD*+
09A8:  MOVFF  FF5,03
09AC:  MOVLB  3
09AE:  BTFSC  x5C.7
09B0:  BSF    FF2.7
09B2:  MOVWF  x5A
09B4:  MOVFF  03,35B
....................    EP_BDxCNT_O(endpoint) = len; 
09B8:  MOVF   x57,W
09BA:  MULLW  08
09BC:  MOVF   FF3,W
09BE:  CLRF   x5D
09C0:  MOVWF  x5C
09C2:  MOVLW  01
09C4:  ADDWF  x5C,W
09C6:  MOVWF  01
09C8:  MOVLW  00
09CA:  ADDWFC x5D,W
09CC:  MOVWF  03
09CE:  MOVFF  01,FE9
09D2:  MOVLW  04
09D4:  ADDWF  03,W
09D6:  MOVWF  FEA
09D8:  MOVFF  35A,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09DC:  BTFSC  x5B.0
09DE:  BSF    x59.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09E0:  BTFSC  x5B.1
09E2:  BSF    x59.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09E4:  MOVF   x57,W
09E6:  MULLW  08
09E8:  MOVF   FF3,W
09EA:  CLRF   x5D
09EC:  MOVWF  FE9
09EE:  MOVLW  04
09F0:  ADDWF  x5D,W
09F2:  MOVWF  FEA
09F4:  MOVFF  359,FEF
.................... } 
09F8:  MOVLB  0
09FA:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
1F30:  MOVLB  3
1F32:  MOVF   x44,W
1F34:  MULLW  08
1F36:  MOVF   FF3,W
1F38:  CLRF   x4F
1F3A:  MOVWF  x4E
1F3C:  MOVLW  02
1F3E:  ADDWF  x4E,W
1F40:  MOVWF  01
1F42:  MOVLW  00
1F44:  ADDWFC x4F,W
1F46:  MOVWF  03
1F48:  MOVFF  01,FE9
1F4C:  MOVLW  04
1F4E:  ADDWF  03,W
1F50:  MOVWF  FEA
1F52:  MOVFF  FEC,03
1F56:  MOVF   FED,F
1F58:  MOVFF  FEF,349
1F5C:  MOVFF  03,34A
....................    i = EP_BDxCNT_O(endpoint); 
1F60:  MOVF   x44,W
1F62:  MULLW  08
1F64:  MOVF   FF3,W
1F66:  CLRF   x4F
1F68:  MOVWF  x4E
1F6A:  MOVLW  01
1F6C:  ADDWF  x4E,W
1F6E:  MOVWF  01
1F70:  MOVLW  00
1F72:  ADDWFC x4F,W
1F74:  MOVWF  03
1F76:  MOVFF  01,FE9
1F7A:  MOVLW  04
1F7C:  ADDWF  03,W
1F7E:  MOVWF  FEA
1F80:  MOVF   FEF,W
1F82:  CLRF   03
1F84:  MOVWF  x4C
1F86:  MOVFF  03,34D
....................    st = EP_BDxST_O(endpoint); 
1F8A:  MOVF   x44,W
1F8C:  MULLW  08
1F8E:  MOVF   FF3,W
1F90:  CLRF   x4F
1F92:  MOVWF  FE9
1F94:  MOVLW  04
1F96:  ADDWF  x4F,W
1F98:  MOVWF  FEA
1F9A:  MOVFF  FEF,34B
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
1F9E:  BTFSC  x4B.0
1FA0:  BSF    x4D.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
1FA2:  BTFSC  x4B.1
1FA4:  BSF    x4D.1
....................  
....................    if (i < max) {max = i;} 
1FA6:  MOVF   x4D,W
1FA8:  SUBWF  x48,W
1FAA:  BNC   1FBC
1FAC:  BNZ   1FB4
1FAE:  MOVF   x47,W
1FB0:  SUBWF  x4C,W
1FB2:  BC    1FBC
1FB4:  MOVFF  34D,348
1FB8:  MOVFF  34C,347
....................     
....................    memcpy(ptr, al ,max); 
1FBC:  MOVFF  346,FEA
1FC0:  MOVFF  345,FE9
1FC4:  MOVFF  34A,FE2
1FC8:  MOVFF  349,FE1
1FCC:  MOVFF  348,02
1FD0:  MOVFF  347,01
1FD4:  MOVF   01,F
1FD6:  BZ    1FDC
1FD8:  INCF   02,F
1FDA:  BRA    1FE0
1FDC:  MOVF   02,F
1FDE:  BZ    1FEC
1FE0:  MOVFF  FE6,FEE
1FE4:  DECFSZ 01,F
1FE6:  BRA    1FE0
1FE8:  DECFSZ 02,F
1FEA:  BRA    1FE0
....................  
....................    return(max); 
1FEC:  MOVFF  347,01
1FF0:  MOVFF  348,02
.................... } 
1FF4:  MOVLB  0
1FF6:  GOTO   2010 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
1FFA:  MOVFF  33F,344
1FFE:  MOVFF  341,346
2002:  MOVFF  340,345
2006:  MOVFF  343,348
200A:  MOVFF  342,347
200E:  BRA    1F30
2010:  MOVFF  02,343
2014:  MOVFF  01,342
2018:  CLRF   16
201A:  BTFSC  FF2.7
201C:  BSF    16.7
201E:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
2020:  MOVFF  33F,357
2024:  MOVLW  02
2026:  MOVLB  3
2028:  MOVWF  x58
202A:  MOVLB  0
202C:  CALL   0932
2030:  BTFSC  16.7
2032:  BSF    FF2.7
....................  
....................    return(max); 
2034:  MOVLB  3
2036:  MOVFF  342,01
203A:  MOVFF  343,02
.................... } 
203E:  MOVLB  0
2040:  GOTO   2E6A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07F8:  MOVLB  3
07FA:  BCF    x58.0
07FC:  BTFSC  x57.7
07FE:  BSF    x58.0
....................    endpoint &= 0x7F; 
0800:  BCF    x57.7
....................     
....................    if (direction)  
0802:  BTFSS  x58.0
0804:  BRA    0828
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
0806:  MOVF   x57,W
0808:  MULLW  08
080A:  MOVF   FF3,W
080C:  CLRF   x5A
080E:  MOVWF  x59
0810:  MOVLW  04
0812:  ADDWF  x59,F
0814:  MOVLW  00
0816:  ADDWFC x5A,F
0818:  MOVFF  359,FE9
081C:  MOVLW  04
081E:  ADDWF  x5A,W
0820:  MOVWF  FEA
0822:  MOVLW  84
0824:  MOVWF  FEF
....................    } 
....................    else  
0826:  BRA    083C
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0828:  MOVF   x57,W
082A:  MULLW  08
082C:  MOVF   FF3,W
082E:  CLRF   x5A
0830:  MOVWF  FE9
0832:  MOVLW  04
0834:  ADDWF  x5A,W
0836:  MOVWF  FEA
0838:  MOVLW  84
083A:  MOVWF  FEF
....................    } 
.................... } 
083C:  MOVLB  0
083E:  GOTO   08D0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07B0:  MOVLB  3
07B2:  BCF    x58.0
07B4:  BTFSC  x57.7
07B6:  BSF    x58.0
....................    endpoint &= 0x7F; 
07B8:  BCF    x57.7
....................     
....................    if (direction)  
07BA:  BTFSS  x58.0
07BC:  BRA    07E0
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07BE:  MOVF   x57,W
07C0:  MULLW  08
07C2:  MOVF   FF3,W
07C4:  CLRF   x5A
07C6:  MOVWF  x59
07C8:  MOVLW  04
07CA:  ADDWF  x59,F
07CC:  MOVLW  00
07CE:  ADDWFC x5A,F
07D0:  MOVFF  359,FE9
07D4:  MOVLW  04
07D6:  ADDWF  x5A,W
07D8:  MOVWF  FEA
07DA:  MOVLW  88
07DC:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
07DE:  BRA    07F2
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07E0:  MOVF   x57,W
07E2:  MULLW  08
07E4:  MOVF   FF3,W
07E6:  CLRF   x5A
07E8:  MOVWF  FE9
07EA:  MOVLW  04
07EC:  ADDWF  x5A,W
07EE:  MOVWF  FEA
07F0:  CLRF   FEF
....................    } 
.................... } 
07F2:  MOVLB  0
07F4:  GOTO   08C0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0842:  MOVLB  3
0844:  BCF    x58.0
0846:  BTFSC  x57.7
0848:  BSF    x58.0
....................    endpoint &= 0x7F; 
084A:  BCF    x57.7
....................     
....................    if (direction)  
084C:  BTFSS  x58.0
084E:  BRA    0872
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0850:  MOVF   x57,W
0852:  MULLW  08
0854:  MOVF   FF3,W
0856:  CLRF   x5B
0858:  MOVWF  x5A
085A:  MOVLW  04
085C:  ADDWF  x5A,F
085E:  MOVLW  00
0860:  ADDWFC x5B,F
0862:  MOVFF  35A,FE9
0866:  MOVLW  04
0868:  ADDWF  x5B,W
086A:  MOVWF  FEA
086C:  MOVFF  FEF,359
....................    } 
....................    else  
0870:  BRA    0886
....................    { 
....................       st=EP_BDxST_O(endpoint); 
0872:  MOVF   x57,W
0874:  MULLW  08
0876:  MOVF   FF3,W
0878:  CLRF   x5B
087A:  MOVWF  FE9
087C:  MOVLW  04
087E:  ADDWF  x5B,W
0880:  MOVWF  FEA
0882:  MOVFF  FEF,359
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
0886:  BTFSS  x59.7
0888:  BRA    088E
088A:  BTFSC  x59.2
088C:  BRA    0892
088E:  MOVLW  00
0890:  BRA    0894
0892:  MOVLW  01
0894:  MOVWF  01
.................... } 
0896:  MOVLB  0
0898:  GOTO   08E8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B26:  MOVFF  358,F6E
....................     
....................    if (address)  
0B2A:  MOVLB  3
0B2C:  MOVF   x58,F
0B2E:  BZ    0B36
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B30:  MOVLW  04
0B32:  MOVWF  1C
....................    } 
....................    else  
0B34:  BRA    0B3A
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B36:  MOVLW  02
0B38:  MOVWF  1C
....................    } 
.................... } 
0B3A:  MOVLB  0
0B3C:  GOTO   0B4A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
047C:  MOVLB  3
047E:  MOVF   x57,F
0480:  BNZ   048E
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0482:  MOVLW  04
0484:  MOVWF  1C
....................       usb_disable_endpoints(); 
0486:  MOVLB  0
0488:  RCALL  02D8
....................    } 
....................    else  
048A:  BRA    0648
048C:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
048E:  MOVLW  05
0490:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0492:  MOVLW  04
0494:  MOVWF  x5A
0496:  MOVLW  90
0498:  MOVWF  x59
....................       for (en=1; en<USB_NUM_UEP; en++)  
049A:  MOVLW  01
049C:  MOVWF  x58
049E:  MOVF   x58,W
04A0:  SUBLW  0F
04A2:  BTFSS  FD8.0
04A4:  BRA    0648
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
04A6:  MOVFF  358,360
04AA:  MOVLB  0
04AC:  RCALL  0284
....................          new_uep = 0; 
04AE:  MOVLB  3
04B0:  CLRF   x5B
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
04B2:  CLRF   03
04B4:  MOVF   x58,W
04B6:  MOVFF  FF2,35F
04BA:  BCF    FF2.7
04BC:  MOVLB  0
04BE:  RCALL  00BA
04C0:  MOVLB  3
04C2:  BTFSC  x5F.7
04C4:  BSF    FF2.7
04C6:  SUBLW  FF
04C8:  BZ    0580
....................          { 
....................             new_uep = 0x04; 
04CA:  MOVLW  04
04CC:  MOVWF  x5B
....................             len = usb_ep_rx_size[en]; 
04CE:  BCF    FD8.0
04D0:  RLCF   x58,W
04D2:  CLRF   03
04D4:  MOVFF  FF2,35F
04D8:  BCF    FF2.7
04DA:  MOVLB  0
04DC:  RCALL  00DA
04DE:  TBLRD*+
04E0:  MOVFF  FF5,03
04E4:  MOVLB  3
04E6:  BTFSC  x5F.7
04E8:  BSF    FF2.7
04EA:  MOVWF  x5C
04EC:  MOVFF  03,35D
....................             EP_BDxCNT_O(en) = len; 
04F0:  MOVF   x58,W
04F2:  MULLW  08
04F4:  MOVF   FF3,W
04F6:  CLRF   x60
04F8:  MOVWF  x5F
04FA:  MOVLW  01
04FC:  ADDWF  x5F,W
04FE:  MOVWF  01
0500:  MOVLW  00
0502:  ADDWFC x60,W
0504:  MOVWF  03
0506:  MOVFF  01,FE9
050A:  MOVLW  04
050C:  ADDWF  03,W
050E:  MOVWF  FEA
0510:  MOVFF  35C,FEF
....................             EP_BDxADR_O(en) = addy; 
0514:  MOVF   x58,W
0516:  MULLW  08
0518:  MOVF   FF3,W
051A:  CLRF   x60
051C:  MOVWF  x5F
051E:  MOVLW  02
0520:  ADDWF  x5F,W
0522:  MOVWF  01
0524:  MOVLW  00
0526:  ADDWFC x60,W
0528:  MOVWF  03
052A:  MOVFF  01,FE9
052E:  MOVLW  04
0530:  ADDWF  03,W
0532:  MOVWF  FEA
0534:  MOVFF  35A,FEC
0538:  MOVF   FED,F
053A:  MOVFF  359,FEF
....................             addy += usb_ep_rx_size[en]; 
053E:  BCF    FD8.0
0540:  RLCF   x58,W
0542:  CLRF   03
0544:  MOVFF  FF2,35F
0548:  BCF    FF2.7
054A:  MOVLB  0
054C:  RCALL  00DA
054E:  TBLRD*+
0550:  MOVFF  FF5,03
0554:  MOVLB  3
0556:  BTFSC  x5F.7
0558:  BSF    FF2.7
055A:  ADDWF  x59,F
055C:  MOVF   03,W
055E:  ADDWFC x5A,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
0560:  MOVLW  88
0562:  MOVWF  x5E
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
0564:  BTFSC  x5D.0
0566:  BSF    x5E.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0568:  BTFSC  x5D.1
056A:  BSF    x5E.1
....................             EP_BDxST_O(en) = i; 
056C:  MOVF   x58,W
056E:  MULLW  08
0570:  MOVF   FF3,W
0572:  CLRF   x60
0574:  MOVWF  FE9
0576:  MOVLW  04
0578:  ADDWF  x60,W
057A:  MOVWF  FEA
057C:  MOVFF  35E,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0580:  CLRF   03
0582:  MOVF   x58,W
0584:  MOVFF  FF2,35F
0588:  BCF    FF2.7
058A:  MOVLB  0
058C:  RCALL  00BA
058E:  MOVLB  3
0590:  BTFSC  x5F.7
0592:  BSF    FF2.7
0594:  SUBLW  FF
0596:  BZ    060E
....................          { 
....................             new_uep |= 0x02; 
0598:  BSF    x5B.1
....................             EP_BDxADR_I(en) = addy; 
059A:  MOVF   x58,W
059C:  MULLW  08
059E:  MOVF   FF3,W
05A0:  CLRF   x60
05A2:  MOVWF  x5F
05A4:  MOVLW  04
05A6:  ADDWF  x5F,F
05A8:  MOVLW  00
05AA:  ADDWFC x60,F
05AC:  MOVLW  02
05AE:  ADDWF  x5F,W
05B0:  MOVWF  01
05B2:  MOVLW  00
05B4:  ADDWFC x60,W
05B6:  MOVWF  03
05B8:  MOVFF  01,FE9
05BC:  MOVLW  04
05BE:  ADDWF  03,W
05C0:  MOVWF  FEA
05C2:  MOVFF  35A,FEC
05C6:  MOVF   FED,F
05C8:  MOVFF  359,FEF
....................             addy += usb_ep_tx_size[en]; 
05CC:  BCF    FD8.0
05CE:  RLCF   x58,W
05D0:  CLRF   03
05D2:  MOVFF  FF2,35F
05D6:  BCF    FF2.7
05D8:  MOVLB  0
05DA:  RCALL  00DA
05DC:  TBLRD*+
05DE:  MOVFF  FF5,03
05E2:  MOVLB  3
05E4:  BTFSC  x5F.7
05E6:  BSF    FF2.7
05E8:  ADDWF  x59,F
05EA:  MOVF   03,W
05EC:  ADDWFC x5A,F
....................             EP_BDxST_I(en) = 0x40; 
05EE:  MOVF   x58,W
05F0:  MULLW  08
05F2:  MOVF   FF3,W
05F4:  CLRF   x60
05F6:  MOVWF  x5F
05F8:  MOVLW  04
05FA:  ADDWF  x5F,F
05FC:  MOVLW  00
05FE:  ADDWFC x60,F
0600:  MOVFF  35F,FE9
0604:  MOVLW  04
0606:  ADDWF  x60,W
0608:  MOVWF  FEA
060A:  MOVLW  40
060C:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
060E:  MOVF   x5B,W
0610:  SUBLW  06
0612:  BNZ   0618
0614:  MOVLW  0E
0616:  MOVWF  x5B
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
0618:  CLRF   03
061A:  MOVF   x58,W
061C:  MOVFF  FF2,35F
0620:  BCF    FF2.7
0622:  MOVLB  0
0624:  RCALL  00BA
0626:  MOVLB  3
0628:  BTFSC  x5F.7
062A:  BSF    FF2.7
062C:  SUBLW  01
062E:  BTFSS  FD8.2
0630:  BSF    x5B.4
....................           
....................          UEP(en) = new_uep; 
0632:  CLRF   03
0634:  MOVF   x58,W
0636:  ADDLW  70
0638:  MOVWF  FE9
063A:  MOVLW  0F
063C:  ADDWFC 03,W
063E:  MOVWF  FEA
0640:  MOVFF  35B,FEF
....................       } 
0644:  INCF   x58,F
0646:  BRA    049E
0648:  MOVLB  0
....................    } 
.................... } 
064A:  GOTO   06F2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
0284:  CLRF   03
0286:  MOVLB  3
0288:  MOVF   x60,W
028A:  ADDLW  70
028C:  MOVWF  FE9
028E:  MOVLW  0F
0290:  ADDWFC 03,W
0292:  MOVWF  FEA
0294:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
0296:  MOVFF  360,361
029A:  MOVLB  0
029C:  RCALL  0220
029E:  MOVF   01,F
02A0:  BZ    02D4
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
02A2:  MOVLB  3
02A4:  MOVF   x60,W
02A6:  MULLW  08
02A8:  MOVF   FF3,W
02AA:  CLRF   x62
02AC:  MOVWF  FE9
02AE:  MOVLW  04
02B0:  ADDWF  x62,W
02B2:  MOVWF  FEA
02B4:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
02B6:  MOVF   x60,W
02B8:  MULLW  08
02BA:  MOVF   FF3,W
02BC:  CLRF   x62
02BE:  MOVWF  x61
02C0:  MOVLW  04
02C2:  ADDWF  x61,F
02C4:  MOVLW  00
02C6:  ADDWFC x62,F
02C8:  MOVFF  361,FE9
02CC:  MOVLW  04
02CE:  ADDWF  x62,W
02D0:  MOVWF  FEA
02D2:  CLRF   FEF
02D4:  MOVLB  0
....................    } 
.................... } 
02D6:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02D8:  MOVLW  01
02DA:  MOVLB  3
02DC:  MOVWF  x5F
02DE:  MOVF   x5F,W
02E0:  SUBLW  0F
02E2:  BNC   02F2
....................       usb_disable_endpoint(i); 
02E4:  MOVFF  35F,360
02E8:  MOVLB  0
02EA:  RCALL  0284
02EC:  MOVLB  3
02EE:  INCF   x5F,F
02F0:  BRA    02DE
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
02F2:  MOVLB  0
02F4:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CEA:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CEC:  MOVF   1C,F
0CEE:  BNZ   0CF2
0CF0:  BRA    0D6E
....................    if (UIR)  
0CF2:  MOVF   F68,F
0CF4:  BZ    0D6E
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CF6:  BTFSS  F68.2
0CF8:  BRA    0D02
0CFA:  BTFSS  F69.2
0CFC:  BRA    0D02
0CFE:  GOTO   01DA
....................  
....................       if (UCON_SUSPND) return; 
0D02:  BTFSS  F6D.1
0D04:  BRA    0D08
0D06:  BRA    0D6E
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0D08:  BTFSS  F68.5
0D0A:  BRA    0D14
0D0C:  BTFSS  F69.5
0D0E:  BRA    0D14
0D10:  GOTO   020A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0D14:  BTFSS  F68.1
0D16:  BRA    0D20
0D18:  BTFSS  F69.1
0D1A:  BRA    0D20
0D1C:  GOTO   0218
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D20:  BTFSS  F68.0
0D22:  BRA    0D2C
0D24:  BTFSS  F69.0
0D26:  BRA    0D2C
0D28:  GOTO   031E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D2C:  BTFSS  F68.4
0D2E:  BRA    0D38
0D30:  BTFSS  F69.4
0D32:  BRA    0D38
0D34:  GOTO   0348
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D38:  BTFSS  F68.6
0D3A:  BRA    0D44
0D3C:  BTFSS  F69.6
0D3E:  BRA    0D44
0D40:  GOTO   0352
....................  
....................       TRNAttempts = 0; 
0D44:  MOVLB  3
0D46:  CLRF   x54
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D48:  BTFSS  F68.3
0D4A:  BRA    0D60
0D4C:  BTFSS  F69.3
0D4E:  BRA    0D60
....................          { 
....................             USTATCopy = U1STAT; 
0D50:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
0D54:  MOVLB  0
0D56:  CALL   0004
....................             usb_isr_tok_dne(); 
0D5A:  BRA    0B70
....................          } 
....................          else 
0D5C:  BRA    0D62
0D5E:  MOVLB  3
....................             break; 
0D60:  BRA    0D6C
....................       } while (TRNAttempts++ < 4); 
0D62:  MOVLB  3
0D64:  MOVF   x54,W
0D66:  INCF   x54,F
0D68:  SUBLW  03
0D6A:  BC    0D48
0D6C:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
0D6E:  GOTO   0078
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
0352:  BCF    F68.6
.................... } 
0354:  GOTO   0D44 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
031E:  CLRF   F6A
....................    UIR = 0; 
0320:  CLRF   F68
....................    UEIE = 0x9F; 
0322:  MOVLW  9F
0324:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
0326:  MOVLW  3D
0328:  MOVWF  F69
....................  
....................    UADDR = 0; 
032A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
032C:  RCALL  02D8
....................     
....................    usb_token_reset(); 
032E:  RCALL  02F6
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
0330:  MOVLW  16
0332:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
0334:  BTFSS  F68.3
0336:  BRA    033C
....................       usb_clear_trn(); 
0338:  RCALL  0004
....................    } 
033A:  BRA    0334
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
033C:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
033E:  RCALL  01EA
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0340:  MOVLW  03
0342:  MOVWF  1C
.................... } 
0344:  GOTO   0D2C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01EA:  MOVLW  40
01EC:  MOVLB  4
01EE:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01F0:  MOVLW  04
01F2:  MOVWF  x03
01F4:  MOVLW  10
01F6:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01F8:  MOVLW  88
01FA:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01FC:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01FE:  MOVLW  04
0200:  MOVWF  x07
0202:  MOVLW  50
0204:  MOVWF  x06
.................... } 
0206:  MOVLB  0
0208:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0218:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
021A:  BCF    F68.1
.................... } 
021C:  GOTO   0D20 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
0348:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
034A:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
034C:  BSF    F6D.1
.................... } 
034E:  GOTO   0D38 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01DA:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01DC:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
01DE:  BTFSS  F68.2
01E0:  BRA    01E6
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01E2:  BCF    F68.2
....................    } 
01E4:  BRA    01DE
.................... } 
01E6:  GOTO   0D02 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
020A:  BTFSS  F70.0
020C:  BRA    0212
....................    { 
....................       usb_init_ep0_setup(); 
020E:  RCALL  01EA
....................       bit_clear(UEP(0), 0); 
0210:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
0212:  BCF    F68.5
.................... } 
0214:  GOTO   0D14 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
0358:  MOVFF  35A,1D
035C:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
035E:  MOVLW  FF
0360:  MOVWF  1D
0362:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B70:  RRCF   1B,W
0B72:  MOVLB  3
0B74:  MOVWF  x55
0B76:  RRCF   x55,F
0B78:  RRCF   x55,F
0B7A:  MOVLW  1F
0B7C:  ANDWF  x55,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B7E:  MOVF   1B,F
0B80:  BNZ   0C20
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B82:  MOVLB  4
0B84:  MOVF   x00,W
0B86:  ANDLW  3C
0B88:  MOVLB  3
0B8A:  MOVWF  x56
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B8C:  MOVLW  43
0B8E:  MOVLB  4
0B90:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B92:  MOVLB  3
0B94:  MOVF   x56,W
0B96:  SUBLW  34
0B98:  BNZ   0BE4
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B9A:  MOVLB  4
0B9C:  MOVF   x04,W
0B9E:  ANDLW  80
0BA0:  BZ    0BA4
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0BA2:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0BA4:  MOVLB  0
0BA6:  BRA    0906
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0BA8:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0BAA:  INCFSZ 1D,W
0BAC:  BRA    0BBC
....................             usb_flush_out(0, USB_DTS_STALL); 
0BAE:  MOVLB  3
0BB0:  CLRF   x57
0BB2:  MOVLW  03
0BB4:  MOVWF  x58
0BB6:  MOVLB  0
0BB8:  RCALL  0932
....................          else  
0BBA:  BRA    0BE0
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BBC:  MOVLB  3
0BBE:  CLRF   x57
0BC0:  MOVLW  02
0BC2:  MOVWF  x58
0BC4:  MOVLB  0
0BC6:  RCALL  0932
....................             if (__setup_0_tx_size != 0xFE) 
0BC8:  MOVF   1D,W
0BCA:  SUBLW  FE
0BCC:  BZ    0BE0
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BCE:  MOVLB  3
0BD0:  CLRF   x57
0BD2:  CLRF   x59
0BD4:  MOVFF  1D,358
0BD8:  MOVLW  04
0BDA:  MOVWF  x5A
0BDC:  MOVLB  0
0BDE:  RCALL  0A40
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BE0:  BRA    0C1C
0BE2:  MOVLB  3
0BE4:  MOVF   x56,W
0BE6:  SUBLW  04
0BE8:  BNZ   0C1E
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BEA:  CLRF   x57
0BEC:  MOVLB  0
0BEE:  RCALL  0B1C
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BF0:  MOVLB  3
0BF2:  CLRF   x57
0BF4:  MOVLW  02
0BF6:  MOVWF  x58
0BF8:  MOVLB  0
0BFA:  RCALL  0932
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BFC:  MOVF   1D,W
0BFE:  SUBLW  FE
0C00:  BZ    0C1A
0C02:  INCFSZ 1D,W
0C04:  BRA    0C08
0C06:  BRA    0C1A
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0C08:  MOVLB  3
0C0A:  CLRF   x57
0C0C:  CLRF   x59
0C0E:  MOVFF  1D,358
0C12:  MOVLW  01
0C14:  MOVWF  x5A
0C16:  MOVLB  0
0C18:  RCALL  0A40
....................          } 
....................       } 
....................       else 
0C1A:  BRA    0C1C
0C1C:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
0C1E:  BRA    0CE4
0C20:  MOVF   1B,W
0C22:  SUBLW  04
0C24:  BNZ   0C56
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C26:  MOVLW  43
0C28:  MOVLB  4
0C2A:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C2C:  MOVLW  FF
0C2E:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
0C30:  MOVLB  3
0C32:  CLRF   x57
0C34:  MOVLB  0
0C36:  RCALL  0B4E
....................       if (__setup_0_tx_size!=0xFF) 
0C38:  INCFSZ 1D,W
0C3A:  BRA    0C3E
0C3C:  BRA    0C52
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C3E:  MOVLB  3
0C40:  CLRF   x57
0C42:  CLRF   x59
0C44:  MOVFF  1D,358
0C48:  MOVLW  02
0C4A:  MOVWF  x5A
0C4C:  MOVLB  0
0C4E:  RCALL  0A40
....................       else 
0C50:  BRA    0C52
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
0C52:  BRA    0CE2
0C54:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C56:  BTFSC  1B.2
0C58:  BRA    0C94
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C5A:  MOVF   x55,W
0C5C:  MULLW  08
0C5E:  MOVF   FF3,W
0C60:  CLRF   x58
0C62:  MOVWF  01
0C64:  MOVLW  04
0C66:  ADDWF  x58,W
0C68:  MOVWF  03
0C6A:  MOVF   x55,W
0C6C:  MULLW  08
0C6E:  MOVF   FF3,W
0C70:  CLRF   x5A
0C72:  MOVWF  FE9
0C74:  MOVLW  04
0C76:  ADDWF  x5A,W
0C78:  MOVWF  FEA
0C7A:  MOVF   FEF,W
0C7C:  ANDLW  43
0C7E:  MOVFF  03,FEA
0C82:  MOVFF  01,FE9
0C86:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C88:  MOVFF  355,357
0C8C:  MOVLB  0
0C8E:  RCALL  0B1C
....................       } 
....................       else  
0C90:  BRA    0CE2
0C92:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C94:  MOVF   x55,W
0C96:  MULLW  08
0C98:  MOVF   FF3,W
0C9A:  CLRF   x58
0C9C:  MOVWF  x57
0C9E:  MOVLW  04
0CA0:  ADDWF  x57,F
0CA2:  MOVLW  00
0CA4:  ADDWFC x58,F
0CA6:  MOVFF  357,01
0CAA:  MOVLW  04
0CAC:  ADDWF  x58,W
0CAE:  MOVWF  03
0CB0:  MOVF   x55,W
0CB2:  MULLW  08
0CB4:  MOVF   FF3,W
0CB6:  CLRF   x5A
0CB8:  MOVWF  x59
0CBA:  MOVLW  04
0CBC:  ADDWF  x59,F
0CBE:  MOVLW  00
0CC0:  ADDWFC x5A,F
0CC2:  MOVFF  359,FE9
0CC6:  MOVLW  04
0CC8:  ADDWF  x5A,W
0CCA:  MOVWF  FEA
0CCC:  MOVF   FEF,W
0CCE:  ANDLW  43
0CD0:  MOVFF  03,FEA
0CD4:  MOVFF  357,FE9
0CD8:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CDA:  MOVFF  355,357
0CDE:  MOVLB  0
0CE0:  RCALL  0B4E
0CE2:  MOVLB  3
....................       } 
....................    } 
.................... } 
0CE4:  MOVLB  0
0CE6:  GOTO   0D5C (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
1EEC:  MOVF   18,W
1EEE:  MOVWF  01
.................... } 
1EF0:  GOTO   2E3A (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02F6:  MOVLB  3
02F8:  CLRF   x55
02FA:  MOVF   x55,F
02FC:  BNZ   0312
....................       USB_Interface[i] = 0;   //reset each interface to default 
02FE:  CLRF   03
0300:  MOVF   x55,W
0302:  ADDLW  21
0304:  MOVWF  FE9
0306:  MOVLW  00
0308:  ADDWFC 03,W
030A:  MOVWF  FEA
030C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
030E:  INCF   x55,F
0310:  BRA    02FA
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
0312:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
0314:  MOVLW  01
0316:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0318:  CLRF   17
.................... } 
031A:  MOVLB  0
031C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0220:  MOVLB  3
0222:  BCF    x62.0
0224:  BTFSC  x61.7
0226:  BSF    x62.0
....................     
....................    endpoint &= 0x7F; 
0228:  BCF    x61.7
....................     
....................    if (endpoint > 16) 
022A:  MOVF   x61,W
022C:  SUBLW  10
022E:  BC    0236
....................       return(FALSE); 
0230:  MOVLW  00
0232:  MOVWF  01
0234:  BRA    0280
....................     
....................    if (direction) { //IN 
0236:  BTFSS  x62.0
0238:  BRA    025E
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
023A:  CLRF   03
023C:  MOVF   x61,W
023E:  MOVFF  FF2,363
0242:  BCF    FF2.7
0244:  MOVLB  0
0246:  RCALL  00BA
0248:  MOVLB  3
024A:  BTFSC  x63.7
024C:  BSF    FF2.7
024E:  SUBLW  FF
0250:  BNZ   0256
0252:  MOVLW  00
0254:  BRA    0258
0256:  MOVLW  01
0258:  MOVWF  01
025A:  BRA    0280
....................    } 
....................    else {   //OUT 
025C:  BRA    0280
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
025E:  CLRF   03
0260:  MOVF   x61,W
0262:  MOVFF  FF2,363
0266:  BCF    FF2.7
0268:  MOVLB  0
026A:  RCALL  00BA
026C:  MOVLB  3
026E:  BTFSC  x63.7
0270:  BSF    FF2.7
0272:  SUBLW  FF
0274:  BNZ   027A
0276:  MOVLW  00
0278:  BRA    027C
027A:  MOVLW  01
027C:  MOVWF  01
027E:  BRA    0280
....................    } 
.................... } 
0280:  MOVLB  0
0282:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B4E:  MOVLB  3
0B50:  MOVF   x57,F
0B52:  BNZ   0B6C
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B54:  DECFSZ 17,W
0B56:  BRA    0B60
0B58:  MOVLB  0
0B5A:  RCALL  0364
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B5C:  BRA    0B6A
0B5E:  MOVLB  3
0B60:  MOVF   17,W
0B62:  SUBLW  02
0B64:  BNZ   0B6C
0B66:  MOVLB  0
0B68:  BRA    0B40
0B6A:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0B6C:  MOVLB  0
0B6E:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B1C:  MOVLB  3
0B1E:  MOVF   x57,F
0B20:  BNZ   0B22
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
0B22:  MOVLB  0
0B24:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
0906:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0908:  MOVLB  4
090A:  MOVF   x10,W
090C:  ANDLW  7F
090E:  XORLW  00
0910:  MOVLB  0
0912:  BZ    091E
0914:  XORLW  01
0916:  BZ    0922
0918:  XORLW  03
091A:  BZ    0926
091C:  BRA    092A
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
091E:  BRA    064E
....................          break; 
0920:  BRA    092E
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
0922:  BRA    0706
....................          break; 
0924:  BRA    092E
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0926:  BRA    089C
....................          break; 
0928:  BRA    092E
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
092A:  RCALL  035E
....................          break; 
092C:  BRA    092E
....................    } 
.................... } 
092E:  GOTO   0BA8 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
064E:  MOVLB  4
0650:  MOVF   x11,W
0652:  XORLW  00
0654:  MOVLB  0
0656:  BZ    0672
0658:  XORLW  01
065A:  BZ    0686
065C:  XORLW  02
065E:  BZ    06A0
0660:  XORLW  06
0662:  BZ    06B8
0664:  XORLW  03
0666:  BZ    06CA
0668:  XORLW  0E
066A:  BZ    06CE
066C:  XORLW  01
066E:  BZ    06DE
0670:  BRA    06FE
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0672:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
0676:  MOVLB  4
0678:  CLRF   x51
....................             usb_request_send_response(2); 
067A:  MOVLW  02
067C:  MOVLB  3
067E:  MOVWF  x5A
0680:  MOVLB  0
0682:  RCALL  0358
....................             break; 
0684:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0686:  MOVLB  4
0688:  DECFSZ x12,W
068A:  BRA    069A
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
068C:  MOVLW  01
068E:  ANDWF  19,F
....................                usb_put_0len_0(); 
0690:  MOVLB  3
0692:  CLRF   x5A
0694:  MOVLB  0
0696:  RCALL  0358
....................             } 
....................             else 
0698:  BRA    069E
....................                usb_request_stall(); 
069A:  MOVLB  0
069C:  RCALL  035E
....................             break; 
069E:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
06A0:  MOVLB  4
06A2:  DECFSZ x12,W
06A4:  BRA    06B2
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
06A6:  BSF    19.1
....................                usb_put_0len_0(); 
06A8:  MOVLB  3
06AA:  CLRF   x5A
06AC:  MOVLB  0
06AE:  RCALL  0358
....................             } 
....................             else 
06B0:  BRA    06B6
....................                usb_request_stall(); 
06B2:  MOVLB  0
06B4:  RCALL  035E
....................             break; 
06B6:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06B8:  MOVLW  02
06BA:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06BC:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06C0:  MOVLB  3
06C2:  CLRF   x5A
06C4:  MOVLB  0
06C6:  RCALL  0358
....................             break; 
06C8:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06CA:  BRA    03FE
....................             break; 
06CC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06CE:  MOVFF  18,450
....................             usb_request_send_response(1); 
06D2:  MOVLW  01
06D4:  MOVLB  3
06D6:  MOVWF  x5A
06D8:  MOVLB  0
06DA:  RCALL  0358
....................             break; 
06DC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06DE:  MOVLB  4
06E0:  MOVF   x12,W
06E2:  SUBLW  01
06E4:  BNC   06FA
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06E6:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06EA:  MOVFF  412,357
06EE:  MOVLB  0
06F0:  BRA    047C
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06F2:  MOVLB  3
06F4:  CLRF   x5A
06F6:  MOVLB  0
06F8:  RCALL  0358
....................             } 
....................             break; 
06FA:  MOVLB  0
06FC:  BRA    0702
....................  
....................       default: 
....................             usb_request_stall(); 
06FE:  RCALL  035E
....................             break; 
0700:  BRA    0702
....................    } 
.................... } 
0702:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
0706:  MOVFF  18,357
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
070A:  MOVLB  4
070C:  MOVF   x11,W
070E:  XORLW  00
0710:  MOVLB  0
0712:  BZ    071E
0714:  XORLW  0A
0716:  BZ    0730
0718:  XORLW  01
071A:  BZ    077E
071C:  BRA    07A8
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
071E:  MOVLB  4
0720:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
0722:  CLRF   x51
....................             usb_request_send_response(2); 
0724:  MOVLW  02
0726:  MOVLB  3
0728:  MOVWF  x5A
072A:  MOVLB  0
072C:  RCALL  0358
....................             break; 
072E:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0730:  MOVLB  3
0732:  MOVF   x57,F
0734:  BZ    0778
0736:  MOVLW  01
0738:  SUBWF  x57,W
073A:  CLRF   03
073C:  MOVFF  FF2,358
0740:  BCF    FF2.7
0742:  MOVLB  0
0744:  RCALL  014C
0746:  MOVLB  3
0748:  BTFSC  x58.7
074A:  BSF    FF2.7
074C:  MOVWF  01
074E:  MOVLB  4
0750:  SUBWF  x14,W
0752:  BTFSS  FD8.0
0754:  BRA    075A
0756:  MOVLB  3
0758:  BRA    0778
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
075A:  CLRF   03
075C:  MOVF   x14,W
075E:  ADDLW  21
0760:  MOVWF  FE9
0762:  MOVLW  00
0764:  ADDWFC 03,W
0766:  MOVWF  FEA
0768:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
076C:  MOVLW  01
076E:  MOVLB  3
0770:  MOVWF  x5A
0772:  MOVLB  0
0774:  RCALL  0358
....................             } 
....................             else 
0776:  BRA    077C
....................                usb_request_stall(); 
0778:  MOVLB  0
077A:  RCALL  035E
....................             break; 
077C:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
077E:  MOVLB  3
0780:  MOVF   x57,F
0782:  BZ    07A2
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
0784:  CLRF   03
0786:  MOVLB  4
0788:  MOVF   x14,W
078A:  ADDLW  21
078C:  MOVWF  FE9
078E:  MOVLW  00
0790:  ADDWFC 03,W
0792:  MOVWF  FEA
0794:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0798:  MOVLB  3
079A:  CLRF   x5A
079C:  MOVLB  0
079E:  RCALL  0358
....................             } 
....................             else 
07A0:  BRA    07A6
....................                usb_request_stall(); 
07A2:  MOVLB  0
07A4:  RCALL  035E
....................             break; 
07A6:  BRA    07AC
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
07A8:  RCALL  035E
....................             break; 
07AA:  BRA    07AC
....................    } 
.................... } 
07AC:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
089C:  MOVFF  414,361
08A0:  RCALL  0220
08A2:  MOVF   01,F
08A4:  BZ    0902
....................       switch(usb_ep0_rx_buffer[1]) { 
08A6:  MOVLB  4
08A8:  MOVF   x11,W
08AA:  XORLW  01
08AC:  MOVLB  0
08AE:  BZ    08BA
08B0:  XORLW  02
08B2:  BZ    08CA
08B4:  XORLW  03
08B6:  BZ    08DA
08B8:  BRA    08FE
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08BA:  MOVFF  414,357
08BE:  BRA    07B0
....................                usb_put_0len_0(); 
08C0:  MOVLB  3
08C2:  CLRF   x5A
08C4:  MOVLB  0
08C6:  RCALL  0358
....................                break; 
08C8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08CA:  MOVFF  414,357
08CE:  BRA    07F8
....................                      usb_put_0len_0(); 
08D0:  MOVLB  3
08D2:  CLRF   x5A
08D4:  MOVLB  0
08D6:  RCALL  0358
....................                      break; 
08D8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08DA:  MOVLB  4
08DC:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08DE:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08E0:  MOVFF  414,357
08E4:  MOVLB  0
08E6:  BRA    0842
08E8:  MOVF   01,F
08EA:  BZ    08F2
....................                   usb_ep0_tx_buffer[0]=1; 
08EC:  MOVLW  01
08EE:  MOVLB  4
08F0:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
08F2:  MOVLW  02
08F4:  MOVLB  3
08F6:  MOVWF  x5A
08F8:  MOVLB  0
08FA:  RCALL  0358
....................                break; 
08FC:  BRA    0902
....................  
....................          default: 
....................             usb_request_stall(); 
08FE:  RCALL  035E
....................             break; 
0900:  BRA    0902
....................       } 
....................    } 
.................... } 
0902:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03FE:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
0400:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
0402:  MOVLB  4
0404:  MOVF   x13,W
0406:  XORLW  01
0408:  MOVLB  0
040A:  BZ    0416
040C:  XORLW  03
040E:  BZ    0420
0410:  XORLW  01
0412:  BZ    0426
0414:  BRA    045C
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
0416:  MOVLW  12
0418:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
041A:  MOVLW  03
041C:  MOVWF  1A
....................             break; 
041E:  BRA    0460
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
0420:  MOVLW  20
0422:  MOVWF  20
....................             break; 
0424:  BRA    0460
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
0426:  MOVLW  02
0428:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
042A:  CLRF   03
042C:  MOVLB  4
042E:  MOVF   x12,W
0430:  MOVFF  FF2,357
0434:  BCF    FF2.7
0436:  MOVLB  0
0438:  RCALL  0180
043A:  MOVLB  3
043C:  BTFSC  x57.7
043E:  BSF    FF2.7
0440:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
0442:  CLRF   03
0444:  MOVF   1F,W
0446:  MOVFF  FF2,357
044A:  BCF    FF2.7
044C:  MOVLB  0
044E:  RCALL  0194
0450:  MOVLB  3
0452:  BTFSC  x57.7
0454:  BSF    FF2.7
0456:  MOVWF  20
....................             break; 
0458:  MOVLB  0
045A:  BRA    0460
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
045C:  RCALL  035E
....................             return; 
045E:  BRA    0478
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
0460:  MOVLB  4
0462:  MOVF   x17,F
0464:  BNZ   0470
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
0466:  MOVF   20,W
0468:  SUBWF  x16,W
046A:  BC    0470
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
046C:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0470:  MOVLW  01
0472:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
0474:  MOVLB  0
0476:  RCALL  0364
.................... } 
0478:  GOTO   0702 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B40:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B42:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0B44:  MOVFF  1E,358
0B48:  BRA    0B26
....................    #endif 
.................... } 
0B4A:  GOTO   0B6A (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
0364:  MOVLB  3
0366:  CLRF   x58
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
0368:  MOVF   20,F
036A:  BZ    03E8
036C:  MOVF   x58,W
036E:  SUBLW  3F
0370:  BNC   03E8
....................       switch(USB_stack_status.getdesc_type) { 
0372:  MOVF   1A,W
0374:  XORLW  00
0376:  MOVLB  0
0378:  BZ    0384
037A:  XORLW  02
037C:  BZ    039C
037E:  XORLW  01
0380:  BZ    03B4
0382:  BRA    03CC
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0384:  CLRF   03
0386:  MOVF   1F,W
0388:  MOVFF  FF2,35A
038C:  BCF    FF2.7
038E:  RCALL  011C
0390:  MOVLB  3
0392:  BTFSC  x5A.7
0394:  BSF    FF2.7
0396:  MOVWF  x59
....................             break; 
0398:  MOVLB  0
039A:  BRA    03CC
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
039C:  CLRF   03
039E:  MOVF   1F,W
03A0:  MOVFF  FF2,35A
03A4:  BCF    FF2.7
03A6:  RCALL  0194
03A8:  MOVLB  3
03AA:  BTFSC  x5A.7
03AC:  BSF    FF2.7
03AE:  MOVWF  x59
....................             break; 
03B0:  MOVLB  0
03B2:  BRA    03CC
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
03B4:  CLRF   03
03B6:  MOVF   1F,W
03B8:  MOVFF  FF2,35A
03BC:  BCF    FF2.7
03BE:  RCALL  015E
03C0:  MOVLB  3
03C2:  BTFSC  x5A.7
03C4:  BSF    FF2.7
03C6:  MOVWF  x59
....................             break; 
03C8:  MOVLB  0
03CA:  BRA    03CC
....................       } 
....................       usb_getdesc_ptr++; 
03CC:  INCF   1F,F
....................       usb_getdesc_len--; 
03CE:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
03D0:  MOVLB  3
03D2:  MOVF   x58,W
03D4:  INCF   x58,F
03D6:  CLRF   03
03D8:  ADDLW  50
03DA:  MOVWF  FE9
03DC:  MOVLW  04
03DE:  ADDWFC 03,W
03E0:  MOVWF  FEA
03E2:  MOVFF  359,FEF
....................    } 
03E6:  BRA    0368
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03E8:  MOVF   20,F
03EA:  BNZ   03F4
03EC:  MOVF   x58,W
03EE:  SUBLW  40
03F0:  BZ    03F4
....................          USB_stack_status.dev_req = NONE; 
03F2:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
03F4:  MOVFF  358,35A
03F8:  MOVLB  0
03FA:  RCALL  0358
.................... } 
03FC:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresionp[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0,promediopresionp=0.0; 
.................... short emergency=0,flag_agua=0,flag_agua2=0,CamaraOUT=0,CamaraIN=0,flag_reservorio=0,flag_presostato=0; 
.................... int8 r=0,t=0,r2=0,t2=0,TiempoControl=0,z=0,Frio=0,llena=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Alarma=0,AlarmaAgua=0; 
.................... int8 Puerta=0,Parada=0,NivelReservorio=0,NivelTanque=0,Presostato=0,ADC_Pt100=0,y=0,Chksum=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Nivel=0,t_exhaust=0,tinicio=0,tagua=0,treservorio=0,PresionCamara16=0,PresionPreCamara16=0; 
....................  
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0,Visua=0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,tiempo_esterilizacion=0,p=0,MediaMovil=2; 
.................... float V0=0.0,R1=6210.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0,d4=0.0,d5=0.0; 
.................... float V1=0.0,Presion=0.0,d6=0.0,d7=0.0,d8=0.0,V2=0.0,Presionp=0.0; 
.................... float Setpoint=0.0,Temperatura=0.0,TempUSB=0.0,PresionCamara=0.0,PresionPreCamara=0.0,K=0.006429; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte posicion, buffer[0x10], txbuf[0x11],rxbuf[0x11];     //Buffer de memoria 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0D8A:  BTFSC  FC7.5
0D8C:  BRA    0D96
0D8E:  MOVLB  3
0D90:  CLRF   x3E
0D92:  BTFSC  FC7.2
0D94:  BSF    x3E.7
0D96:  MOVLB  3
0D98:  MOVF   x3E,W
0D9A:  INCF   x3E,F
0D9C:  MOVWF  x0A
....................  
....................    /* Solicitud de lectura del esclavo por el master */ 
....................    if(fstate == 0x80) {          
0D9E:  MOVF   x0A,W
0DA0:  SUBLW  80
0DA2:  BNZ   0DC2
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0DA4:  CLRF   03
0DA6:  MOVF   x0B,W
0DA8:  ADDLW  1C
0DAA:  MOVWF  FE9
0DAC:  MOVLW  03
0DAE:  ADDWFC 03,W
0DB0:  MOVWF  FEA
0DB2:  MOVFF  FEF,355
0DB6:  MOVFF  355,356
0DBA:  MOVLB  0
0DBC:  BRA    0D72
....................       //i2c_write (txbuf[0]);       
....................       //i2c_write ((int8)V2); 
....................    } 
....................    /* Sino está solicitando lectura es que está enviando algo */ 
....................    else {                              //Sino es que hay dato en el bus I2C... 
0DBE:  BRA    0DF2
0DC0:  MOVLB  3
....................       incoming = i2c_read();           //... lo lee 
0DC2:  BCF    FC6.6
0DC4:  BTFSS  F9E.3
0DC6:  BRA    0DC4
0DC8:  MOVF   FC9,W
0DCA:  BSF    FC6.4
0DCC:  MOVWF  x54
....................     
....................  
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0DCE:  DECFSZ x0A,W
0DD0:  BRA    0DD8
....................          posicion = incoming;          //Se guarda posición 
0DD2:  MOVFF  354,30B
....................       } 
....................       else if (fState == 2) {          //Información recibida corresponde al dato 
0DD6:  BRA    0DF0
0DD8:  MOVF   x0A,W
0DDA:  SUBLW  02
0DDC:  BNZ   0DF0
....................          rxbuf[posicion] = incoming; 
0DDE:  CLRF   03
0DE0:  MOVF   x0B,W
0DE2:  ADDLW  2D
0DE4:  MOVWF  FE9
0DE6:  MOVLW  03
0DE8:  ADDWFC 03,W
0DEA:  MOVWF  FEA
0DEC:  MOVFF  354,FEF
0DF0:  MOVLB  0
....................       } 
....................   } 
.................... } 
....................  
0DF2:  BCF    F9E.3
0DF4:  GOTO   0078
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
1394:  MOVLB  2
1396:  MOVF   x70,W
1398:  MULLW  04
139A:  MOVF   FF3,W
139C:  CLRF   03
139E:  ADDLW  42
13A0:  MOVWF  FE9
13A2:  MOVLW  02
13A4:  ADDWFC 03,W
13A6:  MOVWF  FEA
13A8:  MOVFF  2AA,FEF
13AC:  MOVFF  2AB,FEC
13B0:  MOVFF  2AC,FEC
13B4:  MOVFF  2AD,FEC
....................    y++; 
13B8:  INCF   x70,F
....................    if(y>=2) 
13BA:  MOVF   x70,W
13BC:  SUBLW  01
13BE:  BC    13FA
....................    { 
....................       y=0; 
13C0:  CLRF   x70
....................       Aumento=X[1]-X[0]; 
13C2:  BSF    FD8.1
13C4:  MOVFF  249,347
13C8:  MOVFF  248,346
13CC:  MOVFF  247,345
13D0:  MOVFF  246,344
13D4:  MOVFF  245,34B
13D8:  MOVFF  244,34A
13DC:  MOVFF  243,349
13E0:  MOVFF  242,348
13E4:  MOVLB  0
13E6:  RCALL  111C
13E8:  MOVFF  03,251
13EC:  MOVFF  02,250
13F0:  MOVFF  01,24F
13F4:  MOVFF  00,24E
13F8:  MOVLB  2
....................    } 
.................... } 
13FA:  MOVLB  0
13FC:  GOTO   1622 (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
0F6A:  MOVLB  3
0F6C:  RLCF   x40,W
0F6E:  MOVWF  00
0F70:  RLCF   00,F
0F72:  MOVLW  FC
0F74:  ANDWF  00,F
0F76:  MOVFF  00,01
0F7A:  MOVF   FC2,W
0F7C:  ANDLW  C3
0F7E:  IORWF  00,W
0F80:  MOVWF  FC2
0F82:  MOVLW  01
0F84:  MOVWF  x45
0F86:  MOVLB  0
0F88:  RCALL  0F0A
0F8A:  BSF    FC2.1
0F8C:  BTFSC  FC2.1
0F8E:  BRA    0F8C
0F90:  MOVFF  FC4,346
0F94:  MOVFF  FC3,345
0F98:  MOVLB  0
0F9A:  RCALL  0F34
0F9C:  MOVFF  03,344
0FA0:  MOVFF  02,343
0FA4:  MOVFF  01,342
0FA8:  MOVFF  00,341
0FAC:  MOVFF  341,00
0FB0:  MOVFF  342,01
0FB4:  MOVFF  343,02
0FB8:  MOVFF  344,03
.................... } 
0FBC:  RETLW  00
.................... float Leer_Sensor(int media) 
.................... { 
....................    Prom=0.0; 
*
14F6:  MOVLB  2
14F8:  CLRF   xA9
14FA:  CLRF   xA8
14FC:  CLRF   xA7
14FE:  CLRF   xA6
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
1500:  MOVLB  3
1502:  CLRF   x40
1504:  MOVLB  0
1506:  RCALL  0F6A
1508:  MOVFF  03,291
150C:  MOVFF  02,290
1510:  MOVFF  01,28F
1514:  MOVFF  00,28E
....................    V0 = V0/40.96; // Se elimina la ganancia 
1518:  MOVFF  291,347
151C:  MOVFF  290,346
1520:  MOVFF  28F,345
1524:  MOVFF  28E,344
1528:  MOVLW  0A
152A:  MOVLB  3
152C:  MOVWF  x4B
152E:  MOVLW  D7
1530:  MOVWF  x4A
1532:  MOVLW  23
1534:  MOVWF  x49
1536:  MOVLW  84
1538:  MOVWF  x48
153A:  MOVLB  0
153C:  RCALL  0FBE
153E:  MOVFF  03,291
1542:  MOVFF  02,290
1546:  MOVFF  01,28F
154A:  MOVFF  00,28E
....................    Pt=(R1)/((1023.0/V0)-1.0); // Se calcula el valor de la PT100 
154E:  MOVLB  3
1550:  CLRF   x47
1552:  MOVLW  C0
1554:  MOVWF  x46
1556:  MOVLW  7F
1558:  MOVWF  x45
155A:  MOVLW  88
155C:  MOVWF  x44
155E:  MOVFF  291,34B
1562:  MOVFF  290,34A
1566:  MOVFF  28F,349
156A:  MOVFF  28E,348
156E:  MOVLB  0
1570:  RCALL  0FBE
1572:  MOVFF  00,340
1576:  MOVFF  01,341
157A:  MOVFF  02,342
157E:  MOVFF  03,343
1582:  BSF    FD8.1
1584:  MOVFF  03,347
1588:  MOVFF  02,346
158C:  MOVFF  01,345
1590:  MOVFF  00,344
1594:  MOVLB  3
1596:  CLRF   x4B
1598:  CLRF   x4A
159A:  CLRF   x49
159C:  MOVLW  7F
159E:  MOVWF  x48
15A0:  MOVLB  0
15A2:  RCALL  111C
15A4:  MOVFF  295,347
15A8:  MOVFF  294,346
15AC:  MOVFF  293,345
15B0:  MOVFF  292,344
15B4:  MOVFF  03,34B
15B8:  MOVFF  02,34A
15BC:  MOVFF  01,349
15C0:  MOVFF  00,348
15C4:  RCALL  0FBE
15C6:  MOVFF  03,299
15CA:  MOVFF  02,298
15CE:  MOVFF  01,297
15D2:  MOVFF  00,296
....................    Pt=Pt-0.3; 
15D6:  BSF    FD8.1
15D8:  MOVFF  299,347
15DC:  MOVFF  298,346
15E0:  MOVFF  297,345
15E4:  MOVFF  296,344
15E8:  MOVLW  9A
15EA:  MOVLB  3
15EC:  MOVWF  x4B
15EE:  MOVLW  99
15F0:  MOVWF  x4A
15F2:  MOVLW  19
15F4:  MOVWF  x49
15F6:  MOVLW  7D
15F8:  MOVWF  x48
15FA:  MOVLB  0
15FC:  RCALL  111C
15FE:  MOVFF  03,299
1602:  MOVFF  02,298
1606:  MOVFF  01,297
160A:  MOVFF  00,296
....................    //Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>(media-1)) 
160E:  MOVLW  01
1610:  MOVLB  3
1612:  SUBWF  x3F,W
1614:  MOVLB  2
1616:  SUBWF  x88,W
1618:  BZ    1624
161A:  BNC   1624
....................    {l=0;ActualizaRecta();} 
161C:  CLRF   x88
161E:  MOVLB  0
1620:  BRA    1394
1622:  MOVLB  2
1624:  CLRF   16
1626:  BTFSC  FF2.7
1628:  BSF    16.7
162A:  BCF    FF2.7
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=Pt;l++; 
162C:  MOVLB  3
162E:  CLRF   x55
1630:  MOVFF  288,354
1634:  CLRF   x57
1636:  MOVLW  04
1638:  MOVWF  x56
163A:  MOVLB  0
163C:  CALL   0DF8
1640:  BTFSC  16.7
1642:  BSF    FF2.7
1644:  MOVF   01,W
1646:  ADDLW  62
1648:  MOVWF  FE9
164A:  MOVLW  00
164C:  ADDWFC 02,W
164E:  MOVWF  FEA
1650:  MOVFF  296,FEF
1654:  MOVFF  297,FEC
1658:  MOVFF  298,FEC
165C:  MOVFF  299,FEC
1660:  MOVLB  2
1662:  INCF   x88,F
....................           
....................    for(h=0;h<media;h++) 
1664:  CLRF   x87
1666:  MOVLB  3
1668:  MOVF   x3F,W
166A:  MOVLB  2
166C:  SUBWF  x87,W
166E:  BC    16FA
1670:  CLRF   16
1672:  BTFSC  FF2.7
1674:  BSF    16.7
1676:  BCF    FF2.7
....................    { 
....................       Prom+=promedio[h]; 
1678:  MOVLB  3
167A:  CLRF   x55
167C:  MOVFF  287,354
1680:  CLRF   x57
1682:  MOVLW  04
1684:  MOVWF  x56
1686:  MOVLB  0
1688:  CALL   0DF8
168C:  BTFSC  16.7
168E:  BSF    FF2.7
1690:  MOVFF  02,03
1694:  MOVF   01,W
1696:  ADDLW  62
1698:  MOVWF  FE9
169A:  MOVLW  00
169C:  ADDWFC 02,W
169E:  MOVWF  FEA
16A0:  MOVFF  FEF,00
16A4:  MOVFF  FEC,01
16A8:  MOVFF  FEC,02
16AC:  MOVFF  FEC,03
16B0:  MOVFF  FEA,341
16B4:  MOVFF  FE9,340
16B8:  BCF    FD8.1
16BA:  MOVFF  2A9,347
16BE:  MOVFF  2A8,346
16C2:  MOVFF  2A7,345
16C6:  MOVFF  2A6,344
16CA:  MOVFF  03,34B
16CE:  MOVFF  02,34A
16D2:  MOVFF  01,349
16D6:  MOVFF  00,348
16DA:  RCALL  111C
16DC:  MOVFF  341,FEA
16E0:  MOVFF  340,FE9
16E4:  MOVFF  03,2A9
16E8:  MOVFF  02,2A8
16EC:  MOVFF  01,2A7
16F0:  MOVFF  00,2A6
....................    }  
16F4:  MOVLB  2
16F6:  INCF   x87,F
16F8:  BRA    1666
....................    Prom=Prom/media;    
16FA:  MOVLB  3
16FC:  CLRF   x46
16FE:  MOVFF  33F,345
1702:  MOVLB  0
1704:  RCALL  0F34
1706:  MOVFF  2A9,347
170A:  MOVFF  2A8,346
170E:  MOVFF  2A7,345
1712:  MOVFF  2A6,344
1716:  MOVFF  03,34B
171A:  MOVFF  02,34A
171E:  MOVFF  01,349
1722:  MOVFF  00,348
1726:  RCALL  0FBE
1728:  MOVFF  03,2A9
172C:  MOVFF  02,2A8
1730:  MOVFF  01,2A7
1734:  MOVFF  00,2A6
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
1738:  MOVFF  2A9,347
173C:  MOVFF  2A8,346
1740:  MOVFF  2A7,345
1744:  MOVFF  2A6,344
1748:  MOVFF  2A9,34B
174C:  MOVFF  2A8,34A
1750:  MOVFF  2A7,349
1754:  MOVFF  2A6,348
1758:  RCALL  1400
175A:  MOVFF  00,340
175E:  MOVFF  01,341
1762:  MOVFF  02,342
1766:  MOVFF  03,343
176A:  MOVFF  03,347
176E:  MOVFF  02,346
1772:  MOVFF  01,345
1776:  MOVFF  00,344
177A:  MOVFF  301,34B
177E:  MOVFF  300,34A
1782:  MOVFF  2FF,349
1786:  MOVFF  2FE,348
178A:  RCALL  1400
178C:  MOVFF  00,340
1790:  MOVFF  01,341
1794:  MOVFF  02,342
1798:  MOVFF  03,343
179C:  MOVFF  2A9,347
17A0:  MOVFF  2A8,346
17A4:  MOVFF  2A7,345
17A8:  MOVFF  2A6,344
17AC:  MOVFF  305,34B
17B0:  MOVFF  304,34A
17B4:  MOVFF  303,349
17B8:  MOVFF  302,348
17BC:  RCALL  1400
17BE:  BCF    FD8.1
17C0:  MOVFF  343,347
17C4:  MOVFF  342,346
17C8:  MOVFF  341,345
17CC:  MOVFF  340,344
17D0:  MOVFF  03,34B
17D4:  MOVFF  02,34A
17D8:  MOVFF  01,349
17DC:  MOVFF  00,348
17E0:  RCALL  111C
17E2:  MOVFF  00,340
17E6:  MOVFF  01,341
17EA:  MOVFF  02,342
17EE:  MOVFF  03,343
17F2:  BCF    FD8.1
17F4:  MOVFF  03,347
17F8:  MOVFF  02,346
17FC:  MOVFF  01,345
1800:  MOVFF  00,344
1804:  MOVFF  309,34B
1808:  MOVFF  308,34A
180C:  MOVFF  307,349
1810:  MOVFF  306,348
1814:  RCALL  111C
1816:  MOVFF  03,2AD
181A:  MOVFF  02,2AC
181E:  MOVFF  01,2AB
1822:  MOVFF  00,2AA
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
1826:  MOVLB  3
1828:  CLRF   x46
182A:  MOVFF  289,345
182E:  MOVLB  0
1830:  CALL   0F34
1834:  MOVFF  00,340
1838:  MOVFF  01,341
183C:  MOVFF  02,342
1840:  MOVFF  03,343
1844:  MOVLB  3
1846:  CLRF   x46
1848:  MOVFF  28A,345
184C:  MOVLB  0
184E:  CALL   0F34
1852:  BSF    FD8.1
1854:  MOVFF  343,347
1858:  MOVFF  342,346
185C:  MOVFF  341,345
1860:  MOVFF  340,344
1864:  MOVFF  03,34B
1868:  MOVFF  02,34A
186C:  MOVFF  01,349
1870:  MOVFF  00,348
1874:  RCALL  111C
1876:  BCF    FD8.1
1878:  MOVFF  2AD,347
187C:  MOVFF  2AC,346
1880:  MOVFF  2AB,345
1884:  MOVFF  2AA,344
1888:  MOVFF  03,34B
188C:  MOVFF  02,34A
1890:  MOVFF  01,349
1894:  MOVFF  00,348
1898:  RCALL  111C
189A:  MOVFF  03,2AD
189E:  MOVFF  02,2AC
18A2:  MOVFF  01,2AB
18A6:  MOVFF  00,2AA
....................     
....................    //return Prom; 
....................    return Temperature; 
18AA:  MOVFF  2AA,00
18AE:  MOVFF  2AB,01
18B2:  MOVFF  2AC,02
18B6:  MOVFF  2AD,03
.................... } 
18BA:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_Camara(int media){ 
....................    promediopresion=0.0; 
*
1936:  MOVLB  2
1938:  CLRF   x4D
193A:  CLRF   x4C
193C:  CLRF   x4B
193E:  CLRF   x4A
....................    V1 = sensores(1);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
1940:  MOVLW  01
1942:  MOVLB  3
1944:  MOVWF  x40
1946:  MOVLB  0
1948:  CALL   0F6A
194C:  MOVFF  03,2CD
1950:  MOVFF  02,2CC
1954:  MOVFF  01,2CB
1958:  MOVFF  00,2CA
....................    V1 = V1*(5.0/1023.0); 
195C:  MOVFF  2CD,347
1960:  MOVFF  2CC,346
1964:  MOVFF  2CB,345
1968:  MOVFF  2CA,344
196C:  MOVLW  0A
196E:  MOVLB  3
1970:  MOVWF  x4B
1972:  MOVLW  28
1974:  MOVWF  x4A
1976:  MOVLW  20
1978:  MOVWF  x49
197A:  MOVLW  77
197C:  MOVWF  x48
197E:  MOVLB  0
1980:  RCALL  1400
1982:  MOVFF  03,2CD
1986:  MOVFF  02,2CC
198A:  MOVFF  01,2CB
198E:  MOVFF  00,2CA
....................    Presion=(V1-0.2)/(K); 
1992:  BSF    FD8.1
1994:  MOVFF  2CD,347
1998:  MOVFF  2CC,346
199C:  MOVFF  2CB,345
19A0:  MOVFF  2CA,344
19A4:  MOVLW  CD
19A6:  MOVLB  3
19A8:  MOVWF  x4B
19AA:  MOVLW  CC
19AC:  MOVWF  x4A
19AE:  MOVLW  4C
19B0:  MOVWF  x49
19B2:  MOVLW  7C
19B4:  MOVWF  x48
19B6:  MOVLB  0
19B8:  CALL   111C
19BC:  MOVFF  00,340
19C0:  MOVFF  01,341
19C4:  MOVFF  02,342
19C8:  MOVFF  03,343
19CC:  MOVFF  03,347
19D0:  MOVFF  02,346
19D4:  MOVFF  01,345
19D8:  MOVFF  00,344
19DC:  MOVFF  2FD,34B
19E0:  MOVFF  2FC,34A
19E4:  MOVFF  2FB,349
19E8:  MOVFF  2FA,348
19EC:  CALL   0FBE
19F0:  MOVFF  03,2D1
19F4:  MOVFF  02,2D0
19F8:  MOVFF  01,2CF
19FC:  MOVFF  00,2CE
....................     
....................    if(Presion<0.0) 
1A00:  MOVFF  2D1,343
1A04:  MOVFF  2D0,342
1A08:  MOVFF  2CF,341
1A0C:  MOVFF  2CE,340
1A10:  MOVLB  3
1A12:  CLRF   x47
1A14:  CLRF   x46
1A16:  CLRF   x45
1A18:  CLRF   x44
1A1A:  MOVLB  0
1A1C:  RCALL  18BC
1A1E:  BNC   1A2A
....................    { 
....................       Presion=0.0; 
1A20:  MOVLB  2
1A22:  CLRF   xD1
1A24:  CLRF   xD0
1A26:  CLRF   xCF
1A28:  CLRF   xCE
....................    } 
....................     
....................    if(r>media-1) 
1A2A:  MOVLW  01
1A2C:  MOVLB  3
1A2E:  SUBWF  x3F,W
1A30:  MOVLB  2
1A32:  SUBWF  x57,W
1A34:  BZ    1A3A
1A36:  BNC   1A3A
....................    {r=0;} 
1A38:  CLRF   x57
....................    PromPresion[r]=Presion;r++; 
1A3A:  MOVF   x57,W
1A3C:  MULLW  04
1A3E:  MOVF   FF3,W
1A40:  CLRF   03
1A42:  ADDLW  A2
1A44:  MOVWF  FE9
1A46:  MOVLW  01
1A48:  ADDWFC 03,W
1A4A:  MOVWF  FEA
1A4C:  MOVFF  2CE,FEF
1A50:  MOVFF  2CF,FEC
1A54:  MOVFF  2D0,FEC
1A58:  MOVFF  2D1,FEC
1A5C:  INCF   x57,F
....................           
....................    for(t=0;t<=(media-1);t++) 
1A5E:  CLRF   x58
1A60:  MOVLW  01
1A62:  MOVLB  3
1A64:  SUBWF  x3F,W
1A66:  MOVLB  2
1A68:  SUBWF  x58,W
1A6A:  BZ    1A6E
1A6C:  BC    1ADE
....................    { 
....................       promediopresion+=PromPresion[t]; 
1A6E:  MOVF   x58,W
1A70:  MULLW  04
1A72:  MOVF   FF3,W
1A74:  CLRF   03
1A76:  ADDLW  A2
1A78:  MOVWF  FE9
1A7A:  MOVLW  01
1A7C:  ADDWFC 03,W
1A7E:  MOVWF  FEA
1A80:  MOVFF  FEF,00
1A84:  MOVFF  FEC,01
1A88:  MOVFF  FEC,02
1A8C:  MOVFF  FEC,03
1A90:  MOVFF  FEA,341
1A94:  MOVFF  FE9,340
1A98:  BCF    FD8.1
1A9A:  MOVFF  24D,347
1A9E:  MOVFF  24C,346
1AA2:  MOVFF  24B,345
1AA6:  MOVFF  24A,344
1AAA:  MOVFF  03,34B
1AAE:  MOVFF  02,34A
1AB2:  MOVFF  01,349
1AB6:  MOVFF  00,348
1ABA:  MOVLB  0
1ABC:  CALL   111C
1AC0:  MOVFF  341,FEA
1AC4:  MOVFF  340,FE9
1AC8:  MOVFF  03,24D
1ACC:  MOVFF  02,24C
1AD0:  MOVFF  01,24B
1AD4:  MOVFF  00,24A
....................    }  
1AD8:  MOVLB  2
1ADA:  INCF   x58,F
1ADC:  BRA    1A60
....................    promediopresion=promediopresion/media;    
1ADE:  MOVLB  3
1AE0:  CLRF   x46
1AE2:  MOVFF  33F,345
1AE6:  MOVLB  0
1AE8:  CALL   0F34
1AEC:  MOVFF  24D,347
1AF0:  MOVFF  24C,346
1AF4:  MOVFF  24B,345
1AF8:  MOVFF  24A,344
1AFC:  MOVFF  03,34B
1B00:  MOVFF  02,34A
1B04:  MOVFF  01,349
1B08:  MOVFF  00,348
1B0C:  CALL   0FBE
1B10:  MOVFF  03,24D
1B14:  MOVFF  02,24C
1B18:  MOVFF  01,24B
1B1C:  MOVFF  00,24A
....................     
....................    return promediopresion; 
1B20:  MOVFF  24A,00
1B24:  MOVFF  24B,01
1B28:  MOVFF  24C,02
1B2C:  MOVFF  24D,03
.................... } 
1B30:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_PreCamara(int media){ 
....................    promediopresionp=0.0; 
1B32:  MOVLB  2
1B34:  CLRF   x55
1B36:  CLRF   x54
1B38:  CLRF   x53
1B3A:  CLRF   x52
....................    V2 = sensores(2);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
1B3C:  MOVLW  02
1B3E:  MOVLB  3
1B40:  MOVWF  x40
1B42:  MOVLB  0
1B44:  CALL   0F6A
1B48:  MOVFF  03,2E1
1B4C:  MOVFF  02,2E0
1B50:  MOVFF  01,2DF
1B54:  MOVFF  00,2DE
....................    V2 = V2*(5.0/1023.0); 
1B58:  MOVFF  2E1,347
1B5C:  MOVFF  2E0,346
1B60:  MOVFF  2DF,345
1B64:  MOVFF  2DE,344
1B68:  MOVLW  0A
1B6A:  MOVLB  3
1B6C:  MOVWF  x4B
1B6E:  MOVLW  28
1B70:  MOVWF  x4A
1B72:  MOVLW  20
1B74:  MOVWF  x49
1B76:  MOVLW  77
1B78:  MOVWF  x48
1B7A:  MOVLB  0
1B7C:  RCALL  1400
1B7E:  MOVFF  03,2E1
1B82:  MOVFF  02,2E0
1B86:  MOVFF  01,2DF
1B8A:  MOVFF  00,2DE
....................    Presionp=(V2-0.2)/(K); 
1B8E:  BSF    FD8.1
1B90:  MOVFF  2E1,347
1B94:  MOVFF  2E0,346
1B98:  MOVFF  2DF,345
1B9C:  MOVFF  2DE,344
1BA0:  MOVLW  CD
1BA2:  MOVLB  3
1BA4:  MOVWF  x4B
1BA6:  MOVLW  CC
1BA8:  MOVWF  x4A
1BAA:  MOVLW  4C
1BAC:  MOVWF  x49
1BAE:  MOVLW  7C
1BB0:  MOVWF  x48
1BB2:  MOVLB  0
1BB4:  CALL   111C
1BB8:  MOVFF  00,340
1BBC:  MOVFF  01,341
1BC0:  MOVFF  02,342
1BC4:  MOVFF  03,343
1BC8:  MOVFF  03,347
1BCC:  MOVFF  02,346
1BD0:  MOVFF  01,345
1BD4:  MOVFF  00,344
1BD8:  MOVFF  2FD,34B
1BDC:  MOVFF  2FC,34A
1BE0:  MOVFF  2FB,349
1BE4:  MOVFF  2FA,348
1BE8:  CALL   0FBE
1BEC:  MOVFF  03,2E5
1BF0:  MOVFF  02,2E4
1BF4:  MOVFF  01,2E3
1BF8:  MOVFF  00,2E2
....................    Presionp=Presionp-6.8; 
1BFC:  BSF    FD8.1
1BFE:  MOVFF  2E5,347
1C02:  MOVFF  2E4,346
1C06:  MOVFF  2E3,345
1C0A:  MOVFF  2E2,344
1C0E:  MOVLW  9A
1C10:  MOVLB  3
1C12:  MOVWF  x4B
1C14:  MOVLW  99
1C16:  MOVWF  x4A
1C18:  MOVLW  59
1C1A:  MOVWF  x49
1C1C:  MOVLW  81
1C1E:  MOVWF  x48
1C20:  MOVLB  0
1C22:  CALL   111C
1C26:  MOVFF  03,2E5
1C2A:  MOVFF  02,2E4
1C2E:  MOVFF  01,2E3
1C32:  MOVFF  00,2E2
....................     
....................    if(Presionp<0.0) 
1C36:  MOVFF  2E5,343
1C3A:  MOVFF  2E4,342
1C3E:  MOVFF  2E3,341
1C42:  MOVFF  2E2,340
1C46:  MOVLB  3
1C48:  CLRF   x47
1C4A:  CLRF   x46
1C4C:  CLRF   x45
1C4E:  CLRF   x44
1C50:  MOVLB  0
1C52:  RCALL  18BC
1C54:  BNC   1C60
....................    { 
....................       Presionp=0.0; 
1C56:  MOVLB  2
1C58:  CLRF   xE5
1C5A:  CLRF   xE4
1C5C:  CLRF   xE3
1C5E:  CLRF   xE2
....................    } 
....................     
....................    if(r2>media-1) 
1C60:  MOVLW  01
1C62:  MOVLB  3
1C64:  SUBWF  x3F,W
1C66:  MOVLB  2
1C68:  SUBWF  x59,W
1C6A:  BZ    1C70
1C6C:  BNC   1C70
....................    {r2=0;} 
1C6E:  CLRF   x59
....................    PromPresionp[r2]=Presionp;r2++; 
1C70:  MOVF   x59,W
1C72:  MULLW  04
1C74:  MOVF   FF3,W
1C76:  CLRF   03
1C78:  ADDLW  F2
1C7A:  MOVWF  FE9
1C7C:  MOVLW  01
1C7E:  ADDWFC 03,W
1C80:  MOVWF  FEA
1C82:  MOVFF  2E2,FEF
1C86:  MOVFF  2E3,FEC
1C8A:  MOVFF  2E4,FEC
1C8E:  MOVFF  2E5,FEC
1C92:  INCF   x59,F
....................           
....................    for(t2=0;t2<=(media-1);t2++) 
1C94:  CLRF   x5A
1C96:  MOVLW  01
1C98:  MOVLB  3
1C9A:  SUBWF  x3F,W
1C9C:  MOVLB  2
1C9E:  SUBWF  x5A,W
1CA0:  BZ    1CA4
1CA2:  BC    1D14
....................    { 
....................       promediopresionp+=PromPresionp[t2]; 
1CA4:  MOVF   x5A,W
1CA6:  MULLW  04
1CA8:  MOVF   FF3,W
1CAA:  CLRF   03
1CAC:  ADDLW  F2
1CAE:  MOVWF  FE9
1CB0:  MOVLW  01
1CB2:  ADDWFC 03,W
1CB4:  MOVWF  FEA
1CB6:  MOVFF  FEF,00
1CBA:  MOVFF  FEC,01
1CBE:  MOVFF  FEC,02
1CC2:  MOVFF  FEC,03
1CC6:  MOVFF  FEA,341
1CCA:  MOVFF  FE9,340
1CCE:  BCF    FD8.1
1CD0:  MOVFF  255,347
1CD4:  MOVFF  254,346
1CD8:  MOVFF  253,345
1CDC:  MOVFF  252,344
1CE0:  MOVFF  03,34B
1CE4:  MOVFF  02,34A
1CE8:  MOVFF  01,349
1CEC:  MOVFF  00,348
1CF0:  MOVLB  0
1CF2:  CALL   111C
1CF6:  MOVFF  341,FEA
1CFA:  MOVFF  340,FE9
1CFE:  MOVFF  03,255
1D02:  MOVFF  02,254
1D06:  MOVFF  01,253
1D0A:  MOVFF  00,252
....................    }  
1D0E:  MOVLB  2
1D10:  INCF   x5A,F
1D12:  BRA    1C96
....................    promediopresionp=promediopresionp/media;    
1D14:  MOVLB  3
1D16:  CLRF   x46
1D18:  MOVFF  33F,345
1D1C:  MOVLB  0
1D1E:  CALL   0F34
1D22:  MOVFF  255,347
1D26:  MOVFF  254,346
1D2A:  MOVFF  253,345
1D2E:  MOVFF  252,344
1D32:  MOVFF  03,34B
1D36:  MOVFF  02,34A
1D3A:  MOVFF  01,349
1D3E:  MOVFF  00,348
1D42:  CALL   0FBE
1D46:  MOVFF  03,255
1D4A:  MOVFF  02,254
1D4E:  MOVFF  01,253
1D52:  MOVFF  00,252
....................     
....................    return promediopresionp; 
1D56:  MOVFF  252,00
1D5A:  MOVFF  253,01
1D5E:  MOVFF  254,02
1D62:  MOVFF  255,03
.................... } 
1D66:  RETLW  00
....................  
....................  
.................... void Carga_Vector(void){ 
....................    txbuf[0]=Puerta;                       // Flag de estado de interruptor de puerta 
*
1DF6:  MOVFF  26A,31C
....................    txbuf[1]=Parada;                       // Flag de estado de parada de Emergencia 
1DFA:  MOVFF  26B,31D
....................    txbuf[2]=NivelReservorio;              // Nivel bajo del nivel de agua del calderin. 
1DFE:  MOVFF  26C,31E
....................    txbuf[3]=flag_agua;                    // Bandera que indica que el calderin esta con agua. 
1E02:  MOVLB  3
1E04:  CLRF   x1F
1E06:  MOVLB  2
1E08:  BTFSS  x56.1
1E0A:  BRA    1E12
1E0C:  MOVLB  3
1E0E:  INCF   x1F,F
1E10:  MOVLB  2
....................    txbuf[4]=Presostato;                   // Parte baja de Presion de Camara 
1E12:  MOVFF  26E,320
....................    txbuf[5]=(int8)Temperatura;            // Parte entera de Temperatura de Autoclave 
1E16:  MOVFF  2ED,342
1E1A:  MOVFF  2EC,341
1E1E:  MOVFF  2EB,340
1E22:  MOVFF  2EA,33F
1E26:  MOVLB  0
1E28:  RCALL  1D68
1E2A:  MOVFF  01,321
....................    txbuf[6]=Alarma;                       // Alarma para errores de Funcionamiento de la autoclave 
1E2E:  MOVFF  268,322
....................    txbuf[7]=AlarmaAgua;                   //  Alarma para errores de Agua 
1E32:  MOVFF  269,323
....................    txbuf[8]=Chksum;                       // Checksum para verificación de comunicación 
1E36:  MOVFF  271,324
....................    txbuf[9]=(int8)d3;                     // Parte Decimal de Temperatura 
1E3A:  MOVFF  2C1,342
1E3E:  MOVFF  2C0,341
1E42:  MOVFF  2BF,340
1E46:  MOVFF  2BE,33F
1E4A:  RCALL  1D68
1E4C:  MOVFF  01,325
....................    txbuf[10]=make8(PresionCamara16,0);    // Parte baja de Presion de Camara 
1E50:  MOVFF  282,326
1E54:  MOVLB  3
....................    txbuf[11]=make8(PresionCamara16,1);    // Parte alta de Presion de Camara 
1E56:  MOVFF  283,327
1E5A:  MOVLB  3
....................    txbuf[12]=make8(PresionPreCamara16,0); // Parte Baja de Presion de Precamara 
1E5C:  MOVFF  284,328
1E60:  MOVLB  3
....................    txbuf[13]=make8(PresionPreCamara16,1); // Parte Alta de Presion de Precamara 
1E62:  MOVFF  285,329
1E66:  MOVLB  3
.................... } 
1E68:  MOVLB  0
1E6A:  RETLW  00
....................  
.................... void Lee_Vector(void){ 
....................    Resistencia=rxbuf[0]; 
*
1DA4:  MOVFF  32D,25F
....................    EVDesfogue=rxbuf[1]; 
1DA8:  MOVFF  32E,260
....................    EVAgua=rxbuf[2]; 
1DAC:  MOVFF  32F,261
....................    EVTrampa=rxbuf[3]; 
1DB0:  MOVFF  330,262
....................    MotorPuerta=rxbuf[4]; 
1DB4:  MOVFF  331,263
....................    EVEntradaAgua=rxbuf[5]; 
1DB8:  MOVFF  332,264
....................    BombaVacio=rxbuf[6]; 
1DBC:  MOVFF  333,265
....................    BombaAgua=rxbuf[7]; 
1DC0:  MOVFF  334,266
....................    Control=rxbuf[8]; 
1DC4:  MOVFF  335,267
....................    Setpoint=rxbuf[9]; 
1DC8:  MOVLB  3
1DCA:  CLRF   x46
1DCC:  MOVFF  336,345
1DD0:  MOVLB  0
1DD2:  CALL   0F34
1DD6:  MOVFF  03,2E9
1DDA:  MOVFF  02,2E8
1DDE:  MOVFF  01,2E7
1DE2:  MOVFF  00,2E6
....................    Chksum=rxbuf[10]; 
1DE6:  MOVFF  337,271
....................    Nivel=rxbuf[12]; 
1DEA:  MOVLB  2
1DEC:  CLRF   x79
1DEE:  MOVFF  339,278
.................... } 
1DF2:  MOVLB  0
1DF4:  RETLW  00
....................  
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
*
0E1A:  CLRF   FD7
0E1C:  CLRF   FD6
....................    t_exhaust++; 
0E1E:  MOVLB  2
0E20:  INCF   x7A,F
0E22:  BTFSC  FD8.2
0E24:  INCF   x7B,F
....................    if(EVDesfogue==2 && Presostato>=2) 
0E26:  MOVF   x60,W
0E28:  SUBLW  02
0E2A:  BNZ   0E9C
0E2C:  MOVF   x6E,W
0E2E:  SUBLW  01
0E30:  BC    0E9C
....................    { 
....................       EV_Agua_off; 
0E32:  BCF    F8A.4
0E34:  BCF    F93.4
....................       EV_Paso_off; 
0E36:  BCF    F8A.5
0E38:  BCF    F93.5
....................       Resistencia_off; 
0E3A:  BCF    F8B.0
0E3C:  BCF    F94.0
....................       Resistencia2_off; 
0E3E:  BCF    F8B.1
0E40:  BCF    F94.1
....................       if(Nivel<6) 
0E42:  MOVF   x79,F
0E44:  BNZ   0E98
0E46:  MOVF   x78,W
0E48:  SUBLW  05
0E4A:  BNC   0E98
....................       { 
....................          if(t_exhaust<=(9990*Nivel)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0E4C:  MOVLW  27
0E4E:  MOVLB  3
0E50:  MOVWF  x55
0E52:  MOVLW  06
0E54:  MOVWF  x54
0E56:  MOVFF  279,357
0E5A:  MOVFF  278,356
0E5E:  MOVLB  0
0E60:  RCALL  0DF8
0E62:  MOVFF  02,03
0E66:  MOVF   01,W
0E68:  MOVLB  2
0E6A:  MOVF   x7B,W
0E6C:  SUBWF  02,W
0E6E:  BNC   0E7E
0E70:  BNZ   0E78
0E72:  MOVF   x7A,W
0E74:  SUBWF  01,W
0E76:  BNC   0E7E
....................          { 
....................             //Resistencia_on; 
....................             EV_Desfogue_on; 
0E78:  BSF    F8A.6
0E7A:  BCF    F93.6
....................          } 
....................          else          
0E7C:  BRA    0E82
....................          { 
....................             //Resistencia_off; 
....................             EV_Desfogue_off; 
0E7E:  BCF    F8A.6
0E80:  BCF    F93.6
....................          }    
....................        
....................          if(t_exhaust>=60000) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0E82:  MOVF   x7B,W
0E84:  SUBLW  E9
0E86:  BC    0E96
0E88:  XORLW  FF
0E8A:  BNZ   0E92
0E8C:  MOVF   x7A,W
0E8E:  SUBLW  5F
0E90:  BC    0E96
....................          { 
....................             t_exhaust=0; 
0E92:  CLRF   x7B
0E94:  CLRF   x7A
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       } 
....................       else 
0E96:  BRA    0E9C
....................       { 
....................          EV_Desfogue_on; 
0E98:  BSF    F8A.6
0E9A:  BCF    F93.6
....................       } 
....................    }   
.................... } 
....................  
0E9C:  BCF    FF2.2
0E9E:  MOVLB  0
0EA0:  GOTO   0078
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
0EA4:  MOVLW  15
0EA6:  MOVWF  FCF
0EA8:  MOVLW  A0
0EAA:  MOVWF  FCE
....................    tiempos++; 
0EAC:  MOVLB  2
0EAE:  INCF   x72,F
0EB0:  BTFSC  FD8.2
0EB2:  INCF   x73,F
....................    tiempos3++; 
0EB4:  INCF   x74,F
0EB6:  BTFSC  FD8.2
0EB8:  INCF   x75,F
....................    tiempoctrl++; 
0EBA:  INCF   x76,F
0EBC:  BTFSC  FD8.2
0EBE:  INCF   x77,F
....................     
....................    if(flag_reservorio==1) 
0EC0:  BTFSS  x56.5
0EC2:  BRA    0ECA
....................    { 
....................       treservorio++; 
0EC4:  INCF   x80,F
0EC6:  BTFSC  FD8.2
0EC8:  INCF   x81,F
....................    } 
....................           
....................    if(tiempos3>=100) 
0ECA:  MOVF   x75,F
0ECC:  BNZ   0ED4
0ECE:  MOVF   x74,W
0ED0:  SUBLW  63
0ED2:  BC    0EDA
....................    {tiempos3=0;Expulsa=1;} 
0ED4:  CLRF   x75
0ED6:  CLRF   x74
0ED8:  BSF    x86.0
....................     
....................    if(tiempos>=200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0EDA:  MOVF   x73,F
0EDC:  BNZ   0EE4
0EDE:  MOVF   x72,W
0EE0:  SUBLW  C7
0EE2:  BC    0F02
....................    { 
....................       tiempos=0;Lectura=1;TiempoControl++; 
0EE4:  CLRF   x73
0EE6:  CLRF   x72
0EE8:  BSF    x56.7
0EEA:  INCF   x5B,F
....................       if(EVAgua>=1) 
0EEC:  MOVF   x61,W
0EEE:  SUBLW  00
0EF0:  BC    0F02
....................       { 
....................          tinicio++; 
0EF2:  INCF   x7C,F
0EF4:  BTFSC  FD8.2
0EF6:  INCF   x7D,F
....................          if(flag_agua2==0) 
0EF8:  BTFSC  x56.2
0EFA:  BRA    0F02
....................          { 
....................             tagua++; 
0EFC:  INCF   x7E,F
0EFE:  BTFSC  FD8.2
0F00:  INCF   x7F,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0F02:  BCF    F9E.0
0F04:  MOVLB  0
0F06:  GOTO   0078
.................... void Controla(){ 
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
*
20F4:  BCF    FD8.1
20F6:  MOVFF  2BD,347
20FA:  MOVFF  2BC,346
20FE:  MOVFF  2BB,345
2102:  MOVFF  2BA,344
2106:  MOVFF  2E9,34B
210A:  MOVFF  2E8,34A
210E:  MOVFF  2E7,349
2112:  MOVFF  2E6,348
2116:  CALL   111C
211A:  MOVFF  00,33F
211E:  MOVFF  01,340
2122:  MOVFF  02,341
2126:  MOVFF  03,342
212A:  BSF    FD8.1
212C:  MOVFF  03,347
2130:  MOVFF  02,346
2134:  MOVFF  01,345
2138:  MOVFF  00,344
213C:  MOVFF  2ED,34B
2140:  MOVFF  2EC,34A
2144:  MOVFF  2EB,349
2148:  MOVFF  2EA,348
214C:  CALL   111C
2150:  MOVFF  03,2A5
2154:  MOVFF  02,2A4
2158:  MOVFF  01,2A3
215C:  MOVFF  00,2A2
....................     
....................    if(error>0.9 && error<15 && Aumento<0.3) 
2160:  MOVLW  66
2162:  MOVLB  3
2164:  MOVWF  x43
2166:  MOVWF  x42
2168:  MOVWF  x41
216A:  MOVLW  7E
216C:  MOVWF  x40
216E:  MOVFF  2A5,347
2172:  MOVFF  2A4,346
2176:  MOVFF  2A3,345
217A:  MOVFF  2A2,344
217E:  MOVLB  0
2180:  CALL   18BC
2184:  BNC   223A
2186:  MOVFF  2A5,343
218A:  MOVFF  2A4,342
218E:  MOVFF  2A3,341
2192:  MOVFF  2A2,340
2196:  MOVLB  3
2198:  CLRF   x47
219A:  CLRF   x46
219C:  MOVLW  70
219E:  MOVWF  x45
21A0:  MOVLW  82
21A2:  MOVWF  x44
21A4:  MOVLB  0
21A6:  CALL   18BC
21AA:  BNC   223A
21AC:  MOVFF  251,343
21B0:  MOVFF  250,342
21B4:  MOVFF  24F,341
21B8:  MOVFF  24E,340
21BC:  MOVLW  9A
21BE:  MOVLB  3
21C0:  MOVWF  x47
21C2:  MOVLW  99
21C4:  MOVWF  x46
21C6:  MOVLW  19
21C8:  MOVWF  x45
21CA:  MOVLW  7D
21CC:  MOVWF  x44
21CE:  MOVLB  0
21D0:  CALL   18BC
21D4:  BNC   223A
....................    { 
....................       if(Tpulso<9.0) 
21D6:  MOVFF  2A1,343
21DA:  MOVFF  2A0,342
21DE:  MOVFF  29F,341
21E2:  MOVFF  29E,340
21E6:  MOVLB  3
21E8:  CLRF   x47
21EA:  CLRF   x46
21EC:  MOVLW  10
21EE:  MOVWF  x45
21F0:  MOVLW  82
21F2:  MOVWF  x44
21F4:  MOVLB  0
21F6:  CALL   18BC
21FA:  BNC   223A
....................       { 
....................          if(TiempoControl>=20) 
21FC:  MOVLB  2
21FE:  MOVF   x5B,W
2200:  SUBLW  13
2202:  BC    223C
....................          { 
....................             TiempoControl=0; 
2204:  CLRF   x5B
....................             Ganancia+=2; 
2206:  BCF    FD8.1
2208:  MOVFF  2B5,347
220C:  MOVFF  2B4,346
2210:  MOVFF  2B3,345
2214:  MOVFF  2B2,344
2218:  MOVLB  3
221A:  CLRF   x4B
221C:  CLRF   x4A
221E:  CLRF   x49
2220:  MOVLW  80
2222:  MOVWF  x48
2224:  MOVLB  0
2226:  CALL   111C
222A:  MOVFF  03,2B5
222E:  MOVFF  02,2B4
2232:  MOVFF  01,2B3
2236:  MOVFF  00,2B2
223A:  MOVLB  2
....................          } 
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
223C:  MOVFF  2A5,343
2240:  MOVFF  2A4,342
2244:  MOVFF  2A3,341
2248:  MOVFF  2A2,340
224C:  MOVLW  9A
224E:  MOVLB  3
2250:  MOVWF  x47
2252:  MOVLW  99
2254:  MOVWF  x46
2256:  MOVWF  x45
2258:  MOVLW  7D
225A:  MOVWF  x44
225C:  MOVLB  0
225E:  CALL   18BC
2262:  BNC   2274
....................    { 
....................       Ganancia=Ganancia2; 
2264:  MOVFF  2B9,2B5
2268:  MOVFF  2B8,2B4
226C:  MOVFF  2B7,2B3
2270:  MOVFF  2B6,2B2
....................    } 
....................     
....................    if(Ganancia<1) 
2274:  MOVFF  2B5,343
2278:  MOVFF  2B4,342
227C:  MOVFF  2B3,341
2280:  MOVFF  2B2,340
2284:  MOVLB  3
2286:  CLRF   x47
2288:  CLRF   x46
228A:  CLRF   x45
228C:  MOVLW  7F
228E:  MOVWF  x44
2290:  MOVLB  0
2292:  CALL   18BC
2296:  BNC   22A4
....................    { 
....................       Ganancia=1; 
2298:  MOVLB  2
229A:  CLRF   xB5
229C:  CLRF   xB4
229E:  CLRF   xB3
22A0:  MOVLW  7F
22A2:  MOVWF  xB2
....................    } 
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
22A4:  MOVFF  2A5,343
22A8:  MOVFF  2A4,342
22AC:  MOVFF  2A3,341
22B0:  MOVFF  2A2,340
22B4:  MOVLB  3
22B6:  CLRF   x47
22B8:  CLRF   x46
22BA:  CLRF   x45
22BC:  CLRF   x44
22BE:  MOVLB  0
22C0:  CALL   18BC
22C4:  BNC   22D2
....................    { 
....................       error=0.0; 
22C6:  MOVLB  2
22C8:  CLRF   xA5
22CA:  CLRF   xA4
22CC:  CLRF   xA3
22CE:  CLRF   xA2
22D0:  MOVLB  0
....................    } 
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
22D2:  MOVFF  2A5,347
22D6:  MOVFF  2A4,346
22DA:  MOVFF  2A3,345
22DE:  MOVFF  2A2,344
22E2:  MOVFF  2B5,34B
22E6:  MOVFF  2B4,34A
22EA:  MOVFF  2B3,349
22EE:  MOVFF  2B2,348
22F2:  CALL   1400
22F6:  MOVFF  03,2B1
22FA:  MOVFF  02,2B0
22FE:  MOVFF  01,2AF
2302:  MOVFF  00,2AE
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
2306:  MOVFF  2E9,343
230A:  MOVFF  2E8,342
230E:  MOVFF  2E7,341
2312:  MOVFF  2E6,340
2316:  MOVFF  2B1,347
231A:  MOVFF  2B0,346
231E:  MOVFF  2AF,345
2322:  MOVFF  2AE,344
2326:  CALL   18BC
232A:  BNC   233C
....................    { 
....................       tmp=Setpoint; 
232C:  MOVFF  2E9,2B1
2330:  MOVFF  2E8,2B0
2334:  MOVFF  2E7,2AF
2338:  MOVFF  2E6,2AE
....................    } 
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
233C:  MOVFF  2B1,343
2340:  MOVFF  2B0,342
2344:  MOVFF  2AF,341
2348:  MOVFF  2AE,340
234C:  MOVLB  3
234E:  CLRF   x47
2350:  CLRF   x46
2352:  CLRF   x45
2354:  CLRF   x44
2356:  MOVLB  0
2358:  CALL   18BC
235C:  BNC   236A
....................    { 
....................       tmp=0.0; 
235E:  MOVLB  2
2360:  CLRF   xB1
2362:  CLRF   xB0
2364:  CLRF   xAF
2366:  CLRF   xAE
2368:  MOVLB  0
....................    } 
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    Tpulso=(tmp/Setpoint)*Tciclo;   
236A:  MOVFF  2B1,347
236E:  MOVFF  2B0,346
2372:  MOVFF  2AF,345
2376:  MOVFF  2AE,344
237A:  MOVFF  2E9,34B
237E:  MOVFF  2E8,34A
2382:  MOVFF  2E7,349
2386:  MOVFF  2E6,348
238A:  CALL   0FBE
238E:  MOVFF  00,33F
2392:  MOVFF  01,340
2396:  MOVFF  02,341
239A:  MOVFF  03,342
239E:  MOVFF  03,347
23A2:  MOVFF  02,346
23A6:  MOVFF  01,345
23AA:  MOVFF  00,344
23AE:  MOVFF  29D,34B
23B2:  MOVFF  29C,34A
23B6:  MOVFF  29B,349
23BA:  MOVFF  29A,348
23BE:  CALL   1400
23C2:  MOVFF  03,2A1
23C6:  MOVFF  02,2A0
23CA:  MOVFF  01,29F
23CE:  MOVFF  00,29E
....................                                        
....................    if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
23D2:  MOVFF  2A1,347
23D6:  MOVFF  2A0,346
23DA:  MOVFF  29F,345
23DE:  MOVFF  29E,344
23E2:  MOVLW  0A
23E4:  MOVLB  3
23E6:  MOVWF  x4B
23E8:  MOVLW  D7
23EA:  MOVWF  x4A
23EC:  MOVLW  23
23EE:  MOVWF  x49
23F0:  MOVLW  77
23F2:  MOVWF  x48
23F4:  MOVLB  0
23F6:  CALL   0FBE
23FA:  MOVFF  03,342
23FE:  MOVFF  02,341
2402:  MOVFF  01,340
2406:  MOVFF  00,33F
240A:  RCALL  1D68
240C:  MOVFF  02,03
2410:  MOVF   01,W
2412:  MOVLB  2
2414:  MOVF   x77,W
2416:  SUBWF  02,W
2418:  BNC   242C
241A:  BNZ   2422
241C:  MOVF   x76,W
241E:  SUBWF  01,W
2420:  BNC   242C
....................    { 
....................       Resistencia_on; 
2422:  BSF    F8B.0
2424:  BCF    F94.0
....................       Resistencia2_on; 
2426:  BSF    F8B.1
2428:  BCF    F94.1
....................    } 
....................    else          
242A:  BRA    2434
....................    { 
....................       Resistencia_off; 
242C:  BCF    F8B.0
242E:  BCF    F94.0
....................       Resistencia2_off; 
2430:  BCF    F8B.1
2432:  BCF    F94.1
....................    } 
....................           
....................    if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
2434:  MOVFF  29D,347
2438:  MOVFF  29C,346
243C:  MOVFF  29B,345
2440:  MOVFF  29A,344
2444:  MOVLW  0A
2446:  MOVLB  3
2448:  MOVWF  x4B
244A:  MOVLW  D7
244C:  MOVWF  x4A
244E:  MOVLW  23
2450:  MOVWF  x49
2452:  MOVLW  77
2454:  MOVWF  x48
2456:  MOVLB  0
2458:  CALL   0FBE
245C:  MOVFF  03,342
2460:  MOVFF  02,341
2464:  MOVFF  01,340
2468:  MOVFF  00,33F
246C:  RCALL  1D68
246E:  MOVF   02,W
2470:  MOVWF  03
2472:  MOVLB  2
2474:  SUBWF  x77,W
2476:  BNC   2484
2478:  BNZ   2480
247A:  MOVF   01,W
247C:  SUBWF  x76,W
247E:  BNC   2484
....................    { 
....................       tiempoctrl=0; 
2480:  CLRF   x77
2482:  CLRF   x76
....................    } // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
2484:  MOVLB  0
2486:  GOTO   3822 (RETURN)
....................  
.................... void main() 
.................... { 
248A:  CLRF   FF8
248C:  BCF    FD0.7
248E:  BSF    07.7
2490:  CLRF   FEA
2492:  CLRF   FE9
2494:  BSF    F93.1
2496:  BSF    F93.0
2498:  MOVLW  A0
249A:  MOVWF  FC8
249C:  MOVLW  36
249E:  MOVWF  FC6
24A0:  CLRF   1C
24A2:  CLRF   20
24A4:  MOVLB  2
24A6:  CLRF   x4D
24A8:  CLRF   x4C
24AA:  CLRF   x4B
24AC:  CLRF   x4A
24AE:  CLRF   x51
24B0:  CLRF   x50
24B2:  CLRF   x4F
24B4:  CLRF   x4E
24B6:  CLRF   x55
24B8:  CLRF   x54
24BA:  CLRF   x53
24BC:  CLRF   x52
24BE:  BCF    x56.0
24C0:  BCF    x56.1
24C2:  BCF    x56.2
24C4:  BCF    x56.3
24C6:  BCF    x56.4
24C8:  BCF    x56.5
24CA:  BCF    x56.6
24CC:  CLRF   x57
24CE:  CLRF   x58
24D0:  CLRF   x59
24D2:  CLRF   x5A
24D4:  CLRF   x5B
24D6:  CLRF   x5C
24D8:  CLRF   x5D
24DA:  CLRF   x5E
24DC:  CLRF   x5F
24DE:  CLRF   x60
24E0:  CLRF   x61
24E2:  CLRF   x62
24E4:  CLRF   x63
24E6:  CLRF   x64
24E8:  CLRF   x65
24EA:  CLRF   x66
24EC:  CLRF   x67
24EE:  CLRF   x68
24F0:  CLRF   x69
24F2:  CLRF   x6A
24F4:  CLRF   x6B
24F6:  CLRF   x6C
24F8:  CLRF   x6D
24FA:  CLRF   x6E
24FC:  CLRF   x6F
24FE:  CLRF   x70
2500:  CLRF   x71
2502:  CLRF   x73
2504:  CLRF   x72
2506:  CLRF   x75
2508:  CLRF   x74
250A:  CLRF   x77
250C:  CLRF   x76
250E:  CLRF   x79
2510:  CLRF   x78
2512:  CLRF   x7B
2514:  CLRF   x7A
2516:  CLRF   x7D
2518:  CLRF   x7C
251A:  CLRF   x7F
251C:  CLRF   x7E
251E:  CLRF   x81
2520:  CLRF   x80
2522:  CLRF   x83
2524:  CLRF   x82
2526:  CLRF   x85
2528:  CLRF   x84
252A:  BCF    x56.7
252C:  BCF    x86.0
252E:  BCF    x86.1
2530:  CLRF   x87
2532:  CLRF   x88
2534:  CLRF   x89
2536:  CLRF   x8A
2538:  CLRF   x8B
253A:  CLRF   x8C
253C:  MOVLW  02
253E:  MOVWF  x8D
2540:  CLRF   x91
2542:  CLRF   x90
2544:  CLRF   x8F
2546:  CLRF   x8E
2548:  CLRF   x95
254A:  MOVLW  10
254C:  MOVWF  x94
254E:  MOVLW  42
2550:  MOVWF  x93
2552:  MOVLW  8B
2554:  MOVWF  x92
2556:  CLRF   x9D
2558:  CLRF   x9C
255A:  MOVLW  20
255C:  MOVWF  x9B
255E:  MOVLW  82
2560:  MOVWF  x9A
2562:  CLRF   xA1
2564:  CLRF   xA0
2566:  CLRF   x9F
2568:  CLRF   x9E
256A:  CLRF   xA5
256C:  CLRF   xA4
256E:  CLRF   xA3
2570:  CLRF   xA2
2572:  CLRF   xA9
2574:  CLRF   xA8
2576:  CLRF   xA7
2578:  CLRF   xA6
257A:  CLRF   xAD
257C:  CLRF   xAC
257E:  CLRF   xAB
2580:  CLRF   xAA
2582:  CLRF   xB1
2584:  CLRF   xB0
2586:  CLRF   xAF
2588:  CLRF   xAE
258A:  CLRF   xB5
258C:  CLRF   xB4
258E:  MOVLW  48
2590:  MOVWF  xB3
2592:  MOVLW  83
2594:  MOVWF  xB2
2596:  CLRF   xB9
2598:  CLRF   xB8
259A:  MOVLW  20
259C:  MOVWF  xB7
259E:  MOVLW  83
25A0:  MOVWF  xB6
25A2:  CLRF   xBD
25A4:  CLRF   xBC
25A6:  CLRF   xBB
25A8:  CLRF   xBA
25AA:  CLRF   xC1
25AC:  CLRF   xC0
25AE:  CLRF   xBF
25B0:  CLRF   xBE
25B2:  CLRF   xC5
25B4:  CLRF   xC4
25B6:  CLRF   xC3
25B8:  CLRF   xC2
25BA:  CLRF   xC9
25BC:  CLRF   xC8
25BE:  CLRF   xC7
25C0:  CLRF   xC6
25C2:  CLRF   xCD
25C4:  CLRF   xCC
25C6:  CLRF   xCB
25C8:  CLRF   xCA
25CA:  CLRF   xD1
25CC:  CLRF   xD0
25CE:  CLRF   xCF
25D0:  CLRF   xCE
25D2:  CLRF   xD5
25D4:  CLRF   xD4
25D6:  CLRF   xD3
25D8:  CLRF   xD2
25DA:  CLRF   xD9
25DC:  CLRF   xD8
25DE:  CLRF   xD7
25E0:  CLRF   xD6
25E2:  CLRF   xDD
25E4:  CLRF   xDC
25E6:  CLRF   xDB
25E8:  CLRF   xDA
25EA:  CLRF   xE1
25EC:  CLRF   xE0
25EE:  CLRF   xDF
25F0:  CLRF   xDE
25F2:  CLRF   xE5
25F4:  CLRF   xE4
25F6:  CLRF   xE3
25F8:  CLRF   xE2
25FA:  CLRF   xE9
25FC:  CLRF   xE8
25FE:  CLRF   xE7
2600:  CLRF   xE6
2602:  CLRF   xED
2604:  CLRF   xEC
2606:  CLRF   xEB
2608:  CLRF   xEA
260A:  CLRF   xF1
260C:  CLRF   xF0
260E:  CLRF   xEF
2610:  CLRF   xEE
2612:  CLRF   xF5
2614:  CLRF   xF4
2616:  CLRF   xF3
2618:  CLRF   xF2
261A:  CLRF   xF9
261C:  CLRF   xF8
261E:  CLRF   xF7
2620:  CLRF   xF6
2622:  MOVLW  5C
2624:  MOVWF  xFD
2626:  MOVLW  AA
2628:  MOVWF  xFC
262A:  MOVLW  52
262C:  MOVWF  xFB
262E:  MOVLW  77
2630:  MOVWF  xFA
2632:  MOVLW  E0
2634:  MOVLB  3
2636:  MOVWF  x01
2638:  MOVLW  2D
263A:  MOVWF  x00
263C:  MOVLW  10
263E:  MOVLB  2
2640:  MOVWF  xFF
2642:  MOVLW  75
2644:  MOVWF  xFE
2646:  MOVLW  FF
2648:  MOVLB  3
264A:  MOVWF  x05
264C:  MOVLW  21
264E:  MOVWF  x04
2650:  MOVLW  15
2652:  MOVWF  x03
2654:  MOVLW  80
2656:  MOVWF  x02
2658:  MOVLW  82
265A:  MOVWF  x09
265C:  MOVLW  12
265E:  MOVWF  x08
2660:  MOVLW  F4
2662:  MOVWF  x07
2664:  MOVLW  86
2666:  MOVWF  x06
2668:  MOVF   FC1,W
266A:  ANDLW  C0
266C:  IORLW  0F
266E:  MOVWF  FC1
2670:  MOVLW  07
2672:  MOVWF  FB4
2674:  MOVLB  0
2676:  CLRF   x62
2678:  CLRF   x63
267A:  CLRF   x64
267C:  CLRF   x65
267E:  CLRF   x66
2680:  CLRF   x67
2682:  CLRF   x68
2684:  CLRF   x69
2686:  CLRF   x6A
2688:  CLRF   x6B
268A:  CLRF   x6C
268C:  CLRF   x6D
268E:  CLRF   x6E
2690:  CLRF   x6F
2692:  CLRF   x70
2694:  CLRF   x71
2696:  CLRF   x72
2698:  CLRF   x73
269A:  CLRF   x74
269C:  CLRF   x75
269E:  CLRF   x76
26A0:  CLRF   x77
26A2:  CLRF   x78
26A4:  CLRF   x79
26A6:  CLRF   x7A
26A8:  CLRF   x7B
26AA:  CLRF   x7C
26AC:  CLRF   x7D
26AE:  CLRF   x7E
26B0:  CLRF   x7F
26B2:  CLRF   x80
26B4:  CLRF   x81
26B6:  CLRF   x82
26B8:  CLRF   x83
26BA:  CLRF   x84
26BC:  CLRF   x85
26BE:  CLRF   x86
26C0:  CLRF   x87
26C2:  CLRF   x88
26C4:  CLRF   x89
26C6:  CLRF   x8A
26C8:  CLRF   x8B
26CA:  CLRF   x8C
26CC:  CLRF   x8D
26CE:  CLRF   x8E
26D0:  CLRF   x8F
26D2:  CLRF   x90
26D4:  CLRF   x91
26D6:  CLRF   x92
26D8:  CLRF   x93
26DA:  CLRF   x94
26DC:  CLRF   x95
26DE:  CLRF   x96
26E0:  CLRF   x97
26E2:  CLRF   x98
26E4:  CLRF   x99
26E6:  CLRF   x9A
26E8:  CLRF   x9B
26EA:  CLRF   x9C
26EC:  CLRF   x9D
26EE:  CLRF   x9E
26F0:  CLRF   x9F
26F2:  CLRF   xA0
26F4:  CLRF   xA1
26F6:  CLRF   xA2
26F8:  CLRF   xA3
26FA:  CLRF   xA4
26FC:  CLRF   xA5
26FE:  CLRF   xA6
2700:  CLRF   xA7
2702:  CLRF   xA8
2704:  CLRF   xA9
2706:  CLRF   xAA
2708:  CLRF   xAB
270A:  CLRF   xAC
270C:  CLRF   xAD
270E:  CLRF   xAE
2710:  CLRF   xAF
2712:  CLRF   xB0
2714:  CLRF   xB1
2716:  CLRF   xB2
2718:  CLRF   xB3
271A:  CLRF   xB4
271C:  CLRF   xB5
271E:  CLRF   xB6
2720:  CLRF   xB7
2722:  CLRF   xB8
2724:  CLRF   xB9
2726:  CLRF   xBA
2728:  CLRF   xBB
272A:  CLRF   xBC
272C:  CLRF   xBD
272E:  CLRF   xBE
2730:  CLRF   xBF
2732:  CLRF   xC0
2734:  CLRF   xC1
2736:  CLRF   xC2
2738:  CLRF   xC3
273A:  CLRF   xC4
273C:  CLRF   xC5
273E:  CLRF   xC6
2740:  CLRF   xC7
2742:  CLRF   xC8
2744:  CLRF   xC9
2746:  CLRF   xCA
2748:  CLRF   xCB
274A:  CLRF   xCC
274C:  CLRF   xCD
274E:  CLRF   xCE
2750:  CLRF   xCF
2752:  CLRF   xD0
2754:  CLRF   xD1
2756:  CLRF   xD2
2758:  CLRF   xD3
275A:  CLRF   xD4
275C:  CLRF   xD5
275E:  CLRF   xD6
2760:  CLRF   xD7
2762:  CLRF   xD8
2764:  CLRF   xD9
2766:  CLRF   xDA
2768:  CLRF   xDB
276A:  CLRF   xDC
276C:  CLRF   xDD
276E:  CLRF   xDE
2770:  CLRF   xDF
2772:  CLRF   xE0
2774:  CLRF   xE1
2776:  CLRF   xE2
2778:  CLRF   xE3
277A:  CLRF   xE4
277C:  CLRF   xE5
277E:  CLRF   xE6
2780:  CLRF   xE7
2782:  CLRF   xE8
2784:  CLRF   xE9
2786:  CLRF   xEA
2788:  CLRF   xEB
278A:  CLRF   xEC
278C:  CLRF   xED
278E:  CLRF   xEE
2790:  CLRF   xEF
2792:  CLRF   xF0
2794:  CLRF   xF1
2796:  CLRF   xF2
2798:  CLRF   xF3
279A:  CLRF   xF4
279C:  CLRF   xF5
279E:  CLRF   xF6
27A0:  CLRF   xF7
27A2:  CLRF   xF8
27A4:  CLRF   xF9
27A6:  CLRF   xFA
27A8:  CLRF   xFB
27AA:  CLRF   xFC
27AC:  CLRF   xFD
27AE:  CLRF   xFE
27B0:  CLRF   xFF
27B2:  MOVLB  1
27B4:  CLRF   x00
27B6:  CLRF   x01
27B8:  CLRF   x02
27BA:  CLRF   x03
27BC:  CLRF   x04
27BE:  CLRF   x05
27C0:  CLRF   x06
27C2:  CLRF   x07
27C4:  CLRF   x08
27C6:  CLRF   x09
27C8:  CLRF   x0A
27CA:  CLRF   x0B
27CC:  CLRF   x0C
27CE:  CLRF   x0D
27D0:  CLRF   x0E
27D2:  CLRF   x0F
27D4:  CLRF   x10
27D6:  CLRF   x11
27D8:  CLRF   x12
27DA:  CLRF   x13
27DC:  CLRF   x14
27DE:  CLRF   x15
27E0:  CLRF   x16
27E2:  CLRF   x17
27E4:  CLRF   x18
27E6:  CLRF   x19
27E8:  CLRF   x1A
27EA:  CLRF   x1B
27EC:  CLRF   x1C
27EE:  CLRF   x1D
27F0:  CLRF   x1E
27F2:  CLRF   x1F
27F4:  CLRF   x20
27F6:  CLRF   x21
27F8:  CLRF   x22
27FA:  CLRF   x23
27FC:  CLRF   x24
27FE:  CLRF   x25
2800:  CLRF   x26
2802:  CLRF   x27
2804:  CLRF   x28
2806:  CLRF   x29
2808:  CLRF   x2A
280A:  CLRF   x2B
280C:  CLRF   x2C
280E:  CLRF   x2D
2810:  CLRF   x2E
2812:  CLRF   x2F
2814:  CLRF   x30
2816:  CLRF   x31
2818:  CLRF   x32
281A:  CLRF   x33
281C:  CLRF   x34
281E:  CLRF   x35
2820:  CLRF   x36
2822:  CLRF   x37
2824:  CLRF   x38
2826:  CLRF   x39
2828:  CLRF   x3A
282A:  CLRF   x3B
282C:  CLRF   x3C
282E:  CLRF   x3D
2830:  CLRF   x3E
2832:  CLRF   x3F
2834:  CLRF   x40
2836:  CLRF   x41
2838:  CLRF   x42
283A:  CLRF   x43
283C:  CLRF   x44
283E:  CLRF   x45
2840:  CLRF   x46
2842:  CLRF   x47
2844:  CLRF   x48
2846:  CLRF   x49
2848:  CLRF   x4A
284A:  CLRF   x4B
284C:  CLRF   x4C
284E:  CLRF   x4D
2850:  CLRF   x4E
2852:  CLRF   x4F
2854:  CLRF   x50
2856:  CLRF   x51
2858:  CLRF   x52
285A:  CLRF   x53
285C:  CLRF   x54
285E:  CLRF   x55
2860:  CLRF   x56
2862:  CLRF   x57
2864:  CLRF   x58
2866:  CLRF   x59
2868:  CLRF   x5A
286A:  CLRF   x5B
286C:  CLRF   x5C
286E:  CLRF   x5D
2870:  CLRF   x5E
2872:  CLRF   x5F
2874:  CLRF   x60
2876:  CLRF   x61
2878:  CLRF   x62
287A:  CLRF   x63
287C:  CLRF   x64
287E:  CLRF   x65
2880:  CLRF   x66
2882:  CLRF   x67
2884:  CLRF   x68
2886:  CLRF   x69
2888:  CLRF   x6A
288A:  CLRF   x6B
288C:  CLRF   x6C
288E:  CLRF   x6D
2890:  CLRF   x6E
2892:  CLRF   x6F
2894:  CLRF   x70
2896:  CLRF   x71
2898:  CLRF   x72
289A:  CLRF   x73
289C:  CLRF   x74
289E:  CLRF   x75
28A0:  CLRF   x76
28A2:  CLRF   x77
28A4:  CLRF   x78
28A6:  CLRF   x79
28A8:  CLRF   x7A
28AA:  CLRF   x7B
28AC:  CLRF   x7C
28AE:  CLRF   x7D
28B0:  CLRF   x7E
28B2:  CLRF   x7F
28B4:  CLRF   x80
28B6:  CLRF   x81
28B8:  CLRF   x82
28BA:  CLRF   x83
28BC:  CLRF   x84
28BE:  CLRF   x85
28C0:  CLRF   x86
28C2:  CLRF   x87
28C4:  CLRF   x88
28C6:  CLRF   x89
28C8:  CLRF   x8A
28CA:  CLRF   x8B
28CC:  CLRF   x8C
28CE:  CLRF   x8D
28D0:  CLRF   x8E
28D2:  CLRF   x8F
28D4:  CLRF   x90
28D6:  CLRF   x91
28D8:  CLRF   x92
28DA:  CLRF   x93
28DC:  CLRF   x94
28DE:  CLRF   x95
28E0:  CLRF   x96
28E2:  CLRF   x97
28E4:  CLRF   x98
28E6:  CLRF   x99
28E8:  CLRF   x9A
28EA:  CLRF   x9B
28EC:  CLRF   x9C
28EE:  CLRF   x9D
28F0:  CLRF   x9E
28F2:  CLRF   x9F
28F4:  CLRF   xA0
28F6:  CLRF   xA1
28F8:  CLRF   xA2
28FA:  CLRF   xA3
28FC:  CLRF   xA4
28FE:  CLRF   xA5
2900:  CLRF   xA6
2902:  CLRF   xA7
2904:  CLRF   xA8
2906:  CLRF   xA9
2908:  CLRF   xAA
290A:  CLRF   xAB
290C:  CLRF   xAC
290E:  CLRF   xAD
2910:  CLRF   xAE
2912:  CLRF   xAF
2914:  CLRF   xB0
2916:  CLRF   xB1
2918:  CLRF   xB2
291A:  CLRF   xB3
291C:  CLRF   xB4
291E:  CLRF   xB5
2920:  CLRF   xB6
2922:  CLRF   xB7
2924:  CLRF   xB8
2926:  CLRF   xB9
2928:  CLRF   xBA
292A:  CLRF   xBB
292C:  CLRF   xBC
292E:  CLRF   xBD
2930:  CLRF   xBE
2932:  CLRF   xBF
2934:  CLRF   xC0
2936:  CLRF   xC1
2938:  CLRF   xC2
293A:  CLRF   xC3
293C:  CLRF   xC4
293E:  CLRF   xC5
2940:  CLRF   xC6
2942:  CLRF   xC7
2944:  CLRF   xC8
2946:  CLRF   xC9
2948:  CLRF   xCA
294A:  CLRF   xCB
294C:  CLRF   xCC
294E:  CLRF   xCD
2950:  CLRF   xCE
2952:  CLRF   xCF
2954:  CLRF   xD0
2956:  CLRF   xD1
2958:  CLRF   xD2
295A:  CLRF   xD3
295C:  CLRF   xD4
295E:  CLRF   xD5
2960:  CLRF   xD6
2962:  CLRF   xD7
2964:  CLRF   xD8
2966:  CLRF   xD9
2968:  CLRF   xDA
296A:  CLRF   xDB
296C:  CLRF   xDC
296E:  CLRF   xDD
2970:  CLRF   xDE
2972:  CLRF   xDF
2974:  CLRF   xE0
2976:  CLRF   xE1
2978:  CLRF   xE2
297A:  CLRF   xE3
297C:  CLRF   xE4
297E:  CLRF   xE5
2980:  CLRF   xE6
2982:  CLRF   xE7
2984:  CLRF   xE8
2986:  CLRF   xE9
2988:  CLRF   xEA
298A:  CLRF   xEB
298C:  CLRF   xEC
298E:  CLRF   xED
2990:  CLRF   xEE
2992:  CLRF   xEF
2994:  CLRF   xF0
2996:  CLRF   xF1
2998:  CLRF   xF2
299A:  CLRF   xF3
299C:  CLRF   xF4
299E:  CLRF   xF5
29A0:  CLRF   xF6
29A2:  CLRF   xF7
29A4:  CLRF   xF8
29A6:  CLRF   xF9
29A8:  CLRF   xFA
29AA:  CLRF   xFB
29AC:  CLRF   xFC
29AE:  CLRF   xFD
29B0:  CLRF   xFE
29B2:  CLRF   xFF
29B4:  MOVLB  2
29B6:  CLRF   x00
29B8:  CLRF   x01
29BA:  CLRF   x02
29BC:  CLRF   x03
29BE:  CLRF   x04
29C0:  CLRF   x05
29C2:  CLRF   x06
29C4:  CLRF   x07
29C6:  CLRF   x08
29C8:  CLRF   x09
29CA:  CLRF   x0A
29CC:  CLRF   x0B
29CE:  CLRF   x0C
29D0:  CLRF   x0D
29D2:  CLRF   x0E
29D4:  CLRF   x0F
29D6:  CLRF   x10
29D8:  CLRF   x11
29DA:  CLRF   x12
29DC:  CLRF   x13
29DE:  CLRF   x14
29E0:  CLRF   x15
29E2:  CLRF   x16
29E4:  CLRF   x17
29E6:  CLRF   x18
29E8:  CLRF   x19
29EA:  CLRF   x1A
29EC:  CLRF   x1B
29EE:  CLRF   x1C
29F0:  CLRF   x1D
29F2:  CLRF   x1E
29F4:  CLRF   x1F
29F6:  CLRF   x20
29F8:  CLRF   x21
29FA:  CLRF   x22
29FC:  CLRF   x23
29FE:  CLRF   x24
2A00:  CLRF   x25
2A02:  CLRF   x26
2A04:  CLRF   x27
2A06:  CLRF   x28
2A08:  CLRF   x29
2A0A:  CLRF   x2A
2A0C:  CLRF   x2B
2A0E:  CLRF   x2C
2A10:  CLRF   x2D
2A12:  CLRF   x2E
2A14:  CLRF   x2F
2A16:  CLRF   x30
2A18:  CLRF   x31
2A1A:  CLRF   x32
2A1C:  CLRF   x33
2A1E:  CLRF   x34
2A20:  CLRF   x35
2A22:  CLRF   x36
2A24:  CLRF   x37
2A26:  CLRF   x38
2A28:  CLRF   x39
2A2A:  CLRF   x3A
2A2C:  CLRF   x3B
2A2E:  CLRF   x3C
2A30:  CLRF   x3D
2A32:  CLRF   x3E
2A34:  CLRF   x3F
2A36:  CLRF   x40
2A38:  CLRF   x41
2A3A:  CLRF   x42
2A3C:  CLRF   x43
2A3E:  CLRF   x44
2A40:  CLRF   x45
2A42:  CLRF   x46
2A44:  CLRF   x47
2A46:  CLRF   x48
2A48:  CLRF   x49
2A4A:  MOVLW  03
2A4C:  MOVLB  3
2A4E:  MOVWF  x3E
....................    fState = 0; 
2A50:  CLRF   x0A
....................    for (posicion=0;posicion<0x10;posicion++) 
2A52:  CLRF   x0B
2A54:  MOVF   x0B,W
2A56:  SUBLW  0F
2A58:  BNC   2A8E
....................    { 
....................       buffer[posicion] = 0x00; 
2A5A:  CLRF   03
2A5C:  MOVF   x0B,W
2A5E:  ADDLW  0C
2A60:  MOVWF  FE9
2A62:  MOVLW  03
2A64:  ADDWFC 03,W
2A66:  MOVWF  FEA
2A68:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
2A6A:  CLRF   03
2A6C:  MOVF   x0B,W
2A6E:  ADDLW  1C
2A70:  MOVWF  FE9
2A72:  MOVLW  03
2A74:  ADDWFC 03,W
2A76:  MOVWF  FEA
2A78:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
2A7A:  CLRF   03
2A7C:  MOVF   x0B,W
2A7E:  ADDLW  2D
2A80:  MOVWF  FE9
2A82:  MOVLW  03
2A84:  ADDWFC 03,W
2A86:  MOVWF  FEA
2A88:  CLRF   FEF
....................    } 
2A8A:  INCF   x0B,F
2A8C:  BRA    2A54
....................    Temperatura=Leer_Sensor(MediaMovil); 
2A8E:  MOVFF  28D,33F
2A92:  MOVLB  0
2A94:  CALL   14F6
2A98:  MOVFF  03,2ED
2A9C:  MOVFF  02,2EC
2AA0:  MOVFF  01,2EB
2AA4:  MOVFF  00,2EA
....................    PresionCamara=Leer_Sensor_Presion_Camara(5); 
2AA8:  MOVLW  05
2AAA:  MOVLB  3
2AAC:  MOVWF  x3F
2AAE:  MOVLB  0
2AB0:  CALL   1936
2AB4:  MOVFF  03,2F5
2AB8:  MOVFF  02,2F4
2ABC:  MOVFF  01,2F3
2AC0:  MOVFF  00,2F2
....................    PresionPreCamara=Leer_Sensor_Presion_PreCamara(5); 
2AC4:  MOVLW  05
2AC6:  MOVLB  3
2AC8:  MOVWF  x3F
2ACA:  MOVLB  0
2ACC:  CALL   1B32
2AD0:  MOVFF  03,2F9
2AD4:  MOVFF  02,2F8
2AD8:  MOVFF  01,2F7
2ADC:  MOVFF  00,2F6
....................    Puerta=!DOOR; 
2AE0:  BSF    F95.4
2AE2:  MOVLB  2
2AE4:  CLRF   x6A
2AE6:  BTFSC  F83.4
2AE8:  INCF   x6A,F
....................    Parada=!STOP; 
2AEA:  BSF    F95.5
2AEC:  CLRF   x6B
2AEE:  BTFSC  F83.5
2AF0:  INCF   x6B,F
....................    NivelReservorio=LOW; 
2AF2:  BSF    F95.0
2AF4:  CLRF   x6C
2AF6:  BTFSC  F83.0
2AF8:  INCF   x6C,F
....................    NivelTanque=HIGH; 
2AFA:  BSF    F95.2
2AFC:  CLRF   x6D
2AFE:  BTFSC  F83.2
2B00:  INCF   x6D,F
....................    Presostato=(int8)PresionCamara; 
2B02:  MOVFF  2F5,342
2B06:  MOVFF  2F4,341
2B0A:  MOVFF  2F3,340
2B0E:  MOVFF  2F2,33F
2B12:  MOVLB  0
2B14:  CALL   1D68
2B18:  MOVFF  01,26E
....................    Lee_Vector(); 
2B1C:  CALL   1DA4
....................    Carga_Vector(); 
2B20:  CALL   1DF6
....................    enable_interrupts(INT_SSP); 
2B24:  BSF    F9D.3
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
2B26:  MOVLW  C8
2B28:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
2B2A:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2B2C:  MOVLW  85
2B2E:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2B30:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
2B32:  MOVF   FC1,W
2B34:  ANDLW  C0
2B36:  IORLW  0D
2B38:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2B3A:  BCF    FC0.0
2B3C:  BSF    FC0.1
2B3E:  BCF    FC0.2
2B40:  BSF    FC0.7
2B42:  BSF    FC2.0
....................    enable_interrupts(global); 
2B44:  MOVLW  C0
2B46:  IORWF  FF2,F
....................    
....................    sensores(0); 
2B48:  MOVLB  3
2B4A:  CLRF   x40
2B4C:  MOVLB  0
2B4E:  CALL   0F6A
....................    Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12); 
2B52:  MOVFF  FF2,33F
2B56:  BCF    FF2.7
2B58:  MOVLW  0A
2B5A:  MOVWF  FA9
2B5C:  BCF    FA6.6
2B5E:  BCF    FA6.7
2B60:  BSF    FA6.0
2B62:  MOVF   FA8,W
2B64:  MOVLB  3
2B66:  BTFSC  x3F.7
2B68:  BSF    FF2.7
2B6A:  CLRF   x46
2B6C:  MOVWF  x45
2B6E:  MOVLB  0
2B70:  CALL   0F34
2B74:  MOVFF  03,2B5
2B78:  MOVFF  02,2B4
2B7C:  MOVFF  01,2B3
2B80:  MOVFF  00,2B2
2B84:  MOVFF  FF2,33F
2B88:  BCF    FF2.7
2B8A:  MOVLW  0B
2B8C:  MOVWF  FA9
2B8E:  BCF    FA6.6
2B90:  BCF    FA6.7
2B92:  BSF    FA6.0
2B94:  MOVF   FA8,W
2B96:  MOVLB  3
2B98:  BTFSC  x3F.7
2B9A:  BSF    FF2.7
2B9C:  CLRF   x46
2B9E:  MOVWF  x45
2BA0:  MOVLB  0
2BA2:  CALL   0F34
2BA6:  MOVFF  03,2BD
2BAA:  MOVFF  02,2BC
2BAE:  MOVFF  01,2BB
2BB2:  MOVFF  00,2BA
2BB6:  MOVFF  FF2,33F
2BBA:  BCF    FF2.7
2BBC:  MOVLW  0C
2BBE:  MOVWF  FA9
2BC0:  BCF    FA6.6
2BC2:  BCF    FA6.7
2BC4:  BSF    FA6.0
2BC6:  MOVF   FA8,W
2BC8:  MOVLB  3
2BCA:  BTFSC  x3F.7
2BCC:  BSF    FF2.7
2BCE:  CLRF   x46
2BD0:  MOVWF  x45
2BD2:  MOVLB  0
2BD4:  CALL   0F34
2BD8:  MOVFF  03,29D
2BDC:  MOVFF  02,29C
2BE0:  MOVFF  01,29B
2BE4:  MOVFF  00,29A
....................    Ajuste=read_eeprom(13);Ajusten=read_eeprom(14);Ganancia2=read_eeprom(15); 
2BE8:  MOVFF  FF2,33F
2BEC:  BCF    FF2.7
2BEE:  MOVLW  0D
2BF0:  MOVWF  FA9
2BF2:  BCF    FA6.6
2BF4:  BCF    FA6.7
2BF6:  BSF    FA6.0
2BF8:  MOVF   FA8,W
2BFA:  MOVLB  3
2BFC:  BTFSC  x3F.7
2BFE:  BSF    FF2.7
2C00:  MOVLB  2
2C02:  MOVWF  x89
2C04:  MOVFF  FF2,33F
2C08:  BCF    FF2.7
2C0A:  MOVLW  0E
2C0C:  MOVWF  FA9
2C0E:  BCF    FA6.6
2C10:  BCF    FA6.7
2C12:  BSF    FA6.0
2C14:  MOVF   FA8,W
2C16:  MOVLB  3
2C18:  BTFSC  x3F.7
2C1A:  BSF    FF2.7
2C1C:  MOVLB  2
2C1E:  MOVWF  x8A
2C20:  MOVFF  FF2,33F
2C24:  BCF    FF2.7
2C26:  MOVLW  0F
2C28:  MOVWF  FA9
2C2A:  BCF    FA6.6
2C2C:  BCF    FA6.7
2C2E:  BSF    FA6.0
2C30:  MOVF   FA8,W
2C32:  MOVLB  3
2C34:  BTFSC  x3F.7
2C36:  BSF    FF2.7
2C38:  CLRF   x46
2C3A:  MOVWF  x45
2C3C:  MOVLB  0
2C3E:  CALL   0F34
2C42:  MOVFF  03,2B9
2C46:  MOVFF  02,2B8
2C4A:  MOVFF  01,2B7
2C4E:  MOVFF  00,2B6
....................    MediaMovil=read_eeprom(20); 
2C52:  MOVFF  FF2,33F
2C56:  BCF    FF2.7
2C58:  MOVLW  14
2C5A:  MOVWF  FA9
2C5C:  BCF    FA6.6
2C5E:  BCF    FA6.7
2C60:  BSF    FA6.0
2C62:  MOVF   FA8,W
2C64:  MOVLB  3
2C66:  BTFSC  x3F.7
2C68:  BSF    FF2.7
2C6A:  MOVLB  2
2C6C:  MOVWF  x8D
....................    EV_Agua_off;EV_Paso_off;EV_Desfogue_off;Resistencia_off; 
2C6E:  BCF    F8A.4
2C70:  BCF    F93.4
2C72:  BCF    F8A.5
2C74:  BCF    F93.5
2C76:  BCF    F8A.6
2C78:  BCF    F93.6
2C7A:  BCF    F8B.0
2C7C:  BCF    F94.0
....................    usb_init(); 
2C7E:  MOVLB  0
2C80:  GOTO   1EDE
....................    usb_task(); 
2C84:  CALL   1EBC
....................    Puerta=0;Parada=0;NivelReservorio=0;NivelTanque=0;Presostato=0;ADC_Pt100=0; 
2C88:  MOVLB  2
2C8A:  CLRF   x6A
2C8C:  CLRF   x6B
2C8E:  CLRF   x6C
2C90:  CLRF   x6D
2C92:  CLRF   x6E
2C94:  CLRF   x6F
....................    tiempo_esterilizacion=0; 
2C96:  CLRF   x8B
....................    for(z=0;z<80;z++) 
2C98:  CLRF   x5C
2C9A:  MOVF   x5C,W
2C9C:  SUBLW  4F
2C9E:  BNC   2CC0
....................    { 
....................       Temperatura=Leer_Sensor(MediaMovil); 
2CA0:  MOVFF  28D,33F
2CA4:  MOVLB  0
2CA6:  CALL   14F6
2CAA:  MOVFF  03,2ED
2CAE:  MOVFF  02,2EC
2CB2:  MOVFF  01,2EB
2CB6:  MOVFF  00,2EA
....................    } 
2CBA:  MOVLB  2
2CBC:  INCF   x5C,F
2CBE:  BRA    2C9A
....................    EV_Agua_off; 
2CC0:  BCF    F8A.4
2CC2:  BCF    F93.4
....................     
....................    if(Temperatura>60) 
2CC4:  MOVLB  3
2CC6:  CLRF   x43
2CC8:  CLRF   x42
2CCA:  MOVLW  70
2CCC:  MOVWF  x41
2CCE:  MOVLW  84
2CD0:  MOVWF  x40
2CD2:  MOVFF  2ED,347
2CD6:  MOVFF  2EC,346
2CDA:  MOVFF  2EB,345
2CDE:  MOVFF  2EA,344
2CE2:  MOVLB  0
2CE4:  CALL   18BC
2CE8:  BNC   2CF0
....................    { 
....................       Frio=5; 
2CEA:  MOVLW  05
2CEC:  MOVLB  2
2CEE:  MOVWF  x5D
....................    } 
....................    if(Temperatura>35 && Temperatura<60) 
2CF0:  MOVLB  3
2CF2:  CLRF   x43
2CF4:  CLRF   x42
2CF6:  MOVLW  0C
2CF8:  MOVWF  x41
2CFA:  MOVLW  84
2CFC:  MOVWF  x40
2CFE:  MOVFF  2ED,347
2D02:  MOVFF  2EC,346
2D06:  MOVFF  2EB,345
2D0A:  MOVFF  2EA,344
2D0E:  MOVLB  0
2D10:  CALL   18BC
2D14:  BNC   2D42
2D16:  MOVFF  2ED,343
2D1A:  MOVFF  2EC,342
2D1E:  MOVFF  2EB,341
2D22:  MOVFF  2EA,340
2D26:  MOVLB  3
2D28:  CLRF   x47
2D2A:  CLRF   x46
2D2C:  MOVLW  70
2D2E:  MOVWF  x45
2D30:  MOVLW  84
2D32:  MOVWF  x44
2D34:  MOVLB  0
2D36:  CALL   18BC
2D3A:  BNC   2D42
....................    { 
....................       Frio=10; 
2D3C:  MOVLW  0A
2D3E:  MOVLB  2
2D40:  MOVWF  x5D
....................    } 
....................    if(Temperatura>5 && Temperatura<35) 
2D42:  MOVLB  3
2D44:  CLRF   x43
2D46:  CLRF   x42
2D48:  MOVLW  20
2D4A:  MOVWF  x41
2D4C:  MOVLW  81
2D4E:  MOVWF  x40
2D50:  MOVFF  2ED,347
2D54:  MOVFF  2EC,346
2D58:  MOVFF  2EB,345
2D5C:  MOVFF  2EA,344
2D60:  MOVLB  0
2D62:  CALL   18BC
2D66:  BNC   2D96
2D68:  MOVFF  2ED,343
2D6C:  MOVFF  2EC,342
2D70:  MOVFF  2EB,341
2D74:  MOVFF  2EA,340
2D78:  MOVLB  3
2D7A:  CLRF   x47
2D7C:  CLRF   x46
2D7E:  MOVLW  0C
2D80:  MOVWF  x45
2D82:  MOVLW  84
2D84:  MOVWF  x44
2D86:  MOVLB  0
2D88:  CALL   18BC
2D8C:  BNC   2D96
....................    { 
....................       Frio=15; 
2D8E:  MOVLW  0F
2D90:  MOVLB  2
2D92:  MOVWF  x5D
2D94:  MOVLB  0
....................    } 
....................     
....................    
.................... while(true) 
.................... { 
....................    if(STOP || Visua==1) 
2D96:  BSF    F95.5
2D98:  BTFSS  F83.5
2D9A:  BRA    2DA4
2D9C:  MOVLB  2
2D9E:  BTFSS  x86.1
2DA0:  BRA    2DBE
2DA2:  MOVLB  0
....................    { 
....................       emergency=1; 
2DA4:  MOVLB  2
2DA6:  BSF    x56.0
....................       EV_Desfogue_on; 
2DA8:  BSF    F8A.6
2DAA:  BCF    F93.6
....................       EV_Agua_off; 
2DAC:  BCF    F8A.4
2DAE:  BCF    F93.4
....................       Resistencia_off; 
2DB0:  BCF    F8B.0
2DB2:  BCF    F94.0
....................       Resistencia2_off; 
2DB4:  BCF    F8B.1
2DB6:  BCF    F94.1
....................       EVDesfogue=0; 
2DB8:  CLRF   x60
....................       disable_interrupts(INT_TIMER0); 
2DBA:  BCF    FF2.5
....................    }         
....................    else 
2DBC:  BRA    2DDA
....................    { 
....................       if(emergency==1) 
2DBE:  BTFSS  x56.0
2DC0:  BRA    2DDA
....................       { 
....................          delay_ms(1500); 
2DC2:  MOVLW  06
2DC4:  MOVLB  3
2DC6:  MOVWF  x3F
2DC8:  MOVLW  FA
2DCA:  MOVWF  x45
2DCC:  MOVLB  0
2DCE:  CALL   0F0A
2DD2:  MOVLB  3
2DD4:  DECFSZ x3F,F
2DD6:  BRA    2DC8
2DD8:  MOVLB  2
....................       } 
....................    } 
....................     
....................       if(!LOW && !STOP) 
2DDA:  BSF    F95.0
2DDC:  BTFSC  F83.0
2DDE:  BRA    2DFA
2DE0:  BSF    F95.5
2DE2:  BTFSS  F83.5
2DE4:  BRA    2DFA
....................       { 
....................          flag_reservorio=0;    
2DE6:  BCF    x56.5
....................          treservorio=0; 
2DE8:  CLRF   x81
2DEA:  CLRF   x80
....................          EV_Agua_on; 
2DEC:  BSF    F8A.4
2DEE:  BCF    F93.4
....................          Resistencia_off;  
2DF0:  BCF    F8B.0
2DF2:  BCF    F94.0
....................          Resistencia2_off; 
2DF4:  BCF    F8B.1
2DF6:  BCF    F94.1
....................       } 
....................       else 
2DF8:  BRA    2E34
....................       {       
....................          if(HIGH && !STOP) 
2DFA:  BSF    F95.2
2DFC:  BTFSS  F83.2
2DFE:  BRA    2E26
2E00:  BSF    F95.5
2E02:  BTFSS  F83.5
2E04:  BRA    2E26
....................          { 
....................             if(treservorio>=1200) 
2E06:  MOVF   x81,W
2E08:  SUBLW  03
2E0A:  BC    2E22
2E0C:  XORLW  FF
2E0E:  BNZ   2E16
2E10:  MOVF   x80,W
2E12:  SUBLW  AF
2E14:  BC    2E22
....................             { 
....................                EV_Agua_off; 
2E16:  BCF    F8A.4
2E18:  BCF    F93.4
....................                flag_reservorio=0; 
2E1A:  BCF    x56.5
....................                flag_agua=1; 
2E1C:  BSF    x56.1
....................                flag_agua2=1; 
2E1E:  BSF    x56.2
....................             } 
....................             else 
2E20:  BRA    2E24
....................             { 
....................                flag_reservorio=1;            
2E22:  BSF    x56.5
....................             } 
....................          } 
....................          else 
2E24:  BRA    2E34
....................          { 
....................             treservorio=0; 
2E26:  CLRF   x81
2E28:  CLRF   x80
....................             flag_reservorio=0; 
2E2A:  BCF    x56.5
....................             if(EVAgua==0) 
2E2C:  MOVF   x61,F
2E2E:  BNZ   2E34
....................             { 
....................                EV_Agua_on; 
2E30:  BSF    F8A.4
2E32:  BCF    F93.4
....................             } 
....................          } 
....................       } 
....................        
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
2E34:  MOVLB  0
2E36:  GOTO   1EEC
2E3A:  MOVF   01,F
2E3C:  BTFSC  FD8.2
2E3E:  BRA    3590
.................... { 
....................    if(usb_kbhit(1)) 
2E40:  MOVLW  01
2E42:  MOVLB  3
2E44:  MOVWF  x3F
2E46:  MOVLB  0
2E48:  GOTO   1EF4
2E4C:  MOVF   01,F
2E4E:  BTFSC  FD8.2
2E50:  BRA    30A4
....................    { 
....................       usb_get_packet(1, rxubuf, Lenbuf); 
2E52:  MOVLW  01
2E54:  MOVLB  3
2E56:  MOVWF  x3F
2E58:  CLRF   x41
2E5A:  MOVLW  42
2E5C:  MOVWF  x40
2E5E:  CLRF   x43
2E60:  MOVLW  20
2E62:  MOVWF  x42
2E64:  MOVLB  0
2E66:  GOTO   1FFA
....................       if(rxubuf[0]==1) 
2E6A:  DECFSZ 42,W
2E6C:  BRA    2EF2
....................       { 
....................          Ganancia=rxubuf[1];desvio=rxubuf[2];Tciclo=rxubuf[3];MediaMovil=rxubuf[5];Ganancia2=rxubuf[6];Ajuste=rxubuf[7]; 
2E6E:  MOVLB  3
2E70:  CLRF   x46
2E72:  MOVFF  43,345
2E76:  MOVLB  0
2E78:  CALL   0F34
2E7C:  MOVFF  03,2B5
2E80:  MOVFF  02,2B4
2E84:  MOVFF  01,2B3
2E88:  MOVFF  00,2B2
2E8C:  MOVLB  3
2E8E:  CLRF   x46
2E90:  MOVFF  44,345
2E94:  MOVLB  0
2E96:  CALL   0F34
2E9A:  MOVFF  03,2BD
2E9E:  MOVFF  02,2BC
2EA2:  MOVFF  01,2BB
2EA6:  MOVFF  00,2BA
2EAA:  MOVLB  3
2EAC:  CLRF   x46
2EAE:  MOVFF  45,345
2EB2:  MOVLB  0
2EB4:  CALL   0F34
2EB8:  MOVFF  03,29D
2EBC:  MOVFF  02,29C
2EC0:  MOVFF  01,29B
2EC4:  MOVFF  00,29A
2EC8:  MOVFF  47,28D
2ECC:  MOVLB  3
2ECE:  CLRF   x46
2ED0:  MOVFF  48,345
2ED4:  MOVLB  0
2ED6:  CALL   0F34
2EDA:  MOVFF  03,2B9
2EDE:  MOVFF  02,2B8
2EE2:  MOVFF  01,2B7
2EE6:  MOVFF  00,2B6
2EEA:  MOVFF  49,289
....................          Ajusten=rxubuf[10];//R2=rxubuf[11]; 
2EEE:  MOVFF  4C,28A
....................       } // Falta escribir en la eeprom 
....................       if(rxubuf[12]==1)    
2EF2:  DECFSZ 4E,W
2EF4:  BRA    307E
....................       { 
....................          write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,MediaMovil); 
2EF6:  MOVFF  2B5,342
2EFA:  MOVFF  2B4,341
2EFE:  MOVFF  2B3,340
2F02:  MOVFF  2B2,33F
2F06:  CALL   1D68
2F0A:  MOVFF  01,33F
2F0E:  MOVLW  0A
2F10:  MOVWF  FA9
2F12:  MOVFF  33F,FA8
2F16:  BCF    FA6.6
2F18:  BCF    FA6.7
2F1A:  BSF    FA6.2
2F1C:  MOVF   FF2,W
2F1E:  MOVWF  00
2F20:  BCF    FF2.7
2F22:  MOVLB  F
2F24:  MOVLW  55
2F26:  MOVWF  FA7
2F28:  MOVLW  AA
2F2A:  MOVWF  FA7
2F2C:  BSF    FA6.1
2F2E:  BTFSC  FA6.1
2F30:  BRA    2F2E
2F32:  BCF    FA6.2
2F34:  MOVF   00,W
2F36:  IORWF  FF2,F
2F38:  MOVFF  2BD,342
2F3C:  MOVFF  2BC,341
2F40:  MOVFF  2BB,340
2F44:  MOVFF  2BA,33F
2F48:  MOVLB  0
2F4A:  CALL   1D68
2F4E:  MOVFF  01,33F
2F52:  MOVLW  0B
2F54:  MOVWF  FA9
2F56:  MOVFF  33F,FA8
2F5A:  BCF    FA6.6
2F5C:  BCF    FA6.7
2F5E:  BSF    FA6.2
2F60:  MOVF   FF2,W
2F62:  MOVWF  00
2F64:  BCF    FF2.7
2F66:  MOVLB  F
2F68:  MOVLW  55
2F6A:  MOVWF  FA7
2F6C:  MOVLW  AA
2F6E:  MOVWF  FA7
2F70:  BSF    FA6.1
2F72:  BTFSC  FA6.1
2F74:  BRA    2F72
2F76:  BCF    FA6.2
2F78:  MOVF   00,W
2F7A:  IORWF  FF2,F
2F7C:  MOVFF  29D,342
2F80:  MOVFF  29C,341
2F84:  MOVFF  29B,340
2F88:  MOVFF  29A,33F
2F8C:  MOVLB  0
2F8E:  CALL   1D68
2F92:  MOVFF  01,33F
2F96:  MOVLW  0C
2F98:  MOVWF  FA9
2F9A:  MOVFF  33F,FA8
2F9E:  BCF    FA6.6
2FA0:  BCF    FA6.7
2FA2:  BSF    FA6.2
2FA4:  MOVF   FF2,W
2FA6:  MOVWF  00
2FA8:  BCF    FF2.7
2FAA:  MOVLB  F
2FAC:  MOVLW  55
2FAE:  MOVWF  FA7
2FB0:  MOVLW  AA
2FB2:  MOVWF  FA7
2FB4:  BSF    FA6.1
2FB6:  BTFSC  FA6.1
2FB8:  BRA    2FB6
2FBA:  BCF    FA6.2
2FBC:  MOVF   00,W
2FBE:  IORWF  FF2,F
2FC0:  MOVLW  14
2FC2:  MOVWF  FA9
2FC4:  MOVFF  28D,FA8
2FC8:  BCF    FA6.6
2FCA:  BCF    FA6.7
2FCC:  BSF    FA6.2
2FCE:  MOVF   FF2,W
2FD0:  MOVWF  00
2FD2:  BCF    FF2.7
2FD4:  MOVLW  55
2FD6:  MOVWF  FA7
2FD8:  MOVLW  AA
2FDA:  MOVWF  FA7
2FDC:  BSF    FA6.1
2FDE:  BTFSC  FA6.1
2FE0:  BRA    2FDE
2FE2:  BCF    FA6.2
2FE4:  MOVF   00,W
2FE6:  IORWF  FF2,F
....................          write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);write_eeprom(15,(int8)Ganancia2); 
2FE8:  MOVLW  0D
2FEA:  MOVWF  FA9
2FEC:  MOVFF  289,FA8
2FF0:  BCF    FA6.6
2FF2:  BCF    FA6.7
2FF4:  BSF    FA6.2
2FF6:  MOVF   FF2,W
2FF8:  MOVWF  00
2FFA:  BCF    FF2.7
2FFC:  MOVLW  55
2FFE:  MOVWF  FA7
3000:  MOVLW  AA
3002:  MOVWF  FA7
3004:  BSF    FA6.1
3006:  BTFSC  FA6.1
3008:  BRA    3006
300A:  BCF    FA6.2
300C:  MOVF   00,W
300E:  IORWF  FF2,F
3010:  MOVLW  0E
3012:  MOVWF  FA9
3014:  MOVFF  28A,FA8
3018:  BCF    FA6.6
301A:  BCF    FA6.7
301C:  BSF    FA6.2
301E:  MOVF   FF2,W
3020:  MOVWF  00
3022:  BCF    FF2.7
3024:  MOVLW  55
3026:  MOVWF  FA7
3028:  MOVLW  AA
302A:  MOVWF  FA7
302C:  BSF    FA6.1
302E:  BTFSC  FA6.1
3030:  BRA    302E
3032:  BCF    FA6.2
3034:  MOVF   00,W
3036:  IORWF  FF2,F
3038:  MOVFF  2B9,342
303C:  MOVFF  2B8,341
3040:  MOVFF  2B7,340
3044:  MOVFF  2B6,33F
3048:  MOVLB  0
304A:  CALL   1D68
304E:  MOVFF  01,33F
3052:  MOVLW  0F
3054:  MOVWF  FA9
3056:  MOVFF  33F,FA8
305A:  BCF    FA6.6
305C:  BCF    FA6.7
305E:  BSF    FA6.2
3060:  MOVF   FF2,W
3062:  MOVWF  00
3064:  BCF    FF2.7
3066:  MOVLB  F
3068:  MOVLW  55
306A:  MOVWF  FA7
306C:  MOVLW  AA
306E:  MOVWF  FA7
3070:  BSF    FA6.1
3072:  BTFSC  FA6.1
3074:  BRA    3072
3076:  BCF    FA6.2
3078:  MOVF   00,W
307A:  IORWF  FF2,F
307C:  MOVLB  0
....................       }   
....................        
....................       if(rxubuf[13]==1) 
307E:  DECFSZ 4F,W
3080:  BRA    308A
....................       { 
....................          Visua=1; 
3082:  MOVLB  2
3084:  BSF    x86.1
....................       } 
....................       else 
3086:  BRA    308E
3088:  MOVLB  0
....................       { 
....................          Visua=0; 
308A:  MOVLB  2
308C:  BCF    x86.1
....................       } 
....................        
....................       if(rxubuf[8]==1)// Camara OUT 
308E:  DECFSZ 4A,W
3090:  BRA    3096
....................       { 
....................          CamaraOUT=1; 
3092:  BSF    x56.3
....................       } 
....................       else 
3094:  BRA    3098
....................       { 
....................          CamaraOUT=0; 
3096:  BCF    x56.3
....................       } 
....................        
....................       if(rxubuf[9]==1)// Camara IN 
3098:  DECFSZ 4B,W
309A:  BRA    30A0
....................       { 
....................          CamaraIN=1; 
309C:  BSF    x56.4
....................       } 
....................       else 
309E:  BRA    30A2
....................       { 
....................          CamaraIN=0; 
30A0:  BCF    x56.4
30A2:  MOVLB  0
....................       } 
....................     } 
....................      
....................     TempUSB=Temperatura; 
30A4:  MOVFF  2ED,2F1
30A8:  MOVFF  2EC,2F0
30AC:  MOVFF  2EB,2EF
30B0:  MOVFF  2EA,2EE
....................     recbuf[0]=(int8)(TempUSB); 
30B4:  MOVFF  2F1,342
30B8:  MOVFF  2F0,341
30BC:  MOVFF  2EF,340
30C0:  MOVFF  2EE,33F
30C4:  CALL   1D68
30C8:  MOVFF  01,22
....................     recbuf[1]=120; 
30CC:  MOVLW  78
30CE:  MOVWF  23
....................     d3=TempUSB-(int8)TempUSB; 
30D0:  MOVFF  2F1,342
30D4:  MOVFF  2F0,341
30D8:  MOVFF  2EF,340
30DC:  MOVFF  2EE,33F
30E0:  CALL   1D68
30E4:  MOVLB  3
30E6:  CLRF   x46
30E8:  MOVFF  01,345
30EC:  MOVLB  0
30EE:  CALL   0F34
30F2:  BSF    FD8.1
30F4:  MOVFF  2F1,347
30F8:  MOVFF  2F0,346
30FC:  MOVFF  2EF,345
3100:  MOVFF  2EE,344
3104:  MOVFF  03,34B
3108:  MOVFF  02,34A
310C:  MOVFF  01,349
3110:  MOVFF  00,348
3114:  CALL   111C
3118:  MOVFF  03,2C1
311C:  MOVFF  02,2C0
3120:  MOVFF  01,2BF
3124:  MOVFF  00,2BE
....................     d3=d3*10.0; 
3128:  MOVFF  2C1,347
312C:  MOVFF  2C0,346
3130:  MOVFF  2BF,345
3134:  MOVFF  2BE,344
3138:  MOVLB  3
313A:  CLRF   x4B
313C:  CLRF   x4A
313E:  MOVLW  20
3140:  MOVWF  x49
3142:  MOVLW  82
3144:  MOVWF  x48
3146:  MOVLB  0
3148:  CALL   1400
314C:  MOVFF  03,2C1
3150:  MOVFF  02,2C0
3154:  MOVFF  01,2BF
3158:  MOVFF  00,2BE
....................     recbuf[2]=(int8)d3; 
315C:  MOVFF  2C1,342
3160:  MOVFF  2C0,341
3164:  MOVFF  2BF,340
3168:  MOVFF  2BE,33F
316C:  CALL   1D68
3170:  MOVFF  01,24
....................     recbuf[3]=(int8)Pt; 
3174:  MOVFF  299,342
3178:  MOVFF  298,341
317C:  MOVFF  297,340
3180:  MOVFF  296,33F
3184:  CALL   1D68
3188:  MOVFF  01,25
....................     recbuf[4]=(int8)Setpoint; 
318C:  MOVFF  2E9,342
3190:  MOVFF  2E8,341
3194:  MOVFF  2E7,340
3198:  MOVFF  2E6,33F
319C:  CALL   1D68
31A0:  MOVFF  01,26
....................     recbuf[5]=(int8)PresionCamara; 
31A4:  MOVFF  2F5,342
31A8:  MOVFF  2F4,341
31AC:  MOVFF  2F3,340
31B0:  MOVFF  2F2,33F
31B4:  CALL   1D68
31B8:  MOVFF  01,27
....................     d4=Pt-(int8)Pt; 
31BC:  MOVFF  299,342
31C0:  MOVFF  298,341
31C4:  MOVFF  297,340
31C8:  MOVFF  296,33F
31CC:  CALL   1D68
31D0:  MOVLB  3
31D2:  CLRF   x46
31D4:  MOVFF  01,345
31D8:  MOVLB  0
31DA:  CALL   0F34
31DE:  BSF    FD8.1
31E0:  MOVFF  299,347
31E4:  MOVFF  298,346
31E8:  MOVFF  297,345
31EC:  MOVFF  296,344
31F0:  MOVFF  03,34B
31F4:  MOVFF  02,34A
31F8:  MOVFF  01,349
31FC:  MOVFF  00,348
3200:  CALL   111C
3204:  MOVFF  03,2C5
3208:  MOVFF  02,2C4
320C:  MOVFF  01,2C3
3210:  MOVFF  00,2C2
....................     d4=d4*10.0; 
3214:  MOVFF  2C5,347
3218:  MOVFF  2C4,346
321C:  MOVFF  2C3,345
3220:  MOVFF  2C2,344
3224:  MOVLB  3
3226:  CLRF   x4B
3228:  CLRF   x4A
322A:  MOVLW  20
322C:  MOVWF  x49
322E:  MOVLW  82
3230:  MOVWF  x48
3232:  MOVLB  0
3234:  CALL   1400
3238:  MOVFF  03,2C5
323C:  MOVFF  02,2C4
3240:  MOVFF  01,2C3
3244:  MOVFF  00,2C2
....................     recbuf[6]=(int8)d4; 
3248:  MOVFF  2C5,342
324C:  MOVFF  2C4,341
3250:  MOVFF  2C3,340
3254:  MOVFF  2C2,33F
3258:  CALL   1D68
325C:  MOVFF  01,28
....................     recbuf[7]=(int8)NivelTanque; 
3260:  MOVFF  26D,29
....................     recbuf[8]=(int8)NivelReservorio; 
3264:  MOVFF  26C,2A
....................     recbuf[9]=(int8)Tpulso; 
3268:  MOVFF  2A1,342
326C:  MOVFF  2A0,341
3270:  MOVFF  29F,340
3274:  MOVFF  29E,33F
3278:  CALL   1D68
327C:  MOVFF  01,2B
....................     d5=Tpulso-(int8)Tpulso; 
3280:  MOVFF  2A1,342
3284:  MOVFF  2A0,341
3288:  MOVFF  29F,340
328C:  MOVFF  29E,33F
3290:  CALL   1D68
3294:  MOVLB  3
3296:  CLRF   x46
3298:  MOVFF  01,345
329C:  MOVLB  0
329E:  CALL   0F34
32A2:  BSF    FD8.1
32A4:  MOVFF  2A1,347
32A8:  MOVFF  2A0,346
32AC:  MOVFF  29F,345
32B0:  MOVFF  29E,344
32B4:  MOVFF  03,34B
32B8:  MOVFF  02,34A
32BC:  MOVFF  01,349
32C0:  MOVFF  00,348
32C4:  CALL   111C
32C8:  MOVFF  03,2C9
32CC:  MOVFF  02,2C8
32D0:  MOVFF  01,2C7
32D4:  MOVFF  00,2C6
....................     d5=d5*10.0; 
32D8:  MOVFF  2C9,347
32DC:  MOVFF  2C8,346
32E0:  MOVFF  2C7,345
32E4:  MOVFF  2C6,344
32E8:  MOVLB  3
32EA:  CLRF   x4B
32EC:  CLRF   x4A
32EE:  MOVLW  20
32F0:  MOVWF  x49
32F2:  MOVLW  82
32F4:  MOVWF  x48
32F6:  MOVLB  0
32F8:  CALL   1400
32FC:  MOVFF  03,2C9
3300:  MOVFF  02,2C8
3304:  MOVFF  01,2C7
3308:  MOVFF  00,2C6
....................     recbuf[10]=(int8)d5; 
330C:  MOVFF  2C9,342
3310:  MOVFF  2C8,341
3314:  MOVFF  2C7,340
3318:  MOVFF  2C6,33F
331C:  CALL   1D68
3320:  MOVFF  01,2C
....................     recbuf[11]=(int8)error; 
3324:  MOVFF  2A5,342
3328:  MOVFF  2A4,341
332C:  MOVFF  2A3,340
3330:  MOVFF  2A2,33F
3334:  CALL   1D68
3338:  MOVFF  01,2D
....................     d6=error-(int8)error; 
333C:  MOVFF  2A5,342
3340:  MOVFF  2A4,341
3344:  MOVFF  2A3,340
3348:  MOVFF  2A2,33F
334C:  CALL   1D68
3350:  MOVLB  3
3352:  CLRF   x46
3354:  MOVFF  01,345
3358:  MOVLB  0
335A:  CALL   0F34
335E:  BSF    FD8.1
3360:  MOVFF  2A5,347
3364:  MOVFF  2A4,346
3368:  MOVFF  2A3,345
336C:  MOVFF  2A2,344
3370:  MOVFF  03,34B
3374:  MOVFF  02,34A
3378:  MOVFF  01,349
337C:  MOVFF  00,348
3380:  CALL   111C
3384:  MOVFF  03,2D5
3388:  MOVFF  02,2D4
338C:  MOVFF  01,2D3
3390:  MOVFF  00,2D2
....................     d6=d6*10.0; 
3394:  MOVFF  2D5,347
3398:  MOVFF  2D4,346
339C:  MOVFF  2D3,345
33A0:  MOVFF  2D2,344
33A4:  MOVLB  3
33A6:  CLRF   x4B
33A8:  CLRF   x4A
33AA:  MOVLW  20
33AC:  MOVWF  x49
33AE:  MOVLW  82
33B0:  MOVWF  x48
33B2:  MOVLB  0
33B4:  CALL   1400
33B8:  MOVFF  03,2D5
33BC:  MOVFF  02,2D4
33C0:  MOVFF  01,2D3
33C4:  MOVFF  00,2D2
....................     recbuf[12]=(int8)d6; 
33C8:  MOVFF  2D5,342
33CC:  MOVFF  2D4,341
33D0:  MOVFF  2D3,340
33D4:  MOVFF  2D2,33F
33D8:  CALL   1D68
33DC:  MOVFF  01,2E
....................      
....................     recbuf[13]=(int8)Aumento; 
33E0:  MOVFF  251,342
33E4:  MOVFF  250,341
33E8:  MOVFF  24F,340
33EC:  MOVFF  24E,33F
33F0:  CALL   1D68
33F4:  MOVFF  01,2F
....................     d7=Aumento-(int8)Aumento; 
33F8:  MOVFF  251,342
33FC:  MOVFF  250,341
3400:  MOVFF  24F,340
3404:  MOVFF  24E,33F
3408:  CALL   1D68
340C:  MOVLB  3
340E:  CLRF   x46
3410:  MOVFF  01,345
3414:  MOVLB  0
3416:  CALL   0F34
341A:  BSF    FD8.1
341C:  MOVFF  251,347
3420:  MOVFF  250,346
3424:  MOVFF  24F,345
3428:  MOVFF  24E,344
342C:  MOVFF  03,34B
3430:  MOVFF  02,34A
3434:  MOVFF  01,349
3438:  MOVFF  00,348
343C:  CALL   111C
3440:  MOVFF  03,2D9
3444:  MOVFF  02,2D8
3448:  MOVFF  01,2D7
344C:  MOVFF  00,2D6
....................     d7=d7*10.0; 
3450:  MOVFF  2D9,347
3454:  MOVFF  2D8,346
3458:  MOVFF  2D7,345
345C:  MOVFF  2D6,344
3460:  MOVLB  3
3462:  CLRF   x4B
3464:  CLRF   x4A
3466:  MOVLW  20
3468:  MOVWF  x49
346A:  MOVLW  82
346C:  MOVWF  x48
346E:  MOVLB  0
3470:  CALL   1400
3474:  MOVFF  03,2D9
3478:  MOVFF  02,2D8
347C:  MOVFF  01,2D7
3480:  MOVFF  00,2D6
....................     recbuf[14]=(int8)d7; 
3484:  MOVFF  2D9,342
3488:  MOVFF  2D8,341
348C:  MOVFF  2D7,340
3490:  MOVFF  2D6,33F
3494:  CALL   1D68
3498:  MOVFF  01,30
....................      
....................     recbuf[15]=(int8)Ganancia; 
349C:  MOVFF  2B5,342
34A0:  MOVFF  2B4,341
34A4:  MOVFF  2B3,340
34A8:  MOVFF  2B2,33F
34AC:  CALL   1D68
34B0:  MOVFF  01,31
....................     d8=Ganancia-(int8)Ganancia; 
34B4:  MOVFF  2B5,342
34B8:  MOVFF  2B4,341
34BC:  MOVFF  2B3,340
34C0:  MOVFF  2B2,33F
34C4:  CALL   1D68
34C8:  MOVLB  3
34CA:  CLRF   x46
34CC:  MOVFF  01,345
34D0:  MOVLB  0
34D2:  CALL   0F34
34D6:  BSF    FD8.1
34D8:  MOVFF  2B5,347
34DC:  MOVFF  2B4,346
34E0:  MOVFF  2B3,345
34E4:  MOVFF  2B2,344
34E8:  MOVFF  03,34B
34EC:  MOVFF  02,34A
34F0:  MOVFF  01,349
34F4:  MOVFF  00,348
34F8:  CALL   111C
34FC:  MOVFF  03,2DD
3500:  MOVFF  02,2DC
3504:  MOVFF  01,2DB
3508:  MOVFF  00,2DA
....................     d8=d8*10.0; 
350C:  MOVFF  2DD,347
3510:  MOVFF  2DC,346
3514:  MOVFF  2DB,345
3518:  MOVFF  2DA,344
351C:  MOVLB  3
351E:  CLRF   x4B
3520:  CLRF   x4A
3522:  MOVLW  20
3524:  MOVWF  x49
3526:  MOVLW  82
3528:  MOVWF  x48
352A:  MOVLB  0
352C:  CALL   1400
3530:  MOVFF  03,2DD
3534:  MOVFF  02,2DC
3538:  MOVFF  01,2DB
353C:  MOVFF  00,2DA
....................     recbuf[16]=(int8)d8; 
3540:  MOVFF  2DD,342
3544:  MOVFF  2DC,341
3548:  MOVFF  2DB,340
354C:  MOVFF  2DA,33F
3550:  CALL   1D68
3554:  MOVFF  01,32
....................     recbuf[17]=(int8)Puerta; 
3558:  MOVFF  26A,33
....................     recbuf[18]=(int8)PresionPreCamara; 
355C:  MOVFF  2F9,342
3560:  MOVFF  2F8,341
3564:  MOVFF  2F7,340
3568:  MOVFF  2F6,33F
356C:  CALL   1D68
3570:  MOVFF  01,34
....................                 
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
3574:  MOVLW  01
3576:  MOVLB  3
3578:  MOVWF  x3F
357A:  CLRF   x41
357C:  MOVLW  22
357E:  MOVWF  x40
3580:  CLRF   x43
3582:  MOVLW  20
3584:  MOVWF  x42
3586:  MOVLW  02
3588:  MOVWF  x44
358A:  MOVLB  0
358C:  GOTO   2044
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................     
....................    if(Expulsa==1) 
3590:  MOVLB  2
3592:  BTFSS  x86.0
3594:  BRA    370C
....................    {    
....................       Temperatura=Leer_Sensor(MediaMovil); 
3596:  MOVFF  28D,33F
359A:  MOVLB  0
359C:  CALL   14F6
35A0:  MOVFF  03,2ED
35A4:  MOVFF  02,2EC
35A8:  MOVFF  01,2EB
35AC:  MOVFF  00,2EA
....................       d3=Temperatura-(int8)Temperatura; 
35B0:  MOVFF  2ED,342
35B4:  MOVFF  2EC,341
35B8:  MOVFF  2EB,340
35BC:  MOVFF  2EA,33F
35C0:  CALL   1D68
35C4:  MOVLB  3
35C6:  CLRF   x46
35C8:  MOVFF  01,345
35CC:  MOVLB  0
35CE:  CALL   0F34
35D2:  BSF    FD8.1
35D4:  MOVFF  2ED,347
35D8:  MOVFF  2EC,346
35DC:  MOVFF  2EB,345
35E0:  MOVFF  2EA,344
35E4:  MOVFF  03,34B
35E8:  MOVFF  02,34A
35EC:  MOVFF  01,349
35F0:  MOVFF  00,348
35F4:  CALL   111C
35F8:  MOVFF  03,2C1
35FC:  MOVFF  02,2C0
3600:  MOVFF  01,2BF
3604:  MOVFF  00,2BE
....................       d3=d3*10.0; 
3608:  MOVFF  2C1,347
360C:  MOVFF  2C0,346
3610:  MOVFF  2BF,345
3614:  MOVFF  2BE,344
3618:  MOVLB  3
361A:  CLRF   x4B
361C:  CLRF   x4A
361E:  MOVLW  20
3620:  MOVWF  x49
3622:  MOVLW  82
3624:  MOVWF  x48
3626:  MOVLB  0
3628:  CALL   1400
362C:  MOVFF  03,2C1
3630:  MOVFF  02,2C0
3634:  MOVFF  01,2BF
3638:  MOVFF  00,2BE
....................       PresionCamara=Leer_Sensor_Presion_Camara(5); 
363C:  MOVLW  05
363E:  MOVLB  3
3640:  MOVWF  x3F
3642:  MOVLB  0
3644:  CALL   1936
3648:  MOVFF  03,2F5
364C:  MOVFF  02,2F4
3650:  MOVFF  01,2F3
3654:  MOVFF  00,2F2
....................       PresionCamara16=(int16)Leer_Sensor_Presion_Camara(5); 
3658:  MOVLW  05
365A:  MOVLB  3
365C:  MOVWF  x3F
365E:  MOVLB  0
3660:  CALL   1936
3664:  MOVFF  03,342
3668:  MOVFF  02,341
366C:  MOVFF  01,340
3670:  MOVFF  00,33F
3674:  CALL   1D68
3678:  MOVFF  02,283
367C:  MOVFF  01,282
....................       PresionPreCamara=Leer_Sensor_Presion_PreCamara(5); 
3680:  MOVLW  05
3682:  MOVLB  3
3684:  MOVWF  x3F
3686:  MOVLB  0
3688:  CALL   1B32
368C:  MOVFF  03,2F9
3690:  MOVFF  02,2F8
3694:  MOVFF  01,2F7
3698:  MOVFF  00,2F6
....................       PresionPreCamara16=(int16)Leer_Sensor_Presion_PreCamara(5); 
369C:  MOVLW  05
369E:  MOVLB  3
36A0:  MOVWF  x3F
36A2:  MOVLB  0
36A4:  CALL   1B32
36A8:  MOVFF  03,342
36AC:  MOVFF  02,341
36B0:  MOVFF  01,340
36B4:  MOVFF  00,33F
36B8:  CALL   1D68
36BC:  MOVFF  02,285
36C0:  MOVFF  01,284
....................       Puerta=!DOOR; 
36C4:  BSF    F95.4
36C6:  MOVLB  2
36C8:  CLRF   x6A
36CA:  BTFSC  F83.4
36CC:  INCF   x6A,F
....................       Parada=!STOP; 
36CE:  BSF    F95.5
36D0:  CLRF   x6B
36D2:  BTFSC  F83.5
36D4:  INCF   x6B,F
....................       NivelReservorio=LOW; 
36D6:  BSF    F95.0
36D8:  CLRF   x6C
36DA:  BTFSC  F83.0
36DC:  INCF   x6C,F
....................       NivelTanque=HIGH; 
36DE:  BSF    F95.2
36E0:  CLRF   x6D
36E2:  BTFSC  F83.2
36E4:  INCF   x6D,F
....................       //Temperatura=Leer_Sensor(10); 
....................       Presostato=(int8)PresionCamara; 
36E6:  MOVFF  2F5,342
36EA:  MOVFF  2F4,341
36EE:  MOVFF  2F3,340
36F2:  MOVFF  2F2,33F
36F6:  MOVLB  0
36F8:  CALL   1D68
36FC:  MOVFF  01,26E
....................       Lee_Vector(); 
3700:  CALL   1DA4
....................       Carga_Vector(); 
3704:  CALL   1DF6
....................       Expulsa=0; 
3708:  MOVLB  2
370A:  BCF    x86.0
....................    }     
....................  
....................    if(tinicio>7200 && tiempo_esterilizacion==0)//tinicio expresado en segundos       
370C:  MOVF   x7D,W
370E:  SUBLW  1B
3710:  BC    3760
3712:  XORLW  FF
3714:  BNZ   371C
3716:  MOVF   x7C,W
3718:  SUBLW  20
371A:  BC    3760
371C:  MOVF   x8B,F
371E:  BNZ   3760
....................    { 
....................          if(PresionCamara>2.0) 
3720:  MOVLB  3
3722:  CLRF   x43
3724:  CLRF   x42
3726:  CLRF   x41
3728:  MOVLW  80
372A:  MOVWF  x40
372C:  MOVFF  2F5,347
3730:  MOVFF  2F4,346
3734:  MOVFF  2F3,345
3738:  MOVFF  2F2,344
373C:  MOVLB  0
373E:  CALL   18BC
3742:  BNC   3748
....................          { 
....................             EV_Desfogue_on; 
3744:  BSF    F8A.6
3746:  BCF    F93.6
....................          } 
....................          Alarma=1; 
3748:  MOVLW  01
374A:  MOVLB  2
374C:  MOVWF  x68
....................          EV_Agua_off; 
374E:  BCF    F8A.4
3750:  BCF    F93.4
....................          EV_Paso_off; 
3752:  BCF    F8A.5
3754:  BCF    F93.5
....................          Resistencia_off; 
3756:  BCF    F8B.0
3758:  BCF    F94.0
....................          Resistencia2_off; 
375A:  BCF    F8B.1
375C:  BCF    F94.1
....................    } 
....................    else 
375E:  BRA    3A20
....................    {       
....................       if(EVDesfogue<1 && tiempo_esterilizacion==1 && (Temperatura<100.0 || Temperatura>145.0)) 
3760:  MOVF   x60,F
3762:  BNZ   37D0
3764:  DECFSZ x8B,W
3766:  BRA    37D0
3768:  MOVFF  2ED,343
376C:  MOVFF  2EC,342
3770:  MOVFF  2EB,341
3774:  MOVFF  2EA,340
3778:  MOVLB  3
377A:  CLRF   x47
377C:  CLRF   x46
377E:  MOVLW  48
3780:  MOVWF  x45
3782:  MOVLW  85
3784:  MOVWF  x44
3786:  MOVLB  0
3788:  CALL   18BC
378C:  BC    37BA
378E:  MOVLB  3
3790:  CLRF   x43
3792:  CLRF   x42
3794:  MOVLW  11
3796:  MOVWF  x41
3798:  MOVLW  86
379A:  MOVWF  x40
379C:  MOVFF  2ED,347
37A0:  MOVFF  2EC,346
37A4:  MOVFF  2EB,345
37A8:  MOVFF  2EA,344
37AC:  MOVLB  0
37AE:  CALL   18BC
37B2:  BTFSC  FD8.0
37B4:  BRA    37BA
37B6:  MOVLB  2
37B8:  BRA    37D0
....................       { 
....................          Alarma=2; 
37BA:  MOVLW  02
37BC:  MOVLB  2
37BE:  MOVWF  x68
....................          EV_Agua_off; 
37C0:  BCF    F8A.4
37C2:  BCF    F93.4
....................          EV_Paso_off; 
37C4:  BCF    F8A.5
37C6:  BCF    F93.5
....................          Resistencia_off; 
37C8:  BCF    F8B.0
37CA:  BCF    F94.0
....................          Resistencia2_off; 
37CC:  BCF    F8B.1
37CE:  BCF    F94.1
....................       } 
....................        
....................       if(tagua>720) // Si se el ingreso de agua al tanque dura mas de 12 minutos se activa la alarma por falta de agua. 
37D0:  MOVF   x7F,W
37D2:  SUBLW  01
37D4:  BC    37F4
37D6:  XORLW  FF
37D8:  BNZ   37E0
37DA:  MOVF   x7E,W
37DC:  SUBLW  D0
37DE:  BC    37F4
....................       { 
....................          AlarmaAgua=1;  
37E0:  MOVLW  01
37E2:  MOVWF  x69
....................          EV_Agua_off; 
37E4:  BCF    F8A.4
37E6:  BCF    F93.4
....................          EV_Paso_off; 
37E8:  BCF    F8A.5
37EA:  BCF    F93.5
....................          Resistencia_off; 
37EC:  BCF    F8B.0
37EE:  BCF    F94.0
....................          Resistencia2_off; 
37F0:  BCF    F8B.1
37F2:  BCF    F94.1
....................       } 
....................        
....................       if(Control==1 && !DOOR && !STOP && AlarmaAgua==0 && Alarma==0) // Si esta en condiciones normales para ejecutar el control. 
37F4:  DECFSZ x67,W
37F6:  BRA    3976
37F8:  BSF    F95.4
37FA:  BTFSS  F83.4
37FC:  BRA    3976
37FE:  BSF    F95.5
3800:  BTFSS  F83.5
3802:  BRA    3976
3804:  MOVF   x69,F
3806:  BTFSS  FD8.2
3808:  BRA    3976
380A:  MOVF   x68,F
380C:  BTFSS  FD8.2
380E:  BRA    3976
....................       { 
....................          if(!TERM && LOW) 
3810:  BSF    F95.6
3812:  BTFSC  F83.6
3814:  BRA    3826
3816:  BSF    F95.0
3818:  BTFSS  F83.0
381A:  BRA    3826
....................          { 
....................             Controla(); 
381C:  MOVLB  0
381E:  GOTO   20F4
....................          } 
....................          else 
3822:  BRA    382E
3824:  MOVLB  2
....................          { 
....................             Resistencia_off; 
3826:  BCF    F8B.0
3828:  BCF    F94.0
....................             Resistencia2_off; 
382A:  BCF    F8B.1
382C:  BCF    F94.1
....................          } 
....................          /* 
....................          if(CamaraOUT==1) // Si desea abrir electrovalvula desde Software de control  
....................          { 
....................             EV_Desfogue_on; 
....................          } 
....................          else 
....................          { 
....................             EV_Desfogue_off;  
....................          }*/ 
....................           
....................          if(PresionPreCamara>=80) // Si el Presostato se activo indicando que el calderin alcanzo la presión ajustada. 
382E:  MOVLB  3
3830:  CLRF   x43
3832:  CLRF   x42
3834:  MOVLW  20
3836:  MOVWF  x41
3838:  MOVLW  85
383A:  MOVWF  x40
383C:  MOVFF  2F9,347
3840:  MOVFF  2F8,346
3844:  MOVFF  2F7,345
3848:  MOVFF  2F6,344
384C:  MOVLB  0
384E:  CALL   18BC
3852:  BC    3856
3854:  BNZ   38B8
....................          {   
....................             if(flag_presostato==0) 
3856:  MOVLB  2
3858:  BTFSC  x56.6
385A:  BRA    38B6
....................             { 
....................                delay_ms(500); 
385C:  MOVLW  02
385E:  MOVLB  3
3860:  MOVWF  x3F
3862:  MOVLW  FA
3864:  MOVWF  x45
3866:  MOVLB  0
3868:  CALL   0F0A
386C:  MOVLB  3
386E:  DECFSZ x3F,F
3870:  BRA    3862
....................                if(PresionPreCamara>=80) 
3872:  CLRF   x43
3874:  CLRF   x42
3876:  MOVLW  20
3878:  MOVWF  x41
387A:  MOVLW  85
387C:  MOVWF  x40
387E:  MOVFF  2F9,347
3882:  MOVFF  2F8,346
3886:  MOVFF  2F7,345
388A:  MOVFF  2F6,344
388E:  MOVLB  0
3890:  CALL   18BC
3894:  BC    3898
3896:  BNZ   38B8
....................                { 
....................                   EV_Paso_on;  // Electrovalvula que da paso de la precamara a la Camara. 
3898:  BSF    F8A.5
389A:  BCF    F93.5
....................                   delay_ms(1000); 
389C:  MOVLW  04
389E:  MOVLB  3
38A0:  MOVWF  x3F
38A2:  MOVLW  FA
38A4:  MOVWF  x45
38A6:  MOVLB  0
38A8:  CALL   0F0A
38AC:  MOVLB  3
38AE:  DECFSZ x3F,F
38B0:  BRA    38A2
....................                   //EV_Desfogue_off; 
....................                   flag_presostato=1; 
38B2:  MOVLB  2
38B4:  BSF    x56.6
38B6:  MOVLB  0
....................                } 
....................             } 
....................          } 
....................           
....................          if(flag_presostato==1) 
38B8:  MOVLB  2
38BA:  BTFSS  x56.6
38BC:  BRA    3970
....................          { 
....................             EV_Paso_on; 
38BE:  BSF    F8A.5
38C0:  BCF    F93.5
....................             if(Frio==10) 
38C2:  MOVF   x5D,W
38C4:  SUBLW  0A
38C6:  BNZ   38FA
....................             { 
....................                if(Temperatura<90.0) 
38C8:  MOVFF  2ED,343
38CC:  MOVFF  2EC,342
38D0:  MOVFF  2EB,341
38D4:  MOVFF  2EA,340
38D8:  MOVLB  3
38DA:  CLRF   x47
38DC:  CLRF   x46
38DE:  MOVLW  34
38E0:  MOVWF  x45
38E2:  MOVLW  85
38E4:  MOVWF  x44
38E6:  MOVLB  0
38E8:  CALL   18BC
38EC:  BNC   38F4
....................                { 
....................                   EV_Desfogue_on; 
38EE:  BSF    F8A.6
38F0:  BCF    F93.6
....................                } 
....................                else 
38F2:  BRA    38F8
....................                { 
....................                   EV_Desfogue_off;  
38F4:  BCF    F8A.6
38F6:  BCF    F93.6
38F8:  MOVLB  2
....................                } 
....................             } 
....................             if(Frio==5) 
38FA:  MOVF   x5D,W
38FC:  SUBLW  05
38FE:  BNZ   3934
....................             { 
....................                if(Temperatura<=95.0) 
3900:  MOVFF  2ED,343
3904:  MOVFF  2EC,342
3908:  MOVFF  2EB,341
390C:  MOVFF  2EA,340
3910:  MOVLB  3
3912:  CLRF   x47
3914:  CLRF   x46
3916:  MOVLW  3E
3918:  MOVWF  x45
391A:  MOVLW  85
391C:  MOVWF  x44
391E:  MOVLB  0
3920:  CALL   18BC
3924:  BC    3928
3926:  BNZ   392E
....................                { 
....................                   EV_Desfogue_on; 
3928:  BSF    F8A.6
392A:  BCF    F93.6
....................                } 
....................                else 
392C:  BRA    3932
....................                { 
....................                   EV_Desfogue_off;  
392E:  BCF    F8A.6
3930:  BCF    F93.6
3932:  MOVLB  2
....................                } 
....................             } 
....................              
....................             if(Frio==15) 
3934:  MOVF   x5D,W
3936:  SUBLW  0F
3938:  BNZ   396E
....................             { 
....................                if(Temperatura<=85.0) 
393A:  MOVFF  2ED,343
393E:  MOVFF  2EC,342
3942:  MOVFF  2EB,341
3946:  MOVFF  2EA,340
394A:  MOVLB  3
394C:  CLRF   x47
394E:  CLRF   x46
3950:  MOVLW  2A
3952:  MOVWF  x45
3954:  MOVLW  85
3956:  MOVWF  x44
3958:  MOVLB  0
395A:  CALL   18BC
395E:  BC    3962
3960:  BNZ   3968
....................                { 
....................                   EV_Desfogue_on; 
3962:  BSF    F8A.6
3964:  BCF    F93.6
....................                } 
....................                else 
3966:  BRA    396C
....................                { 
....................                   EV_Desfogue_off;  
3968:  BCF    F8A.6
396A:  BCF    F93.6
396C:  MOVLB  2
....................                } 
....................             } 
....................          } 
....................          else 
396E:  BRA    3974
....................          { 
....................             EV_Desfogue_off;  
3970:  BCF    F8A.6
3972:  BCF    F93.6
....................          } 
....................       } 
....................       else 
3974:  BRA    3982
....................       { 
....................          Resistencia_off; 
3976:  BCF    F8B.0
3978:  BCF    F94.0
....................          Resistencia2_off; 
397A:  BCF    F8B.1
397C:  BCF    F94.1
....................          EV_Paso_off; 
397E:  BCF    F8A.5
3980:  BCF    F93.5
....................       } 
....................         
....................       if(Temperatura>=(Setpoint-1.0)&&p==3)// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
3982:  BSF    FD8.1
3984:  MOVFF  2E9,347
3988:  MOVFF  2E8,346
398C:  MOVFF  2E7,345
3990:  MOVFF  2E6,344
3994:  MOVLB  3
3996:  CLRF   x4B
3998:  CLRF   x4A
399A:  CLRF   x49
399C:  MOVLW  7F
399E:  MOVWF  x48
39A0:  MOVLB  0
39A2:  CALL   111C
39A6:  MOVFF  03,343
39AA:  MOVFF  02,342
39AE:  MOVFF  01,341
39B2:  MOVFF  00,340
39B6:  MOVFF  2ED,347
39BA:  MOVFF  2EC,346
39BE:  MOVFF  2EB,345
39C2:  MOVFF  2EA,344
39C6:  CALL   18BC
39CA:  BC    39CE
39CC:  BNZ   39E2
39CE:  MOVLB  2
39D0:  MOVF   x8C,W
39D2:  SUBLW  03
39D4:  BTFSC  FD8.2
39D6:  BRA    39DC
39D8:  MOVLB  0
39DA:  BRA    39E2
....................       { 
....................          tiempo_esterilizacion=1;     
39DC:  MOVLW  01
39DE:  MOVWF  x8B
....................          p=1; 
39E0:  MOVWF  x8C
....................          //Ganancia=Ganancia2; 
....................       }         
....................        
....................       if(EVDesfogue==1 ) 
39E2:  MOVLB  2
39E4:  DECFSZ x60,W
39E6:  BRA    39FC
....................       { 
....................          EV_Desfogue_on; 
39E8:  BSF    F8A.6
39EA:  BCF    F93.6
....................          EV_Agua_off; 
39EC:  BCF    F8A.4
39EE:  BCF    F93.4
....................          EV_Paso_off; 
39F0:  BCF    F8A.5
39F2:  BCF    F93.5
....................          Resistencia_off; 
39F4:  BCF    F8B.0
39F6:  BCF    F94.0
....................          Resistencia2_off; 
39F8:  BCF    F8B.1
39FA:  BCF    F94.1
....................       }  
....................        
....................       if(EVDesfogue==3 && !STOP ) 
39FC:  MOVF   x60,W
39FE:  SUBLW  03
3A00:  BNZ   3A20
3A02:  BSF    F95.5
3A04:  BTFSS  F83.5
3A06:  BRA    3A20
....................       { 
....................          EV_Paso_off; 
3A08:  BCF    F8A.5
3A0A:  BCF    F93.5
....................          EV_Desfogue_on; 
3A0C:  BSF    F8A.6
3A0E:  BCF    F93.6
....................          Resistencia_off; 
3A10:  BCF    F8B.0
3A12:  BCF    F94.0
....................          Resistencia2_off; 
3A14:  BCF    F8B.1
3A16:  BCF    F94.1
....................          if(Control==3) 
3A18:  MOVF   x67,W
3A1A:  SUBLW  03
3A1C:  BNZ   3A20
....................          { 
....................             reset_cpu(); 
3A1E:  RESET
....................          } 
....................       } 
....................    }     
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................   
....................    } 
3A20:  MOVLB  0
3A22:  GOTO   2D96
.................... } 
3A26:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
