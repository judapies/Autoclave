CCS PCH C Compiler, Version 4.104, 5967               25-ago.-17 16:59

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Sin Precamara\2017\Autoclave 62L\Autoclave 62L Labservice #004587645\Firmware V3\Hardware_Controller\Hardware_Controller.lst

               ROM used: 18456 bytes (56%)
                         Largest free fragment is 14312
               RAM used: 1009 (49%) at main() level
                         1092 (53%) worst case
               Stack:    15 worst case (6 in main + 9 for interrupts)

*
0000:  GOTO   34B6
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0E20
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0EAA
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   0D8A
006C:  BTFSS  FA0.5
006E:  GOTO   0078
0072:  BTFSC  FA1.5
0074:  GOTO   0CEA
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
0F90:  MOVLW  03
0F92:  MOVWF  FEA
0F94:  MOVLW  25
0F96:  MOVWF  FE9
0F98:  MOVF   FEF,W
0F9A:  BZ    0FB8
0F9C:  MOVLW  0F
0F9E:  MOVWF  01
0FA0:  CLRF   00
0FA2:  DECFSZ 00,F
0FA4:  BRA    0FA2
0FA6:  DECFSZ 01,F
0FA8:  BRA    0FA0
0FAA:  MOVLW  8F
0FAC:  MOVWF  00
0FAE:  DECFSZ 00,F
0FB0:  BRA    0FAE
0FB2:  NOP   
0FB4:  DECFSZ FEF,F
0FB6:  BRA    0F9C
0FB8:  RETLW  00
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xA0) 
*
0D72:  MOVF   FC9,W
0D74:  MOVFF  366,FC9
0D78:  BSF    FC6.4
0D7A:  BCF    F9E.3
0D7C:  BTFSC  FC7.0
0D7E:  BRA    0D7C
0D80:  CLRF   01
0D82:  BTFSC  FC6.4
0D84:  INCF   01,F
0D86:  GOTO   0DC0 (RETURN)
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
19B0:  MOVLB  3
19B2:  BCF    x4F.0
....................    y = x; 
19B4:  MOVFF  343,348
19B8:  MOVFF  342,347
19BC:  MOVFF  341,346
19C0:  MOVFF  340,345
....................  
....................    if (x < 0) 
19C4:  MOVFF  343,353
19C8:  MOVFF  342,352
19CC:  MOVFF  341,351
19D0:  MOVFF  340,350
19D4:  CLRF   x57
19D6:  CLRF   x56
19D8:  CLRF   x55
19DA:  CLRF   x54
19DC:  MOVLB  0
19DE:  RCALL  18FA
19E0:  BNC   19EC
....................    { 
....................       s = 1; 
19E2:  MOVLB  3
19E4:  BSF    x4F.0
....................       y = -y; 
19E6:  MOVF   x46,W
19E8:  XORLW  80
19EA:  MOVWF  x46
....................    } 
....................  
....................    if (y <= 32768.0) 
19EC:  MOVFF  348,353
19F0:  MOVFF  347,352
19F4:  MOVFF  346,351
19F8:  MOVFF  345,350
19FC:  MOVLB  3
19FE:  CLRF   x57
1A00:  CLRF   x56
1A02:  CLRF   x55
1A04:  MOVLW  8E
1A06:  MOVWF  x54
1A08:  MOVLB  0
1A0A:  RCALL  18FA
1A0C:  BC    1A10
1A0E:  BNZ   1A40
....................   res = (float32)(unsigned int16)y; 
1A10:  MOVFF  348,353
1A14:  MOVFF  347,352
1A18:  MOVFF  346,351
1A1C:  MOVFF  345,350
1A20:  RCALL  1974
1A22:  MOVFF  02,355
1A26:  MOVFF  01,354
1A2A:  CALL   0FBA
1A2E:  MOVFF  03,34C
1A32:  MOVFF  02,34B
1A36:  MOVFF  01,34A
1A3A:  MOVFF  00,349
....................  
....................  else if (y < 10000000.0) 
1A3E:  BRA    1BDC
1A40:  MOVFF  348,353
1A44:  MOVFF  347,352
1A48:  MOVFF  346,351
1A4C:  MOVFF  345,350
1A50:  MOVLW  80
1A52:  MOVLB  3
1A54:  MOVWF  x57
1A56:  MOVLW  96
1A58:  MOVWF  x56
1A5A:  MOVLW  18
1A5C:  MOVWF  x55
1A5E:  MOVLW  96
1A60:  MOVWF  x54
1A62:  MOVLB  0
1A64:  RCALL  18FA
1A66:  BTFSS  FD8.0
1A68:  BRA    1BCC
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1A6A:  MOVFF  348,353
1A6E:  MOVFF  347,352
1A72:  MOVFF  346,351
1A76:  MOVFF  345,350
1A7A:  MOVLB  3
1A7C:  CLRF   x57
1A7E:  CLRF   x56
1A80:  CLRF   x55
1A82:  MOVLW  8E
1A84:  MOVWF  x54
1A86:  MOVLB  0
1A88:  CALL   1044
1A8C:  MOVFF  03,353
1A90:  MOVFF  02,352
1A94:  MOVFF  01,351
1A98:  MOVFF  00,350
1A9C:  RCALL  1974
1A9E:  MOVFF  02,34E
1AA2:  MOVFF  01,34D
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1AA6:  MOVFF  348,353
1AAA:  MOVFF  347,352
1AAE:  MOVFF  346,351
1AB2:  MOVFF  345,350
1AB6:  MOVLB  3
1AB8:  CLRF   x57
1ABA:  CLRF   x56
1ABC:  CLRF   x55
1ABE:  MOVLW  8E
1AC0:  MOVWF  x54
1AC2:  MOVLB  0
1AC4:  CALL   1044
1AC8:  MOVFF  00,350
1ACC:  MOVFF  01,351
1AD0:  MOVFF  02,352
1AD4:  MOVFF  03,353
1AD8:  MOVFF  34E,355
1ADC:  MOVFF  34D,354
1AE0:  CALL   0FBA
1AE4:  BSF    FD8.1
1AE6:  MOVFF  353,357
1AEA:  MOVFF  352,356
1AEE:  MOVFF  351,355
1AF2:  MOVFF  350,354
1AF6:  MOVFF  03,35B
1AFA:  MOVFF  02,35A
1AFE:  MOVFF  01,359
1B02:  MOVFF  00,358
1B06:  CALL   11A2
1B0A:  MOVLB  3
1B0C:  CLRF   x53
1B0E:  CLRF   x52
1B10:  CLRF   x51
1B12:  MOVLW  8E
1B14:  MOVWF  x50
1B16:  MOVFF  03,357
1B1A:  MOVFF  02,356
1B1E:  MOVFF  01,355
1B22:  MOVFF  00,354
1B26:  MOVLB  0
1B28:  RCALL  1804
1B2A:  MOVFF  03,348
1B2E:  MOVFF  02,347
1B32:  MOVFF  01,346
1B36:  MOVFF  00,345
....................   res = 32768.0*(float32)l; 
1B3A:  MOVFF  34E,355
1B3E:  MOVFF  34D,354
1B42:  CALL   0FBA
1B46:  MOVLB  3
1B48:  CLRF   x53
1B4A:  CLRF   x52
1B4C:  CLRF   x51
1B4E:  MOVLW  8E
1B50:  MOVWF  x50
1B52:  MOVFF  03,357
1B56:  MOVFF  02,356
1B5A:  MOVFF  01,355
1B5E:  MOVFF  00,354
1B62:  MOVLB  0
1B64:  RCALL  1804
1B66:  MOVFF  03,34C
1B6A:  MOVFF  02,34B
1B6E:  MOVFF  01,34A
1B72:  MOVFF  00,349
....................   res += (float32)(unsigned int16)y; 
1B76:  MOVFF  348,353
1B7A:  MOVFF  347,352
1B7E:  MOVFF  346,351
1B82:  MOVFF  345,350
1B86:  RCALL  1974
1B88:  MOVFF  02,355
1B8C:  MOVFF  01,354
1B90:  CALL   0FBA
1B94:  BCF    FD8.1
1B96:  MOVFF  34C,357
1B9A:  MOVFF  34B,356
1B9E:  MOVFF  34A,355
1BA2:  MOVFF  349,354
1BA6:  MOVFF  03,35B
1BAA:  MOVFF  02,35A
1BAE:  MOVFF  01,359
1BB2:  MOVFF  00,358
1BB6:  CALL   11A2
1BBA:  MOVFF  03,34C
1BBE:  MOVFF  02,34B
1BC2:  MOVFF  01,34A
1BC6:  MOVFF  00,349
....................  } 
....................  
....................  else 
1BCA:  BRA    1BDC
....................   res = y; 
1BCC:  MOVFF  348,34C
1BD0:  MOVFF  347,34B
1BD4:  MOVFF  346,34A
1BD8:  MOVFF  345,349
....................  
....................  y = y - (float32)(unsigned int16)y; 
1BDC:  MOVFF  348,353
1BE0:  MOVFF  347,352
1BE4:  MOVFF  346,351
1BE8:  MOVFF  345,350
1BEC:  RCALL  1974
1BEE:  MOVFF  02,355
1BF2:  MOVFF  01,354
1BF6:  CALL   0FBA
1BFA:  BSF    FD8.1
1BFC:  MOVFF  348,357
1C00:  MOVFF  347,356
1C04:  MOVFF  346,355
1C08:  MOVFF  345,354
1C0C:  MOVFF  03,35B
1C10:  MOVFF  02,35A
1C14:  MOVFF  01,359
1C18:  MOVFF  00,358
1C1C:  CALL   11A2
1C20:  MOVFF  03,348
1C24:  MOVFF  02,347
1C28:  MOVFF  01,346
1C2C:  MOVFF  00,345
....................  
....................  if (s) 
1C30:  MOVLB  3
1C32:  BTFSS  x4F.0
1C34:  BRA    1C3C
....................   res = -res; 
1C36:  MOVF   x4A,W
1C38:  XORLW  80
1C3A:  MOVWF  x4A
....................  
....................  if (y != 0) 
1C3C:  MOVFF  348,353
1C40:  MOVFF  347,352
1C44:  MOVFF  346,351
1C48:  MOVFF  345,350
1C4C:  CLRF   x57
1C4E:  CLRF   x56
1C50:  CLRF   x55
1C52:  CLRF   x54
1C54:  MOVLB  0
1C56:  RCALL  18FA
1C58:  BZ    1CD2
....................  { 
....................   if (s == 1 && n == 0) 
1C5A:  MOVLB  3
1C5C:  BTFSS  x4F.0
1C5E:  BRA    1C98
1C60:  MOVF   x44,F
1C62:  BNZ   1C98
....................    res -= 1.0; 
1C64:  BSF    FD8.1
1C66:  MOVFF  34C,357
1C6A:  MOVFF  34B,356
1C6E:  MOVFF  34A,355
1C72:  MOVFF  349,354
1C76:  CLRF   x5B
1C78:  CLRF   x5A
1C7A:  CLRF   x59
1C7C:  MOVLW  7F
1C7E:  MOVWF  x58
1C80:  MOVLB  0
1C82:  CALL   11A2
1C86:  MOVFF  03,34C
1C8A:  MOVFF  02,34B
1C8E:  MOVFF  01,34A
1C92:  MOVFF  00,349
1C96:  MOVLB  3
....................  
....................   if (s == 0 && n == 1) 
1C98:  BTFSC  x4F.0
1C9A:  BRA    1CD4
1C9C:  DECFSZ x44,W
1C9E:  BRA    1CD4
....................    res += 1.0; 
1CA0:  BCF    FD8.1
1CA2:  MOVFF  34C,357
1CA6:  MOVFF  34B,356
1CAA:  MOVFF  34A,355
1CAE:  MOVFF  349,354
1CB2:  CLRF   x5B
1CB4:  CLRF   x5A
1CB6:  CLRF   x59
1CB8:  MOVLW  7F
1CBA:  MOVWF  x58
1CBC:  MOVLB  0
1CBE:  CALL   11A2
1CC2:  MOVFF  03,34C
1CC6:  MOVFF  02,34B
1CCA:  MOVFF  01,34A
1CCE:  MOVFF  00,349
1CD2:  MOVLB  3
....................  } 
....................  if (x == 0) 
1CD4:  MOVFF  343,353
1CD8:  MOVFF  342,352
1CDC:  MOVFF  341,351
1CE0:  MOVFF  340,350
1CE4:  CLRF   x57
1CE6:  CLRF   x56
1CE8:  CLRF   x55
1CEA:  CLRF   x54
1CEC:  MOVLB  0
1CEE:  RCALL  18FA
1CF0:  BNZ   1CFE
....................     res = 0; 
1CF2:  MOVLB  3
1CF4:  CLRF   x4C
1CF6:  CLRF   x4B
1CF8:  CLRF   x4A
1CFA:  CLRF   x49
1CFC:  MOVLB  0
....................  
....................  return (res); 
1CFE:  MOVFF  349,00
1D02:  MOVFF  34A,01
1D06:  MOVFF  34B,02
1D0A:  MOVFF  34C,03
.................... } 
1D0E:  RETLW  00
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
*
1D2E:  MOVFF  33F,343
1D32:  MOVFF  33E,342
1D36:  MOVFF  33D,341
1D3A:  MOVFF  33C,340
1D3E:  MOVLB  3
1D40:  CLRF   x44
1D42:  MOVLB  0
1D44:  RCALL  19B0
.................... } 
1D46:  GOTO   1E4E (RETURN)
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
1D10:  MOVFF  33F,343
1D14:  MOVFF  33E,342
1D18:  MOVFF  33D,341
1D1C:  MOVFF  33C,340
1D20:  MOVLW  01
1D22:  MOVLB  3
1D24:  MOVWF  x44
1D26:  MOVLB  0
1D28:  RCALL  19B0
.................... } 
1D2A:  GOTO   1E06 (RETURN)
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
*
1D4A:  MOVFF  333,353
1D4E:  MOVFF  332,352
1D52:  MOVFF  331,351
1D56:  MOVFF  330,350
1D5A:  MOVLB  3
1D5C:  CLRF   x57
1D5E:  CLRF   x56
1D60:  CLRF   x55
1D62:  CLRF   x54
1D64:  MOVLB  0
1D66:  RCALL  18FA
1D68:  BTFSC  FD8.2
1D6A:  BRA    1EAA
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
1D6C:  MOVFF  32F,353
1D70:  MOVFF  32E,352
1D74:  MOVFF  32D,351
1D78:  MOVFF  32C,350
1D7C:  MOVFF  333,357
1D80:  MOVFF  332,356
1D84:  MOVFF  331,355
1D88:  MOVFF  330,354
1D8C:  CALL   1044
1D90:  MOVFF  00,338
1D94:  MOVFF  01,339
1D98:  MOVFF  02,33A
1D9C:  MOVFF  03,33B
1DA0:  MOVFF  03,353
1DA4:  MOVFF  02,352
1DA8:  MOVFF  01,351
1DAC:  MOVFF  00,350
1DB0:  MOVLB  3
1DB2:  CLRF   x57
1DB4:  CLRF   x56
1DB6:  CLRF   x55
1DB8:  CLRF   x54
1DBA:  MOVLB  0
1DBC:  RCALL  18FA
1DBE:  BNC   1E08
1DC0:  MOVFF  32F,353
1DC4:  MOVFF  32E,352
1DC8:  MOVFF  32D,351
1DCC:  MOVFF  32C,350
1DD0:  MOVFF  333,357
1DD4:  MOVFF  332,356
1DD8:  MOVFF  331,355
1DDC:  MOVFF  330,354
1DE0:  CALL   1044
1DE4:  MOVFF  00,338
1DE8:  MOVFF  01,339
1DEC:  MOVFF  02,33A
1DF0:  MOVFF  03,33B
1DF4:  MOVFF  03,33F
1DF8:  MOVFF  02,33E
1DFC:  MOVFF  01,33D
1E00:  MOVFF  00,33C
1E04:  BRA    1D10
1E06:  BRA    1E4E
1E08:  MOVFF  32F,353
1E0C:  MOVFF  32E,352
1E10:  MOVFF  32D,351
1E14:  MOVFF  32C,350
1E18:  MOVFF  333,357
1E1C:  MOVFF  332,356
1E20:  MOVFF  331,355
1E24:  MOVFF  330,354
1E28:  CALL   1044
1E2C:  MOVFF  00,338
1E30:  MOVFF  01,339
1E34:  MOVFF  02,33A
1E38:  MOVFF  03,33B
1E3C:  MOVFF  03,33F
1E40:  MOVFF  02,33E
1E44:  MOVFF  01,33D
1E48:  MOVFF  00,33C
1E4C:  BRA    1D2E
1E4E:  MOVFF  03,337
1E52:  MOVFF  02,336
1E56:  MOVFF  01,335
1E5A:  MOVFF  00,334
....................       return(x-(i*y)); 
1E5E:  MOVFF  337,353
1E62:  MOVFF  336,352
1E66:  MOVFF  335,351
1E6A:  MOVFF  334,350
1E6E:  MOVFF  333,357
1E72:  MOVFF  332,356
1E76:  MOVFF  331,355
1E7A:  MOVFF  330,354
1E7E:  RCALL  1804
1E80:  BSF    FD8.1
1E82:  MOVFF  32F,357
1E86:  MOVFF  32E,356
1E8A:  MOVFF  32D,355
1E8E:  MOVFF  32C,354
1E92:  MOVFF  03,35B
1E96:  MOVFF  02,35A
1E9A:  MOVFF  01,359
1E9E:  MOVFF  00,358
1EA2:  CALL   11A2
1EA6:  BRA    1EAA
....................    } 
....................    else 
1EA8:  BRA    1EAA
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
1EAA:  RETLW  00
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
*
23D8:  MOVFF  333,353
23DC:  MOVFF  332,352
23E0:  MOVFF  331,351
23E4:  MOVFF  330,350
23E8:  MOVLW  18
23EA:  MOVLB  3
23EC:  MOVWF  x57
23EE:  MOVLW  72
23F0:  MOVWF  x56
23F2:  MOVLW  31
23F4:  MOVWF  x55
23F6:  MOVLW  7E
23F8:  MOVWF  x54
23FA:  MOVLB  0
23FC:  CALL   1044
2400:  MOVFF  03,353
2404:  MOVFF  02,352
2408:  MOVFF  01,351
240C:  MOVFF  00,350
2410:  CALL   1974
2414:  MOVFF  01,340
....................    s = 0; 
2418:  MOVLB  3
241A:  BCF    x41.0
....................    y = x; 
241C:  MOVFF  333,337
2420:  MOVFF  332,336
2424:  MOVFF  331,335
2428:  MOVFF  330,334
....................  
....................    if (x < 0) 
242C:  MOVFF  333,353
2430:  MOVFF  332,352
2434:  MOVFF  331,351
2438:  MOVFF  330,350
243C:  CLRF   x57
243E:  CLRF   x56
2440:  CLRF   x55
2442:  CLRF   x54
2444:  MOVLB  0
2446:  CALL   18FA
244A:  BNC   2458
....................    { 
....................       s = 1; 
244C:  MOVLB  3
244E:  BSF    x41.0
....................       n = -n; 
2450:  NEGF   x40
....................       y = -y; 
2452:  MOVF   x35,W
2454:  XORLW  80
2456:  MOVWF  x35
....................    } 
....................  
....................    res = 0.0; 
2458:  MOVLB  3
245A:  CLRF   x3B
245C:  CLRF   x3A
245E:  CLRF   x39
2460:  CLRF   x38
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
2462:  MOVLW  03
2464:  MOVWF  x43
2466:  MOVLW  38
2468:  MOVWF  FE9
246A:  MOVFF  343,FEA
246E:  MOVLW  7F
2470:  ADDWF  x40,W
2472:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
2474:  MOVFF  337,353
2478:  MOVFF  336,352
247C:  MOVFF  335,351
2480:  MOVFF  334,350
2484:  MOVLW  18
2486:  MOVWF  x57
2488:  MOVLW  72
248A:  MOVWF  x56
248C:  MOVLW  31
248E:  MOVWF  x55
2490:  MOVLW  7E
2492:  MOVWF  x54
2494:  MOVLB  0
2496:  CALL   1044
249A:  MOVFF  00,342
249E:  MOVFF  01,343
24A2:  MOVFF  02,344
24A6:  MOVFF  03,345
24AA:  MOVLB  3
24AC:  CLRF   x47
24AE:  MOVFF  340,346
24B2:  BTFSC  x46.7
24B4:  DECF   x47,F
24B6:  MOVLB  0
24B8:  RCALL  1EAC
24BA:  BSF    FD8.1
24BC:  MOVFF  345,357
24C0:  MOVFF  344,356
24C4:  MOVFF  343,355
24C8:  MOVFF  342,354
24CC:  MOVFF  03,35B
24D0:  MOVFF  02,35A
24D4:  MOVFF  01,359
24D8:  MOVFF  00,358
24DC:  CALL   11A2
24E0:  MOVFF  03,337
24E4:  MOVFF  02,336
24E8:  MOVFF  01,335
24EC:  MOVFF  00,334
....................  
....................    r = pe[0]*y + pe[1]; 
24F0:  MOVLW  7C
24F2:  MOVLB  3
24F4:  MOVWF  x53
24F6:  MOVLW  88
24F8:  MOVWF  x52
24FA:  MOVLW  59
24FC:  MOVWF  x51
24FE:  MOVLW  72
2500:  MOVWF  x50
2502:  MOVFF  337,357
2506:  MOVFF  336,356
250A:  MOVFF  335,355
250E:  MOVFF  334,354
2512:  MOVLB  0
2514:  CALL   1804
2518:  MOVFF  00,342
251C:  MOVFF  01,343
2520:  MOVFF  02,344
2524:  MOVFF  03,345
2528:  BCF    FD8.1
252A:  MOVFF  03,357
252E:  MOVFF  02,356
2532:  MOVFF  01,355
2536:  MOVFF  00,354
253A:  MOVLW  E0
253C:  MOVLB  3
253E:  MOVWF  x5B
2540:  MOVLW  97
2542:  MOVWF  x5A
2544:  MOVLW  26
2546:  MOVWF  x59
2548:  MOVLW  75
254A:  MOVWF  x58
254C:  MOVLB  0
254E:  CALL   11A2
2552:  MOVFF  03,33F
2556:  MOVFF  02,33E
255A:  MOVFF  01,33D
255E:  MOVFF  00,33C
....................    r = r*y + pe[2]; 
2562:  MOVFF  33F,353
2566:  MOVFF  33E,352
256A:  MOVFF  33D,351
256E:  MOVFF  33C,350
2572:  MOVFF  337,357
2576:  MOVFF  336,356
257A:  MOVFF  335,355
257E:  MOVFF  334,354
2582:  CALL   1804
2586:  MOVFF  00,342
258A:  MOVFF  01,343
258E:  MOVFF  02,344
2592:  MOVFF  03,345
2596:  BCF    FD8.1
2598:  MOVFF  03,357
259C:  MOVFF  02,356
25A0:  MOVFF  01,355
25A4:  MOVFF  00,354
25A8:  MOVLW  C4
25AA:  MOVLB  3
25AC:  MOVWF  x5B
25AE:  MOVLW  1D
25B0:  MOVWF  x5A
25B2:  MOVLW  1E
25B4:  MOVWF  x59
25B6:  MOVLW  78
25B8:  MOVWF  x58
25BA:  MOVLB  0
25BC:  CALL   11A2
25C0:  MOVFF  03,33F
25C4:  MOVFF  02,33E
25C8:  MOVFF  01,33D
25CC:  MOVFF  00,33C
....................    r = r*y + pe[3]; 
25D0:  MOVFF  33F,353
25D4:  MOVFF  33E,352
25D8:  MOVFF  33D,351
25DC:  MOVFF  33C,350
25E0:  MOVFF  337,357
25E4:  MOVFF  336,356
25E8:  MOVFF  335,355
25EC:  MOVFF  334,354
25F0:  CALL   1804
25F4:  MOVFF  00,342
25F8:  MOVFF  01,343
25FC:  MOVFF  02,344
2600:  MOVFF  03,345
2604:  BCF    FD8.1
2606:  MOVFF  03,357
260A:  MOVFF  02,356
260E:  MOVFF  01,355
2612:  MOVFF  00,354
2616:  MOVLW  5E
2618:  MOVLB  3
261A:  MOVWF  x5B
261C:  MOVLW  50
261E:  MOVWF  x5A
2620:  MOVLW  63
2622:  MOVWF  x59
2624:  MOVLW  7A
2626:  MOVWF  x58
2628:  MOVLB  0
262A:  CALL   11A2
262E:  MOVFF  03,33F
2632:  MOVFF  02,33E
2636:  MOVFF  01,33D
263A:  MOVFF  00,33C
....................    r = r*y + pe[4]; 
263E:  MOVFF  33F,353
2642:  MOVFF  33E,352
2646:  MOVFF  33D,351
264A:  MOVFF  33C,350
264E:  MOVFF  337,357
2652:  MOVFF  336,356
2656:  MOVFF  335,355
265A:  MOVFF  334,354
265E:  CALL   1804
2662:  MOVFF  00,342
2666:  MOVFF  01,343
266A:  MOVFF  02,344
266E:  MOVFF  03,345
2672:  BCF    FD8.1
2674:  MOVFF  03,357
2678:  MOVFF  02,356
267C:  MOVFF  01,355
2680:  MOVFF  00,354
2684:  MOVLW  1A
2686:  MOVLB  3
2688:  MOVWF  x5B
268A:  MOVLW  FE
268C:  MOVWF  x5A
268E:  MOVLW  75
2690:  MOVWF  x59
2692:  MOVLW  7C
2694:  MOVWF  x58
2696:  MOVLB  0
2698:  CALL   11A2
269C:  MOVFF  03,33F
26A0:  MOVFF  02,33E
26A4:  MOVFF  01,33D
26A8:  MOVFF  00,33C
....................    r = r*y + pe[5]; 
26AC:  MOVFF  33F,353
26B0:  MOVFF  33E,352
26B4:  MOVFF  33D,351
26B8:  MOVFF  33C,350
26BC:  MOVFF  337,357
26C0:  MOVFF  336,356
26C4:  MOVFF  335,355
26C8:  MOVFF  334,354
26CC:  CALL   1804
26D0:  MOVFF  00,342
26D4:  MOVFF  01,343
26D8:  MOVFF  02,344
26DC:  MOVFF  03,345
26E0:  BCF    FD8.1
26E2:  MOVFF  03,357
26E6:  MOVFF  02,356
26EA:  MOVFF  01,355
26EE:  MOVFF  00,354
26F2:  MOVLW  18
26F4:  MOVLB  3
26F6:  MOVWF  x5B
26F8:  MOVLW  72
26FA:  MOVWF  x5A
26FC:  MOVLW  31
26FE:  MOVWF  x59
2700:  MOVLW  7E
2702:  MOVWF  x58
2704:  MOVLB  0
2706:  CALL   11A2
270A:  MOVFF  03,33F
270E:  MOVFF  02,33E
2712:  MOVFF  01,33D
2716:  MOVFF  00,33C
....................  
....................    res = res*(1.0 + y*r); 
271A:  MOVFF  337,353
271E:  MOVFF  336,352
2722:  MOVFF  335,351
2726:  MOVFF  334,350
272A:  MOVFF  33F,357
272E:  MOVFF  33E,356
2732:  MOVFF  33D,355
2736:  MOVFF  33C,354
273A:  CALL   1804
273E:  BCF    FD8.1
2740:  MOVLB  3
2742:  CLRF   x57
2744:  CLRF   x56
2746:  CLRF   x55
2748:  MOVLW  7F
274A:  MOVWF  x54
274C:  MOVFF  03,35B
2750:  MOVFF  02,35A
2754:  MOVFF  01,359
2758:  MOVFF  00,358
275C:  MOVLB  0
275E:  CALL   11A2
2762:  MOVFF  33B,353
2766:  MOVFF  33A,352
276A:  MOVFF  339,351
276E:  MOVFF  338,350
2772:  MOVFF  03,357
2776:  MOVFF  02,356
277A:  MOVFF  01,355
277E:  MOVFF  00,354
2782:  CALL   1804
2786:  MOVFF  03,33B
278A:  MOVFF  02,33A
278E:  MOVFF  01,339
2792:  MOVFF  00,338
....................  
....................    if (s) 
2796:  MOVLB  3
2798:  BTFSS  x41.0
279A:  BRA    27CE
....................       res = 1.0/res; 
279C:  CLRF   x53
279E:  CLRF   x52
27A0:  CLRF   x51
27A2:  MOVLW  7F
27A4:  MOVWF  x50
27A6:  MOVFF  33B,357
27AA:  MOVFF  33A,356
27AE:  MOVFF  339,355
27B2:  MOVFF  338,354
27B6:  MOVLB  0
27B8:  CALL   1044
27BC:  MOVFF  03,33B
27C0:  MOVFF  02,33A
27C4:  MOVFF  01,339
27C8:  MOVFF  00,338
27CC:  MOVLB  3
....................    return(res); 
27CE:  MOVFF  338,00
27D2:  MOVFF  339,01
27D6:  MOVFF  33A,02
27DA:  MOVFF  33B,03
.................... } 
27DE:  MOVLB  0
27E0:  RETLW  00
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
1EFC:  MOVFF  333,337
1F00:  MOVFF  332,336
1F04:  MOVFF  331,335
1F08:  MOVFF  330,334
....................  
....................    if (y != 1.0) 
1F0C:  MOVFF  337,353
1F10:  MOVFF  336,352
1F14:  MOVFF  335,351
1F18:  MOVFF  334,350
1F1C:  MOVLB  3
1F1E:  CLRF   x57
1F20:  CLRF   x56
1F22:  CLRF   x55
1F24:  MOVLW  7F
1F26:  MOVWF  x54
1F28:  MOVLB  0
1F2A:  RCALL  18FA
1F2C:  BTFSC  FD8.2
1F2E:  BRA    23BA
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
1F30:  MOVLW  03
1F32:  MOVLB  3
1F34:  MOVWF  x46
1F36:  MOVLW  34
1F38:  MOVWF  FE9
1F3A:  MOVFF  346,FEA
1F3E:  MOVLW  7E
1F40:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
1F42:  BSF    FD8.1
1F44:  MOVFF  337,357
1F48:  MOVFF  336,356
1F4C:  MOVFF  335,355
1F50:  MOVFF  334,354
1F54:  CLRF   x5B
1F56:  CLRF   x5A
1F58:  CLRF   x59
1F5A:  MOVLW  7F
1F5C:  MOVWF  x58
1F5E:  MOVLB  0
1F60:  CALL   11A2
1F64:  MOVFF  00,345
1F68:  MOVFF  01,346
1F6C:  MOVFF  02,347
1F70:  MOVFF  03,348
1F74:  BCF    FD8.1
1F76:  MOVFF  337,357
1F7A:  MOVFF  336,356
1F7E:  MOVFF  335,355
1F82:  MOVFF  334,354
1F86:  MOVLB  3
1F88:  CLRF   x5B
1F8A:  CLRF   x5A
1F8C:  CLRF   x59
1F8E:  MOVLW  7F
1F90:  MOVWF  x58
1F92:  MOVLB  0
1F94:  CALL   11A2
1F98:  MOVFF  348,353
1F9C:  MOVFF  347,352
1FA0:  MOVFF  346,351
1FA4:  MOVFF  345,350
1FA8:  MOVFF  03,357
1FAC:  MOVFF  02,356
1FB0:  MOVFF  01,355
1FB4:  MOVFF  00,354
1FB8:  CALL   1044
1FBC:  MOVFF  03,337
1FC0:  MOVFF  02,336
1FC4:  MOVFF  01,335
1FC8:  MOVFF  00,334
....................  
....................       y2=y*y; 
1FCC:  MOVFF  337,353
1FD0:  MOVFF  336,352
1FD4:  MOVFF  335,351
1FD8:  MOVFF  334,350
1FDC:  MOVFF  337,357
1FE0:  MOVFF  336,356
1FE4:  MOVFF  335,355
1FE8:  MOVFF  334,354
1FEC:  RCALL  1804
1FEE:  MOVFF  03,343
1FF2:  MOVFF  02,342
1FF6:  MOVFF  01,341
1FFA:  MOVFF  00,340
....................  
....................       res = pl[0]*y2 + pl[1]; 
1FFE:  MOVLW  BC
2000:  MOVLB  3
2002:  MOVWF  x53
2004:  MOVLW  24
2006:  MOVWF  x52
2008:  MOVLW  67
200A:  MOVWF  x51
200C:  MOVLW  7D
200E:  MOVWF  x50
2010:  MOVFF  343,357
2014:  MOVFF  342,356
2018:  MOVFF  341,355
201C:  MOVFF  340,354
2020:  MOVLB  0
2022:  CALL   1804
2026:  MOVFF  00,345
202A:  MOVFF  01,346
202E:  MOVFF  02,347
2032:  MOVFF  03,348
2036:  BCF    FD8.1
2038:  MOVFF  03,357
203C:  MOVFF  02,356
2040:  MOVFF  01,355
2044:  MOVFF  00,354
2048:  MOVLW  E3
204A:  MOVLB  3
204C:  MOVWF  x5B
204E:  MOVLW  E4
2050:  MOVWF  x5A
2052:  MOVLW  90
2054:  MOVWF  x59
2056:  MOVLW  82
2058:  MOVWF  x58
205A:  MOVLB  0
205C:  CALL   11A2
2060:  MOVFF  03,33B
2064:  MOVFF  02,33A
2068:  MOVFF  01,339
206C:  MOVFF  00,338
....................       res = res*y2 + pl[2]; 
2070:  MOVFF  33B,353
2074:  MOVFF  33A,352
2078:  MOVFF  339,351
207C:  MOVFF  338,350
2080:  MOVFF  343,357
2084:  MOVFF  342,356
2088:  MOVFF  341,355
208C:  MOVFF  340,354
2090:  CALL   1804
2094:  MOVFF  00,345
2098:  MOVFF  01,346
209C:  MOVFF  02,347
20A0:  MOVFF  03,348
20A4:  BCF    FD8.1
20A6:  MOVFF  03,357
20AA:  MOVFF  02,356
20AE:  MOVFF  01,355
20B2:  MOVFF  00,354
20B6:  MOVLW  1C
20B8:  MOVLB  3
20BA:  MOVWF  x5B
20BC:  MOVLW  87
20BE:  MOVWF  x5A
20C0:  MOVLW  57
20C2:  MOVWF  x59
20C4:  MOVLW  83
20C6:  MOVWF  x58
20C8:  MOVLB  0
20CA:  CALL   11A2
20CE:  MOVFF  03,33B
20D2:  MOVFF  02,33A
20D6:  MOVFF  01,339
20DA:  MOVFF  00,338
....................       res = res*y2 + pl[3]; 
20DE:  MOVFF  33B,353
20E2:  MOVFF  33A,352
20E6:  MOVFF  339,351
20EA:  MOVFF  338,350
20EE:  MOVFF  343,357
20F2:  MOVFF  342,356
20F6:  MOVFF  341,355
20FA:  MOVFF  340,354
20FE:  CALL   1804
2102:  MOVFF  00,345
2106:  MOVFF  01,346
210A:  MOVFF  02,347
210E:  MOVFF  03,348
2112:  BCF    FD8.1
2114:  MOVFF  03,357
2118:  MOVFF  02,356
211C:  MOVFF  01,355
2120:  MOVFF  00,354
2124:  MOVLW  AB
2126:  MOVLB  3
2128:  MOVWF  x5B
212A:  MOVLW  E1
212C:  MOVWF  x5A
212E:  MOVLW  9E
2130:  MOVWF  x59
2132:  MOVLW  83
2134:  MOVWF  x58
2136:  MOVLB  0
2138:  CALL   11A2
213C:  MOVFF  03,33B
2140:  MOVFF  02,33A
2144:  MOVFF  01,339
2148:  MOVFF  00,338
....................  
....................       r = ql[0]*y2 + ql[1]; 
214C:  MOVLB  3
214E:  CLRF   x53
2150:  CLRF   x52
2152:  CLRF   x51
2154:  MOVLW  7F
2156:  MOVWF  x50
2158:  MOVFF  343,357
215C:  MOVFF  342,356
2160:  MOVFF  341,355
2164:  MOVFF  340,354
2168:  MOVLB  0
216A:  CALL   1804
216E:  MOVFF  00,345
2172:  MOVFF  01,346
2176:  MOVFF  02,347
217A:  MOVFF  03,348
217E:  BCF    FD8.1
2180:  MOVFF  03,357
2184:  MOVFF  02,356
2188:  MOVFF  01,355
218C:  MOVFF  00,354
2190:  MOVLW  B4
2192:  MOVLB  3
2194:  MOVWF  x5B
2196:  MOVLW  2A
2198:  MOVWF  x5A
219A:  MOVLW  82
219C:  MOVWF  x59
219E:  MOVWF  x58
21A0:  MOVLB  0
21A2:  CALL   11A2
21A6:  MOVFF  03,33F
21AA:  MOVFF  02,33E
21AE:  MOVFF  01,33D
21B2:  MOVFF  00,33C
....................       r = r*y2 + ql[2]; 
21B6:  MOVFF  33F,353
21BA:  MOVFF  33E,352
21BE:  MOVFF  33D,351
21C2:  MOVFF  33C,350
21C6:  MOVFF  343,357
21CA:  MOVFF  342,356
21CE:  MOVFF  341,355
21D2:  MOVFF  340,354
21D6:  CALL   1804
21DA:  MOVFF  00,345
21DE:  MOVFF  01,346
21E2:  MOVFF  02,347
21E6:  MOVFF  03,348
21EA:  BCF    FD8.1
21EC:  MOVFF  03,357
21F0:  MOVFF  02,356
21F4:  MOVFF  01,355
21F8:  MOVFF  00,354
21FC:  MOVLW  80
21FE:  MOVLB  3
2200:  MOVWF  x5B
2202:  MOVLW  3E
2204:  MOVWF  x5A
2206:  MOVLW  06
2208:  MOVWF  x59
220A:  MOVLW  83
220C:  MOVWF  x58
220E:  MOVLB  0
2210:  CALL   11A2
2214:  MOVFF  03,33F
2218:  MOVFF  02,33E
221C:  MOVFF  01,33D
2220:  MOVFF  00,33C
....................       r = r*y2 + ql[3]; 
2224:  MOVFF  33F,353
2228:  MOVFF  33E,352
222C:  MOVFF  33D,351
2230:  MOVFF  33C,350
2234:  MOVFF  343,357
2238:  MOVFF  342,356
223C:  MOVFF  341,355
2240:  MOVFF  340,354
2244:  CALL   1804
2248:  MOVFF  00,345
224C:  MOVFF  01,346
2250:  MOVFF  02,347
2254:  MOVFF  03,348
2258:  BCF    FD8.1
225A:  MOVFF  03,357
225E:  MOVFF  02,356
2262:  MOVFF  01,355
2266:  MOVFF  00,354
226A:  MOVLW  AB
226C:  MOVLB  3
226E:  MOVWF  x5B
2270:  MOVLW  E1
2272:  MOVWF  x5A
2274:  MOVLW  9E
2276:  MOVWF  x59
2278:  MOVLW  82
227A:  MOVWF  x58
227C:  MOVLB  0
227E:  CALL   11A2
2282:  MOVFF  03,33F
2286:  MOVFF  02,33E
228A:  MOVFF  01,33D
228E:  MOVFF  00,33C
....................  
....................       res = y*res/r; 
2292:  MOVFF  337,353
2296:  MOVFF  336,352
229A:  MOVFF  335,351
229E:  MOVFF  334,350
22A2:  MOVFF  33B,357
22A6:  MOVFF  33A,356
22AA:  MOVFF  339,355
22AE:  MOVFF  338,354
22B2:  CALL   1804
22B6:  MOVFF  00,345
22BA:  MOVFF  01,346
22BE:  MOVFF  02,347
22C2:  MOVFF  03,348
22C6:  MOVFF  03,353
22CA:  MOVFF  02,352
22CE:  MOVFF  01,351
22D2:  MOVFF  00,350
22D6:  MOVFF  33F,357
22DA:  MOVFF  33E,356
22DE:  MOVFF  33D,355
22E2:  MOVFF  33C,354
22E6:  CALL   1044
22EA:  MOVFF  03,33B
22EE:  MOVFF  02,33A
22F2:  MOVFF  01,339
22F6:  MOVFF  00,338
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
22FA:  MOVLW  03
22FC:  MOVLB  3
22FE:  MOVWF  x46
2300:  MOVLW  30
2302:  MOVWF  FE9
2304:  MOVFF  346,FEA
2308:  MOVLW  7E
230A:  SUBWF  FEF,W
230C:  MOVWF  x44
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
230E:  BTFSC  x44.7
2310:  BRA    2314
2312:  BRA    233C
....................          r = -(float32)-n; 
2314:  MOVLW  00
2316:  BSF    FD8.0
2318:  SUBFWB x44,W
231A:  CLRF   x47
231C:  MOVWF  x46
231E:  BTFSC  x46.7
2320:  DECF   x47,F
2322:  MOVLB  0
2324:  RCALL  1EAC
2326:  MOVFF  00,33C
232A:  MOVF   01,W
232C:  XORLW  80
232E:  MOVLB  3
2330:  MOVWF  x3D
2332:  MOVFF  02,33E
2336:  MOVFF  03,33F
....................       else 
233A:  BRA    235C
....................          r = (float32)n; 
233C:  CLRF   x47
233E:  MOVFF  344,346
2342:  BTFSC  x46.7
2344:  DECF   x47,F
2346:  MOVLB  0
2348:  RCALL  1EAC
234A:  MOVFF  03,33F
234E:  MOVFF  02,33E
2352:  MOVFF  01,33D
2356:  MOVFF  00,33C
235A:  MOVLB  3
....................  
....................       res += r*LN2; 
235C:  MOVFF  33F,353
2360:  MOVFF  33E,352
2364:  MOVFF  33D,351
2368:  MOVFF  33C,350
236C:  MOVLW  18
236E:  MOVWF  x57
2370:  MOVLW  72
2372:  MOVWF  x56
2374:  MOVLW  31
2376:  MOVWF  x55
2378:  MOVLW  7E
237A:  MOVWF  x54
237C:  MOVLB  0
237E:  CALL   1804
2382:  BCF    FD8.1
2384:  MOVFF  33B,357
2388:  MOVFF  33A,356
238C:  MOVFF  339,355
2390:  MOVFF  338,354
2394:  MOVFF  03,35B
2398:  MOVFF  02,35A
239C:  MOVFF  01,359
23A0:  MOVFF  00,358
23A4:  CALL   11A2
23A8:  MOVFF  03,33B
23AC:  MOVFF  02,33A
23B0:  MOVFF  01,339
23B4:  MOVFF  00,338
....................    } 
....................  
....................    else 
23B8:  BRA    23C6
....................       res = 0.0; 
23BA:  MOVLB  3
23BC:  CLRF   x3B
23BE:  CLRF   x3A
23C0:  CLRF   x39
23C2:  CLRF   x38
23C4:  MOVLB  0
....................  
....................    return(res); 
23C6:  MOVFF  338,00
23CA:  MOVFF  339,01
23CE:  MOVFF  33A,02
23D2:  MOVFF  33B,03
.................... } 
23D6:  RETLW  00
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
*
27E2:  MOVFF  327,353
27E6:  MOVFF  326,352
27EA:  MOVFF  325,351
27EE:  MOVFF  324,350
27F2:  MOVLB  3
27F4:  CLRF   x57
27F6:  CLRF   x56
27F8:  CLRF   x55
27FA:  CLRF   x54
27FC:  MOVLB  0
27FE:  CALL   18FA
2802:  BTFSS  FD8.0
2804:  BRA    29B8
2806:  MOVFF  32B,32F
280A:  MOVFF  32A,32E
280E:  MOVFF  329,32D
2812:  MOVFF  328,32C
2816:  MOVLB  3
2818:  CLRF   x33
281A:  CLRF   x32
281C:  CLRF   x31
281E:  MOVLW  7F
2820:  MOVWF  x30
2822:  MOVLB  0
2824:  CALL   1D4A
2828:  MOVFF  00,32C
282C:  MOVFF  01,32D
2830:  MOVFF  02,32E
2834:  MOVFF  03,32F
2838:  MOVFF  03,353
283C:  MOVFF  02,352
2840:  MOVFF  01,351
2844:  MOVFF  00,350
2848:  MOVLB  3
284A:  CLRF   x57
284C:  CLRF   x56
284E:  CLRF   x55
2850:  CLRF   x54
2852:  MOVLB  0
2854:  CALL   18FA
2858:  BTFSS  FD8.2
285A:  BRA    29B8
....................       if(fmod(y, 2) == 0) { 
285C:  MOVFF  32B,32F
2860:  MOVFF  32A,32E
2864:  MOVFF  329,32D
2868:  MOVFF  328,32C
286C:  MOVLB  3
286E:  CLRF   x33
2870:  CLRF   x32
2872:  CLRF   x31
2874:  MOVLW  80
2876:  MOVWF  x30
2878:  MOVLB  0
287A:  CALL   1D4A
287E:  MOVFF  00,32C
2882:  MOVFF  01,32D
2886:  MOVFF  02,32E
288A:  MOVFF  03,32F
288E:  MOVFF  03,353
2892:  MOVFF  02,352
2896:  MOVFF  01,351
289A:  MOVFF  00,350
289E:  MOVLB  3
28A0:  CLRF   x57
28A2:  CLRF   x56
28A4:  CLRF   x55
28A6:  CLRF   x54
28A8:  MOVLB  0
28AA:  CALL   18FA
28AE:  BNZ   2932
....................          return (exp(log(-x) * y)); 
28B0:  MOVFF  324,32C
28B4:  MOVLB  3
28B6:  MOVF   x25,W
28B8:  XORLW  80
28BA:  MOVWF  x2D
28BC:  MOVFF  326,32E
28C0:  MOVFF  327,32F
28C4:  MOVFF  327,333
28C8:  MOVFF  326,332
28CC:  MOVWF  x31
28CE:  MOVFF  324,330
28D2:  MOVLB  0
28D4:  CALL   1EFC
28D8:  MOVFF  00,32C
28DC:  MOVFF  01,32D
28E0:  MOVFF  02,32E
28E4:  MOVFF  03,32F
28E8:  MOVFF  03,353
28EC:  MOVFF  02,352
28F0:  MOVFF  01,351
28F4:  MOVFF  00,350
28F8:  MOVFF  32B,357
28FC:  MOVFF  32A,356
2900:  MOVFF  329,355
2904:  MOVFF  328,354
2908:  CALL   1804
290C:  MOVFF  00,32C
2910:  MOVFF  01,32D
2914:  MOVFF  02,32E
2918:  MOVFF  03,32F
291C:  MOVFF  03,333
2920:  MOVFF  02,332
2924:  MOVFF  01,331
2928:  MOVFF  00,330
292C:  RCALL  23D8
292E:  BRA    2AEC
....................       } else { 
2930:  BRA    29B6
....................          return (-exp(log(-x) * y)); 
2932:  MOVFF  324,32C
2936:  MOVLB  3
2938:  MOVF   x25,W
293A:  XORLW  80
293C:  MOVWF  x2D
293E:  MOVFF  326,32E
2942:  MOVFF  327,32F
2946:  MOVFF  327,333
294A:  MOVFF  326,332
294E:  MOVWF  x31
2950:  MOVFF  324,330
2954:  MOVLB  0
2956:  CALL   1EFC
295A:  MOVFF  00,32C
295E:  MOVFF  01,32D
2962:  MOVFF  02,32E
2966:  MOVFF  03,32F
296A:  MOVFF  03,353
296E:  MOVFF  02,352
2972:  MOVFF  01,351
2976:  MOVFF  00,350
297A:  MOVFF  32B,357
297E:  MOVFF  32A,356
2982:  MOVFF  329,355
2986:  MOVFF  328,354
298A:  CALL   1804
298E:  MOVFF  00,32C
2992:  MOVFF  01,32D
2996:  MOVFF  02,32E
299A:  MOVFF  03,32F
299E:  MOVFF  03,333
29A2:  MOVFF  02,332
29A6:  MOVFF  01,331
29AA:  MOVFF  00,330
29AE:  RCALL  23D8
29B0:  MOVLW  80
29B2:  XORWF  01,F
29B4:  BRA    2AEC
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
29B6:  BRA    2AEC
29B8:  MOVFF  327,353
29BC:  MOVFF  326,352
29C0:  MOVFF  325,351
29C4:  MOVFF  324,350
29C8:  MOVLB  3
29CA:  CLRF   x57
29CC:  CLRF   x56
29CE:  CLRF   x55
29D0:  CLRF   x54
29D2:  MOVLB  0
29D4:  CALL   18FA
29D8:  BNC   2A3A
29DA:  MOVFF  32B,32F
29DE:  MOVFF  32A,32E
29E2:  MOVFF  329,32D
29E6:  MOVFF  328,32C
29EA:  MOVLB  3
29EC:  CLRF   x33
29EE:  CLRF   x32
29F0:  CLRF   x31
29F2:  MOVLW  7F
29F4:  MOVWF  x30
29F6:  MOVLB  0
29F8:  CALL   1D4A
29FC:  MOVFF  00,32C
2A00:  MOVFF  01,32D
2A04:  MOVFF  02,32E
2A08:  MOVFF  03,32F
2A0C:  MOVFF  03,353
2A10:  MOVFF  02,352
2A14:  MOVFF  01,351
2A18:  MOVFF  00,350
2A1C:  MOVLB  3
2A1E:  CLRF   x57
2A20:  CLRF   x56
2A22:  CLRF   x55
2A24:  CLRF   x54
2A26:  MOVLB  0
2A28:  CALL   18FA
2A2C:  BZ    2A3A
....................       return 0; 
2A2E:  CLRF   00
2A30:  CLRF   01
2A32:  CLRF   02
2A34:  CLRF   03
2A36:  BRA    2AEC
....................    } else { 
2A38:  BRA    2AEC
....................       if(x != 0 || 0 >= y) { 
2A3A:  MOVFF  327,353
2A3E:  MOVFF  326,352
2A42:  MOVFF  325,351
2A46:  MOVFF  324,350
2A4A:  MOVLB  3
2A4C:  CLRF   x57
2A4E:  CLRF   x56
2A50:  CLRF   x55
2A52:  CLRF   x54
2A54:  MOVLB  0
2A56:  CALL   18FA
2A5A:  BNZ   2A80
2A5C:  MOVFF  32B,353
2A60:  MOVFF  32A,352
2A64:  MOVFF  329,351
2A68:  MOVFF  328,350
2A6C:  MOVLB  3
2A6E:  CLRF   x57
2A70:  CLRF   x56
2A72:  CLRF   x55
2A74:  CLRF   x54
2A76:  MOVLB  0
2A78:  CALL   18FA
2A7C:  BC    2A80
2A7E:  BNZ   2AEC
....................          return (exp(log(x) * y)); 
2A80:  MOVFF  327,333
2A84:  MOVFF  326,332
2A88:  MOVFF  325,331
2A8C:  MOVFF  324,330
2A90:  CALL   1EFC
2A94:  MOVFF  00,32C
2A98:  MOVFF  01,32D
2A9C:  MOVFF  02,32E
2AA0:  MOVFF  03,32F
2AA4:  MOVFF  03,353
2AA8:  MOVFF  02,352
2AAC:  MOVFF  01,351
2AB0:  MOVFF  00,350
2AB4:  MOVFF  32B,357
2AB8:  MOVFF  32A,356
2ABC:  MOVFF  329,355
2AC0:  MOVFF  328,354
2AC4:  CALL   1804
2AC8:  MOVFF  00,32C
2ACC:  MOVFF  01,32D
2AD0:  MOVFF  02,32E
2AD4:  MOVFF  03,32F
2AD8:  MOVFF  03,333
2ADC:  MOVFF  02,332
2AE0:  MOVFF  01,331
2AE4:  MOVFF  00,330
2AE8:  RCALL  23D8
2AEA:  BRA    2AEC
....................       } 
....................    } 
.................... } 
2AEC:  RETLW  00
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... // Definición de Entradas 
.................... #define   PRES          !input(PIN_D7) 
.................... #define   TERM          !input(PIN_D6) 
.................... #define   DOOR          !input(PIN_D4) 
.................... #define   STOP          !input(PIN_D5) 
.................... #define   LOW            input(PIN_D0) 
.................... #define   MEDIUM         input(PIN_D1) 
.................... #define   HIGH           input(PIN_D2) 
....................  
.................... // Definición de Salidas 
.................... #define   Resistencia_on     output_bit(PIN_C0,1) 
.................... #define   Resistencia_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia2_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia2_off   output_bit(PIN_C1,0) 
....................  
.................... #define   EV_Desfogue_on     output_bit(PIN_B2,1) 
.................... #define   EV_Desfogue_off    output_bit(PIN_B2,0) 
.................... #define   EV_Paso_on         output_bit(PIN_B3,1) 
.................... #define   EV_Paso_off        output_bit(PIN_B3,0) 
.................... #define   EV_Agua_on         output_bit(PIN_B4,1) 
.................... #define   EV_Agua_off        output_bit(PIN_B4,0) 
.................... #define   Motor_Puerta_on    output_bit(PIN_B6,1) 
.................... #define   Motor_Puerta_off   output_bit(PIN_B6,0) 
.................... #define   Bomba_Vacio_on     output_bit(PIN_B5,1) 
.................... #define   Bomba_Vacio_off    output_bit(PIN_B5,0) 
.................... #define   Bomba_Agua_on      output_bit(PIN_B7,1) 
.................... #define   Bomba_Agua_off     output_bit(PIN_B7,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
2F1C:  CLRF   03
2F1E:  MOVLB  3
2F20:  MOVF   x1F,W
2F22:  ADDLW  70
2F24:  MOVWF  FE9
2F26:  MOVLW  0F
2F28:  ADDWFC 03,W
2F2A:  MOVWF  FEA
2F2C:  MOVF   FEF,F
2F2E:  BZ    2F4A
2F30:  MOVF   x1F,W
2F32:  MULLW  08
2F34:  MOVF   FF3,W
2F36:  CLRF   x21
2F38:  MOVWF  x20
2F3A:  MOVWF  FE9
2F3C:  MOVLW  04
2F3E:  ADDWF  x21,W
2F40:  MOVWF  FEA
2F42:  MOVFF  FEF,320
2F46:  BTFSS  x20.7
2F48:  BRA    2F4E
2F4A:  MOVLW  00
2F4C:  BRA    2F50
2F4E:  MOVLW  01
2F50:  MOVWF  01
.................... } 
2F52:  MOVLB  0
2F54:  GOTO   3CCA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09FC:  CLRF   03
09FE:  MOVLB  3
0A00:  MOVF   x6C,W
0A02:  ADDLW  70
0A04:  MOVWF  FE9
0A06:  MOVLW  0F
0A08:  ADDWFC 03,W
0A0A:  MOVWF  FEA
0A0C:  MOVF   FEF,F
0A0E:  BZ    0A34
0A10:  MOVF   x6C,W
0A12:  MULLW  08
0A14:  MOVF   FF3,W
0A16:  CLRF   x6E
0A18:  MOVWF  x6D
0A1A:  MOVLW  04
0A1C:  ADDWF  x6D,F
0A1E:  MOVLW  00
0A20:  ADDWFC x6E,F
0A22:  MOVFF  36D,FE9
0A26:  MOVLW  04
0A28:  ADDWF  x6E,W
0A2A:  MOVWF  FEA
0A2C:  MOVFF  FEF,36D
0A30:  BTFSS  x6D.7
0A32:  BRA    0A38
0A34:  MOVLW  00
0A36:  BRA    0A3A
0A38:  MOVLW  01
0A3A:  MOVWF  01
.................... } 
0A3C:  MOVLB  0
0A3E:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
0F10:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
0F12:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
0F14:  MOVLW  08
0F16:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
0F18:  MOVF   F94,W
0F1A:  IORLW  30
0F1C:  MOVLB  3
0F1E:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
0F20:  CLRF   1C
0F22:  CLRF   16
0F24:  BTFSC  FF2.7
0F26:  BSF    16.7
0F28:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
0F2A:  MOVLB  0
0F2C:  CALL   02F6
0F30:  BTFSC  16.7
0F32:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
0F34:  GOTO   0F3A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
0F3E:  CLRF   16
0F40:  BTFSC  FF2.7
0F42:  BSF    16.7
0F44:  BCF    FF2.7
....................    usb_token_reset(); 
0F46:  CALL   02F6
0F4A:  BTFSC  16.7
0F4C:  BSF    FF2.7
....................    UCON = 0; 
0F4E:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
0F50:  MOVLW  14
0F52:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
0F54:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
0F56:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
0F58:  MOVLW  01
0F5A:  MOVWF  1C
.................... } 
0F5C:  GOTO   0F66 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
0F38:  BRA    0F10
.................... } 
0F3A:  GOTO   0F84 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
0F60:  BTFSC  F6D.3
0F62:  BRA    0F66
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
0F64:  BRA    0F3E
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
0F66:  DECFSZ 1C,W
0F68:  BRA    0F80
0F6A:  BTFSC  F6D.5
0F6C:  BRA    0F80
....................    { 
....................       UIR=0; 
0F6E:  CLRF   F68
....................       UIE=0; 
0F70:  CLRF   F69
....................       enable_interrupts(INT_USB); 
0F72:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
0F74:  MOVLW  C0
0F76:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
0F78:  MOVLW  11
0F7A:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
0F7C:  MOVLW  02
0F7E:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
0F80:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
0F82:  BRA    0F38
....................  
....................    do  
....................    { 
....................       usb_task(); 
0F84:  RCALL  0F60
....................    } while (usb_state != USB_STATE_POWERED); 
0F86:  MOVF   1C,W
0F88:  SUBLW  02
0F8A:  BNZ   0F84
.................... } 
0F8C:  GOTO   3A92 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A40:  MOVFF  367,36C
0A44:  RCALL  09FC
0A46:  MOVF   01,F
0A48:  BZ    0B12
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A4A:  MOVLB  3
0A4C:  MOVF   x67,W
0A4E:  MULLW  08
0A50:  MOVF   FF3,W
0A52:  CLRF   x6D
0A54:  MOVWF  x6C
0A56:  MOVLW  04
0A58:  ADDWF  x6C,F
0A5A:  MOVLW  00
0A5C:  ADDWFC x6D,F
0A5E:  MOVLW  01
0A60:  ADDWF  x6C,W
0A62:  MOVWF  01
0A64:  MOVLW  00
0A66:  ADDWFC x6D,W
0A68:  MOVWF  03
0A6A:  MOVFF  01,FE9
0A6E:  MOVLW  04
0A70:  ADDWF  03,W
0A72:  MOVWF  FEA
0A74:  MOVFF  368,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A78:  MOVF   x6A,W
0A7A:  SUBLW  02
0A7C:  BNZ   0AAC
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A7E:  MOVF   x67,W
0A80:  MULLW  08
0A82:  MOVF   FF3,W
0A84:  CLRF   x6D
0A86:  MOVWF  x6C
0A88:  MOVLW  04
0A8A:  ADDWF  x6C,F
0A8C:  MOVLW  00
0A8E:  ADDWFC x6D,F
0A90:  MOVFF  36C,FE9
0A94:  MOVLW  04
0A96:  ADDWF  x6D,W
0A98:  MOVWF  FEA
0A9A:  MOVFF  FEF,36B
....................          if (bit_test(i,6)) 
0A9E:  BTFSS  x6B.6
0AA0:  BRA    0AA6
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0AA2:  CLRF   x6A
....................          else 
0AA4:  BRA    0AAA
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0AA6:  MOVLW  01
0AA8:  MOVWF  x6A
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
0AAA:  BRA    0AD2
0AAC:  MOVF   x6A,W
0AAE:  SUBLW  04
0AB0:  BNZ   0AD2
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0AB2:  MOVF   x67,W
0AB4:  MULLW  08
0AB6:  MOVF   FF3,W
0AB8:  CLRF   x6D
0ABA:  MOVWF  FE9
0ABC:  MOVLW  04
0ABE:  ADDWF  x6D,W
0AC0:  MOVWF  FEA
0AC2:  MOVFF  FEF,36B
....................          if (bit_test(i,6)) 
0AC6:  BTFSS  x6B.6
0AC8:  BRA    0AD0
....................             tgl = USB_DTS_DATA1; 
0ACA:  MOVLW  01
0ACC:  MOVWF  x6A
....................          else 
0ACE:  BRA    0AD2
....................             tgl = USB_DTS_DATA0; 
0AD0:  CLRF   x6A
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0AD2:  DECFSZ x6A,W
0AD4:  BRA    0ADC
....................          i=0xC8;  //DATA1, UOWN 
0AD6:  MOVLW  C8
0AD8:  MOVWF  x6B
....................       else //if (tgl == USB_DTS_DATA0)  
0ADA:  BRA    0AE0
....................          i=0x88; //DATA0, UOWN 
0ADC:  MOVLW  88
0ADE:  MOVWF  x6B
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0AE0:  BTFSC  x69.0
0AE2:  BSF    x6B.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0AE4:  BTFSC  x69.1
0AE6:  BSF    x6B.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AE8:  MOVF   x67,W
0AEA:  MULLW  08
0AEC:  MOVF   FF3,W
0AEE:  CLRF   x6D
0AF0:  MOVWF  x6C
0AF2:  MOVLW  04
0AF4:  ADDWF  x6C,F
0AF6:  MOVLW  00
0AF8:  ADDWFC x6D,F
0AFA:  MOVFF  36C,FE9
0AFE:  MOVLW  04
0B00:  ADDWF  x6D,W
0B02:  MOVWF  FEA
0B04:  MOVFF  36B,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0B08:  MOVLW  01
0B0A:  MOVWF  01
0B0C:  BRA    0B18
....................    } 
....................    else  
0B0E:  BRA    0B10
0B10:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0B12:  MOVLW  00
0B14:  MOVWF  01
0B16:  MOVLB  3
.................... } 
0B18:  MOVLB  0
0B1A:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
306C:  CLRF   16
306E:  BTFSC  FF2.7
3070:  BSF    16.7
3072:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
3074:  MOVFF  31F,36C
3078:  CALL   09FC
307C:  BTFSC  16.7
307E:  BSF    FF2.7
3080:  MOVF   01,F
3082:  BZ    3114
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
3084:  MOVLB  3
3086:  MOVF   x1F,W
3088:  MULLW  08
308A:  MOVF   FF3,W
308C:  CLRF   x28
308E:  MOVWF  x27
3090:  MOVLW  04
3092:  ADDWF  x27,F
3094:  MOVLW  00
3096:  ADDWFC x28,F
3098:  MOVLW  02
309A:  ADDWF  x27,W
309C:  MOVWF  01
309E:  MOVLW  00
30A0:  ADDWFC x28,W
30A2:  MOVWF  03
30A4:  MOVFF  01,FE9
30A8:  MOVLW  04
30AA:  ADDWF  03,W
30AC:  MOVWF  FEA
30AE:  MOVFF  FEC,03
30B2:  MOVF   FED,F
30B4:  MOVFF  FEF,325
30B8:  MOVFF  03,326
....................       memcpy(buff_add, ptr, len);      
30BC:  MOVFF  326,FEA
30C0:  MOVFF  325,FE9
30C4:  MOVFF  321,FE2
30C8:  MOVFF  320,FE1
30CC:  MOVFF  323,02
30D0:  MOVFF  322,01
30D4:  MOVF   01,F
30D6:  BZ    30DC
30D8:  INCF   02,F
30DA:  BRA    30E0
30DC:  MOVF   02,F
30DE:  BZ    30EC
30E0:  MOVFF  FE6,FEE
30E4:  DECFSZ 01,F
30E6:  BRA    30E0
30E8:  DECFSZ 02,F
30EA:  BRA    30E0
30EC:  CLRF   16
30EE:  BTFSC  FF2.7
30F0:  BSF    16.7
30F2:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
30F4:  MOVFF  31F,367
30F8:  MOVFF  323,369
30FC:  MOVFF  322,368
3100:  MOVFF  324,36A
3104:  MOVLB  0
3106:  CALL   0A40
310A:  BTFSC  16.7
310C:  BSF    FF2.7
310E:  MOVF   01,W
3110:  BRA    3118
....................    } 
....................    else  
3112:  BRA    3114
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
3114:  MOVLW  00
3116:  MOVWF  01
.................... } 
3118:  GOTO   43E6 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0932:  MOVLB  3
0934:  MOVF   x67,W
0936:  MULLW  08
0938:  MOVF   FF3,W
093A:  CLRF   x6D
093C:  MOVWF  FE9
093E:  MOVLW  04
0940:  ADDWF  x6D,W
0942:  MOVWF  FEA
0944:  MOVFF  FEF,369
....................    if (tgl == USB_DTS_TOGGLE)  
0948:  MOVF   x68,W
094A:  SUBLW  02
094C:  BNZ   095A
....................    { 
....................       if (bit_test(i,6)) 
094E:  BTFSS  x69.6
0950:  BRA    0956
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0952:  CLRF   x68
....................       else 
0954:  BRA    095A
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0956:  MOVLW  01
0958:  MOVWF  x68
....................    } 
....................    if (tgl == USB_DTS_STALL)  
095A:  MOVF   x68,W
095C:  SUBLW  03
095E:  BNZ   0986
....................    { 
....................       i = 0x84; 
0960:  MOVLW  84
0962:  MOVWF  x69
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
0964:  MOVF   x67,W
0966:  MULLW  08
0968:  MOVF   FF3,W
096A:  CLRF   x6D
096C:  MOVWF  x6C
096E:  MOVLW  04
0970:  ADDWF  x6C,F
0972:  MOVLW  00
0974:  ADDWFC x6D,F
0976:  MOVFF  36C,FE9
097A:  MOVLW  04
097C:  ADDWF  x6D,W
097E:  MOVWF  FEA
0980:  MOVLW  84
0982:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
0984:  BRA    0994
0986:  DECFSZ x68,W
0988:  BRA    0990
....................       i = 0xC8;  //DATA1, UOWN 
098A:  MOVLW  C8
098C:  MOVWF  x69
....................    else //if (tgl == USB_DTS_DATA0)  
098E:  BRA    0994
....................       i = 0x88; //DATA0, UOWN 
0990:  MOVLW  88
0992:  MOVWF  x69
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
0994:  BCF    FD8.0
0996:  RLCF   x67,W
0998:  CLRF   03
099A:  MOVFF  FF2,36C
099E:  BCF    FF2.7
09A0:  MOVLB  0
09A2:  CALL   00DA
09A6:  TBLRD*+
09A8:  MOVFF  FF5,03
09AC:  MOVLB  3
09AE:  BTFSC  x6C.7
09B0:  BSF    FF2.7
09B2:  MOVWF  x6A
09B4:  MOVFF  03,36B
....................    EP_BDxCNT_O(endpoint) = len; 
09B8:  MOVF   x67,W
09BA:  MULLW  08
09BC:  MOVF   FF3,W
09BE:  CLRF   x6D
09C0:  MOVWF  x6C
09C2:  MOVLW  01
09C4:  ADDWF  x6C,W
09C6:  MOVWF  01
09C8:  MOVLW  00
09CA:  ADDWFC x6D,W
09CC:  MOVWF  03
09CE:  MOVFF  01,FE9
09D2:  MOVLW  04
09D4:  ADDWF  03,W
09D6:  MOVWF  FEA
09D8:  MOVFF  36A,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09DC:  BTFSC  x6B.0
09DE:  BSF    x69.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09E0:  BTFSC  x6B.1
09E2:  BSF    x69.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09E4:  MOVF   x67,W
09E6:  MULLW  08
09E8:  MOVF   FF3,W
09EA:  CLRF   x6D
09EC:  MOVWF  FE9
09EE:  MOVLW  04
09F0:  ADDWF  x6D,W
09F2:  MOVWF  FEA
09F4:  MOVFF  369,FEF
.................... } 
09F8:  MOVLB  0
09FA:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
2F58:  MOVLB  3
2F5A:  MOVF   x24,W
2F5C:  MULLW  08
2F5E:  MOVF   FF3,W
2F60:  CLRF   x2F
2F62:  MOVWF  x2E
2F64:  MOVLW  02
2F66:  ADDWF  x2E,W
2F68:  MOVWF  01
2F6A:  MOVLW  00
2F6C:  ADDWFC x2F,W
2F6E:  MOVWF  03
2F70:  MOVFF  01,FE9
2F74:  MOVLW  04
2F76:  ADDWF  03,W
2F78:  MOVWF  FEA
2F7A:  MOVFF  FEC,03
2F7E:  MOVF   FED,F
2F80:  MOVFF  FEF,329
2F84:  MOVFF  03,32A
....................    i = EP_BDxCNT_O(endpoint); 
2F88:  MOVF   x24,W
2F8A:  MULLW  08
2F8C:  MOVF   FF3,W
2F8E:  CLRF   x2F
2F90:  MOVWF  x2E
2F92:  MOVLW  01
2F94:  ADDWF  x2E,W
2F96:  MOVWF  01
2F98:  MOVLW  00
2F9A:  ADDWFC x2F,W
2F9C:  MOVWF  03
2F9E:  MOVFF  01,FE9
2FA2:  MOVLW  04
2FA4:  ADDWF  03,W
2FA6:  MOVWF  FEA
2FA8:  MOVF   FEF,W
2FAA:  CLRF   03
2FAC:  MOVWF  x2C
2FAE:  MOVFF  03,32D
....................    st = EP_BDxST_O(endpoint); 
2FB2:  MOVF   x24,W
2FB4:  MULLW  08
2FB6:  MOVF   FF3,W
2FB8:  CLRF   x2F
2FBA:  MOVWF  FE9
2FBC:  MOVLW  04
2FBE:  ADDWF  x2F,W
2FC0:  MOVWF  FEA
2FC2:  MOVFF  FEF,32B
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
2FC6:  BTFSC  x2B.0
2FC8:  BSF    x2D.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
2FCA:  BTFSC  x2B.1
2FCC:  BSF    x2D.1
....................  
....................    if (i < max) {max = i;} 
2FCE:  MOVF   x2D,W
2FD0:  SUBWF  x28,W
2FD2:  BNC   2FE4
2FD4:  BNZ   2FDC
2FD6:  MOVF   x27,W
2FD8:  SUBWF  x2C,W
2FDA:  BC    2FE4
2FDC:  MOVFF  32D,328
2FE0:  MOVFF  32C,327
....................     
....................    memcpy(ptr, al ,max); 
2FE4:  MOVFF  326,FEA
2FE8:  MOVFF  325,FE9
2FEC:  MOVFF  32A,FE2
2FF0:  MOVFF  329,FE1
2FF4:  MOVFF  328,02
2FF8:  MOVFF  327,01
2FFC:  MOVF   01,F
2FFE:  BZ    3004
3000:  INCF   02,F
3002:  BRA    3008
3004:  MOVF   02,F
3006:  BZ    3014
3008:  MOVFF  FE6,FEE
300C:  DECFSZ 01,F
300E:  BRA    3008
3010:  DECFSZ 02,F
3012:  BRA    3008
....................  
....................    return(max); 
3014:  MOVFF  327,01
3018:  MOVFF  328,02
.................... } 
301C:  MOVLB  0
301E:  GOTO   3038 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
3022:  MOVFF  31F,324
3026:  MOVFF  321,326
302A:  MOVFF  320,325
302E:  MOVFF  323,328
3032:  MOVFF  322,327
3036:  BRA    2F58
3038:  MOVFF  02,323
303C:  MOVFF  01,322
3040:  CLRF   16
3042:  BTFSC  FF2.7
3044:  BSF    16.7
3046:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
3048:  MOVFF  31F,367
304C:  MOVLW  02
304E:  MOVLB  3
3050:  MOVWF  x68
3052:  MOVLB  0
3054:  CALL   0932
3058:  BTFSC  16.7
305A:  BSF    FF2.7
....................  
....................    return(max); 
305C:  MOVLB  3
305E:  MOVFF  322,01
3062:  MOVFF  323,02
.................... } 
3066:  MOVLB  0
3068:  GOTO   3CE8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07F8:  MOVLB  3
07FA:  BCF    x68.0
07FC:  BTFSC  x67.7
07FE:  BSF    x68.0
....................    endpoint &= 0x7F; 
0800:  BCF    x67.7
....................     
....................    if (direction)  
0802:  BTFSS  x68.0
0804:  BRA    0828
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
0806:  MOVF   x67,W
0808:  MULLW  08
080A:  MOVF   FF3,W
080C:  CLRF   x6A
080E:  MOVWF  x69
0810:  MOVLW  04
0812:  ADDWF  x69,F
0814:  MOVLW  00
0816:  ADDWFC x6A,F
0818:  MOVFF  369,FE9
081C:  MOVLW  04
081E:  ADDWF  x6A,W
0820:  MOVWF  FEA
0822:  MOVLW  84
0824:  MOVWF  FEF
....................    } 
....................    else  
0826:  BRA    083C
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0828:  MOVF   x67,W
082A:  MULLW  08
082C:  MOVF   FF3,W
082E:  CLRF   x6A
0830:  MOVWF  FE9
0832:  MOVLW  04
0834:  ADDWF  x6A,W
0836:  MOVWF  FEA
0838:  MOVLW  84
083A:  MOVWF  FEF
....................    } 
.................... } 
083C:  MOVLB  0
083E:  GOTO   08D0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07B0:  MOVLB  3
07B2:  BCF    x68.0
07B4:  BTFSC  x67.7
07B6:  BSF    x68.0
....................    endpoint &= 0x7F; 
07B8:  BCF    x67.7
....................     
....................    if (direction)  
07BA:  BTFSS  x68.0
07BC:  BRA    07E0
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07BE:  MOVF   x67,W
07C0:  MULLW  08
07C2:  MOVF   FF3,W
07C4:  CLRF   x6A
07C6:  MOVWF  x69
07C8:  MOVLW  04
07CA:  ADDWF  x69,F
07CC:  MOVLW  00
07CE:  ADDWFC x6A,F
07D0:  MOVFF  369,FE9
07D4:  MOVLW  04
07D6:  ADDWF  x6A,W
07D8:  MOVWF  FEA
07DA:  MOVLW  88
07DC:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
07DE:  BRA    07F2
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07E0:  MOVF   x67,W
07E2:  MULLW  08
07E4:  MOVF   FF3,W
07E6:  CLRF   x6A
07E8:  MOVWF  FE9
07EA:  MOVLW  04
07EC:  ADDWF  x6A,W
07EE:  MOVWF  FEA
07F0:  CLRF   FEF
....................    } 
.................... } 
07F2:  MOVLB  0
07F4:  GOTO   08C0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0842:  MOVLB  3
0844:  BCF    x68.0
0846:  BTFSC  x67.7
0848:  BSF    x68.0
....................    endpoint &= 0x7F; 
084A:  BCF    x67.7
....................     
....................    if (direction)  
084C:  BTFSS  x68.0
084E:  BRA    0872
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0850:  MOVF   x67,W
0852:  MULLW  08
0854:  MOVF   FF3,W
0856:  CLRF   x6B
0858:  MOVWF  x6A
085A:  MOVLW  04
085C:  ADDWF  x6A,F
085E:  MOVLW  00
0860:  ADDWFC x6B,F
0862:  MOVFF  36A,FE9
0866:  MOVLW  04
0868:  ADDWF  x6B,W
086A:  MOVWF  FEA
086C:  MOVFF  FEF,369
....................    } 
....................    else  
0870:  BRA    0886
....................    { 
....................       st=EP_BDxST_O(endpoint); 
0872:  MOVF   x67,W
0874:  MULLW  08
0876:  MOVF   FF3,W
0878:  CLRF   x6B
087A:  MOVWF  FE9
087C:  MOVLW  04
087E:  ADDWF  x6B,W
0880:  MOVWF  FEA
0882:  MOVFF  FEF,369
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
0886:  BTFSS  x69.7
0888:  BRA    088E
088A:  BTFSC  x69.2
088C:  BRA    0892
088E:  MOVLW  00
0890:  BRA    0894
0892:  MOVLW  01
0894:  MOVWF  01
.................... } 
0896:  MOVLB  0
0898:  GOTO   08E8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B26:  MOVFF  368,F6E
....................     
....................    if (address)  
0B2A:  MOVLB  3
0B2C:  MOVF   x68,F
0B2E:  BZ    0B36
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B30:  MOVLW  04
0B32:  MOVWF  1C
....................    } 
....................    else  
0B34:  BRA    0B3A
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B36:  MOVLW  02
0B38:  MOVWF  1C
....................    } 
.................... } 
0B3A:  MOVLB  0
0B3C:  GOTO   0B4A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
047C:  MOVLB  3
047E:  MOVF   x67,F
0480:  BNZ   048E
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0482:  MOVLW  04
0484:  MOVWF  1C
....................       usb_disable_endpoints(); 
0486:  MOVLB  0
0488:  RCALL  02D8
....................    } 
....................    else  
048A:  BRA    0648
048C:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
048E:  MOVLW  05
0490:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0492:  MOVLW  04
0494:  MOVWF  x6A
0496:  MOVLW  90
0498:  MOVWF  x69
....................       for (en=1; en<USB_NUM_UEP; en++)  
049A:  MOVLW  01
049C:  MOVWF  x68
049E:  MOVF   x68,W
04A0:  SUBLW  0F
04A2:  BTFSS  FD8.0
04A4:  BRA    0648
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
04A6:  MOVFF  368,370
04AA:  MOVLB  0
04AC:  RCALL  0284
....................          new_uep = 0; 
04AE:  MOVLB  3
04B0:  CLRF   x6B
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
04B2:  CLRF   03
04B4:  MOVF   x68,W
04B6:  MOVFF  FF2,36F
04BA:  BCF    FF2.7
04BC:  MOVLB  0
04BE:  RCALL  00BA
04C0:  MOVLB  3
04C2:  BTFSC  x6F.7
04C4:  BSF    FF2.7
04C6:  SUBLW  FF
04C8:  BZ    0580
....................          { 
....................             new_uep = 0x04; 
04CA:  MOVLW  04
04CC:  MOVWF  x6B
....................             len = usb_ep_rx_size[en]; 
04CE:  BCF    FD8.0
04D0:  RLCF   x68,W
04D2:  CLRF   03
04D4:  MOVFF  FF2,36F
04D8:  BCF    FF2.7
04DA:  MOVLB  0
04DC:  RCALL  00DA
04DE:  TBLRD*+
04E0:  MOVFF  FF5,03
04E4:  MOVLB  3
04E6:  BTFSC  x6F.7
04E8:  BSF    FF2.7
04EA:  MOVWF  x6C
04EC:  MOVFF  03,36D
....................             EP_BDxCNT_O(en) = len; 
04F0:  MOVF   x68,W
04F2:  MULLW  08
04F4:  MOVF   FF3,W
04F6:  CLRF   x70
04F8:  MOVWF  x6F
04FA:  MOVLW  01
04FC:  ADDWF  x6F,W
04FE:  MOVWF  01
0500:  MOVLW  00
0502:  ADDWFC x70,W
0504:  MOVWF  03
0506:  MOVFF  01,FE9
050A:  MOVLW  04
050C:  ADDWF  03,W
050E:  MOVWF  FEA
0510:  MOVFF  36C,FEF
....................             EP_BDxADR_O(en) = addy; 
0514:  MOVF   x68,W
0516:  MULLW  08
0518:  MOVF   FF3,W
051A:  CLRF   x70
051C:  MOVWF  x6F
051E:  MOVLW  02
0520:  ADDWF  x6F,W
0522:  MOVWF  01
0524:  MOVLW  00
0526:  ADDWFC x70,W
0528:  MOVWF  03
052A:  MOVFF  01,FE9
052E:  MOVLW  04
0530:  ADDWF  03,W
0532:  MOVWF  FEA
0534:  MOVFF  36A,FEC
0538:  MOVF   FED,F
053A:  MOVFF  369,FEF
....................             addy += usb_ep_rx_size[en]; 
053E:  BCF    FD8.0
0540:  RLCF   x68,W
0542:  CLRF   03
0544:  MOVFF  FF2,36F
0548:  BCF    FF2.7
054A:  MOVLB  0
054C:  RCALL  00DA
054E:  TBLRD*+
0550:  MOVFF  FF5,03
0554:  MOVLB  3
0556:  BTFSC  x6F.7
0558:  BSF    FF2.7
055A:  ADDWF  x69,F
055C:  MOVF   03,W
055E:  ADDWFC x6A,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
0560:  MOVLW  88
0562:  MOVWF  x6E
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
0564:  BTFSC  x6D.0
0566:  BSF    x6E.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0568:  BTFSC  x6D.1
056A:  BSF    x6E.1
....................             EP_BDxST_O(en) = i; 
056C:  MOVF   x68,W
056E:  MULLW  08
0570:  MOVF   FF3,W
0572:  CLRF   x70
0574:  MOVWF  FE9
0576:  MOVLW  04
0578:  ADDWF  x70,W
057A:  MOVWF  FEA
057C:  MOVFF  36E,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0580:  CLRF   03
0582:  MOVF   x68,W
0584:  MOVFF  FF2,36F
0588:  BCF    FF2.7
058A:  MOVLB  0
058C:  RCALL  00BA
058E:  MOVLB  3
0590:  BTFSC  x6F.7
0592:  BSF    FF2.7
0594:  SUBLW  FF
0596:  BZ    060E
....................          { 
....................             new_uep |= 0x02; 
0598:  BSF    x6B.1
....................             EP_BDxADR_I(en) = addy; 
059A:  MOVF   x68,W
059C:  MULLW  08
059E:  MOVF   FF3,W
05A0:  CLRF   x70
05A2:  MOVWF  x6F
05A4:  MOVLW  04
05A6:  ADDWF  x6F,F
05A8:  MOVLW  00
05AA:  ADDWFC x70,F
05AC:  MOVLW  02
05AE:  ADDWF  x6F,W
05B0:  MOVWF  01
05B2:  MOVLW  00
05B4:  ADDWFC x70,W
05B6:  MOVWF  03
05B8:  MOVFF  01,FE9
05BC:  MOVLW  04
05BE:  ADDWF  03,W
05C0:  MOVWF  FEA
05C2:  MOVFF  36A,FEC
05C6:  MOVF   FED,F
05C8:  MOVFF  369,FEF
....................             addy += usb_ep_tx_size[en]; 
05CC:  BCF    FD8.0
05CE:  RLCF   x68,W
05D0:  CLRF   03
05D2:  MOVFF  FF2,36F
05D6:  BCF    FF2.7
05D8:  MOVLB  0
05DA:  RCALL  00DA
05DC:  TBLRD*+
05DE:  MOVFF  FF5,03
05E2:  MOVLB  3
05E4:  BTFSC  x6F.7
05E6:  BSF    FF2.7
05E8:  ADDWF  x69,F
05EA:  MOVF   03,W
05EC:  ADDWFC x6A,F
....................             EP_BDxST_I(en) = 0x40; 
05EE:  MOVF   x68,W
05F0:  MULLW  08
05F2:  MOVF   FF3,W
05F4:  CLRF   x70
05F6:  MOVWF  x6F
05F8:  MOVLW  04
05FA:  ADDWF  x6F,F
05FC:  MOVLW  00
05FE:  ADDWFC x70,F
0600:  MOVFF  36F,FE9
0604:  MOVLW  04
0606:  ADDWF  x70,W
0608:  MOVWF  FEA
060A:  MOVLW  40
060C:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
060E:  MOVF   x6B,W
0610:  SUBLW  06
0612:  BNZ   0618
0614:  MOVLW  0E
0616:  MOVWF  x6B
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
0618:  CLRF   03
061A:  MOVF   x68,W
061C:  MOVFF  FF2,36F
0620:  BCF    FF2.7
0622:  MOVLB  0
0624:  RCALL  00BA
0626:  MOVLB  3
0628:  BTFSC  x6F.7
062A:  BSF    FF2.7
062C:  SUBLW  01
062E:  BTFSS  FD8.2
0630:  BSF    x6B.4
....................           
....................          UEP(en) = new_uep; 
0632:  CLRF   03
0634:  MOVF   x68,W
0636:  ADDLW  70
0638:  MOVWF  FE9
063A:  MOVLW  0F
063C:  ADDWFC 03,W
063E:  MOVWF  FEA
0640:  MOVFF  36B,FEF
....................       } 
0644:  INCF   x68,F
0646:  BRA    049E
0648:  MOVLB  0
....................    } 
.................... } 
064A:  GOTO   06F2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
0284:  CLRF   03
0286:  MOVLB  3
0288:  MOVF   x70,W
028A:  ADDLW  70
028C:  MOVWF  FE9
028E:  MOVLW  0F
0290:  ADDWFC 03,W
0292:  MOVWF  FEA
0294:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
0296:  MOVFF  370,371
029A:  MOVLB  0
029C:  RCALL  0220
029E:  MOVF   01,F
02A0:  BZ    02D4
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
02A2:  MOVLB  3
02A4:  MOVF   x70,W
02A6:  MULLW  08
02A8:  MOVF   FF3,W
02AA:  CLRF   x72
02AC:  MOVWF  FE9
02AE:  MOVLW  04
02B0:  ADDWF  x72,W
02B2:  MOVWF  FEA
02B4:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
02B6:  MOVF   x70,W
02B8:  MULLW  08
02BA:  MOVF   FF3,W
02BC:  CLRF   x72
02BE:  MOVWF  x71
02C0:  MOVLW  04
02C2:  ADDWF  x71,F
02C4:  MOVLW  00
02C6:  ADDWFC x72,F
02C8:  MOVFF  371,FE9
02CC:  MOVLW  04
02CE:  ADDWF  x72,W
02D0:  MOVWF  FEA
02D2:  CLRF   FEF
02D4:  MOVLB  0
....................    } 
.................... } 
02D6:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02D8:  MOVLW  01
02DA:  MOVLB  3
02DC:  MOVWF  x6F
02DE:  MOVF   x6F,W
02E0:  SUBLW  0F
02E2:  BNC   02F2
....................       usb_disable_endpoint(i); 
02E4:  MOVFF  36F,370
02E8:  MOVLB  0
02EA:  RCALL  0284
02EC:  MOVLB  3
02EE:  INCF   x6F,F
02F0:  BRA    02DE
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
02F2:  MOVLB  0
02F4:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CEA:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CEC:  MOVF   1C,F
0CEE:  BNZ   0CF2
0CF0:  BRA    0D6E
....................    if (UIR)  
0CF2:  MOVF   F68,F
0CF4:  BZ    0D6E
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CF6:  BTFSS  F68.2
0CF8:  BRA    0D02
0CFA:  BTFSS  F69.2
0CFC:  BRA    0D02
0CFE:  GOTO   01DA
....................  
....................       if (UCON_SUSPND) return; 
0D02:  BTFSS  F6D.1
0D04:  BRA    0D08
0D06:  BRA    0D6E
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0D08:  BTFSS  F68.5
0D0A:  BRA    0D14
0D0C:  BTFSS  F69.5
0D0E:  BRA    0D14
0D10:  GOTO   020A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0D14:  BTFSS  F68.1
0D16:  BRA    0D20
0D18:  BTFSS  F69.1
0D1A:  BRA    0D20
0D1C:  GOTO   0218
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D20:  BTFSS  F68.0
0D22:  BRA    0D2C
0D24:  BTFSS  F69.0
0D26:  BRA    0D2C
0D28:  GOTO   031E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D2C:  BTFSS  F68.4
0D2E:  BRA    0D38
0D30:  BTFSS  F69.4
0D32:  BRA    0D38
0D34:  GOTO   0348
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D38:  BTFSS  F68.6
0D3A:  BRA    0D44
0D3C:  BTFSS  F69.6
0D3E:  BRA    0D44
0D40:  GOTO   0352
....................  
....................       TRNAttempts = 0; 
0D44:  MOVLB  3
0D46:  CLRF   x64
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D48:  BTFSS  F68.3
0D4A:  BRA    0D60
0D4C:  BTFSS  F69.3
0D4E:  BRA    0D60
....................          { 
....................             USTATCopy = U1STAT; 
0D50:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
0D54:  MOVLB  0
0D56:  CALL   0004
....................             usb_isr_tok_dne(); 
0D5A:  BRA    0B70
....................          } 
....................          else 
0D5C:  BRA    0D62
0D5E:  MOVLB  3
....................             break; 
0D60:  BRA    0D6C
....................       } while (TRNAttempts++ < 4); 
0D62:  MOVLB  3
0D64:  MOVF   x64,W
0D66:  INCF   x64,F
0D68:  SUBLW  03
0D6A:  BC    0D48
0D6C:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
0D6E:  GOTO   0078
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
0352:  BCF    F68.6
.................... } 
0354:  GOTO   0D44 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
031E:  CLRF   F6A
....................    UIR = 0; 
0320:  CLRF   F68
....................    UEIE = 0x9F; 
0322:  MOVLW  9F
0324:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
0326:  MOVLW  3D
0328:  MOVWF  F69
....................  
....................    UADDR = 0; 
032A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
032C:  RCALL  02D8
....................     
....................    usb_token_reset(); 
032E:  RCALL  02F6
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
0330:  MOVLW  16
0332:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
0334:  BTFSS  F68.3
0336:  BRA    033C
....................       usb_clear_trn(); 
0338:  RCALL  0004
....................    } 
033A:  BRA    0334
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
033C:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
033E:  RCALL  01EA
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0340:  MOVLW  03
0342:  MOVWF  1C
.................... } 
0344:  GOTO   0D2C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01EA:  MOVLW  40
01EC:  MOVLB  4
01EE:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01F0:  MOVLW  04
01F2:  MOVWF  x03
01F4:  MOVLW  10
01F6:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01F8:  MOVLW  88
01FA:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01FC:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01FE:  MOVLW  04
0200:  MOVWF  x07
0202:  MOVLW  50
0204:  MOVWF  x06
.................... } 
0206:  MOVLB  0
0208:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0218:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
021A:  BCF    F68.1
.................... } 
021C:  GOTO   0D20 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
0348:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
034A:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
034C:  BSF    F6D.1
.................... } 
034E:  GOTO   0D38 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01DA:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01DC:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
01DE:  BTFSS  F68.2
01E0:  BRA    01E6
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01E2:  BCF    F68.2
....................    } 
01E4:  BRA    01DE
.................... } 
01E6:  GOTO   0D02 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
020A:  BTFSS  F70.0
020C:  BRA    0212
....................    { 
....................       usb_init_ep0_setup(); 
020E:  RCALL  01EA
....................       bit_clear(UEP(0), 0); 
0210:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
0212:  BCF    F68.5
.................... } 
0214:  GOTO   0D14 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
0358:  MOVFF  36A,1D
035C:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
035E:  MOVLW  FF
0360:  MOVWF  1D
0362:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B70:  RRCF   1B,W
0B72:  MOVLB  3
0B74:  MOVWF  x65
0B76:  RRCF   x65,F
0B78:  RRCF   x65,F
0B7A:  MOVLW  1F
0B7C:  ANDWF  x65,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B7E:  MOVF   1B,F
0B80:  BNZ   0C20
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B82:  MOVLB  4
0B84:  MOVF   x00,W
0B86:  ANDLW  3C
0B88:  MOVLB  3
0B8A:  MOVWF  x66
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B8C:  MOVLW  43
0B8E:  MOVLB  4
0B90:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B92:  MOVLB  3
0B94:  MOVF   x66,W
0B96:  SUBLW  34
0B98:  BNZ   0BE4
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B9A:  MOVLB  4
0B9C:  MOVF   x04,W
0B9E:  ANDLW  80
0BA0:  BZ    0BA4
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0BA2:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0BA4:  MOVLB  0
0BA6:  BRA    0906
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0BA8:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0BAA:  INCFSZ 1D,W
0BAC:  BRA    0BBC
....................             usb_flush_out(0, USB_DTS_STALL); 
0BAE:  MOVLB  3
0BB0:  CLRF   x67
0BB2:  MOVLW  03
0BB4:  MOVWF  x68
0BB6:  MOVLB  0
0BB8:  RCALL  0932
....................          else  
0BBA:  BRA    0BE0
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BBC:  MOVLB  3
0BBE:  CLRF   x67
0BC0:  MOVLW  02
0BC2:  MOVWF  x68
0BC4:  MOVLB  0
0BC6:  RCALL  0932
....................             if (__setup_0_tx_size != 0xFE) 
0BC8:  MOVF   1D,W
0BCA:  SUBLW  FE
0BCC:  BZ    0BE0
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BCE:  MOVLB  3
0BD0:  CLRF   x67
0BD2:  CLRF   x69
0BD4:  MOVFF  1D,368
0BD8:  MOVLW  04
0BDA:  MOVWF  x6A
0BDC:  MOVLB  0
0BDE:  RCALL  0A40
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BE0:  BRA    0C1C
0BE2:  MOVLB  3
0BE4:  MOVF   x66,W
0BE6:  SUBLW  04
0BE8:  BNZ   0C1E
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BEA:  CLRF   x67
0BEC:  MOVLB  0
0BEE:  RCALL  0B1C
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BF0:  MOVLB  3
0BF2:  CLRF   x67
0BF4:  MOVLW  02
0BF6:  MOVWF  x68
0BF8:  MOVLB  0
0BFA:  RCALL  0932
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BFC:  MOVF   1D,W
0BFE:  SUBLW  FE
0C00:  BZ    0C1A
0C02:  INCFSZ 1D,W
0C04:  BRA    0C08
0C06:  BRA    0C1A
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0C08:  MOVLB  3
0C0A:  CLRF   x67
0C0C:  CLRF   x69
0C0E:  MOVFF  1D,368
0C12:  MOVLW  01
0C14:  MOVWF  x6A
0C16:  MOVLB  0
0C18:  RCALL  0A40
....................          } 
....................       } 
....................       else 
0C1A:  BRA    0C1C
0C1C:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
0C1E:  BRA    0CE4
0C20:  MOVF   1B,W
0C22:  SUBLW  04
0C24:  BNZ   0C56
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C26:  MOVLW  43
0C28:  MOVLB  4
0C2A:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C2C:  MOVLW  FF
0C2E:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
0C30:  MOVLB  3
0C32:  CLRF   x67
0C34:  MOVLB  0
0C36:  RCALL  0B4E
....................       if (__setup_0_tx_size!=0xFF) 
0C38:  INCFSZ 1D,W
0C3A:  BRA    0C3E
0C3C:  BRA    0C52
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C3E:  MOVLB  3
0C40:  CLRF   x67
0C42:  CLRF   x69
0C44:  MOVFF  1D,368
0C48:  MOVLW  02
0C4A:  MOVWF  x6A
0C4C:  MOVLB  0
0C4E:  RCALL  0A40
....................       else 
0C50:  BRA    0C52
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
0C52:  BRA    0CE2
0C54:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C56:  BTFSC  1B.2
0C58:  BRA    0C94
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C5A:  MOVF   x65,W
0C5C:  MULLW  08
0C5E:  MOVF   FF3,W
0C60:  CLRF   x68
0C62:  MOVWF  01
0C64:  MOVLW  04
0C66:  ADDWF  x68,W
0C68:  MOVWF  03
0C6A:  MOVF   x65,W
0C6C:  MULLW  08
0C6E:  MOVF   FF3,W
0C70:  CLRF   x6A
0C72:  MOVWF  FE9
0C74:  MOVLW  04
0C76:  ADDWF  x6A,W
0C78:  MOVWF  FEA
0C7A:  MOVF   FEF,W
0C7C:  ANDLW  43
0C7E:  MOVFF  03,FEA
0C82:  MOVFF  01,FE9
0C86:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C88:  MOVFF  365,367
0C8C:  MOVLB  0
0C8E:  RCALL  0B1C
....................       } 
....................       else  
0C90:  BRA    0CE2
0C92:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C94:  MOVF   x65,W
0C96:  MULLW  08
0C98:  MOVF   FF3,W
0C9A:  CLRF   x68
0C9C:  MOVWF  x67
0C9E:  MOVLW  04
0CA0:  ADDWF  x67,F
0CA2:  MOVLW  00
0CA4:  ADDWFC x68,F
0CA6:  MOVFF  367,01
0CAA:  MOVLW  04
0CAC:  ADDWF  x68,W
0CAE:  MOVWF  03
0CB0:  MOVF   x65,W
0CB2:  MULLW  08
0CB4:  MOVF   FF3,W
0CB6:  CLRF   x6A
0CB8:  MOVWF  x69
0CBA:  MOVLW  04
0CBC:  ADDWF  x69,F
0CBE:  MOVLW  00
0CC0:  ADDWFC x6A,F
0CC2:  MOVFF  369,FE9
0CC6:  MOVLW  04
0CC8:  ADDWF  x6A,W
0CCA:  MOVWF  FEA
0CCC:  MOVF   FEF,W
0CCE:  ANDLW  43
0CD0:  MOVFF  03,FEA
0CD4:  MOVFF  367,FE9
0CD8:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CDA:  MOVFF  365,367
0CDE:  MOVLB  0
0CE0:  RCALL  0B4E
0CE2:  MOVLB  3
....................       } 
....................    } 
.................... } 
0CE4:  MOVLB  0
0CE6:  GOTO   0D5C (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
2F14:  MOVF   18,W
2F16:  MOVWF  01
.................... } 
2F18:  GOTO   3CB8 (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02F6:  MOVLB  3
02F8:  CLRF   x65
02FA:  MOVF   x65,F
02FC:  BNZ   0312
....................       USB_Interface[i] = 0;   //reset each interface to default 
02FE:  CLRF   03
0300:  MOVF   x65,W
0302:  ADDLW  21
0304:  MOVWF  FE9
0306:  MOVLW  00
0308:  ADDWFC 03,W
030A:  MOVWF  FEA
030C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
030E:  INCF   x65,F
0310:  BRA    02FA
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
0312:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
0314:  MOVLW  01
0316:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0318:  CLRF   17
.................... } 
031A:  MOVLB  0
031C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0220:  MOVLB  3
0222:  BCF    x72.0
0224:  BTFSC  x71.7
0226:  BSF    x72.0
....................     
....................    endpoint &= 0x7F; 
0228:  BCF    x71.7
....................     
....................    if (endpoint > 16) 
022A:  MOVF   x71,W
022C:  SUBLW  10
022E:  BC    0236
....................       return(FALSE); 
0230:  MOVLW  00
0232:  MOVWF  01
0234:  BRA    0280
....................     
....................    if (direction) { //IN 
0236:  BTFSS  x72.0
0238:  BRA    025E
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
023A:  CLRF   03
023C:  MOVF   x71,W
023E:  MOVFF  FF2,373
0242:  BCF    FF2.7
0244:  MOVLB  0
0246:  RCALL  00BA
0248:  MOVLB  3
024A:  BTFSC  x73.7
024C:  BSF    FF2.7
024E:  SUBLW  FF
0250:  BNZ   0256
0252:  MOVLW  00
0254:  BRA    0258
0256:  MOVLW  01
0258:  MOVWF  01
025A:  BRA    0280
....................    } 
....................    else {   //OUT 
025C:  BRA    0280
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
025E:  CLRF   03
0260:  MOVF   x71,W
0262:  MOVFF  FF2,373
0266:  BCF    FF2.7
0268:  MOVLB  0
026A:  RCALL  00BA
026C:  MOVLB  3
026E:  BTFSC  x73.7
0270:  BSF    FF2.7
0272:  SUBLW  FF
0274:  BNZ   027A
0276:  MOVLW  00
0278:  BRA    027C
027A:  MOVLW  01
027C:  MOVWF  01
027E:  BRA    0280
....................    } 
.................... } 
0280:  MOVLB  0
0282:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B4E:  MOVLB  3
0B50:  MOVF   x67,F
0B52:  BNZ   0B6C
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B54:  DECFSZ 17,W
0B56:  BRA    0B60
0B58:  MOVLB  0
0B5A:  RCALL  0364
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B5C:  BRA    0B6A
0B5E:  MOVLB  3
0B60:  MOVF   17,W
0B62:  SUBLW  02
0B64:  BNZ   0B6C
0B66:  MOVLB  0
0B68:  BRA    0B40
0B6A:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0B6C:  MOVLB  0
0B6E:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B1C:  MOVLB  3
0B1E:  MOVF   x67,F
0B20:  BNZ   0B22
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
0B22:  MOVLB  0
0B24:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
0906:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0908:  MOVLB  4
090A:  MOVF   x10,W
090C:  ANDLW  7F
090E:  XORLW  00
0910:  MOVLB  0
0912:  BZ    091E
0914:  XORLW  01
0916:  BZ    0922
0918:  XORLW  03
091A:  BZ    0926
091C:  BRA    092A
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
091E:  BRA    064E
....................          break; 
0920:  BRA    092E
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
0922:  BRA    0706
....................          break; 
0924:  BRA    092E
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0926:  BRA    089C
....................          break; 
0928:  BRA    092E
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
092A:  RCALL  035E
....................          break; 
092C:  BRA    092E
....................    } 
.................... } 
092E:  GOTO   0BA8 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
064E:  MOVLB  4
0650:  MOVF   x11,W
0652:  XORLW  00
0654:  MOVLB  0
0656:  BZ    0672
0658:  XORLW  01
065A:  BZ    0686
065C:  XORLW  02
065E:  BZ    06A0
0660:  XORLW  06
0662:  BZ    06B8
0664:  XORLW  03
0666:  BZ    06CA
0668:  XORLW  0E
066A:  BZ    06CE
066C:  XORLW  01
066E:  BZ    06DE
0670:  BRA    06FE
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0672:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
0676:  MOVLB  4
0678:  CLRF   x51
....................             usb_request_send_response(2); 
067A:  MOVLW  02
067C:  MOVLB  3
067E:  MOVWF  x6A
0680:  MOVLB  0
0682:  RCALL  0358
....................             break; 
0684:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0686:  MOVLB  4
0688:  DECFSZ x12,W
068A:  BRA    069A
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
068C:  MOVLW  01
068E:  ANDWF  19,F
....................                usb_put_0len_0(); 
0690:  MOVLB  3
0692:  CLRF   x6A
0694:  MOVLB  0
0696:  RCALL  0358
....................             } 
....................             else 
0698:  BRA    069E
....................                usb_request_stall(); 
069A:  MOVLB  0
069C:  RCALL  035E
....................             break; 
069E:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
06A0:  MOVLB  4
06A2:  DECFSZ x12,W
06A4:  BRA    06B2
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
06A6:  BSF    19.1
....................                usb_put_0len_0(); 
06A8:  MOVLB  3
06AA:  CLRF   x6A
06AC:  MOVLB  0
06AE:  RCALL  0358
....................             } 
....................             else 
06B0:  BRA    06B6
....................                usb_request_stall(); 
06B2:  MOVLB  0
06B4:  RCALL  035E
....................             break; 
06B6:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06B8:  MOVLW  02
06BA:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06BC:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06C0:  MOVLB  3
06C2:  CLRF   x6A
06C4:  MOVLB  0
06C6:  RCALL  0358
....................             break; 
06C8:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06CA:  BRA    03FE
....................             break; 
06CC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06CE:  MOVFF  18,450
....................             usb_request_send_response(1); 
06D2:  MOVLW  01
06D4:  MOVLB  3
06D6:  MOVWF  x6A
06D8:  MOVLB  0
06DA:  RCALL  0358
....................             break; 
06DC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06DE:  MOVLB  4
06E0:  MOVF   x12,W
06E2:  SUBLW  01
06E4:  BNC   06FA
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06E6:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06EA:  MOVFF  412,367
06EE:  MOVLB  0
06F0:  BRA    047C
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06F2:  MOVLB  3
06F4:  CLRF   x6A
06F6:  MOVLB  0
06F8:  RCALL  0358
....................             } 
....................             break; 
06FA:  MOVLB  0
06FC:  BRA    0702
....................  
....................       default: 
....................             usb_request_stall(); 
06FE:  RCALL  035E
....................             break; 
0700:  BRA    0702
....................    } 
.................... } 
0702:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
0706:  MOVFF  18,367
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
070A:  MOVLB  4
070C:  MOVF   x11,W
070E:  XORLW  00
0710:  MOVLB  0
0712:  BZ    071E
0714:  XORLW  0A
0716:  BZ    0730
0718:  XORLW  01
071A:  BZ    077E
071C:  BRA    07A8
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
071E:  MOVLB  4
0720:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
0722:  CLRF   x51
....................             usb_request_send_response(2); 
0724:  MOVLW  02
0726:  MOVLB  3
0728:  MOVWF  x6A
072A:  MOVLB  0
072C:  RCALL  0358
....................             break; 
072E:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0730:  MOVLB  3
0732:  MOVF   x67,F
0734:  BZ    0778
0736:  MOVLW  01
0738:  SUBWF  x67,W
073A:  CLRF   03
073C:  MOVFF  FF2,368
0740:  BCF    FF2.7
0742:  MOVLB  0
0744:  RCALL  014C
0746:  MOVLB  3
0748:  BTFSC  x68.7
074A:  BSF    FF2.7
074C:  MOVWF  01
074E:  MOVLB  4
0750:  SUBWF  x14,W
0752:  BTFSS  FD8.0
0754:  BRA    075A
0756:  MOVLB  3
0758:  BRA    0778
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
075A:  CLRF   03
075C:  MOVF   x14,W
075E:  ADDLW  21
0760:  MOVWF  FE9
0762:  MOVLW  00
0764:  ADDWFC 03,W
0766:  MOVWF  FEA
0768:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
076C:  MOVLW  01
076E:  MOVLB  3
0770:  MOVWF  x6A
0772:  MOVLB  0
0774:  RCALL  0358
....................             } 
....................             else 
0776:  BRA    077C
....................                usb_request_stall(); 
0778:  MOVLB  0
077A:  RCALL  035E
....................             break; 
077C:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
077E:  MOVLB  3
0780:  MOVF   x67,F
0782:  BZ    07A2
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
0784:  CLRF   03
0786:  MOVLB  4
0788:  MOVF   x14,W
078A:  ADDLW  21
078C:  MOVWF  FE9
078E:  MOVLW  00
0790:  ADDWFC 03,W
0792:  MOVWF  FEA
0794:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0798:  MOVLB  3
079A:  CLRF   x6A
079C:  MOVLB  0
079E:  RCALL  0358
....................             } 
....................             else 
07A0:  BRA    07A6
....................                usb_request_stall(); 
07A2:  MOVLB  0
07A4:  RCALL  035E
....................             break; 
07A6:  BRA    07AC
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
07A8:  RCALL  035E
....................             break; 
07AA:  BRA    07AC
....................    } 
.................... } 
07AC:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
089C:  MOVFF  414,371
08A0:  RCALL  0220
08A2:  MOVF   01,F
08A4:  BZ    0902
....................       switch(usb_ep0_rx_buffer[1]) { 
08A6:  MOVLB  4
08A8:  MOVF   x11,W
08AA:  XORLW  01
08AC:  MOVLB  0
08AE:  BZ    08BA
08B0:  XORLW  02
08B2:  BZ    08CA
08B4:  XORLW  03
08B6:  BZ    08DA
08B8:  BRA    08FE
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08BA:  MOVFF  414,367
08BE:  BRA    07B0
....................                usb_put_0len_0(); 
08C0:  MOVLB  3
08C2:  CLRF   x6A
08C4:  MOVLB  0
08C6:  RCALL  0358
....................                break; 
08C8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08CA:  MOVFF  414,367
08CE:  BRA    07F8
....................                      usb_put_0len_0(); 
08D0:  MOVLB  3
08D2:  CLRF   x6A
08D4:  MOVLB  0
08D6:  RCALL  0358
....................                      break; 
08D8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08DA:  MOVLB  4
08DC:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08DE:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08E0:  MOVFF  414,367
08E4:  MOVLB  0
08E6:  BRA    0842
08E8:  MOVF   01,F
08EA:  BZ    08F2
....................                   usb_ep0_tx_buffer[0]=1; 
08EC:  MOVLW  01
08EE:  MOVLB  4
08F0:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
08F2:  MOVLW  02
08F4:  MOVLB  3
08F6:  MOVWF  x6A
08F8:  MOVLB  0
08FA:  RCALL  0358
....................                break; 
08FC:  BRA    0902
....................  
....................          default: 
....................             usb_request_stall(); 
08FE:  RCALL  035E
....................             break; 
0900:  BRA    0902
....................       } 
....................    } 
.................... } 
0902:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03FE:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
0400:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
0402:  MOVLB  4
0404:  MOVF   x13,W
0406:  XORLW  01
0408:  MOVLB  0
040A:  BZ    0416
040C:  XORLW  03
040E:  BZ    0420
0410:  XORLW  01
0412:  BZ    0426
0414:  BRA    045C
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
0416:  MOVLW  12
0418:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
041A:  MOVLW  03
041C:  MOVWF  1A
....................             break; 
041E:  BRA    0460
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
0420:  MOVLW  20
0422:  MOVWF  20
....................             break; 
0424:  BRA    0460
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
0426:  MOVLW  02
0428:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
042A:  CLRF   03
042C:  MOVLB  4
042E:  MOVF   x12,W
0430:  MOVFF  FF2,367
0434:  BCF    FF2.7
0436:  MOVLB  0
0438:  RCALL  0180
043A:  MOVLB  3
043C:  BTFSC  x67.7
043E:  BSF    FF2.7
0440:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
0442:  CLRF   03
0444:  MOVF   1F,W
0446:  MOVFF  FF2,367
044A:  BCF    FF2.7
044C:  MOVLB  0
044E:  RCALL  0194
0450:  MOVLB  3
0452:  BTFSC  x67.7
0454:  BSF    FF2.7
0456:  MOVWF  20
....................             break; 
0458:  MOVLB  0
045A:  BRA    0460
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
045C:  RCALL  035E
....................             return; 
045E:  BRA    0478
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
0460:  MOVLB  4
0462:  MOVF   x17,F
0464:  BNZ   0470
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
0466:  MOVF   20,W
0468:  SUBWF  x16,W
046A:  BC    0470
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
046C:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0470:  MOVLW  01
0472:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
0474:  MOVLB  0
0476:  RCALL  0364
.................... } 
0478:  GOTO   0702 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B40:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B42:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0B44:  MOVFF  1E,368
0B48:  BRA    0B26
....................    #endif 
.................... } 
0B4A:  GOTO   0B6A (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
0364:  MOVLB  3
0366:  CLRF   x68
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
0368:  MOVF   20,F
036A:  BZ    03E8
036C:  MOVF   x68,W
036E:  SUBLW  3F
0370:  BNC   03E8
....................       switch(USB_stack_status.getdesc_type) { 
0372:  MOVF   1A,W
0374:  XORLW  00
0376:  MOVLB  0
0378:  BZ    0384
037A:  XORLW  02
037C:  BZ    039C
037E:  XORLW  01
0380:  BZ    03B4
0382:  BRA    03CC
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0384:  CLRF   03
0386:  MOVF   1F,W
0388:  MOVFF  FF2,36A
038C:  BCF    FF2.7
038E:  RCALL  011C
0390:  MOVLB  3
0392:  BTFSC  x6A.7
0394:  BSF    FF2.7
0396:  MOVWF  x69
....................             break; 
0398:  MOVLB  0
039A:  BRA    03CC
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
039C:  CLRF   03
039E:  MOVF   1F,W
03A0:  MOVFF  FF2,36A
03A4:  BCF    FF2.7
03A6:  RCALL  0194
03A8:  MOVLB  3
03AA:  BTFSC  x6A.7
03AC:  BSF    FF2.7
03AE:  MOVWF  x69
....................             break; 
03B0:  MOVLB  0
03B2:  BRA    03CC
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
03B4:  CLRF   03
03B6:  MOVF   1F,W
03B8:  MOVFF  FF2,36A
03BC:  BCF    FF2.7
03BE:  RCALL  015E
03C0:  MOVLB  3
03C2:  BTFSC  x6A.7
03C4:  BSF    FF2.7
03C6:  MOVWF  x69
....................             break; 
03C8:  MOVLB  0
03CA:  BRA    03CC
....................       } 
....................       usb_getdesc_ptr++; 
03CC:  INCF   1F,F
....................       usb_getdesc_len--; 
03CE:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
03D0:  MOVLB  3
03D2:  MOVF   x68,W
03D4:  INCF   x68,F
03D6:  CLRF   03
03D8:  ADDLW  50
03DA:  MOVWF  FE9
03DC:  MOVLW  04
03DE:  ADDWFC 03,W
03E0:  MOVWF  FEA
03E2:  MOVFF  369,FEF
....................    } 
03E6:  BRA    0368
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03E8:  MOVF   20,F
03EA:  BNZ   03F4
03EC:  MOVF   x68,W
03EE:  SUBLW  40
03F0:  BZ    03F4
....................          USB_stack_status.dev_req = NONE; 
03F2:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
03F4:  MOVFF  368,36A
03F8:  MOVLB  0
03FA:  RCALL  0358
.................... } 
03FC:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0; 
.................... short emergency=0,desfoguelento=0,flag_agua=0,TiempoFuncionamiento=0,flag_agua2=0,CamaraOUT=0,CamaraIN=0,flag_reservorio=0,flag_presostato=0; 
.................... int8 Menu=1,bite=0,TamanoCadena=0,i=0,Decimal=0,r=0,t=0,TiempoControl=0,q=0,z=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Alarma=0,AlarmaAgua=0,AlarmaTemp=0; 
.................... int8 Puerta=0,Parada=0,NivelReservorio=0,NivelTanque=0,Presostato=0,ADC_Pt100=0,y=0,Chksum=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,t_exhaust=0,tinicio=0,tagua=0,treservorio=0,tdesfogue=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,CadenaRecibida=0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0, est=0,Visua=0,flagtimer=0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,R2=0,fin_ciclo=0,tiempo_desfogue=0,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0,p=0,MediaMovil=2; 
.................... float V0=0.0,R1=6200.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0,d4=0.0,d5=0.0; 
.................... float V1=0.0,Presion=0.0,d6=0.0,d7=0.0,d8=0.0; 
.................... float Setpoint=0.0,Temperatura=0.0,TempUSB=0.0,PresionCamara=0.0,K=0.006429,p1=5.3232,p2=-16.8884,p3=37.3752,p4=-6.2316; 
....................  
.................... char datoTx[11]; 
.................... char datoRx[14]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte posicion, buffer[0x10], txbuf[0x11],rxbuf[0x11];     //Buffer de memoria 
.................... short EnvioMaster;               //Indicación de fin del byte enviado por el master 
.................... short SolicitudMaster=0;         //Indicación de fin de la entrega del byte solicitado por el master 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0D8A:  BTFSC  FC7.5
0D8C:  BRA    0D96
0D8E:  MOVLB  3
0D90:  CLRF   x1E
0D92:  BTFSC  FC7.2
0D94:  BSF    x1E.7
0D96:  MOVLB  3
0D98:  MOVF   x1E,W
0D9A:  INCF   x1E,F
0D9C:  MOVLB  2
0D9E:  MOVWF  xE7
....................  
....................    /* Solicitud de lectura del esclavo por el master */ 
....................    if(fstate == 0x80) {          
0DA0:  MOVF   xE7,W
0DA2:  SUBLW  80
0DA4:  BNZ   0DC4
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0DA6:  CLRF   03
0DA8:  MOVF   xE8,W
0DAA:  ADDLW  F9
0DAC:  MOVWF  FE9
0DAE:  MOVLW  02
0DB0:  ADDWFC 03,W
0DB2:  MOVWF  FEA
0DB4:  MOVFF  FEF,365
0DB8:  MOVFF  365,366
0DBC:  MOVLB  0
0DBE:  BRA    0D72
....................       //i2c_write (txbuf[0]);       
....................       //i2c_write ((int8)V2); 
....................    } 
....................    /* Sino está solicitando lectura es que está enviando algo */ 
....................    else {                              //Sino es que hay dato en el bus I2C... 
0DC0:  BRA    0DF8
0DC2:  MOVLB  2
....................       incoming = i2c_read();           //... lo lee 
0DC4:  BCF    FC6.6
0DC6:  BTFSS  F9E.3
0DC8:  BRA    0DC6
0DCA:  MOVF   FC9,W
0DCC:  BSF    FC6.4
0DCE:  MOVLB  3
0DD0:  MOVWF  x64
....................     
....................  
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0DD2:  MOVLB  2
0DD4:  DECFSZ xE7,W
0DD6:  BRA    0DDE
....................          posicion = incoming;          //Se guarda posición 
0DD8:  MOVFF  364,2E8
....................       } 
....................       else if (fState == 2) {          //Información recibida corresponde al dato 
0DDC:  BRA    0DF6
0DDE:  MOVF   xE7,W
0DE0:  SUBLW  02
0DE2:  BNZ   0DF6
....................          rxbuf[posicion] = incoming; 
0DE4:  CLRF   03
0DE6:  MOVF   xE8,W
0DE8:  ADDLW  0A
0DEA:  MOVWF  FE9
0DEC:  MOVLW  03
0DEE:  ADDWFC 03,W
0DF0:  MOVWF  FEA
0DF2:  MOVFF  364,FEF
0DF6:  MOVLB  0
....................       } 
....................   } 
.................... } 
....................  
0DF8:  BCF    F9E.3
0DFA:  GOTO   0078
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
141A:  MOVLB  2
141C:  MOVF   x20,W
141E:  MULLW  04
1420:  MOVF   FF3,W
1422:  CLRF   03
1424:  ADDLW  F2
1426:  MOVWF  FE9
1428:  MOVLW  01
142A:  ADDWFC 03,W
142C:  MOVWF  FEA
142E:  MOVFF  26F,FEF
1432:  MOVFF  270,FEC
1436:  MOVFF  271,FEC
143A:  MOVFF  272,FEC
....................    y++; 
143E:  INCF   x20,F
....................    if(y>=2) 
1440:  MOVF   x20,W
1442:  SUBLW  01
1444:  BC    1480
....................    { 
....................       y=0; 
1446:  CLRF   x20
....................       Aumento=X[1]-X[0]; 
1448:  BSF    FD8.1
144A:  MOVFF  1F9,357
144E:  MOVFF  1F8,356
1452:  MOVFF  1F7,355
1456:  MOVFF  1F6,354
145A:  MOVFF  1F5,35B
145E:  MOVFF  1F4,35A
1462:  MOVFF  1F3,359
1466:  MOVFF  1F2,358
146A:  MOVLB  0
146C:  RCALL  11A2
146E:  MOVFF  03,201
1472:  MOVFF  02,200
1476:  MOVFF  01,1FF
147A:  MOVFF  00,1FE
147E:  MOVLB  2
....................    } 
.................... } 
1480:  MOVLB  0
1482:  GOTO   15F2 (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
0FF0:  MOVLB  3
0FF2:  RLCF   x20,W
0FF4:  MOVWF  00
0FF6:  RLCF   00,F
0FF8:  MOVLW  FC
0FFA:  ANDWF  00,F
0FFC:  MOVFF  00,01
1000:  MOVF   FC2,W
1002:  ANDLW  C3
1004:  IORWF  00,W
1006:  MOVWF  FC2
1008:  MOVLW  01
100A:  MOVWF  x25
100C:  MOVLB  0
100E:  RCALL  0F90
1010:  BSF    FC2.1
1012:  BTFSC  FC2.1
1014:  BRA    1012
1016:  MOVFF  FC4,355
101A:  MOVFF  FC3,354
101E:  MOVLB  0
1020:  RCALL  0FBA
1022:  MOVFF  03,324
1026:  MOVFF  02,323
102A:  MOVFF  01,322
102E:  MOVFF  00,321
1032:  MOVFF  321,00
1036:  MOVFF  322,01
103A:  MOVFF  323,02
103E:  MOVFF  324,03
.................... } 
1042:  RETLW  00
.................... float Leer_Sensor(int media) 
.................... { 
....................    Prom=0.0; 
*
1486:  MOVLB  2
1488:  CLRF   x6E
148A:  CLRF   x6D
148C:  CLRF   x6C
148E:  CLRF   x6B
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
1490:  MOVLB  3
1492:  CLRF   x20
1494:  MOVLB  0
1496:  RCALL  0FF0
1498:  MOVFF  03,256
149C:  MOVFF  02,255
14A0:  MOVFF  01,254
14A4:  MOVFF  00,253
....................    V0 = V0/41.16; // Se elimina la ganancia 
14A8:  MOVFF  256,353
14AC:  MOVFF  255,352
14B0:  MOVFF  254,351
14B4:  MOVFF  253,350
14B8:  MOVLW  D7
14BA:  MOVLB  3
14BC:  MOVWF  x57
14BE:  MOVLW  A3
14C0:  MOVWF  x56
14C2:  MOVLW  24
14C4:  MOVWF  x55
14C6:  MOVLW  84
14C8:  MOVWF  x54
14CA:  MOVLB  0
14CC:  RCALL  1044
14CE:  MOVFF  03,256
14D2:  MOVFF  02,255
14D6:  MOVFF  01,254
14DA:  MOVFF  00,253
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); // Se calcula el valor de la PT100 
14DE:  MOVLB  3
14E0:  CLRF   x55
14E2:  MOVFF  24B,354
14E6:  MOVLB  0
14E8:  RCALL  0FBA
14EA:  BCF    FD8.1
14EC:  MOVFF  25A,357
14F0:  MOVFF  259,356
14F4:  MOVFF  258,355
14F8:  MOVFF  257,354
14FC:  MOVFF  03,35B
1500:  MOVFF  02,35A
1504:  MOVFF  01,359
1508:  MOVFF  00,358
150C:  RCALL  11A2
150E:  MOVFF  00,320
1512:  MOVFF  01,321
1516:  MOVFF  02,322
151A:  MOVFF  03,323
151E:  MOVLB  3
1520:  CLRF   x53
1522:  MOVLW  C0
1524:  MOVWF  x52
1526:  MOVLW  7F
1528:  MOVWF  x51
152A:  MOVLW  88
152C:  MOVWF  x50
152E:  MOVFF  256,357
1532:  MOVFF  255,356
1536:  MOVFF  254,355
153A:  MOVFF  253,354
153E:  MOVLB  0
1540:  RCALL  1044
1542:  MOVFF  00,324
1546:  MOVFF  01,325
154A:  MOVFF  02,326
154E:  MOVFF  03,327
1552:  BSF    FD8.1
1554:  MOVFF  03,357
1558:  MOVFF  02,356
155C:  MOVFF  01,355
1560:  MOVFF  00,354
1564:  MOVLB  3
1566:  CLRF   x5B
1568:  CLRF   x5A
156A:  CLRF   x59
156C:  MOVLW  7F
156E:  MOVWF  x58
1570:  MOVLB  0
1572:  RCALL  11A2
1574:  MOVFF  323,353
1578:  MOVFF  322,352
157C:  MOVFF  321,351
1580:  MOVFF  320,350
1584:  MOVFF  03,357
1588:  MOVFF  02,356
158C:  MOVFF  01,355
1590:  MOVFF  00,354
1594:  RCALL  1044
1596:  MOVFF  03,25E
159A:  MOVFF  02,25D
159E:  MOVFF  01,25C
15A2:  MOVFF  00,25B
....................    Pt=Pt-0.1; 
15A6:  BSF    FD8.1
15A8:  MOVFF  25E,357
15AC:  MOVFF  25D,356
15B0:  MOVFF  25C,355
15B4:  MOVFF  25B,354
15B8:  MOVLW  CD
15BA:  MOVLB  3
15BC:  MOVWF  x5B
15BE:  MOVLW  CC
15C0:  MOVWF  x5A
15C2:  MOVLW  4C
15C4:  MOVWF  x59
15C6:  MOVLW  7B
15C8:  MOVWF  x58
15CA:  MOVLB  0
15CC:  RCALL  11A2
15CE:  MOVFF  03,25E
15D2:  MOVFF  02,25D
15D6:  MOVFF  01,25C
15DA:  MOVFF  00,25B
....................    //Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>(media-1)) 
15DE:  MOVLW  01
15E0:  MOVLB  3
15E2:  SUBWF  x1F,W
15E4:  MOVLB  2
15E6:  SUBWF  x48,W
15E8:  BZ    15F4
15EA:  BNC   15F4
....................    {l=0;ActualizaRecta();} 
15EC:  CLRF   x48
15EE:  MOVLB  0
15F0:  BRA    141A
15F2:  MOVLB  2
15F4:  CLRF   16
15F6:  BTFSC  FF2.7
15F8:  BSF    16.7
15FA:  BCF    FF2.7
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=Pt;l++; 
15FC:  MOVLB  3
15FE:  CLRF   x65
1600:  MOVFF  248,364
1604:  CLRF   x67
1606:  MOVLW  04
1608:  MOVWF  x66
160A:  MOVLB  0
160C:  CALL   0DFE
1610:  BTFSC  16.7
1612:  BSF    FF2.7
1614:  MOVF   01,W
1616:  ADDLW  62
1618:  MOVWF  FE9
161A:  MOVLW  00
161C:  ADDWFC 02,W
161E:  MOVWF  FEA
1620:  MOVFF  25B,FEF
1624:  MOVFF  25C,FEC
1628:  MOVFF  25D,FEC
162C:  MOVFF  25E,FEC
1630:  MOVLB  2
1632:  INCF   x48,F
....................           
....................    for(h=0;h<media;h++) 
1634:  CLRF   x47
1636:  MOVLB  3
1638:  MOVF   x1F,W
163A:  MOVLB  2
163C:  SUBWF  x47,W
163E:  BC    16CA
1640:  CLRF   16
1642:  BTFSC  FF2.7
1644:  BSF    16.7
1646:  BCF    FF2.7
....................    { 
....................       Prom+=promedio[h]; 
1648:  MOVLB  3
164A:  CLRF   x65
164C:  MOVFF  247,364
1650:  CLRF   x67
1652:  MOVLW  04
1654:  MOVWF  x66
1656:  MOVLB  0
1658:  CALL   0DFE
165C:  BTFSC  16.7
165E:  BSF    FF2.7
1660:  MOVFF  02,03
1664:  MOVF   01,W
1666:  ADDLW  62
1668:  MOVWF  FE9
166A:  MOVLW  00
166C:  ADDWFC 02,W
166E:  MOVWF  FEA
1670:  MOVFF  FEF,00
1674:  MOVFF  FEC,01
1678:  MOVFF  FEC,02
167C:  MOVFF  FEC,03
1680:  MOVFF  FEA,321
1684:  MOVFF  FE9,320
1688:  BCF    FD8.1
168A:  MOVFF  26E,357
168E:  MOVFF  26D,356
1692:  MOVFF  26C,355
1696:  MOVFF  26B,354
169A:  MOVFF  03,35B
169E:  MOVFF  02,35A
16A2:  MOVFF  01,359
16A6:  MOVFF  00,358
16AA:  RCALL  11A2
16AC:  MOVFF  321,FEA
16B0:  MOVFF  320,FE9
16B4:  MOVFF  03,26E
16B8:  MOVFF  02,26D
16BC:  MOVFF  01,26C
16C0:  MOVFF  00,26B
....................    }  
16C4:  MOVLB  2
16C6:  INCF   x47,F
16C8:  BRA    1636
....................    Prom=Prom/media;    
16CA:  MOVLB  3
16CC:  CLRF   x55
16CE:  MOVFF  31F,354
16D2:  MOVLB  0
16D4:  RCALL  0FBA
16D6:  MOVFF  26E,353
16DA:  MOVFF  26D,352
16DE:  MOVFF  26C,351
16E2:  MOVFF  26B,350
16E6:  MOVFF  03,357
16EA:  MOVFF  02,356
16EE:  MOVFF  01,355
16F2:  MOVFF  00,354
16F6:  RCALL  1044
16F8:  MOVFF  03,26E
16FC:  MOVFF  02,26D
1700:  MOVFF  01,26C
1704:  MOVFF  00,26B
....................    Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
1708:  BSF    FD8.1
170A:  MOVFF  26E,357
170E:  MOVFF  26D,356
1712:  MOVFF  26C,355
1716:  MOVFF  26B,354
171A:  MOVLB  3
171C:  CLRF   x5B
171E:  CLRF   x5A
1720:  MOVLW  48
1722:  MOVWF  x59
1724:  MOVLW  85
1726:  MOVWF  x58
1728:  MOVLB  0
172A:  RCALL  11A2
172C:  MOVFF  00,320
1730:  MOVFF  01,321
1734:  MOVFF  02,322
1738:  MOVFF  03,323
173C:  MOVFF  03,353
1740:  MOVFF  02,352
1744:  MOVFF  01,351
1748:  MOVFF  00,350
174C:  MOVLW  B8
174E:  MOVLB  3
1750:  MOVWF  x57
1752:  MOVLW  1E
1754:  MOVWF  x56
1756:  MOVLW  45
1758:  MOVWF  x55
175A:  MOVLW  7D
175C:  MOVWF  x54
175E:  MOVLB  0
1760:  RCALL  1044
1762:  MOVFF  03,272
1766:  MOVFF  02,271
176A:  MOVFF  01,270
176E:  MOVFF  00,26F
....................    //Prom+=((float)Ajuste-(float)Ajusten); 
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
1772:  MOVLB  3
1774:  CLRF   x55
1776:  MOVFF  249,354
177A:  MOVLB  0
177C:  RCALL  0FBA
177E:  MOVFF  00,320
1782:  MOVFF  01,321
1786:  MOVFF  02,322
178A:  MOVFF  03,323
178E:  MOVLB  3
1790:  CLRF   x55
1792:  MOVFF  24A,354
1796:  MOVLB  0
1798:  RCALL  0FBA
179A:  BSF    FD8.1
179C:  MOVFF  323,357
17A0:  MOVFF  322,356
17A4:  MOVFF  321,355
17A8:  MOVFF  320,354
17AC:  MOVFF  03,35B
17B0:  MOVFF  02,35A
17B4:  MOVFF  01,359
17B8:  MOVFF  00,358
17BC:  RCALL  11A2
17BE:  BCF    FD8.1
17C0:  MOVFF  272,357
17C4:  MOVFF  271,356
17C8:  MOVFF  270,355
17CC:  MOVFF  26F,354
17D0:  MOVFF  03,35B
17D4:  MOVFF  02,35A
17D8:  MOVFF  01,359
17DC:  MOVFF  00,358
17E0:  RCALL  11A2
17E2:  MOVFF  03,272
17E6:  MOVFF  02,271
17EA:  MOVFF  01,270
17EE:  MOVFF  00,26F
....................     
....................    //return Prom; 
....................    return Temperature; 
17F2:  MOVFF  26F,00
17F6:  MOVFF  270,01
17FA:  MOVFF  271,02
17FE:  MOVFF  272,03
.................... } 
1802:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
....................    promediopresion=0.0; 
*
2AEE:  MOVLB  1
2AF0:  CLRF   xFD
2AF2:  CLRF   xFC
2AF4:  CLRF   xFB
2AF6:  CLRF   xFA
....................    V1 = sensores(1);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
2AF8:  MOVLW  01
2AFA:  MOVLB  3
2AFC:  MOVWF  x20
2AFE:  MOVLB  0
2B00:  CALL   0FF0
2B04:  MOVFF  03,292
2B08:  MOVFF  02,291
2B0C:  MOVFF  01,290
2B10:  MOVFF  00,28F
....................    V1 = V1*(5.0/1023.0); 
2B14:  MOVFF  292,353
2B18:  MOVFF  291,352
2B1C:  MOVFF  290,351
2B20:  MOVFF  28F,350
2B24:  MOVLW  0A
2B26:  MOVLB  3
2B28:  MOVWF  x57
2B2A:  MOVLW  28
2B2C:  MOVWF  x56
2B2E:  MOVLW  20
2B30:  MOVWF  x55
2B32:  MOVLW  77
2B34:  MOVWF  x54
2B36:  MOVLB  0
2B38:  CALL   1804
2B3C:  MOVFF  03,292
2B40:  MOVFF  02,291
2B44:  MOVFF  01,290
2B48:  MOVFF  00,28F
....................    //Presion=(V1-0.2)/(K); 
....................    //Presion=Presion/0.9; 
....................    Presion=(pow(V1,3)*p1)+(pow(V1,2)*p2)+(V1*p3)+p4; // Polinomio obtenido con Matlab 
2B4C:  MOVFF  292,327
2B50:  MOVFF  291,326
2B54:  MOVFF  290,325
2B58:  MOVFF  28F,324
2B5C:  MOVLB  3
2B5E:  CLRF   x2B
2B60:  CLRF   x2A
2B62:  MOVLW  40
2B64:  MOVWF  x29
2B66:  MOVLW  80
2B68:  MOVWF  x28
2B6A:  MOVLB  0
2B6C:  RCALL  27E2
2B6E:  MOVFF  00,320
2B72:  MOVFF  01,321
2B76:  MOVFF  02,322
2B7A:  MOVFF  03,323
2B7E:  MOVFF  03,353
2B82:  MOVFF  02,352
2B86:  MOVFF  01,351
2B8A:  MOVFF  00,350
2B8E:  MOVFF  2BA,357
2B92:  MOVFF  2B9,356
2B96:  MOVFF  2B8,355
2B9A:  MOVFF  2B7,354
2B9E:  CALL   1804
2BA2:  MOVFF  00,320
2BA6:  MOVFF  01,321
2BAA:  MOVFF  02,322
2BAE:  MOVFF  03,323
2BB2:  MOVFF  292,327
2BB6:  MOVFF  291,326
2BBA:  MOVFF  290,325
2BBE:  MOVFF  28F,324
2BC2:  MOVLB  3
2BC4:  CLRF   x2B
2BC6:  CLRF   x2A
2BC8:  CLRF   x29
2BCA:  MOVLW  80
2BCC:  MOVWF  x28
2BCE:  MOVLB  0
2BD0:  RCALL  27E2
2BD2:  MOVFF  00,324
2BD6:  MOVFF  01,325
2BDA:  MOVFF  02,326
2BDE:  MOVFF  03,327
2BE2:  MOVFF  03,353
2BE6:  MOVFF  02,352
2BEA:  MOVFF  01,351
2BEE:  MOVFF  00,350
2BF2:  MOVFF  2BE,357
2BF6:  MOVFF  2BD,356
2BFA:  MOVFF  2BC,355
2BFE:  MOVFF  2BB,354
2C02:  CALL   1804
2C06:  MOVFF  FEA,325
2C0A:  MOVFF  FE9,324
2C0E:  BCF    FD8.1
2C10:  MOVFF  323,357
2C14:  MOVFF  322,356
2C18:  MOVFF  321,355
2C1C:  MOVFF  320,354
2C20:  MOVFF  03,35B
2C24:  MOVFF  02,35A
2C28:  MOVFF  01,359
2C2C:  MOVFF  00,358
2C30:  CALL   11A2
2C34:  MOVFF  325,FEA
2C38:  MOVFF  324,FE9
2C3C:  MOVFF  00,320
2C40:  MOVFF  01,321
2C44:  MOVFF  02,322
2C48:  MOVFF  03,323
2C4C:  MOVFF  292,353
2C50:  MOVFF  291,352
2C54:  MOVFF  290,351
2C58:  MOVFF  28F,350
2C5C:  MOVFF  2C2,357
2C60:  MOVFF  2C1,356
2C64:  MOVFF  2C0,355
2C68:  MOVFF  2BF,354
2C6C:  CALL   1804
2C70:  MOVFF  FEA,327
2C74:  MOVFF  FE9,326
2C78:  BCF    FD8.1
2C7A:  MOVFF  323,357
2C7E:  MOVFF  322,356
2C82:  MOVFF  321,355
2C86:  MOVFF  320,354
2C8A:  MOVFF  03,35B
2C8E:  MOVFF  02,35A
2C92:  MOVFF  01,359
2C96:  MOVFF  00,358
2C9A:  CALL   11A2
2C9E:  MOVFF  327,FEA
2CA2:  MOVFF  326,FE9
2CA6:  MOVFF  00,320
2CAA:  MOVFF  01,321
2CAE:  MOVFF  02,322
2CB2:  MOVFF  03,323
2CB6:  MOVFF  FEA,329
2CBA:  MOVFF  FE9,328
2CBE:  BCF    FD8.1
2CC0:  MOVFF  03,357
2CC4:  MOVFF  02,356
2CC8:  MOVFF  01,355
2CCC:  MOVFF  00,354
2CD0:  MOVFF  2C6,35B
2CD4:  MOVFF  2C5,35A
2CD8:  MOVFF  2C4,359
2CDC:  MOVFF  2C3,358
2CE0:  CALL   11A2
2CE4:  MOVFF  329,FEA
2CE8:  MOVFF  328,FE9
2CEC:  MOVFF  03,296
2CF0:  MOVFF  02,295
2CF4:  MOVFF  01,294
2CF8:  MOVFF  00,293
....................    Presion=Presion/0.145; 
2CFC:  MOVFF  296,353
2D00:  MOVFF  295,352
2D04:  MOVFF  294,351
2D08:  MOVFF  293,350
2D0C:  MOVLW  E1
2D0E:  MOVLB  3
2D10:  MOVWF  x57
2D12:  MOVLW  7A
2D14:  MOVWF  x56
2D16:  MOVLW  14
2D18:  MOVWF  x55
2D1A:  MOVLW  7C
2D1C:  MOVWF  x54
2D1E:  MOVLB  0
2D20:  CALL   1044
2D24:  MOVFF  03,296
2D28:  MOVFF  02,295
2D2C:  MOVFF  01,294
2D30:  MOVFF  00,293
....................     
....................    if(Presion<2.0) 
2D34:  MOVFF  296,353
2D38:  MOVFF  295,352
2D3C:  MOVFF  294,351
2D40:  MOVFF  293,350
2D44:  MOVLB  3
2D46:  CLRF   x57
2D48:  CLRF   x56
2D4A:  CLRF   x55
2D4C:  MOVLW  80
2D4E:  MOVWF  x54
2D50:  MOVLB  0
2D52:  CALL   18FA
2D56:  BNC   2D62
....................    { 
....................       Presion=0.0; 
2D58:  MOVLB  2
2D5A:  CLRF   x96
2D5C:  CLRF   x95
2D5E:  CLRF   x94
2D60:  CLRF   x93
....................    } 
....................     
....................    if(r>media-1) 
2D62:  MOVLW  01
2D64:  MOVLB  3
2D66:  SUBWF  x1F,W
2D68:  MOVLB  2
2D6A:  SUBWF  x09,W
2D6C:  BZ    2D72
2D6E:  BNC   2D72
....................    {r=0;} 
2D70:  CLRF   x09
....................    PromPresion[r]=Presion;r++; 
2D72:  MOVF   x09,W
2D74:  MULLW  04
2D76:  MOVF   FF3,W
2D78:  CLRF   03
2D7A:  ADDLW  A2
2D7C:  MOVWF  FE9
2D7E:  MOVLW  01
2D80:  ADDWFC 03,W
2D82:  MOVWF  FEA
2D84:  MOVFF  293,FEF
2D88:  MOVFF  294,FEC
2D8C:  MOVFF  295,FEC
2D90:  MOVFF  296,FEC
2D94:  INCF   x09,F
....................           
....................    for(t=0;t<=(media-1);t++) 
2D96:  CLRF   x0A
2D98:  MOVLW  01
2D9A:  MOVLB  3
2D9C:  SUBWF  x1F,W
2D9E:  MOVLB  2
2DA0:  SUBWF  x0A,W
2DA2:  BZ    2DA6
2DA4:  BC    2E16
....................    { 
....................       promediopresion+=PromPresion[t]; 
2DA6:  MOVF   x0A,W
2DA8:  MULLW  04
2DAA:  MOVF   FF3,W
2DAC:  CLRF   03
2DAE:  ADDLW  A2
2DB0:  MOVWF  FE9
2DB2:  MOVLW  01
2DB4:  ADDWFC 03,W
2DB6:  MOVWF  FEA
2DB8:  MOVFF  FEF,00
2DBC:  MOVFF  FEC,01
2DC0:  MOVFF  FEC,02
2DC4:  MOVFF  FEC,03
2DC8:  MOVFF  FEA,321
2DCC:  MOVFF  FE9,320
2DD0:  BCF    FD8.1
2DD2:  MOVFF  1FD,357
2DD6:  MOVFF  1FC,356
2DDA:  MOVFF  1FB,355
2DDE:  MOVFF  1FA,354
2DE2:  MOVFF  03,35B
2DE6:  MOVFF  02,35A
2DEA:  MOVFF  01,359
2DEE:  MOVFF  00,358
2DF2:  MOVLB  0
2DF4:  CALL   11A2
2DF8:  MOVFF  321,FEA
2DFC:  MOVFF  320,FE9
2E00:  MOVFF  03,1FD
2E04:  MOVFF  02,1FC
2E08:  MOVFF  01,1FB
2E0C:  MOVFF  00,1FA
....................    }  
2E10:  MOVLB  2
2E12:  INCF   x0A,F
2E14:  BRA    2D98
....................    promediopresion=promediopresion/media;    
2E16:  MOVLB  3
2E18:  CLRF   x55
2E1A:  MOVFF  31F,354
2E1E:  MOVLB  0
2E20:  CALL   0FBA
2E24:  MOVFF  1FD,353
2E28:  MOVFF  1FC,352
2E2C:  MOVFF  1FB,351
2E30:  MOVFF  1FA,350
2E34:  MOVFF  03,357
2E38:  MOVFF  02,356
2E3C:  MOVFF  01,355
2E40:  MOVFF  00,354
2E44:  CALL   1044
2E48:  MOVFF  03,1FD
2E4C:  MOVFF  02,1FC
2E50:  MOVFF  01,1FB
2E54:  MOVFF  00,1FA
....................     
....................    return promediopresion; 
2E58:  MOVFF  1FA,00
2E5C:  MOVFF  1FB,01
2E60:  MOVFF  1FC,02
2E64:  MOVFF  1FD,03
.................... } 
2E68:  RETLW  00
....................  
.................... void Carga_Vector(void){ 
....................    txbuf[0]=Puerta; 
*
2EBC:  MOVFF  21A,2F9
....................    txbuf[1]=Parada; 
2EC0:  MOVFF  21B,2FA
....................    txbuf[2]=NivelReservorio; 
2EC4:  MOVFF  21C,2FB
....................    txbuf[3]=flag_agua; 
2EC8:  MOVLB  2
2ECA:  CLRF   xFC
2ECC:  BTFSC  x02.2
2ECE:  INCF   xFC,F
....................    txbuf[4]=Presostato; 
2ED0:  MOVFF  21E,2FD
....................    txbuf[5]=(int8)Temperatura; 
2ED4:  MOVFF  2AA,353
2ED8:  MOVFF  2A9,352
2EDC:  MOVFF  2A8,351
2EE0:  MOVFF  2A7,350
2EE4:  MOVLB  0
2EE6:  CALL   1974
2EEA:  MOVFF  01,2FE
....................    txbuf[6]=Alarma; 
2EEE:  MOVFF  217,2FF
....................    txbuf[7]=AlarmaAgua; 
2EF2:  MOVFF  218,300
....................    txbuf[8]=Chksum; 
2EF6:  MOVFF  221,301
....................    txbuf[9]=(int8)d3; 
2EFA:  MOVFF  286,353
2EFE:  MOVFF  285,352
2F02:  MOVFF  284,351
2F06:  MOVFF  283,350
2F0A:  CALL   1974
2F0E:  MOVFF  01,302
.................... } 
2F12:  RETLW  00
....................  
.................... void Lee_Vector(void){ 
....................    Resistencia=rxbuf[0]; 
*
2E6A:  MOVFF  30A,20E
....................    EVDesfogue=rxbuf[1]; 
2E6E:  MOVFF  30B,20F
....................    EVAgua=rxbuf[2]; 
2E72:  MOVFF  30C,210
....................    EVTrampa=rxbuf[3]; 
2E76:  MOVFF  30D,211
....................    MotorPuerta=rxbuf[4]; 
2E7A:  MOVFF  30E,212
....................    EVEntradaAgua=rxbuf[5]; 
2E7E:  MOVFF  30F,213
....................    BombaVacio=rxbuf[6]; 
2E82:  MOVFF  310,214
....................    BombaAgua=rxbuf[7]; 
2E86:  MOVFF  311,215
....................    Control=rxbuf[8]; 
2E8A:  MOVFF  312,216
....................    Setpoint=rxbuf[9]; 
2E8E:  MOVLB  3
2E90:  CLRF   x55
2E92:  MOVFF  313,354
2E96:  MOVLB  0
2E98:  CALL   0FBA
2E9C:  MOVFF  03,2A6
2EA0:  MOVFF  02,2A5
2EA4:  MOVFF  01,2A4
2EA8:  MOVFF  00,2A3
....................    Chksum=rxbuf[10]; 
2EAC:  MOVFF  314,221
....................    Nivel=rxbuf[12]; 
2EB0:  MOVLB  2
2EB2:  CLRF   x2B
2EB4:  MOVFF  316,22A
.................... } 
2EB8:  MOVLB  0
2EBA:  RETLW  00
....................  
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
*
0E20:  CLRF   FD7
0E22:  CLRF   FD6
....................    t_exhaust++; 
0E24:  MOVLB  2
0E26:  INCF   x2C,F
0E28:  BTFSC  FD8.2
0E2A:  INCF   x2D,F
....................    if(EVDesfogue==2 && Presostato>=2) 
0E2C:  MOVF   x0F,W
0E2E:  SUBLW  02
0E30:  BNZ   0EA2
0E32:  MOVF   x1E,W
0E34:  SUBLW  01
0E36:  BC    0EA2
....................    { 
....................       EV_Agua_off; 
0E38:  BCF    F8A.4
0E3A:  BCF    F93.4
....................       EV_Paso_off; 
0E3C:  BCF    F8A.3
0E3E:  BCF    F93.3
....................       Resistencia_off; 
0E40:  BCF    F8B.0
0E42:  BCF    F94.0
....................       Resistencia2_off; 
0E44:  BCF    F8B.1
0E46:  BCF    F94.1
....................       if(Nivel<6) 
0E48:  MOVF   x2B,F
0E4A:  BNZ   0E9E
0E4C:  MOVF   x2A,W
0E4E:  SUBLW  05
0E50:  BNC   0E9E
....................       { 
....................          if(t_exhaust<=(9990*Nivel)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0E52:  MOVLW  27
0E54:  MOVLB  3
0E56:  MOVWF  x65
0E58:  MOVLW  06
0E5A:  MOVWF  x64
0E5C:  MOVFF  22B,367
0E60:  MOVFF  22A,366
0E64:  MOVLB  0
0E66:  RCALL  0DFE
0E68:  MOVFF  02,03
0E6C:  MOVF   01,W
0E6E:  MOVLB  2
0E70:  MOVF   x2D,W
0E72:  SUBWF  02,W
0E74:  BNC   0E84
0E76:  BNZ   0E7E
0E78:  MOVF   x2C,W
0E7A:  SUBWF  01,W
0E7C:  BNC   0E84
....................          { 
....................             //Resistencia_on; 
....................             EV_Desfogue_on; 
0E7E:  BSF    F8A.2
0E80:  BCF    F93.2
....................          } 
....................          else          
0E82:  BRA    0E88
....................          { 
....................             //Resistencia_off; 
....................             EV_Desfogue_off; 
0E84:  BCF    F8A.2
0E86:  BCF    F93.2
....................          }    
....................        
....................          if(t_exhaust>=60000) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0E88:  MOVF   x2D,W
0E8A:  SUBLW  E9
0E8C:  BC    0E9C
0E8E:  XORLW  FF
0E90:  BNZ   0E98
0E92:  MOVF   x2C,W
0E94:  SUBLW  5F
0E96:  BC    0E9C
....................          { 
....................             t_exhaust=0; 
0E98:  CLRF   x2D
0E9A:  CLRF   x2C
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       } 
....................       else 
0E9C:  BRA    0EA2
....................       { 
....................          EV_Desfogue_on; 
0E9E:  BSF    F8A.2
0EA0:  BCF    F93.2
....................       } 
....................    }   
.................... } 
....................  
0EA2:  BCF    FF2.2
0EA4:  MOVLB  0
0EA6:  GOTO   0078
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
0EAA:  MOVLW  15
0EAC:  MOVWF  FCF
0EAE:  MOVLW  A0
0EB0:  MOVWF  FCE
....................    tiempos++; 
0EB2:  MOVLB  2
0EB4:  INCF   x22,F
0EB6:  BTFSC  FD8.2
0EB8:  INCF   x23,F
....................    tiempos3++; 
0EBA:  INCF   x24,F
0EBC:  BTFSC  FD8.2
0EBE:  INCF   x25,F
....................    tiempoctrl++; 
0EC0:  INCF   x26,F
0EC2:  BTFSC  FD8.2
0EC4:  INCF   x27,F
....................     
....................    if(flag_reservorio==1) 
0EC6:  BTFSS  x02.7
0EC8:  BRA    0ED0
....................    { 
....................       treservorio++; 
0ECA:  INCF   x32,F
0ECC:  BTFSC  FD8.2
0ECE:  INCF   x33,F
....................    } 
....................           
....................    if(tiempos3>=100) 
0ED0:  MOVF   x25,F
0ED2:  BNZ   0EDA
0ED4:  MOVF   x24,W
0ED6:  SUBLW  63
0ED8:  BC    0EE0
....................    { 
....................       tiempos3=0;Expulsa=1; 
0EDA:  CLRF   x25
0EDC:  CLRF   x24
0EDE:  BSF    x36.3
....................    } 
....................     
....................    if(tiempos>=200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0EE0:  MOVF   x23,F
0EE2:  BNZ   0EEA
0EE4:  MOVF   x22,W
0EE6:  SUBLW  C7
0EE8:  BC    0F08
....................    { 
....................       tiempos=0;Lectura=1;TiempoControl++; 
0EEA:  CLRF   x23
0EEC:  CLRF   x22
0EEE:  BSF    x36.2
0EF0:  INCF   x0B,F
....................       if(EVAgua>=1) 
0EF2:  MOVF   x10,W
0EF4:  SUBLW  00
0EF6:  BC    0F08
....................       { 
....................          tinicio++; 
0EF8:  INCF   x2E,F
0EFA:  BTFSC  FD8.2
0EFC:  INCF   x2F,F
....................          if(flag_agua2==0) 
0EFE:  BTFSC  x02.4
0F00:  BRA    0F08
....................          { 
....................             tagua++; 
0F02:  INCF   x30,F
0F04:  BTFSC  FD8.2
0F06:  INCF   x31,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0F08:  BCF    F9E.0
0F0A:  MOVLB  0
0F0C:  GOTO   0078
.................... void Controla(){ 
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
*
311C:  BCF    FD8.1
311E:  MOVFF  282,357
3122:  MOVFF  281,356
3126:  MOVFF  280,355
312A:  MOVFF  27F,354
312E:  MOVFF  2A6,35B
3132:  MOVFF  2A5,35A
3136:  MOVFF  2A4,359
313A:  MOVFF  2A3,358
313E:  CALL   11A2
3142:  MOVFF  00,31F
3146:  MOVFF  01,320
314A:  MOVFF  02,321
314E:  MOVFF  03,322
3152:  BSF    FD8.1
3154:  MOVFF  03,357
3158:  MOVFF  02,356
315C:  MOVFF  01,355
3160:  MOVFF  00,354
3164:  MOVFF  2AA,35B
3168:  MOVFF  2A9,35A
316C:  MOVFF  2A8,359
3170:  MOVFF  2A7,358
3174:  CALL   11A2
3178:  MOVFF  03,26A
317C:  MOVFF  02,269
3180:  MOVFF  01,268
3184:  MOVFF  00,267
....................     
....................    if(error>0.9 && error<15 && Aumento<0.3) 
3188:  MOVLW  66
318A:  MOVLB  3
318C:  MOVWF  x53
318E:  MOVWF  x52
3190:  MOVWF  x51
3192:  MOVLW  7E
3194:  MOVWF  x50
3196:  MOVFF  26A,357
319A:  MOVFF  269,356
319E:  MOVFF  268,355
31A2:  MOVFF  267,354
31A6:  MOVLB  0
31A8:  CALL   18FA
31AC:  BNC   3262
31AE:  MOVFF  26A,353
31B2:  MOVFF  269,352
31B6:  MOVFF  268,351
31BA:  MOVFF  267,350
31BE:  MOVLB  3
31C0:  CLRF   x57
31C2:  CLRF   x56
31C4:  MOVLW  70
31C6:  MOVWF  x55
31C8:  MOVLW  82
31CA:  MOVWF  x54
31CC:  MOVLB  0
31CE:  CALL   18FA
31D2:  BNC   3262
31D4:  MOVFF  201,353
31D8:  MOVFF  200,352
31DC:  MOVFF  1FF,351
31E0:  MOVFF  1FE,350
31E4:  MOVLW  9A
31E6:  MOVLB  3
31E8:  MOVWF  x57
31EA:  MOVLW  99
31EC:  MOVWF  x56
31EE:  MOVLW  19
31F0:  MOVWF  x55
31F2:  MOVLW  7D
31F4:  MOVWF  x54
31F6:  MOVLB  0
31F8:  CALL   18FA
31FC:  BNC   3262
....................    { 
....................       if(Tpulso<9.0) 
31FE:  MOVFF  266,353
3202:  MOVFF  265,352
3206:  MOVFF  264,351
320A:  MOVFF  263,350
320E:  MOVLB  3
3210:  CLRF   x57
3212:  CLRF   x56
3214:  MOVLW  10
3216:  MOVWF  x55
3218:  MOVLW  82
321A:  MOVWF  x54
321C:  MOVLB  0
321E:  CALL   18FA
3222:  BNC   3262
....................       { 
....................          if(TiempoControl>=20) 
3224:  MOVLB  2
3226:  MOVF   x0B,W
3228:  SUBLW  13
322A:  BC    3264
....................          { 
....................             TiempoControl=0; 
322C:  CLRF   x0B
....................             Ganancia+=2; 
322E:  BCF    FD8.1
3230:  MOVFF  27A,357
3234:  MOVFF  279,356
3238:  MOVFF  278,355
323C:  MOVFF  277,354
3240:  MOVLB  3
3242:  CLRF   x5B
3244:  CLRF   x5A
3246:  CLRF   x59
3248:  MOVLW  80
324A:  MOVWF  x58
324C:  MOVLB  0
324E:  CALL   11A2
3252:  MOVFF  03,27A
3256:  MOVFF  02,279
325A:  MOVFF  01,278
325E:  MOVFF  00,277
3262:  MOVLB  2
....................          } 
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
3264:  MOVFF  26A,353
3268:  MOVFF  269,352
326C:  MOVFF  268,351
3270:  MOVFF  267,350
3274:  MOVLW  9A
3276:  MOVLB  3
3278:  MOVWF  x57
327A:  MOVLW  99
327C:  MOVWF  x56
327E:  MOVWF  x55
3280:  MOVLW  7D
3282:  MOVWF  x54
3284:  MOVLB  0
3286:  CALL   18FA
328A:  BNC   329C
....................    { 
....................       Ganancia=Ganancia2; 
328C:  MOVFF  27E,27A
3290:  MOVFF  27D,279
3294:  MOVFF  27C,278
3298:  MOVFF  27B,277
....................    } 
....................     
....................    if(Ganancia<1) 
329C:  MOVFF  27A,353
32A0:  MOVFF  279,352
32A4:  MOVFF  278,351
32A8:  MOVFF  277,350
32AC:  MOVLB  3
32AE:  CLRF   x57
32B0:  CLRF   x56
32B2:  CLRF   x55
32B4:  MOVLW  7F
32B6:  MOVWF  x54
32B8:  MOVLB  0
32BA:  CALL   18FA
32BE:  BNC   32CC
....................    { 
....................       Ganancia=1; 
32C0:  MOVLB  2
32C2:  CLRF   x7A
32C4:  CLRF   x79
32C6:  CLRF   x78
32C8:  MOVLW  7F
32CA:  MOVWF  x77
....................    } 
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
32CC:  MOVFF  26A,353
32D0:  MOVFF  269,352
32D4:  MOVFF  268,351
32D8:  MOVFF  267,350
32DC:  MOVLB  3
32DE:  CLRF   x57
32E0:  CLRF   x56
32E2:  CLRF   x55
32E4:  CLRF   x54
32E6:  MOVLB  0
32E8:  CALL   18FA
32EC:  BNC   32FA
....................    { 
....................       error=0.0; 
32EE:  MOVLB  2
32F0:  CLRF   x6A
32F2:  CLRF   x69
32F4:  CLRF   x68
32F6:  CLRF   x67
32F8:  MOVLB  0
....................    } 
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
32FA:  MOVFF  26A,353
32FE:  MOVFF  269,352
3302:  MOVFF  268,351
3306:  MOVFF  267,350
330A:  MOVFF  27A,357
330E:  MOVFF  279,356
3312:  MOVFF  278,355
3316:  MOVFF  277,354
331A:  CALL   1804
331E:  MOVFF  03,276
3322:  MOVFF  02,275
3326:  MOVFF  01,274
332A:  MOVFF  00,273
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
332E:  MOVFF  2A6,353
3332:  MOVFF  2A5,352
3336:  MOVFF  2A4,351
333A:  MOVFF  2A3,350
333E:  MOVFF  276,357
3342:  MOVFF  275,356
3346:  MOVFF  274,355
334A:  MOVFF  273,354
334E:  CALL   18FA
3352:  BNC   3364
....................    { 
....................       tmp=Setpoint; 
3354:  MOVFF  2A6,276
3358:  MOVFF  2A5,275
335C:  MOVFF  2A4,274
3360:  MOVFF  2A3,273
....................    } 
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
3364:  MOVFF  276,353
3368:  MOVFF  275,352
336C:  MOVFF  274,351
3370:  MOVFF  273,350
3374:  MOVLB  3
3376:  CLRF   x57
3378:  CLRF   x56
337A:  CLRF   x55
337C:  CLRF   x54
337E:  MOVLB  0
3380:  CALL   18FA
3384:  BNC   3392
....................    { 
....................       tmp=0.0; 
3386:  MOVLB  2
3388:  CLRF   x76
338A:  CLRF   x75
338C:  CLRF   x74
338E:  CLRF   x73
3390:  MOVLB  0
....................    } 
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    Tpulso=(tmp/Setpoint)*Tciclo;   
3392:  MOVFF  276,353
3396:  MOVFF  275,352
339A:  MOVFF  274,351
339E:  MOVFF  273,350
33A2:  MOVFF  2A6,357
33A6:  MOVFF  2A5,356
33AA:  MOVFF  2A4,355
33AE:  MOVFF  2A3,354
33B2:  CALL   1044
33B6:  MOVFF  00,31F
33BA:  MOVFF  01,320
33BE:  MOVFF  02,321
33C2:  MOVFF  03,322
33C6:  MOVFF  03,353
33CA:  MOVFF  02,352
33CE:  MOVFF  01,351
33D2:  MOVFF  00,350
33D6:  MOVFF  262,357
33DA:  MOVFF  261,356
33DE:  MOVFF  260,355
33E2:  MOVFF  25F,354
33E6:  CALL   1804
33EA:  MOVFF  03,266
33EE:  MOVFF  02,265
33F2:  MOVFF  01,264
33F6:  MOVFF  00,263
....................                                        
....................    if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
33FA:  MOVFF  266,353
33FE:  MOVFF  265,352
3402:  MOVFF  264,351
3406:  MOVFF  263,350
340A:  MOVLW  0A
340C:  MOVLB  3
340E:  MOVWF  x57
3410:  MOVLW  D7
3412:  MOVWF  x56
3414:  MOVLW  23
3416:  MOVWF  x55
3418:  MOVLW  77
341A:  MOVWF  x54
341C:  MOVLB  0
341E:  CALL   1044
3422:  MOVFF  03,353
3426:  MOVFF  02,352
342A:  MOVFF  01,351
342E:  MOVFF  00,350
3432:  CALL   1974
3436:  MOVFF  02,03
343A:  MOVF   01,W
343C:  MOVLB  2
343E:  MOVF   x27,W
3440:  SUBWF  02,W
3442:  BNC   3456
3444:  BNZ   344C
3446:  MOVF   x26,W
3448:  SUBWF  01,W
344A:  BNC   3456
....................    { 
....................       Resistencia_on; 
344C:  BSF    F8B.0
344E:  BCF    F94.0
....................       Resistencia2_on; 
3450:  BSF    F8B.1
3452:  BCF    F94.1
....................    } 
....................    else          
3454:  BRA    345E
....................    { 
....................       Resistencia_off; 
3456:  BCF    F8B.0
3458:  BCF    F94.0
....................       Resistencia2_off; 
345A:  BCF    F8B.1
345C:  BCF    F94.1
....................    } 
....................           
....................    if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
345E:  MOVFF  262,353
3462:  MOVFF  261,352
3466:  MOVFF  260,351
346A:  MOVFF  25F,350
346E:  MOVLW  0A
3470:  MOVLB  3
3472:  MOVWF  x57
3474:  MOVLW  D7
3476:  MOVWF  x56
3478:  MOVLW  23
347A:  MOVWF  x55
347C:  MOVLW  77
347E:  MOVWF  x54
3480:  MOVLB  0
3482:  CALL   1044
3486:  MOVFF  03,353
348A:  MOVFF  02,352
348E:  MOVFF  01,351
3492:  MOVFF  00,350
3496:  CALL   1974
349A:  MOVF   02,W
349C:  MOVWF  03
349E:  MOVLB  2
34A0:  SUBWF  x27,W
34A2:  BNC   34B0
34A4:  BNZ   34AC
34A6:  MOVF   01,W
34A8:  SUBWF  x26,W
34AA:  BNC   34B0
....................    { 
....................       tiempoctrl=0; 
34AC:  CLRF   x27
34AE:  CLRF   x26
....................    } // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
34B0:  MOVLB  0
34B2:  GOTO   4700 (RETURN)
....................  
.................... void main() 
.................... { 
34B6:  CLRF   FF8
34B8:  BCF    FD0.7
34BA:  BSF    07.7
34BC:  CLRF   FEA
34BE:  CLRF   FE9
34C0:  BSF    F93.1
34C2:  BSF    F93.0
34C4:  MOVLW  A0
34C6:  MOVWF  FC8
34C8:  MOVLW  36
34CA:  MOVWF  FC6
34CC:  CLRF   1C
34CE:  CLRF   20
34D0:  MOVLB  1
34D2:  CLRF   xFD
34D4:  CLRF   xFC
34D6:  CLRF   xFB
34D8:  CLRF   xFA
34DA:  MOVLB  2
34DC:  CLRF   x01
34DE:  CLRF   x00
34E0:  MOVLB  1
34E2:  CLRF   xFF
34E4:  CLRF   xFE
34E6:  MOVLB  2
34E8:  BCF    x02.0
34EA:  BCF    x02.1
34EC:  BCF    x02.2
34EE:  BCF    x02.3
34F0:  BCF    x02.4
34F2:  BCF    x02.5
34F4:  BCF    x02.6
34F6:  BCF    x02.7
34F8:  BCF    x03.0
34FA:  MOVLW  01
34FC:  MOVWF  x04
34FE:  CLRF   x05
3500:  CLRF   x06
3502:  CLRF   x07
3504:  CLRF   x08
3506:  CLRF   x09
3508:  CLRF   x0A
350A:  CLRF   x0B
350C:  CLRF   x0C
350E:  CLRF   x0D
3510:  CLRF   x0E
3512:  CLRF   x0F
3514:  CLRF   x10
3516:  CLRF   x11
3518:  CLRF   x12
351A:  CLRF   x13
351C:  CLRF   x14
351E:  CLRF   x15
3520:  CLRF   x16
3522:  CLRF   x17
3524:  CLRF   x18
3526:  CLRF   x19
3528:  CLRF   x1A
352A:  CLRF   x1B
352C:  CLRF   x1C
352E:  CLRF   x1D
3530:  CLRF   x1E
3532:  CLRF   x1F
3534:  CLRF   x20
3536:  CLRF   x21
3538:  CLRF   x23
353A:  CLRF   x22
353C:  CLRF   x25
353E:  CLRF   x24
3540:  CLRF   x27
3542:  CLRF   x26
3544:  CLRF   x29
3546:  MOVLW  0F
3548:  MOVWF  x28
354A:  CLRF   x2B
354C:  CLRF   x2A
354E:  CLRF   x2D
3550:  CLRF   x2C
3552:  CLRF   x2F
3554:  CLRF   x2E
3556:  CLRF   x31
3558:  CLRF   x30
355A:  CLRF   x33
355C:  CLRF   x32
355E:  CLRF   x35
3560:  CLRF   x34
3562:  BCF    x03.1
3564:  BCF    x03.2
3566:  BCF    x03.3
3568:  BCF    x03.4
356A:  BCF    x03.5
356C:  BCF    x03.6
356E:  BCF    x03.7
3570:  BCF    x36.0
3572:  BCF    x36.1
3574:  BCF    x36.2
3576:  BCF    x36.3
3578:  BCF    x36.4
357A:  BCF    x36.5
357C:  BCF    x36.6
357E:  CLRF   x47
3580:  CLRF   x48
3582:  CLRF   x49
3584:  CLRF   x4A
3586:  CLRF   x4B
3588:  CLRF   x4C
358A:  CLRF   x4D
358C:  CLRF   x4E
358E:  CLRF   x4F
3590:  CLRF   x50
3592:  CLRF   x51
3594:  MOVLW  02
3596:  MOVWF  x52
3598:  CLRF   x56
359A:  CLRF   x55
359C:  CLRF   x54
359E:  CLRF   x53
35A0:  CLRF   x5A
35A2:  MOVLW  C0
35A4:  MOVWF  x59
35A6:  MOVLW  41
35A8:  MOVWF  x58
35AA:  MOVLW  8B
35AC:  MOVWF  x57
35AE:  CLRF   x62
35B0:  CLRF   x61
35B2:  MOVLW  20
35B4:  MOVWF  x60
35B6:  MOVLW  82
35B8:  MOVWF  x5F
35BA:  CLRF   x66
35BC:  CLRF   x65
35BE:  CLRF   x64
35C0:  CLRF   x63
35C2:  CLRF   x6A
35C4:  CLRF   x69
35C6:  CLRF   x68
35C8:  CLRF   x67
35CA:  CLRF   x6E
35CC:  CLRF   x6D
35CE:  CLRF   x6C
35D0:  CLRF   x6B
35D2:  CLRF   x72
35D4:  CLRF   x71
35D6:  CLRF   x70
35D8:  CLRF   x6F
35DA:  CLRF   x76
35DC:  CLRF   x75
35DE:  CLRF   x74
35E0:  CLRF   x73
35E2:  CLRF   x7A
35E4:  CLRF   x79
35E6:  MOVLW  48
35E8:  MOVWF  x78
35EA:  MOVLW  83
35EC:  MOVWF  x77
35EE:  CLRF   x7E
35F0:  CLRF   x7D
35F2:  MOVLW  20
35F4:  MOVWF  x7C
35F6:  MOVLW  83
35F8:  MOVWF  x7B
35FA:  CLRF   x82
35FC:  CLRF   x81
35FE:  CLRF   x80
3600:  CLRF   x7F
3602:  CLRF   x86
3604:  CLRF   x85
3606:  CLRF   x84
3608:  CLRF   x83
360A:  CLRF   x8A
360C:  CLRF   x89
360E:  CLRF   x88
3610:  CLRF   x87
3612:  CLRF   x8E
3614:  CLRF   x8D
3616:  CLRF   x8C
3618:  CLRF   x8B
361A:  CLRF   x92
361C:  CLRF   x91
361E:  CLRF   x90
3620:  CLRF   x8F
3622:  CLRF   x96
3624:  CLRF   x95
3626:  CLRF   x94
3628:  CLRF   x93
362A:  CLRF   x9A
362C:  CLRF   x99
362E:  CLRF   x98
3630:  CLRF   x97
3632:  CLRF   x9E
3634:  CLRF   x9D
3636:  CLRF   x9C
3638:  CLRF   x9B
363A:  CLRF   xA2
363C:  CLRF   xA1
363E:  CLRF   xA0
3640:  CLRF   x9F
3642:  CLRF   xA6
3644:  CLRF   xA5
3646:  CLRF   xA4
3648:  CLRF   xA3
364A:  CLRF   xAA
364C:  CLRF   xA9
364E:  CLRF   xA8
3650:  CLRF   xA7
3652:  CLRF   xAE
3654:  CLRF   xAD
3656:  CLRF   xAC
3658:  CLRF   xAB
365A:  CLRF   xB2
365C:  CLRF   xB1
365E:  CLRF   xB0
3660:  CLRF   xAF
3662:  MOVLW  5C
3664:  MOVWF  xB6
3666:  MOVLW  AA
3668:  MOVWF  xB5
366A:  MOVLW  52
366C:  MOVWF  xB4
366E:  MOVLW  77
3670:  MOVWF  xB3
3672:  MOVLW  A8
3674:  MOVWF  xBA
3676:  MOVLW  57
3678:  MOVWF  xB9
367A:  MOVLW  2A
367C:  MOVWF  xB8
367E:  MOVLW  81
3680:  MOVWF  xB7
3682:  MOVLW  71
3684:  MOVWF  xBE
3686:  MOVLW  1B
3688:  MOVWF  xBD
368A:  MOVLW  87
368C:  MOVWF  xBC
368E:  MOVLW  83
3690:  MOVWF  xBB
3692:  MOVLW  34
3694:  MOVWF  xC2
3696:  MOVLW  80
3698:  MOVWF  xC1
369A:  MOVLW  15
369C:  MOVWF  xC0
369E:  MOVLW  84
36A0:  MOVWF  xBF
36A2:  MOVLW  44
36A4:  MOVWF  xC6
36A6:  MOVLW  69
36A8:  MOVWF  xC5
36AA:  MOVLW  C7
36AC:  MOVWF  xC4
36AE:  MOVLW  81
36B0:  MOVWF  xC3
36B2:  MOVLB  3
36B4:  BCF    x1B.0
36B6:  CLRF   x1C
36B8:  CLRF   x1D
36BA:  MOVF   FC1,W
36BC:  ANDLW  C0
36BE:  IORLW  0F
36C0:  MOVWF  FC1
36C2:  MOVLW  07
36C4:  MOVWF  FB4
36C6:  MOVLB  0
36C8:  CLRF   x62
36CA:  CLRF   x63
36CC:  CLRF   x64
36CE:  CLRF   x65
36D0:  CLRF   x66
36D2:  CLRF   x67
36D4:  CLRF   x68
36D6:  CLRF   x69
36D8:  CLRF   x6A
36DA:  CLRF   x6B
36DC:  CLRF   x6C
36DE:  CLRF   x6D
36E0:  CLRF   x6E
36E2:  CLRF   x6F
36E4:  CLRF   x70
36E6:  CLRF   x71
36E8:  CLRF   x72
36EA:  CLRF   x73
36EC:  CLRF   x74
36EE:  CLRF   x75
36F0:  CLRF   x76
36F2:  CLRF   x77
36F4:  CLRF   x78
36F6:  CLRF   x79
36F8:  CLRF   x7A
36FA:  CLRF   x7B
36FC:  CLRF   x7C
36FE:  CLRF   x7D
3700:  CLRF   x7E
3702:  CLRF   x7F
3704:  CLRF   x80
3706:  CLRF   x81
3708:  CLRF   x82
370A:  CLRF   x83
370C:  CLRF   x84
370E:  CLRF   x85
3710:  CLRF   x86
3712:  CLRF   x87
3714:  CLRF   x88
3716:  CLRF   x89
3718:  CLRF   x8A
371A:  CLRF   x8B
371C:  CLRF   x8C
371E:  CLRF   x8D
3720:  CLRF   x8E
3722:  CLRF   x8F
3724:  CLRF   x90
3726:  CLRF   x91
3728:  CLRF   x92
372A:  CLRF   x93
372C:  CLRF   x94
372E:  CLRF   x95
3730:  CLRF   x96
3732:  CLRF   x97
3734:  CLRF   x98
3736:  CLRF   x99
3738:  CLRF   x9A
373A:  CLRF   x9B
373C:  CLRF   x9C
373E:  CLRF   x9D
3740:  CLRF   x9E
3742:  CLRF   x9F
3744:  CLRF   xA0
3746:  CLRF   xA1
3748:  CLRF   xA2
374A:  CLRF   xA3
374C:  CLRF   xA4
374E:  CLRF   xA5
3750:  CLRF   xA6
3752:  CLRF   xA7
3754:  CLRF   xA8
3756:  CLRF   xA9
3758:  CLRF   xAA
375A:  CLRF   xAB
375C:  CLRF   xAC
375E:  CLRF   xAD
3760:  CLRF   xAE
3762:  CLRF   xAF
3764:  CLRF   xB0
3766:  CLRF   xB1
3768:  CLRF   xB2
376A:  CLRF   xB3
376C:  CLRF   xB4
376E:  CLRF   xB5
3770:  CLRF   xB6
3772:  CLRF   xB7
3774:  CLRF   xB8
3776:  CLRF   xB9
3778:  CLRF   xBA
377A:  CLRF   xBB
377C:  CLRF   xBC
377E:  CLRF   xBD
3780:  CLRF   xBE
3782:  CLRF   xBF
3784:  CLRF   xC0
3786:  CLRF   xC1
3788:  CLRF   xC2
378A:  CLRF   xC3
378C:  CLRF   xC4
378E:  CLRF   xC5
3790:  CLRF   xC6
3792:  CLRF   xC7
3794:  CLRF   xC8
3796:  CLRF   xC9
3798:  CLRF   xCA
379A:  CLRF   xCB
379C:  CLRF   xCC
379E:  CLRF   xCD
37A0:  CLRF   xCE
37A2:  CLRF   xCF
37A4:  CLRF   xD0
37A6:  CLRF   xD1
37A8:  CLRF   xD2
37AA:  CLRF   xD3
37AC:  CLRF   xD4
37AE:  CLRF   xD5
37B0:  CLRF   xD6
37B2:  CLRF   xD7
37B4:  CLRF   xD8
37B6:  CLRF   xD9
37B8:  CLRF   xDA
37BA:  CLRF   xDB
37BC:  CLRF   xDC
37BE:  CLRF   xDD
37C0:  CLRF   xDE
37C2:  CLRF   xDF
37C4:  CLRF   xE0
37C6:  CLRF   xE1
37C8:  CLRF   xE2
37CA:  CLRF   xE3
37CC:  CLRF   xE4
37CE:  CLRF   xE5
37D0:  CLRF   xE6
37D2:  CLRF   xE7
37D4:  CLRF   xE8
37D6:  CLRF   xE9
37D8:  CLRF   xEA
37DA:  CLRF   xEB
37DC:  CLRF   xEC
37DE:  CLRF   xED
37E0:  CLRF   xEE
37E2:  CLRF   xEF
37E4:  CLRF   xF0
37E6:  CLRF   xF1
37E8:  CLRF   xF2
37EA:  CLRF   xF3
37EC:  CLRF   xF4
37EE:  CLRF   xF5
37F0:  CLRF   xF6
37F2:  CLRF   xF7
37F4:  CLRF   xF8
37F6:  CLRF   xF9
37F8:  CLRF   xFA
37FA:  CLRF   xFB
37FC:  CLRF   xFC
37FE:  CLRF   xFD
3800:  CLRF   xFE
3802:  CLRF   xFF
3804:  MOVLB  1
3806:  CLRF   x00
3808:  CLRF   x01
380A:  CLRF   x02
380C:  CLRF   x03
380E:  CLRF   x04
3810:  CLRF   x05
3812:  CLRF   x06
3814:  CLRF   x07
3816:  CLRF   x08
3818:  CLRF   x09
381A:  CLRF   x0A
381C:  CLRF   x0B
381E:  CLRF   x0C
3820:  CLRF   x0D
3822:  CLRF   x0E
3824:  CLRF   x0F
3826:  CLRF   x10
3828:  CLRF   x11
382A:  CLRF   x12
382C:  CLRF   x13
382E:  CLRF   x14
3830:  CLRF   x15
3832:  CLRF   x16
3834:  CLRF   x17
3836:  CLRF   x18
3838:  CLRF   x19
383A:  CLRF   x1A
383C:  CLRF   x1B
383E:  CLRF   x1C
3840:  CLRF   x1D
3842:  CLRF   x1E
3844:  CLRF   x1F
3846:  CLRF   x20
3848:  CLRF   x21
384A:  CLRF   x22
384C:  CLRF   x23
384E:  CLRF   x24
3850:  CLRF   x25
3852:  CLRF   x26
3854:  CLRF   x27
3856:  CLRF   x28
3858:  CLRF   x29
385A:  CLRF   x2A
385C:  CLRF   x2B
385E:  CLRF   x2C
3860:  CLRF   x2D
3862:  CLRF   x2E
3864:  CLRF   x2F
3866:  CLRF   x30
3868:  CLRF   x31
386A:  CLRF   x32
386C:  CLRF   x33
386E:  CLRF   x34
3870:  CLRF   x35
3872:  CLRF   x36
3874:  CLRF   x37
3876:  CLRF   x38
3878:  CLRF   x39
387A:  CLRF   x3A
387C:  CLRF   x3B
387E:  CLRF   x3C
3880:  CLRF   x3D
3882:  CLRF   x3E
3884:  CLRF   x3F
3886:  CLRF   x40
3888:  CLRF   x41
388A:  CLRF   x42
388C:  CLRF   x43
388E:  CLRF   x44
3890:  CLRF   x45
3892:  CLRF   x46
3894:  CLRF   x47
3896:  CLRF   x48
3898:  CLRF   x49
389A:  CLRF   x4A
389C:  CLRF   x4B
389E:  CLRF   x4C
38A0:  CLRF   x4D
38A2:  CLRF   x4E
38A4:  CLRF   x4F
38A6:  CLRF   x50
38A8:  CLRF   x51
38AA:  CLRF   x52
38AC:  CLRF   x53
38AE:  CLRF   x54
38B0:  CLRF   x55
38B2:  CLRF   x56
38B4:  CLRF   x57
38B6:  CLRF   x58
38B8:  CLRF   x59
38BA:  CLRF   x5A
38BC:  CLRF   x5B
38BE:  CLRF   x5C
38C0:  CLRF   x5D
38C2:  CLRF   x5E
38C4:  CLRF   x5F
38C6:  CLRF   x60
38C8:  CLRF   x61
38CA:  CLRF   x62
38CC:  CLRF   x63
38CE:  CLRF   x64
38D0:  CLRF   x65
38D2:  CLRF   x66
38D4:  CLRF   x67
38D6:  CLRF   x68
38D8:  CLRF   x69
38DA:  CLRF   x6A
38DC:  CLRF   x6B
38DE:  CLRF   x6C
38E0:  CLRF   x6D
38E2:  CLRF   x6E
38E4:  CLRF   x6F
38E6:  CLRF   x70
38E8:  CLRF   x71
38EA:  CLRF   x72
38EC:  CLRF   x73
38EE:  CLRF   x74
38F0:  CLRF   x75
38F2:  CLRF   x76
38F4:  CLRF   x77
38F6:  CLRF   x78
38F8:  CLRF   x79
38FA:  CLRF   x7A
38FC:  CLRF   x7B
38FE:  CLRF   x7C
3900:  CLRF   x7D
3902:  CLRF   x7E
3904:  CLRF   x7F
3906:  CLRF   x80
3908:  CLRF   x81
390A:  CLRF   x82
390C:  CLRF   x83
390E:  CLRF   x84
3910:  CLRF   x85
3912:  CLRF   x86
3914:  CLRF   x87
3916:  CLRF   x88
3918:  CLRF   x89
391A:  CLRF   x8A
391C:  CLRF   x8B
391E:  CLRF   x8C
3920:  CLRF   x8D
3922:  CLRF   x8E
3924:  CLRF   x8F
3926:  CLRF   x90
3928:  CLRF   x91
392A:  CLRF   x92
392C:  CLRF   x93
392E:  CLRF   x94
3930:  CLRF   x95
3932:  CLRF   x96
3934:  CLRF   x97
3936:  CLRF   x98
3938:  CLRF   x99
393A:  CLRF   x9A
393C:  CLRF   x9B
393E:  CLRF   x9C
3940:  CLRF   x9D
3942:  CLRF   x9E
3944:  CLRF   x9F
3946:  CLRF   xA0
3948:  CLRF   xA1
394A:  CLRF   xA2
394C:  CLRF   xA3
394E:  CLRF   xA4
3950:  CLRF   xA5
3952:  CLRF   xA6
3954:  CLRF   xA7
3956:  CLRF   xA8
3958:  CLRF   xA9
395A:  CLRF   xAA
395C:  CLRF   xAB
395E:  CLRF   xAC
3960:  CLRF   xAD
3962:  CLRF   xAE
3964:  CLRF   xAF
3966:  CLRF   xB0
3968:  CLRF   xB1
396A:  CLRF   xB2
396C:  CLRF   xB3
396E:  CLRF   xB4
3970:  CLRF   xB5
3972:  CLRF   xB6
3974:  CLRF   xB7
3976:  CLRF   xB8
3978:  CLRF   xB9
397A:  CLRF   xBA
397C:  CLRF   xBB
397E:  CLRF   xBC
3980:  CLRF   xBD
3982:  CLRF   xBE
3984:  CLRF   xBF
3986:  CLRF   xC0
3988:  CLRF   xC1
398A:  CLRF   xC2
398C:  CLRF   xC3
398E:  CLRF   xC4
3990:  CLRF   xC5
3992:  CLRF   xC6
3994:  CLRF   xC7
3996:  CLRF   xC8
3998:  CLRF   xC9
399A:  CLRF   xCA
399C:  CLRF   xCB
399E:  CLRF   xCC
39A0:  CLRF   xCD
39A2:  CLRF   xCE
39A4:  CLRF   xCF
39A6:  CLRF   xD0
39A8:  CLRF   xD1
39AA:  CLRF   xD2
39AC:  CLRF   xD3
39AE:  CLRF   xD4
39B0:  CLRF   xD5
39B2:  CLRF   xD6
39B4:  CLRF   xD7
39B6:  CLRF   xD8
39B8:  CLRF   xD9
39BA:  CLRF   xDA
39BC:  CLRF   xDB
39BE:  CLRF   xDC
39C0:  CLRF   xDD
39C2:  CLRF   xDE
39C4:  CLRF   xDF
39C6:  CLRF   xE0
39C8:  CLRF   xE1
39CA:  CLRF   xE2
39CC:  CLRF   xE3
39CE:  CLRF   xE4
39D0:  CLRF   xE5
39D2:  CLRF   xE6
39D4:  CLRF   xE7
39D6:  CLRF   xE8
39D8:  CLRF   xE9
39DA:  CLRF   xEA
39DC:  CLRF   xEB
39DE:  CLRF   xEC
39E0:  CLRF   xED
39E2:  CLRF   xEE
39E4:  CLRF   xEF
39E6:  CLRF   xF0
39E8:  CLRF   xF1
39EA:  CLRF   xF2
39EC:  CLRF   xF3
39EE:  CLRF   xF4
39F0:  CLRF   xF5
39F2:  CLRF   xF6
39F4:  CLRF   xF7
39F6:  CLRF   xF8
39F8:  CLRF   xF9
39FA:  MOVLB  2
39FC:  CLRF   x37
39FE:  CLRF   x38
3A00:  CLRF   x39
3A02:  CLRF   x3A
3A04:  CLRF   x3B
3A06:  CLRF   x3C
3A08:  CLRF   x3D
3A0A:  CLRF   x3E
3A0C:  CLRF   x3F
3A0E:  CLRF   x40
3A10:  CLRF   x41
3A12:  CLRF   x42
3A14:  CLRF   x43
3A16:  CLRF   x44
3A18:  CLRF   x45
3A1A:  CLRF   x46
3A1C:  CLRF   xE4
3A1E:  CLRF   xE5
3A20:  CLRF   xE6
3A22:  MOVLW  03
3A24:  MOVLB  3
3A26:  MOVWF  x1E
....................     
....................    fState = 0; 
3A28:  MOVLB  2
3A2A:  CLRF   xE7
....................    for (posicion=0;posicion<0x10;posicion++) 
3A2C:  CLRF   xE8
3A2E:  MOVF   xE8,W
3A30:  SUBLW  0F
3A32:  BNC   3A68
....................    { 
....................       buffer[posicion] = 0x00; 
3A34:  CLRF   03
3A36:  MOVF   xE8,W
3A38:  ADDLW  E9
3A3A:  MOVWF  FE9
3A3C:  MOVLW  02
3A3E:  ADDWFC 03,W
3A40:  MOVWF  FEA
3A42:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
3A44:  CLRF   03
3A46:  MOVF   xE8,W
3A48:  ADDLW  F9
3A4A:  MOVWF  FE9
3A4C:  MOVLW  02
3A4E:  ADDWFC 03,W
3A50:  MOVWF  FEA
3A52:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
3A54:  CLRF   03
3A56:  MOVF   xE8,W
3A58:  ADDLW  0A
3A5A:  MOVWF  FE9
3A5C:  MOVLW  03
3A5E:  ADDWFC 03,W
3A60:  MOVWF  FEA
3A62:  CLRF   FEF
....................    } 
3A64:  INCF   xE8,F
3A66:  BRA    3A2E
....................    enable_interrupts(INT_SSP); 
3A68:  BSF    F9D.3
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
3A6A:  MOVLW  C8
3A6C:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
3A6E:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
3A70:  MOVLW  85
3A72:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
3A74:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
3A76:  MOVF   FC1,W
3A78:  ANDLW  C0
3A7A:  IORLW  0D
3A7C:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
3A7E:  BCF    FC0.0
3A80:  BSF    FC0.1
3A82:  BSF    FC0.2
3A84:  BSF    FC0.7
3A86:  BSF    FC2.0
....................    enable_interrupts(global); 
3A88:  MOVLW  C0
3A8A:  IORWF  FF2,F
....................    usb_init(); 
3A8C:  MOVLB  0
3A8E:  GOTO   0F82
....................    usb_task(); 
3A92:  CALL   0F60
....................    Temperatura=Leer_Sensor(MediaMovil); 
3A96:  MOVFF  252,31F
3A9A:  CALL   1486
3A9E:  MOVFF  03,2AA
3AA2:  MOVFF  02,2A9
3AA6:  MOVFF  01,2A8
3AAA:  MOVFF  00,2A7
....................    PresionCamara=Leer_Sensor_Presion(5); 
3AAE:  MOVLW  05
3AB0:  MOVLB  3
3AB2:  MOVWF  x1F
3AB4:  MOVLB  0
3AB6:  CALL   2AEE
3ABA:  MOVFF  03,2B2
3ABE:  MOVFF  02,2B1
3AC2:  MOVFF  01,2B0
3AC6:  MOVFF  00,2AF
....................    Puerta=!DOOR; 
3ACA:  BSF    F95.4
3ACC:  MOVLB  2
3ACE:  CLRF   x1A
3AD0:  BTFSC  F83.4
3AD2:  INCF   x1A,F
....................    Parada=!STOP; 
3AD4:  BSF    F95.5
3AD6:  CLRF   x1B
3AD8:  BTFSC  F83.5
3ADA:  INCF   x1B,F
....................    NivelReservorio=LOW; 
3ADC:  BSF    F95.0
3ADE:  CLRF   x1C
3AE0:  BTFSC  F83.0
3AE2:  INCF   x1C,F
....................    NivelTanque=MEDIUM; 
3AE4:  BSF    F95.1
3AE6:  CLRF   x1D
3AE8:  BTFSC  F83.1
3AEA:  INCF   x1D,F
....................    //Temperatura=Leer_Sensor(10);d3=Tem 
....................    Presostato=(int8)PresionCamara; 
3AEC:  MOVFF  2B2,353
3AF0:  MOVFF  2B1,352
3AF4:  MOVFF  2B0,351
3AF8:  MOVFF  2AF,350
3AFC:  MOVLB  0
3AFE:  CALL   1974
3B02:  MOVFF  01,21E
....................    Lee_Vector(); 
3B06:  CALL   2E6A
....................    Carga_Vector(); 
3B0A:  CALL   2EBC
....................    
....................    Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12); 
3B0E:  MOVFF  FF2,31F
3B12:  BCF    FF2.7
3B14:  MOVLW  0A
3B16:  MOVWF  FA9
3B18:  BCF    FA6.6
3B1A:  BCF    FA6.7
3B1C:  BSF    FA6.0
3B1E:  MOVF   FA8,W
3B20:  MOVLB  3
3B22:  BTFSC  x1F.7
3B24:  BSF    FF2.7
3B26:  CLRF   x55
3B28:  MOVWF  x54
3B2A:  MOVLB  0
3B2C:  CALL   0FBA
3B30:  MOVFF  03,27A
3B34:  MOVFF  02,279
3B38:  MOVFF  01,278
3B3C:  MOVFF  00,277
3B40:  MOVFF  FF2,31F
3B44:  BCF    FF2.7
3B46:  MOVLW  0B
3B48:  MOVWF  FA9
3B4A:  BCF    FA6.6
3B4C:  BCF    FA6.7
3B4E:  BSF    FA6.0
3B50:  MOVF   FA8,W
3B52:  MOVLB  3
3B54:  BTFSC  x1F.7
3B56:  BSF    FF2.7
3B58:  CLRF   x55
3B5A:  MOVWF  x54
3B5C:  MOVLB  0
3B5E:  CALL   0FBA
3B62:  MOVFF  03,282
3B66:  MOVFF  02,281
3B6A:  MOVFF  01,280
3B6E:  MOVFF  00,27F
3B72:  MOVFF  FF2,31F
3B76:  BCF    FF2.7
3B78:  MOVLW  0C
3B7A:  MOVWF  FA9
3B7C:  BCF    FA6.6
3B7E:  BCF    FA6.7
3B80:  BSF    FA6.0
3B82:  MOVF   FA8,W
3B84:  MOVLB  3
3B86:  BTFSC  x1F.7
3B88:  BSF    FF2.7
3B8A:  CLRF   x55
3B8C:  MOVWF  x54
3B8E:  MOVLB  0
3B90:  CALL   0FBA
3B94:  MOVFF  03,262
3B98:  MOVFF  02,261
3B9C:  MOVFF  01,260
3BA0:  MOVFF  00,25F
....................    Ajuste=read_eeprom(13);Ajusten=read_eeprom(14);Ganancia2=read_eeprom(15); 
3BA4:  MOVFF  FF2,31F
3BA8:  BCF    FF2.7
3BAA:  MOVLW  0D
3BAC:  MOVWF  FA9
3BAE:  BCF    FA6.6
3BB0:  BCF    FA6.7
3BB2:  BSF    FA6.0
3BB4:  MOVF   FA8,W
3BB6:  MOVLB  3
3BB8:  BTFSC  x1F.7
3BBA:  BSF    FF2.7
3BBC:  MOVLB  2
3BBE:  MOVWF  x49
3BC0:  MOVFF  FF2,31F
3BC4:  BCF    FF2.7
3BC6:  MOVLW  0E
3BC8:  MOVWF  FA9
3BCA:  BCF    FA6.6
3BCC:  BCF    FA6.7
3BCE:  BSF    FA6.0
3BD0:  MOVF   FA8,W
3BD2:  MOVLB  3
3BD4:  BTFSC  x1F.7
3BD6:  BSF    FF2.7
3BD8:  MOVLB  2
3BDA:  MOVWF  x4A
3BDC:  MOVFF  FF2,31F
3BE0:  BCF    FF2.7
3BE2:  MOVLW  0F
3BE4:  MOVWF  FA9
3BE6:  BCF    FA6.6
3BE8:  BCF    FA6.7
3BEA:  BSF    FA6.0
3BEC:  MOVF   FA8,W
3BEE:  MOVLB  3
3BF0:  BTFSC  x1F.7
3BF2:  BSF    FF2.7
3BF4:  CLRF   x55
3BF6:  MOVWF  x54
3BF8:  MOVLB  0
3BFA:  CALL   0FBA
3BFE:  MOVFF  03,27E
3C02:  MOVFF  02,27D
3C06:  MOVFF  01,27C
3C0A:  MOVFF  00,27B
....................    MediaMovil=read_eeprom(20); 
3C0E:  MOVFF  FF2,31F
3C12:  BCF    FF2.7
3C14:  MOVLW  14
3C16:  MOVWF  FA9
3C18:  BCF    FA6.6
3C1A:  BCF    FA6.7
3C1C:  BSF    FA6.0
3C1E:  MOVF   FA8,W
3C20:  MOVLB  3
3C22:  BTFSC  x1F.7
3C24:  BSF    FF2.7
3C26:  MOVLB  2
3C28:  MOVWF  x52
....................    EV_Agua_off;EV_Paso_off;EV_Desfogue_off;Resistencia_off; 
3C2A:  BCF    F8A.4
3C2C:  BCF    F93.4
3C2E:  BCF    F8A.3
3C30:  BCF    F93.3
3C32:  BCF    F8A.2
3C34:  BCF    F93.2
3C36:  BCF    F8B.0
3C38:  BCF    F94.0
....................     
....................    Puerta=0;Parada=0;NivelReservorio=0;NivelTanque=0;Presostato=0;ADC_Pt100=0; 
3C3A:  CLRF   x1A
3C3C:  CLRF   x1B
3C3E:  CLRF   x1C
3C40:  CLRF   x1D
3C42:  CLRF   x1E
3C44:  CLRF   x1F
....................    tiempo_esterilizacion=0; 
3C46:  CLRF   x4E
....................    for(z=0;z<80;z++) 
3C48:  CLRF   x0D
3C4A:  MOVF   x0D,W
3C4C:  SUBLW  4F
3C4E:  BNC   3C70
....................    { 
....................       Temperatura=Leer_Sensor(MediaMovil); 
3C50:  MOVFF  252,31F
3C54:  MOVLB  0
3C56:  CALL   1486
3C5A:  MOVFF  03,2AA
3C5E:  MOVFF  02,2A9
3C62:  MOVFF  01,2A8
3C66:  MOVFF  00,2A7
....................    } 
3C6A:  MOVLB  2
3C6C:  INCF   x0D,F
3C6E:  BRA    3C4A
....................    EV_Agua_off; 
3C70:  BCF    F8A.4
3C72:  BCF    F93.4
....................    
.................... while(true) 
.................... { 
....................    if(STOP || Visua==1) 
3C74:  BSF    F95.5
3C76:  BTFSS  F83.5
3C78:  BRA    3C7E
3C7A:  BTFSS  x36.5
3C7C:  BRA    3C96
....................    { 
....................       emergency=1; 
3C7E:  BSF    x02.0
....................       EV_Desfogue_on; 
3C80:  BSF    F8A.2
3C82:  BCF    F93.2
....................       EV_Agua_off; 
3C84:  BCF    F8A.4
3C86:  BCF    F93.4
....................       Resistencia_off; 
3C88:  BCF    F8B.0
3C8A:  BCF    F94.0
....................       Resistencia2_off; 
3C8C:  BCF    F8B.1
3C8E:  BCF    F94.1
....................       EVDesfogue=0; 
3C90:  CLRF   x0F
....................       disable_interrupts(INT_TIMER0); 
3C92:  BCF    FF2.5
....................    }         
....................    else 
3C94:  BRA    3CB2
....................    { 
....................       if(emergency==1) 
3C96:  BTFSS  x02.0
3C98:  BRA    3CB2
....................       { 
....................          delay_ms(1500); 
3C9A:  MOVLW  06
3C9C:  MOVLB  3
3C9E:  MOVWF  x1F
3CA0:  MOVLW  FA
3CA2:  MOVWF  x25
3CA4:  MOVLB  0
3CA6:  CALL   0F90
3CAA:  MOVLB  3
3CAC:  DECFSZ x1F,F
3CAE:  BRA    3CA0
3CB0:  MOVLB  2
....................       } 
....................    } 
....................        
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
3CB2:  MOVLB  0
3CB4:  GOTO   2F14
3CB8:  MOVF   01,F
3CBA:  BTFSC  FD8.2
3CBC:  BRA    43E6
.................... { 
....................    if(usb_kbhit(1)) 
3CBE:  MOVLW  01
3CC0:  MOVLB  3
3CC2:  MOVWF  x1F
3CC4:  MOVLB  0
3CC6:  GOTO   2F1C
3CCA:  MOVF   01,F
3CCC:  BTFSC  FD8.2
3CCE:  BRA    3F26
....................    { 
....................       usb_get_packet(1, rxubuf, Lenbuf); 
3CD0:  MOVLW  01
3CD2:  MOVLB  3
3CD4:  MOVWF  x1F
3CD6:  CLRF   x21
3CD8:  MOVLW  42
3CDA:  MOVWF  x20
3CDC:  CLRF   x23
3CDE:  MOVLW  20
3CE0:  MOVWF  x22
3CE2:  MOVLB  0
3CE4:  GOTO   3022
....................       if(rxubuf[0]==1) 
3CE8:  DECFSZ 42,W
3CEA:  BRA    3D74
....................       { 
....................          Ganancia=rxubuf[1];desvio=rxubuf[2];Tciclo=rxubuf[3];MediaMovil=rxubuf[5];Ganancia2=rxubuf[6];Ajuste=rxubuf[7]; 
3CEC:  MOVLB  3
3CEE:  CLRF   x55
3CF0:  MOVFF  43,354
3CF4:  MOVLB  0
3CF6:  CALL   0FBA
3CFA:  MOVFF  03,27A
3CFE:  MOVFF  02,279
3D02:  MOVFF  01,278
3D06:  MOVFF  00,277
3D0A:  MOVLB  3
3D0C:  CLRF   x55
3D0E:  MOVFF  44,354
3D12:  MOVLB  0
3D14:  CALL   0FBA
3D18:  MOVFF  03,282
3D1C:  MOVFF  02,281
3D20:  MOVFF  01,280
3D24:  MOVFF  00,27F
3D28:  MOVLB  3
3D2A:  CLRF   x55
3D2C:  MOVFF  45,354
3D30:  MOVLB  0
3D32:  CALL   0FBA
3D36:  MOVFF  03,262
3D3A:  MOVFF  02,261
3D3E:  MOVFF  01,260
3D42:  MOVFF  00,25F
3D46:  MOVFF  47,252
3D4A:  MOVLB  3
3D4C:  CLRF   x55
3D4E:  MOVFF  48,354
3D52:  MOVLB  0
3D54:  CALL   0FBA
3D58:  MOVFF  03,27E
3D5C:  MOVFF  02,27D
3D60:  MOVFF  01,27C
3D64:  MOVFF  00,27B
3D68:  MOVFF  49,249
....................          Ajusten=rxubuf[10];R2=rxubuf[11]; 
3D6C:  MOVFF  4C,24A
3D70:  MOVFF  4D,24B
....................       } // Falta escribir en la eeprom 
....................       if(rxubuf[12]==1)    
3D74:  DECFSZ 4E,W
3D76:  BRA    3F00
....................       { 
....................          write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,MediaMovil); 
3D78:  MOVFF  27A,353
3D7C:  MOVFF  279,352
3D80:  MOVFF  278,351
3D84:  MOVFF  277,350
3D88:  CALL   1974
3D8C:  MOVFF  01,31F
3D90:  MOVLW  0A
3D92:  MOVWF  FA9
3D94:  MOVFF  31F,FA8
3D98:  BCF    FA6.6
3D9A:  BCF    FA6.7
3D9C:  BSF    FA6.2
3D9E:  MOVF   FF2,W
3DA0:  MOVWF  00
3DA2:  BCF    FF2.7
3DA4:  MOVLB  F
3DA6:  MOVLW  55
3DA8:  MOVWF  FA7
3DAA:  MOVLW  AA
3DAC:  MOVWF  FA7
3DAE:  BSF    FA6.1
3DB0:  BTFSC  FA6.1
3DB2:  BRA    3DB0
3DB4:  BCF    FA6.2
3DB6:  MOVF   00,W
3DB8:  IORWF  FF2,F
3DBA:  MOVFF  282,353
3DBE:  MOVFF  281,352
3DC2:  MOVFF  280,351
3DC6:  MOVFF  27F,350
3DCA:  MOVLB  0
3DCC:  CALL   1974
3DD0:  MOVFF  01,31F
3DD4:  MOVLW  0B
3DD6:  MOVWF  FA9
3DD8:  MOVFF  31F,FA8
3DDC:  BCF    FA6.6
3DDE:  BCF    FA6.7
3DE0:  BSF    FA6.2
3DE2:  MOVF   FF2,W
3DE4:  MOVWF  00
3DE6:  BCF    FF2.7
3DE8:  MOVLB  F
3DEA:  MOVLW  55
3DEC:  MOVWF  FA7
3DEE:  MOVLW  AA
3DF0:  MOVWF  FA7
3DF2:  BSF    FA6.1
3DF4:  BTFSC  FA6.1
3DF6:  BRA    3DF4
3DF8:  BCF    FA6.2
3DFA:  MOVF   00,W
3DFC:  IORWF  FF2,F
3DFE:  MOVFF  262,353
3E02:  MOVFF  261,352
3E06:  MOVFF  260,351
3E0A:  MOVFF  25F,350
3E0E:  MOVLB  0
3E10:  CALL   1974
3E14:  MOVFF  01,31F
3E18:  MOVLW  0C
3E1A:  MOVWF  FA9
3E1C:  MOVFF  31F,FA8
3E20:  BCF    FA6.6
3E22:  BCF    FA6.7
3E24:  BSF    FA6.2
3E26:  MOVF   FF2,W
3E28:  MOVWF  00
3E2A:  BCF    FF2.7
3E2C:  MOVLB  F
3E2E:  MOVLW  55
3E30:  MOVWF  FA7
3E32:  MOVLW  AA
3E34:  MOVWF  FA7
3E36:  BSF    FA6.1
3E38:  BTFSC  FA6.1
3E3A:  BRA    3E38
3E3C:  BCF    FA6.2
3E3E:  MOVF   00,W
3E40:  IORWF  FF2,F
3E42:  MOVLW  14
3E44:  MOVWF  FA9
3E46:  MOVFF  252,FA8
3E4A:  BCF    FA6.6
3E4C:  BCF    FA6.7
3E4E:  BSF    FA6.2
3E50:  MOVF   FF2,W
3E52:  MOVWF  00
3E54:  BCF    FF2.7
3E56:  MOVLW  55
3E58:  MOVWF  FA7
3E5A:  MOVLW  AA
3E5C:  MOVWF  FA7
3E5E:  BSF    FA6.1
3E60:  BTFSC  FA6.1
3E62:  BRA    3E60
3E64:  BCF    FA6.2
3E66:  MOVF   00,W
3E68:  IORWF  FF2,F
....................          write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);write_eeprom(15,(int8)Ganancia2); 
3E6A:  MOVLW  0D
3E6C:  MOVWF  FA9
3E6E:  MOVFF  249,FA8
3E72:  BCF    FA6.6
3E74:  BCF    FA6.7
3E76:  BSF    FA6.2
3E78:  MOVF   FF2,W
3E7A:  MOVWF  00
3E7C:  BCF    FF2.7
3E7E:  MOVLW  55
3E80:  MOVWF  FA7
3E82:  MOVLW  AA
3E84:  MOVWF  FA7
3E86:  BSF    FA6.1
3E88:  BTFSC  FA6.1
3E8A:  BRA    3E88
3E8C:  BCF    FA6.2
3E8E:  MOVF   00,W
3E90:  IORWF  FF2,F
3E92:  MOVLW  0E
3E94:  MOVWF  FA9
3E96:  MOVFF  24A,FA8
3E9A:  BCF    FA6.6
3E9C:  BCF    FA6.7
3E9E:  BSF    FA6.2
3EA0:  MOVF   FF2,W
3EA2:  MOVWF  00
3EA4:  BCF    FF2.7
3EA6:  MOVLW  55
3EA8:  MOVWF  FA7
3EAA:  MOVLW  AA
3EAC:  MOVWF  FA7
3EAE:  BSF    FA6.1
3EB0:  BTFSC  FA6.1
3EB2:  BRA    3EB0
3EB4:  BCF    FA6.2
3EB6:  MOVF   00,W
3EB8:  IORWF  FF2,F
3EBA:  MOVFF  27E,353
3EBE:  MOVFF  27D,352
3EC2:  MOVFF  27C,351
3EC6:  MOVFF  27B,350
3ECA:  MOVLB  0
3ECC:  CALL   1974
3ED0:  MOVFF  01,31F
3ED4:  MOVLW  0F
3ED6:  MOVWF  FA9
3ED8:  MOVFF  31F,FA8
3EDC:  BCF    FA6.6
3EDE:  BCF    FA6.7
3EE0:  BSF    FA6.2
3EE2:  MOVF   FF2,W
3EE4:  MOVWF  00
3EE6:  BCF    FF2.7
3EE8:  MOVLB  F
3EEA:  MOVLW  55
3EEC:  MOVWF  FA7
3EEE:  MOVLW  AA
3EF0:  MOVWF  FA7
3EF2:  BSF    FA6.1
3EF4:  BTFSC  FA6.1
3EF6:  BRA    3EF4
3EF8:  BCF    FA6.2
3EFA:  MOVF   00,W
3EFC:  IORWF  FF2,F
3EFE:  MOVLB  0
....................       }   
....................        
....................       if(rxubuf[13]==1) 
3F00:  DECFSZ 4F,W
3F02:  BRA    3F0C
....................       { 
....................          Visua=1; 
3F04:  MOVLB  2
3F06:  BSF    x36.5
....................       } 
....................       else 
3F08:  BRA    3F10
3F0A:  MOVLB  0
....................       { 
....................          Visua=0; 
3F0C:  MOVLB  2
3F0E:  BCF    x36.5
....................       } 
....................        
....................       if(rxubuf[8]==1)// Camara OUT 
3F10:  DECFSZ 4A,W
3F12:  BRA    3F18
....................       { 
....................          CamaraOUT=1; 
3F14:  BSF    x02.5
....................       } 
....................       else 
3F16:  BRA    3F1A
....................       { 
....................          CamaraOUT=0; 
3F18:  BCF    x02.5
....................       } 
....................        
....................       if(rxubuf[9]==1)// Camara IN 
3F1A:  DECFSZ 4B,W
3F1C:  BRA    3F22
....................       { 
....................          CamaraIN=1; 
3F1E:  BSF    x02.6
....................       } 
....................       else 
3F20:  BRA    3F24
....................       { 
....................          CamaraIN=0; 
3F22:  BCF    x02.6
3F24:  MOVLB  0
....................       } 
....................     } 
....................      
....................     TempUSB=Temperatura; 
3F26:  MOVFF  2AA,2AE
3F2A:  MOVFF  2A9,2AD
3F2E:  MOVFF  2A8,2AC
3F32:  MOVFF  2A7,2AB
....................     recbuf[0]=(int8)(TempUSB); 
3F36:  MOVFF  2AE,353
3F3A:  MOVFF  2AD,352
3F3E:  MOVFF  2AC,351
3F42:  MOVFF  2AB,350
3F46:  CALL   1974
3F4A:  MOVFF  01,22
....................     recbuf[1]=120; 
3F4E:  MOVLW  78
3F50:  MOVWF  23
....................     d3=TempUSB-(int8)TempUSB; 
3F52:  MOVFF  2AE,353
3F56:  MOVFF  2AD,352
3F5A:  MOVFF  2AC,351
3F5E:  MOVFF  2AB,350
3F62:  CALL   1974
3F66:  MOVLB  3
3F68:  CLRF   x55
3F6A:  MOVFF  01,354
3F6E:  MOVLB  0
3F70:  CALL   0FBA
3F74:  BSF    FD8.1
3F76:  MOVFF  2AE,357
3F7A:  MOVFF  2AD,356
3F7E:  MOVFF  2AC,355
3F82:  MOVFF  2AB,354
3F86:  MOVFF  03,35B
3F8A:  MOVFF  02,35A
3F8E:  MOVFF  01,359
3F92:  MOVFF  00,358
3F96:  CALL   11A2
3F9A:  MOVFF  03,286
3F9E:  MOVFF  02,285
3FA2:  MOVFF  01,284
3FA6:  MOVFF  00,283
....................     d3=d3*10.0; 
3FAA:  MOVFF  286,353
3FAE:  MOVFF  285,352
3FB2:  MOVFF  284,351
3FB6:  MOVFF  283,350
3FBA:  MOVLB  3
3FBC:  CLRF   x57
3FBE:  CLRF   x56
3FC0:  MOVLW  20
3FC2:  MOVWF  x55
3FC4:  MOVLW  82
3FC6:  MOVWF  x54
3FC8:  MOVLB  0
3FCA:  CALL   1804
3FCE:  MOVFF  03,286
3FD2:  MOVFF  02,285
3FD6:  MOVFF  01,284
3FDA:  MOVFF  00,283
....................     recbuf[2]=(int8)d3; 
3FDE:  MOVFF  286,353
3FE2:  MOVFF  285,352
3FE6:  MOVFF  284,351
3FEA:  MOVFF  283,350
3FEE:  CALL   1974
3FF2:  MOVFF  01,24
....................     recbuf[3]=(int8)Pt; 
3FF6:  MOVFF  25E,353
3FFA:  MOVFF  25D,352
3FFE:  MOVFF  25C,351
4002:  MOVFF  25B,350
4006:  CALL   1974
400A:  MOVFF  01,25
....................     recbuf[4]=(int8)Setpoint; 
400E:  MOVFF  2A6,353
4012:  MOVFF  2A5,352
4016:  MOVFF  2A4,351
401A:  MOVFF  2A3,350
401E:  CALL   1974
4022:  MOVFF  01,26
....................     recbuf[5]=Presostato; 
4026:  MOVFF  21E,27
....................     d4=Pt-(int8)Pt; 
402A:  MOVFF  25E,353
402E:  MOVFF  25D,352
4032:  MOVFF  25C,351
4036:  MOVFF  25B,350
403A:  CALL   1974
403E:  MOVLB  3
4040:  CLRF   x55
4042:  MOVFF  01,354
4046:  MOVLB  0
4048:  CALL   0FBA
404C:  BSF    FD8.1
404E:  MOVFF  25E,357
4052:  MOVFF  25D,356
4056:  MOVFF  25C,355
405A:  MOVFF  25B,354
405E:  MOVFF  03,35B
4062:  MOVFF  02,35A
4066:  MOVFF  01,359
406A:  MOVFF  00,358
406E:  CALL   11A2
4072:  MOVFF  03,28A
4076:  MOVFF  02,289
407A:  MOVFF  01,288
407E:  MOVFF  00,287
....................     d4=d4*10.0; 
4082:  MOVFF  28A,353
4086:  MOVFF  289,352
408A:  MOVFF  288,351
408E:  MOVFF  287,350
4092:  MOVLB  3
4094:  CLRF   x57
4096:  CLRF   x56
4098:  MOVLW  20
409A:  MOVWF  x55
409C:  MOVLW  82
409E:  MOVWF  x54
40A0:  MOVLB  0
40A2:  CALL   1804
40A6:  MOVFF  03,28A
40AA:  MOVFF  02,289
40AE:  MOVFF  01,288
40B2:  MOVFF  00,287
....................     recbuf[6]=(int8)d4; 
40B6:  MOVFF  28A,353
40BA:  MOVFF  289,352
40BE:  MOVFF  288,351
40C2:  MOVFF  287,350
40C6:  CALL   1974
40CA:  MOVFF  01,28
....................     recbuf[7]=(int8)NivelTanque; 
40CE:  MOVFF  21D,29
....................     recbuf[8]=(int8)NivelReservorio; 
40D2:  MOVFF  21C,2A
....................     recbuf[9]=(int8)Tpulso; 
40D6:  MOVFF  266,353
40DA:  MOVFF  265,352
40DE:  MOVFF  264,351
40E2:  MOVFF  263,350
40E6:  CALL   1974
40EA:  MOVFF  01,2B
....................     d5=Tpulso-(int8)Tpulso; 
40EE:  MOVFF  266,353
40F2:  MOVFF  265,352
40F6:  MOVFF  264,351
40FA:  MOVFF  263,350
40FE:  CALL   1974
4102:  MOVLB  3
4104:  CLRF   x55
4106:  MOVFF  01,354
410A:  MOVLB  0
410C:  CALL   0FBA
4110:  BSF    FD8.1
4112:  MOVFF  266,357
4116:  MOVFF  265,356
411A:  MOVFF  264,355
411E:  MOVFF  263,354
4122:  MOVFF  03,35B
4126:  MOVFF  02,35A
412A:  MOVFF  01,359
412E:  MOVFF  00,358
4132:  CALL   11A2
4136:  MOVFF  03,28E
413A:  MOVFF  02,28D
413E:  MOVFF  01,28C
4142:  MOVFF  00,28B
....................     d5=d5*10.0; 
4146:  MOVFF  28E,353
414A:  MOVFF  28D,352
414E:  MOVFF  28C,351
4152:  MOVFF  28B,350
4156:  MOVLB  3
4158:  CLRF   x57
415A:  CLRF   x56
415C:  MOVLW  20
415E:  MOVWF  x55
4160:  MOVLW  82
4162:  MOVWF  x54
4164:  MOVLB  0
4166:  CALL   1804
416A:  MOVFF  03,28E
416E:  MOVFF  02,28D
4172:  MOVFF  01,28C
4176:  MOVFF  00,28B
....................     recbuf[10]=(int8)d5; 
417A:  MOVFF  28E,353
417E:  MOVFF  28D,352
4182:  MOVFF  28C,351
4186:  MOVFF  28B,350
418A:  CALL   1974
418E:  MOVFF  01,2C
....................     recbuf[11]=(int8)error; 
4192:  MOVFF  26A,353
4196:  MOVFF  269,352
419A:  MOVFF  268,351
419E:  MOVFF  267,350
41A2:  CALL   1974
41A6:  MOVFF  01,2D
....................     d6=error-(int8)error; 
41AA:  MOVFF  26A,353
41AE:  MOVFF  269,352
41B2:  MOVFF  268,351
41B6:  MOVFF  267,350
41BA:  CALL   1974
41BE:  MOVLB  3
41C0:  CLRF   x55
41C2:  MOVFF  01,354
41C6:  MOVLB  0
41C8:  CALL   0FBA
41CC:  BSF    FD8.1
41CE:  MOVFF  26A,357
41D2:  MOVFF  269,356
41D6:  MOVFF  268,355
41DA:  MOVFF  267,354
41DE:  MOVFF  03,35B
41E2:  MOVFF  02,35A
41E6:  MOVFF  01,359
41EA:  MOVFF  00,358
41EE:  CALL   11A2
41F2:  MOVFF  03,29A
41F6:  MOVFF  02,299
41FA:  MOVFF  01,298
41FE:  MOVFF  00,297
....................     d6=d6*10.0; 
4202:  MOVFF  29A,353
4206:  MOVFF  299,352
420A:  MOVFF  298,351
420E:  MOVFF  297,350
4212:  MOVLB  3
4214:  CLRF   x57
4216:  CLRF   x56
4218:  MOVLW  20
421A:  MOVWF  x55
421C:  MOVLW  82
421E:  MOVWF  x54
4220:  MOVLB  0
4222:  CALL   1804
4226:  MOVFF  03,29A
422A:  MOVFF  02,299
422E:  MOVFF  01,298
4232:  MOVFF  00,297
....................     recbuf[12]=(int8)d6; 
4236:  MOVFF  29A,353
423A:  MOVFF  299,352
423E:  MOVFF  298,351
4242:  MOVFF  297,350
4246:  CALL   1974
424A:  MOVFF  01,2E
....................      
....................     recbuf[13]=(int8)Aumento; 
424E:  MOVFF  201,353
4252:  MOVFF  200,352
4256:  MOVFF  1FF,351
425A:  MOVFF  1FE,350
425E:  CALL   1974
4262:  MOVFF  01,2F
....................     d7=Aumento-(int8)Aumento; 
4266:  MOVFF  201,353
426A:  MOVFF  200,352
426E:  MOVFF  1FF,351
4272:  MOVFF  1FE,350
4276:  CALL   1974
427A:  MOVLB  3
427C:  CLRF   x55
427E:  MOVFF  01,354
4282:  MOVLB  0
4284:  CALL   0FBA
4288:  BSF    FD8.1
428A:  MOVFF  201,357
428E:  MOVFF  200,356
4292:  MOVFF  1FF,355
4296:  MOVFF  1FE,354
429A:  MOVFF  03,35B
429E:  MOVFF  02,35A
42A2:  MOVFF  01,359
42A6:  MOVFF  00,358
42AA:  CALL   11A2
42AE:  MOVFF  03,29E
42B2:  MOVFF  02,29D
42B6:  MOVFF  01,29C
42BA:  MOVFF  00,29B
....................     d7=d7*10.0; 
42BE:  MOVFF  29E,353
42C2:  MOVFF  29D,352
42C6:  MOVFF  29C,351
42CA:  MOVFF  29B,350
42CE:  MOVLB  3
42D0:  CLRF   x57
42D2:  CLRF   x56
42D4:  MOVLW  20
42D6:  MOVWF  x55
42D8:  MOVLW  82
42DA:  MOVWF  x54
42DC:  MOVLB  0
42DE:  CALL   1804
42E2:  MOVFF  03,29E
42E6:  MOVFF  02,29D
42EA:  MOVFF  01,29C
42EE:  MOVFF  00,29B
....................     recbuf[14]=(int8)d7; 
42F2:  MOVFF  29E,353
42F6:  MOVFF  29D,352
42FA:  MOVFF  29C,351
42FE:  MOVFF  29B,350
4302:  CALL   1974
4306:  MOVFF  01,30
....................      
....................     recbuf[15]=(int8)Ganancia; 
430A:  MOVFF  27A,353
430E:  MOVFF  279,352
4312:  MOVFF  278,351
4316:  MOVFF  277,350
431A:  CALL   1974
431E:  MOVFF  01,31
....................     d8=Ganancia-(int8)Ganancia; 
4322:  MOVFF  27A,353
4326:  MOVFF  279,352
432A:  MOVFF  278,351
432E:  MOVFF  277,350
4332:  CALL   1974
4336:  MOVLB  3
4338:  CLRF   x55
433A:  MOVFF  01,354
433E:  MOVLB  0
4340:  CALL   0FBA
4344:  BSF    FD8.1
4346:  MOVFF  27A,357
434A:  MOVFF  279,356
434E:  MOVFF  278,355
4352:  MOVFF  277,354
4356:  MOVFF  03,35B
435A:  MOVFF  02,35A
435E:  MOVFF  01,359
4362:  MOVFF  00,358
4366:  CALL   11A2
436A:  MOVFF  03,2A2
436E:  MOVFF  02,2A1
4372:  MOVFF  01,2A0
4376:  MOVFF  00,29F
....................     d8=d8*10.0; 
437A:  MOVFF  2A2,353
437E:  MOVFF  2A1,352
4382:  MOVFF  2A0,351
4386:  MOVFF  29F,350
438A:  MOVLB  3
438C:  CLRF   x57
438E:  CLRF   x56
4390:  MOVLW  20
4392:  MOVWF  x55
4394:  MOVLW  82
4396:  MOVWF  x54
4398:  MOVLB  0
439A:  CALL   1804
439E:  MOVFF  03,2A2
43A2:  MOVFF  02,2A1
43A6:  MOVFF  01,2A0
43AA:  MOVFF  00,29F
....................     recbuf[16]=(int8)d8; 
43AE:  MOVFF  2A2,353
43B2:  MOVFF  2A1,352
43B6:  MOVFF  2A0,351
43BA:  MOVFF  29F,350
43BE:  CALL   1974
43C2:  MOVFF  01,32
....................     recbuf[17]=(int8)Puerta; 
43C6:  MOVFF  21A,33
....................                 
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
43CA:  MOVLW  01
43CC:  MOVLB  3
43CE:  MOVWF  x1F
43D0:  CLRF   x21
43D2:  MOVLW  22
43D4:  MOVWF  x20
43D6:  CLRF   x23
43D8:  MOVLW  20
43DA:  MOVWF  x22
43DC:  MOVLW  02
43DE:  MOVWF  x24
43E0:  MOVLB  0
43E2:  GOTO   306C
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................     
....................    if(Expulsa==1) 
43E6:  MOVLB  2
43E8:  BTFSS  x36.3
43EA:  BRA    4558
....................    {    
....................       Temperatura=Leer_Sensor(MediaMovil); 
43EC:  MOVFF  252,31F
43F0:  MOVLB  0
43F2:  CALL   1486
43F6:  MOVFF  03,2AA
43FA:  MOVFF  02,2A9
43FE:  MOVFF  01,2A8
4402:  MOVFF  00,2A7
....................       d3=Temperatura-(int8)Temperatura; 
4406:  MOVFF  2AA,353
440A:  MOVFF  2A9,352
440E:  MOVFF  2A8,351
4412:  MOVFF  2A7,350
4416:  CALL   1974
441A:  MOVLB  3
441C:  CLRF   x55
441E:  MOVFF  01,354
4422:  MOVLB  0
4424:  CALL   0FBA
4428:  BSF    FD8.1
442A:  MOVFF  2AA,357
442E:  MOVFF  2A9,356
4432:  MOVFF  2A8,355
4436:  MOVFF  2A7,354
443A:  MOVFF  03,35B
443E:  MOVFF  02,35A
4442:  MOVFF  01,359
4446:  MOVFF  00,358
444A:  CALL   11A2
444E:  MOVFF  03,286
4452:  MOVFF  02,285
4456:  MOVFF  01,284
445A:  MOVFF  00,283
....................       d3=d3*10.0; 
445E:  MOVFF  286,353
4462:  MOVFF  285,352
4466:  MOVFF  284,351
446A:  MOVFF  283,350
446E:  MOVLB  3
4470:  CLRF   x57
4472:  CLRF   x56
4474:  MOVLW  20
4476:  MOVWF  x55
4478:  MOVLW  82
447A:  MOVWF  x54
447C:  MOVLB  0
447E:  CALL   1804
4482:  MOVFF  03,286
4486:  MOVFF  02,285
448A:  MOVFF  01,284
448E:  MOVFF  00,283
....................       PresionCamara=Leer_Sensor_Presion(20); 
4492:  MOVLW  14
4494:  MOVLB  3
4496:  MOVWF  x1F
4498:  MOVLB  0
449A:  CALL   2AEE
449E:  MOVFF  03,2B2
44A2:  MOVFF  02,2B1
44A6:  MOVFF  01,2B0
44AA:  MOVFF  00,2AF
....................       if(PresionCamara<=255) 
44AE:  MOVFF  2B2,353
44B2:  MOVFF  2B1,352
44B6:  MOVFF  2B0,351
44BA:  MOVFF  2AF,350
44BE:  MOVLB  3
44C0:  CLRF   x57
44C2:  CLRF   x56
44C4:  MOVLW  7F
44C6:  MOVWF  x55
44C8:  MOVLW  86
44CA:  MOVWF  x54
44CC:  MOVLB  0
44CE:  CALL   18FA
44D2:  BC    44D6
44D4:  BNZ   4520
....................       { 
....................          if(PresionCamara<2.0) 
44D6:  MOVFF  2B2,353
44DA:  MOVFF  2B1,352
44DE:  MOVFF  2B0,351
44E2:  MOVFF  2AF,350
44E6:  MOVLB  3
44E8:  CLRF   x57
44EA:  CLRF   x56
44EC:  CLRF   x55
44EE:  MOVLW  80
44F0:  MOVWF  x54
44F2:  MOVLB  0
44F4:  CALL   18FA
44F8:  BNC   4506
....................          { 
....................             PresionCamara=0.0; 
44FA:  MOVLB  2
44FC:  CLRF   xB2
44FE:  CLRF   xB1
4500:  CLRF   xB0
4502:  CLRF   xAF
4504:  MOVLB  0
....................          } 
....................          Presostato=(int8)PresionCamara; 
4506:  MOVFF  2B2,353
450A:  MOVFF  2B1,352
450E:  MOVFF  2B0,351
4512:  MOVFF  2AF,350
4516:  CALL   1974
451A:  MOVFF  01,21E
....................       } 
....................       else 
451E:  BRA    4528
....................       { 
....................          Presostato=255; 
4520:  MOVLW  FF
4522:  MOVLB  2
4524:  MOVWF  x1E
4526:  MOVLB  0
....................       } 
....................       Puerta=!DOOR; 
4528:  BSF    F95.4
452A:  MOVLB  2
452C:  CLRF   x1A
452E:  BTFSC  F83.4
4530:  INCF   x1A,F
....................       Parada=!STOP; 
4532:  BSF    F95.5
4534:  CLRF   x1B
4536:  BTFSC  F83.5
4538:  INCF   x1B,F
....................       NivelReservorio=LOW; 
453A:  BSF    F95.0
453C:  CLRF   x1C
453E:  BTFSC  F83.0
4540:  INCF   x1C,F
....................       NivelTanque=MEDIUM; 
4542:  BSF    F95.1
4544:  CLRF   x1D
4546:  BTFSC  F83.1
4548:  INCF   x1D,F
....................       //Temperatura=Leer_Sensor(10); 
....................        
....................       Lee_Vector(); 
454A:  MOVLB  0
454C:  CALL   2E6A
....................       Carga_Vector(); 
4550:  CALL   2EBC
....................       Expulsa=0; 
4554:  MOVLB  2
4556:  BCF    x36.3
....................    }     
....................  
....................    if(tinicio>7200 && tiempo_esterilizacion==0)//tinicio expresado en segundos       
4558:  MOVF   x2F,W
455A:  SUBLW  1B
455C:  BC    45AC
455E:  XORLW  FF
4560:  BNZ   4568
4562:  MOVF   x2E,W
4564:  SUBLW  20
4566:  BC    45AC
4568:  MOVF   x4E,F
456A:  BNZ   45AC
....................    { 
....................          if(PresionCamara>2.0) 
456C:  MOVLB  3
456E:  CLRF   x53
4570:  CLRF   x52
4572:  CLRF   x51
4574:  MOVLW  80
4576:  MOVWF  x50
4578:  MOVFF  2B2,357
457C:  MOVFF  2B1,356
4580:  MOVFF  2B0,355
4584:  MOVFF  2AF,354
4588:  MOVLB  0
458A:  CALL   18FA
458E:  BNC   4594
....................          { 
....................             EV_Desfogue_on; 
4590:  BSF    F8A.2
4592:  BCF    F93.2
....................          } 
....................          Alarma=1; 
4594:  MOVLW  01
4596:  MOVLB  2
4598:  MOVWF  x17
....................          EV_Agua_off; 
459A:  BCF    F8A.4
459C:  BCF    F93.4
....................          EV_Paso_off; 
459E:  BCF    F8A.3
45A0:  BCF    F93.3
....................          Resistencia_off; 
45A2:  BCF    F8B.0
45A4:  BCF    F94.0
....................          Resistencia2_off; 
45A6:  BCF    F8B.1
45A8:  BCF    F94.1
....................    } 
....................    else 
45AA:  BRA    4812
....................    {       
....................       if(EVDesfogue<1 && tiempo_esterilizacion==1 && (Temperatura<100.0 || Temperatura>145.0)) 
45AC:  MOVF   x0F,F
45AE:  BNZ   461C
45B0:  DECFSZ x4E,W
45B2:  BRA    461C
45B4:  MOVFF  2AA,353
45B8:  MOVFF  2A9,352
45BC:  MOVFF  2A8,351
45C0:  MOVFF  2A7,350
45C4:  MOVLB  3
45C6:  CLRF   x57
45C8:  CLRF   x56
45CA:  MOVLW  48
45CC:  MOVWF  x55
45CE:  MOVLW  85
45D0:  MOVWF  x54
45D2:  MOVLB  0
45D4:  CALL   18FA
45D8:  BC    4606
45DA:  MOVLB  3
45DC:  CLRF   x53
45DE:  CLRF   x52
45E0:  MOVLW  11
45E2:  MOVWF  x51
45E4:  MOVLW  86
45E6:  MOVWF  x50
45E8:  MOVFF  2AA,357
45EC:  MOVFF  2A9,356
45F0:  MOVFF  2A8,355
45F4:  MOVFF  2A7,354
45F8:  MOVLB  0
45FA:  CALL   18FA
45FE:  BTFSC  FD8.0
4600:  BRA    4606
4602:  MOVLB  2
4604:  BRA    461C
....................       { 
....................          Alarma=2; 
4606:  MOVLW  02
4608:  MOVLB  2
460A:  MOVWF  x17
....................          EV_Agua_off; 
460C:  BCF    F8A.4
460E:  BCF    F93.4
....................          EV_Paso_off; 
4610:  BCF    F8A.3
4612:  BCF    F93.3
....................          Resistencia_off; 
4614:  BCF    F8B.0
4616:  BCF    F94.0
....................          Resistencia2_off; 
4618:  BCF    F8B.1
461A:  BCF    F94.1
....................       } 
....................        
....................       if(tagua>300) // Si se el ingreso de agua al tanque dura mas de 1 minuto se activa la alarma por falta de agua. 
461C:  MOVF   x31,W
461E:  SUBLW  00
4620:  BC    4640
4622:  XORLW  FF
4624:  BNZ   462C
4626:  MOVF   x30,W
4628:  SUBLW  2C
462A:  BC    4640
....................       { 
....................          AlarmaAgua=1;  
462C:  MOVLW  01
462E:  MOVWF  x18
....................          EV_Agua_off; 
4630:  BCF    F8A.4
4632:  BCF    F93.4
....................          EV_Paso_off; 
4634:  BCF    F8A.3
4636:  BCF    F93.3
....................          Resistencia_off; 
4638:  BCF    F8B.0
463A:  BCF    F94.0
....................          Resistencia2_off; 
463C:  BCF    F8B.1
463E:  BCF    F94.1
....................       } 
....................        
....................       if(!LOW && flag_agua==1) 
4640:  BSF    F95.0
4642:  BTFSC  F83.0
4644:  BRA    465E
4646:  BTFSS  x02.2
4648:  BRA    465E
....................       { 
....................          Alarma=3;  
464A:  MOVLW  03
464C:  MOVWF  x17
....................          EV_Agua_off; 
464E:  BCF    F8A.4
4650:  BCF    F93.4
....................          EV_Paso_off; 
4652:  BCF    F8A.3
4654:  BCF    F93.3
....................          Resistencia_off; 
4656:  BCF    F8B.0
4658:  BCF    F94.0
....................          Resistencia2_off; 
465A:  BCF    F8B.1
465C:  BCF    F94.1
....................       } 
....................        
....................       if(Control==1 && !DOOR && !STOP && AlarmaAgua==0 && Alarma==0) // Si esta en condiciones normales para ejecutar el control. 
465E:  DECFSZ x16,W
4660:  BRA    470E
4662:  BSF    F95.4
4664:  BTFSS  F83.4
4666:  BRA    470E
4668:  BSF    F95.5
466A:  BTFSS  F83.5
466C:  BRA    470E
466E:  MOVF   x18,F
4670:  BNZ   470E
4672:  MOVF   x17,F
4674:  BNZ   470E
....................       { 
....................          if(Temperatura<95.0 ) 
4676:  MOVFF  2AA,353
467A:  MOVFF  2A9,352
467E:  MOVFF  2A8,351
4682:  MOVFF  2A7,350
4686:  MOVLB  3
4688:  CLRF   x57
468A:  CLRF   x56
468C:  MOVLW  3E
468E:  MOVWF  x55
4690:  MOVLW  85
4692:  MOVWF  x54
4694:  MOVLB  0
4696:  CALL   18FA
469A:  BNC   46F2
....................          { 
....................             if(PresionCamara>=5) 
469C:  MOVLB  3
469E:  CLRF   x53
46A0:  CLRF   x52
46A2:  MOVLW  20
46A4:  MOVWF  x51
46A6:  MOVLW  81
46A8:  MOVWF  x50
46AA:  MOVFF  2B2,357
46AE:  MOVFF  2B1,356
46B2:  MOVFF  2B0,355
46B6:  MOVFF  2AF,354
46BA:  MOVLB  0
46BC:  CALL   18FA
46C0:  BC    46C4
46C2:  BNZ   46C8
....................             { 
....................                EV_Desfogue_on; 
46C4:  BSF    F8A.2
46C6:  BCF    F93.2
....................             } 
....................             if(PresionCamara<2) 
46C8:  MOVFF  2B2,353
46CC:  MOVFF  2B1,352
46D0:  MOVFF  2B0,351
46D4:  MOVFF  2AF,350
46D8:  MOVLB  3
46DA:  CLRF   x57
46DC:  CLRF   x56
46DE:  CLRF   x55
46E0:  MOVLW  80
46E2:  MOVWF  x54
46E4:  MOVLB  0
46E6:  CALL   18FA
46EA:  BNC   46F0
....................             { 
....................                EV_Desfogue_off; 
46EC:  BCF    F8A.2
46EE:  BCF    F93.2
....................             } 
....................              
....................          } 
....................          else 
46F0:  BRA    46F6
....................          { 
....................             EV_Desfogue_off; 
46F2:  BCF    F8A.2
46F4:  BCF    F93.2
....................          } 
....................           
....................          if(!TERM) 
46F6:  BSF    F95.6
46F8:  BTFSS  F83.6
46FA:  BRA    4702
....................          { 
....................             Controla(); 
46FC:  GOTO   311C
....................          } 
....................          else 
4700:  BRA    470A
....................          { 
....................             Resistencia_off; 
4702:  BCF    F8B.0
4704:  BCF    F94.0
....................             Resistencia2_off; 
4706:  BCF    F8B.1
4708:  BCF    F94.1
....................          } 
....................           
....................          /*if(CamaraOUT==1) // Si desea abrir electrovalvula desde Software de control  
....................          { 
....................             EV_Desfogue_on; 
....................          } 
....................          else 
....................          { 
....................             EV_Desfogue_off;  
....................          }*/ 
....................                    
....................       } 
....................       else 
470A:  BRA    4718
470C:  MOVLB  2
....................       { 
....................          Resistencia_off; 
470E:  BCF    F8B.0
4710:  BCF    F94.0
....................          Resistencia2_off; 
4712:  BCF    F8B.1
4714:  BCF    F94.1
....................          flag_presostato=0; 
4716:  BCF    x03.0
....................       } 
....................        
....................       // Manejo de llenado de Autoclave con Agua        
....................       if(EVAgua!=0 && flag_agua==0) 
4718:  MOVLB  2
471A:  MOVF   x10,F
471C:  BZ    4762
471E:  BTFSC  x02.2
4720:  BRA    4762
....................       { 
....................          if(!MEDIUM && !STOP) 
4722:  BSF    F95.1
4724:  BTFSC  F83.1
4726:  BRA    4740
4728:  BSF    F95.5
472A:  BTFSS  F83.5
472C:  BRA    4740
....................          { 
....................             flag_reservorio=0;    
472E:  BCF    x02.7
....................             treservorio=0; 
4730:  CLRF   x33
4732:  CLRF   x32
....................             EV_Agua_on; 
4734:  BSF    F8A.4
4736:  BCF    F93.4
....................             tiempo_esterilizacion=0; 
4738:  CLRF   x4E
....................             flag_agua=0;flag_agua2=0; 
473A:  BCF    x02.2
473C:  BCF    x02.4
....................          } 
....................          else 
473E:  BRA    4762
....................          { 
....................             if(treservorio>=800) 
4740:  MOVF   x33,W
4742:  SUBLW  02
4744:  BC    4760
4746:  XORLW  FF
4748:  BNZ   4750
474A:  MOVF   x32,W
474C:  SUBLW  1F
474E:  BC    4760
....................             { 
....................                EV_Agua_off; 
4750:  BCF    F8A.4
4752:  BCF    F93.4
....................                flag_reservorio=0;    
4754:  BCF    x02.7
....................                flag_agua2=1;p=3; 
4756:  BSF    x02.4
4758:  MOVLW  03
475A:  MOVWF  x51
....................                flag_agua=1; 
475C:  BSF    x02.2
....................             } 
....................             else 
475E:  BRA    4762
....................             { 
....................                flag_reservorio=1;    
4760:  BSF    x02.7
....................             } 
....................          } 
....................       } 
....................         
....................       if(Temperatura>=(Setpoint-0.3)&&p==3)// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
4762:  BSF    FD8.1
4764:  MOVFF  2A6,357
4768:  MOVFF  2A5,356
476C:  MOVFF  2A4,355
4770:  MOVFF  2A3,354
4774:  MOVLW  9A
4776:  MOVLB  3
4778:  MOVWF  x5B
477A:  MOVLW  99
477C:  MOVWF  x5A
477E:  MOVLW  19
4780:  MOVWF  x59
4782:  MOVLW  7D
4784:  MOVWF  x58
4786:  MOVLB  0
4788:  CALL   11A2
478C:  MOVFF  03,353
4790:  MOVFF  02,352
4794:  MOVFF  01,351
4798:  MOVFF  00,350
479C:  MOVFF  2AA,357
47A0:  MOVFF  2A9,356
47A4:  MOVFF  2A8,355
47A8:  MOVFF  2A7,354
47AC:  CALL   18FA
47B0:  BC    47B4
47B2:  BNZ   47C8
47B4:  MOVLB  2
47B6:  MOVF   x51,W
47B8:  SUBLW  03
47BA:  BTFSC  FD8.2
47BC:  BRA    47C2
47BE:  MOVLB  0
47C0:  BRA    47C8
....................       { 
....................          tiempo_esterilizacion=1;     
47C2:  MOVLW  01
47C4:  MOVWF  x4E
....................          p=1; 
47C6:  MOVWF  x51
....................          //Ganancia=Ganancia2; 
....................       }         
....................        
....................       if(EVDesfogue==1 ) 
47C8:  MOVLB  2
47CA:  DECFSZ x0F,W
47CC:  BRA    47E2
....................       { 
....................          EV_Desfogue_on; 
47CE:  BSF    F8A.2
47D0:  BCF    F93.2
....................          EV_Agua_off; 
47D2:  BCF    F8A.4
47D4:  BCF    F93.4
....................          EV_Paso_off; 
47D6:  BCF    F8A.3
47D8:  BCF    F93.3
....................          Resistencia_off; 
47DA:  BCF    F8B.0
47DC:  BCF    F94.0
....................          Resistencia2_off; 
47DE:  BCF    F8B.1
47E0:  BCF    F94.1
....................       }  
....................        
....................       if(EVDesfogue==3 && !STOP ) 
47E2:  MOVF   x0F,W
47E4:  SUBLW  03
47E6:  BNZ   4812
47E8:  BSF    F95.5
47EA:  BTFSS  F83.5
47EC:  BRA    4812
....................       { 
....................          EV_Paso_off; 
47EE:  BCF    F8A.3
47F0:  BCF    F93.3
....................          if(Presostato<2) 
47F2:  MOVF   x1E,W
47F4:  SUBLW  01
47F6:  BNC   47FE
....................          { 
....................             EV_Desfogue_off; 
47F8:  BCF    F8A.2
47FA:  BCF    F93.2
....................          } 
....................          else 
47FC:  BRA    4802
....................          { 
....................             EV_Desfogue_on; 
47FE:  BSF    F8A.2
4800:  BCF    F93.2
....................          } 
....................          Resistencia_off; 
4802:  BCF    F8B.0
4804:  BCF    F94.0
....................          Resistencia2_off; 
4806:  BCF    F8B.1
4808:  BCF    F94.1
....................          if(Control==3) 
480A:  MOVF   x16,W
480C:  SUBLW  03
480E:  BNZ   4812
....................          { 
....................             reset_cpu(); 
4810:  RESET
....................          } 
....................       } 
....................    }     
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................   
....................    } 
4812:  GOTO   3C74
.................... } 
4816:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
