CCS PCH C Compiler, Version 4.104, 5967               08-feb.-16 12:59

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclave Horizontal\Con Precamara\Autoclave 110L\Autoclave ArtiLab\Firmware V2\GLCD_Controller\GLCD_Controller.lst

               ROM used: 27570 bytes (84%)
                         Largest free fragment is 5194
               RAM used: 1342 (66%) at main() level
                         1398 (68%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  GOTO   2B42
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   1024
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   0F38
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
10EC:  MOVLW  05
10EE:  MOVWF  FEA
10F0:  MOVLW  3F
10F2:  MOVWF  FE9
10F4:  MOVF   FEF,W
10F6:  BZ    1114
10F8:  MOVLW  0F
10FA:  MOVWF  01
10FC:  CLRF   00
10FE:  DECFSZ 00,F
1100:  BRA    10FE
1102:  DECFSZ 01,F
1104:  BRA    10FC
1106:  MOVLW  8F
1108:  MOVWF  00
110A:  DECFSZ 00,F
110C:  BRA    110A
110E:  NOP   
1110:  DECFSZ FEF,F
1112:  BRA    10F8
1114:  RETLW  00
.................... #use RS232(BAUD=9600, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7) 
*
1AF0:  BTFSS  F9E.4
1AF2:  BRA    1AF0
1AF4:  MOVWF  FAD
1AF6:  GOTO   1B64 (RETURN)
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
*
0EC0:  MOVLB  5
0EC2:  MOVFF  571,FE9
0EC6:  MOVFF  572,FEA
0ECA:  MOVFF  FEF,575
0ECE:  MOVFF  574,03
0ED2:  MOVFF  573,FE9
0ED6:  MOVFF  574,FEA
0EDA:  MOVF   FEF,W
0EDC:  SUBWF  x75,W
0EDE:  BNZ   0F0A
....................       if (*s1 == '\0') 
0EE0:  MOVFF  572,03
0EE4:  MOVFF  571,FE9
0EE8:  MOVFF  03,FEA
0EEC:  MOVF   FEF,F
0EEE:  BNZ   0EF6
....................          return(0); 
0EF0:  MOVLW  00
0EF2:  MOVWF  01
0EF4:  BRA    0F34
0EF6:  MOVFF  572,03
0EFA:  MOVF   x71,W
0EFC:  INCF   x71,F
0EFE:  BTFSC  FD8.2
0F00:  INCF   x72,F
0F02:  INCF   x73,F
0F04:  BTFSC  FD8.2
0F06:  INCF   x74,F
0F08:  BRA    0EC2
....................    return((*s1 < *s2) ? -1: 1); 
0F0A:  MOVFF  572,03
0F0E:  MOVFF  571,FE9
0F12:  MOVFF  572,FEA
0F16:  MOVFF  FEF,575
0F1A:  MOVFF  574,03
0F1E:  MOVFF  573,FE9
0F22:  MOVFF  574,FEA
0F26:  MOVF   FEF,W
0F28:  SUBWF  x75,W
0F2A:  BC    0F30
0F2C:  MOVLW  FF
0F2E:  BRA    0F32
0F30:  MOVLW  01
0F32:  MOVWF  01
.................... } 
0F34:  MOVLB  0
0F36:  RETLW  00
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D4   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D3   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_D2   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
12F6:  BCF    F95.2
12F8:  BSF    F8C.2
....................    output_low(GLCD_E); 
12FA:  BCF    F95.7
12FC:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
12FE:  BCF    F95.4
1300:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
1302:  BCF    F95.3
1304:  BCF    F8C.3
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
1306:  BCF    F95.5
1308:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
130A:  MOVLB  5
130C:  CLRF   x50
130E:  MOVLW  C0
1310:  MOVWF  x51
1312:  MOVLB  0
1314:  RCALL  11A2
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
1316:  MOVLW  01
1318:  MOVLB  5
131A:  MOVWF  x50
131C:  MOVLW  C0
131E:  MOVWF  x51
1320:  MOVLB  0
1322:  RCALL  11A2
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
1324:  MOVLB  5
1326:  CLRF   x50
1328:  MOVLW  40
132A:  MOVWF  x51
132C:  MOVLB  0
132E:  RCALL  11A2
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
1330:  MOVLW  01
1332:  MOVLB  5
1334:  MOVWF  x50
1336:  MOVLW  40
1338:  MOVWF  x51
133A:  MOVLB  0
133C:  RCALL  11A2
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
133E:  MOVLB  5
1340:  CLRF   x50
1342:  MOVLW  B8
1344:  MOVWF  x51
1346:  MOVLB  0
1348:  RCALL  11A2
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
134A:  MOVLW  01
134C:  MOVLB  5
134E:  MOVWF  x50
1350:  MOVLW  B8
1352:  MOVWF  x51
1354:  MOVLB  0
1356:  RCALL  11A2
....................  
....................    if(mode == ON) 
1358:  MOVLB  5
135A:  DECFSZ x3A,W
135C:  BRA    137A
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
135E:  CLRF   x50
1360:  MOVLW  3F
1362:  MOVWF  x51
1364:  MOVLB  0
1366:  RCALL  11A2
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
1368:  MOVLW  01
136A:  MOVLB  5
136C:  MOVWF  x50
136E:  MOVLW  3F
1370:  MOVWF  x51
1372:  MOVLB  0
1374:  RCALL  11A2
....................    } 
....................    else 
1376:  BRA    1392
1378:  MOVLB  5
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
137A:  CLRF   x50
137C:  MOVLW  3E
137E:  MOVWF  x51
1380:  MOVLB  0
1382:  RCALL  11A2
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
1384:  MOVLW  01
1386:  MOVLB  5
1388:  MOVWF  x50
138A:  MOVLW  3E
138C:  MOVWF  x51
138E:  MOVLB  0
1390:  RCALL  11A2
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
1392:  MOVLB  5
1394:  CLRF   x3B
1396:  MOVLB  0
1398:  RCALL  11E4
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
139A:  RCALL  123E
....................    #endif 
.................... } 
139C:  GOTO   2F26 (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
123E:  MOVLB  5
1240:  CLRF   x4C
1242:  MOVLW  1C
1244:  MOVWF  x4B
....................    p2 = displayData.right; 
1246:  MOVLW  02
1248:  MOVWF  x4E
124A:  MOVLW  1C
124C:  MOVWF  x4D
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
124E:  CLRF   x49
1250:  MOVF   x49,W
1252:  SUBLW  07
1254:  BNC   12F2
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
1256:  BCF    F95.5
1258:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
125A:  CLRF   x50
125C:  MOVLW  40
125E:  MOVWF  x51
1260:  MOVLB  0
1262:  RCALL  11A2
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
1264:  MOVLW  01
1266:  MOVLB  5
1268:  MOVWF  x50
126A:  MOVLW  40
126C:  MOVWF  x51
126E:  MOVLB  0
1270:  RCALL  11A2
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
1272:  MOVLB  5
1274:  MOVF   x49,W
1276:  IORLW  B8
1278:  MOVWF  x4F
127A:  CLRF   x50
127C:  MOVWF  x51
127E:  MOVLB  0
1280:  RCALL  11A2
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
1282:  MOVLB  5
1284:  MOVF   x49,W
1286:  IORLW  B8
1288:  MOVWF  x4F
128A:  MOVLW  01
128C:  MOVWF  x50
128E:  MOVFF  54F,551
1292:  MOVLB  0
1294:  RCALL  11A2
....................       output_high(GLCD_DI);                     // Set for data 
1296:  BCF    F95.5
1298:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
129A:  MOVLB  5
129C:  CLRF   x4A
129E:  MOVF   x4A,W
12A0:  SUBLW  3F
12A2:  BNC   12EE
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
12A4:  MOVFF  54C,03
12A8:  MOVF   x4B,W
12AA:  INCF   x4B,F
12AC:  BTFSC  FD8.2
12AE:  INCF   x4C,F
12B0:  MOVWF  FE9
12B2:  MOVFF  03,FEA
12B6:  MOVFF  FEF,54F
12BA:  CLRF   x50
12BC:  MOVFF  54F,551
12C0:  MOVLB  0
12C2:  RCALL  11A2
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
12C4:  MOVLB  5
12C6:  MOVFF  54E,03
12CA:  MOVF   x4D,W
12CC:  INCF   x4D,F
12CE:  BTFSC  FD8.2
12D0:  INCF   x4E,F
12D2:  MOVWF  FE9
12D4:  MOVFF  03,FEA
12D8:  MOVFF  FEF,54F
12DC:  MOVLW  01
12DE:  MOVWF  x50
12E0:  MOVFF  54F,551
12E4:  MOVLB  0
12E6:  RCALL  11A2
....................       } 
12E8:  MOVLB  5
12EA:  INCF   x4A,F
12EC:  BRA    129E
....................    } 
12EE:  INCF   x49,F
12F0:  BRA    1250
.................... } 
12F2:  MOVLB  0
12F4:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
*
13A0:  MOVLB  5
13A2:  CLRF   x6D
13A4:  RRCF   x68,W
13A6:  MOVWF  x6C
13A8:  RRCF   x6C,F
13AA:  RRCF   x6C,F
13AC:  MOVLW  1F
13AE:  ANDWF  x6C,F
....................    temp *= 64; 
13B0:  RLCF   x6C,F
13B2:  RLCF   x6D,F
13B4:  RLCF   x6C,F
13B6:  RLCF   x6D,F
13B8:  RLCF   x6C,F
13BA:  RLCF   x6D,F
13BC:  RLCF   x6C,F
13BE:  RLCF   x6D,F
13C0:  RLCF   x6C,F
13C2:  RLCF   x6D,F
13C4:  RLCF   x6C,F
13C6:  RLCF   x6D,F
13C8:  MOVLW  C0
13CA:  ANDWF  x6C,F
....................    temp += x; 
13CC:  MOVF   x67,W
13CE:  ADDWF  x6C,F
13D0:  MOVLW  00
13D2:  ADDWFC x6D,F
....................  
....................    if(x > 63) 
13D4:  MOVF   x67,W
13D6:  SUBLW  3F
13D8:  BC    13F4
....................    { 
....................       p = displayData.right + temp - 64; 
13DA:  MOVLW  1C
13DC:  ADDWF  x6C,W
13DE:  MOVWF  x6E
13E0:  MOVLW  02
13E2:  ADDWFC x6D,W
13E4:  MOVWF  x6F
13E6:  MOVLW  40
13E8:  SUBWF  x6E,W
13EA:  MOVWF  x6A
13EC:  MOVLW  00
13EE:  SUBWFB x6F,W
13F0:  MOVWF  x6B
....................    } 
....................    else 
13F2:  BRA    1400
....................    { 
....................       p = displayData.left + temp; 
13F4:  MOVLW  1C
13F6:  ADDWF  x6C,W
13F8:  MOVWF  x6A
13FA:  MOVLW  00
13FC:  ADDWFC x6D,W
13FE:  MOVWF  x6B
....................    } 
....................  
....................    if(color) 
1400:  MOVF   x69,F
1402:  BZ    142E
....................    { 
....................       bit_set(*p, y%8); 
1404:  MOVFF  56B,03
1408:  MOVFF  56A,FE9
140C:  MOVFF  56B,FEA
1410:  MOVF   x68,W
1412:  ANDLW  07
1414:  MOVWF  x6E
1416:  MOVLW  01
1418:  MOVWF  00
141A:  MOVF   x6E,W
141C:  MOVWF  01
141E:  BZ    1428
1420:  BCF    FD8.0
1422:  RLCF   00,F
1424:  DECFSZ 01,F
1426:  BRA    1420
1428:  MOVF   00,W
142A:  IORWF  FEF,F
....................    } 
....................    else 
142C:  BRA    1458
....................    { 
....................       bit_clear(*p, y%8); 
142E:  MOVFF  56B,03
1432:  MOVFF  56A,FE9
1436:  MOVFF  56B,FEA
143A:  MOVF   x68,W
143C:  ANDLW  07
143E:  MOVWF  x6E
1440:  MOVLW  01
1442:  MOVWF  00
1444:  MOVF   x6E,W
1446:  MOVWF  01
1448:  BZ    1452
144A:  BCF    FD8.0
144C:  RLCF   00,F
144E:  DECFSZ 01,F
1450:  BRA    144A
1452:  MOVF   00,W
1454:  XORLW  FF
1456:  ANDWF  FEF,F
....................    } 
.................... } 
1458:  MOVLB  0
145A:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
11E4:  MOVLB  5
11E6:  CLRF   x3E
11E8:  MOVLW  1C
11EA:  MOVWF  x3D
....................    p2 = displayData.right; 
11EC:  MOVLW  02
11EE:  MOVWF  x40
11F0:  MOVLW  1C
11F2:  MOVWF  x3F
....................    data = 0xFF * color; 
11F4:  MOVF   x3B,W
11F6:  MULLW  FF
11F8:  MOVFF  FF3,53C
....................  
....................    for(i=0; i<512; ++i) 
11FC:  CLRF   x42
11FE:  CLRF   x41
1200:  MOVF   x42,W
1202:  SUBLW  01
1204:  BNC   123A
....................    { 
....................       *p1++ = data; 
1206:  MOVFF  53E,03
120A:  MOVF   x3D,W
120C:  INCF   x3D,F
120E:  BTFSC  FD8.2
1210:  INCF   x3E,F
1212:  MOVWF  FE9
1214:  MOVFF  03,FEA
1218:  MOVFF  53C,FEF
....................       *p2++ = data; 
121C:  MOVFF  540,03
1220:  MOVF   x3F,W
1222:  INCF   x3F,F
1224:  BTFSC  FD8.2
1226:  INCF   x40,F
1228:  MOVWF  FE9
122A:  MOVFF  03,FEA
122E:  MOVFF  53C,FEF
....................    } 
1232:  INCF   x41,F
1234:  BTFSC  FD8.2
1236:  INCF   x42,F
1238:  BRA    1200
.................... } 
123A:  MOVLB  0
123C:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
11A2:  MOVLB  5
11A4:  MOVF   x50,F
11A6:  BZ    11AE
....................       output_high(GLCD_CS2); 
11A8:  BCF    F95.3
11AA:  BSF    F8C.3
....................    else 
11AC:  BRA    11B2
....................       output_high(GLCD_CS1); 
11AE:  BCF    F95.4
11B0:  BSF    F8C.4
....................  
....................    output_low(GLCD_RW);       // Set for writing 
11B2:  BCF    F95.6
11B4:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
11B6:  CLRF   F93
11B8:  MOVFF  551,F8A
....................    delay_cycles(50); 
11BC:  MOVLW  10
11BE:  MOVWF  00
11C0:  DECFSZ 00,F
11C2:  BRA    11C0
11C4:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
11C6:  BCF    F95.7
11C8:  BSF    F8C.7
....................    delay_cycles(255); 
11CA:  MOVLW  54
11CC:  MOVWF  00
11CE:  DECFSZ 00,F
11D0:  BRA    11CE
11D2:  BRA    11D4
....................    output_low(GLCD_E); 
11D4:  BCF    F95.7
11D6:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
11D8:  BCF    F95.4
11DA:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
11DC:  BCF    F95.3
11DE:  BCF    F8C.3
.................... } 
11E0:  MOVLB  0
11E2:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(50); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(200); 
....................    data = input_b();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
1614:  MOVLW  01
1616:  MOVLB  5
1618:  MOVWF  x60
161A:  MOVWF  x61
161C:  CLRF   x66
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
161E:  MOVF   x57,W
1620:  SUBWF  x59,W
1622:  MOVWF  x67
1624:  MOVF   x67,W
1626:  BTFSS  x67.7
1628:  BRA    1630
162A:  MOVLW  00
162C:  BSF    FD8.0
162E:  SUBFWB x67,W
1630:  CLRF   03
1632:  MOVWF  x5E
1634:  MOVFF  03,55F
....................    dy = abs((signed int8)(y2 - y1)); 
1638:  MOVF   x58,W
163A:  SUBWF  x5A,W
163C:  MOVWF  x67
163E:  MOVF   x67,W
1640:  BTFSS  x67.7
1642:  BRA    164A
1644:  MOVLW  00
1646:  BSF    FD8.0
1648:  SUBFWB x67,W
164A:  CLRF   03
164C:  MOVWF  x5C
164E:  MOVFF  03,55D
....................    #endif 
....................  
....................    if(x1 > x2) 
1652:  MOVF   x57,W
1654:  SUBWF  x59,W
1656:  BC    165C
....................       addx = -1; 
1658:  MOVLW  FF
165A:  MOVWF  x60
....................    if(y1 > y2) 
165C:  MOVF   x58,W
165E:  SUBWF  x5A,W
1660:  BC    1666
....................       addy = -1; 
1662:  MOVLW  FF
1664:  MOVWF  x61
....................  
....................    if(dx >= dy) 
1666:  MOVF   x5D,W
1668:  SUBWF  x5F,W
166A:  BNC   16E2
166C:  BNZ   1674
166E:  MOVF   x5C,W
1670:  SUBWF  x5E,W
1672:  BNC   16E2
....................    { 
....................       dy *= 2; 
1674:  BCF    FD8.0
1676:  RLCF   x5C,F
1678:  RLCF   x5D,F
....................       P = dy - dx; 
167A:  MOVF   x5E,W
167C:  SUBWF  x5C,W
167E:  MOVWF  00
1680:  MOVF   x5F,W
1682:  SUBWFB x5D,W
1684:  MOVFF  00,562
1688:  MOVWF  x63
....................       diff = P - dx; 
168A:  MOVF   x5E,W
168C:  SUBWF  x62,W
168E:  MOVWF  x64
1690:  MOVF   x5F,W
1692:  SUBWFB x63,W
1694:  MOVWF  x65
....................  
....................       for(; i<=dx; ++i) 
1696:  MOVF   x5F,F
1698:  BNZ   16A0
169A:  MOVF   x66,W
169C:  SUBWF  x5E,W
169E:  BNC   16E0
....................       { 
....................          glcd_pixel(x1, y1, color); 
16A0:  MOVFF  557,567
16A4:  MOVFF  558,568
16A8:  MOVFF  55B,569
16AC:  MOVLB  0
16AE:  RCALL  13A0
....................  
....................          if(P < 0) 
16B0:  MOVLB  5
16B2:  BTFSC  x63.7
16B4:  BRA    16B8
16B6:  BRA    16C8
....................          { 
....................             P  += dy; 
16B8:  MOVF   x5C,W
16BA:  ADDWF  x62,F
16BC:  MOVF   x5D,W
16BE:  ADDWFC x63,F
....................             x1 += addx; 
16C0:  MOVF   x60,W
16C2:  ADDWF  x57,W
16C4:  MOVWF  x57
....................          } 
....................          else 
16C6:  BRA    16DC
....................          { 
....................             P  += diff; 
16C8:  MOVF   x64,W
16CA:  ADDWF  x62,F
16CC:  MOVF   x65,W
16CE:  ADDWFC x63,F
....................             x1 += addx; 
16D0:  MOVF   x60,W
16D2:  ADDWF  x57,W
16D4:  MOVWF  x57
....................             y1 += addy; 
16D6:  MOVF   x61,W
16D8:  ADDWF  x58,W
16DA:  MOVWF  x58
....................          } 
....................       } 
16DC:  INCF   x66,F
16DE:  BRA    1696
....................    } 
....................    else 
16E0:  BRA    174E
....................    { 
....................       dx *= 2; 
16E2:  BCF    FD8.0
16E4:  RLCF   x5E,F
16E6:  RLCF   x5F,F
....................       P = dx - dy; 
16E8:  MOVF   x5C,W
16EA:  SUBWF  x5E,W
16EC:  MOVWF  00
16EE:  MOVF   x5D,W
16F0:  SUBWFB x5F,W
16F2:  MOVFF  00,562
16F6:  MOVWF  x63
....................       diff = P - dy; 
16F8:  MOVF   x5C,W
16FA:  SUBWF  x62,W
16FC:  MOVWF  x64
16FE:  MOVF   x5D,W
1700:  SUBWFB x63,W
1702:  MOVWF  x65
....................  
....................       for(; i<=dy; ++i) 
1704:  MOVF   x5D,F
1706:  BNZ   170E
1708:  MOVF   x66,W
170A:  SUBWF  x5C,W
170C:  BNC   174E
....................       { 
....................          glcd_pixel(x1, y1, color); 
170E:  MOVFF  557,567
1712:  MOVFF  558,568
1716:  MOVFF  55B,569
171A:  MOVLB  0
171C:  RCALL  13A0
....................  
....................          if(P < 0) 
171E:  MOVLB  5
1720:  BTFSC  x63.7
1722:  BRA    1726
1724:  BRA    1736
....................          { 
....................             P  += dx; 
1726:  MOVF   x5E,W
1728:  ADDWF  x62,F
172A:  MOVF   x5F,W
172C:  ADDWFC x63,F
....................             y1 += addy; 
172E:  MOVF   x61,W
1730:  ADDWF  x58,W
1732:  MOVWF  x58
....................          } 
....................          else 
1734:  BRA    174A
....................          { 
....................             P  += diff; 
1736:  MOVF   x64,W
1738:  ADDWF  x62,F
173A:  MOVF   x65,W
173C:  ADDWFC x63,F
....................             x1 += addx; 
173E:  MOVF   x60,W
1740:  ADDWF  x57,W
1742:  MOVWF  x57
....................             y1 += addy; 
1744:  MOVF   x61,W
1746:  ADDWF  x58,W
1748:  MOVWF  x58
....................          } 
....................       } 
174A:  INCF   x66,F
174C:  BRA    1704
....................    } 
.................... } 
174E:  MOVLB  0
1750:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
1752:  MOVLB  5
1754:  MOVF   x50,F
1756:  BZ    17B4
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
1758:  MOVF   x4E,W
175A:  SUBWF  x4C,W
175C:  BC    1768
....................       { 
....................          xmin = x1; 
175E:  MOVFF  54C,553
....................          xmax = x2; 
1762:  MOVFF  54E,554
....................       } 
....................       else 
1766:  BRA    1770
....................       { 
....................          xmin = x2; 
1768:  MOVFF  54E,553
....................          xmax = x1; 
176C:  MOVFF  54C,554
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
1770:  MOVF   x4F,W
1772:  SUBWF  x4D,W
1774:  BC    1780
....................       { 
....................          ymin = y1; 
1776:  MOVFF  54D,555
....................          ymax = y2; 
177A:  MOVFF  54F,556
....................       } 
....................       else 
177E:  BRA    1788
....................       { 
....................          ymin = y2; 
1780:  MOVFF  54F,555
....................          ymax = y1; 
1784:  MOVFF  54D,556
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
1788:  MOVF   x53,W
178A:  SUBWF  x54,W
178C:  BNC   17B2
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
178E:  MOVFF  555,552
1792:  MOVF   x52,W
1794:  SUBWF  x56,W
1796:  BNC   17AE
....................          { 
....................             glcd_pixel(xmin, i, color); 
1798:  MOVFF  553,567
179C:  MOVFF  552,568
17A0:  MOVFF  551,569
17A4:  MOVLB  0
17A6:  RCALL  13A0
....................          } 
17A8:  MOVLB  5
17AA:  INCF   x52,F
17AC:  BRA    1792
....................       } 
17AE:  INCF   x53,F
17B0:  BRA    1788
....................    } 
....................    else 
17B2:  BRA    1810
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
17B4:  MOVFF  54C,557
17B8:  MOVFF  54D,558
17BC:  MOVFF  54E,559
17C0:  MOVFF  54D,55A
17C4:  MOVFF  551,55B
17C8:  MOVLB  0
17CA:  RCALL  1614
....................       glcd_line(x1, y2, x2, y2, color); 
17CC:  MOVFF  54C,557
17D0:  MOVFF  54F,558
17D4:  MOVFF  54E,559
17D8:  MOVFF  54F,55A
17DC:  MOVFF  551,55B
17E0:  RCALL  1614
....................       glcd_line(x1, y1, x1, y2, color); 
17E2:  MOVFF  54C,557
17E6:  MOVFF  54D,558
17EA:  MOVFF  54C,559
17EE:  MOVFF  54F,55A
17F2:  MOVFF  551,55B
17F6:  RCALL  1614
....................       glcd_line(x2, y1, x2, y2, color); 
17F8:  MOVFF  54E,557
17FC:  MOVFF  54D,558
1800:  MOVFF  54E,559
1804:  MOVFF  54F,55A
1808:  MOVFF  551,55B
180C:  RCALL  1614
180E:  MOVLB  5
....................    } 
.................... } 
1810:  MOVLB  0
1812:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
213C:  MOVLB  5
213E:  CLRF   x3F
....................    b = radius; 
2140:  MOVFF  53C,540
....................    P = 1 - radius; 
2144:  MOVLW  01
2146:  BSF    FD8.0
2148:  SUBFWB x3C,W
214A:  MOVWF  x41
....................  
....................    do 
....................    { 
....................       if(fill) 
214C:  MOVF   x3D,F
214E:  BZ    221A
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
2150:  MOVF   x3F,W
2152:  SUBWF  x3A,W
2154:  MOVWF  x42
2156:  MOVF   x40,W
2158:  ADDWF  x3B,W
215A:  MOVWF  x43
215C:  MOVF   x3F,W
215E:  ADDWF  x3A,W
2160:  MOVWF  x44
2162:  MOVF   x40,W
2164:  ADDWF  x3B,W
2166:  MOVWF  x45
2168:  MOVFF  542,557
216C:  MOVFF  543,558
2170:  MOVFF  544,559
2174:  MOVWF  x5A
2176:  MOVFF  53E,55B
217A:  MOVLB  0
217C:  CALL   1614
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
2180:  MOVLB  5
2182:  MOVF   x3F,W
2184:  SUBWF  x3A,W
2186:  MOVWF  x42
2188:  MOVF   x40,W
218A:  SUBWF  x3B,W
218C:  MOVWF  x43
218E:  MOVF   x3F,W
2190:  ADDWF  x3A,W
2192:  MOVWF  x44
2194:  MOVF   x40,W
2196:  SUBWF  x3B,W
2198:  MOVWF  x45
219A:  MOVFF  542,557
219E:  MOVFF  543,558
21A2:  MOVFF  544,559
21A6:  MOVWF  x5A
21A8:  MOVFF  53E,55B
21AC:  MOVLB  0
21AE:  CALL   1614
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
21B2:  MOVLB  5
21B4:  MOVF   x40,W
21B6:  SUBWF  x3A,W
21B8:  MOVWF  x42
21BA:  MOVF   x3F,W
21BC:  ADDWF  x3B,W
21BE:  MOVWF  x43
21C0:  MOVF   x40,W
21C2:  ADDWF  x3A,W
21C4:  MOVWF  x44
21C6:  MOVF   x3F,W
21C8:  ADDWF  x3B,W
21CA:  MOVWF  x45
21CC:  MOVFF  542,557
21D0:  MOVFF  543,558
21D4:  MOVFF  544,559
21D8:  MOVWF  x5A
21DA:  MOVFF  53E,55B
21DE:  MOVLB  0
21E0:  CALL   1614
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
21E4:  MOVLB  5
21E6:  MOVF   x40,W
21E8:  SUBWF  x3A,W
21EA:  MOVWF  x42
21EC:  MOVF   x3F,W
21EE:  SUBWF  x3B,W
21F0:  MOVWF  x43
21F2:  MOVF   x40,W
21F4:  ADDWF  x3A,W
21F6:  MOVWF  x44
21F8:  MOVF   x3F,W
21FA:  SUBWF  x3B,W
21FC:  MOVWF  x45
21FE:  MOVFF  542,557
2202:  MOVFF  543,558
2206:  MOVFF  544,559
220A:  MOVWF  x5A
220C:  MOVFF  53E,55B
2210:  MOVLB  0
2212:  CALL   1614
....................       } 
....................       else 
2216:  BRA    2308
2218:  MOVLB  5
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
221A:  MOVF   x3A,W
221C:  ADDWF  x3F,W
221E:  MOVWF  x42
2220:  MOVF   x3B,W
2222:  ADDWF  x40,W
2224:  MOVWF  x43
2226:  MOVFF  542,567
222A:  MOVWF  x68
222C:  MOVFF  53E,569
2230:  MOVLB  0
2232:  CALL   13A0
....................          glcd_pixel(b+x, a+y, color); 
2236:  MOVLB  5
2238:  MOVF   x3A,W
223A:  ADDWF  x40,W
223C:  MOVWF  x42
223E:  MOVF   x3B,W
2240:  ADDWF  x3F,W
2242:  MOVWF  x43
2244:  MOVFF  542,567
2248:  MOVWF  x68
224A:  MOVFF  53E,569
224E:  MOVLB  0
2250:  CALL   13A0
....................          glcd_pixel(x-a, b+y, color); 
2254:  MOVLB  5
2256:  MOVF   x3F,W
2258:  SUBWF  x3A,W
225A:  MOVWF  x42
225C:  MOVF   x3B,W
225E:  ADDWF  x40,W
2260:  MOVWF  x43
2262:  MOVFF  542,567
2266:  MOVWF  x68
2268:  MOVFF  53E,569
226C:  MOVLB  0
226E:  CALL   13A0
....................          glcd_pixel(x-b, a+y, color); 
2272:  MOVLB  5
2274:  MOVF   x40,W
2276:  SUBWF  x3A,W
2278:  MOVWF  x42
227A:  MOVF   x3B,W
227C:  ADDWF  x3F,W
227E:  MOVWF  x43
2280:  MOVFF  542,567
2284:  MOVWF  x68
2286:  MOVFF  53E,569
228A:  MOVLB  0
228C:  CALL   13A0
....................          glcd_pixel(b+x, y-a, color); 
2290:  MOVLB  5
2292:  MOVF   x3A,W
2294:  ADDWF  x40,W
2296:  MOVWF  x42
2298:  MOVF   x3F,W
229A:  SUBWF  x3B,W
229C:  MOVWF  x43
229E:  MOVFF  542,567
22A2:  MOVWF  x68
22A4:  MOVFF  53E,569
22A8:  MOVLB  0
22AA:  CALL   13A0
....................          glcd_pixel(a+x, y-b, color); 
22AE:  MOVLB  5
22B0:  MOVF   x3A,W
22B2:  ADDWF  x3F,W
22B4:  MOVWF  x42
22B6:  MOVF   x40,W
22B8:  SUBWF  x3B,W
22BA:  MOVWF  x43
22BC:  MOVFF  542,567
22C0:  MOVWF  x68
22C2:  MOVFF  53E,569
22C6:  MOVLB  0
22C8:  CALL   13A0
....................          glcd_pixel(x-a, y-b, color); 
22CC:  MOVLB  5
22CE:  MOVF   x3F,W
22D0:  SUBWF  x3A,W
22D2:  MOVWF  x42
22D4:  MOVF   x40,W
22D6:  SUBWF  x3B,W
22D8:  MOVWF  x43
22DA:  MOVFF  542,567
22DE:  MOVWF  x68
22E0:  MOVFF  53E,569
22E4:  MOVLB  0
22E6:  CALL   13A0
....................          glcd_pixel(x-b, y-a, color); 
22EA:  MOVLB  5
22EC:  MOVF   x40,W
22EE:  SUBWF  x3A,W
22F0:  MOVWF  x42
22F2:  MOVF   x3F,W
22F4:  SUBWF  x3B,W
22F6:  MOVWF  x43
22F8:  MOVFF  542,567
22FC:  MOVWF  x68
22FE:  MOVFF  53E,569
2302:  MOVLB  0
2304:  CALL   13A0
....................       } 
....................  
....................       if(P < 0) 
2308:  MOVLB  5
230A:  BTFSC  x41.7
230C:  BRA    2310
230E:  BRA    232C
....................          P += 3 + 2 * a++; 
2310:  MOVF   x3F,W
2312:  INCF   x3F,F
2314:  MOVWF  x42
2316:  MOVLW  02
2318:  MOVWF  x43
231A:  MOVFF  542,544
231E:  MOVLB  0
2320:  RCALL  20EE
2322:  MOVF   01,W
2324:  ADDLW  03
2326:  MOVLB  5
2328:  ADDWF  x41,F
....................       else 
232A:  BRA    234E
....................          P += 5 + 2 * (a++ - b--); 
232C:  MOVF   x3F,W
232E:  INCF   x3F,F
2330:  MOVWF  x42
2332:  MOVF   x40,W
2334:  DECF   x40,F
2336:  SUBWF  x42,W
2338:  MOVWF  x42
233A:  MOVLW  02
233C:  MOVWF  x43
233E:  MOVFF  542,544
2342:  MOVLB  0
2344:  RCALL  20EE
2346:  MOVF   01,W
2348:  ADDLW  05
234A:  MOVLB  5
234C:  ADDWF  x41,F
....................     } while(a <= b); 
234E:  MOVF   x3F,W
2350:  XORLW  80
2352:  MOVWF  00
2354:  MOVF   x40,W
2356:  XORLW  80
2358:  SUBWF  00,W
235A:  BTFSC  FD8.2
235C:  BRA    214C
235E:  BTFSS  FD8.0
2360:  BRA    214C
.................... } 
2362:  MOVLB  0
2364:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
145C:  MOVFF  54E,03
1460:  MOVLB  5
1462:  MOVFF  54D,FE9
1466:  MOVFF  54E,FEA
146A:  MOVF   FEF,F
146C:  BTFSC  FD8.2
146E:  BRA    1610
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
1470:  MOVFF  54E,03
1474:  MOVFF  54D,FE9
1478:  MOVFF  54E,FEA
147C:  MOVF   FEF,W
147E:  SUBLW  52
1480:  BNC   14D0
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
1482:  MOVFF  54E,03
1486:  MOVFF  54D,FE9
148A:  MOVFF  54E,FEA
148E:  MOVLW  20
1490:  SUBWF  FEF,W
1492:  MULLW  05
1494:  MOVF   FF3,W
1496:  CLRF   03
1498:  MOVWF  x5A
149A:  MOVLW  05
149C:  MOVWF  FEA
149E:  MOVLW  55
14A0:  MOVWF  FE9
14A2:  CLRF   x5E
14A4:  MOVFF  55A,55D
14A8:  MOVFF  FF2,55B
14AC:  BCF    FF2.7
14AE:  MOVLW  05
14B0:  MOVWF  01
14B2:  CLRF   FF7
14B4:  MOVF   x5A,W
14B6:  MOVLB  0
14B8:  CALL   00A2
14BC:  TBLRD*-
14BE:  TBLRD*+
14C0:  MOVFF  FF5,FEE
14C4:  DECFSZ 01,F
14C6:  BRA    14BE
14C8:  MOVLB  5
14CA:  BTFSC  x5B.7
14CC:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
14CE:  BRA    153A
14D0:  MOVFF  54E,03
14D4:  MOVFF  54D,FE9
14D8:  MOVFF  54E,FEA
14DC:  MOVF   FEF,W
14DE:  SUBLW  7E
14E0:  BNC   1530
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
14E2:  MOVFF  54E,03
14E6:  MOVFF  54D,FE9
14EA:  MOVFF  54E,FEA
14EE:  MOVLW  53
14F0:  SUBWF  FEF,W
14F2:  MULLW  05
14F4:  MOVF   FF3,W
14F6:  CLRF   03
14F8:  MOVWF  x5A
14FA:  MOVLW  05
14FC:  MOVWF  FEA
14FE:  MOVLW  55
1500:  MOVWF  FE9
1502:  CLRF   x5E
1504:  MOVFF  55A,55D
1508:  MOVFF  FF2,55B
150C:  BCF    FF2.7
150E:  MOVLW  05
1510:  MOVWF  01
1512:  CLRF   FF7
1514:  MOVF   x5A,W
1516:  MOVLB  0
1518:  CALL   01BC
151C:  TBLRD*-
151E:  TBLRD*+
1520:  MOVFF  FF5,FEE
1524:  DECFSZ 01,F
1526:  BRA    151E
1528:  MOVLB  5
152A:  BTFSC  x5B.7
152C:  BSF    FF2.7
....................       else 
152E:  BRA    153A
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
1530:  CLRF   x55
1532:  CLRF   x56
1534:  CLRF   x57
1536:  CLRF   x58
1538:  CLRF   x59
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
153A:  MOVFF  54E,03
153E:  MOVF   x4D,W
1540:  MOVWF  FE9
1542:  MOVFF  03,FEA
1546:  MOVF   FEF,W
1548:  XORLW  0A
154A:  MOVLB  0
154C:  BZ    1554
154E:  XORLW  07
1550:  BZ    1564
1552:  BRA    156A
....................          case '\n': 
....................             y += 7*size + 1; 
1554:  MOVLB  5
1556:  MOVF   x4F,W
1558:  MULLW  07
155A:  MOVF   FF3,W
155C:  ADDLW  01
155E:  ADDWF  x4C,F
....................             continue; 
1560:  BRA    1602
1562:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
1564:  MOVLB  5
1566:  CLRF   x4B
....................             continue; 
1568:  BRA    1602
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
156A:  MOVLB  5
156C:  MOVF   x4F,W
156E:  MULLW  05
1570:  MOVF   FF3,W
1572:  ADDWF  x4B,W
1574:  SUBLW  7F
1576:  BC    1584
....................       { 
....................          x = 0;                           // Set x at far left position 
1578:  CLRF   x4B
....................          y += 7*size + 1;                 // Set y at next position down 
157A:  MOVF   x4F,W
157C:  MULLW  07
157E:  MOVF   FF3,W
1580:  ADDLW  01
1582:  ADDWF  x4C,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
1584:  CLRF   x51
1586:  MOVF   x51,W
1588:  SUBLW  04
158A:  BNC   1602
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
158C:  CLRF   x52
158E:  MOVF   x52,W
1590:  SUBLW  06
1592:  BNC   15FA
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
1594:  CLRF   03
1596:  MOVF   x51,W
1598:  ADDLW  55
159A:  MOVWF  FE9
159C:  MOVLW  05
159E:  ADDWFC 03,W
15A0:  MOVWF  FEA
15A2:  MOVFF  FEF,55A
15A6:  MOVFF  55A,00
15AA:  MOVF   x52,W
15AC:  MOVWF  01
15AE:  BZ    15B8
15B0:  BCF    FD8.0
15B2:  RRCF   00,F
15B4:  DECFSZ 01,F
15B6:  BRA    15B0
15B8:  BTFSS  00.0
15BA:  BRA    15F6
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
15BC:  CLRF   x53
15BE:  MOVF   x4F,W
15C0:  SUBWF  x53,W
15C2:  BC    15F6
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
15C4:  CLRF   x54
15C6:  MOVF   x4F,W
15C8:  SUBWF  x54,W
15CA:  BC    15F2
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
15CC:  MOVF   x54,W
15CE:  ADDWF  x4B,W
15D0:  MOVWF  x5A
15D2:  MOVF   x52,W
15D4:  MULWF  x4F
15D6:  MOVF   FF3,W
15D8:  ADDWF  x4C,W
15DA:  ADDWF  x53,W
15DC:  MOVWF  x5B
15DE:  MOVFF  55A,567
15E2:  MOVWF  x68
15E4:  MOVFF  550,569
15E8:  MOVLB  0
15EA:  RCALL  13A0
....................                   } 
15EC:  MOVLB  5
15EE:  INCF   x54,F
15F0:  BRA    15C6
....................                } 
15F2:  INCF   x53,F
15F4:  BRA    15BE
....................             } 
....................          } 
15F6:  INCF   x52,F
15F8:  BRA    158E
....................       } 
15FA:  INCF   x51,F
15FC:  MOVF   x4F,W
15FE:  ADDWF  x4B,F
1600:  BRA    1586
....................    } 
1602:  INCF   x4D,F
1604:  BTFSC  FD8.2
1606:  INCF   x4E,F
1608:  INCF   x4B,F
160A:  MOVLB  0
160C:  BRA    145C
160E:  MOVLB  5
.................... } 
1610:  MOVLB  0
1612:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... char kpa[]="kPa"; 
.................... float promedio[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... int8 Puerta=0,Parada=1,NivelReservorio=0,NivelTanque=0,Presostato=0,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,Alarma=0,AlarmaAgua=0; 
.................... short Flanco=0,Flanco1=0,Flanco2=0,emergency=0,visual=1,desfoguelento=0,Lectura=0,Expulsa=0, est=0,Visua=0,flag_agua=0,CadenaRecibida=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,z=0; 
.................... short disp_Alarma=0,disp_AlarmaAgua=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Decimal=0; 
.................... int8 Menu=0, unidad=1,bite=0,TamanoCadena=0,i=0; 
.................... int8 Setpoint=0,fin_ciclo=0,Opcion=1,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,tiempo_desfogue=0; 
.................... float ADC_Pt100=0.0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... char dato[10]; 
.................... char datoTx[14]; 
.................... char datoRx[11]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
.................... float V0=0.0,R1=6180.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0; 
....................  
.................... typedef struct{ 
....................    char Letra[30]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void displayMenu(char palabra[30], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
1814:  MOVLB  5
1816:  MOVFF  53A,01
181A:  MOVFF  53B,03
181E:  MOVFF  53A,540
1822:  MOVFF  53B,541
1826:  MOVLW  05
1828:  MOVWF  FEA
182A:  MOVLW  1A
182C:  MOVWF  FE9
182E:  MOVFF  53B,FE2
1832:  MOVFF  53A,FE1
1836:  MOVF   FE7,F
1838:  MOVFF  FE6,FEE
183C:  BNZ   1836
....................    if(sombreado==2) 
183E:  MOVF   x3E,W
1840:  SUBLW  02
1842:  BNZ   186C
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
1844:  MOVLW  01
1846:  ADDWF  x3C,W
1848:  MOVWF  x40
184A:  MOVLW  01
184C:  ADDWF  x3D,W
184E:  MOVWF  x41
1850:  MOVFF  540,54B
1854:  MOVWF  x4C
1856:  MOVLW  05
1858:  MOVWF  x4E
185A:  MOVLW  1A
185C:  MOVWF  x4D
185E:  MOVFF  53F,54F
1862:  MOVLW  01
1864:  MOVWF  x50
1866:  MOVLB  0
1868:  RCALL  145C
186A:  MOVLB  5
....................    if(sombreado==1) 
186C:  DECFSZ x3E,W
186E:  BRA    18BA
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
1870:  MOVF   x3F,W
1872:  MULLW  08
1874:  MOVF   FF3,W
1876:  ADDWF  x3D,W
1878:  MOVWF  x40
187A:  CLRF   x4C
187C:  MOVFF  53D,54D
1880:  MOVLW  7F
1882:  MOVWF  x4E
1884:  MOVFF  540,54F
1888:  MOVLW  01
188A:  MOVWF  x50
188C:  MOVWF  x51
188E:  MOVLB  0
1890:  RCALL  1752
1892:  MOVLW  01
1894:  MOVLB  5
1896:  ADDWF  x3C,W
1898:  MOVWF  x40
189A:  MOVLW  01
189C:  ADDWF  x3D,W
189E:  MOVWF  x41
18A0:  MOVFF  540,54B
18A4:  MOVWF  x4C
18A6:  MOVLW  05
18A8:  MOVWF  x4E
18AA:  MOVLW  1A
18AC:  MOVWF  x4D
18AE:  MOVFF  53F,54F
18B2:  CLRF   x50
18B4:  MOVLB  0
18B6:  RCALL  145C
18B8:  MOVLB  5
....................    if(sombreado==0) 
18BA:  MOVF   x3E,F
18BC:  BNZ   1908
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
18BE:  MOVF   x3F,W
18C0:  MULLW  08
18C2:  MOVF   FF3,W
18C4:  ADDWF  x3D,W
18C6:  MOVWF  x40
18C8:  CLRF   x4C
18CA:  MOVFF  53D,54D
18CE:  MOVLW  7F
18D0:  MOVWF  x4E
18D2:  MOVFF  540,54F
18D6:  MOVLW  01
18D8:  MOVWF  x50
18DA:  CLRF   x51
18DC:  MOVLB  0
18DE:  RCALL  1752
18E0:  MOVLW  01
18E2:  MOVLB  5
18E4:  ADDWF  x3C,W
18E6:  MOVWF  x40
18E8:  MOVLW  01
18EA:  ADDWF  x3D,W
18EC:  MOVWF  x41
18EE:  MOVFF  540,54B
18F2:  MOVWF  x4C
18F4:  MOVLW  05
18F6:  MOVWF  x4E
18F8:  MOVLW  1A
18FA:  MOVWF  x4D
18FC:  MOVFF  53F,54F
1900:  MOVLW  01
1902:  MOVWF  x50
1904:  MOVLB  0
1906:  RCALL  145C
....................    glcd_update(); 
1908:  MOVLB  0
190A:  RCALL  123E
.................... } 
190C:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
23EC:  MOVLB  5
23EE:  MOVF   x3E,W
23F0:  SUBLW  02
23F2:  BNZ   2464
....................    { 
....................       sprintf(voltage, "%03u", digito); 
23F4:  MOVLW  05
23F6:  MOVWF  x39
23F8:  MOVLW  40
23FA:  MOVWF  x38
23FC:  MOVFF  53B,549
2400:  MOVLW  03
2402:  MOVWF  x4A
2404:  MOVLB  0
2406:  RCALL  2366
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
2408:  MOVLB  5
240A:  MOVF   x3F,W
240C:  MULLW  12
240E:  MOVF   FF3,W
2410:  ADDWF  x3C,W
2412:  MOVWF  x49
2414:  MOVF   x3F,W
2416:  MULLW  08
2418:  MOVF   FF3,W
241A:  ADDWF  x3D,W
241C:  MOVWF  x4A
241E:  MOVFF  53C,54C
2422:  MOVFF  53D,54D
2426:  MOVFF  549,54E
242A:  MOVWF  x4F
242C:  MOVLW  01
242E:  MOVWF  x50
2430:  MOVWF  x51
2432:  MOVLB  0
2434:  CALL   1752
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
2438:  MOVLW  01
243A:  MOVLB  5
243C:  ADDWF  x3C,W
243E:  MOVWF  x49
2440:  MOVLW  01
2442:  ADDWF  x3D,W
2444:  MOVWF  x4A
2446:  MOVFF  549,54B
244A:  MOVWF  x4C
244C:  MOVLW  05
244E:  MOVWF  x4E
2450:  MOVLW  40
2452:  MOVWF  x4D
2454:  MOVFF  53F,54F
2458:  CLRF   x50
245A:  MOVLB  0
245C:  CALL   145C
....................    } 
....................    else 
2460:  BRA    2532
2462:  MOVLB  5
....................    { 
....................       sprintf(voltage, "%u", digito); 
2464:  MOVLW  05
2466:  MOVWF  x39
2468:  MOVLW  40
246A:  MOVWF  x38
246C:  MOVFF  53B,549
2470:  MOVLW  1B
2472:  MOVWF  x4A
2474:  MOVLB  0
2476:  RCALL  2366
....................     
....................       if(sombreado==1) 
2478:  MOVLB  5
247A:  DECFSZ x3E,W
247C:  BRA    24D6
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
247E:  MOVF   x3F,W
2480:  MULLW  05
2482:  MOVF   FF3,W
2484:  ADDWF  x3C,W
2486:  MOVWF  x49
2488:  MOVF   x3F,W
248A:  MULLW  08
248C:  MOVF   FF3,W
248E:  ADDWF  x3D,W
2490:  MOVWF  x4A
2492:  MOVFF  53C,54C
2496:  MOVFF  53D,54D
249A:  MOVFF  549,54E
249E:  MOVWF  x4F
24A0:  MOVLW  01
24A2:  MOVWF  x50
24A4:  MOVWF  x51
24A6:  MOVLB  0
24A8:  CALL   1752
24AC:  MOVLW  01
24AE:  MOVLB  5
24B0:  ADDWF  x3C,W
24B2:  MOVWF  x49
24B4:  MOVLW  01
24B6:  ADDWF  x3D,W
24B8:  MOVWF  x4A
24BA:  MOVFF  549,54B
24BE:  MOVWF  x4C
24C0:  MOVLW  05
24C2:  MOVWF  x4E
24C4:  MOVLW  40
24C6:  MOVWF  x4D
24C8:  MOVFF  53F,54F
24CC:  CLRF   x50
24CE:  MOVLB  0
24D0:  CALL   145C
24D4:  MOVLB  5
....................       if(sombreado==0) 
24D6:  MOVF   x3E,F
24D8:  BNZ   2534
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
24DA:  MOVF   x3F,W
24DC:  MULLW  05
24DE:  MOVF   FF3,W
24E0:  ADDWF  x3C,W
24E2:  MOVWF  x49
24E4:  MOVF   x3F,W
24E6:  MULLW  08
24E8:  MOVF   FF3,W
24EA:  ADDWF  x3D,W
24EC:  MOVWF  x4A
24EE:  MOVFF  53C,54C
24F2:  MOVFF  53D,54D
24F6:  MOVFF  549,54E
24FA:  MOVWF  x4F
24FC:  MOVLW  01
24FE:  MOVWF  x50
2500:  CLRF   x51
2502:  MOVLB  0
2504:  CALL   1752
2508:  MOVLW  01
250A:  MOVLB  5
250C:  ADDWF  x3C,W
250E:  MOVWF  x49
2510:  MOVLW  01
2512:  ADDWF  x3D,W
2514:  MOVWF  x4A
2516:  MOVFF  549,54B
251A:  MOVWF  x4C
251C:  MOVLW  05
251E:  MOVWF  x4E
2520:  MOVLW  40
2522:  MOVWF  x4D
2524:  MOVFF  53F,54F
2528:  MOVLW  01
252A:  MOVWF  x50
252C:  MOVLB  0
252E:  CALL   145C
2532:  MOVLB  5
....................    } 
....................    glcd_update(); 
2534:  MOVLB  0
2536:  CALL   123E
.................... } 
253A:  RETLW  00
....................  
.................... #int_rda 
.................... void rda_isr(void)//función de interrupción por recepción de datos USART  
.................... {  
....................    dato[bite]=getch(); 
*
0F38:  CLRF   03
0F3A:  MOVLB  4
0F3C:  MOVF   x8B,W
0F3E:  ADDLW  BC
0F40:  MOVWF  FE9
0F42:  MOVLW  04
0F44:  ADDWFC 03,W
0F46:  MOVWF  FEA
0F48:  BTFSS  F9E.5
0F4A:  BRA    0F48
0F4C:  MOVFF  FAE,FEF
....................    if((bite<10 && strcmp(dato[bite],'\r')==0)) 
0F50:  MOVF   x8B,W
0F52:  SUBLW  09
0F54:  BNC   0F8A
0F56:  CLRF   03
0F58:  MOVF   x8B,W
0F5A:  ADDLW  BC
0F5C:  MOVWF  FE9
0F5E:  MOVLW  04
0F60:  ADDWFC 03,W
0F62:  MOVWF  FEA
0F64:  MOVFF  FEF,570
0F68:  MOVLB  5
0F6A:  CLRF   x72
0F6C:  MOVFF  570,571
0F70:  CLRF   x74
0F72:  MOVLW  0D
0F74:  MOVWF  x73
0F76:  MOVLB  0
0F78:  RCALL  0EC0
0F7A:  MOVF   01,F
0F7C:  BTFSC  FD8.2
0F7E:  BRA    0F84
0F80:  MOVLB  4
0F82:  BRA    0F8A
....................    { 
....................       bite=0; 
0F84:  MOVLB  4
0F86:  CLRF   x8B
....................    } 
....................    else 
0F88:  BRA    101C
....................    { 
....................       if(bite==10 && strcmp(dato[bite],'\r')==0) 
0F8A:  MOVF   x8B,W
0F8C:  SUBLW  0A
0F8E:  BNZ   100E
0F90:  CLRF   03
0F92:  MOVF   x8B,W
0F94:  ADDLW  BC
0F96:  MOVWF  FE9
0F98:  MOVLW  04
0F9A:  ADDWFC 03,W
0F9C:  MOVWF  FEA
0F9E:  MOVFF  FEF,570
0FA2:  MOVLB  5
0FA4:  CLRF   x72
0FA6:  MOVFF  570,571
0FAA:  CLRF   x74
0FAC:  MOVLW  0D
0FAE:  MOVWF  x73
0FB0:  MOVLB  0
0FB2:  RCALL  0EC0
0FB4:  MOVF   01,F
0FB6:  BTFSC  FD8.2
0FB8:  BRA    0FBE
0FBA:  MOVLB  4
0FBC:  BRA    100E
....................       { 
....................          TamanoCadena=bite; 
0FBE:  MOVFF  48B,48C
....................          bite=0; 
0FC2:  MOVLB  4
0FC4:  CLRF   x8B
....................          CadenaRecibida=1; 
0FC6:  BSF    x7D.3
....................          for(i=0;i<TamanoCadena+1;i++) 
0FC8:  CLRF   x8D
0FCA:  MOVLW  01
0FCC:  ADDWF  x8C,W
0FCE:  SUBWF  x8D,W
0FD0:  BC    100C
....................          { 
....................             datoRx[i]=dato[i]; 
0FD2:  CLRF   03
0FD4:  MOVF   x8D,W
0FD6:  ADDLW  D4
0FD8:  MOVWF  01
0FDA:  MOVLW  04
0FDC:  ADDWFC 03,F
0FDE:  MOVLB  5
0FE0:  MOVFF  03,571
0FE4:  CLRF   03
0FE6:  MOVLB  4
0FE8:  MOVF   x8D,W
0FEA:  ADDLW  BC
0FEC:  MOVWF  FE9
0FEE:  MOVLW  04
0FF0:  ADDWFC 03,W
0FF2:  MOVWF  FEA
0FF4:  MOVFF  FEF,572
0FF8:  MOVLB  5
0FFA:  MOVFF  571,FEA
0FFE:  MOVFF  01,FE9
1002:  MOVFF  572,FEF
....................          }    
1006:  MOVLB  4
1008:  INCF   x8D,F
100A:  BRA    0FCA
....................       } 
....................       else 
100C:  BRA    101C
....................       { 
....................          if(bite>10) 
100E:  MOVF   x8B,W
1010:  SUBLW  0A
1012:  BC    1018
....................          { 
....................             bite=0; 
1014:  CLRF   x8B
....................          } 
....................          else 
1016:  BRA    101C
....................          { 
....................             //displayTiempo(bite,50,50,2,1); 
....................             CadenaRecibida=0; 
1018:  BCF    x7D.3
....................             bite++; 
101A:  INCF   x8B,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
101C:  BCF    F9E.5
101E:  MOVLB  0
1020:  GOTO   0060
.................... void EnviarCodigo(void) 
.................... { 
....................    datoTx[0]=Resistencia+48; 
*
1AFA:  MOVLW  30
1AFC:  MOVLB  4
1AFE:  ADDWF  x7F,W
1B00:  MOVWF  xC6
....................    datoTx[1]=EVDesfogue+48; 
1B02:  MOVLW  30
1B04:  ADDWF  x80,W
1B06:  MOVWF  xC7
....................    datoTx[2]=EVAgua+48; 
1B08:  MOVLW  30
1B0A:  ADDWF  x81,W
1B0C:  MOVWF  xC8
....................    datoTx[3]=EVTrampa+48; 
1B0E:  MOVLW  30
1B10:  ADDWF  x82,W
1B12:  MOVWF  xC9
....................    datoTx[4]=MotorPuerta+48; 
1B14:  MOVLW  30
1B16:  ADDWF  x83,W
1B18:  MOVWF  xCA
....................    datoTx[5]=EVEntradaAgua+48; 
1B1A:  MOVLW  30
1B1C:  ADDWF  x84,W
1B1E:  MOVWF  xCB
....................    datoTx[6]=BombaVacio+48; 
1B20:  MOVLW  30
1B22:  ADDWF  x85,W
1B24:  MOVWF  xCC
....................    datoTx[7]=BombaAgua+48; 
1B26:  MOVLW  30
1B28:  ADDWF  x86,W
1B2A:  MOVWF  xCD
....................    datoTx[8]=Control+48; 
1B2C:  MOVLW  30
1B2E:  ADDWF  x87,W
1B30:  MOVWF  xCE
....................    datoTx[12]=Nivel+48; 
1B32:  MOVLW  30
1B34:  ADDWF  x9C,W
1B36:  MOVWF  xD2
....................    datoTx[9]=Setpoint+48; 
1B38:  MOVLW  30
1B3A:  ADDWF  x8E,W
1B3C:  MOVWF  xCF
....................    /*itoa(Setpoint,10, SetTemperatura); 
....................     
....................    for(i=0;i<3;i++) 
....................    { 
....................       if(SetTemperatura[i]==null) 
....................       { 
....................          datoTx[i+9]='n'; 
....................       } 
....................       else 
....................       { 
....................          datoTx[i+9]=SetTemperatura[i]; 
....................       } 
....................    }*/ 
....................    datoTx[13]='\r'; 
1B3E:  MOVLW  0D
1B40:  MOVWF  xD3
....................        
....................        
....................    for(i=0;i<14;i++) 
1B42:  CLRF   x8D
1B44:  MOVF   x8D,W
1B46:  SUBLW  0D
1B48:  BNC   1B76
....................    { 
....................       putc(datoTx[i]); 
1B4A:  CLRF   03
1B4C:  MOVF   x8D,W
1B4E:  ADDLW  C6
1B50:  MOVWF  FE9
1B52:  MOVLW  04
1B54:  ADDWFC 03,W
1B56:  MOVWF  FEA
1B58:  MOVFF  FEF,53A
1B5C:  MOVLB  5
1B5E:  MOVF   x3A,W
1B60:  MOVLB  0
1B62:  BRA    1AF0
....................       delay_ms(12); 
1B64:  MOVLW  0C
1B66:  MOVLB  5
1B68:  MOVWF  x3F
1B6A:  MOVLB  0
1B6C:  CALL   10EC
....................    }    
1B70:  MOVLB  4
1B72:  INCF   x8D,F
1B74:  BRA    1B44
.................... } 
1B76:  MOVLB  0
1B78:  RETLW  00
....................  
.................... void Determina(void){ 
....................          Puerta=DatoRx[0]-48; 
*
1F52:  MOVLW  30
1F54:  MOVLB  4
1F56:  SUBWF  xD4,W
1F58:  MOVWF  x70
....................          Parada=DatoRx[1]-48; 
1F5A:  MOVLW  30
1F5C:  SUBWF  xD5,W
1F5E:  MOVWF  x71
....................          NivelReservorio=DatoRx[2]-48; 
1F60:  MOVLW  30
1F62:  SUBWF  xD6,W
1F64:  MOVWF  x72
....................          NivelTanque=DatoRx[3]-48; 
1F66:  MOVLW  30
1F68:  SUBWF  xD7,W
1F6A:  MOVWF  x73
....................          Presostato=DatoRx[4]-48; 
1F6C:  MOVLW  30
1F6E:  SUBWF  xD8,W
1F70:  MOVWF  x74
....................          ADC_Pt100=DatoRx[5]-48; 
1F72:  MOVLW  30
1F74:  SUBWF  xD9,W
1F76:  MOVLB  5
1F78:  CLRF   x40
1F7A:  MOVWF  x3F
1F7C:  MOVLB  0
1F7E:  CALL   1116
1F82:  MOVFF  03,4A3
1F86:  MOVFF  02,4A2
1F8A:  MOVFF  01,4A1
1F8E:  MOVFF  00,4A0
....................          Alarma=DatoRx[6]-48; 
1F92:  MOVLW  30
1F94:  MOVLB  4
1F96:  SUBWF  xDA,W
1F98:  MOVWF  x7A
....................          AlarmaAgua=DatoRx[7]-48; 
1F9A:  MOVLW  30
1F9C:  SUBWF  xDB,W
1F9E:  MOVWF  x7B
....................          /*for(i=0;i<4;i++) 
....................          { 
....................             if(strcmp(datoRx[i+5],'n')==0 ) 
....................             { 
....................                break; 
....................             } 
....................             else 
....................             { 
....................                ADCTemperatura[i]=datoRx[i+5]; 
....................             } 
....................          } 
....................          ADC_Pt100=atof(ADCTemperatura); 
....................          for(i=0;i<4;i++) 
....................          { 
....................             datoRx[i+5]=null; 
....................             ADCTemperatura[i]=null; 
....................          }*/ 
....................          Decimal=DatoRx[9]-48; 
1FA0:  MOVLW  30
1FA2:  SUBWF  xDD,W
1FA4:  MOVWF  x88
....................          ADC_Pt100=ADC_Pt100+((float)Decimal/10); 
1FA6:  MOVLB  5
1FA8:  CLRF   x40
1FAA:  MOVFF  488,53F
1FAE:  MOVLB  0
1FB0:  CALL   1116
1FB4:  MOVFF  00,53A
1FB8:  MOVFF  01,53B
1FBC:  MOVFF  02,53C
1FC0:  MOVFF  03,53D
1FC4:  MOVFF  03,541
1FC8:  MOVFF  02,540
1FCC:  MOVFF  01,53F
1FD0:  MOVFF  00,53E
1FD4:  MOVLB  5
1FD6:  CLRF   x45
1FD8:  CLRF   x44
1FDA:  MOVLW  20
1FDC:  MOVWF  x43
1FDE:  MOVLW  82
1FE0:  MOVWF  x42
1FE2:  MOVLB  0
1FE4:  BRA    1B7A
1FE6:  BCF    FD8.1
1FE8:  MOVFF  4A3,541
1FEC:  MOVFF  4A2,540
1FF0:  MOVFF  4A1,53F
1FF4:  MOVFF  4A0,53E
1FF8:  MOVFF  03,545
1FFC:  MOVFF  02,544
2000:  MOVFF  01,543
2004:  MOVFF  00,542
2008:  RCALL  1CDA
200A:  MOVFF  03,4A3
200E:  MOVFF  02,4A2
2012:  MOVFF  01,4A1
2016:  MOVFF  00,4A0
.................... } 
201A:  RETLW  00
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................    /* 
....................    if(x==1){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==2){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==3){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==4){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    }*/ 
....................     
....................    if(x==5){ 
*
2040:  MOVLB  5
2042:  MOVF   x3A,W
2044:  SUBLW  05
2046:  BNZ   20EA
....................    for( i = 0 ; i < 64 ; i ++ ) 
2048:  CLRF   x3B
204A:  MOVF   x3B,W
204C:  SUBLW  3F
204E:  BNC   20EA
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
2050:  CLRF   x3C
2052:  MOVF   x3C,W
2054:  SUBLW  0F
2056:  BNC   20E6
....................       {     
....................          for(k=7;k>-1;k--) 
2058:  MOVLW  07
205A:  MOVWF  x3D
205C:  MOVF   x3D,W
205E:  XORLW  80
2060:  SUBLW  7F
2062:  BC    20E2
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
2064:  CLRF   x3F
2066:  MOVFF  53B,53E
206A:  CLRF   x41
206C:  MOVLW  10
206E:  MOVWF  x40
2070:  MOVLB  0
2072:  BRA    201C
2074:  MOVFF  02,53F
2078:  MOVFF  01,53E
207C:  MOVLB  5
207E:  MOVF   x3C,W
2080:  ADDWF  01,W
2082:  MOVWF  01
2084:  MOVLW  00
2086:  ADDWFC 02,W
2088:  MOVWF  03
208A:  MOVF   01,W
208C:  MOVFF  FF2,53E
2090:  BCF    FF2.7
2092:  MOVFF  03,FF7
2096:  MOVLB  0
2098:  CALL   02B2
209C:  MOVLB  5
209E:  BTFSC  x3E.7
20A0:  BSF    FF2.7
20A2:  MOVWF  x3E
20A4:  MOVLW  07
20A6:  BSF    FD8.0
20A8:  SUBFWB x3D,W
20AA:  MOVWF  x3F
20AC:  MOVFF  53E,00
20B0:  MOVF   x3F,W
20B2:  MOVWF  01
20B4:  BZ    20BE
20B6:  BCF    FD8.0
20B8:  RRCF   00,F
20BA:  DECFSZ 01,F
20BC:  BRA    20B6
20BE:  BTFSS  00.0
20C0:  BRA    20DE
....................                glcd_pixel( j*8+k,i, ON ); 
20C2:  MOVF   x3C,W
20C4:  MULLW  08
20C6:  MOVF   FF3,W
20C8:  ADDWF  x3D,W
20CA:  MOVWF  x3E
20CC:  MOVWF  x67
20CE:  MOVFF  53B,568
20D2:  MOVLW  01
20D4:  MOVWF  x69
20D6:  MOVLB  0
20D8:  CALL   13A0
20DC:  MOVLB  5
....................          }   
20DE:  DECF   x3D,F
20E0:  BRA    205C
....................       } 
20E2:  INCF   x3C,F
20E4:  BRA    2052
....................    } 
20E6:  INCF   x3B,F
20E8:  BRA    204A
....................    } 
....................     
.................... } 
20EA:  MOVLB  0
20EC:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
*
1024:  MOVLW  15
1026:  MOVWF  FCF
1028:  MOVLW  A0
102A:  MOVWF  FCE
....................    tiempos++; 
102C:  MOVLB  4
102E:  INCF   x94,F
1030:  BTFSC  FD8.2
1032:  INCF   x95,F
....................    tiempos3++; 
1034:  INCF   x96,F
1036:  BTFSC  FD8.2
1038:  INCF   x97,F
....................    tiempoctrl++; 
103A:  INCF   x98,F
103C:  BTFSC  FD8.2
103E:  INCF   x99,F
....................        
....................    if(tiempos3>=40 && Exhaust==2) 
1040:  MOVF   x97,F
1042:  BNZ   104A
1044:  MOVF   x96,W
1046:  SUBLW  27
1048:  BC    105C
104A:  MOVF   x93,W
104C:  SUBLW  02
104E:  BNZ   105C
....................    {tiempos3=0;Expulsa=1;tiempo_desfogue++;} 
1050:  CLRF   x97
1052:  CLRF   x96
1054:  BSF    x7C.7
1056:  INCF   x9E,F
1058:  BTFSC  FD8.2
105A:  INCF   x9F,F
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
105C:  MOVF   x94,W
105E:  SUBLW  C8
1060:  BNZ   10E4
1062:  MOVF   x95,F
1064:  BNZ   10E4
....................    {tiempos=0;Lectura=1; 
1066:  CLRF   x95
1068:  CLRF   x94
106A:  BSF    x7C.6
....................     
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
106C:  DECFSZ x91,W
106E:  BRA    10A8
....................       { 
....................                       
....................       Testerilizacion[0]++; 
1070:  INCF   xA4,F
....................       if(Testerilizacion[0]>9) 
1072:  BTFSC  xA4.7
1074:  BRA    1080
1076:  MOVF   xA4,W
1078:  SUBLW  09
107A:  BC    1080
....................          {Testerilizacion[0]=0; 
107C:  CLRF   xA4
....................           Testerilizacion[1]++;} 
107E:  INCF   xA5,F
....................        if(Testerilizacion[1]>5) 
1080:  BTFSC  xA5.7
1082:  BRA    108E
1084:  MOVF   xA5,W
1086:  SUBLW  05
1088:  BC    108E
....................          {Testerilizacion[1]=0; 
108A:  CLRF   xA5
....................           Testerilizacion[2]++;} 
108C:  INCF   xA6,F
....................          if(Testerilizacion[2]>9) 
108E:  BTFSC  xA6.7
1090:  BRA    109C
1092:  MOVF   xA6,W
1094:  SUBLW  09
1096:  BC    109C
....................             {Testerilizacion[2]=0; 
1098:  CLRF   xA6
....................              Testerilizacion[3]++;} 
109A:  INCF   xA7,F
....................             if(Testerilizacion[3]>5) 
109C:  BTFSC  xA7.7
109E:  BRA    10A8
10A0:  MOVF   xA7,W
10A2:  SUBLW  05
10A4:  BC    10A8
....................                {Testerilizacion[3]=0;} 
10A6:  CLRF   xA7
....................       }        
....................        
....................     if(tiempo_secado==1) 
10A8:  DECFSZ x92,W
10AA:  BRA    10E4
....................       { 
....................                       
....................       Tsecado[0]++; 
10AC:  INCF   xAC,F
....................       if(Tsecado[0]>9) 
10AE:  BTFSC  xAC.7
10B0:  BRA    10BC
10B2:  MOVF   xAC,W
10B4:  SUBLW  09
10B6:  BC    10BC
....................          {Tsecado[0]=0; 
10B8:  CLRF   xAC
....................           Tsecado[1]++;} 
10BA:  INCF   xAD,F
....................        if(Tsecado[1]>5) 
10BC:  BTFSC  xAD.7
10BE:  BRA    10CA
10C0:  MOVF   xAD,W
10C2:  SUBLW  05
10C4:  BC    10CA
....................          {Tsecado[1]=0; 
10C6:  CLRF   xAD
....................           Tsecado[2]++;} 
10C8:  INCF   xAE,F
....................          if(Tsecado[2]>9) 
10CA:  BTFSC  xAE.7
10CC:  BRA    10D8
10CE:  MOVF   xAE,W
10D0:  SUBLW  09
10D2:  BC    10D8
....................             {Tsecado[2]=0; 
10D4:  CLRF   xAE
....................              Tsecado[3]++;} 
10D6:  INCF   xAF,F
....................             if(Tsecado[3]>5) 
10D8:  BTFSC  xAF.7
10DA:  BRA    10E4
10DC:  MOVF   xAF,W
10DE:  SUBLW  05
10E0:  BC    10E4
....................                {Tsecado[3]=0;} 
10E2:  CLRF   xAF
....................       }   
....................    } 
....................    } 
....................     
10E4:  BCF    F9E.0
10E6:  MOVLB  0
10E8:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
....................    glcd_rect(x1, y, x2, y+7, YES, OFF); 
*
267C:  MOVLW  07
267E:  MOVLB  5
2680:  ADDWF  x3C,W
2682:  MOVWF  x3D
2684:  MOVFF  53A,54C
2688:  MOVFF  53C,54D
268C:  MOVFF  53B,54E
2690:  MOVWF  x4F
2692:  MOVLW  01
2694:  MOVWF  x50
2696:  CLRF   x51
2698:  MOVLB  0
269A:  CALL   1752
.................... } 
269E:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%3.1f",adc); // Converts adc to text 
*
2A10:  MOVLW  05
2A12:  MOVLB  5
2A14:  MOVWF  x39
2A16:  MOVLW  41
2A18:  MOVWF  x38
2A1A:  MOVLW  02
2A1C:  MOVWF  FE9
2A1E:  MOVFF  53D,54D
2A22:  MOVFF  53C,54C
2A26:  MOVFF  53B,54B
2A2A:  MOVFF  53A,54A
2A2E:  MOVLW  01
2A30:  MOVWF  x4E
2A32:  MOVLB  0
2A34:  BRA    285C
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
2A36:  MOVLB  5
2A38:  MOVF   x40,W
2A3A:  MULLW  1B
2A3C:  MOVF   FF3,W
2A3E:  ADDWF  x3E,W
2A40:  MOVWF  x4A
2A42:  MOVF   x40,W
2A44:  MULLW  08
2A46:  MOVF   FF3,W
2A48:  ADDWF  x3F,W
2A4A:  MOVWF  x4B
2A4C:  MOVFF  53E,54C
2A50:  MOVFF  53F,54D
2A54:  MOVFF  54A,54E
2A58:  MOVWF  x4F
2A5A:  MOVLW  01
2A5C:  MOVWF  x50
2A5E:  CLRF   x51
2A60:  MOVLB  0
2A62:  CALL   1752
....................    /*glcd_rect(x, y, x+53, y+15, YES, ON);*/glcd_text57(x, y, voltage, w, ON); 
2A66:  MOVFF  53E,54B
2A6A:  MOVFF  53F,54C
2A6E:  MOVLW  05
2A70:  MOVLB  5
2A72:  MOVWF  x4E
2A74:  MOVLW  41
2A76:  MOVWF  x4D
2A78:  MOVFF  540,54F
2A7C:  MOVLW  01
2A7E:  MOVWF  x50
2A80:  MOVLB  0
2A82:  CALL   145C
.................... } 
2A86:  GOTO   64B0 (RETURN)
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
114C:  MOVLB  5
114E:  RLCF   x3A,W
1150:  MOVWF  00
1152:  RLCF   00,F
1154:  MOVLW  FC
1156:  ANDWF  00,F
1158:  MOVFF  00,01
115C:  MOVF   FC2,W
115E:  ANDLW  C3
1160:  IORWF  00,W
1162:  MOVWF  FC2
1164:  MOVLW  0A
1166:  MOVWF  x3F
1168:  MOVLB  0
116A:  RCALL  10EC
116C:  BSF    FC2.1
116E:  BTFSC  FC2.1
1170:  BRA    116E
1172:  MOVFF  FC4,540
1176:  MOVFF  FC3,53F
117A:  MOVLB  0
117C:  RCALL  1116
117E:  MOVFF  03,53E
1182:  MOVFF  02,53D
1186:  MOVFF  01,53C
118A:  MOVFF  00,53B
118E:  MOVFF  53B,00
1192:  MOVFF  53C,01
1196:  MOVFF  53D,02
119A:  MOVFF  53E,03
.................... } 
119E:  GOTO   2D8A (RETURN)
....................  
.................... void MuestraTiemposProgramados(){ 
.................... // Muestra Valor de esterilizacion programado. 
....................    displayTiempo(Testerilizacionp[3],36,0,0,1);displayTiempo(Testerilizacionp[2],42,0,0,1); 
*
253C:  MOVFF  4AB,53B
2540:  MOVLW  24
2542:  MOVLB  5
2544:  MOVWF  x3C
2546:  CLRF   x3D
2548:  CLRF   x3E
254A:  MOVLW  01
254C:  MOVWF  x3F
254E:  MOVLB  0
2550:  RCALL  23EC
2552:  MOVFF  4AA,53B
2556:  MOVLW  2A
2558:  MOVLB  5
255A:  MOVWF  x3C
255C:  CLRF   x3D
255E:  CLRF   x3E
2560:  MOVLW  01
2562:  MOVWF  x3F
2564:  MOVLB  0
2566:  RCALL  23EC
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,0,2,1);  
2568:  MOVLW  05
256A:  MOVWF  FEA
256C:  MOVLW  1A
256E:  MOVWF  FE9
2570:  MOVFF  FF2,53A
2574:  BCF    FF2.7
2576:  MOVLW  00
2578:  CALL   06CA
257C:  TBLRD*-
257E:  TBLRD*+
2580:  MOVF   FF5,W
2582:  MOVWF  FEE
2584:  IORLW  00
2586:  BNZ   257E
2588:  MOVLB  5
258A:  BTFSC  x3A.7
258C:  BSF    FF2.7
258E:  MOVLW  05
2590:  MOVWF  x3B
2592:  MOVLW  1A
2594:  MOVWF  x3A
2596:  MOVLW  31
2598:  MOVWF  x3C
259A:  CLRF   x3D
259C:  MOVLW  02
259E:  MOVWF  x3E
25A0:  MOVLW  01
25A2:  MOVWF  x3F
25A4:  MOVLB  0
25A6:  CALL   1814
....................    displayTiempo(Testerilizacionp[1],54,0,0,1);displayTiempo(Testerilizacionp[0],60,0,0,1); 
25AA:  MOVFF  4A9,53B
25AE:  MOVLW  36
25B0:  MOVLB  5
25B2:  MOVWF  x3C
25B4:  CLRF   x3D
25B6:  CLRF   x3E
25B8:  MOVLW  01
25BA:  MOVWF  x3F
25BC:  MOVLB  0
25BE:  RCALL  23EC
25C0:  MOVFF  4A8,53B
25C4:  MOVLW  3C
25C6:  MOVLB  5
25C8:  MOVWF  x3C
25CA:  CLRF   x3D
25CC:  CLRF   x3E
25CE:  MOVLW  01
25D0:  MOVWF  x3F
25D2:  MOVLB  0
25D4:  RCALL  23EC
.................... // Muestra tiempo de secado programado. 
....................    displayTiempo(Tsecadop[3],36,8,0,1);displayTiempo(Tsecadop[2],42,8,0,1); 
25D6:  MOVFF  4B3,53B
25DA:  MOVLW  24
25DC:  MOVLB  5
25DE:  MOVWF  x3C
25E0:  MOVLW  08
25E2:  MOVWF  x3D
25E4:  CLRF   x3E
25E6:  MOVLW  01
25E8:  MOVWF  x3F
25EA:  MOVLB  0
25EC:  RCALL  23EC
25EE:  MOVFF  4B2,53B
25F2:  MOVLW  2A
25F4:  MOVLB  5
25F6:  MOVWF  x3C
25F8:  MOVLW  08
25FA:  MOVWF  x3D
25FC:  CLRF   x3E
25FE:  MOVLW  01
2600:  MOVWF  x3F
2602:  MOVLB  0
2604:  RCALL  23EC
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,8,2,1);  
2606:  MOVLW  05
2608:  MOVWF  FEA
260A:  MOVLW  1A
260C:  MOVWF  FE9
260E:  MOVFF  FF2,53A
2612:  BCF    FF2.7
2614:  MOVLW  00
2616:  CALL   06CA
261A:  TBLRD*-
261C:  TBLRD*+
261E:  MOVF   FF5,W
2620:  MOVWF  FEE
2622:  IORLW  00
2624:  BNZ   261C
2626:  MOVLB  5
2628:  BTFSC  x3A.7
262A:  BSF    FF2.7
262C:  MOVLW  05
262E:  MOVWF  x3B
2630:  MOVLW  1A
2632:  MOVWF  x3A
2634:  MOVLW  31
2636:  MOVWF  x3C
2638:  MOVLW  08
263A:  MOVWF  x3D
263C:  MOVLW  02
263E:  MOVWF  x3E
2640:  MOVLW  01
2642:  MOVWF  x3F
2644:  MOVLB  0
2646:  CALL   1814
....................    displayTiempo(Tsecadop[1],54,8,0,1);displayTiempo(Tsecadop[0],60,8,0,1); 
264A:  MOVFF  4B1,53B
264E:  MOVLW  36
2650:  MOVLB  5
2652:  MOVWF  x3C
2654:  MOVLW  08
2656:  MOVWF  x3D
2658:  CLRF   x3E
265A:  MOVLW  01
265C:  MOVWF  x3F
265E:  MOVLB  0
2660:  RCALL  23EC
2662:  MOVFF  4B0,53B
2666:  MOVLW  3C
2668:  MOVLB  5
266A:  MOVWF  x3C
266C:  MOVLW  08
266E:  MOVWF  x3D
2670:  CLRF   x3E
2672:  MOVLW  01
2674:  MOVWF  x3F
2676:  MOVLB  0
2678:  RCALL  23EC
.................... } 
267A:  RETLW  00
....................  
.................... void Leer_Sensor(int media) 
.................... { 
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    V0 = V0/39.40; 
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
....................    Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>media-1) 
....................    {l=0;} 
....................    promedio[l]=Temperature;l++; 
....................           
....................    for(h=0;h<=(media-1);h++) 
....................    { 
....................       Prom+=promedio[h]; 
....................    }  
....................    Prom=Prom/media;    
....................    Prom+=((float)Ajuste-(float)Ajusten); 
....................     
....................    //return Prom; 
.................... } 
....................  
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
1A3A:  MOVLW  05
1A3C:  MOVLB  5
1A3E:  MOVWF  x39
1A40:  MOVLW  40
1A42:  MOVWF  x38
1A44:  MOVFF  53C,549
1A48:  MOVLW  1F
1A4A:  MOVWF  x4A
1A4C:  MOVLB  0
1A4E:  BRA    195A
....................     
....................    if(sombreado==1) 
1A50:  MOVLB  5
1A52:  DECFSZ x3F,W
1A54:  BRA    1AA4
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
1A56:  MOVLW  12
1A58:  ADDWF  x3D,W
1A5A:  MOVWF  x49
1A5C:  MOVLW  18
1A5E:  ADDWF  x3E,W
1A60:  MOVWF  x4A
1A62:  MOVFF  53D,54C
1A66:  MOVFF  53E,54D
1A6A:  MOVFF  549,54E
1A6E:  MOVWF  x4F
1A70:  MOVLW  01
1A72:  MOVWF  x50
1A74:  MOVWF  x51
1A76:  MOVLB  0
1A78:  RCALL  1752
1A7A:  MOVLW  02
1A7C:  MOVLB  5
1A7E:  ADDWF  x3D,W
1A80:  MOVWF  x49
1A82:  MOVLW  01
1A84:  ADDWF  x3E,W
1A86:  MOVWF  x4A
1A88:  MOVFF  549,54B
1A8C:  MOVWF  x4C
1A8E:  MOVLW  05
1A90:  MOVWF  x4E
1A92:  MOVLW  40
1A94:  MOVWF  x4D
1A96:  MOVLW  02
1A98:  MOVWF  x4F
1A9A:  CLRF   x50
1A9C:  MOVLB  0
1A9E:  RCALL  145C
....................    else    
1AA0:  BRA    1AEE
1AA2:  MOVLB  5
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
1AA4:  MOVLW  12
1AA6:  ADDWF  x3D,W
1AA8:  MOVWF  x49
1AAA:  MOVLW  18
1AAC:  ADDWF  x3E,W
1AAE:  MOVWF  x4A
1AB0:  MOVFF  53D,54C
1AB4:  MOVFF  53E,54D
1AB8:  MOVFF  549,54E
1ABC:  MOVWF  x4F
1ABE:  CLRF   x50
1AC0:  CLRF   x51
1AC2:  MOVLB  0
1AC4:  RCALL  1752
1AC6:  MOVLW  02
1AC8:  MOVLB  5
1ACA:  ADDWF  x3D,W
1ACC:  MOVWF  x49
1ACE:  MOVLW  01
1AD0:  ADDWF  x3E,W
1AD2:  MOVWF  x4A
1AD4:  MOVFF  549,54B
1AD8:  MOVWF  x4C
1ADA:  MOVLW  05
1ADC:  MOVWF  x4E
1ADE:  MOVLW  40
1AE0:  MOVWF  x4D
1AE2:  MOVLW  02
1AE4:  MOVWF  x4F
1AE6:  MOVLW  01
1AE8:  MOVWF  x50
1AEA:  MOVLB  0
1AEC:  RCALL  145C
....................  
.................... } 
1AEE:  RETLW  00
....................  
.................... void main() 
.................... { 
*
2B42:  CLRF   FF8
2B44:  BCF    FD0.7
2B46:  BSF    07.7
2B48:  CLRF   FEA
2B4A:  CLRF   FE9
2B4C:  BSF    FB8.3
2B4E:  MOVLW  E1
2B50:  MOVWF  FAF
2B52:  MOVLW  04
2B54:  MOVWF  FB0
2B56:  MOVLW  A6
2B58:  MOVWF  FAC
2B5A:  MOVLW  90
2B5C:  MOVWF  FAB
2B5E:  MOVLB  4
2B60:  CLRF   x70
2B62:  MOVLW  01
2B64:  MOVWF  x71
2B66:  CLRF   x72
2B68:  CLRF   x73
2B6A:  CLRF   x74
2B6C:  CLRF   x75
2B6E:  CLRF   x76
2B70:  CLRF   x77
2B72:  CLRF   x78
2B74:  CLRF   x79
2B76:  CLRF   x7A
2B78:  CLRF   x7B
2B7A:  BCF    x7C.0
2B7C:  BCF    x7C.1
2B7E:  BCF    x7C.2
2B80:  BCF    x7C.3
2B82:  BSF    x7C.4
2B84:  BCF    x7C.5
2B86:  BCF    x7C.6
2B88:  BCF    x7C.7
2B8A:  BCF    x7D.0
2B8C:  BCF    x7D.1
2B8E:  BCF    x7D.2
2B90:  BCF    x7D.3
2B92:  BCF    x7D.4
2B94:  BCF    x7D.5
2B96:  BCF    x7D.6
2B98:  BCF    x7D.7
2B9A:  BCF    x7E.0
2B9C:  BCF    x7E.1
2B9E:  BCF    x7E.2
2BA0:  BCF    x7E.3
2BA2:  BCF    x7E.4
2BA4:  BCF    x7E.5
2BA6:  BCF    x7E.6
2BA8:  CLRF   x7F
2BAA:  CLRF   x80
2BAC:  CLRF   x81
2BAE:  CLRF   x82
2BB0:  CLRF   x83
2BB2:  CLRF   x84
2BB4:  CLRF   x85
2BB6:  CLRF   x86
2BB8:  CLRF   x87
2BBA:  CLRF   x88
2BBC:  CLRF   x89
2BBE:  MOVWF  x8A
2BC0:  CLRF   x8B
2BC2:  CLRF   x8C
2BC4:  CLRF   x8D
2BC6:  CLRF   x8E
2BC8:  CLRF   x8F
2BCA:  MOVWF  x90
2BCC:  CLRF   x91
2BCE:  CLRF   x92
2BD0:  CLRF   x93
2BD2:  CLRF   x95
2BD4:  CLRF   x94
2BD6:  CLRF   x97
2BD8:  CLRF   x96
2BDA:  CLRF   x99
2BDC:  CLRF   x98
2BDE:  CLRF   x9B
2BE0:  MOVLW  0F
2BE2:  MOVWF  x9A
2BE4:  CLRF   x9D
2BE6:  CLRF   x9C
2BE8:  CLRF   x9F
2BEA:  CLRF   x9E
2BEC:  CLRF   xA3
2BEE:  CLRF   xA2
2BF0:  CLRF   xA1
2BF2:  CLRF   xA0
2BF4:  CLRF   xE9
2BF6:  CLRF   xE8
2BF8:  CLRF   xE7
2BFA:  CLRF   xE6
2BFC:  CLRF   xED
2BFE:  MOVLW  20
2C00:  MOVWF  xEC
2C02:  MOVLW  41
2C04:  MOVWF  xEB
2C06:  MOVLW  8B
2C08:  MOVWF  xEA
2C0A:  CLRF   xF5
2C0C:  CLRF   xF4
2C0E:  MOVLW  20
2C10:  MOVWF  xF3
2C12:  MOVLW  82
2C14:  MOVWF  xF2
2C16:  CLRF   xF9
2C18:  CLRF   xF8
2C1A:  CLRF   xF7
2C1C:  CLRF   xF6
2C1E:  CLRF   xFD
2C20:  CLRF   xFC
2C22:  CLRF   xFB
2C24:  CLRF   xFA
2C26:  MOVLB  5
2C28:  CLRF   x01
2C2A:  CLRF   x00
2C2C:  MOVLB  4
2C2E:  CLRF   xFF
2C30:  CLRF   xFE
2C32:  MOVLB  5
2C34:  CLRF   x05
2C36:  CLRF   x04
2C38:  CLRF   x03
2C3A:  CLRF   x02
2C3C:  CLRF   x09
2C3E:  CLRF   x08
2C40:  CLRF   x07
2C42:  CLRF   x06
2C44:  CLRF   x0D
2C46:  CLRF   x0C
2C48:  MOVLW  48
2C4A:  MOVWF  x0B
2C4C:  MOVLW  83
2C4E:  MOVWF  x0A
2C50:  CLRF   x11
2C52:  CLRF   x10
2C54:  MOVLW  20
2C56:  MOVWF  x0F
2C58:  MOVLW  83
2C5A:  MOVWF  x0E
2C5C:  CLRF   x15
2C5E:  CLRF   x14
2C60:  CLRF   x13
2C62:  CLRF   x12
2C64:  CLRF   x19
2C66:  CLRF   x18
2C68:  CLRF   x17
2C6A:  CLRF   x16
2C6C:  MOVF   FC1,W
2C6E:  ANDLW  C0
2C70:  IORLW  0F
2C72:  MOVWF  FC1
2C74:  MOVLW  07
2C76:  MOVWF  FB4
2C78:  CLRF   16
2C7A:  CLRF   17
2C7C:  MOVLW  6B
2C7E:  MOVLB  4
2C80:  MOVWF  x1C
2C82:  MOVLW  50
2C84:  MOVWF  x1D
2C86:  MOVLW  61
2C88:  MOVWF  x1E
2C8A:  CLRF   x1F
2C8C:  CLRF   x20
2C8E:  CLRF   x21
2C90:  CLRF   x22
2C92:  CLRF   x23
2C94:  CLRF   x24
2C96:  CLRF   x25
2C98:  CLRF   x26
2C9A:  CLRF   x27
2C9C:  CLRF   x28
2C9E:  CLRF   x29
2CA0:  CLRF   x2A
2CA2:  CLRF   x2B
2CA4:  CLRF   x2C
2CA6:  CLRF   x2D
2CA8:  CLRF   x2E
2CAA:  CLRF   x2F
2CAC:  CLRF   x30
2CAE:  CLRF   x31
2CB0:  CLRF   x32
2CB2:  CLRF   x33
2CB4:  CLRF   x34
2CB6:  CLRF   x35
2CB8:  CLRF   x36
2CBA:  CLRF   x37
2CBC:  CLRF   x38
2CBE:  CLRF   x39
2CC0:  CLRF   x3A
2CC2:  CLRF   x3B
2CC4:  CLRF   x3C
2CC6:  CLRF   x3D
2CC8:  CLRF   x3E
2CCA:  CLRF   x3F
2CCC:  CLRF   x40
2CCE:  CLRF   x41
2CD0:  CLRF   x42
2CD2:  CLRF   x43
2CD4:  CLRF   x44
2CD6:  CLRF   x45
2CD8:  CLRF   x46
2CDA:  CLRF   x47
2CDC:  CLRF   x48
2CDE:  CLRF   x49
2CE0:  CLRF   x4A
2CE2:  CLRF   x4B
2CE4:  CLRF   x4C
2CE6:  CLRF   x4D
2CE8:  CLRF   x4E
2CEA:  CLRF   x4F
2CEC:  CLRF   x50
2CEE:  CLRF   x51
2CF0:  CLRF   x52
2CF2:  CLRF   x53
2CF4:  CLRF   x54
2CF6:  CLRF   x55
2CF8:  CLRF   x56
2CFA:  CLRF   x57
2CFC:  CLRF   x58
2CFE:  CLRF   x59
2D00:  CLRF   x5A
2D02:  CLRF   x5B
2D04:  CLRF   x5C
2D06:  CLRF   x5D
2D08:  CLRF   x5E
2D0A:  CLRF   x5F
2D0C:  CLRF   x60
2D0E:  CLRF   x61
2D10:  CLRF   x62
2D12:  CLRF   x63
2D14:  CLRF   x64
2D16:  CLRF   x65
2D18:  CLRF   x66
2D1A:  CLRF   x67
2D1C:  CLRF   x68
2D1E:  CLRF   x69
2D20:  CLRF   x6A
2D22:  CLRF   x6B
2D24:  CLRF   x6C
2D26:  CLRF   x6D
2D28:  CLRF   x6E
2D2A:  CLRF   x6F
2D2C:  CLRF   xA4
2D2E:  CLRF   xA5
2D30:  CLRF   xA6
2D32:  CLRF   xA7
2D34:  CLRF   xA8
2D36:  CLRF   xA9
2D38:  CLRF   xAA
2D3A:  CLRF   xAB
2D3C:  CLRF   xAC
2D3E:  CLRF   xAD
2D40:  CLRF   xAE
2D42:  CLRF   xAF
2D44:  CLRF   xB0
2D46:  CLRF   xB1
2D48:  CLRF   xB2
2D4A:  CLRF   xB3
2D4C:  CLRF   xB4
2D4E:  CLRF   xB5
2D50:  CLRF   xB6
2D52:  CLRF   xB7
2D54:  CLRF   xB8
2D56:  CLRF   xB9
2D58:  CLRF   xBA
2D5A:  CLRF   xBB
2D5C:  CLRF   xE3
2D5E:  CLRF   xE4
2D60:  CLRF   xE5
2D62:  MOVLB  5
2D64:  CLRF   x38
2D66:  CLRF   x39
....................    enable_interrupts(INT_RDA);      //Habilita interrupción por recepción RS23    
2D68:  BSF    F9D.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2D6A:  MOVLW  85
2D6C:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2D6E:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN3); 
2D70:  MOVF   FC1,W
2D72:  ANDLW  C0
2D74:  IORLW  0B
2D76:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2D78:  BCF    FC0.0
2D7A:  BSF    FC0.1
2D7C:  BCF    FC0.2
2D7E:  BSF    FC0.7
2D80:  BSF    FC2.0
....................    sensores(0); 
2D82:  CLRF   x3A
2D84:  MOVLB  0
2D86:  GOTO   114C
....................    output_d(0);    
2D8A:  CLRF   F95
2D8C:  CLRF   F8C
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
2D8E:  MOVFF  FF2,53A
2D92:  BCF    FF2.7
2D94:  CLRF   FA9
2D96:  BCF    FA6.6
2D98:  BCF    FA6.7
2D9A:  BSF    FA6.0
2D9C:  MOVF   FA8,W
2D9E:  MOVLB  5
2DA0:  BTFSC  x3A.7
2DA2:  BSF    FF2.7
2DA4:  MOVLB  4
2DA6:  MOVWF  xA8
2DA8:  MOVFF  FF2,53A
2DAC:  BCF    FF2.7
2DAE:  MOVLW  01
2DB0:  MOVWF  FA9
2DB2:  BCF    FA6.6
2DB4:  BCF    FA6.7
2DB6:  BSF    FA6.0
2DB8:  MOVF   FA8,W
2DBA:  MOVLB  5
2DBC:  BTFSC  x3A.7
2DBE:  BSF    FF2.7
2DC0:  MOVLB  4
2DC2:  MOVWF  xA9
2DC4:  MOVFF  FF2,53A
2DC8:  BCF    FF2.7
2DCA:  MOVLW  02
2DCC:  MOVWF  FA9
2DCE:  BCF    FA6.6
2DD0:  BCF    FA6.7
2DD2:  BSF    FA6.0
2DD4:  MOVF   FA8,W
2DD6:  MOVLB  5
2DD8:  BTFSC  x3A.7
2DDA:  BSF    FF2.7
2DDC:  MOVLB  4
2DDE:  MOVWF  xAA
2DE0:  MOVFF  FF2,53A
2DE4:  BCF    FF2.7
2DE6:  MOVLW  03
2DE8:  MOVWF  FA9
2DEA:  BCF    FA6.6
2DEC:  BCF    FA6.7
2DEE:  BSF    FA6.0
2DF0:  MOVF   FA8,W
2DF2:  MOVLB  5
2DF4:  BTFSC  x3A.7
2DF6:  BSF    FF2.7
2DF8:  MOVLB  4
2DFA:  MOVWF  xAB
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
2DFC:  MOVFF  FF2,53A
2E00:  BCF    FF2.7
2E02:  MOVLW  04
2E04:  MOVWF  FA9
2E06:  BCF    FA6.6
2E08:  BCF    FA6.7
2E0A:  BSF    FA6.0
2E0C:  MOVF   FA8,W
2E0E:  MOVLB  5
2E10:  BTFSC  x3A.7
2E12:  BSF    FF2.7
2E14:  MOVLB  4
2E16:  MOVWF  xB0
2E18:  MOVFF  FF2,53A
2E1C:  BCF    FF2.7
2E1E:  MOVLW  05
2E20:  MOVWF  FA9
2E22:  BCF    FA6.6
2E24:  BCF    FA6.7
2E26:  BSF    FA6.0
2E28:  MOVF   FA8,W
2E2A:  MOVLB  5
2E2C:  BTFSC  x3A.7
2E2E:  BSF    FF2.7
2E30:  MOVLB  4
2E32:  MOVWF  xB1
2E34:  MOVFF  FF2,53A
2E38:  BCF    FF2.7
2E3A:  MOVLW  06
2E3C:  MOVWF  FA9
2E3E:  BCF    FA6.6
2E40:  BCF    FA6.7
2E42:  BSF    FA6.0
2E44:  MOVF   FA8,W
2E46:  MOVLB  5
2E48:  BTFSC  x3A.7
2E4A:  BSF    FF2.7
2E4C:  MOVLB  4
2E4E:  MOVWF  xB2
2E50:  MOVFF  FF2,53A
2E54:  BCF    FF2.7
2E56:  MOVLW  07
2E58:  MOVWF  FA9
2E5A:  BCF    FA6.6
2E5C:  BCF    FA6.7
2E5E:  BSF    FA6.0
2E60:  MOVF   FA8,W
2E62:  MOVLB  5
2E64:  BTFSC  x3A.7
2E66:  BSF    FF2.7
2E68:  MOVLB  4
2E6A:  MOVWF  xB3
2E6C:  MOVFF  FF2,53A
2E70:  BCF    FF2.7
2E72:  MOVLW  08
2E74:  MOVWF  FA9
2E76:  BCF    FA6.6
2E78:  BCF    FA6.7
2E7A:  BSF    FA6.0
2E7C:  MOVF   FA8,W
2E7E:  MOVLB  5
2E80:  BTFSC  x3A.7
2E82:  BSF    FF2.7
2E84:  MOVLB  4
2E86:  MOVWF  x8E
....................    Nivel=read_eeprom(9); 
2E88:  MOVFF  FF2,53A
2E8C:  BCF    FF2.7
2E8E:  MOVLW  09
2E90:  MOVWF  FA9
2E92:  BCF    FA6.6
2E94:  BCF    FA6.7
2E96:  BSF    FA6.0
2E98:  MOVF   FA8,W
2E9A:  MOVLB  5
2E9C:  BTFSC  x3A.7
2E9E:  BSF    FF2.7
2EA0:  MOVLB  4
2EA2:  CLRF   x9D
2EA4:  MOVWF  x9C
....................    Password[0]=read_eeprom(10);Password[1]=read_eeprom(11);Password[2]=read_eeprom(12);Password[3]=read_eeprom(13); 
2EA6:  MOVFF  FF2,53A
2EAA:  BCF    FF2.7
2EAC:  MOVLW  0A
2EAE:  MOVWF  FA9
2EB0:  BCF    FA6.6
2EB2:  BCF    FA6.7
2EB4:  BSF    FA6.0
2EB6:  MOVF   FA8,W
2EB8:  MOVLB  5
2EBA:  BTFSC  x3A.7
2EBC:  BSF    FF2.7
2EBE:  MOVLB  4
2EC0:  MOVWF  xB8
2EC2:  MOVFF  FF2,53A
2EC6:  BCF    FF2.7
2EC8:  MOVLW  0B
2ECA:  MOVWF  FA9
2ECC:  BCF    FA6.6
2ECE:  BCF    FA6.7
2ED0:  BSF    FA6.0
2ED2:  MOVF   FA8,W
2ED4:  MOVLB  5
2ED6:  BTFSC  x3A.7
2ED8:  BSF    FF2.7
2EDA:  MOVLB  4
2EDC:  MOVWF  xB9
2EDE:  MOVFF  FF2,53A
2EE2:  BCF    FF2.7
2EE4:  MOVLW  0C
2EE6:  MOVWF  FA9
2EE8:  BCF    FA6.6
2EEA:  BCF    FA6.7
2EEC:  BSF    FA6.0
2EEE:  MOVF   FA8,W
2EF0:  MOVLB  5
2EF2:  BTFSC  x3A.7
2EF4:  BSF    FF2.7
2EF6:  MOVLB  4
2EF8:  MOVWF  xBA
2EFA:  MOVFF  FF2,53A
2EFE:  BCF    FF2.7
2F00:  MOVLW  0D
2F02:  MOVWF  FA9
2F04:  BCF    FA6.6
2F06:  BCF    FA6.7
2F08:  BSF    FA6.0
2F0A:  MOVF   FA8,W
2F0C:  MOVLB  5
2F0E:  BTFSC  x3A.7
2F10:  BSF    FF2.7
2F12:  MOVLB  4
2F14:  MOVWF  xBB
....................    enable_interrupts(global); 
2F16:  MOVLW  C0
2F18:  IORWF  FF2,F
....................    //Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12);Ajuste=read_eeprom(13);Ajusten=read_eeprom(14); 
....................    //Ganancia2=read_eeprom(15);Minutos=read_eeprom(20);  
....................     
....................    glcd_init(ON);             //Inicializa la glcd 
2F1A:  MOVLW  01
2F1C:  MOVLB  5
2F1E:  MOVWF  x3A
2F20:  MOVLB  0
2F22:  GOTO   12F6
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2F26:  MOVLB  5
2F28:  CLRF   x3B
2F2A:  MOVLB  0
2F2C:  CALL   11E4
....................    strcpy(Menus.Letra,"JP Inglobal"); 
2F30:  MOVLW  05
2F32:  MOVWF  FEA
2F34:  MOVLW  1A
2F36:  MOVWF  FE9
2F38:  MOVFF  FF2,53A
2F3C:  BCF    FF2.7
2F3E:  MOVLW  00
2F40:  CALL   06E6
2F44:  TBLRD*-
2F46:  TBLRD*+
2F48:  MOVF   FF5,W
2F4A:  MOVWF  FEE
2F4C:  IORLW  00
2F4E:  BNZ   2F46
2F50:  MOVLB  5
2F52:  BTFSC  x3A.7
2F54:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,0,0,2);      
2F56:  MOVLW  05
2F58:  MOVWF  x3B
2F5A:  MOVLW  1A
2F5C:  MOVWF  x3A
2F5E:  CLRF   x3C
2F60:  CLRF   x3D
2F62:  CLRF   x3E
2F64:  MOVLW  02
2F66:  MOVWF  x3F
2F68:  MOVLB  0
2F6A:  CALL   1814
....................    strcpy(Menus.Letra,"Autoclave Horizontal"); 
2F6E:  MOVLW  05
2F70:  MOVWF  FEA
2F72:  MOVLW  1A
2F74:  MOVWF  FE9
2F76:  MOVFF  FF2,53A
2F7A:  BCF    FF2.7
2F7C:  MOVLW  00
2F7E:  CALL   070C
2F82:  TBLRD*-
2F84:  TBLRD*+
2F86:  MOVF   FF5,W
2F88:  MOVWF  FEE
2F8A:  IORLW  00
2F8C:  BNZ   2F84
2F8E:  MOVLB  5
2F90:  BTFSC  x3A.7
2F92:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,20,0,1);        
2F94:  MOVLW  05
2F96:  MOVWF  x3B
2F98:  MOVLW  1A
2F9A:  MOVWF  x3A
2F9C:  CLRF   x3C
2F9E:  MOVLW  14
2FA0:  MOVWF  x3D
2FA2:  CLRF   x3E
2FA4:  MOVLW  01
2FA6:  MOVWF  x3F
2FA8:  MOVLB  0
2FAA:  CALL   1814
....................    strcpy(Menus.Letra," 110 Litros  "); 
2FAE:  MOVLW  05
2FB0:  MOVWF  FEA
2FB2:  MOVLW  1A
2FB4:  MOVWF  FE9
2FB6:  MOVFF  FF2,53A
2FBA:  BCF    FF2.7
2FBC:  MOVLW  00
2FBE:  CALL   073C
2FC2:  TBLRD*-
2FC4:  TBLRD*+
2FC6:  MOVF   FF5,W
2FC8:  MOVWF  FEE
2FCA:  IORLW  00
2FCC:  BNZ   2FC4
2FCE:  MOVLB  5
2FD0:  BTFSC  x3A.7
2FD2:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,35,0,2); 
2FD4:  MOVLW  05
2FD6:  MOVWF  x3B
2FD8:  MOVLW  1A
2FDA:  MOVWF  x3A
2FDC:  CLRF   x3C
2FDE:  MOVLW  23
2FE0:  MOVWF  x3D
2FE2:  CLRF   x3E
2FE4:  MOVLW  02
2FE6:  MOVWF  x3F
2FE8:  MOVLB  0
2FEA:  CALL   1814
....................    delay_ms(1000); 
2FEE:  MOVLW  04
2FF0:  MOVLB  5
2FF2:  MOVWF  x3A
2FF4:  MOVLW  FA
2FF6:  MOVWF  x3F
2FF8:  MOVLB  0
2FFA:  CALL   10EC
2FFE:  MOVLB  5
3000:  DECFSZ x3A,F
3002:  BRA    2FF4
....................    delay_ms(1000); 
3004:  MOVLW  04
3006:  MOVWF  x3A
3008:  MOVLW  FA
300A:  MOVWF  x3F
300C:  MOVLB  0
300E:  CALL   10EC
3012:  MOVLB  5
3014:  DECFSZ x3A,F
3016:  BRA    3008
....................     
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
3018:  CLRF   x3B
301A:  MOVLB  0
301C:  CALL   11E4
....................    displayContrasena(Contrasena[0],20,30,1); 
3020:  MOVFF  4B4,53C
3024:  MOVLW  14
3026:  MOVLB  5
3028:  MOVWF  x3D
302A:  MOVLW  1E
302C:  MOVWF  x3E
302E:  MOVLW  01
3030:  MOVWF  x3F
3032:  MOVLB  0
3034:  CALL   1A3A
....................    displayContrasena(Contrasena[1],40,30,0); 
3038:  MOVFF  4B5,53C
303C:  MOVLW  28
303E:  MOVLB  5
3040:  MOVWF  x3D
3042:  MOVLW  1E
3044:  MOVWF  x3E
3046:  CLRF   x3F
3048:  MOVLB  0
304A:  CALL   1A3A
....................    displayContrasena(Contrasena[2],60,30,0); 
304E:  MOVFF  4B6,53C
3052:  MOVLW  3C
3054:  MOVLB  5
3056:  MOVWF  x3D
3058:  MOVLW  1E
305A:  MOVWF  x3E
305C:  CLRF   x3F
305E:  MOVLB  0
3060:  CALL   1A3A
....................    displayContrasena(Contrasena[3],80,30,0); 
3064:  MOVFF  4B7,53C
3068:  MOVLW  50
306A:  MOVLB  5
306C:  MOVWF  x3D
306E:  MOVLW  1E
3070:  MOVWF  x3E
3072:  CLRF   x3F
3074:  MOVLB  0
3076:  CALL   1A3A
....................    EnviarCodigo(); 
307A:  CALL   1AFA
....................    delay_ms(500); 
307E:  MOVLW  02
3080:  MOVLB  5
3082:  MOVWF  x3A
3084:  MOVLW  FA
3086:  MOVWF  x3F
3088:  MOVLB  0
308A:  CALL   10EC
308E:  MOVLB  5
3090:  DECFSZ x3A,F
3092:  BRA    3084
....................    Determina(); 
3094:  MOVLB  0
3096:  CALL   1F52
....................    delay_ms(500); 
309A:  MOVLW  02
309C:  MOVLB  5
309E:  MOVWF  x3A
30A0:  MOVLW  FA
30A2:  MOVWF  x3F
30A4:  MOVLB  0
30A6:  CALL   10EC
30AA:  MOVLB  5
30AC:  DECFSZ x3A,F
30AE:  BRA    30A0
....................    Parada=1; 
30B0:  MOVLW  01
30B2:  MOVLB  4
30B4:  MOVWF  x71
....................    while(true) 
....................    { 
....................       glcd_update(); 
30B6:  MOVLB  0
30B8:  CALL   123E
....................       if(CadenaRecibida==1) 
30BC:  MOVLB  4
30BE:  BTFSS  x7D.3
30C0:  BRA    30D0
....................       { 
....................          Determina(); 
30C2:  MOVLB  0
30C4:  CALL   1F52
....................          EnviarCodigo(); 
30C8:  CALL   1AFA
....................          CadenaRecibida=0; 
30CC:  MOVLB  4
30CE:  BCF    x7D.3
....................       } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
30D0:  MOVF   x89,F
30D2:  BTFSS  FD8.2
30D4:  BRA    366A
....................        
....................       strcpy(Menus.Letra,"Clave"); 
30D6:  MOVLW  05
30D8:  MOVWF  FEA
30DA:  MOVLW  1A
30DC:  MOVWF  FE9
30DE:  MOVFF  FF2,53A
30E2:  BCF    FF2.7
30E4:  MOVLW  00
30E6:  MOVLB  0
30E8:  CALL   0764
30EC:  TBLRD*-
30EE:  TBLRD*+
30F0:  MOVF   FF5,W
30F2:  MOVWF  FEE
30F4:  IORLW  00
30F6:  BNZ   30EE
30F8:  MOVLB  5
30FA:  BTFSC  x3A.7
30FC:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
30FE:  MOVLW  05
3100:  MOVWF  x3B
3102:  MOVLW  1A
3104:  MOVWF  x3A
3106:  MOVLW  1E
3108:  MOVWF  x3C
310A:  CLRF   x3D
310C:  MOVLW  01
310E:  MOVWF  x3E
3110:  MOVLW  02
3112:  MOVWF  x3F
3114:  MOVLB  0
3116:  CALL   1814
....................        
....................       if(UP)//Si oprime hacia arriba 
311A:  BSF    F92.5
311C:  BTFSS  F80.5
311E:  BRA    31F6
....................       { 
....................          if(Flanco == 0) 
3120:  MOVLB  4
3122:  BTFSC  x7C.0
3124:  BRA    31F4
....................          { 
....................             Flanco = 1;delay_ms(30); 
3126:  BSF    x7C.0
3128:  MOVLW  1E
312A:  MOVLB  5
312C:  MOVWF  x3F
312E:  MOVLB  0
3130:  CALL   10EC
....................             for(i=1;i<=4;i++) 
3134:  MOVLW  01
3136:  MOVLB  4
3138:  MOVWF  x8D
313A:  MOVF   x8D,W
313C:  SUBLW  04
313E:  BNC   31F4
....................             { 
....................                if(unidad==i) 
3140:  MOVF   x8D,W
3142:  SUBWF  x8A,W
3144:  BNZ   31BC
....................                { 
....................                   Contrasena[i-1]++; 
3146:  MOVLW  01
3148:  SUBWF  x8D,W
314A:  CLRF   03
314C:  ADDLW  B4
314E:  MOVWF  FE9
3150:  MOVLW  04
3152:  ADDWFC 03,W
3154:  MOVWF  FEA
3156:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
3158:  MOVLW  01
315A:  SUBWF  x8D,W
315C:  CLRF   03
315E:  ADDLW  B4
3160:  MOVWF  FE9
3162:  MOVLW  04
3164:  ADDWFC 03,W
3166:  MOVWF  FEA
3168:  BTFSC  FEF.7
316A:  BRA    3184
316C:  MOVF   FEF,W
316E:  SUBLW  09
3170:  BC    3184
....................                   { 
....................                      Contrasena[i-1]=0; 
3172:  MOVLW  01
3174:  SUBWF  x8D,W
3176:  CLRF   03
3178:  ADDLW  B4
317A:  MOVWF  FE9
317C:  MOVLW  04
317E:  ADDWFC 03,W
3180:  MOVWF  FEA
3182:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
3184:  MOVLW  01
3186:  SUBWF  x8D,W
3188:  CLRF   03
318A:  ADDLW  B4
318C:  MOVWF  FE9
318E:  MOVLW  04
3190:  ADDWFC 03,W
3192:  MOVWF  FEA
3194:  MOVFF  FEF,53A
3198:  MOVF   x8D,W
319A:  MULLW  14
319C:  MOVFF  FF3,53B
31A0:  MOVLB  5
31A2:  MOVFF  53A,53C
31A6:  MOVFF  53B,53D
31AA:  MOVLW  1E
31AC:  MOVWF  x3E
31AE:  MOVLW  01
31B0:  MOVWF  x3F
31B2:  MOVLB  0
31B4:  CALL   1A3A
....................                } 
....................                else 
31B8:  BRA    31EE
31BA:  MOVLB  4
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
31BC:  MOVLW  01
31BE:  SUBWF  x8D,W
31C0:  CLRF   03
31C2:  ADDLW  B4
31C4:  MOVWF  FE9
31C6:  MOVLW  04
31C8:  ADDWFC 03,W
31CA:  MOVWF  FEA
31CC:  MOVFF  FEF,53A
31D0:  MOVF   x8D,W
31D2:  MULLW  14
31D4:  MOVFF  FF3,53B
31D8:  MOVLB  5
31DA:  MOVFF  53A,53C
31DE:  MOVFF  53B,53D
31E2:  MOVLW  1E
31E4:  MOVWF  x3E
31E6:  CLRF   x3F
31E8:  MOVLB  0
31EA:  CALL   1A3A
....................                } 
....................             } 
31EE:  MOVLB  4
31F0:  INCF   x8D,F
31F2:  BRA    313A
....................          } 
....................       } 
....................          else 
31F4:  BRA    31FA
....................             {Flanco = 0;} 
31F6:  MOVLB  4
31F8:  BCF    x7C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31FA:  BSF    F96.0
31FC:  BTFSS  F84.0
31FE:  BRA    32D2
....................       { 
....................          if(Flanco2 == 0) 
3200:  BTFSC  x7C.2
3202:  BRA    32D0
....................             {Flanco2 = 1;delay_ms(30); 
3204:  BSF    x7C.2
3206:  MOVLW  1E
3208:  MOVLB  5
320A:  MOVWF  x3F
320C:  MOVLB  0
320E:  CALL   10EC
....................                for(i=1;i<=4;i++) 
3212:  MOVLW  01
3214:  MOVLB  4
3216:  MOVWF  x8D
3218:  MOVF   x8D,W
321A:  SUBLW  04
321C:  BNC   32D0
....................                { 
....................                   if(unidad==i) 
321E:  MOVF   x8D,W
3220:  SUBWF  x8A,W
3222:  BNZ   3298
....................                   {Contrasena[i-1]--;  
3224:  MOVLW  01
3226:  SUBWF  x8D,W
3228:  CLRF   03
322A:  ADDLW  B4
322C:  MOVWF  FE9
322E:  MOVLW  04
3230:  ADDWFC 03,W
3232:  MOVWF  FEA
3234:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
3236:  MOVLW  01
3238:  SUBWF  x8D,W
323A:  CLRF   03
323C:  ADDLW  B4
323E:  MOVWF  FE9
3240:  MOVLW  04
3242:  ADDWFC 03,W
3244:  MOVWF  FEA
3246:  BTFSC  FEF.7
3248:  BRA    324C
324A:  BRA    3260
....................                         {Contrasena[i-1]=9;} 
324C:  MOVLW  01
324E:  SUBWF  x8D,W
3250:  CLRF   03
3252:  ADDLW  B4
3254:  MOVWF  FE9
3256:  MOVLW  04
3258:  ADDWFC 03,W
325A:  MOVWF  FEA
325C:  MOVLW  09
325E:  MOVWF  FEF
....................                    displayContrasena(Contrasena[i-1],i*20,30,1);} 
3260:  MOVLW  01
3262:  SUBWF  x8D,W
3264:  CLRF   03
3266:  ADDLW  B4
3268:  MOVWF  FE9
326A:  MOVLW  04
326C:  ADDWFC 03,W
326E:  MOVWF  FEA
3270:  MOVFF  FEF,53A
3274:  MOVF   x8D,W
3276:  MULLW  14
3278:  MOVFF  FF3,53B
327C:  MOVLB  5
327E:  MOVFF  53A,53C
3282:  MOVFF  53B,53D
3286:  MOVLW  1E
3288:  MOVWF  x3E
328A:  MOVLW  01
328C:  MOVWF  x3F
328E:  MOVLB  0
3290:  CALL   1A3A
....................                   else 
3294:  BRA    32CA
3296:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
3298:  MOVLW  01
329A:  SUBWF  x8D,W
329C:  CLRF   03
329E:  ADDLW  B4
32A0:  MOVWF  FE9
32A2:  MOVLW  04
32A4:  ADDWFC 03,W
32A6:  MOVWF  FEA
32A8:  MOVFF  FEF,53A
32AC:  MOVF   x8D,W
32AE:  MULLW  14
32B0:  MOVFF  FF3,53B
32B4:  MOVLB  5
32B6:  MOVFF  53A,53C
32BA:  MOVFF  53B,53D
32BE:  MOVLW  1E
32C0:  MOVWF  x3E
32C2:  CLRF   x3F
32C4:  MOVLB  0
32C6:  CALL   1A3A
....................                }       
32CA:  MOVLB  4
32CC:  INCF   x8D,F
32CE:  BRA    3218
....................             }      
....................       } 
....................          else 
32D0:  BRA    32D4
....................             {Flanco2 = 0;}   
32D2:  BCF    x7C.2
....................              
....................       if(RIGHT)//Si oprime RIGHT 
32D4:  BSF    F96.1
32D6:  BTFSS  F84.1
32D8:  BRA    3372
....................       { 
....................          if(Flanco1 == 0) 
32DA:  BTFSC  x7C.1
32DC:  BRA    3370
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
32DE:  BSF    x7C.1
32E0:  MOVLW  1E
32E2:  MOVLB  5
32E4:  MOVWF  x3F
32E6:  MOVLB  0
32E8:  CALL   10EC
32EC:  MOVLB  4
32EE:  INCF   x8A,F
....................                for(i=1;i<=4;i++) 
32F0:  MOVLW  01
32F2:  MOVWF  x8D
32F4:  MOVF   x8D,W
32F6:  SUBLW  04
32F8:  BNC   3370
....................                { 
....................                   if(unidad==i) 
32FA:  MOVF   x8D,W
32FC:  SUBWF  x8A,W
32FE:  BNZ   3338
....................                   {displayContrasena(Contrasena[i-1],i*20,30,1);} 
3300:  MOVLW  01
3302:  SUBWF  x8D,W
3304:  CLRF   03
3306:  ADDLW  B4
3308:  MOVWF  FE9
330A:  MOVLW  04
330C:  ADDWFC 03,W
330E:  MOVWF  FEA
3310:  MOVFF  FEF,53A
3314:  MOVF   x8D,W
3316:  MULLW  14
3318:  MOVFF  FF3,53B
331C:  MOVLB  5
331E:  MOVFF  53A,53C
3322:  MOVFF  53B,53D
3326:  MOVLW  1E
3328:  MOVWF  x3E
332A:  MOVLW  01
332C:  MOVWF  x3F
332E:  MOVLB  0
3330:  CALL   1A3A
....................                   else 
3334:  BRA    336A
3336:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
3338:  MOVLW  01
333A:  SUBWF  x8D,W
333C:  CLRF   03
333E:  ADDLW  B4
3340:  MOVWF  FE9
3342:  MOVLW  04
3344:  ADDWFC 03,W
3346:  MOVWF  FEA
3348:  MOVFF  FEF,53A
334C:  MOVF   x8D,W
334E:  MULLW  14
3350:  MOVFF  FF3,53B
3354:  MOVLB  5
3356:  MOVFF  53A,53C
335A:  MOVFF  53B,53D
335E:  MOVLW  1E
3360:  MOVWF  x3E
3362:  CLRF   x3F
3364:  MOVLB  0
3366:  CALL   1A3A
....................                } 
336A:  MOVLB  4
336C:  INCF   x8D,F
336E:  BRA    32F4
....................             } 
....................       } 
....................          else 
3370:  BRA    3374
....................             {Flanco1 = 0;}   
3372:  BCF    x7C.1
....................      
....................       if(unidad>4) 
3374:  MOVF   x8A,W
3376:  SUBLW  04
3378:  BTFSC  FD8.0
337A:  BRA    366A
....................       {glcd_fillScreen(OFF);unidad=4; 
337C:  MOVLB  5
337E:  CLRF   x3B
3380:  MOVLB  0
3382:  CALL   11E4
3386:  MOVLW  04
3388:  MOVLB  4
338A:  MOVWF  x8A
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
338C:  MOVF   xB4,W
338E:  SUBLW  03
3390:  BNZ   3478
3392:  MOVF   xB5,W
3394:  SUBLW  08
3396:  BNZ   3478
3398:  MOVF   xB6,W
339A:  SUBLW  09
339C:  BNZ   3478
339E:  MOVF   xB7,W
33A0:  SUBLW  02
33A2:  BNZ   3478
....................             {write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
33A4:  MOVLW  0A
33A6:  MOVWF  FA9
33A8:  CLRF   FA8
33AA:  BCF    FA6.6
33AC:  BCF    FA6.7
33AE:  BSF    FA6.2
33B0:  MOVF   FF2,W
33B2:  MOVWF  00
33B4:  BCF    FF2.7
33B6:  MOVLB  F
33B8:  MOVLW  55
33BA:  MOVWF  FA7
33BC:  MOVLW  AA
33BE:  MOVWF  FA7
33C0:  BSF    FA6.1
33C2:  BTFSC  FA6.1
33C4:  BRA    33C2
33C6:  BCF    FA6.2
33C8:  MOVF   00,W
33CA:  IORWF  FF2,F
33CC:  MOVLW  14
33CE:  MOVLB  5
33D0:  MOVWF  x3F
33D2:  MOVLB  0
33D4:  CALL   10EC
33D8:  MOVLW  0B
33DA:  MOVWF  FA9
33DC:  CLRF   FA8
33DE:  BCF    FA6.6
33E0:  BCF    FA6.7
33E2:  BSF    FA6.2
33E4:  MOVF   FF2,W
33E6:  MOVWF  00
33E8:  BCF    FF2.7
33EA:  MOVLB  F
33EC:  MOVLW  55
33EE:  MOVWF  FA7
33F0:  MOVLW  AA
33F2:  MOVWF  FA7
33F4:  BSF    FA6.1
33F6:  BTFSC  FA6.1
33F8:  BRA    33F6
33FA:  BCF    FA6.2
33FC:  MOVF   00,W
33FE:  IORWF  FF2,F
3400:  MOVLW  14
3402:  MOVLB  5
3404:  MOVWF  x3F
3406:  MOVLB  0
3408:  CALL   10EC
....................              write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
340C:  MOVLW  0C
340E:  MOVWF  FA9
3410:  CLRF   FA8
3412:  BCF    FA6.6
3414:  BCF    FA6.7
3416:  BSF    FA6.2
3418:  MOVF   FF2,W
341A:  MOVWF  00
341C:  BCF    FF2.7
341E:  MOVLB  F
3420:  MOVLW  55
3422:  MOVWF  FA7
3424:  MOVLW  AA
3426:  MOVWF  FA7
3428:  BSF    FA6.1
342A:  BTFSC  FA6.1
342C:  BRA    342A
342E:  BCF    FA6.2
3430:  MOVF   00,W
3432:  IORWF  FF2,F
3434:  MOVLW  14
3436:  MOVLB  5
3438:  MOVWF  x3F
343A:  MOVLB  0
343C:  CALL   10EC
3440:  MOVLW  0D
3442:  MOVWF  FA9
3444:  CLRF   FA8
3446:  BCF    FA6.6
3448:  BCF    FA6.7
344A:  BSF    FA6.2
344C:  MOVF   FF2,W
344E:  MOVWF  00
3450:  BCF    FF2.7
3452:  MOVLB  F
3454:  MOVLW  55
3456:  MOVWF  FA7
3458:  MOVLW  AA
345A:  MOVWF  FA7
345C:  BSF    FA6.1
345E:  BTFSC  FA6.1
3460:  BRA    345E
3462:  BCF    FA6.2
3464:  MOVF   00,W
3466:  IORWF  FF2,F
3468:  MOVLW  14
346A:  MOVLB  5
346C:  MOVWF  x3F
346E:  MOVLB  0
3470:  CALL   10EC
....................              reset_cpu();}         
3474:  RESET
3476:  MOVLB  4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
3478:  MOVF   xB8,W
347A:  SUBWF  xB4,W
347C:  BNZ   354E
347E:  MOVF   xB9,W
3480:  SUBWF  xB5,W
3482:  BNZ   354E
3484:  MOVF   xBA,W
3486:  SUBWF  xB6,W
3488:  BNZ   354E
348A:  MOVF   xBB,W
348C:  SUBWF  xB7,W
348E:  BNZ   354E
....................          { 
....................             glcd_fillScreen(OFF); 
3490:  MOVLB  5
3492:  CLRF   x3B
3494:  MOVLB  0
3496:  CALL   11E4
....................             strcpy(Menus.Letra,"Clave"); 
349A:  MOVLW  05
349C:  MOVWF  FEA
349E:  MOVLW  1A
34A0:  MOVWF  FE9
34A2:  MOVFF  FF2,53A
34A6:  BCF    FF2.7
34A8:  MOVLW  00
34AA:  CALL   0764
34AE:  TBLRD*-
34B0:  TBLRD*+
34B2:  MOVF   FF5,W
34B4:  MOVWF  FEE
34B6:  IORLW  00
34B8:  BNZ   34B0
34BA:  MOVLB  5
34BC:  BTFSC  x3A.7
34BE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
34C0:  MOVLW  05
34C2:  MOVWF  x3B
34C4:  MOVLW  1A
34C6:  MOVWF  x3A
34C8:  MOVLW  1E
34CA:  MOVWF  x3C
34CC:  CLRF   x3D
34CE:  CLRF   x3E
34D0:  MOVLW  02
34D2:  MOVWF  x3F
34D4:  MOVLB  0
34D6:  CALL   1814
....................             strcpy(Menus.Letra,"Correcta"); 
34DA:  MOVLW  05
34DC:  MOVWF  FEA
34DE:  MOVLW  1A
34E0:  MOVWF  FE9
34E2:  MOVFF  FF2,53A
34E6:  BCF    FF2.7
34E8:  MOVLW  00
34EA:  CALL   0784
34EE:  TBLRD*-
34F0:  TBLRD*+
34F2:  MOVF   FF5,W
34F4:  MOVWF  FEE
34F6:  IORLW  00
34F8:  BNZ   34F0
34FA:  MOVLB  5
34FC:  BTFSC  x3A.7
34FE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
3500:  MOVLW  05
3502:  MOVWF  x3B
3504:  MOVLW  1A
3506:  MOVWF  x3A
3508:  MOVLW  0F
350A:  MOVWF  x3C
350C:  MOVLW  1E
350E:  MOVWF  x3D
3510:  CLRF   x3E
3512:  MOVLW  02
3514:  MOVWF  x3F
3516:  MOVLB  0
3518:  CALL   1814
....................             Menu=1;glcd_update();delay_ms(1000); 
351C:  MOVLW  01
351E:  MOVLB  4
3520:  MOVWF  x89
3522:  MOVLB  0
3524:  CALL   123E
3528:  MOVLW  04
352A:  MOVLB  5
352C:  MOVWF  x3A
352E:  MOVLW  FA
3530:  MOVWF  x3F
3532:  MOVLB  0
3534:  CALL   10EC
3538:  MOVLB  5
353A:  DECFSZ x3A,F
353C:  BRA    352E
....................             glcd_fillScreen(OFF);unidad=1; 
353E:  CLRF   x3B
3540:  MOVLB  0
3542:  CALL   11E4
3546:  MOVLW  01
3548:  MOVLB  4
354A:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
354C:  BRA    366A
....................          { 
....................             glcd_fillScreen(OFF); 
354E:  MOVLB  5
3550:  CLRF   x3B
3552:  MOVLB  0
3554:  CALL   11E4
....................             strcpy(Menus.Letra,"Clave"); 
3558:  MOVLW  05
355A:  MOVWF  FEA
355C:  MOVLW  1A
355E:  MOVWF  FE9
3560:  MOVFF  FF2,53A
3564:  BCF    FF2.7
3566:  MOVLW  00
3568:  CALL   0764
356C:  TBLRD*-
356E:  TBLRD*+
3570:  MOVF   FF5,W
3572:  MOVWF  FEE
3574:  IORLW  00
3576:  BNZ   356E
3578:  MOVLB  5
357A:  BTFSC  x3A.7
357C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
357E:  MOVLW  05
3580:  MOVWF  x3B
3582:  MOVLW  1A
3584:  MOVWF  x3A
3586:  MOVLW  1E
3588:  MOVWF  x3C
358A:  CLRF   x3D
358C:  CLRF   x3E
358E:  MOVLW  02
3590:  MOVWF  x3F
3592:  MOVLB  0
3594:  CALL   1814
....................             strcpy(Menus.Letra,"Incorrecta"); 
3598:  MOVLW  05
359A:  MOVWF  FEA
359C:  MOVLW  1A
359E:  MOVWF  FE9
35A0:  MOVFF  FF2,53A
35A4:  BCF    FF2.7
35A6:  MOVLW  00
35A8:  CALL   07A8
35AC:  TBLRD*-
35AE:  TBLRD*+
35B0:  MOVF   FF5,W
35B2:  MOVWF  FEE
35B4:  IORLW  00
35B6:  BNZ   35AE
35B8:  MOVLB  5
35BA:  BTFSC  x3A.7
35BC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
35BE:  MOVLW  05
35C0:  MOVWF  x3B
35C2:  MOVLW  1A
35C4:  MOVWF  x3A
35C6:  CLRF   x3C
35C8:  MOVLW  1E
35CA:  MOVWF  x3D
35CC:  CLRF   x3E
35CE:  MOVLW  02
35D0:  MOVWF  x3F
35D2:  MOVLB  0
35D4:  CALL   1814
....................             Menu=0;glcd_update();delay_ms(1000); 
35D8:  MOVLB  4
35DA:  CLRF   x89
35DC:  MOVLB  0
35DE:  CALL   123E
35E2:  MOVLW  04
35E4:  MOVLB  5
35E6:  MOVWF  x3A
35E8:  MOVLW  FA
35EA:  MOVWF  x3F
35EC:  MOVLB  0
35EE:  CALL   10EC
35F2:  MOVLB  5
35F4:  DECFSZ x3A,F
35F6:  BRA    35E8
....................             glcd_fillScreen(OFF);unidad=1; 
35F8:  CLRF   x3B
35FA:  MOVLB  0
35FC:  CALL   11E4
3600:  MOVLW  01
3602:  MOVLB  4
3604:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
3606:  CLRF   xB4
3608:  CLRF   xB5
360A:  CLRF   xB6
360C:  CLRF   xB7
....................             displayContrasena(Contrasena[0],20,30,1); 
360E:  MOVFF  4B4,53C
3612:  MOVLW  14
3614:  MOVLB  5
3616:  MOVWF  x3D
3618:  MOVLW  1E
361A:  MOVWF  x3E
361C:  MOVLW  01
361E:  MOVWF  x3F
3620:  MOVLB  0
3622:  CALL   1A3A
....................             displayContrasena(Contrasena[1],40,30,0); 
3626:  MOVFF  4B5,53C
362A:  MOVLW  28
362C:  MOVLB  5
362E:  MOVWF  x3D
3630:  MOVLW  1E
3632:  MOVWF  x3E
3634:  CLRF   x3F
3636:  MOVLB  0
3638:  CALL   1A3A
....................             displayContrasena(Contrasena[2],60,30,0); 
363C:  MOVFF  4B6,53C
3640:  MOVLW  3C
3642:  MOVLB  5
3644:  MOVWF  x3D
3646:  MOVLW  1E
3648:  MOVWF  x3E
364A:  CLRF   x3F
364C:  MOVLB  0
364E:  CALL   1A3A
....................             displayContrasena(Contrasena[3],80,30,0); 
3652:  MOVFF  4B7,53C
3656:  MOVLW  50
3658:  MOVLB  5
365A:  MOVWF  x3D
365C:  MOVLW  1E
365E:  MOVWF  x3E
3660:  CLRF   x3F
3662:  MOVLB  0
3664:  CALL   1A3A
3668:  MOVLB  4
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1){ //Menu Principal.       
366A:  DECFSZ x89,W
366C:  BRA    3AA2
....................        
....................       if(visual==1) 
366E:  BTFSS  x7C.4
3670:  BRA    3A28
....................       { 
....................          if(Opcion>6) 
3672:  MOVF   x90,W
3674:  SUBLW  06
3676:  BC    367C
....................          {Opcion=1;} 
3678:  MOVLW  01
367A:  MOVWF  x90
....................          if(Opcion<1) 
367C:  MOVF   x90,F
367E:  BNZ   3684
....................          {Opcion=6;} 
3680:  MOVLW  06
3682:  MOVWF  x90
....................           
....................          strcpy(Menus.Letra,"Menu Principal"); 
3684:  MOVLW  05
3686:  MOVWF  FEA
3688:  MOVLW  1A
368A:  MOVWF  FE9
368C:  MOVFF  FF2,53A
3690:  BCF    FF2.7
3692:  MOVLW  00
3694:  MOVLB  0
3696:  CALL   07CE
369A:  TBLRD*-
369C:  TBLRD*+
369E:  MOVF   FF5,W
36A0:  MOVWF  FEE
36A2:  IORLW  00
36A4:  BNZ   369C
36A6:  MOVLB  5
36A8:  BTFSC  x3A.7
36AA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,1); 
36AC:  MOVLW  05
36AE:  MOVWF  x3B
36B0:  MOVLW  1A
36B2:  MOVWF  x3A
36B4:  MOVLW  1E
36B6:  MOVWF  x3C
36B8:  CLRF   x3D
36BA:  MOVLW  01
36BC:  MOVWF  x3E
36BE:  MOVWF  x3F
36C0:  MOVLB  0
36C2:  CALL   1814
....................        
....................          if(Opcion==1)    
36C6:  MOVLB  4
36C8:  DECFSZ x90,W
36CA:  BRA    3712
....................             {strcpy(Menus.Letra,"Preciclo"); 
36CC:  MOVLW  05
36CE:  MOVWF  FEA
36D0:  MOVLW  1A
36D2:  MOVWF  FE9
36D4:  MOVFF  FF2,53A
36D8:  BCF    FF2.7
36DA:  MOVLW  00
36DC:  MOVLB  0
36DE:  CALL   07F8
36E2:  TBLRD*-
36E4:  TBLRD*+
36E6:  MOVF   FF5,W
36E8:  MOVWF  FEE
36EA:  IORLW  00
36EC:  BNZ   36E4
36EE:  MOVLB  5
36F0:  BTFSC  x3A.7
36F2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,1,1);} 
36F4:  MOVLW  05
36F6:  MOVWF  x3B
36F8:  MOVLW  1A
36FA:  MOVWF  x3A
36FC:  CLRF   x3C
36FE:  MOVLW  0A
3700:  MOVWF  x3D
3702:  MOVLW  01
3704:  MOVWF  x3E
3706:  MOVWF  x3F
3708:  MOVLB  0
370A:  CALL   1814
....................          else 
370E:  BRA    3754
3710:  MOVLB  4
....................             {strcpy(Menus.Letra,"Preciclo"); 
3712:  MOVLW  05
3714:  MOVWF  FEA
3716:  MOVLW  1A
3718:  MOVWF  FE9
371A:  MOVFF  FF2,53A
371E:  BCF    FF2.7
3720:  MOVLW  00
3722:  MOVLB  0
3724:  CALL   07F8
3728:  TBLRD*-
372A:  TBLRD*+
372C:  MOVF   FF5,W
372E:  MOVWF  FEE
3730:  IORLW  00
3732:  BNZ   372A
3734:  MOVLB  5
3736:  BTFSC  x3A.7
3738:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,0,1);} 
373A:  MOVLW  05
373C:  MOVWF  x3B
373E:  MOVLW  1A
3740:  MOVWF  x3A
3742:  CLRF   x3C
3744:  MOVLW  0A
3746:  MOVWF  x3D
3748:  CLRF   x3E
374A:  MOVLW  01
374C:  MOVWF  x3F
374E:  MOVLB  0
3750:  CALL   1814
....................           
....................          if(Opcion==2)    
3754:  MOVLB  4
3756:  MOVF   x90,W
3758:  SUBLW  02
375A:  BNZ   37A2
....................             {strcpy(Menus.Letra,"Liquidos"); 
375C:  MOVLW  05
375E:  MOVWF  FEA
3760:  MOVLW  1A
3762:  MOVWF  FE9
3764:  MOVFF  FF2,53A
3768:  BCF    FF2.7
376A:  MOVLW  00
376C:  MOVLB  0
376E:  CALL   081C
3772:  TBLRD*-
3774:  TBLRD*+
3776:  MOVF   FF5,W
3778:  MOVWF  FEE
377A:  IORLW  00
377C:  BNZ   3774
377E:  MOVLB  5
3780:  BTFSC  x3A.7
3782:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,1,1);} 
3784:  MOVLW  05
3786:  MOVWF  x3B
3788:  MOVLW  1A
378A:  MOVWF  x3A
378C:  CLRF   x3C
378E:  MOVLW  13
3790:  MOVWF  x3D
3792:  MOVLW  01
3794:  MOVWF  x3E
3796:  MOVWF  x3F
3798:  MOVLB  0
379A:  CALL   1814
....................          else 
379E:  BRA    37E4
37A0:  MOVLB  4
....................             {strcpy(Menus.Letra,"Liquidos"); 
37A2:  MOVLW  05
37A4:  MOVWF  FEA
37A6:  MOVLW  1A
37A8:  MOVWF  FE9
37AA:  MOVFF  FF2,53A
37AE:  BCF    FF2.7
37B0:  MOVLW  00
37B2:  MOVLB  0
37B4:  CALL   081C
37B8:  TBLRD*-
37BA:  TBLRD*+
37BC:  MOVF   FF5,W
37BE:  MOVWF  FEE
37C0:  IORLW  00
37C2:  BNZ   37BA
37C4:  MOVLB  5
37C6:  BTFSC  x3A.7
37C8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,0,1);}    
37CA:  MOVLW  05
37CC:  MOVWF  x3B
37CE:  MOVLW  1A
37D0:  MOVWF  x3A
37D2:  CLRF   x3C
37D4:  MOVLW  13
37D6:  MOVWF  x3D
37D8:  CLRF   x3E
37DA:  MOVLW  01
37DC:  MOVWF  x3F
37DE:  MOVLB  0
37E0:  CALL   1814
....................              
....................           if(Opcion==3)    
37E4:  MOVLB  4
37E6:  MOVF   x90,W
37E8:  SUBLW  03
37EA:  BNZ   3832
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
37EC:  MOVLW  05
37EE:  MOVWF  FEA
37F0:  MOVLW  1A
37F2:  MOVWF  FE9
37F4:  MOVFF  FF2,53A
37F8:  BCF    FF2.7
37FA:  MOVLW  00
37FC:  MOVLB  0
37FE:  CALL   0840
3802:  TBLRD*-
3804:  TBLRD*+
3806:  MOVF   FF5,W
3808:  MOVWF  FEE
380A:  IORLW  00
380C:  BNZ   3804
380E:  MOVLB  5
3810:  BTFSC  x3A.7
3812:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,1,1);} 
3814:  MOVLW  05
3816:  MOVWF  x3B
3818:  MOVLW  1A
381A:  MOVWF  x3A
381C:  CLRF   x3C
381E:  MOVLW  1C
3820:  MOVWF  x3D
3822:  MOVLW  01
3824:  MOVWF  x3E
3826:  MOVWF  x3F
3828:  MOVLB  0
382A:  CALL   1814
....................          else 
382E:  BRA    3874
3830:  MOVLB  4
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
3832:  MOVLW  05
3834:  MOVWF  FEA
3836:  MOVLW  1A
3838:  MOVWF  FE9
383A:  MOVFF  FF2,53A
383E:  BCF    FF2.7
3840:  MOVLW  00
3842:  MOVLB  0
3844:  CALL   0840
3848:  TBLRD*-
384A:  TBLRD*+
384C:  MOVF   FF5,W
384E:  MOVWF  FEE
3850:  IORLW  00
3852:  BNZ   384A
3854:  MOVLB  5
3856:  BTFSC  x3A.7
3858:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,0,1);} 
385A:  MOVLW  05
385C:  MOVWF  x3B
385E:  MOVLW  1A
3860:  MOVWF  x3A
3862:  CLRF   x3C
3864:  MOVLW  1C
3866:  MOVWF  x3D
3868:  CLRF   x3E
386A:  MOVLW  01
386C:  MOVWF  x3F
386E:  MOVLB  0
3870:  CALL   1814
....................              
....................          if(Opcion==4)    
3874:  MOVLB  4
3876:  MOVF   x90,W
3878:  SUBLW  04
387A:  BNZ   38C2
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
387C:  MOVLW  05
387E:  MOVWF  FEA
3880:  MOVLW  1A
3882:  MOVWF  FE9
3884:  MOVFF  FF2,53A
3888:  BCF    FF2.7
388A:  MOVLW  00
388C:  MOVLB  0
388E:  CALL   086E
3892:  TBLRD*-
3894:  TBLRD*+
3896:  MOVF   FF5,W
3898:  MOVWF  FEE
389A:  IORLW  00
389C:  BNZ   3894
389E:  MOVLB  5
38A0:  BTFSC  x3A.7
38A2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,1,1);} 
38A4:  MOVLW  05
38A6:  MOVWF  x3B
38A8:  MOVLW  1A
38AA:  MOVWF  x3A
38AC:  CLRF   x3C
38AE:  MOVLW  25
38B0:  MOVWF  x3D
38B2:  MOVLW  01
38B4:  MOVWF  x3E
38B6:  MOVWF  x3F
38B8:  MOVLB  0
38BA:  CALL   1814
....................          else 
38BE:  BRA    3904
38C0:  MOVLB  4
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
38C2:  MOVLW  05
38C4:  MOVWF  FEA
38C6:  MOVLW  1A
38C8:  MOVWF  FE9
38CA:  MOVFF  FF2,53A
38CE:  BCF    FF2.7
38D0:  MOVLW  00
38D2:  MOVLB  0
38D4:  CALL   086E
38D8:  TBLRD*-
38DA:  TBLRD*+
38DC:  MOVF   FF5,W
38DE:  MOVWF  FEE
38E0:  IORLW  00
38E2:  BNZ   38DA
38E4:  MOVLB  5
38E6:  BTFSC  x3A.7
38E8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,0,1);}    
38EA:  MOVLW  05
38EC:  MOVWF  x3B
38EE:  MOVLW  1A
38F0:  MOVWF  x3A
38F2:  CLRF   x3C
38F4:  MOVLW  25
38F6:  MOVWF  x3D
38F8:  CLRF   x3E
38FA:  MOVLW  01
38FC:  MOVWF  x3F
38FE:  MOVLB  0
3900:  CALL   1814
....................              
....................          if(Opcion==5)    
3904:  MOVLB  4
3906:  MOVF   x90,W
3908:  SUBLW  05
390A:  BNZ   3952
....................             {strcpy(Menus.Letra,"Personalizado"); 
390C:  MOVLW  05
390E:  MOVWF  FEA
3910:  MOVLW  1A
3912:  MOVWF  FE9
3914:  MOVFF  FF2,53A
3918:  BCF    FF2.7
391A:  MOVLW  00
391C:  MOVLB  0
391E:  CALL   089E
3922:  TBLRD*-
3924:  TBLRD*+
3926:  MOVF   FF5,W
3928:  MOVWF  FEE
392A:  IORLW  00
392C:  BNZ   3924
392E:  MOVLB  5
3930:  BTFSC  x3A.7
3932:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,1,1);} 
3934:  MOVLW  05
3936:  MOVWF  x3B
3938:  MOVLW  1A
393A:  MOVWF  x3A
393C:  CLRF   x3C
393E:  MOVLW  2E
3940:  MOVWF  x3D
3942:  MOVLW  01
3944:  MOVWF  x3E
3946:  MOVWF  x3F
3948:  MOVLB  0
394A:  CALL   1814
....................          else 
394E:  BRA    3994
3950:  MOVLB  4
....................             {strcpy(Menus.Letra,"Personalizado"); 
3952:  MOVLW  05
3954:  MOVWF  FEA
3956:  MOVLW  1A
3958:  MOVWF  FE9
395A:  MOVFF  FF2,53A
395E:  BCF    FF2.7
3960:  MOVLW  00
3962:  MOVLB  0
3964:  CALL   089E
3968:  TBLRD*-
396A:  TBLRD*+
396C:  MOVF   FF5,W
396E:  MOVWF  FEE
3970:  IORLW  00
3972:  BNZ   396A
3974:  MOVLB  5
3976:  BTFSC  x3A.7
3978:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,0,1);}   
397A:  MOVLW  05
397C:  MOVWF  x3B
397E:  MOVLW  1A
3980:  MOVWF  x3A
3982:  CLRF   x3C
3984:  MOVLW  2E
3986:  MOVWF  x3D
3988:  CLRF   x3E
398A:  MOVLW  01
398C:  MOVWF  x3F
398E:  MOVLB  0
3990:  CALL   1814
....................              
....................          if(Opcion==6)    
3994:  MOVLB  4
3996:  MOVF   x90,W
3998:  SUBLW  06
399A:  BNZ   39E2
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
399C:  MOVLW  05
399E:  MOVWF  FEA
39A0:  MOVLW  1A
39A2:  MOVWF  FE9
39A4:  MOVFF  FF2,53A
39A8:  BCF    FF2.7
39AA:  MOVLW  00
39AC:  MOVLB  0
39AE:  CALL   08C6
39B2:  TBLRD*-
39B4:  TBLRD*+
39B6:  MOVF   FF5,W
39B8:  MOVWF  FEE
39BA:  IORLW  00
39BC:  BNZ   39B4
39BE:  MOVLB  5
39C0:  BTFSC  x3A.7
39C2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,1,1);} 
39C4:  MOVLW  05
39C6:  MOVWF  x3B
39C8:  MOVLW  1A
39CA:  MOVWF  x3A
39CC:  CLRF   x3C
39CE:  MOVLW  37
39D0:  MOVWF  x3D
39D2:  MOVLW  01
39D4:  MOVWF  x3E
39D6:  MOVWF  x3F
39D8:  MOVLB  0
39DA:  CALL   1814
....................          else 
39DE:  BRA    3A24
39E0:  MOVLB  4
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
39E2:  MOVLW  05
39E4:  MOVWF  FEA
39E6:  MOVLW  1A
39E8:  MOVWF  FE9
39EA:  MOVFF  FF2,53A
39EE:  BCF    FF2.7
39F0:  MOVLW  00
39F2:  MOVLB  0
39F4:  CALL   08C6
39F8:  TBLRD*-
39FA:  TBLRD*+
39FC:  MOVF   FF5,W
39FE:  MOVWF  FEE
3A00:  IORLW  00
3A02:  BNZ   39FA
3A04:  MOVLB  5
3A06:  BTFSC  x3A.7
3A08:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,0,1);}      
3A0A:  MOVLW  05
3A0C:  MOVWF  x3B
3A0E:  MOVLW  1A
3A10:  MOVWF  x3A
3A12:  CLRF   x3C
3A14:  MOVLW  37
3A16:  MOVWF  x3D
3A18:  CLRF   x3E
3A1A:  MOVLW  01
3A1C:  MOVWF  x3F
3A1E:  MOVLB  0
3A20:  CALL   1814
....................             visual=0; 
3A24:  MOVLB  4
3A26:  BCF    x7C.4
....................       } 
....................       if(UP)//Si oprime hacia arriba 
3A28:  BSF    F92.5
3A2A:  BTFSS  F80.5
3A2C:  BRA    3A48
....................          {  if(Flanco == 0)  
3A2E:  BTFSC  x7C.0
3A30:  BRA    3A46
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
3A32:  BSF    x7C.0
3A34:  MOVLW  1E
3A36:  MOVLB  5
3A38:  MOVWF  x3F
3A3A:  MOVLB  0
3A3C:  CALL   10EC
3A40:  MOVLB  4
3A42:  DECF   x90,F
3A44:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A46:  BRA    3A4A
....................                {Flanco = 0;} 
3A48:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
3A4A:  BSF    F96.0
3A4C:  BTFSS  F84.0
3A4E:  BRA    3A6A
....................          {  if(Flanco2 == 0)  
3A50:  BTFSC  x7C.2
3A52:  BRA    3A68
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
3A54:  BSF    x7C.2
3A56:  MOVLW  1E
3A58:  MOVLB  5
3A5A:  MOVWF  x3F
3A5C:  MOVLB  0
3A5E:  CALL   10EC
3A62:  MOVLB  4
3A64:  INCF   x90,F
3A66:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
3A68:  BRA    3A6C
....................                {Flanco2 = 0;}   
3A6A:  BCF    x7C.2
....................                 
....................        if(RIGHT)//Si oprime SET 
3A6C:  BSF    F96.1
3A6E:  BTFSS  F84.1
3A70:  BRA    3AA0
....................          {  if(Flanco1 == 0)  
3A72:  BTFSC  x7C.1
3A74:  BRA    3A9E
....................                {Flanco1 = 1;delay_ms(30);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);visual=1; 
3A76:  BSF    x7C.1
3A78:  MOVLW  1E
3A7A:  MOVLB  5
3A7C:  MOVWF  x3F
3A7E:  MOVLB  0
3A80:  CALL   10EC
3A84:  MOVLW  03
3A86:  MOVLB  4
3A88:  ADDWF  x90,W
3A8A:  MOVWF  x89
3A8C:  MOVLW  01
3A8E:  MOVWF  x90
3A90:  MOVLB  5
3A92:  CLRF   x3B
3A94:  MOVLB  0
3A96:  CALL   11E4
3A9A:  MOVLB  4
3A9C:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A9E:  BRA    3AA2
....................                {Flanco1 = 0;}   
3AA0:  BCF    x7C.1
....................          /*       
....................          if(LEFT)//Si oprime boton de Toma. 
....................          {delay_ms(700);Menu=2;glcd_fillscreen(OFF);}*/ 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
.................... //-Sub-Menus de selección de proceso. 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==4){ // Menu de Pre-ciclo 
3AA2:  MOVF   x89,W
3AA4:  SUBLW  04
3AA6:  BTFSS  FD8.2
3AA8:  BRA    3DCE
....................        
....................       if(visual==1) 
3AAA:  BTFSS  x7C.4
3AAC:  BRA    3C00
....................       { 
....................          glcd_imagen(2); //Guante 
3AAE:  MOVLW  02
3AB0:  MOVLB  5
3AB2:  MOVWF  x3A
3AB4:  MOVLB  0
3AB6:  CALL   2040
....................          strcpy(Menus.Letra,"Preciclo"); 
3ABA:  MOVLW  05
3ABC:  MOVWF  FEA
3ABE:  MOVLW  1A
3AC0:  MOVWF  FE9
3AC2:  MOVFF  FF2,53A
3AC6:  BCF    FF2.7
3AC8:  MOVLW  00
3ACA:  CALL   07F8
3ACE:  TBLRD*-
3AD0:  TBLRD*+
3AD2:  MOVF   FF5,W
3AD4:  MOVWF  FEE
3AD6:  IORLW  00
3AD8:  BNZ   3AD0
3ADA:  MOVLB  5
3ADC:  BTFSC  x3A.7
3ADE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3AE0:  MOVLW  05
3AE2:  MOVWF  x3B
3AE4:  MOVLW  1A
3AE6:  MOVWF  x3A
3AE8:  MOVLW  14
3AEA:  MOVWF  x3C
3AEC:  CLRF   x3D
3AEE:  MOVLW  01
3AF0:  MOVWF  x3E
3AF2:  MOVLW  02
3AF4:  MOVWF  x3F
3AF6:  MOVLB  0
3AF8:  CALL   1814
....................          
....................          strcpy(Menus.Letra,"Preciclo"); 
3AFC:  MOVLW  05
3AFE:  MOVWF  FEA
3B00:  MOVLW  1A
3B02:  MOVWF  FE9
3B04:  MOVFF  FF2,53A
3B08:  BCF    FF2.7
3B0A:  MOVLW  00
3B0C:  CALL   07F8
3B10:  TBLRD*-
3B12:  TBLRD*+
3B14:  MOVF   FF5,W
3B16:  MOVWF  FEE
3B18:  IORLW  00
3B1A:  BNZ   3B12
3B1C:  MOVLB  5
3B1E:  BTFSC  x3A.7
3B20:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,0,1); 
3B22:  MOVLW  05
3B24:  MOVWF  x3B
3B26:  MOVLW  1A
3B28:  MOVWF  x3A
3B2A:  MOVLW  07
3B2C:  MOVWF  x3C
3B2E:  MOVLW  37
3B30:  MOVWF  x3D
3B32:  CLRF   x3E
3B34:  MOVLW  01
3B36:  MOVWF  x3F
3B38:  MOVLB  0
3B3A:  CALL   1814
....................           
....................          strcpy(Menus.Letra,"Temperatura:105 C"); 
3B3E:  MOVLW  05
3B40:  MOVWF  FEA
3B42:  MOVLW  1A
3B44:  MOVWF  FE9
3B46:  MOVFF  FF2,53A
3B4A:  BCF    FF2.7
3B4C:  MOVLW  00
3B4E:  CALL   08EE
3B52:  TBLRD*-
3B54:  TBLRD*+
3B56:  MOVF   FF5,W
3B58:  MOVWF  FEE
3B5A:  IORLW  00
3B5C:  BNZ   3B54
3B5E:  MOVLB  5
3B60:  BTFSC  x3A.7
3B62:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3B64:  MOVLW  05
3B66:  MOVWF  x3B
3B68:  MOVLW  1A
3B6A:  MOVWF  x3A
3B6C:  CLRF   x3C
3B6E:  MOVWF  x3D
3B70:  CLRF   x3E
3B72:  MOVLW  01
3B74:  MOVWF  x3F
3B76:  MOVLB  0
3B78:  CALL   1814
....................          strcpy(Menus.Letra,"T. Esterilizacion:5m"); 
3B7C:  MOVLW  05
3B7E:  MOVWF  FEA
3B80:  MOVLW  1A
3B82:  MOVWF  FE9
3B84:  MOVFF  FF2,53A
3B88:  BCF    FF2.7
3B8A:  MOVLW  00
3B8C:  CALL   091A
3B90:  TBLRD*-
3B92:  TBLRD*+
3B94:  MOVF   FF5,W
3B96:  MOVWF  FEE
3B98:  IORLW  00
3B9A:  BNZ   3B92
3B9C:  MOVLB  5
3B9E:  BTFSC  x3A.7
3BA0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3BA2:  MOVLW  05
3BA4:  MOVWF  x3B
3BA6:  MOVLW  1A
3BA8:  MOVWF  x3A
3BAA:  CLRF   x3C
3BAC:  MOVLW  24
3BAE:  MOVWF  x3D
3BB0:  CLRF   x3E
3BB2:  MOVLW  01
3BB4:  MOVWF  x3F
3BB6:  MOVLB  0
3BB8:  CALL   1814
....................          strcpy(Menus.Letra,"T. Secado= 5m"); 
3BBC:  MOVLW  05
3BBE:  MOVWF  FEA
3BC0:  MOVLW  1A
3BC2:  MOVWF  FE9
3BC4:  MOVFF  FF2,53A
3BC8:  BCF    FF2.7
3BCA:  MOVLW  00
3BCC:  CALL   094A
3BD0:  TBLRD*-
3BD2:  TBLRD*+
3BD4:  MOVF   FF5,W
3BD6:  MOVWF  FEE
3BD8:  IORLW  00
3BDA:  BNZ   3BD2
3BDC:  MOVLB  5
3BDE:  BTFSC  x3A.7
3BE0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1); 
3BE2:  MOVLW  05
3BE4:  MOVWF  x3B
3BE6:  MOVLW  1A
3BE8:  MOVWF  x3A
3BEA:  CLRF   x3C
3BEC:  MOVLW  2E
3BEE:  MOVWF  x3D
3BF0:  CLRF   x3E
3BF2:  MOVLW  01
3BF4:  MOVWF  x3F
3BF6:  MOVLB  0
3BF8:  CALL   1814
....................          visual=0; 
3BFC:  MOVLB  4
3BFE:  BCF    x7C.4
....................       } 
....................        
....................       if(LEFT)// Si oprime Izquier|da 
3C00:  BSF    F96.2
3C02:  BTFSS  F84.2
3C04:  BRA    3C26
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3C06:  MOVLW  1E
3C08:  MOVLB  5
3C0A:  MOVWF  x3F
3C0C:  MOVLB  0
3C0E:  CALL   10EC
3C12:  MOVLW  01
3C14:  MOVLB  4
3C16:  MOVWF  x89
3C18:  MOVLB  5
3C1A:  CLRF   x3B
3C1C:  MOVLB  0
3C1E:  CALL   11E4
3C22:  MOVLB  4
3C24:  BSF    x7C.4
....................       } 
....................  
....................       if(RIGHT)// Si oprime derecha 
3C26:  BSF    F96.1
3C28:  BTFSS  F84.1
3C2A:  BRA    3DCE
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0;visual=1; 
3C2C:  CLRF   xA8
3C2E:  CLRF   xA9
3C30:  MOVLW  05
3C32:  MOVWF  xAA
3C34:  CLRF   xAB
3C36:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=0;minutos=0;Setpoint=105;Menu=20; 
3C38:  CLRF   xB0
3C3A:  CLRF   xB1
3C3C:  MOVWF  xB2
3C3E:  CLRF   xB3
3C40:  CLRF   x9B
3C42:  CLRF   x9A
3C44:  MOVLW  69
3C46:  MOVWF  x8E
3C48:  MOVLW  14
3C4A:  MOVWF  x89
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
3C4C:  MOVWF  x89
3C4E:  MOVLW  0F
3C50:  MOVLB  5
3C52:  MOVWF  x4C
3C54:  MOVLW  12
3C56:  MOVWF  x4D
3C58:  MOVLW  1E
3C5A:  MOVWF  x4E
3C5C:  MOVLW  35
3C5E:  MOVWF  x4F
3C60:  CLRF   x50
3C62:  MOVLW  01
3C64:  MOVWF  x51
3C66:  MOVLB  0
3C68:  CALL   1752
3C6C:  MOVLB  4
3C6E:  CLRF   x92
3C70:  MOVLW  C0
3C72:  IORWF  FF2,F
3C74:  MOVLB  5
3C76:  CLRF   x3B
3C78:  MOVLB  0
3C7A:  CALL   11E4
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
3C7E:  MOVLW  05
3C80:  MOVWF  FEA
3C82:  MOVLW  1A
3C84:  MOVWF  FE9
3C86:  MOVFF  FF2,53A
3C8A:  BCF    FF2.7
3C8C:  MOVLW  00
3C8E:  CALL   0972
3C92:  TBLRD*-
3C94:  TBLRD*+
3C96:  MOVF   FF5,W
3C98:  MOVWF  FEE
3C9A:  IORLW  00
3C9C:  BNZ   3C94
3C9E:  MOVLB  5
3CA0:  BTFSC  x3A.7
3CA2:  BSF    FF2.7
3CA4:  MOVLW  05
3CA6:  MOVWF  x3B
3CA8:  MOVLW  1A
3CAA:  MOVWF  x3A
3CAC:  CLRF   x3C
3CAE:  MOVLW  37
3CB0:  MOVWF  x3D
3CB2:  MOVLW  02
3CB4:  MOVWF  x3E
3CB6:  MOVLW  01
3CB8:  MOVWF  x3F
3CBA:  MOVLB  0
3CBC:  CALL   1814
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
3CC0:  MOVLW  0F
3CC2:  MOVLB  5
3CC4:  MOVWF  x4C
3CC6:  MOVLW  12
3CC8:  MOVWF  x4D
3CCA:  MOVLW  1E
3CCC:  MOVWF  x4E
3CCE:  MOVLW  35
3CD0:  MOVWF  x4F
3CD2:  CLRF   x50
3CD4:  MOVLW  01
3CD6:  MOVWF  x51
3CD8:  MOVLB  0
3CDA:  CALL   1752
....................          glcd_imagen(5); 
3CDE:  MOVLW  05
3CE0:  MOVLB  5
3CE2:  MOVWF  x3A
3CE4:  MOVLB  0
3CE6:  CALL   2040
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
3CEA:  MOVLW  05
3CEC:  MOVWF  FEA
3CEE:  MOVLW  1A
3CF0:  MOVWF  FE9
3CF2:  MOVFF  FF2,53A
3CF6:  BCF    FF2.7
3CF8:  MOVLW  00
3CFA:  CALL   0998
3CFE:  TBLRD*-
3D00:  TBLRD*+
3D02:  MOVF   FF5,W
3D04:  MOVWF  FEE
3D06:  IORLW  00
3D08:  BNZ   3D00
3D0A:  MOVLB  5
3D0C:  BTFSC  x3A.7
3D0E:  BSF    FF2.7
3D10:  MOVLW  05
3D12:  MOVWF  x3B
3D14:  MOVLW  1A
3D16:  MOVWF  x3A
3D18:  CLRF   x3C
3D1A:  CLRF   x3D
3D1C:  MOVLW  02
3D1E:  MOVWF  x3E
3D20:  MOVLW  01
3D22:  MOVWF  x3F
3D24:  MOVLB  0
3D26:  CALL   1814
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
3D2A:  MOVLW  05
3D2C:  MOVWF  FEA
3D2E:  MOVLW  1A
3D30:  MOVWF  FE9
3D32:  MOVFF  FF2,53A
3D36:  BCF    FF2.7
3D38:  MOVLW  00
3D3A:  CALL   09BA
3D3E:  TBLRD*-
3D40:  TBLRD*+
3D42:  MOVF   FF5,W
3D44:  MOVWF  FEE
3D46:  IORLW  00
3D48:  BNZ   3D40
3D4A:  MOVLB  5
3D4C:  BTFSC  x3A.7
3D4E:  BSF    FF2.7
3D50:  MOVLW  05
3D52:  MOVWF  x3B
3D54:  MOVLW  1A
3D56:  MOVWF  x3A
3D58:  CLRF   x3C
3D5A:  MOVLW  08
3D5C:  MOVWF  x3D
3D5E:  MOVLW  02
3D60:  MOVWF  x3E
3D62:  MOVLW  01
3D64:  MOVWF  x3F
3D66:  MOVLB  0
3D68:  CALL   1814
....................          glcd_circle(95,40,2,NO,ON); 
3D6C:  MOVLW  5F
3D6E:  MOVLB  5
3D70:  MOVWF  x3A
3D72:  MOVLW  28
3D74:  MOVWF  x3B
3D76:  MOVLW  02
3D78:  MOVWF  x3C
3D7A:  CLRF   x3D
3D7C:  MOVLW  01
3D7E:  MOVWF  x3E
3D80:  MOVLB  0
3D82:  CALL   213C
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
3D86:  MOVLW  05
3D88:  MOVWF  FEA
3D8A:  MOVLW  1A
3D8C:  MOVWF  FE9
3D8E:  MOVFF  FF2,53A
3D92:  BCF    FF2.7
3D94:  MOVLW  00
3D96:  CALL   09DC
3D9A:  TBLRD*-
3D9C:  TBLRD*+
3D9E:  MOVF   FF5,W
3DA0:  MOVWF  FEE
3DA2:  IORLW  00
3DA4:  BNZ   3D9C
3DA6:  MOVLB  5
3DA8:  BTFSC  x3A.7
3DAA:  BSF    FF2.7
3DAC:  MOVLW  05
3DAE:  MOVWF  x3B
3DB0:  MOVLW  1A
3DB2:  MOVWF  x3A
3DB4:  MOVLW  66
3DB6:  MOVWF  x3C
3DB8:  MOVLW  28
3DBA:  MOVWF  x3D
3DBC:  MOVLW  02
3DBE:  MOVWF  x3E
3DC0:  MOVWF  x3F
3DC2:  MOVLB  0
3DC4:  CALL   1814
....................          MuestraTiemposProgramados(); 
3DC8:  CALL   253C
3DCC:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==5){ // Menu de Liquido       
3DCE:  MOVF   x89,W
3DD0:  SUBLW  05
3DD2:  BTFSS  FD8.2
3DD4:  BRA    3F98
....................        
....................       if(visual==1) 
3DD6:  BTFSS  x7C.4
3DD8:  BRA    3F2E
....................       { 
....................          glcd_imagen(4); //ErlenMeyer con Liquido 
3DDA:  MOVLW  04
3DDC:  MOVLB  5
3DDE:  MOVWF  x3A
3DE0:  MOVLB  0
3DE2:  CALL   2040
....................          strcpy(Menus.Letra,"Liquidos"); 
3DE6:  MOVLW  05
3DE8:  MOVWF  FEA
3DEA:  MOVLW  1A
3DEC:  MOVWF  FE9
3DEE:  MOVFF  FF2,53A
3DF2:  BCF    FF2.7
3DF4:  MOVLW  00
3DF6:  CALL   081C
3DFA:  TBLRD*-
3DFC:  TBLRD*+
3DFE:  MOVF   FF5,W
3E00:  MOVWF  FEE
3E02:  IORLW  00
3E04:  BNZ   3DFC
3E06:  MOVLB  5
3E08:  BTFSC  x3A.7
3E0A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3E0C:  MOVLW  05
3E0E:  MOVWF  x3B
3E10:  MOVLW  1A
3E12:  MOVWF  x3A
3E14:  MOVLW  14
3E16:  MOVWF  x3C
3E18:  CLRF   x3D
3E1A:  MOVLW  01
3E1C:  MOVWF  x3E
3E1E:  MOVLW  02
3E20:  MOVWF  x3F
3E22:  MOVLB  0
3E24:  CALL   1814
....................        
....................          strcpy(Menus.Letra,"Liquidos"); 
3E28:  MOVLW  05
3E2A:  MOVWF  FEA
3E2C:  MOVLW  1A
3E2E:  MOVWF  FE9
3E30:  MOVFF  FF2,53A
3E34:  BCF    FF2.7
3E36:  MOVLW  00
3E38:  CALL   081C
3E3C:  TBLRD*-
3E3E:  TBLRD*+
3E40:  MOVF   FF5,W
3E42:  MOVWF  FEE
3E44:  IORLW  00
3E46:  BNZ   3E3E
3E48:  MOVLB  5
3E4A:  BTFSC  x3A.7
3E4C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3E4E:  MOVLW  05
3E50:  MOVWF  x3B
3E52:  MOVLW  1A
3E54:  MOVWF  x3A
3E56:  MOVLW  07
3E58:  MOVWF  x3C
3E5A:  MOVLW  37
3E5C:  MOVWF  x3D
3E5E:  MOVLW  02
3E60:  MOVWF  x3E
3E62:  MOVLW  01
3E64:  MOVWF  x3F
3E66:  MOVLB  0
3E68:  CALL   1814
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3E6C:  MOVLW  05
3E6E:  MOVWF  FEA
3E70:  MOVLW  1A
3E72:  MOVWF  FE9
3E74:  MOVFF  FF2,53A
3E78:  BCF    FF2.7
3E7A:  MOVLW  00
3E7C:  CALL   09F8
3E80:  TBLRD*-
3E82:  TBLRD*+
3E84:  MOVF   FF5,W
3E86:  MOVWF  FEE
3E88:  IORLW  00
3E8A:  BNZ   3E82
3E8C:  MOVLB  5
3E8E:  BTFSC  x3A.7
3E90:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3E92:  MOVLW  05
3E94:  MOVWF  x3B
3E96:  MOVLW  1A
3E98:  MOVWF  x3A
3E9A:  CLRF   x3C
3E9C:  MOVWF  x3D
3E9E:  CLRF   x3E
3EA0:  MOVLW  01
3EA2:  MOVWF  x3F
3EA4:  MOVLB  0
3EA6:  CALL   1814
....................          strcpy(Menus.Letra,"T. Esterilizacion:20m"); 
3EAA:  MOVLW  05
3EAC:  MOVWF  FEA
3EAE:  MOVLW  1A
3EB0:  MOVWF  FE9
3EB2:  MOVFF  FF2,53A
3EB6:  BCF    FF2.7
3EB8:  MOVLW  00
3EBA:  CALL   0A24
3EBE:  TBLRD*-
3EC0:  TBLRD*+
3EC2:  MOVF   FF5,W
3EC4:  MOVWF  FEE
3EC6:  IORLW  00
3EC8:  BNZ   3EC0
3ECA:  MOVLB  5
3ECC:  BTFSC  x3A.7
3ECE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3ED0:  MOVLW  05
3ED2:  MOVWF  x3B
3ED4:  MOVLW  1A
3ED6:  MOVWF  x3A
3ED8:  CLRF   x3C
3EDA:  MOVLW  24
3EDC:  MOVWF  x3D
3EDE:  CLRF   x3E
3EE0:  MOVLW  01
3EE2:  MOVWF  x3F
3EE4:  MOVLB  0
3EE6:  CALL   1814
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3EEA:  MOVLW  05
3EEC:  MOVWF  FEA
3EEE:  MOVLW  1A
3EF0:  MOVWF  FE9
3EF2:  MOVFF  FF2,53A
3EF6:  BCF    FF2.7
3EF8:  MOVLW  00
3EFA:  CALL   0A54
3EFE:  TBLRD*-
3F00:  TBLRD*+
3F02:  MOVF   FF5,W
3F04:  MOVWF  FEE
3F06:  IORLW  00
3F08:  BNZ   3F00
3F0A:  MOVLB  5
3F0C:  BTFSC  x3A.7
3F0E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);     
3F10:  MOVLW  05
3F12:  MOVWF  x3B
3F14:  MOVLW  1A
3F16:  MOVWF  x3A
3F18:  CLRF   x3C
3F1A:  MOVLW  2E
3F1C:  MOVWF  x3D
3F1E:  CLRF   x3E
3F20:  MOVLW  01
3F22:  MOVWF  x3F
3F24:  MOVLB  0
3F26:  CALL   1814
....................          visual=0; 
3F2A:  MOVLB  4
3F2C:  BCF    x7C.4
....................       }    
....................           
....................       if(LEFT)// Si oprime Izquier|da 
3F2E:  BSF    F96.2
3F30:  BTFSS  F84.2
3F32:  BRA    3F54
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3F34:  MOVLW  1E
3F36:  MOVLB  5
3F38:  MOVWF  x3F
3F3A:  MOVLB  0
3F3C:  CALL   10EC
3F40:  MOVLW  01
3F42:  MOVLB  4
3F44:  MOVWF  x89
3F46:  MOVLB  5
3F48:  CLRF   x3B
3F4A:  MOVLB  0
3F4C:  CALL   11E4
3F50:  MOVLB  4
3F52:  BSF    x7C.4
....................       }                
....................  
....................       if(RIGHT)// Si oprime derecha 
3F54:  BSF    F96.1
3F56:  BTFSS  F84.1
3F58:  BRA    3F98
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2;desfoguelento=1;visual=1; 
3F5A:  CLRF   xA8
3F5C:  CLRF   xA9
3F5E:  CLRF   xAA
3F60:  MOVLW  02
3F62:  MOVWF  xAB
3F64:  BSF    x7C.5
3F66:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
3F68:  CLRF   xB0
3F6A:  CLRF   xB1
3F6C:  CLRF   xB2
3F6E:  CLRF   xB3
3F70:  MOVLW  79
3F72:  MOVWF  x8E
3F74:  MOVLW  0E
3F76:  MOVWF  x89
3F78:  MOVLW  04
3F7A:  MOVLB  5
3F7C:  MOVWF  x3A
3F7E:  MOVLW  AF
3F80:  MOVWF  x3F
3F82:  MOVLB  0
3F84:  CALL   10EC
3F88:  MOVLB  5
3F8A:  DECFSZ x3A,F
3F8C:  BRA    3F7E
3F8E:  CLRF   x3B
3F90:  MOVLB  0
3F92:  CALL   11E4
3F96:  MOVLB  4
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Instrumental Suave      
3F98:  MOVF   x89,W
3F9A:  SUBLW  06
3F9C:  BTFSS  FD8.2
3F9E:  BRA    4162
....................        
....................       if(visual==1) 
3FA0:  BTFSS  x7C.4
3FA2:  BRA    40F6
....................       { 
....................          glcd_imagen(3); //Erlen Meyer 
3FA4:  MOVLW  03
3FA6:  MOVLB  5
3FA8:  MOVWF  x3A
3FAA:  MOVLB  0
3FAC:  CALL   2040
....................           
....................          strcpy(Menus.Letra,"Ins. Suave"); 
3FB0:  MOVLW  05
3FB2:  MOVWF  FEA
3FB4:  MOVLW  1A
3FB6:  MOVWF  FE9
3FB8:  MOVFF  FF2,53A
3FBC:  BCF    FF2.7
3FBE:  MOVLW  00
3FC0:  CALL   0A7E
3FC4:  TBLRD*-
3FC6:  TBLRD*+
3FC8:  MOVF   FF5,W
3FCA:  MOVWF  FEE
3FCC:  IORLW  00
3FCE:  BNZ   3FC6
3FD0:  MOVLB  5
3FD2:  BTFSC  x3A.7
3FD4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
3FD6:  MOVLW  05
3FD8:  MOVWF  x3B
3FDA:  MOVLW  1A
3FDC:  MOVWF  x3A
3FDE:  CLRF   x3C
3FE0:  CLRF   x3D
3FE2:  MOVLW  01
3FE4:  MOVWF  x3E
3FE6:  MOVLW  02
3FE8:  MOVWF  x3F
3FEA:  MOVLB  0
3FEC:  CALL   1814
....................           
....................          strcpy(Menus.Letra,"Instrumental Suave"); 
3FF0:  MOVLW  05
3FF2:  MOVWF  FEA
3FF4:  MOVLW  1A
3FF6:  MOVWF  FE9
3FF8:  MOVFF  FF2,53A
3FFC:  BCF    FF2.7
3FFE:  MOVLW  00
4000:  CALL   0840
4004:  TBLRD*-
4006:  TBLRD*+
4008:  MOVF   FF5,W
400A:  MOVWF  FEE
400C:  IORLW  00
400E:  BNZ   4006
4010:  MOVLB  5
4012:  BTFSC  x3A.7
4014:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
4016:  MOVLW  05
4018:  MOVWF  x3B
401A:  MOVLW  1A
401C:  MOVWF  x3A
401E:  MOVLW  07
4020:  MOVWF  x3C
4022:  MOVLW  37
4024:  MOVWF  x3D
4026:  MOVLW  02
4028:  MOVWF  x3E
402A:  MOVLW  01
402C:  MOVWF  x3F
402E:  MOVLB  0
4030:  CALL   1814
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
4034:  MOVLW  05
4036:  MOVWF  FEA
4038:  MOVLW  1A
403A:  MOVWF  FE9
403C:  MOVFF  FF2,53A
4040:  BCF    FF2.7
4042:  MOVLW  00
4044:  CALL   09F8
4048:  TBLRD*-
404A:  TBLRD*+
404C:  MOVF   FF5,W
404E:  MOVWF  FEE
4050:  IORLW  00
4052:  BNZ   404A
4054:  MOVLB  5
4056:  BTFSC  x3A.7
4058:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
405A:  MOVLW  05
405C:  MOVWF  x3B
405E:  MOVLW  1A
4060:  MOVWF  x3A
4062:  CLRF   x3C
4064:  MOVWF  x3D
4066:  CLRF   x3E
4068:  MOVLW  01
406A:  MOVWF  x3F
406C:  MOVLB  0
406E:  CALL   1814
....................          strcpy(Menus.Letra,"T. Esterilizacion:15m"); 
4072:  MOVLW  05
4074:  MOVWF  FEA
4076:  MOVLW  1A
4078:  MOVWF  FE9
407A:  MOVFF  FF2,53A
407E:  BCF    FF2.7
4080:  MOVLW  00
4082:  CALL   0AA4
4086:  TBLRD*-
4088:  TBLRD*+
408A:  MOVF   FF5,W
408C:  MOVWF  FEE
408E:  IORLW  00
4090:  BNZ   4088
4092:  MOVLB  5
4094:  BTFSC  x3A.7
4096:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
4098:  MOVLW  05
409A:  MOVWF  x3B
409C:  MOVLW  1A
409E:  MOVWF  x3A
40A0:  CLRF   x3C
40A2:  MOVLW  24
40A4:  MOVWF  x3D
40A6:  CLRF   x3E
40A8:  MOVLW  01
40AA:  MOVWF  x3F
40AC:  MOVLB  0
40AE:  CALL   1814
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
40B2:  MOVLW  05
40B4:  MOVWF  FEA
40B6:  MOVLW  1A
40B8:  MOVWF  FE9
40BA:  MOVFF  FF2,53A
40BE:  BCF    FF2.7
40C0:  MOVLW  00
40C2:  CALL   0A54
40C6:  TBLRD*-
40C8:  TBLRD*+
40CA:  MOVF   FF5,W
40CC:  MOVWF  FEE
40CE:  IORLW  00
40D0:  BNZ   40C8
40D2:  MOVLB  5
40D4:  BTFSC  x3A.7
40D6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
40D8:  MOVLW  05
40DA:  MOVWF  x3B
40DC:  MOVLW  1A
40DE:  MOVWF  x3A
40E0:  CLRF   x3C
40E2:  MOVLW  2E
40E4:  MOVWF  x3D
40E6:  CLRF   x3E
40E8:  MOVLW  01
40EA:  MOVWF  x3F
40EC:  MOVLB  0
40EE:  CALL   1814
....................          visual=0; 
40F2:  MOVLB  4
40F4:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
40F6:  BSF    F96.2
40F8:  BTFSS  F84.2
40FA:  BRA    411C
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
40FC:  MOVLW  1E
40FE:  MOVLB  5
4100:  MOVWF  x3F
4102:  MOVLB  0
4104:  CALL   10EC
4108:  MOVLW  01
410A:  MOVLB  4
410C:  MOVWF  x89
410E:  MOVLB  5
4110:  CLRF   x3B
4112:  MOVLB  0
4114:  CALL   11E4
4118:  MOVLB  4
411A:  BSF    x7C.4
....................       }             
....................  
....................       if(RIGHT)// Si oprime derecha 
411C:  BSF    F96.1
411E:  BTFSS  F84.1
4120:  BRA    4162
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1;desfoguelento=1;visual=1; 
4122:  CLRF   xA8
4124:  CLRF   xA9
4126:  MOVLW  05
4128:  MOVWF  xAA
412A:  MOVLW  01
412C:  MOVWF  xAB
412E:  BSF    x7C.5
4130:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
4132:  CLRF   xB0
4134:  CLRF   xB1
4136:  CLRF   xB2
4138:  CLRF   xB3
413A:  MOVLW  79
413C:  MOVWF  x8E
413E:  MOVLW  0E
4140:  MOVWF  x89
4142:  MOVLW  04
4144:  MOVLB  5
4146:  MOVWF  x3A
4148:  MOVLW  AF
414A:  MOVWF  x3F
414C:  MOVLB  0
414E:  CALL   10EC
4152:  MOVLB  5
4154:  DECFSZ x3A,F
4156:  BRA    4148
4158:  CLRF   x3B
415A:  MOVLB  0
415C:  CALL   11E4
4160:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==7){ // Menu de textil e instrumental      
4162:  MOVF   x89,W
4164:  SUBLW  07
4166:  BTFSS  FD8.2
4168:  BRA    44A6
....................        
....................       if(visual==1) 
416A:  BTFSS  x7C.4
416C:  BRA    42BE
....................       { 
....................          glcd_imagen(1); //Tijeras y Camisa 
416E:  MOVLW  01
4170:  MOVLB  5
4172:  MOVWF  x3A
4174:  MOVLB  0
4176:  CALL   2040
....................          strcpy(Menus.Letra,"Tex & Ins"); 
417A:  MOVLW  05
417C:  MOVWF  FEA
417E:  MOVLW  1A
4180:  MOVWF  FE9
4182:  MOVFF  FF2,53A
4186:  BCF    FF2.7
4188:  MOVLW  00
418A:  CALL   0AD4
418E:  TBLRD*-
4190:  TBLRD*+
4192:  MOVF   FF5,W
4194:  MOVWF  FEE
4196:  IORLW  00
4198:  BNZ   4190
419A:  MOVLB  5
419C:  BTFSC  x3A.7
419E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
41A0:  MOVLW  05
41A2:  MOVWF  x3B
41A4:  MOVLW  1A
41A6:  MOVWF  x3A
41A8:  CLRF   x3C
41AA:  CLRF   x3D
41AC:  MOVLW  01
41AE:  MOVWF  x3E
41B0:  MOVLW  02
41B2:  MOVWF  x3F
41B4:  MOVLB  0
41B6:  CALL   1814
....................        
....................          strcpy(Menus.Letra,"Textil e Instrumental"); 
41BA:  MOVLW  05
41BC:  MOVWF  FEA
41BE:  MOVLW  1A
41C0:  MOVWF  FE9
41C2:  MOVFF  FF2,53A
41C6:  BCF    FF2.7
41C8:  MOVLW  00
41CA:  CALL   086E
41CE:  TBLRD*-
41D0:  TBLRD*+
41D2:  MOVF   FF5,W
41D4:  MOVWF  FEE
41D6:  IORLW  00
41D8:  BNZ   41D0
41DA:  MOVLB  5
41DC:  BTFSC  x3A.7
41DE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
41E0:  MOVLW  05
41E2:  MOVWF  x3B
41E4:  MOVLW  1A
41E6:  MOVWF  x3A
41E8:  CLRF   x3C
41EA:  MOVLW  37
41EC:  MOVWF  x3D
41EE:  MOVLW  02
41F0:  MOVWF  x3E
41F2:  MOVLW  01
41F4:  MOVWF  x3F
41F6:  MOVLB  0
41F8:  CALL   1814
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
41FC:  MOVLW  05
41FE:  MOVWF  FEA
4200:  MOVLW  1A
4202:  MOVWF  FE9
4204:  MOVFF  FF2,53A
4208:  BCF    FF2.7
420A:  MOVLW  00
420C:  CALL   09F8
4210:  TBLRD*-
4212:  TBLRD*+
4214:  MOVF   FF5,W
4216:  MOVWF  FEE
4218:  IORLW  00
421A:  BNZ   4212
421C:  MOVLB  5
421E:  BTFSC  x3A.7
4220:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
4222:  MOVLW  05
4224:  MOVWF  x3B
4226:  MOVLW  1A
4228:  MOVWF  x3A
422A:  CLRF   x3C
422C:  MOVWF  x3D
422E:  CLRF   x3E
4230:  MOVLW  01
4232:  MOVWF  x3F
4234:  MOVLB  0
4236:  CALL   1814
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
423A:  MOVLW  05
423C:  MOVWF  FEA
423E:  MOVLW  1A
4240:  MOVWF  FE9
4242:  MOVFF  FF2,53A
4246:  BCF    FF2.7
4248:  MOVLW  00
424A:  CALL   0AF8
424E:  TBLRD*-
4250:  TBLRD*+
4252:  MOVF   FF5,W
4254:  MOVWF  FEE
4256:  IORLW  00
4258:  BNZ   4250
425A:  MOVLB  5
425C:  BTFSC  x3A.7
425E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
4260:  MOVLW  05
4262:  MOVWF  x3B
4264:  MOVLW  1A
4266:  MOVWF  x3A
4268:  CLRF   x3C
426A:  MOVLW  24
426C:  MOVWF  x3D
426E:  CLRF   x3E
4270:  MOVLW  01
4272:  MOVWF  x3F
4274:  MOVLB  0
4276:  CALL   1814
....................          strcpy(Menus.Letra,"T. Secado= 10m"); 
427A:  MOVLW  05
427C:  MOVWF  FEA
427E:  MOVLW  1A
4280:  MOVWF  FE9
4282:  MOVFF  FF2,53A
4286:  BCF    FF2.7
4288:  MOVLW  00
428A:  CALL   0B28
428E:  TBLRD*-
4290:  TBLRD*+
4292:  MOVF   FF5,W
4294:  MOVWF  FEE
4296:  IORLW  00
4298:  BNZ   4290
429A:  MOVLB  5
429C:  BTFSC  x3A.7
429E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
42A0:  MOVLW  05
42A2:  MOVWF  x3B
42A4:  MOVLW  1A
42A6:  MOVWF  x3A
42A8:  CLRF   x3C
42AA:  MOVLW  2E
42AC:  MOVWF  x3D
42AE:  CLRF   x3E
42B0:  MOVLW  01
42B2:  MOVWF  x3F
42B4:  MOVLB  0
42B6:  CALL   1814
....................          visual=0; 
42BA:  MOVLB  4
42BC:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
42BE:  BSF    F96.2
42C0:  BTFSS  F84.2
42C2:  BRA    42E4
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
42C4:  MOVLW  1E
42C6:  MOVLB  5
42C8:  MOVWF  x3F
42CA:  MOVLB  0
42CC:  CALL   10EC
42D0:  MOVLW  01
42D2:  MOVLB  4
42D4:  MOVWF  x89
42D6:  MOVLB  5
42D8:  CLRF   x3B
42DA:  MOVLB  0
42DC:  CALL   11E4
42E0:  MOVLB  4
42E2:  BSF    x7C.4
....................       }                  
....................  
....................       if(RIGHT)// Si oprime derecha 
42E4:  BSF    F96.1
42E6:  BTFSS  F84.1
42E8:  BRA    44A6
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
42EA:  CLRF   xA8
42EC:  CLRF   xA9
42EE:  MOVLW  05
42F0:  MOVWF  xAA
42F2:  MOVLW  02
42F4:  MOVWF  xAB
42F6:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=1;Setpoint=121;Menu=20;delay_ms(700); 
42F8:  CLRF   xB0
42FA:  CLRF   xB1
42FC:  CLRF   xB2
42FE:  MOVLW  01
4300:  MOVWF  xB3
4302:  MOVLW  79
4304:  MOVWF  x8E
4306:  MOVLW  14
4308:  MOVWF  x89
430A:  MOVLW  04
430C:  MOVLB  5
430E:  MOVWF  x3A
4310:  MOVLW  AF
4312:  MOVWF  x3F
4314:  MOVLB  0
4316:  CALL   10EC
431A:  MOVLB  5
431C:  DECFSZ x3A,F
431E:  BRA    4310
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
4320:  MOVLW  14
4322:  MOVLB  4
4324:  MOVWF  x89
4326:  MOVLW  0F
4328:  MOVLB  5
432A:  MOVWF  x4C
432C:  MOVLW  12
432E:  MOVWF  x4D
4330:  MOVLW  1E
4332:  MOVWF  x4E
4334:  MOVLW  35
4336:  MOVWF  x4F
4338:  CLRF   x50
433A:  MOVLW  01
433C:  MOVWF  x51
433E:  MOVLB  0
4340:  CALL   1752
4344:  MOVLB  4
4346:  CLRF   x92
4348:  MOVLW  C0
434A:  IORWF  FF2,F
434C:  MOVLB  5
434E:  CLRF   x3B
4350:  MOVLB  0
4352:  CALL   11E4
....................          strcpy(Menus.Letra,"Calentando"); 
4356:  MOVLW  05
4358:  MOVWF  FEA
435A:  MOVLW  1A
435C:  MOVWF  FE9
435E:  MOVFF  FF2,53A
4362:  BCF    FF2.7
4364:  MOVLW  00
4366:  CALL   0972
436A:  TBLRD*-
436C:  TBLRD*+
436E:  MOVF   FF5,W
4370:  MOVWF  FEE
4372:  IORLW  00
4374:  BNZ   436C
4376:  MOVLB  5
4378:  BTFSC  x3A.7
437A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
437C:  MOVLW  05
437E:  MOVWF  x3B
4380:  MOVLW  1A
4382:  MOVWF  x3A
4384:  CLRF   x3C
4386:  MOVLW  37
4388:  MOVWF  x3D
438A:  MOVLW  02
438C:  MOVWF  x3E
438E:  MOVLW  01
4390:  MOVWF  x3F
4392:  MOVLB  0
4394:  CALL   1814
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
4398:  MOVLW  0F
439A:  MOVLB  5
439C:  MOVWF  x4C
439E:  MOVLW  12
43A0:  MOVWF  x4D
43A2:  MOVLW  1E
43A4:  MOVWF  x4E
43A6:  MOVLW  35
43A8:  MOVWF  x4F
43AA:  CLRF   x50
43AC:  MOVLW  01
43AE:  MOVWF  x51
43B0:  MOVLB  0
43B2:  CALL   1752
....................          glcd_imagen(5); 
43B6:  MOVLW  05
43B8:  MOVLB  5
43BA:  MOVWF  x3A
43BC:  MOVLB  0
43BE:  CALL   2040
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
43C2:  MOVLW  05
43C4:  MOVWF  FEA
43C6:  MOVLW  1A
43C8:  MOVWF  FE9
43CA:  MOVFF  FF2,53A
43CE:  BCF    FF2.7
43D0:  MOVLW  00
43D2:  CALL   0998
43D6:  TBLRD*-
43D8:  TBLRD*+
43DA:  MOVF   FF5,W
43DC:  MOVWF  FEE
43DE:  IORLW  00
43E0:  BNZ   43D8
43E2:  MOVLB  5
43E4:  BTFSC  x3A.7
43E6:  BSF    FF2.7
43E8:  MOVLW  05
43EA:  MOVWF  x3B
43EC:  MOVLW  1A
43EE:  MOVWF  x3A
43F0:  CLRF   x3C
43F2:  CLRF   x3D
43F4:  MOVLW  02
43F6:  MOVWF  x3E
43F8:  MOVLW  01
43FA:  MOVWF  x3F
43FC:  MOVLB  0
43FE:  CALL   1814
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
4402:  MOVLW  05
4404:  MOVWF  FEA
4406:  MOVLW  1A
4408:  MOVWF  FE9
440A:  MOVFF  FF2,53A
440E:  BCF    FF2.7
4410:  MOVLW  00
4412:  CALL   09BA
4416:  TBLRD*-
4418:  TBLRD*+
441A:  MOVF   FF5,W
441C:  MOVWF  FEE
441E:  IORLW  00
4420:  BNZ   4418
4422:  MOVLB  5
4424:  BTFSC  x3A.7
4426:  BSF    FF2.7
4428:  MOVLW  05
442A:  MOVWF  x3B
442C:  MOVLW  1A
442E:  MOVWF  x3A
4430:  CLRF   x3C
4432:  MOVLW  08
4434:  MOVWF  x3D
4436:  MOVLW  02
4438:  MOVWF  x3E
443A:  MOVLW  01
443C:  MOVWF  x3F
443E:  MOVLB  0
4440:  CALL   1814
....................          glcd_circle(95,40,2,NO,ON); 
4444:  MOVLW  5F
4446:  MOVLB  5
4448:  MOVWF  x3A
444A:  MOVLW  28
444C:  MOVWF  x3B
444E:  MOVLW  02
4450:  MOVWF  x3C
4452:  CLRF   x3D
4454:  MOVLW  01
4456:  MOVWF  x3E
4458:  MOVLB  0
445A:  CALL   213C
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
445E:  MOVLW  05
4460:  MOVWF  FEA
4462:  MOVLW  1A
4464:  MOVWF  FE9
4466:  MOVFF  FF2,53A
446A:  BCF    FF2.7
446C:  MOVLW  00
446E:  CALL   09DC
4472:  TBLRD*-
4474:  TBLRD*+
4476:  MOVF   FF5,W
4478:  MOVWF  FEE
447A:  IORLW  00
447C:  BNZ   4474
447E:  MOVLB  5
4480:  BTFSC  x3A.7
4482:  BSF    FF2.7
4484:  MOVLW  05
4486:  MOVWF  x3B
4488:  MOVLW  1A
448A:  MOVWF  x3A
448C:  MOVLW  66
448E:  MOVWF  x3C
4490:  MOVLW  28
4492:  MOVWF  x3D
4494:  MOVLW  02
4496:  MOVWF  x3E
4498:  MOVWF  x3F
449A:  MOVLB  0
449C:  CALL   1814
....................          MuestraTiemposProgramados(); 
44A0:  CALL   253C
44A4:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
.................... // Testerilizacionp[3]<,Tsecadop[3]<,Setpoint 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==8){ // Menu de Proceso Personalizado 
44A6:  MOVF   x89,W
44A8:  SUBLW  08
44AA:  BTFSS  FD8.2
44AC:  BRA    488A
....................          
....................          if(visual==1) 
44AE:  BTFSS  x7C.4
44B0:  BRA    47D6
....................          { 
....................             if(Opcion>5) 
44B2:  MOVF   x90,W
44B4:  SUBLW  05
44B6:  BC    44BC
....................             {Opcion=1;} 
44B8:  MOVLW  01
44BA:  MOVWF  x90
....................             if(Opcion<1) 
44BC:  MOVF   x90,F
44BE:  BNZ   44C4
....................             {Opcion=5;} 
44C0:  MOVLW  05
44C2:  MOVWF  x90
....................              
....................             strcpy(Menus.Letra,"Proceso Personalizado"); 
44C4:  MOVLW  05
44C6:  MOVWF  FEA
44C8:  MOVLW  1A
44CA:  MOVWF  FE9
44CC:  MOVFF  FF2,53A
44D0:  BCF    FF2.7
44D2:  MOVLW  00
44D4:  MOVLB  0
44D6:  CALL   0B52
44DA:  TBLRD*-
44DC:  TBLRD*+
44DE:  MOVF   FF5,W
44E0:  MOVWF  FEE
44E2:  IORLW  00
44E4:  BNZ   44DC
44E6:  MOVLB  5
44E8:  BTFSC  x3A.7
44EA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1); 
44EC:  MOVLW  05
44EE:  MOVWF  x3B
44F0:  MOVLW  1A
44F2:  MOVWF  x3A
44F4:  CLRF   x3C
44F6:  CLRF   x3D
44F8:  MOVLW  01
44FA:  MOVWF  x3E
44FC:  MOVWF  x3F
44FE:  MOVLB  0
4500:  CALL   1814
....................        
....................             if(Opcion==1)    
4504:  MOVLB  4
4506:  DECFSZ x90,W
4508:  BRA    4550
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
450A:  MOVLW  05
450C:  MOVWF  FEA
450E:  MOVLW  1A
4510:  MOVWF  FE9
4512:  MOVFF  FF2,53A
4516:  BCF    FF2.7
4518:  MOVLW  00
451A:  MOVLB  0
451C:  CALL   0B82
4520:  TBLRD*-
4522:  TBLRD*+
4524:  MOVF   FF5,W
4526:  MOVWF  FEE
4528:  IORLW  00
452A:  BNZ   4522
452C:  MOVLB  5
452E:  BTFSC  x3A.7
4530:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,1,1);} 
4532:  MOVLW  05
4534:  MOVWF  x3B
4536:  MOVLW  1A
4538:  MOVWF  x3A
453A:  CLRF   x3C
453C:  MOVLW  0A
453E:  MOVWF  x3D
4540:  MOVLW  01
4542:  MOVWF  x3E
4544:  MOVWF  x3F
4546:  MOVLB  0
4548:  CALL   1814
....................             else 
454C:  BRA    4592
454E:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
4550:  MOVLW  05
4552:  MOVWF  FEA
4554:  MOVLW  1A
4556:  MOVWF  FE9
4558:  MOVFF  FF2,53A
455C:  BCF    FF2.7
455E:  MOVLW  00
4560:  MOVLB  0
4562:  CALL   0B82
4566:  TBLRD*-
4568:  TBLRD*+
456A:  MOVF   FF5,W
456C:  MOVWF  FEE
456E:  IORLW  00
4570:  BNZ   4568
4572:  MOVLB  5
4574:  BTFSC  x3A.7
4576:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,0,1);} 
4578:  MOVLW  05
457A:  MOVWF  x3B
457C:  MOVLW  1A
457E:  MOVWF  x3A
4580:  CLRF   x3C
4582:  MOVLW  0A
4584:  MOVWF  x3D
4586:  CLRF   x3E
4588:  MOVLW  01
458A:  MOVWF  x3F
458C:  MOVLB  0
458E:  CALL   1814
....................              
....................             if(Opcion==2)    
4592:  MOVLB  4
4594:  MOVF   x90,W
4596:  SUBLW  02
4598:  BNZ   45E0
....................                {strcpy(Menus.Letra,"T. Secado"); 
459A:  MOVLW  05
459C:  MOVWF  FEA
459E:  MOVLW  1A
45A0:  MOVWF  FE9
45A2:  MOVFF  FF2,53A
45A6:  BCF    FF2.7
45A8:  MOVLW  00
45AA:  MOVLB  0
45AC:  CALL   0BAE
45B0:  TBLRD*-
45B2:  TBLRD*+
45B4:  MOVF   FF5,W
45B6:  MOVWF  FEE
45B8:  IORLW  00
45BA:  BNZ   45B2
45BC:  MOVLB  5
45BE:  BTFSC  x3A.7
45C0:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,1,1);} 
45C2:  MOVLW  05
45C4:  MOVWF  x3B
45C6:  MOVLW  1A
45C8:  MOVWF  x3A
45CA:  CLRF   x3C
45CC:  MOVLW  14
45CE:  MOVWF  x3D
45D0:  MOVLW  01
45D2:  MOVWF  x3E
45D4:  MOVWF  x3F
45D6:  MOVLB  0
45D8:  CALL   1814
....................             else 
45DC:  BRA    4622
45DE:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Secado"); 
45E0:  MOVLW  05
45E2:  MOVWF  FEA
45E4:  MOVLW  1A
45E6:  MOVWF  FE9
45E8:  MOVFF  FF2,53A
45EC:  BCF    FF2.7
45EE:  MOVLW  00
45F0:  MOVLB  0
45F2:  CALL   0BAE
45F6:  TBLRD*-
45F8:  TBLRD*+
45FA:  MOVF   FF5,W
45FC:  MOVWF  FEE
45FE:  IORLW  00
4600:  BNZ   45F8
4602:  MOVLB  5
4604:  BTFSC  x3A.7
4606:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,0,1);}    
4608:  MOVLW  05
460A:  MOVWF  x3B
460C:  MOVLW  1A
460E:  MOVWF  x3A
4610:  CLRF   x3C
4612:  MOVLW  14
4614:  MOVWF  x3D
4616:  CLRF   x3E
4618:  MOVLW  01
461A:  MOVWF  x3F
461C:  MOVLB  0
461E:  CALL   1814
....................                 
....................              if(Opcion==3)    
4622:  MOVLB  4
4624:  MOVF   x90,W
4626:  SUBLW  03
4628:  BNZ   4670
....................                {strcpy(Menus.Letra,"Temperatura"); 
462A:  MOVLW  05
462C:  MOVWF  FEA
462E:  MOVLW  1A
4630:  MOVWF  FE9
4632:  MOVFF  FF2,53A
4636:  BCF    FF2.7
4638:  MOVLW  00
463A:  MOVLB  0
463C:  CALL   0BD2
4640:  TBLRD*-
4642:  TBLRD*+
4644:  MOVF   FF5,W
4646:  MOVWF  FEE
4648:  IORLW  00
464A:  BNZ   4642
464C:  MOVLB  5
464E:  BTFSC  x3A.7
4650:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,1,1);} 
4652:  MOVLW  05
4654:  MOVWF  x3B
4656:  MOVLW  1A
4658:  MOVWF  x3A
465A:  CLRF   x3C
465C:  MOVLW  1E
465E:  MOVWF  x3D
4660:  MOVLW  01
4662:  MOVWF  x3E
4664:  MOVWF  x3F
4666:  MOVLB  0
4668:  CALL   1814
....................             else 
466C:  BRA    46B2
466E:  MOVLB  4
....................                {strcpy(Menus.Letra,"Temperatura"); 
4670:  MOVLW  05
4672:  MOVWF  FEA
4674:  MOVLW  1A
4676:  MOVWF  FE9
4678:  MOVFF  FF2,53A
467C:  BCF    FF2.7
467E:  MOVLW  00
4680:  MOVLB  0
4682:  CALL   0BD2
4686:  TBLRD*-
4688:  TBLRD*+
468A:  MOVF   FF5,W
468C:  MOVWF  FEE
468E:  IORLW  00
4690:  BNZ   4688
4692:  MOVLB  5
4694:  BTFSC  x3A.7
4696:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,0,1);} 
4698:  MOVLW  05
469A:  MOVWF  x3B
469C:  MOVLW  1A
469E:  MOVWF  x3A
46A0:  CLRF   x3C
46A2:  MOVLW  1E
46A4:  MOVWF  x3D
46A6:  CLRF   x3E
46A8:  MOVLW  01
46AA:  MOVWF  x3F
46AC:  MOVLB  0
46AE:  CALL   1814
....................                 
....................             if(Opcion==4)    
46B2:  MOVLB  4
46B4:  MOVF   x90,W
46B6:  SUBLW  04
46B8:  BNZ   4700
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
46BA:  MOVLW  05
46BC:  MOVWF  FEA
46BE:  MOVLW  1A
46C0:  MOVWF  FE9
46C2:  MOVFF  FF2,53A
46C6:  BCF    FF2.7
46C8:  MOVLW  00
46CA:  MOVLB  0
46CC:  CALL   0BF8
46D0:  TBLRD*-
46D2:  TBLRD*+
46D4:  MOVF   FF5,W
46D6:  MOVWF  FEE
46D8:  IORLW  00
46DA:  BNZ   46D2
46DC:  MOVLB  5
46DE:  BTFSC  x3A.7
46E0:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,1,1);} 
46E2:  MOVLW  05
46E4:  MOVWF  x3B
46E6:  MOVLW  1A
46E8:  MOVWF  x3A
46EA:  CLRF   x3C
46EC:  MOVLW  28
46EE:  MOVWF  x3D
46F0:  MOVLW  01
46F2:  MOVWF  x3E
46F4:  MOVWF  x3F
46F6:  MOVLB  0
46F8:  CALL   1814
....................             else 
46FC:  BRA    4742
46FE:  MOVLB  4
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
4700:  MOVLW  05
4702:  MOVWF  FEA
4704:  MOVLW  1A
4706:  MOVWF  FE9
4708:  MOVFF  FF2,53A
470C:  BCF    FF2.7
470E:  MOVLW  00
4710:  MOVLB  0
4712:  CALL   0BF8
4716:  TBLRD*-
4718:  TBLRD*+
471A:  MOVF   FF5,W
471C:  MOVWF  FEE
471E:  IORLW  00
4720:  BNZ   4718
4722:  MOVLB  5
4724:  BTFSC  x3A.7
4726:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,0,1);}    
4728:  MOVLW  05
472A:  MOVWF  x3B
472C:  MOVLW  1A
472E:  MOVWF  x3A
4730:  CLRF   x3C
4732:  MOVLW  28
4734:  MOVWF  x3D
4736:  CLRF   x3E
4738:  MOVLW  01
473A:  MOVWF  x3F
473C:  MOVLB  0
473E:  CALL   1814
....................                 
....................             if(Opcion==5)    
4742:  MOVLB  4
4744:  MOVF   x90,W
4746:  SUBLW  05
4748:  BNZ   4790
....................                {strcpy(Menus.Letra,"Continuar"); 
474A:  MOVLW  05
474C:  MOVWF  FEA
474E:  MOVLW  1A
4750:  MOVWF  FE9
4752:  MOVFF  FF2,53A
4756:  BCF    FF2.7
4758:  MOVLW  00
475A:  MOVLB  0
475C:  CALL   0C24
4760:  TBLRD*-
4762:  TBLRD*+
4764:  MOVF   FF5,W
4766:  MOVWF  FEE
4768:  IORLW  00
476A:  BNZ   4762
476C:  MOVLB  5
476E:  BTFSC  x3A.7
4770:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,1,1);} 
4772:  MOVLW  05
4774:  MOVWF  x3B
4776:  MOVLW  1A
4778:  MOVWF  x3A
477A:  CLRF   x3C
477C:  MOVLW  32
477E:  MOVWF  x3D
4780:  MOVLW  01
4782:  MOVWF  x3E
4784:  MOVWF  x3F
4786:  MOVLB  0
4788:  CALL   1814
....................             else 
478C:  BRA    47D2
478E:  MOVLB  4
....................                {strcpy(Menus.Letra,"Continuar"); 
4790:  MOVLW  05
4792:  MOVWF  FEA
4794:  MOVLW  1A
4796:  MOVWF  FE9
4798:  MOVFF  FF2,53A
479C:  BCF    FF2.7
479E:  MOVLW  00
47A0:  MOVLB  0
47A2:  CALL   0C24
47A6:  TBLRD*-
47A8:  TBLRD*+
47AA:  MOVF   FF5,W
47AC:  MOVWF  FEE
47AE:  IORLW  00
47B0:  BNZ   47A8
47B2:  MOVLB  5
47B4:  BTFSC  x3A.7
47B6:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,0,1);}   
47B8:  MOVLW  05
47BA:  MOVWF  x3B
47BC:  MOVLW  1A
47BE:  MOVWF  x3A
47C0:  CLRF   x3C
47C2:  MOVLW  32
47C4:  MOVWF  x3D
47C6:  CLRF   x3E
47C8:  MOVLW  01
47CA:  MOVWF  x3F
47CC:  MOVLB  0
47CE:  CALL   1814
....................                           
....................             visual=0; 
47D2:  MOVLB  4
47D4:  BCF    x7C.4
....................          } 
....................          if(UP)//Si oprime hacia arriba 
47D6:  BSF    F92.5
47D8:  BTFSS  F80.5
47DA:  BRA    47F6
....................          {  if(Flanco == 0)  
47DC:  BTFSC  x7C.0
47DE:  BRA    47F4
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
47E0:  BSF    x7C.0
47E2:  MOVLW  1E
47E4:  MOVLB  5
47E6:  MOVWF  x3F
47E8:  MOVLB  0
47EA:  CALL   10EC
47EE:  MOVLB  4
47F0:  DECF   x90,F
47F2:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
47F4:  BRA    47F8
....................                {Flanco = 0;} 
47F6:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
47F8:  BSF    F96.0
47FA:  BTFSS  F84.0
47FC:  BRA    4818
....................          {  if(Flanco2 == 0)  
47FE:  BTFSC  x7C.2
4800:  BRA    4816
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
4802:  BSF    x7C.2
4804:  MOVLW  1E
4806:  MOVLB  5
4808:  MOVWF  x3F
480A:  MOVLB  0
480C:  CALL   10EC
4810:  MOVLB  4
4812:  INCF   x90,F
4814:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
4816:  BRA    481A
....................                {Flanco2 = 0;}   
4818:  BCF    x7C.2
....................                 
....................          if(RIGHT)//Si oprime SET 
481A:  BSF    F96.1
481C:  BTFSS  F84.1
481E:  BRA    4858
....................          {  if(Flanco1 == 0)  
4820:  BTFSC  x7C.1
4822:  BRA    4856
....................                {Flanco1 = 1;delay_ms(300);Menu=Opcion+10;Opcion=1;glcd_fillscreen(OFF);visual=1; 
4824:  BSF    x7C.1
4826:  MOVLW  02
4828:  MOVLB  5
482A:  MOVWF  x3A
482C:  MOVLW  96
482E:  MOVWF  x3F
4830:  MOVLB  0
4832:  CALL   10EC
4836:  MOVLB  5
4838:  DECFSZ x3A,F
483A:  BRA    482C
483C:  MOVLW  0A
483E:  MOVLB  4
4840:  ADDWF  x90,W
4842:  MOVWF  x89
4844:  MOVLW  01
4846:  MOVWF  x90
4848:  MOVLB  5
484A:  CLRF   x3B
484C:  MOVLB  0
484E:  CALL   11E4
4852:  MOVLB  4
4854:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
4856:  BRA    485A
....................                {Flanco1 = 0;}   
4858:  BCF    x7C.1
....................                 
....................          if(LEFT)//Si oprime boton de Toma. 
485A:  BSF    F96.2
485C:  BTFSS  F84.2
485E:  BRA    488A
....................          {delay_ms(700);Menu=1;glcd_fillscreen(OFF);visual=1;} 
4860:  MOVLW  04
4862:  MOVLB  5
4864:  MOVWF  x3A
4866:  MOVLW  AF
4868:  MOVWF  x3F
486A:  MOVLB  0
486C:  CALL   10EC
4870:  MOVLB  5
4872:  DECFSZ x3A,F
4874:  BRA    4866
4876:  MOVLW  01
4878:  MOVLB  4
487A:  MOVWF  x89
487C:  MOVLB  5
487E:  CLRF   x3B
4880:  MOVLB  0
4882:  CALL   11E4
4886:  MOVLB  4
4888:  BSF    x7C.4
....................           
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==9){ // Menu de Cambio de Contraseña 
488A:  MOVF   x89,W
488C:  SUBLW  09
488E:  BTFSS  FD8.2
4890:  BRA    4D46
....................          
....................       strcpy(Menus.Letra,"Clave"); 
4892:  MOVLW  05
4894:  MOVWF  FEA
4896:  MOVLW  1A
4898:  MOVWF  FE9
489A:  MOVFF  FF2,53A
489E:  BCF    FF2.7
48A0:  MOVLW  00
48A2:  MOVLB  0
48A4:  CALL   0764
48A8:  TBLRD*-
48AA:  TBLRD*+
48AC:  MOVF   FF5,W
48AE:  MOVWF  FEE
48B0:  IORLW  00
48B2:  BNZ   48AA
48B4:  MOVLB  5
48B6:  BTFSC  x3A.7
48B8:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
48BA:  MOVLW  05
48BC:  MOVWF  x3B
48BE:  MOVLW  1A
48C0:  MOVWF  x3A
48C2:  MOVLW  1E
48C4:  MOVWF  x3C
48C6:  CLRF   x3D
48C8:  MOVLW  01
48CA:  MOVWF  x3E
48CC:  MOVLW  02
48CE:  MOVWF  x3F
48D0:  MOVLB  0
48D2:  CALL   1814
....................        
....................       if(unidad==1) 
48D6:  MOVLB  4
48D8:  DECFSZ x8A,W
48DA:  BRA    493A
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1); 
48DC:  MOVFF  4B4,53C
48E0:  MOVLW  14
48E2:  MOVLB  5
48E4:  MOVWF  x3D
48E6:  MOVLW  1E
48E8:  MOVWF  x3E
48EA:  MOVLW  01
48EC:  MOVWF  x3F
48EE:  MOVLB  0
48F0:  CALL   1A3A
....................          displayContrasena(Contrasena[1],40,30,0); 
48F4:  MOVFF  4B5,53C
48F8:  MOVLW  28
48FA:  MOVLB  5
48FC:  MOVWF  x3D
48FE:  MOVLW  1E
4900:  MOVWF  x3E
4902:  CLRF   x3F
4904:  MOVLB  0
4906:  CALL   1A3A
....................          displayContrasena(Contrasena[2],60,30,0); 
490A:  MOVFF  4B6,53C
490E:  MOVLW  3C
4910:  MOVLB  5
4912:  MOVWF  x3D
4914:  MOVLW  1E
4916:  MOVWF  x3E
4918:  CLRF   x3F
491A:  MOVLB  0
491C:  CALL   1A3A
....................          displayContrasena(Contrasena[3],80,30,0); 
4920:  MOVFF  4B7,53C
4924:  MOVLW  50
4926:  MOVLB  5
4928:  MOVWF  x3D
492A:  MOVLW  1E
492C:  MOVWF  x3E
492E:  CLRF   x3F
4930:  MOVLB  0
4932:  CALL   1A3A
....................       } 
....................       else 
4936:  BRA    4A62
4938:  MOVLB  4
....................       { 
....................          if(unidad==2) 
493A:  MOVF   x8A,W
493C:  SUBLW  02
493E:  BNZ   499E
....................          { 
....................             displayContrasena(Contrasena[0],20,30,0); 
4940:  MOVFF  4B4,53C
4944:  MOVLW  14
4946:  MOVLB  5
4948:  MOVWF  x3D
494A:  MOVLW  1E
494C:  MOVWF  x3E
494E:  CLRF   x3F
4950:  MOVLB  0
4952:  CALL   1A3A
....................             displayContrasena(Contrasena[1],40,30,1); 
4956:  MOVFF  4B5,53C
495A:  MOVLW  28
495C:  MOVLB  5
495E:  MOVWF  x3D
4960:  MOVLW  1E
4962:  MOVWF  x3E
4964:  MOVLW  01
4966:  MOVWF  x3F
4968:  MOVLB  0
496A:  CALL   1A3A
....................             displayContrasena(Contrasena[2],60,30,0); 
496E:  MOVFF  4B6,53C
4972:  MOVLW  3C
4974:  MOVLB  5
4976:  MOVWF  x3D
4978:  MOVLW  1E
497A:  MOVWF  x3E
497C:  CLRF   x3F
497E:  MOVLB  0
4980:  CALL   1A3A
....................             displayContrasena(Contrasena[3],80,30,0); 
4984:  MOVFF  4B7,53C
4988:  MOVLW  50
498A:  MOVLB  5
498C:  MOVWF  x3D
498E:  MOVLW  1E
4990:  MOVWF  x3E
4992:  CLRF   x3F
4994:  MOVLB  0
4996:  CALL   1A3A
....................          } 
....................          else 
499A:  BRA    4A62
499C:  MOVLB  4
....................          { 
....................             if(unidad==3) 
499E:  MOVF   x8A,W
49A0:  SUBLW  03
49A2:  BNZ   4A02
....................             { 
....................                displayContrasena(Contrasena[0],20,30,0); 
49A4:  MOVFF  4B4,53C
49A8:  MOVLW  14
49AA:  MOVLB  5
49AC:  MOVWF  x3D
49AE:  MOVLW  1E
49B0:  MOVWF  x3E
49B2:  CLRF   x3F
49B4:  MOVLB  0
49B6:  CALL   1A3A
....................                displayContrasena(Contrasena[1],40,30,0); 
49BA:  MOVFF  4B5,53C
49BE:  MOVLW  28
49C0:  MOVLB  5
49C2:  MOVWF  x3D
49C4:  MOVLW  1E
49C6:  MOVWF  x3E
49C8:  CLRF   x3F
49CA:  MOVLB  0
49CC:  CALL   1A3A
....................                displayContrasena(Contrasena[2],60,30,1); 
49D0:  MOVFF  4B6,53C
49D4:  MOVLW  3C
49D6:  MOVLB  5
49D8:  MOVWF  x3D
49DA:  MOVLW  1E
49DC:  MOVWF  x3E
49DE:  MOVLW  01
49E0:  MOVWF  x3F
49E2:  MOVLB  0
49E4:  CALL   1A3A
....................                displayContrasena(Contrasena[3],80,30,0); 
49E8:  MOVFF  4B7,53C
49EC:  MOVLW  50
49EE:  MOVLB  5
49F0:  MOVWF  x3D
49F2:  MOVLW  1E
49F4:  MOVWF  x3E
49F6:  CLRF   x3F
49F8:  MOVLB  0
49FA:  CALL   1A3A
....................             } 
....................             else 
49FE:  BRA    4A62
4A00:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4A02:  MOVF   x8A,W
4A04:  SUBLW  04
4A06:  BNZ   4A64
....................                { 
....................                   displayContrasena(Contrasena[0],20,30,0); 
4A08:  MOVFF  4B4,53C
4A0C:  MOVLW  14
4A0E:  MOVLB  5
4A10:  MOVWF  x3D
4A12:  MOVLW  1E
4A14:  MOVWF  x3E
4A16:  CLRF   x3F
4A18:  MOVLB  0
4A1A:  CALL   1A3A
....................                   displayContrasena(Contrasena[1],40,30,0); 
4A1E:  MOVFF  4B5,53C
4A22:  MOVLW  28
4A24:  MOVLB  5
4A26:  MOVWF  x3D
4A28:  MOVLW  1E
4A2A:  MOVWF  x3E
4A2C:  CLRF   x3F
4A2E:  MOVLB  0
4A30:  CALL   1A3A
....................                   displayContrasena(Contrasena[2],60,30,0); 
4A34:  MOVFF  4B6,53C
4A38:  MOVLW  3C
4A3A:  MOVLB  5
4A3C:  MOVWF  x3D
4A3E:  MOVLW  1E
4A40:  MOVWF  x3E
4A42:  CLRF   x3F
4A44:  MOVLB  0
4A46:  CALL   1A3A
....................                   displayContrasena(Contrasena[3],80,30,1); 
4A4A:  MOVFF  4B7,53C
4A4E:  MOVLW  50
4A50:  MOVLB  5
4A52:  MOVWF  x3D
4A54:  MOVLW  1E
4A56:  MOVWF  x3E
4A58:  MOVLW  01
4A5A:  MOVWF  x3F
4A5C:  MOVLB  0
4A5E:  CALL   1A3A
4A62:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4A64:  BSF    F92.5
4A66:  BTFSS  F80.5
4A68:  BRA    4AD2
....................       { 
....................          if(Flanco == 0) 
4A6A:  BTFSC  x7C.0
4A6C:  BRA    4AD0
....................          { 
....................             Flanco = 1;delay_ms(30); 
4A6E:  BSF    x7C.0
4A70:  MOVLW  1E
4A72:  MOVLB  5
4A74:  MOVWF  x3F
4A76:  MOVLB  0
4A78:  CALL   10EC
....................             for(i=1;i<=4;i++) 
4A7C:  MOVLW  01
4A7E:  MOVLB  4
4A80:  MOVWF  x8D
4A82:  MOVF   x8D,W
4A84:  SUBLW  04
4A86:  BNC   4AD0
....................             { 
....................                if(unidad==i) 
4A88:  MOVF   x8D,W
4A8A:  SUBWF  x8A,W
4A8C:  BNZ   4ACC
....................                { 
....................                   Contrasena[i-1]++; 
4A8E:  MOVLW  01
4A90:  SUBWF  x8D,W
4A92:  CLRF   03
4A94:  ADDLW  B4
4A96:  MOVWF  FE9
4A98:  MOVLW  04
4A9A:  ADDWFC 03,W
4A9C:  MOVWF  FEA
4A9E:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
4AA0:  MOVLW  01
4AA2:  SUBWF  x8D,W
4AA4:  CLRF   03
4AA6:  ADDLW  B4
4AA8:  MOVWF  FE9
4AAA:  MOVLW  04
4AAC:  ADDWFC 03,W
4AAE:  MOVWF  FEA
4AB0:  BTFSC  FEF.7
4AB2:  BRA    4ACC
4AB4:  MOVF   FEF,W
4AB6:  SUBLW  09
4AB8:  BC    4ACC
....................                   { 
....................                      Contrasena[i-1]=0; 
4ABA:  MOVLW  01
4ABC:  SUBWF  x8D,W
4ABE:  CLRF   03
4AC0:  ADDLW  B4
4AC2:  MOVWF  FE9
4AC4:  MOVLW  04
4AC6:  ADDWFC 03,W
4AC8:  MOVWF  FEA
4ACA:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4ACC:  INCF   x8D,F
4ACE:  BRA    4A82
....................          } 
....................       } 
....................       else 
4AD0:  BRA    4AD4
....................       { 
....................          Flanco = 0; 
4AD2:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4AD4:  BSF    F96.0
4AD6:  BTFSS  F84.0
4AD8:  BRA    4B40
....................       { 
....................          if(Flanco2 == 0) 
4ADA:  BTFSC  x7C.2
4ADC:  BRA    4B3E
....................             {Flanco2 = 1;delay_ms(30); 
4ADE:  BSF    x7C.2
4AE0:  MOVLW  1E
4AE2:  MOVLB  5
4AE4:  MOVWF  x3F
4AE6:  MOVLB  0
4AE8:  CALL   10EC
....................                for(i=1;i<=4;i++) 
4AEC:  MOVLW  01
4AEE:  MOVLB  4
4AF0:  MOVWF  x8D
4AF2:  MOVF   x8D,W
4AF4:  SUBLW  04
4AF6:  BNC   4B3E
....................                { 
....................                   if(unidad==i) 
4AF8:  MOVF   x8D,W
4AFA:  SUBWF  x8A,W
4AFC:  BNZ   4B3A
....................                   {Contrasena[i-1]--;  
4AFE:  MOVLW  01
4B00:  SUBWF  x8D,W
4B02:  CLRF   03
4B04:  ADDLW  B4
4B06:  MOVWF  FE9
4B08:  MOVLW  04
4B0A:  ADDWFC 03,W
4B0C:  MOVWF  FEA
4B0E:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
4B10:  MOVLW  01
4B12:  SUBWF  x8D,W
4B14:  CLRF   03
4B16:  ADDLW  B4
4B18:  MOVWF  FE9
4B1A:  MOVLW  04
4B1C:  ADDWFC 03,W
4B1E:  MOVWF  FEA
4B20:  BTFSC  FEF.7
4B22:  BRA    4B26
4B24:  BRA    4B3A
....................                         {Contrasena[i-1]=9;} 
4B26:  MOVLW  01
4B28:  SUBWF  x8D,W
4B2A:  CLRF   03
4B2C:  ADDLW  B4
4B2E:  MOVWF  FE9
4B30:  MOVLW  04
4B32:  ADDWFC 03,W
4B34:  MOVWF  FEA
4B36:  MOVLW  09
4B38:  MOVWF  FEF
....................                   } 
....................                }       
4B3A:  INCF   x8D,F
4B3C:  BRA    4AF2
....................             }      
....................       } 
....................       else 
4B3E:  BRA    4B42
....................       { 
....................          Flanco2 = 0; 
4B40:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4B42:  BSF    F96.1
4B44:  BTFSS  F84.1
4B46:  BRA    4B6A
....................       { 
....................          if(Flanco1 == 0) 
4B48:  BTFSC  x7C.1
4B4A:  BRA    4B68
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4B4C:  BSF    x7C.1
4B4E:  MOVLW  02
4B50:  MOVLB  5
4B52:  MOVWF  x3A
4B54:  MOVLW  96
4B56:  MOVWF  x3F
4B58:  MOVLB  0
4B5A:  CALL   10EC
4B5E:  MOVLB  5
4B60:  DECFSZ x3A,F
4B62:  BRA    4B54
4B64:  MOVLB  4
4B66:  INCF   x8A,F
....................       } 
....................       else 
4B68:  BRA    4B6C
....................       { 
....................          Flanco1 = 0; 
4B6A:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4B6C:  BSF    F96.2
4B6E:  BTFSS  F84.2
4B70:  BRA    4B9A
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
4B72:  MOVLW  04
4B74:  MOVLB  5
4B76:  MOVWF  x3A
4B78:  MOVLW  AF
4B7A:  MOVWF  x3F
4B7C:  MOVLB  0
4B7E:  CALL   10EC
4B82:  MOVLB  5
4B84:  DECFSZ x3A,F
4B86:  BRA    4B78
4B88:  MOVLW  01
4B8A:  MOVLB  4
4B8C:  MOVWF  x89
4B8E:  MOVLB  5
4B90:  CLRF   x3B
4B92:  MOVLB  0
4B94:  CALL   11E4
4B98:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
4B9A:  MOVF   x8A,W
4B9C:  SUBLW  04
4B9E:  BTFSC  FD8.0
4BA0:  BRA    4D46
....................       {glcd_fillScreen(OFF); 
4BA2:  MOVLB  5
4BA4:  CLRF   x3B
4BA6:  MOVLB  0
4BA8:  CALL   11E4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
4BAC:  MOVLB  4
4BAE:  MOVF   xB8,W
4BB0:  SUBWF  xB4,W
4BB2:  BNZ   4C84
4BB4:  MOVF   xB9,W
4BB6:  SUBWF  xB5,W
4BB8:  BNZ   4C84
4BBA:  MOVF   xBA,W
4BBC:  SUBWF  xB6,W
4BBE:  BNZ   4C84
4BC0:  MOVF   xBB,W
4BC2:  SUBWF  xB7,W
4BC4:  BNZ   4C84
....................          { 
....................             glcd_fillScreen(OFF); 
4BC6:  MOVLB  5
4BC8:  CLRF   x3B
4BCA:  MOVLB  0
4BCC:  CALL   11E4
....................             strcpy(Menus.Letra,"Clave"); 
4BD0:  MOVLW  05
4BD2:  MOVWF  FEA
4BD4:  MOVLW  1A
4BD6:  MOVWF  FE9
4BD8:  MOVFF  FF2,53A
4BDC:  BCF    FF2.7
4BDE:  MOVLW  00
4BE0:  CALL   0764
4BE4:  TBLRD*-
4BE6:  TBLRD*+
4BE8:  MOVF   FF5,W
4BEA:  MOVWF  FEE
4BEC:  IORLW  00
4BEE:  BNZ   4BE6
4BF0:  MOVLB  5
4BF2:  BTFSC  x3A.7
4BF4:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4BF6:  MOVLW  05
4BF8:  MOVWF  x3B
4BFA:  MOVLW  1A
4BFC:  MOVWF  x3A
4BFE:  MOVLW  1E
4C00:  MOVWF  x3C
4C02:  CLRF   x3D
4C04:  CLRF   x3E
4C06:  MOVLW  02
4C08:  MOVWF  x3F
4C0A:  MOVLB  0
4C0C:  CALL   1814
....................             strcpy(Menus.Letra,"Correcta"); 
4C10:  MOVLW  05
4C12:  MOVWF  FEA
4C14:  MOVLW  1A
4C16:  MOVWF  FE9
4C18:  MOVFF  FF2,53A
4C1C:  BCF    FF2.7
4C1E:  MOVLW  00
4C20:  CALL   0784
4C24:  TBLRD*-
4C26:  TBLRD*+
4C28:  MOVF   FF5,W
4C2A:  MOVWF  FEE
4C2C:  IORLW  00
4C2E:  BNZ   4C26
4C30:  MOVLB  5
4C32:  BTFSC  x3A.7
4C34:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
4C36:  MOVLW  05
4C38:  MOVWF  x3B
4C3A:  MOVLW  1A
4C3C:  MOVWF  x3A
4C3E:  MOVLW  0F
4C40:  MOVWF  x3C
4C42:  MOVLW  1E
4C44:  MOVWF  x3D
4C46:  CLRF   x3E
4C48:  MOVLW  02
4C4A:  MOVWF  x3F
4C4C:  MOVLB  0
4C4E:  CALL   1814
....................             Menu=91;glcd_update();delay_ms(1000); 
4C52:  MOVLW  5B
4C54:  MOVLB  4
4C56:  MOVWF  x89
4C58:  MOVLB  0
4C5A:  CALL   123E
4C5E:  MOVLW  04
4C60:  MOVLB  5
4C62:  MOVWF  x3A
4C64:  MOVLW  FA
4C66:  MOVWF  x3F
4C68:  MOVLB  0
4C6A:  CALL   10EC
4C6E:  MOVLB  5
4C70:  DECFSZ x3A,F
4C72:  BRA    4C64
....................             glcd_fillScreen(OFF);unidad=1; 
4C74:  CLRF   x3B
4C76:  MOVLB  0
4C78:  CALL   11E4
4C7C:  MOVLW  01
4C7E:  MOVLB  4
4C80:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
4C82:  BRA    4D46
....................          { 
....................             glcd_fillScreen(OFF); 
4C84:  MOVLB  5
4C86:  CLRF   x3B
4C88:  MOVLB  0
4C8A:  CALL   11E4
....................             strcpy(Menus.Letra,"Clave"); 
4C8E:  MOVLW  05
4C90:  MOVWF  FEA
4C92:  MOVLW  1A
4C94:  MOVWF  FE9
4C96:  MOVFF  FF2,53A
4C9A:  BCF    FF2.7
4C9C:  MOVLW  00
4C9E:  CALL   0764
4CA2:  TBLRD*-
4CA4:  TBLRD*+
4CA6:  MOVF   FF5,W
4CA8:  MOVWF  FEE
4CAA:  IORLW  00
4CAC:  BNZ   4CA4
4CAE:  MOVLB  5
4CB0:  BTFSC  x3A.7
4CB2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4CB4:  MOVLW  05
4CB6:  MOVWF  x3B
4CB8:  MOVLW  1A
4CBA:  MOVWF  x3A
4CBC:  MOVLW  1E
4CBE:  MOVWF  x3C
4CC0:  CLRF   x3D
4CC2:  CLRF   x3E
4CC4:  MOVLW  02
4CC6:  MOVWF  x3F
4CC8:  MOVLB  0
4CCA:  CALL   1814
....................             strcpy(Menus.Letra,"Incorrecta"); 
4CCE:  MOVLW  05
4CD0:  MOVWF  FEA
4CD2:  MOVLW  1A
4CD4:  MOVWF  FE9
4CD6:  MOVFF  FF2,53A
4CDA:  BCF    FF2.7
4CDC:  MOVLW  00
4CDE:  CALL   07A8
4CE2:  TBLRD*-
4CE4:  TBLRD*+
4CE6:  MOVF   FF5,W
4CE8:  MOVWF  FEE
4CEA:  IORLW  00
4CEC:  BNZ   4CE4
4CEE:  MOVLB  5
4CF0:  BTFSC  x3A.7
4CF2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
4CF4:  MOVLW  05
4CF6:  MOVWF  x3B
4CF8:  MOVLW  1A
4CFA:  MOVWF  x3A
4CFC:  CLRF   x3C
4CFE:  MOVLW  1E
4D00:  MOVWF  x3D
4D02:  CLRF   x3E
4D04:  MOVLW  02
4D06:  MOVWF  x3F
4D08:  MOVLB  0
4D0A:  CALL   1814
....................             Menu=1;glcd_update();delay_ms(1000); 
4D0E:  MOVLW  01
4D10:  MOVLB  4
4D12:  MOVWF  x89
4D14:  MOVLB  0
4D16:  CALL   123E
4D1A:  MOVLW  04
4D1C:  MOVLB  5
4D1E:  MOVWF  x3A
4D20:  MOVLW  FA
4D22:  MOVWF  x3F
4D24:  MOVLB  0
4D26:  CALL   10EC
4D2A:  MOVLB  5
4D2C:  DECFSZ x3A,F
4D2E:  BRA    4D20
....................             glcd_fillScreen(OFF);unidad=1; 
4D30:  CLRF   x3B
4D32:  MOVLB  0
4D34:  CALL   11E4
4D38:  MOVLW  01
4D3A:  MOVLB  4
4D3C:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
4D3E:  CLRF   xB4
4D40:  CLRF   xB5
4D42:  CLRF   xB6
4D44:  CLRF   xB7
....................          } 
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==91){ // Menu de Cambio de Contraseña 
4D46:  MOVF   x89,W
4D48:  SUBLW  5B
4D4A:  BTFSS  FD8.2
4D4C:  BRA    5126
....................          
....................       strcpy(Menus.Letra,"Clave Nueva"); 
4D4E:  MOVLW  05
4D50:  MOVWF  FEA
4D52:  MOVLW  1A
4D54:  MOVWF  FE9
4D56:  MOVFF  FF2,53A
4D5A:  BCF    FF2.7
4D5C:  MOVLW  00
4D5E:  MOVLB  0
4D60:  CALL   0C48
4D64:  TBLRD*-
4D66:  TBLRD*+
4D68:  MOVF   FF5,W
4D6A:  MOVWF  FEE
4D6C:  IORLW  00
4D6E:  BNZ   4D66
4D70:  MOVLB  5
4D72:  BTFSC  x3A.7
4D74:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2);      
4D76:  MOVLW  05
4D78:  MOVWF  x3B
4D7A:  MOVLW  1A
4D7C:  MOVWF  x3A
4D7E:  CLRF   x3C
4D80:  CLRF   x3D
4D82:  MOVLW  01
4D84:  MOVWF  x3E
4D86:  MOVLW  02
4D88:  MOVWF  x3F
4D8A:  MOVLB  0
4D8C:  CALL   1814
....................        
....................       if(unidad==1) 
4D90:  MOVLB  4
4D92:  DECFSZ x8A,W
4D94:  BRA    4DF4
....................       { 
....................          displayContrasena(Password[0],20,30,1); 
4D96:  MOVFF  4B8,53C
4D9A:  MOVLW  14
4D9C:  MOVLB  5
4D9E:  MOVWF  x3D
4DA0:  MOVLW  1E
4DA2:  MOVWF  x3E
4DA4:  MOVLW  01
4DA6:  MOVWF  x3F
4DA8:  MOVLB  0
4DAA:  CALL   1A3A
....................          displayContrasena(Password[1],40,30,0); 
4DAE:  MOVFF  4B9,53C
4DB2:  MOVLW  28
4DB4:  MOVLB  5
4DB6:  MOVWF  x3D
4DB8:  MOVLW  1E
4DBA:  MOVWF  x3E
4DBC:  CLRF   x3F
4DBE:  MOVLB  0
4DC0:  CALL   1A3A
....................          displayContrasena(Password[2],60,30,0); 
4DC4:  MOVFF  4BA,53C
4DC8:  MOVLW  3C
4DCA:  MOVLB  5
4DCC:  MOVWF  x3D
4DCE:  MOVLW  1E
4DD0:  MOVWF  x3E
4DD2:  CLRF   x3F
4DD4:  MOVLB  0
4DD6:  CALL   1A3A
....................          displayContrasena(Password[3],80,30,0); 
4DDA:  MOVFF  4BB,53C
4DDE:  MOVLW  50
4DE0:  MOVLB  5
4DE2:  MOVWF  x3D
4DE4:  MOVLW  1E
4DE6:  MOVWF  x3E
4DE8:  CLRF   x3F
4DEA:  MOVLB  0
4DEC:  CALL   1A3A
....................       } 
....................       else 
4DF0:  BRA    4F1C
4DF2:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4DF4:  MOVF   x8A,W
4DF6:  SUBLW  02
4DF8:  BNZ   4E58
....................          { 
....................             displayContrasena(Password[0],20,30,0); 
4DFA:  MOVFF  4B8,53C
4DFE:  MOVLW  14
4E00:  MOVLB  5
4E02:  MOVWF  x3D
4E04:  MOVLW  1E
4E06:  MOVWF  x3E
4E08:  CLRF   x3F
4E0A:  MOVLB  0
4E0C:  CALL   1A3A
....................             displayContrasena(Password[1],40,30,1); 
4E10:  MOVFF  4B9,53C
4E14:  MOVLW  28
4E16:  MOVLB  5
4E18:  MOVWF  x3D
4E1A:  MOVLW  1E
4E1C:  MOVWF  x3E
4E1E:  MOVLW  01
4E20:  MOVWF  x3F
4E22:  MOVLB  0
4E24:  CALL   1A3A
....................             displayContrasena(Password[2],60,30,0); 
4E28:  MOVFF  4BA,53C
4E2C:  MOVLW  3C
4E2E:  MOVLB  5
4E30:  MOVWF  x3D
4E32:  MOVLW  1E
4E34:  MOVWF  x3E
4E36:  CLRF   x3F
4E38:  MOVLB  0
4E3A:  CALL   1A3A
....................             displayContrasena(Password[3],80,30,0); 
4E3E:  MOVFF  4BB,53C
4E42:  MOVLW  50
4E44:  MOVLB  5
4E46:  MOVWF  x3D
4E48:  MOVLW  1E
4E4A:  MOVWF  x3E
4E4C:  CLRF   x3F
4E4E:  MOVLB  0
4E50:  CALL   1A3A
....................          } 
....................          else 
4E54:  BRA    4F1C
4E56:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4E58:  MOVF   x8A,W
4E5A:  SUBLW  03
4E5C:  BNZ   4EBC
....................             { 
....................                displayContrasena(Password[0],20,30,0); 
4E5E:  MOVFF  4B8,53C
4E62:  MOVLW  14
4E64:  MOVLB  5
4E66:  MOVWF  x3D
4E68:  MOVLW  1E
4E6A:  MOVWF  x3E
4E6C:  CLRF   x3F
4E6E:  MOVLB  0
4E70:  CALL   1A3A
....................                displayContrasena(Password[1],40,30,0); 
4E74:  MOVFF  4B9,53C
4E78:  MOVLW  28
4E7A:  MOVLB  5
4E7C:  MOVWF  x3D
4E7E:  MOVLW  1E
4E80:  MOVWF  x3E
4E82:  CLRF   x3F
4E84:  MOVLB  0
4E86:  CALL   1A3A
....................                displayContrasena(Password[2],60,30,1); 
4E8A:  MOVFF  4BA,53C
4E8E:  MOVLW  3C
4E90:  MOVLB  5
4E92:  MOVWF  x3D
4E94:  MOVLW  1E
4E96:  MOVWF  x3E
4E98:  MOVLW  01
4E9A:  MOVWF  x3F
4E9C:  MOVLB  0
4E9E:  CALL   1A3A
....................                displayContrasena(Password[3],80,30,0); 
4EA2:  MOVFF  4BB,53C
4EA6:  MOVLW  50
4EA8:  MOVLB  5
4EAA:  MOVWF  x3D
4EAC:  MOVLW  1E
4EAE:  MOVWF  x3E
4EB0:  CLRF   x3F
4EB2:  MOVLB  0
4EB4:  CALL   1A3A
....................             } 
....................             else 
4EB8:  BRA    4F1C
4EBA:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4EBC:  MOVF   x8A,W
4EBE:  SUBLW  04
4EC0:  BNZ   4F1E
....................                { 
....................                   displayContrasena(Password[0],20,30,0); 
4EC2:  MOVFF  4B8,53C
4EC6:  MOVLW  14
4EC8:  MOVLB  5
4ECA:  MOVWF  x3D
4ECC:  MOVLW  1E
4ECE:  MOVWF  x3E
4ED0:  CLRF   x3F
4ED2:  MOVLB  0
4ED4:  CALL   1A3A
....................                   displayContrasena(Password[1],40,30,0); 
4ED8:  MOVFF  4B9,53C
4EDC:  MOVLW  28
4EDE:  MOVLB  5
4EE0:  MOVWF  x3D
4EE2:  MOVLW  1E
4EE4:  MOVWF  x3E
4EE6:  CLRF   x3F
4EE8:  MOVLB  0
4EEA:  CALL   1A3A
....................                   displayContrasena(Password[2],60,30,0); 
4EEE:  MOVFF  4BA,53C
4EF2:  MOVLW  3C
4EF4:  MOVLB  5
4EF6:  MOVWF  x3D
4EF8:  MOVLW  1E
4EFA:  MOVWF  x3E
4EFC:  CLRF   x3F
4EFE:  MOVLB  0
4F00:  CALL   1A3A
....................                   displayContrasena(Password[3],80,30,1); 
4F04:  MOVFF  4BB,53C
4F08:  MOVLW  50
4F0A:  MOVLB  5
4F0C:  MOVWF  x3D
4F0E:  MOVLW  1E
4F10:  MOVWF  x3E
4F12:  MOVLW  01
4F14:  MOVWF  x3F
4F16:  MOVLB  0
4F18:  CALL   1A3A
4F1C:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4F1E:  BSF    F92.5
4F20:  BTFSS  F80.5
4F22:  BRA    4F8C
....................       { 
....................          if(Flanco == 0) 
4F24:  BTFSC  x7C.0
4F26:  BRA    4F8A
....................          { 
....................             Flanco = 1;delay_ms(30); 
4F28:  BSF    x7C.0
4F2A:  MOVLW  1E
4F2C:  MOVLB  5
4F2E:  MOVWF  x3F
4F30:  MOVLB  0
4F32:  CALL   10EC
....................             for(i=1;i<=4;i++) 
4F36:  MOVLW  01
4F38:  MOVLB  4
4F3A:  MOVWF  x8D
4F3C:  MOVF   x8D,W
4F3E:  SUBLW  04
4F40:  BNC   4F8A
....................             { 
....................                if(unidad==i) 
4F42:  MOVF   x8D,W
4F44:  SUBWF  x8A,W
4F46:  BNZ   4F86
....................                { 
....................                   Password[i-1]++; 
4F48:  MOVLW  01
4F4A:  SUBWF  x8D,W
4F4C:  CLRF   03
4F4E:  ADDLW  B8
4F50:  MOVWF  FE9
4F52:  MOVLW  04
4F54:  ADDWFC 03,W
4F56:  MOVWF  FEA
4F58:  INCF   FEF,F
....................                   if(Password[i-1]>9)    
4F5A:  MOVLW  01
4F5C:  SUBWF  x8D,W
4F5E:  CLRF   03
4F60:  ADDLW  B8
4F62:  MOVWF  FE9
4F64:  MOVLW  04
4F66:  ADDWFC 03,W
4F68:  MOVWF  FEA
4F6A:  BTFSC  FEF.7
4F6C:  BRA    4F86
4F6E:  MOVF   FEF,W
4F70:  SUBLW  09
4F72:  BC    4F86
....................                   { 
....................                      Password[i-1]=0; 
4F74:  MOVLW  01
4F76:  SUBWF  x8D,W
4F78:  CLRF   03
4F7A:  ADDLW  B8
4F7C:  MOVWF  FE9
4F7E:  MOVLW  04
4F80:  ADDWFC 03,W
4F82:  MOVWF  FEA
4F84:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4F86:  INCF   x8D,F
4F88:  BRA    4F3C
....................          } 
....................       } 
....................       else 
4F8A:  BRA    4F8E
....................       { 
....................          Flanco = 0; 
4F8C:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4F8E:  BSF    F96.0
4F90:  BTFSS  F84.0
4F92:  BRA    4FFA
....................       { 
....................          if(Flanco2 == 0) 
4F94:  BTFSC  x7C.2
4F96:  BRA    4FF8
....................             {Flanco2 = 1;delay_ms(30); 
4F98:  BSF    x7C.2
4F9A:  MOVLW  1E
4F9C:  MOVLB  5
4F9E:  MOVWF  x3F
4FA0:  MOVLB  0
4FA2:  CALL   10EC
....................                for(i=1;i<=4;i++) 
4FA6:  MOVLW  01
4FA8:  MOVLB  4
4FAA:  MOVWF  x8D
4FAC:  MOVF   x8D,W
4FAE:  SUBLW  04
4FB0:  BNC   4FF8
....................                { 
....................                   if(unidad==i) 
4FB2:  MOVF   x8D,W
4FB4:  SUBWF  x8A,W
4FB6:  BNZ   4FF4
....................                   { 
....................                      Password[i-1]--; 
4FB8:  MOVLW  01
4FBA:  SUBWF  x8D,W
4FBC:  CLRF   03
4FBE:  ADDLW  B8
4FC0:  MOVWF  FE9
4FC2:  MOVLW  04
4FC4:  ADDWFC 03,W
4FC6:  MOVWF  FEA
4FC8:  DECF   FEF,F
....................                      if(Password[i-1]<0) 
4FCA:  MOVLW  01
4FCC:  SUBWF  x8D,W
4FCE:  CLRF   03
4FD0:  ADDLW  B8
4FD2:  MOVWF  FE9
4FD4:  MOVLW  04
4FD6:  ADDWFC 03,W
4FD8:  MOVWF  FEA
4FDA:  BTFSC  FEF.7
4FDC:  BRA    4FE0
4FDE:  BRA    4FF4
....................                      { 
....................                         Password[i-1]=9; 
4FE0:  MOVLW  01
4FE2:  SUBWF  x8D,W
4FE4:  CLRF   03
4FE6:  ADDLW  B8
4FE8:  MOVWF  FE9
4FEA:  MOVLW  04
4FEC:  ADDWFC 03,W
4FEE:  MOVWF  FEA
4FF0:  MOVLW  09
4FF2:  MOVWF  FEF
....................                      } 
....................                   } 
....................                }       
4FF4:  INCF   x8D,F
4FF6:  BRA    4FAC
....................             }      
....................       } 
....................       else 
4FF8:  BRA    4FFC
....................       { 
....................          Flanco2 = 0; 
4FFA:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4FFC:  BSF    F96.1
4FFE:  BTFSS  F84.1
5000:  BRA    5024
....................       { 
....................          if(Flanco1 == 0) 
5002:  BTFSC  x7C.1
5004:  BRA    5022
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
5006:  BSF    x7C.1
5008:  MOVLW  02
500A:  MOVLB  5
500C:  MOVWF  x3A
500E:  MOVLW  96
5010:  MOVWF  x3F
5012:  MOVLB  0
5014:  CALL   10EC
5018:  MOVLB  5
501A:  DECFSZ x3A,F
501C:  BRA    500E
501E:  MOVLB  4
5020:  INCF   x8A,F
....................       } 
....................       else 
5022:  BRA    5026
....................       { 
....................          Flanco1 = 0; 
5024:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
5026:  BSF    F96.2
5028:  BTFSS  F84.2
502A:  BRA    5054
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
502C:  MOVLW  04
502E:  MOVLB  5
5030:  MOVWF  x3A
5032:  MOVLW  AF
5034:  MOVWF  x3F
5036:  MOVLB  0
5038:  CALL   10EC
503C:  MOVLB  5
503E:  DECFSZ x3A,F
5040:  BRA    5032
5042:  MOVLW  01
5044:  MOVLB  4
5046:  MOVWF  x89
5048:  MOVLB  5
504A:  CLRF   x3B
504C:  MOVLB  0
504E:  CALL   11E4
5052:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
5054:  MOVF   x8A,W
5056:  SUBLW  04
5058:  BC    5126
....................       { 
....................          Opcion=1;unidad=1; 
505A:  MOVLW  01
505C:  MOVWF  x90
505E:  MOVWF  x8A
....................          write_eeprom(10,Password[0]);write_eeprom(11,Password[1]);write_eeprom(12,Password[2]);write_eeprom(13,Password[3]); 
5060:  MOVLW  0A
5062:  MOVWF  FA9
5064:  MOVFF  4B8,FA8
5068:  BCF    FA6.6
506A:  BCF    FA6.7
506C:  BSF    FA6.2
506E:  MOVF   FF2,W
5070:  MOVWF  00
5072:  BCF    FF2.7
5074:  MOVLB  F
5076:  MOVLW  55
5078:  MOVWF  FA7
507A:  MOVLW  AA
507C:  MOVWF  FA7
507E:  BSF    FA6.1
5080:  BTFSC  FA6.1
5082:  BRA    5080
5084:  BCF    FA6.2
5086:  MOVF   00,W
5088:  IORWF  FF2,F
508A:  MOVLW  0B
508C:  MOVWF  FA9
508E:  MOVFF  4B9,FA8
5092:  BCF    FA6.6
5094:  BCF    FA6.7
5096:  BSF    FA6.2
5098:  MOVF   FF2,W
509A:  MOVWF  00
509C:  BCF    FF2.7
509E:  MOVLW  55
50A0:  MOVWF  FA7
50A2:  MOVLW  AA
50A4:  MOVWF  FA7
50A6:  BSF    FA6.1
50A8:  BTFSC  FA6.1
50AA:  BRA    50A8
50AC:  BCF    FA6.2
50AE:  MOVF   00,W
50B0:  IORWF  FF2,F
50B2:  MOVLW  0C
50B4:  MOVWF  FA9
50B6:  MOVFF  4BA,FA8
50BA:  BCF    FA6.6
50BC:  BCF    FA6.7
50BE:  BSF    FA6.2
50C0:  MOVF   FF2,W
50C2:  MOVWF  00
50C4:  BCF    FF2.7
50C6:  MOVLW  55
50C8:  MOVWF  FA7
50CA:  MOVLW  AA
50CC:  MOVWF  FA7
50CE:  BSF    FA6.1
50D0:  BTFSC  FA6.1
50D2:  BRA    50D0
50D4:  BCF    FA6.2
50D6:  MOVF   00,W
50D8:  IORWF  FF2,F
50DA:  MOVLW  0D
50DC:  MOVWF  FA9
50DE:  MOVFF  4BB,FA8
50E2:  BCF    FA6.6
50E4:  BCF    FA6.7
50E6:  BSF    FA6.2
50E8:  MOVF   FF2,W
50EA:  MOVWF  00
50EC:  BCF    FF2.7
50EE:  MOVLW  55
50F0:  MOVWF  FA7
50F2:  MOVLW  AA
50F4:  MOVWF  FA7
50F6:  BSF    FA6.1
50F8:  BTFSC  FA6.1
50FA:  BRA    50F8
50FC:  BCF    FA6.2
50FE:  MOVF   00,W
5100:  IORWF  FF2,F
....................          delay_ms(1000);glcd_fillScreen(OFF);Menu=1; 
5102:  MOVLW  04
5104:  MOVLB  5
5106:  MOVWF  x3A
5108:  MOVLW  FA
510A:  MOVWF  x3F
510C:  MOVLB  0
510E:  CALL   10EC
5112:  MOVLB  5
5114:  DECFSZ x3A,F
5116:  BRA    5108
5118:  CLRF   x3B
511A:  MOVLB  0
511C:  CALL   11E4
5120:  MOVLW  01
5122:  MOVLB  4
5124:  MOVWF  x89
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==11){ // Menu de Tiempo de Esterilización 
5126:  MOVF   x89,W
5128:  SUBLW  0B
512A:  BTFSS  FD8.2
512C:  BRA    542E
....................       
....................       if(visual==1) 
512E:  BTFSS  x7C.4
5130:  BRA    52BC
....................       { 
....................          if(unidad<1) 
5132:  MOVF   x8A,F
5134:  BNZ   513A
....................          {unidad=4;} 
5136:  MOVLW  04
5138:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra,"T. Ester."); 
513A:  MOVLW  05
513C:  MOVWF  FEA
513E:  MOVLW  1A
5140:  MOVWF  FE9
5142:  MOVFF  FF2,53A
5146:  BCF    FF2.7
5148:  MOVLW  00
514A:  MOVLB  0
514C:  CALL   0C6E
5150:  TBLRD*-
5152:  TBLRD*+
5154:  MOVF   FF5,W
5156:  MOVWF  FEE
5158:  IORLW  00
515A:  BNZ   5152
515C:  MOVLB  5
515E:  BTFSC  x3A.7
5160:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5162:  MOVLW  05
5164:  MOVWF  x3B
5166:  MOVLW  1A
5168:  MOVWF  x3A
516A:  CLRF   x3C
516C:  CLRF   x3D
516E:  MOVLW  01
5170:  MOVWF  x3E
5172:  MOVLW  02
5174:  MOVWF  x3F
5176:  MOVLB  0
5178:  CALL   1814
....................           
....................          if(unidad==4) 
517C:  MOVLB  4
517E:  MOVF   x8A,W
5180:  SUBLW  04
5182:  BNZ   51A2
....................          {displayTiempo(Testerilizacionp[3],20,40,1,2);} 
5184:  MOVFF  4AB,53B
5188:  MOVLW  14
518A:  MOVLB  5
518C:  MOVWF  x3C
518E:  MOVLW  28
5190:  MOVWF  x3D
5192:  MOVLW  01
5194:  MOVWF  x3E
5196:  MOVLW  02
5198:  MOVWF  x3F
519A:  MOVLB  0
519C:  CALL   23EC
....................          else 
51A0:  BRA    51BC
....................          {displayTiempo(Testerilizacionp[3],20,40,0,2);} 
51A2:  MOVFF  4AB,53B
51A6:  MOVLW  14
51A8:  MOVLB  5
51AA:  MOVWF  x3C
51AC:  MOVLW  28
51AE:  MOVWF  x3D
51B0:  CLRF   x3E
51B2:  MOVLW  02
51B4:  MOVWF  x3F
51B6:  MOVLB  0
51B8:  CALL   23EC
....................           
....................          if(unidad==3) 
51BC:  MOVLB  4
51BE:  MOVF   x8A,W
51C0:  SUBLW  03
51C2:  BNZ   51E0
....................          {displayTiempo(Testerilizacionp[2],40,40,1,2);} 
51C4:  MOVFF  4AA,53B
51C8:  MOVLW  28
51CA:  MOVLB  5
51CC:  MOVWF  x3C
51CE:  MOVWF  x3D
51D0:  MOVLW  01
51D2:  MOVWF  x3E
51D4:  MOVLW  02
51D6:  MOVWF  x3F
51D8:  MOVLB  0
51DA:  CALL   23EC
....................          else 
51DE:  BRA    51F8
....................          {displayTiempo(Testerilizacionp[2],40,40,0,2);} 
51E0:  MOVFF  4AA,53B
51E4:  MOVLW  28
51E6:  MOVLB  5
51E8:  MOVWF  x3C
51EA:  MOVWF  x3D
51EC:  CLRF   x3E
51EE:  MOVLW  02
51F0:  MOVWF  x3F
51F2:  MOVLB  0
51F4:  CALL   23EC
....................           
....................          if(unidad==2) 
51F8:  MOVLB  4
51FA:  MOVF   x8A,W
51FC:  SUBLW  02
51FE:  BNZ   521E
....................          {displayTiempo(Testerilizacionp[1],70,40,1,2);} 
5200:  MOVFF  4A9,53B
5204:  MOVLW  46
5206:  MOVLB  5
5208:  MOVWF  x3C
520A:  MOVLW  28
520C:  MOVWF  x3D
520E:  MOVLW  01
5210:  MOVWF  x3E
5212:  MOVLW  02
5214:  MOVWF  x3F
5216:  MOVLB  0
5218:  CALL   23EC
....................          else 
521C:  BRA    5238
....................          {displayTiempo(Testerilizacionp[1],70,40,0,2);} 
521E:  MOVFF  4A9,53B
5222:  MOVLW  46
5224:  MOVLB  5
5226:  MOVWF  x3C
5228:  MOVLW  28
522A:  MOVWF  x3D
522C:  CLRF   x3E
522E:  MOVLW  02
5230:  MOVWF  x3F
5232:  MOVLB  0
5234:  CALL   23EC
....................           
....................          if(unidad==1) 
5238:  MOVLB  4
523A:  DECFSZ x8A,W
523C:  BRA    525C
....................          {displayTiempo(Testerilizacionp[0],90,40,1,2);} 
523E:  MOVFF  4A8,53B
5242:  MOVLW  5A
5244:  MOVLB  5
5246:  MOVWF  x3C
5248:  MOVLW  28
524A:  MOVWF  x3D
524C:  MOVLW  01
524E:  MOVWF  x3E
5250:  MOVLW  02
5252:  MOVWF  x3F
5254:  MOVLB  0
5256:  CALL   23EC
....................          else 
525A:  BRA    5276
....................          {displayTiempo(Testerilizacionp[0],90,40,0,2);} 
525C:  MOVFF  4A8,53B
5260:  MOVLW  5A
5262:  MOVLB  5
5264:  MOVWF  x3C
5266:  MOVLW  28
5268:  MOVWF  x3D
526A:  CLRF   x3E
526C:  MOVLW  02
526E:  MOVWF  x3F
5270:  MOVLB  0
5272:  CALL   23EC
....................           
....................          strcpy(Menus.Letra,":"); 
5276:  MOVLW  05
5278:  MOVWF  FEA
527A:  MOVLW  1A
527C:  MOVWF  FE9
527E:  MOVFF  FF2,53A
5282:  BCF    FF2.7
5284:  MOVLW  00
5286:  CALL   06CA
528A:  TBLRD*-
528C:  TBLRD*+
528E:  MOVF   FF5,W
5290:  MOVWF  FEE
5292:  IORLW  00
5294:  BNZ   528C
5296:  MOVLB  5
5298:  BTFSC  x3A.7
529A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);      
529C:  MOVLW  05
529E:  MOVWF  x3B
52A0:  MOVLW  1A
52A2:  MOVWF  x3A
52A4:  MOVLW  3C
52A6:  MOVWF  x3C
52A8:  MOVLW  2A
52AA:  MOVWF  x3D
52AC:  MOVLW  02
52AE:  MOVWF  x3E
52B0:  MOVWF  x3F
52B2:  MOVLB  0
52B4:  CALL   1814
....................           
....................          visual=0; 
52B8:  MOVLB  4
52BA:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
52BC:  BSF    F92.5
52BE:  BTFSS  F80.5
52C0:  BRA    52FE
....................          {   
....................             if(Testerilizacionp[unidad-1]<9) 
52C2:  MOVLW  01
52C4:  SUBWF  x8A,W
52C6:  CLRF   03
52C8:  ADDLW  A8
52CA:  MOVWF  FE9
52CC:  MOVLW  04
52CE:  ADDWFC 03,W
52D0:  MOVWF  FEA
52D2:  BTFSC  FEF.7
52D4:  BRA    52DC
52D6:  MOVF   FEF,W
52D8:  SUBLW  08
52DA:  BNC   52FE
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]++;visual=1; 
52DC:  MOVLW  1E
52DE:  MOVLB  5
52E0:  MOVWF  x3F
52E2:  MOVLB  0
52E4:  CALL   10EC
52E8:  MOVLW  01
52EA:  MOVLB  4
52EC:  SUBWF  x8A,W
52EE:  CLRF   03
52F0:  ADDLW  A8
52F2:  MOVWF  FE9
52F4:  MOVLW  04
52F6:  ADDWFC 03,W
52F8:  MOVWF  FEA
52FA:  INCF   FEF,F
52FC:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
52FE:  BSF    F96.0
5300:  BTFSS  F84.0
5302:  BRA    5340
....................          {   
....................             if(Testerilizacionp[unidad-1]>0) 
5304:  MOVLW  01
5306:  SUBWF  x8A,W
5308:  CLRF   03
530A:  ADDLW  A8
530C:  MOVWF  FE9
530E:  MOVLW  04
5310:  ADDWFC 03,W
5312:  MOVWF  FEA
5314:  BTFSC  FEF.7
5316:  BRA    5340
5318:  MOVF   FEF,W
531A:  SUBLW  00
531C:  BC    5340
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]--;visual=1;      
531E:  MOVLW  1E
5320:  MOVLB  5
5322:  MOVWF  x3F
5324:  MOVLB  0
5326:  CALL   10EC
532A:  MOVLW  01
532C:  MOVLB  4
532E:  SUBWF  x8A,W
5330:  CLRF   03
5332:  ADDLW  A8
5334:  MOVWF  FE9
5336:  MOVLW  04
5338:  ADDWFC 03,W
533A:  MOVWF  FEA
533C:  DECF   FEF,F
533E:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5340:  BSF    F96.1
5342:  BTFSS  F84.1
5344:  BRA    5358
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
5346:  MOVLW  1E
5348:  MOVLB  5
534A:  MOVWF  x3F
534C:  MOVLB  0
534E:  CALL   10EC
5352:  MOVLB  4
5354:  DECF   x8A,F
5356:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5358:  BSF    F96.2
535A:  BTFSS  F84.2
535C:  BRA    542E
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
535E:  MOVLW  04
5360:  MOVLB  5
5362:  MOVWF  x3A
5364:  MOVLW  AF
5366:  MOVWF  x3F
5368:  MOVLB  0
536A:  CALL   10EC
536E:  MOVLB  5
5370:  DECFSZ x3A,F
5372:  BRA    5364
5374:  MOVLW  08
5376:  MOVLB  4
5378:  MOVWF  x89
537A:  MOVLB  5
537C:  CLRF   x3B
537E:  MOVLB  0
5380:  CALL   11E4
5384:  MOVLW  01
5386:  MOVLB  4
5388:  MOVWF  x90
538A:  BSF    x7C.4
....................             write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]); 
538C:  CLRF   FA9
538E:  MOVFF  4A8,FA8
5392:  BCF    FA6.6
5394:  BCF    FA6.7
5396:  BSF    FA6.2
5398:  MOVF   FF2,W
539A:  MOVWF  00
539C:  BCF    FF2.7
539E:  MOVLB  F
53A0:  MOVLW  55
53A2:  MOVWF  FA7
53A4:  MOVLW  AA
53A6:  MOVWF  FA7
53A8:  BSF    FA6.1
53AA:  BTFSC  FA6.1
53AC:  BRA    53AA
53AE:  BCF    FA6.2
53B0:  MOVF   00,W
53B2:  IORWF  FF2,F
53B4:  MOVLW  01
53B6:  MOVWF  FA9
53B8:  MOVFF  4A9,FA8
53BC:  BCF    FA6.6
53BE:  BCF    FA6.7
53C0:  BSF    FA6.2
53C2:  MOVF   FF2,W
53C4:  MOVWF  00
53C6:  BCF    FF2.7
53C8:  MOVLW  55
53CA:  MOVWF  FA7
53CC:  MOVLW  AA
53CE:  MOVWF  FA7
53D0:  BSF    FA6.1
53D2:  BTFSC  FA6.1
53D4:  BRA    53D2
53D6:  BCF    FA6.2
53D8:  MOVF   00,W
53DA:  IORWF  FF2,F
....................             write_eeprom(2,Testerilizacionp[2]);write_eeprom(3,Testerilizacionp[3]); 
53DC:  MOVLW  02
53DE:  MOVWF  FA9
53E0:  MOVFF  4AA,FA8
53E4:  BCF    FA6.6
53E6:  BCF    FA6.7
53E8:  BSF    FA6.2
53EA:  MOVFF  FF2,00
53EE:  BCF    FF2.7
53F0:  MOVLW  55
53F2:  MOVWF  FA7
53F4:  MOVLW  AA
53F6:  MOVWF  FA7
53F8:  BSF    FA6.1
53FA:  BTFSC  FA6.1
53FC:  BRA    53FA
53FE:  BCF    FA6.2
5400:  MOVF   00,W
5402:  IORWF  FF2,F
5404:  MOVLW  03
5406:  MOVWF  FA9
5408:  MOVFF  4AB,FA8
540C:  BCF    FA6.6
540E:  BCF    FA6.7
5410:  BSF    FA6.2
5412:  MOVFF  FF2,00
5416:  BCF    FF2.7
5418:  MOVLW  55
541A:  MOVWF  FA7
541C:  MOVLW  AA
541E:  MOVWF  FA7
5420:  BSF    FA6.1
5422:  BTFSC  FA6.1
5424:  BRA    5422
5426:  BCF    FA6.2
5428:  MOVF   00,W
542A:  IORWF  FF2,F
542C:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==12){ // Menu de Tiempo de Secado 
542E:  MOVF   x89,W
5430:  SUBLW  0C
5432:  BTFSS  FD8.2
5434:  BRA    5738
....................       
....................       if(visual==1) 
5436:  BTFSS  x7C.4
5438:  BRA    55C4
....................       { 
....................          if(unidad<1) 
543A:  MOVF   x8A,F
543C:  BNZ   5442
....................          {unidad=4;} 
543E:  MOVLW  04
5440:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra," Secado"); 
5442:  MOVLW  05
5444:  MOVWF  FEA
5446:  MOVLW  1A
5448:  MOVWF  FE9
544A:  MOVFF  FF2,53A
544E:  BCF    FF2.7
5450:  MOVLW  00
5452:  MOVLB  0
5454:  CALL   0C92
5458:  TBLRD*-
545A:  TBLRD*+
545C:  MOVF   FF5,W
545E:  MOVWF  FEE
5460:  IORLW  00
5462:  BNZ   545A
5464:  MOVLB  5
5466:  BTFSC  x3A.7
5468:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
546A:  MOVLW  05
546C:  MOVWF  x3B
546E:  MOVLW  1A
5470:  MOVWF  x3A
5472:  CLRF   x3C
5474:  CLRF   x3D
5476:  MOVLW  01
5478:  MOVWF  x3E
547A:  MOVLW  02
547C:  MOVWF  x3F
547E:  MOVLB  0
5480:  CALL   1814
....................           
....................          if(unidad==4) 
5484:  MOVLB  4
5486:  MOVF   x8A,W
5488:  SUBLW  04
548A:  BNZ   54AA
....................          {displayTiempo(Tsecadop[3],20,40,1,2);} 
548C:  MOVFF  4B3,53B
5490:  MOVLW  14
5492:  MOVLB  5
5494:  MOVWF  x3C
5496:  MOVLW  28
5498:  MOVWF  x3D
549A:  MOVLW  01
549C:  MOVWF  x3E
549E:  MOVLW  02
54A0:  MOVWF  x3F
54A2:  MOVLB  0
54A4:  CALL   23EC
....................          else 
54A8:  BRA    54C4
....................          {displayTiempo(Tsecadop[3],20,40,0,2);} 
54AA:  MOVFF  4B3,53B
54AE:  MOVLW  14
54B0:  MOVLB  5
54B2:  MOVWF  x3C
54B4:  MOVLW  28
54B6:  MOVWF  x3D
54B8:  CLRF   x3E
54BA:  MOVLW  02
54BC:  MOVWF  x3F
54BE:  MOVLB  0
54C0:  CALL   23EC
....................           
....................          if(unidad==3) 
54C4:  MOVLB  4
54C6:  MOVF   x8A,W
54C8:  SUBLW  03
54CA:  BNZ   54E8
....................          {displayTiempo(Tsecadop[2],40,40,1,2);} 
54CC:  MOVFF  4B2,53B
54D0:  MOVLW  28
54D2:  MOVLB  5
54D4:  MOVWF  x3C
54D6:  MOVWF  x3D
54D8:  MOVLW  01
54DA:  MOVWF  x3E
54DC:  MOVLW  02
54DE:  MOVWF  x3F
54E0:  MOVLB  0
54E2:  CALL   23EC
....................          else 
54E6:  BRA    5500
....................          {displayTiempo(Tsecadop[2],40,40,0,2);} 
54E8:  MOVFF  4B2,53B
54EC:  MOVLW  28
54EE:  MOVLB  5
54F0:  MOVWF  x3C
54F2:  MOVWF  x3D
54F4:  CLRF   x3E
54F6:  MOVLW  02
54F8:  MOVWF  x3F
54FA:  MOVLB  0
54FC:  CALL   23EC
....................           
....................          if(unidad==2) 
5500:  MOVLB  4
5502:  MOVF   x8A,W
5504:  SUBLW  02
5506:  BNZ   5526
....................          {displayTiempo(Tsecadop[1],70,40,1,2);} 
5508:  MOVFF  4B1,53B
550C:  MOVLW  46
550E:  MOVLB  5
5510:  MOVWF  x3C
5512:  MOVLW  28
5514:  MOVWF  x3D
5516:  MOVLW  01
5518:  MOVWF  x3E
551A:  MOVLW  02
551C:  MOVWF  x3F
551E:  MOVLB  0
5520:  CALL   23EC
....................          else 
5524:  BRA    5540
....................          {displayTiempo(Tsecadop[1],70,40,0,2);} 
5526:  MOVFF  4B1,53B
552A:  MOVLW  46
552C:  MOVLB  5
552E:  MOVWF  x3C
5530:  MOVLW  28
5532:  MOVWF  x3D
5534:  CLRF   x3E
5536:  MOVLW  02
5538:  MOVWF  x3F
553A:  MOVLB  0
553C:  CALL   23EC
....................           
....................          if(unidad==1) 
5540:  MOVLB  4
5542:  DECFSZ x8A,W
5544:  BRA    5564
....................          {displayTiempo(Tsecadop[0],90,40,1,2);} 
5546:  MOVFF  4B0,53B
554A:  MOVLW  5A
554C:  MOVLB  5
554E:  MOVWF  x3C
5550:  MOVLW  28
5552:  MOVWF  x3D
5554:  MOVLW  01
5556:  MOVWF  x3E
5558:  MOVLW  02
555A:  MOVWF  x3F
555C:  MOVLB  0
555E:  CALL   23EC
....................          else 
5562:  BRA    557E
....................          {displayTiempo(Tsecadop[0],90,40,0,2);} 
5564:  MOVFF  4B0,53B
5568:  MOVLW  5A
556A:  MOVLB  5
556C:  MOVWF  x3C
556E:  MOVLW  28
5570:  MOVWF  x3D
5572:  CLRF   x3E
5574:  MOVLW  02
5576:  MOVWF  x3F
5578:  MOVLB  0
557A:  CALL   23EC
....................           
....................          strcpy(Menus.Letra,":"); 
557E:  MOVLW  05
5580:  MOVWF  FEA
5582:  MOVLW  1A
5584:  MOVWF  FE9
5586:  MOVFF  FF2,53A
558A:  BCF    FF2.7
558C:  MOVLW  00
558E:  CALL   06CA
5592:  TBLRD*-
5594:  TBLRD*+
5596:  MOVF   FF5,W
5598:  MOVWF  FEE
559A:  IORLW  00
559C:  BNZ   5594
559E:  MOVLB  5
55A0:  BTFSC  x3A.7
55A2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);  
55A4:  MOVLW  05
55A6:  MOVWF  x3B
55A8:  MOVLW  1A
55AA:  MOVWF  x3A
55AC:  MOVLW  3C
55AE:  MOVWF  x3C
55B0:  MOVLW  2A
55B2:  MOVWF  x3D
55B4:  MOVLW  02
55B6:  MOVWF  x3E
55B8:  MOVWF  x3F
55BA:  MOVLB  0
55BC:  CALL   1814
....................           
....................          visual=0; 
55C0:  MOVLB  4
55C2:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
55C4:  BSF    F92.5
55C6:  BTFSS  F80.5
55C8:  BRA    5606
....................          {   
....................             if(Tsecadop[unidad-1]<9) 
55CA:  MOVLW  01
55CC:  SUBWF  x8A,W
55CE:  CLRF   03
55D0:  ADDLW  B0
55D2:  MOVWF  FE9
55D4:  MOVLW  04
55D6:  ADDWFC 03,W
55D8:  MOVWF  FEA
55DA:  BTFSC  FEF.7
55DC:  BRA    55E4
55DE:  MOVF   FEF,W
55E0:  SUBLW  08
55E2:  BNC   5606
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]++;visual=1; 
55E4:  MOVLW  1E
55E6:  MOVLB  5
55E8:  MOVWF  x3F
55EA:  MOVLB  0
55EC:  CALL   10EC
55F0:  MOVLW  01
55F2:  MOVLB  4
55F4:  SUBWF  x8A,W
55F6:  CLRF   03
55F8:  ADDLW  B0
55FA:  MOVWF  FE9
55FC:  MOVLW  04
55FE:  ADDWFC 03,W
5600:  MOVWF  FEA
5602:  INCF   FEF,F
5604:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5606:  BSF    F96.0
5608:  BTFSS  F84.0
560A:  BRA    5648
....................          {   
....................             if(Tsecadop[unidad-1]>0) 
560C:  MOVLW  01
560E:  SUBWF  x8A,W
5610:  CLRF   03
5612:  ADDLW  B0
5614:  MOVWF  FE9
5616:  MOVLW  04
5618:  ADDWFC 03,W
561A:  MOVWF  FEA
561C:  BTFSC  FEF.7
561E:  BRA    5648
5620:  MOVF   FEF,W
5622:  SUBLW  00
5624:  BC    5648
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]--;visual=1;      
5626:  MOVLW  1E
5628:  MOVLB  5
562A:  MOVWF  x3F
562C:  MOVLB  0
562E:  CALL   10EC
5632:  MOVLW  01
5634:  MOVLB  4
5636:  SUBWF  x8A,W
5638:  CLRF   03
563A:  ADDLW  B0
563C:  MOVWF  FE9
563E:  MOVLW  04
5640:  ADDWFC 03,W
5642:  MOVWF  FEA
5644:  DECF   FEF,F
5646:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5648:  BSF    F96.1
564A:  BTFSS  F84.1
564C:  BRA    5660
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
564E:  MOVLW  1E
5650:  MOVLB  5
5652:  MOVWF  x3F
5654:  MOVLB  0
5656:  CALL   10EC
565A:  MOVLB  4
565C:  DECF   x8A,F
565E:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5660:  BSF    F96.2
5662:  BTFSS  F84.2
5664:  BRA    5738
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5666:  MOVLW  04
5668:  MOVLB  5
566A:  MOVWF  x3A
566C:  MOVLW  AF
566E:  MOVWF  x3F
5670:  MOVLB  0
5672:  CALL   10EC
5676:  MOVLB  5
5678:  DECFSZ x3A,F
567A:  BRA    566C
567C:  MOVLW  08
567E:  MOVLB  4
5680:  MOVWF  x89
5682:  MOVLB  5
5684:  CLRF   x3B
5686:  MOVLB  0
5688:  CALL   11E4
568C:  MOVLW  01
568E:  MOVLB  4
5690:  MOVWF  x90
5692:  BSF    x7C.4
....................             write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]); 
5694:  MOVLW  04
5696:  MOVWF  FA9
5698:  MOVFF  4B0,FA8
569C:  BCF    FA6.6
569E:  BCF    FA6.7
56A0:  BSF    FA6.2
56A2:  MOVF   FF2,W
56A4:  MOVWF  00
56A6:  BCF    FF2.7
56A8:  MOVLB  F
56AA:  MOVLW  55
56AC:  MOVWF  FA7
56AE:  MOVLW  AA
56B0:  MOVWF  FA7
56B2:  BSF    FA6.1
56B4:  BTFSC  FA6.1
56B6:  BRA    56B4
56B8:  BCF    FA6.2
56BA:  MOVF   00,W
56BC:  IORWF  FF2,F
56BE:  MOVLW  05
56C0:  MOVWF  FA9
56C2:  MOVFF  4B1,FA8
56C6:  BCF    FA6.6
56C8:  BCF    FA6.7
56CA:  BSF    FA6.2
56CC:  MOVF   FF2,W
56CE:  MOVWF  00
56D0:  BCF    FF2.7
56D2:  MOVLW  55
56D4:  MOVWF  FA7
56D6:  MOVLW  AA
56D8:  MOVWF  FA7
56DA:  BSF    FA6.1
56DC:  BTFSC  FA6.1
56DE:  BRA    56DC
56E0:  BCF    FA6.2
56E2:  MOVF   00,W
56E4:  IORWF  FF2,F
....................             write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
56E6:  MOVLW  06
56E8:  MOVWF  FA9
56EA:  MOVFF  4B2,FA8
56EE:  BCF    FA6.6
56F0:  BCF    FA6.7
56F2:  BSF    FA6.2
56F4:  MOVFF  FF2,00
56F8:  BCF    FF2.7
56FA:  MOVLW  55
56FC:  MOVWF  FA7
56FE:  MOVLW  AA
5700:  MOVWF  FA7
5702:  BSF    FA6.1
5704:  BTFSC  FA6.1
5706:  BRA    5704
5708:  BCF    FA6.2
570A:  MOVF   00,W
570C:  IORWF  FF2,F
570E:  MOVLW  07
5710:  MOVWF  FA9
5712:  MOVFF  4B3,FA8
5716:  BCF    FA6.6
5718:  BCF    FA6.7
571A:  BSF    FA6.2
571C:  MOVFF  FF2,00
5720:  BCF    FF2.7
5722:  MOVLW  55
5724:  MOVWF  FA7
5726:  MOVLW  AA
5728:  MOVWF  FA7
572A:  BSF    FA6.1
572C:  BTFSC  FA6.1
572E:  BRA    572C
5730:  BCF    FA6.2
5732:  MOVF   00,W
5734:  IORWF  FF2,F
5736:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==13){ // Menu de Temperatura 
5738:  MOVF   x89,W
573A:  SUBLW  0D
573C:  BTFSS  FD8.2
573E:  BRA    5876
....................       
....................       if(visual==1) 
5740:  BTFSS  x7C.4
5742:  BRA    57AA
....................       { 
....................          glcd_fillScreen(OFF); 
5744:  MOVLB  5
5746:  CLRF   x3B
5748:  MOVLB  0
574A:  CALL   11E4
....................          strcpy(Menus.Letra,"Temperatura"); 
574E:  MOVLW  05
5750:  MOVWF  FEA
5752:  MOVLW  1A
5754:  MOVWF  FE9
5756:  MOVFF  FF2,53A
575A:  BCF    FF2.7
575C:  MOVLW  00
575E:  CALL   0BD2
5762:  TBLRD*-
5764:  TBLRD*+
5766:  MOVF   FF5,W
5768:  MOVWF  FEE
576A:  IORLW  00
576C:  BNZ   5764
576E:  MOVLB  5
5770:  BTFSC  x3A.7
5772:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5774:  MOVLW  05
5776:  MOVWF  x3B
5778:  MOVLW  1A
577A:  MOVWF  x3A
577C:  CLRF   x3C
577E:  CLRF   x3D
5780:  MOVLW  01
5782:  MOVWF  x3E
5784:  MOVLW  02
5786:  MOVWF  x3F
5788:  MOVLB  0
578A:  CALL   1814
....................           
....................          displayTiempo(Setpoint,30,30,0,3); 
578E:  MOVFF  48E,53B
5792:  MOVLW  1E
5794:  MOVLB  5
5796:  MOVWF  x3C
5798:  MOVWF  x3D
579A:  CLRF   x3E
579C:  MOVLW  03
579E:  MOVWF  x3F
57A0:  MOVLB  0
57A2:  CALL   23EC
....................           
....................          visual=0; 
57A6:  MOVLB  4
57A8:  BCF    x7C.4
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
57AA:  BSF    F92.5
57AC:  BTFSS  F80.5
57AE:  BRA    57E2
....................          {   
....................             if(Setpoint<134) 
57B0:  MOVF   x8E,W
57B2:  SUBLW  85
57B4:  BNC   57E2
....................             { 
....................                if(Setpoint<100) 
57B6:  MOVF   x8E,W
57B8:  SUBLW  63
57BA:  BNC   57D0
....................                { 
....................                   Setpoint=100;delay_ms(100);visual=1; 
57BC:  MOVLW  64
57BE:  MOVWF  x8E
57C0:  MOVLB  5
57C2:  MOVWF  x3F
57C4:  MOVLB  0
57C6:  CALL   10EC
57CA:  MOVLB  4
57CC:  BSF    x7C.4
....................                } 
....................                else 
57CE:  BRA    57E2
....................                { 
....................                   delay_ms(30);Setpoint++;visual=1; 
57D0:  MOVLW  1E
57D2:  MOVLB  5
57D4:  MOVWF  x3F
57D6:  MOVLB  0
57D8:  CALL   10EC
57DC:  MOVLB  4
57DE:  INCF   x8E,F
57E0:  BSF    x7C.4
....................                } 
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
57E2:  BSF    F96.0
57E4:  BTFSS  F84.0
57E6:  BRA    5800
....................          {   
....................             if(Setpoint>105) 
57E8:  MOVF   x8E,W
57EA:  SUBLW  69
57EC:  BC    5800
....................             { 
....................                delay_ms(30);Setpoint--;visual=1;      
57EE:  MOVLW  1E
57F0:  MOVLB  5
57F2:  MOVWF  x3F
57F4:  MOVLB  0
57F6:  CALL   10EC
57FA:  MOVLB  4
57FC:  DECF   x8E,F
57FE:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5800:  BSF    F96.1
5802:  BTFSS  F84.1
5804:  BRA    5816
....................          {   
....................             delay_ms(30);visual=1; 
5806:  MOVLW  1E
5808:  MOVLB  5
580A:  MOVWF  x3F
580C:  MOVLB  0
580E:  CALL   10EC
5812:  MOVLB  4
5814:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5816:  BSF    F96.2
5818:  BTFSS  F84.2
581A:  BRA    5876
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
581C:  MOVLW  04
581E:  MOVLB  5
5820:  MOVWF  x3A
5822:  MOVLW  AF
5824:  MOVWF  x3F
5826:  MOVLB  0
5828:  CALL   10EC
582C:  MOVLB  5
582E:  DECFSZ x3A,F
5830:  BRA    5822
5832:  MOVLW  08
5834:  MOVLB  4
5836:  MOVWF  x89
5838:  MOVLB  5
583A:  CLRF   x3B
583C:  MOVLB  0
583E:  CALL   11E4
5842:  MOVLW  01
5844:  MOVLB  4
5846:  MOVWF  x90
5848:  BSF    x7C.4
....................             write_eeprom(8,Setpoint); 
584A:  MOVLW  08
584C:  MOVWF  FA9
584E:  MOVFF  48E,FA8
5852:  BCF    FA6.6
5854:  BCF    FA6.7
5856:  BSF    FA6.2
5858:  MOVF   FF2,W
585A:  MOVWF  00
585C:  BCF    FF2.7
585E:  MOVLB  F
5860:  MOVLW  55
5862:  MOVWF  FA7
5864:  MOVLW  AA
5866:  MOVWF  FA7
5868:  BSF    FA6.1
586A:  BTFSC  FA6.1
586C:  BRA    586A
586E:  BCF    FA6.2
5870:  MOVF   00,W
5872:  IORWF  FF2,F
5874:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==14){ // Menu de Desfogue 
5876:  MOVF   x89,W
5878:  SUBLW  0E
587A:  BTFSS  FD8.2
587C:  BRA    5B60
....................       
....................       if(visual==1) 
587E:  BTFSS  x7C.4
5880:  BRA    58E2
....................       {          
....................          strcpy(Menus.Letra," Desfogue"); 
5882:  MOVLW  05
5884:  MOVWF  FEA
5886:  MOVLW  1A
5888:  MOVWF  FE9
588A:  MOVFF  FF2,53A
588E:  BCF    FF2.7
5890:  MOVLW  00
5892:  MOVLB  0
5894:  CALL   0CB4
5898:  TBLRD*-
589A:  TBLRD*+
589C:  MOVF   FF5,W
589E:  MOVWF  FEE
58A0:  IORLW  00
58A2:  BNZ   589A
58A4:  MOVLB  5
58A6:  BTFSC  x3A.7
58A8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
58AA:  MOVLW  05
58AC:  MOVWF  x3B
58AE:  MOVLW  1A
58B0:  MOVWF  x3A
58B2:  CLRF   x3C
58B4:  CLRF   x3D
58B6:  MOVLW  01
58B8:  MOVWF  x3E
58BA:  MOVLW  02
58BC:  MOVWF  x3F
58BE:  MOVLB  0
58C0:  CALL   1814
....................           
....................          displayTiempo(Nivel,50,40,0,2); 
58C4:  MOVFF  49C,53B
58C8:  MOVLW  32
58CA:  MOVLB  5
58CC:  MOVWF  x3C
58CE:  MOVLW  28
58D0:  MOVWF  x3D
58D2:  CLRF   x3E
58D4:  MOVLW  02
58D6:  MOVWF  x3F
58D8:  MOVLB  0
58DA:  CALL   23EC
....................           
....................          visual=0; 
58DE:  MOVLB  4
58E0:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
58E2:  BSF    F92.5
58E4:  BTFSS  F80.5
58E6:  BRA    5908
....................          {   
....................             if(Nivel<6) 
58E8:  MOVF   x9D,F
58EA:  BNZ   5908
58EC:  MOVF   x9C,W
58EE:  SUBLW  05
58F0:  BNC   5908
....................             { 
....................                delay_ms(30);Nivel++;visual=1; 
58F2:  MOVLW  1E
58F4:  MOVLB  5
58F6:  MOVWF  x3F
58F8:  MOVLB  0
58FA:  CALL   10EC
58FE:  MOVLB  4
5900:  INCF   x9C,F
5902:  BTFSC  FD8.2
5904:  INCF   x9D,F
5906:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5908:  BSF    F96.0
590A:  BTFSS  F84.0
590C:  BRA    5930
....................          {   
....................             if(Nivel>1) 
590E:  MOVF   x9D,F
5910:  BNZ   5918
5912:  MOVF   x9C,W
5914:  SUBLW  01
5916:  BC    5930
....................             { 
....................                delay_ms(30);Nivel--;visual=1;      
5918:  MOVLW  1E
591A:  MOVLB  5
591C:  MOVWF  x3F
591E:  MOVLB  0
5920:  CALL   10EC
5924:  MOVLB  4
5926:  MOVF   x9C,W
5928:  BTFSC  FD8.2
592A:  DECF   x9D,F
592C:  DECF   x9C,F
592E:  BSF    x7C.4
....................             } 
....................          } 
....................           
....................          if(desfoguelento==1) 
5930:  BTFSS  x7C.5
5932:  BRA    5AF0
....................          { 
....................             if(RIGHT)//Si oprime SET 
5934:  BSF    F96.1
5936:  BTFSS  F84.1
5938:  BRA    5AEE
....................             {   
....................                write_eeprom(9,Nivel); 
593A:  MOVLW  09
593C:  MOVWF  FA9
593E:  MOVFF  49C,FA8
5942:  BCF    FA6.6
5944:  BCF    FA6.7
5946:  BSF    FA6.2
5948:  MOVF   FF2,W
594A:  MOVWF  00
594C:  BCF    FF2.7
594E:  MOVLB  F
5950:  MOVLW  55
5952:  MOVWF  FA7
5954:  MOVLW  AA
5956:  MOVWF  FA7
5958:  BSF    FA6.1
595A:  BTFSC  FA6.1
595C:  BRA    595A
595E:  BCF    FA6.2
5960:  MOVF   00,W
5962:  IORWF  FF2,F
....................                Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5964:  MOVLW  14
5966:  MOVLB  4
5968:  MOVWF  x89
596A:  MOVLW  0F
596C:  MOVLB  5
596E:  MOVWF  x4C
5970:  MOVLW  12
5972:  MOVWF  x4D
5974:  MOVLW  1E
5976:  MOVWF  x4E
5978:  MOVLW  35
597A:  MOVWF  x4F
597C:  CLRF   x50
597E:  MOVLW  01
5980:  MOVWF  x51
5982:  MOVLB  0
5984:  CALL   1752
5988:  MOVLB  4
598A:  CLRF   x92
598C:  MOVLW  C0
598E:  IORWF  FF2,F
5990:  MOVLB  5
5992:  CLRF   x3B
5994:  MOVLB  0
5996:  CALL   11E4
....................                strcpy(Menus.Letra,"Calentando"); 
599A:  MOVLW  05
599C:  MOVWF  FEA
599E:  MOVLW  1A
59A0:  MOVWF  FE9
59A2:  MOVFF  FF2,53A
59A6:  BCF    FF2.7
59A8:  MOVLW  00
59AA:  CALL   0972
59AE:  TBLRD*-
59B0:  TBLRD*+
59B2:  MOVF   FF5,W
59B4:  MOVWF  FEE
59B6:  IORLW  00
59B8:  BNZ   59B0
59BA:  MOVLB  5
59BC:  BTFSC  x3A.7
59BE:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
59C0:  MOVLW  05
59C2:  MOVWF  x3B
59C4:  MOVLW  1A
59C6:  MOVWF  x3A
59C8:  CLRF   x3C
59CA:  MOVLW  37
59CC:  MOVWF  x3D
59CE:  MOVLW  02
59D0:  MOVWF  x3E
59D2:  MOVLW  01
59D4:  MOVWF  x3F
59D6:  MOVLB  0
59D8:  CALL   1814
....................                glcd_rect(15, 18, 30, 53, NO, ON); 
59DC:  MOVLW  0F
59DE:  MOVLB  5
59E0:  MOVWF  x4C
59E2:  MOVLW  12
59E4:  MOVWF  x4D
59E6:  MOVLW  1E
59E8:  MOVWF  x4E
59EA:  MOVLW  35
59EC:  MOVWF  x4F
59EE:  CLRF   x50
59F0:  MOVLW  01
59F2:  MOVWF  x51
59F4:  MOVLB  0
59F6:  CALL   1752
....................                glcd_imagen(5); 
59FA:  MOVLW  05
59FC:  MOVLB  5
59FE:  MOVWF  x3A
5A00:  MOVLB  0
5A02:  CALL   2040
....................                strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5A06:  MOVLW  05
5A08:  MOVWF  FEA
5A0A:  MOVLW  1A
5A0C:  MOVWF  FE9
5A0E:  MOVFF  FF2,53A
5A12:  BCF    FF2.7
5A14:  MOVLW  00
5A16:  CALL   0998
5A1A:  TBLRD*-
5A1C:  TBLRD*+
5A1E:  MOVF   FF5,W
5A20:  MOVWF  FEE
5A22:  IORLW  00
5A24:  BNZ   5A1C
5A26:  MOVLB  5
5A28:  BTFSC  x3A.7
5A2A:  BSF    FF2.7
5A2C:  MOVLW  05
5A2E:  MOVWF  x3B
5A30:  MOVLW  1A
5A32:  MOVWF  x3A
5A34:  CLRF   x3C
5A36:  CLRF   x3D
5A38:  MOVLW  02
5A3A:  MOVWF  x3E
5A3C:  MOVLW  01
5A3E:  MOVWF  x3F
5A40:  MOVLB  0
5A42:  CALL   1814
....................                strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5A46:  MOVLW  05
5A48:  MOVWF  FEA
5A4A:  MOVLW  1A
5A4C:  MOVWF  FE9
5A4E:  MOVFF  FF2,53A
5A52:  BCF    FF2.7
5A54:  MOVLW  00
5A56:  CALL   09BA
5A5A:  TBLRD*-
5A5C:  TBLRD*+
5A5E:  MOVF   FF5,W
5A60:  MOVWF  FEE
5A62:  IORLW  00
5A64:  BNZ   5A5C
5A66:  MOVLB  5
5A68:  BTFSC  x3A.7
5A6A:  BSF    FF2.7
5A6C:  MOVLW  05
5A6E:  MOVWF  x3B
5A70:  MOVLW  1A
5A72:  MOVWF  x3A
5A74:  CLRF   x3C
5A76:  MOVLW  08
5A78:  MOVWF  x3D
5A7A:  MOVLW  02
5A7C:  MOVWF  x3E
5A7E:  MOVLW  01
5A80:  MOVWF  x3F
5A82:  MOVLB  0
5A84:  CALL   1814
....................                glcd_circle(95,40,2,NO,ON); 
5A88:  MOVLW  5F
5A8A:  MOVLB  5
5A8C:  MOVWF  x3A
5A8E:  MOVLW  28
5A90:  MOVWF  x3B
5A92:  MOVLW  02
5A94:  MOVWF  x3C
5A96:  CLRF   x3D
5A98:  MOVLW  01
5A9A:  MOVWF  x3E
5A9C:  MOVLB  0
5A9E:  CALL   213C
....................                strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
5AA2:  MOVLW  05
5AA4:  MOVWF  FEA
5AA6:  MOVLW  1A
5AA8:  MOVWF  FE9
5AAA:  MOVFF  FF2,53A
5AAE:  BCF    FF2.7
5AB0:  MOVLW  00
5AB2:  CALL   09DC
5AB6:  TBLRD*-
5AB8:  TBLRD*+
5ABA:  MOVF   FF5,W
5ABC:  MOVWF  FEE
5ABE:  IORLW  00
5AC0:  BNZ   5AB8
5AC2:  MOVLB  5
5AC4:  BTFSC  x3A.7
5AC6:  BSF    FF2.7
5AC8:  MOVLW  05
5ACA:  MOVWF  x3B
5ACC:  MOVLW  1A
5ACE:  MOVWF  x3A
5AD0:  MOVLW  66
5AD2:  MOVWF  x3C
5AD4:  MOVLW  28
5AD6:  MOVWF  x3D
5AD8:  MOVLW  02
5ADA:  MOVWF  x3E
5ADC:  MOVWF  x3F
5ADE:  MOVLB  0
5AE0:  CALL   1814
....................                MuestraTiemposProgramados(); 
5AE4:  CALL   253C
....................                EnviarCodigo(); 
5AE8:  CALL   1AFA
5AEC:  MOVLB  4
....................             }       
....................          } 
....................          else 
5AEE:  BRA    5B60
....................          { 
....................             if(LEFT)//Si oprime boton de Toma. 
5AF0:  BSF    F96.2
5AF2:  BTFSS  F84.2
5AF4:  BRA    5B60
....................             { 
....................                if(Nivel<6) 
5AF6:  MOVF   x9D,F
5AF8:  BNZ   5B04
5AFA:  MOVF   x9C,W
5AFC:  SUBLW  05
5AFE:  BNC   5B04
....................                { 
....................                   desfoguelento=1; 
5B00:  BSF    x7C.5
....................                } 
....................                else 
5B02:  BRA    5B06
....................                { 
....................                   desfoguelento=0; 
5B04:  BCF    x7C.5
....................                } 
....................                delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5B06:  MOVLW  04
5B08:  MOVLB  5
5B0A:  MOVWF  x3A
5B0C:  MOVLW  AF
5B0E:  MOVWF  x3F
5B10:  MOVLB  0
5B12:  CALL   10EC
5B16:  MOVLB  5
5B18:  DECFSZ x3A,F
5B1A:  BRA    5B0C
5B1C:  MOVLW  08
5B1E:  MOVLB  4
5B20:  MOVWF  x89
5B22:  MOVLB  5
5B24:  CLRF   x3B
5B26:  MOVLB  0
5B28:  CALL   11E4
5B2C:  MOVLW  01
5B2E:  MOVLB  4
5B30:  MOVWF  x90
5B32:  BSF    x7C.4
....................                write_eeprom(9,Nivel); 
5B34:  MOVLW  09
5B36:  MOVWF  FA9
5B38:  MOVFF  49C,FA8
5B3C:  BCF    FA6.6
5B3E:  BCF    FA6.7
5B40:  BSF    FA6.2
5B42:  MOVF   FF2,W
5B44:  MOVWF  00
5B46:  BCF    FF2.7
5B48:  MOVLB  F
5B4A:  MOVLW  55
5B4C:  MOVWF  FA7
5B4E:  MOVLW  AA
5B50:  MOVWF  FA7
5B52:  BSF    FA6.1
5B54:  BTFSC  FA6.1
5B56:  BRA    5B54
5B58:  BCF    FA6.2
5B5A:  MOVF   00,W
5B5C:  IORWF  FF2,F
5B5E:  MOVLB  4
....................             } 
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==15){ //Menu de Continuar 
5B60:  MOVF   x89,W
5B62:  SUBLW  0F
5B64:  BTFSS  FD8.2
5B66:  BRA    5EA4
....................        
....................       if(visual==1) 
5B68:  BTFSS  x7C.4
5B6A:  BRA    5CD0
....................       { 
....................          strcpy(Menus.Letra,"Continuar"); 
5B6C:  MOVLW  05
5B6E:  MOVWF  FEA
5B70:  MOVLW  1A
5B72:  MOVWF  FE9
5B74:  MOVFF  FF2,53A
5B78:  BCF    FF2.7
5B7A:  MOVLW  00
5B7C:  MOVLB  0
5B7E:  CALL   0C24
5B82:  TBLRD*-
5B84:  TBLRD*+
5B86:  MOVF   FF5,W
5B88:  MOVWF  FEE
5B8A:  IORLW  00
5B8C:  BNZ   5B84
5B8E:  MOVLB  5
5B90:  BTFSC  x3A.7
5B92:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5B94:  MOVLW  05
5B96:  MOVWF  x3B
5B98:  MOVLW  1A
5B9A:  MOVWF  x3A
5B9C:  CLRF   x3C
5B9E:  CLRF   x3D
5BA0:  MOVLW  01
5BA2:  MOVWF  x3E
5BA4:  MOVLW  02
5BA6:  MOVWF  x3F
5BA8:  MOVLB  0
5BAA:  CALL   1814
....................           
....................          if(Opcion==2) 
5BAE:  MOVLB  4
5BB0:  MOVF   x90,W
5BB2:  SUBLW  02
5BB4:  BNZ   5C40
....................          {strcpy(Menus.Letra,"SI"); 
5BB6:  MOVLW  05
5BB8:  MOVWF  FEA
5BBA:  MOVLW  1A
5BBC:  MOVWF  FE9
5BBE:  MOVFF  FF2,53A
5BC2:  BCF    FF2.7
5BC4:  MOVLW  00
5BC6:  MOVLB  0
5BC8:  CALL   0CD8
5BCC:  TBLRD*-
5BCE:  TBLRD*+
5BD0:  MOVF   FF5,W
5BD2:  MOVWF  FEE
5BD4:  IORLW  00
5BD6:  BNZ   5BCE
5BD8:  MOVLB  5
5BDA:  BTFSC  x3A.7
5BDC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,1,2); 
5BDE:  MOVLW  05
5BE0:  MOVWF  x3B
5BE2:  MOVLW  1A
5BE4:  MOVWF  x3A
5BE6:  MOVLW  32
5BE8:  MOVWF  x3C
5BEA:  MOVLW  19
5BEC:  MOVWF  x3D
5BEE:  MOVLW  01
5BF0:  MOVWF  x3E
5BF2:  MOVLW  02
5BF4:  MOVWF  x3F
5BF6:  MOVLB  0
5BF8:  CALL   1814
....................          strcpy(Menus.Letra,"NO"); 
5BFC:  MOVLW  05
5BFE:  MOVWF  FEA
5C00:  MOVLW  1A
5C02:  MOVWF  FE9
5C04:  MOVFF  FF2,53A
5C08:  BCF    FF2.7
5C0A:  MOVLW  00
5C0C:  CALL   0CF6
5C10:  TBLRD*-
5C12:  TBLRD*+
5C14:  MOVF   FF5,W
5C16:  MOVWF  FEE
5C18:  IORLW  00
5C1A:  BNZ   5C12
5C1C:  MOVLB  5
5C1E:  BTFSC  x3A.7
5C20:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,0,2); 
5C22:  MOVLW  05
5C24:  MOVWF  x3B
5C26:  MOVLW  1A
5C28:  MOVWF  x3A
5C2A:  MOVLW  32
5C2C:  MOVWF  x3C
5C2E:  MOVLW  2D
5C30:  MOVWF  x3D
5C32:  CLRF   x3E
5C34:  MOVLW  02
5C36:  MOVWF  x3F
5C38:  MOVLB  0
5C3A:  CALL   1814
5C3E:  MOVLB  4
....................          } 
....................          if(Opcion==1) 
5C40:  DECFSZ x90,W
5C42:  BRA    5CCE
....................          {strcpy(Menus.Letra,"SI"); 
5C44:  MOVLW  05
5C46:  MOVWF  FEA
5C48:  MOVLW  1A
5C4A:  MOVWF  FE9
5C4C:  MOVFF  FF2,53A
5C50:  BCF    FF2.7
5C52:  MOVLW  00
5C54:  MOVLB  0
5C56:  CALL   0CD8
5C5A:  TBLRD*-
5C5C:  TBLRD*+
5C5E:  MOVF   FF5,W
5C60:  MOVWF  FEE
5C62:  IORLW  00
5C64:  BNZ   5C5C
5C66:  MOVLB  5
5C68:  BTFSC  x3A.7
5C6A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,0,2); 
5C6C:  MOVLW  05
5C6E:  MOVWF  x3B
5C70:  MOVLW  1A
5C72:  MOVWF  x3A
5C74:  MOVLW  32
5C76:  MOVWF  x3C
5C78:  MOVLW  19
5C7A:  MOVWF  x3D
5C7C:  CLRF   x3E
5C7E:  MOVLW  02
5C80:  MOVWF  x3F
5C82:  MOVLB  0
5C84:  CALL   1814
....................          strcpy(Menus.Letra,"NO"); 
5C88:  MOVLW  05
5C8A:  MOVWF  FEA
5C8C:  MOVLW  1A
5C8E:  MOVWF  FE9
5C90:  MOVFF  FF2,53A
5C94:  BCF    FF2.7
5C96:  MOVLW  00
5C98:  CALL   0CF6
5C9C:  TBLRD*-
5C9E:  TBLRD*+
5CA0:  MOVF   FF5,W
5CA2:  MOVWF  FEE
5CA4:  IORLW  00
5CA6:  BNZ   5C9E
5CA8:  MOVLB  5
5CAA:  BTFSC  x3A.7
5CAC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,1,2); 
5CAE:  MOVLW  05
5CB0:  MOVWF  x3B
5CB2:  MOVLW  1A
5CB4:  MOVWF  x3A
5CB6:  MOVLW  32
5CB8:  MOVWF  x3C
5CBA:  MOVLW  2D
5CBC:  MOVWF  x3D
5CBE:  MOVLW  01
5CC0:  MOVWF  x3E
5CC2:  MOVLW  02
5CC4:  MOVWF  x3F
5CC6:  MOVLB  0
5CC8:  CALL   1814
5CCC:  MOVLB  4
....................          } 
....................          visual=0; 
5CCE:  BCF    x7C.4
....................       } 
....................        
....................          
....................       if(UP)//Si oprime hacia arriba 
5CD0:  BSF    F92.5
5CD2:  BTFSS  F80.5
5CD4:  BRA    5CE0
....................       { 
....................          if(Opcion<2) 
5CD6:  MOVF   x90,W
5CD8:  SUBLW  01
5CDA:  BNC   5CDE
....................          { 
....................             Opcion++; 
5CDC:  INCF   x90,F
....................          } 
....................          visual=1; 
5CDE:  BSF    x7C.4
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5CE0:  BSF    F96.0
5CE2:  BTFSS  F84.0
5CE4:  BRA    5CF0
....................       {   
....................          if(Opcion>1) 
5CE6:  MOVF   x90,W
5CE8:  SUBLW  01
5CEA:  BC    5CEE
....................          { 
....................             Opcion--; 
5CEC:  DECF   x90,F
....................          }   
....................          visual=1; 
5CEE:  BSF    x7C.4
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
5CF0:  BSF    F96.1
5CF2:  BTFSS  F84.1
5CF4:  BRA    5E6E
....................       {   
....................          if(Opcion==2) 
5CF6:  MOVF   x90,W
5CF8:  SUBLW  02
5CFA:  BTFSS  FD8.2
5CFC:  BRA    5E40
....................          { 
....................             Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5CFE:  MOVLW  14
5D00:  MOVWF  x89
5D02:  MOVLW  0F
5D04:  MOVLB  5
5D06:  MOVWF  x4C
5D08:  MOVLW  12
5D0A:  MOVWF  x4D
5D0C:  MOVLW  1E
5D0E:  MOVWF  x4E
5D10:  MOVLW  35
5D12:  MOVWF  x4F
5D14:  CLRF   x50
5D16:  MOVLW  01
5D18:  MOVWF  x51
5D1A:  MOVLB  0
5D1C:  CALL   1752
5D20:  MOVLB  4
5D22:  CLRF   x92
5D24:  MOVLW  C0
5D26:  IORWF  FF2,F
5D28:  MOVLB  5
5D2A:  CLRF   x3B
5D2C:  MOVLB  0
5D2E:  CALL   11E4
....................             strcpy(Menus.Letra,"Calentando"); 
5D32:  MOVLW  05
5D34:  MOVWF  FEA
5D36:  MOVLW  1A
5D38:  MOVWF  FE9
5D3A:  MOVFF  FF2,53A
5D3E:  BCF    FF2.7
5D40:  MOVLW  00
5D42:  CALL   0972
5D46:  TBLRD*-
5D48:  TBLRD*+
5D4A:  MOVF   FF5,W
5D4C:  MOVWF  FEE
5D4E:  IORLW  00
5D50:  BNZ   5D48
5D52:  MOVLB  5
5D54:  BTFSC  x3A.7
5D56:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
5D58:  MOVLW  05
5D5A:  MOVWF  x3B
5D5C:  MOVLW  1A
5D5E:  MOVWF  x3A
5D60:  CLRF   x3C
5D62:  MOVLW  37
5D64:  MOVWF  x3D
5D66:  MOVLW  02
5D68:  MOVWF  x3E
5D6A:  MOVLW  01
5D6C:  MOVWF  x3F
5D6E:  MOVLB  0
5D70:  CALL   1814
....................             glcd_rect(15, 18, 30, 53, NO, ON); 
5D74:  MOVLW  0F
5D76:  MOVLB  5
5D78:  MOVWF  x4C
5D7A:  MOVLW  12
5D7C:  MOVWF  x4D
5D7E:  MOVLW  1E
5D80:  MOVWF  x4E
5D82:  MOVLW  35
5D84:  MOVWF  x4F
5D86:  CLRF   x50
5D88:  MOVLW  01
5D8A:  MOVWF  x51
5D8C:  MOVLB  0
5D8E:  CALL   1752
....................             glcd_imagen(5); 
5D92:  MOVLW  05
5D94:  MOVLB  5
5D96:  MOVWF  x3A
5D98:  MOVLB  0
5D9A:  CALL   2040
....................             strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5D9E:  MOVLW  05
5DA0:  MOVWF  FEA
5DA2:  MOVLW  1A
5DA4:  MOVWF  FE9
5DA6:  MOVFF  FF2,53A
5DAA:  BCF    FF2.7
5DAC:  MOVLW  00
5DAE:  CALL   0998
5DB2:  TBLRD*-
5DB4:  TBLRD*+
5DB6:  MOVF   FF5,W
5DB8:  MOVWF  FEE
5DBA:  IORLW  00
5DBC:  BNZ   5DB4
5DBE:  MOVLB  5
5DC0:  BTFSC  x3A.7
5DC2:  BSF    FF2.7
5DC4:  MOVLW  05
5DC6:  MOVWF  x3B
5DC8:  MOVLW  1A
5DCA:  MOVWF  x3A
5DCC:  CLRF   x3C
5DCE:  CLRF   x3D
5DD0:  MOVLW  02
5DD2:  MOVWF  x3E
5DD4:  MOVLW  01
5DD6:  MOVWF  x3F
5DD8:  MOVLB  0
5DDA:  CALL   1814
....................             strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5DDE:  MOVLW  05
5DE0:  MOVWF  FEA
5DE2:  MOVLW  1A
5DE4:  MOVWF  FE9
5DE6:  MOVFF  FF2,53A
5DEA:  BCF    FF2.7
5DEC:  MOVLW  00
5DEE:  CALL   09BA
5DF2:  TBLRD*-
5DF4:  TBLRD*+
5DF6:  MOVF   FF5,W
5DF8:  MOVWF  FEE
5DFA:  IORLW  00
5DFC:  BNZ   5DF4
5DFE:  MOVLB  5
5E00:  BTFSC  x3A.7
5E02:  BSF    FF2.7
5E04:  MOVLW  05
5E06:  MOVWF  x3B
5E08:  MOVLW  1A
5E0A:  MOVWF  x3A
5E0C:  CLRF   x3C
5E0E:  MOVLW  08
5E10:  MOVWF  x3D
5E12:  MOVLW  02
5E14:  MOVWF  x3E
5E16:  MOVLW  01
5E18:  MOVWF  x3F
5E1A:  MOVLB  0
5E1C:  CALL   1814
....................             MuestraTiemposProgramados(); 
5E20:  CALL   253C
....................             if(Nivel<6) 
5E24:  MOVLB  4
5E26:  MOVF   x9D,F
5E28:  BNZ   5E34
5E2A:  MOVF   x9C,W
5E2C:  SUBLW  05
5E2E:  BNC   5E34
....................                { 
....................                   desfoguelento=1; 
5E30:  BSF    x7C.5
....................                } 
....................                else 
5E32:  BRA    5E36
....................                { 
....................                   desfoguelento=0; 
5E34:  BCF    x7C.5
....................                } 
....................                EnviarCodigo(); 
5E36:  MOVLB  0
5E38:  CALL   1AFA
....................          } 
....................          else 
5E3C:  BRA    5E70
5E3E:  MOVLB  4
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E40:  MOVLW  04
5E42:  MOVLB  5
5E44:  MOVWF  x3A
5E46:  MOVLW  AF
5E48:  MOVWF  x3F
5E4A:  MOVLB  0
5E4C:  CALL   10EC
5E50:  MOVLB  5
5E52:  DECFSZ x3A,F
5E54:  BRA    5E46
5E56:  MOVLW  08
5E58:  MOVLB  4
5E5A:  MOVWF  x89
5E5C:  MOVLB  5
5E5E:  CLRF   x3B
5E60:  MOVLB  0
5E62:  CALL   11E4
5E66:  MOVLW  01
5E68:  MOVLB  4
5E6A:  MOVWF  x90
5E6C:  BSF    x7C.4
5E6E:  MOVLB  0
....................          } 
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
5E70:  BSF    F96.2
5E72:  BTFSS  F84.2
5E74:  BRA    5EA6
....................       { 
....................          delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E76:  MOVLW  04
5E78:  MOVLB  5
5E7A:  MOVWF  x3A
5E7C:  MOVLW  AF
5E7E:  MOVWF  x3F
5E80:  MOVLB  0
5E82:  CALL   10EC
5E86:  MOVLB  5
5E88:  DECFSZ x3A,F
5E8A:  BRA    5E7C
5E8C:  MOVLW  08
5E8E:  MOVLB  4
5E90:  MOVWF  x89
5E92:  MOVLB  5
5E94:  CLRF   x3B
5E96:  MOVLB  0
5E98:  CALL   11E4
5E9C:  MOVLW  01
5E9E:  MOVLB  4
5EA0:  MOVWF  x90
5EA2:  BSF    x7C.4
5EA4:  MOVLB  0
....................       } 
....................      
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
5EA6:  MOVLB  4
5EA8:  MOVF   x89,W
5EAA:  SUBLW  14
5EAC:  BTFSS  FD8.2
5EAE:  GOTO   69BC
....................    if(flag_agua==1 && Puerta==1 && Parada==1 && tiempo_esterilizacion<2 && Alarma==0 && AlarmaAgua==0) 
5EB2:  BTFSS  x7D.2
5EB4:  BRA    5FDE
5EB6:  DECFSZ x70,W
5EB8:  BRA    5FDE
5EBA:  DECFSZ x71,W
5EBC:  BRA    5FDE
5EBE:  MOVF   x91,W
5EC0:  SUBLW  01
5EC2:  BTFSS  FD8.0
5EC4:  BRA    5FDE
5EC6:  MOVF   x7A,F
5EC8:  BTFSS  FD8.2
5ECA:  BRA    5FDE
5ECC:  MOVF   x7B,F
5ECE:  BTFSS  FD8.2
5ED0:  BRA    5FDE
....................    {   
....................       // Debe enviar a Hardware_Controller flag que indique que puede realizar control. En Hardware_Controller si esta activado el flag** 
....................       // de control debe tener automaticamente la electrovalvula de desfogue cerrada.** 
....................       if(tiempo_esterilizacion==0 && disp_Calentando==0) 
5ED2:  MOVF   x91,F
5ED4:  BNZ   5F50
5ED6:  BTFSC  x7D.4
5ED8:  BRA    5F50
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5EDA:  MOVLB  5
5EDC:  CLRF   x4C
5EDE:  MOVLW  37
5EE0:  MOVWF  x4D
5EE2:  MOVLW  7F
5EE4:  MOVWF  x4E
5EE6:  MOVLW  3F
5EE8:  MOVWF  x4F
5EEA:  MOVLW  01
5EEC:  MOVWF  x50
5EEE:  CLRF   x51
5EF0:  MOVLB  0
5EF2:  CALL   1752
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
5EF6:  MOVLW  05
5EF8:  MOVWF  FEA
5EFA:  MOVLW  1A
5EFC:  MOVWF  FE9
5EFE:  MOVFF  FF2,53A
5F02:  BCF    FF2.7
5F04:  MOVLW  00
5F06:  CALL   0972
5F0A:  TBLRD*-
5F0C:  TBLRD*+
5F0E:  MOVF   FF5,W
5F10:  MOVWF  FEE
5F12:  IORLW  00
5F14:  BNZ   5F0C
5F16:  MOVLB  5
5F18:  BTFSC  x3A.7
5F1A:  BSF    FF2.7
5F1C:  MOVLW  05
5F1E:  MOVWF  x3B
5F20:  MOVLW  1A
5F22:  MOVWF  x3A
5F24:  CLRF   x3C
5F26:  MOVLW  37
5F28:  MOVWF  x3D
5F2A:  MOVLW  02
5F2C:  MOVWF  x3E
5F2E:  MOVLW  01
5F30:  MOVWF  x3F
5F32:  MOVLB  0
5F34:  CALL   1814
....................          disp_Calentando=1;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5F38:  MOVLB  4
5F3A:  BSF    x7D.4
5F3C:  BCF    x7D.5
5F3E:  BCF    x7D.6
5F40:  BCF    x7D.7
5F42:  BCF    x7E.0
5F44:  BCF    x7E.1
5F46:  BCF    x7E.2
5F48:  BCF    x7E.3
....................          EVDesfogue=0;Control=1; 
5F4A:  CLRF   x80
5F4C:  MOVLW  01
5F4E:  MOVWF  x87
....................       } 
....................       if(tiempo_esterilizacion==1 && disp_Esterilizando==0) 
5F50:  DECFSZ x91,W
5F52:  BRA    5FD0
5F54:  BTFSC  x7D.7
5F56:  BRA    5FD0
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5F58:  MOVLB  5
5F5A:  CLRF   x4C
5F5C:  MOVLW  37
5F5E:  MOVWF  x4D
5F60:  MOVLW  7F
5F62:  MOVWF  x4E
5F64:  MOVLW  3F
5F66:  MOVWF  x4F
5F68:  MOVLW  01
5F6A:  MOVWF  x50
5F6C:  CLRF   x51
5F6E:  MOVLB  0
5F70:  CALL   1752
....................          strcpy(Menus.Letra,"Esterilizando");displayMenu(Menus.Letra,0,55,2,1); 
5F74:  MOVLW  05
5F76:  MOVWF  FEA
5F78:  MOVLW  1A
5F7A:  MOVWF  FE9
5F7C:  MOVFF  FF2,53A
5F80:  BCF    FF2.7
5F82:  MOVLW  00
5F84:  CALL   0D14
5F88:  TBLRD*-
5F8A:  TBLRD*+
5F8C:  MOVF   FF5,W
5F8E:  MOVWF  FEE
5F90:  IORLW  00
5F92:  BNZ   5F8A
5F94:  MOVLB  5
5F96:  BTFSC  x3A.7
5F98:  BSF    FF2.7
5F9A:  MOVLW  05
5F9C:  MOVWF  x3B
5F9E:  MOVLW  1A
5FA0:  MOVWF  x3A
5FA2:  CLRF   x3C
5FA4:  MOVLW  37
5FA6:  MOVWF  x3D
5FA8:  MOVLW  02
5FAA:  MOVWF  x3E
5FAC:  MOVLW  01
5FAE:  MOVWF  x3F
5FB0:  MOVLB  0
5FB2:  CALL   1814
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=1;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5FB6:  MOVLB  4
5FB8:  BCF    x7D.4
5FBA:  BCF    x7D.5
5FBC:  BCF    x7D.6
5FBE:  BSF    x7D.7
5FC0:  BCF    x7E.0
5FC2:  BCF    x7E.1
5FC4:  BCF    x7E.2
5FC6:  BCF    x7E.3
....................          EVDesfogue=0;EVTrampa=0;Control=1; 
5FC8:  CLRF   x80
5FCA:  CLRF   x82
5FCC:  MOVLW  01
5FCE:  MOVWF  x87
....................       } 
....................       Control=1; 
5FD0:  MOVLW  01
5FD2:  MOVWF  x87
....................       EnviarCodigo(); 
5FD4:  MOVLB  0
5FD6:  CALL   1AFA
....................    } 
....................    else 
5FDA:  BRA    642C
5FDC:  MOVLB  4
....................    { 
....................       Control=0; 
5FDE:  CLRF   x87
....................       if(Alarma>0) 
5FE0:  MOVF   x7A,F
5FE2:  BTFSC  FD8.2
5FE4:  BRA    60E2
....................       { 
....................          if(Alarma==1) // Alarma de Error de Tiempo: Error por exceso de tiempo de calentamiento. 
5FE6:  DECFSZ x7A,W
5FE8:  BRA    6060
....................          { 
....................             if(disp_Alarma==0) 
5FEA:  BTFSC  x7E.5
5FEC:  BRA    6060
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
5FEE:  MOVLB  5
5FF0:  CLRF   x4C
5FF2:  MOVLW  37
5FF4:  MOVWF  x4D
5FF6:  MOVLW  7F
5FF8:  MOVWF  x4E
5FFA:  MOVLW  3F
5FFC:  MOVWF  x4F
5FFE:  MOVLW  01
6000:  MOVWF  x50
6002:  CLRF   x51
6004:  MOVLB  0
6006:  CALL   1752
....................                strcpy(Menus.Letra,"Error:ET01");displayMenu(Menus.Letra,0,55,2,1); 
600A:  MOVLW  05
600C:  MOVWF  FEA
600E:  MOVLW  1A
6010:  MOVWF  FE9
6012:  MOVFF  FF2,53A
6016:  BCF    FF2.7
6018:  MOVLW  00
601A:  CALL   0D3C
601E:  TBLRD*-
6020:  TBLRD*+
6022:  MOVF   FF5,W
6024:  MOVWF  FEE
6026:  IORLW  00
6028:  BNZ   6020
602A:  MOVLB  5
602C:  BTFSC  x3A.7
602E:  BSF    FF2.7
6030:  MOVLW  05
6032:  MOVWF  x3B
6034:  MOVLW  1A
6036:  MOVWF  x3A
6038:  CLRF   x3C
603A:  MOVLW  37
603C:  MOVWF  x3D
603E:  MOVLW  02
6040:  MOVWF  x3E
6042:  MOVLW  01
6044:  MOVWF  x3F
6046:  MOVLB  0
6048:  CALL   1814
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
604C:  MOVLB  4
604E:  BCF    x7D.4
6050:  BCF    x7D.5
6052:  BCF    x7D.6
6054:  BCF    x7D.7
6056:  BCF    x7E.0
6058:  BCF    x7E.1
605A:  BCF    x7E.2
605C:  BCF    x7E.3
....................                disp_Alarma=1; 
605E:  BSF    x7E.5
....................             } 
....................          } 
....................           
....................          if(Alarma==2) // Alarma de Error de Tiempo: Error por Cambio brusco en la Temperatura 
6060:  MOVF   x7A,W
6062:  SUBLW  02
6064:  BNZ   60E0
....................          { 
....................             tiempo_esterilizacion=0;tiempo_secado=0; 
6066:  CLRF   x91
6068:  CLRF   x92
....................             if(disp_Alarma==0) 
606A:  BTFSC  x7E.5
606C:  BRA    60E0
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
606E:  MOVLB  5
6070:  CLRF   x4C
6072:  MOVLW  37
6074:  MOVWF  x4D
6076:  MOVLW  7F
6078:  MOVWF  x4E
607A:  MOVLW  3F
607C:  MOVWF  x4F
607E:  MOVLW  01
6080:  MOVWF  x50
6082:  CLRF   x51
6084:  MOVLB  0
6086:  CALL   1752
....................                strcpy(Menus.Letra,"Error:ET02");displayMenu(Menus.Letra,0,55,2,1); 
608A:  MOVLW  05
608C:  MOVWF  FEA
608E:  MOVLW  1A
6090:  MOVWF  FE9
6092:  MOVFF  FF2,53A
6096:  BCF    FF2.7
6098:  MOVLW  00
609A:  CALL   0D62
609E:  TBLRD*-
60A0:  TBLRD*+
60A2:  MOVF   FF5,W
60A4:  MOVWF  FEE
60A6:  IORLW  00
60A8:  BNZ   60A0
60AA:  MOVLB  5
60AC:  BTFSC  x3A.7
60AE:  BSF    FF2.7
60B0:  MOVLW  05
60B2:  MOVWF  x3B
60B4:  MOVLW  1A
60B6:  MOVWF  x3A
60B8:  CLRF   x3C
60BA:  MOVLW  37
60BC:  MOVWF  x3D
60BE:  MOVLW  02
60C0:  MOVWF  x3E
60C2:  MOVLW  01
60C4:  MOVWF  x3F
60C6:  MOVLB  0
60C8:  CALL   1814
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
60CC:  MOVLB  4
60CE:  BCF    x7D.4
60D0:  BCF    x7D.5
60D2:  BCF    x7D.6
60D4:  BCF    x7D.7
60D6:  BCF    x7E.0
60D8:  BCF    x7E.1
60DA:  BCF    x7E.2
60DC:  BCF    x7E.3
....................                disp_Alarma=1; 
60DE:  BSF    x7E.5
....................             } 
....................          } 
....................       } 
....................       else 
60E0:  BRA    6426
....................       { 
....................          disp_Alarma=0; 
60E2:  BCF    x7E.5
....................          if(NivelTanque==1 && flag_agua==0 ) 
60E4:  DECFSZ x73,W
60E6:  BRA    60F0
60E8:  BTFSC  x7D.2
60EA:  BRA    60F0
....................          { 
....................             flag_agua=1; 
60EC:  BSF    x7D.2
....................             // Debe enviar a Hardware_Controller que cierre EV de agua 
....................          }  
....................          else 
60EE:  BRA    61E6
....................          { 
....................             if(tiempo_esterilizacion==0 && disp_Llenando==0 && Puerta==1) 
60F0:  MOVF   x91,F
60F2:  BNZ   616E
60F4:  BTFSC  x7D.5
60F6:  BRA    616E
60F8:  DECFSZ x70,W
60FA:  BRA    616E
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
60FC:  MOVLB  5
60FE:  CLRF   x4C
6100:  MOVLW  37
6102:  MOVWF  x4D
6104:  MOVLW  7F
6106:  MOVWF  x4E
6108:  MOVLW  3F
610A:  MOVWF  x4F
610C:  MOVLW  01
610E:  MOVWF  x50
6110:  CLRF   x51
6112:  MOVLB  0
6114:  CALL   1752
....................                strcpy(Menus.Letra,"Llenando");displayMenu(Menus.Letra,0,55,2,1); 
6118:  MOVLW  05
611A:  MOVWF  FEA
611C:  MOVLW  1A
611E:  MOVWF  FE9
6120:  MOVFF  FF2,53A
6124:  BCF    FF2.7
6126:  MOVLW  00
6128:  CALL   0D88
612C:  TBLRD*-
612E:  TBLRD*+
6130:  MOVF   FF5,W
6132:  MOVWF  FEE
6134:  IORLW  00
6136:  BNZ   612E
6138:  MOVLB  5
613A:  BTFSC  x3A.7
613C:  BSF    FF2.7
613E:  MOVLW  05
6140:  MOVWF  x3B
6142:  MOVLW  1A
6144:  MOVWF  x3A
6146:  CLRF   x3C
6148:  MOVLW  37
614A:  MOVWF  x3D
614C:  MOVLW  02
614E:  MOVWF  x3E
6150:  MOVLW  01
6152:  MOVWF  x3F
6154:  MOVLB  0
6156:  CALL   1814
....................                disp_Calentando=0;disp_Llenando=1;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
615A:  MOVLB  4
615C:  BCF    x7D.4
615E:  BSF    x7D.5
6160:  BCF    x7D.6
6162:  BCF    x7D.7
6164:  BCF    x7E.0
6166:  BCF    x7E.1
6168:  BCF    x7E.2
616A:  BCF    x7E.3
....................                // Debe enviar a Hardware_Controller que abra EV de agua y que apague Resistencia 
....................                Control=0; 
616C:  CLRF   x87
....................             } 
....................              
....................             if(AlarmaAgua==1) 
616E:  DECFSZ x7B,W
6170:  BRA    61E6
....................             { 
....................                if(disp_AlarmaAgua==0) 
6172:  BTFSC  x7E.6
6174:  BRA    61E6
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6176:  MOVLB  5
6178:  CLRF   x4C
617A:  MOVLW  37
617C:  MOVWF  x4D
617E:  MOVLW  7F
6180:  MOVWF  x4E
6182:  MOVLW  3F
6184:  MOVWF  x4F
6186:  MOVLW  01
6188:  MOVWF  x50
618A:  CLRF   x51
618C:  MOVLB  0
618E:  CALL   1752
....................                   strcpy(Menus.Letra,"Error:EA01");displayMenu(Menus.Letra,0,55,2,1); 
6192:  MOVLW  05
6194:  MOVWF  FEA
6196:  MOVLW  1A
6198:  MOVWF  FE9
619A:  MOVFF  FF2,53A
619E:  BCF    FF2.7
61A0:  MOVLW  00
61A2:  CALL   0DAC
61A6:  TBLRD*-
61A8:  TBLRD*+
61AA:  MOVF   FF5,W
61AC:  MOVWF  FEE
61AE:  IORLW  00
61B0:  BNZ   61A8
61B2:  MOVLB  5
61B4:  BTFSC  x3A.7
61B6:  BSF    FF2.7
61B8:  MOVLW  05
61BA:  MOVWF  x3B
61BC:  MOVLW  1A
61BE:  MOVWF  x3A
61C0:  CLRF   x3C
61C2:  MOVLW  37
61C4:  MOVWF  x3D
61C6:  MOVLW  02
61C8:  MOVWF  x3E
61CA:  MOVLW  01
61CC:  MOVWF  x3F
61CE:  MOVLB  0
61D0:  CALL   1814
....................                   disp_Calentando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
61D4:  MOVLB  4
61D6:  BCF    x7D.4
61D8:  BCF    x7D.6
61DA:  BCF    x7D.7
61DC:  BCF    x7E.0
61DE:  BCF    x7E.1
61E0:  BCF    x7E.2
61E2:  BCF    x7E.3
....................                   disp_AlarmaAgua=1; 
61E4:  BSF    x7E.6
....................                } 
....................             } 
....................          } 
....................           
....................          if(tiempo_esterilizacion==2 && flag_agua==1) 
61E6:  MOVF   x91,W
61E8:  SUBLW  02
61EA:  BTFSS  FD8.2
61EC:  BRA    63AE
61EE:  BTFSS  x7D.2
61F0:  BRA    63AE
....................          { 
....................             // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................             if(desfoguelento==1)    
61F2:  BTFSS  x7C.5
61F4:  BRA    62D4
....................             { 
....................                if(z==0) 
61F6:  BTFSC  x7E.4
61F8:  BRA    624A
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
61FA:  MOVLB  5
61FC:  CLRF   x3A
61FE:  MOVLW  5A
6200:  MOVWF  x3B
6202:  MOVLW  38
6204:  MOVWF  x3C
6206:  MOVLB  0
6208:  CALL   267C
620C:  MOVLW  19
620E:  MOVLB  5
6210:  MOVWF  x4C
6212:  MOVLW  12
6214:  MOVWF  x4D
6216:  MOVLW  3C
6218:  MOVWF  x4E
621A:  MOVLW  1A
621C:  MOVWF  x4F
621E:  CLRF   x50
6220:  CLRF   x51
6222:  MOVLB  0
6224:  CALL   1752
6228:  MOVLW  37
622A:  MOVLB  5
622C:  MOVWF  x4C
622E:  MOVLW  12
6230:  MOVWF  x4D
6232:  MOVLW  44
6234:  MOVWF  x4E
6236:  MOVLW  35
6238:  MOVWF  x4F
623A:  CLRF   x50
623C:  MOVLW  01
623E:  MOVWF  x51
6240:  MOVLB  0
6242:  CALL   1752
6246:  MOVLB  4
6248:  BSF    x7E.4
....................                } 
....................                if(disp_Despresurizando==0) 
624A:  BTFSC  x7E.0
624C:  BRA    62CC
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
624E:  MOVLB  5
6250:  CLRF   x4C
6252:  MOVLW  37
6254:  MOVWF  x4D
6256:  MOVLW  7F
6258:  MOVWF  x4E
625A:  MOVLW  3F
625C:  MOVWF  x4F
625E:  MOVLW  01
6260:  MOVWF  x50
6262:  CLRF   x51
6264:  MOVLB  0
6266:  CALL   1752
....................                   strcpy(Menus.Letra,"Despresurizando");displayMenu(Menus.Letra,0,55,2,1); 
626A:  MOVLW  05
626C:  MOVWF  FEA
626E:  MOVLW  1A
6270:  MOVWF  FE9
6272:  MOVFF  FF2,53A
6276:  BCF    FF2.7
6278:  MOVLW  00
627A:  CALL   0DD2
627E:  TBLRD*-
6280:  TBLRD*+
6282:  MOVF   FF5,W
6284:  MOVWF  FEE
6286:  IORLW  00
6288:  BNZ   6280
628A:  MOVLB  5
628C:  BTFSC  x3A.7
628E:  BSF    FF2.7
6290:  MOVLW  05
6292:  MOVWF  x3B
6294:  MOVLW  1A
6296:  MOVWF  x3A
6298:  CLRF   x3C
629A:  MOVLW  37
629C:  MOVWF  x3D
629E:  MOVLW  02
62A0:  MOVWF  x3E
62A2:  MOVLW  01
62A4:  MOVWF  x3F
62A6:  MOVLB  0
62A8:  CALL   1814
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=0; 
62AC:  MOVLB  4
62AE:  BCF    x7D.4
62B0:  BCF    x7D.5
62B2:  BCF    x7D.6
62B4:  BCF    x7D.7
62B6:  BSF    x7E.0
62B8:  BCF    x7E.1
62BA:  BCF    x7E.2
62BC:  BCF    x7E.3
....................                   glcd_imagen(5); 
62BE:  MOVLW  05
62C0:  MOVLB  5
62C2:  MOVWF  x3A
62C4:  MOVLB  0
62C6:  CALL   2040
62CA:  MOVLB  4
....................                } 
....................                Exhaust=2;tiempo_secado=2; 
62CC:  MOVLW  02
62CE:  MOVWF  x93
62D0:  MOVWF  x92
....................             } 
....................             else 
62D2:  BRA    63AE
....................             { 
....................                if(z==0) 
62D4:  BTFSC  x7E.4
62D6:  BRA    6328
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
62D8:  MOVLB  5
62DA:  CLRF   x3A
62DC:  MOVLW  5A
62DE:  MOVWF  x3B
62E0:  MOVLW  38
62E2:  MOVWF  x3C
62E4:  MOVLB  0
62E6:  CALL   267C
62EA:  MOVLW  19
62EC:  MOVLB  5
62EE:  MOVWF  x4C
62F0:  MOVLW  12
62F2:  MOVWF  x4D
62F4:  MOVLW  3C
62F6:  MOVWF  x4E
62F8:  MOVLW  1A
62FA:  MOVWF  x4F
62FC:  CLRF   x50
62FE:  CLRF   x51
6300:  MOVLB  0
6302:  CALL   1752
6306:  MOVLW  37
6308:  MOVLB  5
630A:  MOVWF  x4C
630C:  MOVLW  12
630E:  MOVWF  x4D
6310:  MOVLW  44
6312:  MOVWF  x4E
6314:  MOVLW  35
6316:  MOVWF  x4F
6318:  CLRF   x50
631A:  MOVLW  01
631C:  MOVWF  x51
631E:  MOVLB  0
6320:  CALL   1752
6324:  MOVLB  4
6326:  BSF    x7E.4
....................                   //tiempo_secado=1; 
....................                } 
....................                if(disp_Secando==0) 
6328:  BTFSC  x7D.6
632A:  BRA    63AA
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
632C:  MOVLB  5
632E:  CLRF   x4C
6330:  MOVLW  37
6332:  MOVWF  x4D
6334:  MOVLW  7F
6336:  MOVWF  x4E
6338:  MOVLW  3F
633A:  MOVWF  x4F
633C:  MOVLW  01
633E:  MOVWF  x50
6340:  CLRF   x51
6342:  MOVLB  0
6344:  CALL   1752
....................                   strcpy(Menus.Letra,"Secando");displayMenu(Menus.Letra,0,55,2,1); 
6348:  MOVLW  05
634A:  MOVWF  FEA
634C:  MOVLW  1A
634E:  MOVWF  FE9
6350:  MOVFF  FF2,53A
6354:  BCF    FF2.7
6356:  MOVLW  00
6358:  CALL   0DFC
635C:  TBLRD*-
635E:  TBLRD*+
6360:  MOVF   FF5,W
6362:  MOVWF  FEE
6364:  IORLW  00
6366:  BNZ   635E
6368:  MOVLB  5
636A:  BTFSC  x3A.7
636C:  BSF    FF2.7
636E:  MOVLW  05
6370:  MOVWF  x3B
6372:  MOVLW  1A
6374:  MOVWF  x3A
6376:  CLRF   x3C
6378:  MOVLW  37
637A:  MOVWF  x3D
637C:  MOVLW  02
637E:  MOVWF  x3E
6380:  MOVLW  01
6382:  MOVWF  x3F
6384:  MOVLB  0
6386:  CALL   1814
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
638A:  MOVLB  4
638C:  BCF    x7D.4
638E:  BCF    x7D.5
6390:  BSF    x7D.6
6392:  BCF    x7D.7
6394:  BCF    x7E.0
6396:  BCF    x7E.1
6398:  BCF    x7E.2
639A:  BCF    x7E.3
....................                   glcd_imagen(5); 
639C:  MOVLW  05
639E:  MOVLB  5
63A0:  MOVWF  x3A
63A2:  MOVLB  0
63A4:  CALL   2040
63A8:  MOVLB  4
....................                } 
....................                Exhaust=1; 
63AA:  MOVLW  01
63AC:  MOVWF  x93
....................             } 
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................           
....................          if(Puerta==0) 
63AE:  MOVF   x70,F
63B0:  BNZ   6426
....................          { 
....................             if(disp_Door==0) 
63B2:  BTFSC  x7E.2
63B4:  BRA    6426
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
63B6:  MOVLB  5
63B8:  CLRF   x4C
63BA:  MOVLW  37
63BC:  MOVWF  x4D
63BE:  MOVLW  7F
63C0:  MOVWF  x4E
63C2:  MOVLW  3F
63C4:  MOVWF  x4F
63C6:  MOVLW  01
63C8:  MOVWF  x50
63CA:  CLRF   x51
63CC:  MOVLB  0
63CE:  CALL   1752
....................                strcpy(Menus.Letra,"Puerta Abierta");displayMenu(Menus.Letra,0,55,2,1); 
63D2:  MOVLW  05
63D4:  MOVWF  FEA
63D6:  MOVLW  1A
63D8:  MOVWF  FE9
63DA:  MOVFF  FF2,53A
63DE:  BCF    FF2.7
63E0:  MOVLW  00
63E2:  CALL   0E1E
63E6:  TBLRD*-
63E8:  TBLRD*+
63EA:  MOVF   FF5,W
63EC:  MOVWF  FEE
63EE:  IORLW  00
63F0:  BNZ   63E8
63F2:  MOVLB  5
63F4:  BTFSC  x3A.7
63F6:  BSF    FF2.7
63F8:  MOVLW  05
63FA:  MOVWF  x3B
63FC:  MOVLW  1A
63FE:  MOVWF  x3A
6400:  CLRF   x3C
6402:  MOVLW  37
6404:  MOVWF  x3D
6406:  MOVLW  02
6408:  MOVWF  x3E
640A:  MOVLW  01
640C:  MOVWF  x3F
640E:  MOVLB  0
6410:  CALL   1814
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=1;disp_Fin=0; 
6414:  MOVLB  4
6416:  BCF    x7D.4
6418:  BCF    x7D.5
641A:  BCF    x7D.6
641C:  BCF    x7D.7
641E:  BCF    x7E.0
6420:  BCF    x7E.1
6422:  BSF    x7E.2
6424:  BCF    x7E.3
....................             }    
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................       } 
....................       EnviarCodigo(); 
6426:  MOVLB  0
6428:  CALL   1AFA
....................    } 
....................  
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
642C:  MOVLB  4
642E:  BTFSS  x7C.6
6430:  BRA    6784
....................    {                       
....................       Lectura=0; 
6432:  BCF    x7C.6
....................       //displayTiempo(NivelTanque,40,30,2,1);  
....................       //displayTiempo(Presostato,40,40,2,1);  
....................       //displayTiempo(ADCTemperatura[2],20,30,2,1);  
....................       //displayT(Prom,20,30,2); 
....................       displayTiempo(Presostato,31,40,2,1); 
6434:  MOVFF  474,53B
6438:  MOVLW  1F
643A:  MOVLB  5
643C:  MOVWF  x3C
643E:  MOVLW  28
6440:  MOVWF  x3D
6442:  MOVLW  02
6444:  MOVWF  x3E
6446:  MOVLW  01
6448:  MOVWF  x3F
644A:  MOVLB  0
644C:  CALL   23EC
....................       glcd_rect(51, 40, 62, 48, YES, OFF);glcd_text57(52, 40, kpa, 1, ON); 
6450:  MOVLW  33
6452:  MOVLB  5
6454:  MOVWF  x4C
6456:  MOVLW  28
6458:  MOVWF  x4D
645A:  MOVLW  3E
645C:  MOVWF  x4E
645E:  MOVLW  30
6460:  MOVWF  x4F
6462:  MOVLW  01
6464:  MOVWF  x50
6466:  CLRF   x51
6468:  MOVLB  0
646A:  CALL   1752
646E:  MOVLW  34
6470:  MOVLB  5
6472:  MOVWF  x4B
6474:  MOVLW  28
6476:  MOVWF  x4C
6478:  MOVLW  04
647A:  MOVWF  x4E
647C:  MOVLW  1C
647E:  MOVWF  x4D
6480:  MOVLW  01
6482:  MOVWF  x4F
6484:  MOVWF  x50
6486:  MOVLB  0
6488:  CALL   145C
....................       displayT(ADC_Pt100,69,20,2); 
648C:  MOVFF  4A3,53D
6490:  MOVFF  4A2,53C
6494:  MOVFF  4A1,53B
6498:  MOVFF  4A0,53A
649C:  MOVLW  45
649E:  MOVLB  5
64A0:  MOVWF  x3E
64A2:  MOVLW  14
64A4:  MOVWF  x3F
64A6:  MOVLW  02
64A8:  MOVWF  x40
64AA:  MOVLB  0
64AC:  GOTO   2A10
....................       glcd_circle(95,40,2,NO,ON); 
64B0:  MOVLW  5F
64B2:  MOVLB  5
64B4:  MOVWF  x3A
64B6:  MOVLW  28
64B8:  MOVWF  x3B
64BA:  MOVLW  02
64BC:  MOVWF  x3C
64BE:  CLRF   x3D
64C0:  MOVLW  01
64C2:  MOVWF  x3E
64C4:  MOVLB  0
64C6:  CALL   213C
....................       strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
64CA:  MOVLW  05
64CC:  MOVWF  FEA
64CE:  MOVLW  1A
64D0:  MOVWF  FE9
64D2:  MOVFF  FF2,53A
64D6:  BCF    FF2.7
64D8:  MOVLW  00
64DA:  CALL   09DC
64DE:  TBLRD*-
64E0:  TBLRD*+
64E2:  MOVF   FF5,W
64E4:  MOVWF  FEE
64E6:  IORLW  00
64E8:  BNZ   64E0
64EA:  MOVLB  5
64EC:  BTFSC  x3A.7
64EE:  BSF    FF2.7
64F0:  MOVLW  05
64F2:  MOVWF  x3B
64F4:  MOVLW  1A
64F6:  MOVWF  x3A
64F8:  MOVLW  66
64FA:  MOVWF  x3C
64FC:  MOVLW  28
64FE:  MOVWF  x3D
6500:  MOVLW  02
6502:  MOVWF  x3E
6504:  MOVWF  x3F
6506:  MOVLB  0
6508:  CALL   1814
....................       //displayT(Pt,1,20,3); 
....................       displayTiempo(Setpoint,5,20,2,1); 
650C:  MOVFF  48E,53B
6510:  MOVLW  05
6512:  MOVLB  5
6514:  MOVWF  x3C
6516:  MOVLW  14
6518:  MOVWF  x3D
651A:  MOVLW  02
651C:  MOVWF  x3E
651E:  MOVLW  01
6520:  MOVWF  x3F
6522:  MOVLB  0
6524:  CALL   23EC
....................          
....................       if(Visua==1)// Si se activo la visualización desde software 
6528:  MOVLB  4
652A:  BTFSS  x7D.1
652C:  BRA    6636
....................       { 
....................          displayTiempo((int8)desvio,5,30,4,1); 
652E:  MOVFF  515,53D
6532:  MOVFF  514,53C
6536:  MOVFF  513,53B
653A:  MOVFF  512,53A
653E:  MOVLB  0
6540:  CALL   2A8A
6544:  MOVFF  01,53A
6548:  MOVFF  01,53B
654C:  MOVLW  05
654E:  MOVLB  5
6550:  MOVWF  x3C
6552:  MOVLW  1E
6554:  MOVWF  x3D
6556:  MOVLW  04
6558:  MOVWF  x3E
655A:  MOVLW  01
655C:  MOVWF  x3F
655E:  MOVLB  0
6560:  CALL   23EC
....................          displayTiempo((int8)Tpulso,5,40,4,1); 
6564:  MOVFF  4F9,53D
6568:  MOVFF  4F8,53C
656C:  MOVFF  4F7,53B
6570:  MOVFF  4F6,53A
6574:  CALL   2A8A
6578:  MOVFF  01,53A
657C:  MOVFF  01,53B
6580:  MOVLW  05
6582:  MOVLB  5
6584:  MOVWF  x3C
6586:  MOVLW  28
6588:  MOVWF  x3D
658A:  MOVLW  04
658C:  MOVWF  x3E
658E:  MOVLW  01
6590:  MOVWF  x3F
6592:  MOVLB  0
6594:  CALL   23EC
....................          displayTiempo((int8)Ganancia,30,40,4,1); 
6598:  MOVFF  50D,53D
659C:  MOVFF  50C,53C
65A0:  MOVFF  50B,53B
65A4:  MOVFF  50A,53A
65A8:  CALL   2A8A
65AC:  MOVFF  01,53A
65B0:  MOVFF  01,53B
65B4:  MOVLW  1E
65B6:  MOVLB  5
65B8:  MOVWF  x3C
65BA:  MOVLW  28
65BC:  MOVWF  x3D
65BE:  MOVLW  04
65C0:  MOVWF  x3E
65C2:  MOVLW  01
65C4:  MOVWF  x3F
65C6:  MOVLB  0
65C8:  CALL   23EC
....................          displayTiempo((int8)Ajuste,30,30,4,1); 
65CC:  MOVFF  477,53B
65D0:  MOVLW  1E
65D2:  MOVLB  5
65D4:  MOVWF  x3C
65D6:  MOVWF  x3D
65D8:  MOVLW  04
65DA:  MOVWF  x3E
65DC:  MOVLW  01
65DE:  MOVWF  x3F
65E0:  MOVLB  0
65E2:  CALL   23EC
....................          displayTiempo((int8)Ajusten,30,20,4,1); 
65E6:  MOVFF  478,53B
65EA:  MOVLW  1E
65EC:  MOVLB  5
65EE:  MOVWF  x3C
65F0:  MOVLW  14
65F2:  MOVWF  x3D
65F4:  MOVLW  04
65F6:  MOVWF  x3E
65F8:  MOVLW  01
65FA:  MOVWF  x3F
65FC:  MOVLB  0
65FE:  CALL   23EC
....................          displayTiempo((int8)Ganancia2,50,40,4,1); 
6602:  MOVFF  511,53D
6606:  MOVFF  510,53C
660A:  MOVFF  50F,53B
660E:  MOVFF  50E,53A
6612:  CALL   2A8A
6616:  MOVFF  01,53A
661A:  MOVFF  01,53B
661E:  MOVLW  32
6620:  MOVLB  5
6622:  MOVWF  x3C
6624:  MOVLW  28
6626:  MOVWF  x3D
6628:  MOVLW  04
662A:  MOVWF  x3E
662C:  MOVLW  01
662E:  MOVWF  x3F
6630:  MOVLB  0
6632:  CALL   23EC
....................       } 
....................           
....................       // Muestra Valor de esterilizacion actual. 
....................       displayTiempo(Testerilizacion[3],80,0,0,1);displayTiempo(Testerilizacion[2],86,0,0,1); 
6636:  MOVFF  4A7,53B
663A:  MOVLW  50
663C:  MOVLB  5
663E:  MOVWF  x3C
6640:  CLRF   x3D
6642:  CLRF   x3E
6644:  MOVLW  01
6646:  MOVWF  x3F
6648:  MOVLB  0
664A:  CALL   23EC
664E:  MOVFF  4A6,53B
6652:  MOVLW  56
6654:  MOVLB  5
6656:  MOVWF  x3C
6658:  CLRF   x3D
665A:  CLRF   x3E
665C:  MOVLW  01
665E:  MOVWF  x3F
6660:  MOVLB  0
6662:  CALL   23EC
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,0,2,1);  
6666:  MOVLW  05
6668:  MOVWF  FEA
666A:  MOVLW  1A
666C:  MOVWF  FE9
666E:  MOVFF  FF2,53A
6672:  BCF    FF2.7
6674:  MOVLW  00
6676:  CALL   06CA
667A:  TBLRD*-
667C:  TBLRD*+
667E:  MOVF   FF5,W
6680:  MOVWF  FEE
6682:  IORLW  00
6684:  BNZ   667C
6686:  MOVLB  5
6688:  BTFSC  x3A.7
668A:  BSF    FF2.7
668C:  MOVLW  05
668E:  MOVWF  x3B
6690:  MOVLW  1A
6692:  MOVWF  x3A
6694:  MOVLW  5C
6696:  MOVWF  x3C
6698:  CLRF   x3D
669A:  MOVLW  02
669C:  MOVWF  x3E
669E:  MOVLW  01
66A0:  MOVWF  x3F
66A2:  MOVLB  0
66A4:  CALL   1814
....................       displayTiempo(Testerilizacion[1],98,0,0,1);displayTiempo(Testerilizacion[0],104,0,0,1); 
66A8:  MOVFF  4A5,53B
66AC:  MOVLW  62
66AE:  MOVLB  5
66B0:  MOVWF  x3C
66B2:  CLRF   x3D
66B4:  CLRF   x3E
66B6:  MOVLW  01
66B8:  MOVWF  x3F
66BA:  MOVLB  0
66BC:  CALL   23EC
66C0:  MOVFF  4A4,53B
66C4:  MOVLW  68
66C6:  MOVLB  5
66C8:  MOVWF  x3C
66CA:  CLRF   x3D
66CC:  CLRF   x3E
66CE:  MOVLW  01
66D0:  MOVWF  x3F
66D2:  MOVLB  0
66D4:  CALL   23EC
....................       // Muestra tiempo de secado actual. 
....................       displayTiempo(Tsecado[3],80,8,0,1);displayTiempo(Tsecado[2],86,8,0,1); 
66D8:  MOVFF  4AF,53B
66DC:  MOVLW  50
66DE:  MOVLB  5
66E0:  MOVWF  x3C
66E2:  MOVLW  08
66E4:  MOVWF  x3D
66E6:  CLRF   x3E
66E8:  MOVLW  01
66EA:  MOVWF  x3F
66EC:  MOVLB  0
66EE:  CALL   23EC
66F2:  MOVFF  4AE,53B
66F6:  MOVLW  56
66F8:  MOVLB  5
66FA:  MOVWF  x3C
66FC:  MOVLW  08
66FE:  MOVWF  x3D
6700:  CLRF   x3E
6702:  MOVLW  01
6704:  MOVWF  x3F
6706:  MOVLB  0
6708:  CALL   23EC
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,8,2,1);  
670C:  MOVLW  05
670E:  MOVWF  FEA
6710:  MOVLW  1A
6712:  MOVWF  FE9
6714:  MOVFF  FF2,53A
6718:  BCF    FF2.7
671A:  MOVLW  00
671C:  CALL   06CA
6720:  TBLRD*-
6722:  TBLRD*+
6724:  MOVF   FF5,W
6726:  MOVWF  FEE
6728:  IORLW  00
672A:  BNZ   6722
672C:  MOVLB  5
672E:  BTFSC  x3A.7
6730:  BSF    FF2.7
6732:  MOVLW  05
6734:  MOVWF  x3B
6736:  MOVLW  1A
6738:  MOVWF  x3A
673A:  MOVLW  5C
673C:  MOVWF  x3C
673E:  MOVLW  08
6740:  MOVWF  x3D
6742:  MOVLW  02
6744:  MOVWF  x3E
6746:  MOVLW  01
6748:  MOVWF  x3F
674A:  MOVLB  0
674C:  CALL   1814
....................       displayTiempo(Tsecado[1],98,8,0,1);displayTiempo(Tsecado[0],104,8,0,1); 
6750:  MOVFF  4AD,53B
6754:  MOVLW  62
6756:  MOVLB  5
6758:  MOVWF  x3C
675A:  MOVLW  08
675C:  MOVWF  x3D
675E:  CLRF   x3E
6760:  MOVLW  01
6762:  MOVWF  x3F
6764:  MOVLB  0
6766:  CALL   23EC
676A:  MOVFF  4AC,53B
676E:  MOVLW  68
6770:  MOVLB  5
6772:  MOVWF  x3C
6774:  MOVLW  08
6776:  MOVWF  x3D
6778:  CLRF   x3E
677A:  MOVLW  01
677C:  MOVWF  x3F
677E:  MOVLB  0
6780:  CALL   23EC
....................    } 
....................           
....................    if(ADC_Pt100>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
6784:  MOVLB  5
6786:  CLRF   x40
6788:  MOVFF  48E,53F
678C:  MOVLB  0
678E:  CALL   1116
6792:  MOVFF  00,53A
6796:  MOVFF  01,53B
679A:  MOVFF  02,53C
679E:  MOVFF  03,53D
67A2:  BSF    FD8.1
67A4:  MOVFF  03,541
67A8:  MOVFF  02,540
67AC:  MOVFF  01,53F
67B0:  MOVFF  00,53E
67B4:  MOVLB  5
67B6:  CLRF   x45
67B8:  CLRF   x44
67BA:  CLRF   x43
67BC:  MOVLW  7F
67BE:  MOVWF  x42
67C0:  MOVLB  0
67C2:  CALL   1CDA
67C6:  MOVFF  03,53D
67CA:  MOVFF  02,53C
67CE:  MOVFF  01,53B
67D2:  MOVFF  00,53A
67D6:  MOVFF  4A3,541
67DA:  MOVFF  4A2,540
67DE:  MOVFF  4A1,53F
67E2:  MOVFF  4A0,53E
67E6:  GOTO   2AC6
67EA:  BC    67EE
67EC:  BNZ   6854
....................    { 
....................       if(est==0) 
67EE:  MOVLB  4
67F0:  BTFSC  x7D.0
67F2:  BRA    6856
....................       { 
....................          tiempo_esterilizacion=1; 
67F4:  MOVLW  01
67F6:  MOVWF  x91
....................          Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1; 
67F8:  MOVLB  5
67FA:  CLRF   x3A
67FC:  MOVLW  5A
67FE:  MOVWF  x3B
6800:  MOVLW  38
6802:  MOVWF  x3C
6804:  MOVLB  0
6806:  CALL   267C
680A:  MOVLW  0F
680C:  MOVLB  5
680E:  MOVWF  x4C
6810:  MOVLW  12
6812:  MOVWF  x4D
6814:  MOVLW  1E
6816:  MOVWF  x4E
6818:  MOVLW  35
681A:  MOVWF  x4F
681C:  CLRF   x50
681E:  CLRF   x51
6820:  MOVLB  0
6822:  CALL   1752
6826:  MOVLW  19
6828:  MOVLB  5
682A:  MOVWF  x4C
682C:  MOVLW  12
682E:  MOVWF  x4D
6830:  MOVLW  3C
6832:  MOVWF  x4E
6834:  MOVLW  1A
6836:  MOVWF  x4F
6838:  CLRF   x50
683A:  MOVLW  01
683C:  MOVWF  x51
683E:  MOVLB  0
6840:  CALL   1752
6844:  MOVLB  4
6846:  BSF    x7D.0
....................          glcd_imagen(5); 
6848:  MOVLW  05
684A:  MOVLB  5
684C:  MOVWF  x3A
684E:  MOVLB  0
6850:  CALL   2040
6854:  MOVLB  4
....................       } 
....................    }   
....................     
....................    if(Exhaust==1 && tiempo_esterilizacion==2)// Si realiza desfogue rapido 
6856:  DECFSZ x93,W
6858:  BRA    6878
685A:  MOVF   x91,W
685C:  SUBLW  02
685E:  BNZ   6878
....................    { 
....................       // Debe enviar a Hardware_Controller que abra EV de desfogue 
....................       Control=0; 
6860:  CLRF   x87
....................       if(Presostato<2) 
6862:  MOVF   x74,W
6864:  SUBLW  01
6866:  BNC   6874
....................       { 
....................          tiempo_secado=1; 
6868:  MOVLW  01
686A:  MOVWF  x92
....................          Control=0;EVDesfogue=3; 
686C:  CLRF   x87
686E:  MOVLW  03
6870:  MOVWF  x80
....................       } 
....................       else 
6872:  BRA    6878
....................       { 
....................          EVDesfogue=1; 
6874:  MOVLW  01
6876:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    if(Exhaust==2 && tiempo_esterilizacion==2 )// Si Debe realizar Rampa 
6878:  MOVF   x93,W
687A:  SUBLW  02
687C:  BNZ   68A0
687E:  MOVF   x91,W
6880:  SUBLW  02
6882:  BNZ   68A0
....................    {      
....................       // Debe enviar a Hardware_Controller que abra Ejecute modo rampa. 
....................       EVDesfogue=2; 
6884:  MOVLW  02
6886:  MOVWF  x80
....................       Control=0; 
6888:  CLRF   x87
....................       if(Presostato<2) 
688A:  MOVF   x74,W
688C:  SUBLW  01
688E:  BNC   68A0
....................       { 
....................          tiempo_esterilizacion=3; 
6890:  MOVLW  03
6892:  MOVWF  x91
....................          tiempo_secado=2; 
6894:  MOVLW  02
6896:  MOVWF  x92
....................          fin_ciclo=1; 
6898:  MOVLW  01
689A:  MOVWF  x8F
....................          EVDesfogue=3; 
689C:  MOVLW  03
689E:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3]) && tiempo_esterilizacion==1) 
68A0:  MOVF   xA8,W
68A2:  SUBWF  xA4,W
68A4:  BNZ   68C0
68A6:  MOVF   xA9,W
68A8:  SUBWF  xA5,W
68AA:  BNZ   68C0
68AC:  MOVF   xAA,W
68AE:  SUBWF  xA6,W
68B0:  BNZ   68C0
68B2:  MOVF   xAB,W
68B4:  SUBWF  xA7,W
68B6:  BNZ   68C0
68B8:  DECFSZ x91,W
68BA:  BRA    68C0
....................    { 
....................       tiempo_esterilizacion=2; 
68BC:  MOVLW  02
68BE:  MOVWF  x91
....................    }  
....................     
....................    // Si cumplio el tiempo de secado. 
....................    if((Tsecado[0]>=Tsecadop[0])&&(Tsecado[1]>=Tsecadop[1])&&(Tsecado[2]>=Tsecadop[2])&&(Tsecado[3]>=Tsecadop[3]) && tiempo_secado==1) 
68C0:  MOVF   xB0,W
68C2:  XORLW  80
68C4:  MOVWF  00
68C6:  MOVF   xAC,W
68C8:  XORLW  80
68CA:  SUBWF  00,W
68CC:  BZ    68D0
68CE:  BC    6910
68D0:  MOVF   xB1,W
68D2:  XORLW  80
68D4:  MOVWF  00
68D6:  MOVF   xAD,W
68D8:  XORLW  80
68DA:  SUBWF  00,W
68DC:  BZ    68E0
68DE:  BC    6910
68E0:  MOVF   xB2,W
68E2:  XORLW  80
68E4:  MOVWF  00
68E6:  MOVF   xAE,W
68E8:  XORLW  80
68EA:  SUBWF  00,W
68EC:  BZ    68F0
68EE:  BC    6910
68F0:  MOVF   xB3,W
68F2:  XORLW  80
68F4:  MOVWF  00
68F6:  MOVF   xAF,W
68F8:  XORLW  80
68FA:  SUBWF  00,W
68FC:  BZ    6900
68FE:  BC    6910
6900:  DECFSZ x92,W
6902:  BRA    6910
....................    { 
....................       tiempo_esterilizacion=3; 
6904:  MOVLW  03
6906:  MOVWF  x91
....................       tiempo_secado=2; 
6908:  MOVLW  02
690A:  MOVWF  x92
....................       fin_ciclo=1; 
690C:  MOVLW  01
690E:  MOVWF  x8F
....................    } 
....................     
....................    if(fin_ciclo==1) 
6910:  DECFSZ x8F,W
6912:  BRA    69B8
....................    { 
....................       // Debe enviar a Hardware_Controller que apague Resistencia y que cierre EV de desfogue 
....................       Control=0;EVDesfogue=3; 
6914:  CLRF   x87
6916:  MOVLW  03
6918:  MOVWF  x80
....................       if(disp_Fin==0) 
691A:  BTFSC  x7E.3
691C:  BRA    698E
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
691E:  MOVLB  5
6920:  CLRF   x4C
6922:  MOVLW  37
6924:  MOVWF  x4D
6926:  MOVLW  7F
6928:  MOVWF  x4E
692A:  MOVLW  3F
692C:  MOVWF  x4F
692E:  MOVLW  01
6930:  MOVWF  x50
6932:  CLRF   x51
6934:  MOVLB  0
6936:  CALL   1752
....................          strcpy(Menus.Letra,"Ciclo Finalizado");displayMenu(Menus.Letra,0,55,2,1); 
693A:  MOVLW  05
693C:  MOVWF  FEA
693E:  MOVLW  1A
6940:  MOVWF  FE9
6942:  MOVFF  FF2,53A
6946:  BCF    FF2.7
6948:  MOVLW  00
694A:  CALL   0E48
694E:  TBLRD*-
6950:  TBLRD*+
6952:  MOVF   FF5,W
6954:  MOVWF  FEE
6956:  IORLW  00
6958:  BNZ   6950
695A:  MOVLB  5
695C:  BTFSC  x3A.7
695E:  BSF    FF2.7
6960:  MOVLW  05
6962:  MOVWF  x3B
6964:  MOVLW  1A
6966:  MOVWF  x3A
6968:  CLRF   x3C
696A:  MOVLW  37
696C:  MOVWF  x3D
696E:  MOVLW  02
6970:  MOVWF  x3E
6972:  MOVLW  01
6974:  MOVWF  x3F
6976:  MOVLB  0
6978:  CALL   1814
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=1; 
697C:  MOVLB  4
697E:  BCF    x7D.4
6980:  BCF    x7D.5
6982:  BSF    x7D.6
6984:  BCF    x7D.7
6986:  BSF    x7E.0
6988:  BCF    x7E.1
698A:  BCF    x7E.2
698C:  BSF    x7E.3
....................       }    
....................        
....................       if(RIGHT) 
698E:  BSF    F96.1
6990:  BTFSS  F84.1
6992:  BRA    69B8
....................       { 
....................          Control=3; 
6994:  MOVLW  03
6996:  MOVWF  x87
....................          EnviarCodigo(); 
6998:  MOVLB  0
699A:  CALL   1AFA
....................          delay_ms(1000); 
699E:  MOVLW  04
69A0:  MOVLB  5
69A2:  MOVWF  x3A
69A4:  MOVLW  FA
69A6:  MOVWF  x3F
69A8:  MOVLB  0
69AA:  CALL   10EC
69AE:  MOVLB  5
69B0:  DECFSZ x3A,F
69B2:  BRA    69A4
....................          reset_cpu(); 
69B4:  RESET
69B6:  MOVLB  4
....................       } 
....................    } 
....................    EVAgua=10; 
69B8:  MOVLW  0A
69BA:  MOVWF  x81
....................    //EnviarCodigo(); 
....................   } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  while(Menu==100) 
....................  { 
69BC:  MOVF   x89,W
69BE:  SUBLW  64
69C0:  BTFSS  FD8.2
69C2:  BRA    6AC0
....................     
....................    displayTiempo(datoRx[0],0,10,2,1); 
69C4:  MOVFF  4D4,53B
69C8:  MOVLB  5
69CA:  CLRF   x3C
69CC:  MOVLW  0A
69CE:  MOVWF  x3D
69D0:  MOVLW  02
69D2:  MOVWF  x3E
69D4:  MOVLW  01
69D6:  MOVWF  x3F
69D8:  MOVLB  0
69DA:  CALL   23EC
....................    displayTiempo(datoRx[1],0,20,2,1); 
69DE:  MOVFF  4D5,53B
69E2:  MOVLB  5
69E4:  CLRF   x3C
69E6:  MOVLW  14
69E8:  MOVWF  x3D
69EA:  MOVLW  02
69EC:  MOVWF  x3E
69EE:  MOVLW  01
69F0:  MOVWF  x3F
69F2:  MOVLB  0
69F4:  CALL   23EC
....................    displayTiempo(datoRx[2],0,30,2,1); 
69F8:  MOVFF  4D6,53B
69FC:  MOVLB  5
69FE:  CLRF   x3C
6A00:  MOVLW  1E
6A02:  MOVWF  x3D
6A04:  MOVLW  02
6A06:  MOVWF  x3E
6A08:  MOVLW  01
6A0A:  MOVWF  x3F
6A0C:  MOVLB  0
6A0E:  CALL   23EC
....................    displayTiempo(datoRx[3],0,40,2,1); 
6A12:  MOVFF  4D7,53B
6A16:  MOVLB  5
6A18:  CLRF   x3C
6A1A:  MOVLW  28
6A1C:  MOVWF  x3D
6A1E:  MOVLW  02
6A20:  MOVWF  x3E
6A22:  MOVLW  01
6A24:  MOVWF  x3F
6A26:  MOVLB  0
6A28:  CALL   23EC
....................    displayTiempo(Opcion,0,50,2,1); 
6A2C:  MOVFF  490,53B
6A30:  MOVLB  5
6A32:  CLRF   x3C
6A34:  MOVLW  32
6A36:  MOVWF  x3D
6A38:  MOVLW  02
6A3A:  MOVWF  x3E
6A3C:  MOVLW  01
6A3E:  MOVWF  x3F
6A40:  MOVLB  0
6A42:  CALL   23EC
....................     
....................    Opcion++; 
6A46:  MOVLB  4
6A48:  INCF   x90,F
....................    Determina(); 
6A4A:  MOVLB  0
6A4C:  CALL   1F52
....................    displayTiempo(Puerta,50,10,2,1); 
6A50:  MOVFF  470,53B
6A54:  MOVLW  32
6A56:  MOVLB  5
6A58:  MOVWF  x3C
6A5A:  MOVLW  0A
6A5C:  MOVWF  x3D
6A5E:  MOVLW  02
6A60:  MOVWF  x3E
6A62:  MOVLW  01
6A64:  MOVWF  x3F
6A66:  MOVLB  0
6A68:  CALL   23EC
....................    displayTiempo(Parada,50,20,2,1); 
6A6C:  MOVFF  471,53B
6A70:  MOVLW  32
6A72:  MOVLB  5
6A74:  MOVWF  x3C
6A76:  MOVLW  14
6A78:  MOVWF  x3D
6A7A:  MOVLW  02
6A7C:  MOVWF  x3E
6A7E:  MOVLW  01
6A80:  MOVWF  x3F
6A82:  MOVLB  0
6A84:  CALL   23EC
....................    displayTiempo(ADC_Pt100,50,30,2,1);      
6A88:  MOVFF  4A3,53D
6A8C:  MOVFF  4A2,53C
6A90:  MOVFF  4A1,53B
6A94:  MOVFF  4A0,53A
6A98:  CALL   2A8A
6A9C:  MOVFF  01,53A
6AA0:  MOVFF  01,53B
6AA4:  MOVLW  32
6AA6:  MOVLB  5
6AA8:  MOVWF  x3C
6AAA:  MOVLW  1E
6AAC:  MOVWF  x3D
6AAE:  MOVLW  02
6AB0:  MOVWF  x3E
6AB2:  MOVLW  01
6AB4:  MOVWF  x3F
6AB6:  MOVLB  0
6AB8:  CALL   23EC
....................     
....................  } 
6ABC:  MOVLB  4
6ABE:  BRA    69BC
....................  Determina(); 
6AC0:  MOVLB  0
6AC2:  CALL   1F52
....................        
....................       while(Parada==0) 
....................       { 
6AC6:  MOVLB  4
6AC8:  MOVF   x71,F
6ACA:  BNZ   6B90
....................          delay_ms(100); 
6ACC:  MOVLW  64
6ACE:  MOVLB  5
6AD0:  MOVWF  x3F
6AD2:  MOVLB  0
6AD4:  CALL   10EC
....................          if(disp_Stop==0) 
6AD8:  MOVLB  4
6ADA:  BTFSC  x7E.1
6ADC:  BRA    6B7C
....................          { 
....................             glcd_fillScreen(OFF);  
6ADE:  MOVLB  5
6AE0:  CLRF   x3B
6AE2:  MOVLB  0
6AE4:  CALL   11E4
....................             strcpy(Menus.Letra,"  !Parada!");displayMenu(Menus.Letra,0,10,0,2); 
6AE8:  MOVLW  05
6AEA:  MOVWF  FEA
6AEC:  MOVLW  1A
6AEE:  MOVWF  FE9
6AF0:  MOVFF  FF2,53A
6AF4:  BCF    FF2.7
6AF6:  MOVLW  00
6AF8:  CALL   0E74
6AFC:  TBLRD*-
6AFE:  TBLRD*+
6B00:  MOVF   FF5,W
6B02:  MOVWF  FEE
6B04:  IORLW  00
6B06:  BNZ   6AFE
6B08:  MOVLB  5
6B0A:  BTFSC  x3A.7
6B0C:  BSF    FF2.7
6B0E:  MOVLW  05
6B10:  MOVWF  x3B
6B12:  MOVLW  1A
6B14:  MOVWF  x3A
6B16:  CLRF   x3C
6B18:  MOVLW  0A
6B1A:  MOVWF  x3D
6B1C:  CLRF   x3E
6B1E:  MOVLW  02
6B20:  MOVWF  x3F
6B22:  MOVLB  0
6B24:  CALL   1814
....................             strcpy(Menus.Letra," !Activada!");displayMenu(Menus.Letra,0,30,0,2);emergency=1; 
6B28:  MOVLW  05
6B2A:  MOVWF  FEA
6B2C:  MOVLW  1A
6B2E:  MOVWF  FE9
6B30:  MOVFF  FF2,53A
6B34:  BCF    FF2.7
6B36:  MOVLW  00
6B38:  CALL   0E9A
6B3C:  TBLRD*-
6B3E:  TBLRD*+
6B40:  MOVF   FF5,W
6B42:  MOVWF  FEE
6B44:  IORLW  00
6B46:  BNZ   6B3E
6B48:  MOVLB  5
6B4A:  BTFSC  x3A.7
6B4C:  BSF    FF2.7
6B4E:  MOVLW  05
6B50:  MOVWF  x3B
6B52:  MOVLW  1A
6B54:  MOVWF  x3A
6B56:  CLRF   x3C
6B58:  MOVLW  1E
6B5A:  MOVWF  x3D
6B5C:  CLRF   x3E
6B5E:  MOVLW  02
6B60:  MOVWF  x3F
6B62:  MOVLB  0
6B64:  CALL   1814
6B68:  MOVLB  4
6B6A:  BSF    x7C.3
....................             disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=1;disp_Door=0;disp_Fin=0; 
6B6C:  BCF    x7D.4
6B6E:  BCF    x7D.5
6B70:  BCF    x7D.6
6B72:  BCF    x7D.7
6B74:  BCF    x7E.0
6B76:  BSF    x7E.1
6B78:  BCF    x7E.2
6B7A:  BCF    x7E.3
....................          } 
....................          if(CadenaRecibida==1) 
6B7C:  BTFSS  x7D.3
6B7E:  BRA    6B8E
....................          { 
....................             Determina(); 
6B80:  MOVLB  0
6B82:  CALL   1F52
....................             EnviarCodigo(); 
6B86:  CALL   1AFA
....................             CadenaRecibida=0; 
6B8A:  MOVLB  4
6B8C:  BCF    x7D.3
....................          } 
....................       }    
6B8E:  BRA    6AC8
....................       if(Parada==1) 
6B90:  DECFSZ x71,W
6B92:  BRA    6BB0
....................       { 
....................          if(emergency==1) 
6B94:  BTFSS  x7C.3
6B96:  BRA    6BB0
....................          {glcd_fillScreen(OFF);emergency=0;visual=1;disp_Stop=0;Menu=1;reset_cpu();} 
6B98:  MOVLB  5
6B9A:  CLRF   x3B
6B9C:  MOVLB  0
6B9E:  CALL   11E4
6BA2:  MOVLB  4
6BA4:  BCF    x7C.3
6BA6:  BSF    x7C.4
6BA8:  BCF    x7E.1
6BAA:  MOVLW  01
6BAC:  MOVWF  x89
6BAE:  RESET
....................       } 
....................    } 
6BB0:  GOTO   30B6
.................... } 
6BB4:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
