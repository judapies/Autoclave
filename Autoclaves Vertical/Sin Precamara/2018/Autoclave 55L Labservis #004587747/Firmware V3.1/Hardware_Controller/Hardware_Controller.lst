CCS PCH C Compiler, Version 4.104, 5967               28-mar.-19 16:49

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Sin Precamara\2018\Autoclave 55L Labservis #004587747\Firmware V3.1\Hardware_Controller\Hardware_Controller.lst

               ROM used: 14622 bytes (45%)
                         Largest free fragment is 18146
               RAM used: 1049 (51%) at main() level
                         1084 (53%) worst case
               Stack:    13 worst case (4 in main + 9 for interrupts)

*
0000:  GOTO   2474
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0E1A
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0EA4
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   0D8A
006C:  BTFSS  FA0.5
006E:  GOTO   0078
0072:  BTFSC  FA1.5
0074:  GOTO   0CEA
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F4553.h> 
.................... //////// Standard Header file for the PIC18F4553 device //////////////// 
.................... #device PIC18F4553 
.................... #list 
....................  
.................... #device adc=12 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
0F14:  MOVLW  03
0F16:  MOVWF  FEA
0F18:  MOVLW  4D
0F1A:  MOVWF  FE9
0F1C:  MOVF   FEF,W
0F1E:  BZ    0F3C
0F20:  MOVLW  0F
0F22:  MOVWF  01
0F24:  CLRF   00
0F26:  DECFSZ 00,F
0F28:  BRA    0F26
0F2A:  DECFSZ 01,F
0F2C:  BRA    0F24
0F2E:  MOVLW  8F
0F30:  MOVWF  00
0F32:  DECFSZ 00,F
0F34:  BRA    0F32
0F36:  NOP   
0F38:  DECFSZ FEF,F
0F3A:  BRA    0F20
0F3C:  GOTO   0F96 (RETURN)
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xA0) 
*
0D72:  MOVF   FC9,W
0D74:  MOVFF  35E,FC9
0D78:  BSF    FC6.4
0D7A:  BCF    F9E.3
0D7C:  BTFSC  FC7.0
0D7E:  BRA    0D7C
0D80:  CLRF   01
0D82:  BTFSC  FC6.4
0D84:  INCF   01,F
0D86:  GOTO   0DBE (RETURN)
.................... // Definición de Entradas 
.................... #define   PRES          !input(PIN_D7) 
.................... #define   TERM          !input(PIN_D6) 
.................... #define   DOOR          !input(PIN_D4) 
.................... #define   STOP          !input(PIN_D5) 
.................... #define   LOW            input(PIN_D0) 
.................... #define   MEDIUM         input(PIN_D1) 
.................... #define   HIGH           input(PIN_D2) 
....................  
.................... // Definición de Salidas 
.................... #define   Resistencia_on     output_bit(PIN_C0,1) 
.................... #define   Resistencia_off    output_bit(PIN_C0,0) 
.................... #define   Bomba_on           output_bit(PIN_C1,1) 
.................... #define   Bomba_off          output_bit(PIN_C1,0) 
....................  
.................... #define   EV_Desfogue_on     output_bit(PIN_B2,1) 
.................... #define   EV_Desfogue_off    output_bit(PIN_B2,0) 
.................... #define   EV_Paso_on         output_bit(PIN_B3,1) 
.................... #define   EV_Paso_off        output_bit(PIN_B3,0) 
.................... #define   EV_Agua_on         output_bit(PIN_B4,1) 
.................... #define   EV_Agua_off        output_bit(PIN_B4,0) 
.................... #define   EV_Aire_on         output_bit(PIN_B5,1) 
.................... #define   EV_Aire_off        output_bit(PIN_B5,0) 
.................... #define   EV_Bomba_on        output_bit(PIN_B6,1) 
.................... #define   EV_Bomba_off       output_bit(PIN_B6,0) 
.................... #define   EV_AireBomba_on    output_bit(PIN_B7,1) 
.................... #define   EV_AireBomba_off   output_bit(PIN_B7,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
1EC2:  CLRF   03
1EC4:  MOVLB  3
1EC6:  MOVF   x47,W
1EC8:  ADDLW  70
1ECA:  MOVWF  FE9
1ECC:  MOVLW  0F
1ECE:  ADDWFC 03,W
1ED0:  MOVWF  FEA
1ED2:  MOVF   FEF,F
1ED4:  BZ    1EF0
1ED6:  MOVF   x47,W
1ED8:  MULLW  08
1EDA:  MOVF   FF3,W
1EDC:  CLRF   x49
1EDE:  MOVWF  x48
1EE0:  MOVWF  FE9
1EE2:  MOVLW  04
1EE4:  ADDWF  x49,W
1EE6:  MOVWF  FEA
1EE8:  MOVFF  FEF,348
1EEC:  BTFSS  x48.7
1EEE:  BRA    1EF4
1EF0:  MOVLW  00
1EF2:  BRA    1EF6
1EF4:  MOVLW  01
1EF6:  MOVWF  01
.................... } 
1EF8:  MOVLB  0
1EFA:  GOTO   2D6A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09FC:  CLRF   03
09FE:  MOVLB  3
0A00:  MOVF   x64,W
0A02:  ADDLW  70
0A04:  MOVWF  FE9
0A06:  MOVLW  0F
0A08:  ADDWFC 03,W
0A0A:  MOVWF  FEA
0A0C:  MOVF   FEF,F
0A0E:  BZ    0A34
0A10:  MOVF   x64,W
0A12:  MULLW  08
0A14:  MOVF   FF3,W
0A16:  CLRF   x66
0A18:  MOVWF  x65
0A1A:  MOVLW  04
0A1C:  ADDWF  x65,F
0A1E:  MOVLW  00
0A20:  ADDWFC x66,F
0A22:  MOVFF  365,FE9
0A26:  MOVLW  04
0A28:  ADDWF  x66,W
0A2A:  MOVWF  FEA
0A2C:  MOVFF  FEF,365
0A30:  BTFSS  x65.7
0A32:  BRA    0A38
0A34:  MOVLW  00
0A36:  BRA    0A3A
0A38:  MOVLW  01
0A3A:  MOVWF  01
.................... } 
0A3C:  MOVLB  0
0A3E:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
1E3A:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
1E3C:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
1E3E:  MOVLW  08
1E40:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
1E42:  MOVF   F94,W
1E44:  IORLW  30
1E46:  MOVLB  3
1E48:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
1E4A:  CLRF   1C
1E4C:  CLRF   16
1E4E:  BTFSC  FF2.7
1E50:  BSF    16.7
1E52:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
1E54:  MOVLB  0
1E56:  CALL   02F6
1E5A:  BTFSC  16.7
1E5C:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
1E5E:  GOTO   1E64 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
1E68:  CLRF   16
1E6A:  BTFSC  FF2.7
1E6C:  BSF    16.7
1E6E:  BCF    FF2.7
....................    usb_token_reset(); 
1E70:  CALL   02F6
1E74:  BTFSC  16.7
1E76:  BSF    FF2.7
....................    UCON = 0; 
1E78:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
1E7A:  MOVLW  14
1E7C:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
1E7E:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
1E80:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
1E82:  MOVLW  01
1E84:  MOVWF  1C
.................... } 
1E86:  GOTO   1E90 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
1E62:  BRA    1E3A
.................... } 
1E64:  GOTO   1EAE (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
1E8A:  BTFSC  F6D.3
1E8C:  BRA    1E90
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
1E8E:  BRA    1E68
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
1E90:  DECFSZ 1C,W
1E92:  BRA    1EAA
1E94:  BTFSC  F6D.5
1E96:  BRA    1EAA
....................    { 
....................       UIR=0; 
1E98:  CLRF   F68
....................       UIE=0; 
1E9A:  CLRF   F69
....................       enable_interrupts(INT_USB); 
1E9C:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
1E9E:  MOVLW  C0
1EA0:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
1EA2:  MOVLW  11
1EA4:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
1EA6:  MOVLW  02
1EA8:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
1EAA:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
1EAC:  BRA    1E62
....................  
....................    do  
....................    { 
....................       usb_task(); 
1EAE:  RCALL  1E8A
....................    } while (usb_state != USB_STATE_POWERED); 
1EB0:  MOVF   1C,W
1EB2:  SUBLW  02
1EB4:  BNZ   1EAE
.................... } 
1EB6:  GOTO   2C86 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A40:  MOVFF  35F,364
0A44:  RCALL  09FC
0A46:  MOVF   01,F
0A48:  BZ    0B12
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A4A:  MOVLB  3
0A4C:  MOVF   x5F,W
0A4E:  MULLW  08
0A50:  MOVF   FF3,W
0A52:  CLRF   x65
0A54:  MOVWF  x64
0A56:  MOVLW  04
0A58:  ADDWF  x64,F
0A5A:  MOVLW  00
0A5C:  ADDWFC x65,F
0A5E:  MOVLW  01
0A60:  ADDWF  x64,W
0A62:  MOVWF  01
0A64:  MOVLW  00
0A66:  ADDWFC x65,W
0A68:  MOVWF  03
0A6A:  MOVFF  01,FE9
0A6E:  MOVLW  04
0A70:  ADDWF  03,W
0A72:  MOVWF  FEA
0A74:  MOVFF  360,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A78:  MOVF   x62,W
0A7A:  SUBLW  02
0A7C:  BNZ   0AAC
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A7E:  MOVF   x5F,W
0A80:  MULLW  08
0A82:  MOVF   FF3,W
0A84:  CLRF   x65
0A86:  MOVWF  x64
0A88:  MOVLW  04
0A8A:  ADDWF  x64,F
0A8C:  MOVLW  00
0A8E:  ADDWFC x65,F
0A90:  MOVFF  364,FE9
0A94:  MOVLW  04
0A96:  ADDWF  x65,W
0A98:  MOVWF  FEA
0A9A:  MOVFF  FEF,363
....................          if (bit_test(i,6)) 
0A9E:  BTFSS  x63.6
0AA0:  BRA    0AA6
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0AA2:  CLRF   x62
....................          else 
0AA4:  BRA    0AAA
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0AA6:  MOVLW  01
0AA8:  MOVWF  x62
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
0AAA:  BRA    0AD2
0AAC:  MOVF   x62,W
0AAE:  SUBLW  04
0AB0:  BNZ   0AD2
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0AB2:  MOVF   x5F,W
0AB4:  MULLW  08
0AB6:  MOVF   FF3,W
0AB8:  CLRF   x65
0ABA:  MOVWF  FE9
0ABC:  MOVLW  04
0ABE:  ADDWF  x65,W
0AC0:  MOVWF  FEA
0AC2:  MOVFF  FEF,363
....................          if (bit_test(i,6)) 
0AC6:  BTFSS  x63.6
0AC8:  BRA    0AD0
....................             tgl = USB_DTS_DATA1; 
0ACA:  MOVLW  01
0ACC:  MOVWF  x62
....................          else 
0ACE:  BRA    0AD2
....................             tgl = USB_DTS_DATA0; 
0AD0:  CLRF   x62
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0AD2:  DECFSZ x62,W
0AD4:  BRA    0ADC
....................          i=0xC8;  //DATA1, UOWN 
0AD6:  MOVLW  C8
0AD8:  MOVWF  x63
....................       else //if (tgl == USB_DTS_DATA0)  
0ADA:  BRA    0AE0
....................          i=0x88; //DATA0, UOWN 
0ADC:  MOVLW  88
0ADE:  MOVWF  x63
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0AE0:  BTFSC  x61.0
0AE2:  BSF    x63.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0AE4:  BTFSC  x61.1
0AE6:  BSF    x63.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AE8:  MOVF   x5F,W
0AEA:  MULLW  08
0AEC:  MOVF   FF3,W
0AEE:  CLRF   x65
0AF0:  MOVWF  x64
0AF2:  MOVLW  04
0AF4:  ADDWF  x64,F
0AF6:  MOVLW  00
0AF8:  ADDWFC x65,F
0AFA:  MOVFF  364,FE9
0AFE:  MOVLW  04
0B00:  ADDWF  x65,W
0B02:  MOVWF  FEA
0B04:  MOVFF  363,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0B08:  MOVLW  01
0B0A:  MOVWF  01
0B0C:  BRA    0B18
....................    } 
....................    else  
0B0E:  BRA    0B10
0B10:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0B12:  MOVLW  00
0B14:  MOVWF  01
0B16:  MOVLB  3
.................... } 
0B18:  MOVLB  0
0B1A:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
2012:  CLRF   16
2014:  BTFSC  FF2.7
2016:  BSF    16.7
2018:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
201A:  MOVFF  347,364
201E:  CALL   09FC
2022:  BTFSC  16.7
2024:  BSF    FF2.7
2026:  MOVF   01,F
2028:  BZ    20BA
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
202A:  MOVLB  3
202C:  MOVF   x47,W
202E:  MULLW  08
2030:  MOVF   FF3,W
2032:  CLRF   x50
2034:  MOVWF  x4F
2036:  MOVLW  04
2038:  ADDWF  x4F,F
203A:  MOVLW  00
203C:  ADDWFC x50,F
203E:  MOVLW  02
2040:  ADDWF  x4F,W
2042:  MOVWF  01
2044:  MOVLW  00
2046:  ADDWFC x50,W
2048:  MOVWF  03
204A:  MOVFF  01,FE9
204E:  MOVLW  04
2050:  ADDWF  03,W
2052:  MOVWF  FEA
2054:  MOVFF  FEC,03
2058:  MOVF   FED,F
205A:  MOVFF  FEF,34D
205E:  MOVFF  03,34E
....................       memcpy(buff_add, ptr, len);      
2062:  MOVFF  34E,FEA
2066:  MOVFF  34D,FE9
206A:  MOVFF  349,FE2
206E:  MOVFF  348,FE1
2072:  MOVFF  34B,02
2076:  MOVFF  34A,01
207A:  MOVF   01,F
207C:  BZ    2082
207E:  INCF   02,F
2080:  BRA    2086
2082:  MOVF   02,F
2084:  BZ    2092
2086:  MOVFF  FE6,FEE
208A:  DECFSZ 01,F
208C:  BRA    2086
208E:  DECFSZ 02,F
2090:  BRA    2086
2092:  CLRF   16
2094:  BTFSC  FF2.7
2096:  BSF    16.7
2098:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
209A:  MOVFF  347,35F
209E:  MOVFF  34B,361
20A2:  MOVFF  34A,360
20A6:  MOVFF  34C,362
20AA:  MOVLB  0
20AC:  CALL   0A40
20B0:  BTFSC  16.7
20B2:  BSF    FF2.7
20B4:  MOVF   01,W
20B6:  BRA    20BE
....................    } 
....................    else  
20B8:  BRA    20BA
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
20BA:  MOVLW  00
20BC:  MOVWF  01
.................... } 
20BE:  GOTO   34AE (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0932:  MOVLB  3
0934:  MOVF   x5F,W
0936:  MULLW  08
0938:  MOVF   FF3,W
093A:  CLRF   x65
093C:  MOVWF  FE9
093E:  MOVLW  04
0940:  ADDWF  x65,W
0942:  MOVWF  FEA
0944:  MOVFF  FEF,361
....................    if (tgl == USB_DTS_TOGGLE)  
0948:  MOVF   x60,W
094A:  SUBLW  02
094C:  BNZ   095A
....................    { 
....................       if (bit_test(i,6)) 
094E:  BTFSS  x61.6
0950:  BRA    0956
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0952:  CLRF   x60
....................       else 
0954:  BRA    095A
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0956:  MOVLW  01
0958:  MOVWF  x60
....................    } 
....................    if (tgl == USB_DTS_STALL)  
095A:  MOVF   x60,W
095C:  SUBLW  03
095E:  BNZ   0986
....................    { 
....................       i = 0x84; 
0960:  MOVLW  84
0962:  MOVWF  x61
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
0964:  MOVF   x5F,W
0966:  MULLW  08
0968:  MOVF   FF3,W
096A:  CLRF   x65
096C:  MOVWF  x64
096E:  MOVLW  04
0970:  ADDWF  x64,F
0972:  MOVLW  00
0974:  ADDWFC x65,F
0976:  MOVFF  364,FE9
097A:  MOVLW  04
097C:  ADDWF  x65,W
097E:  MOVWF  FEA
0980:  MOVLW  84
0982:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
0984:  BRA    0994
0986:  DECFSZ x60,W
0988:  BRA    0990
....................       i = 0xC8;  //DATA1, UOWN 
098A:  MOVLW  C8
098C:  MOVWF  x61
....................    else //if (tgl == USB_DTS_DATA0)  
098E:  BRA    0994
....................       i = 0x88; //DATA0, UOWN 
0990:  MOVLW  88
0992:  MOVWF  x61
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
0994:  BCF    FD8.0
0996:  RLCF   x5F,W
0998:  CLRF   03
099A:  MOVFF  FF2,364
099E:  BCF    FF2.7
09A0:  MOVLB  0
09A2:  CALL   00DA
09A6:  TBLRD*+
09A8:  MOVFF  FF5,03
09AC:  MOVLB  3
09AE:  BTFSC  x64.7
09B0:  BSF    FF2.7
09B2:  MOVWF  x62
09B4:  MOVFF  03,363
....................    EP_BDxCNT_O(endpoint) = len; 
09B8:  MOVF   x5F,W
09BA:  MULLW  08
09BC:  MOVF   FF3,W
09BE:  CLRF   x65
09C0:  MOVWF  x64
09C2:  MOVLW  01
09C4:  ADDWF  x64,W
09C6:  MOVWF  01
09C8:  MOVLW  00
09CA:  ADDWFC x65,W
09CC:  MOVWF  03
09CE:  MOVFF  01,FE9
09D2:  MOVLW  04
09D4:  ADDWF  03,W
09D6:  MOVWF  FEA
09D8:  MOVFF  362,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09DC:  BTFSC  x63.0
09DE:  BSF    x61.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09E0:  BTFSC  x63.1
09E2:  BSF    x61.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09E4:  MOVF   x5F,W
09E6:  MULLW  08
09E8:  MOVF   FF3,W
09EA:  CLRF   x65
09EC:  MOVWF  FE9
09EE:  MOVLW  04
09F0:  ADDWF  x65,W
09F2:  MOVWF  FEA
09F4:  MOVFF  361,FEF
.................... } 
09F8:  MOVLB  0
09FA:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
1EFE:  MOVLB  3
1F00:  MOVF   x4C,W
1F02:  MULLW  08
1F04:  MOVF   FF3,W
1F06:  CLRF   x57
1F08:  MOVWF  x56
1F0A:  MOVLW  02
1F0C:  ADDWF  x56,W
1F0E:  MOVWF  01
1F10:  MOVLW  00
1F12:  ADDWFC x57,W
1F14:  MOVWF  03
1F16:  MOVFF  01,FE9
1F1A:  MOVLW  04
1F1C:  ADDWF  03,W
1F1E:  MOVWF  FEA
1F20:  MOVFF  FEC,03
1F24:  MOVF   FED,F
1F26:  MOVFF  FEF,351
1F2A:  MOVFF  03,352
....................    i = EP_BDxCNT_O(endpoint); 
1F2E:  MOVF   x4C,W
1F30:  MULLW  08
1F32:  MOVF   FF3,W
1F34:  CLRF   x57
1F36:  MOVWF  x56
1F38:  MOVLW  01
1F3A:  ADDWF  x56,W
1F3C:  MOVWF  01
1F3E:  MOVLW  00
1F40:  ADDWFC x57,W
1F42:  MOVWF  03
1F44:  MOVFF  01,FE9
1F48:  MOVLW  04
1F4A:  ADDWF  03,W
1F4C:  MOVWF  FEA
1F4E:  MOVF   FEF,W
1F50:  CLRF   03
1F52:  MOVWF  x54
1F54:  MOVFF  03,355
....................    st = EP_BDxST_O(endpoint); 
1F58:  MOVF   x4C,W
1F5A:  MULLW  08
1F5C:  MOVF   FF3,W
1F5E:  CLRF   x57
1F60:  MOVWF  FE9
1F62:  MOVLW  04
1F64:  ADDWF  x57,W
1F66:  MOVWF  FEA
1F68:  MOVFF  FEF,353
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
1F6C:  BTFSC  x53.0
1F6E:  BSF    x55.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
1F70:  BTFSC  x53.1
1F72:  BSF    x55.1
....................  
....................    if (i < max) {max = i;} 
1F74:  MOVF   x55,W
1F76:  SUBWF  x50,W
1F78:  BNC   1F8A
1F7A:  BNZ   1F82
1F7C:  MOVF   x4F,W
1F7E:  SUBWF  x54,W
1F80:  BC    1F8A
1F82:  MOVFF  355,350
1F86:  MOVFF  354,34F
....................     
....................    memcpy(ptr, al ,max); 
1F8A:  MOVFF  34E,FEA
1F8E:  MOVFF  34D,FE9
1F92:  MOVFF  352,FE2
1F96:  MOVFF  351,FE1
1F9A:  MOVFF  350,02
1F9E:  MOVFF  34F,01
1FA2:  MOVF   01,F
1FA4:  BZ    1FAA
1FA6:  INCF   02,F
1FA8:  BRA    1FAE
1FAA:  MOVF   02,F
1FAC:  BZ    1FBA
1FAE:  MOVFF  FE6,FEE
1FB2:  DECFSZ 01,F
1FB4:  BRA    1FAE
1FB6:  DECFSZ 02,F
1FB8:  BRA    1FAE
....................  
....................    return(max); 
1FBA:  MOVFF  34F,01
1FBE:  MOVFF  350,02
.................... } 
1FC2:  MOVLB  0
1FC4:  GOTO   1FDE (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
1FC8:  MOVFF  347,34C
1FCC:  MOVFF  349,34E
1FD0:  MOVFF  348,34D
1FD4:  MOVFF  34B,350
1FD8:  MOVFF  34A,34F
1FDC:  BRA    1EFE
1FDE:  MOVFF  02,34B
1FE2:  MOVFF  01,34A
1FE6:  CLRF   16
1FE8:  BTFSC  FF2.7
1FEA:  BSF    16.7
1FEC:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
1FEE:  MOVFF  347,35F
1FF2:  MOVLW  02
1FF4:  MOVLB  3
1FF6:  MOVWF  x60
1FF8:  MOVLB  0
1FFA:  CALL   0932
1FFE:  BTFSC  16.7
2000:  BSF    FF2.7
....................  
....................    return(max); 
2002:  MOVLB  3
2004:  MOVFF  34A,01
2008:  MOVFF  34B,02
.................... } 
200C:  MOVLB  0
200E:  GOTO   2D88 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07F8:  MOVLB  3
07FA:  BCF    x60.0
07FC:  BTFSC  x5F.7
07FE:  BSF    x60.0
....................    endpoint &= 0x7F; 
0800:  BCF    x5F.7
....................     
....................    if (direction)  
0802:  BTFSS  x60.0
0804:  BRA    0828
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
0806:  MOVF   x5F,W
0808:  MULLW  08
080A:  MOVF   FF3,W
080C:  CLRF   x62
080E:  MOVWF  x61
0810:  MOVLW  04
0812:  ADDWF  x61,F
0814:  MOVLW  00
0816:  ADDWFC x62,F
0818:  MOVFF  361,FE9
081C:  MOVLW  04
081E:  ADDWF  x62,W
0820:  MOVWF  FEA
0822:  MOVLW  84
0824:  MOVWF  FEF
....................    } 
....................    else  
0826:  BRA    083C
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0828:  MOVF   x5F,W
082A:  MULLW  08
082C:  MOVF   FF3,W
082E:  CLRF   x62
0830:  MOVWF  FE9
0832:  MOVLW  04
0834:  ADDWF  x62,W
0836:  MOVWF  FEA
0838:  MOVLW  84
083A:  MOVWF  FEF
....................    } 
.................... } 
083C:  MOVLB  0
083E:  GOTO   08D0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07B0:  MOVLB  3
07B2:  BCF    x60.0
07B4:  BTFSC  x5F.7
07B6:  BSF    x60.0
....................    endpoint &= 0x7F; 
07B8:  BCF    x5F.7
....................     
....................    if (direction)  
07BA:  BTFSS  x60.0
07BC:  BRA    07E0
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07BE:  MOVF   x5F,W
07C0:  MULLW  08
07C2:  MOVF   FF3,W
07C4:  CLRF   x62
07C6:  MOVWF  x61
07C8:  MOVLW  04
07CA:  ADDWF  x61,F
07CC:  MOVLW  00
07CE:  ADDWFC x62,F
07D0:  MOVFF  361,FE9
07D4:  MOVLW  04
07D6:  ADDWF  x62,W
07D8:  MOVWF  FEA
07DA:  MOVLW  88
07DC:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
07DE:  BRA    07F2
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07E0:  MOVF   x5F,W
07E2:  MULLW  08
07E4:  MOVF   FF3,W
07E6:  CLRF   x62
07E8:  MOVWF  FE9
07EA:  MOVLW  04
07EC:  ADDWF  x62,W
07EE:  MOVWF  FEA
07F0:  CLRF   FEF
....................    } 
.................... } 
07F2:  MOVLB  0
07F4:  GOTO   08C0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0842:  MOVLB  3
0844:  BCF    x60.0
0846:  BTFSC  x5F.7
0848:  BSF    x60.0
....................    endpoint &= 0x7F; 
084A:  BCF    x5F.7
....................     
....................    if (direction)  
084C:  BTFSS  x60.0
084E:  BRA    0872
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0850:  MOVF   x5F,W
0852:  MULLW  08
0854:  MOVF   FF3,W
0856:  CLRF   x63
0858:  MOVWF  x62
085A:  MOVLW  04
085C:  ADDWF  x62,F
085E:  MOVLW  00
0860:  ADDWFC x63,F
0862:  MOVFF  362,FE9
0866:  MOVLW  04
0868:  ADDWF  x63,W
086A:  MOVWF  FEA
086C:  MOVFF  FEF,361
....................    } 
....................    else  
0870:  BRA    0886
....................    { 
....................       st=EP_BDxST_O(endpoint); 
0872:  MOVF   x5F,W
0874:  MULLW  08
0876:  MOVF   FF3,W
0878:  CLRF   x63
087A:  MOVWF  FE9
087C:  MOVLW  04
087E:  ADDWF  x63,W
0880:  MOVWF  FEA
0882:  MOVFF  FEF,361
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
0886:  BTFSS  x61.7
0888:  BRA    088E
088A:  BTFSC  x61.2
088C:  BRA    0892
088E:  MOVLW  00
0890:  BRA    0894
0892:  MOVLW  01
0894:  MOVWF  01
.................... } 
0896:  MOVLB  0
0898:  GOTO   08E8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B26:  MOVFF  360,F6E
....................     
....................    if (address)  
0B2A:  MOVLB  3
0B2C:  MOVF   x60,F
0B2E:  BZ    0B36
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B30:  MOVLW  04
0B32:  MOVWF  1C
....................    } 
....................    else  
0B34:  BRA    0B3A
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B36:  MOVLW  02
0B38:  MOVWF  1C
....................    } 
.................... } 
0B3A:  MOVLB  0
0B3C:  GOTO   0B4A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
047C:  MOVLB  3
047E:  MOVF   x5F,F
0480:  BNZ   048E
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0482:  MOVLW  04
0484:  MOVWF  1C
....................       usb_disable_endpoints(); 
0486:  MOVLB  0
0488:  RCALL  02D8
....................    } 
....................    else  
048A:  BRA    0648
048C:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
048E:  MOVLW  05
0490:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0492:  MOVLW  04
0494:  MOVWF  x62
0496:  MOVLW  90
0498:  MOVWF  x61
....................       for (en=1; en<USB_NUM_UEP; en++)  
049A:  MOVLW  01
049C:  MOVWF  x60
049E:  MOVF   x60,W
04A0:  SUBLW  0F
04A2:  BTFSS  FD8.0
04A4:  BRA    0648
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
04A6:  MOVFF  360,368
04AA:  MOVLB  0
04AC:  RCALL  0284
....................          new_uep = 0; 
04AE:  MOVLB  3
04B0:  CLRF   x63
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
04B2:  CLRF   03
04B4:  MOVF   x60,W
04B6:  MOVFF  FF2,367
04BA:  BCF    FF2.7
04BC:  MOVLB  0
04BE:  RCALL  00BA
04C0:  MOVLB  3
04C2:  BTFSC  x67.7
04C4:  BSF    FF2.7
04C6:  SUBLW  FF
04C8:  BZ    0580
....................          { 
....................             new_uep = 0x04; 
04CA:  MOVLW  04
04CC:  MOVWF  x63
....................             len = usb_ep_rx_size[en]; 
04CE:  BCF    FD8.0
04D0:  RLCF   x60,W
04D2:  CLRF   03
04D4:  MOVFF  FF2,367
04D8:  BCF    FF2.7
04DA:  MOVLB  0
04DC:  RCALL  00DA
04DE:  TBLRD*+
04E0:  MOVFF  FF5,03
04E4:  MOVLB  3
04E6:  BTFSC  x67.7
04E8:  BSF    FF2.7
04EA:  MOVWF  x64
04EC:  MOVFF  03,365
....................             EP_BDxCNT_O(en) = len; 
04F0:  MOVF   x60,W
04F2:  MULLW  08
04F4:  MOVF   FF3,W
04F6:  CLRF   x68
04F8:  MOVWF  x67
04FA:  MOVLW  01
04FC:  ADDWF  x67,W
04FE:  MOVWF  01
0500:  MOVLW  00
0502:  ADDWFC x68,W
0504:  MOVWF  03
0506:  MOVFF  01,FE9
050A:  MOVLW  04
050C:  ADDWF  03,W
050E:  MOVWF  FEA
0510:  MOVFF  364,FEF
....................             EP_BDxADR_O(en) = addy; 
0514:  MOVF   x60,W
0516:  MULLW  08
0518:  MOVF   FF3,W
051A:  CLRF   x68
051C:  MOVWF  x67
051E:  MOVLW  02
0520:  ADDWF  x67,W
0522:  MOVWF  01
0524:  MOVLW  00
0526:  ADDWFC x68,W
0528:  MOVWF  03
052A:  MOVFF  01,FE9
052E:  MOVLW  04
0530:  ADDWF  03,W
0532:  MOVWF  FEA
0534:  MOVFF  362,FEC
0538:  MOVF   FED,F
053A:  MOVFF  361,FEF
....................             addy += usb_ep_rx_size[en]; 
053E:  BCF    FD8.0
0540:  RLCF   x60,W
0542:  CLRF   03
0544:  MOVFF  FF2,367
0548:  BCF    FF2.7
054A:  MOVLB  0
054C:  RCALL  00DA
054E:  TBLRD*+
0550:  MOVFF  FF5,03
0554:  MOVLB  3
0556:  BTFSC  x67.7
0558:  BSF    FF2.7
055A:  ADDWF  x61,F
055C:  MOVF   03,W
055E:  ADDWFC x62,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
0560:  MOVLW  88
0562:  MOVWF  x66
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
0564:  BTFSC  x65.0
0566:  BSF    x66.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0568:  BTFSC  x65.1
056A:  BSF    x66.1
....................             EP_BDxST_O(en) = i; 
056C:  MOVF   x60,W
056E:  MULLW  08
0570:  MOVF   FF3,W
0572:  CLRF   x68
0574:  MOVWF  FE9
0576:  MOVLW  04
0578:  ADDWF  x68,W
057A:  MOVWF  FEA
057C:  MOVFF  366,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0580:  CLRF   03
0582:  MOVF   x60,W
0584:  MOVFF  FF2,367
0588:  BCF    FF2.7
058A:  MOVLB  0
058C:  RCALL  00BA
058E:  MOVLB  3
0590:  BTFSC  x67.7
0592:  BSF    FF2.7
0594:  SUBLW  FF
0596:  BZ    060E
....................          { 
....................             new_uep |= 0x02; 
0598:  BSF    x63.1
....................             EP_BDxADR_I(en) = addy; 
059A:  MOVF   x60,W
059C:  MULLW  08
059E:  MOVF   FF3,W
05A0:  CLRF   x68
05A2:  MOVWF  x67
05A4:  MOVLW  04
05A6:  ADDWF  x67,F
05A8:  MOVLW  00
05AA:  ADDWFC x68,F
05AC:  MOVLW  02
05AE:  ADDWF  x67,W
05B0:  MOVWF  01
05B2:  MOVLW  00
05B4:  ADDWFC x68,W
05B6:  MOVWF  03
05B8:  MOVFF  01,FE9
05BC:  MOVLW  04
05BE:  ADDWF  03,W
05C0:  MOVWF  FEA
05C2:  MOVFF  362,FEC
05C6:  MOVF   FED,F
05C8:  MOVFF  361,FEF
....................             addy += usb_ep_tx_size[en]; 
05CC:  BCF    FD8.0
05CE:  RLCF   x60,W
05D0:  CLRF   03
05D2:  MOVFF  FF2,367
05D6:  BCF    FF2.7
05D8:  MOVLB  0
05DA:  RCALL  00DA
05DC:  TBLRD*+
05DE:  MOVFF  FF5,03
05E2:  MOVLB  3
05E4:  BTFSC  x67.7
05E6:  BSF    FF2.7
05E8:  ADDWF  x61,F
05EA:  MOVF   03,W
05EC:  ADDWFC x62,F
....................             EP_BDxST_I(en) = 0x40; 
05EE:  MOVF   x60,W
05F0:  MULLW  08
05F2:  MOVF   FF3,W
05F4:  CLRF   x68
05F6:  MOVWF  x67
05F8:  MOVLW  04
05FA:  ADDWF  x67,F
05FC:  MOVLW  00
05FE:  ADDWFC x68,F
0600:  MOVFF  367,FE9
0604:  MOVLW  04
0606:  ADDWF  x68,W
0608:  MOVWF  FEA
060A:  MOVLW  40
060C:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
060E:  MOVF   x63,W
0610:  SUBLW  06
0612:  BNZ   0618
0614:  MOVLW  0E
0616:  MOVWF  x63
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
0618:  CLRF   03
061A:  MOVF   x60,W
061C:  MOVFF  FF2,367
0620:  BCF    FF2.7
0622:  MOVLB  0
0624:  RCALL  00BA
0626:  MOVLB  3
0628:  BTFSC  x67.7
062A:  BSF    FF2.7
062C:  SUBLW  01
062E:  BTFSS  FD8.2
0630:  BSF    x63.4
....................           
....................          UEP(en) = new_uep; 
0632:  CLRF   03
0634:  MOVF   x60,W
0636:  ADDLW  70
0638:  MOVWF  FE9
063A:  MOVLW  0F
063C:  ADDWFC 03,W
063E:  MOVWF  FEA
0640:  MOVFF  363,FEF
....................       } 
0644:  INCF   x60,F
0646:  BRA    049E
0648:  MOVLB  0
....................    } 
.................... } 
064A:  GOTO   06F2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
0284:  CLRF   03
0286:  MOVLB  3
0288:  MOVF   x68,W
028A:  ADDLW  70
028C:  MOVWF  FE9
028E:  MOVLW  0F
0290:  ADDWFC 03,W
0292:  MOVWF  FEA
0294:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
0296:  MOVFF  368,369
029A:  MOVLB  0
029C:  RCALL  0220
029E:  MOVF   01,F
02A0:  BZ    02D4
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
02A2:  MOVLB  3
02A4:  MOVF   x68,W
02A6:  MULLW  08
02A8:  MOVF   FF3,W
02AA:  CLRF   x6A
02AC:  MOVWF  FE9
02AE:  MOVLW  04
02B0:  ADDWF  x6A,W
02B2:  MOVWF  FEA
02B4:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
02B6:  MOVF   x68,W
02B8:  MULLW  08
02BA:  MOVF   FF3,W
02BC:  CLRF   x6A
02BE:  MOVWF  x69
02C0:  MOVLW  04
02C2:  ADDWF  x69,F
02C4:  MOVLW  00
02C6:  ADDWFC x6A,F
02C8:  MOVFF  369,FE9
02CC:  MOVLW  04
02CE:  ADDWF  x6A,W
02D0:  MOVWF  FEA
02D2:  CLRF   FEF
02D4:  MOVLB  0
....................    } 
.................... } 
02D6:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02D8:  MOVLW  01
02DA:  MOVLB  3
02DC:  MOVWF  x67
02DE:  MOVF   x67,W
02E0:  SUBLW  0F
02E2:  BNC   02F2
....................       usb_disable_endpoint(i); 
02E4:  MOVFF  367,368
02E8:  MOVLB  0
02EA:  RCALL  0284
02EC:  MOVLB  3
02EE:  INCF   x67,F
02F0:  BRA    02DE
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
02F2:  MOVLB  0
02F4:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CEA:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CEC:  MOVF   1C,F
0CEE:  BNZ   0CF2
0CF0:  BRA    0D6E
....................    if (UIR)  
0CF2:  MOVF   F68,F
0CF4:  BZ    0D6E
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CF6:  BTFSS  F68.2
0CF8:  BRA    0D02
0CFA:  BTFSS  F69.2
0CFC:  BRA    0D02
0CFE:  GOTO   01DA
....................  
....................       if (UCON_SUSPND) return; 
0D02:  BTFSS  F6D.1
0D04:  BRA    0D08
0D06:  BRA    0D6E
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0D08:  BTFSS  F68.5
0D0A:  BRA    0D14
0D0C:  BTFSS  F69.5
0D0E:  BRA    0D14
0D10:  GOTO   020A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0D14:  BTFSS  F68.1
0D16:  BRA    0D20
0D18:  BTFSS  F69.1
0D1A:  BRA    0D20
0D1C:  GOTO   0218
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D20:  BTFSS  F68.0
0D22:  BRA    0D2C
0D24:  BTFSS  F69.0
0D26:  BRA    0D2C
0D28:  GOTO   031E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D2C:  BTFSS  F68.4
0D2E:  BRA    0D38
0D30:  BTFSS  F69.4
0D32:  BRA    0D38
0D34:  GOTO   0348
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D38:  BTFSS  F68.6
0D3A:  BRA    0D44
0D3C:  BTFSS  F69.6
0D3E:  BRA    0D44
0D40:  GOTO   0352
....................  
....................       TRNAttempts = 0; 
0D44:  MOVLB  3
0D46:  CLRF   x5C
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D48:  BTFSS  F68.3
0D4A:  BRA    0D60
0D4C:  BTFSS  F69.3
0D4E:  BRA    0D60
....................          { 
....................             USTATCopy = U1STAT; 
0D50:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
0D54:  MOVLB  0
0D56:  CALL   0004
....................             usb_isr_tok_dne(); 
0D5A:  BRA    0B70
....................          } 
....................          else 
0D5C:  BRA    0D62
0D5E:  MOVLB  3
....................             break; 
0D60:  BRA    0D6C
....................       } while (TRNAttempts++ < 4); 
0D62:  MOVLB  3
0D64:  MOVF   x5C,W
0D66:  INCF   x5C,F
0D68:  SUBLW  03
0D6A:  BC    0D48
0D6C:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
0D6E:  GOTO   0078
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
0352:  BCF    F68.6
.................... } 
0354:  GOTO   0D44 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
031E:  CLRF   F6A
....................    UIR = 0; 
0320:  CLRF   F68
....................    UEIE = 0x9F; 
0322:  MOVLW  9F
0324:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
0326:  MOVLW  3D
0328:  MOVWF  F69
....................  
....................    UADDR = 0; 
032A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
032C:  RCALL  02D8
....................     
....................    usb_token_reset(); 
032E:  RCALL  02F6
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
0330:  MOVLW  16
0332:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
0334:  BTFSS  F68.3
0336:  BRA    033C
....................       usb_clear_trn(); 
0338:  RCALL  0004
....................    } 
033A:  BRA    0334
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
033C:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
033E:  RCALL  01EA
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0340:  MOVLW  03
0342:  MOVWF  1C
.................... } 
0344:  GOTO   0D2C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01EA:  MOVLW  40
01EC:  MOVLB  4
01EE:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01F0:  MOVLW  04
01F2:  MOVWF  x03
01F4:  MOVLW  10
01F6:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01F8:  MOVLW  88
01FA:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01FC:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01FE:  MOVLW  04
0200:  MOVWF  x07
0202:  MOVLW  50
0204:  MOVWF  x06
.................... } 
0206:  MOVLB  0
0208:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0218:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
021A:  BCF    F68.1
.................... } 
021C:  GOTO   0D20 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
0348:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
034A:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
034C:  BSF    F6D.1
.................... } 
034E:  GOTO   0D38 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01DA:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01DC:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
01DE:  BTFSS  F68.2
01E0:  BRA    01E6
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01E2:  BCF    F68.2
....................    } 
01E4:  BRA    01DE
.................... } 
01E6:  GOTO   0D02 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
020A:  BTFSS  F70.0
020C:  BRA    0212
....................    { 
....................       usb_init_ep0_setup(); 
020E:  RCALL  01EA
....................       bit_clear(UEP(0), 0); 
0210:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
0212:  BCF    F68.5
.................... } 
0214:  GOTO   0D14 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
0358:  MOVFF  362,1D
035C:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
035E:  MOVLW  FF
0360:  MOVWF  1D
0362:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B70:  RRCF   1B,W
0B72:  MOVLB  3
0B74:  MOVWF  x5D
0B76:  RRCF   x5D,F
0B78:  RRCF   x5D,F
0B7A:  MOVLW  1F
0B7C:  ANDWF  x5D,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B7E:  MOVF   1B,F
0B80:  BNZ   0C20
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B82:  MOVLB  4
0B84:  MOVF   x00,W
0B86:  ANDLW  3C
0B88:  MOVLB  3
0B8A:  MOVWF  x5E
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B8C:  MOVLW  43
0B8E:  MOVLB  4
0B90:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B92:  MOVLB  3
0B94:  MOVF   x5E,W
0B96:  SUBLW  34
0B98:  BNZ   0BE4
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B9A:  MOVLB  4
0B9C:  MOVF   x04,W
0B9E:  ANDLW  80
0BA0:  BZ    0BA4
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0BA2:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0BA4:  MOVLB  0
0BA6:  BRA    0906
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0BA8:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0BAA:  INCFSZ 1D,W
0BAC:  BRA    0BBC
....................             usb_flush_out(0, USB_DTS_STALL); 
0BAE:  MOVLB  3
0BB0:  CLRF   x5F
0BB2:  MOVLW  03
0BB4:  MOVWF  x60
0BB6:  MOVLB  0
0BB8:  RCALL  0932
....................          else  
0BBA:  BRA    0BE0
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BBC:  MOVLB  3
0BBE:  CLRF   x5F
0BC0:  MOVLW  02
0BC2:  MOVWF  x60
0BC4:  MOVLB  0
0BC6:  RCALL  0932
....................             if (__setup_0_tx_size != 0xFE) 
0BC8:  MOVF   1D,W
0BCA:  SUBLW  FE
0BCC:  BZ    0BE0
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BCE:  MOVLB  3
0BD0:  CLRF   x5F
0BD2:  CLRF   x61
0BD4:  MOVFF  1D,360
0BD8:  MOVLW  04
0BDA:  MOVWF  x62
0BDC:  MOVLB  0
0BDE:  RCALL  0A40
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BE0:  BRA    0C1C
0BE2:  MOVLB  3
0BE4:  MOVF   x5E,W
0BE6:  SUBLW  04
0BE8:  BNZ   0C1E
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BEA:  CLRF   x5F
0BEC:  MOVLB  0
0BEE:  RCALL  0B1C
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BF0:  MOVLB  3
0BF2:  CLRF   x5F
0BF4:  MOVLW  02
0BF6:  MOVWF  x60
0BF8:  MOVLB  0
0BFA:  RCALL  0932
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BFC:  MOVF   1D,W
0BFE:  SUBLW  FE
0C00:  BZ    0C1A
0C02:  INCFSZ 1D,W
0C04:  BRA    0C08
0C06:  BRA    0C1A
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0C08:  MOVLB  3
0C0A:  CLRF   x5F
0C0C:  CLRF   x61
0C0E:  MOVFF  1D,360
0C12:  MOVLW  01
0C14:  MOVWF  x62
0C16:  MOVLB  0
0C18:  RCALL  0A40
....................          } 
....................       } 
....................       else 
0C1A:  BRA    0C1C
0C1C:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
0C1E:  BRA    0CE4
0C20:  MOVF   1B,W
0C22:  SUBLW  04
0C24:  BNZ   0C56
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C26:  MOVLW  43
0C28:  MOVLB  4
0C2A:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C2C:  MOVLW  FF
0C2E:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
0C30:  MOVLB  3
0C32:  CLRF   x5F
0C34:  MOVLB  0
0C36:  RCALL  0B4E
....................       if (__setup_0_tx_size!=0xFF) 
0C38:  INCFSZ 1D,W
0C3A:  BRA    0C3E
0C3C:  BRA    0C52
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C3E:  MOVLB  3
0C40:  CLRF   x5F
0C42:  CLRF   x61
0C44:  MOVFF  1D,360
0C48:  MOVLW  02
0C4A:  MOVWF  x62
0C4C:  MOVLB  0
0C4E:  RCALL  0A40
....................       else 
0C50:  BRA    0C52
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
0C52:  BRA    0CE2
0C54:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C56:  BTFSC  1B.2
0C58:  BRA    0C94
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C5A:  MOVF   x5D,W
0C5C:  MULLW  08
0C5E:  MOVF   FF3,W
0C60:  CLRF   x60
0C62:  MOVWF  01
0C64:  MOVLW  04
0C66:  ADDWF  x60,W
0C68:  MOVWF  03
0C6A:  MOVF   x5D,W
0C6C:  MULLW  08
0C6E:  MOVF   FF3,W
0C70:  CLRF   x62
0C72:  MOVWF  FE9
0C74:  MOVLW  04
0C76:  ADDWF  x62,W
0C78:  MOVWF  FEA
0C7A:  MOVF   FEF,W
0C7C:  ANDLW  43
0C7E:  MOVFF  03,FEA
0C82:  MOVFF  01,FE9
0C86:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C88:  MOVFF  35D,35F
0C8C:  MOVLB  0
0C8E:  RCALL  0B1C
....................       } 
....................       else  
0C90:  BRA    0CE2
0C92:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C94:  MOVF   x5D,W
0C96:  MULLW  08
0C98:  MOVF   FF3,W
0C9A:  CLRF   x60
0C9C:  MOVWF  x5F
0C9E:  MOVLW  04
0CA0:  ADDWF  x5F,F
0CA2:  MOVLW  00
0CA4:  ADDWFC x60,F
0CA6:  MOVFF  35F,01
0CAA:  MOVLW  04
0CAC:  ADDWF  x60,W
0CAE:  MOVWF  03
0CB0:  MOVF   x5D,W
0CB2:  MULLW  08
0CB4:  MOVF   FF3,W
0CB6:  CLRF   x62
0CB8:  MOVWF  x61
0CBA:  MOVLW  04
0CBC:  ADDWF  x61,F
0CBE:  MOVLW  00
0CC0:  ADDWFC x62,F
0CC2:  MOVFF  361,FE9
0CC6:  MOVLW  04
0CC8:  ADDWF  x62,W
0CCA:  MOVWF  FEA
0CCC:  MOVF   FEF,W
0CCE:  ANDLW  43
0CD0:  MOVFF  03,FEA
0CD4:  MOVFF  35F,FE9
0CD8:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CDA:  MOVFF  35D,35F
0CDE:  MOVLB  0
0CE0:  RCALL  0B4E
0CE2:  MOVLB  3
....................       } 
....................    } 
.................... } 
0CE4:  MOVLB  0
0CE6:  GOTO   0D5C (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
1EBA:  MOVF   18,W
1EBC:  MOVWF  01
.................... } 
1EBE:  GOTO   2D58 (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02F6:  MOVLB  3
02F8:  CLRF   x5D
02FA:  MOVF   x5D,F
02FC:  BNZ   0312
....................       USB_Interface[i] = 0;   //reset each interface to default 
02FE:  CLRF   03
0300:  MOVF   x5D,W
0302:  ADDLW  21
0304:  MOVWF  FE9
0306:  MOVLW  00
0308:  ADDWFC 03,W
030A:  MOVWF  FEA
030C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
030E:  INCF   x5D,F
0310:  BRA    02FA
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
0312:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
0314:  MOVLW  01
0316:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0318:  CLRF   17
.................... } 
031A:  MOVLB  0
031C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0220:  MOVLB  3
0222:  BCF    x6A.0
0224:  BTFSC  x69.7
0226:  BSF    x6A.0
....................     
....................    endpoint &= 0x7F; 
0228:  BCF    x69.7
....................     
....................    if (endpoint > 16) 
022A:  MOVF   x69,W
022C:  SUBLW  10
022E:  BC    0236
....................       return(FALSE); 
0230:  MOVLW  00
0232:  MOVWF  01
0234:  BRA    0280
....................     
....................    if (direction) { //IN 
0236:  BTFSS  x6A.0
0238:  BRA    025E
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
023A:  CLRF   03
023C:  MOVF   x69,W
023E:  MOVFF  FF2,36B
0242:  BCF    FF2.7
0244:  MOVLB  0
0246:  RCALL  00BA
0248:  MOVLB  3
024A:  BTFSC  x6B.7
024C:  BSF    FF2.7
024E:  SUBLW  FF
0250:  BNZ   0256
0252:  MOVLW  00
0254:  BRA    0258
0256:  MOVLW  01
0258:  MOVWF  01
025A:  BRA    0280
....................    } 
....................    else {   //OUT 
025C:  BRA    0280
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
025E:  CLRF   03
0260:  MOVF   x69,W
0262:  MOVFF  FF2,36B
0266:  BCF    FF2.7
0268:  MOVLB  0
026A:  RCALL  00BA
026C:  MOVLB  3
026E:  BTFSC  x6B.7
0270:  BSF    FF2.7
0272:  SUBLW  FF
0274:  BNZ   027A
0276:  MOVLW  00
0278:  BRA    027C
027A:  MOVLW  01
027C:  MOVWF  01
027E:  BRA    0280
....................    } 
.................... } 
0280:  MOVLB  0
0282:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B4E:  MOVLB  3
0B50:  MOVF   x5F,F
0B52:  BNZ   0B6C
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B54:  DECFSZ 17,W
0B56:  BRA    0B60
0B58:  MOVLB  0
0B5A:  RCALL  0364
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B5C:  BRA    0B6A
0B5E:  MOVLB  3
0B60:  MOVF   17,W
0B62:  SUBLW  02
0B64:  BNZ   0B6C
0B66:  MOVLB  0
0B68:  BRA    0B40
0B6A:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0B6C:  MOVLB  0
0B6E:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B1C:  MOVLB  3
0B1E:  MOVF   x5F,F
0B20:  BNZ   0B22
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
0B22:  MOVLB  0
0B24:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
0906:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0908:  MOVLB  4
090A:  MOVF   x10,W
090C:  ANDLW  7F
090E:  XORLW  00
0910:  MOVLB  0
0912:  BZ    091E
0914:  XORLW  01
0916:  BZ    0922
0918:  XORLW  03
091A:  BZ    0926
091C:  BRA    092A
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
091E:  BRA    064E
....................          break; 
0920:  BRA    092E
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
0922:  BRA    0706
....................          break; 
0924:  BRA    092E
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0926:  BRA    089C
....................          break; 
0928:  BRA    092E
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
092A:  RCALL  035E
....................          break; 
092C:  BRA    092E
....................    } 
.................... } 
092E:  GOTO   0BA8 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
064E:  MOVLB  4
0650:  MOVF   x11,W
0652:  XORLW  00
0654:  MOVLB  0
0656:  BZ    0672
0658:  XORLW  01
065A:  BZ    0686
065C:  XORLW  02
065E:  BZ    06A0
0660:  XORLW  06
0662:  BZ    06B8
0664:  XORLW  03
0666:  BZ    06CA
0668:  XORLW  0E
066A:  BZ    06CE
066C:  XORLW  01
066E:  BZ    06DE
0670:  BRA    06FE
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0672:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
0676:  MOVLB  4
0678:  CLRF   x51
....................             usb_request_send_response(2); 
067A:  MOVLW  02
067C:  MOVLB  3
067E:  MOVWF  x62
0680:  MOVLB  0
0682:  RCALL  0358
....................             break; 
0684:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0686:  MOVLB  4
0688:  DECFSZ x12,W
068A:  BRA    069A
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
068C:  MOVLW  01
068E:  ANDWF  19,F
....................                usb_put_0len_0(); 
0690:  MOVLB  3
0692:  CLRF   x62
0694:  MOVLB  0
0696:  RCALL  0358
....................             } 
....................             else 
0698:  BRA    069E
....................                usb_request_stall(); 
069A:  MOVLB  0
069C:  RCALL  035E
....................             break; 
069E:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
06A0:  MOVLB  4
06A2:  DECFSZ x12,W
06A4:  BRA    06B2
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
06A6:  BSF    19.1
....................                usb_put_0len_0(); 
06A8:  MOVLB  3
06AA:  CLRF   x62
06AC:  MOVLB  0
06AE:  RCALL  0358
....................             } 
....................             else 
06B0:  BRA    06B6
....................                usb_request_stall(); 
06B2:  MOVLB  0
06B4:  RCALL  035E
....................             break; 
06B6:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06B8:  MOVLW  02
06BA:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06BC:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06C0:  MOVLB  3
06C2:  CLRF   x62
06C4:  MOVLB  0
06C6:  RCALL  0358
....................             break; 
06C8:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06CA:  BRA    03FE
....................             break; 
06CC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06CE:  MOVFF  18,450
....................             usb_request_send_response(1); 
06D2:  MOVLW  01
06D4:  MOVLB  3
06D6:  MOVWF  x62
06D8:  MOVLB  0
06DA:  RCALL  0358
....................             break; 
06DC:  BRA    0702
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06DE:  MOVLB  4
06E0:  MOVF   x12,W
06E2:  SUBLW  01
06E4:  BNC   06FA
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06E6:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06EA:  MOVFF  412,35F
06EE:  MOVLB  0
06F0:  BRA    047C
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06F2:  MOVLB  3
06F4:  CLRF   x62
06F6:  MOVLB  0
06F8:  RCALL  0358
....................             } 
....................             break; 
06FA:  MOVLB  0
06FC:  BRA    0702
....................  
....................       default: 
....................             usb_request_stall(); 
06FE:  RCALL  035E
....................             break; 
0700:  BRA    0702
....................    } 
.................... } 
0702:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
0706:  MOVFF  18,35F
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
070A:  MOVLB  4
070C:  MOVF   x11,W
070E:  XORLW  00
0710:  MOVLB  0
0712:  BZ    071E
0714:  XORLW  0A
0716:  BZ    0730
0718:  XORLW  01
071A:  BZ    077E
071C:  BRA    07A8
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
071E:  MOVLB  4
0720:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
0722:  CLRF   x51
....................             usb_request_send_response(2); 
0724:  MOVLW  02
0726:  MOVLB  3
0728:  MOVWF  x62
072A:  MOVLB  0
072C:  RCALL  0358
....................             break; 
072E:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0730:  MOVLB  3
0732:  MOVF   x5F,F
0734:  BZ    0778
0736:  MOVLW  01
0738:  SUBWF  x5F,W
073A:  CLRF   03
073C:  MOVFF  FF2,360
0740:  BCF    FF2.7
0742:  MOVLB  0
0744:  RCALL  014C
0746:  MOVLB  3
0748:  BTFSC  x60.7
074A:  BSF    FF2.7
074C:  MOVWF  01
074E:  MOVLB  4
0750:  SUBWF  x14,W
0752:  BTFSS  FD8.0
0754:  BRA    075A
0756:  MOVLB  3
0758:  BRA    0778
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
075A:  CLRF   03
075C:  MOVF   x14,W
075E:  ADDLW  21
0760:  MOVWF  FE9
0762:  MOVLW  00
0764:  ADDWFC 03,W
0766:  MOVWF  FEA
0768:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
076C:  MOVLW  01
076E:  MOVLB  3
0770:  MOVWF  x62
0772:  MOVLB  0
0774:  RCALL  0358
....................             } 
....................             else 
0776:  BRA    077C
....................                usb_request_stall(); 
0778:  MOVLB  0
077A:  RCALL  035E
....................             break; 
077C:  BRA    07AC
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
077E:  MOVLB  3
0780:  MOVF   x5F,F
0782:  BZ    07A2
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
0784:  CLRF   03
0786:  MOVLB  4
0788:  MOVF   x14,W
078A:  ADDLW  21
078C:  MOVWF  FE9
078E:  MOVLW  00
0790:  ADDWFC 03,W
0792:  MOVWF  FEA
0794:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0798:  MOVLB  3
079A:  CLRF   x62
079C:  MOVLB  0
079E:  RCALL  0358
....................             } 
....................             else 
07A0:  BRA    07A6
....................                usb_request_stall(); 
07A2:  MOVLB  0
07A4:  RCALL  035E
....................             break; 
07A6:  BRA    07AC
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
07A8:  RCALL  035E
....................             break; 
07AA:  BRA    07AC
....................    } 
.................... } 
07AC:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
089C:  MOVFF  414,369
08A0:  RCALL  0220
08A2:  MOVF   01,F
08A4:  BZ    0902
....................       switch(usb_ep0_rx_buffer[1]) { 
08A6:  MOVLB  4
08A8:  MOVF   x11,W
08AA:  XORLW  01
08AC:  MOVLB  0
08AE:  BZ    08BA
08B0:  XORLW  02
08B2:  BZ    08CA
08B4:  XORLW  03
08B6:  BZ    08DA
08B8:  BRA    08FE
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08BA:  MOVFF  414,35F
08BE:  BRA    07B0
....................                usb_put_0len_0(); 
08C0:  MOVLB  3
08C2:  CLRF   x62
08C4:  MOVLB  0
08C6:  RCALL  0358
....................                break; 
08C8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08CA:  MOVFF  414,35F
08CE:  BRA    07F8
....................                      usb_put_0len_0(); 
08D0:  MOVLB  3
08D2:  CLRF   x62
08D4:  MOVLB  0
08D6:  RCALL  0358
....................                      break; 
08D8:  BRA    0902
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08DA:  MOVLB  4
08DC:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08DE:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08E0:  MOVFF  414,35F
08E4:  MOVLB  0
08E6:  BRA    0842
08E8:  MOVF   01,F
08EA:  BZ    08F2
....................                   usb_ep0_tx_buffer[0]=1; 
08EC:  MOVLW  01
08EE:  MOVLB  4
08F0:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
08F2:  MOVLW  02
08F4:  MOVLB  3
08F6:  MOVWF  x62
08F8:  MOVLB  0
08FA:  RCALL  0358
....................                break; 
08FC:  BRA    0902
....................  
....................          default: 
....................             usb_request_stall(); 
08FE:  RCALL  035E
....................             break; 
0900:  BRA    0902
....................       } 
....................    } 
.................... } 
0902:  GOTO   092E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03FE:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
0400:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
0402:  MOVLB  4
0404:  MOVF   x13,W
0406:  XORLW  01
0408:  MOVLB  0
040A:  BZ    0416
040C:  XORLW  03
040E:  BZ    0420
0410:  XORLW  01
0412:  BZ    0426
0414:  BRA    045C
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
0416:  MOVLW  12
0418:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
041A:  MOVLW  03
041C:  MOVWF  1A
....................             break; 
041E:  BRA    0460
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
0420:  MOVLW  20
0422:  MOVWF  20
....................             break; 
0424:  BRA    0460
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
0426:  MOVLW  02
0428:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
042A:  CLRF   03
042C:  MOVLB  4
042E:  MOVF   x12,W
0430:  MOVFF  FF2,35F
0434:  BCF    FF2.7
0436:  MOVLB  0
0438:  RCALL  0180
043A:  MOVLB  3
043C:  BTFSC  x5F.7
043E:  BSF    FF2.7
0440:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
0442:  CLRF   03
0444:  MOVF   1F,W
0446:  MOVFF  FF2,35F
044A:  BCF    FF2.7
044C:  MOVLB  0
044E:  RCALL  0194
0450:  MOVLB  3
0452:  BTFSC  x5F.7
0454:  BSF    FF2.7
0456:  MOVWF  20
....................             break; 
0458:  MOVLB  0
045A:  BRA    0460
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
045C:  RCALL  035E
....................             return; 
045E:  BRA    0478
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
0460:  MOVLB  4
0462:  MOVF   x17,F
0464:  BNZ   0470
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
0466:  MOVF   20,W
0468:  SUBWF  x16,W
046A:  BC    0470
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
046C:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0470:  MOVLW  01
0472:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
0474:  MOVLB  0
0476:  RCALL  0364
.................... } 
0478:  GOTO   0702 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B40:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B42:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0B44:  MOVFF  1E,360
0B48:  BRA    0B26
....................    #endif 
.................... } 
0B4A:  GOTO   0B6A (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
0364:  MOVLB  3
0366:  CLRF   x60
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
0368:  MOVF   20,F
036A:  BZ    03E8
036C:  MOVF   x60,W
036E:  SUBLW  3F
0370:  BNC   03E8
....................       switch(USB_stack_status.getdesc_type) { 
0372:  MOVF   1A,W
0374:  XORLW  00
0376:  MOVLB  0
0378:  BZ    0384
037A:  XORLW  02
037C:  BZ    039C
037E:  XORLW  01
0380:  BZ    03B4
0382:  BRA    03CC
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0384:  CLRF   03
0386:  MOVF   1F,W
0388:  MOVFF  FF2,362
038C:  BCF    FF2.7
038E:  RCALL  011C
0390:  MOVLB  3
0392:  BTFSC  x62.7
0394:  BSF    FF2.7
0396:  MOVWF  x61
....................             break; 
0398:  MOVLB  0
039A:  BRA    03CC
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
039C:  CLRF   03
039E:  MOVF   1F,W
03A0:  MOVFF  FF2,362
03A4:  BCF    FF2.7
03A6:  RCALL  0194
03A8:  MOVLB  3
03AA:  BTFSC  x62.7
03AC:  BSF    FF2.7
03AE:  MOVWF  x61
....................             break; 
03B0:  MOVLB  0
03B2:  BRA    03CC
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
03B4:  CLRF   03
03B6:  MOVF   1F,W
03B8:  MOVFF  FF2,362
03BC:  BCF    FF2.7
03BE:  RCALL  015E
03C0:  MOVLB  3
03C2:  BTFSC  x62.7
03C4:  BSF    FF2.7
03C6:  MOVWF  x61
....................             break; 
03C8:  MOVLB  0
03CA:  BRA    03CC
....................       } 
....................       usb_getdesc_ptr++; 
03CC:  INCF   1F,F
....................       usb_getdesc_len--; 
03CE:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
03D0:  MOVLB  3
03D2:  MOVF   x60,W
03D4:  INCF   x60,F
03D6:  CLRF   03
03D8:  ADDLW  50
03DA:  MOVWF  FE9
03DC:  MOVLW  04
03DE:  ADDWFC 03,W
03E0:  MOVWF  FEA
03E2:  MOVFF  361,FEF
....................    } 
03E6:  BRA    0368
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03E8:  MOVF   20,F
03EA:  BNZ   03F4
03EC:  MOVF   x60,W
03EE:  SUBLW  40
03F0:  BZ    03F4
....................          USB_stack_status.dev_req = NONE; 
03F2:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
03F4:  MOVFF  360,362
03F8:  MOVLB  0
03FA:  RCALL  0358
.................... } 
03FC:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresionp[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0,promediopresionp=0.0; 
.................... short emergency=0,flag_agua=0,flag_agua2=0,CamaraOUT=0,CamaraIN=0,flag_reservorio=0,flag_presostato=0,flag_vacio=0; 
.................... int8 r=0,t=0,r2=0,t2=0,TiempoControl=0,z=0,Frio=0,llena=0,PulsoPositivo=10,PulsosVacio=0,flag_pulso=0,Atmosferica=71; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Alarma=0,AlarmaAgua=0; 
.................... int8 Puerta=0,Parada=0,NivelReservorio=0,NivelTanque=0,Presostato=0,ADC_Pt100=0,y=0,Chksum=0,flagprevacio=10,flagvacio=10; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Nivel=0,t_exhaust=0,tinicio=0,tagua=0,treservorio=0,PresionCamara16=0,PresionPreCamara16=0,tvacio=0; 
....................  
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0,Visua=0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,tiempo_esterilizacion=0,p=0,MediaMovil=2; 
.................... float V0=0.0,R1=6210.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0,d4=0.0,d5=0.0; 
.................... float V1=0.0,Presion=0.0,d6=0.0,d7=0.0,d8=0.0,V2=0.0,Presionp=0.0; 
.................... float Setpoint=0.0,Temperatura=0.0,TempUSB=0.0,PresionCamara=0.0,PresionPreCamara=0.0,K=0.006429; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte posicion, buffer[0x10], txbuf[0x11],rxbuf[0x11];     //Buffer de memoria 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0D8A:  BTFSC  FC7.5
0D8C:  BRA    0D96
0D8E:  MOVLB  3
0D90:  CLRF   x46
0D92:  BTFSC  FC7.2
0D94:  BSF    x46.7
0D96:  MOVLB  3
0D98:  MOVF   x46,W
0D9A:  INCF   x46,F
0D9C:  MOVWF  x12
....................  
....................    /* Solicitud de lectura del esclavo por el master */ 
....................    if(fstate == 0x80) {          
0D9E:  MOVF   x12,W
0DA0:  SUBLW  80
0DA2:  BNZ   0DC2
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0DA4:  CLRF   03
0DA6:  MOVF   x13,W
0DA8:  ADDLW  24
0DAA:  MOVWF  FE9
0DAC:  MOVLW  03
0DAE:  ADDWFC 03,W
0DB0:  MOVWF  FEA
0DB2:  MOVFF  FEF,35D
0DB6:  MOVFF  35D,35E
0DBA:  MOVLB  0
0DBC:  BRA    0D72
....................       //i2c_write (txbuf[0]);       
....................       //i2c_write ((int8)V2); 
....................    } 
....................    /* Sino está solicitando lectura es que está enviando algo */ 
....................    else {                              //Sino es que hay dato en el bus I2C... 
0DBE:  BRA    0DF2
0DC0:  MOVLB  3
....................       incoming = i2c_read();           //... lo lee 
0DC2:  BCF    FC6.6
0DC4:  BTFSS  F9E.3
0DC6:  BRA    0DC4
0DC8:  MOVF   FC9,W
0DCA:  BSF    FC6.4
0DCC:  MOVWF  x5C
....................     
....................  
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0DCE:  DECFSZ x12,W
0DD0:  BRA    0DD8
....................          posicion = incoming;          //Se guarda posición 
0DD2:  MOVFF  35C,313
....................       } 
....................       else if (fState == 2) {          //Información recibida corresponde al dato 
0DD6:  BRA    0DF0
0DD8:  MOVF   x12,W
0DDA:  SUBLW  02
0DDC:  BNZ   0DF0
....................          rxbuf[posicion] = incoming; 
0DDE:  CLRF   03
0DE0:  MOVF   x13,W
0DE2:  ADDLW  35
0DE4:  MOVWF  FE9
0DE6:  MOVLW  03
0DE8:  ADDWFC 03,W
0DEA:  MOVWF  FEA
0DEC:  MOVFF  35C,FEF
0DF0:  MOVLB  0
....................       } 
....................   } 
.................... } 
....................  
0DF2:  BCF    F9E.3
0DF4:  GOTO   0078
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
13A0:  MOVLB  2
13A2:  MOVF   x74,W
13A4:  MULLW  04
13A6:  MOVF   FF3,W
13A8:  CLRF   03
13AA:  ADDLW  42
13AC:  MOVWF  FE9
13AE:  MOVLW  02
13B0:  ADDWFC 03,W
13B2:  MOVWF  FEA
13B4:  MOVFF  2B2,FEF
13B8:  MOVFF  2B3,FEC
13BC:  MOVFF  2B4,FEC
13C0:  MOVFF  2B5,FEC
....................    y++; 
13C4:  INCF   x74,F
....................    if(y>=2) 
13C6:  MOVF   x74,W
13C8:  SUBLW  01
13CA:  BC    1406
....................    { 
....................       y=0; 
13CC:  CLRF   x74
....................       Aumento=X[1]-X[0]; 
13CE:  BSF    FD8.1
13D0:  MOVFF  249,34F
13D4:  MOVFF  248,34E
13D8:  MOVFF  247,34D
13DC:  MOVFF  246,34C
13E0:  MOVFF  245,353
13E4:  MOVFF  244,352
13E8:  MOVFF  243,351
13EC:  MOVFF  242,350
13F0:  MOVLB  0
13F2:  RCALL  1128
13F4:  MOVFF  03,251
13F8:  MOVFF  02,250
13FC:  MOVFF  01,24F
1400:  MOVFF  00,24E
1404:  MOVLB  2
....................    } 
.................... } 
1406:  MOVLB  0
1408:  GOTO   162A (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
0F76:  MOVLB  3
0F78:  RLCF   x48,W
0F7A:  MOVWF  00
0F7C:  RLCF   00,F
0F7E:  MOVLW  FC
0F80:  ANDWF  00,F
0F82:  MOVFF  00,01
0F86:  MOVF   FC2,W
0F88:  ANDLW  C3
0F8A:  IORWF  00,W
0F8C:  MOVWF  FC2
0F8E:  MOVLW  01
0F90:  MOVWF  x4D
0F92:  MOVLB  0
0F94:  BRA    0F14
0F96:  BSF    FC2.1
0F98:  BTFSC  FC2.1
0F9A:  BRA    0F98
0F9C:  MOVFF  FC4,34E
0FA0:  MOVFF  FC3,34D
0FA4:  MOVLB  0
0FA6:  RCALL  0F40
0FA8:  MOVFF  03,34C
0FAC:  MOVFF  02,34B
0FB0:  MOVFF  01,34A
0FB4:  MOVFF  00,349
0FB8:  MOVFF  349,00
0FBC:  MOVFF  34A,01
0FC0:  MOVFF  34B,02
0FC4:  MOVFF  34C,03
.................... } 
0FC8:  RETLW  00
.................... float Leer_Sensor(int media) 
.................... { 
....................    Prom=0.0; 
*
1502:  MOVLB  2
1504:  CLRF   xB1
1506:  CLRF   xB0
1508:  CLRF   xAF
150A:  CLRF   xAE
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
150C:  MOVLB  3
150E:  CLRF   x48
1510:  MOVLB  0
1512:  RCALL  0F76
1514:  MOVFF  03,299
1518:  MOVFF  02,298
151C:  MOVFF  01,297
1520:  MOVFF  00,296
....................    V0 = V0/40.96; // Se elimina la ganancia 
1524:  MOVFF  299,34F
1528:  MOVFF  298,34E
152C:  MOVFF  297,34D
1530:  MOVFF  296,34C
1534:  MOVLW  0A
1536:  MOVLB  3
1538:  MOVWF  x53
153A:  MOVLW  D7
153C:  MOVWF  x52
153E:  MOVLW  23
1540:  MOVWF  x51
1542:  MOVLW  84
1544:  MOVWF  x50
1546:  MOVLB  0
1548:  RCALL  0FCA
154A:  MOVFF  03,299
154E:  MOVFF  02,298
1552:  MOVFF  01,297
1556:  MOVFF  00,296
....................    Pt=(R1)/((4096.0/V0)-1.0); // Se calcula el valor de la PT100 
155A:  MOVLB  3
155C:  CLRF   x4F
155E:  CLRF   x4E
1560:  CLRF   x4D
1562:  MOVLW  8B
1564:  MOVWF  x4C
1566:  MOVFF  299,353
156A:  MOVFF  298,352
156E:  MOVFF  297,351
1572:  MOVFF  296,350
1576:  MOVLB  0
1578:  RCALL  0FCA
157A:  MOVFF  00,348
157E:  MOVFF  01,349
1582:  MOVFF  02,34A
1586:  MOVFF  03,34B
158A:  BSF    FD8.1
158C:  MOVFF  03,34F
1590:  MOVFF  02,34E
1594:  MOVFF  01,34D
1598:  MOVFF  00,34C
159C:  MOVLB  3
159E:  CLRF   x53
15A0:  CLRF   x52
15A2:  CLRF   x51
15A4:  MOVLW  7F
15A6:  MOVWF  x50
15A8:  MOVLB  0
15AA:  RCALL  1128
15AC:  MOVFF  29D,34F
15B0:  MOVFF  29C,34E
15B4:  MOVFF  29B,34D
15B8:  MOVFF  29A,34C
15BC:  MOVFF  03,353
15C0:  MOVFF  02,352
15C4:  MOVFF  01,351
15C8:  MOVFF  00,350
15CC:  RCALL  0FCA
15CE:  MOVFF  03,2A1
15D2:  MOVFF  02,2A0
15D6:  MOVFF  01,29F
15DA:  MOVFF  00,29E
....................    Pt=Pt-0.3; 
15DE:  BSF    FD8.1
15E0:  MOVFF  2A1,34F
15E4:  MOVFF  2A0,34E
15E8:  MOVFF  29F,34D
15EC:  MOVFF  29E,34C
15F0:  MOVLW  9A
15F2:  MOVLB  3
15F4:  MOVWF  x53
15F6:  MOVLW  99
15F8:  MOVWF  x52
15FA:  MOVLW  19
15FC:  MOVWF  x51
15FE:  MOVLW  7D
1600:  MOVWF  x50
1602:  MOVLB  0
1604:  RCALL  1128
1606:  MOVFF  03,2A1
160A:  MOVFF  02,2A0
160E:  MOVFF  01,29F
1612:  MOVFF  00,29E
....................    //Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>(media-1)) 
1616:  MOVLW  01
1618:  MOVLB  3
161A:  SUBWF  x47,W
161C:  MOVLB  2
161E:  SUBWF  x90,W
1620:  BZ    162C
1622:  BNC   162C
....................    {l=0;ActualizaRecta();} 
1624:  CLRF   x90
1626:  MOVLB  0
1628:  BRA    13A0
162A:  MOVLB  2
162C:  CLRF   16
162E:  BTFSC  FF2.7
1630:  BSF    16.7
1632:  BCF    FF2.7
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=Pt;l++; 
1634:  MOVLB  3
1636:  CLRF   x5D
1638:  MOVFF  290,35C
163C:  CLRF   x5F
163E:  MOVLW  04
1640:  MOVWF  x5E
1642:  MOVLB  0
1644:  CALL   0DF8
1648:  BTFSC  16.7
164A:  BSF    FF2.7
164C:  MOVF   01,W
164E:  ADDLW  62
1650:  MOVWF  FE9
1652:  MOVLW  00
1654:  ADDWFC 02,W
1656:  MOVWF  FEA
1658:  MOVFF  29E,FEF
165C:  MOVFF  29F,FEC
1660:  MOVFF  2A0,FEC
1664:  MOVFF  2A1,FEC
1668:  MOVLB  2
166A:  INCF   x90,F
....................           
....................    for(h=0;h<media;h++) 
166C:  CLRF   x8F
166E:  MOVLB  3
1670:  MOVF   x47,W
1672:  MOVLB  2
1674:  SUBWF  x8F,W
1676:  BC    1702
1678:  CLRF   16
167A:  BTFSC  FF2.7
167C:  BSF    16.7
167E:  BCF    FF2.7
....................    { 
....................       Prom+=promedio[h]; 
1680:  MOVLB  3
1682:  CLRF   x5D
1684:  MOVFF  28F,35C
1688:  CLRF   x5F
168A:  MOVLW  04
168C:  MOVWF  x5E
168E:  MOVLB  0
1690:  CALL   0DF8
1694:  BTFSC  16.7
1696:  BSF    FF2.7
1698:  MOVFF  02,03
169C:  MOVF   01,W
169E:  ADDLW  62
16A0:  MOVWF  FE9
16A2:  MOVLW  00
16A4:  ADDWFC 02,W
16A6:  MOVWF  FEA
16A8:  MOVFF  FEF,00
16AC:  MOVFF  FEC,01
16B0:  MOVFF  FEC,02
16B4:  MOVFF  FEC,03
16B8:  MOVFF  FEA,349
16BC:  MOVFF  FE9,348
16C0:  BCF    FD8.1
16C2:  MOVFF  2B1,34F
16C6:  MOVFF  2B0,34E
16CA:  MOVFF  2AF,34D
16CE:  MOVFF  2AE,34C
16D2:  MOVFF  03,353
16D6:  MOVFF  02,352
16DA:  MOVFF  01,351
16DE:  MOVFF  00,350
16E2:  RCALL  1128
16E4:  MOVFF  349,FEA
16E8:  MOVFF  348,FE9
16EC:  MOVFF  03,2B1
16F0:  MOVFF  02,2B0
16F4:  MOVFF  01,2AF
16F8:  MOVFF  00,2AE
....................    }  
16FC:  MOVLB  2
16FE:  INCF   x8F,F
1700:  BRA    166E
....................    Prom=Prom/media;    
1702:  MOVLB  3
1704:  CLRF   x4E
1706:  MOVFF  347,34D
170A:  MOVLB  0
170C:  RCALL  0F40
170E:  MOVFF  2B1,34F
1712:  MOVFF  2B0,34E
1716:  MOVFF  2AF,34D
171A:  MOVFF  2AE,34C
171E:  MOVFF  03,353
1722:  MOVFF  02,352
1726:  MOVFF  01,351
172A:  MOVFF  00,350
172E:  RCALL  0FCA
1730:  MOVFF  03,2B1
1734:  MOVFF  02,2B0
1738:  MOVFF  01,2AF
173C:  MOVFF  00,2AE
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
1740:  MOVFF  2B1,34F
1744:  MOVFF  2B0,34E
1748:  MOVFF  2AF,34D
174C:  MOVFF  2AE,34C
1750:  MOVFF  2B1,353
1754:  MOVFF  2B0,352
1758:  MOVFF  2AF,351
175C:  MOVFF  2AE,350
1760:  RCALL  140C
1762:  MOVFF  00,348
1766:  MOVFF  01,349
176A:  MOVFF  02,34A
176E:  MOVFF  03,34B
1772:  MOVFF  03,34F
1776:  MOVFF  02,34E
177A:  MOVFF  01,34D
177E:  MOVFF  00,34C
1782:  MOVFF  309,353
1786:  MOVFF  308,352
178A:  MOVFF  307,351
178E:  MOVFF  306,350
1792:  RCALL  140C
1794:  MOVFF  00,348
1798:  MOVFF  01,349
179C:  MOVFF  02,34A
17A0:  MOVFF  03,34B
17A4:  MOVFF  2B1,34F
17A8:  MOVFF  2B0,34E
17AC:  MOVFF  2AF,34D
17B0:  MOVFF  2AE,34C
17B4:  MOVFF  30D,353
17B8:  MOVFF  30C,352
17BC:  MOVFF  30B,351
17C0:  MOVFF  30A,350
17C4:  RCALL  140C
17C6:  BCF    FD8.1
17C8:  MOVFF  34B,34F
17CC:  MOVFF  34A,34E
17D0:  MOVFF  349,34D
17D4:  MOVFF  348,34C
17D8:  MOVFF  03,353
17DC:  MOVFF  02,352
17E0:  MOVFF  01,351
17E4:  MOVFF  00,350
17E8:  RCALL  1128
17EA:  MOVFF  00,348
17EE:  MOVFF  01,349
17F2:  MOVFF  02,34A
17F6:  MOVFF  03,34B
17FA:  BCF    FD8.1
17FC:  MOVFF  03,34F
1800:  MOVFF  02,34E
1804:  MOVFF  01,34D
1808:  MOVFF  00,34C
180C:  MOVFF  311,353
1810:  MOVFF  310,352
1814:  MOVFF  30F,351
1818:  MOVFF  30E,350
181C:  RCALL  1128
181E:  MOVFF  03,2B5
1822:  MOVFF  02,2B4
1826:  MOVFF  01,2B3
182A:  MOVFF  00,2B2
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
182E:  MOVLB  3
1830:  CLRF   x4E
1832:  MOVFF  291,34D
1836:  MOVLB  0
1838:  CALL   0F40
183C:  MOVFF  00,348
1840:  MOVFF  01,349
1844:  MOVFF  02,34A
1848:  MOVFF  03,34B
184C:  MOVLB  3
184E:  CLRF   x4E
1850:  MOVFF  292,34D
1854:  MOVLB  0
1856:  CALL   0F40
185A:  BSF    FD8.1
185C:  MOVFF  34B,34F
1860:  MOVFF  34A,34E
1864:  MOVFF  349,34D
1868:  MOVFF  348,34C
186C:  MOVFF  03,353
1870:  MOVFF  02,352
1874:  MOVFF  01,351
1878:  MOVFF  00,350
187C:  RCALL  1128
187E:  BCF    FD8.1
1880:  MOVFF  2B5,34F
1884:  MOVFF  2B4,34E
1888:  MOVFF  2B3,34D
188C:  MOVFF  2B2,34C
1890:  MOVFF  03,353
1894:  MOVFF  02,352
1898:  MOVFF  01,351
189C:  MOVFF  00,350
18A0:  RCALL  1128
18A2:  MOVFF  03,2B5
18A6:  MOVFF  02,2B4
18AA:  MOVFF  01,2B3
18AE:  MOVFF  00,2B2
....................     
....................    //return Prom; 
....................    return Temperature; 
18B2:  MOVFF  2B2,00
18B6:  MOVFF  2B3,01
18BA:  MOVFF  2B4,02
18BE:  MOVFF  2B5,03
.................... } 
18C2:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_Camara(int media){ 
....................    promediopresion=0.0; 
*
193E:  MOVLB  2
1940:  CLRF   x4D
1942:  CLRF   x4C
1944:  CLRF   x4B
1946:  CLRF   x4A
....................    V1 = sensores(1);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
1948:  MOVLW  01
194A:  MOVLB  3
194C:  MOVWF  x48
194E:  MOVLB  0
1950:  CALL   0F76
1954:  MOVFF  03,2D5
1958:  MOVFF  02,2D4
195C:  MOVFF  01,2D3
1960:  MOVFF  00,2D2
....................    V1 = V1*(5.0/4096.0); 
1964:  MOVFF  2D5,34F
1968:  MOVFF  2D4,34E
196C:  MOVFF  2D3,34D
1970:  MOVFF  2D2,34C
1974:  MOVLB  3
1976:  CLRF   x53
1978:  CLRF   x52
197A:  MOVLW  20
197C:  MOVWF  x51
197E:  MOVLW  75
1980:  MOVWF  x50
1982:  MOVLB  0
1984:  RCALL  140C
1986:  MOVFF  03,2D5
198A:  MOVFF  02,2D4
198E:  MOVFF  01,2D3
1992:  MOVFF  00,2D2
....................    Presion=(V1-0.2)/(K); 
1996:  BSF    FD8.1
1998:  MOVFF  2D5,34F
199C:  MOVFF  2D4,34E
19A0:  MOVFF  2D3,34D
19A4:  MOVFF  2D2,34C
19A8:  MOVLW  CD
19AA:  MOVLB  3
19AC:  MOVWF  x53
19AE:  MOVLW  CC
19B0:  MOVWF  x52
19B2:  MOVLW  4C
19B4:  MOVWF  x51
19B6:  MOVLW  7C
19B8:  MOVWF  x50
19BA:  MOVLB  0
19BC:  CALL   1128
19C0:  MOVFF  00,348
19C4:  MOVFF  01,349
19C8:  MOVFF  02,34A
19CC:  MOVFF  03,34B
19D0:  MOVFF  03,34F
19D4:  MOVFF  02,34E
19D8:  MOVFF  01,34D
19DC:  MOVFF  00,34C
19E0:  MOVFF  305,353
19E4:  MOVFF  304,352
19E8:  MOVFF  303,351
19EC:  MOVFF  302,350
19F0:  CALL   0FCA
19F4:  MOVFF  03,2D9
19F8:  MOVFF  02,2D8
19FC:  MOVFF  01,2D7
1A00:  MOVFF  00,2D6
....................     
....................    if(Presion<0.0) 
1A04:  MOVFF  2D9,34B
1A08:  MOVFF  2D8,34A
1A0C:  MOVFF  2D7,349
1A10:  MOVFF  2D6,348
1A14:  MOVLB  3
1A16:  CLRF   x4F
1A18:  CLRF   x4E
1A1A:  CLRF   x4D
1A1C:  CLRF   x4C
1A1E:  MOVLB  0
1A20:  RCALL  18C4
1A22:  BNC   1A2E
....................    { 
....................       Presion=0.0; 
1A24:  MOVLB  2
1A26:  CLRF   xD9
1A28:  CLRF   xD8
1A2A:  CLRF   xD7
1A2C:  CLRF   xD6
....................    } 
....................     
....................    if(r>media-1) 
1A2E:  MOVLW  01
1A30:  MOVLB  3
1A32:  SUBWF  x47,W
1A34:  MOVLB  2
1A36:  SUBWF  x57,W
1A38:  BZ    1A3E
1A3A:  BNC   1A3E
....................    {r=0;} 
1A3C:  CLRF   x57
....................    PromPresion[r]=Presion;r++; 
1A3E:  MOVF   x57,W
1A40:  MULLW  04
1A42:  MOVF   FF3,W
1A44:  CLRF   03
1A46:  ADDLW  A2
1A48:  MOVWF  FE9
1A4A:  MOVLW  01
1A4C:  ADDWFC 03,W
1A4E:  MOVWF  FEA
1A50:  MOVFF  2D6,FEF
1A54:  MOVFF  2D7,FEC
1A58:  MOVFF  2D8,FEC
1A5C:  MOVFF  2D9,FEC
1A60:  INCF   x57,F
....................           
....................    for(t=0;t<=(media-1);t++) 
1A62:  CLRF   x58
1A64:  MOVLW  01
1A66:  MOVLB  3
1A68:  SUBWF  x47,W
1A6A:  MOVLB  2
1A6C:  SUBWF  x58,W
1A6E:  BZ    1A72
1A70:  BC    1AE2
....................    { 
....................       promediopresion+=PromPresion[t]; 
1A72:  MOVF   x58,W
1A74:  MULLW  04
1A76:  MOVF   FF3,W
1A78:  CLRF   03
1A7A:  ADDLW  A2
1A7C:  MOVWF  FE9
1A7E:  MOVLW  01
1A80:  ADDWFC 03,W
1A82:  MOVWF  FEA
1A84:  MOVFF  FEF,00
1A88:  MOVFF  FEC,01
1A8C:  MOVFF  FEC,02
1A90:  MOVFF  FEC,03
1A94:  MOVFF  FEA,349
1A98:  MOVFF  FE9,348
1A9C:  BCF    FD8.1
1A9E:  MOVFF  24D,34F
1AA2:  MOVFF  24C,34E
1AA6:  MOVFF  24B,34D
1AAA:  MOVFF  24A,34C
1AAE:  MOVFF  03,353
1AB2:  MOVFF  02,352
1AB6:  MOVFF  01,351
1ABA:  MOVFF  00,350
1ABE:  MOVLB  0
1AC0:  CALL   1128
1AC4:  MOVFF  349,FEA
1AC8:  MOVFF  348,FE9
1ACC:  MOVFF  03,24D
1AD0:  MOVFF  02,24C
1AD4:  MOVFF  01,24B
1AD8:  MOVFF  00,24A
....................    }  
1ADC:  MOVLB  2
1ADE:  INCF   x58,F
1AE0:  BRA    1A64
....................    promediopresion=promediopresion/media;    
1AE2:  MOVLB  3
1AE4:  CLRF   x4E
1AE6:  MOVFF  347,34D
1AEA:  MOVLB  0
1AEC:  CALL   0F40
1AF0:  MOVFF  24D,34F
1AF4:  MOVFF  24C,34E
1AF8:  MOVFF  24B,34D
1AFC:  MOVFF  24A,34C
1B00:  MOVFF  03,353
1B04:  MOVFF  02,352
1B08:  MOVFF  01,351
1B0C:  MOVFF  00,350
1B10:  CALL   0FCA
1B14:  MOVFF  03,24D
1B18:  MOVFF  02,24C
1B1C:  MOVFF  01,24B
1B20:  MOVFF  00,24A
....................     
....................    return promediopresion; 
1B24:  MOVFF  24A,00
1B28:  MOVFF  24B,01
1B2C:  MOVFF  24C,02
1B30:  MOVFF  24D,03
.................... } 
1B34:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_PreCamara(int media){ 
....................    promediopresionp=0.0; 
1B36:  MOVLB  2
1B38:  CLRF   x55
1B3A:  CLRF   x54
1B3C:  CLRF   x53
1B3E:  CLRF   x52
....................    V2 = sensores(2);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
1B40:  MOVLW  02
1B42:  MOVLB  3
1B44:  MOVWF  x48
1B46:  MOVLB  0
1B48:  CALL   0F76
1B4C:  MOVFF  03,2E9
1B50:  MOVFF  02,2E8
1B54:  MOVFF  01,2E7
1B58:  MOVFF  00,2E6
....................    V2 = V2*(5.0/4096.0); 
1B5C:  MOVFF  2E9,34F
1B60:  MOVFF  2E8,34E
1B64:  MOVFF  2E7,34D
1B68:  MOVFF  2E6,34C
1B6C:  MOVLB  3
1B6E:  CLRF   x53
1B70:  CLRF   x52
1B72:  MOVLW  20
1B74:  MOVWF  x51
1B76:  MOVLW  75
1B78:  MOVWF  x50
1B7A:  MOVLB  0
1B7C:  RCALL  140C
1B7E:  MOVFF  03,2E9
1B82:  MOVFF  02,2E8
1B86:  MOVFF  01,2E7
1B8A:  MOVFF  00,2E6
....................    Presionp=(V2-0.2)/(K); 
1B8E:  BSF    FD8.1
1B90:  MOVFF  2E9,34F
1B94:  MOVFF  2E8,34E
1B98:  MOVFF  2E7,34D
1B9C:  MOVFF  2E6,34C
1BA0:  MOVLW  CD
1BA2:  MOVLB  3
1BA4:  MOVWF  x53
1BA6:  MOVLW  CC
1BA8:  MOVWF  x52
1BAA:  MOVLW  4C
1BAC:  MOVWF  x51
1BAE:  MOVLW  7C
1BB0:  MOVWF  x50
1BB2:  MOVLB  0
1BB4:  CALL   1128
1BB8:  MOVFF  00,348
1BBC:  MOVFF  01,349
1BC0:  MOVFF  02,34A
1BC4:  MOVFF  03,34B
1BC8:  MOVFF  03,34F
1BCC:  MOVFF  02,34E
1BD0:  MOVFF  01,34D
1BD4:  MOVFF  00,34C
1BD8:  MOVFF  305,353
1BDC:  MOVFF  304,352
1BE0:  MOVFF  303,351
1BE4:  MOVFF  302,350
1BE8:  CALL   0FCA
1BEC:  MOVFF  03,2ED
1BF0:  MOVFF  02,2EC
1BF4:  MOVFF  01,2EB
1BF8:  MOVFF  00,2EA
....................    //Presionp=Presionp-6.8; 
....................     
....................    if(Presionp<0.0) 
1BFC:  MOVFF  2ED,34B
1C00:  MOVFF  2EC,34A
1C04:  MOVFF  2EB,349
1C08:  MOVFF  2EA,348
1C0C:  MOVLB  3
1C0E:  CLRF   x4F
1C10:  CLRF   x4E
1C12:  CLRF   x4D
1C14:  CLRF   x4C
1C16:  MOVLB  0
1C18:  RCALL  18C4
1C1A:  BNC   1C26
....................    { 
....................       Presionp=0.0; 
1C1C:  MOVLB  2
1C1E:  CLRF   xED
1C20:  CLRF   xEC
1C22:  CLRF   xEB
1C24:  CLRF   xEA
....................    } 
....................     
....................    if(r2>media-1) 
1C26:  MOVLW  01
1C28:  MOVLB  3
1C2A:  SUBWF  x47,W
1C2C:  MOVLB  2
1C2E:  SUBWF  x59,W
1C30:  BZ    1C36
1C32:  BNC   1C36
....................    {r2=0;} 
1C34:  CLRF   x59
....................    PromPresionp[r2]=Presionp;r2++; 
1C36:  MOVF   x59,W
1C38:  MULLW  04
1C3A:  MOVF   FF3,W
1C3C:  CLRF   03
1C3E:  ADDLW  F2
1C40:  MOVWF  FE9
1C42:  MOVLW  01
1C44:  ADDWFC 03,W
1C46:  MOVWF  FEA
1C48:  MOVFF  2EA,FEF
1C4C:  MOVFF  2EB,FEC
1C50:  MOVFF  2EC,FEC
1C54:  MOVFF  2ED,FEC
1C58:  INCF   x59,F
....................           
....................    for(t2=0;t2<=(media-1);t2++) 
1C5A:  CLRF   x5A
1C5C:  MOVLW  01
1C5E:  MOVLB  3
1C60:  SUBWF  x47,W
1C62:  MOVLB  2
1C64:  SUBWF  x5A,W
1C66:  BZ    1C6A
1C68:  BC    1CDA
....................    { 
....................       promediopresionp+=PromPresionp[t2]; 
1C6A:  MOVF   x5A,W
1C6C:  MULLW  04
1C6E:  MOVF   FF3,W
1C70:  CLRF   03
1C72:  ADDLW  F2
1C74:  MOVWF  FE9
1C76:  MOVLW  01
1C78:  ADDWFC 03,W
1C7A:  MOVWF  FEA
1C7C:  MOVFF  FEF,00
1C80:  MOVFF  FEC,01
1C84:  MOVFF  FEC,02
1C88:  MOVFF  FEC,03
1C8C:  MOVFF  FEA,349
1C90:  MOVFF  FE9,348
1C94:  BCF    FD8.1
1C96:  MOVFF  255,34F
1C9A:  MOVFF  254,34E
1C9E:  MOVFF  253,34D
1CA2:  MOVFF  252,34C
1CA6:  MOVFF  03,353
1CAA:  MOVFF  02,352
1CAE:  MOVFF  01,351
1CB2:  MOVFF  00,350
1CB6:  MOVLB  0
1CB8:  CALL   1128
1CBC:  MOVFF  349,FEA
1CC0:  MOVFF  348,FE9
1CC4:  MOVFF  03,255
1CC8:  MOVFF  02,254
1CCC:  MOVFF  01,253
1CD0:  MOVFF  00,252
....................    }  
1CD4:  MOVLB  2
1CD6:  INCF   x5A,F
1CD8:  BRA    1C5C
....................    promediopresionp=promediopresionp/media;    
1CDA:  MOVLB  3
1CDC:  CLRF   x4E
1CDE:  MOVFF  347,34D
1CE2:  MOVLB  0
1CE4:  CALL   0F40
1CE8:  MOVFF  255,34F
1CEC:  MOVFF  254,34E
1CF0:  MOVFF  253,34D
1CF4:  MOVFF  252,34C
1CF8:  MOVFF  03,353
1CFC:  MOVFF  02,352
1D00:  MOVFF  01,351
1D04:  MOVFF  00,350
1D08:  CALL   0FCA
1D0C:  MOVFF  03,255
1D10:  MOVFF  02,254
1D14:  MOVFF  01,253
1D18:  MOVFF  00,252
....................     
....................    return promediopresionp; 
1D1C:  MOVFF  252,00
1D20:  MOVFF  253,01
1D24:  MOVFF  254,02
1D28:  MOVFF  255,03
.................... } 
1D2C:  RETLW  00
....................  
....................  
.................... void Carga_Vector(void){ 
....................    txbuf[0]=Puerta;                       // Flag de estado de interruptor de puerta 
*
1DC0:  MOVFF  26E,324
....................    txbuf[1]=Parada;                       // Flag de estado de parada de Emergencia 
1DC4:  MOVFF  26F,325
....................    txbuf[2]=NivelReservorio;              // Nivel bajo del nivel de agua del calderin. 
1DC8:  MOVFF  270,326
....................    txbuf[3]=flag_agua;                    // Bandera que indica que el calderin esta con agua. 
1DCC:  MOVLB  3
1DCE:  CLRF   x27
1DD0:  MOVLB  2
1DD2:  BTFSS  x56.1
1DD4:  BRA    1DDC
1DD6:  MOVLB  3
1DD8:  INCF   x27,F
1DDA:  MOVLB  2
....................    txbuf[4]=Presostato;                   // Parte baja de Presion de Camara 
1DDC:  MOVFF  272,328
....................    txbuf[5]=(int8)Temperatura;            // Parte entera de Temperatura de Autoclave 
1DE0:  MOVFF  2F5,34A
1DE4:  MOVFF  2F4,349
1DE8:  MOVFF  2F3,348
1DEC:  MOVFF  2F2,347
1DF0:  MOVLB  0
1DF2:  RCALL  1D2E
1DF4:  MOVFF  01,329
....................    txbuf[6]=Alarma;                       // Alarma para errores de Funcionamiento de la autoclave 
1DF8:  MOVFF  26C,32A
....................    txbuf[7]=AlarmaAgua;                   //  Alarma para errores de Agua 
1DFC:  MOVFF  26D,32B
....................    txbuf[8]=Chksum;                       // Checksum para verificación de comunicación 
1E00:  MOVFF  275,32C
....................    txbuf[9]=(int8)d3;                     // Parte Decimal de Temperatura 
1E04:  MOVFF  2C9,34A
1E08:  MOVFF  2C8,349
1E0C:  MOVFF  2C7,348
1E10:  MOVFF  2C6,347
1E14:  RCALL  1D2E
1E16:  MOVFF  01,32D
....................    txbuf[10]=make8(PresionCamara16,0);    // Parte baja de Presion de Camara 
1E1A:  MOVFF  288,32E
1E1E:  MOVLB  3
....................    txbuf[11]=make8(PresionCamara16,1);    // Parte alta de Presion de Camara 
1E20:  MOVFF  289,32F
1E24:  MOVLB  3
....................    txbuf[12]=make8(PresionPreCamara16,0); // Parte Baja de Presion de Precamara 
1E26:  MOVFF  28A,330
1E2A:  MOVLB  3
....................    txbuf[13]=make8(PresionPreCamara16,1); // Parte Alta de Presion de Precamara 
1E2C:  MOVFF  28B,331
1E30:  MOVLB  3
....................    txbuf[14]=flagprevacio; 
1E32:  MOVFF  276,332
....................    //txbuf[15]=Atmosferica; 
.................... } 
1E36:  MOVLB  0
1E38:  RETLW  00
....................  
.................... void Lee_Vector(void){ 
....................    Resistencia=rxbuf[0]; 
*
1D6A:  MOVFF  335,263
....................    EVDesfogue=rxbuf[1]; 
1D6E:  MOVFF  336,264
....................    EVAgua=rxbuf[2]; 
1D72:  MOVFF  337,265
....................    EVTrampa=rxbuf[3]; 
1D76:  MOVFF  338,266
....................    MotorPuerta=rxbuf[4]; 
1D7A:  MOVFF  339,267
....................    EVEntradaAgua=rxbuf[5]; 
1D7E:  MOVFF  33A,268
....................    BombaVacio=rxbuf[6]; 
1D82:  MOVFF  33B,269
....................    BombaAgua=rxbuf[7]; 
1D86:  MOVFF  33C,26A
....................    Control=rxbuf[8]; 
1D8A:  MOVFF  33D,26B
....................    Setpoint=rxbuf[9]; 
1D8E:  MOVLB  3
1D90:  CLRF   x4E
1D92:  MOVFF  33E,34D
1D96:  MOVLB  0
1D98:  CALL   0F40
1D9C:  MOVFF  03,2F1
1DA0:  MOVFF  02,2F0
1DA4:  MOVFF  01,2EF
1DA8:  MOVFF  00,2EE
....................    Chksum=rxbuf[10]; 
1DAC:  MOVFF  33F,275
....................    Nivel=rxbuf[12]; 
1DB0:  MOVLB  2
1DB2:  CLRF   x7F
1DB4:  MOVFF  341,27E
....................    Atmosferica=rxbuf[13]; 
1DB8:  MOVFF  342,262
.................... } 
1DBC:  MOVLB  0
1DBE:  RETLW  00
....................  
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
*
0E1A:  CLRF   FD7
0E1C:  CLRF   FD6
....................    t_exhaust++; 
0E1E:  MOVLB  2
0E20:  INCF   x80,F
0E22:  BTFSC  FD8.2
0E24:  INCF   x81,F
....................    if(EVDesfogue==2 && Presostato>=2) 
0E26:  MOVF   x64,W
0E28:  SUBLW  02
0E2A:  BNZ   0E9C
0E2C:  MOVF   x72,W
0E2E:  SUBLW  01
0E30:  BC    0E9C
....................    { 
....................       EV_Agua_off; 
0E32:  BCF    F8A.4
0E34:  BCF    F93.4
....................       EV_Paso_off; 
0E36:  BCF    F8A.3
0E38:  BCF    F93.3
....................       Resistencia_off; 
0E3A:  BCF    F8B.0
0E3C:  BCF    F94.0
....................       Bomba_off; 
0E3E:  BCF    F8B.1
0E40:  BCF    F94.1
....................       if(Nivel<6) 
0E42:  MOVF   x7F,F
0E44:  BNZ   0E98
0E46:  MOVF   x7E,W
0E48:  SUBLW  05
0E4A:  BNC   0E98
....................       { 
....................          if(t_exhaust<=(9990*Nivel)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0E4C:  MOVLW  27
0E4E:  MOVLB  3
0E50:  MOVWF  x5D
0E52:  MOVLW  06
0E54:  MOVWF  x5C
0E56:  MOVFF  27F,35F
0E5A:  MOVFF  27E,35E
0E5E:  MOVLB  0
0E60:  RCALL  0DF8
0E62:  MOVFF  02,03
0E66:  MOVF   01,W
0E68:  MOVLB  2
0E6A:  MOVF   x81,W
0E6C:  SUBWF  02,W
0E6E:  BNC   0E7E
0E70:  BNZ   0E78
0E72:  MOVF   x80,W
0E74:  SUBWF  01,W
0E76:  BNC   0E7E
....................          { 
....................             //Resistencia_on; 
....................             EV_Desfogue_on; 
0E78:  BSF    F8A.2
0E7A:  BCF    F93.2
....................          } 
....................          else          
0E7C:  BRA    0E82
....................          { 
....................             //Resistencia_off; 
....................             EV_Desfogue_off; 
0E7E:  BCF    F8A.2
0E80:  BCF    F93.2
....................          }    
....................        
....................          if(t_exhaust>=60000) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
0E82:  MOVF   x81,W
0E84:  SUBLW  E9
0E86:  BC    0E96
0E88:  XORLW  FF
0E8A:  BNZ   0E92
0E8C:  MOVF   x80,W
0E8E:  SUBLW  5F
0E90:  BC    0E96
....................          { 
....................             t_exhaust=0; 
0E92:  CLRF   x81
0E94:  CLRF   x80
....................          } // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
....................       } 
....................       else 
0E96:  BRA    0E9C
....................       { 
....................          EV_Desfogue_on; 
0E98:  BSF    F8A.2
0E9A:  BCF    F93.2
....................       } 
....................    }   
.................... } 
....................  
0E9C:  BCF    FF2.2
0E9E:  MOVLB  0
0EA0:  GOTO   0078
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
0EA4:  MOVLW  15
0EA6:  MOVWF  FCF
0EA8:  MOVLW  A0
0EAA:  MOVWF  FCE
....................    tiempos++; 
0EAC:  MOVLB  2
0EAE:  INCF   x78,F
0EB0:  BTFSC  FD8.2
0EB2:  INCF   x79,F
....................    tiempos3++; 
0EB4:  INCF   x7A,F
0EB6:  BTFSC  FD8.2
0EB8:  INCF   x7B,F
....................    tiempoctrl++; 
0EBA:  INCF   x7C,F
0EBC:  BTFSC  FD8.2
0EBE:  INCF   x7D,F
....................     
....................    if(flag_reservorio==1) 
0EC0:  BTFSS  x56.5
0EC2:  BRA    0ECA
....................    { 
....................       treservorio++; 
0EC4:  INCF   x86,F
0EC6:  BTFSC  FD8.2
0EC8:  INCF   x87,F
....................    } 
....................           
....................    if(tiempos3>=100) 
0ECA:  MOVF   x7B,F
0ECC:  BNZ   0ED4
0ECE:  MOVF   x7A,W
0ED0:  SUBLW  63
0ED2:  BC    0EDA
....................    {tiempos3=0;Expulsa=1;} 
0ED4:  CLRF   x7B
0ED6:  CLRF   x7A
0ED8:  BSF    x8E.1
....................     
....................    if(tiempos>=200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0EDA:  MOVF   x79,F
0EDC:  BNZ   0EE4
0EDE:  MOVF   x78,W
0EE0:  SUBLW  C7
0EE2:  BC    0F0C
....................    { 
....................       if(flag_vacio==1){ 
0EE4:  BTFSS  x56.7
0EE6:  BRA    0EEE
....................          tvacio++; 
0EE8:  INCF   x8C,F
0EEA:  BTFSC  FD8.2
0EEC:  INCF   x8D,F
....................       } 
....................        
....................       tiempos=0;Lectura=1;TiempoControl++; 
0EEE:  CLRF   x79
0EF0:  CLRF   x78
0EF2:  BSF    x8E.0
0EF4:  INCF   x5B,F
....................       if(EVAgua>=1) 
0EF6:  MOVF   x65,W
0EF8:  SUBLW  00
0EFA:  BC    0F0C
....................       { 
....................          tinicio++; 
0EFC:  INCF   x82,F
0EFE:  BTFSC  FD8.2
0F00:  INCF   x83,F
....................          if(flag_agua2==0) 
0F02:  BTFSC  x56.2
0F04:  BRA    0F0C
....................          { 
....................             tagua++; 
0F06:  INCF   x84,F
0F08:  BTFSC  FD8.2
0F0A:  INCF   x85,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0F0C:  BCF    F9E.0
0F0E:  MOVLB  0
0F10:  GOTO   0078
.................... void Controla(){ 
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
*
20E6:  BCF    FD8.1
20E8:  MOVFF  2C5,34F
20EC:  MOVFF  2C4,34E
20F0:  MOVFF  2C3,34D
20F4:  MOVFF  2C2,34C
20F8:  MOVFF  2F1,353
20FC:  MOVFF  2F0,352
2100:  MOVFF  2EF,351
2104:  MOVFF  2EE,350
2108:  CALL   1128
210C:  MOVFF  00,347
2110:  MOVFF  01,348
2114:  MOVFF  02,349
2118:  MOVFF  03,34A
211C:  BSF    FD8.1
211E:  MOVFF  03,34F
2122:  MOVFF  02,34E
2126:  MOVFF  01,34D
212A:  MOVFF  00,34C
212E:  MOVFF  2F5,353
2132:  MOVFF  2F4,352
2136:  MOVFF  2F3,351
213A:  MOVFF  2F2,350
213E:  CALL   1128
2142:  MOVFF  03,2AD
2146:  MOVFF  02,2AC
214A:  MOVFF  01,2AB
214E:  MOVFF  00,2AA
....................     
....................    if(error>0.9 && error<15 && Aumento<0.3) 
2152:  MOVLW  66
2154:  MOVLB  3
2156:  MOVWF  x4B
2158:  MOVWF  x4A
215A:  MOVWF  x49
215C:  MOVLW  7E
215E:  MOVWF  x48
2160:  MOVFF  2AD,34F
2164:  MOVFF  2AC,34E
2168:  MOVFF  2AB,34D
216C:  MOVFF  2AA,34C
2170:  MOVLB  0
2172:  CALL   18C4
2176:  BNC   222C
2178:  MOVFF  2AD,34B
217C:  MOVFF  2AC,34A
2180:  MOVFF  2AB,349
2184:  MOVFF  2AA,348
2188:  MOVLB  3
218A:  CLRF   x4F
218C:  CLRF   x4E
218E:  MOVLW  70
2190:  MOVWF  x4D
2192:  MOVLW  82
2194:  MOVWF  x4C
2196:  MOVLB  0
2198:  CALL   18C4
219C:  BNC   222C
219E:  MOVFF  251,34B
21A2:  MOVFF  250,34A
21A6:  MOVFF  24F,349
21AA:  MOVFF  24E,348
21AE:  MOVLW  9A
21B0:  MOVLB  3
21B2:  MOVWF  x4F
21B4:  MOVLW  99
21B6:  MOVWF  x4E
21B8:  MOVLW  19
21BA:  MOVWF  x4D
21BC:  MOVLW  7D
21BE:  MOVWF  x4C
21C0:  MOVLB  0
21C2:  CALL   18C4
21C6:  BNC   222C
....................    { 
....................       if(Tpulso<9.0) 
21C8:  MOVFF  2A9,34B
21CC:  MOVFF  2A8,34A
21D0:  MOVFF  2A7,349
21D4:  MOVFF  2A6,348
21D8:  MOVLB  3
21DA:  CLRF   x4F
21DC:  CLRF   x4E
21DE:  MOVLW  10
21E0:  MOVWF  x4D
21E2:  MOVLW  82
21E4:  MOVWF  x4C
21E6:  MOVLB  0
21E8:  CALL   18C4
21EC:  BNC   222C
....................       { 
....................          if(TiempoControl>=20) 
21EE:  MOVLB  2
21F0:  MOVF   x5B,W
21F2:  SUBLW  13
21F4:  BC    222E
....................          { 
....................             TiempoControl=0; 
21F6:  CLRF   x5B
....................             Ganancia+=2; 
21F8:  BCF    FD8.1
21FA:  MOVFF  2BD,34F
21FE:  MOVFF  2BC,34E
2202:  MOVFF  2BB,34D
2206:  MOVFF  2BA,34C
220A:  MOVLB  3
220C:  CLRF   x53
220E:  CLRF   x52
2210:  CLRF   x51
2212:  MOVLW  80
2214:  MOVWF  x50
2216:  MOVLB  0
2218:  CALL   1128
221C:  MOVFF  03,2BD
2220:  MOVFF  02,2BC
2224:  MOVFF  01,2BB
2228:  MOVFF  00,2BA
222C:  MOVLB  2
....................          } 
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
222E:  MOVFF  2AD,34B
2232:  MOVFF  2AC,34A
2236:  MOVFF  2AB,349
223A:  MOVFF  2AA,348
223E:  MOVLW  9A
2240:  MOVLB  3
2242:  MOVWF  x4F
2244:  MOVLW  99
2246:  MOVWF  x4E
2248:  MOVWF  x4D
224A:  MOVLW  7D
224C:  MOVWF  x4C
224E:  MOVLB  0
2250:  CALL   18C4
2254:  BNC   2266
....................    { 
....................       Ganancia=Ganancia2; 
2256:  MOVFF  2C1,2BD
225A:  MOVFF  2C0,2BC
225E:  MOVFF  2BF,2BB
2262:  MOVFF  2BE,2BA
....................    } 
....................     
....................    if(Ganancia<1) 
2266:  MOVFF  2BD,34B
226A:  MOVFF  2BC,34A
226E:  MOVFF  2BB,349
2272:  MOVFF  2BA,348
2276:  MOVLB  3
2278:  CLRF   x4F
227A:  CLRF   x4E
227C:  CLRF   x4D
227E:  MOVLW  7F
2280:  MOVWF  x4C
2282:  MOVLB  0
2284:  CALL   18C4
2288:  BNC   2296
....................    { 
....................       Ganancia=1; 
228A:  MOVLB  2
228C:  CLRF   xBD
228E:  CLRF   xBC
2290:  CLRF   xBB
2292:  MOVLW  7F
2294:  MOVWF  xBA
....................    } 
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
2296:  MOVFF  2AD,34B
229A:  MOVFF  2AC,34A
229E:  MOVFF  2AB,349
22A2:  MOVFF  2AA,348
22A6:  MOVLB  3
22A8:  CLRF   x4F
22AA:  CLRF   x4E
22AC:  CLRF   x4D
22AE:  CLRF   x4C
22B0:  MOVLB  0
22B2:  CALL   18C4
22B6:  BNC   22C4
....................    { 
....................       error=0.0; 
22B8:  MOVLB  2
22BA:  CLRF   xAD
22BC:  CLRF   xAC
22BE:  CLRF   xAB
22C0:  CLRF   xAA
22C2:  MOVLB  0
....................    } 
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
22C4:  MOVFF  2AD,34F
22C8:  MOVFF  2AC,34E
22CC:  MOVFF  2AB,34D
22D0:  MOVFF  2AA,34C
22D4:  MOVFF  2BD,353
22D8:  MOVFF  2BC,352
22DC:  MOVFF  2BB,351
22E0:  MOVFF  2BA,350
22E4:  CALL   140C
22E8:  MOVFF  03,2B9
22EC:  MOVFF  02,2B8
22F0:  MOVFF  01,2B7
22F4:  MOVFF  00,2B6
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
22F8:  MOVFF  2F1,34B
22FC:  MOVFF  2F0,34A
2300:  MOVFF  2EF,349
2304:  MOVFF  2EE,348
2308:  MOVFF  2B9,34F
230C:  MOVFF  2B8,34E
2310:  MOVFF  2B7,34D
2314:  MOVFF  2B6,34C
2318:  CALL   18C4
231C:  BNC   232E
....................    { 
....................       tmp=Setpoint; 
231E:  MOVFF  2F1,2B9
2322:  MOVFF  2F0,2B8
2326:  MOVFF  2EF,2B7
232A:  MOVFF  2EE,2B6
....................    } 
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
232E:  MOVFF  2B9,34B
2332:  MOVFF  2B8,34A
2336:  MOVFF  2B7,349
233A:  MOVFF  2B6,348
233E:  MOVLB  3
2340:  CLRF   x4F
2342:  CLRF   x4E
2344:  CLRF   x4D
2346:  CLRF   x4C
2348:  MOVLB  0
234A:  CALL   18C4
234E:  BNC   235C
....................    { 
....................       tmp=0.0; 
2350:  MOVLB  2
2352:  CLRF   xB9
2354:  CLRF   xB8
2356:  CLRF   xB7
2358:  CLRF   xB6
235A:  MOVLB  0
....................    } 
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    Tpulso=(tmp/Setpoint)*Tciclo;   
235C:  MOVFF  2B9,34F
2360:  MOVFF  2B8,34E
2364:  MOVFF  2B7,34D
2368:  MOVFF  2B6,34C
236C:  MOVFF  2F1,353
2370:  MOVFF  2F0,352
2374:  MOVFF  2EF,351
2378:  MOVFF  2EE,350
237C:  CALL   0FCA
2380:  MOVFF  00,347
2384:  MOVFF  01,348
2388:  MOVFF  02,349
238C:  MOVFF  03,34A
2390:  MOVFF  03,34F
2394:  MOVFF  02,34E
2398:  MOVFF  01,34D
239C:  MOVFF  00,34C
23A0:  MOVFF  2A5,353
23A4:  MOVFF  2A4,352
23A8:  MOVFF  2A3,351
23AC:  MOVFF  2A2,350
23B0:  CALL   140C
23B4:  MOVFF  03,2A9
23B8:  MOVFF  02,2A8
23BC:  MOVFF  01,2A7
23C0:  MOVFF  00,2A6
....................                                        
....................    if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
23C4:  MOVFF  2A9,34F
23C8:  MOVFF  2A8,34E
23CC:  MOVFF  2A7,34D
23D0:  MOVFF  2A6,34C
23D4:  MOVLW  0A
23D6:  MOVLB  3
23D8:  MOVWF  x53
23DA:  MOVLW  D7
23DC:  MOVWF  x52
23DE:  MOVLW  23
23E0:  MOVWF  x51
23E2:  MOVLW  77
23E4:  MOVWF  x50
23E6:  MOVLB  0
23E8:  CALL   0FCA
23EC:  MOVFF  03,34A
23F0:  MOVFF  02,349
23F4:  MOVFF  01,348
23F8:  MOVFF  00,347
23FC:  RCALL  1D2E
23FE:  MOVFF  02,03
2402:  MOVF   01,W
2404:  MOVLB  2
2406:  MOVF   x7D,W
2408:  SUBWF  02,W
240A:  BNC   241A
240C:  BNZ   2414
240E:  MOVF   x7C,W
2410:  SUBWF  01,W
2412:  BNC   241A
....................    { 
....................       Resistencia_on; 
2414:  BSF    F8B.0
2416:  BCF    F94.0
....................    } 
....................    else          
2418:  BRA    241E
....................    { 
....................       Resistencia_off; 
241A:  BCF    F8B.0
241C:  BCF    F94.0
....................    } 
....................           
....................    if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
241E:  MOVFF  2A5,34F
2422:  MOVFF  2A4,34E
2426:  MOVFF  2A3,34D
242A:  MOVFF  2A2,34C
242E:  MOVLW  0A
2430:  MOVLB  3
2432:  MOVWF  x53
2434:  MOVLW  D7
2436:  MOVWF  x52
2438:  MOVLW  23
243A:  MOVWF  x51
243C:  MOVLW  77
243E:  MOVWF  x50
2440:  MOVLB  0
2442:  CALL   0FCA
2446:  MOVFF  03,34A
244A:  MOVFF  02,349
244E:  MOVFF  01,348
2452:  MOVFF  00,347
2456:  RCALL  1D2E
2458:  MOVF   02,W
245A:  MOVWF  03
245C:  MOVLB  2
245E:  SUBWF  x7D,W
2460:  BNC   246E
2462:  BNZ   246A
2464:  MOVF   01,W
2466:  SUBWF  x7C,W
2468:  BNC   246E
....................    { 
....................       tiempoctrl=0; 
246A:  CLRF   x7D
246C:  CLRF   x7C
....................    } // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
246E:  MOVLB  0
2470:  GOTO   37FE (RETURN)
....................  
.................... void ControlaPresion(){ 
....................    if(PresionPrecamara16>=100) 
*
20C2:  MOVLB  2
20C4:  MOVF   x8B,F
20C6:  BNZ   20CE
20C8:  MOVF   x8A,W
20CA:  SUBLW  63
20CC:  BC    20D2
....................    { 
....................       Resistencia_off; 
20CE:  BCF    F8B.0
20D0:  BCF    F94.0
....................    } 
....................     
....................    if(PresionPrecamara16<80) 
20D2:  MOVF   x8B,F
20D4:  BNZ   20E0
20D6:  MOVF   x8A,W
20D8:  SUBLW  4F
20DA:  BNC   20E0
....................    { 
....................       Resistencia_on; 
20DC:  BSF    F8B.0
20DE:  BCF    F94.0
....................    } 
....................  
.................... } 
20E0:  MOVLB  0
20E2:  GOTO   3714 (RETURN)
....................  
.................... void main() 
.................... { 
*
2474:  CLRF   FF8
2476:  BCF    FD0.7
2478:  BSF    07.7
247A:  CLRF   FEA
247C:  CLRF   FE9
247E:  BSF    F93.1
2480:  BSF    F93.0
2482:  MOVLW  A0
2484:  MOVWF  FC8
2486:  MOVLW  36
2488:  MOVWF  FC6
248A:  CLRF   1C
248C:  CLRF   20
248E:  MOVLB  2
2490:  CLRF   x4D
2492:  CLRF   x4C
2494:  CLRF   x4B
2496:  CLRF   x4A
2498:  CLRF   x51
249A:  CLRF   x50
249C:  CLRF   x4F
249E:  CLRF   x4E
24A0:  CLRF   x55
24A2:  CLRF   x54
24A4:  CLRF   x53
24A6:  CLRF   x52
24A8:  BCF    x56.0
24AA:  BCF    x56.1
24AC:  BCF    x56.2
24AE:  BCF    x56.3
24B0:  BCF    x56.4
24B2:  BCF    x56.5
24B4:  BCF    x56.6
24B6:  BCF    x56.7
24B8:  CLRF   x57
24BA:  CLRF   x58
24BC:  CLRF   x59
24BE:  CLRF   x5A
24C0:  CLRF   x5B
24C2:  CLRF   x5C
24C4:  CLRF   x5D
24C6:  CLRF   x5E
24C8:  MOVLW  0A
24CA:  MOVWF  x5F
24CC:  CLRF   x60
24CE:  CLRF   x61
24D0:  MOVLW  47
24D2:  MOVWF  x62
24D4:  CLRF   x63
24D6:  CLRF   x64
24D8:  CLRF   x65
24DA:  CLRF   x66
24DC:  CLRF   x67
24DE:  CLRF   x68
24E0:  CLRF   x69
24E2:  CLRF   x6A
24E4:  CLRF   x6B
24E6:  CLRF   x6C
24E8:  CLRF   x6D
24EA:  CLRF   x6E
24EC:  CLRF   x6F
24EE:  CLRF   x70
24F0:  CLRF   x71
24F2:  CLRF   x72
24F4:  CLRF   x73
24F6:  CLRF   x74
24F8:  CLRF   x75
24FA:  MOVLW  0A
24FC:  MOVWF  x76
24FE:  MOVWF  x77
2500:  CLRF   x79
2502:  CLRF   x78
2504:  CLRF   x7B
2506:  CLRF   x7A
2508:  CLRF   x7D
250A:  CLRF   x7C
250C:  CLRF   x7F
250E:  CLRF   x7E
2510:  CLRF   x81
2512:  CLRF   x80
2514:  CLRF   x83
2516:  CLRF   x82
2518:  CLRF   x85
251A:  CLRF   x84
251C:  CLRF   x87
251E:  CLRF   x86
2520:  CLRF   x89
2522:  CLRF   x88
2524:  CLRF   x8B
2526:  CLRF   x8A
2528:  CLRF   x8D
252A:  CLRF   x8C
252C:  BCF    x8E.0
252E:  BCF    x8E.1
2530:  BCF    x8E.2
2532:  CLRF   x8F
2534:  CLRF   x90
2536:  CLRF   x91
2538:  CLRF   x92
253A:  CLRF   x93
253C:  CLRF   x94
253E:  MOVLW  02
2540:  MOVWF  x95
2542:  CLRF   x99
2544:  CLRF   x98
2546:  CLRF   x97
2548:  CLRF   x96
254A:  CLRF   x9D
254C:  MOVLW  10
254E:  MOVWF  x9C
2550:  MOVLW  42
2552:  MOVWF  x9B
2554:  MOVLW  8B
2556:  MOVWF  x9A
2558:  CLRF   xA5
255A:  CLRF   xA4
255C:  MOVLW  20
255E:  MOVWF  xA3
2560:  MOVLW  82
2562:  MOVWF  xA2
2564:  CLRF   xA9
2566:  CLRF   xA8
2568:  CLRF   xA7
256A:  CLRF   xA6
256C:  CLRF   xAD
256E:  CLRF   xAC
2570:  CLRF   xAB
2572:  CLRF   xAA
2574:  CLRF   xB1
2576:  CLRF   xB0
2578:  CLRF   xAF
257A:  CLRF   xAE
257C:  CLRF   xB5
257E:  CLRF   xB4
2580:  CLRF   xB3
2582:  CLRF   xB2
2584:  CLRF   xB9
2586:  CLRF   xB8
2588:  CLRF   xB7
258A:  CLRF   xB6
258C:  CLRF   xBD
258E:  CLRF   xBC
2590:  MOVLW  48
2592:  MOVWF  xBB
2594:  MOVLW  83
2596:  MOVWF  xBA
2598:  CLRF   xC1
259A:  CLRF   xC0
259C:  MOVLW  20
259E:  MOVWF  xBF
25A0:  MOVLW  83
25A2:  MOVWF  xBE
25A4:  CLRF   xC5
25A6:  CLRF   xC4
25A8:  CLRF   xC3
25AA:  CLRF   xC2
25AC:  CLRF   xC9
25AE:  CLRF   xC8
25B0:  CLRF   xC7
25B2:  CLRF   xC6
25B4:  CLRF   xCD
25B6:  CLRF   xCC
25B8:  CLRF   xCB
25BA:  CLRF   xCA
25BC:  CLRF   xD1
25BE:  CLRF   xD0
25C0:  CLRF   xCF
25C2:  CLRF   xCE
25C4:  CLRF   xD5
25C6:  CLRF   xD4
25C8:  CLRF   xD3
25CA:  CLRF   xD2
25CC:  CLRF   xD9
25CE:  CLRF   xD8
25D0:  CLRF   xD7
25D2:  CLRF   xD6
25D4:  CLRF   xDD
25D6:  CLRF   xDC
25D8:  CLRF   xDB
25DA:  CLRF   xDA
25DC:  CLRF   xE1
25DE:  CLRF   xE0
25E0:  CLRF   xDF
25E2:  CLRF   xDE
25E4:  CLRF   xE5
25E6:  CLRF   xE4
25E8:  CLRF   xE3
25EA:  CLRF   xE2
25EC:  CLRF   xE9
25EE:  CLRF   xE8
25F0:  CLRF   xE7
25F2:  CLRF   xE6
25F4:  CLRF   xED
25F6:  CLRF   xEC
25F8:  CLRF   xEB
25FA:  CLRF   xEA
25FC:  CLRF   xF1
25FE:  CLRF   xF0
2600:  CLRF   xEF
2602:  CLRF   xEE
2604:  CLRF   xF5
2606:  CLRF   xF4
2608:  CLRF   xF3
260A:  CLRF   xF2
260C:  CLRF   xF9
260E:  CLRF   xF8
2610:  CLRF   xF7
2612:  CLRF   xF6
2614:  CLRF   xFD
2616:  CLRF   xFC
2618:  CLRF   xFB
261A:  CLRF   xFA
261C:  MOVLB  3
261E:  CLRF   x01
2620:  CLRF   x00
2622:  MOVLB  2
2624:  CLRF   xFF
2626:  CLRF   xFE
2628:  MOVLW  5C
262A:  MOVLB  3
262C:  MOVWF  x05
262E:  MOVLW  AA
2630:  MOVWF  x04
2632:  MOVLW  52
2634:  MOVWF  x03
2636:  MOVLW  77
2638:  MOVWF  x02
263A:  MOVLW  E0
263C:  MOVWF  x09
263E:  MOVLW  2D
2640:  MOVWF  x08
2642:  MOVLW  10
2644:  MOVWF  x07
2646:  MOVLW  75
2648:  MOVWF  x06
264A:  MOVLW  FF
264C:  MOVWF  x0D
264E:  MOVLW  21
2650:  MOVWF  x0C
2652:  MOVLW  15
2654:  MOVWF  x0B
2656:  MOVLW  80
2658:  MOVWF  x0A
265A:  MOVLW  82
265C:  MOVWF  x11
265E:  MOVLW  12
2660:  MOVWF  x10
2662:  MOVLW  F4
2664:  MOVWF  x0F
2666:  MOVLW  86
2668:  MOVWF  x0E
266A:  MOVF   FC1,W
266C:  ANDLW  C0
266E:  IORLW  0F
2670:  MOVWF  FC1
2672:  MOVLW  07
2674:  MOVWF  FB4
2676:  MOVLB  0
2678:  CLRF   x62
267A:  CLRF   x63
267C:  CLRF   x64
267E:  CLRF   x65
2680:  CLRF   x66
2682:  CLRF   x67
2684:  CLRF   x68
2686:  CLRF   x69
2688:  CLRF   x6A
268A:  CLRF   x6B
268C:  CLRF   x6C
268E:  CLRF   x6D
2690:  CLRF   x6E
2692:  CLRF   x6F
2694:  CLRF   x70
2696:  CLRF   x71
2698:  CLRF   x72
269A:  CLRF   x73
269C:  CLRF   x74
269E:  CLRF   x75
26A0:  CLRF   x76
26A2:  CLRF   x77
26A4:  CLRF   x78
26A6:  CLRF   x79
26A8:  CLRF   x7A
26AA:  CLRF   x7B
26AC:  CLRF   x7C
26AE:  CLRF   x7D
26B0:  CLRF   x7E
26B2:  CLRF   x7F
26B4:  CLRF   x80
26B6:  CLRF   x81
26B8:  CLRF   x82
26BA:  CLRF   x83
26BC:  CLRF   x84
26BE:  CLRF   x85
26C0:  CLRF   x86
26C2:  CLRF   x87
26C4:  CLRF   x88
26C6:  CLRF   x89
26C8:  CLRF   x8A
26CA:  CLRF   x8B
26CC:  CLRF   x8C
26CE:  CLRF   x8D
26D0:  CLRF   x8E
26D2:  CLRF   x8F
26D4:  CLRF   x90
26D6:  CLRF   x91
26D8:  CLRF   x92
26DA:  CLRF   x93
26DC:  CLRF   x94
26DE:  CLRF   x95
26E0:  CLRF   x96
26E2:  CLRF   x97
26E4:  CLRF   x98
26E6:  CLRF   x99
26E8:  CLRF   x9A
26EA:  CLRF   x9B
26EC:  CLRF   x9C
26EE:  CLRF   x9D
26F0:  CLRF   x9E
26F2:  CLRF   x9F
26F4:  CLRF   xA0
26F6:  CLRF   xA1
26F8:  CLRF   xA2
26FA:  CLRF   xA3
26FC:  CLRF   xA4
26FE:  CLRF   xA5
2700:  CLRF   xA6
2702:  CLRF   xA7
2704:  CLRF   xA8
2706:  CLRF   xA9
2708:  CLRF   xAA
270A:  CLRF   xAB
270C:  CLRF   xAC
270E:  CLRF   xAD
2710:  CLRF   xAE
2712:  CLRF   xAF
2714:  CLRF   xB0
2716:  CLRF   xB1
2718:  CLRF   xB2
271A:  CLRF   xB3
271C:  CLRF   xB4
271E:  CLRF   xB5
2720:  CLRF   xB6
2722:  CLRF   xB7
2724:  CLRF   xB8
2726:  CLRF   xB9
2728:  CLRF   xBA
272A:  CLRF   xBB
272C:  CLRF   xBC
272E:  CLRF   xBD
2730:  CLRF   xBE
2732:  CLRF   xBF
2734:  CLRF   xC0
2736:  CLRF   xC1
2738:  CLRF   xC2
273A:  CLRF   xC3
273C:  CLRF   xC4
273E:  CLRF   xC5
2740:  CLRF   xC6
2742:  CLRF   xC7
2744:  CLRF   xC8
2746:  CLRF   xC9
2748:  CLRF   xCA
274A:  CLRF   xCB
274C:  CLRF   xCC
274E:  CLRF   xCD
2750:  CLRF   xCE
2752:  CLRF   xCF
2754:  CLRF   xD0
2756:  CLRF   xD1
2758:  CLRF   xD2
275A:  CLRF   xD3
275C:  CLRF   xD4
275E:  CLRF   xD5
2760:  CLRF   xD6
2762:  CLRF   xD7
2764:  CLRF   xD8
2766:  CLRF   xD9
2768:  CLRF   xDA
276A:  CLRF   xDB
276C:  CLRF   xDC
276E:  CLRF   xDD
2770:  CLRF   xDE
2772:  CLRF   xDF
2774:  CLRF   xE0
2776:  CLRF   xE1
2778:  CLRF   xE2
277A:  CLRF   xE3
277C:  CLRF   xE4
277E:  CLRF   xE5
2780:  CLRF   xE6
2782:  CLRF   xE7
2784:  CLRF   xE8
2786:  CLRF   xE9
2788:  CLRF   xEA
278A:  CLRF   xEB
278C:  CLRF   xEC
278E:  CLRF   xED
2790:  CLRF   xEE
2792:  CLRF   xEF
2794:  CLRF   xF0
2796:  CLRF   xF1
2798:  CLRF   xF2
279A:  CLRF   xF3
279C:  CLRF   xF4
279E:  CLRF   xF5
27A0:  CLRF   xF6
27A2:  CLRF   xF7
27A4:  CLRF   xF8
27A6:  CLRF   xF9
27A8:  CLRF   xFA
27AA:  CLRF   xFB
27AC:  CLRF   xFC
27AE:  CLRF   xFD
27B0:  CLRF   xFE
27B2:  CLRF   xFF
27B4:  MOVLB  1
27B6:  CLRF   x00
27B8:  CLRF   x01
27BA:  CLRF   x02
27BC:  CLRF   x03
27BE:  CLRF   x04
27C0:  CLRF   x05
27C2:  CLRF   x06
27C4:  CLRF   x07
27C6:  CLRF   x08
27C8:  CLRF   x09
27CA:  CLRF   x0A
27CC:  CLRF   x0B
27CE:  CLRF   x0C
27D0:  CLRF   x0D
27D2:  CLRF   x0E
27D4:  CLRF   x0F
27D6:  CLRF   x10
27D8:  CLRF   x11
27DA:  CLRF   x12
27DC:  CLRF   x13
27DE:  CLRF   x14
27E0:  CLRF   x15
27E2:  CLRF   x16
27E4:  CLRF   x17
27E6:  CLRF   x18
27E8:  CLRF   x19
27EA:  CLRF   x1A
27EC:  CLRF   x1B
27EE:  CLRF   x1C
27F0:  CLRF   x1D
27F2:  CLRF   x1E
27F4:  CLRF   x1F
27F6:  CLRF   x20
27F8:  CLRF   x21
27FA:  CLRF   x22
27FC:  CLRF   x23
27FE:  CLRF   x24
2800:  CLRF   x25
2802:  CLRF   x26
2804:  CLRF   x27
2806:  CLRF   x28
2808:  CLRF   x29
280A:  CLRF   x2A
280C:  CLRF   x2B
280E:  CLRF   x2C
2810:  CLRF   x2D
2812:  CLRF   x2E
2814:  CLRF   x2F
2816:  CLRF   x30
2818:  CLRF   x31
281A:  CLRF   x32
281C:  CLRF   x33
281E:  CLRF   x34
2820:  CLRF   x35
2822:  CLRF   x36
2824:  CLRF   x37
2826:  CLRF   x38
2828:  CLRF   x39
282A:  CLRF   x3A
282C:  CLRF   x3B
282E:  CLRF   x3C
2830:  CLRF   x3D
2832:  CLRF   x3E
2834:  CLRF   x3F
2836:  CLRF   x40
2838:  CLRF   x41
283A:  CLRF   x42
283C:  CLRF   x43
283E:  CLRF   x44
2840:  CLRF   x45
2842:  CLRF   x46
2844:  CLRF   x47
2846:  CLRF   x48
2848:  CLRF   x49
284A:  CLRF   x4A
284C:  CLRF   x4B
284E:  CLRF   x4C
2850:  CLRF   x4D
2852:  CLRF   x4E
2854:  CLRF   x4F
2856:  CLRF   x50
2858:  CLRF   x51
285A:  CLRF   x52
285C:  CLRF   x53
285E:  CLRF   x54
2860:  CLRF   x55
2862:  CLRF   x56
2864:  CLRF   x57
2866:  CLRF   x58
2868:  CLRF   x59
286A:  CLRF   x5A
286C:  CLRF   x5B
286E:  CLRF   x5C
2870:  CLRF   x5D
2872:  CLRF   x5E
2874:  CLRF   x5F
2876:  CLRF   x60
2878:  CLRF   x61
287A:  CLRF   x62
287C:  CLRF   x63
287E:  CLRF   x64
2880:  CLRF   x65
2882:  CLRF   x66
2884:  CLRF   x67
2886:  CLRF   x68
2888:  CLRF   x69
288A:  CLRF   x6A
288C:  CLRF   x6B
288E:  CLRF   x6C
2890:  CLRF   x6D
2892:  CLRF   x6E
2894:  CLRF   x6F
2896:  CLRF   x70
2898:  CLRF   x71
289A:  CLRF   x72
289C:  CLRF   x73
289E:  CLRF   x74
28A0:  CLRF   x75
28A2:  CLRF   x76
28A4:  CLRF   x77
28A6:  CLRF   x78
28A8:  CLRF   x79
28AA:  CLRF   x7A
28AC:  CLRF   x7B
28AE:  CLRF   x7C
28B0:  CLRF   x7D
28B2:  CLRF   x7E
28B4:  CLRF   x7F
28B6:  CLRF   x80
28B8:  CLRF   x81
28BA:  CLRF   x82
28BC:  CLRF   x83
28BE:  CLRF   x84
28C0:  CLRF   x85
28C2:  CLRF   x86
28C4:  CLRF   x87
28C6:  CLRF   x88
28C8:  CLRF   x89
28CA:  CLRF   x8A
28CC:  CLRF   x8B
28CE:  CLRF   x8C
28D0:  CLRF   x8D
28D2:  CLRF   x8E
28D4:  CLRF   x8F
28D6:  CLRF   x90
28D8:  CLRF   x91
28DA:  CLRF   x92
28DC:  CLRF   x93
28DE:  CLRF   x94
28E0:  CLRF   x95
28E2:  CLRF   x96
28E4:  CLRF   x97
28E6:  CLRF   x98
28E8:  CLRF   x99
28EA:  CLRF   x9A
28EC:  CLRF   x9B
28EE:  CLRF   x9C
28F0:  CLRF   x9D
28F2:  CLRF   x9E
28F4:  CLRF   x9F
28F6:  CLRF   xA0
28F8:  CLRF   xA1
28FA:  CLRF   xA2
28FC:  CLRF   xA3
28FE:  CLRF   xA4
2900:  CLRF   xA5
2902:  CLRF   xA6
2904:  CLRF   xA7
2906:  CLRF   xA8
2908:  CLRF   xA9
290A:  CLRF   xAA
290C:  CLRF   xAB
290E:  CLRF   xAC
2910:  CLRF   xAD
2912:  CLRF   xAE
2914:  CLRF   xAF
2916:  CLRF   xB0
2918:  CLRF   xB1
291A:  CLRF   xB2
291C:  CLRF   xB3
291E:  CLRF   xB4
2920:  CLRF   xB5
2922:  CLRF   xB6
2924:  CLRF   xB7
2926:  CLRF   xB8
2928:  CLRF   xB9
292A:  CLRF   xBA
292C:  CLRF   xBB
292E:  CLRF   xBC
2930:  CLRF   xBD
2932:  CLRF   xBE
2934:  CLRF   xBF
2936:  CLRF   xC0
2938:  CLRF   xC1
293A:  CLRF   xC2
293C:  CLRF   xC3
293E:  CLRF   xC4
2940:  CLRF   xC5
2942:  CLRF   xC6
2944:  CLRF   xC7
2946:  CLRF   xC8
2948:  CLRF   xC9
294A:  CLRF   xCA
294C:  CLRF   xCB
294E:  CLRF   xCC
2950:  CLRF   xCD
2952:  CLRF   xCE
2954:  CLRF   xCF
2956:  CLRF   xD0
2958:  CLRF   xD1
295A:  CLRF   xD2
295C:  CLRF   xD3
295E:  CLRF   xD4
2960:  CLRF   xD5
2962:  CLRF   xD6
2964:  CLRF   xD7
2966:  CLRF   xD8
2968:  CLRF   xD9
296A:  CLRF   xDA
296C:  CLRF   xDB
296E:  CLRF   xDC
2970:  CLRF   xDD
2972:  CLRF   xDE
2974:  CLRF   xDF
2976:  CLRF   xE0
2978:  CLRF   xE1
297A:  CLRF   xE2
297C:  CLRF   xE3
297E:  CLRF   xE4
2980:  CLRF   xE5
2982:  CLRF   xE6
2984:  CLRF   xE7
2986:  CLRF   xE8
2988:  CLRF   xE9
298A:  CLRF   xEA
298C:  CLRF   xEB
298E:  CLRF   xEC
2990:  CLRF   xED
2992:  CLRF   xEE
2994:  CLRF   xEF
2996:  CLRF   xF0
2998:  CLRF   xF1
299A:  CLRF   xF2
299C:  CLRF   xF3
299E:  CLRF   xF4
29A0:  CLRF   xF5
29A2:  CLRF   xF6
29A4:  CLRF   xF7
29A6:  CLRF   xF8
29A8:  CLRF   xF9
29AA:  CLRF   xFA
29AC:  CLRF   xFB
29AE:  CLRF   xFC
29B0:  CLRF   xFD
29B2:  CLRF   xFE
29B4:  CLRF   xFF
29B6:  MOVLB  2
29B8:  CLRF   x00
29BA:  CLRF   x01
29BC:  CLRF   x02
29BE:  CLRF   x03
29C0:  CLRF   x04
29C2:  CLRF   x05
29C4:  CLRF   x06
29C6:  CLRF   x07
29C8:  CLRF   x08
29CA:  CLRF   x09
29CC:  CLRF   x0A
29CE:  CLRF   x0B
29D0:  CLRF   x0C
29D2:  CLRF   x0D
29D4:  CLRF   x0E
29D6:  CLRF   x0F
29D8:  CLRF   x10
29DA:  CLRF   x11
29DC:  CLRF   x12
29DE:  CLRF   x13
29E0:  CLRF   x14
29E2:  CLRF   x15
29E4:  CLRF   x16
29E6:  CLRF   x17
29E8:  CLRF   x18
29EA:  CLRF   x19
29EC:  CLRF   x1A
29EE:  CLRF   x1B
29F0:  CLRF   x1C
29F2:  CLRF   x1D
29F4:  CLRF   x1E
29F6:  CLRF   x1F
29F8:  CLRF   x20
29FA:  CLRF   x21
29FC:  CLRF   x22
29FE:  CLRF   x23
2A00:  CLRF   x24
2A02:  CLRF   x25
2A04:  CLRF   x26
2A06:  CLRF   x27
2A08:  CLRF   x28
2A0A:  CLRF   x29
2A0C:  CLRF   x2A
2A0E:  CLRF   x2B
2A10:  CLRF   x2C
2A12:  CLRF   x2D
2A14:  CLRF   x2E
2A16:  CLRF   x2F
2A18:  CLRF   x30
2A1A:  CLRF   x31
2A1C:  CLRF   x32
2A1E:  CLRF   x33
2A20:  CLRF   x34
2A22:  CLRF   x35
2A24:  CLRF   x36
2A26:  CLRF   x37
2A28:  CLRF   x38
2A2A:  CLRF   x39
2A2C:  CLRF   x3A
2A2E:  CLRF   x3B
2A30:  CLRF   x3C
2A32:  CLRF   x3D
2A34:  CLRF   x3E
2A36:  CLRF   x3F
2A38:  CLRF   x40
2A3A:  CLRF   x41
2A3C:  CLRF   x42
2A3E:  CLRF   x43
2A40:  CLRF   x44
2A42:  CLRF   x45
2A44:  CLRF   x46
2A46:  CLRF   x47
2A48:  CLRF   x48
2A4A:  CLRF   x49
2A4C:  MOVLW  03
2A4E:  MOVLB  3
2A50:  MOVWF  x46
....................    fState = 0; 
2A52:  CLRF   x12
....................    for (posicion=0;posicion<0x10;posicion++) 
2A54:  CLRF   x13
2A56:  MOVF   x13,W
2A58:  SUBLW  0F
2A5A:  BNC   2A90
....................    { 
....................       buffer[posicion] = 0x00; 
2A5C:  CLRF   03
2A5E:  MOVF   x13,W
2A60:  ADDLW  14
2A62:  MOVWF  FE9
2A64:  MOVLW  03
2A66:  ADDWFC 03,W
2A68:  MOVWF  FEA
2A6A:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
2A6C:  CLRF   03
2A6E:  MOVF   x13,W
2A70:  ADDLW  24
2A72:  MOVWF  FE9
2A74:  MOVLW  03
2A76:  ADDWFC 03,W
2A78:  MOVWF  FEA
2A7A:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
2A7C:  CLRF   03
2A7E:  MOVF   x13,W
2A80:  ADDLW  35
2A82:  MOVWF  FE9
2A84:  MOVLW  03
2A86:  ADDWFC 03,W
2A88:  MOVWF  FEA
2A8A:  CLRF   FEF
....................    } 
2A8C:  INCF   x13,F
2A8E:  BRA    2A56
....................    Temperatura=Leer_Sensor(MediaMovil); 
2A90:  MOVFF  295,347
2A94:  MOVLB  0
2A96:  CALL   1502
2A9A:  MOVFF  03,2F5
2A9E:  MOVFF  02,2F4
2AA2:  MOVFF  01,2F3
2AA6:  MOVFF  00,2F2
....................    PresionCamara=Leer_Sensor_Presion_Camara(5); 
2AAA:  MOVLW  05
2AAC:  MOVLB  3
2AAE:  MOVWF  x47
2AB0:  MOVLB  0
2AB2:  CALL   193E
2AB6:  MOVFF  03,2FD
2ABA:  MOVFF  02,2FC
2ABE:  MOVFF  01,2FB
2AC2:  MOVFF  00,2FA
....................    PresionPreCamara=Leer_Sensor_Presion_PreCamara(5); 
2AC6:  MOVLW  05
2AC8:  MOVLB  3
2ACA:  MOVWF  x47
2ACC:  MOVLB  0
2ACE:  CALL   1B36
2AD2:  MOVFF  03,301
2AD6:  MOVFF  02,300
2ADA:  MOVFF  01,2FF
2ADE:  MOVFF  00,2FE
....................    Puerta=!DOOR; 
2AE2:  BSF    F95.4
2AE4:  MOVLB  2
2AE6:  CLRF   x6E
2AE8:  BTFSC  F83.4
2AEA:  INCF   x6E,F
....................    Parada=!STOP; 
2AEC:  BSF    F95.5
2AEE:  CLRF   x6F
2AF0:  BTFSC  F83.5
2AF2:  INCF   x6F,F
....................    NivelReservorio=LOW; 
2AF4:  BSF    F95.0
2AF6:  CLRF   x70
2AF8:  BTFSC  F83.0
2AFA:  INCF   x70,F
....................    NivelTanque=HIGH; 
2AFC:  BSF    F95.2
2AFE:  CLRF   x71
2B00:  BTFSC  F83.2
2B02:  INCF   x71,F
....................    Presostato=(int8)PresionCamara; 
2B04:  MOVFF  2FD,34A
2B08:  MOVFF  2FC,349
2B0C:  MOVFF  2FB,348
2B10:  MOVFF  2FA,347
2B14:  MOVLB  0
2B16:  CALL   1D2E
2B1A:  MOVFF  01,272
....................    Lee_Vector(); 
2B1E:  CALL   1D6A
....................    Carga_Vector(); 
2B22:  CALL   1DC0
....................    enable_interrupts(INT_SSP); 
2B26:  BSF    F9D.3
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
2B28:  MOVLW  C8
2B2A:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
2B2C:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2B2E:  MOVLW  85
2B30:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2B32:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
2B34:  MOVF   FC1,W
2B36:  ANDLW  C0
2B38:  IORLW  0D
2B3A:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2B3C:  BCF    FC0.0
2B3E:  BSF    FC0.1
2B40:  BCF    FC0.2
2B42:  BSF    FC0.7
2B44:  BSF    FC2.0
....................    enable_interrupts(global); 
2B46:  MOVLW  C0
2B48:  IORWF  FF2,F
....................    
....................    sensores(0); 
2B4A:  MOVLB  3
2B4C:  CLRF   x48
2B4E:  MOVLB  0
2B50:  CALL   0F76
....................    Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12); 
2B54:  MOVFF  FF2,347
2B58:  BCF    FF2.7
2B5A:  MOVLW  0A
2B5C:  MOVWF  FA9
2B5E:  BCF    FA6.6
2B60:  BCF    FA6.7
2B62:  BSF    FA6.0
2B64:  MOVF   FA8,W
2B66:  MOVLB  3
2B68:  BTFSC  x47.7
2B6A:  BSF    FF2.7
2B6C:  CLRF   x4E
2B6E:  MOVWF  x4D
2B70:  MOVLB  0
2B72:  CALL   0F40
2B76:  MOVFF  03,2BD
2B7A:  MOVFF  02,2BC
2B7E:  MOVFF  01,2BB
2B82:  MOVFF  00,2BA
2B86:  MOVFF  FF2,347
2B8A:  BCF    FF2.7
2B8C:  MOVLW  0B
2B8E:  MOVWF  FA9
2B90:  BCF    FA6.6
2B92:  BCF    FA6.7
2B94:  BSF    FA6.0
2B96:  MOVF   FA8,W
2B98:  MOVLB  3
2B9A:  BTFSC  x47.7
2B9C:  BSF    FF2.7
2B9E:  CLRF   x4E
2BA0:  MOVWF  x4D
2BA2:  MOVLB  0
2BA4:  CALL   0F40
2BA8:  MOVFF  03,2C5
2BAC:  MOVFF  02,2C4
2BB0:  MOVFF  01,2C3
2BB4:  MOVFF  00,2C2
2BB8:  MOVFF  FF2,347
2BBC:  BCF    FF2.7
2BBE:  MOVLW  0C
2BC0:  MOVWF  FA9
2BC2:  BCF    FA6.6
2BC4:  BCF    FA6.7
2BC6:  BSF    FA6.0
2BC8:  MOVF   FA8,W
2BCA:  MOVLB  3
2BCC:  BTFSC  x47.7
2BCE:  BSF    FF2.7
2BD0:  CLRF   x4E
2BD2:  MOVWF  x4D
2BD4:  MOVLB  0
2BD6:  CALL   0F40
2BDA:  MOVFF  03,2A5
2BDE:  MOVFF  02,2A4
2BE2:  MOVFF  01,2A3
2BE6:  MOVFF  00,2A2
....................    Ajuste=read_eeprom(13);Ajusten=read_eeprom(14);Ganancia2=read_eeprom(15); 
2BEA:  MOVFF  FF2,347
2BEE:  BCF    FF2.7
2BF0:  MOVLW  0D
2BF2:  MOVWF  FA9
2BF4:  BCF    FA6.6
2BF6:  BCF    FA6.7
2BF8:  BSF    FA6.0
2BFA:  MOVF   FA8,W
2BFC:  MOVLB  3
2BFE:  BTFSC  x47.7
2C00:  BSF    FF2.7
2C02:  MOVLB  2
2C04:  MOVWF  x91
2C06:  MOVFF  FF2,347
2C0A:  BCF    FF2.7
2C0C:  MOVLW  0E
2C0E:  MOVWF  FA9
2C10:  BCF    FA6.6
2C12:  BCF    FA6.7
2C14:  BSF    FA6.0
2C16:  MOVF   FA8,W
2C18:  MOVLB  3
2C1A:  BTFSC  x47.7
2C1C:  BSF    FF2.7
2C1E:  MOVLB  2
2C20:  MOVWF  x92
2C22:  MOVFF  FF2,347
2C26:  BCF    FF2.7
2C28:  MOVLW  0F
2C2A:  MOVWF  FA9
2C2C:  BCF    FA6.6
2C2E:  BCF    FA6.7
2C30:  BSF    FA6.0
2C32:  MOVF   FA8,W
2C34:  MOVLB  3
2C36:  BTFSC  x47.7
2C38:  BSF    FF2.7
2C3A:  CLRF   x4E
2C3C:  MOVWF  x4D
2C3E:  MOVLB  0
2C40:  CALL   0F40
2C44:  MOVFF  03,2C1
2C48:  MOVFF  02,2C0
2C4C:  MOVFF  01,2BF
2C50:  MOVFF  00,2BE
....................    MediaMovil=read_eeprom(20); 
2C54:  MOVFF  FF2,347
2C58:  BCF    FF2.7
2C5A:  MOVLW  14
2C5C:  MOVWF  FA9
2C5E:  BCF    FA6.6
2C60:  BCF    FA6.7
2C62:  BSF    FA6.0
2C64:  MOVF   FA8,W
2C66:  MOVLB  3
2C68:  BTFSC  x47.7
2C6A:  BSF    FF2.7
2C6C:  MOVLB  2
2C6E:  MOVWF  x95
....................    EV_Agua_off;EV_Paso_off;EV_Desfogue_off;Resistencia_off; 
2C70:  BCF    F8A.4
2C72:  BCF    F93.4
2C74:  BCF    F8A.3
2C76:  BCF    F93.3
2C78:  BCF    F8A.2
2C7A:  BCF    F93.2
2C7C:  BCF    F8B.0
2C7E:  BCF    F94.0
....................    usb_init(); 
2C80:  MOVLB  0
2C82:  GOTO   1EAC
....................    usb_task(); 
2C86:  CALL   1E8A
....................    Puerta=0;Parada=0;NivelReservorio=0;NivelTanque=0;Presostato=0;ADC_Pt100=0; 
2C8A:  MOVLB  2
2C8C:  CLRF   x6E
2C8E:  CLRF   x6F
2C90:  CLRF   x70
2C92:  CLRF   x71
2C94:  CLRF   x72
2C96:  CLRF   x73
....................    tiempo_esterilizacion=0; 
2C98:  CLRF   x93
....................    for(z=0;z<80;z++) 
2C9A:  CLRF   x5C
2C9C:  MOVF   x5C,W
2C9E:  SUBLW  4F
2CA0:  BNC   2CC2
....................    { 
....................       Temperatura=Leer_Sensor(MediaMovil); 
2CA2:  MOVFF  295,347
2CA6:  MOVLB  0
2CA8:  CALL   1502
2CAC:  MOVFF  03,2F5
2CB0:  MOVFF  02,2F4
2CB4:  MOVFF  01,2F3
2CB8:  MOVFF  00,2F2
....................    } 
2CBC:  MOVLB  2
2CBE:  INCF   x5C,F
2CC0:  BRA    2C9C
....................    EV_Agua_off; 
2CC2:  BCF    F8A.4
2CC4:  BCF    F93.4
....................  
.................... while(true) 
.................... { 
....................    if(STOP || Visua==1) 
2CC6:  BSF    F95.5
2CC8:  BTFSS  F83.5
2CCA:  BRA    2CD0
2CCC:  BTFSS  x8E.2
2CCE:  BRA    2CFE
....................    { 
....................       emergency=1; 
2CD0:  BSF    x56.0
....................       EV_Desfogue_on; 
2CD2:  BSF    F8A.2
2CD4:  BCF    F93.2
....................       EV_Agua_off; 
2CD6:  BCF    F8A.4
2CD8:  BCF    F93.4
....................       Resistencia_off; 
2CDA:  BCF    F8B.0
2CDC:  BCF    F94.0
....................       Bomba_off; 
2CDE:  BCF    F8B.1
2CE0:  BCF    F94.1
....................       EVDesfogue=0; 
2CE2:  CLRF   x64
....................       disable_interrupts(INT_TIMER0); 
2CE4:  BCF    FF2.5
....................       EV_Bomba_off; 
2CE6:  BCF    F8A.6
2CE8:  BCF    F93.6
....................       EV_AireBomba_off; 
2CEA:  BCF    F8A.7
2CEC:  BCF    F93.7
....................       EV_Aire_off; 
2CEE:  BCF    F8A.5
2CF0:  BCF    F93.5
....................       EV_Paso_off; 
2CF2:  BCF    F8A.3
2CF4:  BCF    F93.3
....................       EV_Agua_off; 
2CF6:  BCF    F8A.4
2CF8:  BCF    F93.4
....................       Resistencia_off; 
2CFA:  BCF    F8B.0
2CFC:  BCF    F94.0
....................    }  
....................     
....................       if(!LOW && !STOP) 
2CFE:  BSF    F95.0
2D00:  BTFSC  F83.0
2D02:  BRA    2D1E
2D04:  BSF    F95.5
2D06:  BTFSS  F83.5
2D08:  BRA    2D1E
....................       { 
....................          flag_reservorio=0;    
2D0A:  BCF    x56.5
....................          treservorio=0; 
2D0C:  CLRF   x87
2D0E:  CLRF   x86
....................          EV_Agua_on; 
2D10:  BSF    F8A.4
2D12:  BCF    F93.4
....................          EV_Paso_on; 
2D14:  BSF    F8A.3
2D16:  BCF    F93.3
....................          Resistencia_off;  
2D18:  BCF    F8B.0
2D1A:  BCF    F94.0
....................          //flag_agua=0; 
....................       } 
....................       else 
2D1C:  BRA    2D52
....................       {       
....................          if(HIGH && !STOP) 
2D1E:  BSF    F95.2
2D20:  BTFSS  F83.2
2D22:  BRA    2D44
2D24:  BSF    F95.5
2D26:  BTFSS  F83.5
2D28:  BRA    2D44
....................          { 
....................             if(treservorio>=100) 
2D2A:  MOVF   x87,F
2D2C:  BNZ   2D34
2D2E:  MOVF   x86,W
2D30:  SUBLW  63
2D32:  BC    2D40
....................             { 
....................                EV_Agua_off;                
2D34:  BCF    F8A.4
2D36:  BCF    F93.4
....................                flag_reservorio=0; 
2D38:  BCF    x56.5
....................                flag_agua=1; 
2D3A:  BSF    x56.1
....................                flag_agua2=1; 
2D3C:  BSF    x56.2
....................             } 
....................             else 
2D3E:  BRA    2D42
....................             { 
....................                flag_reservorio=1;            
2D40:  BSF    x56.5
....................             } 
....................          } 
....................          else 
2D42:  BRA    2D52
....................          { 
....................             treservorio=0; 
2D44:  CLRF   x87
2D46:  CLRF   x86
....................             flag_reservorio=0; 
2D48:  BCF    x56.5
....................             if(EVAgua==0) 
2D4A:  MOVF   x65,F
2D4C:  BNZ   2D52
....................             { 
....................                EV_Agua_on; 
2D4E:  BSF    F8A.4
2D50:  BCF    F93.4
....................             } 
....................          } 
....................       } 
....................     
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
2D52:  MOVLB  0
2D54:  GOTO   1EBA
2D58:  MOVF   01,F
2D5A:  BTFSC  FD8.2
2D5C:  BRA    34AE
.................... { 
....................    if(usb_kbhit(1)) 
2D5E:  MOVLW  01
2D60:  MOVLB  3
2D62:  MOVWF  x47
2D64:  MOVLB  0
2D66:  GOTO   1EC2
2D6A:  MOVF   01,F
2D6C:  BTFSC  FD8.2
2D6E:  BRA    2FC2
....................    { 
....................       usb_get_packet(1, rxubuf, Lenbuf); 
2D70:  MOVLW  01
2D72:  MOVLB  3
2D74:  MOVWF  x47
2D76:  CLRF   x49
2D78:  MOVLW  42
2D7A:  MOVWF  x48
2D7C:  CLRF   x4B
2D7E:  MOVLW  20
2D80:  MOVWF  x4A
2D82:  MOVLB  0
2D84:  GOTO   1FC8
....................       if(rxubuf[0]==1) 
2D88:  DECFSZ 42,W
2D8A:  BRA    2E10
....................       { 
....................          Ganancia=rxubuf[1];desvio=rxubuf[2];Tciclo=rxubuf[3];MediaMovil=rxubuf[5];Ganancia2=rxubuf[6];Ajuste=rxubuf[7]; 
2D8C:  MOVLB  3
2D8E:  CLRF   x4E
2D90:  MOVFF  43,34D
2D94:  MOVLB  0
2D96:  CALL   0F40
2D9A:  MOVFF  03,2BD
2D9E:  MOVFF  02,2BC
2DA2:  MOVFF  01,2BB
2DA6:  MOVFF  00,2BA
2DAA:  MOVLB  3
2DAC:  CLRF   x4E
2DAE:  MOVFF  44,34D
2DB2:  MOVLB  0
2DB4:  CALL   0F40
2DB8:  MOVFF  03,2C5
2DBC:  MOVFF  02,2C4
2DC0:  MOVFF  01,2C3
2DC4:  MOVFF  00,2C2
2DC8:  MOVLB  3
2DCA:  CLRF   x4E
2DCC:  MOVFF  45,34D
2DD0:  MOVLB  0
2DD2:  CALL   0F40
2DD6:  MOVFF  03,2A5
2DDA:  MOVFF  02,2A4
2DDE:  MOVFF  01,2A3
2DE2:  MOVFF  00,2A2
2DE6:  MOVFF  47,295
2DEA:  MOVLB  3
2DEC:  CLRF   x4E
2DEE:  MOVFF  48,34D
2DF2:  MOVLB  0
2DF4:  CALL   0F40
2DF8:  MOVFF  03,2C1
2DFC:  MOVFF  02,2C0
2E00:  MOVFF  01,2BF
2E04:  MOVFF  00,2BE
2E08:  MOVFF  49,291
....................          Ajusten=rxubuf[10];//R2=rxubuf[11]; 
2E0C:  MOVFF  4C,292
....................       } // Falta escribir en la eeprom 
....................       if(rxubuf[12]==1)    
2E10:  DECFSZ 4E,W
2E12:  BRA    2F9C
....................       { 
....................          write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,MediaMovil); 
2E14:  MOVFF  2BD,34A
2E18:  MOVFF  2BC,349
2E1C:  MOVFF  2BB,348
2E20:  MOVFF  2BA,347
2E24:  CALL   1D2E
2E28:  MOVFF  01,347
2E2C:  MOVLW  0A
2E2E:  MOVWF  FA9
2E30:  MOVFF  347,FA8
2E34:  BCF    FA6.6
2E36:  BCF    FA6.7
2E38:  BSF    FA6.2
2E3A:  MOVF   FF2,W
2E3C:  MOVWF  00
2E3E:  BCF    FF2.7
2E40:  MOVLB  F
2E42:  MOVLW  55
2E44:  MOVWF  FA7
2E46:  MOVLW  AA
2E48:  MOVWF  FA7
2E4A:  BSF    FA6.1
2E4C:  BTFSC  FA6.1
2E4E:  BRA    2E4C
2E50:  BCF    FA6.2
2E52:  MOVF   00,W
2E54:  IORWF  FF2,F
2E56:  MOVFF  2C5,34A
2E5A:  MOVFF  2C4,349
2E5E:  MOVFF  2C3,348
2E62:  MOVFF  2C2,347
2E66:  MOVLB  0
2E68:  CALL   1D2E
2E6C:  MOVFF  01,347
2E70:  MOVLW  0B
2E72:  MOVWF  FA9
2E74:  MOVFF  347,FA8
2E78:  BCF    FA6.6
2E7A:  BCF    FA6.7
2E7C:  BSF    FA6.2
2E7E:  MOVF   FF2,W
2E80:  MOVWF  00
2E82:  BCF    FF2.7
2E84:  MOVLB  F
2E86:  MOVLW  55
2E88:  MOVWF  FA7
2E8A:  MOVLW  AA
2E8C:  MOVWF  FA7
2E8E:  BSF    FA6.1
2E90:  BTFSC  FA6.1
2E92:  BRA    2E90
2E94:  BCF    FA6.2
2E96:  MOVF   00,W
2E98:  IORWF  FF2,F
2E9A:  MOVFF  2A5,34A
2E9E:  MOVFF  2A4,349
2EA2:  MOVFF  2A3,348
2EA6:  MOVFF  2A2,347
2EAA:  MOVLB  0
2EAC:  CALL   1D2E
2EB0:  MOVFF  01,347
2EB4:  MOVLW  0C
2EB6:  MOVWF  FA9
2EB8:  MOVFF  347,FA8
2EBC:  BCF    FA6.6
2EBE:  BCF    FA6.7
2EC0:  BSF    FA6.2
2EC2:  MOVF   FF2,W
2EC4:  MOVWF  00
2EC6:  BCF    FF2.7
2EC8:  MOVLB  F
2ECA:  MOVLW  55
2ECC:  MOVWF  FA7
2ECE:  MOVLW  AA
2ED0:  MOVWF  FA7
2ED2:  BSF    FA6.1
2ED4:  BTFSC  FA6.1
2ED6:  BRA    2ED4
2ED8:  BCF    FA6.2
2EDA:  MOVF   00,W
2EDC:  IORWF  FF2,F
2EDE:  MOVLW  14
2EE0:  MOVWF  FA9
2EE2:  MOVFF  295,FA8
2EE6:  BCF    FA6.6
2EE8:  BCF    FA6.7
2EEA:  BSF    FA6.2
2EEC:  MOVF   FF2,W
2EEE:  MOVWF  00
2EF0:  BCF    FF2.7
2EF2:  MOVLW  55
2EF4:  MOVWF  FA7
2EF6:  MOVLW  AA
2EF8:  MOVWF  FA7
2EFA:  BSF    FA6.1
2EFC:  BTFSC  FA6.1
2EFE:  BRA    2EFC
2F00:  BCF    FA6.2
2F02:  MOVF   00,W
2F04:  IORWF  FF2,F
....................          write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);write_eeprom(15,(int8)Ganancia2); 
2F06:  MOVLW  0D
2F08:  MOVWF  FA9
2F0A:  MOVFF  291,FA8
2F0E:  BCF    FA6.6
2F10:  BCF    FA6.7
2F12:  BSF    FA6.2
2F14:  MOVF   FF2,W
2F16:  MOVWF  00
2F18:  BCF    FF2.7
2F1A:  MOVLW  55
2F1C:  MOVWF  FA7
2F1E:  MOVLW  AA
2F20:  MOVWF  FA7
2F22:  BSF    FA6.1
2F24:  BTFSC  FA6.1
2F26:  BRA    2F24
2F28:  BCF    FA6.2
2F2A:  MOVF   00,W
2F2C:  IORWF  FF2,F
2F2E:  MOVLW  0E
2F30:  MOVWF  FA9
2F32:  MOVFF  292,FA8
2F36:  BCF    FA6.6
2F38:  BCF    FA6.7
2F3A:  BSF    FA6.2
2F3C:  MOVF   FF2,W
2F3E:  MOVWF  00
2F40:  BCF    FF2.7
2F42:  MOVLW  55
2F44:  MOVWF  FA7
2F46:  MOVLW  AA
2F48:  MOVWF  FA7
2F4A:  BSF    FA6.1
2F4C:  BTFSC  FA6.1
2F4E:  BRA    2F4C
2F50:  BCF    FA6.2
2F52:  MOVF   00,W
2F54:  IORWF  FF2,F
2F56:  MOVFF  2C1,34A
2F5A:  MOVFF  2C0,349
2F5E:  MOVFF  2BF,348
2F62:  MOVFF  2BE,347
2F66:  MOVLB  0
2F68:  CALL   1D2E
2F6C:  MOVFF  01,347
2F70:  MOVLW  0F
2F72:  MOVWF  FA9
2F74:  MOVFF  347,FA8
2F78:  BCF    FA6.6
2F7A:  BCF    FA6.7
2F7C:  BSF    FA6.2
2F7E:  MOVF   FF2,W
2F80:  MOVWF  00
2F82:  BCF    FF2.7
2F84:  MOVLB  F
2F86:  MOVLW  55
2F88:  MOVWF  FA7
2F8A:  MOVLW  AA
2F8C:  MOVWF  FA7
2F8E:  BSF    FA6.1
2F90:  BTFSC  FA6.1
2F92:  BRA    2F90
2F94:  BCF    FA6.2
2F96:  MOVF   00,W
2F98:  IORWF  FF2,F
2F9A:  MOVLB  0
....................       }   
....................        
....................       if(rxubuf[13]==1) 
2F9C:  DECFSZ 4F,W
2F9E:  BRA    2FA8
....................       { 
....................          Visua=1; 
2FA0:  MOVLB  2
2FA2:  BSF    x8E.2
....................       } 
....................       else 
2FA4:  BRA    2FAC
2FA6:  MOVLB  0
....................       { 
....................          Visua=0; 
2FA8:  MOVLB  2
2FAA:  BCF    x8E.2
....................       } 
....................        
....................       if(rxubuf[8]==1)// Camara OUT 
2FAC:  DECFSZ 4A,W
2FAE:  BRA    2FB4
....................       { 
....................          CamaraOUT=1; 
2FB0:  BSF    x56.3
....................       } 
....................       else 
2FB2:  BRA    2FB6
....................       { 
....................          CamaraOUT=0; 
2FB4:  BCF    x56.3
....................       } 
....................        
....................       if(rxubuf[9]==1)// Camara IN 
2FB6:  DECFSZ 4B,W
2FB8:  BRA    2FBE
....................       { 
....................          CamaraIN=1; 
2FBA:  BSF    x56.4
....................       } 
....................       else 
2FBC:  BRA    2FC0
....................       { 
....................          CamaraIN=0; 
2FBE:  BCF    x56.4
2FC0:  MOVLB  0
....................       } 
....................     } 
....................      
....................     TempUSB=Temperatura; 
2FC2:  MOVFF  2F5,2F9
2FC6:  MOVFF  2F4,2F8
2FCA:  MOVFF  2F3,2F7
2FCE:  MOVFF  2F2,2F6
....................     recbuf[0]=(int8)(TempUSB); 
2FD2:  MOVFF  2F9,34A
2FD6:  MOVFF  2F8,349
2FDA:  MOVFF  2F7,348
2FDE:  MOVFF  2F6,347
2FE2:  CALL   1D2E
2FE6:  MOVFF  01,22
....................     recbuf[1]=120; 
2FEA:  MOVLW  78
2FEC:  MOVWF  23
....................     d3=TempUSB-(int8)TempUSB; 
2FEE:  MOVFF  2F9,34A
2FF2:  MOVFF  2F8,349
2FF6:  MOVFF  2F7,348
2FFA:  MOVFF  2F6,347
2FFE:  CALL   1D2E
3002:  MOVLB  3
3004:  CLRF   x4E
3006:  MOVFF  01,34D
300A:  MOVLB  0
300C:  CALL   0F40
3010:  BSF    FD8.1
3012:  MOVFF  2F9,34F
3016:  MOVFF  2F8,34E
301A:  MOVFF  2F7,34D
301E:  MOVFF  2F6,34C
3022:  MOVFF  03,353
3026:  MOVFF  02,352
302A:  MOVFF  01,351
302E:  MOVFF  00,350
3032:  CALL   1128
3036:  MOVFF  03,2C9
303A:  MOVFF  02,2C8
303E:  MOVFF  01,2C7
3042:  MOVFF  00,2C6
....................     d3=d3*10.0; 
3046:  MOVFF  2C9,34F
304A:  MOVFF  2C8,34E
304E:  MOVFF  2C7,34D
3052:  MOVFF  2C6,34C
3056:  MOVLB  3
3058:  CLRF   x53
305A:  CLRF   x52
305C:  MOVLW  20
305E:  MOVWF  x51
3060:  MOVLW  82
3062:  MOVWF  x50
3064:  MOVLB  0
3066:  CALL   140C
306A:  MOVFF  03,2C9
306E:  MOVFF  02,2C8
3072:  MOVFF  01,2C7
3076:  MOVFF  00,2C6
....................     recbuf[2]=(int8)d3; 
307A:  MOVFF  2C9,34A
307E:  MOVFF  2C8,349
3082:  MOVFF  2C7,348
3086:  MOVFF  2C6,347
308A:  CALL   1D2E
308E:  MOVFF  01,24
....................     recbuf[3]=(int8)Pt; 
3092:  MOVFF  2A1,34A
3096:  MOVFF  2A0,349
309A:  MOVFF  29F,348
309E:  MOVFF  29E,347
30A2:  CALL   1D2E
30A6:  MOVFF  01,25
....................     recbuf[4]=(int8)Setpoint; 
30AA:  MOVFF  2F1,34A
30AE:  MOVFF  2F0,349
30B2:  MOVFF  2EF,348
30B6:  MOVFF  2EE,347
30BA:  CALL   1D2E
30BE:  MOVFF  01,26
....................     recbuf[5]=(int8)PresionCamara; 
30C2:  MOVFF  2FD,34A
30C6:  MOVFF  2FC,349
30CA:  MOVFF  2FB,348
30CE:  MOVFF  2FA,347
30D2:  CALL   1D2E
30D6:  MOVFF  01,27
....................     d4=Pt-(int8)Pt; 
30DA:  MOVFF  2A1,34A
30DE:  MOVFF  2A0,349
30E2:  MOVFF  29F,348
30E6:  MOVFF  29E,347
30EA:  CALL   1D2E
30EE:  MOVLB  3
30F0:  CLRF   x4E
30F2:  MOVFF  01,34D
30F6:  MOVLB  0
30F8:  CALL   0F40
30FC:  BSF    FD8.1
30FE:  MOVFF  2A1,34F
3102:  MOVFF  2A0,34E
3106:  MOVFF  29F,34D
310A:  MOVFF  29E,34C
310E:  MOVFF  03,353
3112:  MOVFF  02,352
3116:  MOVFF  01,351
311A:  MOVFF  00,350
311E:  CALL   1128
3122:  MOVFF  03,2CD
3126:  MOVFF  02,2CC
312A:  MOVFF  01,2CB
312E:  MOVFF  00,2CA
....................     d4=d4*10.0; 
3132:  MOVFF  2CD,34F
3136:  MOVFF  2CC,34E
313A:  MOVFF  2CB,34D
313E:  MOVFF  2CA,34C
3142:  MOVLB  3
3144:  CLRF   x53
3146:  CLRF   x52
3148:  MOVLW  20
314A:  MOVWF  x51
314C:  MOVLW  82
314E:  MOVWF  x50
3150:  MOVLB  0
3152:  CALL   140C
3156:  MOVFF  03,2CD
315A:  MOVFF  02,2CC
315E:  MOVFF  01,2CB
3162:  MOVFF  00,2CA
....................     recbuf[6]=(int8)d4; 
3166:  MOVFF  2CD,34A
316A:  MOVFF  2CC,349
316E:  MOVFF  2CB,348
3172:  MOVFF  2CA,347
3176:  CALL   1D2E
317A:  MOVFF  01,28
....................     recbuf[7]=(int8)NivelTanque; 
317E:  MOVFF  271,29
....................     recbuf[8]=(int8)NivelReservorio; 
3182:  MOVFF  270,2A
....................     recbuf[9]=(int8)Tpulso; 
3186:  MOVFF  2A9,34A
318A:  MOVFF  2A8,349
318E:  MOVFF  2A7,348
3192:  MOVFF  2A6,347
3196:  CALL   1D2E
319A:  MOVFF  01,2B
....................     d5=Tpulso-(int8)Tpulso; 
319E:  MOVFF  2A9,34A
31A2:  MOVFF  2A8,349
31A6:  MOVFF  2A7,348
31AA:  MOVFF  2A6,347
31AE:  CALL   1D2E
31B2:  MOVLB  3
31B4:  CLRF   x4E
31B6:  MOVFF  01,34D
31BA:  MOVLB  0
31BC:  CALL   0F40
31C0:  BSF    FD8.1
31C2:  MOVFF  2A9,34F
31C6:  MOVFF  2A8,34E
31CA:  MOVFF  2A7,34D
31CE:  MOVFF  2A6,34C
31D2:  MOVFF  03,353
31D6:  MOVFF  02,352
31DA:  MOVFF  01,351
31DE:  MOVFF  00,350
31E2:  CALL   1128
31E6:  MOVFF  03,2D1
31EA:  MOVFF  02,2D0
31EE:  MOVFF  01,2CF
31F2:  MOVFF  00,2CE
....................     d5=d5*10.0; 
31F6:  MOVFF  2D1,34F
31FA:  MOVFF  2D0,34E
31FE:  MOVFF  2CF,34D
3202:  MOVFF  2CE,34C
3206:  MOVLB  3
3208:  CLRF   x53
320A:  CLRF   x52
320C:  MOVLW  20
320E:  MOVWF  x51
3210:  MOVLW  82
3212:  MOVWF  x50
3214:  MOVLB  0
3216:  CALL   140C
321A:  MOVFF  03,2D1
321E:  MOVFF  02,2D0
3222:  MOVFF  01,2CF
3226:  MOVFF  00,2CE
....................     recbuf[10]=(int8)d5; 
322A:  MOVFF  2D1,34A
322E:  MOVFF  2D0,349
3232:  MOVFF  2CF,348
3236:  MOVFF  2CE,347
323A:  CALL   1D2E
323E:  MOVFF  01,2C
....................     recbuf[11]=(int8)error; 
3242:  MOVFF  2AD,34A
3246:  MOVFF  2AC,349
324A:  MOVFF  2AB,348
324E:  MOVFF  2AA,347
3252:  CALL   1D2E
3256:  MOVFF  01,2D
....................     d6=error-(int8)error; 
325A:  MOVFF  2AD,34A
325E:  MOVFF  2AC,349
3262:  MOVFF  2AB,348
3266:  MOVFF  2AA,347
326A:  CALL   1D2E
326E:  MOVLB  3
3270:  CLRF   x4E
3272:  MOVFF  01,34D
3276:  MOVLB  0
3278:  CALL   0F40
327C:  BSF    FD8.1
327E:  MOVFF  2AD,34F
3282:  MOVFF  2AC,34E
3286:  MOVFF  2AB,34D
328A:  MOVFF  2AA,34C
328E:  MOVFF  03,353
3292:  MOVFF  02,352
3296:  MOVFF  01,351
329A:  MOVFF  00,350
329E:  CALL   1128
32A2:  MOVFF  03,2DD
32A6:  MOVFF  02,2DC
32AA:  MOVFF  01,2DB
32AE:  MOVFF  00,2DA
....................     d6=d6*10.0; 
32B2:  MOVFF  2DD,34F
32B6:  MOVFF  2DC,34E
32BA:  MOVFF  2DB,34D
32BE:  MOVFF  2DA,34C
32C2:  MOVLB  3
32C4:  CLRF   x53
32C6:  CLRF   x52
32C8:  MOVLW  20
32CA:  MOVWF  x51
32CC:  MOVLW  82
32CE:  MOVWF  x50
32D0:  MOVLB  0
32D2:  CALL   140C
32D6:  MOVFF  03,2DD
32DA:  MOVFF  02,2DC
32DE:  MOVFF  01,2DB
32E2:  MOVFF  00,2DA
....................     recbuf[12]=(int8)d6; 
32E6:  MOVFF  2DD,34A
32EA:  MOVFF  2DC,349
32EE:  MOVFF  2DB,348
32F2:  MOVFF  2DA,347
32F6:  CALL   1D2E
32FA:  MOVFF  01,2E
....................      
....................     recbuf[13]=(int8)Aumento; 
32FE:  MOVFF  251,34A
3302:  MOVFF  250,349
3306:  MOVFF  24F,348
330A:  MOVFF  24E,347
330E:  CALL   1D2E
3312:  MOVFF  01,2F
....................     d7=Aumento-(int8)Aumento; 
3316:  MOVFF  251,34A
331A:  MOVFF  250,349
331E:  MOVFF  24F,348
3322:  MOVFF  24E,347
3326:  CALL   1D2E
332A:  MOVLB  3
332C:  CLRF   x4E
332E:  MOVFF  01,34D
3332:  MOVLB  0
3334:  CALL   0F40
3338:  BSF    FD8.1
333A:  MOVFF  251,34F
333E:  MOVFF  250,34E
3342:  MOVFF  24F,34D
3346:  MOVFF  24E,34C
334A:  MOVFF  03,353
334E:  MOVFF  02,352
3352:  MOVFF  01,351
3356:  MOVFF  00,350
335A:  CALL   1128
335E:  MOVFF  03,2E1
3362:  MOVFF  02,2E0
3366:  MOVFF  01,2DF
336A:  MOVFF  00,2DE
....................     d7=d7*10.0; 
336E:  MOVFF  2E1,34F
3372:  MOVFF  2E0,34E
3376:  MOVFF  2DF,34D
337A:  MOVFF  2DE,34C
337E:  MOVLB  3
3380:  CLRF   x53
3382:  CLRF   x52
3384:  MOVLW  20
3386:  MOVWF  x51
3388:  MOVLW  82
338A:  MOVWF  x50
338C:  MOVLB  0
338E:  CALL   140C
3392:  MOVFF  03,2E1
3396:  MOVFF  02,2E0
339A:  MOVFF  01,2DF
339E:  MOVFF  00,2DE
....................     recbuf[14]=(int8)d7; 
33A2:  MOVFF  2E1,34A
33A6:  MOVFF  2E0,349
33AA:  MOVFF  2DF,348
33AE:  MOVFF  2DE,347
33B2:  CALL   1D2E
33B6:  MOVFF  01,30
....................      
....................     recbuf[15]=(int8)Ganancia; 
33BA:  MOVFF  2BD,34A
33BE:  MOVFF  2BC,349
33C2:  MOVFF  2BB,348
33C6:  MOVFF  2BA,347
33CA:  CALL   1D2E
33CE:  MOVFF  01,31
....................     d8=Ganancia-(int8)Ganancia; 
33D2:  MOVFF  2BD,34A
33D6:  MOVFF  2BC,349
33DA:  MOVFF  2BB,348
33DE:  MOVFF  2BA,347
33E2:  CALL   1D2E
33E6:  MOVLB  3
33E8:  CLRF   x4E
33EA:  MOVFF  01,34D
33EE:  MOVLB  0
33F0:  CALL   0F40
33F4:  BSF    FD8.1
33F6:  MOVFF  2BD,34F
33FA:  MOVFF  2BC,34E
33FE:  MOVFF  2BB,34D
3402:  MOVFF  2BA,34C
3406:  MOVFF  03,353
340A:  MOVFF  02,352
340E:  MOVFF  01,351
3412:  MOVFF  00,350
3416:  CALL   1128
341A:  MOVFF  03,2E5
341E:  MOVFF  02,2E4
3422:  MOVFF  01,2E3
3426:  MOVFF  00,2E2
....................     d8=d8*10.0; 
342A:  MOVFF  2E5,34F
342E:  MOVFF  2E4,34E
3432:  MOVFF  2E3,34D
3436:  MOVFF  2E2,34C
343A:  MOVLB  3
343C:  CLRF   x53
343E:  CLRF   x52
3440:  MOVLW  20
3442:  MOVWF  x51
3444:  MOVLW  82
3446:  MOVWF  x50
3448:  MOVLB  0
344A:  CALL   140C
344E:  MOVFF  03,2E5
3452:  MOVFF  02,2E4
3456:  MOVFF  01,2E3
345A:  MOVFF  00,2E2
....................     recbuf[16]=(int8)d8; 
345E:  MOVFF  2E5,34A
3462:  MOVFF  2E4,349
3466:  MOVFF  2E3,348
346A:  MOVFF  2E2,347
346E:  CALL   1D2E
3472:  MOVFF  01,32
....................     recbuf[17]=(int8)Puerta; 
3476:  MOVFF  26E,33
....................     recbuf[18]=(int8)PresionPreCamara; 
347A:  MOVFF  301,34A
347E:  MOVFF  300,349
3482:  MOVFF  2FF,348
3486:  MOVFF  2FE,347
348A:  CALL   1D2E
348E:  MOVFF  01,34
....................                 
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
3492:  MOVLW  01
3494:  MOVLB  3
3496:  MOVWF  x47
3498:  CLRF   x49
349A:  MOVLW  22
349C:  MOVWF  x48
349E:  CLRF   x4B
34A0:  MOVLW  20
34A2:  MOVWF  x4A
34A4:  MOVLW  02
34A6:  MOVWF  x4C
34A8:  MOVLB  0
34AA:  GOTO   2012
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................     
....................    if(Expulsa==1) 
34AE:  MOVLB  2
34B0:  BTFSS  x8E.1
34B2:  BRA    362A
....................    {    
....................       Temperatura=Leer_Sensor(MediaMovil); 
34B4:  MOVFF  295,347
34B8:  MOVLB  0
34BA:  CALL   1502
34BE:  MOVFF  03,2F5
34C2:  MOVFF  02,2F4
34C6:  MOVFF  01,2F3
34CA:  MOVFF  00,2F2
....................       d3=Temperatura-(int8)Temperatura; 
34CE:  MOVFF  2F5,34A
34D2:  MOVFF  2F4,349
34D6:  MOVFF  2F3,348
34DA:  MOVFF  2F2,347
34DE:  CALL   1D2E
34E2:  MOVLB  3
34E4:  CLRF   x4E
34E6:  MOVFF  01,34D
34EA:  MOVLB  0
34EC:  CALL   0F40
34F0:  BSF    FD8.1
34F2:  MOVFF  2F5,34F
34F6:  MOVFF  2F4,34E
34FA:  MOVFF  2F3,34D
34FE:  MOVFF  2F2,34C
3502:  MOVFF  03,353
3506:  MOVFF  02,352
350A:  MOVFF  01,351
350E:  MOVFF  00,350
3512:  CALL   1128
3516:  MOVFF  03,2C9
351A:  MOVFF  02,2C8
351E:  MOVFF  01,2C7
3522:  MOVFF  00,2C6
....................       d3=d3*10.0; 
3526:  MOVFF  2C9,34F
352A:  MOVFF  2C8,34E
352E:  MOVFF  2C7,34D
3532:  MOVFF  2C6,34C
3536:  MOVLB  3
3538:  CLRF   x53
353A:  CLRF   x52
353C:  MOVLW  20
353E:  MOVWF  x51
3540:  MOVLW  82
3542:  MOVWF  x50
3544:  MOVLB  0
3546:  CALL   140C
354A:  MOVFF  03,2C9
354E:  MOVFF  02,2C8
3552:  MOVFF  01,2C7
3556:  MOVFF  00,2C6
....................       PresionCamara=Leer_Sensor_Presion_Camara(5); 
355A:  MOVLW  05
355C:  MOVLB  3
355E:  MOVWF  x47
3560:  MOVLB  0
3562:  CALL   193E
3566:  MOVFF  03,2FD
356A:  MOVFF  02,2FC
356E:  MOVFF  01,2FB
3572:  MOVFF  00,2FA
....................       PresionCamara16=(int16)Leer_Sensor_Presion_Camara(5); 
3576:  MOVLW  05
3578:  MOVLB  3
357A:  MOVWF  x47
357C:  MOVLB  0
357E:  CALL   193E
3582:  MOVFF  03,34A
3586:  MOVFF  02,349
358A:  MOVFF  01,348
358E:  MOVFF  00,347
3592:  CALL   1D2E
3596:  MOVFF  02,289
359A:  MOVFF  01,288
....................       PresionPreCamara=Leer_Sensor_Presion_PreCamara(5); 
359E:  MOVLW  05
35A0:  MOVLB  3
35A2:  MOVWF  x47
35A4:  MOVLB  0
35A6:  CALL   1B36
35AA:  MOVFF  03,301
35AE:  MOVFF  02,300
35B2:  MOVFF  01,2FF
35B6:  MOVFF  00,2FE
....................       PresionPreCamara16=(int16)Leer_Sensor_Presion_PreCamara(5); 
35BA:  MOVLW  05
35BC:  MOVLB  3
35BE:  MOVWF  x47
35C0:  MOVLB  0
35C2:  CALL   1B36
35C6:  MOVFF  03,34A
35CA:  MOVFF  02,349
35CE:  MOVFF  01,348
35D2:  MOVFF  00,347
35D6:  CALL   1D2E
35DA:  MOVFF  02,28B
35DE:  MOVFF  01,28A
....................       Puerta=!DOOR; 
35E2:  BSF    F95.4
35E4:  MOVLB  2
35E6:  CLRF   x6E
35E8:  BTFSC  F83.4
35EA:  INCF   x6E,F
....................       Parada=!STOP; 
35EC:  BSF    F95.5
35EE:  CLRF   x6F
35F0:  BTFSC  F83.5
35F2:  INCF   x6F,F
....................       NivelReservorio=LOW; 
35F4:  BSF    F95.0
35F6:  CLRF   x70
35F8:  BTFSC  F83.0
35FA:  INCF   x70,F
....................       NivelTanque=HIGH; 
35FC:  BSF    F95.2
35FE:  CLRF   x71
3600:  BTFSC  F83.2
3602:  INCF   x71,F
....................       //Temperatura=Leer_Sensor(10); 
....................       Presostato=(int8)PresionCamara; 
3604:  MOVFF  2FD,34A
3608:  MOVFF  2FC,349
360C:  MOVFF  2FB,348
3610:  MOVFF  2FA,347
3614:  MOVLB  0
3616:  CALL   1D2E
361A:  MOVFF  01,272
....................       Lee_Vector(); 
361E:  CALL   1D6A
....................       Carga_Vector(); 
3622:  CALL   1DC0
....................       Expulsa=0; 
3626:  MOVLB  2
3628:  BCF    x8E.1
....................    }     
....................  
....................    if(tinicio>7200 && tiempo_esterilizacion==0 && !STOP)//tinicio expresado en segundos       
362A:  MOVF   x83,W
362C:  SUBLW  1B
362E:  BC    365E
3630:  XORLW  FF
3632:  BNZ   363A
3634:  MOVF   x82,W
3636:  SUBLW  20
3638:  BC    365E
363A:  MOVF   x93,F
363C:  BNZ   365E
363E:  BSF    F95.5
3640:  BTFSS  F83.5
3642:  BRA    365E
....................    { 
....................          EV_Desfogue_on; 
3644:  BSF    F8A.2
3646:  BCF    F93.2
....................          Alarma=1; 
3648:  MOVLW  01
364A:  MOVWF  x6C
....................          EV_Agua_off; 
364C:  BCF    F8A.4
364E:  BCF    F93.4
....................          EV_Paso_off; 
3650:  BCF    F8A.3
3652:  BCF    F93.3
....................          Resistencia_off; 
3654:  BCF    F8B.0
3656:  BCF    F94.0
....................          Bomba_off; 
3658:  BCF    F8B.1
365A:  BCF    F94.1
....................    } 
....................    else 
365C:  BRA    3918
....................    {       
....................       if(EVDesfogue<1 && tiempo_esterilizacion==1 && (Temperatura<110.0 || Temperatura>145.0) && !STOP) 
365E:  MOVF   x64,F
3660:  BNZ   36D8
3662:  DECFSZ x93,W
3664:  BRA    36D8
3666:  MOVFF  2F5,34B
366A:  MOVFF  2F4,34A
366E:  MOVFF  2F3,349
3672:  MOVFF  2F2,348
3676:  MOVLB  3
3678:  CLRF   x4F
367A:  CLRF   x4E
367C:  MOVLW  5C
367E:  MOVWF  x4D
3680:  MOVLW  85
3682:  MOVWF  x4C
3684:  MOVLB  0
3686:  CALL   18C4
368A:  BC    36B8
368C:  MOVLB  3
368E:  CLRF   x4B
3690:  CLRF   x4A
3692:  MOVLW  11
3694:  MOVWF  x49
3696:  MOVLW  86
3698:  MOVWF  x48
369A:  MOVFF  2F5,34F
369E:  MOVFF  2F4,34E
36A2:  MOVFF  2F3,34D
36A6:  MOVFF  2F2,34C
36AA:  MOVLB  0
36AC:  CALL   18C4
36B0:  BTFSC  FD8.0
36B2:  BRA    36B8
36B4:  MOVLB  2
36B6:  BRA    36D8
36B8:  BSF    F95.5
36BA:  BTFSC  F83.5
36BC:  BRA    36C2
36BE:  MOVLB  2
36C0:  BRA    36D8
....................       { 
....................          Alarma=2; 
36C2:  MOVLW  02
36C4:  MOVLB  2
36C6:  MOVWF  x6C
....................          EV_Agua_off; 
36C8:  BCF    F8A.4
36CA:  BCF    F93.4
....................          EV_Paso_off; 
36CC:  BCF    F8A.3
36CE:  BCF    F93.3
....................          Resistencia_off; 
36D0:  BCF    F8B.0
36D2:  BCF    F94.0
....................          Bomba_off; 
36D4:  BCF    F8B.1
36D6:  BCF    F94.1
....................       } 
....................        
....................       if(tagua>720 && !STOP) // Si se el ingreso de agua al tanque dura mas de 12 minutos se activa la alarma por falta de agua. 
36D8:  MOVF   x85,W
36DA:  SUBLW  01
36DC:  BC    3702
36DE:  XORLW  FF
36E0:  BNZ   36E8
36E2:  MOVF   x84,W
36E4:  SUBLW  D0
36E6:  BC    3702
36E8:  BSF    F95.5
36EA:  BTFSS  F83.5
36EC:  BRA    3702
....................       { 
....................          AlarmaAgua=1;  
36EE:  MOVLW  01
36F0:  MOVWF  x6D
....................          EV_Agua_off; 
36F2:  BCF    F8A.4
36F4:  BCF    F93.4
....................          EV_Paso_off; 
36F6:  BCF    F8A.3
36F8:  BCF    F93.3
....................          Resistencia_off; 
36FA:  BCF    F8B.0
36FC:  BCF    F94.0
....................          Bomba_off; 
36FE:  BCF    F8B.1
3700:  BCF    F94.1
....................       } 
....................        
....................       if(BombaVacio==5 && !STOP) 
3702:  MOVF   x69,W
3704:  SUBLW  05
3706:  BNZ   37B8
3708:  BSF    F95.5
370A:  BTFSS  F83.5
370C:  BRA    37B8
....................       { 
....................          ControlaPresion(); 
370E:  MOVLB  0
3710:  GOTO   20C2
....................           
....................             if(PresionCamara16>(Atmosferica-41) && PulsoPositivo==10) 
3714:  MOVLW  29
3716:  MOVLB  2
3718:  SUBWF  x62,W
371A:  MOVF   x89,F
371C:  BNZ   3724
371E:  SUBWF  x88,W
3720:  BZ    374C
3722:  BNC   374C
3724:  MOVF   x5F,W
3726:  SUBLW  0A
3728:  BNZ   374C
....................             { 
....................                flag_vacio=1; 
372A:  BSF    x56.7
....................                Bomba_on; 
372C:  BSF    F8B.1
372E:  BCF    F94.1
....................                EV_Bomba_on; 
3730:  BSF    F8A.6
3732:  BCF    F93.6
....................                EV_AireBomba_off; 
3734:  BCF    F8A.7
3736:  BCF    F93.7
....................                EV_Aire_off; 
3738:  BCF    F8A.5
373A:  BCF    F93.5
....................                EV_Desfogue_off; 
373C:  BCF    F8A.2
373E:  BCF    F93.2
....................                EV_Paso_off; 
3740:  BCF    F8A.3
3742:  BCF    F93.3
....................                EV_Agua_off; 
3744:  BCF    F8A.4
3746:  BCF    F93.4
....................                flag_pulso=0; 
3748:  CLRF   x61
....................             } 
....................             else 
374A:  BRA    3750
....................             { 
....................                PulsoPositivo=5; 
374C:  MOVLW  05
374E:  MOVWF  x5F
....................             } 
....................              
....................             if(PulsoPositivo==5) 
3750:  MOVF   x5F,W
3752:  SUBLW  05
3754:  BNZ   3790
....................             { 
....................                if(flag_pulso==0) 
3756:  MOVF   x61,F
3758:  BNZ   3760
....................                { 
....................                   PulsosVacio++; 
375A:  INCF   x60,F
....................                   flag_pulso=1; 
375C:  MOVLW  01
375E:  MOVWF  x61
....................                } 
....................                Bomba_on; 
3760:  BSF    F8B.1
3762:  BCF    F94.1
....................                EV_Bomba_off; 
3764:  BCF    F8A.6
3766:  BCF    F93.6
....................                EV_AireBomba_on; 
3768:  BSF    F8A.7
376A:  BCF    F93.7
....................                EV_Aire_off; 
376C:  BCF    F8A.5
376E:  BCF    F93.5
....................                EV_Desfogue_off; 
3770:  BCF    F8A.2
3772:  BCF    F93.2
....................                EV_Paso_on; 
3774:  BSF    F8A.3
3776:  BCF    F93.3
....................                 
....................                EV_Agua_off; 
3778:  BCF    F8A.4
377A:  BCF    F93.4
....................                if(PresionCamara16>=Atmosferica-1) 
377C:  MOVLW  01
377E:  SUBWF  x62,W
3780:  MOVF   x89,F
3782:  BNZ   3788
3784:  SUBWF  x88,W
3786:  BNC   3790
....................                { 
....................                   //if(PulsosVacio<5) 
....................                   //{ 
....................                      EV_Paso_off; 
3788:  BCF    F8A.3
378A:  BCF    F93.3
....................                   //} 
....................                   PulsoPositivo=10; 
378C:  MOVLW  0A
378E:  MOVWF  x5F
....................                }   
....................             } 
....................           
....................          if(tvacio>=1200){             
3790:  MOVF   x8D,W
3792:  SUBLW  03
3794:  BC    37AA
3796:  XORLW  FF
3798:  BNZ   37A0
379A:  MOVF   x8C,W
379C:  SUBLW  AF
379E:  BC    37AA
....................             flag_vacio=0; 
37A0:  BCF    x56.7
....................             flagprevacio=5; 
37A2:  MOVLW  05
37A4:  MOVWF  x76
....................             Bomba_off; 
37A6:  BCF    F8B.1
37A8:  BCF    F94.1
....................          } 
....................           
....................          if(PulsosVacio>=4) 
37AA:  MOVF   x60,W
37AC:  SUBLW  03
37AE:  BC    37B8
....................          { 
....................             flagprevacio=5; 
37B0:  MOVLW  05
37B2:  MOVWF  x76
....................             Bomba_off; 
37B4:  BCF    F8B.1
37B6:  BCF    F94.1
....................          } 
....................       } 
....................        
....................       if(Control==1 && !DOOR && !STOP && AlarmaAgua==0 && Alarma==0) // Si esta en condiciones normales para ejecutar el control. 
37B8:  DECFSZ x6B,W
37BA:  BRA    3806
37BC:  BSF    F95.4
37BE:  BTFSS  F83.4
37C0:  BRA    3806
37C2:  BSF    F95.5
37C4:  BTFSS  F83.5
37C6:  BRA    3806
37C8:  MOVF   x6D,F
37CA:  BNZ   3806
37CC:  MOVF   x6C,F
37CE:  BNZ   3806
....................       { 
....................          Bomba_off; 
37D0:  BCF    F8B.1
37D2:  BCF    F94.1
....................          EV_Bomba_off; 
37D4:  BCF    F8A.6
37D6:  BCF    F93.6
....................          EV_AireBomba_off; 
37D8:  BCF    F8A.7
37DA:  BCF    F93.7
....................          EV_Aire_off; 
37DC:  BCF    F8A.5
37DE:  BCF    F93.5
....................          EV_Desfogue_off; 
37E0:  BCF    F8A.2
37E2:  BCF    F93.2
....................          EV_Paso_on; 
37E4:  BSF    F8A.3
37E6:  BCF    F93.3
....................          EV_Agua_off; 
37E8:  BCF    F8A.4
37EA:  BCF    F93.4
....................          if(!TERM && LOW) 
37EC:  BSF    F95.6
37EE:  BTFSS  F83.6
37F0:  BRA    3802
37F2:  BSF    F95.0
37F4:  BTFSS  F83.0
37F6:  BRA    3802
....................          { 
....................             Controla(); 
37F8:  MOVLB  0
37FA:  GOTO   20E6
....................          } 
....................          else 
37FE:  BRA    3808
3800:  MOVLB  2
....................          { 
....................             Resistencia_off; 
3802:  BCF    F8B.0
3804:  BCF    F94.0
3806:  MOVLB  0
....................          } 
....................           
....................       }/* 
....................       else 
....................       { 
....................          Resistencia_off; 
....................       }*/ 
....................         
....................       if(Temperatura>=(Setpoint-1.0)&&p==3)// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
3808:  BSF    FD8.1
380A:  MOVFF  2F1,34F
380E:  MOVFF  2F0,34E
3812:  MOVFF  2EF,34D
3816:  MOVFF  2EE,34C
381A:  MOVLB  3
381C:  CLRF   x53
381E:  CLRF   x52
3820:  CLRF   x51
3822:  MOVLW  7F
3824:  MOVWF  x50
3826:  MOVLB  0
3828:  CALL   1128
382C:  MOVFF  03,34B
3830:  MOVFF  02,34A
3834:  MOVFF  01,349
3838:  MOVFF  00,348
383C:  MOVFF  2F5,34F
3840:  MOVFF  2F4,34E
3844:  MOVFF  2F3,34D
3848:  MOVFF  2F2,34C
384C:  CALL   18C4
3850:  BC    3854
3852:  BNZ   3868
3854:  MOVLB  2
3856:  MOVF   x94,W
3858:  SUBLW  03
385A:  BTFSC  FD8.2
385C:  BRA    3862
385E:  MOVLB  0
3860:  BRA    3868
....................       { 
....................          tiempo_esterilizacion=1;     
3862:  MOVLW  01
3864:  MOVWF  x93
....................          p=1; 
3866:  MOVWF  x94
....................          //Ganancia=Ganancia2; 
....................       }         
....................        
....................       if(EVDesfogue==1 && !STOP) // Desfogue Rapido 
3868:  MOVLB  2
386A:  DECFSZ x64,W
386C:  BRA    3894
386E:  BSF    F95.5
3870:  BTFSS  F83.5
3872:  BRA    3894
....................       { 
....................          EV_Bomba_off; 
3874:  BCF    F8A.6
3876:  BCF    F93.6
....................          EV_AireBomba_off; 
3878:  BCF    F8A.7
387A:  BCF    F93.7
....................          EV_Aire_off; 
387C:  BCF    F8A.5
387E:  BCF    F93.5
....................          EV_Desfogue_on; 
3880:  BSF    F8A.2
3882:  BCF    F93.2
....................          EV_Paso_off; 
3884:  BCF    F8A.3
3886:  BCF    F93.3
....................          EV_Agua_off; 
3888:  BCF    F8A.4
388A:  BCF    F93.4
....................          Resistencia_off; 
388C:  BCF    F8B.0
388E:  BCF    F94.0
....................          Bomba_off; 
3890:  BCF    F8B.1
3892:  BCF    F94.1
....................       }  
....................        
....................       if(EVDesfogue==3 && !STOP ) // Ciclo de PostVacio 
3894:  MOVF   x64,W
3896:  SUBLW  03
3898:  BNZ   38F0
389A:  BSF    F95.5
389C:  BTFSS  F83.5
389E:  BRA    38F0
....................       { 
....................          if(PresionCamara16>=(Atmosferica-38)) 
38A0:  MOVLW  26
38A2:  SUBWF  x62,W
38A4:  MOVF   x89,F
38A6:  BNZ   38AC
38A8:  SUBWF  x88,W
38AA:  BNC   38C8
....................          { 
....................             Bomba_on; 
38AC:  BSF    F8B.1
38AE:  BCF    F94.1
....................             EV_Bomba_on; 
38B0:  BSF    F8A.6
38B2:  BCF    F93.6
....................             EV_AireBomba_off; 
38B4:  BCF    F8A.7
38B6:  BCF    F93.7
....................             EV_Aire_off; 
38B8:  BCF    F8A.5
38BA:  BCF    F93.5
....................             EV_Desfogue_off; 
38BC:  BCF    F8A.2
38BE:  BCF    F93.2
....................             EV_Paso_off; 
38C0:  BCF    F8A.3
38C2:  BCF    F93.3
....................             Resistencia_off; 
38C4:  BCF    F8B.0
38C6:  BCF    F94.0
....................          } 
....................           
....................          if(PresionCamara16<(Atmosferica-41)) 
38C8:  MOVLW  29
38CA:  SUBWF  x62,W
38CC:  MOVF   x89,F
38CE:  BNZ   38F0
38D0:  SUBWF  x88,W
38D2:  BC    38F0
....................          { 
....................             Bomba_on; 
38D4:  BSF    F8B.1
38D6:  BCF    F94.1
....................             EV_Bomba_off; 
38D8:  BCF    F8A.6
38DA:  BCF    F93.6
....................             EV_AireBomba_on; 
38DC:  BSF    F8A.7
38DE:  BCF    F93.7
....................             EV_Aire_off; 
38E0:  BCF    F8A.5
38E2:  BCF    F93.5
....................             EV_Desfogue_off; 
38E4:  BCF    F8A.2
38E6:  BCF    F93.2
....................             EV_Paso_off;             
38E8:  BCF    F8A.3
38EA:  BCF    F93.3
....................             Resistencia_off; 
38EC:  BCF    F8B.0
38EE:  BCF    F94.0
....................          } 
....................       } 
....................        
....................       if(EVDesfogue==4 && !STOP ) // Fin de Ciclo 
38F0:  MOVF   x64,W
38F2:  SUBLW  04
38F4:  BNZ   3918
38F6:  BSF    F95.5
38F8:  BTFSS  F83.5
38FA:  BRA    3918
....................       { 
....................          Bomba_off; 
38FC:  BCF    F8B.1
38FE:  BCF    F94.1
....................          EV_Bomba_off; 
3900:  BCF    F8A.6
3902:  BCF    F93.6
....................          EV_AireBomba_off; 
3904:  BCF    F8A.7
3906:  BCF    F93.7
....................          EV_Aire_on; 
3908:  BSF    F8A.5
390A:  BCF    F93.5
....................          EV_Desfogue_off; 
390C:  BCF    F8A.2
390E:  BCF    F93.2
....................          EV_Paso_off; 
3910:  BCF    F8A.3
3912:  BCF    F93.3
....................          Resistencia_off; 
3914:  BCF    F8B.0
3916:  BCF    F94.0
....................       } 
....................    }     
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................   
....................    } 
3918:  GOTO   2CC6
.................... } 
391C:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
