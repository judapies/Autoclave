CCS PCH C Compiler, Version 4.104, 5967               18-mar-15 11:08

               Filename: E:\JP\JP\Laboratorio\Autoclave\Autoclave 55L\Autoclave 80L_VersionFinal\Firmware\Autoclave_80L_V02_Cambio_Menu_Libre.lst

               ROM used: 30130 bytes (92%)
                         Largest free fragment is 2638
               RAM used: 844 (41%) at main() level
                         1226 (60%) worst case
               Stack:    14 worst case (5 in main + 9 for interrupts)

*
0000:  GOTO   4292
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   2466
0054:  BTFSS  FA0.5
0056:  GOTO   0060
005A:  BTFSC  FA1.5
005C:  GOTO   23DE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV4,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
2550:  MOVLW  03
2552:  MOVWF  FEA
2554:  MOVLW  B9
2556:  MOVWF  FE9
2558:  MOVF   FEF,W
255A:  BZ    2578
255C:  MOVLW  0F
255E:  MOVWF  01
2560:  CLRF   00
2562:  DECFSZ 00,F
2564:  BRA    2562
2566:  DECFSZ 01,F
2568:  BRA    2560
256A:  MOVLW  8F
256C:  MOVWF  00
256E:  DECFSZ 00,F
2570:  BRA    256E
2572:  NOP   
2574:  DECFSZ FEF,F
2576:  BRA    255C
2578:  RETLW  00
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... //#ifndef FAST_GLCD 
.................... //#define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D3   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D4   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C7   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
2748:  BCF    F94.7
274A:  BSF    F8B.7
....................    output_low(GLCD_E); 
274C:  BCF    F95.7
274E:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
2750:  BCF    F95.3
2752:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
2754:  BCF    F95.4
2756:  BCF    F8C.4
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
2758:  BCF    F95.5
275A:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
275C:  MOVLB  3
275E:  CLRF   xE8
2760:  MOVLW  C0
2762:  MOVWF  xE9
2764:  MOVLB  0
2766:  RCALL  2684
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
2768:  MOVLW  01
276A:  MOVLB  3
276C:  MOVWF  xE8
276E:  MOVLW  C0
2770:  MOVWF  xE9
2772:  MOVLB  0
2774:  RCALL  2684
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
2776:  MOVLB  3
2778:  CLRF   xE8
277A:  MOVLW  40
277C:  MOVWF  xE9
277E:  MOVLB  0
2780:  RCALL  2684
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
2782:  MOVLW  01
2784:  MOVLB  3
2786:  MOVWF  xE8
2788:  MOVLW  40
278A:  MOVWF  xE9
278C:  MOVLB  0
278E:  RCALL  2684
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
2790:  MOVLB  3
2792:  CLRF   xE8
2794:  MOVLW  B8
2796:  MOVWF  xE9
2798:  MOVLB  0
279A:  RCALL  2684
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
279C:  MOVLW  01
279E:  MOVLB  3
27A0:  MOVWF  xE8
27A2:  MOVLW  B8
27A4:  MOVWF  xE9
27A6:  MOVLB  0
27A8:  RCALL  2684
....................  
....................    if(mode == ON) 
27AA:  MOVLB  3
27AC:  DECFSZ xB4,W
27AE:  BRA    27CC
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
27B0:  CLRF   xE8
27B2:  MOVLW  3F
27B4:  MOVWF  xE9
27B6:  MOVLB  0
27B8:  RCALL  2684
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
27BA:  MOVLW  01
27BC:  MOVLB  3
27BE:  MOVWF  xE8
27C0:  MOVLW  3F
27C2:  MOVWF  xE9
27C4:  MOVLB  0
27C6:  RCALL  2684
....................    } 
....................    else 
27C8:  BRA    27E4
27CA:  MOVLB  3
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
27CC:  CLRF   xE8
27CE:  MOVLW  3E
27D0:  MOVWF  xE9
27D2:  MOVLB  0
27D4:  RCALL  2684
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
27D6:  MOVLW  01
27D8:  MOVLB  3
27DA:  MOVWF  xE8
27DC:  MOVLW  3E
27DE:  MOVWF  xE9
27E0:  MOVLB  0
27E2:  RCALL  2684
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
27E4:  MOVLB  3
27E6:  CLRF   xB5
27E8:  MOVLB  0
27EA:  RCALL  26BA
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
....................    #endif 
.................... } 
27EC:  GOTO   4ED0 (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
*
282E:  MOVLB  3
2830:  BCF    xE5.0
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
2832:  MOVF   xE1,W
2834:  SUBLW  3F
2836:  BC    283E
....................    { 
....................       x -= 64; 
2838:  MOVLW  40
283A:  SUBWF  xE1,F
....................       side = GLCD_RIGHT; 
283C:  BSF    xE5.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
283E:  BCF    F95.5
2840:  BCF    F8C.5
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
2842:  BCF    xE1.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
2844:  BSF    xE1.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
2846:  MOVLW  00
2848:  BTFSC  xE5.0
284A:  MOVLW  01
284C:  MOVWF  xE8
284E:  MOVFF  3E1,3E9
2852:  MOVLB  0
2854:  RCALL  2684
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
2856:  MOVLW  00
2858:  MOVLB  3
285A:  BTFSC  xE5.0
285C:  MOVLW  01
285E:  MOVWF  xE6
2860:  RRCF   xE2,W
2862:  MOVWF  00
2864:  RRCF   00,F
2866:  RRCF   00,F
2868:  MOVLW  1F
286A:  ANDWF  00,F
286C:  MOVF   00,W
286E:  ANDLW  BF
2870:  IORLW  B8
2872:  MOVWF  xE7
2874:  MOVFF  3E6,3E8
2878:  MOVWF  xE9
287A:  MOVLB  0
287C:  RCALL  2684
....................    output_high(GLCD_DI);                        // Set for data 
287E:  BCF    F95.5
2880:  BSF    F8C.5
....................    glcd_readByte(side);                         // Need two reads to get data 
2882:  MOVLW  00
2884:  MOVLB  3
2886:  BTFSC  xE5.0
2888:  MOVLW  01
288A:  MOVWF  xE7
288C:  MOVLB  0
288E:  RCALL  27F0
....................    data = glcd_readByte(side);                  //  at new address 
2890:  MOVLW  00
2892:  MOVLB  3
2894:  BTFSC  xE5.0
2896:  MOVLW  01
2898:  MOVWF  xE7
289A:  MOVLB  0
289C:  RCALL  27F0
289E:  MOVFF  01,3E4
....................  
....................    if(color == ON) 
28A2:  MOVLB  3
28A4:  DECFSZ xE3,W
28A6:  BRA    28C6
....................       bit_set(data, y%8);        // Turn the pixel on 
28A8:  MOVF   xE2,W
28AA:  ANDLW  07
28AC:  MOVWF  xE6
28AE:  MOVLW  01
28B0:  MOVWF  00
28B2:  MOVF   xE6,W
28B4:  MOVWF  01
28B6:  BZ    28C0
28B8:  BCF    FD8.0
28BA:  RLCF   00,F
28BC:  DECFSZ 01,F
28BE:  BRA    28B8
28C0:  MOVF   00,W
28C2:  IORWF  xE4,F
....................    else                          // or 
28C4:  BRA    28E4
....................       bit_clear(data, y%8);      // turn the pixel off 
28C6:  MOVF   xE2,W
28C8:  ANDLW  07
28CA:  MOVWF  xE6
28CC:  MOVLW  01
28CE:  MOVWF  00
28D0:  MOVF   xE6,W
28D2:  MOVWF  01
28D4:  BZ    28DE
28D6:  BCF    FD8.0
28D8:  RLCF   00,F
28DA:  DECFSZ 01,F
28DC:  BRA    28D6
28DE:  MOVF   00,W
28E0:  XORLW  FF
28E2:  ANDWF  xE4,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
28E4:  BCF    F95.5
28E6:  BCF    F8C.5
....................    glcd_writeByte(side, x);      // Set the horizontal address 
28E8:  MOVLW  00
28EA:  BTFSC  xE5.0
28EC:  MOVLW  01
28EE:  MOVWF  xE8
28F0:  MOVFF  3E1,3E9
28F4:  MOVLB  0
28F6:  RCALL  2684
....................    output_high(GLCD_DI);         // Set for data 
28F8:  BCF    F95.5
28FA:  BSF    F8C.5
....................    glcd_writeByte(side, data);   // Write the pixel data 
28FC:  MOVLW  00
28FE:  MOVLB  3
2900:  BTFSC  xE5.0
2902:  MOVLW  01
2904:  MOVWF  xE8
2906:  MOVFF  3E4,3E9
290A:  MOVLB  0
290C:  RCALL  2684
.................... } 
290E:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................       *p1++ = data; 
....................       *p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
26BA:  MOVLB  3
26BC:  CLRF   xB6
26BE:  MOVF   xB6,W
26C0:  SUBLW  07
26C2:  BNC   2744
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
26C4:  BCF    F95.5
26C6:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
26C8:  CLRF   xE8
26CA:  MOVLW  40
26CC:  MOVWF  xE9
26CE:  MOVLB  0
26D0:  RCALL  2684
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
26D2:  MOVLW  01
26D4:  MOVLB  3
26D6:  MOVWF  xE8
26D8:  MOVLW  40
26DA:  MOVWF  xE9
26DC:  MOVLB  0
26DE:  RCALL  2684
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
26E0:  MOVLB  3
26E2:  MOVF   xB6,W
26E4:  IORLW  B8
26E6:  MOVWF  xB8
26E8:  CLRF   xE8
26EA:  MOVWF  xE9
26EC:  MOVLB  0
26EE:  RCALL  2684
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
26F0:  MOVLB  3
26F2:  MOVF   xB6,W
26F4:  IORLW  B8
26F6:  MOVWF  xB8
26F8:  MOVLW  01
26FA:  MOVWF  xE8
26FC:  MOVFF  3B8,3E9
2700:  MOVLB  0
2702:  RCALL  2684
....................       output_high(GLCD_DI);                     // Set for data 
2704:  BCF    F95.5
2706:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
2708:  MOVLB  3
270A:  CLRF   xB7
270C:  MOVF   xB7,W
270E:  SUBLW  3F
2710:  BNC   2740
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
2712:  MOVF   xB5,W
2714:  MULLW  FF
2716:  MOVFF  FF3,3B8
271A:  CLRF   xE8
271C:  MOVFF  3B8,3E9
2720:  MOVLB  0
2722:  RCALL  2684
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
2724:  MOVLB  3
2726:  MOVF   xB5,W
2728:  MULLW  FF
272A:  MOVFF  FF3,3B8
272E:  MOVLW  01
2730:  MOVWF  xE8
2732:  MOVFF  3B8,3E9
2736:  MOVLB  0
2738:  RCALL  2684
....................       } 
273A:  MOVLB  3
273C:  INCF   xB7,F
273E:  BRA    270C
....................    } 
2740:  INCF   xB6,F
2742:  BRA    26BE
.................... } 
2744:  MOVLB  0
2746:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
2684:  MOVLB  3
2686:  MOVF   xE8,F
2688:  BZ    2690
....................       output_high(GLCD_CS2); 
268A:  BCF    F95.4
268C:  BSF    F8C.4
....................    else 
268E:  BRA    2694
....................       output_high(GLCD_CS1); 
2690:  BCF    F95.3
2692:  BSF    F8C.3
....................  
....................    output_low(GLCD_RW);       // Set for writing 
2694:  BCF    F95.6
2696:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
2698:  CLRF   F93
269A:  MOVFF  3E9,F8A
....................    delay_cycles(1); 
269E:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
26A0:  BCF    F95.7
26A2:  BSF    F8C.7
....................    delay_cycles(5); 
26A4:  BRA    26A6
26A6:  BRA    26A8
26A8:  NOP   
....................    output_low(GLCD_E); 
26AA:  BCF    F95.7
26AC:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
26AE:  BCF    F95.3
26B0:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
26B2:  BCF    F95.4
26B4:  BCF    F8C.4
.................... } 
26B6:  MOVLB  0
26B8:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
*
27F0:  MOVLW  FF
27F2:  MOVWF  F93
....................    output_high(GLCD_RW);      // Set for reading 
27F4:  BCF    F95.6
27F6:  BSF    F8C.6
....................  
....................    if(side)                   // Choose which side to write to 
27F8:  MOVLB  3
27FA:  MOVF   xE7,F
27FC:  BZ    2804
....................       output_high(GLCD_CS2); 
27FE:  BCF    F95.4
2800:  BSF    F8C.4
....................    else 
2802:  BRA    2808
....................       output_high(GLCD_CS1); 
2804:  BCF    F95.3
2806:  BSF    F8C.3
....................  
....................    delay_cycles(1); 
2808:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
280A:  BCF    F95.7
280C:  BSF    F8C.7
....................    delay_cycles(4); 
280E:  BRA    2810
2810:  BRA    2812
....................    data = input_b();          // Get the data from the display's output register 
2812:  MOVLW  FF
2814:  MOVWF  F93
2816:  MOVFF  F81,3E8
....................    output_low(GLCD_E); 
281A:  BCF    F95.7
281C:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
281E:  BCF    F95.3
2820:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
2822:  BCF    F95.4
2824:  BCF    F8C.4
....................    return data;               // Return the read data 
2826:  MOVFF  3E8,01
.................... } 
282A:  MOVLB  0
282C:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
2C74:  MOVLW  01
2C76:  MOVLB  3
2C78:  MOVWF  xDA
2C7A:  MOVWF  xDB
2C7C:  CLRF   xE0
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
2C7E:  MOVF   xD1,W
2C80:  SUBWF  xD3,W
2C82:  MOVWF  xE1
2C84:  MOVF   xE1,W
2C86:  BTFSS  xE1.7
2C88:  BRA    2C90
2C8A:  MOVLW  00
2C8C:  BSF    FD8.0
2C8E:  SUBFWB xE1,W
2C90:  CLRF   03
2C92:  MOVWF  xD8
2C94:  MOVFF  03,3D9
....................    dy = abs((signed int8)(y2 - y1)); 
2C98:  MOVF   xD2,W
2C9A:  SUBWF  xD4,W
2C9C:  MOVWF  xE1
2C9E:  MOVF   xE1,W
2CA0:  BTFSS  xE1.7
2CA2:  BRA    2CAA
2CA4:  MOVLW  00
2CA6:  BSF    FD8.0
2CA8:  SUBFWB xE1,W
2CAA:  CLRF   03
2CAC:  MOVWF  xD6
2CAE:  MOVFF  03,3D7
....................    #endif 
....................  
....................    if(x1 > x2) 
2CB2:  MOVF   xD1,W
2CB4:  SUBWF  xD3,W
2CB6:  BC    2CBC
....................       addx = -1; 
2CB8:  MOVLW  FF
2CBA:  MOVWF  xDA
....................    if(y1 > y2) 
2CBC:  MOVF   xD2,W
2CBE:  SUBWF  xD4,W
2CC0:  BC    2CC6
....................       addy = -1; 
2CC2:  MOVLW  FF
2CC4:  MOVWF  xDB
....................  
....................    if(dx >= dy) 
2CC6:  MOVF   xD7,W
2CC8:  SUBWF  xD9,W
2CCA:  BNC   2D42
2CCC:  BNZ   2CD4
2CCE:  MOVF   xD6,W
2CD0:  SUBWF  xD8,W
2CD2:  BNC   2D42
....................    { 
....................       dy *= 2; 
2CD4:  BCF    FD8.0
2CD6:  RLCF   xD6,F
2CD8:  RLCF   xD7,F
....................       P = dy - dx; 
2CDA:  MOVF   xD8,W
2CDC:  SUBWF  xD6,W
2CDE:  MOVWF  00
2CE0:  MOVF   xD9,W
2CE2:  SUBWFB xD7,W
2CE4:  MOVFF  00,3DC
2CE8:  MOVWF  xDD
....................       diff = P - dx; 
2CEA:  MOVF   xD8,W
2CEC:  SUBWF  xDC,W
2CEE:  MOVWF  xDE
2CF0:  MOVF   xD9,W
2CF2:  SUBWFB xDD,W
2CF4:  MOVWF  xDF
....................  
....................       for(; i<=dx; ++i) 
2CF6:  MOVF   xD9,F
2CF8:  BNZ   2D00
2CFA:  MOVF   xE0,W
2CFC:  SUBWF  xD8,W
2CFE:  BNC   2D40
....................       { 
....................          glcd_pixel(x1, y1, color); 
2D00:  MOVFF  3D1,3E1
2D04:  MOVFF  3D2,3E2
2D08:  MOVFF  3D5,3E3
2D0C:  MOVLB  0
2D0E:  RCALL  282E
....................  
....................          if(P < 0) 
2D10:  MOVLB  3
2D12:  BTFSC  xDD.7
2D14:  BRA    2D18
2D16:  BRA    2D28
....................          { 
....................             P  += dy; 
2D18:  MOVF   xD6,W
2D1A:  ADDWF  xDC,F
2D1C:  MOVF   xD7,W
2D1E:  ADDWFC xDD,F
....................             x1 += addx; 
2D20:  MOVF   xDA,W
2D22:  ADDWF  xD1,W
2D24:  MOVWF  xD1
....................          } 
....................          else 
2D26:  BRA    2D3C
....................          { 
....................             P  += diff; 
2D28:  MOVF   xDE,W
2D2A:  ADDWF  xDC,F
2D2C:  MOVF   xDF,W
2D2E:  ADDWFC xDD,F
....................             x1 += addx; 
2D30:  MOVF   xDA,W
2D32:  ADDWF  xD1,W
2D34:  MOVWF  xD1
....................             y1 += addy; 
2D36:  MOVF   xDB,W
2D38:  ADDWF  xD2,W
2D3A:  MOVWF  xD2
....................          } 
....................       } 
2D3C:  INCF   xE0,F
2D3E:  BRA    2CF6
....................    } 
....................    else 
2D40:  BRA    2DAE
....................    { 
....................       dx *= 2; 
2D42:  BCF    FD8.0
2D44:  RLCF   xD8,F
2D46:  RLCF   xD9,F
....................       P = dx - dy; 
2D48:  MOVF   xD6,W
2D4A:  SUBWF  xD8,W
2D4C:  MOVWF  00
2D4E:  MOVF   xD7,W
2D50:  SUBWFB xD9,W
2D52:  MOVFF  00,3DC
2D56:  MOVWF  xDD
....................       diff = P - dy; 
2D58:  MOVF   xD6,W
2D5A:  SUBWF  xDC,W
2D5C:  MOVWF  xDE
2D5E:  MOVF   xD7,W
2D60:  SUBWFB xDD,W
2D62:  MOVWF  xDF
....................  
....................       for(; i<=dy; ++i) 
2D64:  MOVF   xD7,F
2D66:  BNZ   2D6E
2D68:  MOVF   xE0,W
2D6A:  SUBWF  xD6,W
2D6C:  BNC   2DAE
....................       { 
....................          glcd_pixel(x1, y1, color); 
2D6E:  MOVFF  3D1,3E1
2D72:  MOVFF  3D2,3E2
2D76:  MOVFF  3D5,3E3
2D7A:  MOVLB  0
2D7C:  RCALL  282E
....................  
....................          if(P < 0) 
2D7E:  MOVLB  3
2D80:  BTFSC  xDD.7
2D82:  BRA    2D86
2D84:  BRA    2D96
....................          { 
....................             P  += dx; 
2D86:  MOVF   xD8,W
2D88:  ADDWF  xDC,F
2D8A:  MOVF   xD9,W
2D8C:  ADDWFC xDD,F
....................             y1 += addy; 
2D8E:  MOVF   xDB,W
2D90:  ADDWF  xD2,W
2D92:  MOVWF  xD2
....................          } 
....................          else 
2D94:  BRA    2DAA
....................          { 
....................             P  += diff; 
2D96:  MOVF   xDE,W
2D98:  ADDWF  xDC,F
2D9A:  MOVF   xDF,W
2D9C:  ADDWFC xDD,F
....................             x1 += addx; 
2D9E:  MOVF   xDA,W
2DA0:  ADDWF  xD1,W
2DA2:  MOVWF  xD1
....................             y1 += addy; 
2DA4:  MOVF   xDB,W
2DA6:  ADDWF  xD2,W
2DA8:  MOVWF  xD2
....................          } 
....................       } 
2DAA:  INCF   xE0,F
2DAC:  BRA    2D64
....................    } 
.................... } 
2DAE:  MOVLB  0
2DB0:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
2DB2:  MOVLB  3
2DB4:  MOVF   xCA,F
2DB6:  BZ    2E14
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
2DB8:  MOVF   xC8,W
2DBA:  SUBWF  xC6,W
2DBC:  BC    2DC8
....................       { 
....................          xmin = x1; 
2DBE:  MOVFF  3C6,3CD
....................          xmax = x2; 
2DC2:  MOVFF  3C8,3CE
....................       } 
....................       else 
2DC6:  BRA    2DD0
....................       { 
....................          xmin = x2; 
2DC8:  MOVFF  3C8,3CD
....................          xmax = x1; 
2DCC:  MOVFF  3C6,3CE
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
2DD0:  MOVF   xC9,W
2DD2:  SUBWF  xC7,W
2DD4:  BC    2DE0
....................       { 
....................          ymin = y1; 
2DD6:  MOVFF  3C7,3CF
....................          ymax = y2; 
2DDA:  MOVFF  3C9,3D0
....................       } 
....................       else 
2DDE:  BRA    2DE8
....................       { 
....................          ymin = y2; 
2DE0:  MOVFF  3C9,3CF
....................          ymax = y1; 
2DE4:  MOVFF  3C7,3D0
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
2DE8:  MOVF   xCD,W
2DEA:  SUBWF  xCE,W
2DEC:  BNC   2E12
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
2DEE:  MOVFF  3CF,3CC
2DF2:  MOVF   xCC,W
2DF4:  SUBWF  xD0,W
2DF6:  BNC   2E0E
....................          { 
....................             glcd_pixel(xmin, i, color); 
2DF8:  MOVFF  3CD,3E1
2DFC:  MOVFF  3CC,3E2
2E00:  MOVFF  3CB,3E3
2E04:  MOVLB  0
2E06:  RCALL  282E
....................          } 
2E08:  MOVLB  3
2E0A:  INCF   xCC,F
2E0C:  BRA    2DF2
....................       } 
2E0E:  INCF   xCD,F
2E10:  BRA    2DE8
....................    } 
....................    else 
2E12:  BRA    2E70
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
2E14:  MOVFF  3C6,3D1
2E18:  MOVFF  3C7,3D2
2E1C:  MOVFF  3C8,3D3
2E20:  MOVFF  3C7,3D4
2E24:  MOVFF  3CB,3D5
2E28:  MOVLB  0
2E2A:  RCALL  2C74
....................       glcd_line(x1, y2, x2, y2, color); 
2E2C:  MOVFF  3C6,3D1
2E30:  MOVFF  3C9,3D2
2E34:  MOVFF  3C8,3D3
2E38:  MOVFF  3C9,3D4
2E3C:  MOVFF  3CB,3D5
2E40:  RCALL  2C74
....................       glcd_line(x1, y1, x1, y2, color); 
2E42:  MOVFF  3C6,3D1
2E46:  MOVFF  3C7,3D2
2E4A:  MOVFF  3C6,3D3
2E4E:  MOVFF  3C9,3D4
2E52:  MOVFF  3CB,3D5
2E56:  RCALL  2C74
....................       glcd_line(x2, y1, x2, y2, color); 
2E58:  MOVFF  3C8,3D1
2E5C:  MOVFF  3C7,3D2
2E60:  MOVFF  3C8,3D3
2E64:  MOVFF  3C9,3D4
2E68:  MOVFF  3CB,3D5
2E6C:  RCALL  2C74
2E6E:  MOVLB  3
....................    } 
.................... } 
2E70:  MOVLB  0
2E72:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
3B80:  MOVLB  3
3B82:  CLRF   xB9
....................    b = radius; 
3B84:  MOVFF  3B6,3BA
....................    P = 1 - radius; 
3B88:  MOVLW  01
3B8A:  BSF    FD8.0
3B8C:  SUBFWB xB6,W
3B8E:  MOVWF  xBB
....................  
....................    do 
....................    { 
....................       if(fill) 
3B90:  MOVF   xB7,F
3B92:  BZ    3C5E
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
3B94:  MOVF   xB9,W
3B96:  SUBWF  xB4,W
3B98:  MOVWF  xBC
3B9A:  MOVF   xBA,W
3B9C:  ADDWF  xB5,W
3B9E:  MOVWF  xBD
3BA0:  MOVF   xB9,W
3BA2:  ADDWF  xB4,W
3BA4:  MOVWF  xBE
3BA6:  MOVF   xBA,W
3BA8:  ADDWF  xB5,W
3BAA:  MOVWF  xBF
3BAC:  MOVFF  3BC,3D1
3BB0:  MOVFF  3BD,3D2
3BB4:  MOVFF  3BE,3D3
3BB8:  MOVWF  xD4
3BBA:  MOVFF  3B8,3D5
3BBE:  MOVLB  0
3BC0:  CALL   2C74
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
3BC4:  MOVLB  3
3BC6:  MOVF   xB9,W
3BC8:  SUBWF  xB4,W
3BCA:  MOVWF  xBC
3BCC:  MOVF   xBA,W
3BCE:  SUBWF  xB5,W
3BD0:  MOVWF  xBD
3BD2:  MOVF   xB9,W
3BD4:  ADDWF  xB4,W
3BD6:  MOVWF  xBE
3BD8:  MOVF   xBA,W
3BDA:  SUBWF  xB5,W
3BDC:  MOVWF  xBF
3BDE:  MOVFF  3BC,3D1
3BE2:  MOVFF  3BD,3D2
3BE6:  MOVFF  3BE,3D3
3BEA:  MOVWF  xD4
3BEC:  MOVFF  3B8,3D5
3BF0:  MOVLB  0
3BF2:  CALL   2C74
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
3BF6:  MOVLB  3
3BF8:  MOVF   xBA,W
3BFA:  SUBWF  xB4,W
3BFC:  MOVWF  xBC
3BFE:  MOVF   xB9,W
3C00:  ADDWF  xB5,W
3C02:  MOVWF  xBD
3C04:  MOVF   xBA,W
3C06:  ADDWF  xB4,W
3C08:  MOVWF  xBE
3C0A:  MOVF   xB9,W
3C0C:  ADDWF  xB5,W
3C0E:  MOVWF  xBF
3C10:  MOVFF  3BC,3D1
3C14:  MOVFF  3BD,3D2
3C18:  MOVFF  3BE,3D3
3C1C:  MOVWF  xD4
3C1E:  MOVFF  3B8,3D5
3C22:  MOVLB  0
3C24:  CALL   2C74
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
3C28:  MOVLB  3
3C2A:  MOVF   xBA,W
3C2C:  SUBWF  xB4,W
3C2E:  MOVWF  xBC
3C30:  MOVF   xB9,W
3C32:  SUBWF  xB5,W
3C34:  MOVWF  xBD
3C36:  MOVF   xBA,W
3C38:  ADDWF  xB4,W
3C3A:  MOVWF  xBE
3C3C:  MOVF   xB9,W
3C3E:  SUBWF  xB5,W
3C40:  MOVWF  xBF
3C42:  MOVFF  3BC,3D1
3C46:  MOVFF  3BD,3D2
3C4A:  MOVFF  3BE,3D3
3C4E:  MOVWF  xD4
3C50:  MOVFF  3B8,3D5
3C54:  MOVLB  0
3C56:  CALL   2C74
....................       } 
....................       else 
3C5A:  BRA    3D4C
3C5C:  MOVLB  3
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
3C5E:  MOVF   xB4,W
3C60:  ADDWF  xB9,W
3C62:  MOVWF  xBC
3C64:  MOVF   xB5,W
3C66:  ADDWF  xBA,W
3C68:  MOVWF  xBD
3C6A:  MOVFF  3BC,3E1
3C6E:  MOVWF  xE2
3C70:  MOVFF  3B8,3E3
3C74:  MOVLB  0
3C76:  CALL   282E
....................          glcd_pixel(b+x, a+y, color); 
3C7A:  MOVLB  3
3C7C:  MOVF   xB4,W
3C7E:  ADDWF  xBA,W
3C80:  MOVWF  xBC
3C82:  MOVF   xB5,W
3C84:  ADDWF  xB9,W
3C86:  MOVWF  xBD
3C88:  MOVFF  3BC,3E1
3C8C:  MOVWF  xE2
3C8E:  MOVFF  3B8,3E3
3C92:  MOVLB  0
3C94:  CALL   282E
....................          glcd_pixel(x-a, b+y, color); 
3C98:  MOVLB  3
3C9A:  MOVF   xB9,W
3C9C:  SUBWF  xB4,W
3C9E:  MOVWF  xBC
3CA0:  MOVF   xB5,W
3CA2:  ADDWF  xBA,W
3CA4:  MOVWF  xBD
3CA6:  MOVFF  3BC,3E1
3CAA:  MOVWF  xE2
3CAC:  MOVFF  3B8,3E3
3CB0:  MOVLB  0
3CB2:  CALL   282E
....................          glcd_pixel(x-b, a+y, color); 
3CB6:  MOVLB  3
3CB8:  MOVF   xBA,W
3CBA:  SUBWF  xB4,W
3CBC:  MOVWF  xBC
3CBE:  MOVF   xB5,W
3CC0:  ADDWF  xB9,W
3CC2:  MOVWF  xBD
3CC4:  MOVFF  3BC,3E1
3CC8:  MOVWF  xE2
3CCA:  MOVFF  3B8,3E3
3CCE:  MOVLB  0
3CD0:  CALL   282E
....................          glcd_pixel(b+x, y-a, color); 
3CD4:  MOVLB  3
3CD6:  MOVF   xB4,W
3CD8:  ADDWF  xBA,W
3CDA:  MOVWF  xBC
3CDC:  MOVF   xB9,W
3CDE:  SUBWF  xB5,W
3CE0:  MOVWF  xBD
3CE2:  MOVFF  3BC,3E1
3CE6:  MOVWF  xE2
3CE8:  MOVFF  3B8,3E3
3CEC:  MOVLB  0
3CEE:  CALL   282E
....................          glcd_pixel(a+x, y-b, color); 
3CF2:  MOVLB  3
3CF4:  MOVF   xB4,W
3CF6:  ADDWF  xB9,W
3CF8:  MOVWF  xBC
3CFA:  MOVF   xBA,W
3CFC:  SUBWF  xB5,W
3CFE:  MOVWF  xBD
3D00:  MOVFF  3BC,3E1
3D04:  MOVWF  xE2
3D06:  MOVFF  3B8,3E3
3D0A:  MOVLB  0
3D0C:  CALL   282E
....................          glcd_pixel(x-a, y-b, color); 
3D10:  MOVLB  3
3D12:  MOVF   xB9,W
3D14:  SUBWF  xB4,W
3D16:  MOVWF  xBC
3D18:  MOVF   xBA,W
3D1A:  SUBWF  xB5,W
3D1C:  MOVWF  xBD
3D1E:  MOVFF  3BC,3E1
3D22:  MOVWF  xE2
3D24:  MOVFF  3B8,3E3
3D28:  MOVLB  0
3D2A:  CALL   282E
....................          glcd_pixel(x-b, y-a, color); 
3D2E:  MOVLB  3
3D30:  MOVF   xBA,W
3D32:  SUBWF  xB4,W
3D34:  MOVWF  xBC
3D36:  MOVF   xB9,W
3D38:  SUBWF  xB5,W
3D3A:  MOVWF  xBD
3D3C:  MOVFF  3BC,3E1
3D40:  MOVWF  xE2
3D42:  MOVFF  3B8,3E3
3D46:  MOVLB  0
3D48:  CALL   282E
....................       } 
....................  
....................       if(P < 0) 
3D4C:  MOVLB  3
3D4E:  BTFSC  xBB.7
3D50:  BRA    3D54
3D52:  BRA    3D70
....................          P += 3 + 2 * a++; 
3D54:  MOVF   xB9,W
3D56:  INCF   xB9,F
3D58:  MOVWF  xBC
3D5A:  MOVLW  02
3D5C:  MOVWF  xBD
3D5E:  MOVFF  3BC,3BE
3D62:  MOVLB  0
3D64:  RCALL  3B32
3D66:  MOVF   01,W
3D68:  ADDLW  03
3D6A:  MOVLB  3
3D6C:  ADDWF  xBB,F
....................       else 
3D6E:  BRA    3D92
....................          P += 5 + 2 * (a++ - b--); 
3D70:  MOVF   xB9,W
3D72:  INCF   xB9,F
3D74:  MOVWF  xBC
3D76:  MOVF   xBA,W
3D78:  DECF   xBA,F
3D7A:  SUBWF  xBC,W
3D7C:  MOVWF  xBC
3D7E:  MOVLW  02
3D80:  MOVWF  xBD
3D82:  MOVFF  3BC,3BE
3D86:  MOVLB  0
3D88:  RCALL  3B32
3D8A:  MOVF   01,W
3D8C:  ADDLW  05
3D8E:  MOVLB  3
3D90:  ADDWF  xBB,F
....................     } while(a <= b); 
3D92:  MOVF   xB9,W
3D94:  XORLW  80
3D96:  MOVWF  00
3D98:  MOVF   xBA,W
3D9A:  XORLW  80
3D9C:  SUBWF  00,W
3D9E:  BTFSC  FD8.2
3DA0:  BRA    3B90
3DA2:  BTFSS  FD8.0
3DA4:  BRA    3B90
.................... } 
3DA6:  MOVLB  0
3DA8:  GOTO   617E (RETURN)
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
2910:  MOVFF  3C7,03
2914:  MOVLB  3
2916:  MOVFF  3C6,FE9
291A:  MOVFF  3C7,FEA
291E:  MOVF   FEF,F
2920:  BTFSC  FD8.2
2922:  BRA    2AC4
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
2924:  MOVFF  3C7,03
2928:  MOVFF  3C6,FE9
292C:  MOVFF  3C7,FEA
2930:  MOVF   FEF,W
2932:  SUBLW  52
2934:  BNC   2984
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
2936:  MOVFF  3C7,03
293A:  MOVFF  3C6,FE9
293E:  MOVFF  3C7,FEA
2942:  MOVLW  20
2944:  SUBWF  FEF,W
2946:  MULLW  05
2948:  MOVF   FF3,W
294A:  CLRF   03
294C:  MOVWF  xD3
294E:  MOVLW  03
2950:  MOVWF  FEA
2952:  MOVLW  CE
2954:  MOVWF  FE9
2956:  CLRF   xD7
2958:  MOVFF  3D3,3D6
295C:  MOVFF  FF2,3D4
2960:  BCF    FF2.7
2962:  MOVLW  05
2964:  MOVWF  01
2966:  CLRF   FF7
2968:  MOVF   xD3,W
296A:  MOVLB  0
296C:  CALL   00A2
2970:  TBLRD*-
2972:  TBLRD*+
2974:  MOVFF  FF5,FEE
2978:  DECFSZ 01,F
297A:  BRA    2972
297C:  MOVLB  3
297E:  BTFSC  xD4.7
2980:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
2982:  BRA    29EE
2984:  MOVFF  3C7,03
2988:  MOVFF  3C6,FE9
298C:  MOVFF  3C7,FEA
2990:  MOVF   FEF,W
2992:  SUBLW  7E
2994:  BNC   29E4
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
2996:  MOVFF  3C7,03
299A:  MOVFF  3C6,FE9
299E:  MOVFF  3C7,FEA
29A2:  MOVLW  53
29A4:  SUBWF  FEF,W
29A6:  MULLW  05
29A8:  MOVF   FF3,W
29AA:  CLRF   03
29AC:  MOVWF  xD3
29AE:  MOVLW  03
29B0:  MOVWF  FEA
29B2:  MOVLW  CE
29B4:  MOVWF  FE9
29B6:  CLRF   xD7
29B8:  MOVFF  3D3,3D6
29BC:  MOVFF  FF2,3D4
29C0:  BCF    FF2.7
29C2:  MOVLW  05
29C4:  MOVWF  01
29C6:  CLRF   FF7
29C8:  MOVF   xD3,W
29CA:  MOVLB  0
29CC:  CALL   01BC
29D0:  TBLRD*-
29D2:  TBLRD*+
29D4:  MOVFF  FF5,FEE
29D8:  DECFSZ 01,F
29DA:  BRA    29D2
29DC:  MOVLB  3
29DE:  BTFSC  xD4.7
29E0:  BSF    FF2.7
....................       else 
29E2:  BRA    29EE
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
29E4:  CLRF   xCE
29E6:  CLRF   xCF
29E8:  CLRF   xD0
29EA:  CLRF   xD1
29EC:  CLRF   xD2
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
29EE:  MOVFF  3C7,03
29F2:  MOVF   xC6,W
29F4:  MOVWF  FE9
29F6:  MOVFF  03,FEA
29FA:  MOVF   FEF,W
29FC:  XORLW  0A
29FE:  MOVLB  0
2A00:  BZ    2A08
2A02:  XORLW  07
2A04:  BZ    2A18
2A06:  BRA    2A1E
....................          case '\n': 
....................             y += 7*size + 1; 
2A08:  MOVLB  3
2A0A:  MOVF   xC8,W
2A0C:  MULLW  07
2A0E:  MOVF   FF3,W
2A10:  ADDLW  01
2A12:  ADDWF  xC5,F
....................             continue; 
2A14:  BRA    2AB6
2A16:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
2A18:  MOVLB  3
2A1A:  CLRF   xC4
....................             continue; 
2A1C:  BRA    2AB6
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
2A1E:  MOVLB  3
2A20:  MOVF   xC8,W
2A22:  MULLW  05
2A24:  MOVF   FF3,W
2A26:  ADDWF  xC4,W
2A28:  SUBLW  7F
2A2A:  BC    2A38
....................       { 
....................          x = 0;                           // Set x at far left position 
2A2C:  CLRF   xC4
....................          y += 7*size + 1;                 // Set y at next position down 
2A2E:  MOVF   xC8,W
2A30:  MULLW  07
2A32:  MOVF   FF3,W
2A34:  ADDLW  01
2A36:  ADDWF  xC5,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
2A38:  CLRF   xCA
2A3A:  MOVF   xCA,W
2A3C:  SUBLW  04
2A3E:  BNC   2AB6
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
2A40:  CLRF   xCB
2A42:  MOVF   xCB,W
2A44:  SUBLW  06
2A46:  BNC   2AAE
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
2A48:  CLRF   03
2A4A:  MOVF   xCA,W
2A4C:  ADDLW  CE
2A4E:  MOVWF  FE9
2A50:  MOVLW  03
2A52:  ADDWFC 03,W
2A54:  MOVWF  FEA
2A56:  MOVFF  FEF,3D3
2A5A:  MOVFF  3D3,00
2A5E:  MOVF   xCB,W
2A60:  MOVWF  01
2A62:  BZ    2A6C
2A64:  BCF    FD8.0
2A66:  RRCF   00,F
2A68:  DECFSZ 01,F
2A6A:  BRA    2A64
2A6C:  BTFSS  00.0
2A6E:  BRA    2AAA
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
2A70:  CLRF   xCC
2A72:  MOVF   xC8,W
2A74:  SUBWF  xCC,W
2A76:  BC    2AAA
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
2A78:  CLRF   xCD
2A7A:  MOVF   xC8,W
2A7C:  SUBWF  xCD,W
2A7E:  BC    2AA6
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
2A80:  MOVF   xCD,W
2A82:  ADDWF  xC4,W
2A84:  MOVWF  xD3
2A86:  MOVF   xCB,W
2A88:  MULWF  xC8
2A8A:  MOVF   FF3,W
2A8C:  ADDWF  xC5,W
2A8E:  ADDWF  xCC,W
2A90:  MOVWF  xD4
2A92:  MOVFF  3D3,3E1
2A96:  MOVWF  xE2
2A98:  MOVFF  3C9,3E3
2A9C:  MOVLB  0
2A9E:  RCALL  282E
....................                   } 
2AA0:  MOVLB  3
2AA2:  INCF   xCD,F
2AA4:  BRA    2A7A
....................                } 
2AA6:  INCF   xCC,F
2AA8:  BRA    2A72
....................             } 
....................          } 
2AAA:  INCF   xCB,F
2AAC:  BRA    2A42
....................       } 
2AAE:  INCF   xCA,F
2AB0:  MOVF   xC8,W
2AB2:  ADDWF  xC4,F
2AB4:  BRA    2A3A
....................    } 
2AB6:  INCF   xC6,F
2AB8:  BTFSC  FD8.2
2ABA:  INCF   xC7,F
2ABC:  INCF   xC4,F
2ABE:  MOVLB  0
2AC0:  BRA    2910
2AC2:  MOVLB  3
.................... } 
2AC4:  MOVLB  0
2AC6:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A1) 
.................... #define   DOWN          input(PIN_A2) 
.................... #define   RIGHT         input(PIN_A3) 
.................... #define   LEFT          input(PIN_A5) 
.................... #define   STOP          !input(PIN_E0) 
.................... //#define   PRESOSTATO    input(PIN_E1) 
.................... #define   PUERTA        !input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Camara_OUT_on     output_bit(PIN_C0,1) 
.................... #define   Camara_OUT_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia_on    output_bit(PIN_D2,1) 
.................... #define   Resistencia_off   output_bit(PIN_D2,0) 
.................... #define   Camara_IN_on      output_bit(PIN_C2,1) 
.................... #define   Camara_IN_off     output_bit(PIN_C2,0) 
.................... #define   Piloto_Stop_on    output_bit(PIN_D1,1) 
.................... #define   Piloto_Stop_off   output_bit(PIN_D1,0) 
.................... #define   Piloto_Fc_on      output_bit(PIN_D0,1) 
.................... #define   Piloto_Fc_off     output_bit(PIN_D0,0) 
.................... #define   Piloto_Puerta_on  output_bit(PIN_C2,1) 
.................... #define   Piloto_Puerta_off output_bit(PIN_C2,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
3588:  CLRF   03
358A:  MOVLB  3
358C:  MOVF   xB4,W
358E:  ADDLW  70
3590:  MOVWF  FE9
3592:  MOVLW  0F
3594:  ADDWFC 03,W
3596:  MOVWF  FEA
3598:  MOVF   FEF,F
359A:  BZ    35B6
359C:  MOVF   xB4,W
359E:  MULLW  08
35A0:  MOVF   FF3,W
35A2:  CLRF   xB6
35A4:  MOVWF  xB5
35A6:  MOVWF  FE9
35A8:  MOVLW  04
35AA:  ADDWF  xB6,W
35AC:  MOVWF  FEA
35AE:  MOVFF  FEF,3B5
35B2:  BTFSS  xB5.7
35B4:  BRA    35BA
35B6:  MOVLW  00
35B8:  BRA    35BC
35BA:  MOVLW  01
35BC:  MOVWF  01
.................... } 
35BE:  MOVLB  0
35C0:  GOTO   5DC2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
20F0:  CLRF   03
20F2:  MOVLB  3
20F4:  MOVF   xF2,W
20F6:  ADDLW  70
20F8:  MOVWF  FE9
20FA:  MOVLW  0F
20FC:  ADDWFC 03,W
20FE:  MOVWF  FEA
2100:  MOVF   FEF,F
2102:  BZ    2128
2104:  MOVF   xF2,W
2106:  MULLW  08
2108:  MOVF   FF3,W
210A:  CLRF   xF4
210C:  MOVWF  xF3
210E:  MOVLW  04
2110:  ADDWF  xF3,F
2112:  MOVLW  00
2114:  ADDWFC xF4,F
2116:  MOVFF  3F3,FE9
211A:  MOVLW  04
211C:  ADDWF  xF4,W
211E:  MOVWF  FEA
2120:  MOVFF  FEF,3F3
2124:  BTFSS  xF3.7
2126:  BRA    212C
2128:  MOVLW  00
212A:  BRA    212E
212C:  MOVLW  01
212E:  MOVWF  01
.................... } 
2130:  MOVLB  0
2132:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
2604:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
2606:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
2608:  MOVLW  08
260A:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
260C:  MOVF   F94,W
260E:  IORLW  30
2610:  MOVLB  3
2612:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
2614:  CLRF   1C
2616:  CLRF   16
2618:  BTFSC  FF2.7
261A:  BSF    16.7
261C:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
261E:  MOVLB  0
2620:  CALL   19E8
2624:  BTFSC  16.7
2626:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
2628:  GOTO   262E (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
2632:  CLRF   16
2634:  BTFSC  FF2.7
2636:  BSF    16.7
2638:  BCF    FF2.7
....................    usb_token_reset(); 
263A:  CALL   19E8
263E:  BTFSC  16.7
2640:  BSF    FF2.7
....................    UCON = 0; 
2642:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
2644:  MOVLW  14
2646:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
2648:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
264A:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
264C:  MOVLW  01
264E:  MOVWF  1C
.................... } 
2650:  GOTO   265A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
262C:  BRA    2604
.................... } 
262E:  GOTO   2678 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
2654:  BTFSC  F6D.3
2656:  BRA    265A
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
2658:  BRA    2632
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
265A:  DECFSZ 1C,W
265C:  BRA    2674
265E:  BTFSC  F6D.5
2660:  BRA    2674
....................    { 
....................       UIR=0; 
2662:  CLRF   F68
....................       UIE=0; 
2664:  CLRF   F69
....................       enable_interrupts(INT_USB); 
2666:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
2668:  MOVLW  C0
266A:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
266C:  MOVLW  11
266E:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
2670:  MOVLW  02
2672:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
2674:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
2676:  BRA    262C
....................  
....................    do  
....................    { 
....................       usb_task(); 
2678:  RCALL  2654
....................    } while (usb_state != USB_STATE_POWERED); 
267A:  MOVF   1C,W
267C:  SUBLW  02
267E:  BNZ   2678
.................... } 
2680:  GOTO   4EC0 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
2134:  MOVFF  3ED,3F2
2138:  RCALL  20F0
213A:  MOVF   01,F
213C:  BZ    2206
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
213E:  MOVLB  3
2140:  MOVF   xED,W
2142:  MULLW  08
2144:  MOVF   FF3,W
2146:  CLRF   xF3
2148:  MOVWF  xF2
214A:  MOVLW  04
214C:  ADDWF  xF2,F
214E:  MOVLW  00
2150:  ADDWFC xF3,F
2152:  MOVLW  01
2154:  ADDWF  xF2,W
2156:  MOVWF  01
2158:  MOVLW  00
215A:  ADDWFC xF3,W
215C:  MOVWF  03
215E:  MOVFF  01,FE9
2162:  MOVLW  04
2164:  ADDWF  03,W
2166:  MOVWF  FEA
2168:  MOVFF  3EE,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
216C:  MOVF   xF0,W
216E:  SUBLW  02
2170:  BNZ   21A0
....................       { 
....................          i = EP_BDxST_I(endpoint); 
2172:  MOVF   xED,W
2174:  MULLW  08
2176:  MOVF   FF3,W
2178:  CLRF   xF3
217A:  MOVWF  xF2
217C:  MOVLW  04
217E:  ADDWF  xF2,F
2180:  MOVLW  00
2182:  ADDWFC xF3,F
2184:  MOVFF  3F2,FE9
2188:  MOVLW  04
218A:  ADDWF  xF3,W
218C:  MOVWF  FEA
218E:  MOVFF  FEF,3F1
....................          if (bit_test(i,6)) 
2192:  BTFSS  xF1.6
2194:  BRA    219A
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
2196:  CLRF   xF0
....................          else 
2198:  BRA    219E
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
219A:  MOVLW  01
219C:  MOVWF  xF0
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
219E:  BRA    21C6
21A0:  MOVF   xF0,W
21A2:  SUBLW  04
21A4:  BNZ   21C6
....................       { 
....................          i = EP_BDxST_O(endpoint); 
21A6:  MOVF   xED,W
21A8:  MULLW  08
21AA:  MOVF   FF3,W
21AC:  CLRF   xF3
21AE:  MOVWF  FE9
21B0:  MOVLW  04
21B2:  ADDWF  xF3,W
21B4:  MOVWF  FEA
21B6:  MOVFF  FEF,3F1
....................          if (bit_test(i,6)) 
21BA:  BTFSS  xF1.6
21BC:  BRA    21C4
....................             tgl = USB_DTS_DATA1; 
21BE:  MOVLW  01
21C0:  MOVWF  xF0
....................          else 
21C2:  BRA    21C6
....................             tgl = USB_DTS_DATA0; 
21C4:  CLRF   xF0
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
21C6:  DECFSZ xF0,W
21C8:  BRA    21D0
....................          i=0xC8;  //DATA1, UOWN 
21CA:  MOVLW  C8
21CC:  MOVWF  xF1
....................       else //if (tgl == USB_DTS_DATA0)  
21CE:  BRA    21D4
....................          i=0x88; //DATA0, UOWN 
21D0:  MOVLW  88
21D2:  MOVWF  xF1
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
21D4:  BTFSC  xEF.0
21D6:  BSF    xF1.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
21D8:  BTFSC  xEF.1
21DA:  BSF    xF1.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
21DC:  MOVF   xED,W
21DE:  MULLW  08
21E0:  MOVF   FF3,W
21E2:  CLRF   xF3
21E4:  MOVWF  xF2
21E6:  MOVLW  04
21E8:  ADDWF  xF2,F
21EA:  MOVLW  00
21EC:  ADDWFC xF3,F
21EE:  MOVFF  3F2,FE9
21F2:  MOVLW  04
21F4:  ADDWF  xF3,W
21F6:  MOVWF  FEA
21F8:  MOVFF  3F1,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
21FC:  MOVLW  01
21FE:  MOVWF  01
2200:  BRA    220C
....................    } 
....................    else  
2202:  BRA    2204
2204:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
2206:  MOVLW  00
2208:  MOVWF  01
220A:  MOVLB  3
.................... } 
220C:  MOVLB  0
220E:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
3A82:  CLRF   16
3A84:  BTFSC  FF2.7
3A86:  BSF    16.7
3A88:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
3A8A:  MOVFF  3B4,3F2
3A8E:  CALL   20F0
3A92:  BTFSC  16.7
3A94:  BSF    FF2.7
3A96:  MOVF   01,F
3A98:  BZ    3B2A
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
3A9A:  MOVLB  3
3A9C:  MOVF   xB4,W
3A9E:  MULLW  08
3AA0:  MOVF   FF3,W
3AA2:  CLRF   xBD
3AA4:  MOVWF  xBC
3AA6:  MOVLW  04
3AA8:  ADDWF  xBC,F
3AAA:  MOVLW  00
3AAC:  ADDWFC xBD,F
3AAE:  MOVLW  02
3AB0:  ADDWF  xBC,W
3AB2:  MOVWF  01
3AB4:  MOVLW  00
3AB6:  ADDWFC xBD,W
3AB8:  MOVWF  03
3ABA:  MOVFF  01,FE9
3ABE:  MOVLW  04
3AC0:  ADDWF  03,W
3AC2:  MOVWF  FEA
3AC4:  MOVFF  FEC,03
3AC8:  MOVF   FED,F
3ACA:  MOVFF  FEF,3BA
3ACE:  MOVFF  03,3BB
....................       memcpy(buff_add, ptr, len);      
3AD2:  MOVFF  3BB,FEA
3AD6:  MOVFF  3BA,FE9
3ADA:  MOVFF  3B6,FE2
3ADE:  MOVFF  3B5,FE1
3AE2:  MOVFF  3B8,02
3AE6:  MOVFF  3B7,01
3AEA:  MOVF   01,F
3AEC:  BZ    3AF2
3AEE:  INCF   02,F
3AF0:  BRA    3AF6
3AF2:  MOVF   02,F
3AF4:  BZ    3B02
3AF6:  MOVFF  FE6,FEE
3AFA:  DECFSZ 01,F
3AFC:  BRA    3AF6
3AFE:  DECFSZ 02,F
3B00:  BRA    3AF6
3B02:  CLRF   16
3B04:  BTFSC  FF2.7
3B06:  BSF    16.7
3B08:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
3B0A:  MOVFF  3B4,3ED
3B0E:  MOVFF  3B8,3EF
3B12:  MOVFF  3B7,3EE
3B16:  MOVFF  3B9,3F0
3B1A:  MOVLB  0
3B1C:  CALL   2134
3B20:  BTFSC  16.7
3B22:  BSF    FF2.7
3B24:  MOVF   01,W
3B26:  BRA    3B2E
....................    } 
....................    else  
3B28:  BRA    3B2A
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
3B2A:  MOVLW  00
3B2C:  MOVWF  01
.................... } 
3B2E:  GOTO   6116 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
2026:  MOVLB  3
2028:  MOVF   xED,W
202A:  MULLW  08
202C:  MOVF   FF3,W
202E:  CLRF   xF3
2030:  MOVWF  FE9
2032:  MOVLW  04
2034:  ADDWF  xF3,W
2036:  MOVWF  FEA
2038:  MOVFF  FEF,3EF
....................    if (tgl == USB_DTS_TOGGLE)  
203C:  MOVF   xEE,W
203E:  SUBLW  02
2040:  BNZ   204E
....................    { 
....................       if (bit_test(i,6)) 
2042:  BTFSS  xEF.6
2044:  BRA    204A
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
2046:  CLRF   xEE
....................       else 
2048:  BRA    204E
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
204A:  MOVLW  01
204C:  MOVWF  xEE
....................    } 
....................    if (tgl == USB_DTS_STALL)  
204E:  MOVF   xEE,W
2050:  SUBLW  03
2052:  BNZ   207A
....................    { 
....................       i = 0x84; 
2054:  MOVLW  84
2056:  MOVWF  xEF
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
2058:  MOVF   xED,W
205A:  MULLW  08
205C:  MOVF   FF3,W
205E:  CLRF   xF3
2060:  MOVWF  xF2
2062:  MOVLW  04
2064:  ADDWF  xF2,F
2066:  MOVLW  00
2068:  ADDWFC xF3,F
206A:  MOVFF  3F2,FE9
206E:  MOVLW  04
2070:  ADDWF  xF3,W
2072:  MOVWF  FEA
2074:  MOVLW  84
2076:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
2078:  BRA    2088
207A:  DECFSZ xEE,W
207C:  BRA    2084
....................       i = 0xC8;  //DATA1, UOWN 
207E:  MOVLW  C8
2080:  MOVWF  xEF
....................    else //if (tgl == USB_DTS_DATA0)  
2082:  BRA    2088
....................       i = 0x88; //DATA0, UOWN 
2084:  MOVLW  88
2086:  MOVWF  xEF
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
2088:  BCF    FD8.0
208A:  RLCF   xED,W
208C:  CLRF   03
208E:  MOVFF  FF2,3F2
2092:  BCF    FF2.7
2094:  MOVLB  0
2096:  CALL   174A
209A:  TBLRD*+
209C:  MOVFF  FF5,03
20A0:  MOVLB  3
20A2:  BTFSC  xF2.7
20A4:  BSF    FF2.7
20A6:  MOVWF  xF0
20A8:  MOVFF  03,3F1
....................    EP_BDxCNT_O(endpoint) = len; 
20AC:  MOVF   xED,W
20AE:  MULLW  08
20B0:  MOVF   FF3,W
20B2:  CLRF   xF3
20B4:  MOVWF  xF2
20B6:  MOVLW  01
20B8:  ADDWF  xF2,W
20BA:  MOVWF  01
20BC:  MOVLW  00
20BE:  ADDWFC xF3,W
20C0:  MOVWF  03
20C2:  MOVFF  01,FE9
20C6:  MOVLW  04
20C8:  ADDWF  03,W
20CA:  MOVWF  FEA
20CC:  MOVFF  3F0,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
20D0:  BTFSC  xF1.0
20D2:  BSF    xEF.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
20D4:  BTFSC  xF1.1
20D6:  BSF    xEF.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
20D8:  MOVF   xED,W
20DA:  MULLW  08
20DC:  MOVF   FF3,W
20DE:  CLRF   xF3
20E0:  MOVWF  FE9
20E2:  MOVLW  04
20E4:  ADDWF  xF3,W
20E6:  MOVWF  FEA
20E8:  MOVFF  3EF,FEF
.................... } 
20EC:  MOVLB  0
20EE:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
35C4:  MOVLB  3
35C6:  MOVF   xB9,W
35C8:  MULLW  08
35CA:  MOVF   FF3,W
35CC:  CLRF   xC4
35CE:  MOVWF  xC3
35D0:  MOVLW  02
35D2:  ADDWF  xC3,W
35D4:  MOVWF  01
35D6:  MOVLW  00
35D8:  ADDWFC xC4,W
35DA:  MOVWF  03
35DC:  MOVFF  01,FE9
35E0:  MOVLW  04
35E2:  ADDWF  03,W
35E4:  MOVWF  FEA
35E6:  MOVFF  FEC,03
35EA:  MOVF   FED,F
35EC:  MOVFF  FEF,3BE
35F0:  MOVFF  03,3BF
....................    i = EP_BDxCNT_O(endpoint); 
35F4:  MOVF   xB9,W
35F6:  MULLW  08
35F8:  MOVF   FF3,W
35FA:  CLRF   xC4
35FC:  MOVWF  xC3
35FE:  MOVLW  01
3600:  ADDWF  xC3,W
3602:  MOVWF  01
3604:  MOVLW  00
3606:  ADDWFC xC4,W
3608:  MOVWF  03
360A:  MOVFF  01,FE9
360E:  MOVLW  04
3610:  ADDWF  03,W
3612:  MOVWF  FEA
3614:  MOVF   FEF,W
3616:  CLRF   03
3618:  MOVWF  xC1
361A:  MOVFF  03,3C2
....................    st = EP_BDxST_O(endpoint); 
361E:  MOVF   xB9,W
3620:  MULLW  08
3622:  MOVF   FF3,W
3624:  CLRF   xC4
3626:  MOVWF  FE9
3628:  MOVLW  04
362A:  ADDWF  xC4,W
362C:  MOVWF  FEA
362E:  MOVFF  FEF,3C0
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
3632:  BTFSC  xC0.0
3634:  BSF    xC2.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
3636:  BTFSC  xC0.1
3638:  BSF    xC2.1
....................  
....................    if (i < max) {max = i;} 
363A:  MOVF   xC2,W
363C:  SUBWF  xBD,W
363E:  BNC   3650
3640:  BNZ   3648
3642:  MOVF   xBC,W
3644:  SUBWF  xC1,W
3646:  BC    3650
3648:  MOVFF  3C2,3BD
364C:  MOVFF  3C1,3BC
....................     
....................    memcpy(ptr, al ,max); 
3650:  MOVFF  3BB,FEA
3654:  MOVFF  3BA,FE9
3658:  MOVFF  3BF,FE2
365C:  MOVFF  3BE,FE1
3660:  MOVFF  3BD,02
3664:  MOVFF  3BC,01
3668:  MOVF   01,F
366A:  BZ    3670
366C:  INCF   02,F
366E:  BRA    3674
3670:  MOVF   02,F
3672:  BZ    3680
3674:  MOVFF  FE6,FEE
3678:  DECFSZ 01,F
367A:  BRA    3674
367C:  DECFSZ 02,F
367E:  BRA    3674
....................  
....................    return(max); 
3680:  MOVFF  3BC,01
3684:  MOVFF  3BD,02
.................... } 
3688:  MOVLB  0
368A:  GOTO   36A4 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
368E:  MOVFF  3B4,3B9
3692:  MOVFF  3B6,3BB
3696:  MOVFF  3B5,3BA
369A:  MOVFF  3B8,3BD
369E:  MOVFF  3B7,3BC
36A2:  BRA    35C4
36A4:  MOVFF  02,3B8
36A8:  MOVFF  01,3B7
36AC:  CLRF   16
36AE:  BTFSC  FF2.7
36B0:  BSF    16.7
36B2:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
36B4:  MOVFF  3B4,3ED
36B8:  MOVLW  02
36BA:  MOVLB  3
36BC:  MOVWF  xEE
36BE:  MOVLB  0
36C0:  CALL   2026
36C4:  BTFSC  16.7
36C6:  BSF    FF2.7
....................  
....................    return(max); 
36C8:  MOVLB  3
36CA:  MOVFF  3B7,01
36CE:  MOVFF  3B8,02
.................... } 
36D2:  MOVLB  0
36D4:  GOTO   5DE0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1EEC:  MOVLB  3
1EEE:  BCF    xEE.0
1EF0:  BTFSC  xED.7
1EF2:  BSF    xEE.0
....................    endpoint &= 0x7F; 
1EF4:  BCF    xED.7
....................     
....................    if (direction)  
1EF6:  BTFSS  xEE.0
1EF8:  BRA    1F1C
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
1EFA:  MOVF   xED,W
1EFC:  MULLW  08
1EFE:  MOVF   FF3,W
1F00:  CLRF   xF0
1F02:  MOVWF  xEF
1F04:  MOVLW  04
1F06:  ADDWF  xEF,F
1F08:  MOVLW  00
1F0A:  ADDWFC xF0,F
1F0C:  MOVFF  3EF,FE9
1F10:  MOVLW  04
1F12:  ADDWF  xF0,W
1F14:  MOVWF  FEA
1F16:  MOVLW  84
1F18:  MOVWF  FEF
....................    } 
....................    else  
1F1A:  BRA    1F30
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
1F1C:  MOVF   xED,W
1F1E:  MULLW  08
1F20:  MOVF   FF3,W
1F22:  CLRF   xF0
1F24:  MOVWF  FE9
1F26:  MOVLW  04
1F28:  ADDWF  xF0,W
1F2A:  MOVWF  FEA
1F2C:  MOVLW  84
1F2E:  MOVWF  FEF
....................    } 
.................... } 
1F30:  MOVLB  0
1F32:  GOTO   1FC4 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1EA4:  MOVLB  3
1EA6:  BCF    xEE.0
1EA8:  BTFSC  xED.7
1EAA:  BSF    xEE.0
....................    endpoint &= 0x7F; 
1EAC:  BCF    xED.7
....................     
....................    if (direction)  
1EAE:  BTFSS  xEE.0
1EB0:  BRA    1ED4
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
1EB2:  MOVF   xED,W
1EB4:  MULLW  08
1EB6:  MOVF   FF3,W
1EB8:  CLRF   xF0
1EBA:  MOVWF  xEF
1EBC:  MOVLW  04
1EBE:  ADDWF  xEF,F
1EC0:  MOVLW  00
1EC2:  ADDWFC xF0,F
1EC4:  MOVFF  3EF,FE9
1EC8:  MOVLW  04
1ECA:  ADDWF  xF0,W
1ECC:  MOVWF  FEA
1ECE:  MOVLW  88
1ED0:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
1ED2:  BRA    1EE6
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
1ED4:  MOVF   xED,W
1ED6:  MULLW  08
1ED8:  MOVF   FF3,W
1EDA:  CLRF   xF0
1EDC:  MOVWF  FE9
1EDE:  MOVLW  04
1EE0:  ADDWF  xF0,W
1EE2:  MOVWF  FEA
1EE4:  CLRF   FEF
....................    } 
.................... } 
1EE6:  MOVLB  0
1EE8:  GOTO   1FB4 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1F36:  MOVLB  3
1F38:  BCF    xEE.0
1F3A:  BTFSC  xED.7
1F3C:  BSF    xEE.0
....................    endpoint &= 0x7F; 
1F3E:  BCF    xED.7
....................     
....................    if (direction)  
1F40:  BTFSS  xEE.0
1F42:  BRA    1F66
....................    { 
....................       st=EP_BDxST_I(endpoint); 
1F44:  MOVF   xED,W
1F46:  MULLW  08
1F48:  MOVF   FF3,W
1F4A:  CLRF   xF1
1F4C:  MOVWF  xF0
1F4E:  MOVLW  04
1F50:  ADDWF  xF0,F
1F52:  MOVLW  00
1F54:  ADDWFC xF1,F
1F56:  MOVFF  3F0,FE9
1F5A:  MOVLW  04
1F5C:  ADDWF  xF1,W
1F5E:  MOVWF  FEA
1F60:  MOVFF  FEF,3EF
....................    } 
....................    else  
1F64:  BRA    1F7A
....................    { 
....................       st=EP_BDxST_O(endpoint); 
1F66:  MOVF   xED,W
1F68:  MULLW  08
1F6A:  MOVF   FF3,W
1F6C:  CLRF   xF1
1F6E:  MOVWF  FE9
1F70:  MOVLW  04
1F72:  ADDWF  xF1,W
1F74:  MOVWF  FEA
1F76:  MOVFF  FEF,3EF
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
1F7A:  BTFSS  xEF.7
1F7C:  BRA    1F82
1F7E:  BTFSC  xEF.2
1F80:  BRA    1F86
1F82:  MOVLW  00
1F84:  BRA    1F88
1F86:  MOVLW  01
1F88:  MOVWF  01
.................... } 
1F8A:  MOVLB  0
1F8C:  GOTO   1FDC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
221A:  MOVFF  3EE,F6E
....................     
....................    if (address)  
221E:  MOVLB  3
2220:  MOVF   xEE,F
2222:  BZ    222A
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
2224:  MOVLW  04
2226:  MOVWF  1C
....................    } 
....................    else  
2228:  BRA    222E
....................    { 
....................       usb_state = USB_STATE_POWERED; 
222A:  MOVLW  02
222C:  MOVWF  1C
....................    } 
.................... } 
222E:  MOVLB  0
2230:  GOTO   223E (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
1B70:  MOVLB  3
1B72:  MOVF   xED,F
1B74:  BNZ   1B82
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
1B76:  MOVLW  04
1B78:  MOVWF  1C
....................       usb_disable_endpoints(); 
1B7A:  MOVLB  0
1B7C:  RCALL  19CA
....................    } 
....................    else  
1B7E:  BRA    1D3C
1B80:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
1B82:  MOVLW  05
1B84:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
1B86:  MOVLW  04
1B88:  MOVWF  xF0
1B8A:  MOVLW  90
1B8C:  MOVWF  xEF
....................       for (en=1; en<USB_NUM_UEP; en++)  
1B8E:  MOVLW  01
1B90:  MOVWF  xEE
1B92:  MOVF   xEE,W
1B94:  SUBLW  0F
1B96:  BTFSS  FD8.0
1B98:  BRA    1D3C
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
1B9A:  MOVFF  3EE,3F6
1B9E:  MOVLB  0
1BA0:  RCALL  1976
....................          new_uep = 0; 
1BA2:  MOVLB  3
1BA4:  CLRF   xF1
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
1BA6:  CLRF   03
1BA8:  MOVF   xEE,W
1BAA:  MOVFF  FF2,3F5
1BAE:  BCF    FF2.7
1BB0:  MOVLB  0
1BB2:  RCALL  172A
1BB4:  MOVLB  3
1BB6:  BTFSC  xF5.7
1BB8:  BSF    FF2.7
1BBA:  SUBLW  FF
1BBC:  BZ    1C74
....................          { 
....................             new_uep = 0x04; 
1BBE:  MOVLW  04
1BC0:  MOVWF  xF1
....................             len = usb_ep_rx_size[en]; 
1BC2:  BCF    FD8.0
1BC4:  RLCF   xEE,W
1BC6:  CLRF   03
1BC8:  MOVFF  FF2,3F5
1BCC:  BCF    FF2.7
1BCE:  MOVLB  0
1BD0:  RCALL  174A
1BD2:  TBLRD*+
1BD4:  MOVFF  FF5,03
1BD8:  MOVLB  3
1BDA:  BTFSC  xF5.7
1BDC:  BSF    FF2.7
1BDE:  MOVWF  xF2
1BE0:  MOVFF  03,3F3
....................             EP_BDxCNT_O(en) = len; 
1BE4:  MOVF   xEE,W
1BE6:  MULLW  08
1BE8:  MOVF   FF3,W
1BEA:  CLRF   xF6
1BEC:  MOVWF  xF5
1BEE:  MOVLW  01
1BF0:  ADDWF  xF5,W
1BF2:  MOVWF  01
1BF4:  MOVLW  00
1BF6:  ADDWFC xF6,W
1BF8:  MOVWF  03
1BFA:  MOVFF  01,FE9
1BFE:  MOVLW  04
1C00:  ADDWF  03,W
1C02:  MOVWF  FEA
1C04:  MOVFF  3F2,FEF
....................             EP_BDxADR_O(en) = addy; 
1C08:  MOVF   xEE,W
1C0A:  MULLW  08
1C0C:  MOVF   FF3,W
1C0E:  CLRF   xF6
1C10:  MOVWF  xF5
1C12:  MOVLW  02
1C14:  ADDWF  xF5,W
1C16:  MOVWF  01
1C18:  MOVLW  00
1C1A:  ADDWFC xF6,W
1C1C:  MOVWF  03
1C1E:  MOVFF  01,FE9
1C22:  MOVLW  04
1C24:  ADDWF  03,W
1C26:  MOVWF  FEA
1C28:  MOVFF  3F0,FEC
1C2C:  MOVF   FED,F
1C2E:  MOVFF  3EF,FEF
....................             addy += usb_ep_rx_size[en]; 
1C32:  BCF    FD8.0
1C34:  RLCF   xEE,W
1C36:  CLRF   03
1C38:  MOVFF  FF2,3F5
1C3C:  BCF    FF2.7
1C3E:  MOVLB  0
1C40:  RCALL  174A
1C42:  TBLRD*+
1C44:  MOVFF  FF5,03
1C48:  MOVLB  3
1C4A:  BTFSC  xF5.7
1C4C:  BSF    FF2.7
1C4E:  ADDWF  xEF,F
1C50:  MOVF   03,W
1C52:  ADDWFC xF0,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
1C54:  MOVLW  88
1C56:  MOVWF  xF4
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
1C58:  BTFSC  xF3.0
1C5A:  BSF    xF4.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
1C5C:  BTFSC  xF3.1
1C5E:  BSF    xF4.1
....................             EP_BDxST_O(en) = i; 
1C60:  MOVF   xEE,W
1C62:  MULLW  08
1C64:  MOVF   FF3,W
1C66:  CLRF   xF6
1C68:  MOVWF  FE9
1C6A:  MOVLW  04
1C6C:  ADDWF  xF6,W
1C6E:  MOVWF  FEA
1C70:  MOVFF  3F4,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
1C74:  CLRF   03
1C76:  MOVF   xEE,W
1C78:  MOVFF  FF2,3F5
1C7C:  BCF    FF2.7
1C7E:  MOVLB  0
1C80:  RCALL  172A
1C82:  MOVLB  3
1C84:  BTFSC  xF5.7
1C86:  BSF    FF2.7
1C88:  SUBLW  FF
1C8A:  BZ    1D02
....................          { 
....................             new_uep |= 0x02; 
1C8C:  BSF    xF1.1
....................             EP_BDxADR_I(en) = addy; 
1C8E:  MOVF   xEE,W
1C90:  MULLW  08
1C92:  MOVF   FF3,W
1C94:  CLRF   xF6
1C96:  MOVWF  xF5
1C98:  MOVLW  04
1C9A:  ADDWF  xF5,F
1C9C:  MOVLW  00
1C9E:  ADDWFC xF6,F
1CA0:  MOVLW  02
1CA2:  ADDWF  xF5,W
1CA4:  MOVWF  01
1CA6:  MOVLW  00
1CA8:  ADDWFC xF6,W
1CAA:  MOVWF  03
1CAC:  MOVFF  01,FE9
1CB0:  MOVLW  04
1CB2:  ADDWF  03,W
1CB4:  MOVWF  FEA
1CB6:  MOVFF  3F0,FEC
1CBA:  MOVF   FED,F
1CBC:  MOVFF  3EF,FEF
....................             addy += usb_ep_tx_size[en]; 
1CC0:  BCF    FD8.0
1CC2:  RLCF   xEE,W
1CC4:  CLRF   03
1CC6:  MOVFF  FF2,3F5
1CCA:  BCF    FF2.7
1CCC:  MOVLB  0
1CCE:  RCALL  174A
1CD0:  TBLRD*+
1CD2:  MOVFF  FF5,03
1CD6:  MOVLB  3
1CD8:  BTFSC  xF5.7
1CDA:  BSF    FF2.7
1CDC:  ADDWF  xEF,F
1CDE:  MOVF   03,W
1CE0:  ADDWFC xF0,F
....................             EP_BDxST_I(en) = 0x40; 
1CE2:  MOVF   xEE,W
1CE4:  MULLW  08
1CE6:  MOVF   FF3,W
1CE8:  CLRF   xF6
1CEA:  MOVWF  xF5
1CEC:  MOVLW  04
1CEE:  ADDWF  xF5,F
1CF0:  MOVLW  00
1CF2:  ADDWFC xF6,F
1CF4:  MOVFF  3F5,FE9
1CF8:  MOVLW  04
1CFA:  ADDWF  xF6,W
1CFC:  MOVWF  FEA
1CFE:  MOVLW  40
1D00:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
1D02:  MOVF   xF1,W
1D04:  SUBLW  06
1D06:  BNZ   1D0C
1D08:  MOVLW  0E
1D0A:  MOVWF  xF1
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
1D0C:  CLRF   03
1D0E:  MOVF   xEE,W
1D10:  MOVFF  FF2,3F5
1D14:  BCF    FF2.7
1D16:  MOVLB  0
1D18:  RCALL  172A
1D1A:  MOVLB  3
1D1C:  BTFSC  xF5.7
1D1E:  BSF    FF2.7
1D20:  SUBLW  01
1D22:  BTFSS  FD8.2
1D24:  BSF    xF1.4
....................           
....................          UEP(en) = new_uep; 
1D26:  CLRF   03
1D28:  MOVF   xEE,W
1D2A:  ADDLW  70
1D2C:  MOVWF  FE9
1D2E:  MOVLW  0F
1D30:  ADDWFC 03,W
1D32:  MOVWF  FEA
1D34:  MOVFF  3F1,FEF
....................       } 
1D38:  INCF   xEE,F
1D3A:  BRA    1B92
1D3C:  MOVLB  0
....................    } 
.................... } 
1D3E:  GOTO   1DE6 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
1976:  CLRF   03
1978:  MOVLB  3
197A:  MOVF   xF6,W
197C:  ADDLW  70
197E:  MOVWF  FE9
1980:  MOVLW  0F
1982:  ADDWFC 03,W
1984:  MOVWF  FEA
1986:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
1988:  MOVFF  3F6,3F7
198C:  MOVLB  0
198E:  RCALL  1912
1990:  MOVF   01,F
1992:  BZ    19C6
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
1994:  MOVLB  3
1996:  MOVF   xF6,W
1998:  MULLW  08
199A:  MOVF   FF3,W
199C:  CLRF   xF8
199E:  MOVWF  FE9
19A0:  MOVLW  04
19A2:  ADDWF  xF8,W
19A4:  MOVWF  FEA
19A6:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
19A8:  MOVF   xF6,W
19AA:  MULLW  08
19AC:  MOVF   FF3,W
19AE:  CLRF   xF8
19B0:  MOVWF  xF7
19B2:  MOVLW  04
19B4:  ADDWF  xF7,F
19B6:  MOVLW  00
19B8:  ADDWFC xF8,F
19BA:  MOVFF  3F7,FE9
19BE:  MOVLW  04
19C0:  ADDWF  xF8,W
19C2:  MOVWF  FEA
19C4:  CLRF   FEF
19C6:  MOVLB  0
....................    } 
.................... } 
19C8:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
19CA:  MOVLW  01
19CC:  MOVLB  3
19CE:  MOVWF  xF5
19D0:  MOVF   xF5,W
19D2:  SUBLW  0F
19D4:  BNC   19E4
....................       usb_disable_endpoint(i); 
19D6:  MOVFF  3F5,3F6
19DA:  MOVLB  0
19DC:  RCALL  1976
19DE:  MOVLB  3
19E0:  INCF   xF5,F
19E2:  BRA    19D0
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
19E4:  MOVLB  0
19E6:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
23DE:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
23E0:  MOVF   1C,F
23E2:  BNZ   23E6
23E4:  BRA    2462
....................    if (UIR)  
23E6:  MOVF   F68,F
23E8:  BZ    2462
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
23EA:  BTFSS  F68.2
23EC:  BRA    23F6
23EE:  BTFSS  F69.2
23F0:  BRA    23F6
23F2:  GOTO   18CC
....................  
....................       if (UCON_SUSPND) return; 
23F6:  BTFSS  F6D.1
23F8:  BRA    23FC
23FA:  BRA    2462
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
23FC:  BTFSS  F68.5
23FE:  BRA    2408
2400:  BTFSS  F69.5
2402:  BRA    2408
2404:  GOTO   18FC
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
2408:  BTFSS  F68.1
240A:  BRA    2414
240C:  BTFSS  F69.1
240E:  BRA    2414
2410:  GOTO   190A
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
2414:  BTFSS  F68.0
2416:  BRA    2420
2418:  BTFSS  F69.0
241A:  BRA    2420
241C:  GOTO   1A10
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
2420:  BTFSS  F68.4
2422:  BRA    242C
2424:  BTFSS  F69.4
2426:  BRA    242C
2428:  GOTO   1A3C
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
242C:  BTFSS  F68.6
242E:  BRA    2438
2430:  BTFSS  F69.6
2432:  BRA    2438
2434:  GOTO   1A46
....................  
....................       TRNAttempts = 0; 
2438:  MOVLB  3
243A:  CLRF   xEA
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
243C:  BTFSS  F68.3
243E:  BRA    2454
2440:  BTFSS  F69.3
2442:  BRA    2454
....................          { 
....................             USTATCopy = U1STAT; 
2444:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
2448:  MOVLB  0
244A:  CALL   0004
....................             usb_isr_tok_dne(); 
244E:  BRA    2264
....................          } 
....................          else 
2450:  BRA    2456
2452:  MOVLB  3
....................             break; 
2454:  BRA    2460
....................       } while (TRNAttempts++ < 4); 
2456:  MOVLB  3
2458:  MOVF   xEA,W
245A:  INCF   xEA,F
245C:  SUBLW  03
245E:  BC    243C
2460:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
2462:  GOTO   0060
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
1A46:  BCF    F68.6
.................... } 
1A48:  GOTO   2438 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
1A10:  CLRF   F6A
....................    UIR = 0; 
1A12:  CLRF   F68
....................    UEIE = 0x9F; 
1A14:  MOVLW  9F
1A16:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
1A18:  MOVLW  3D
1A1A:  MOVWF  F69
....................  
....................    UADDR = 0; 
1A1C:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
1A1E:  RCALL  19CA
....................     
....................    usb_token_reset(); 
1A20:  RCALL  19E8
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
1A22:  MOVLW  16
1A24:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
1A26:  BTFSS  F68.3
1A28:  BRA    1A30
....................       usb_clear_trn(); 
1A2A:  CALL   0004
....................    } 
1A2E:  BRA    1A26
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
1A30:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
1A32:  RCALL  18DC
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
1A34:  MOVLW  03
1A36:  MOVWF  1C
.................... } 
1A38:  GOTO   2420 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
18DC:  MOVLW  40
18DE:  MOVLB  4
18E0:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
18E2:  MOVLW  04
18E4:  MOVWF  x03
18E6:  MOVLW  10
18E8:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
18EA:  MOVLW  88
18EC:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
18EE:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
18F0:  MOVLW  04
18F2:  MOVWF  x07
18F4:  MOVLW  50
18F6:  MOVWF  x06
.................... } 
18F8:  MOVLB  0
18FA:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
190A:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
190C:  BCF    F68.1
.................... } 
190E:  GOTO   2414 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
1A3C:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
1A3E:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
1A40:  BSF    F6D.1
.................... } 
1A42:  GOTO   242C (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
18CC:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
18CE:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
18D0:  BTFSS  F68.2
18D2:  BRA    18D8
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
18D4:  BCF    F68.2
....................    } 
18D6:  BRA    18D0
.................... } 
18D8:  GOTO   23F6 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
18FC:  BTFSS  F70.0
18FE:  BRA    1904
....................    { 
....................       usb_init_ep0_setup(); 
1900:  RCALL  18DC
....................       bit_clear(UEP(0), 0); 
1902:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
1904:  BCF    F68.5
.................... } 
1906:  GOTO   2408 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
1A4C:  MOVFF  3F0,1D
1A50:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
1A52:  MOVLW  FF
1A54:  MOVWF  1D
1A56:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
2264:  RRCF   1B,W
2266:  MOVLB  3
2268:  MOVWF  xEB
226A:  RRCF   xEB,F
226C:  RRCF   xEB,F
226E:  MOVLW  1F
2270:  ANDWF  xEB,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
2272:  MOVF   1B,F
2274:  BNZ   2314
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
2276:  MOVLB  4
2278:  MOVF   x00,W
227A:  ANDLW  3C
227C:  MOVLB  3
227E:  MOVWF  xEC
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
2280:  MOVLW  43
2282:  MOVLB  4
2284:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
2286:  MOVLB  3
2288:  MOVF   xEC,W
228A:  SUBLW  34
228C:  BNZ   22D8
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
228E:  MOVLB  4
2290:  MOVF   x04,W
2292:  ANDLW  80
2294:  BZ    2298
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
2296:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
2298:  MOVLB  0
229A:  BRA    1FFA
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
229C:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
229E:  INCFSZ 1D,W
22A0:  BRA    22B0
....................             usb_flush_out(0, USB_DTS_STALL); 
22A2:  MOVLB  3
22A4:  CLRF   xED
22A6:  MOVLW  03
22A8:  MOVWF  xEE
22AA:  MOVLB  0
22AC:  RCALL  2026
....................          else  
22AE:  BRA    22D4
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
22B0:  MOVLB  3
22B2:  CLRF   xED
22B4:  MOVLW  02
22B6:  MOVWF  xEE
22B8:  MOVLB  0
22BA:  RCALL  2026
....................             if (__setup_0_tx_size != 0xFE) 
22BC:  MOVF   1D,W
22BE:  SUBLW  FE
22C0:  BZ    22D4
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
22C2:  MOVLB  3
22C4:  CLRF   xED
22C6:  CLRF   xEF
22C8:  MOVFF  1D,3EE
22CC:  MOVLW  04
22CE:  MOVWF  xF0
22D0:  MOVLB  0
22D2:  RCALL  2134
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
22D4:  BRA    2310
22D6:  MOVLB  3
22D8:  MOVF   xEC,W
22DA:  SUBLW  04
22DC:  BNZ   2312
....................       { 
....................          usb_isr_tok_out_dne(0); 
22DE:  CLRF   xED
22E0:  MOVLB  0
22E2:  RCALL  2210
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
22E4:  MOVLB  3
22E6:  CLRF   xED
22E8:  MOVLW  02
22EA:  MOVWF  xEE
22EC:  MOVLB  0
22EE:  RCALL  2026
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
22F0:  MOVF   1D,W
22F2:  SUBLW  FE
22F4:  BZ    230E
22F6:  INCFSZ 1D,W
22F8:  BRA    22FC
22FA:  BRA    230E
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
22FC:  MOVLB  3
22FE:  CLRF   xED
2300:  CLRF   xEF
2302:  MOVFF  1D,3EE
2306:  MOVLW  01
2308:  MOVWF  xF0
230A:  MOVLB  0
230C:  RCALL  2134
....................          } 
....................       } 
....................       else 
230E:  BRA    2310
2310:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
2312:  BRA    23D8
2314:  MOVF   1B,W
2316:  SUBLW  04
2318:  BNZ   234A
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
231A:  MOVLW  43
231C:  MOVLB  4
231E:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
2320:  MOVLW  FF
2322:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
2324:  MOVLB  3
2326:  CLRF   xED
2328:  MOVLB  0
232A:  RCALL  2242
....................       if (__setup_0_tx_size!=0xFF) 
232C:  INCFSZ 1D,W
232E:  BRA    2332
2330:  BRA    2346
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
2332:  MOVLB  3
2334:  CLRF   xED
2336:  CLRF   xEF
2338:  MOVFF  1D,3EE
233C:  MOVLW  02
233E:  MOVWF  xF0
2340:  MOVLB  0
2342:  RCALL  2134
....................       else 
2344:  BRA    2346
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
2346:  BRA    23D6
2348:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
234A:  BTFSC  1B.2
234C:  BRA    2388
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
234E:  MOVF   xEB,W
2350:  MULLW  08
2352:  MOVF   FF3,W
2354:  CLRF   xEE
2356:  MOVWF  01
2358:  MOVLW  04
235A:  ADDWF  xEE,W
235C:  MOVWF  03
235E:  MOVF   xEB,W
2360:  MULLW  08
2362:  MOVF   FF3,W
2364:  CLRF   xF0
2366:  MOVWF  FE9
2368:  MOVLW  04
236A:  ADDWF  xF0,W
236C:  MOVWF  FEA
236E:  MOVF   FEF,W
2370:  ANDLW  43
2372:  MOVFF  03,FEA
2376:  MOVFF  01,FE9
237A:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
237C:  MOVFF  3EB,3ED
2380:  MOVLB  0
2382:  RCALL  2210
....................       } 
....................       else  
2384:  BRA    23D6
2386:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
2388:  MOVF   xEB,W
238A:  MULLW  08
238C:  MOVF   FF3,W
238E:  CLRF   xEE
2390:  MOVWF  xED
2392:  MOVLW  04
2394:  ADDWF  xED,F
2396:  MOVLW  00
2398:  ADDWFC xEE,F
239A:  MOVFF  3ED,01
239E:  MOVLW  04
23A0:  ADDWF  xEE,W
23A2:  MOVWF  03
23A4:  MOVF   xEB,W
23A6:  MULLW  08
23A8:  MOVF   FF3,W
23AA:  CLRF   xF0
23AC:  MOVWF  xEF
23AE:  MOVLW  04
23B0:  ADDWF  xEF,F
23B2:  MOVLW  00
23B4:  ADDWFC xF0,F
23B6:  MOVFF  3EF,FE9
23BA:  MOVLW  04
23BC:  ADDWF  xF0,W
23BE:  MOVWF  FEA
23C0:  MOVF   FEF,W
23C2:  ANDLW  43
23C4:  MOVFF  03,FEA
23C8:  MOVFF  3ED,FE9
23CC:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
23CE:  MOVFF  3EB,3ED
23D2:  MOVLB  0
23D4:  RCALL  2242
23D6:  MOVLB  3
....................       } 
....................    } 
.................... } 
23D8:  MOVLB  0
23DA:  GOTO   2450 (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
3580:  MOVF   18,W
3582:  MOVWF  01
.................... } 
3584:  GOTO   5DB0 (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
19E8:  MOVLB  3
19EA:  CLRF   xEB
19EC:  MOVF   xEB,F
19EE:  BNZ   1A04
....................       USB_Interface[i] = 0;   //reset each interface to default 
19F0:  CLRF   03
19F2:  MOVF   xEB,W
19F4:  ADDLW  21
19F6:  MOVWF  FE9
19F8:  MOVLW  00
19FA:  ADDWFC 03,W
19FC:  MOVWF  FEA
19FE:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
1A00:  INCF   xEB,F
1A02:  BRA    19EC
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
1A04:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
1A06:  MOVLW  01
1A08:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
1A0A:  CLRF   17
.................... } 
1A0C:  MOVLB  0
1A0E:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1912:  MOVLB  3
1914:  BCF    xF8.0
1916:  BTFSC  xF7.7
1918:  BSF    xF8.0
....................     
....................    endpoint &= 0x7F; 
191A:  BCF    xF7.7
....................     
....................    if (endpoint > 16) 
191C:  MOVF   xF7,W
191E:  SUBLW  10
1920:  BC    1928
....................       return(FALSE); 
1922:  MOVLW  00
1924:  MOVWF  01
1926:  BRA    1972
....................     
....................    if (direction) { //IN 
1928:  BTFSS  xF8.0
192A:  BRA    1950
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
192C:  CLRF   03
192E:  MOVF   xF7,W
1930:  MOVFF  FF2,3F9
1934:  BCF    FF2.7
1936:  MOVLB  0
1938:  RCALL  172A
193A:  MOVLB  3
193C:  BTFSC  xF9.7
193E:  BSF    FF2.7
1940:  SUBLW  FF
1942:  BNZ   1948
1944:  MOVLW  00
1946:  BRA    194A
1948:  MOVLW  01
194A:  MOVWF  01
194C:  BRA    1972
....................    } 
....................    else {   //OUT 
194E:  BRA    1972
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
1950:  CLRF   03
1952:  MOVF   xF7,W
1954:  MOVFF  FF2,3F9
1958:  BCF    FF2.7
195A:  MOVLB  0
195C:  RCALL  172A
195E:  MOVLB  3
1960:  BTFSC  xF9.7
1962:  BSF    FF2.7
1964:  SUBLW  FF
1966:  BNZ   196C
1968:  MOVLW  00
196A:  BRA    196E
196C:  MOVLW  01
196E:  MOVWF  01
1970:  BRA    1972
....................    } 
.................... } 
1972:  MOVLB  0
1974:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
2242:  MOVLB  3
2244:  MOVF   xED,F
2246:  BNZ   2260
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
2248:  DECFSZ 17,W
224A:  BRA    2254
224C:  MOVLB  0
224E:  RCALL  1A58
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
2250:  BRA    225E
2252:  MOVLB  3
2254:  MOVF   17,W
2256:  SUBLW  02
2258:  BNZ   2260
225A:  MOVLB  0
225C:  BRA    2234
225E:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
2260:  MOVLB  0
2262:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
2210:  MOVLB  3
2212:  MOVF   xED,F
2214:  BNZ   2216
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
2216:  MOVLB  0
2218:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
1FFA:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
1FFC:  MOVLB  4
1FFE:  MOVF   x10,W
2000:  ANDLW  7F
2002:  XORLW  00
2004:  MOVLB  0
2006:  BZ    2012
2008:  XORLW  01
200A:  BZ    2016
200C:  XORLW  03
200E:  BZ    201A
2010:  BRA    201E
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
2012:  BRA    1D42
....................          break; 
2014:  BRA    2022
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
2016:  BRA    1DFA
....................          break; 
2018:  BRA    2022
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
201A:  BRA    1F90
....................          break; 
201C:  BRA    2022
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
201E:  RCALL  1A52
....................          break; 
2020:  BRA    2022
....................    } 
.................... } 
2022:  GOTO   229C (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
1D42:  MOVLB  4
1D44:  MOVF   x11,W
1D46:  XORLW  00
1D48:  MOVLB  0
1D4A:  BZ    1D66
1D4C:  XORLW  01
1D4E:  BZ    1D7A
1D50:  XORLW  02
1D52:  BZ    1D94
1D54:  XORLW  06
1D56:  BZ    1DAC
1D58:  XORLW  03
1D5A:  BZ    1DBE
1D5C:  XORLW  0E
1D5E:  BZ    1DC2
1D60:  XORLW  01
1D62:  BZ    1DD2
1D64:  BRA    1DF2
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
1D66:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
1D6A:  MOVLB  4
1D6C:  CLRF   x51
....................             usb_request_send_response(2); 
1D6E:  MOVLW  02
1D70:  MOVLB  3
1D72:  MOVWF  xF0
1D74:  MOVLB  0
1D76:  RCALL  1A4C
....................             break; 
1D78:  BRA    1DF6
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1D7A:  MOVLB  4
1D7C:  DECFSZ x12,W
1D7E:  BRA    1D8E
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
1D80:  MOVLW  01
1D82:  ANDWF  19,F
....................                usb_put_0len_0(); 
1D84:  MOVLB  3
1D86:  CLRF   xF0
1D88:  MOVLB  0
1D8A:  RCALL  1A4C
....................             } 
....................             else 
1D8C:  BRA    1D92
....................                usb_request_stall(); 
1D8E:  MOVLB  0
1D90:  RCALL  1A52
....................             break; 
1D92:  BRA    1DF6
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1D94:  MOVLB  4
1D96:  DECFSZ x12,W
1D98:  BRA    1DA6
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
1D9A:  BSF    19.1
....................                usb_put_0len_0(); 
1D9C:  MOVLB  3
1D9E:  CLRF   xF0
1DA0:  MOVLB  0
1DA2:  RCALL  1A4C
....................             } 
....................             else 
1DA4:  BRA    1DAA
....................                usb_request_stall(); 
1DA6:  MOVLB  0
1DA8:  RCALL  1A52
....................             break; 
1DAA:  BRA    1DF6
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
1DAC:  MOVLW  02
1DAE:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
1DB0:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
1DB4:  MOVLB  3
1DB6:  CLRF   xF0
1DB8:  MOVLB  0
1DBA:  RCALL  1A4C
....................             break; 
1DBC:  BRA    1DF6
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
1DBE:  BRA    1AF2
....................             break; 
1DC0:  BRA    1DF6
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
1DC2:  MOVFF  18,450
....................             usb_request_send_response(1); 
1DC6:  MOVLW  01
1DC8:  MOVLB  3
1DCA:  MOVWF  xF0
1DCC:  MOVLB  0
1DCE:  RCALL  1A4C
....................             break; 
1DD0:  BRA    1DF6
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
1DD2:  MOVLB  4
1DD4:  MOVF   x12,W
1DD6:  SUBLW  01
1DD8:  BNC   1DEE
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
1DDA:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
1DDE:  MOVFF  412,3ED
1DE2:  MOVLB  0
1DE4:  BRA    1B70
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
1DE6:  MOVLB  3
1DE8:  CLRF   xF0
1DEA:  MOVLB  0
1DEC:  RCALL  1A4C
....................             } 
....................             break; 
1DEE:  MOVLB  0
1DF0:  BRA    1DF6
....................  
....................       default: 
....................             usb_request_stall(); 
1DF2:  RCALL  1A52
....................             break; 
1DF4:  BRA    1DF6
....................    } 
.................... } 
1DF6:  GOTO   2022 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
1DFA:  MOVFF  18,3ED
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
1DFE:  MOVLB  4
1E00:  MOVF   x11,W
1E02:  XORLW  00
1E04:  MOVLB  0
1E06:  BZ    1E12
1E08:  XORLW  0A
1E0A:  BZ    1E24
1E0C:  XORLW  01
1E0E:  BZ    1E72
1E10:  BRA    1E9C
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
1E12:  MOVLB  4
1E14:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
1E16:  CLRF   x51
....................             usb_request_send_response(2); 
1E18:  MOVLW  02
1E1A:  MOVLB  3
1E1C:  MOVWF  xF0
1E1E:  MOVLB  0
1E20:  RCALL  1A4C
....................             break; 
1E22:  BRA    1EA0
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
1E24:  MOVLB  3
1E26:  MOVF   xED,F
1E28:  BZ    1E6C
1E2A:  MOVLW  01
1E2C:  SUBWF  xED,W
1E2E:  CLRF   03
1E30:  MOVFF  FF2,3EE
1E34:  BCF    FF2.7
1E36:  MOVLB  0
1E38:  RCALL  17BC
1E3A:  MOVLB  3
1E3C:  BTFSC  xEE.7
1E3E:  BSF    FF2.7
1E40:  MOVWF  01
1E42:  MOVLB  4
1E44:  SUBWF  x14,W
1E46:  BTFSS  FD8.0
1E48:  BRA    1E4E
1E4A:  MOVLB  3
1E4C:  BRA    1E6C
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
1E4E:  CLRF   03
1E50:  MOVF   x14,W
1E52:  ADDLW  21
1E54:  MOVWF  FE9
1E56:  MOVLW  00
1E58:  ADDWFC 03,W
1E5A:  MOVWF  FEA
1E5C:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
1E60:  MOVLW  01
1E62:  MOVLB  3
1E64:  MOVWF  xF0
1E66:  MOVLB  0
1E68:  RCALL  1A4C
....................             } 
....................             else 
1E6A:  BRA    1E70
....................                usb_request_stall(); 
1E6C:  MOVLB  0
1E6E:  RCALL  1A52
....................             break; 
1E70:  BRA    1EA0
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
1E72:  MOVLB  3
1E74:  MOVF   xED,F
1E76:  BZ    1E96
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
1E78:  CLRF   03
1E7A:  MOVLB  4
1E7C:  MOVF   x14,W
1E7E:  ADDLW  21
1E80:  MOVWF  FE9
1E82:  MOVLW  00
1E84:  ADDWFC 03,W
1E86:  MOVWF  FEA
1E88:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
1E8C:  MOVLB  3
1E8E:  CLRF   xF0
1E90:  MOVLB  0
1E92:  RCALL  1A4C
....................             } 
....................             else 
1E94:  BRA    1E9A
....................                usb_request_stall(); 
1E96:  MOVLB  0
1E98:  RCALL  1A52
....................             break; 
1E9A:  BRA    1EA0
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
1E9C:  RCALL  1A52
....................             break; 
1E9E:  BRA    1EA0
....................    } 
.................... } 
1EA0:  GOTO   2022 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
1F90:  MOVFF  414,3F7
1F94:  RCALL  1912
1F96:  MOVF   01,F
1F98:  BZ    1FF6
....................       switch(usb_ep0_rx_buffer[1]) { 
1F9A:  MOVLB  4
1F9C:  MOVF   x11,W
1F9E:  XORLW  01
1FA0:  MOVLB  0
1FA2:  BZ    1FAE
1FA4:  XORLW  02
1FA6:  BZ    1FBE
1FA8:  XORLW  03
1FAA:  BZ    1FCE
1FAC:  BRA    1FF2
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
1FAE:  MOVFF  414,3ED
1FB2:  BRA    1EA4
....................                usb_put_0len_0(); 
1FB4:  MOVLB  3
1FB6:  CLRF   xF0
1FB8:  MOVLB  0
1FBA:  RCALL  1A4C
....................                break; 
1FBC:  BRA    1FF6
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
1FBE:  MOVFF  414,3ED
1FC2:  BRA    1EEC
....................                      usb_put_0len_0(); 
1FC4:  MOVLB  3
1FC6:  CLRF   xF0
1FC8:  MOVLB  0
1FCA:  RCALL  1A4C
....................                      break; 
1FCC:  BRA    1FF6
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
1FCE:  MOVLB  4
1FD0:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
1FD2:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
1FD4:  MOVFF  414,3ED
1FD8:  MOVLB  0
1FDA:  BRA    1F36
1FDC:  MOVF   01,F
1FDE:  BZ    1FE6
....................                   usb_ep0_tx_buffer[0]=1; 
1FE0:  MOVLW  01
1FE2:  MOVLB  4
1FE4:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
1FE6:  MOVLW  02
1FE8:  MOVLB  3
1FEA:  MOVWF  xF0
1FEC:  MOVLB  0
1FEE:  RCALL  1A4C
....................                break; 
1FF0:  BRA    1FF6
....................  
....................          default: 
....................             usb_request_stall(); 
1FF2:  RCALL  1A52
....................             break; 
1FF4:  BRA    1FF6
....................       } 
....................    } 
.................... } 
1FF6:  GOTO   2022 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
1AF2:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
1AF4:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
1AF6:  MOVLB  4
1AF8:  MOVF   x13,W
1AFA:  XORLW  01
1AFC:  MOVLB  0
1AFE:  BZ    1B0A
1B00:  XORLW  03
1B02:  BZ    1B14
1B04:  XORLW  01
1B06:  BZ    1B1A
1B08:  BRA    1B50
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
1B0A:  MOVLW  12
1B0C:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
1B0E:  MOVLW  03
1B10:  MOVWF  1A
....................             break; 
1B12:  BRA    1B54
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
1B14:  MOVLW  20
1B16:  MOVWF  20
....................             break; 
1B18:  BRA    1B54
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
1B1A:  MOVLW  02
1B1C:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
1B1E:  CLRF   03
1B20:  MOVLB  4
1B22:  MOVF   x12,W
1B24:  MOVFF  FF2,3ED
1B28:  BCF    FF2.7
1B2A:  MOVLB  0
1B2C:  RCALL  17F0
1B2E:  MOVLB  3
1B30:  BTFSC  xED.7
1B32:  BSF    FF2.7
1B34:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
1B36:  CLRF   03
1B38:  MOVF   1F,W
1B3A:  MOVFF  FF2,3ED
1B3E:  BCF    FF2.7
1B40:  MOVLB  0
1B42:  RCALL  1804
1B44:  MOVLB  3
1B46:  BTFSC  xED.7
1B48:  BSF    FF2.7
1B4A:  MOVWF  20
....................             break; 
1B4C:  MOVLB  0
1B4E:  BRA    1B54
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
1B50:  RCALL  1A52
....................             return; 
1B52:  BRA    1B6C
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
1B54:  MOVLB  4
1B56:  MOVF   x17,F
1B58:  BNZ   1B64
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
1B5A:  MOVF   20,W
1B5C:  SUBWF  x16,W
1B5E:  BC    1B64
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
1B60:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
1B64:  MOVLW  01
1B66:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
1B68:  MOVLB  0
1B6A:  RCALL  1A58
.................... } 
1B6C:  GOTO   1DF6 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
2234:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
2236:  CLRF   17
....................    usb_set_address(USB_address_pending); 
2238:  MOVFF  1E,3EE
223C:  BRA    221A
....................    #endif 
.................... } 
223E:  GOTO   225E (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
1A58:  MOVLB  3
1A5A:  CLRF   xEE
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
1A5C:  MOVF   20,F
1A5E:  BZ    1ADC
1A60:  MOVF   xEE,W
1A62:  SUBLW  3F
1A64:  BNC   1ADC
....................       switch(USB_stack_status.getdesc_type) { 
1A66:  MOVF   1A,W
1A68:  XORLW  00
1A6A:  MOVLB  0
1A6C:  BZ    1A78
1A6E:  XORLW  02
1A70:  BZ    1A90
1A72:  XORLW  01
1A74:  BZ    1AA8
1A76:  BRA    1AC0
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
1A78:  CLRF   03
1A7A:  MOVF   1F,W
1A7C:  MOVFF  FF2,3F0
1A80:  BCF    FF2.7
1A82:  RCALL  178C
1A84:  MOVLB  3
1A86:  BTFSC  xF0.7
1A88:  BSF    FF2.7
1A8A:  MOVWF  xEF
....................             break; 
1A8C:  MOVLB  0
1A8E:  BRA    1AC0
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
1A90:  CLRF   03
1A92:  MOVF   1F,W
1A94:  MOVFF  FF2,3F0
1A98:  BCF    FF2.7
1A9A:  RCALL  1804
1A9C:  MOVLB  3
1A9E:  BTFSC  xF0.7
1AA0:  BSF    FF2.7
1AA2:  MOVWF  xEF
....................             break; 
1AA4:  MOVLB  0
1AA6:  BRA    1AC0
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
1AA8:  CLRF   03
1AAA:  MOVF   1F,W
1AAC:  MOVFF  FF2,3F0
1AB0:  BCF    FF2.7
1AB2:  RCALL  17CE
1AB4:  MOVLB  3
1AB6:  BTFSC  xF0.7
1AB8:  BSF    FF2.7
1ABA:  MOVWF  xEF
....................             break; 
1ABC:  MOVLB  0
1ABE:  BRA    1AC0
....................       } 
....................       usb_getdesc_ptr++; 
1AC0:  INCF   1F,F
....................       usb_getdesc_len--; 
1AC2:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
1AC4:  MOVLB  3
1AC6:  MOVF   xEE,W
1AC8:  INCF   xEE,F
1ACA:  CLRF   03
1ACC:  ADDLW  50
1ACE:  MOVWF  FE9
1AD0:  MOVLW  04
1AD2:  ADDWFC 03,W
1AD4:  MOVWF  FEA
1AD6:  MOVFF  3EF,FEF
....................    } 
1ADA:  BRA    1A5C
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
1ADC:  MOVF   20,F
1ADE:  BNZ   1AE8
1AE0:  MOVF   xEE,W
1AE2:  SUBLW  40
1AE4:  BZ    1AE8
....................          USB_stack_status.dev_req = NONE; 
1AE6:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
1AE8:  MOVFF  3EE,3F0
1AEC:  MOVLB  0
1AEE:  RCALL  1A4C
.................... } 
1AF0:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32; 
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxbuf[Lenbuf]; 
....................  
.................... typedef struct{ 
....................    char Letra[20]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... char  JP[] = "JP Inglobal", Autoclave[] = "Autoclave Vertical",tiempo_est[]="T est=",tiempo_sec[]="T sec="; 
.................... char  Lts[] = "40 Litros",Fle[] = ">",Fle1[]="<",Param[] = "Ciclo?", Tempe_pre[]="T°:121°C"; 
.................... char  Proc[] = "Proceso",Textil[]= "Textil-Instrumental", Calentando[]="Calentando",Level[]="Nivel"; 
.................... char  Preciclo[]= "Pre-Ciclo",Instrumental[]= "Instrumental Suave", Esterilizando[]="Esterilizando",Secando[]="Secando"; 
.................... char  Liquidos[]= "Liquidos", Vacio[]=":",Creado[]= "Libre", T40[]= "T:121°C",Test40[]= "t_est:25m", Tsec40[]= "t_sec:15m",C[]="C"; 
.................... char  TestC[]= "t_est:5m",TsecC[]= "t_sec:5m", TestI[]= "t_est:15m",Desfogue_Lento[]="Desfogue Lento"; 
.................... char  TL[]= "T:121°C",TestL[]= "t_est:20m",TsecL[]= "t_sec:N/A",ok[]= "OK", T[]="Temperatura"; 
.................... char  T_esterilizacion[]="T Esterilizacion",T_secado[]="T Secado",Desfogue[]="Desfogue Rapido",Si[]="Si",Noo[]="No",Finalizado[]="Finalizado"; 
.................... char  Parada[]="Parada", Emergencia[]="Emergencia", Ultimo[]="Ultimo", Puertas[]="Puerta", Abierta[]="Abierta"; 
.................... int8 Menu=16, n_opcionH=32,n_opcionL=16,unidad=11,Flecha=16,Flecha1=3,Flecha2=16, nMenuL=16, nMenuH=32, Flx=36, Fly=8,Liquid=0; 
.................... short estadot40=0,estadoc=0,estadoi=0,estadol=0,estadop=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,emergency=0; 
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int16 tiempos=0,tiempos3=0,m=0,tiempoctrl=0,Minutos=15,Nivel=0; 
.................... short tiempo_esterilizacion=0,tiempo_secado=0,i=0,n=0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0, est=0,Desfogar=0,Des=0,Visua=0,door=0,p=0; 
.................... int8 Setpoint=121,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,fin_ciclo=0,tiempo_desfogue=0,Opcion=0,w=0; 
.................... float V0=0.0,R1=1002.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=0.0,desvio=2.0,d3=0.0; 
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................     
....................    if(x==1){ 
*
316A:  MOVLB  3
316C:  DECFSZ xB4,W
316E:  BRA    3212
....................    for( i = 0 ; i < 64 ; i ++ ) 
3170:  CLRF   xB5
3172:  MOVF   xB5,W
3174:  SUBLW  3F
3176:  BNC   3212
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3178:  CLRF   xB6
317A:  MOVF   xB6,W
317C:  SUBLW  0F
317E:  BNC   320E
....................       {     
....................          for(k=7;k>-1;k--) 
3180:  MOVLW  07
3182:  MOVWF  xB7
3184:  MOVF   xB7,W
3186:  XORLW  80
3188:  SUBLW  7F
318A:  BC    320A
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
318C:  CLRF   xB9
318E:  MOVFF  3B5,3B8
3192:  CLRF   xBB
3194:  MOVLW  10
3196:  MOVWF  xBA
3198:  MOVLB  0
319A:  RCALL  3148
319C:  MOVFF  02,3B9
31A0:  MOVFF  01,3B8
31A4:  MOVLB  3
31A6:  MOVF   xB6,W
31A8:  ADDWF  01,W
31AA:  MOVWF  01
31AC:  MOVLW  00
31AE:  ADDWFC 02,W
31B0:  MOVWF  03
31B2:  MOVF   01,W
31B4:  MOVFF  FF2,3B8
31B8:  BCF    FF2.7
31BA:  MOVFF  03,FF7
31BE:  MOVLB  0
31C0:  CALL   02B2
31C4:  MOVLB  3
31C6:  BTFSC  xB8.7
31C8:  BSF    FF2.7
31CA:  MOVWF  xB8
31CC:  MOVLW  07
31CE:  BSF    FD8.0
31D0:  SUBFWB xB7,W
31D2:  MOVWF  xB9
31D4:  MOVFF  3B8,00
31D8:  MOVF   xB9,W
31DA:  MOVWF  01
31DC:  BZ    31E6
31DE:  BCF    FD8.0
31E0:  RRCF   00,F
31E2:  DECFSZ 01,F
31E4:  BRA    31DE
31E6:  BTFSS  00.0
31E8:  BRA    3206
....................                glcd_pixel( j*8+k,i, ON ); 
31EA:  MOVF   xB6,W
31EC:  MULLW  08
31EE:  MOVF   FF3,W
31F0:  ADDWF  xB7,W
31F2:  MOVWF  xB8
31F4:  MOVWF  xE1
31F6:  MOVFF  3B5,3E2
31FA:  MOVLW  01
31FC:  MOVWF  xE3
31FE:  MOVLB  0
3200:  CALL   282E
3204:  MOVLB  3
....................          }   
3206:  DECF   xB7,F
3208:  BRA    3184
....................       } 
320A:  INCF   xB6,F
320C:  BRA    317A
....................    } 
320E:  INCF   xB5,F
3210:  BRA    3172
....................    } 
....................     
....................    if(x==2){ 
3212:  MOVF   xB4,W
3214:  SUBLW  02
3216:  BNZ   32BA
....................    for( i = 0 ; i < 64 ; i ++ ) 
3218:  CLRF   xB5
321A:  MOVF   xB5,W
321C:  SUBLW  3F
321E:  BNC   32BA
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3220:  CLRF   xB6
3222:  MOVF   xB6,W
3224:  SUBLW  0F
3226:  BNC   32B6
....................       {     
....................          for(k=7;k>-1;k--) 
3228:  MOVLW  07
322A:  MOVWF  xB7
322C:  MOVF   xB7,W
322E:  XORLW  80
3230:  SUBLW  7F
3232:  BC    32B2
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
3234:  CLRF   xB9
3236:  MOVFF  3B5,3B8
323A:  CLRF   xBB
323C:  MOVLW  10
323E:  MOVWF  xBA
3240:  MOVLB  0
3242:  RCALL  3148
3244:  MOVFF  02,3B9
3248:  MOVFF  01,3B8
324C:  MOVLB  3
324E:  MOVF   xB6,W
3250:  ADDWF  01,W
3252:  MOVWF  01
3254:  MOVLW  00
3256:  ADDWFC 02,W
3258:  MOVWF  03
325A:  MOVF   01,W
325C:  MOVFF  FF2,3B8
3260:  BCF    FF2.7
3262:  MOVFF  03,FF7
3266:  MOVLB  0
3268:  CALL   06CA
326C:  MOVLB  3
326E:  BTFSC  xB8.7
3270:  BSF    FF2.7
3272:  MOVWF  xB8
3274:  MOVLW  07
3276:  BSF    FD8.0
3278:  SUBFWB xB7,W
327A:  MOVWF  xB9
327C:  MOVFF  3B8,00
3280:  MOVF   xB9,W
3282:  MOVWF  01
3284:  BZ    328E
3286:  BCF    FD8.0
3288:  RRCF   00,F
328A:  DECFSZ 01,F
328C:  BRA    3286
328E:  BTFSS  00.0
3290:  BRA    32AE
....................                glcd_pixel( j*8+k,i, ON ); 
3292:  MOVF   xB6,W
3294:  MULLW  08
3296:  MOVF   FF3,W
3298:  ADDWF  xB7,W
329A:  MOVWF  xB8
329C:  MOVWF  xE1
329E:  MOVFF  3B5,3E2
32A2:  MOVLW  01
32A4:  MOVWF  xE3
32A6:  MOVLB  0
32A8:  CALL   282E
32AC:  MOVLB  3
....................          }   
32AE:  DECF   xB7,F
32B0:  BRA    322C
....................       } 
32B2:  INCF   xB6,F
32B4:  BRA    3222
....................    } 
32B6:  INCF   xB5,F
32B8:  BRA    321A
....................    } 
....................     
....................    if(x==3){ 
32BA:  MOVF   xB4,W
32BC:  SUBLW  03
32BE:  BNZ   3362
....................    for( i = 0 ; i < 64 ; i ++ ) 
32C0:  CLRF   xB5
32C2:  MOVF   xB5,W
32C4:  SUBLW  3F
32C6:  BNC   3362
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
32C8:  CLRF   xB6
32CA:  MOVF   xB6,W
32CC:  SUBLW  0F
32CE:  BNC   335E
....................       {     
....................          for(k=7;k>-1;k--) 
32D0:  MOVLW  07
32D2:  MOVWF  xB7
32D4:  MOVF   xB7,W
32D6:  XORLW  80
32D8:  SUBLW  7F
32DA:  BC    335A
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
32DC:  CLRF   xB9
32DE:  MOVFF  3B5,3B8
32E2:  CLRF   xBB
32E4:  MOVLW  10
32E6:  MOVWF  xBA
32E8:  MOVLB  0
32EA:  RCALL  3148
32EC:  MOVFF  02,3B9
32F0:  MOVFF  01,3B8
32F4:  MOVLB  3
32F6:  MOVF   xB6,W
32F8:  ADDWF  01,W
32FA:  MOVWF  01
32FC:  MOVLW  00
32FE:  ADDWFC 02,W
3300:  MOVWF  03
3302:  MOVF   01,W
3304:  MOVFF  FF2,3B8
3308:  BCF    FF2.7
330A:  MOVFF  03,FF7
330E:  MOVLB  0
3310:  CALL   0AE2
3314:  MOVLB  3
3316:  BTFSC  xB8.7
3318:  BSF    FF2.7
331A:  MOVWF  xB8
331C:  MOVLW  07
331E:  BSF    FD8.0
3320:  SUBFWB xB7,W
3322:  MOVWF  xB9
3324:  MOVFF  3B8,00
3328:  MOVF   xB9,W
332A:  MOVWF  01
332C:  BZ    3336
332E:  BCF    FD8.0
3330:  RRCF   00,F
3332:  DECFSZ 01,F
3334:  BRA    332E
3336:  BTFSS  00.0
3338:  BRA    3356
....................                glcd_pixel( j*8+k,i, ON ); 
333A:  MOVF   xB6,W
333C:  MULLW  08
333E:  MOVF   FF3,W
3340:  ADDWF  xB7,W
3342:  MOVWF  xB8
3344:  MOVWF  xE1
3346:  MOVFF  3B5,3E2
334A:  MOVLW  01
334C:  MOVWF  xE3
334E:  MOVLB  0
3350:  CALL   282E
3354:  MOVLB  3
....................          }   
3356:  DECF   xB7,F
3358:  BRA    32D4
....................       } 
335A:  INCF   xB6,F
335C:  BRA    32CA
....................    } 
335E:  INCF   xB5,F
3360:  BRA    32C2
....................    } 
....................     
....................    if(x==4){ 
3362:  MOVF   xB4,W
3364:  SUBLW  04
3366:  BNZ   340A
....................    for( i = 0 ; i < 64 ; i ++ ) 
3368:  CLRF   xB5
336A:  MOVF   xB5,W
336C:  SUBLW  3F
336E:  BNC   340A
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3370:  CLRF   xB6
3372:  MOVF   xB6,W
3374:  SUBLW  0F
3376:  BNC   3406
....................       {     
....................          for(k=7;k>-1;k--) 
3378:  MOVLW  07
337A:  MOVWF  xB7
337C:  MOVF   xB7,W
337E:  XORLW  80
3380:  SUBLW  7F
3382:  BC    3402
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
3384:  CLRF   xB9
3386:  MOVFF  3B5,3B8
338A:  CLRF   xBB
338C:  MOVLW  10
338E:  MOVWF  xBA
3390:  MOVLB  0
3392:  RCALL  3148
3394:  MOVFF  02,3B9
3398:  MOVFF  01,3B8
339C:  MOVLB  3
339E:  MOVF   xB6,W
33A0:  ADDWF  01,W
33A2:  MOVWF  01
33A4:  MOVLW  00
33A6:  ADDWFC 02,W
33A8:  MOVWF  03
33AA:  MOVF   01,W
33AC:  MOVFF  FF2,3B8
33B0:  BCF    FF2.7
33B2:  MOVFF  03,FF7
33B6:  MOVLB  0
33B8:  CALL   0EFA
33BC:  MOVLB  3
33BE:  BTFSC  xB8.7
33C0:  BSF    FF2.7
33C2:  MOVWF  xB8
33C4:  MOVLW  07
33C6:  BSF    FD8.0
33C8:  SUBFWB xB7,W
33CA:  MOVWF  xB9
33CC:  MOVFF  3B8,00
33D0:  MOVF   xB9,W
33D2:  MOVWF  01
33D4:  BZ    33DE
33D6:  BCF    FD8.0
33D8:  RRCF   00,F
33DA:  DECFSZ 01,F
33DC:  BRA    33D6
33DE:  BTFSS  00.0
33E0:  BRA    33FE
....................                glcd_pixel( j*8+k,i, ON ); 
33E2:  MOVF   xB6,W
33E4:  MULLW  08
33E6:  MOVF   FF3,W
33E8:  ADDWF  xB7,W
33EA:  MOVWF  xB8
33EC:  MOVWF  xE1
33EE:  MOVFF  3B5,3E2
33F2:  MOVLW  01
33F4:  MOVWF  xE3
33F6:  MOVLB  0
33F8:  CALL   282E
33FC:  MOVLB  3
....................          }   
33FE:  DECF   xB7,F
3400:  BRA    337C
....................       } 
3402:  INCF   xB6,F
3404:  BRA    3372
....................    } 
3406:  INCF   xB5,F
3408:  BRA    336A
....................    } 
....................     
....................    if(x==5){ 
340A:  MOVF   xB4,W
340C:  SUBLW  05
340E:  BNZ   34B2
....................    for( i = 0 ; i < 64 ; i ++ ) 
3410:  CLRF   xB5
3412:  MOVF   xB5,W
3414:  SUBLW  3F
3416:  BNC   34B2
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3418:  CLRF   xB6
341A:  MOVF   xB6,W
341C:  SUBLW  0F
341E:  BNC   34AE
....................       {     
....................          for(k=7;k>-1;k--) 
3420:  MOVLW  07
3422:  MOVWF  xB7
3424:  MOVF   xB7,W
3426:  XORLW  80
3428:  SUBLW  7F
342A:  BC    34AA
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
342C:  CLRF   xB9
342E:  MOVFF  3B5,3B8
3432:  CLRF   xBB
3434:  MOVLW  10
3436:  MOVWF  xBA
3438:  MOVLB  0
343A:  RCALL  3148
343C:  MOVFF  02,3B9
3440:  MOVFF  01,3B8
3444:  MOVLB  3
3446:  MOVF   xB6,W
3448:  ADDWF  01,W
344A:  MOVWF  01
344C:  MOVLW  00
344E:  ADDWFC 02,W
3450:  MOVWF  03
3452:  MOVF   01,W
3454:  MOVFF  FF2,3B8
3458:  BCF    FF2.7
345A:  MOVFF  03,FF7
345E:  MOVLB  0
3460:  CALL   1312
3464:  MOVLB  3
3466:  BTFSC  xB8.7
3468:  BSF    FF2.7
346A:  MOVWF  xB8
346C:  MOVLW  07
346E:  BSF    FD8.0
3470:  SUBFWB xB7,W
3472:  MOVWF  xB9
3474:  MOVFF  3B8,00
3478:  MOVF   xB9,W
347A:  MOVWF  01
347C:  BZ    3486
347E:  BCF    FD8.0
3480:  RRCF   00,F
3482:  DECFSZ 01,F
3484:  BRA    347E
3486:  BTFSS  00.0
3488:  BRA    34A6
....................                glcd_pixel( j*8+k,i, ON ); 
348A:  MOVF   xB6,W
348C:  MULLW  08
348E:  MOVF   FF3,W
3490:  ADDWF  xB7,W
3492:  MOVWF  xB8
3494:  MOVWF  xE1
3496:  MOVFF  3B5,3E2
349A:  MOVLW  01
349C:  MOVWF  xE3
349E:  MOVLB  0
34A0:  CALL   282E
34A4:  MOVLB  3
....................          }   
34A6:  DECF   xB7,F
34A8:  BRA    3424
....................       } 
34AA:  INCF   xB6,F
34AC:  BRA    341A
....................    } 
34AE:  INCF   xB5,F
34B0:  BRA    3412
....................    } 
.................... } 
34B2:  MOVLB  0
34B4:  RETLW  00
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................   if(x==1) 
*
303C:  MOVLB  3
303E:  DECFSZ xB5,W
3040:  BRA    305C
....................    {glcd_text57(7, y, tiempo_est, 1, ON);} 
3042:  MOVLW  07
3044:  MOVWF  xC4
3046:  MOVFF  3B6,3C5
304A:  CLRF   xC7
304C:  MOVLW  95
304E:  MOVWF  xC6
3050:  MOVLW  01
3052:  MOVWF  xC8
3054:  MOVWF  xC9
3056:  MOVLB  0
3058:  RCALL  2910
305A:  MOVLB  3
....................    if(x==2) 
305C:  MOVF   xB5,W
305E:  SUBLW  02
3060:  BNZ   307C
....................    {glcd_text57(7, y, Param, 1, ON);} 
3062:  MOVLW  07
3064:  MOVWF  xC4
3066:  MOVFF  3B6,3C5
306A:  CLRF   xC7
306C:  MOVLW  B1
306E:  MOVWF  xC6
3070:  MOVLW  01
3072:  MOVWF  xC8
3074:  MOVWF  xC9
3076:  MOVLB  0
3078:  RCALL  2910
307A:  MOVLB  3
....................    if(x==3) 
307C:  MOVF   xB5,W
307E:  SUBLW  03
3080:  BNZ   309C
....................    {glcd_text57(7, y, tiempo_sec, 1, ON);  } 
3082:  MOVLW  07
3084:  MOVWF  xC4
3086:  MOVFF  3B6,3C5
308A:  CLRF   xC7
308C:  MOVLW  9C
308E:  MOVWF  xC6
3090:  MOVLW  01
3092:  MOVWF  xC8
3094:  MOVWF  xC9
3096:  MOVLB  0
3098:  RCALL  2910
309A:  MOVLB  3
....................    if(x==4) 
309C:  MOVF   xB5,W
309E:  SUBLW  04
30A0:  BNZ   30BC
....................    {glcd_text57(7, y, Textil, 1, ON);  } 
30A2:  MOVLW  07
30A4:  MOVWF  xC4
30A6:  MOVFF  3B6,3C5
30AA:  CLRF   xC7
30AC:  MOVLW  C9
30AE:  MOVWF  xC6
30B0:  MOVLW  01
30B2:  MOVWF  xC8
30B4:  MOVWF  xC9
30B6:  MOVLB  0
30B8:  RCALL  2910
30BA:  MOVLB  3
....................    if(x==5) 
30BC:  MOVF   xB5,W
30BE:  SUBLW  05
30C0:  BNZ   30DC
....................    {glcd_text57(7, y, Preciclo, 1, ON);  } 
30C2:  MOVLW  07
30C4:  MOVWF  xC4
30C6:  MOVFF  3B6,3C5
30CA:  CLRF   xC7
30CC:  MOVLW  EE
30CE:  MOVWF  xC6
30D0:  MOVLW  01
30D2:  MOVWF  xC8
30D4:  MOVWF  xC9
30D6:  MOVLB  0
30D8:  RCALL  2910
30DA:  MOVLB  3
....................    if(x==6) 
30DC:  MOVF   xB5,W
30DE:  SUBLW  06
30E0:  BNZ   30FC
....................    {glcd_text57(7, y, Instrumental, 1, ON);  } 
30E2:  MOVLW  07
30E4:  MOVWF  xC4
30E6:  MOVFF  3B6,3C5
30EA:  CLRF   xC7
30EC:  MOVLW  F8
30EE:  MOVWF  xC6
30F0:  MOVLW  01
30F2:  MOVWF  xC8
30F4:  MOVWF  xC9
30F6:  MOVLB  0
30F8:  RCALL  2910
30FA:  MOVLB  3
....................    if(x==7) 
30FC:  MOVF   xB5,W
30FE:  SUBLW  07
3100:  BNZ   3120
....................    {glcd_text57(7, y, Liquidos, 1, ON);  } 
3102:  MOVLW  07
3104:  MOVWF  xC4
3106:  MOVFF  3B6,3C5
310A:  MOVLW  01
310C:  MOVWF  xC7
310E:  MOVLW  21
3110:  MOVWF  xC6
3112:  MOVLW  01
3114:  MOVWF  xC8
3116:  MOVWF  xC9
3118:  MOVLB  0
311A:  CALL   2910
311E:  MOVLB  3
....................    if(x==8) 
3120:  MOVF   xB5,W
3122:  SUBLW  08
3124:  BNZ   3144
....................    {glcd_text57(7, y, Creado, 1, ON);  } 
3126:  MOVLW  07
3128:  MOVWF  xC4
312A:  MOVFF  3B6,3C5
312E:  MOVLW  01
3130:  MOVWF  xC7
3132:  MOVLW  2C
3134:  MOVWF  xC6
3136:  MOVLW  01
3138:  MOVWF  xC8
313A:  MOVWF  xC9
313C:  MOVLB  0
313E:  CALL   2910
3142:  MOVLB  3
.................... } 
3144:  MOVLB  0
3146:  RETLW  00
....................   
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(45530);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
*
2466:  MOVLW  B1
2468:  MOVWF  FCF
246A:  MOVLW  DA
246C:  MOVWF  FCE
....................    tiempos++; 
246E:  MOVLB  2
2470:  INCF   x17,F
2472:  BTFSC  FD8.2
2474:  INCF   x18,F
....................    tiempos3++; 
2476:  INCF   x19,F
2478:  BTFSC  FD8.2
247A:  INCF   x1A,F
....................    tiempoctrl++; 
247C:  INCF   x1D,F
247E:  BTFSC  FD8.2
2480:  INCF   x1E,F
....................     
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])&&(Liquid==0)) 
2482:  MOVF   x27,W
2484:  SUBWF  x23,W
2486:  BNZ   24A0
2488:  MOVF   x28,W
248A:  SUBWF  x24,W
248C:  BNZ   24A0
248E:  MOVF   x29,W
2490:  SUBWF  x25,W
2492:  BNZ   24A0
2494:  MOVF   x2A,W
2496:  SUBWF  x26,W
2498:  BNZ   24A0
249A:  MOVF   x14,F
249C:  BNZ   24A0
....................    {tiempo_secado=1;} 
249E:  BSF    x16.3
....................        
....................    if(tiempos3==40) 
24A0:  MOVF   x19,W
24A2:  SUBLW  28
24A4:  BNZ   24B0
24A6:  MOVF   x1A,F
24A8:  BNZ   24B0
....................    {tiempos3=0;Expulsa=1;} 
24AA:  CLRF   x1A
24AC:  CLRF   x19
24AE:  BSF    x16.7
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
24B0:  MOVF   x17,W
24B2:  SUBLW  C8
24B4:  BNZ   2548
24B6:  MOVF   x18,F
24B8:  BNZ   2548
....................    {tiempos=0;Lectura=1; 
24BA:  CLRF   x18
24BC:  CLRF   x17
24BE:  BSF    x16.6
....................     
....................    if(tiempo_desfogue>=30) 
24C0:  MOVF   x3B,W
24C2:  SUBLW  1D
24C4:  BC    24CC
....................    {Desfogar=1;tiempo_desfogue=0;} 
24C6:  BSF    x33.1
24C8:  CLRF   x3B
....................    else 
24CA:  BRA    24D0
....................    {Desfogar=0;tiempo_desfogue++;} 
24CC:  BCF    x33.1
24CE:  INCF   x3B,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
24D0:  BTFSS  x16.2
24D2:  BRA    250C
....................       { 
....................                       
....................       Testerilizacion[0]++; 
24D4:  INCF   x23,F
....................       if(Testerilizacion[0]>9) 
24D6:  BTFSC  x23.7
24D8:  BRA    24E4
24DA:  MOVF   x23,W
24DC:  SUBLW  09
24DE:  BC    24E4
....................          {Testerilizacion[0]=0; 
24E0:  CLRF   x23
....................           Testerilizacion[1]++;} 
24E2:  INCF   x24,F
....................        if(Testerilizacion[1]>5) 
24E4:  BTFSC  x24.7
24E6:  BRA    24F2
24E8:  MOVF   x24,W
24EA:  SUBLW  05
24EC:  BC    24F2
....................          {Testerilizacion[1]=0; 
24EE:  CLRF   x24
....................           Testerilizacion[2]++;} 
24F0:  INCF   x25,F
....................          if(Testerilizacion[2]>9) 
24F2:  BTFSC  x25.7
24F4:  BRA    2500
24F6:  MOVF   x25,W
24F8:  SUBLW  09
24FA:  BC    2500
....................             {Testerilizacion[2]=0; 
24FC:  CLRF   x25
....................              Testerilizacion[3]++;} 
24FE:  INCF   x26,F
....................             if(Testerilizacion[3]>5) 
2500:  BTFSC  x26.7
2502:  BRA    250C
2504:  MOVF   x26,W
2506:  SUBLW  05
2508:  BC    250C
....................                {Testerilizacion[3]=0;} 
250A:  CLRF   x26
....................       }        
....................        
....................     if(tiempo_secado==1) 
250C:  BTFSS  x16.3
250E:  BRA    2548
....................       { 
....................                       
....................       Tsecado[0]++; 
2510:  INCF   x2B,F
....................       if(Tsecado[0]>9) 
2512:  BTFSC  x2B.7
2514:  BRA    2520
2516:  MOVF   x2B,W
2518:  SUBLW  09
251A:  BC    2520
....................          {Tsecado[0]=0; 
251C:  CLRF   x2B
....................           Tsecado[1]++;} 
251E:  INCF   x2C,F
....................        if(Tsecado[1]>5) 
2520:  BTFSC  x2C.7
2522:  BRA    252E
2524:  MOVF   x2C,W
2526:  SUBLW  05
2528:  BC    252E
....................          {Tsecado[1]=0; 
252A:  CLRF   x2C
....................           Tsecado[2]++;} 
252C:  INCF   x2D,F
....................          if(Tsecado[2]>9) 
252E:  BTFSC  x2D.7
2530:  BRA    253C
2532:  MOVF   x2D,W
2534:  SUBLW  09
2536:  BC    253C
....................             {Tsecado[2]=0; 
2538:  CLRF   x2D
....................              Tsecado[3]++;} 
253A:  INCF   x2E,F
....................             if(Tsecado[3]>5) 
253C:  BTFSC  x2E.7
253E:  BRA    2548
2540:  MOVF   x2E,W
2542:  SUBLW  05
2544:  BC    2548
....................                {Tsecado[3]=0;} 
2546:  CLRF   x2E
....................       }   
....................    } 
....................    } 
....................     
2548:  BCF    F9E.0
254A:  MOVLB  0
254C:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
.................... glcd_rect(x1, y, x2, y+7, YES, OFF);            // Clear the old voltage 
*
426E:  MOVLW  07
4270:  MOVLB  3
4272:  ADDWF  xB6,W
4274:  MOVWF  xB7
4276:  MOVFF  3B4,3C6
427A:  MOVFF  3B6,3C7
427E:  MOVFF  3B5,3C8
4282:  MOVWF  xC9
4284:  MOVLW  01
4286:  MOVWF  xCA
4288:  CLRF   xCB
428A:  MOVLB  0
428C:  CALL   2DB2
.................... } 
4290:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       sprintf(voltage, "%1.1f",adc); // Converts adc to text 
*
41FC:  MOVLW  03
41FE:  MOVLB  2
4200:  MOVWF  x73
4202:  MOVLW  BB
4204:  MOVWF  x72
4206:  MOVLW  89
4208:  MOVWF  FE9
420A:  MOVFF  3B7,3C7
420E:  MOVFF  3B6,3C6
4212:  MOVFF  3B5,3C5
4216:  MOVFF  3B4,3C4
421A:  MOVLW  01
421C:  MOVLB  3
421E:  MOVWF  xC8
4220:  MOVLB  0
4222:  BRA    4048
....................       glcd_rect(x, y, x+53, y+15, YES, OFF);glcd_text57(x, y, voltage, 2, ON); 
4224:  MOVLW  35
4226:  MOVLB  3
4228:  ADDWF  xB8,W
422A:  MOVWF  xC4
422C:  MOVLW  0F
422E:  ADDWF  xB9,W
4230:  MOVWF  xC5
4232:  MOVFF  3B8,3C6
4236:  MOVFF  3B9,3C7
423A:  MOVFF  3C4,3C8
423E:  MOVWF  xC9
4240:  MOVLW  01
4242:  MOVWF  xCA
4244:  CLRF   xCB
4246:  MOVLB  0
4248:  CALL   2DB2
424C:  MOVFF  3B8,3C4
4250:  MOVFF  3B9,3C5
4254:  MOVLW  03
4256:  MOVLB  3
4258:  MOVWF  xC7
425A:  MOVLW  BB
425C:  MOVWF  xC6
425E:  MOVLW  02
4260:  MOVWF  xC8
4262:  MOVLW  01
4264:  MOVWF  xC9
4266:  MOVLB  0
4268:  CALL   2910
....................        
.................... } 
426C:  RETLW  00
....................   
.................... void displayTiempo(int adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       if(w<4) 
*
2E74:  MOVLB  3
2E76:  MOVF   xB8,W
2E78:  SUBLW  03
2E7A:  BNC   2E96
....................       {sprintf(voltage, "%i",adc);} // Converts adc to text 
2E7C:  MOVLW  03
2E7E:  MOVLB  2
2E80:  MOVWF  x73
2E82:  MOVLW  B9
2E84:  MOVWF  x72
2E86:  MOVFF  3B5,3C2
2E8A:  MOVLW  1F
2E8C:  MOVLB  3
2E8E:  MOVWF  xC3
2E90:  MOVLB  0
2E92:  BRA    2B16
....................       else 
2E94:  BRA    2EAE
....................       {sprintf(voltage, "%u",adc);} // Converts adc to text 
2E96:  MOVLW  03
2E98:  MOVLB  2
2E9A:  MOVWF  x73
2E9C:  MOVLW  B9
2E9E:  MOVWF  x72
2EA0:  MOVFF  3B5,3C2
2EA4:  MOVLW  1B
2EA6:  MOVLB  3
2EA8:  MOVWF  xC3
2EAA:  MOVLB  0
2EAC:  BRA    2BF6
....................       if(w==0) 
2EAE:  MOVLB  3
2EB0:  MOVF   xB8,F
2EB2:  BNZ   2ED0
....................       {glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
2EB4:  MOVFF  3B6,3C4
2EB8:  MOVFF  3B7,3C5
2EBC:  MOVLW  03
2EBE:  MOVWF  xC7
2EC0:  MOVLW  B9
2EC2:  MOVWF  xC6
2EC4:  MOVLW  01
2EC6:  MOVWF  xC8
2EC8:  MOVWF  xC9
2ECA:  MOVLB  0
2ECC:  RCALL  2910
2ECE:  MOVLB  3
....................       if(w==1) 
2ED0:  DECFSZ xB8,W
2ED2:  BRA    2F16
....................       {glcd_rect(x, y, x+5, y+7, YES, OFF);glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
2ED4:  MOVLW  05
2ED6:  ADDWF  xB6,W
2ED8:  MOVWF  xC2
2EDA:  MOVLW  07
2EDC:  ADDWF  xB7,W
2EDE:  MOVWF  xC3
2EE0:  MOVFF  3B6,3C6
2EE4:  MOVFF  3B7,3C7
2EE8:  MOVFF  3C2,3C8
2EEC:  MOVWF  xC9
2EEE:  MOVLW  01
2EF0:  MOVWF  xCA
2EF2:  CLRF   xCB
2EF4:  MOVLB  0
2EF6:  RCALL  2DB2
2EF8:  MOVFF  3B6,3C4
2EFC:  MOVFF  3B7,3C5
2F00:  MOVLW  03
2F02:  MOVLB  3
2F04:  MOVWF  xC7
2F06:  MOVLW  B9
2F08:  MOVWF  xC6
2F0A:  MOVLW  01
2F0C:  MOVWF  xC8
2F0E:  MOVWF  xC9
2F10:  MOVLB  0
2F12:  RCALL  2910
2F14:  MOVLB  3
....................       if(w==2) 
2F16:  MOVF   xB8,W
2F18:  SUBLW  02
2F1A:  BNZ   2F5E
....................       {glcd_rect(x, y, x+5, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
2F1C:  MOVLW  05
2F1E:  ADDWF  xB6,W
2F20:  MOVWF  xC2
2F22:  MOVLW  07
2F24:  ADDWF  xB7,W
2F26:  MOVWF  xC3
2F28:  MOVFF  3B6,3C6
2F2C:  MOVFF  3B7,3C7
2F30:  MOVFF  3C2,3C8
2F34:  MOVWF  xC9
2F36:  MOVLW  01
2F38:  MOVWF  xCA
2F3A:  MOVWF  xCB
2F3C:  MOVLB  0
2F3E:  RCALL  2DB2
2F40:  MOVFF  3B6,3C4
2F44:  MOVFF  3B7,3C5
2F48:  MOVLW  03
2F4A:  MOVLB  3
2F4C:  MOVWF  xC7
2F4E:  MOVLW  B9
2F50:  MOVWF  xC6
2F52:  MOVLW  01
2F54:  MOVWF  xC8
2F56:  CLRF   xC9
2F58:  MOVLB  0
2F5A:  RCALL  2910
2F5C:  MOVLB  3
....................       if(w==3) 
2F5E:  MOVF   xB8,W
2F60:  SUBLW  03
2F62:  BNZ   2FA8
....................       {glcd_rect(x, y, x+20, y+28, YES, OFF);glcd_text57(x, y, voltage, 2, ON);}            // Clear the old voltage 
2F64:  MOVLW  14
2F66:  ADDWF  xB6,W
2F68:  MOVWF  xC2
2F6A:  MOVLW  1C
2F6C:  ADDWF  xB7,W
2F6E:  MOVWF  xC3
2F70:  MOVFF  3B6,3C6
2F74:  MOVFF  3B7,3C7
2F78:  MOVFF  3C2,3C8
2F7C:  MOVWF  xC9
2F7E:  MOVLW  01
2F80:  MOVWF  xCA
2F82:  CLRF   xCB
2F84:  MOVLB  0
2F86:  RCALL  2DB2
2F88:  MOVFF  3B6,3C4
2F8C:  MOVFF  3B7,3C5
2F90:  MOVLW  03
2F92:  MOVLB  3
2F94:  MOVWF  xC7
2F96:  MOVLW  B9
2F98:  MOVWF  xC6
2F9A:  MOVLW  02
2F9C:  MOVWF  xC8
2F9E:  MOVLW  01
2FA0:  MOVWF  xC9
2FA2:  MOVLB  0
2FA4:  RCALL  2910
2FA6:  MOVLB  3
....................       if(w==4) 
2FA8:  MOVF   xB8,W
2FAA:  SUBLW  04
2FAC:  BNZ   2FF0
....................       {glcd_rect(x, y, x+16, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
2FAE:  MOVLW  10
2FB0:  ADDWF  xB6,W
2FB2:  MOVWF  xC2
2FB4:  MOVLW  07
2FB6:  ADDWF  xB7,W
2FB8:  MOVWF  xC3
2FBA:  MOVFF  3B6,3C6
2FBE:  MOVFF  3B7,3C7
2FC2:  MOVFF  3C2,3C8
2FC6:  MOVWF  xC9
2FC8:  MOVLW  01
2FCA:  MOVWF  xCA
2FCC:  MOVWF  xCB
2FCE:  MOVLB  0
2FD0:  RCALL  2DB2
2FD2:  MOVFF  3B6,3C4
2FD6:  MOVFF  3B7,3C5
2FDA:  MOVLW  03
2FDC:  MOVLB  3
2FDE:  MOVWF  xC7
2FE0:  MOVLW  B9
2FE2:  MOVWF  xC6
2FE4:  MOVLW  01
2FE6:  MOVWF  xC8
2FE8:  CLRF   xC9
2FEA:  MOVLB  0
2FEC:  RCALL  2910
2FEE:  MOVLB  3
....................       if(w==5) 
2FF0:  MOVF   xB8,W
2FF2:  SUBLW  05
2FF4:  BNZ   3038
....................       {glcd_rect(x, y, x+12, y+16, YES, ON);glcd_text57(x, y, voltage, 2, OFF);}            // Clear the old voltage 
2FF6:  MOVLW  0C
2FF8:  ADDWF  xB6,W
2FFA:  MOVWF  xC2
2FFC:  MOVLW  10
2FFE:  ADDWF  xB7,W
3000:  MOVWF  xC3
3002:  MOVFF  3B6,3C6
3006:  MOVFF  3B7,3C7
300A:  MOVFF  3C2,3C8
300E:  MOVWF  xC9
3010:  MOVLW  01
3012:  MOVWF  xCA
3014:  MOVWF  xCB
3016:  MOVLB  0
3018:  RCALL  2DB2
301A:  MOVFF  3B6,3C4
301E:  MOVFF  3B7,3C5
3022:  MOVLW  03
3024:  MOVLB  3
3026:  MOVWF  xC7
3028:  MOVLW  B9
302A:  MOVWF  xC6
302C:  MOVLW  02
302E:  MOVWF  xC8
3030:  CLRF   xC9
3032:  MOVLB  0
3034:  RCALL  2910
3036:  MOVLB  3
....................        
.................... } 
3038:  MOVLB  0
303A:  RETLW  00
....................  
.................... void displayMenu(char palabra[100], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
34B6:  MOVLB  3
34B8:  MOVFF  3B4,01
34BC:  MOVFF  3B5,03
34C0:  MOVFF  3B4,3BA
34C4:  MOVFF  3B5,3BB
34C8:  CLRF   FEA
34CA:  MOVLW  62
34CC:  MOVWF  FE9
34CE:  MOVFF  3B5,FE2
34D2:  MOVFF  3B4,FE1
34D6:  MOVF   FE7,F
34D8:  MOVFF  FE6,FEE
34DC:  BNZ   34D6
....................    if(sombreado==1) 
34DE:  DECFSZ xB8,W
34E0:  BRA    352C
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
34E2:  MOVF   xB9,W
34E4:  MULLW  08
34E6:  MOVF   FF3,W
34E8:  ADDWF  xB7,W
34EA:  MOVWF  xBA
34EC:  CLRF   xC6
34EE:  MOVFF  3B7,3C7
34F2:  MOVLW  7F
34F4:  MOVWF  xC8
34F6:  MOVFF  3BA,3C9
34FA:  MOVLW  01
34FC:  MOVWF  xCA
34FE:  MOVWF  xCB
3500:  MOVLB  0
3502:  RCALL  2DB2
3504:  MOVLW  01
3506:  MOVLB  3
3508:  ADDWF  xB6,W
350A:  MOVWF  xBA
350C:  MOVLW  01
350E:  ADDWF  xB7,W
3510:  MOVWF  xBB
3512:  MOVFF  3BA,3C4
3516:  MOVWF  xC5
3518:  CLRF   xC7
351A:  MOVLW  62
351C:  MOVWF  xC6
351E:  MOVFF  3B9,3C8
3522:  CLRF   xC9
3524:  MOVLB  0
3526:  CALL   2910
352A:  MOVLB  3
....................    if(sombreado==0) 
352C:  MOVF   xB8,F
352E:  BNZ   357C
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
3530:  MOVF   xB9,W
3532:  MULLW  08
3534:  MOVF   FF3,W
3536:  ADDWF  xB7,W
3538:  MOVWF  xBA
353A:  CLRF   xC6
353C:  MOVFF  3B7,3C7
3540:  MOVLW  7F
3542:  MOVWF  xC8
3544:  MOVFF  3BA,3C9
3548:  MOVLW  01
354A:  MOVWF  xCA
354C:  CLRF   xCB
354E:  MOVLB  0
3550:  RCALL  2DB2
3552:  MOVLW  01
3554:  MOVLB  3
3556:  ADDWF  xB6,W
3558:  MOVWF  xBA
355A:  MOVLW  01
355C:  ADDWF  xB7,W
355E:  MOVWF  xBB
3560:  MOVFF  3BA,3C4
3564:  MOVWF  xC5
3566:  CLRF   xC7
3568:  MOVLW  62
356A:  MOVWF  xC6
356C:  MOVFF  3B9,3C8
3570:  MOVLW  01
3572:  MOVWF  xC9
3574:  MOVLB  0
3576:  CALL   2910
357A:  MOVLB  3
....................  
.................... } 
357C:  MOVLB  0
357E:  RETLW  00
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
25B0:  MOVLB  3
25B2:  RLCF   xB4,W
25B4:  MOVWF  00
25B6:  RLCF   00,F
25B8:  MOVLW  FC
25BA:  ANDWF  00,F
25BC:  MOVFF  00,01
25C0:  MOVF   FC2,W
25C2:  ANDLW  C3
25C4:  IORWF  00,W
25C6:  MOVWF  FC2
25C8:  MOVLW  0A
25CA:  MOVWF  xB9
25CC:  MOVLB  0
25CE:  RCALL  2550
25D0:  BSF    FC2.1
25D2:  BTFSC  FC2.1
25D4:  BRA    25D2
25D6:  MOVFF  FC4,3BA
25DA:  MOVFF  FC3,3B9
25DE:  MOVLB  0
25E0:  RCALL  257A
25E2:  MOVFF  03,3B8
25E6:  MOVFF  02,3B7
25EA:  MOVFF  01,3B6
25EE:  MOVFF  00,3B5
25F2:  MOVFF  3B5,00
25F6:  MOVFF  3B6,01
25FA:  MOVFF  3B7,02
25FE:  MOVFF  3B8,03
.................... } 
2602:  RETLW  00
....................  
....................  
.................... void main() 
.................... { 
*
4292:  CLRF   FF8
4294:  BCF    FD0.7
4296:  BSF    07.7
4298:  CLRF   FEA
429A:  CLRF   FE9
429C:  CLRF   1C
429E:  CLRF   20
42A0:  MOVLW  10
42A2:  MOVLB  2
42A4:  MOVWF  x09
42A6:  MOVLW  20
42A8:  MOVWF  x0A
42AA:  MOVLW  10
42AC:  MOVWF  x0B
42AE:  MOVLW  0B
42B0:  MOVWF  x0C
42B2:  MOVLW  10
42B4:  MOVWF  x0D
42B6:  MOVLW  03
42B8:  MOVWF  x0E
42BA:  MOVLW  10
42BC:  MOVWF  x0F
42BE:  MOVWF  x10
42C0:  MOVLW  20
42C2:  MOVWF  x11
42C4:  MOVLW  24
42C6:  MOVWF  x12
42C8:  MOVLW  08
42CA:  MOVWF  x13
42CC:  CLRF   x14
42CE:  BCF    x15.0
42D0:  BCF    x15.1
42D2:  BCF    x15.2
42D4:  BCF    x15.3
42D6:  BCF    x15.4
42D8:  BCF    x15.5
42DA:  BCF    x15.6
42DC:  BCF    x15.7
42DE:  BCF    x16.0
42E0:  BCF    x16.1
42E2:  CLRF   x18
42E4:  CLRF   x17
42E6:  CLRF   x1A
42E8:  CLRF   x19
42EA:  CLRF   x1C
42EC:  CLRF   x1B
42EE:  CLRF   x1E
42F0:  CLRF   x1D
42F2:  CLRF   x20
42F4:  MOVLW  0F
42F6:  MOVWF  x1F
42F8:  CLRF   x22
42FA:  CLRF   x21
42FC:  BCF    x16.2
42FE:  BCF    x16.3
4300:  BCF    x16.4
4302:  BCF    x16.5
4304:  BCF    x16.6
4306:  BCF    x16.7
4308:  BCF    x33.0
430A:  BCF    x33.1
430C:  BCF    x33.2
430E:  BCF    x33.3
4310:  BCF    x33.4
4312:  BCF    x33.5
4314:  MOVLW  79
4316:  MOVWF  x34
4318:  CLRF   x35
431A:  CLRF   x36
431C:  CLRF   x37
431E:  CLRF   x38
4320:  CLRF   x39
4322:  CLRF   x3A
4324:  CLRF   x3B
4326:  CLRF   x3C
4328:  CLRF   x3D
432A:  CLRF   x41
432C:  CLRF   x40
432E:  CLRF   x3F
4330:  CLRF   x3E
4332:  CLRF   x45
4334:  MOVLW  80
4336:  MOVWF  x44
4338:  MOVLW  7A
433A:  MOVWF  x43
433C:  MOVLW  88
433E:  MOVWF  x42
4340:  CLRF   x4D
4342:  CLRF   x4C
4344:  MOVLW  20
4346:  MOVWF  x4B
4348:  MOVLW  82
434A:  MOVWF  x4A
434C:  CLRF   x51
434E:  CLRF   x50
4350:  CLRF   x4F
4352:  CLRF   x4E
4354:  CLRF   x55
4356:  CLRF   x54
4358:  CLRF   x53
435A:  CLRF   x52
435C:  CLRF   x59
435E:  CLRF   x58
4360:  CLRF   x57
4362:  CLRF   x56
4364:  CLRF   x5D
4366:  CLRF   x5C
4368:  CLRF   x5B
436A:  CLRF   x5A
436C:  CLRF   x61
436E:  CLRF   x60
4370:  CLRF   x5F
4372:  CLRF   x5E
4374:  CLRF   x65
4376:  CLRF   x64
4378:  MOVLW  48
437A:  MOVWF  x63
437C:  MOVLW  83
437E:  MOVWF  x62
4380:  CLRF   x69
4382:  CLRF   x68
4384:  CLRF   x67
4386:  CLRF   x66
4388:  CLRF   x6D
438A:  CLRF   x6C
438C:  CLRF   x6B
438E:  MOVLW  80
4390:  MOVWF  x6A
4392:  CLRF   x71
4394:  CLRF   x70
4396:  CLRF   x6F
4398:  CLRF   x6E
439A:  MOVF   FC1,W
439C:  ANDLW  C0
439E:  IORLW  0F
43A0:  MOVWF  FC1
43A2:  MOVLW  07
43A4:  MOVWF  FB4
43A6:  MOVLW  4A
43A8:  MOVLB  0
43AA:  MOVWF  x76
43AC:  MOVLW  50
43AE:  MOVWF  x77
43B0:  MOVLW  20
43B2:  MOVWF  x78
43B4:  MOVLW  49
43B6:  MOVWF  x79
43B8:  MOVLW  6E
43BA:  MOVWF  x7A
43BC:  MOVLW  67
43BE:  MOVWF  x7B
43C0:  MOVLW  6C
43C2:  MOVWF  x7C
43C4:  MOVLW  6F
43C6:  MOVWF  x7D
43C8:  MOVLW  62
43CA:  MOVWF  x7E
43CC:  MOVLW  61
43CE:  MOVWF  x7F
43D0:  MOVLW  6C
43D2:  MOVWF  x80
43D4:  CLRF   x81
43D6:  MOVLW  41
43D8:  MOVWF  x82
43DA:  MOVLW  75
43DC:  MOVWF  x83
43DE:  MOVLW  74
43E0:  MOVWF  x84
43E2:  MOVLW  6F
43E4:  MOVWF  x85
43E6:  MOVLW  63
43E8:  MOVWF  x86
43EA:  MOVLW  6C
43EC:  MOVWF  x87
43EE:  MOVLW  61
43F0:  MOVWF  x88
43F2:  MOVLW  76
43F4:  MOVWF  x89
43F6:  MOVLW  65
43F8:  MOVWF  x8A
43FA:  MOVLW  20
43FC:  MOVWF  x8B
43FE:  MOVLW  56
4400:  MOVWF  x8C
4402:  MOVLW  65
4404:  MOVWF  x8D
4406:  MOVLW  72
4408:  MOVWF  x8E
440A:  MOVLW  74
440C:  MOVWF  x8F
440E:  MOVLW  69
4410:  MOVWF  x90
4412:  MOVLW  63
4414:  MOVWF  x91
4416:  MOVLW  61
4418:  MOVWF  x92
441A:  MOVLW  6C
441C:  MOVWF  x93
441E:  CLRF   x94
4420:  MOVLW  54
4422:  MOVWF  x95
4424:  MOVLW  20
4426:  MOVWF  x96
4428:  MOVLW  65
442A:  MOVWF  x97
442C:  MOVLW  73
442E:  MOVWF  x98
4430:  MOVLW  74
4432:  MOVWF  x99
4434:  MOVLW  3D
4436:  MOVWF  x9A
4438:  CLRF   x9B
443A:  MOVLW  54
443C:  MOVWF  x9C
443E:  MOVLW  20
4440:  MOVWF  x9D
4442:  MOVLW  73
4444:  MOVWF  x9E
4446:  MOVLW  65
4448:  MOVWF  x9F
444A:  MOVLW  63
444C:  MOVWF  xA0
444E:  MOVLW  3D
4450:  MOVWF  xA1
4452:  CLRF   xA2
4454:  MOVLW  34
4456:  MOVWF  xA3
4458:  MOVLW  30
445A:  MOVWF  xA4
445C:  MOVLW  20
445E:  MOVWF  xA5
4460:  MOVLW  4C
4462:  MOVWF  xA6
4464:  MOVLW  69
4466:  MOVWF  xA7
4468:  MOVLW  74
446A:  MOVWF  xA8
446C:  MOVLW  72
446E:  MOVWF  xA9
4470:  MOVLW  6F
4472:  MOVWF  xAA
4474:  MOVLW  73
4476:  MOVWF  xAB
4478:  CLRF   xAC
447A:  MOVLW  3E
447C:  MOVWF  xAD
447E:  CLRF   xAE
4480:  MOVLW  3C
4482:  MOVWF  xAF
4484:  CLRF   xB0
4486:  MOVLW  43
4488:  MOVWF  xB1
448A:  MOVLW  69
448C:  MOVWF  xB2
448E:  MOVLW  63
4490:  MOVWF  xB3
4492:  MOVLW  6C
4494:  MOVWF  xB4
4496:  MOVLW  6F
4498:  MOVWF  xB5
449A:  MOVLW  3F
449C:  MOVWF  xB6
449E:  CLRF   xB7
44A0:  MOVLW  54
44A2:  MOVWF  xB8
44A4:  MOVLW  B0
44A6:  MOVWF  xB9
44A8:  MOVLW  3A
44AA:  MOVWF  xBA
44AC:  MOVLW  31
44AE:  MOVWF  xBB
44B0:  MOVLW  32
44B2:  MOVWF  xBC
44B4:  MOVLW  31
44B6:  MOVWF  xBD
44B8:  MOVLW  B0
44BA:  MOVWF  xBE
44BC:  MOVLW  43
44BE:  MOVWF  xBF
44C0:  CLRF   xC0
44C2:  MOVLW  50
44C4:  MOVWF  xC1
44C6:  MOVLW  72
44C8:  MOVWF  xC2
44CA:  MOVLW  6F
44CC:  MOVWF  xC3
44CE:  MOVLW  63
44D0:  MOVWF  xC4
44D2:  MOVLW  65
44D4:  MOVWF  xC5
44D6:  MOVLW  73
44D8:  MOVWF  xC6
44DA:  MOVLW  6F
44DC:  MOVWF  xC7
44DE:  CLRF   xC8
44E0:  MOVLW  54
44E2:  MOVWF  xC9
44E4:  MOVLW  65
44E6:  MOVWF  xCA
44E8:  MOVLW  78
44EA:  MOVWF  xCB
44EC:  MOVLW  74
44EE:  MOVWF  xCC
44F0:  MOVLW  69
44F2:  MOVWF  xCD
44F4:  MOVLW  6C
44F6:  MOVWF  xCE
44F8:  MOVLW  2D
44FA:  MOVWF  xCF
44FC:  MOVLW  49
44FE:  MOVWF  xD0
4500:  MOVLW  6E
4502:  MOVWF  xD1
4504:  MOVLW  73
4506:  MOVWF  xD2
4508:  MOVLW  74
450A:  MOVWF  xD3
450C:  MOVLW  72
450E:  MOVWF  xD4
4510:  MOVLW  75
4512:  MOVWF  xD5
4514:  MOVLW  6D
4516:  MOVWF  xD6
4518:  MOVLW  65
451A:  MOVWF  xD7
451C:  MOVLW  6E
451E:  MOVWF  xD8
4520:  MOVLW  74
4522:  MOVWF  xD9
4524:  MOVLW  61
4526:  MOVWF  xDA
4528:  MOVLW  6C
452A:  MOVWF  xDB
452C:  CLRF   xDC
452E:  MOVLW  43
4530:  MOVWF  xDD
4532:  MOVLW  61
4534:  MOVWF  xDE
4536:  MOVLW  6C
4538:  MOVWF  xDF
453A:  MOVLW  65
453C:  MOVWF  xE0
453E:  MOVLW  6E
4540:  MOVWF  xE1
4542:  MOVLW  74
4544:  MOVWF  xE2
4546:  MOVLW  61
4548:  MOVWF  xE3
454A:  MOVLW  6E
454C:  MOVWF  xE4
454E:  MOVLW  64
4550:  MOVWF  xE5
4552:  MOVLW  6F
4554:  MOVWF  xE6
4556:  CLRF   xE7
4558:  MOVLW  4E
455A:  MOVWF  xE8
455C:  MOVLW  69
455E:  MOVWF  xE9
4560:  MOVLW  76
4562:  MOVWF  xEA
4564:  MOVLW  65
4566:  MOVWF  xEB
4568:  MOVLW  6C
456A:  MOVWF  xEC
456C:  CLRF   xED
456E:  MOVLW  50
4570:  MOVWF  xEE
4572:  MOVLW  72
4574:  MOVWF  xEF
4576:  MOVLW  65
4578:  MOVWF  xF0
457A:  MOVLW  2D
457C:  MOVWF  xF1
457E:  MOVLW  43
4580:  MOVWF  xF2
4582:  MOVLW  69
4584:  MOVWF  xF3
4586:  MOVLW  63
4588:  MOVWF  xF4
458A:  MOVLW  6C
458C:  MOVWF  xF5
458E:  MOVLW  6F
4590:  MOVWF  xF6
4592:  CLRF   xF7
4594:  MOVLW  49
4596:  MOVWF  xF8
4598:  MOVLW  6E
459A:  MOVWF  xF9
459C:  MOVLW  73
459E:  MOVWF  xFA
45A0:  MOVLW  74
45A2:  MOVWF  xFB
45A4:  MOVLW  72
45A6:  MOVWF  xFC
45A8:  MOVLW  75
45AA:  MOVWF  xFD
45AC:  MOVLW  6D
45AE:  MOVWF  xFE
45B0:  MOVLW  65
45B2:  MOVWF  xFF
45B4:  MOVLW  6E
45B6:  MOVLB  1
45B8:  MOVWF  x00
45BA:  MOVLW  74
45BC:  MOVWF  x01
45BE:  MOVLW  61
45C0:  MOVWF  x02
45C2:  MOVLW  6C
45C4:  MOVWF  x03
45C6:  MOVLW  20
45C8:  MOVWF  x04
45CA:  MOVLW  53
45CC:  MOVWF  x05
45CE:  MOVLW  75
45D0:  MOVWF  x06
45D2:  MOVLW  61
45D4:  MOVWF  x07
45D6:  MOVLW  76
45D8:  MOVWF  x08
45DA:  MOVLW  65
45DC:  MOVWF  x09
45DE:  CLRF   x0A
45E0:  MOVLW  45
45E2:  MOVWF  x0B
45E4:  MOVLW  73
45E6:  MOVWF  x0C
45E8:  MOVLW  74
45EA:  MOVWF  x0D
45EC:  MOVLW  65
45EE:  MOVWF  x0E
45F0:  MOVLW  72
45F2:  MOVWF  x0F
45F4:  MOVLW  69
45F6:  MOVWF  x10
45F8:  MOVLW  6C
45FA:  MOVWF  x11
45FC:  MOVLW  69
45FE:  MOVWF  x12
4600:  MOVLW  7A
4602:  MOVWF  x13
4604:  MOVLW  61
4606:  MOVWF  x14
4608:  MOVLW  6E
460A:  MOVWF  x15
460C:  MOVLW  64
460E:  MOVWF  x16
4610:  MOVLW  6F
4612:  MOVWF  x17
4614:  CLRF   x18
4616:  MOVLW  53
4618:  MOVWF  x19
461A:  MOVLW  65
461C:  MOVWF  x1A
461E:  MOVLW  63
4620:  MOVWF  x1B
4622:  MOVLW  61
4624:  MOVWF  x1C
4626:  MOVLW  6E
4628:  MOVWF  x1D
462A:  MOVLW  64
462C:  MOVWF  x1E
462E:  MOVLW  6F
4630:  MOVWF  x1F
4632:  CLRF   x20
4634:  MOVLW  4C
4636:  MOVWF  x21
4638:  MOVLW  69
463A:  MOVWF  x22
463C:  MOVLW  71
463E:  MOVWF  x23
4640:  MOVLW  75
4642:  MOVWF  x24
4644:  MOVLW  69
4646:  MOVWF  x25
4648:  MOVLW  64
464A:  MOVWF  x26
464C:  MOVLW  6F
464E:  MOVWF  x27
4650:  MOVLW  73
4652:  MOVWF  x28
4654:  CLRF   x29
4656:  MOVLW  3A
4658:  MOVWF  x2A
465A:  CLRF   x2B
465C:  MOVLW  4C
465E:  MOVWF  x2C
4660:  MOVLW  69
4662:  MOVWF  x2D
4664:  MOVLW  62
4666:  MOVWF  x2E
4668:  MOVLW  72
466A:  MOVWF  x2F
466C:  MOVLW  65
466E:  MOVWF  x30
4670:  CLRF   x31
4672:  MOVLW  54
4674:  MOVWF  x32
4676:  MOVLW  3A
4678:  MOVWF  x33
467A:  MOVLW  31
467C:  MOVWF  x34
467E:  MOVLW  32
4680:  MOVWF  x35
4682:  MOVLW  31
4684:  MOVWF  x36
4686:  MOVLW  B0
4688:  MOVWF  x37
468A:  MOVLW  43
468C:  MOVWF  x38
468E:  CLRF   x39
4690:  MOVLW  74
4692:  MOVWF  x3A
4694:  MOVLW  5F
4696:  MOVWF  x3B
4698:  MOVLW  65
469A:  MOVWF  x3C
469C:  MOVLW  73
469E:  MOVWF  x3D
46A0:  MOVLW  74
46A2:  MOVWF  x3E
46A4:  MOVLW  3A
46A6:  MOVWF  x3F
46A8:  MOVLW  32
46AA:  MOVWF  x40
46AC:  MOVLW  35
46AE:  MOVWF  x41
46B0:  MOVLW  6D
46B2:  MOVWF  x42
46B4:  CLRF   x43
46B6:  MOVLW  74
46B8:  MOVWF  x44
46BA:  MOVLW  5F
46BC:  MOVWF  x45
46BE:  MOVLW  73
46C0:  MOVWF  x46
46C2:  MOVLW  65
46C4:  MOVWF  x47
46C6:  MOVLW  63
46C8:  MOVWF  x48
46CA:  MOVLW  3A
46CC:  MOVWF  x49
46CE:  MOVLW  31
46D0:  MOVWF  x4A
46D2:  MOVLW  35
46D4:  MOVWF  x4B
46D6:  MOVLW  6D
46D8:  MOVWF  x4C
46DA:  CLRF   x4D
46DC:  MOVLW  43
46DE:  MOVWF  x4E
46E0:  CLRF   x4F
46E2:  MOVLW  74
46E4:  MOVWF  x50
46E6:  MOVLW  5F
46E8:  MOVWF  x51
46EA:  MOVLW  65
46EC:  MOVWF  x52
46EE:  MOVLW  73
46F0:  MOVWF  x53
46F2:  MOVLW  74
46F4:  MOVWF  x54
46F6:  MOVLW  3A
46F8:  MOVWF  x55
46FA:  MOVLW  35
46FC:  MOVWF  x56
46FE:  MOVLW  6D
4700:  MOVWF  x57
4702:  CLRF   x58
4704:  MOVLW  74
4706:  MOVWF  x59
4708:  MOVLW  5F
470A:  MOVWF  x5A
470C:  MOVLW  73
470E:  MOVWF  x5B
4710:  MOVLW  65
4712:  MOVWF  x5C
4714:  MOVLW  63
4716:  MOVWF  x5D
4718:  MOVLW  3A
471A:  MOVWF  x5E
471C:  MOVLW  35
471E:  MOVWF  x5F
4720:  MOVLW  6D
4722:  MOVWF  x60
4724:  CLRF   x61
4726:  MOVLW  74
4728:  MOVWF  x62
472A:  MOVLW  5F
472C:  MOVWF  x63
472E:  MOVLW  65
4730:  MOVWF  x64
4732:  MOVLW  73
4734:  MOVWF  x65
4736:  MOVLW  74
4738:  MOVWF  x66
473A:  MOVLW  3A
473C:  MOVWF  x67
473E:  MOVLW  31
4740:  MOVWF  x68
4742:  MOVLW  35
4744:  MOVWF  x69
4746:  MOVLW  6D
4748:  MOVWF  x6A
474A:  CLRF   x6B
474C:  MOVLW  44
474E:  MOVWF  x6C
4750:  MOVLW  65
4752:  MOVWF  x6D
4754:  MOVLW  73
4756:  MOVWF  x6E
4758:  MOVLW  66
475A:  MOVWF  x6F
475C:  MOVLW  6F
475E:  MOVWF  x70
4760:  MOVLW  67
4762:  MOVWF  x71
4764:  MOVLW  75
4766:  MOVWF  x72
4768:  MOVLW  65
476A:  MOVWF  x73
476C:  MOVLW  20
476E:  MOVWF  x74
4770:  MOVLW  4C
4772:  MOVWF  x75
4774:  MOVLW  65
4776:  MOVWF  x76
4778:  MOVLW  6E
477A:  MOVWF  x77
477C:  MOVLW  74
477E:  MOVWF  x78
4780:  MOVLW  6F
4782:  MOVWF  x79
4784:  CLRF   x7A
4786:  MOVLW  54
4788:  MOVWF  x7B
478A:  MOVLW  3A
478C:  MOVWF  x7C
478E:  MOVLW  31
4790:  MOVWF  x7D
4792:  MOVLW  32
4794:  MOVWF  x7E
4796:  MOVLW  31
4798:  MOVWF  x7F
479A:  MOVLW  B0
479C:  MOVWF  x80
479E:  MOVLW  43
47A0:  MOVWF  x81
47A2:  CLRF   x82
47A4:  MOVLW  74
47A6:  MOVWF  x83
47A8:  MOVLW  5F
47AA:  MOVWF  x84
47AC:  MOVLW  65
47AE:  MOVWF  x85
47B0:  MOVLW  73
47B2:  MOVWF  x86
47B4:  MOVLW  74
47B6:  MOVWF  x87
47B8:  MOVLW  3A
47BA:  MOVWF  x88
47BC:  MOVLW  32
47BE:  MOVWF  x89
47C0:  MOVLW  30
47C2:  MOVWF  x8A
47C4:  MOVLW  6D
47C6:  MOVWF  x8B
47C8:  CLRF   x8C
47CA:  MOVLW  74
47CC:  MOVWF  x8D
47CE:  MOVLW  5F
47D0:  MOVWF  x8E
47D2:  MOVLW  73
47D4:  MOVWF  x8F
47D6:  MOVLW  65
47D8:  MOVWF  x90
47DA:  MOVLW  63
47DC:  MOVWF  x91
47DE:  MOVLW  3A
47E0:  MOVWF  x92
47E2:  MOVLW  4E
47E4:  MOVWF  x93
47E6:  MOVLW  2F
47E8:  MOVWF  x94
47EA:  MOVLW  41
47EC:  MOVWF  x95
47EE:  CLRF   x96
47F0:  MOVLW  4F
47F2:  MOVWF  x97
47F4:  MOVLW  4B
47F6:  MOVWF  x98
47F8:  CLRF   x99
47FA:  MOVLW  54
47FC:  MOVWF  x9A
47FE:  MOVLW  65
4800:  MOVWF  x9B
4802:  MOVLW  6D
4804:  MOVWF  x9C
4806:  MOVLW  70
4808:  MOVWF  x9D
480A:  MOVLW  65
480C:  MOVWF  x9E
480E:  MOVLW  72
4810:  MOVWF  x9F
4812:  MOVLW  61
4814:  MOVWF  xA0
4816:  MOVLW  74
4818:  MOVWF  xA1
481A:  MOVLW  75
481C:  MOVWF  xA2
481E:  MOVLW  72
4820:  MOVWF  xA3
4822:  MOVLW  61
4824:  MOVWF  xA4
4826:  CLRF   xA5
4828:  MOVLW  54
482A:  MOVWF  xA6
482C:  MOVLW  20
482E:  MOVWF  xA7
4830:  MOVLW  45
4832:  MOVWF  xA8
4834:  MOVLW  73
4836:  MOVWF  xA9
4838:  MOVLW  74
483A:  MOVWF  xAA
483C:  MOVLW  65
483E:  MOVWF  xAB
4840:  MOVLW  72
4842:  MOVWF  xAC
4844:  MOVLW  69
4846:  MOVWF  xAD
4848:  MOVLW  6C
484A:  MOVWF  xAE
484C:  MOVLW  69
484E:  MOVWF  xAF
4850:  MOVLW  7A
4852:  MOVWF  xB0
4854:  MOVLW  61
4856:  MOVWF  xB1
4858:  MOVLW  63
485A:  MOVWF  xB2
485C:  MOVLW  69
485E:  MOVWF  xB3
4860:  MOVLW  6F
4862:  MOVWF  xB4
4864:  MOVLW  6E
4866:  MOVWF  xB5
4868:  CLRF   xB6
486A:  MOVLW  54
486C:  MOVWF  xB7
486E:  MOVLW  20
4870:  MOVWF  xB8
4872:  MOVLW  53
4874:  MOVWF  xB9
4876:  MOVLW  65
4878:  MOVWF  xBA
487A:  MOVLW  63
487C:  MOVWF  xBB
487E:  MOVLW  61
4880:  MOVWF  xBC
4882:  MOVLW  64
4884:  MOVWF  xBD
4886:  MOVLW  6F
4888:  MOVWF  xBE
488A:  CLRF   xBF
488C:  MOVLW  44
488E:  MOVWF  xC0
4890:  MOVLW  65
4892:  MOVWF  xC1
4894:  MOVLW  73
4896:  MOVWF  xC2
4898:  MOVLW  66
489A:  MOVWF  xC3
489C:  MOVLW  6F
489E:  MOVWF  xC4
48A0:  MOVLW  67
48A2:  MOVWF  xC5
48A4:  MOVLW  75
48A6:  MOVWF  xC6
48A8:  MOVLW  65
48AA:  MOVWF  xC7
48AC:  MOVLW  20
48AE:  MOVWF  xC8
48B0:  MOVLW  52
48B2:  MOVWF  xC9
48B4:  MOVLW  61
48B6:  MOVWF  xCA
48B8:  MOVLW  70
48BA:  MOVWF  xCB
48BC:  MOVLW  69
48BE:  MOVWF  xCC
48C0:  MOVLW  64
48C2:  MOVWF  xCD
48C4:  MOVLW  6F
48C6:  MOVWF  xCE
48C8:  CLRF   xCF
48CA:  MOVLW  53
48CC:  MOVWF  xD0
48CE:  MOVLW  69
48D0:  MOVWF  xD1
48D2:  CLRF   xD2
48D4:  MOVLW  4E
48D6:  MOVWF  xD3
48D8:  MOVLW  6F
48DA:  MOVWF  xD4
48DC:  CLRF   xD5
48DE:  MOVLW  46
48E0:  MOVWF  xD6
48E2:  MOVLW  69
48E4:  MOVWF  xD7
48E6:  MOVLW  6E
48E8:  MOVWF  xD8
48EA:  MOVLW  61
48EC:  MOVWF  xD9
48EE:  MOVLW  6C
48F0:  MOVWF  xDA
48F2:  MOVLW  69
48F4:  MOVWF  xDB
48F6:  MOVLW  7A
48F8:  MOVWF  xDC
48FA:  MOVLW  61
48FC:  MOVWF  xDD
48FE:  MOVLW  64
4900:  MOVWF  xDE
4902:  MOVLW  6F
4904:  MOVWF  xDF
4906:  CLRF   xE0
4908:  MOVLW  50
490A:  MOVWF  xE1
490C:  MOVLW  61
490E:  MOVWF  xE2
4910:  MOVLW  72
4912:  MOVWF  xE3
4914:  MOVLW  61
4916:  MOVWF  xE4
4918:  MOVLW  64
491A:  MOVWF  xE5
491C:  MOVLW  61
491E:  MOVWF  xE6
4920:  CLRF   xE7
4922:  MOVLW  45
4924:  MOVWF  xE8
4926:  MOVLW  6D
4928:  MOVWF  xE9
492A:  MOVLW  65
492C:  MOVWF  xEA
492E:  MOVLW  72
4930:  MOVWF  xEB
4932:  MOVLW  67
4934:  MOVWF  xEC
4936:  MOVLW  65
4938:  MOVWF  xED
493A:  MOVLW  6E
493C:  MOVWF  xEE
493E:  MOVLW  63
4940:  MOVWF  xEF
4942:  MOVLW  69
4944:  MOVWF  xF0
4946:  MOVLW  61
4948:  MOVWF  xF1
494A:  CLRF   xF2
494C:  MOVLW  55
494E:  MOVWF  xF3
4950:  MOVLW  6C
4952:  MOVWF  xF4
4954:  MOVLW  74
4956:  MOVWF  xF5
4958:  MOVLW  69
495A:  MOVWF  xF6
495C:  MOVLW  6D
495E:  MOVWF  xF7
4960:  MOVLW  6F
4962:  MOVWF  xF8
4964:  CLRF   xF9
4966:  MOVLW  50
4968:  MOVWF  xFA
496A:  MOVLW  75
496C:  MOVWF  xFB
496E:  MOVLW  65
4970:  MOVWF  xFC
4972:  MOVLW  72
4974:  MOVWF  xFD
4976:  MOVLW  74
4978:  MOVWF  xFE
497A:  MOVLW  61
497C:  MOVWF  xFF
497E:  MOVLB  2
4980:  CLRF   x00
4982:  MOVLW  41
4984:  MOVWF  x01
4986:  MOVLW  62
4988:  MOVWF  x02
498A:  MOVLW  69
498C:  MOVWF  x03
498E:  MOVLW  65
4990:  MOVWF  x04
4992:  MOVLW  72
4994:  MOVWF  x05
4996:  MOVLW  74
4998:  MOVWF  x06
499A:  MOVLW  61
499C:  MOVWF  x07
499E:  CLRF   x08
49A0:  CLRF   x23
49A2:  CLRF   x24
49A4:  CLRF   x25
49A6:  CLRF   x26
49A8:  CLRF   x27
49AA:  CLRF   x28
49AC:  CLRF   x29
49AE:  CLRF   x2A
49B0:  CLRF   x2B
49B2:  CLRF   x2C
49B4:  CLRF   x2D
49B6:  CLRF   x2E
49B8:  CLRF   x2F
49BA:  CLRF   x30
49BC:  CLRF   x31
49BE:  CLRF   x32
49C0:  CLRF   x72
49C2:  CLRF   x73
....................    // TODO: USER CODE!! 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
49C4:  MOVLW  85
49C6:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
49C8:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
49CA:  MOVF   FC1,W
49CC:  ANDLW  C0
49CE:  IORLW  0E
49D0:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
49D2:  BCF    FC0.0
49D4:  BSF    FC0.1
49D6:  BCF    FC0.2
49D8:  BSF    FC0.7
49DA:  BSF    FC2.0
....................    sensores(0); 
49DC:  MOVLB  3
49DE:  CLRF   xB4
49E0:  MOVLB  0
49E2:  CALL   25B0
....................    output_d(0); 
49E6:  CLRF   F95
49E8:  CLRF   F8C
....................    Camara_IN_off;Camara_OUT_off;Resistencia_off;Piloto_Fc_off;Piloto_Stop_off;Piloto_Puerta_off; 
49EA:  BCF    F8B.2
49EC:  BCF    F94.2
49EE:  BCF    F8B.0
49F0:  BCF    F94.0
49F2:  BCF    F8C.2
49F4:  BCF    F95.2
49F6:  BCF    F8C.0
49F8:  BCF    F95.0
49FA:  BCF    F8C.1
49FC:  BCF    F95.1
49FE:  BCF    F8B.2
4A00:  BCF    F94.2
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
4A02:  MOVFF  FF2,3B4
4A06:  BCF    FF2.7
4A08:  CLRF   FA9
4A0A:  BCF    FA6.6
4A0C:  BCF    FA6.7
4A0E:  BSF    FA6.0
4A10:  MOVF   FA8,W
4A12:  MOVLB  3
4A14:  BTFSC  xB4.7
4A16:  BSF    FF2.7
4A18:  MOVLB  2
4A1A:  MOVWF  x27
4A1C:  MOVFF  FF2,3B4
4A20:  BCF    FF2.7
4A22:  MOVLW  01
4A24:  MOVWF  FA9
4A26:  BCF    FA6.6
4A28:  BCF    FA6.7
4A2A:  BSF    FA6.0
4A2C:  MOVF   FA8,W
4A2E:  MOVLB  3
4A30:  BTFSC  xB4.7
4A32:  BSF    FF2.7
4A34:  MOVLB  2
4A36:  MOVWF  x28
4A38:  MOVFF  FF2,3B4
4A3C:  BCF    FF2.7
4A3E:  MOVLW  02
4A40:  MOVWF  FA9
4A42:  BCF    FA6.6
4A44:  BCF    FA6.7
4A46:  BSF    FA6.0
4A48:  MOVF   FA8,W
4A4A:  MOVLB  3
4A4C:  BTFSC  xB4.7
4A4E:  BSF    FF2.7
4A50:  MOVLB  2
4A52:  MOVWF  x29
4A54:  MOVFF  FF2,3B4
4A58:  BCF    FF2.7
4A5A:  MOVLW  03
4A5C:  MOVWF  FA9
4A5E:  BCF    FA6.6
4A60:  BCF    FA6.7
4A62:  BSF    FA6.0
4A64:  MOVF   FA8,W
4A66:  MOVLB  3
4A68:  BTFSC  xB4.7
4A6A:  BSF    FF2.7
4A6C:  MOVLB  2
4A6E:  MOVWF  x2A
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
4A70:  MOVFF  FF2,3B4
4A74:  BCF    FF2.7
4A76:  MOVLW  04
4A78:  MOVWF  FA9
4A7A:  BCF    FA6.6
4A7C:  BCF    FA6.7
4A7E:  BSF    FA6.0
4A80:  MOVF   FA8,W
4A82:  MOVLB  3
4A84:  BTFSC  xB4.7
4A86:  BSF    FF2.7
4A88:  MOVLB  2
4A8A:  MOVWF  x2F
4A8C:  MOVFF  FF2,3B4
4A90:  BCF    FF2.7
4A92:  MOVLW  05
4A94:  MOVWF  FA9
4A96:  BCF    FA6.6
4A98:  BCF    FA6.7
4A9A:  BSF    FA6.0
4A9C:  MOVF   FA8,W
4A9E:  MOVLB  3
4AA0:  BTFSC  xB4.7
4AA2:  BSF    FF2.7
4AA4:  MOVLB  2
4AA6:  MOVWF  x30
4AA8:  MOVFF  FF2,3B4
4AAC:  BCF    FF2.7
4AAE:  MOVLW  06
4AB0:  MOVWF  FA9
4AB2:  BCF    FA6.6
4AB4:  BCF    FA6.7
4AB6:  BSF    FA6.0
4AB8:  MOVF   FA8,W
4ABA:  MOVLB  3
4ABC:  BTFSC  xB4.7
4ABE:  BSF    FF2.7
4AC0:  MOVLB  2
4AC2:  MOVWF  x31
4AC4:  MOVFF  FF2,3B4
4AC8:  BCF    FF2.7
4ACA:  MOVLW  07
4ACC:  MOVWF  FA9
4ACE:  BCF    FA6.6
4AD0:  BCF    FA6.7
4AD2:  BSF    FA6.0
4AD4:  MOVF   FA8,W
4AD6:  MOVLB  3
4AD8:  BTFSC  xB4.7
4ADA:  BSF    FF2.7
4ADC:  MOVLB  2
4ADE:  MOVWF  x32
4AE0:  MOVFF  FF2,3B4
4AE4:  BCF    FF2.7
4AE6:  MOVLW  08
4AE8:  MOVWF  FA9
4AEA:  BCF    FA6.6
4AEC:  BCF    FA6.7
4AEE:  BSF    FA6.0
4AF0:  MOVF   FA8,W
4AF2:  MOVLB  3
4AF4:  BTFSC  xB4.7
4AF6:  BSF    FF2.7
4AF8:  MOVLB  2
4AFA:  MOVWF  x34
....................    Nivel=read_eeprom(9);Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12);Ajuste=read_eeprom(13);Ajusten=read_eeprom(14); 
4AFC:  MOVFF  FF2,3B4
4B00:  BCF    FF2.7
4B02:  MOVLW  09
4B04:  MOVWF  FA9
4B06:  BCF    FA6.6
4B08:  BCF    FA6.7
4B0A:  BSF    FA6.0
4B0C:  MOVF   FA8,W
4B0E:  MOVLB  3
4B10:  BTFSC  xB4.7
4B12:  BSF    FF2.7
4B14:  MOVLB  2
4B16:  CLRF   x22
4B18:  MOVWF  x21
4B1A:  MOVFF  FF2,3B4
4B1E:  BCF    FF2.7
4B20:  MOVLW  0A
4B22:  MOVWF  FA9
4B24:  BCF    FA6.6
4B26:  BCF    FA6.7
4B28:  BSF    FA6.0
4B2A:  MOVF   FA8,W
4B2C:  MOVLB  3
4B2E:  BTFSC  xB4.7
4B30:  BSF    FF2.7
4B32:  CLRF   xBA
4B34:  MOVWF  xB9
4B36:  MOVLB  0
4B38:  CALL   257A
4B3C:  MOVFF  03,265
4B40:  MOVFF  02,264
4B44:  MOVFF  01,263
4B48:  MOVFF  00,262
4B4C:  MOVFF  FF2,3B4
4B50:  BCF    FF2.7
4B52:  MOVLW  0B
4B54:  MOVWF  FA9
4B56:  BCF    FA6.6
4B58:  BCF    FA6.7
4B5A:  BSF    FA6.0
4B5C:  MOVF   FA8,W
4B5E:  MOVLB  3
4B60:  BTFSC  xB4.7
4B62:  BSF    FF2.7
4B64:  CLRF   xBA
4B66:  MOVWF  xB9
4B68:  MOVLB  0
4B6A:  CALL   257A
4B6E:  MOVFF  03,26D
4B72:  MOVFF  02,26C
4B76:  MOVFF  01,26B
4B7A:  MOVFF  00,26A
4B7E:  MOVFF  FF2,3B4
4B82:  BCF    FF2.7
4B84:  MOVLW  0C
4B86:  MOVWF  FA9
4B88:  BCF    FA6.6
4B8A:  BCF    FA6.7
4B8C:  BSF    FA6.0
4B8E:  MOVF   FA8,W
4B90:  MOVLB  3
4B92:  BTFSC  xB4.7
4B94:  BSF    FF2.7
4B96:  CLRF   xBA
4B98:  MOVWF  xB9
4B9A:  MOVLB  0
4B9C:  CALL   257A
4BA0:  MOVFF  03,24D
4BA4:  MOVFF  02,24C
4BA8:  MOVFF  01,24B
4BAC:  MOVFF  00,24A
4BB0:  MOVFF  FF2,3B4
4BB4:  BCF    FF2.7
4BB6:  MOVLW  0D
4BB8:  MOVWF  FA9
4BBA:  BCF    FA6.6
4BBC:  BCF    FA6.7
4BBE:  BSF    FA6.0
4BC0:  MOVF   FA8,W
4BC2:  MOVLB  3
4BC4:  BTFSC  xB4.7
4BC6:  BSF    FF2.7
4BC8:  MOVLB  2
4BCA:  MOVWF  x37
4BCC:  MOVFF  FF2,3B4
4BD0:  BCF    FF2.7
4BD2:  MOVLW  0E
4BD4:  MOVWF  FA9
4BD6:  BCF    FA6.6
4BD8:  BCF    FA6.7
4BDA:  BSF    FA6.0
4BDC:  MOVF   FA8,W
4BDE:  MOVLB  3
4BE0:  BTFSC  xB4.7
4BE2:  BSF    FF2.7
4BE4:  MOVLB  2
4BE6:  MOVWF  x38
....................    Ganancia2=read_eeprom(15);Minutos=read_eeprom(20);  
4BE8:  MOVFF  FF2,3B4
4BEC:  BCF    FF2.7
4BEE:  MOVLW  0F
4BF0:  MOVWF  FA9
4BF2:  BCF    FA6.6
4BF4:  BCF    FA6.7
4BF6:  BSF    FA6.0
4BF8:  MOVF   FA8,W
4BFA:  MOVLB  3
4BFC:  BTFSC  xB4.7
4BFE:  BSF    FF2.7
4C00:  CLRF   xBA
4C02:  MOVWF  xB9
4C04:  MOVLB  0
4C06:  CALL   257A
4C0A:  MOVFF  03,269
4C0E:  MOVFF  02,268
4C12:  MOVFF  01,267
4C16:  MOVFF  00,266
4C1A:  MOVFF  FF2,3B4
4C1E:  BCF    FF2.7
4C20:  MOVLW  14
4C22:  MOVWF  FA9
4C24:  BCF    FA6.6
4C26:  BCF    FA6.7
4C28:  BSF    FA6.0
4C2A:  MOVF   FA8,W
4C2C:  MOVLB  3
4C2E:  BTFSC  xB4.7
4C30:  BSF    FF2.7
4C32:  MOVLB  2
4C34:  CLRF   x20
4C36:  MOVWF  x1F
....................    float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
4C38:  CLRF   x74
4C3A:  CLRF   x75
4C3C:  CLRF   x76
4C3E:  CLRF   x77
4C40:  CLRF   x78
4C42:  CLRF   x79
4C44:  CLRF   x7A
4C46:  CLRF   x7B
4C48:  CLRF   x7C
4C4A:  CLRF   x7D
4C4C:  CLRF   x7E
4C4E:  CLRF   x7F
4C50:  CLRF   x80
4C52:  CLRF   x81
4C54:  CLRF   x82
4C56:  CLRF   x83
4C58:  CLRF   x84
4C5A:  CLRF   x85
4C5C:  CLRF   x86
4C5E:  CLRF   x87
4C60:  CLRF   x88
4C62:  CLRF   x89
4C64:  CLRF   x8A
4C66:  CLRF   x8B
4C68:  CLRF   x8C
4C6A:  CLRF   x8D
4C6C:  CLRF   x8E
4C6E:  CLRF   x8F
4C70:  CLRF   x90
4C72:  CLRF   x91
4C74:  CLRF   x92
4C76:  CLRF   x93
4C78:  CLRF   x94
4C7A:  CLRF   x95
4C7C:  CLRF   x96
4C7E:  CLRF   x97
4C80:  CLRF   x98
4C82:  CLRF   x99
4C84:  CLRF   x9A
4C86:  CLRF   x9B
4C88:  CLRF   x9C
4C8A:  CLRF   x9D
4C8C:  CLRF   x9E
4C8E:  CLRF   x9F
4C90:  CLRF   xA0
4C92:  CLRF   xA1
4C94:  CLRF   xA2
4C96:  CLRF   xA3
4C98:  CLRF   xA4
4C9A:  CLRF   xA5
4C9C:  CLRF   xA6
4C9E:  CLRF   xA7
4CA0:  CLRF   xA8
4CA2:  CLRF   xA9
4CA4:  CLRF   xAA
4CA6:  CLRF   xAB
4CA8:  CLRF   xAC
4CAA:  CLRF   xAD
4CAC:  CLRF   xAE
4CAE:  CLRF   xAF
4CB0:  CLRF   xB0
4CB2:  CLRF   xB1
4CB4:  CLRF   xB2
4CB6:  CLRF   xB3
4CB8:  CLRF   xB4
4CBA:  CLRF   xB5
4CBC:  CLRF   xB6
4CBE:  CLRF   xB7
4CC0:  CLRF   xB8
4CC2:  CLRF   xB9
4CC4:  CLRF   xBA
4CC6:  CLRF   xBB
4CC8:  CLRF   xBC
4CCA:  CLRF   xBD
4CCC:  CLRF   xBE
4CCE:  CLRF   xBF
4CD0:  CLRF   xC0
4CD2:  CLRF   xC1
4CD4:  CLRF   xC2
4CD6:  CLRF   xC3
4CD8:  CLRF   xC4
4CDA:  CLRF   xC5
4CDC:  CLRF   xC6
4CDE:  CLRF   xC7
4CE0:  CLRF   xC8
4CE2:  CLRF   xC9
4CE4:  CLRF   xCA
4CE6:  CLRF   xCB
4CE8:  CLRF   xCC
4CEA:  CLRF   xCD
4CEC:  CLRF   xCE
4CEE:  CLRF   xCF
4CF0:  CLRF   xD0
4CF2:  CLRF   xD1
4CF4:  CLRF   xD2
4CF6:  CLRF   xD3
4CF8:  CLRF   xD4
4CFA:  CLRF   xD5
4CFC:  CLRF   xD6
4CFE:  CLRF   xD7
4D00:  CLRF   xD8
4D02:  CLRF   xD9
4D04:  CLRF   xDA
4D06:  CLRF   xDB
4D08:  CLRF   xDC
4D0A:  CLRF   xDD
4D0C:  CLRF   xDE
4D0E:  CLRF   xDF
4D10:  CLRF   xE0
4D12:  CLRF   xE1
4D14:  CLRF   xE2
4D16:  CLRF   xE3
4D18:  CLRF   xE4
4D1A:  CLRF   xE5
4D1C:  CLRF   xE6
4D1E:  CLRF   xE7
4D20:  CLRF   xE8
4D22:  CLRF   xE9
4D24:  CLRF   xEA
4D26:  CLRF   xEB
4D28:  CLRF   xEC
4D2A:  CLRF   xED
4D2C:  CLRF   xEE
4D2E:  CLRF   xEF
4D30:  CLRF   xF0
4D32:  CLRF   xF1
4D34:  CLRF   xF2
4D36:  CLRF   xF3
4D38:  CLRF   xF4
4D3A:  CLRF   xF5
4D3C:  CLRF   xF6
4D3E:  CLRF   xF7
4D40:  CLRF   xF8
4D42:  CLRF   xF9
4D44:  CLRF   xFA
4D46:  CLRF   xFB
4D48:  CLRF   xFC
4D4A:  CLRF   xFD
4D4C:  CLRF   xFE
4D4E:  CLRF   xFF
4D50:  MOVLB  3
4D52:  CLRF   x00
4D54:  CLRF   x01
4D56:  CLRF   x02
4D58:  CLRF   x03
4D5A:  CLRF   x04
4D5C:  CLRF   x05
4D5E:  CLRF   x06
4D60:  CLRF   x07
4D62:  CLRF   x08
4D64:  CLRF   x09
4D66:  CLRF   x0A
4D68:  CLRF   x0B
4D6A:  CLRF   x0C
4D6C:  CLRF   x0D
4D6E:  CLRF   x0E
4D70:  CLRF   x0F
4D72:  CLRF   x10
4D74:  CLRF   x11
4D76:  CLRF   x12
4D78:  CLRF   x13
4D7A:  CLRF   x14
4D7C:  CLRF   x15
4D7E:  CLRF   x16
4D80:  CLRF   x17
4D82:  CLRF   x18
4D84:  CLRF   x19
4D86:  CLRF   x1A
4D88:  CLRF   x1B
4D8A:  CLRF   x1C
4D8C:  CLRF   x1D
4D8E:  CLRF   x1E
4D90:  CLRF   x1F
4D92:  CLRF   x20
4D94:  CLRF   x21
4D96:  CLRF   x22
4D98:  CLRF   x23
4D9A:  CLRF   x24
4D9C:  CLRF   x25
4D9E:  CLRF   x26
4DA0:  CLRF   x27
4DA2:  CLRF   x28
4DA4:  CLRF   x29
4DA6:  CLRF   x2A
4DA8:  CLRF   x2B
4DAA:  CLRF   x2C
4DAC:  CLRF   x2D
4DAE:  CLRF   x2E
4DB0:  CLRF   x2F
4DB2:  CLRF   x30
4DB4:  CLRF   x31
4DB6:  CLRF   x32
4DB8:  CLRF   x33
4DBA:  CLRF   x34
4DBC:  CLRF   x35
4DBE:  CLRF   x36
4DC0:  CLRF   x37
4DC2:  CLRF   x38
4DC4:  CLRF   x39
4DC6:  CLRF   x3A
4DC8:  CLRF   x3B
4DCA:  CLRF   x3C
4DCC:  CLRF   x3D
4DCE:  CLRF   x3E
4DD0:  CLRF   x3F
4DD2:  CLRF   x40
4DD4:  CLRF   x41
4DD6:  CLRF   x42
4DD8:  CLRF   x43
4DDA:  CLRF   x44
4DDC:  CLRF   x45
4DDE:  CLRF   x46
4DE0:  CLRF   x47
4DE2:  CLRF   x48
4DE4:  CLRF   x49
4DE6:  CLRF   x4A
4DE8:  CLRF   x4B
4DEA:  CLRF   x4C
4DEC:  CLRF   x4D
4DEE:  CLRF   x4E
4DF0:  CLRF   x4F
4DF2:  CLRF   x50
4DF4:  CLRF   x51
4DF6:  CLRF   x52
4DF8:  CLRF   x53
4DFA:  CLRF   x54
4DFC:  CLRF   x55
4DFE:  CLRF   x56
4E00:  CLRF   x57
4E02:  CLRF   x58
4E04:  CLRF   x59
4E06:  CLRF   x5A
4E08:  CLRF   x5B
4E0A:  CLRF   x5C
4E0C:  CLRF   x5D
4E0E:  CLRF   x5E
4E10:  CLRF   x5F
4E12:  CLRF   x60
4E14:  CLRF   x61
4E16:  CLRF   x62
4E18:  CLRF   x63
4E1A:  CLRF   x64
4E1C:  CLRF   x65
4E1E:  CLRF   x66
4E20:  CLRF   x67
4E22:  CLRF   x68
4E24:  CLRF   x69
4E26:  CLRF   x6A
4E28:  CLRF   x6B
4E2A:  CLRF   x6C
4E2C:  CLRF   x6D
4E2E:  CLRF   x6E
4E30:  CLRF   x6F
4E32:  CLRF   x70
4E34:  CLRF   x71
4E36:  CLRF   x72
4E38:  CLRF   x73
4E3A:  CLRF   x74
4E3C:  CLRF   x75
4E3E:  CLRF   x76
4E40:  CLRF   x77
4E42:  CLRF   x78
4E44:  CLRF   x79
4E46:  CLRF   x7A
4E48:  CLRF   x7B
4E4A:  CLRF   x7C
4E4C:  CLRF   x7D
4E4E:  CLRF   x7E
4E50:  CLRF   x7F
4E52:  CLRF   x80
4E54:  CLRF   x81
4E56:  CLRF   x82
4E58:  CLRF   x83
4E5A:  CLRF   x84
4E5C:  CLRF   x85
4E5E:  CLRF   x86
4E60:  CLRF   x87
4E62:  CLRF   x88
4E64:  CLRF   x89
4E66:  CLRF   x8A
4E68:  CLRF   x8B
4E6A:  CLRF   x8C
4E6C:  CLRF   x8D
4E6E:  CLRF   x8E
4E70:  CLRF   x8F
4E72:  CLRF   x90
4E74:  CLRF   x91
4E76:  CLRF   x92
4E78:  CLRF   x93
4E7A:  CLRF   x94
4E7C:  CLRF   x95
4E7E:  CLRF   x96
4E80:  CLRF   x97
4E82:  CLRF   x98
4E84:  CLRF   x99
4E86:  CLRF   x9A
4E88:  CLRF   x9B
4E8A:  CLRF   x9C
4E8C:  CLRF   x9D
4E8E:  CLRF   x9E
4E90:  CLRF   x9F
4E92:  CLRF   xA0
4E94:  CLRF   xA1
4E96:  CLRF   xA2
4E98:  CLRF   xA3
4E9A:  CLRF   xA4
4E9C:  CLRF   xA5
4E9E:  CLRF   xA6
4EA0:  CLRF   xA7
4EA2:  CLRF   xA8
4EA4:  CLRF   xA9
4EA6:  CLRF   xAA
4EA8:  CLRF   xAB
4EAA:  CLRF   xAC
4EAC:  CLRF   xAD
4EAE:  CLRF   xAE
4EB0:  CLRF   xAF
4EB2:  CLRF   xB0
4EB4:  CLRF   xB1
4EB6:  CLRF   xB2
4EB8:  CLRF   xB3
....................    //float promedio[10]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................    //float promedio2[10]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................    usb_init(); 
4EBA:  MOVLB  0
4EBC:  GOTO   2676
....................    usb_task(); 
4EC0:  CALL   2654
....................    glcd_init(ON);             //Inicializa la glcd 
4EC4:  MOVLW  01
4EC6:  MOVLB  3
4EC8:  MOVWF  xB4
4ECA:  MOVLB  0
4ECC:  GOTO   2748
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
4ED0:  MOVLB  3
4ED2:  CLRF   xB5
4ED4:  MOVLB  0
4ED6:  CALL   26BA
....................    glcd_text57(0, 0, JP, 2, ON);            // Write the new voltage 
4EDA:  MOVLB  3
4EDC:  CLRF   xC4
4EDE:  CLRF   xC5
4EE0:  CLRF   xC7
4EE2:  MOVLW  76
4EE4:  MOVWF  xC6
4EE6:  MOVLW  02
4EE8:  MOVWF  xC8
4EEA:  MOVLW  01
4EEC:  MOVWF  xC9
4EEE:  MOVLB  0
4EF0:  CALL   2910
....................    glcd_text57(10, 20, Autoclave, 1, ON);            // Write the new voltage 
4EF4:  MOVLW  0A
4EF6:  MOVLB  3
4EF8:  MOVWF  xC4
4EFA:  MOVLW  14
4EFC:  MOVWF  xC5
4EFE:  CLRF   xC7
4F00:  MOVLW  82
4F02:  MOVWF  xC6
4F04:  MOVLW  01
4F06:  MOVWF  xC8
4F08:  MOVWF  xC9
4F0A:  MOVLB  0
4F0C:  CALL   2910
....................    glcd_text57(30, 40, Lts, 1, ON);            // Write the new voltage 
4F10:  MOVLW  1E
4F12:  MOVLB  3
4F14:  MOVWF  xC4
4F16:  MOVLW  28
4F18:  MOVWF  xC5
4F1A:  CLRF   xC7
4F1C:  MOVLW  A3
4F1E:  MOVWF  xC6
4F20:  MOVLW  01
4F22:  MOVWF  xC8
4F24:  MOVWF  xC9
4F26:  MOVLB  0
4F28:  CALL   2910
....................    delay_ms(2000); 
4F2C:  MOVLW  08
4F2E:  MOVLB  3
4F30:  MOVWF  xB4
4F32:  MOVLW  FA
4F34:  MOVWF  xB9
4F36:  MOVLB  0
4F38:  CALL   2550
4F3C:  MOVLB  3
4F3E:  DECFSZ xB4,F
4F40:  BRA    4F32
....................    if(UP&&RIGHT) 
4F42:  BSF    F92.1
4F44:  BTFSS  F80.1
4F46:  BRA    5070
4F48:  BSF    F92.3
4F4A:  BTFSS  F80.3
4F4C:  BRA    5070
....................    {glcd_fillScreen(OFF);      //Limpia la pantalla 
4F4E:  CLRF   xB5
4F50:  MOVLB  0
4F52:  CALL   26BA
....................       delay_ms(2000); 
4F56:  MOVLW  08
4F58:  MOVLB  3
4F5A:  MOVWF  xB4
4F5C:  MOVLW  FA
4F5E:  MOVWF  xB9
4F60:  MOVLB  0
4F62:  CALL   2550
4F66:  MOVLB  3
4F68:  DECFSZ xB4,F
4F6A:  BRA    4F5C
....................       for(;;) 
....................       { 
....................          if(UP) 
4F6C:  BSF    F92.1
4F6E:  BTFSS  F80.1
4F70:  BRA    4FC6
....................          {Minutos++;delay_ms(40);write_eeprom(20,Minutos);delay_ms(300);} 
4F72:  MOVLB  2
4F74:  INCF   x1F,F
4F76:  BTFSC  FD8.2
4F78:  INCF   x20,F
4F7A:  MOVLW  28
4F7C:  MOVLB  3
4F7E:  MOVWF  xB9
4F80:  MOVLB  0
4F82:  CALL   2550
4F86:  MOVLW  14
4F88:  MOVWF  FA9
4F8A:  MOVFF  21F,FA8
4F8E:  BCF    FA6.6
4F90:  BCF    FA6.7
4F92:  BSF    FA6.2
4F94:  MOVF   FF2,W
4F96:  MOVWF  00
4F98:  BCF    FF2.7
4F9A:  MOVLB  F
4F9C:  MOVLW  55
4F9E:  MOVWF  FA7
4FA0:  MOVLW  AA
4FA2:  MOVWF  FA7
4FA4:  BSF    FA6.1
4FA6:  BTFSC  FA6.1
4FA8:  BRA    4FA6
4FAA:  BCF    FA6.2
4FAC:  MOVF   00,W
4FAE:  IORWF  FF2,F
4FB0:  MOVLW  02
4FB2:  MOVLB  3
4FB4:  MOVWF  xB4
4FB6:  MOVLW  96
4FB8:  MOVWF  xB9
4FBA:  MOVLB  0
4FBC:  CALL   2550
4FC0:  MOVLB  3
4FC2:  DECFSZ xB4,F
4FC4:  BRA    4FB6
....................          if(DOWN) 
4FC6:  BSF    F92.2
4FC8:  BTFSS  F80.2
4FCA:  BRA    5022
....................          {Minutos--;delay_ms(40);write_eeprom(20,Minutos);delay_ms(300);} 
4FCC:  MOVLB  2
4FCE:  MOVF   x1F,W
4FD0:  BTFSC  FD8.2
4FD2:  DECF   x20,F
4FD4:  DECF   x1F,F
4FD6:  MOVLW  28
4FD8:  MOVLB  3
4FDA:  MOVWF  xB9
4FDC:  MOVLB  0
4FDE:  CALL   2550
4FE2:  MOVLW  14
4FE4:  MOVWF  FA9
4FE6:  MOVFF  21F,FA8
4FEA:  BCF    FA6.6
4FEC:  BCF    FA6.7
4FEE:  BSF    FA6.2
4FF0:  MOVF   FF2,W
4FF2:  MOVWF  00
4FF4:  BCF    FF2.7
4FF6:  MOVLB  F
4FF8:  MOVLW  55
4FFA:  MOVWF  FA7
4FFC:  MOVLW  AA
4FFE:  MOVWF  FA7
5000:  BSF    FA6.1
5002:  BTFSC  FA6.1
5004:  BRA    5002
5006:  BCF    FA6.2
5008:  MOVF   00,W
500A:  IORWF  FF2,F
500C:  MOVLW  02
500E:  MOVLB  3
5010:  MOVWF  xB4
5012:  MOVLW  96
5014:  MOVWF  xB9
5016:  MOVLB  0
5018:  CALL   2550
501C:  MOVLB  3
501E:  DECFSZ xB4,F
5020:  BRA    5012
....................          if(RIGHT) 
5022:  BSF    F92.3
5024:  BTFSS  F80.3
5026:  BRA    5056
....................          {write_eeprom(20,Minutos);reset_cpu();} 
5028:  MOVLW  14
502A:  MOVWF  FA9
502C:  MOVFF  21F,FA8
5030:  BCF    FA6.6
5032:  BCF    FA6.7
5034:  BSF    FA6.2
5036:  MOVF   FF2,W
5038:  MOVWF  00
503A:  BCF    FF2.7
503C:  MOVLB  F
503E:  MOVLW  55
5040:  MOVWF  FA7
5042:  MOVLW  AA
5044:  MOVWF  FA7
5046:  BSF    FA6.1
5048:  BTFSC  FA6.1
504A:  BRA    5048
504C:  BCF    FA6.2
504E:  MOVF   00,W
5050:  IORWF  FF2,F
5052:  RESET
5054:  MOVLB  3
....................          displayTiempo(Minutos,20,40,4); 
5056:  MOVFF  21F,3B5
505A:  MOVLW  14
505C:  MOVWF  xB6
505E:  MOVLW  28
5060:  MOVWF  xB7
5062:  MOVLW  04
5064:  MOVWF  xB8
5066:  MOVLB  0
5068:  CALL   2E74
....................       } 
506C:  MOVLB  3
506E:  BRA    4F6C
....................    } 
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
5070:  CLRF   xB5
5072:  MOVLB  0
5074:  CALL   26BA
....................    while(true) 
....................    { 
....................      
....................    while(STOP)       
....................       {delay_ms(100); 
5078:  BSF    F96.0
507A:  BTFSC  F84.0
507C:  BRA    50FC
507E:  MOVLW  64
5080:  MOVLB  3
5082:  MOVWF  xB9
5084:  MOVLB  0
5086:  CALL   2550
....................       if(emergency==0) 
508A:  MOVLB  2
508C:  BTFSC  x16.1
508E:  BRA    50DC
....................          {glcd_fillScreen(OFF); glcd_text57(20, 0, Parada, 2, ON);glcd_text57(0, 40, Emergencia, 2, ON);Menu=16;}  
5090:  MOVLB  3
5092:  CLRF   xB5
5094:  MOVLB  0
5096:  CALL   26BA
509A:  MOVLW  14
509C:  MOVLB  3
509E:  MOVWF  xC4
50A0:  CLRF   xC5
50A2:  MOVLW  01
50A4:  MOVWF  xC7
50A6:  MOVLW  E1
50A8:  MOVWF  xC6
50AA:  MOVLW  02
50AC:  MOVWF  xC8
50AE:  MOVLW  01
50B0:  MOVWF  xC9
50B2:  MOVLB  0
50B4:  CALL   2910
50B8:  MOVLB  3
50BA:  CLRF   xC4
50BC:  MOVLW  28
50BE:  MOVWF  xC5
50C0:  MOVLW  01
50C2:  MOVWF  xC7
50C4:  MOVLW  E8
50C6:  MOVWF  xC6
50C8:  MOVLW  02
50CA:  MOVWF  xC8
50CC:  MOVLW  01
50CE:  MOVWF  xC9
50D0:  MOVLB  0
50D2:  CALL   2910
50D6:  MOVLW  10
50D8:  MOVLB  2
50DA:  MOVWF  x09
....................          Camara_IN_on;Camara_OUT_on;Piloto_Stop_on;Resistencia_off;emergency=1; 
50DC:  BSF    F8B.2
50DE:  BCF    F94.2
50E0:  BSF    F8B.0
50E2:  BCF    F94.0
50E4:  BSF    F8C.1
50E6:  BCF    F95.1
50E8:  BCF    F8C.2
50EA:  BCF    F95.2
50EC:  BSF    x16.1
....................         delay_ms(100);  
50EE:  MOVLW  64
50F0:  MOVLB  3
50F2:  MOVWF  xB9
50F4:  MOVLB  0
50F6:  CALL   2550
....................       }    
50FA:  BRA    5078
....................    if(!STOP) 
50FC:  BSF    F96.0
50FE:  BTFSS  F84.0
5100:  BRA    5126
....................       { 
....................          if(emergency==1) 
5102:  MOVLB  2
5104:  BTFSS  x16.1
5106:  BRA    5124
....................          {glcd_fillScreen(OFF);Camara_IN_off;Camara_OUT_off;Piloto_Stop_off;emergency=0;reset_cpu();} 
5108:  MOVLB  3
510A:  CLRF   xB5
510C:  MOVLB  0
510E:  CALL   26BA
5112:  BCF    F8B.2
5114:  BCF    F94.2
5116:  BCF    F8B.0
5118:  BCF    F94.0
511A:  BCF    F8C.1
511C:  BCF    F95.1
511E:  MOVLB  2
5120:  BCF    x16.1
5122:  RESET
5124:  MOVLB  0
....................       } 
....................     
....................    while(PUERTA)       
....................       {delay_ms(100); 
5126:  BSF    F96.2
5128:  BTFSC  F84.2
512A:  BRA    51AC
512C:  MOVLW  64
512E:  MOVLB  3
5130:  MOVWF  xB9
5132:  MOVLB  0
5134:  CALL   2550
....................       if(door==0) 
5138:  MOVLB  2
513A:  BTFSC  x33.4
513C:  BRA    518C
....................          {glcd_fillScreen(OFF); glcd_text57(20, 0, Puertas, 2, ON);glcd_text57(15, 40, Abierta, 2, ON);Menu=16;}  
513E:  MOVLB  3
5140:  CLRF   xB5
5142:  MOVLB  0
5144:  CALL   26BA
5148:  MOVLW  14
514A:  MOVLB  3
514C:  MOVWF  xC4
514E:  CLRF   xC5
5150:  MOVLW  01
5152:  MOVWF  xC7
5154:  MOVLW  FA
5156:  MOVWF  xC6
5158:  MOVLW  02
515A:  MOVWF  xC8
515C:  MOVLW  01
515E:  MOVWF  xC9
5160:  MOVLB  0
5162:  CALL   2910
5166:  MOVLW  0F
5168:  MOVLB  3
516A:  MOVWF  xC4
516C:  MOVLW  28
516E:  MOVWF  xC5
5170:  MOVLW  02
5172:  MOVWF  xC7
5174:  MOVLW  01
5176:  MOVWF  xC6
5178:  MOVLW  02
517A:  MOVWF  xC8
517C:  MOVLW  01
517E:  MOVWF  xC9
5180:  MOVLB  0
5182:  CALL   2910
5186:  MOVLW  10
5188:  MOVLB  2
518A:  MOVWF  x09
....................          Camara_IN_off;Camara_OUT_off;Piloto_Puerta_on;Resistencia_off;door=1; 
518C:  BCF    F8B.2
518E:  BCF    F94.2
5190:  BCF    F8B.0
5192:  BCF    F94.0
5194:  BSF    F8B.2
5196:  BCF    F94.2
5198:  BCF    F8C.2
519A:  BCF    F95.2
519C:  BSF    x33.4
....................         delay_ms(100);  
519E:  MOVLW  64
51A0:  MOVLB  3
51A2:  MOVWF  xB9
51A4:  MOVLB  0
51A6:  CALL   2550
....................       }    
51AA:  BRA    5126
....................    if(!PUERTA) 
51AC:  BSF    F96.2
51AE:  BTFSS  F84.2
51B0:  BRA    51D4
....................       { 
....................          if(door==1) 
51B2:  MOVLB  2
51B4:  BTFSS  x33.4
51B6:  BRA    51D4
....................          {glcd_fillScreen(OFF);Camara_IN_off;Camara_OUT_off;Piloto_Puerta_off;door=0;reset_cpu();} 
51B8:  MOVLB  3
51BA:  CLRF   xB5
51BC:  MOVLB  0
51BE:  CALL   26BA
51C2:  BCF    F8B.2
51C4:  BCF    F94.2
51C6:  BCF    F8B.0
51C8:  BCF    F94.0
51CA:  BCF    F8B.2
51CC:  BCF    F94.2
51CE:  MOVLB  2
51D0:  BCF    x33.4
51D2:  RESET
....................       } 
....................        
....................     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==16){ //Menu de Seleccion de Proceso. 
51D4:  MOVLB  2
51D6:  MOVF   x09,W
51D8:  SUBLW  10
51DA:  BTFSS  FD8.2
51DC:  BRA    5382
....................       glcd_text57(15, 0, Proc, 2, ON);            // Escribe Proceso en Tamaño 2.  
51DE:  MOVLW  0F
51E0:  MOVLB  3
51E2:  MOVWF  xC4
51E4:  CLRF   xC5
51E6:  CLRF   xC7
51E8:  MOVLW  C1
51EA:  MOVWF  xC6
51EC:  MOVLW  02
51EE:  MOVWF  xC8
51F0:  MOVLW  01
51F2:  MOVWF  xC9
51F4:  MOVLB  0
51F6:  CALL   2910
....................          
....................       if(UP)//Si oprime hacia arriba 
51FA:  BSF    F92.1
51FC:  BTFSS  F80.1
51FE:  BRA    5244
....................       {  if(Flanco == 0)  
5200:  MOVLB  2
5202:  BTFSC  x15.5
5204:  BRA    5242
....................             {Flecha2=Flecha2-8;Flecha=Flecha-8;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);glcd_text57(0, Flecha+8, Fle, 1, OFF);}} 
5206:  MOVLW  08
5208:  SUBWF  x0F,F
520A:  SUBWF  x0D,F
520C:  MOVLW  01
520E:  ADDWF  x0D,W
5210:  MOVWF  x0E
5212:  BSF    x15.5
5214:  MOVLW  1E
5216:  MOVLB  3
5218:  MOVWF  xB9
521A:  MOVLB  0
521C:  CALL   2550
5220:  MOVLW  08
5222:  MOVLB  2
5224:  ADDWF  x0D,W
5226:  MOVLB  3
5228:  MOVWF  xB4
522A:  CLRF   xC4
522C:  MOVWF  xC5
522E:  CLRF   xC7
5230:  MOVLW  AD
5232:  MOVWF  xC6
5234:  MOVLW  01
5236:  MOVWF  xC8
5238:  CLRF   xC9
523A:  MOVLB  0
523C:  CALL   2910
5240:  MOVLB  2
....................          else 
5242:  BRA    5248
....................             {Flanco = 0;} 
5244:  MOVLB  2
5246:  BCF    x15.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5248:  BSF    F92.2
524A:  BTFSS  F80.2
524C:  BRA    5290
....................       {  if(Flanco2 == 0)  
524E:  BTFSC  x15.7
5250:  BRA    528E
....................             {Flecha2=Flecha2+8;Flecha=Flecha+8;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);glcd_text57(0, Flecha-8, Fle, 1, OFF);}} 
5252:  MOVLW  08
5254:  ADDWF  x0F,F
5256:  ADDWF  x0D,F
5258:  MOVLW  01
525A:  SUBWF  x0D,W
525C:  MOVWF  x0E
525E:  BSF    x15.7
5260:  MOVLW  1E
5262:  MOVLB  3
5264:  MOVWF  xB9
5266:  MOVLB  0
5268:  CALL   2550
526C:  MOVLW  08
526E:  MOVLB  2
5270:  SUBWF  x0D,W
5272:  MOVLB  3
5274:  MOVWF  xB4
5276:  CLRF   xC4
5278:  MOVWF  xC5
527A:  CLRF   xC7
527C:  MOVLW  AD
527E:  MOVWF  xC6
5280:  MOVLW  01
5282:  MOVWF  xC8
5284:  CLRF   xC9
5286:  MOVLB  0
5288:  CALL   2910
528C:  MOVLB  2
....................          else 
528E:  BRA    5292
....................             {Flanco2 = 0;} 
5290:  BCF    x15.7
....................          
....................         if(Flecha2>n_opcionH+16) 
5292:  MOVLW  10
5294:  ADDWF  x0A,W
5296:  SUBWF  x0F,W
5298:  BZ    52A8
529A:  BNC   52A8
....................         {Flecha2=n_opcionL;Flecha=nMenuL;nMenuL=Flecha2;} 
529C:  MOVFF  20B,20F
52A0:  MOVFF  210,20D
52A4:  MOVFF  20F,210
....................          
....................         if(Flecha2<n_opcionL) 
52A8:  MOVF   x0B,W
52AA:  SUBWF  x0F,W
52AC:  BC    52BE
....................         {Flecha2=n_opcionH+16;Flecha=nMenuH+16;Flecha=Flecha2;}                
52AE:  MOVLW  10
52B0:  ADDWF  x0A,W
52B2:  MOVWF  x0F
52B4:  MOVLW  10
52B6:  ADDWF  x11,W
52B8:  MOVWF  x0D
52BA:  MOVFF  20F,20D
....................          
....................          
....................         mensajes(5,n_opcionL); 
52BE:  MOVLW  05
52C0:  MOVLB  3
52C2:  MOVWF  xB5
52C4:  MOVFF  20B,3B6
52C8:  MOVLB  0
52CA:  CALL   303C
....................         mensajes(7,n_opcionL+8); 
52CE:  MOVLW  08
52D0:  MOVLB  2
52D2:  ADDWF  x0B,W
52D4:  MOVLB  3
52D6:  MOVWF  xB4
52D8:  MOVLW  07
52DA:  MOVWF  xB5
52DC:  MOVFF  3B4,3B6
52E0:  MOVLB  0
52E2:  CALL   303C
....................         mensajes(6,n_opcionL+16); 
52E6:  MOVLW  10
52E8:  MOVLB  2
52EA:  ADDWF  x0B,W
52EC:  MOVLB  3
52EE:  MOVWF  xB4
52F0:  MOVLW  06
52F2:  MOVWF  xB5
52F4:  MOVFF  3B4,3B6
52F8:  MOVLB  0
52FA:  CALL   303C
....................         mensajes(4,n_opcionL+24); 
52FE:  MOVLW  18
5300:  MOVLB  2
5302:  ADDWF  x0B,W
5304:  MOVLB  3
5306:  MOVWF  xB4
5308:  MOVLW  04
530A:  MOVWF  xB5
530C:  MOVFF  3B4,3B6
5310:  MOVLB  0
5312:  CALL   303C
....................         mensajes(8,n_opcionL+32); 
5316:  MOVLW  20
5318:  MOVLB  2
531A:  ADDWF  x0B,W
531C:  MOVLB  3
531E:  MOVWF  xB4
5320:  MOVLW  08
5322:  MOVWF  xB5
5324:  MOVFF  3B4,3B6
5328:  MOVLB  0
532A:  CALL   303C
....................  
....................         glcd_text57(0, Flecha, Fle, 1, ON);            // Write the new voltage         
532E:  MOVLB  3
5330:  CLRF   xC4
5332:  MOVFF  20D,3C5
5336:  CLRF   xC7
5338:  MOVLW  AD
533A:  MOVWF  xC6
533C:  MOVLW  01
533E:  MOVWF  xC8
5340:  MOVWF  xC9
5342:  MOVLB  0
5344:  CALL   2910
....................        
....................  
....................       if(RIGHT)// Si oprime derecha 
5348:  BSF    F92.3
534A:  BTFSS  F80.3
534C:  BRA    537E
....................       {  if(Flanco1 == 0)  
534E:  MOVLB  2
5350:  BTFSC  x15.6
5352:  BRA    537C
....................             {Flanco1 = 1;Menu=Flecha2+1;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF); }} 
5354:  BSF    x15.6
5356:  MOVLW  01
5358:  ADDWF  x0F,W
535A:  MOVWF  x09
535C:  MOVFF  20B,20F
5360:  MOVFF  20B,20D
5364:  MOVLW  1E
5366:  MOVLB  3
5368:  MOVWF  xB9
536A:  MOVLB  0
536C:  CALL   2550
5370:  MOVLB  3
5372:  CLRF   xB5
5374:  MOVLB  0
5376:  CALL   26BA
537A:  MOVLB  2
....................          else 
537C:  BRA    5382
....................             {Flanco1 = 0;}    
537E:  MOVLB  2
5380:  BCF    x15.6
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //-Sub-Menus de selección de proceso. 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==17){ // Menu de Pre-ciclo 
5382:  MOVF   x09,W
5384:  SUBLW  11
5386:  BTFSS  FD8.2
5388:  BRA    5512
....................       glcd_imagen(2); //Guante 
538A:  MOVLW  02
538C:  MOVLB  3
538E:  MOVWF  xB4
5390:  MOVLB  0
5392:  CALL   316A
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5396:  MOVLW  3F
5398:  MOVLB  3
539A:  MOVWF  xC6
539C:  MOVLW  28
539E:  MOVWF  xC7
53A0:  MOVLW  64
53A2:  MOVWF  xC8
53A4:  MOVLW  35
53A6:  MOVWF  xC9
53A8:  MOVLW  01
53AA:  MOVWF  xCA
53AC:  MOVWF  xCB
53AE:  MOVLB  0
53B0:  CALL   2DB2
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
53B4:  MOVLW  4C
53B6:  MOVLB  3
53B8:  MOVWF  xC4
53BA:  MOVLW  2C
53BC:  MOVWF  xC5
53BE:  MOVLW  01
53C0:  MOVWF  xC7
53C2:  MOVLW  97
53C4:  MOVWF  xC6
53C6:  MOVLW  01
53C8:  MOVWF  xC8
53CA:  CLRF   xC9
53CC:  MOVLB  0
53CE:  CALL   2910
....................          
....................       mensajes(5,55); 
53D2:  MOVLW  05
53D4:  MOVLB  3
53D6:  MOVWF  xB5
53D8:  MOVLW  37
53DA:  MOVWF  xB6
53DC:  MOVLB  0
53DE:  CALL   303C
....................       //glcd_text57(60, 0, DuracionC, 1, ON);            // Write the new voltage         
....................       glcd_text57(53, 10, Tempe_pre, 1, ON);            // Write the new voltage         
53E2:  MOVLW  35
53E4:  MOVLB  3
53E6:  MOVWF  xC4
53E8:  MOVLW  0A
53EA:  MOVWF  xC5
53EC:  CLRF   xC7
53EE:  MOVLW  B8
53F0:  MOVWF  xC6
53F2:  MOVLW  01
53F4:  MOVWF  xC8
53F6:  MOVWF  xC9
53F8:  MOVLB  0
53FA:  CALL   2910
....................       glcd_text57(53, 20, TestC, 1, ON); 
53FE:  MOVLW  35
5400:  MOVLB  3
5402:  MOVWF  xC4
5404:  MOVLW  14
5406:  MOVWF  xC5
5408:  MOVLW  01
540A:  MOVWF  xC7
540C:  MOVLW  50
540E:  MOVWF  xC6
5410:  MOVLW  01
5412:  MOVWF  xC8
5414:  MOVWF  xC9
5416:  MOVLB  0
5418:  CALL   2910
....................       glcd_text57(53, 30, TsecC, 1, ON); 
541C:  MOVLW  35
541E:  MOVLB  3
5420:  MOVWF  xC4
5422:  MOVLW  1E
5424:  MOVWF  xC5
5426:  MOVLW  01
5428:  MOVWF  xC7
542A:  MOVLW  59
542C:  MOVWF  xC6
542E:  MOVLW  01
5430:  MOVWF  xC8
5432:  MOVWF  xC9
5434:  MOVLB  0
5436:  CALL   2910
....................        
....................       if(LEFT)// Si oprime Izquier|da 
543A:  BSF    F92.5
543C:  BTFSS  F80.5
543E:  BRA    547C
....................        {  if(Flanco3 == 0)  
5440:  MOVLB  2
5442:  BTFSC  x16.0
5444:  BRA    547A
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5446:  BSF    x16.0
5448:  MOVLW  1E
544A:  MOVLB  3
544C:  MOVWF  xB9
544E:  MOVLB  0
5450:  CALL   2550
5454:  MOVLW  10
5456:  MOVLB  2
5458:  MOVWF  x09
545A:  MOVFF  20B,20F
545E:  MOVFF  20B,20D
5462:  MOVLW  1E
5464:  MOVLB  3
5466:  MOVWF  xB9
5468:  MOVLB  0
546A:  CALL   2550
546E:  MOVLB  3
5470:  CLRF   xB5
5472:  MOVLB  0
5474:  CALL   26BA
5478:  MOVLB  2
....................         } 
....................          else 
547A:  BRA    5480
....................             {Flanco3 = 0;}                 
547C:  MOVLB  2
547E:  BCF    x16.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5480:  BSF    F92.3
5482:  BTFSS  F80.3
5484:  BRA    5510
....................       {  if(Flanco1 == 0)  
5486:  BTFSC  x15.6
5488:  BRA    550E
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
548A:  BSF    x15.6
548C:  MOVLW  64
548E:  MOVWF  x09
5490:  MOVFF  20B,20F
5494:  MOVFF  20B,20D
5498:  MOVLW  1E
549A:  MOVLB  3
549C:  MOVWF  xB9
549E:  MOVLB  0
54A0:  CALL   2550
54A4:  MOVLB  3
54A6:  CLRF   xB5
54A8:  MOVLB  0
54AA:  CALL   26BA
54AE:  MOVLW  20
54B0:  MOVLB  2
54B2:  MOVWF  x0A
54B4:  MOVLW  10
54B6:  MOVWF  x0B
54B8:  MOVWF  x10
54BA:  MOVLW  20
54BC:  MOVWF  x11
....................             estadot40=0;estadoc=1;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=121; 
54BE:  BCF    x15.0
54C0:  BSF    x15.1
54C2:  BCF    x15.2
54C4:  BCF    x15.3
54C6:  BCF    x15.4
54C8:  CLRF   x14
54CA:  MOVLB  3
54CC:  CLRF   xC4
54CE:  MOVLW  37
54D0:  MOVWF  xC5
54D2:  CLRF   xC7
54D4:  MOVLW  DD
54D6:  MOVWF  xC6
54D8:  MOVLW  01
54DA:  MOVWF  xC8
54DC:  MOVWF  xC9
54DE:  MOVLB  0
54E0:  CALL   2910
54E4:  MOVLW  79
54E6:  MOVLB  2
54E8:  MOVWF  x34
....................             glcd_rect(15, 18, 30, 53, NO, ON);enable_interrupts(global);}} 
54EA:  MOVLW  0F
54EC:  MOVLB  3
54EE:  MOVWF  xC6
54F0:  MOVLW  12
54F2:  MOVWF  xC7
54F4:  MOVLW  1E
54F6:  MOVWF  xC8
54F8:  MOVLW  35
54FA:  MOVWF  xC9
54FC:  CLRF   xCA
54FE:  MOVLW  01
5500:  MOVWF  xCB
5502:  MOVLB  0
5504:  CALL   2DB2
5508:  MOVLW  C0
550A:  IORWF  FF2,F
550C:  MOVLB  2
....................          else 
550E:  BRA    5512
....................             {Flanco1 = 0;}    
5510:  BCF    x15.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==25){ // Menu de Liquido       
5512:  MOVF   x09,W
5514:  SUBLW  19
5516:  BTFSS  FD8.2
5518:  BRA    5666
....................       glcd_imagen(4); //ErlenMeyer con Liquido 
551A:  MOVLW  04
551C:  MOVLB  3
551E:  MOVWF  xB4
5520:  MOVLB  0
5522:  CALL   316A
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5526:  MOVLW  3F
5528:  MOVLB  3
552A:  MOVWF  xC6
552C:  MOVLW  28
552E:  MOVWF  xC7
5530:  MOVLW  64
5532:  MOVWF  xC8
5534:  MOVLW  35
5536:  MOVWF  xC9
5538:  MOVLW  01
553A:  MOVWF  xCA
553C:  MOVWF  xCB
553E:  MOVLB  0
5540:  CALL   2DB2
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
5544:  MOVLW  4C
5546:  MOVLB  3
5548:  MOVWF  xC4
554A:  MOVLW  2C
554C:  MOVWF  xC5
554E:  MOVLW  01
5550:  MOVWF  xC7
5552:  MOVLW  97
5554:  MOVWF  xC6
5556:  MOVLW  01
5558:  MOVWF  xC8
555A:  CLRF   xC9
555C:  MOVLB  0
555E:  CALL   2910
....................          
....................       mensajes(7,55); 
5562:  MOVLW  07
5564:  MOVLB  3
5566:  MOVWF  xB5
5568:  MOVLW  37
556A:  MOVWF  xB6
556C:  MOVLB  0
556E:  CALL   303C
....................       //glcd_text57(60, 0, DuracionL, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TL, 1, ON);            // Write the new voltage         
5572:  MOVLW  3F
5574:  MOVLB  3
5576:  MOVWF  xC4
5578:  MOVLW  0A
557A:  MOVWF  xC5
557C:  MOVLW  01
557E:  MOVWF  xC7
5580:  MOVLW  7B
5582:  MOVWF  xC6
5584:  MOVLW  01
5586:  MOVWF  xC8
5588:  MOVWF  xC9
558A:  MOVLB  0
558C:  CALL   2910
....................       glcd_text57(63, 20, TestL, 1, ON);            // Write the new voltage         
5590:  MOVLW  3F
5592:  MOVLB  3
5594:  MOVWF  xC4
5596:  MOVLW  14
5598:  MOVWF  xC5
559A:  MOVLW  01
559C:  MOVWF  xC7
559E:  MOVLW  83
55A0:  MOVWF  xC6
55A2:  MOVLW  01
55A4:  MOVWF  xC8
55A6:  MOVWF  xC9
55A8:  MOVLB  0
55AA:  CALL   2910
....................       glcd_text57(63, 30, TsecL, 1, ON);            // Write the new voltage         
55AE:  MOVLW  3F
55B0:  MOVLB  3
55B2:  MOVWF  xC4
55B4:  MOVLW  1E
55B6:  MOVWF  xC5
55B8:  MOVLW  01
55BA:  MOVWF  xC7
55BC:  MOVLW  8D
55BE:  MOVWF  xC6
55C0:  MOVLW  01
55C2:  MOVWF  xC8
55C4:  MOVWF  xC9
55C6:  MOVLB  0
55C8:  CALL   2910
....................        
....................       if(LEFT)// Si oprime Izquier|da 
55CC:  BSF    F92.5
55CE:  BTFSS  F80.5
55D0:  BRA    560E
....................        {  if(Flanco3 == 0)  
55D2:  MOVLB  2
55D4:  BTFSC  x16.0
55D6:  BRA    560C
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
55D8:  BSF    x16.0
55DA:  MOVLW  1E
55DC:  MOVLB  3
55DE:  MOVWF  xB9
55E0:  MOVLB  0
55E2:  CALL   2550
55E6:  MOVLW  10
55E8:  MOVLB  2
55EA:  MOVWF  x09
55EC:  MOVFF  20B,20F
55F0:  MOVFF  20B,20D
55F4:  MOVLW  1E
55F6:  MOVLB  3
55F8:  MOVWF  xB9
55FA:  MOVLB  0
55FC:  CALL   2550
5600:  MOVLB  3
5602:  CLRF   xB5
5604:  MOVLB  0
5606:  CALL   26BA
560A:  MOVLB  2
....................         } 
....................          else 
560C:  BRA    5612
....................             {Flanco3 = 0;}                 
560E:  MOVLB  2
5610:  BCF    x16.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5612:  BSF    F92.3
5614:  BTFSS  F80.3
5616:  BRA    5664
....................       {  if(Flanco1 == 0)  
5618:  BTFSC  x15.6
561A:  BRA    5662
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
561C:  BSF    x15.6
561E:  MOVLW  5A
5620:  MOVWF  x09
5622:  MOVFF  20B,20F
5626:  MOVFF  20B,20D
562A:  MOVLW  1E
562C:  MOVLB  3
562E:  MOVWF  xB9
5630:  MOVLB  0
5632:  CALL   2550
5636:  MOVLB  3
5638:  CLRF   xB5
563A:  MOVLB  0
563C:  CALL   26BA
5640:  MOVLW  20
5642:  MOVLB  2
5644:  MOVWF  x0A
5646:  MOVLW  10
5648:  MOVWF  x0B
564A:  MOVWF  x10
564C:  MOVLW  20
564E:  MOVWF  x11
....................             estadot40=0;estadoc=0;estadoi=0;estadol=1;estadop=0;Liquid=1;Setpoint=121;}} 
5650:  BCF    x15.0
5652:  BCF    x15.1
5654:  BCF    x15.2
5656:  BSF    x15.3
5658:  BCF    x15.4
565A:  MOVLW  01
565C:  MOVWF  x14
565E:  MOVLW  79
5660:  MOVWF  x34
....................          else 
5662:  BRA    5666
....................             {Flanco1 = 0;}    
5664:  BCF    x15.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==33){ // Menu de Instrumental Suave      
5666:  MOVF   x09,W
5668:  SUBLW  21
566A:  BTFSS  FD8.2
566C:  BRA    57BA
....................       glcd_imagen(3); //Erlen Meyer 
566E:  MOVLW  03
5670:  MOVLB  3
5672:  MOVWF  xB4
5674:  MOVLB  0
5676:  CALL   316A
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
567A:  MOVLW  3F
567C:  MOVLB  3
567E:  MOVWF  xC6
5680:  MOVLW  28
5682:  MOVWF  xC7
5684:  MOVLW  64
5686:  MOVWF  xC8
5688:  MOVLW  35
568A:  MOVWF  xC9
568C:  MOVLW  01
568E:  MOVWF  xCA
5690:  MOVWF  xCB
5692:  MOVLB  0
5694:  CALL   2DB2
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
5698:  MOVLW  4C
569A:  MOVLB  3
569C:  MOVWF  xC4
569E:  MOVLW  2C
56A0:  MOVWF  xC5
56A2:  MOVLW  01
56A4:  MOVWF  xC7
56A6:  MOVLW  97
56A8:  MOVWF  xC6
56AA:  MOVLW  01
56AC:  MOVWF  xC8
56AE:  CLRF   xC9
56B0:  MOVLB  0
56B2:  CALL   2910
....................          
....................       mensajes(6,55); 
56B6:  MOVLW  06
56B8:  MOVLB  3
56BA:  MOVWF  xB5
56BC:  MOVLW  37
56BE:  MOVWF  xB6
56C0:  MOVLB  0
56C2:  CALL   303C
....................       //glcd_text57(60, 0, DuracionI, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TL, 1, ON);            // Write the new voltage         
56C6:  MOVLW  3F
56C8:  MOVLB  3
56CA:  MOVWF  xC4
56CC:  MOVLW  0A
56CE:  MOVWF  xC5
56D0:  MOVLW  01
56D2:  MOVWF  xC7
56D4:  MOVLW  7B
56D6:  MOVWF  xC6
56D8:  MOVLW  01
56DA:  MOVWF  xC8
56DC:  MOVWF  xC9
56DE:  MOVLB  0
56E0:  CALL   2910
....................       glcd_text57(63, 20, TestI, 1, ON);            // Write the new voltage         
56E4:  MOVLW  3F
56E6:  MOVLB  3
56E8:  MOVWF  xC4
56EA:  MOVLW  14
56EC:  MOVWF  xC5
56EE:  MOVLW  01
56F0:  MOVWF  xC7
56F2:  MOVLW  62
56F4:  MOVWF  xC6
56F6:  MOVLW  01
56F8:  MOVWF  xC8
56FA:  MOVWF  xC9
56FC:  MOVLB  0
56FE:  CALL   2910
....................       glcd_text57(63, 30, TsecL, 1, ON);            // Write the new voltage         
5702:  MOVLW  3F
5704:  MOVLB  3
5706:  MOVWF  xC4
5708:  MOVLW  1E
570A:  MOVWF  xC5
570C:  MOVLW  01
570E:  MOVWF  xC7
5710:  MOVLW  8D
5712:  MOVWF  xC6
5714:  MOVLW  01
5716:  MOVWF  xC8
5718:  MOVWF  xC9
571A:  MOVLB  0
571C:  CALL   2910
....................  
....................       if(LEFT)// Si oprime Izquier|da 
5720:  BSF    F92.5
5722:  BTFSS  F80.5
5724:  BRA    5762
....................        {  if(Flanco3 == 0)  
5726:  MOVLB  2
5728:  BTFSC  x16.0
572A:  BRA    5760
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
572C:  BSF    x16.0
572E:  MOVLW  1E
5730:  MOVLB  3
5732:  MOVWF  xB9
5734:  MOVLB  0
5736:  CALL   2550
573A:  MOVLW  10
573C:  MOVLB  2
573E:  MOVWF  x09
5740:  MOVFF  20B,20F
5744:  MOVFF  20B,20D
5748:  MOVLW  1E
574A:  MOVLB  3
574C:  MOVWF  xB9
574E:  MOVLB  0
5750:  CALL   2550
5754:  MOVLB  3
5756:  CLRF   xB5
5758:  MOVLB  0
575A:  CALL   26BA
575E:  MOVLB  2
....................         } 
....................          else 
5760:  BRA    5766
....................             {Flanco3 = 0;}                 
5762:  MOVLB  2
5764:  BCF    x16.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5766:  BSF    F92.3
5768:  BTFSS  F80.3
576A:  BRA    57B8
....................       {  if(Flanco1 == 0)  
576C:  BTFSC  x15.6
576E:  BRA    57B6
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5770:  BSF    x15.6
5772:  MOVLW  5A
5774:  MOVWF  x09
5776:  MOVFF  20B,20F
577A:  MOVFF  20B,20D
577E:  MOVLW  1E
5780:  MOVLB  3
5782:  MOVWF  xB9
5784:  MOVLB  0
5786:  CALL   2550
578A:  MOVLB  3
578C:  CLRF   xB5
578E:  MOVLB  0
5790:  CALL   26BA
5794:  MOVLW  20
5796:  MOVLB  2
5798:  MOVWF  x0A
579A:  MOVLW  10
579C:  MOVWF  x0B
579E:  MOVWF  x10
57A0:  MOVLW  20
57A2:  MOVWF  x11
....................             estadot40=0;estadoc=0;estadoi=1;estadol=0;estadop=0;Liquid=1;Setpoint=121;}} 
57A4:  BCF    x15.0
57A6:  BCF    x15.1
57A8:  BSF    x15.2
57AA:  BCF    x15.3
57AC:  BCF    x15.4
57AE:  MOVLW  01
57B0:  MOVWF  x14
57B2:  MOVLW  79
57B4:  MOVWF  x34
....................          else 
57B6:  BRA    57BA
....................             {Flanco1 = 0;}    
57B8:  BCF    x15.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==41){ // Menu de textil e instrumental      
57BA:  MOVF   x09,W
57BC:  SUBLW  29
57BE:  BTFSS  FD8.2
57C0:  BRA    594C
....................       glcd_imagen(1); //Tijeras y Camisa 
57C2:  MOVLW  01
57C4:  MOVLB  3
57C6:  MOVWF  xB4
57C8:  MOVLB  0
57CA:  CALL   316A
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
57CE:  MOVLW  3F
57D0:  MOVLB  3
57D2:  MOVWF  xC6
57D4:  MOVLW  28
57D6:  MOVWF  xC7
57D8:  MOVLW  64
57DA:  MOVWF  xC8
57DC:  MOVLW  35
57DE:  MOVWF  xC9
57E0:  MOVLW  01
57E2:  MOVWF  xCA
57E4:  MOVWF  xCB
57E6:  MOVLB  0
57E8:  CALL   2DB2
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
57EC:  MOVLW  4C
57EE:  MOVLB  3
57F0:  MOVWF  xC4
57F2:  MOVLW  2C
57F4:  MOVWF  xC5
57F6:  MOVLW  01
57F8:  MOVWF  xC7
57FA:  MOVLW  97
57FC:  MOVWF  xC6
57FE:  MOVLW  01
5800:  MOVWF  xC8
5802:  CLRF   xC9
5804:  MOVLB  0
5806:  CALL   2910
....................          
....................       mensajes(4,55); 
580A:  MOVLW  04
580C:  MOVLB  3
580E:  MOVWF  xB5
5810:  MOVLW  37
5812:  MOVWF  xB6
5814:  MOVLB  0
5816:  CALL   303C
....................       //glcd_text57(60, 0, Duracion40, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, T40, 1, ON);            // Write the new voltage         
581A:  MOVLW  3F
581C:  MOVLB  3
581E:  MOVWF  xC4
5820:  MOVLW  0A
5822:  MOVWF  xC5
5824:  MOVLW  01
5826:  MOVWF  xC7
5828:  MOVLW  32
582A:  MOVWF  xC6
582C:  MOVLW  01
582E:  MOVWF  xC8
5830:  MOVWF  xC9
5832:  MOVLB  0
5834:  CALL   2910
....................       glcd_text57(63, 20, Test40, 1, ON);            // Write the new voltage         
5838:  MOVLW  3F
583A:  MOVLB  3
583C:  MOVWF  xC4
583E:  MOVLW  14
5840:  MOVWF  xC5
5842:  MOVLW  01
5844:  MOVWF  xC7
5846:  MOVLW  3A
5848:  MOVWF  xC6
584A:  MOVLW  01
584C:  MOVWF  xC8
584E:  MOVWF  xC9
5850:  MOVLB  0
5852:  CALL   2910
....................       glcd_text57(63, 30, Tsec40, 1, ON);            // Write the new voltage         
5856:  MOVLW  3F
5858:  MOVLB  3
585A:  MOVWF  xC4
585C:  MOVLW  1E
585E:  MOVWF  xC5
5860:  MOVLW  01
5862:  MOVWF  xC7
5864:  MOVLW  44
5866:  MOVWF  xC6
5868:  MOVLW  01
586A:  MOVWF  xC8
586C:  MOVWF  xC9
586E:  MOVLB  0
5870:  CALL   2910
....................        
....................       if(LEFT)// Si oprime Izquier|da 
5874:  BSF    F92.5
5876:  BTFSS  F80.5
5878:  BRA    58B6
....................        {  if(Flanco3 == 0)  
587A:  MOVLB  2
587C:  BTFSC  x16.0
587E:  BRA    58B4
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5880:  BSF    x16.0
5882:  MOVLW  1E
5884:  MOVLB  3
5886:  MOVWF  xB9
5888:  MOVLB  0
588A:  CALL   2550
588E:  MOVLW  10
5890:  MOVLB  2
5892:  MOVWF  x09
5894:  MOVFF  20B,20F
5898:  MOVFF  20B,20D
589C:  MOVLW  1E
589E:  MOVLB  3
58A0:  MOVWF  xB9
58A2:  MOVLB  0
58A4:  CALL   2550
58A8:  MOVLB  3
58AA:  CLRF   xB5
58AC:  MOVLB  0
58AE:  CALL   26BA
58B2:  MOVLB  2
....................         } 
....................          else 
58B4:  BRA    58BA
....................             {Flanco3 = 0;}                 
58B6:  MOVLB  2
58B8:  BCF    x16.0
....................  
....................       if(RIGHT)// Si oprime derecha 
58BA:  BSF    F92.3
58BC:  BTFSS  F80.3
58BE:  BRA    594A
....................       {  if(Flanco1 == 0)  
58C0:  BTFSC  x15.6
58C2:  BRA    5948
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
58C4:  BSF    x15.6
58C6:  MOVLW  64
58C8:  MOVWF  x09
58CA:  MOVFF  20B,20F
58CE:  MOVFF  20B,20D
58D2:  MOVLW  1E
58D4:  MOVLB  3
58D6:  MOVWF  xB9
58D8:  MOVLB  0
58DA:  CALL   2550
58DE:  MOVLB  3
58E0:  CLRF   xB5
58E2:  MOVLB  0
58E4:  CALL   26BA
58E8:  MOVLW  20
58EA:  MOVLB  2
58EC:  MOVWF  x0A
58EE:  MOVLW  10
58F0:  MOVWF  x0B
58F2:  MOVWF  x10
58F4:  MOVLW  20
58F6:  MOVWF  x11
....................             estadot40=1;estadoc=0;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=121; 
58F8:  BSF    x15.0
58FA:  BCF    x15.1
58FC:  BCF    x15.2
58FE:  BCF    x15.3
5900:  BCF    x15.4
5902:  CLRF   x14
5904:  MOVLB  3
5906:  CLRF   xC4
5908:  MOVLW  37
590A:  MOVWF  xC5
590C:  CLRF   xC7
590E:  MOVLW  DD
5910:  MOVWF  xC6
5912:  MOVLW  01
5914:  MOVWF  xC8
5916:  MOVWF  xC9
5918:  MOVLB  0
591A:  CALL   2910
591E:  MOVLW  79
5920:  MOVLB  2
5922:  MOVWF  x34
....................             glcd_rect(15, 18, 30, 53, NO, ON);enable_interrupts(global);}} 
5924:  MOVLW  0F
5926:  MOVLB  3
5928:  MOVWF  xC6
592A:  MOVLW  12
592C:  MOVWF  xC7
592E:  MOVLW  1E
5930:  MOVWF  xC8
5932:  MOVLW  35
5934:  MOVWF  xC9
5936:  CLRF   xCA
5938:  MOVLW  01
593A:  MOVWF  xCB
593C:  MOVLB  0
593E:  CALL   2DB2
5942:  MOVLW  C0
5944:  IORWF  FF2,F
5946:  MOVLB  2
....................          else 
5948:  BRA    594C
....................             {Flanco1 = 0;}    
594A:  BCF    x15.6
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==49){ // Menu de Proceso Personalizado 
594C:  MOVF   x09,W
594E:  SUBLW  31
5950:  BTFSS  FD8.2
5952:  BRA    5C00
....................       strcpy(Menus.Letra,"Menu"); 
5954:  CLRF   FEA
5956:  MOVLW  62
5958:  MOVWF  FE9
595A:  MOVFF  FF2,3B4
595E:  BCF    FF2.7
5960:  MOVLW  00
5962:  MOVLB  0
5964:  CALL   184A
5968:  TBLRD*-
596A:  TBLRD*+
596C:  MOVF   FF5,W
596E:  MOVWF  FEE
5970:  IORLW  00
5972:  BNZ   596A
5974:  MOVLB  3
5976:  BTFSC  xB4.7
5978:  BSF    FF2.7
....................       displayMenu(Menus.Letra,40,0,1,2); 
597A:  CLRF   xB5
597C:  MOVLW  62
597E:  MOVWF  xB4
5980:  MOVLW  28
5982:  MOVWF  xB6
5984:  CLRF   xB7
5986:  MOVLW  01
5988:  MOVWF  xB8
598A:  MOVLW  02
598C:  MOVWF  xB9
598E:  MOVLB  0
5990:  CALL   34B6
....................        
....................       if(Opcion==1)    
5994:  MOVLB  2
5996:  DECFSZ x3C,W
5998:  BRA    59DC
....................          {strcpy(Menus.Letra,"Ajustes"); 
599A:  CLRF   FEA
599C:  MOVLW  62
599E:  MOVWF  FE9
59A0:  MOVFF  FF2,3B4
59A4:  BCF    FF2.7
59A6:  MOVLW  00
59A8:  MOVLB  0
59AA:  CALL   186A
59AE:  TBLRD*-
59B0:  TBLRD*+
59B2:  MOVF   FF5,W
59B4:  MOVWF  FEE
59B6:  IORLW  00
59B8:  BNZ   59B0
59BA:  MOVLB  3
59BC:  BTFSC  xB4.7
59BE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,19,1,1);} 
59C0:  CLRF   xB5
59C2:  MOVLW  62
59C4:  MOVWF  xB4
59C6:  CLRF   xB6
59C8:  MOVLW  13
59CA:  MOVWF  xB7
59CC:  MOVLW  01
59CE:  MOVWF  xB8
59D0:  MOVWF  xB9
59D2:  MOVLB  0
59D4:  CALL   34B6
....................       else 
59D8:  BRA    5A1A
59DA:  MOVLB  2
....................          {strcpy(Menus.Letra,"Ajustes"); 
59DC:  CLRF   FEA
59DE:  MOVLW  62
59E0:  MOVWF  FE9
59E2:  MOVFF  FF2,3B4
59E6:  BCF    FF2.7
59E8:  MOVLW  00
59EA:  MOVLB  0
59EC:  CALL   186A
59F0:  TBLRD*-
59F2:  TBLRD*+
59F4:  MOVF   FF5,W
59F6:  MOVWF  FEE
59F8:  IORLW  00
59FA:  BNZ   59F2
59FC:  MOVLB  3
59FE:  BTFSC  xB4.7
5A00:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,19,0,1);} 
5A02:  CLRF   xB5
5A04:  MOVLW  62
5A06:  MOVWF  xB4
5A08:  CLRF   xB6
5A0A:  MOVLW  13
5A0C:  MOVWF  xB7
5A0E:  CLRF   xB8
5A10:  MOVLW  01
5A12:  MOVWF  xB9
5A14:  MOVLB  0
5A16:  CALL   34B6
....................           
....................       if(Opcion==2)    
5A1A:  MOVLB  2
5A1C:  MOVF   x3C,W
5A1E:  SUBLW  02
5A20:  BNZ   5A64
....................          {strcpy(Menus.Letra,"Admin"); 
5A22:  CLRF   FEA
5A24:  MOVLW  62
5A26:  MOVWF  FE9
5A28:  MOVFF  FF2,3B4
5A2C:  BCF    FF2.7
5A2E:  MOVLW  00
5A30:  MOVLB  0
5A32:  CALL   188C
5A36:  TBLRD*-
5A38:  TBLRD*+
5A3A:  MOVF   FF5,W
5A3C:  MOVWF  FEE
5A3E:  IORLW  00
5A40:  BNZ   5A38
5A42:  MOVLB  3
5A44:  BTFSC  xB4.7
5A46:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,35,1,1);} 
5A48:  CLRF   xB5
5A4A:  MOVLW  62
5A4C:  MOVWF  xB4
5A4E:  CLRF   xB6
5A50:  MOVLW  23
5A52:  MOVWF  xB7
5A54:  MOVLW  01
5A56:  MOVWF  xB8
5A58:  MOVWF  xB9
5A5A:  MOVLB  0
5A5C:  CALL   34B6
....................       else 
5A60:  BRA    5AA2
5A62:  MOVLB  2
....................          {strcpy(Menus.Letra,"Admin"); 
5A64:  CLRF   FEA
5A66:  MOVLW  62
5A68:  MOVWF  FE9
5A6A:  MOVFF  FF2,3B4
5A6E:  BCF    FF2.7
5A70:  MOVLW  00
5A72:  MOVLB  0
5A74:  CALL   188C
5A78:  TBLRD*-
5A7A:  TBLRD*+
5A7C:  MOVF   FF5,W
5A7E:  MOVWF  FEE
5A80:  IORLW  00
5A82:  BNZ   5A7A
5A84:  MOVLB  3
5A86:  BTFSC  xB4.7
5A88:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,35,0,1);}    
5A8A:  CLRF   xB5
5A8C:  MOVLW  62
5A8E:  MOVWF  xB4
5A90:  CLRF   xB6
5A92:  MOVLW  23
5A94:  MOVWF  xB7
5A96:  CLRF   xB8
5A98:  MOVLW  01
5A9A:  MOVWF  xB9
5A9C:  MOVLB  0
5A9E:  CALL   34B6
....................           
....................        if(Opcion==3)    
5AA2:  MOVLB  2
5AA4:  MOVF   x3C,W
5AA6:  SUBLW  03
5AA8:  BNZ   5AEC
....................          {strcpy(Menus.Letra,"Modo"); 
5AAA:  CLRF   FEA
5AAC:  MOVLW  62
5AAE:  MOVWF  FE9
5AB0:  MOVFF  FF2,3B4
5AB4:  BCF    FF2.7
5AB6:  MOVLW  00
5AB8:  MOVLB  0
5ABA:  CALL   18AC
5ABE:  TBLRD*-
5AC0:  TBLRD*+
5AC2:  MOVF   FF5,W
5AC4:  MOVWF  FEE
5AC6:  IORLW  00
5AC8:  BNZ   5AC0
5ACA:  MOVLB  3
5ACC:  BTFSC  xB4.7
5ACE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,51,1,1);} 
5AD0:  CLRF   xB5
5AD2:  MOVLW  62
5AD4:  MOVWF  xB4
5AD6:  CLRF   xB6
5AD8:  MOVLW  33
5ADA:  MOVWF  xB7
5ADC:  MOVLW  01
5ADE:  MOVWF  xB8
5AE0:  MOVWF  xB9
5AE2:  MOVLB  0
5AE4:  CALL   34B6
....................       else 
5AE8:  BRA    5B2A
5AEA:  MOVLB  2
....................          {strcpy(Menus.Letra,"Modo"); 
5AEC:  CLRF   FEA
5AEE:  MOVLW  62
5AF0:  MOVWF  FE9
5AF2:  MOVFF  FF2,3B4
5AF6:  BCF    FF2.7
5AF8:  MOVLW  00
5AFA:  MOVLB  0
5AFC:  CALL   18AC
5B00:  TBLRD*-
5B02:  TBLRD*+
5B04:  MOVF   FF5,W
5B06:  MOVWF  FEE
5B08:  IORLW  00
5B0A:  BNZ   5B02
5B0C:  MOVLB  3
5B0E:  BTFSC  xB4.7
5B10:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,51,0,1);}      
5B12:  CLRF   xB5
5B14:  MOVLW  62
5B16:  MOVWF  xB4
5B18:  CLRF   xB6
5B1A:  MOVLW  33
5B1C:  MOVWF  xB7
5B1E:  CLRF   xB8
5B20:  MOVLW  01
5B22:  MOVWF  xB9
5B24:  MOVLB  0
5B26:  CALL   34B6
....................  
....................        if(w==0) 
5B2A:  MOVLB  2
5B2C:  MOVF   x3D,F
5B2E:  BNZ   5B4C
....................        {delay_ms(500);w=1;} 
5B30:  MOVLW  02
5B32:  MOVLB  3
5B34:  MOVWF  xB4
5B36:  MOVLW  FA
5B38:  MOVWF  xB9
5B3A:  MOVLB  0
5B3C:  CALL   2550
5B40:  MOVLB  3
5B42:  DECFSZ xB4,F
5B44:  BRA    5B36
5B46:  MOVLW  01
5B48:  MOVLB  2
5B4A:  MOVWF  x3D
....................           
....................          
....................       if(UP)//Si oprime hacia arriba 
5B4C:  BSF    F92.1
5B4E:  BTFSS  F80.1
5B50:  BRA    5B6A
....................       {  if(Flanco == 0)  
5B52:  BTFSC  x15.5
5B54:  BRA    5B68
....................             {Flanco = 1;delay_ms(30);Opcion--; 
5B56:  BSF    x15.5
5B58:  MOVLW  1E
5B5A:  MOVLB  3
5B5C:  MOVWF  xB9
5B5E:  MOVLB  0
5B60:  CALL   2550
5B64:  MOVLB  2
5B66:  DECF   x3C,F
....................             } 
....................       } 
....................          else 
5B68:  BRA    5B6C
....................             {Flanco = 0;} 
5B6A:  BCF    x15.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5B6C:  BSF    F92.2
5B6E:  BTFSS  F80.2
5B70:  BRA    5B8A
....................       {  if(Flanco2 == 0)  
5B72:  BTFSC  x15.7
5B74:  BRA    5B88
....................             {Flanco2 = 1;delay_ms(30);Opcion++; 
5B76:  BSF    x15.7
5B78:  MOVLW  1E
5B7A:  MOVLB  3
5B7C:  MOVWF  xB9
5B7E:  MOVLB  0
5B80:  CALL   2550
5B84:  MOVLB  2
5B86:  INCF   x3C,F
....................             }      
....................       } 
....................          else 
5B88:  BRA    5B8C
....................             {Flanco2 = 0;}   
5B8A:  BCF    x15.7
....................              
....................       if(RIGHT)//Si oprime SET 
5B8C:  BSF    F92.3
5B8E:  BTFSS  F80.3
5B90:  BRA    5BBE
....................       {  if(Flanco1 == 0)  
5B92:  BTFSC  x15.6
5B94:  BRA    5BBC
....................             {Flanco1 = 1;delay_ms(30);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF); 
5B96:  BSF    x15.6
5B98:  MOVLW  1E
5B9A:  MOVLB  3
5B9C:  MOVWF  xB9
5B9E:  MOVLB  0
5BA0:  CALL   2550
5BA4:  MOVLW  03
5BA6:  MOVLB  2
5BA8:  ADDWF  x3C,W
5BAA:  MOVWF  x09
5BAC:  MOVLW  01
5BAE:  MOVWF  x3C
5BB0:  MOVLB  3
5BB2:  CLRF   xB5
5BB4:  MOVLB  0
5BB6:  CALL   26BA
5BBA:  MOVLB  2
....................             } 
....................       } 
....................          else 
5BBC:  BRA    5BC0
....................             {Flanco1 = 0;}   
5BBE:  BCF    x15.6
....................              
....................       if(LEFT)//Si oprime boton de Toma. 
5BC0:  BSF    F92.5
5BC2:  BTFSS  F80.5
5BC4:  BRA    5BEE
....................       {delay_ms(700);Menu=2;glcd_fillscreen(OFF);} 
5BC6:  MOVLW  04
5BC8:  MOVLB  3
5BCA:  MOVWF  xB4
5BCC:  MOVLW  AF
5BCE:  MOVWF  xB9
5BD0:  MOVLB  0
5BD2:  CALL   2550
5BD6:  MOVLB  3
5BD8:  DECFSZ xB4,F
5BDA:  BRA    5BCC
5BDC:  MOVLW  02
5BDE:  MOVLB  2
5BE0:  MOVWF  x09
5BE2:  MOVLB  3
5BE4:  CLRF   xB5
5BE6:  MOVLB  0
5BE8:  CALL   26BA
5BEC:  MOVLB  2
....................              
....................       if(Opcion>3) 
5BEE:  MOVF   x3C,W
5BF0:  SUBLW  03
5BF2:  BC    5BF8
....................       {Opcion=1;} 
5BF4:  MOVLW  01
5BF6:  MOVWF  x3C
....................       if(Opcion<1) 
5BF8:  MOVF   x3C,F
5BFA:  BNZ   5C00
....................       {Opcion=3;} 
5BFC:  MOVLW  03
5BFE:  MOVWF  x3C
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       if(Menu==90){ // Este es el menu de variación de desfogue. 
5C00:  MOVF   x09,W
5C02:  SUBLW  5A
5C04:  BTFSS  FD8.2
5C06:  BRA    5DAA
....................       glcd_text57(20,2,Desfogue_Lento,1,ON); 
5C08:  MOVLW  14
5C0A:  MOVLB  3
5C0C:  MOVWF  xC4
5C0E:  MOVLW  02
5C10:  MOVWF  xC5
5C12:  MOVLW  01
5C14:  MOVWF  xC7
5C16:  MOVLW  6C
5C18:  MOVWF  xC6
5C1A:  MOVLW  01
5C1C:  MOVWF  xC8
5C1E:  MOVWF  xC9
5C20:  MOVLB  0
5C22:  CALL   2910
....................       glcd_text57(30,15,Level,2,ON); 
5C26:  MOVLW  1E
5C28:  MOVLB  3
5C2A:  MOVWF  xC4
5C2C:  MOVLW  0F
5C2E:  MOVWF  xC5
5C30:  CLRF   xC7
5C32:  MOVLW  E8
5C34:  MOVWF  xC6
5C36:  MOVLW  02
5C38:  MOVWF  xC8
5C3A:  MOVLW  01
5C3C:  MOVWF  xC9
5C3E:  MOVLB  0
5C40:  CALL   2910
....................       displayTiempo(Nivel,50,41,5); 
5C44:  MOVFF  221,3B5
5C48:  MOVLW  32
5C4A:  MOVLB  3
5C4C:  MOVWF  xB6
5C4E:  MOVLW  29
5C50:  MOVWF  xB7
5C52:  MOVLW  05
5C54:  MOVWF  xB8
5C56:  MOVLB  0
5C58:  CALL   2E74
....................       glcd_rect(0,0,127,29,NO,ON); 
5C5C:  MOVLB  3
5C5E:  CLRF   xC6
5C60:  CLRF   xC7
5C62:  MOVLW  7F
5C64:  MOVWF  xC8
5C66:  MOVLW  1D
5C68:  MOVWF  xC9
5C6A:  CLRF   xCA
5C6C:  MOVLW  01
5C6E:  MOVWF  xCB
5C70:  MOVLB  0
5C72:  CALL   2DB2
....................        
....................       if(UP)//Si oprime hacia arriba 
5C76:  BSF    F92.1
5C78:  BTFSS  F80.1
5C7A:  BRA    5C9A
....................       {  if(Flanco == 0)  
5C7C:  MOVLB  2
5C7E:  BTFSC  x15.5
5C80:  BRA    5C98
....................             {Flanco = 1;delay_ms(30);Nivel++; 
5C82:  BSF    x15.5
5C84:  MOVLW  1E
5C86:  MOVLB  3
5C88:  MOVWF  xB9
5C8A:  MOVLB  0
5C8C:  CALL   2550
5C90:  MOVLB  2
5C92:  INCF   x21,F
5C94:  BTFSC  FD8.2
5C96:  INCF   x22,F
....................             } 
....................        } 
....................          else 
5C98:  BRA    5C9E
....................             {Flanco = 0;} 
5C9A:  MOVLB  2
5C9C:  BCF    x15.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5C9E:  BSF    F92.2
5CA0:  BTFSS  F80.2
5CA2:  BRA    5CC2
....................       {  if(Flanco2 == 0)  
5CA4:  BTFSC  x15.7
5CA6:  BRA    5CC0
....................             {Flanco2 = 1;delay_ms(30);Nivel--;               
5CA8:  BSF    x15.7
5CAA:  MOVLW  1E
5CAC:  MOVLB  3
5CAE:  MOVWF  xB9
5CB0:  MOVLB  0
5CB2:  CALL   2550
5CB6:  MOVLB  2
5CB8:  MOVF   x21,W
5CBA:  BTFSC  FD8.2
5CBC:  DECF   x22,F
5CBE:  DECF   x21,F
....................             } 
....................       } 
....................          else 
5CC0:  BRA    5CC4
....................             {Flanco2 = 0;} 
5CC2:  BCF    x15.7
....................       if(Nivel>6) 
5CC4:  MOVF   x22,F
5CC6:  BNZ   5CCE
5CC8:  MOVF   x21,W
5CCA:  SUBLW  06
5CCC:  BC    5CD4
....................       {Nivel=1;} 
5CCE:  CLRF   x22
5CD0:  MOVLW  01
5CD2:  MOVWF  x21
....................       if(Nivel<1) 
5CD4:  MOVF   x21,F
5CD6:  BNZ   5CE2
5CD8:  MOVF   x22,F
5CDA:  BNZ   5CE2
....................       {Nivel=6;} 
5CDC:  CLRF   x22
5CDE:  MOVLW  06
5CE0:  MOVWF  x21
....................        
....................       if(RIGHT)// Si oprime derecha 
5CE2:  BSF    F92.3
5CE4:  BTFSS  F80.3
5CE6:  BRA    5DA8
....................       {  if(Flanco1 == 0)  
5CE8:  BTFSC  x15.6
5CEA:  BRA    5DA6
....................             {Flanco1 = 1; 
5CEC:  BSF    x15.6
....................                Menu=100;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF);Flecha2=n_opcionL; Flecha=n_opcionL; 
5CEE:  MOVLW  64
5CF0:  MOVWF  x09
5CF2:  MOVLW  0F
5CF4:  MOVLB  3
5CF6:  MOVWF  xC6
5CF8:  MOVLW  12
5CFA:  MOVWF  xC7
5CFC:  MOVLW  1E
5CFE:  MOVWF  xC8
5D00:  MOVLW  35
5D02:  MOVWF  xC9
5D04:  CLRF   xCA
5D06:  MOVLW  01
5D08:  MOVWF  xCB
5D0A:  MOVLB  0
5D0C:  CALL   2DB2
5D10:  MOVLB  2
5D12:  BCF    x16.3
5D14:  MOVLW  C0
5D16:  IORWF  FF2,F
5D18:  MOVLB  3
5D1A:  CLRF   xB5
5D1C:  MOVLB  0
5D1E:  CALL   26BA
5D22:  MOVFF  20B,20F
5D26:  MOVFF  20B,20D
....................                n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;glcd_text57(0, 55, Calentando, 1, ON);write_eeprom(9,Nivel); 
5D2A:  MOVLW  20
5D2C:  MOVLB  2
5D2E:  MOVWF  x0A
5D30:  MOVLW  10
5D32:  MOVWF  x0B
5D34:  MOVWF  x10
5D36:  MOVLW  20
5D38:  MOVWF  x11
5D3A:  MOVLB  3
5D3C:  CLRF   xC4
5D3E:  MOVLW  37
5D40:  MOVWF  xC5
5D42:  CLRF   xC7
5D44:  MOVLW  DD
5D46:  MOVWF  xC6
5D48:  MOVLW  01
5D4A:  MOVWF  xC8
5D4C:  MOVWF  xC9
5D4E:  MOVLB  0
5D50:  CALL   2910
5D54:  MOVLW  09
5D56:  MOVWF  FA9
5D58:  MOVFF  221,FA8
5D5C:  BCF    FA6.6
5D5E:  BCF    FA6.7
5D60:  BSF    FA6.2
5D62:  MOVF   FF2,W
5D64:  MOVWF  00
5D66:  BCF    FF2.7
5D68:  MOVLB  F
5D6A:  MOVLW  55
5D6C:  MOVWF  FA7
5D6E:  MOVLW  AA
5D70:  MOVWF  FA7
5D72:  BSF    FA6.1
5D74:  BTFSC  FA6.1
5D76:  BRA    5D74
5D78:  BCF    FA6.2
5D7A:  MOVF   00,W
5D7C:  IORWF  FF2,F
....................                glcd_rect(15, 18, 30, 53, NO, ON);Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0; 
5D7E:  MOVLW  0F
5D80:  MOVLB  3
5D82:  MOVWF  xC6
5D84:  MOVLW  12
5D86:  MOVWF  xC7
5D88:  MOVLW  1E
5D8A:  MOVWF  xC8
5D8C:  MOVLW  35
5D8E:  MOVWF  xC9
5D90:  CLRF   xCA
5D92:  MOVLW  01
5D94:  MOVWF  xCB
5D96:  MOVLB  0
5D98:  CALL   2DB2
5D9C:  MOVLB  2
5D9E:  CLRF   x2F
5DA0:  CLRF   x30
5DA2:  CLRF   x31
5DA4:  CLRF   x32
....................              } 
....................        } 
....................          else 
5DA6:  BRA    5DAA
....................             {Flanco1 = 0;} 
5DA8:  BCF    x15.6
....................           
....................       } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
5DAA:  MOVLB  0
5DAC:  GOTO   3580
5DB0:  MOVF   01,F
5DB2:  BTFSC  FD8.2
5DB4:  BRA    6116
....................             { 
....................                if(usb_kbhit(1)) 
5DB6:  MOVLW  01
5DB8:  MOVLB  3
5DBA:  MOVWF  xB4
5DBC:  MOVLB  0
5DBE:  GOTO   3588
5DC2:  MOVF   01,F
5DC4:  BTFSC  FD8.2
5DC6:  BRA    600A
....................                   {usb_get_packet(1, rxbuf, Lenbuf); 
5DC8:  MOVLW  01
5DCA:  MOVLB  3
5DCC:  MOVWF  xB4
5DCE:  CLRF   xB6
5DD0:  MOVLW  42
5DD2:  MOVWF  xB5
5DD4:  CLRF   xB8
5DD6:  MOVLW  20
5DD8:  MOVWF  xB7
5DDA:  MOVLB  0
5DDC:  GOTO   368E
....................                      if(rxbuf[0]==1) 
5DE0:  DECFSZ 42,W
5DE2:  BRA    5E74
....................                         {Ganancia=rxbuf[1];desvio=rxbuf[2];Tciclo=rxbuf[3];Setpoint=rxbuf[4];Minutos=rxbuf[5];Ganancia2=rxbuf[6];Ajuste=rxbuf[7]; 
5DE4:  MOVLB  3
5DE6:  CLRF   xBA
5DE8:  MOVFF  43,3B9
5DEC:  MOVLB  0
5DEE:  CALL   257A
5DF2:  MOVFF  03,265
5DF6:  MOVFF  02,264
5DFA:  MOVFF  01,263
5DFE:  MOVFF  00,262
5E02:  MOVLB  3
5E04:  CLRF   xBA
5E06:  MOVFF  44,3B9
5E0A:  MOVLB  0
5E0C:  CALL   257A
5E10:  MOVFF  03,26D
5E14:  MOVFF  02,26C
5E18:  MOVFF  01,26B
5E1C:  MOVFF  00,26A
5E20:  MOVLB  3
5E22:  CLRF   xBA
5E24:  MOVFF  45,3B9
5E28:  MOVLB  0
5E2A:  CALL   257A
5E2E:  MOVFF  03,24D
5E32:  MOVFF  02,24C
5E36:  MOVFF  01,24B
5E3A:  MOVFF  00,24A
5E3E:  MOVFF  46,234
5E42:  MOVLB  2
5E44:  CLRF   x20
5E46:  MOVFF  47,21F
5E4A:  MOVLB  3
5E4C:  CLRF   xBA
5E4E:  MOVFF  48,3B9
5E52:  MOVLB  0
5E54:  CALL   257A
5E58:  MOVFF  03,269
5E5C:  MOVFF  02,268
5E60:  MOVFF  01,267
5E64:  MOVFF  00,266
5E68:  MOVFF  49,237
....................                         Ajusten=rxbuf[10];R2=rxbuf[11];} // Falta escribir en la eeprom 
5E6C:  MOVFF  4C,238
5E70:  MOVFF  4D,239
....................                      if(rxbuf[12]==1)    
5E74:  DECFSZ 4E,W
5E76:  BRA    6000
....................                         {write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,Minutos); 
5E78:  MOVFF  265,3B7
5E7C:  MOVFF  264,3B6
5E80:  MOVFF  263,3B5
5E84:  MOVFF  262,3B4
5E88:  CALL   36D8
5E8C:  MOVFF  01,3B4
5E90:  MOVLW  0A
5E92:  MOVWF  FA9
5E94:  MOVFF  3B4,FA8
5E98:  BCF    FA6.6
5E9A:  BCF    FA6.7
5E9C:  BSF    FA6.2
5E9E:  MOVF   FF2,W
5EA0:  MOVWF  00
5EA2:  BCF    FF2.7
5EA4:  MOVLB  F
5EA6:  MOVLW  55
5EA8:  MOVWF  FA7
5EAA:  MOVLW  AA
5EAC:  MOVWF  FA7
5EAE:  BSF    FA6.1
5EB0:  BTFSC  FA6.1
5EB2:  BRA    5EB0
5EB4:  BCF    FA6.2
5EB6:  MOVF   00,W
5EB8:  IORWF  FF2,F
5EBA:  MOVFF  26D,3B7
5EBE:  MOVFF  26C,3B6
5EC2:  MOVFF  26B,3B5
5EC6:  MOVFF  26A,3B4
5ECA:  MOVLB  0
5ECC:  CALL   36D8
5ED0:  MOVFF  01,3B4
5ED4:  MOVLW  0B
5ED6:  MOVWF  FA9
5ED8:  MOVFF  3B4,FA8
5EDC:  BCF    FA6.6
5EDE:  BCF    FA6.7
5EE0:  BSF    FA6.2
5EE2:  MOVF   FF2,W
5EE4:  MOVWF  00
5EE6:  BCF    FF2.7
5EE8:  MOVLB  F
5EEA:  MOVLW  55
5EEC:  MOVWF  FA7
5EEE:  MOVLW  AA
5EF0:  MOVWF  FA7
5EF2:  BSF    FA6.1
5EF4:  BTFSC  FA6.1
5EF6:  BRA    5EF4
5EF8:  BCF    FA6.2
5EFA:  MOVF   00,W
5EFC:  IORWF  FF2,F
5EFE:  MOVFF  24D,3B7
5F02:  MOVFF  24C,3B6
5F06:  MOVFF  24B,3B5
5F0A:  MOVFF  24A,3B4
5F0E:  MOVLB  0
5F10:  CALL   36D8
5F14:  MOVFF  01,3B4
5F18:  MOVLW  0C
5F1A:  MOVWF  FA9
5F1C:  MOVFF  3B4,FA8
5F20:  BCF    FA6.6
5F22:  BCF    FA6.7
5F24:  BSF    FA6.2
5F26:  MOVF   FF2,W
5F28:  MOVWF  00
5F2A:  BCF    FF2.7
5F2C:  MOVLB  F
5F2E:  MOVLW  55
5F30:  MOVWF  FA7
5F32:  MOVLW  AA
5F34:  MOVWF  FA7
5F36:  BSF    FA6.1
5F38:  BTFSC  FA6.1
5F3A:  BRA    5F38
5F3C:  BCF    FA6.2
5F3E:  MOVF   00,W
5F40:  IORWF  FF2,F
5F42:  MOVLW  14
5F44:  MOVWF  FA9
5F46:  MOVFF  21F,FA8
5F4A:  BCF    FA6.6
5F4C:  BCF    FA6.7
5F4E:  BSF    FA6.2
5F50:  MOVF   FF2,W
5F52:  MOVWF  00
5F54:  BCF    FF2.7
5F56:  MOVLW  55
5F58:  MOVWF  FA7
5F5A:  MOVLW  AA
5F5C:  MOVWF  FA7
5F5E:  BSF    FA6.1
5F60:  BTFSC  FA6.1
5F62:  BRA    5F60
5F64:  BCF    FA6.2
5F66:  MOVF   00,W
5F68:  IORWF  FF2,F
....................                         write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);write_eeprom(15,(int8)Ganancia2);} 
5F6A:  MOVLW  0D
5F6C:  MOVWF  FA9
5F6E:  MOVFF  237,FA8
5F72:  BCF    FA6.6
5F74:  BCF    FA6.7
5F76:  BSF    FA6.2
5F78:  MOVF   FF2,W
5F7A:  MOVWF  00
5F7C:  BCF    FF2.7
5F7E:  MOVLW  55
5F80:  MOVWF  FA7
5F82:  MOVLW  AA
5F84:  MOVWF  FA7
5F86:  BSF    FA6.1
5F88:  BTFSC  FA6.1
5F8A:  BRA    5F88
5F8C:  BCF    FA6.2
5F8E:  MOVF   00,W
5F90:  IORWF  FF2,F
5F92:  MOVLW  0E
5F94:  MOVWF  FA9
5F96:  MOVFF  238,FA8
5F9A:  BCF    FA6.6
5F9C:  BCF    FA6.7
5F9E:  BSF    FA6.2
5FA0:  MOVF   FF2,W
5FA2:  MOVWF  00
5FA4:  BCF    FF2.7
5FA6:  MOVLW  55
5FA8:  MOVWF  FA7
5FAA:  MOVLW  AA
5FAC:  MOVWF  FA7
5FAE:  BSF    FA6.1
5FB0:  BTFSC  FA6.1
5FB2:  BRA    5FB0
5FB4:  BCF    FA6.2
5FB6:  MOVF   00,W
5FB8:  IORWF  FF2,F
5FBA:  MOVFF  269,3B7
5FBE:  MOVFF  268,3B6
5FC2:  MOVFF  267,3B5
5FC6:  MOVFF  266,3B4
5FCA:  MOVLB  0
5FCC:  CALL   36D8
5FD0:  MOVFF  01,3B4
5FD4:  MOVLW  0F
5FD6:  MOVWF  FA9
5FD8:  MOVFF  3B4,FA8
5FDC:  BCF    FA6.6
5FDE:  BCF    FA6.7
5FE0:  BSF    FA6.2
5FE2:  MOVF   FF2,W
5FE4:  MOVWF  00
5FE6:  BCF    FF2.7
5FE8:  MOVLB  F
5FEA:  MOVLW  55
5FEC:  MOVWF  FA7
5FEE:  MOVLW  AA
5FF0:  MOVWF  FA7
5FF2:  BSF    FA6.1
5FF4:  BTFSC  FA6.1
5FF6:  BRA    5FF4
5FF8:  BCF    FA6.2
5FFA:  MOVF   00,W
5FFC:  IORWF  FF2,F
5FFE:  MOVLB  0
....................                      if(rxbuf[13]==1)    
6000:  DECFSZ 4F,W
6002:  BRA    600A
....................                         {Visua=1;} 
6004:  MOVLB  2
6006:  BSF    x33.3
6008:  MOVLB  0
....................                   } 
....................                 
....................                recbuf[0]=(int8)Prom; 
600A:  MOVFF  259,3B7
600E:  MOVFF  258,3B6
6012:  MOVFF  257,3B5
6016:  MOVFF  256,3B4
601A:  CALL   36D8
601E:  MOVFF  01,22
....................                recbuf[1]=120; 
6022:  MOVLW  78
6024:  MOVWF  23
....................                d3=Prom-(int8)Prom; 
6026:  MOVFF  259,3B7
602A:  MOVFF  258,3B6
602E:  MOVFF  257,3B5
6032:  MOVFF  256,3B4
6036:  CALL   36D8
603A:  MOVLB  3
603C:  CLRF   xBA
603E:  MOVFF  01,3B9
6042:  MOVLB  0
6044:  CALL   257A
6048:  BSF    FD8.1
604A:  MOVFF  259,3BF
604E:  MOVFF  258,3BE
6052:  MOVFF  257,3BD
6056:  MOVFF  256,3BC
605A:  MOVFF  03,3C3
605E:  MOVFF  02,3C2
6062:  MOVFF  01,3C1
6066:  MOVFF  00,3C0
606A:  CALL   3714
606E:  MOVFF  03,271
6072:  MOVFF  02,270
6076:  MOVFF  01,26F
607A:  MOVFF  00,26E
....................                d3=d3*10.0; 
607E:  MOVFF  271,3D4
6082:  MOVFF  270,3D3
6086:  MOVFF  26F,3D2
608A:  MOVFF  26E,3D1
608E:  MOVLB  3
6090:  CLRF   xD8
6092:  CLRF   xD7
6094:  MOVLW  20
6096:  MOVWF  xD6
6098:  MOVLW  82
609A:  MOVWF  xD5
609C:  MOVLB  0
609E:  CALL   398C
60A2:  MOVFF  03,271
60A6:  MOVFF  02,270
60AA:  MOVFF  01,26F
60AE:  MOVFF  00,26E
....................                recbuf[2]=(int8)d3; 
60B2:  MOVFF  271,3B7
60B6:  MOVFF  270,3B6
60BA:  MOVFF  26F,3B5
60BE:  MOVFF  26E,3B4
60C2:  CALL   36D8
60C6:  MOVFF  01,24
....................                recbuf[3]=(int8)Pt; 
60CA:  MOVFF  249,3B7
60CE:  MOVFF  248,3B6
60D2:  MOVFF  247,3B5
60D6:  MOVFF  246,3B4
60DA:  CALL   36D8
60DE:  MOVFF  01,25
....................                recbuf[4]=(int8)V0; 
60E2:  MOVFF  241,3B7
60E6:  MOVFF  240,3B6
60EA:  MOVFF  23F,3B5
60EE:  MOVFF  23E,3B4
60F2:  CALL   36D8
60F6:  MOVFF  01,26
....................                  
....................                 usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
60FA:  MOVLW  01
60FC:  MOVLB  3
60FE:  MOVWF  xB4
6100:  CLRF   xB6
6102:  MOVLW  22
6104:  MOVWF  xB5
6106:  CLRF   xB8
6108:  MOVLW  20
610A:  MOVWF  xB7
610C:  MOVLW  02
610E:  MOVWF  xB9
6110:  MOVLB  0
6112:  GOTO   3A82
....................              } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       if(Menu==100){ // Este es el menu de cuando el proceso se inicio. 
6116:  MOVLB  2
6118:  MOVF   x09,W
611A:  SUBLW  64
611C:  BTFSS  FD8.2
611E:  GOTO   6E82
....................  
....................       if(n==0) 
6122:  BTFSC  x16.5
6124:  BRA    64CA
....................       {glcd_imagen(5);glcd_text57(0, 0, tiempo_est, 1, ON);glcd_text57(0, 8, tiempo_sec, 1, ON);// Muestra grafica de proceso y palabras. 
6126:  MOVLW  05
6128:  MOVLB  3
612A:  MOVWF  xB4
612C:  MOVLB  0
612E:  CALL   316A
6132:  MOVLB  3
6134:  CLRF   xC4
6136:  CLRF   xC5
6138:  CLRF   xC7
613A:  MOVLW  95
613C:  MOVWF  xC6
613E:  MOVLW  01
6140:  MOVWF  xC8
6142:  MOVWF  xC9
6144:  MOVLB  0
6146:  CALL   2910
614A:  MOVLB  3
614C:  CLRF   xC4
614E:  MOVLW  08
6150:  MOVWF  xC5
6152:  CLRF   xC7
6154:  MOVLW  9C
6156:  MOVWF  xC6
6158:  MOVLW  01
615A:  MOVWF  xC8
615C:  MOVWF  xC9
615E:  MOVLB  0
6160:  CALL   2910
....................        glcd_circle(95,40,2,NO,ON); 
6164:  MOVLW  5F
6166:  MOVLB  3
6168:  MOVWF  xB4
616A:  MOVLW  28
616C:  MOVWF  xB5
616E:  MOVLW  02
6170:  MOVWF  xB6
6172:  CLRF   xB7
6174:  MOVLW  01
6176:  MOVWF  xB8
6178:  MOVLB  0
617A:  GOTO   3B80
....................        glcd_text57(102,40, C, 2, ON); 
617E:  MOVLW  66
6180:  MOVLB  3
6182:  MOVWF  xC4
6184:  MOVLW  28
6186:  MOVWF  xC5
6188:  MOVLW  01
618A:  MOVWF  xC7
618C:  MOVLW  4E
618E:  MOVWF  xC6
6190:  MOVLW  02
6192:  MOVWF  xC8
6194:  MOVLW  01
6196:  MOVWF  xC9
6198:  MOVLB  0
619A:  CALL   2910
....................        if(estadot40==1)// Si selecciono programa de Textil e instrumental. Ajusta tiempos de esterilización y secado. 
619E:  MOVLB  2
61A0:  BTFSS  x15.0
61A2:  BRA    61C0
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2; 
61A4:  CLRF   x27
61A6:  CLRF   x28
61A8:  MOVLW  05
61AA:  MOVWF  x29
61AC:  MOVLW  02
61AE:  MOVWF  x2A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;Setpoint=121;} 
61B0:  CLRF   x2F
61B2:  CLRF   x30
61B4:  MOVLW  05
61B6:  MOVWF  x31
61B8:  MOVLW  01
61BA:  MOVWF  x32
61BC:  MOVLW  79
61BE:  MOVWF  x34
....................        
....................       if(estadoc==1)// Si selecciono programa de Precalentamiento. Ajusta tiempos de esterilización y secado. 
61C0:  BTFSS  x15.1
61C2:  BRA    61DE
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0; 
61C4:  CLRF   x27
61C6:  CLRF   x28
61C8:  MOVLW  05
61CA:  MOVWF  x29
61CC:  CLRF   x2A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=0;minutos=0;Setpoint=121;} 
61CE:  CLRF   x2F
61D0:  CLRF   x30
61D2:  MOVWF  x31
61D4:  CLRF   x32
61D6:  CLRF   x20
61D8:  CLRF   x1F
61DA:  MOVLW  79
61DC:  MOVWF  x34
....................        
....................       if(estadoi==1)// Si selecciono programa de Instrumental Suave. Ajusta tiempos de esterilización y secado. 
61DE:  BTFSS  x15.2
61E0:  BRA    61FA
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1; 
61E2:  CLRF   x27
61E4:  CLRF   x28
61E6:  MOVLW  05
61E8:  MOVWF  x29
61EA:  MOVLW  01
61EC:  MOVWF  x2A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;} 
61EE:  CLRF   x2F
61F0:  CLRF   x30
61F2:  CLRF   x31
61F4:  CLRF   x32
61F6:  MOVLW  79
61F8:  MOVWF  x34
....................        
....................       if(estadol==1)// Si selecciono programa de Liquidos. Ajusta tiempos de esterilización y secado. 
61FA:  BTFSS  x15.3
61FC:  BRA    6214
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2; 
61FE:  CLRF   x27
6200:  CLRF   x28
6202:  CLRF   x29
6204:  MOVLW  02
6206:  MOVWF  x2A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;} 
6208:  CLRF   x2F
620A:  CLRF   x30
620C:  CLRF   x31
620E:  CLRF   x32
6210:  MOVLW  79
6212:  MOVWF  x34
....................         
....................       // Muestra Valor de esterilizacion programado. 
....................       displayTiempo(Testerilizacionp[3],36,0,0);displayTiempo(Testerilizacionp[2],42,0,0);glcd_text57(48, 0, Vacio, 1, ON); 
6214:  MOVFF  22A,3B5
6218:  MOVLW  24
621A:  MOVLB  3
621C:  MOVWF  xB6
621E:  CLRF   xB7
6220:  CLRF   xB8
6222:  MOVLB  0
6224:  CALL   2E74
6228:  MOVFF  229,3B5
622C:  MOVLW  2A
622E:  MOVLB  3
6230:  MOVWF  xB6
6232:  CLRF   xB7
6234:  CLRF   xB8
6236:  MOVLB  0
6238:  CALL   2E74
623C:  MOVLW  30
623E:  MOVLB  3
6240:  MOVWF  xC4
6242:  CLRF   xC5
6244:  MOVLW  01
6246:  MOVWF  xC7
6248:  MOVLW  2A
624A:  MOVWF  xC6
624C:  MOVLW  01
624E:  MOVWF  xC8
6250:  MOVWF  xC9
6252:  MOVLB  0
6254:  CALL   2910
....................       displayTiempo(Testerilizacionp[1],54,0,0);displayTiempo(Testerilizacionp[0],60,0,0); 
6258:  MOVFF  228,3B5
625C:  MOVLW  36
625E:  MOVLB  3
6260:  MOVWF  xB6
6262:  CLRF   xB7
6264:  CLRF   xB8
6266:  MOVLB  0
6268:  CALL   2E74
626C:  MOVFF  227,3B5
6270:  MOVLW  3C
6272:  MOVLB  3
6274:  MOVWF  xB6
6276:  CLRF   xB7
6278:  CLRF   xB8
627A:  MOVLB  0
627C:  CALL   2E74
....................       // Muestra tiempo de secado programado. 
....................       displayTiempo(Tsecadop[3],36,8,0);displayTiempo(Tsecadop[2],42,8,0);glcd_text57(48, 8, Vacio, 1, ON); 
6280:  MOVFF  232,3B5
6284:  MOVLW  24
6286:  MOVLB  3
6288:  MOVWF  xB6
628A:  MOVLW  08
628C:  MOVWF  xB7
628E:  CLRF   xB8
6290:  MOVLB  0
6292:  CALL   2E74
6296:  MOVFF  231,3B5
629A:  MOVLW  2A
629C:  MOVLB  3
629E:  MOVWF  xB6
62A0:  MOVLW  08
62A2:  MOVWF  xB7
62A4:  CLRF   xB8
62A6:  MOVLB  0
62A8:  CALL   2E74
62AC:  MOVLW  30
62AE:  MOVLB  3
62B0:  MOVWF  xC4
62B2:  MOVLW  08
62B4:  MOVWF  xC5
62B6:  MOVLW  01
62B8:  MOVWF  xC7
62BA:  MOVLW  2A
62BC:  MOVWF  xC6
62BE:  MOVLW  01
62C0:  MOVWF  xC8
62C2:  MOVWF  xC9
62C4:  MOVLB  0
62C6:  CALL   2910
....................       displayTiempo(Tsecadop[1],54,8,0);displayTiempo(Tsecadop[0],60,8,0); 
62CA:  MOVFF  230,3B5
62CE:  MOVLW  36
62D0:  MOVLB  3
62D2:  MOVWF  xB6
62D4:  MOVLW  08
62D6:  MOVWF  xB7
62D8:  CLRF   xB8
62DA:  MOVLB  0
62DC:  CALL   2E74
62E0:  MOVFF  22F,3B5
62E4:  MOVLW  3C
62E6:  MOVLB  3
62E8:  MOVWF  xB6
62EA:  MOVLW  08
62EC:  MOVWF  xB7
62EE:  CLRF   xB8
62F0:  MOVLB  0
62F2:  CALL   2E74
....................           
....................       V0 = sensores(0); 
62F6:  MOVLB  3
62F8:  CLRF   xB4
62FA:  MOVLB  0
62FC:  CALL   25B0
6300:  MOVFF  03,241
6304:  MOVFF  02,240
6308:  MOVFF  01,23F
630C:  MOVFF  00,23E
....................       V0 = V0/4.882; 
6310:  MOVFF  241,3BB
6314:  MOVFF  240,3BA
6318:  MOVFF  23F,3B9
631C:  MOVFF  23E,3B8
6320:  MOVLW  58
6322:  MOVLB  3
6324:  MOVWF  xBF
6326:  MOVLW  39
6328:  MOVWF  xBE
632A:  MOVLW  1C
632C:  MOVWF  xBD
632E:  MOVLW  81
6330:  MOVWF  xBC
6332:  MOVLB  0
6334:  CALL   3DAC
6338:  MOVFF  03,241
633C:  MOVFF  02,240
6340:  MOVFF  01,23F
6344:  MOVFF  00,23E
....................       //rPt=(V0*R1)/(1023.0-V0);Temperature=(Pt-100.0972)/0.3850; 
....................       Pt=(R1+(float)R2)/((1023.0/V0)-1); 
6348:  MOVLB  3
634A:  CLRF   xBA
634C:  MOVFF  239,3B9
6350:  MOVLB  0
6352:  CALL   257A
6356:  BCF    FD8.1
6358:  MOVFF  245,3BF
635C:  MOVFF  244,3BE
6360:  MOVFF  243,3BD
6364:  MOVFF  242,3BC
6368:  MOVFF  03,3C3
636C:  MOVFF  02,3C2
6370:  MOVFF  01,3C1
6374:  MOVFF  00,3C0
6378:  CALL   3714
637C:  MOVFF  00,3B4
6380:  MOVFF  01,3B5
6384:  MOVFF  02,3B6
6388:  MOVFF  03,3B7
638C:  MOVLB  3
638E:  CLRF   xBB
6390:  MOVLW  C0
6392:  MOVWF  xBA
6394:  MOVLW  7F
6396:  MOVWF  xB9
6398:  MOVLW  88
639A:  MOVWF  xB8
639C:  MOVFF  241,3BF
63A0:  MOVFF  240,3BE
63A4:  MOVFF  23F,3BD
63A8:  MOVFF  23E,3BC
63AC:  MOVLB  0
63AE:  CALL   3DAC
63B2:  MOVFF  00,3B8
63B6:  MOVFF  01,3B9
63BA:  MOVFF  02,3BA
63BE:  MOVFF  03,3BB
63C2:  BSF    FD8.1
63C4:  MOVFF  03,3BF
63C8:  MOVFF  02,3BE
63CC:  MOVFF  01,3BD
63D0:  MOVFF  00,3BC
63D4:  MOVLB  3
63D6:  CLRF   xC3
63D8:  CLRF   xC2
63DA:  CLRF   xC1
63DC:  MOVLW  7F
63DE:  MOVWF  xC0
63E0:  MOVLB  0
63E2:  CALL   3714
63E6:  MOVFF  3B7,3BB
63EA:  MOVFF  3B6,3BA
63EE:  MOVFF  3B5,3B9
63F2:  MOVFF  3B4,3B8
63F6:  MOVFF  03,3BF
63FA:  MOVFF  02,3BE
63FE:  MOVFF  01,3BD
6402:  MOVFF  00,3BC
6406:  CALL   3DAC
640A:  MOVFF  03,249
640E:  MOVFF  02,248
6412:  MOVFF  01,247
6416:  MOVFF  00,246
....................       //Temperature=(Pt-100.1395)/0.3838;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................       Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
641A:  BSF    FD8.1
641C:  MOVFF  249,3BF
6420:  MOVFF  248,3BE
6424:  MOVFF  247,3BD
6428:  MOVFF  246,3BC
642C:  MOVLB  3
642E:  CLRF   xC3
6430:  CLRF   xC2
6432:  MOVLW  48
6434:  MOVWF  xC1
6436:  MOVLW  85
6438:  MOVWF  xC0
643A:  MOVLB  0
643C:  CALL   3714
6440:  MOVFF  00,3B4
6444:  MOVFF  01,3B5
6448:  MOVFF  02,3B6
644C:  MOVFF  03,3B7
6450:  MOVFF  03,3BB
6454:  MOVFF  02,3BA
6458:  MOVFF  01,3B9
645C:  MOVFF  00,3B8
6460:  MOVLW  B8
6462:  MOVLB  3
6464:  MOVWF  xBF
6466:  MOVLW  1E
6468:  MOVWF  xBE
646A:  MOVLW  45
646C:  MOVWF  xBD
646E:  MOVLW  7D
6470:  MOVWF  xBC
6472:  MOVLB  0
6474:  CALL   3DAC
6478:  MOVFF  03,25D
647C:  MOVFF  02,25C
6480:  MOVFF  01,25B
6484:  MOVFF  00,25A
....................       for(h=0;h<=79;h++) 
6488:  MOVLB  2
648A:  CLRF   x35
648C:  MOVF   x35,W
648E:  SUBLW  4F
6490:  BNC   64C8
....................             { 
....................                promedio[h]=Temperature; 
6492:  MOVLB  3
6494:  CLRF   xB9
6496:  MOVFF  235,3B8
649A:  CLRF   xBB
649C:  MOVLW  04
649E:  MOVWF  xBA
64A0:  MOVLB  0
64A2:  CALL   3148
64A6:  MOVF   01,W
64A8:  ADDLW  74
64AA:  MOVWF  FE9
64AC:  MOVLW  02
64AE:  ADDWFC 02,W
64B0:  MOVWF  FEA
64B2:  MOVFF  25A,FEF
64B6:  MOVFF  25B,FEC
64BA:  MOVFF  25C,FEC
64BE:  MOVFF  25D,FEC
....................             }  
64C2:  MOVLB  2
64C4:  INCF   x35,F
64C6:  BRA    648C
....................        n=1;      
64C8:  BSF    x16.5
....................       } 
....................       if((tiempo_esterilizacion==1)&&(Prom<(float)Setpoint-0.2)) 
64CA:  BTFSS  x16.2
64CC:  BRA    655A
64CE:  MOVLB  3
64D0:  CLRF   xBA
64D2:  MOVFF  234,3B9
64D6:  MOVLB  0
64D8:  CALL   257A
64DC:  MOVFF  00,3B5
64E0:  MOVFF  01,3B6
64E4:  MOVFF  02,3B7
64E8:  MOVFF  03,3B8
64EC:  BSF    FD8.1
64EE:  MOVFF  03,3BF
64F2:  MOVFF  02,3BE
64F6:  MOVFF  01,3BD
64FA:  MOVFF  00,3BC
64FE:  MOVLW  CD
6500:  MOVLB  3
6502:  MOVWF  xC3
6504:  MOVLW  CC
6506:  MOVWF  xC2
6508:  MOVLW  4C
650A:  MOVWF  xC1
650C:  MOVLW  7C
650E:  MOVWF  xC0
6510:  MOVLB  0
6512:  CALL   3714
6516:  MOVFF  259,3B8
651A:  MOVFF  258,3B7
651E:  MOVFF  257,3B6
6522:  MOVFF  256,3B5
6526:  MOVFF  03,3BC
652A:  MOVFF  02,3BB
652E:  MOVFF  01,3BA
6532:  MOVFF  00,3B9
6536:  CALL   3F0A
653A:  BTFSC  FD8.0
653C:  BRA    6542
653E:  MOVLB  2
6540:  BRA    655A
....................       {if(p==0) 
6542:  MOVLB  2
6544:  BTFSC  x33.5
6546:  BRA    655A
....................          {Ganancia=Ganancia2;p=1;}} 
6548:  MOVFF  269,265
654C:  MOVFF  268,264
6550:  MOVFF  267,263
6554:  MOVFF  266,262
6558:  BSF    x33.5
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................          error=desvio+(float)Setpoint-Prom;      // Cálculo del error ****** 
655A:  MOVLB  3
655C:  CLRF   xBA
655E:  MOVFF  234,3B9
6562:  MOVLB  0
6564:  CALL   257A
6568:  BCF    FD8.1
656A:  MOVFF  26D,3BF
656E:  MOVFF  26C,3BE
6572:  MOVFF  26B,3BD
6576:  MOVFF  26A,3BC
657A:  MOVFF  03,3C3
657E:  MOVFF  02,3C2
6582:  MOVFF  01,3C1
6586:  MOVFF  00,3C0
658A:  CALL   3714
658E:  MOVFF  00,3B4
6592:  MOVFF  01,3B5
6596:  MOVFF  02,3B6
659A:  MOVFF  03,3B7
659E:  BSF    FD8.1
65A0:  MOVFF  03,3BF
65A4:  MOVFF  02,3BE
65A8:  MOVFF  01,3BD
65AC:  MOVFF  00,3BC
65B0:  MOVFF  259,3C3
65B4:  MOVFF  258,3C2
65B8:  MOVFF  257,3C1
65BC:  MOVFF  256,3C0
65C0:  CALL   3714
65C4:  MOVFF  03,255
65C8:  MOVFF  02,254
65CC:  MOVFF  01,253
65D0:  MOVFF  00,252
....................  
....................          tmp=error*Ganancia;  // Control Proporcional. 
65D4:  MOVFF  255,3D4
65D8:  MOVFF  254,3D3
65DC:  MOVFF  253,3D2
65E0:  MOVFF  252,3D1
65E4:  MOVFF  265,3D8
65E8:  MOVFF  264,3D7
65EC:  MOVFF  263,3D6
65F0:  MOVFF  262,3D5
65F4:  CALL   398C
65F8:  MOVFF  03,261
65FC:  MOVFF  02,260
6600:  MOVFF  01,25F
6604:  MOVFF  00,25E
....................           
....................          if(tmp>Setpoint)   // Anti Wind-UP       
6608:  MOVLB  3
660A:  CLRF   xBA
660C:  MOVFF  234,3B9
6610:  MOVLB  0
6612:  CALL   257A
6616:  MOVFF  03,3B8
661A:  MOVFF  02,3B7
661E:  MOVFF  01,3B6
6622:  MOVFF  00,3B5
6626:  MOVFF  261,3BC
662A:  MOVFF  260,3BB
662E:  MOVFF  25F,3BA
6632:  MOVFF  25E,3B9
6636:  CALL   3F0A
663A:  BNC   665A
....................             {tmp=Setpoint;} 
663C:  MOVLB  3
663E:  CLRF   xBA
6640:  MOVFF  234,3B9
6644:  MOVLB  0
6646:  CALL   257A
664A:  MOVFF  03,261
664E:  MOVFF  02,260
6652:  MOVFF  01,25F
6656:  MOVFF  00,25E
....................              
....................          if(tmp<0.0)     // Anti Wind_DOWN     
665A:  MOVFF  261,3B8
665E:  MOVFF  260,3B7
6662:  MOVFF  25F,3B6
6666:  MOVFF  25E,3B5
666A:  MOVLB  3
666C:  CLRF   xBC
666E:  CLRF   xBB
6670:  CLRF   xBA
6672:  CLRF   xB9
6674:  MOVLB  0
6676:  CALL   3F0A
667A:  BNC   6686
....................             {tmp=0.0;}    
667C:  MOVLB  2
667E:  CLRF   x61
6680:  CLRF   x60
6682:  CLRF   x5F
6684:  CLRF   x5E
....................        
....................          Tpulso=(tmp/Setpoint)*Tciclo;  // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
6686:  MOVLB  3
6688:  CLRF   xBA
668A:  MOVFF  234,3B9
668E:  MOVLB  0
6690:  CALL   257A
6694:  MOVFF  261,3BB
6698:  MOVFF  260,3BA
669C:  MOVFF  25F,3B9
66A0:  MOVFF  25E,3B8
66A4:  MOVFF  03,3BF
66A8:  MOVFF  02,3BE
66AC:  MOVFF  01,3BD
66B0:  MOVFF  00,3BC
66B4:  CALL   3DAC
66B8:  MOVFF  00,3B4
66BC:  MOVFF  01,3B5
66C0:  MOVFF  02,3B6
66C4:  MOVFF  03,3B7
66C8:  MOVFF  03,3D4
66CC:  MOVFF  02,3D3
66D0:  MOVFF  01,3D2
66D4:  MOVFF  00,3D1
66D8:  MOVFF  24D,3D8
66DC:  MOVFF  24C,3D7
66E0:  MOVFF  24B,3D6
66E4:  MOVFF  24A,3D5
66E8:  CALL   398C
66EC:  MOVFF  03,251
66F0:  MOVFF  02,250
66F4:  MOVFF  01,24F
66F8:  MOVFF  00,24E
....................                                    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................           
....................             if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
66FC:  MOVFF  251,3BB
6700:  MOVFF  250,3BA
6704:  MOVFF  24F,3B9
6708:  MOVFF  24E,3B8
670C:  MOVLW  0A
670E:  MOVLB  3
6710:  MOVWF  xBF
6712:  MOVLW  D7
6714:  MOVWF  xBE
6716:  MOVLW  23
6718:  MOVWF  xBD
671A:  MOVLW  77
671C:  MOVWF  xBC
671E:  MOVLB  0
6720:  CALL   3DAC
6724:  MOVFF  03,3B7
6728:  MOVFF  02,3B6
672C:  MOVFF  01,3B5
6730:  MOVFF  00,3B4
6734:  CALL   36D8
6738:  MOVFF  02,03
673C:  MOVF   01,W
673E:  MOVLB  2
6740:  MOVF   x1E,W
6742:  SUBWF  02,W
6744:  BNC   6754
6746:  BNZ   674E
6748:  MOVF   x1D,W
674A:  SUBWF  01,W
674C:  BNC   6754
....................                {Resistencia_on;} 
674E:  BSF    F8C.2
6750:  BCF    F95.2
....................             else          
6752:  BRA    6758
....................                {Resistencia_off;} 
6754:  BCF    F8C.2
6756:  BCF    F95.2
....................           
....................             if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
6758:  MOVFF  24D,3BB
675C:  MOVFF  24C,3BA
6760:  MOVFF  24B,3B9
6764:  MOVFF  24A,3B8
6768:  MOVLW  0A
676A:  MOVLB  3
676C:  MOVWF  xBF
676E:  MOVLW  D7
6770:  MOVWF  xBE
6772:  MOVLW  23
6774:  MOVWF  xBD
6776:  MOVLW  77
6778:  MOVWF  xBC
677A:  MOVLB  0
677C:  CALL   3DAC
6780:  MOVFF  03,3B7
6784:  MOVFF  02,3B6
6788:  MOVFF  01,3B5
678C:  MOVFF  00,3B4
6790:  CALL   36D8
6794:  MOVF   02,W
6796:  MOVWF  03
6798:  MOVLB  2
679A:  SUBWF  x1E,W
679C:  BNC   67AA
679E:  BNZ   67A6
67A0:  MOVF   01,W
67A2:  SUBWF  x1D,W
67A4:  BNC   67AA
....................                {tiempoctrl=0;} // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005.          
67A6:  CLRF   x1E
67A8:  CLRF   x1D
.................... //--------------------------------------------------------------------------------------------------------------------//          
....................    
....................    if(Expulsa==1) 
67AA:  BTFSS  x16.7
67AC:  BRA    6AC6
....................    {        V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
67AE:  MOVLB  3
67B0:  CLRF   xB4
67B2:  MOVLB  0
67B4:  CALL   25B0
67B8:  MOVFF  03,241
67BC:  MOVFF  02,240
67C0:  MOVFF  01,23F
67C4:  MOVFF  00,23E
....................             V0 = V0/4.882; 
67C8:  MOVFF  241,3BB
67CC:  MOVFF  240,3BA
67D0:  MOVFF  23F,3B9
67D4:  MOVFF  23E,3B8
67D8:  MOVLW  58
67DA:  MOVLB  3
67DC:  MOVWF  xBF
67DE:  MOVLW  39
67E0:  MOVWF  xBE
67E2:  MOVLW  1C
67E4:  MOVWF  xBD
67E6:  MOVLW  81
67E8:  MOVWF  xBC
67EA:  MOVLB  0
67EC:  CALL   3DAC
67F0:  MOVFF  03,241
67F4:  MOVFF  02,240
67F8:  MOVFF  01,23F
67FC:  MOVFF  00,23E
....................             Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
6800:  MOVLB  3
6802:  CLRF   xBA
6804:  MOVFF  239,3B9
6808:  MOVLB  0
680A:  CALL   257A
680E:  BCF    FD8.1
6810:  MOVFF  245,3BF
6814:  MOVFF  244,3BE
6818:  MOVFF  243,3BD
681C:  MOVFF  242,3BC
6820:  MOVFF  03,3C3
6824:  MOVFF  02,3C2
6828:  MOVFF  01,3C1
682C:  MOVFF  00,3C0
6830:  CALL   3714
6834:  MOVFF  00,3B4
6838:  MOVFF  01,3B5
683C:  MOVFF  02,3B6
6840:  MOVFF  03,3B7
6844:  MOVLB  3
6846:  CLRF   xBB
6848:  MOVLW  C0
684A:  MOVWF  xBA
684C:  MOVLW  7F
684E:  MOVWF  xB9
6850:  MOVLW  88
6852:  MOVWF  xB8
6854:  MOVFF  241,3BF
6858:  MOVFF  240,3BE
685C:  MOVFF  23F,3BD
6860:  MOVFF  23E,3BC
6864:  MOVLB  0
6866:  CALL   3DAC
686A:  MOVFF  00,3B8
686E:  MOVFF  01,3B9
6872:  MOVFF  02,3BA
6876:  MOVFF  03,3BB
687A:  BSF    FD8.1
687C:  MOVFF  03,3BF
6880:  MOVFF  02,3BE
6884:  MOVFF  01,3BD
6888:  MOVFF  00,3BC
688C:  MOVLB  3
688E:  CLRF   xC3
6890:  CLRF   xC2
6892:  CLRF   xC1
6894:  MOVLW  7F
6896:  MOVWF  xC0
6898:  MOVLB  0
689A:  CALL   3714
689E:  MOVFF  3B7,3BB
68A2:  MOVFF  3B6,3BA
68A6:  MOVFF  3B5,3B9
68AA:  MOVFF  3B4,3B8
68AE:  MOVFF  03,3BF
68B2:  MOVFF  02,3BE
68B6:  MOVFF  01,3BD
68BA:  MOVFF  00,3BC
68BE:  CALL   3DAC
68C2:  MOVFF  03,249
68C6:  MOVFF  02,248
68CA:  MOVFF  01,247
68CE:  MOVFF  00,246
.................... //            Temperature=(Pt-100.0972)/0.3850;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................             Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
68D2:  BSF    FD8.1
68D4:  MOVFF  249,3BF
68D8:  MOVFF  248,3BE
68DC:  MOVFF  247,3BD
68E0:  MOVFF  246,3BC
68E4:  MOVLB  3
68E6:  CLRF   xC3
68E8:  CLRF   xC2
68EA:  MOVLW  48
68EC:  MOVWF  xC1
68EE:  MOVLW  85
68F0:  MOVWF  xC0
68F2:  MOVLB  0
68F4:  CALL   3714
68F8:  MOVFF  00,3B4
68FC:  MOVFF  01,3B5
6900:  MOVFF  02,3B6
6904:  MOVFF  03,3B7
6908:  MOVFF  03,3BB
690C:  MOVFF  02,3BA
6910:  MOVFF  01,3B9
6914:  MOVFF  00,3B8
6918:  MOVLW  B8
691A:  MOVLB  3
691C:  MOVWF  xBF
691E:  MOVLW  1E
6920:  MOVWF  xBE
6922:  MOVLW  45
6924:  MOVWF  xBD
6926:  MOVLW  7D
6928:  MOVWF  xBC
692A:  MOVLB  0
692C:  CALL   3DAC
6930:  MOVFF  03,25D
6934:  MOVFF  02,25C
6938:  MOVFF  01,25B
693C:  MOVFF  00,25A
....................              
....................             if(l>79) 
6940:  MOVLB  2
6942:  MOVF   x36,W
6944:  SUBLW  4F
6946:  BC    694A
....................             {l=0;} 
6948:  CLRF   x36
....................             promedio[l]=Temperature;l++; 
694A:  MOVLB  3
694C:  CLRF   xB9
694E:  MOVFF  236,3B8
6952:  CLRF   xBB
6954:  MOVLW  04
6956:  MOVWF  xBA
6958:  MOVLB  0
695A:  CALL   3148
695E:  MOVF   01,W
6960:  ADDLW  74
6962:  MOVWF  FE9
6964:  MOVLW  02
6966:  ADDWFC 02,W
6968:  MOVWF  FEA
696A:  MOVFF  25A,FEF
696E:  MOVFF  25B,FEC
6972:  MOVFF  25C,FEC
6976:  MOVFF  25D,FEC
697A:  MOVLB  2
697C:  INCF   x36,F
....................           
....................             for(h=0;h<=79;h++) 
697E:  CLRF   x35
6980:  MOVF   x35,W
6982:  SUBLW  4F
6984:  BNC   6A06
....................             { 
....................                Prom+=promedio[h]; 
6986:  MOVLB  3
6988:  CLRF   xB9
698A:  MOVFF  235,3B8
698E:  CLRF   xBB
6990:  MOVLW  04
6992:  MOVWF  xBA
6994:  MOVLB  0
6996:  CALL   3148
699A:  MOVFF  02,03
699E:  MOVF   01,W
69A0:  ADDLW  74
69A2:  MOVWF  FE9
69A4:  MOVLW  02
69A6:  ADDWFC 02,W
69A8:  MOVWF  FEA
69AA:  MOVFF  FEF,00
69AE:  MOVFF  FEC,01
69B2:  MOVFF  FEC,02
69B6:  MOVFF  FEC,03
69BA:  MOVFF  FEA,3B5
69BE:  MOVFF  FE9,3B4
69C2:  BCF    FD8.1
69C4:  MOVFF  259,3BF
69C8:  MOVFF  258,3BE
69CC:  MOVFF  257,3BD
69D0:  MOVFF  256,3BC
69D4:  MOVFF  03,3C3
69D8:  MOVFF  02,3C2
69DC:  MOVFF  01,3C1
69E0:  MOVFF  00,3C0
69E4:  CALL   3714
69E8:  MOVFF  3B5,FEA
69EC:  MOVFF  3B4,FE9
69F0:  MOVFF  03,259
69F4:  MOVFF  02,258
69F8:  MOVFF  01,257
69FC:  MOVFF  00,256
....................             }  
6A00:  MOVLB  2
6A02:  INCF   x35,F
6A04:  BRA    6980
....................                Prom=Prom/81;    
6A06:  MOVFF  259,3BB
6A0A:  MOVFF  258,3BA
6A0E:  MOVFF  257,3B9
6A12:  MOVFF  256,3B8
6A16:  MOVLB  3
6A18:  CLRF   xBF
6A1A:  CLRF   xBE
6A1C:  MOVLW  22
6A1E:  MOVWF  xBD
6A20:  MOVLW  85
6A22:  MOVWF  xBC
6A24:  MOVLB  0
6A26:  CALL   3DAC
6A2A:  MOVFF  03,259
6A2E:  MOVFF  02,258
6A32:  MOVFF  01,257
6A36:  MOVFF  00,256
....................                Prom+=((float)Ajuste-(float)Ajusten); 
6A3A:  MOVLB  3
6A3C:  CLRF   xBA
6A3E:  MOVFF  237,3B9
6A42:  MOVLB  0
6A44:  CALL   257A
6A48:  MOVFF  00,3B4
6A4C:  MOVFF  01,3B5
6A50:  MOVFF  02,3B6
6A54:  MOVFF  03,3B7
6A58:  MOVLB  3
6A5A:  CLRF   xBA
6A5C:  MOVFF  238,3B9
6A60:  MOVLB  0
6A62:  CALL   257A
6A66:  BSF    FD8.1
6A68:  MOVFF  3B7,3BF
6A6C:  MOVFF  3B6,3BE
6A70:  MOVFF  3B5,3BD
6A74:  MOVFF  3B4,3BC
6A78:  MOVFF  03,3C3
6A7C:  MOVFF  02,3C2
6A80:  MOVFF  01,3C1
6A84:  MOVFF  00,3C0
6A88:  CALL   3714
6A8C:  BCF    FD8.1
6A8E:  MOVFF  259,3BF
6A92:  MOVFF  258,3BE
6A96:  MOVFF  257,3BD
6A9A:  MOVFF  256,3BC
6A9E:  MOVFF  03,3C3
6AA2:  MOVFF  02,3C2
6AA6:  MOVFF  01,3C1
6AAA:  MOVFF  00,3C0
6AAE:  CALL   3714
6AB2:  MOVFF  03,259
6AB6:  MOVFF  02,258
6ABA:  MOVFF  01,257
6ABE:  MOVFF  00,256
....................       Expulsa=0; 
6AC2:  MOVLB  2
6AC4:  BCF    x16.7
....................    }           
....................  
....................          if(Lectura==1) 
6AC6:  BTFSS  x16.6
6AC8:  BRA    6CF0
....................          {                       
....................             Lectura=0; 
6ACA:  BCF    x16.6
....................              
....................          displayT(Prom,69,20,3); 
6ACC:  MOVFF  259,3B7
6AD0:  MOVFF  258,3B6
6AD4:  MOVFF  257,3B5
6AD8:  MOVFF  256,3B4
6ADC:  MOVLW  45
6ADE:  MOVLB  3
6AE0:  MOVWF  xB8
6AE2:  MOVLW  14
6AE4:  MOVWF  xB9
6AE6:  MOVLW  03
6AE8:  MOVWF  xBA
6AEA:  MOVLB  0
6AEC:  CALL   41FC
....................          //displayT(Pt,1,20,3); 
....................          displayTiempo(Setpoint,5,20,4); 
6AF0:  MOVFF  234,3B5
6AF4:  MOVLW  05
6AF6:  MOVLB  3
6AF8:  MOVWF  xB6
6AFA:  MOVLW  14
6AFC:  MOVWF  xB7
6AFE:  MOVLW  04
6B00:  MOVWF  xB8
6B02:  MOVLB  0
6B04:  CALL   2E74
....................           
....................          if(Visua==1) 
6B08:  MOVLB  2
6B0A:  BTFSS  x33.3
6B0C:  BRA    6BFE
....................             {displayTiempo((int8)desvio,5,30,4); 
6B0E:  MOVFF  26D,3B7
6B12:  MOVFF  26C,3B6
6B16:  MOVFF  26B,3B5
6B1A:  MOVFF  26A,3B4
6B1E:  MOVLB  0
6B20:  CALL   36D8
6B24:  MOVFF  01,3B4
6B28:  MOVFF  01,3B5
6B2C:  MOVLW  05
6B2E:  MOVLB  3
6B30:  MOVWF  xB6
6B32:  MOVLW  1E
6B34:  MOVWF  xB7
6B36:  MOVLW  04
6B38:  MOVWF  xB8
6B3A:  MOVLB  0
6B3C:  CALL   2E74
....................              displayTiempo((int8)Tpulso,5,40,4); 
6B40:  MOVFF  251,3B7
6B44:  MOVFF  250,3B6
6B48:  MOVFF  24F,3B5
6B4C:  MOVFF  24E,3B4
6B50:  CALL   36D8
6B54:  MOVFF  01,3B4
6B58:  MOVFF  01,3B5
6B5C:  MOVLW  05
6B5E:  MOVLB  3
6B60:  MOVWF  xB6
6B62:  MOVLW  28
6B64:  MOVWF  xB7
6B66:  MOVLW  04
6B68:  MOVWF  xB8
6B6A:  MOVLB  0
6B6C:  CALL   2E74
....................              displayTiempo((int8)Ganancia,30,40,4); 
6B70:  MOVFF  265,3B7
6B74:  MOVFF  264,3B6
6B78:  MOVFF  263,3B5
6B7C:  MOVFF  262,3B4
6B80:  CALL   36D8
6B84:  MOVFF  01,3B4
6B88:  MOVFF  01,3B5
6B8C:  MOVLW  1E
6B8E:  MOVLB  3
6B90:  MOVWF  xB6
6B92:  MOVLW  28
6B94:  MOVWF  xB7
6B96:  MOVLW  04
6B98:  MOVWF  xB8
6B9A:  MOVLB  0
6B9C:  CALL   2E74
....................              displayTiempo((int8)Ajuste,30,30,4); 
6BA0:  MOVFF  237,3B5
6BA4:  MOVLW  1E
6BA6:  MOVLB  3
6BA8:  MOVWF  xB6
6BAA:  MOVWF  xB7
6BAC:  MOVLW  04
6BAE:  MOVWF  xB8
6BB0:  MOVLB  0
6BB2:  CALL   2E74
....................              displayTiempo((int8)Ajusten,30,20,4); 
6BB6:  MOVFF  238,3B5
6BBA:  MOVLW  1E
6BBC:  MOVLB  3
6BBE:  MOVWF  xB6
6BC0:  MOVLW  14
6BC2:  MOVWF  xB7
6BC4:  MOVLW  04
6BC6:  MOVWF  xB8
6BC8:  MOVLB  0
6BCA:  CALL   2E74
....................              displayTiempo((int8)Ganancia2,50,40,4); 
6BCE:  MOVFF  269,3B7
6BD2:  MOVFF  268,3B6
6BD6:  MOVFF  267,3B5
6BDA:  MOVFF  266,3B4
6BDE:  CALL   36D8
6BE2:  MOVFF  01,3B4
6BE6:  MOVFF  01,3B5
6BEA:  MOVLW  32
6BEC:  MOVLB  3
6BEE:  MOVWF  xB6
6BF0:  MOVLW  28
6BF2:  MOVWF  xB7
6BF4:  MOVLW  04
6BF6:  MOVWF  xB8
6BF8:  MOVLB  0
6BFA:  CALL   2E74
....................             } 
....................           
....................          // Muestra Valor de esterilizacion actual. 
....................          displayTiempo(Testerilizacion[3],80,0,1);displayTiempo(Testerilizacion[2],86,0,1);glcd_text57(92, 0, Vacio, 1, ON); 
6BFE:  MOVFF  226,3B5
6C02:  MOVLW  50
6C04:  MOVLB  3
6C06:  MOVWF  xB6
6C08:  CLRF   xB7
6C0A:  MOVLW  01
6C0C:  MOVWF  xB8
6C0E:  MOVLB  0
6C10:  CALL   2E74
6C14:  MOVFF  225,3B5
6C18:  MOVLW  56
6C1A:  MOVLB  3
6C1C:  MOVWF  xB6
6C1E:  CLRF   xB7
6C20:  MOVLW  01
6C22:  MOVWF  xB8
6C24:  MOVLB  0
6C26:  CALL   2E74
6C2A:  MOVLW  5C
6C2C:  MOVLB  3
6C2E:  MOVWF  xC4
6C30:  CLRF   xC5
6C32:  MOVLW  01
6C34:  MOVWF  xC7
6C36:  MOVLW  2A
6C38:  MOVWF  xC6
6C3A:  MOVLW  01
6C3C:  MOVWF  xC8
6C3E:  MOVWF  xC9
6C40:  MOVLB  0
6C42:  CALL   2910
....................          displayTiempo(Testerilizacion[1],98,0,1);displayTiempo(Testerilizacion[0],104,0,1); 
6C46:  MOVFF  224,3B5
6C4A:  MOVLW  62
6C4C:  MOVLB  3
6C4E:  MOVWF  xB6
6C50:  CLRF   xB7
6C52:  MOVLW  01
6C54:  MOVWF  xB8
6C56:  MOVLB  0
6C58:  CALL   2E74
6C5C:  MOVFF  223,3B5
6C60:  MOVLW  68
6C62:  MOVLB  3
6C64:  MOVWF  xB6
6C66:  CLRF   xB7
6C68:  MOVLW  01
6C6A:  MOVWF  xB8
6C6C:  MOVLB  0
6C6E:  CALL   2E74
....................          // Muestra tiempo de secado actual. 
....................          displayTiempo(Tsecado[3],80,8,1);displayTiempo(Tsecado[2],86,8,1);glcd_text57(92, 8, Vacio, 1, ON); 
6C72:  MOVFF  22E,3B5
6C76:  MOVLW  50
6C78:  MOVLB  3
6C7A:  MOVWF  xB6
6C7C:  MOVLW  08
6C7E:  MOVWF  xB7
6C80:  MOVLW  01
6C82:  MOVWF  xB8
6C84:  MOVLB  0
6C86:  CALL   2E74
6C8A:  MOVFF  22D,3B5
6C8E:  MOVLW  56
6C90:  MOVLB  3
6C92:  MOVWF  xB6
6C94:  MOVLW  08
6C96:  MOVWF  xB7
6C98:  MOVLW  01
6C9A:  MOVWF  xB8
6C9C:  MOVLB  0
6C9E:  CALL   2E74
6CA2:  MOVLW  5C
6CA4:  MOVLB  3
6CA6:  MOVWF  xC4
6CA8:  MOVLW  08
6CAA:  MOVWF  xC5
6CAC:  MOVLW  01
6CAE:  MOVWF  xC7
6CB0:  MOVLW  2A
6CB2:  MOVWF  xC6
6CB4:  MOVLW  01
6CB6:  MOVWF  xC8
6CB8:  MOVWF  xC9
6CBA:  MOVLB  0
6CBC:  CALL   2910
....................          displayTiempo(Tsecado[1],98,8,1);displayTiempo(Tsecado[0],104,8,1); 
6CC0:  MOVFF  22C,3B5
6CC4:  MOVLW  62
6CC6:  MOVLB  3
6CC8:  MOVWF  xB6
6CCA:  MOVLW  08
6CCC:  MOVWF  xB7
6CCE:  MOVLW  01
6CD0:  MOVWF  xB8
6CD2:  MOVLB  0
6CD4:  CALL   2E74
6CD8:  MOVFF  22B,3B5
6CDC:  MOVLW  68
6CDE:  MOVLB  3
6CE0:  MOVWF  xB6
6CE2:  MOVLW  08
6CE4:  MOVWF  xB7
6CE6:  MOVLW  01
6CE8:  MOVWF  xB8
6CEA:  MOVLB  0
6CEC:  CALL   2E74
....................          } 
....................            
....................          if(Prom>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
6CF0:  MOVLB  3
6CF2:  CLRF   xBA
6CF4:  MOVFF  234,3B9
6CF8:  MOVLB  0
6CFA:  CALL   257A
6CFE:  MOVFF  00,3B4
6D02:  MOVFF  01,3B5
6D06:  MOVFF  02,3B6
6D0A:  MOVFF  03,3B7
6D0E:  BSF    FD8.1
6D10:  MOVFF  03,3BF
6D14:  MOVFF  02,3BE
6D18:  MOVFF  01,3BD
6D1C:  MOVFF  00,3BC
6D20:  MOVLB  3
6D22:  CLRF   xC3
6D24:  CLRF   xC2
6D26:  CLRF   xC1
6D28:  MOVLW  7F
6D2A:  MOVWF  xC0
6D2C:  MOVLB  0
6D2E:  CALL   3714
6D32:  MOVFF  03,3B8
6D36:  MOVFF  02,3B7
6D3A:  MOVFF  01,3B6
6D3E:  MOVFF  00,3B5
6D42:  MOVFF  259,3BC
6D46:  MOVFF  258,3BB
6D4A:  MOVFF  257,3BA
6D4E:  MOVFF  256,3B9
6D52:  CALL   3F0A
6D56:  BC    6D5A
6D58:  BNZ   6DD6
....................             {Des=0; 
6D5A:  MOVLB  2
6D5C:  BCF    x33.2
....................             if(tiempo_secado==0) 
6D5E:  BTFSC  x16.3
6D60:  BRA    6DD6
....................                {glcd_text57(0, 56, Esterilizando, 1, ON);tiempo_esterilizacion=1; 
6D62:  MOVLB  3
6D64:  CLRF   xC4
6D66:  MOVLW  38
6D68:  MOVWF  xC5
6D6A:  MOVLW  01
6D6C:  MOVWF  xC7
6D6E:  MOVLW  0B
6D70:  MOVWF  xC6
6D72:  MOVLW  01
6D74:  MOVWF  xC8
6D76:  MOVWF  xC9
6D78:  MOVLB  0
6D7A:  CALL   2910
6D7E:  MOVLB  2
6D80:  BSF    x16.2
....................                if(est==0) 
6D82:  BTFSC  x33.0
6D84:  BRA    6DD6
....................                   {Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1;} 
6D86:  MOVLB  3
6D88:  CLRF   xB4
6D8A:  MOVLW  5A
6D8C:  MOVWF  xB5
6D8E:  MOVLW  38
6D90:  MOVWF  xB6
6D92:  MOVLB  0
6D94:  CALL   426E
6D98:  MOVLW  0F
6D9A:  MOVLB  3
6D9C:  MOVWF  xC6
6D9E:  MOVLW  12
6DA0:  MOVWF  xC7
6DA2:  MOVLW  1E
6DA4:  MOVWF  xC8
6DA6:  MOVLW  35
6DA8:  MOVWF  xC9
6DAA:  CLRF   xCA
6DAC:  CLRF   xCB
6DAE:  MOVLB  0
6DB0:  CALL   2DB2
6DB4:  MOVLW  19
6DB6:  MOVLB  3
6DB8:  MOVWF  xC6
6DBA:  MOVLW  12
6DBC:  MOVWF  xC7
6DBE:  MOVLW  3C
6DC0:  MOVWF  xC8
6DC2:  MOVLW  1A
6DC4:  MOVWF  xC9
6DC6:  CLRF   xCA
6DC8:  MOVLW  01
6DCA:  MOVWF  xCB
6DCC:  MOVLB  0
6DCE:  CALL   2DB2
6DD2:  MOVLB  2
6DD4:  BSF    x33.0
....................                } 
....................              }   
....................        
....................       if((tiempo_secado==1)&&(Liquid==0)) //Si no selecciono un programa con desfogue lento, Hacer desfogue total. 
6DD6:  MOVLB  2
6DD8:  BTFSS  x16.3
6DDA:  BRA    6DE4
6DDC:  MOVF   x14,F
6DDE:  BNZ   6DE4
....................       {Menu=101;} 
6DE0:  MOVLW  65
6DE2:  MOVWF  x09
....................       
....................       if(tiempo_secado==0) //Si esta calentando, debe tener la electrovalvula cerrada. 
6DE4:  BTFSC  x16.3
6DE6:  BRA    6DEC
....................       {Camara_OUT_off;} 
6DE8:  BCF    F8B.0
6DEA:  BCF    F94.0
....................              
....................       // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................       if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])) 
6DEC:  MOVF   x27,W
6DEE:  SUBWF  x23,W
6DF0:  BNZ   6E82
6DF2:  MOVF   x28,W
6DF4:  SUBWF  x24,W
6DF6:  BNZ   6E82
6DF8:  MOVF   x29,W
6DFA:  SUBWF  x25,W
6DFC:  BNZ   6E82
6DFE:  MOVF   x2A,W
6E00:  SUBWF  x26,W
6E02:  BNZ   6E82
....................       {tiempo_esterilizacion=0; 
6E04:  BCF    x16.2
....................        
....................       // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................       if(Liquid==1)    
6E06:  DECFSZ x14,W
6E08:  BRA    6E82
....................          {tiempo_secado=0; 
6E0A:  BCF    x16.3
....................             if(i==0) 
6E0C:  BTFSC  x16.4
6E0E:  BRA    6E82
....................               {Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);i=1; 
6E10:  MOVLB  3
6E12:  CLRF   xB4
6E14:  MOVLW  5A
6E16:  MOVWF  xB5
6E18:  MOVLW  38
6E1A:  MOVWF  xB6
6E1C:  MOVLB  0
6E1E:  CALL   426E
6E22:  MOVLW  19
6E24:  MOVLB  3
6E26:  MOVWF  xC6
6E28:  MOVLW  12
6E2A:  MOVWF  xC7
6E2C:  MOVLW  3C
6E2E:  MOVWF  xC8
6E30:  MOVLW  1A
6E32:  MOVWF  xC9
6E34:  CLRF   xCA
6E36:  CLRF   xCB
6E38:  MOVLB  0
6E3A:  CALL   2DB2
6E3E:  MOVLW  37
6E40:  MOVLB  3
6E42:  MOVWF  xC6
6E44:  MOVLW  12
6E46:  MOVWF  xC7
6E48:  MOVLW  44
6E4A:  MOVWF  xC8
6E4C:  MOVLW  35
6E4E:  MOVWF  xC9
6E50:  CLRF   xCA
6E52:  MOVLW  01
6E54:  MOVWF  xCB
6E56:  MOVLB  0
6E58:  CALL   2DB2
6E5C:  MOVLB  2
6E5E:  BSF    x16.4
....................               glcd_text57(0, 56, Desfogue_Lento, 1, ON);Menu=101;} 
6E60:  MOVLB  3
6E62:  CLRF   xC4
6E64:  MOVLW  38
6E66:  MOVWF  xC5
6E68:  MOVLW  01
6E6A:  MOVWF  xC7
6E6C:  MOVLW  6C
6E6E:  MOVWF  xC6
6E70:  MOVLW  01
6E72:  MOVWF  xC8
6E74:  MOVWF  xC9
6E76:  MOVLB  0
6E78:  CALL   2910
6E7C:  MOVLW  65
6E7E:  MOVLB  2
6E80:  MOVWF  x09
....................          } 
....................       } 
....................       
....................     } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
....................    if(Menu==101) 
6E82:  MOVF   x09,W
6E84:  SUBLW  65
6E86:  BTFSS  FD8.2
6E88:  BRA    7402
....................    {        V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
6E8A:  MOVLB  3
6E8C:  CLRF   xB4
6E8E:  MOVLB  0
6E90:  CALL   25B0
6E94:  MOVFF  03,241
6E98:  MOVFF  02,240
6E9C:  MOVFF  01,23F
6EA0:  MOVFF  00,23E
....................             V0 = V0/4.882; 
6EA4:  MOVFF  241,3BB
6EA8:  MOVFF  240,3BA
6EAC:  MOVFF  23F,3B9
6EB0:  MOVFF  23E,3B8
6EB4:  MOVLW  58
6EB6:  MOVLB  3
6EB8:  MOVWF  xBF
6EBA:  MOVLW  39
6EBC:  MOVWF  xBE
6EBE:  MOVLW  1C
6EC0:  MOVWF  xBD
6EC2:  MOVLW  81
6EC4:  MOVWF  xBC
6EC6:  MOVLB  0
6EC8:  CALL   3DAC
6ECC:  MOVFF  03,241
6ED0:  MOVFF  02,240
6ED4:  MOVFF  01,23F
6ED8:  MOVFF  00,23E
....................             Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
6EDC:  MOVLB  3
6EDE:  CLRF   xBA
6EE0:  MOVFF  239,3B9
6EE4:  MOVLB  0
6EE6:  CALL   257A
6EEA:  BCF    FD8.1
6EEC:  MOVFF  245,3BF
6EF0:  MOVFF  244,3BE
6EF4:  MOVFF  243,3BD
6EF8:  MOVFF  242,3BC
6EFC:  MOVFF  03,3C3
6F00:  MOVFF  02,3C2
6F04:  MOVFF  01,3C1
6F08:  MOVFF  00,3C0
6F0C:  CALL   3714
6F10:  MOVFF  00,3B4
6F14:  MOVFF  01,3B5
6F18:  MOVFF  02,3B6
6F1C:  MOVFF  03,3B7
6F20:  MOVLB  3
6F22:  CLRF   xBB
6F24:  MOVLW  C0
6F26:  MOVWF  xBA
6F28:  MOVLW  7F
6F2A:  MOVWF  xB9
6F2C:  MOVLW  88
6F2E:  MOVWF  xB8
6F30:  MOVFF  241,3BF
6F34:  MOVFF  240,3BE
6F38:  MOVFF  23F,3BD
6F3C:  MOVFF  23E,3BC
6F40:  MOVLB  0
6F42:  CALL   3DAC
6F46:  MOVFF  00,3B8
6F4A:  MOVFF  01,3B9
6F4E:  MOVFF  02,3BA
6F52:  MOVFF  03,3BB
6F56:  BSF    FD8.1
6F58:  MOVFF  03,3BF
6F5C:  MOVFF  02,3BE
6F60:  MOVFF  01,3BD
6F64:  MOVFF  00,3BC
6F68:  MOVLB  3
6F6A:  CLRF   xC3
6F6C:  CLRF   xC2
6F6E:  CLRF   xC1
6F70:  MOVLW  7F
6F72:  MOVWF  xC0
6F74:  MOVLB  0
6F76:  CALL   3714
6F7A:  MOVFF  3B7,3BB
6F7E:  MOVFF  3B6,3BA
6F82:  MOVFF  3B5,3B9
6F86:  MOVFF  3B4,3B8
6F8A:  MOVFF  03,3BF
6F8E:  MOVFF  02,3BE
6F92:  MOVFF  01,3BD
6F96:  MOVFF  00,3BC
6F9A:  CALL   3DAC
6F9E:  MOVFF  03,249
6FA2:  MOVFF  02,248
6FA6:  MOVFF  01,247
6FAA:  MOVFF  00,246
....................             //Temperature=(Pt-100.0972)/0.3850;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................             Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
6FAE:  BSF    FD8.1
6FB0:  MOVFF  249,3BF
6FB4:  MOVFF  248,3BE
6FB8:  MOVFF  247,3BD
6FBC:  MOVFF  246,3BC
6FC0:  MOVLB  3
6FC2:  CLRF   xC3
6FC4:  CLRF   xC2
6FC6:  MOVLW  48
6FC8:  MOVWF  xC1
6FCA:  MOVLW  85
6FCC:  MOVWF  xC0
6FCE:  MOVLB  0
6FD0:  CALL   3714
6FD4:  MOVFF  00,3B4
6FD8:  MOVFF  01,3B5
6FDC:  MOVFF  02,3B6
6FE0:  MOVFF  03,3B7
6FE4:  MOVFF  03,3BB
6FE8:  MOVFF  02,3BA
6FEC:  MOVFF  01,3B9
6FF0:  MOVFF  00,3B8
6FF4:  MOVLW  B8
6FF6:  MOVLB  3
6FF8:  MOVWF  xBF
6FFA:  MOVLW  1E
6FFC:  MOVWF  xBE
6FFE:  MOVLW  45
7000:  MOVWF  xBD
7002:  MOVLW  7D
7004:  MOVWF  xBC
7006:  MOVLB  0
7008:  CALL   3DAC
700C:  MOVFF  03,25D
7010:  MOVFF  02,25C
7014:  MOVFF  01,25B
7018:  MOVFF  00,25A
....................              
....................             if(l>79) 
701C:  MOVLB  2
701E:  MOVF   x36,W
7020:  SUBLW  4F
7022:  BC    7026
....................             {l=0;} 
7024:  CLRF   x36
....................             promedio[l]=Temperature;l++; 
7026:  MOVLB  3
7028:  CLRF   xB9
702A:  MOVFF  236,3B8
702E:  CLRF   xBB
7030:  MOVLW  04
7032:  MOVWF  xBA
7034:  MOVLB  0
7036:  CALL   3148
703A:  MOVF   01,W
703C:  ADDLW  74
703E:  MOVWF  FE9
7040:  MOVLW  02
7042:  ADDWFC 02,W
7044:  MOVWF  FEA
7046:  MOVFF  25A,FEF
704A:  MOVFF  25B,FEC
704E:  MOVFF  25C,FEC
7052:  MOVFF  25D,FEC
7056:  MOVLB  2
7058:  INCF   x36,F
....................           
....................             for(h=0;h<=79;h++) 
705A:  CLRF   x35
705C:  MOVF   x35,W
705E:  SUBLW  4F
7060:  BNC   70E2
....................             { 
....................                Prom+=promedio[h]; 
7062:  MOVLB  3
7064:  CLRF   xB9
7066:  MOVFF  235,3B8
706A:  CLRF   xBB
706C:  MOVLW  04
706E:  MOVWF  xBA
7070:  MOVLB  0
7072:  CALL   3148
7076:  MOVFF  02,03
707A:  MOVF   01,W
707C:  ADDLW  74
707E:  MOVWF  FE9
7080:  MOVLW  02
7082:  ADDWFC 02,W
7084:  MOVWF  FEA
7086:  MOVFF  FEF,00
708A:  MOVFF  FEC,01
708E:  MOVFF  FEC,02
7092:  MOVFF  FEC,03
7096:  MOVFF  FEA,3B5
709A:  MOVFF  FE9,3B4
709E:  BCF    FD8.1
70A0:  MOVFF  259,3BF
70A4:  MOVFF  258,3BE
70A8:  MOVFF  257,3BD
70AC:  MOVFF  256,3BC
70B0:  MOVFF  03,3C3
70B4:  MOVFF  02,3C2
70B8:  MOVFF  01,3C1
70BC:  MOVFF  00,3C0
70C0:  CALL   3714
70C4:  MOVFF  3B5,FEA
70C8:  MOVFF  3B4,FE9
70CC:  MOVFF  03,259
70D0:  MOVFF  02,258
70D4:  MOVFF  01,257
70D8:  MOVFF  00,256
....................             }  
70DC:  MOVLB  2
70DE:  INCF   x35,F
70E0:  BRA    705C
....................                Prom=Prom/81;    
70E2:  MOVFF  259,3BB
70E6:  MOVFF  258,3BA
70EA:  MOVFF  257,3B9
70EE:  MOVFF  256,3B8
70F2:  MOVLB  3
70F4:  CLRF   xBF
70F6:  CLRF   xBE
70F8:  MOVLW  22
70FA:  MOVWF  xBD
70FC:  MOVLW  85
70FE:  MOVWF  xBC
7100:  MOVLB  0
7102:  CALL   3DAC
7106:  MOVFF  03,259
710A:  MOVFF  02,258
710E:  MOVFF  01,257
7112:  MOVFF  00,256
....................                Prom+=((float)Ajuste-(float)Ajusten); 
7116:  MOVLB  3
7118:  CLRF   xBA
711A:  MOVFF  237,3B9
711E:  MOVLB  0
7120:  CALL   257A
7124:  MOVFF  00,3B4
7128:  MOVFF  01,3B5
712C:  MOVFF  02,3B6
7130:  MOVFF  03,3B7
7134:  MOVLB  3
7136:  CLRF   xBA
7138:  MOVFF  238,3B9
713C:  MOVLB  0
713E:  CALL   257A
7142:  BSF    FD8.1
7144:  MOVFF  3B7,3BF
7148:  MOVFF  3B6,3BE
714C:  MOVFF  3B5,3BD
7150:  MOVFF  3B4,3BC
7154:  MOVFF  03,3C3
7158:  MOVFF  02,3C2
715C:  MOVFF  01,3C1
7160:  MOVFF  00,3C0
7164:  CALL   3714
7168:  BCF    FD8.1
716A:  MOVFF  259,3BF
716E:  MOVFF  258,3BE
7172:  MOVFF  257,3BD
7176:  MOVFF  256,3BC
717A:  MOVFF  03,3C3
717E:  MOVFF  02,3C2
7182:  MOVFF  01,3C1
7186:  MOVFF  00,3C0
718A:  CALL   3714
718E:  MOVFF  03,259
7192:  MOVFF  02,258
7196:  MOVFF  01,257
719A:  MOVFF  00,256
....................                 
....................          if(Lectura==1) 
719E:  MOVLB  2
71A0:  BTFSS  x16.6
71A2:  BRA    7262
....................          {                       
....................             Lectura=0; 
71A4:  BCF    x16.6
....................             displayT(Prom,69,20,3); 
71A6:  MOVFF  259,3B7
71AA:  MOVFF  258,3B6
71AE:  MOVFF  257,3B5
71B2:  MOVFF  256,3B4
71B6:  MOVLW  45
71B8:  MOVLB  3
71BA:  MOVWF  xB8
71BC:  MOVLW  14
71BE:  MOVWF  xB9
71C0:  MOVLW  03
71C2:  MOVWF  xBA
71C4:  MOVLB  0
71C6:  CALL   41FC
....................             //displayT(Pt,1,20,3); 
....................             displayTiempo(Setpoint,5,20,4); 
71CA:  MOVFF  234,3B5
71CE:  MOVLW  05
71D0:  MOVLB  3
71D2:  MOVWF  xB6
71D4:  MOVLW  14
71D6:  MOVWF  xB7
71D8:  MOVLW  04
71DA:  MOVWF  xB8
71DC:  MOVLB  0
71DE:  CALL   2E74
....................             // Muestra tiempo de secado actual. 
....................             displayTiempo(Tsecado[3],80,8,1);displayTiempo(Tsecado[2],86,8,1);glcd_text57(92, 8, Vacio, 1, ON); 
71E2:  MOVFF  22E,3B5
71E6:  MOVLW  50
71E8:  MOVLB  3
71EA:  MOVWF  xB6
71EC:  MOVLW  08
71EE:  MOVWF  xB7
71F0:  MOVLW  01
71F2:  MOVWF  xB8
71F4:  MOVLB  0
71F6:  CALL   2E74
71FA:  MOVFF  22D,3B5
71FE:  MOVLW  56
7200:  MOVLB  3
7202:  MOVWF  xB6
7204:  MOVLW  08
7206:  MOVWF  xB7
7208:  MOVLW  01
720A:  MOVWF  xB8
720C:  MOVLB  0
720E:  CALL   2E74
7212:  MOVLW  5C
7214:  MOVLB  3
7216:  MOVWF  xC4
7218:  MOVLW  08
721A:  MOVWF  xC5
721C:  MOVLW  01
721E:  MOVWF  xC7
7220:  MOVLW  2A
7222:  MOVWF  xC6
7224:  MOVLW  01
7226:  MOVWF  xC8
7228:  MOVWF  xC9
722A:  MOVLB  0
722C:  CALL   2910
....................             displayTiempo(Tsecado[1],98,8,1);displayTiempo(Tsecado[0],104,8,1); 
7230:  MOVFF  22C,3B5
7234:  MOVLW  62
7236:  MOVLB  3
7238:  MOVWF  xB6
723A:  MOVLW  08
723C:  MOVWF  xB7
723E:  MOVLW  01
7240:  MOVWF  xB8
7242:  MOVLB  0
7244:  CALL   2E74
7248:  MOVFF  22B,3B5
724C:  MOVLW  68
724E:  MOVLB  3
7250:  MOVWF  xB6
7252:  MOVLW  08
7254:  MOVWF  xB7
7256:  MOVLW  01
7258:  MOVWF  xB8
725A:  MOVLB  0
725C:  CALL   2E74
7260:  MOVLB  2
....................          }   
....................           
....................       if(Liquid==1) 
7262:  DECFSZ x14,W
7264:  BRA    7350
....................          { 
....................          if(m<Minutos*15)// Utilizado para realizar la rampa. 
7266:  MOVFF  220,3B9
726A:  MOVFF  21F,3B8
726E:  MOVLB  3
7270:  CLRF   xBB
7272:  MOVLW  0F
7274:  MOVWF  xBA
7276:  MOVLB  0
7278:  CALL   3148
727C:  MOVFF  02,03
7280:  MOVF   01,W
7282:  MOVLB  2
7284:  MOVF   x1C,W
7286:  SUBWF  02,W
7288:  BNC   733C
728A:  BNZ   7292
728C:  MOVF   01,W
728E:  SUBWF  x1B,W
7290:  BC    733C
....................          {Resistencia_off;Camara_IN_off;Camara_OUT_on;delay_ms(100*Nivel);Camara_OUT_off;delay_ms(2000-(100*Nivel));m++; } 
7292:  BCF    F8C.2
7294:  BCF    F95.2
7296:  BCF    F8B.2
7298:  BCF    F94.2
729A:  BSF    F8B.0
729C:  BCF    F94.0
729E:  MOVLB  3
72A0:  CLRF   xB9
72A2:  MOVLW  64
72A4:  MOVWF  xB8
72A6:  MOVFF  222,3BB
72AA:  MOVFF  221,3BA
72AE:  MOVLB  0
72B0:  CALL   3148
72B4:  MOVFF  02,3B5
72B8:  MOVFF  01,3B4
72BC:  MOVFF  02,3B6
72C0:  MOVLB  3
72C2:  INCF   xB6,F
72C4:  DECF   xB6,F
72C6:  BTFSC  FD8.2
72C8:  BRA    72D8
72CA:  MOVLW  FF
72CC:  MOVWF  xB9
72CE:  MOVLB  0
72D0:  CALL   2550
72D4:  MOVLB  3
72D6:  BRA    72C4
72D8:  MOVFF  3B4,3B9
72DC:  MOVLB  0
72DE:  CALL   2550
72E2:  BCF    F8B.0
72E4:  BCF    F94.0
72E6:  MOVLB  3
72E8:  CLRF   xB9
72EA:  MOVLW  64
72EC:  MOVWF  xB8
72EE:  MOVFF  222,3BB
72F2:  MOVFF  221,3BA
72F6:  MOVLB  0
72F8:  CALL   3148
72FC:  MOVFF  02,03
7300:  MOVF   01,W
7302:  XORLW  FF
7304:  ADDLW  D1
7306:  MOVLB  3
7308:  MOVWF  xB4
730A:  MOVLW  07
730C:  SUBFWB 02,W
730E:  MOVWF  xB5
7310:  MOVWF  xB6
7312:  INCF   xB6,F
7314:  DECF   xB6,F
7316:  BTFSC  FD8.2
7318:  BRA    7328
731A:  MOVLW  FF
731C:  MOVWF  xB9
731E:  MOVLB  0
7320:  CALL   2550
7324:  MOVLB  3
7326:  BRA    7314
7328:  MOVFF  3B4,3B9
732C:  MOVLB  0
732E:  CALL   2550
7332:  MOVLB  2
7334:  INCF   x1B,F
7336:  BTFSC  FD8.2
7338:  INCF   x1C,F
....................       else    
733A:  BRA    7350
....................          {   
....................             fin_ciclo=1;Menu=102;glcd_fillScreen(OFF); 
733C:  MOVLW  01
733E:  MOVWF  x3A
7340:  MOVLW  66
7342:  MOVWF  x09
7344:  MOVLB  3
7346:  CLRF   xB5
7348:  MOVLB  0
734A:  CALL   26BA
734E:  MOVLB  2
....................          } 
....................          } 
....................           
....................          if(Liquid==0) 
7350:  MOVF   x14,F
7352:  BNZ   7402
....................          { 
....................             tiempo_esterilizacion=0;Des=0; 
7354:  BCF    x16.2
7356:  BCF    x33.2
....................             if(i==0) 
7358:  BTFSC  x16.4
735A:  BRA    73AC
....................                {Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);i=1;}  
735C:  MOVLB  3
735E:  CLRF   xB4
7360:  MOVLW  5A
7362:  MOVWF  xB5
7364:  MOVLW  38
7366:  MOVWF  xB6
7368:  MOVLB  0
736A:  CALL   426E
736E:  MOVLW  19
7370:  MOVLB  3
7372:  MOVWF  xC6
7374:  MOVLW  12
7376:  MOVWF  xC7
7378:  MOVLW  3C
737A:  MOVWF  xC8
737C:  MOVLW  1A
737E:  MOVWF  xC9
7380:  CLRF   xCA
7382:  CLRF   xCB
7384:  MOVLB  0
7386:  CALL   2DB2
738A:  MOVLW  37
738C:  MOVLB  3
738E:  MOVWF  xC6
7390:  MOVLW  12
7392:  MOVWF  xC7
7394:  MOVLW  44
7396:  MOVWF  xC8
7398:  MOVLW  35
739A:  MOVWF  xC9
739C:  CLRF   xCA
739E:  MOVLW  01
73A0:  MOVWF  xCB
73A2:  MOVLB  0
73A4:  CALL   2DB2
73A8:  MOVLB  2
73AA:  BSF    x16.4
....................                Camara_OUT_on;Camara_IN_off;Resistencia_off;glcd_text57(0, 56, Secando, 1, ON); 
73AC:  BSF    F8B.0
73AE:  BCF    F94.0
73B0:  BCF    F8B.2
73B2:  BCF    F94.2
73B4:  BCF    F8C.2
73B6:  BCF    F95.2
73B8:  MOVLB  3
73BA:  CLRF   xC4
73BC:  MOVLW  38
73BE:  MOVWF  xC5
73C0:  MOVLW  01
73C2:  MOVWF  xC7
73C4:  MOVLW  19
73C6:  MOVWF  xC6
73C8:  MOVLW  01
73CA:  MOVWF  xC8
73CC:  MOVWF  xC9
73CE:  MOVLB  0
73D0:  CALL   2910
....................                 
....................             if((Tsecado[0]==Tsecadop[0])&&(Tsecado[1]==Tsecadop[1])&&(Tsecado[2]==Tsecadop[2])&&(Tsecado[3]==Tsecadop[3]))// Si cumplio 
73D4:  MOVLB  2
73D6:  MOVF   x2F,W
73D8:  SUBWF  x2B,W
73DA:  BNZ   7402
73DC:  MOVF   x30,W
73DE:  SUBWF  x2C,W
73E0:  BNZ   7402
73E2:  MOVF   x31,W
73E4:  SUBWF  x2D,W
73E6:  BNZ   7402
73E8:  MOVF   x32,W
73EA:  SUBWF  x2E,W
73EC:  BNZ   7402
....................             {   
....................                Menu=102;fin_ciclo=1;glcd_fillScreen(OFF);//tiempo de secado sin seleccionar ningun programa de desfogue lento, activa fin de ciclo. 
73EE:  MOVLW  66
73F0:  MOVWF  x09
73F2:  MOVLW  01
73F4:  MOVWF  x3A
73F6:  MOVLB  3
73F8:  CLRF   xB5
73FA:  MOVLB  0
73FC:  CALL   26BA
7400:  MOVLB  2
....................             } 
....................          } 
....................    } 
....................     
....................    if(Menu==102) 
7402:  MOVF   x09,W
7404:  SUBLW  66
7406:  BTFSS  FD8.2
7408:  BRA    75AA
....................    { 
....................       if(fin_ciclo==0) 
740A:  MOVF   x3A,F
740C:  BNZ   74EA
....................       { 
....................         glcd_text57(30, 0, Ultimo, 2, ON);glcd_text57(35, 20, Param, 2, ON); 
740E:  MOVLW  1E
7410:  MOVLB  3
7412:  MOVWF  xC4
7414:  CLRF   xC5
7416:  MOVLW  01
7418:  MOVWF  xC7
741A:  MOVLW  F3
741C:  MOVWF  xC6
741E:  MOVLW  02
7420:  MOVWF  xC8
7422:  MOVLW  01
7424:  MOVWF  xC9
7426:  MOVLB  0
7428:  CALL   2910
742C:  MOVLW  23
742E:  MOVLB  3
7430:  MOVWF  xC4
7432:  MOVLW  14
7434:  MOVWF  xC5
7436:  CLRF   xC7
7438:  MOVLW  B1
743A:  MOVWF  xC6
743C:  MOVLW  02
743E:  MOVWF  xC8
7440:  MOVLW  01
7442:  MOVWF  xC9
7444:  MOVLB  0
7446:  CALL   2910
....................         glcd_text57(50, 40, Fle, 1, ON); glcd_text57(70, 40, Fle1, 1, ON); 
744A:  MOVLW  32
744C:  MOVLB  3
744E:  MOVWF  xC4
7450:  MOVLW  28
7452:  MOVWF  xC5
7454:  CLRF   xC7
7456:  MOVLW  AD
7458:  MOVWF  xC6
745A:  MOVLW  01
745C:  MOVWF  xC8
745E:  MOVWF  xC9
7460:  MOVLB  0
7462:  CALL   2910
7466:  MOVLW  46
7468:  MOVLB  3
746A:  MOVWF  xC4
746C:  MOVLW  28
746E:  MOVWF  xC5
7470:  CLRF   xC7
7472:  MOVLW  AF
7474:  MOVWF  xC6
7476:  MOVLW  01
7478:  MOVWF  xC8
747A:  MOVWF  xC9
747C:  MOVLB  0
747E:  CALL   2910
....................         glcd_text57(50, 50, Si, 1, ON); glcd_text57(70, 50, Noo, 1, ON); 
7482:  MOVLW  32
7484:  MOVLB  3
7486:  MOVWF  xC4
7488:  MOVWF  xC5
748A:  MOVLW  01
748C:  MOVWF  xC7
748E:  MOVLW  D0
7490:  MOVWF  xC6
7492:  MOVLW  01
7494:  MOVWF  xC8
7496:  MOVWF  xC9
7498:  MOVLB  0
749A:  CALL   2910
749E:  MOVLW  46
74A0:  MOVLB  3
74A2:  MOVWF  xC4
74A4:  MOVLW  32
74A6:  MOVWF  xC5
74A8:  MOVLW  01
74AA:  MOVWF  xC7
74AC:  MOVLW  D3
74AE:  MOVWF  xC6
74B0:  MOVLW  01
74B2:  MOVWF  xC8
74B4:  MOVWF  xC9
74B6:  MOVLB  0
74B8:  CALL   2910
....................          
....................         if(LEFT) 
74BC:  BSF    F92.5
74BE:  BTFSS  F80.5
74C0:  BRA    74D2
....................         {fin_ciclo=1;glcd_fillScreen(OFF);} 
74C2:  MOVLW  01
74C4:  MOVLB  2
74C6:  MOVWF  x3A
74C8:  MOVLB  3
74CA:  CLRF   xB5
74CC:  MOVLB  0
74CE:  CALL   26BA
....................          
....................         if(RIGHT) 
74D2:  BSF    F92.3
74D4:  BTFSS  F80.3
74D6:  BRA    74E8
....................         {fin_ciclo=3;glcd_fillScreen(OFF);} 
74D8:  MOVLW  03
74DA:  MOVLB  2
74DC:  MOVWF  x3A
74DE:  MOVLB  3
74E0:  CLRF   xB5
74E2:  MOVLB  0
74E4:  CALL   26BA
74E8:  MOVLB  2
....................          
....................       } 
....................     
....................       if(fin_ciclo==1) //Si termino proceso. 
74EA:  DECFSZ x3A,W
74EC:  BRA    7538
....................             {glcd_fillScreen(OFF); glcd_text57(20, 0, Proc, 2, ON);glcd_text57(10, 40, Finalizado, 2, ON);fin_ciclo++;} 
74EE:  MOVLB  3
74F0:  CLRF   xB5
74F2:  MOVLB  0
74F4:  CALL   26BA
74F8:  MOVLW  14
74FA:  MOVLB  3
74FC:  MOVWF  xC4
74FE:  CLRF   xC5
7500:  CLRF   xC7
7502:  MOVLW  C1
7504:  MOVWF  xC6
7506:  MOVLW  02
7508:  MOVWF  xC8
750A:  MOVLW  01
750C:  MOVWF  xC9
750E:  MOVLB  0
7510:  CALL   2910
7514:  MOVLW  0A
7516:  MOVLB  3
7518:  MOVWF  xC4
751A:  MOVLW  28
751C:  MOVWF  xC5
751E:  MOVLW  01
7520:  MOVWF  xC7
7522:  MOVLW  D6
7524:  MOVWF  xC6
7526:  MOVLW  02
7528:  MOVWF  xC8
752A:  MOVLW  01
752C:  MOVWF  xC9
752E:  MOVLB  0
7530:  CALL   2910
7534:  MOVLB  2
7536:  INCF   x3A,F
....................             if(fin_ciclo==2) 
7538:  MOVF   x3A,W
753A:  SUBLW  02
753C:  BNZ   7556
....................             {Camara_OUT_off;Camara_IN_off;Resistencia_off;Piloto_Fc_on; 
753E:  BCF    F8B.0
7540:  BCF    F94.0
7542:  BCF    F8B.2
7544:  BCF    F94.2
7546:  BCF    F8C.2
7548:  BCF    F95.2
754A:  BSF    F8C.0
754C:  BCF    F95.0
....................                if(LEFT) 
754E:  BSF    F92.5
7550:  BTFSS  F80.5
7552:  BRA    7556
....................                {reset_cpu();} 
7554:  RESET
....................             } 
....................             if(fin_ciclo==3) 
7556:  MOVF   x3A,W
7558:  SUBLW  03
755A:  BNZ   75AA
....................             {glcd_text57(20, 0, Proc, 2, ON);glcd_text57(10, 40, Finalizado, 2, ON);Camara_OUT_on;Camara_IN_on;Resistencia_off;Piloto_Fc_on;} 
755C:  MOVLW  14
755E:  MOVLB  3
7560:  MOVWF  xC4
7562:  CLRF   xC5
7564:  CLRF   xC7
7566:  MOVLW  C1
7568:  MOVWF  xC6
756A:  MOVLW  02
756C:  MOVWF  xC8
756E:  MOVLW  01
7570:  MOVWF  xC9
7572:  MOVLB  0
7574:  CALL   2910
7578:  MOVLW  0A
757A:  MOVLB  3
757C:  MOVWF  xC4
757E:  MOVLW  28
7580:  MOVWF  xC5
7582:  MOVLW  01
7584:  MOVWF  xC7
7586:  MOVLW  D6
7588:  MOVWF  xC6
758A:  MOVLW  02
758C:  MOVWF  xC8
758E:  MOVLW  01
7590:  MOVWF  xC9
7592:  MOVLB  0
7594:  CALL   2910
7598:  BSF    F8B.0
759A:  BCF    F94.0
759C:  BSF    F8B.2
759E:  BCF    F94.2
75A0:  BCF    F8C.2
75A2:  BCF    F95.2
75A4:  BSF    F8C.0
75A6:  BCF    F95.0
75A8:  MOVLB  2
....................    } 
....................          
....................    } 
75AA:  MOVLB  0
75AC:  GOTO   5078
.................... } 
75B0:  SLEEP 

Configuration Fuses:
   Word  1: CE38   IESO FCMEN HSPLL PLL1 CPUDIV4 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
