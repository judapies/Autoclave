CCS PCH C Compiler, Version 4.104, 5967               21-abr.-17 10:13

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Sin Precamara\2014\Autoclave 55L\Firmware Ajustado\Autoclave_80L_V01.lst

               ROM used: 31770 bytes (97%)
                         Largest free fragment is 998
               RAM used: 1159 (57%) at main() level
                         1225 (60%) worst case
               Stack:    14 worst case (5 in main + 9 for interrupts)

*
0000:  GOTO   492C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   23E4
0054:  BTFSS  FA0.5
0056:  GOTO   0060
005A:  BTFSC  FA1.5
005C:  GOTO   235C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
24D0:  MOVLW  03
24D2:  MOVWF  FEA
24D4:  MOVLW  B9
24D6:  MOVWF  FE9
24D8:  MOVF   FEF,W
24DA:  BZ    24F8
24DC:  MOVLW  0F
24DE:  MOVWF  01
24E0:  CLRF   00
24E2:  DECFSZ 00,F
24E4:  BRA    24E2
24E6:  DECFSZ 01,F
24E8:  BRA    24E0
24EA:  MOVLW  8F
24EC:  MOVWF  00
24EE:  DECFSZ 00,F
24F0:  BRA    24EE
24F2:  NOP   
24F4:  DECFSZ FEF,F
24F6:  BRA    24DC
24F8:  RETLW  00
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... //#ifndef FAST_GLCD 
.................... //#define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D3   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D4   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C7   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
2E94:  BCF    F94.7
2E96:  BSF    F8B.7
....................    output_low(GLCD_E); 
2E98:  BCF    F95.7
2E9A:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
2E9C:  BCF    F95.3
2E9E:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
2EA0:  BCF    F95.4
2EA2:  BCF    F8C.4
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
2EA4:  BCF    F95.5
2EA6:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
2EA8:  MOVLB  3
2EAA:  CLRF   xE7
2EAC:  MOVLW  C0
2EAE:  MOVWF  xE8
2EB0:  MOVLB  0
2EB2:  RCALL  2DC6
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
2EB4:  MOVLW  01
2EB6:  MOVLB  3
2EB8:  MOVWF  xE7
2EBA:  MOVLW  C0
2EBC:  MOVWF  xE8
2EBE:  MOVLB  0
2EC0:  RCALL  2DC6
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
2EC2:  MOVLB  3
2EC4:  CLRF   xE7
2EC6:  MOVLW  40
2EC8:  MOVWF  xE8
2ECA:  MOVLB  0
2ECC:  RCALL  2DC6
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
2ECE:  MOVLW  01
2ED0:  MOVLB  3
2ED2:  MOVWF  xE7
2ED4:  MOVLW  40
2ED6:  MOVWF  xE8
2ED8:  MOVLB  0
2EDA:  RCALL  2DC6
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
2EDC:  MOVLB  3
2EDE:  CLRF   xE7
2EE0:  MOVLW  B8
2EE2:  MOVWF  xE8
2EE4:  MOVLB  0
2EE6:  RCALL  2DC6
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
2EE8:  MOVLW  01
2EEA:  MOVLB  3
2EEC:  MOVWF  xE7
2EEE:  MOVLW  B8
2EF0:  MOVWF  xE8
2EF2:  MOVLB  0
2EF4:  RCALL  2DC6
....................  
....................    if(mode == ON) 
2EF6:  MOVLB  3
2EF8:  DECFSZ xB3,W
2EFA:  BRA    2F18
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
2EFC:  CLRF   xE7
2EFE:  MOVLW  3F
2F00:  MOVWF  xE8
2F02:  MOVLB  0
2F04:  RCALL  2DC6
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
2F06:  MOVLW  01
2F08:  MOVLB  3
2F0A:  MOVWF  xE7
2F0C:  MOVLW  3F
2F0E:  MOVWF  xE8
2F10:  MOVLB  0
2F12:  RCALL  2DC6
....................    } 
....................    else 
2F14:  BRA    2F30
2F16:  MOVLB  3
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
2F18:  CLRF   xE7
2F1A:  MOVLW  3E
2F1C:  MOVWF  xE8
2F1E:  MOVLB  0
2F20:  RCALL  2DC6
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
2F22:  MOVLW  01
2F24:  MOVLB  3
2F26:  MOVWF  xE7
2F28:  MOVLW  3E
2F2A:  MOVWF  xE8
2F2C:  MOVLB  0
2F2E:  RCALL  2DC6
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
2F30:  MOVLB  3
2F32:  CLRF   xB4
2F34:  MOVLB  0
2F36:  RCALL  2E06
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
....................    #endif 
.................... } 
2F38:  GOTO   55B8 (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
*
2F88:  MOVLB  3
2F8A:  BCF    xE4.0
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
2F8C:  MOVF   xE0,W
2F8E:  SUBLW  3F
2F90:  BC    2F98
....................    { 
....................       x -= 64; 
2F92:  MOVLW  40
2F94:  SUBWF  xE0,F
....................       side = GLCD_RIGHT; 
2F96:  BSF    xE4.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
2F98:  BCF    F95.5
2F9A:  BCF    F8C.5
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
2F9C:  BCF    xE0.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
2F9E:  BSF    xE0.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
2FA0:  MOVLW  00
2FA2:  BTFSC  xE4.0
2FA4:  MOVLW  01
2FA6:  MOVWF  xE7
2FA8:  MOVFF  3E0,3E8
2FAC:  MOVLB  0
2FAE:  RCALL  2DC6
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
2FB0:  MOVLW  00
2FB2:  MOVLB  3
2FB4:  BTFSC  xE4.0
2FB6:  MOVLW  01
2FB8:  MOVWF  xE5
2FBA:  RRCF   xE1,W
2FBC:  MOVWF  00
2FBE:  RRCF   00,F
2FC0:  RRCF   00,F
2FC2:  MOVLW  1F
2FC4:  ANDWF  00,F
2FC6:  MOVF   00,W
2FC8:  ANDLW  BF
2FCA:  IORLW  B8
2FCC:  MOVWF  xE6
2FCE:  MOVFF  3E5,3E7
2FD2:  MOVWF  xE8
2FD4:  MOVLB  0
2FD6:  RCALL  2DC6
....................    output_high(GLCD_DI);                        // Set for data 
2FD8:  BCF    F95.5
2FDA:  BSF    F8C.5
....................    glcd_readByte(side);                         // Need two reads to get data 
2FDC:  MOVLW  00
2FDE:  MOVLB  3
2FE0:  BTFSC  xE4.0
2FE2:  MOVLW  01
2FE4:  MOVWF  xE6
2FE6:  MOVLB  0
2FE8:  RCALL  2F3C
....................    data = glcd_readByte(side);                  //  at new address 
2FEA:  MOVLW  00
2FEC:  MOVLB  3
2FEE:  BTFSC  xE4.0
2FF0:  MOVLW  01
2FF2:  MOVWF  xE6
2FF4:  MOVLB  0
2FF6:  RCALL  2F3C
2FF8:  MOVFF  01,3E3
....................  
....................    if(color == ON) 
2FFC:  MOVLB  3
2FFE:  DECFSZ xE2,W
3000:  BRA    3020
....................       bit_set(data, y%8);        // Turn the pixel on 
3002:  MOVF   xE1,W
3004:  ANDLW  07
3006:  MOVWF  xE5
3008:  MOVLW  01
300A:  MOVWF  00
300C:  MOVF   xE5,W
300E:  MOVWF  01
3010:  BZ    301A
3012:  BCF    FD8.0
3014:  RLCF   00,F
3016:  DECFSZ 01,F
3018:  BRA    3012
301A:  MOVF   00,W
301C:  IORWF  xE3,F
....................    else                          // or 
301E:  BRA    303E
....................       bit_clear(data, y%8);      // turn the pixel off 
3020:  MOVF   xE1,W
3022:  ANDLW  07
3024:  MOVWF  xE5
3026:  MOVLW  01
3028:  MOVWF  00
302A:  MOVF   xE5,W
302C:  MOVWF  01
302E:  BZ    3038
3030:  BCF    FD8.0
3032:  RLCF   00,F
3034:  DECFSZ 01,F
3036:  BRA    3030
3038:  MOVF   00,W
303A:  XORLW  FF
303C:  ANDWF  xE3,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
303E:  BCF    F95.5
3040:  BCF    F8C.5
....................    glcd_writeByte(side, x);      // Set the horizontal address 
3042:  MOVLW  00
3044:  BTFSC  xE4.0
3046:  MOVLW  01
3048:  MOVWF  xE7
304A:  MOVFF  3E0,3E8
304E:  MOVLB  0
3050:  RCALL  2DC6
....................    output_high(GLCD_DI);         // Set for data 
3052:  BCF    F95.5
3054:  BSF    F8C.5
....................    glcd_writeByte(side, data);   // Write the pixel data 
3056:  MOVLW  00
3058:  MOVLB  3
305A:  BTFSC  xE4.0
305C:  MOVLW  01
305E:  MOVWF  xE7
3060:  MOVFF  3E3,3E8
3064:  MOVLB  0
3066:  RCALL  2DC6
.................... } 
3068:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................       *p1++ = data; 
....................       *p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
2E06:  MOVLB  3
2E08:  CLRF   xB5
2E0A:  MOVF   xB5,W
2E0C:  SUBLW  07
2E0E:  BNC   2E90
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
2E10:  BCF    F95.5
2E12:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
2E14:  CLRF   xE7
2E16:  MOVLW  40
2E18:  MOVWF  xE8
2E1A:  MOVLB  0
2E1C:  RCALL  2DC6
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
2E1E:  MOVLW  01
2E20:  MOVLB  3
2E22:  MOVWF  xE7
2E24:  MOVLW  40
2E26:  MOVWF  xE8
2E28:  MOVLB  0
2E2A:  RCALL  2DC6
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
2E2C:  MOVLB  3
2E2E:  MOVF   xB5,W
2E30:  IORLW  B8
2E32:  MOVWF  xB7
2E34:  CLRF   xE7
2E36:  MOVWF  xE8
2E38:  MOVLB  0
2E3A:  RCALL  2DC6
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
2E3C:  MOVLB  3
2E3E:  MOVF   xB5,W
2E40:  IORLW  B8
2E42:  MOVWF  xB7
2E44:  MOVLW  01
2E46:  MOVWF  xE7
2E48:  MOVFF  3B7,3E8
2E4C:  MOVLB  0
2E4E:  RCALL  2DC6
....................       output_high(GLCD_DI);                     // Set for data 
2E50:  BCF    F95.5
2E52:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
2E54:  MOVLB  3
2E56:  CLRF   xB6
2E58:  MOVF   xB6,W
2E5A:  SUBLW  3F
2E5C:  BNC   2E8C
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
2E5E:  MOVF   xB4,W
2E60:  MULLW  FF
2E62:  MOVFF  FF3,3B7
2E66:  CLRF   xE7
2E68:  MOVFF  3B7,3E8
2E6C:  MOVLB  0
2E6E:  RCALL  2DC6
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
2E70:  MOVLB  3
2E72:  MOVF   xB4,W
2E74:  MULLW  FF
2E76:  MOVFF  FF3,3B7
2E7A:  MOVLW  01
2E7C:  MOVWF  xE7
2E7E:  MOVFF  3B7,3E8
2E82:  MOVLB  0
2E84:  RCALL  2DC6
....................       } 
2E86:  MOVLB  3
2E88:  INCF   xB6,F
2E8A:  BRA    2E58
....................    } 
2E8C:  INCF   xB5,F
2E8E:  BRA    2E0A
.................... } 
2E90:  MOVLB  0
2E92:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
2DC6:  MOVLB  3
2DC8:  MOVF   xE7,F
2DCA:  BZ    2DD2
....................       output_high(GLCD_CS2); 
2DCC:  BCF    F95.4
2DCE:  BSF    F8C.4
....................    else 
2DD0:  BRA    2DD6
....................       output_high(GLCD_CS1); 
2DD2:  BCF    F95.3
2DD4:  BSF    F8C.3
....................  
....................    output_low(GLCD_RW);       // Set for writing 
2DD6:  BCF    F95.6
2DD8:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
2DDA:  CLRF   F93
2DDC:  MOVFF  3E8,F8A
....................    delay_cycles(50); 
2DE0:  MOVLW  10
2DE2:  MOVWF  00
2DE4:  DECFSZ 00,F
2DE6:  BRA    2DE4
2DE8:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
2DEA:  BCF    F95.7
2DEC:  BSF    F8C.7
....................    delay_cycles(250); 
2DEE:  MOVLW  53
2DF0:  MOVWF  00
2DF2:  DECFSZ 00,F
2DF4:  BRA    2DF2
....................    output_low(GLCD_E); 
2DF6:  BCF    F95.7
2DF8:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
2DFA:  BCF    F95.3
2DFC:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
2DFE:  BCF    F95.4
2E00:  BCF    F8C.4
.................... } 
2E02:  MOVLB  0
2E04:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
*
2F3C:  MOVLW  FF
2F3E:  MOVWF  F93
....................    output_high(GLCD_RW);      // Set for reading 
2F40:  BCF    F95.6
2F42:  BSF    F8C.6
....................  
....................    if(side)                   // Choose which side to write to 
2F44:  MOVLB  3
2F46:  MOVF   xE6,F
2F48:  BZ    2F50
....................       output_high(GLCD_CS2); 
2F4A:  BCF    F95.4
2F4C:  BSF    F8C.4
....................    else 
2F4E:  BRA    2F54
....................       output_high(GLCD_CS1); 
2F50:  BCF    F95.3
2F52:  BSF    F8C.3
....................  
....................    delay_cycles(50); 
2F54:  MOVLW  10
2F56:  MOVWF  00
2F58:  DECFSZ 00,F
2F5A:  BRA    2F58
2F5C:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
2F5E:  BCF    F95.7
2F60:  BSF    F8C.7
....................    delay_cycles(200); 
2F62:  MOVLW  42
2F64:  MOVWF  00
2F66:  DECFSZ 00,F
2F68:  BRA    2F66
2F6A:  NOP   
....................    data = input_b();          // Get the data from the display's output register 
2F6C:  MOVLW  FF
2F6E:  MOVWF  F93
2F70:  MOVFF  F81,3E7
....................    output_low(GLCD_E); 
2F74:  BCF    F95.7
2F76:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
2F78:  BCF    F95.3
2F7A:  BCF    F8C.3
....................    output_low(GLCD_CS2); 
2F7C:  BCF    F95.4
2F7E:  BCF    F8C.4
....................    return data;               // Return the read data 
2F80:  MOVFF  3E7,01
.................... } 
2F84:  MOVLB  0
2F86:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
33CC:  MOVLW  01
33CE:  MOVLB  3
33D0:  MOVWF  xD9
33D2:  MOVWF  xDA
33D4:  CLRF   xDF
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
33D6:  MOVF   xD0,W
33D8:  SUBWF  xD2,W
33DA:  MOVWF  xE0
33DC:  MOVF   xE0,W
33DE:  BTFSS  xE0.7
33E0:  BRA    33E8
33E2:  MOVLW  00
33E4:  BSF    FD8.0
33E6:  SUBFWB xE0,W
33E8:  CLRF   03
33EA:  MOVWF  xD7
33EC:  MOVFF  03,3D8
....................    dy = abs((signed int8)(y2 - y1)); 
33F0:  MOVF   xD1,W
33F2:  SUBWF  xD3,W
33F4:  MOVWF  xE0
33F6:  MOVF   xE0,W
33F8:  BTFSS  xE0.7
33FA:  BRA    3402
33FC:  MOVLW  00
33FE:  BSF    FD8.0
3400:  SUBFWB xE0,W
3402:  CLRF   03
3404:  MOVWF  xD5
3406:  MOVFF  03,3D6
....................    #endif 
....................  
....................    if(x1 > x2) 
340A:  MOVF   xD0,W
340C:  SUBWF  xD2,W
340E:  BC    3414
....................       addx = -1; 
3410:  MOVLW  FF
3412:  MOVWF  xD9
....................    if(y1 > y2) 
3414:  MOVF   xD1,W
3416:  SUBWF  xD3,W
3418:  BC    341E
....................       addy = -1; 
341A:  MOVLW  FF
341C:  MOVWF  xDA
....................  
....................    if(dx >= dy) 
341E:  MOVF   xD6,W
3420:  SUBWF  xD8,W
3422:  BNC   349A
3424:  BNZ   342C
3426:  MOVF   xD5,W
3428:  SUBWF  xD7,W
342A:  BNC   349A
....................    { 
....................       dy *= 2; 
342C:  BCF    FD8.0
342E:  RLCF   xD5,F
3430:  RLCF   xD6,F
....................       P = dy - dx; 
3432:  MOVF   xD7,W
3434:  SUBWF  xD5,W
3436:  MOVWF  00
3438:  MOVF   xD8,W
343A:  SUBWFB xD6,W
343C:  MOVFF  00,3DB
3440:  MOVWF  xDC
....................       diff = P - dx; 
3442:  MOVF   xD7,W
3444:  SUBWF  xDB,W
3446:  MOVWF  xDD
3448:  MOVF   xD8,W
344A:  SUBWFB xDC,W
344C:  MOVWF  xDE
....................  
....................       for(; i<=dx; ++i) 
344E:  MOVF   xD8,F
3450:  BNZ   3458
3452:  MOVF   xDF,W
3454:  SUBWF  xD7,W
3456:  BNC   3498
....................       { 
....................          glcd_pixel(x1, y1, color); 
3458:  MOVFF  3D0,3E0
345C:  MOVFF  3D1,3E1
3460:  MOVFF  3D4,3E2
3464:  MOVLB  0
3466:  RCALL  2F88
....................  
....................          if(P < 0) 
3468:  MOVLB  3
346A:  BTFSC  xDC.7
346C:  BRA    3470
346E:  BRA    3480
....................          { 
....................             P  += dy; 
3470:  MOVF   xD5,W
3472:  ADDWF  xDB,F
3474:  MOVF   xD6,W
3476:  ADDWFC xDC,F
....................             x1 += addx; 
3478:  MOVF   xD9,W
347A:  ADDWF  xD0,W
347C:  MOVWF  xD0
....................          } 
....................          else 
347E:  BRA    3494
....................          { 
....................             P  += diff; 
3480:  MOVF   xDD,W
3482:  ADDWF  xDB,F
3484:  MOVF   xDE,W
3486:  ADDWFC xDC,F
....................             x1 += addx; 
3488:  MOVF   xD9,W
348A:  ADDWF  xD0,W
348C:  MOVWF  xD0
....................             y1 += addy; 
348E:  MOVF   xDA,W
3490:  ADDWF  xD1,W
3492:  MOVWF  xD1
....................          } 
....................       } 
3494:  INCF   xDF,F
3496:  BRA    344E
....................    } 
....................    else 
3498:  BRA    3506
....................    { 
....................       dx *= 2; 
349A:  BCF    FD8.0
349C:  RLCF   xD7,F
349E:  RLCF   xD8,F
....................       P = dx - dy; 
34A0:  MOVF   xD5,W
34A2:  SUBWF  xD7,W
34A4:  MOVWF  00
34A6:  MOVF   xD6,W
34A8:  SUBWFB xD8,W
34AA:  MOVFF  00,3DB
34AE:  MOVWF  xDC
....................       diff = P - dy; 
34B0:  MOVF   xD5,W
34B2:  SUBWF  xDB,W
34B4:  MOVWF  xDD
34B6:  MOVF   xD6,W
34B8:  SUBWFB xDC,W
34BA:  MOVWF  xDE
....................  
....................       for(; i<=dy; ++i) 
34BC:  MOVF   xD6,F
34BE:  BNZ   34C6
34C0:  MOVF   xDF,W
34C2:  SUBWF  xD5,W
34C4:  BNC   3506
....................       { 
....................          glcd_pixel(x1, y1, color); 
34C6:  MOVFF  3D0,3E0
34CA:  MOVFF  3D1,3E1
34CE:  MOVFF  3D4,3E2
34D2:  MOVLB  0
34D4:  RCALL  2F88
....................  
....................          if(P < 0) 
34D6:  MOVLB  3
34D8:  BTFSC  xDC.7
34DA:  BRA    34DE
34DC:  BRA    34EE
....................          { 
....................             P  += dx; 
34DE:  MOVF   xD7,W
34E0:  ADDWF  xDB,F
34E2:  MOVF   xD8,W
34E4:  ADDWFC xDC,F
....................             y1 += addy; 
34E6:  MOVF   xDA,W
34E8:  ADDWF  xD1,W
34EA:  MOVWF  xD1
....................          } 
....................          else 
34EC:  BRA    3502
....................          { 
....................             P  += diff; 
34EE:  MOVF   xDD,W
34F0:  ADDWF  xDB,F
34F2:  MOVF   xDE,W
34F4:  ADDWFC xDC,F
....................             x1 += addx; 
34F6:  MOVF   xD9,W
34F8:  ADDWF  xD0,W
34FA:  MOVWF  xD0
....................             y1 += addy; 
34FC:  MOVF   xDA,W
34FE:  ADDWF  xD1,W
3500:  MOVWF  xD1
....................          } 
....................       } 
3502:  INCF   xDF,F
3504:  BRA    34BC
....................    } 
.................... } 
3506:  MOVLB  0
3508:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
350A:  MOVLB  3
350C:  MOVF   xC9,F
350E:  BZ    356C
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
3510:  MOVF   xC7,W
3512:  SUBWF  xC5,W
3514:  BC    3520
....................       { 
....................          xmin = x1; 
3516:  MOVFF  3C5,3CC
....................          xmax = x2; 
351A:  MOVFF  3C7,3CD
....................       } 
....................       else 
351E:  BRA    3528
....................       { 
....................          xmin = x2; 
3520:  MOVFF  3C7,3CC
....................          xmax = x1; 
3524:  MOVFF  3C5,3CD
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
3528:  MOVF   xC8,W
352A:  SUBWF  xC6,W
352C:  BC    3538
....................       { 
....................          ymin = y1; 
352E:  MOVFF  3C6,3CE
....................          ymax = y2; 
3532:  MOVFF  3C8,3CF
....................       } 
....................       else 
3536:  BRA    3540
....................       { 
....................          ymin = y2; 
3538:  MOVFF  3C8,3CE
....................          ymax = y1; 
353C:  MOVFF  3C6,3CF
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
3540:  MOVF   xCC,W
3542:  SUBWF  xCD,W
3544:  BNC   356A
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
3546:  MOVFF  3CE,3CB
354A:  MOVF   xCB,W
354C:  SUBWF  xCF,W
354E:  BNC   3566
....................          { 
....................             glcd_pixel(xmin, i, color); 
3550:  MOVFF  3CC,3E0
3554:  MOVFF  3CB,3E1
3558:  MOVFF  3CA,3E2
355C:  MOVLB  0
355E:  RCALL  2F88
....................          } 
3560:  MOVLB  3
3562:  INCF   xCB,F
3564:  BRA    354A
....................       } 
3566:  INCF   xCC,F
3568:  BRA    3540
....................    } 
....................    else 
356A:  BRA    35C8
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
356C:  MOVFF  3C5,3D0
3570:  MOVFF  3C6,3D1
3574:  MOVFF  3C7,3D2
3578:  MOVFF  3C6,3D3
357C:  MOVFF  3CA,3D4
3580:  MOVLB  0
3582:  RCALL  33CC
....................       glcd_line(x1, y2, x2, y2, color); 
3584:  MOVFF  3C5,3D0
3588:  MOVFF  3C8,3D1
358C:  MOVFF  3C7,3D2
3590:  MOVFF  3C8,3D3
3594:  MOVFF  3CA,3D4
3598:  RCALL  33CC
....................       glcd_line(x1, y1, x1, y2, color); 
359A:  MOVFF  3C5,3D0
359E:  MOVFF  3C6,3D1
35A2:  MOVFF  3C5,3D2
35A6:  MOVFF  3C8,3D3
35AA:  MOVFF  3CA,3D4
35AE:  RCALL  33CC
....................       glcd_line(x2, y1, x2, y2, color); 
35B0:  MOVFF  3C7,3D0
35B4:  MOVFF  3C6,3D1
35B8:  MOVFF  3C7,3D2
35BC:  MOVFF  3C8,3D3
35C0:  MOVFF  3CA,3D4
35C4:  RCALL  33CC
35C6:  MOVLB  3
....................    } 
.................... } 
35C8:  MOVLB  0
35CA:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
3C3E:  MOVLB  3
3C40:  CLRF   xB8
....................    b = radius; 
3C42:  MOVFF  3B5,3B9
....................    P = 1 - radius; 
3C46:  MOVLW  01
3C48:  BSF    FD8.0
3C4A:  SUBFWB xB5,W
3C4C:  MOVWF  xBA
....................  
....................    do 
....................    { 
....................       if(fill) 
3C4E:  MOVF   xB6,F
3C50:  BZ    3D1C
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
3C52:  MOVF   xB8,W
3C54:  SUBWF  xB3,W
3C56:  MOVWF  xBB
3C58:  MOVF   xB9,W
3C5A:  ADDWF  xB4,W
3C5C:  MOVWF  xBC
3C5E:  MOVF   xB8,W
3C60:  ADDWF  xB3,W
3C62:  MOVWF  xBD
3C64:  MOVF   xB9,W
3C66:  ADDWF  xB4,W
3C68:  MOVWF  xBE
3C6A:  MOVFF  3BB,3D0
3C6E:  MOVFF  3BC,3D1
3C72:  MOVFF  3BD,3D2
3C76:  MOVWF  xD3
3C78:  MOVFF  3B7,3D4
3C7C:  MOVLB  0
3C7E:  CALL   33CC
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
3C82:  MOVLB  3
3C84:  MOVF   xB8,W
3C86:  SUBWF  xB3,W
3C88:  MOVWF  xBB
3C8A:  MOVF   xB9,W
3C8C:  SUBWF  xB4,W
3C8E:  MOVWF  xBC
3C90:  MOVF   xB8,W
3C92:  ADDWF  xB3,W
3C94:  MOVWF  xBD
3C96:  MOVF   xB9,W
3C98:  SUBWF  xB4,W
3C9A:  MOVWF  xBE
3C9C:  MOVFF  3BB,3D0
3CA0:  MOVFF  3BC,3D1
3CA4:  MOVFF  3BD,3D2
3CA8:  MOVWF  xD3
3CAA:  MOVFF  3B7,3D4
3CAE:  MOVLB  0
3CB0:  CALL   33CC
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
3CB4:  MOVLB  3
3CB6:  MOVF   xB9,W
3CB8:  SUBWF  xB3,W
3CBA:  MOVWF  xBB
3CBC:  MOVF   xB8,W
3CBE:  ADDWF  xB4,W
3CC0:  MOVWF  xBC
3CC2:  MOVF   xB9,W
3CC4:  ADDWF  xB3,W
3CC6:  MOVWF  xBD
3CC8:  MOVF   xB8,W
3CCA:  ADDWF  xB4,W
3CCC:  MOVWF  xBE
3CCE:  MOVFF  3BB,3D0
3CD2:  MOVFF  3BC,3D1
3CD6:  MOVFF  3BD,3D2
3CDA:  MOVWF  xD3
3CDC:  MOVFF  3B7,3D4
3CE0:  MOVLB  0
3CE2:  CALL   33CC
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
3CE6:  MOVLB  3
3CE8:  MOVF   xB9,W
3CEA:  SUBWF  xB3,W
3CEC:  MOVWF  xBB
3CEE:  MOVF   xB8,W
3CF0:  SUBWF  xB4,W
3CF2:  MOVWF  xBC
3CF4:  MOVF   xB9,W
3CF6:  ADDWF  xB3,W
3CF8:  MOVWF  xBD
3CFA:  MOVF   xB8,W
3CFC:  SUBWF  xB4,W
3CFE:  MOVWF  xBE
3D00:  MOVFF  3BB,3D0
3D04:  MOVFF  3BC,3D1
3D08:  MOVFF  3BD,3D2
3D0C:  MOVWF  xD3
3D0E:  MOVFF  3B7,3D4
3D12:  MOVLB  0
3D14:  CALL   33CC
....................       } 
....................       else 
3D18:  BRA    3E0A
3D1A:  MOVLB  3
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
3D1C:  MOVF   xB3,W
3D1E:  ADDWF  xB8,W
3D20:  MOVWF  xBB
3D22:  MOVF   xB4,W
3D24:  ADDWF  xB9,W
3D26:  MOVWF  xBC
3D28:  MOVFF  3BB,3E0
3D2C:  MOVWF  xE1
3D2E:  MOVFF  3B7,3E2
3D32:  MOVLB  0
3D34:  CALL   2F88
....................          glcd_pixel(b+x, a+y, color); 
3D38:  MOVLB  3
3D3A:  MOVF   xB3,W
3D3C:  ADDWF  xB9,W
3D3E:  MOVWF  xBB
3D40:  MOVF   xB4,W
3D42:  ADDWF  xB8,W
3D44:  MOVWF  xBC
3D46:  MOVFF  3BB,3E0
3D4A:  MOVWF  xE1
3D4C:  MOVFF  3B7,3E2
3D50:  MOVLB  0
3D52:  CALL   2F88
....................          glcd_pixel(x-a, b+y, color); 
3D56:  MOVLB  3
3D58:  MOVF   xB8,W
3D5A:  SUBWF  xB3,W
3D5C:  MOVWF  xBB
3D5E:  MOVF   xB4,W
3D60:  ADDWF  xB9,W
3D62:  MOVWF  xBC
3D64:  MOVFF  3BB,3E0
3D68:  MOVWF  xE1
3D6A:  MOVFF  3B7,3E2
3D6E:  MOVLB  0
3D70:  CALL   2F88
....................          glcd_pixel(x-b, a+y, color); 
3D74:  MOVLB  3
3D76:  MOVF   xB9,W
3D78:  SUBWF  xB3,W
3D7A:  MOVWF  xBB
3D7C:  MOVF   xB4,W
3D7E:  ADDWF  xB8,W
3D80:  MOVWF  xBC
3D82:  MOVFF  3BB,3E0
3D86:  MOVWF  xE1
3D88:  MOVFF  3B7,3E2
3D8C:  MOVLB  0
3D8E:  CALL   2F88
....................          glcd_pixel(b+x, y-a, color); 
3D92:  MOVLB  3
3D94:  MOVF   xB3,W
3D96:  ADDWF  xB9,W
3D98:  MOVWF  xBB
3D9A:  MOVF   xB8,W
3D9C:  SUBWF  xB4,W
3D9E:  MOVWF  xBC
3DA0:  MOVFF  3BB,3E0
3DA4:  MOVWF  xE1
3DA6:  MOVFF  3B7,3E2
3DAA:  MOVLB  0
3DAC:  CALL   2F88
....................          glcd_pixel(a+x, y-b, color); 
3DB0:  MOVLB  3
3DB2:  MOVF   xB3,W
3DB4:  ADDWF  xB8,W
3DB6:  MOVWF  xBB
3DB8:  MOVF   xB9,W
3DBA:  SUBWF  xB4,W
3DBC:  MOVWF  xBC
3DBE:  MOVFF  3BB,3E0
3DC2:  MOVWF  xE1
3DC4:  MOVFF  3B7,3E2
3DC8:  MOVLB  0
3DCA:  CALL   2F88
....................          glcd_pixel(x-a, y-b, color); 
3DCE:  MOVLB  3
3DD0:  MOVF   xB8,W
3DD2:  SUBWF  xB3,W
3DD4:  MOVWF  xBB
3DD6:  MOVF   xB9,W
3DD8:  SUBWF  xB4,W
3DDA:  MOVWF  xBC
3DDC:  MOVFF  3BB,3E0
3DE0:  MOVWF  xE1
3DE2:  MOVFF  3B7,3E2
3DE6:  MOVLB  0
3DE8:  CALL   2F88
....................          glcd_pixel(x-b, y-a, color); 
3DEC:  MOVLB  3
3DEE:  MOVF   xB9,W
3DF0:  SUBWF  xB3,W
3DF2:  MOVWF  xBB
3DF4:  MOVF   xB8,W
3DF6:  SUBWF  xB4,W
3DF8:  MOVWF  xBC
3DFA:  MOVFF  3BB,3E0
3DFE:  MOVWF  xE1
3E00:  MOVFF  3B7,3E2
3E04:  MOVLB  0
3E06:  CALL   2F88
....................       } 
....................  
....................       if(P < 0) 
3E0A:  MOVLB  3
3E0C:  BTFSC  xBA.7
3E0E:  BRA    3E12
3E10:  BRA    3E2E
....................          P += 3 + 2 * a++; 
3E12:  MOVF   xB8,W
3E14:  INCF   xB8,F
3E16:  MOVWF  xBB
3E18:  MOVLW  02
3E1A:  MOVWF  xBC
3E1C:  MOVFF  3BB,3BD
3E20:  MOVLB  0
3E22:  RCALL  3BF0
3E24:  MOVF   01,W
3E26:  ADDLW  03
3E28:  MOVLB  3
3E2A:  ADDWF  xBA,F
....................       else 
3E2C:  BRA    3E50
....................          P += 5 + 2 * (a++ - b--); 
3E2E:  MOVF   xB8,W
3E30:  INCF   xB8,F
3E32:  MOVWF  xBB
3E34:  MOVF   xB9,W
3E36:  DECF   xB9,F
3E38:  SUBWF  xBB,W
3E3A:  MOVWF  xBB
3E3C:  MOVLW  02
3E3E:  MOVWF  xBC
3E40:  MOVFF  3BB,3BD
3E44:  MOVLB  0
3E46:  RCALL  3BF0
3E48:  MOVF   01,W
3E4A:  ADDLW  05
3E4C:  MOVLB  3
3E4E:  ADDWF  xBA,F
....................     } while(a <= b); 
3E50:  MOVF   xB8,W
3E52:  XORLW  80
3E54:  MOVWF  00
3E56:  MOVF   xB9,W
3E58:  XORLW  80
3E5A:  SUBWF  00,W
3E5C:  BTFSC  FD8.2
3E5E:  BRA    3C4E
3E60:  BTFSS  FD8.0
3E62:  BRA    3C4E
.................... } 
3E64:  MOVLB  0
3E66:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
306A:  MOVFF  3C6,03
306E:  MOVLB  3
3070:  MOVFF  3C5,FE9
3074:  MOVFF  3C6,FEA
3078:  MOVF   FEF,F
307A:  BTFSC  FD8.2
307C:  BRA    321E
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
307E:  MOVFF  3C6,03
3082:  MOVFF  3C5,FE9
3086:  MOVFF  3C6,FEA
308A:  MOVF   FEF,W
308C:  SUBLW  52
308E:  BNC   30DE
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
3090:  MOVFF  3C6,03
3094:  MOVFF  3C5,FE9
3098:  MOVFF  3C6,FEA
309C:  MOVLW  20
309E:  SUBWF  FEF,W
30A0:  MULLW  05
30A2:  MOVF   FF3,W
30A4:  CLRF   03
30A6:  MOVWF  xD2
30A8:  MOVLW  03
30AA:  MOVWF  FEA
30AC:  MOVLW  CD
30AE:  MOVWF  FE9
30B0:  CLRF   xD6
30B2:  MOVFF  3D2,3D5
30B6:  MOVFF  FF2,3D3
30BA:  BCF    FF2.7
30BC:  MOVLW  05
30BE:  MOVWF  01
30C0:  CLRF   FF7
30C2:  MOVF   xD2,W
30C4:  MOVLB  0
30C6:  CALL   00A2
30CA:  TBLRD*-
30CC:  TBLRD*+
30CE:  MOVFF  FF5,FEE
30D2:  DECFSZ 01,F
30D4:  BRA    30CC
30D6:  MOVLB  3
30D8:  BTFSC  xD3.7
30DA:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
30DC:  BRA    3148
30DE:  MOVFF  3C6,03
30E2:  MOVFF  3C5,FE9
30E6:  MOVFF  3C6,FEA
30EA:  MOVF   FEF,W
30EC:  SUBLW  7E
30EE:  BNC   313E
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
30F0:  MOVFF  3C6,03
30F4:  MOVFF  3C5,FE9
30F8:  MOVFF  3C6,FEA
30FC:  MOVLW  53
30FE:  SUBWF  FEF,W
3100:  MULLW  05
3102:  MOVF   FF3,W
3104:  CLRF   03
3106:  MOVWF  xD2
3108:  MOVLW  03
310A:  MOVWF  FEA
310C:  MOVLW  CD
310E:  MOVWF  FE9
3110:  CLRF   xD6
3112:  MOVFF  3D2,3D5
3116:  MOVFF  FF2,3D3
311A:  BCF    FF2.7
311C:  MOVLW  05
311E:  MOVWF  01
3120:  CLRF   FF7
3122:  MOVF   xD2,W
3124:  MOVLB  0
3126:  CALL   01BC
312A:  TBLRD*-
312C:  TBLRD*+
312E:  MOVFF  FF5,FEE
3132:  DECFSZ 01,F
3134:  BRA    312C
3136:  MOVLB  3
3138:  BTFSC  xD3.7
313A:  BSF    FF2.7
....................       else 
313C:  BRA    3148
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
313E:  CLRF   xCD
3140:  CLRF   xCE
3142:  CLRF   xCF
3144:  CLRF   xD0
3146:  CLRF   xD1
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
3148:  MOVFF  3C6,03
314C:  MOVF   xC5,W
314E:  MOVWF  FE9
3150:  MOVFF  03,FEA
3154:  MOVF   FEF,W
3156:  XORLW  0A
3158:  MOVLB  0
315A:  BZ    3162
315C:  XORLW  07
315E:  BZ    3172
3160:  BRA    3178
....................          case '\n': 
....................             y += 7*size + 1; 
3162:  MOVLB  3
3164:  MOVF   xC7,W
3166:  MULLW  07
3168:  MOVF   FF3,W
316A:  ADDLW  01
316C:  ADDWF  xC4,F
....................             continue; 
316E:  BRA    3210
3170:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
3172:  MOVLB  3
3174:  CLRF   xC3
....................             continue; 
3176:  BRA    3210
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
3178:  MOVLB  3
317A:  MOVF   xC7,W
317C:  MULLW  05
317E:  MOVF   FF3,W
3180:  ADDWF  xC3,W
3182:  SUBLW  7F
3184:  BC    3192
....................       { 
....................          x = 0;                           // Set x at far left position 
3186:  CLRF   xC3
....................          y += 7*size + 1;                 // Set y at next position down 
3188:  MOVF   xC7,W
318A:  MULLW  07
318C:  MOVF   FF3,W
318E:  ADDLW  01
3190:  ADDWF  xC4,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
3192:  CLRF   xC9
3194:  MOVF   xC9,W
3196:  SUBLW  04
3198:  BNC   3210
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
319A:  CLRF   xCA
319C:  MOVF   xCA,W
319E:  SUBLW  06
31A0:  BNC   3208
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
31A2:  CLRF   03
31A4:  MOVF   xC9,W
31A6:  ADDLW  CD
31A8:  MOVWF  FE9
31AA:  MOVLW  03
31AC:  ADDWFC 03,W
31AE:  MOVWF  FEA
31B0:  MOVFF  FEF,3D2
31B4:  MOVFF  3D2,00
31B8:  MOVF   xCA,W
31BA:  MOVWF  01
31BC:  BZ    31C6
31BE:  BCF    FD8.0
31C0:  RRCF   00,F
31C2:  DECFSZ 01,F
31C4:  BRA    31BE
31C6:  BTFSS  00.0
31C8:  BRA    3204
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
31CA:  CLRF   xCB
31CC:  MOVF   xC7,W
31CE:  SUBWF  xCB,W
31D0:  BC    3204
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
31D2:  CLRF   xCC
31D4:  MOVF   xC7,W
31D6:  SUBWF  xCC,W
31D8:  BC    3200
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
31DA:  MOVF   xCC,W
31DC:  ADDWF  xC3,W
31DE:  MOVWF  xD2
31E0:  MOVF   xCA,W
31E2:  MULWF  xC7
31E4:  MOVF   FF3,W
31E6:  ADDWF  xC4,W
31E8:  ADDWF  xCB,W
31EA:  MOVWF  xD3
31EC:  MOVFF  3D2,3E0
31F0:  MOVWF  xE1
31F2:  MOVFF  3C8,3E2
31F6:  MOVLB  0
31F8:  RCALL  2F88
....................                   } 
31FA:  MOVLB  3
31FC:  INCF   xCC,F
31FE:  BRA    31D4
....................                } 
3200:  INCF   xCB,F
3202:  BRA    31CC
....................             } 
....................          } 
3204:  INCF   xCA,F
3206:  BRA    319C
....................       } 
3208:  INCF   xC9,F
320A:  MOVF   xC7,W
320C:  ADDWF  xC3,F
320E:  BRA    3194
....................    } 
3210:  INCF   xC5,F
3212:  BTFSC  FD8.2
3214:  INCF   xC6,F
3216:  INCF   xC3,F
3218:  MOVLB  0
321A:  BRA    306A
321C:  MOVLB  3
.................... } 
321E:  MOVLB  0
3220:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A1) 
.................... #define   DOWN          input(PIN_A2) 
.................... #define   RIGHT         input(PIN_A3) 
.................... #define   LEFT          input(PIN_A5) 
.................... #define   STOP          !input(PIN_E0) 
.................... //#define   PRESOSTATO    input(PIN_E1) 
.................... #define   PUERTA        !input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Camara_OUT_on     output_bit(PIN_C0,1) 
.................... #define   Camara_OUT_off    output_bit(PIN_C0,0) 
.................... #define   Resistencia_on    output_bit(PIN_C1,1) 
.................... #define   Resistencia_off   output_bit(PIN_C1,0) 
.................... #define   Camara_IN_on      output_bit(PIN_C2,1) 
.................... #define   Camara_IN_off     output_bit(PIN_C2,0) 
.................... #define   Piloto_Stop_on    output_bit(PIN_D1,1) 
.................... #define   Piloto_Stop_off   output_bit(PIN_D1,0) 
.................... #define   Piloto_Fc_on      output_bit(PIN_D0,1) 
.................... #define   Piloto_Fc_off     output_bit(PIN_D0,0) 
.................... #define   Piloto_Puerta_on  output_bit(PIN_D2,1) 
.................... #define   Piloto_Puerta_off output_bit(PIN_D2,0) 
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
3E70:  CLRF   03
3E72:  MOVLB  3
3E74:  MOVF   xB3,W
3E76:  ADDLW  70
3E78:  MOVWF  FE9
3E7A:  MOVLW  0F
3E7C:  ADDWFC 03,W
3E7E:  MOVWF  FEA
3E80:  MOVF   FEF,F
3E82:  BZ    3E9E
3E84:  MOVF   xB3,W
3E86:  MULLW  08
3E88:  MOVF   FF3,W
3E8A:  CLRF   xB5
3E8C:  MOVWF  xB4
3E8E:  MOVWF  FE9
3E90:  MOVLW  04
3E92:  ADDWF  xB5,W
3E94:  MOVWF  FEA
3E96:  MOVFF  FEF,3B4
3E9A:  BTFSS  xB4.7
3E9C:  BRA    3EA2
3E9E:  MOVLW  00
3EA0:  BRA    3EA4
3EA2:  MOVLW  01
3EA4:  MOVWF  01
.................... } 
3EA6:  MOVLB  0
3EA8:  GOTO   6EAE (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
206E:  CLRF   03
2070:  MOVLB  3
2072:  MOVF   xF1,W
2074:  ADDLW  70
2076:  MOVWF  FE9
2078:  MOVLW  0F
207A:  ADDWFC 03,W
207C:  MOVWF  FEA
207E:  MOVF   FEF,F
2080:  BZ    20A6
2082:  MOVF   xF1,W
2084:  MULLW  08
2086:  MOVF   FF3,W
2088:  CLRF   xF3
208A:  MOVWF  xF2
208C:  MOVLW  04
208E:  ADDWF  xF2,F
2090:  MOVLW  00
2092:  ADDWFC xF3,F
2094:  MOVFF  3F2,FE9
2098:  MOVLW  04
209A:  ADDWF  xF3,W
209C:  MOVWF  FEA
209E:  MOVFF  FEF,3F2
20A2:  BTFSS  xF2.7
20A4:  BRA    20AA
20A6:  MOVLW  00
20A8:  BRA    20AC
20AA:  MOVLW  01
20AC:  MOVWF  01
.................... } 
20AE:  MOVLB  0
20B0:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
2D46:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
2D48:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
2D4A:  MOVLW  08
2D4C:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
2D4E:  MOVF   F94,W
2D50:  IORLW  30
2D52:  MOVLB  3
2D54:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
2D56:  CLRF   1C
2D58:  CLRF   16
2D5A:  BTFSC  FF2.7
2D5C:  BSF    16.7
2D5E:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
2D60:  MOVLB  0
2D62:  CALL   1966
2D66:  BTFSC  16.7
2D68:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
2D6A:  GOTO   2D70 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
2D74:  CLRF   16
2D76:  BTFSC  FF2.7
2D78:  BSF    16.7
2D7A:  BCF    FF2.7
....................    usb_token_reset(); 
2D7C:  CALL   1966
2D80:  BTFSC  16.7
2D82:  BSF    FF2.7
....................    UCON = 0; 
2D84:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
2D86:  MOVLW  14
2D88:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
2D8A:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
2D8C:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
2D8E:  MOVLW  01
2D90:  MOVWF  1C
.................... } 
2D92:  GOTO   2D9C (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
2D6E:  BRA    2D46
.................... } 
2D70:  GOTO   2DBA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
2D96:  BTFSC  F6D.3
2D98:  BRA    2D9C
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
2D9A:  BRA    2D74
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
2D9C:  DECFSZ 1C,W
2D9E:  BRA    2DB6
2DA0:  BTFSC  F6D.5
2DA2:  BRA    2DB6
....................    { 
....................       UIR=0; 
2DA4:  CLRF   F68
....................       UIE=0; 
2DA6:  CLRF   F69
....................       enable_interrupts(INT_USB); 
2DA8:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
2DAA:  MOVLW  C0
2DAC:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
2DAE:  MOVLW  11
2DB0:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
2DB2:  MOVLW  02
2DB4:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
2DB6:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
2DB8:  BRA    2D6E
....................  
....................    do  
....................    { 
....................       usb_task(); 
2DBA:  RCALL  2D96
....................    } while (usb_state != USB_STATE_POWERED); 
2DBC:  MOVF   1C,W
2DBE:  SUBLW  02
2DC0:  BNZ   2DBA
.................... } 
2DC2:  GOTO   55A8 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
20B2:  MOVFF  3EC,3F1
20B6:  RCALL  206E
20B8:  MOVF   01,F
20BA:  BZ    2184
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
20BC:  MOVLB  3
20BE:  MOVF   xEC,W
20C0:  MULLW  08
20C2:  MOVF   FF3,W
20C4:  CLRF   xF2
20C6:  MOVWF  xF1
20C8:  MOVLW  04
20CA:  ADDWF  xF1,F
20CC:  MOVLW  00
20CE:  ADDWFC xF2,F
20D0:  MOVLW  01
20D2:  ADDWF  xF1,W
20D4:  MOVWF  01
20D6:  MOVLW  00
20D8:  ADDWFC xF2,W
20DA:  MOVWF  03
20DC:  MOVFF  01,FE9
20E0:  MOVLW  04
20E2:  ADDWF  03,W
20E4:  MOVWF  FEA
20E6:  MOVFF  3ED,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
20EA:  MOVF   xEF,W
20EC:  SUBLW  02
20EE:  BNZ   211E
....................       { 
....................          i = EP_BDxST_I(endpoint); 
20F0:  MOVF   xEC,W
20F2:  MULLW  08
20F4:  MOVF   FF3,W
20F6:  CLRF   xF2
20F8:  MOVWF  xF1
20FA:  MOVLW  04
20FC:  ADDWF  xF1,F
20FE:  MOVLW  00
2100:  ADDWFC xF2,F
2102:  MOVFF  3F1,FE9
2106:  MOVLW  04
2108:  ADDWF  xF2,W
210A:  MOVWF  FEA
210C:  MOVFF  FEF,3F0
....................          if (bit_test(i,6)) 
2110:  BTFSS  xF0.6
2112:  BRA    2118
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
2114:  CLRF   xEF
....................          else 
2116:  BRA    211C
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
2118:  MOVLW  01
211A:  MOVWF  xEF
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
211C:  BRA    2144
211E:  MOVF   xEF,W
2120:  SUBLW  04
2122:  BNZ   2144
....................       { 
....................          i = EP_BDxST_O(endpoint); 
2124:  MOVF   xEC,W
2126:  MULLW  08
2128:  MOVF   FF3,W
212A:  CLRF   xF2
212C:  MOVWF  FE9
212E:  MOVLW  04
2130:  ADDWF  xF2,W
2132:  MOVWF  FEA
2134:  MOVFF  FEF,3F0
....................          if (bit_test(i,6)) 
2138:  BTFSS  xF0.6
213A:  BRA    2142
....................             tgl = USB_DTS_DATA1; 
213C:  MOVLW  01
213E:  MOVWF  xEF
....................          else 
2140:  BRA    2144
....................             tgl = USB_DTS_DATA0; 
2142:  CLRF   xEF
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
2144:  DECFSZ xEF,W
2146:  BRA    214E
....................          i=0xC8;  //DATA1, UOWN 
2148:  MOVLW  C8
214A:  MOVWF  xF0
....................       else //if (tgl == USB_DTS_DATA0)  
214C:  BRA    2152
....................          i=0x88; //DATA0, UOWN 
214E:  MOVLW  88
2150:  MOVWF  xF0
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
2152:  BTFSC  xEE.0
2154:  BSF    xF0.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
2156:  BTFSC  xEE.1
2158:  BSF    xF0.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
215A:  MOVF   xEC,W
215C:  MULLW  08
215E:  MOVF   FF3,W
2160:  CLRF   xF2
2162:  MOVWF  xF1
2164:  MOVLW  04
2166:  ADDWF  xF1,F
2168:  MOVLW  00
216A:  ADDWFC xF2,F
216C:  MOVFF  3F1,FE9
2170:  MOVLW  04
2172:  ADDWF  xF2,W
2174:  MOVWF  FEA
2176:  MOVFF  3F0,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
217A:  MOVLW  01
217C:  MOVWF  01
217E:  BRA    218A
....................    } 
....................    else  
2180:  BRA    2182
2182:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
2184:  MOVLW  00
2186:  MOVWF  01
2188:  MOVLB  3
.................... } 
218A:  MOVLB  0
218C:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
40F2:  CLRF   16
40F4:  BTFSC  FF2.7
40F6:  BSF    16.7
40F8:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
40FA:  MOVFF  3B3,3F1
40FE:  CALL   206E
4102:  BTFSC  16.7
4104:  BSF    FF2.7
4106:  MOVF   01,F
4108:  BZ    419A
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
410A:  MOVLB  3
410C:  MOVF   xB3,W
410E:  MULLW  08
4110:  MOVF   FF3,W
4112:  CLRF   xBC
4114:  MOVWF  xBB
4116:  MOVLW  04
4118:  ADDWF  xBB,F
411A:  MOVLW  00
411C:  ADDWFC xBC,F
411E:  MOVLW  02
4120:  ADDWF  xBB,W
4122:  MOVWF  01
4124:  MOVLW  00
4126:  ADDWFC xBC,W
4128:  MOVWF  03
412A:  MOVFF  01,FE9
412E:  MOVLW  04
4130:  ADDWF  03,W
4132:  MOVWF  FEA
4134:  MOVFF  FEC,03
4138:  MOVF   FED,F
413A:  MOVFF  FEF,3B9
413E:  MOVFF  03,3BA
....................       memcpy(buff_add, ptr, len);      
4142:  MOVFF  3BA,FEA
4146:  MOVFF  3B9,FE9
414A:  MOVFF  3B5,FE2
414E:  MOVFF  3B4,FE1
4152:  MOVFF  3B7,02
4156:  MOVFF  3B6,01
415A:  MOVF   01,F
415C:  BZ    4162
415E:  INCF   02,F
4160:  BRA    4166
4162:  MOVF   02,F
4164:  BZ    4172
4166:  MOVFF  FE6,FEE
416A:  DECFSZ 01,F
416C:  BRA    4166
416E:  DECFSZ 02,F
4170:  BRA    4166
4172:  CLRF   16
4174:  BTFSC  FF2.7
4176:  BSF    16.7
4178:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
417A:  MOVFF  3B3,3EC
417E:  MOVFF  3B7,3EE
4182:  MOVFF  3B6,3ED
4186:  MOVFF  3B8,3EF
418A:  MOVLB  0
418C:  CALL   20B2
4190:  BTFSC  16.7
4192:  BSF    FF2.7
4194:  MOVF   01,W
4196:  BRA    419E
....................    } 
....................    else  
4198:  BRA    419A
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
419A:  MOVLW  00
419C:  MOVWF  01
.................... } 
419E:  GOTO   7202 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
1FA4:  MOVLB  3
1FA6:  MOVF   xEC,W
1FA8:  MULLW  08
1FAA:  MOVF   FF3,W
1FAC:  CLRF   xF2
1FAE:  MOVWF  FE9
1FB0:  MOVLW  04
1FB2:  ADDWF  xF2,W
1FB4:  MOVWF  FEA
1FB6:  MOVFF  FEF,3EE
....................    if (tgl == USB_DTS_TOGGLE)  
1FBA:  MOVF   xED,W
1FBC:  SUBLW  02
1FBE:  BNZ   1FCC
....................    { 
....................       if (bit_test(i,6)) 
1FC0:  BTFSS  xEE.6
1FC2:  BRA    1FC8
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
1FC4:  CLRF   xED
....................       else 
1FC6:  BRA    1FCC
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
1FC8:  MOVLW  01
1FCA:  MOVWF  xED
....................    } 
....................    if (tgl == USB_DTS_STALL)  
1FCC:  MOVF   xED,W
1FCE:  SUBLW  03
1FD0:  BNZ   1FF8
....................    { 
....................       i = 0x84; 
1FD2:  MOVLW  84
1FD4:  MOVWF  xEE
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
1FD6:  MOVF   xEC,W
1FD8:  MULLW  08
1FDA:  MOVF   FF3,W
1FDC:  CLRF   xF2
1FDE:  MOVWF  xF1
1FE0:  MOVLW  04
1FE2:  ADDWF  xF1,F
1FE4:  MOVLW  00
1FE6:  ADDWFC xF2,F
1FE8:  MOVFF  3F1,FE9
1FEC:  MOVLW  04
1FEE:  ADDWF  xF2,W
1FF0:  MOVWF  FEA
1FF2:  MOVLW  84
1FF4:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
1FF6:  BRA    2006
1FF8:  DECFSZ xED,W
1FFA:  BRA    2002
....................       i = 0xC8;  //DATA1, UOWN 
1FFC:  MOVLW  C8
1FFE:  MOVWF  xEE
....................    else //if (tgl == USB_DTS_DATA0)  
2000:  BRA    2006
....................       i = 0x88; //DATA0, UOWN 
2002:  MOVLW  88
2004:  MOVWF  xEE
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
2006:  BCF    FD8.0
2008:  RLCF   xEC,W
200A:  CLRF   03
200C:  MOVFF  FF2,3F1
2010:  BCF    FF2.7
2012:  MOVLB  0
2014:  CALL   174A
2018:  TBLRD*+
201A:  MOVFF  FF5,03
201E:  MOVLB  3
2020:  BTFSC  xF1.7
2022:  BSF    FF2.7
2024:  MOVWF  xEF
2026:  MOVFF  03,3F0
....................    EP_BDxCNT_O(endpoint) = len; 
202A:  MOVF   xEC,W
202C:  MULLW  08
202E:  MOVF   FF3,W
2030:  CLRF   xF2
2032:  MOVWF  xF1
2034:  MOVLW  01
2036:  ADDWF  xF1,W
2038:  MOVWF  01
203A:  MOVLW  00
203C:  ADDWFC xF2,W
203E:  MOVWF  03
2040:  MOVFF  01,FE9
2044:  MOVLW  04
2046:  ADDWF  03,W
2048:  MOVWF  FEA
204A:  MOVFF  3EF,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
204E:  BTFSC  xF0.0
2050:  BSF    xEE.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
2052:  BTFSC  xF0.1
2054:  BSF    xEE.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
2056:  MOVF   xEC,W
2058:  MULLW  08
205A:  MOVF   FF3,W
205C:  CLRF   xF2
205E:  MOVWF  FE9
2060:  MOVLW  04
2062:  ADDWF  xF2,W
2064:  MOVWF  FEA
2066:  MOVFF  3EE,FEF
.................... } 
206A:  MOVLB  0
206C:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
3EAC:  MOVLB  3
3EAE:  MOVF   xB8,W
3EB0:  MULLW  08
3EB2:  MOVF   FF3,W
3EB4:  CLRF   xC3
3EB6:  MOVWF  xC2
3EB8:  MOVLW  02
3EBA:  ADDWF  xC2,W
3EBC:  MOVWF  01
3EBE:  MOVLW  00
3EC0:  ADDWFC xC3,W
3EC2:  MOVWF  03
3EC4:  MOVFF  01,FE9
3EC8:  MOVLW  04
3ECA:  ADDWF  03,W
3ECC:  MOVWF  FEA
3ECE:  MOVFF  FEC,03
3ED2:  MOVF   FED,F
3ED4:  MOVFF  FEF,3BD
3ED8:  MOVFF  03,3BE
....................    i = EP_BDxCNT_O(endpoint); 
3EDC:  MOVF   xB8,W
3EDE:  MULLW  08
3EE0:  MOVF   FF3,W
3EE2:  CLRF   xC3
3EE4:  MOVWF  xC2
3EE6:  MOVLW  01
3EE8:  ADDWF  xC2,W
3EEA:  MOVWF  01
3EEC:  MOVLW  00
3EEE:  ADDWFC xC3,W
3EF0:  MOVWF  03
3EF2:  MOVFF  01,FE9
3EF6:  MOVLW  04
3EF8:  ADDWF  03,W
3EFA:  MOVWF  FEA
3EFC:  MOVF   FEF,W
3EFE:  CLRF   03
3F00:  MOVWF  xC0
3F02:  MOVFF  03,3C1
....................    st = EP_BDxST_O(endpoint); 
3F06:  MOVF   xB8,W
3F08:  MULLW  08
3F0A:  MOVF   FF3,W
3F0C:  CLRF   xC3
3F0E:  MOVWF  FE9
3F10:  MOVLW  04
3F12:  ADDWF  xC3,W
3F14:  MOVWF  FEA
3F16:  MOVFF  FEF,3BF
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
3F1A:  BTFSC  xBF.0
3F1C:  BSF    xC1.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
3F1E:  BTFSC  xBF.1
3F20:  BSF    xC1.1
....................  
....................    if (i < max) {max = i;} 
3F22:  MOVF   xC1,W
3F24:  SUBWF  xBC,W
3F26:  BNC   3F38
3F28:  BNZ   3F30
3F2A:  MOVF   xBB,W
3F2C:  SUBWF  xC0,W
3F2E:  BC    3F38
3F30:  MOVFF  3C1,3BC
3F34:  MOVFF  3C0,3BB
....................     
....................    memcpy(ptr, al ,max); 
3F38:  MOVFF  3BA,FEA
3F3C:  MOVFF  3B9,FE9
3F40:  MOVFF  3BE,FE2
3F44:  MOVFF  3BD,FE1
3F48:  MOVFF  3BC,02
3F4C:  MOVFF  3BB,01
3F50:  MOVF   01,F
3F52:  BZ    3F58
3F54:  INCF   02,F
3F56:  BRA    3F5C
3F58:  MOVF   02,F
3F5A:  BZ    3F68
3F5C:  MOVFF  FE6,FEE
3F60:  DECFSZ 01,F
3F62:  BRA    3F5C
3F64:  DECFSZ 02,F
3F66:  BRA    3F5C
....................  
....................    return(max); 
3F68:  MOVFF  3BB,01
3F6C:  MOVFF  3BC,02
.................... } 
3F70:  MOVLB  0
3F72:  GOTO   3F8C (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
3F76:  MOVFF  3B3,3B8
3F7A:  MOVFF  3B5,3BA
3F7E:  MOVFF  3B4,3B9
3F82:  MOVFF  3B7,3BC
3F86:  MOVFF  3B6,3BB
3F8A:  BRA    3EAC
3F8C:  MOVFF  02,3B7
3F90:  MOVFF  01,3B6
3F94:  CLRF   16
3F96:  BTFSC  FF2.7
3F98:  BSF    16.7
3F9A:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
3F9C:  MOVFF  3B3,3EC
3FA0:  MOVLW  02
3FA2:  MOVLB  3
3FA4:  MOVWF  xED
3FA6:  MOVLB  0
3FA8:  CALL   1FA4
3FAC:  BTFSC  16.7
3FAE:  BSF    FF2.7
....................  
....................    return(max); 
3FB0:  MOVLB  3
3FB2:  MOVFF  3B6,01
3FB6:  MOVFF  3B7,02
.................... } 
3FBA:  MOVLB  0
3FBC:  GOTO   6ECC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1E6A:  MOVLB  3
1E6C:  BCF    xED.0
1E6E:  BTFSC  xEC.7
1E70:  BSF    xED.0
....................    endpoint &= 0x7F; 
1E72:  BCF    xEC.7
....................     
....................    if (direction)  
1E74:  BTFSS  xED.0
1E76:  BRA    1E9A
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
1E78:  MOVF   xEC,W
1E7A:  MULLW  08
1E7C:  MOVF   FF3,W
1E7E:  CLRF   xEF
1E80:  MOVWF  xEE
1E82:  MOVLW  04
1E84:  ADDWF  xEE,F
1E86:  MOVLW  00
1E88:  ADDWFC xEF,F
1E8A:  MOVFF  3EE,FE9
1E8E:  MOVLW  04
1E90:  ADDWF  xEF,W
1E92:  MOVWF  FEA
1E94:  MOVLW  84
1E96:  MOVWF  FEF
....................    } 
....................    else  
1E98:  BRA    1EAE
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
1E9A:  MOVF   xEC,W
1E9C:  MULLW  08
1E9E:  MOVF   FF3,W
1EA0:  CLRF   xEF
1EA2:  MOVWF  FE9
1EA4:  MOVLW  04
1EA6:  ADDWF  xEF,W
1EA8:  MOVWF  FEA
1EAA:  MOVLW  84
1EAC:  MOVWF  FEF
....................    } 
.................... } 
1EAE:  MOVLB  0
1EB0:  GOTO   1F42 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1E22:  MOVLB  3
1E24:  BCF    xED.0
1E26:  BTFSC  xEC.7
1E28:  BSF    xED.0
....................    endpoint &= 0x7F; 
1E2A:  BCF    xEC.7
....................     
....................    if (direction)  
1E2C:  BTFSS  xED.0
1E2E:  BRA    1E52
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
1E30:  MOVF   xEC,W
1E32:  MULLW  08
1E34:  MOVF   FF3,W
1E36:  CLRF   xEF
1E38:  MOVWF  xEE
1E3A:  MOVLW  04
1E3C:  ADDWF  xEE,F
1E3E:  MOVLW  00
1E40:  ADDWFC xEF,F
1E42:  MOVFF  3EE,FE9
1E46:  MOVLW  04
1E48:  ADDWF  xEF,W
1E4A:  MOVWF  FEA
1E4C:  MOVLW  88
1E4E:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
1E50:  BRA    1E64
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
1E52:  MOVF   xEC,W
1E54:  MULLW  08
1E56:  MOVF   FF3,W
1E58:  CLRF   xEF
1E5A:  MOVWF  FE9
1E5C:  MOVLW  04
1E5E:  ADDWF  xEF,W
1E60:  MOVWF  FEA
1E62:  CLRF   FEF
....................    } 
.................... } 
1E64:  MOVLB  0
1E66:  GOTO   1F32 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1EB4:  MOVLB  3
1EB6:  BCF    xED.0
1EB8:  BTFSC  xEC.7
1EBA:  BSF    xED.0
....................    endpoint &= 0x7F; 
1EBC:  BCF    xEC.7
....................     
....................    if (direction)  
1EBE:  BTFSS  xED.0
1EC0:  BRA    1EE4
....................    { 
....................       st=EP_BDxST_I(endpoint); 
1EC2:  MOVF   xEC,W
1EC4:  MULLW  08
1EC6:  MOVF   FF3,W
1EC8:  CLRF   xF0
1ECA:  MOVWF  xEF
1ECC:  MOVLW  04
1ECE:  ADDWF  xEF,F
1ED0:  MOVLW  00
1ED2:  ADDWFC xF0,F
1ED4:  MOVFF  3EF,FE9
1ED8:  MOVLW  04
1EDA:  ADDWF  xF0,W
1EDC:  MOVWF  FEA
1EDE:  MOVFF  FEF,3EE
....................    } 
....................    else  
1EE2:  BRA    1EF8
....................    { 
....................       st=EP_BDxST_O(endpoint); 
1EE4:  MOVF   xEC,W
1EE6:  MULLW  08
1EE8:  MOVF   FF3,W
1EEA:  CLRF   xF0
1EEC:  MOVWF  FE9
1EEE:  MOVLW  04
1EF0:  ADDWF  xF0,W
1EF2:  MOVWF  FEA
1EF4:  MOVFF  FEF,3EE
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
1EF8:  BTFSS  xEE.7
1EFA:  BRA    1F00
1EFC:  BTFSC  xEE.2
1EFE:  BRA    1F04
1F00:  MOVLW  00
1F02:  BRA    1F06
1F04:  MOVLW  01
1F06:  MOVWF  01
.................... } 
1F08:  MOVLB  0
1F0A:  GOTO   1F5A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
2198:  MOVFF  3ED,F6E
....................     
....................    if (address)  
219C:  MOVLB  3
219E:  MOVF   xED,F
21A0:  BZ    21A8
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
21A2:  MOVLW  04
21A4:  MOVWF  1C
....................    } 
....................    else  
21A6:  BRA    21AC
....................    { 
....................       usb_state = USB_STATE_POWERED; 
21A8:  MOVLW  02
21AA:  MOVWF  1C
....................    } 
.................... } 
21AC:  MOVLB  0
21AE:  GOTO   21BC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
1AEE:  MOVLB  3
1AF0:  MOVF   xEC,F
1AF2:  BNZ   1B00
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
1AF4:  MOVLW  04
1AF6:  MOVWF  1C
....................       usb_disable_endpoints(); 
1AF8:  MOVLB  0
1AFA:  RCALL  1948
....................    } 
....................    else  
1AFC:  BRA    1CBA
1AFE:  MOVLB  3
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
1B00:  MOVLW  05
1B02:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
1B04:  MOVLW  04
1B06:  MOVWF  xEF
1B08:  MOVLW  90
1B0A:  MOVWF  xEE
....................       for (en=1; en<USB_NUM_UEP; en++)  
1B0C:  MOVLW  01
1B0E:  MOVWF  xED
1B10:  MOVF   xED,W
1B12:  SUBLW  0F
1B14:  BTFSS  FD8.0
1B16:  BRA    1CBA
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
1B18:  MOVFF  3ED,3F5
1B1C:  MOVLB  0
1B1E:  RCALL  18F4
....................          new_uep = 0; 
1B20:  MOVLB  3
1B22:  CLRF   xF0
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
1B24:  CLRF   03
1B26:  MOVF   xED,W
1B28:  MOVFF  FF2,3F4
1B2C:  BCF    FF2.7
1B2E:  MOVLB  0
1B30:  RCALL  172A
1B32:  MOVLB  3
1B34:  BTFSC  xF4.7
1B36:  BSF    FF2.7
1B38:  SUBLW  FF
1B3A:  BZ    1BF2
....................          { 
....................             new_uep = 0x04; 
1B3C:  MOVLW  04
1B3E:  MOVWF  xF0
....................             len = usb_ep_rx_size[en]; 
1B40:  BCF    FD8.0
1B42:  RLCF   xED,W
1B44:  CLRF   03
1B46:  MOVFF  FF2,3F4
1B4A:  BCF    FF2.7
1B4C:  MOVLB  0
1B4E:  RCALL  174A
1B50:  TBLRD*+
1B52:  MOVFF  FF5,03
1B56:  MOVLB  3
1B58:  BTFSC  xF4.7
1B5A:  BSF    FF2.7
1B5C:  MOVWF  xF1
1B5E:  MOVFF  03,3F2
....................             EP_BDxCNT_O(en) = len; 
1B62:  MOVF   xED,W
1B64:  MULLW  08
1B66:  MOVF   FF3,W
1B68:  CLRF   xF5
1B6A:  MOVWF  xF4
1B6C:  MOVLW  01
1B6E:  ADDWF  xF4,W
1B70:  MOVWF  01
1B72:  MOVLW  00
1B74:  ADDWFC xF5,W
1B76:  MOVWF  03
1B78:  MOVFF  01,FE9
1B7C:  MOVLW  04
1B7E:  ADDWF  03,W
1B80:  MOVWF  FEA
1B82:  MOVFF  3F1,FEF
....................             EP_BDxADR_O(en) = addy; 
1B86:  MOVF   xED,W
1B88:  MULLW  08
1B8A:  MOVF   FF3,W
1B8C:  CLRF   xF5
1B8E:  MOVWF  xF4
1B90:  MOVLW  02
1B92:  ADDWF  xF4,W
1B94:  MOVWF  01
1B96:  MOVLW  00
1B98:  ADDWFC xF5,W
1B9A:  MOVWF  03
1B9C:  MOVFF  01,FE9
1BA0:  MOVLW  04
1BA2:  ADDWF  03,W
1BA4:  MOVWF  FEA
1BA6:  MOVFF  3EF,FEC
1BAA:  MOVF   FED,F
1BAC:  MOVFF  3EE,FEF
....................             addy += usb_ep_rx_size[en]; 
1BB0:  BCF    FD8.0
1BB2:  RLCF   xED,W
1BB4:  CLRF   03
1BB6:  MOVFF  FF2,3F4
1BBA:  BCF    FF2.7
1BBC:  MOVLB  0
1BBE:  RCALL  174A
1BC0:  TBLRD*+
1BC2:  MOVFF  FF5,03
1BC6:  MOVLB  3
1BC8:  BTFSC  xF4.7
1BCA:  BSF    FF2.7
1BCC:  ADDWF  xEE,F
1BCE:  MOVF   03,W
1BD0:  ADDWFC xEF,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
1BD2:  MOVLW  88
1BD4:  MOVWF  xF3
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
1BD6:  BTFSC  xF2.0
1BD8:  BSF    xF3.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
1BDA:  BTFSC  xF2.1
1BDC:  BSF    xF3.1
....................             EP_BDxST_O(en) = i; 
1BDE:  MOVF   xED,W
1BE0:  MULLW  08
1BE2:  MOVF   FF3,W
1BE4:  CLRF   xF5
1BE6:  MOVWF  FE9
1BE8:  MOVLW  04
1BEA:  ADDWF  xF5,W
1BEC:  MOVWF  FEA
1BEE:  MOVFF  3F3,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
1BF2:  CLRF   03
1BF4:  MOVF   xED,W
1BF6:  MOVFF  FF2,3F4
1BFA:  BCF    FF2.7
1BFC:  MOVLB  0
1BFE:  RCALL  172A
1C00:  MOVLB  3
1C02:  BTFSC  xF4.7
1C04:  BSF    FF2.7
1C06:  SUBLW  FF
1C08:  BZ    1C80
....................          { 
....................             new_uep |= 0x02; 
1C0A:  BSF    xF0.1
....................             EP_BDxADR_I(en) = addy; 
1C0C:  MOVF   xED,W
1C0E:  MULLW  08
1C10:  MOVF   FF3,W
1C12:  CLRF   xF5
1C14:  MOVWF  xF4
1C16:  MOVLW  04
1C18:  ADDWF  xF4,F
1C1A:  MOVLW  00
1C1C:  ADDWFC xF5,F
1C1E:  MOVLW  02
1C20:  ADDWF  xF4,W
1C22:  MOVWF  01
1C24:  MOVLW  00
1C26:  ADDWFC xF5,W
1C28:  MOVWF  03
1C2A:  MOVFF  01,FE9
1C2E:  MOVLW  04
1C30:  ADDWF  03,W
1C32:  MOVWF  FEA
1C34:  MOVFF  3EF,FEC
1C38:  MOVF   FED,F
1C3A:  MOVFF  3EE,FEF
....................             addy += usb_ep_tx_size[en]; 
1C3E:  BCF    FD8.0
1C40:  RLCF   xED,W
1C42:  CLRF   03
1C44:  MOVFF  FF2,3F4
1C48:  BCF    FF2.7
1C4A:  MOVLB  0
1C4C:  RCALL  174A
1C4E:  TBLRD*+
1C50:  MOVFF  FF5,03
1C54:  MOVLB  3
1C56:  BTFSC  xF4.7
1C58:  BSF    FF2.7
1C5A:  ADDWF  xEE,F
1C5C:  MOVF   03,W
1C5E:  ADDWFC xEF,F
....................             EP_BDxST_I(en) = 0x40; 
1C60:  MOVF   xED,W
1C62:  MULLW  08
1C64:  MOVF   FF3,W
1C66:  CLRF   xF5
1C68:  MOVWF  xF4
1C6A:  MOVLW  04
1C6C:  ADDWF  xF4,F
1C6E:  MOVLW  00
1C70:  ADDWFC xF5,F
1C72:  MOVFF  3F4,FE9
1C76:  MOVLW  04
1C78:  ADDWF  xF5,W
1C7A:  MOVWF  FEA
1C7C:  MOVLW  40
1C7E:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
1C80:  MOVF   xF0,W
1C82:  SUBLW  06
1C84:  BNZ   1C8A
1C86:  MOVLW  0E
1C88:  MOVWF  xF0
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
1C8A:  CLRF   03
1C8C:  MOVF   xED,W
1C8E:  MOVFF  FF2,3F4
1C92:  BCF    FF2.7
1C94:  MOVLB  0
1C96:  RCALL  172A
1C98:  MOVLB  3
1C9A:  BTFSC  xF4.7
1C9C:  BSF    FF2.7
1C9E:  SUBLW  01
1CA0:  BTFSS  FD8.2
1CA2:  BSF    xF0.4
....................           
....................          UEP(en) = new_uep; 
1CA4:  CLRF   03
1CA6:  MOVF   xED,W
1CA8:  ADDLW  70
1CAA:  MOVWF  FE9
1CAC:  MOVLW  0F
1CAE:  ADDWFC 03,W
1CB0:  MOVWF  FEA
1CB2:  MOVFF  3F0,FEF
....................       } 
1CB6:  INCF   xED,F
1CB8:  BRA    1B10
1CBA:  MOVLB  0
....................    } 
.................... } 
1CBC:  GOTO   1D64 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
18F4:  CLRF   03
18F6:  MOVLB  3
18F8:  MOVF   xF5,W
18FA:  ADDLW  70
18FC:  MOVWF  FE9
18FE:  MOVLW  0F
1900:  ADDWFC 03,W
1902:  MOVWF  FEA
1904:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
1906:  MOVFF  3F5,3F6
190A:  MOVLB  0
190C:  RCALL  1890
190E:  MOVF   01,F
1910:  BZ    1944
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
1912:  MOVLB  3
1914:  MOVF   xF5,W
1916:  MULLW  08
1918:  MOVF   FF3,W
191A:  CLRF   xF7
191C:  MOVWF  FE9
191E:  MOVLW  04
1920:  ADDWF  xF7,W
1922:  MOVWF  FEA
1924:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
1926:  MOVF   xF5,W
1928:  MULLW  08
192A:  MOVF   FF3,W
192C:  CLRF   xF7
192E:  MOVWF  xF6
1930:  MOVLW  04
1932:  ADDWF  xF6,F
1934:  MOVLW  00
1936:  ADDWFC xF7,F
1938:  MOVFF  3F6,FE9
193C:  MOVLW  04
193E:  ADDWF  xF7,W
1940:  MOVWF  FEA
1942:  CLRF   FEF
1944:  MOVLB  0
....................    } 
.................... } 
1946:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
1948:  MOVLW  01
194A:  MOVLB  3
194C:  MOVWF  xF4
194E:  MOVF   xF4,W
1950:  SUBLW  0F
1952:  BNC   1962
....................       usb_disable_endpoint(i); 
1954:  MOVFF  3F4,3F5
1958:  MOVLB  0
195A:  RCALL  18F4
195C:  MOVLB  3
195E:  INCF   xF4,F
1960:  BRA    194E
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
1962:  MOVLB  0
1964:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
235C:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
235E:  MOVF   1C,F
2360:  BNZ   2364
2362:  BRA    23E0
....................    if (UIR)  
2364:  MOVF   F68,F
2366:  BZ    23E0
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
2368:  BTFSS  F68.2
236A:  BRA    2374
236C:  BTFSS  F69.2
236E:  BRA    2374
2370:  GOTO   184A
....................  
....................       if (UCON_SUSPND) return; 
2374:  BTFSS  F6D.1
2376:  BRA    237A
2378:  BRA    23E0
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
237A:  BTFSS  F68.5
237C:  BRA    2386
237E:  BTFSS  F69.5
2380:  BRA    2386
2382:  GOTO   187A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
2386:  BTFSS  F68.1
2388:  BRA    2392
238A:  BTFSS  F69.1
238C:  BRA    2392
238E:  GOTO   1888
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
2392:  BTFSS  F68.0
2394:  BRA    239E
2396:  BTFSS  F69.0
2398:  BRA    239E
239A:  GOTO   198E
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
239E:  BTFSS  F68.4
23A0:  BRA    23AA
23A2:  BTFSS  F69.4
23A4:  BRA    23AA
23A6:  GOTO   19BA
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
23AA:  BTFSS  F68.6
23AC:  BRA    23B6
23AE:  BTFSS  F69.6
23B0:  BRA    23B6
23B2:  GOTO   19C4
....................  
....................       TRNAttempts = 0; 
23B6:  MOVLB  3
23B8:  CLRF   xE9
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
23BA:  BTFSS  F68.3
23BC:  BRA    23D2
23BE:  BTFSS  F69.3
23C0:  BRA    23D2
....................          { 
....................             USTATCopy = U1STAT; 
23C2:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
23C6:  MOVLB  0
23C8:  CALL   0004
....................             usb_isr_tok_dne(); 
23CC:  BRA    21E2
....................          } 
....................          else 
23CE:  BRA    23D4
23D0:  MOVLB  3
....................             break; 
23D2:  BRA    23DE
....................       } while (TRNAttempts++ < 4); 
23D4:  MOVLB  3
23D6:  MOVF   xE9,W
23D8:  INCF   xE9,F
23DA:  SUBLW  03
23DC:  BC    23BA
23DE:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
23E0:  GOTO   0060
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
19C4:  BCF    F68.6
.................... } 
19C6:  GOTO   23B6 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
198E:  CLRF   F6A
....................    UIR = 0; 
1990:  CLRF   F68
....................    UEIE = 0x9F; 
1992:  MOVLW  9F
1994:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
1996:  MOVLW  3D
1998:  MOVWF  F69
....................  
....................    UADDR = 0; 
199A:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
199C:  RCALL  1948
....................     
....................    usb_token_reset(); 
199E:  RCALL  1966
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
19A0:  MOVLW  16
19A2:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
19A4:  BTFSS  F68.3
19A6:  BRA    19AE
....................       usb_clear_trn(); 
19A8:  CALL   0004
....................    } 
19AC:  BRA    19A4
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
19AE:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
19B0:  RCALL  185A
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
19B2:  MOVLW  03
19B4:  MOVWF  1C
.................... } 
19B6:  GOTO   239E (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
185A:  MOVLW  40
185C:  MOVLB  4
185E:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
1860:  MOVLW  04
1862:  MOVWF  x03
1864:  MOVLW  10
1866:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
1868:  MOVLW  88
186A:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
186C:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
186E:  MOVLW  04
1870:  MOVWF  x07
1872:  MOVLW  50
1874:  MOVWF  x06
.................... } 
1876:  MOVLB  0
1878:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
1888:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
188A:  BCF    F68.1
.................... } 
188C:  GOTO   2392 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
19BA:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
19BC:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
19BE:  BSF    F6D.1
.................... } 
19C0:  GOTO   23AA (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
184A:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
184C:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
184E:  BTFSS  F68.2
1850:  BRA    1856
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
1852:  BCF    F68.2
....................    } 
1854:  BRA    184E
.................... } 
1856:  GOTO   2374 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
187A:  BTFSS  F70.0
187C:  BRA    1882
....................    { 
....................       usb_init_ep0_setup(); 
187E:  RCALL  185A
....................       bit_clear(UEP(0), 0); 
1880:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
1882:  BCF    F68.5
.................... } 
1884:  GOTO   2386 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
19CA:  MOVFF  3EF,1D
19CE:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
19D0:  MOVLW  FF
19D2:  MOVWF  1D
19D4:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
21E2:  RRCF   1B,W
21E4:  MOVLB  3
21E6:  MOVWF  xEA
21E8:  RRCF   xEA,F
21EA:  RRCF   xEA,F
21EC:  MOVLW  1F
21EE:  ANDWF  xEA,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
21F0:  MOVF   1B,F
21F2:  BNZ   2292
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
21F4:  MOVLB  4
21F6:  MOVF   x00,W
21F8:  ANDLW  3C
21FA:  MOVLB  3
21FC:  MOVWF  xEB
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
21FE:  MOVLW  43
2200:  MOVLB  4
2202:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
2204:  MOVLB  3
2206:  MOVF   xEB,W
2208:  SUBLW  34
220A:  BNZ   2256
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
220C:  MOVLB  4
220E:  MOVF   x04,W
2210:  ANDLW  80
2212:  BZ    2216
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
2214:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
2216:  MOVLB  0
2218:  BRA    1F78
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
221A:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
221C:  INCFSZ 1D,W
221E:  BRA    222E
....................             usb_flush_out(0, USB_DTS_STALL); 
2220:  MOVLB  3
2222:  CLRF   xEC
2224:  MOVLW  03
2226:  MOVWF  xED
2228:  MOVLB  0
222A:  RCALL  1FA4
....................          else  
222C:  BRA    2252
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
222E:  MOVLB  3
2230:  CLRF   xEC
2232:  MOVLW  02
2234:  MOVWF  xED
2236:  MOVLB  0
2238:  RCALL  1FA4
....................             if (__setup_0_tx_size != 0xFE) 
223A:  MOVF   1D,W
223C:  SUBLW  FE
223E:  BZ    2252
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
2240:  MOVLB  3
2242:  CLRF   xEC
2244:  CLRF   xEE
2246:  MOVFF  1D,3ED
224A:  MOVLW  04
224C:  MOVWF  xEF
224E:  MOVLB  0
2250:  RCALL  20B2
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
2252:  BRA    228E
2254:  MOVLB  3
2256:  MOVF   xEB,W
2258:  SUBLW  04
225A:  BNZ   2290
....................       { 
....................          usb_isr_tok_out_dne(0); 
225C:  CLRF   xEC
225E:  MOVLB  0
2260:  RCALL  218E
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
2262:  MOVLB  3
2264:  CLRF   xEC
2266:  MOVLW  02
2268:  MOVWF  xED
226A:  MOVLB  0
226C:  RCALL  1FA4
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
226E:  MOVF   1D,W
2270:  SUBLW  FE
2272:  BZ    228C
2274:  INCFSZ 1D,W
2276:  BRA    227A
2278:  BRA    228C
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
227A:  MOVLB  3
227C:  CLRF   xEC
227E:  CLRF   xEE
2280:  MOVFF  1D,3ED
2284:  MOVLW  01
2286:  MOVWF  xEF
2288:  MOVLB  0
228A:  RCALL  20B2
....................          } 
....................       } 
....................       else 
228C:  BRA    228E
228E:  MOVLB  3
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
2290:  BRA    2356
2292:  MOVF   1B,W
2294:  SUBLW  04
2296:  BNZ   22C8
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
2298:  MOVLW  43
229A:  MOVLB  4
229C:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
229E:  MOVLW  FF
22A0:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
22A2:  MOVLB  3
22A4:  CLRF   xEC
22A6:  MOVLB  0
22A8:  RCALL  21C0
....................       if (__setup_0_tx_size!=0xFF) 
22AA:  INCFSZ 1D,W
22AC:  BRA    22B0
22AE:  BRA    22C4
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
22B0:  MOVLB  3
22B2:  CLRF   xEC
22B4:  CLRF   xEE
22B6:  MOVFF  1D,3ED
22BA:  MOVLW  02
22BC:  MOVWF  xEF
22BE:  MOVLB  0
22C0:  RCALL  20B2
....................       else 
22C2:  BRA    22C4
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
22C4:  BRA    2354
22C6:  MOVLB  3
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
22C8:  BTFSC  1B.2
22CA:  BRA    2306
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
22CC:  MOVF   xEA,W
22CE:  MULLW  08
22D0:  MOVF   FF3,W
22D2:  CLRF   xED
22D4:  MOVWF  01
22D6:  MOVLW  04
22D8:  ADDWF  xED,W
22DA:  MOVWF  03
22DC:  MOVF   xEA,W
22DE:  MULLW  08
22E0:  MOVF   FF3,W
22E2:  CLRF   xEF
22E4:  MOVWF  FE9
22E6:  MOVLW  04
22E8:  ADDWF  xEF,W
22EA:  MOVWF  FEA
22EC:  MOVF   FEF,W
22EE:  ANDLW  43
22F0:  MOVFF  03,FEA
22F4:  MOVFF  01,FE9
22F8:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
22FA:  MOVFF  3EA,3EC
22FE:  MOVLB  0
2300:  RCALL  218E
....................       } 
....................       else  
2302:  BRA    2354
2304:  MOVLB  3
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
2306:  MOVF   xEA,W
2308:  MULLW  08
230A:  MOVF   FF3,W
230C:  CLRF   xED
230E:  MOVWF  xEC
2310:  MOVLW  04
2312:  ADDWF  xEC,F
2314:  MOVLW  00
2316:  ADDWFC xED,F
2318:  MOVFF  3EC,01
231C:  MOVLW  04
231E:  ADDWF  xED,W
2320:  MOVWF  03
2322:  MOVF   xEA,W
2324:  MULLW  08
2326:  MOVF   FF3,W
2328:  CLRF   xEF
232A:  MOVWF  xEE
232C:  MOVLW  04
232E:  ADDWF  xEE,F
2330:  MOVLW  00
2332:  ADDWFC xEF,F
2334:  MOVFF  3EE,FE9
2338:  MOVLW  04
233A:  ADDWF  xEF,W
233C:  MOVWF  FEA
233E:  MOVF   FEF,W
2340:  ANDLW  43
2342:  MOVFF  03,FEA
2346:  MOVFF  3EC,FE9
234A:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
234C:  MOVFF  3EA,3EC
2350:  MOVLB  0
2352:  RCALL  21C0
2354:  MOVLB  3
....................       } 
....................    } 
.................... } 
2356:  MOVLB  0
2358:  GOTO   23CE (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
3E68:  MOVF   18,W
3E6A:  MOVWF  01
.................... } 
3E6C:  GOTO   6E9C (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
1966:  MOVLB  3
1968:  CLRF   xEA
196A:  MOVF   xEA,F
196C:  BNZ   1982
....................       USB_Interface[i] = 0;   //reset each interface to default 
196E:  CLRF   03
1970:  MOVF   xEA,W
1972:  ADDLW  21
1974:  MOVWF  FE9
1976:  MOVLW  00
1978:  ADDWFC 03,W
197A:  MOVWF  FEA
197C:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
197E:  INCF   xEA,F
1980:  BRA    196A
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
1982:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
1984:  MOVLW  01
1986:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
1988:  CLRF   17
.................... } 
198A:  MOVLB  0
198C:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1890:  MOVLB  3
1892:  BCF    xF7.0
1894:  BTFSC  xF6.7
1896:  BSF    xF7.0
....................     
....................    endpoint &= 0x7F; 
1898:  BCF    xF6.7
....................     
....................    if (endpoint > 16) 
189A:  MOVF   xF6,W
189C:  SUBLW  10
189E:  BC    18A6
....................       return(FALSE); 
18A0:  MOVLW  00
18A2:  MOVWF  01
18A4:  BRA    18F0
....................     
....................    if (direction) { //IN 
18A6:  BTFSS  xF7.0
18A8:  BRA    18CE
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
18AA:  CLRF   03
18AC:  MOVF   xF6,W
18AE:  MOVFF  FF2,3F8
18B2:  BCF    FF2.7
18B4:  MOVLB  0
18B6:  RCALL  172A
18B8:  MOVLB  3
18BA:  BTFSC  xF8.7
18BC:  BSF    FF2.7
18BE:  SUBLW  FF
18C0:  BNZ   18C6
18C2:  MOVLW  00
18C4:  BRA    18C8
18C6:  MOVLW  01
18C8:  MOVWF  01
18CA:  BRA    18F0
....................    } 
....................    else {   //OUT 
18CC:  BRA    18F0
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
18CE:  CLRF   03
18D0:  MOVF   xF6,W
18D2:  MOVFF  FF2,3F8
18D6:  BCF    FF2.7
18D8:  MOVLB  0
18DA:  RCALL  172A
18DC:  MOVLB  3
18DE:  BTFSC  xF8.7
18E0:  BSF    FF2.7
18E2:  SUBLW  FF
18E4:  BNZ   18EA
18E6:  MOVLW  00
18E8:  BRA    18EC
18EA:  MOVLW  01
18EC:  MOVWF  01
18EE:  BRA    18F0
....................    } 
.................... } 
18F0:  MOVLB  0
18F2:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
21C0:  MOVLB  3
21C2:  MOVF   xEC,F
21C4:  BNZ   21DE
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
21C6:  DECFSZ 17,W
21C8:  BRA    21D2
21CA:  MOVLB  0
21CC:  RCALL  19D6
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
21CE:  BRA    21DC
21D0:  MOVLB  3
21D2:  MOVF   17,W
21D4:  SUBLW  02
21D6:  BNZ   21DE
21D8:  MOVLB  0
21DA:  BRA    21B2
21DC:  MOVLB  3
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
21DE:  MOVLB  0
21E0:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
218E:  MOVLB  3
2190:  MOVF   xEC,F
2192:  BNZ   2194
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
2194:  MOVLB  0
2196:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
1F78:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
1F7A:  MOVLB  4
1F7C:  MOVF   x10,W
1F7E:  ANDLW  7F
1F80:  XORLW  00
1F82:  MOVLB  0
1F84:  BZ    1F90
1F86:  XORLW  01
1F88:  BZ    1F94
1F8A:  XORLW  03
1F8C:  BZ    1F98
1F8E:  BRA    1F9C
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
1F90:  BRA    1CC0
....................          break; 
1F92:  BRA    1FA0
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
1F94:  BRA    1D78
....................          break; 
1F96:  BRA    1FA0
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
1F98:  BRA    1F0E
....................          break; 
1F9A:  BRA    1FA0
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
1F9C:  RCALL  19D0
....................          break; 
1F9E:  BRA    1FA0
....................    } 
.................... } 
1FA0:  GOTO   221A (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
1CC0:  MOVLB  4
1CC2:  MOVF   x11,W
1CC4:  XORLW  00
1CC6:  MOVLB  0
1CC8:  BZ    1CE4
1CCA:  XORLW  01
1CCC:  BZ    1CF8
1CCE:  XORLW  02
1CD0:  BZ    1D12
1CD2:  XORLW  06
1CD4:  BZ    1D2A
1CD6:  XORLW  03
1CD8:  BZ    1D3C
1CDA:  XORLW  0E
1CDC:  BZ    1D40
1CDE:  XORLW  01
1CE0:  BZ    1D50
1CE2:  BRA    1D70
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
1CE4:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
1CE8:  MOVLB  4
1CEA:  CLRF   x51
....................             usb_request_send_response(2); 
1CEC:  MOVLW  02
1CEE:  MOVLB  3
1CF0:  MOVWF  xEF
1CF2:  MOVLB  0
1CF4:  RCALL  19CA
....................             break; 
1CF6:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1CF8:  MOVLB  4
1CFA:  DECFSZ x12,W
1CFC:  BRA    1D0C
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
1CFE:  MOVLW  01
1D00:  ANDWF  19,F
....................                usb_put_0len_0(); 
1D02:  MOVLB  3
1D04:  CLRF   xEF
1D06:  MOVLB  0
1D08:  RCALL  19CA
....................             } 
....................             else 
1D0A:  BRA    1D10
....................                usb_request_stall(); 
1D0C:  MOVLB  0
1D0E:  RCALL  19D0
....................             break; 
1D10:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1D12:  MOVLB  4
1D14:  DECFSZ x12,W
1D16:  BRA    1D24
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
1D18:  BSF    19.1
....................                usb_put_0len_0(); 
1D1A:  MOVLB  3
1D1C:  CLRF   xEF
1D1E:  MOVLB  0
1D20:  RCALL  19CA
....................             } 
....................             else 
1D22:  BRA    1D28
....................                usb_request_stall(); 
1D24:  MOVLB  0
1D26:  RCALL  19D0
....................             break; 
1D28:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
1D2A:  MOVLW  02
1D2C:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
1D2E:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
1D32:  MOVLB  3
1D34:  CLRF   xEF
1D36:  MOVLB  0
1D38:  RCALL  19CA
....................             break; 
1D3A:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
1D3C:  BRA    1A70
....................             break; 
1D3E:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
1D40:  MOVFF  18,450
....................             usb_request_send_response(1); 
1D44:  MOVLW  01
1D46:  MOVLB  3
1D48:  MOVWF  xEF
1D4A:  MOVLB  0
1D4C:  RCALL  19CA
....................             break; 
1D4E:  BRA    1D74
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
1D50:  MOVLB  4
1D52:  MOVF   x12,W
1D54:  SUBLW  01
1D56:  BNC   1D6C
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
1D58:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
1D5C:  MOVFF  412,3EC
1D60:  MOVLB  0
1D62:  BRA    1AEE
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
1D64:  MOVLB  3
1D66:  CLRF   xEF
1D68:  MOVLB  0
1D6A:  RCALL  19CA
....................             } 
....................             break; 
1D6C:  MOVLB  0
1D6E:  BRA    1D74
....................  
....................       default: 
....................             usb_request_stall(); 
1D70:  RCALL  19D0
....................             break; 
1D72:  BRA    1D74
....................    } 
.................... } 
1D74:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
1D78:  MOVFF  18,3EC
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
1D7C:  MOVLB  4
1D7E:  MOVF   x11,W
1D80:  XORLW  00
1D82:  MOVLB  0
1D84:  BZ    1D90
1D86:  XORLW  0A
1D88:  BZ    1DA2
1D8A:  XORLW  01
1D8C:  BZ    1DF0
1D8E:  BRA    1E1A
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
1D90:  MOVLB  4
1D92:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
1D94:  CLRF   x51
....................             usb_request_send_response(2); 
1D96:  MOVLW  02
1D98:  MOVLB  3
1D9A:  MOVWF  xEF
1D9C:  MOVLB  0
1D9E:  RCALL  19CA
....................             break; 
1DA0:  BRA    1E1E
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
1DA2:  MOVLB  3
1DA4:  MOVF   xEC,F
1DA6:  BZ    1DEA
1DA8:  MOVLW  01
1DAA:  SUBWF  xEC,W
1DAC:  CLRF   03
1DAE:  MOVFF  FF2,3ED
1DB2:  BCF    FF2.7
1DB4:  MOVLB  0
1DB6:  RCALL  17BC
1DB8:  MOVLB  3
1DBA:  BTFSC  xED.7
1DBC:  BSF    FF2.7
1DBE:  MOVWF  01
1DC0:  MOVLB  4
1DC2:  SUBWF  x14,W
1DC4:  BTFSS  FD8.0
1DC6:  BRA    1DCC
1DC8:  MOVLB  3
1DCA:  BRA    1DEA
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
1DCC:  CLRF   03
1DCE:  MOVF   x14,W
1DD0:  ADDLW  21
1DD2:  MOVWF  FE9
1DD4:  MOVLW  00
1DD6:  ADDWFC 03,W
1DD8:  MOVWF  FEA
1DDA:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
1DDE:  MOVLW  01
1DE0:  MOVLB  3
1DE2:  MOVWF  xEF
1DE4:  MOVLB  0
1DE6:  RCALL  19CA
....................             } 
....................             else 
1DE8:  BRA    1DEE
....................                usb_request_stall(); 
1DEA:  MOVLB  0
1DEC:  RCALL  19D0
....................             break; 
1DEE:  BRA    1E1E
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
1DF0:  MOVLB  3
1DF2:  MOVF   xEC,F
1DF4:  BZ    1E14
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
1DF6:  CLRF   03
1DF8:  MOVLB  4
1DFA:  MOVF   x14,W
1DFC:  ADDLW  21
1DFE:  MOVWF  FE9
1E00:  MOVLW  00
1E02:  ADDWFC 03,W
1E04:  MOVWF  FEA
1E06:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
1E0A:  MOVLB  3
1E0C:  CLRF   xEF
1E0E:  MOVLB  0
1E10:  RCALL  19CA
....................             } 
....................             else 
1E12:  BRA    1E18
....................                usb_request_stall(); 
1E14:  MOVLB  0
1E16:  RCALL  19D0
....................             break; 
1E18:  BRA    1E1E
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
1E1A:  RCALL  19D0
....................             break; 
1E1C:  BRA    1E1E
....................    } 
.................... } 
1E1E:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
1F0E:  MOVFF  414,3F6
1F12:  RCALL  1890
1F14:  MOVF   01,F
1F16:  BZ    1F74
....................       switch(usb_ep0_rx_buffer[1]) { 
1F18:  MOVLB  4
1F1A:  MOVF   x11,W
1F1C:  XORLW  01
1F1E:  MOVLB  0
1F20:  BZ    1F2C
1F22:  XORLW  02
1F24:  BZ    1F3C
1F26:  XORLW  03
1F28:  BZ    1F4C
1F2A:  BRA    1F70
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
1F2C:  MOVFF  414,3EC
1F30:  BRA    1E22
....................                usb_put_0len_0(); 
1F32:  MOVLB  3
1F34:  CLRF   xEF
1F36:  MOVLB  0
1F38:  RCALL  19CA
....................                break; 
1F3A:  BRA    1F74
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
1F3C:  MOVFF  414,3EC
1F40:  BRA    1E6A
....................                      usb_put_0len_0(); 
1F42:  MOVLB  3
1F44:  CLRF   xEF
1F46:  MOVLB  0
1F48:  RCALL  19CA
....................                      break; 
1F4A:  BRA    1F74
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
1F4C:  MOVLB  4
1F4E:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
1F50:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
1F52:  MOVFF  414,3EC
1F56:  MOVLB  0
1F58:  BRA    1EB4
1F5A:  MOVF   01,F
1F5C:  BZ    1F64
....................                   usb_ep0_tx_buffer[0]=1; 
1F5E:  MOVLW  01
1F60:  MOVLB  4
1F62:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
1F64:  MOVLW  02
1F66:  MOVLB  3
1F68:  MOVWF  xEF
1F6A:  MOVLB  0
1F6C:  RCALL  19CA
....................                break; 
1F6E:  BRA    1F74
....................  
....................          default: 
....................             usb_request_stall(); 
1F70:  RCALL  19D0
....................             break; 
1F72:  BRA    1F74
....................       } 
....................    } 
.................... } 
1F74:  GOTO   1FA0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
1A70:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
1A72:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
1A74:  MOVLB  4
1A76:  MOVF   x13,W
1A78:  XORLW  01
1A7A:  MOVLB  0
1A7C:  BZ    1A88
1A7E:  XORLW  03
1A80:  BZ    1A92
1A82:  XORLW  01
1A84:  BZ    1A98
1A86:  BRA    1ACE
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
1A88:  MOVLW  12
1A8A:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
1A8C:  MOVLW  03
1A8E:  MOVWF  1A
....................             break; 
1A90:  BRA    1AD2
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
1A92:  MOVLW  20
1A94:  MOVWF  20
....................             break; 
1A96:  BRA    1AD2
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
1A98:  MOVLW  02
1A9A:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
1A9C:  CLRF   03
1A9E:  MOVLB  4
1AA0:  MOVF   x12,W
1AA2:  MOVFF  FF2,3EC
1AA6:  BCF    FF2.7
1AA8:  MOVLB  0
1AAA:  RCALL  17F0
1AAC:  MOVLB  3
1AAE:  BTFSC  xEC.7
1AB0:  BSF    FF2.7
1AB2:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
1AB4:  CLRF   03
1AB6:  MOVF   1F,W
1AB8:  MOVFF  FF2,3EC
1ABC:  BCF    FF2.7
1ABE:  MOVLB  0
1AC0:  RCALL  1804
1AC2:  MOVLB  3
1AC4:  BTFSC  xEC.7
1AC6:  BSF    FF2.7
1AC8:  MOVWF  20
....................             break; 
1ACA:  MOVLB  0
1ACC:  BRA    1AD2
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
1ACE:  RCALL  19D0
....................             return; 
1AD0:  BRA    1AEA
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
1AD2:  MOVLB  4
1AD4:  MOVF   x17,F
1AD6:  BNZ   1AE2
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
1AD8:  MOVF   20,W
1ADA:  SUBWF  x16,W
1ADC:  BC    1AE2
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
1ADE:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
1AE2:  MOVLW  01
1AE4:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
1AE6:  MOVLB  0
1AE8:  RCALL  19D6
.................... } 
1AEA:  GOTO   1D74 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
21B2:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
21B4:  CLRF   17
....................    usb_set_address(USB_address_pending); 
21B6:  MOVFF  1E,3ED
21BA:  BRA    2198
....................    #endif 
.................... } 
21BC:  GOTO   21DC (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
19D6:  MOVLB  3
19D8:  CLRF   xED
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
19DA:  MOVF   20,F
19DC:  BZ    1A5A
19DE:  MOVF   xED,W
19E0:  SUBLW  3F
19E2:  BNC   1A5A
....................       switch(USB_stack_status.getdesc_type) { 
19E4:  MOVF   1A,W
19E6:  XORLW  00
19E8:  MOVLB  0
19EA:  BZ    19F6
19EC:  XORLW  02
19EE:  BZ    1A0E
19F0:  XORLW  01
19F2:  BZ    1A26
19F4:  BRA    1A3E
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
19F6:  CLRF   03
19F8:  MOVF   1F,W
19FA:  MOVFF  FF2,3EF
19FE:  BCF    FF2.7
1A00:  RCALL  178C
1A02:  MOVLB  3
1A04:  BTFSC  xEF.7
1A06:  BSF    FF2.7
1A08:  MOVWF  xEE
....................             break; 
1A0A:  MOVLB  0
1A0C:  BRA    1A3E
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
1A0E:  CLRF   03
1A10:  MOVF   1F,W
1A12:  MOVFF  FF2,3EF
1A16:  BCF    FF2.7
1A18:  RCALL  1804
1A1A:  MOVLB  3
1A1C:  BTFSC  xEF.7
1A1E:  BSF    FF2.7
1A20:  MOVWF  xEE
....................             break; 
1A22:  MOVLB  0
1A24:  BRA    1A3E
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
1A26:  CLRF   03
1A28:  MOVF   1F,W
1A2A:  MOVFF  FF2,3EF
1A2E:  BCF    FF2.7
1A30:  RCALL  17CE
1A32:  MOVLB  3
1A34:  BTFSC  xEF.7
1A36:  BSF    FF2.7
1A38:  MOVWF  xEE
....................             break; 
1A3A:  MOVLB  0
1A3C:  BRA    1A3E
....................       } 
....................       usb_getdesc_ptr++; 
1A3E:  INCF   1F,F
....................       usb_getdesc_len--; 
1A40:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
1A42:  MOVLB  3
1A44:  MOVF   xED,W
1A46:  INCF   xED,F
1A48:  CLRF   03
1A4A:  ADDLW  50
1A4C:  MOVWF  FE9
1A4E:  MOVLW  04
1A50:  ADDWFC 03,W
1A52:  MOVWF  FEA
1A54:  MOVFF  3EE,FEF
....................    } 
1A58:  BRA    19DA
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
1A5A:  MOVF   20,F
1A5C:  BNZ   1A66
1A5E:  MOVF   xED,W
1A60:  SUBLW  40
1A62:  BZ    1A66
....................          USB_stack_status.dev_req = NONE; 
1A64:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
1A66:  MOVFF  3ED,3EF
1A6A:  MOVLB  0
1A6C:  RCALL  19CA
.................... } 
1A6E:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32; 
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxbuf[Lenbuf]; 
....................  
.................... char  JP[] = "JP Inglobal", Autoclave[] = "Autoclave Vertical",tiempo_est[]="T est=",tiempo_sec[]="T sec="; 
.................... char  Lts[] = "55 Litros",Fle[] = ">",Fle1[]="<",Param[] = "Ciclo?", Tempe_pre[]="T°:121°C"; 
.................... char  Proc[] = "Proceso",Textil[]= "Textil-Instrumental", Calentando[]="Calentando",Level[]="Nivel"; 
.................... char  Preciclo[]= "Pre-Ciclo",Instrumental[]= "Instrumental Suave", Esterilizando[]="Esterilizando",Secando[]="Secando"; 
.................... char  Liquidos[]= "Liquidos", Vacio[]=":",Creado[]= "Libre", T40[]= "T:121°C",Test40[]= "t_est:25m", Tsec40[]= "t_sec:15m",C[]="C"; 
.................... char  TestC[]= "t_est:5m",TsecC[]= "t_sec:5m", TestI[]= "t_est:15m",Desfogue_Lento[]="Desfogue Lento"; 
.................... char  TL[]= "T:121°C",TestL[]= "t_est:20m",TsecL[]= "t_sec:N/A",ok[]= "OK", T[]="Temperatura"; 
.................... char  T_esterilizacion[]="T Esterilizacion",T_secado[]="T Secado",Desfogue[]="Desfogue Rapido",Si[]="Si",Noo[]="No",Finalizado[]="Finalizado"; 
.................... char  Parada[]="Parada", Emergencia[]="Emergencia", Ultimo[]="Ultimo", Puertas[]="Puerta", Abierta[]="Abierta"; 
.................... int8 Menu=16, n_opcionH=32,n_opcionL=16,unidad=11,Flecha=16,Flecha1=3,Flecha2=16, nMenuL=16, nMenuH=32, Flx=36, Fly=8,Liquid=0, y=0,z=0; 
.................... short estadot40=0,estadoc=0,estadoi=0,estadol=0,estadop=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,emergency=0; 
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int16 tiempos=0,tiempos3=0,m=0,tiempoctrl=0,Minutos=15,Nivel=0,tinicio=0; 
.................... short tiempo_esterilizacion=0,tiempo_secado=0,i=0,n=0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... // Variables para Pt100 
.................... short Lectura=0,Expulsa=0, est=0,Desfogar=0,Des=0,Visua=0,door=0,p=0; 
.................... int8 Setpoint=121,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,fin_ciclo=0,tiempo_desfogue=0,TiempoControl=0; 
.................... float V0=0.0,R1=6200.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=0.0,desvio=2.0,d3=0.0; 
.................... float X[2]={0.0,0.0}; 
.................... float Aumento=0.0,Temperatura=0.0; 
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................     
....................    if(x==1){ 
*
389A:  MOVLB  3
389C:  DECFSZ xB3,W
389E:  BRA    3944
....................    for( i = 0 ; i < 64 ; i ++ ) 
38A0:  CLRF   xB4
38A2:  MOVF   xB4,W
38A4:  SUBLW  3F
38A6:  BNC   3944
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
38A8:  CLRF   xB5
38AA:  MOVF   xB5,W
38AC:  SUBLW  0F
38AE:  BNC   3940
....................       {     
....................          for(k=7;k>-1;k--) 
38B0:  MOVLW  07
38B2:  MOVWF  xB6
38B4:  MOVF   xB6,W
38B6:  XORLW  80
38B8:  SUBLW  7F
38BA:  BC    393C
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
38BC:  CLRF   xB8
38BE:  MOVFF  3B4,3B7
38C2:  CLRF   xBA
38C4:  MOVLW  10
38C6:  MOVWF  xB9
38C8:  MOVLB  0
38CA:  CALL   29C6
38CE:  MOVFF  02,3B8
38D2:  MOVFF  01,3B7
38D6:  MOVLB  3
38D8:  MOVF   xB5,W
38DA:  ADDWF  01,W
38DC:  MOVWF  01
38DE:  MOVLW  00
38E0:  ADDWFC 02,W
38E2:  MOVWF  03
38E4:  MOVF   01,W
38E6:  MOVFF  FF2,3B7
38EA:  BCF    FF2.7
38EC:  MOVFF  03,FF7
38F0:  MOVLB  0
38F2:  CALL   02B2
38F6:  MOVLB  3
38F8:  BTFSC  xB7.7
38FA:  BSF    FF2.7
38FC:  MOVWF  xB7
38FE:  MOVLW  07
3900:  BSF    FD8.0
3902:  SUBFWB xB6,W
3904:  MOVWF  xB8
3906:  MOVFF  3B7,00
390A:  MOVF   xB8,W
390C:  MOVWF  01
390E:  BZ    3918
3910:  BCF    FD8.0
3912:  RRCF   00,F
3914:  DECFSZ 01,F
3916:  BRA    3910
3918:  BTFSS  00.0
391A:  BRA    3938
....................                glcd_pixel( j*8+k,i, ON ); 
391C:  MOVF   xB5,W
391E:  MULLW  08
3920:  MOVF   FF3,W
3922:  ADDWF  xB6,W
3924:  MOVWF  xB7
3926:  MOVWF  xE0
3928:  MOVFF  3B4,3E1
392C:  MOVLW  01
392E:  MOVWF  xE2
3930:  MOVLB  0
3932:  CALL   2F88
3936:  MOVLB  3
....................          }   
3938:  DECF   xB6,F
393A:  BRA    38B4
....................       } 
393C:  INCF   xB5,F
393E:  BRA    38AA
....................    } 
3940:  INCF   xB4,F
3942:  BRA    38A2
....................    } 
....................     
....................    if(x==2){ 
3944:  MOVF   xB3,W
3946:  SUBLW  02
3948:  BNZ   39EE
....................    for( i = 0 ; i < 64 ; i ++ ) 
394A:  CLRF   xB4
394C:  MOVF   xB4,W
394E:  SUBLW  3F
3950:  BNC   39EE
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3952:  CLRF   xB5
3954:  MOVF   xB5,W
3956:  SUBLW  0F
3958:  BNC   39EA
....................       {     
....................          for(k=7;k>-1;k--) 
395A:  MOVLW  07
395C:  MOVWF  xB6
395E:  MOVF   xB6,W
3960:  XORLW  80
3962:  SUBLW  7F
3964:  BC    39E6
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
3966:  CLRF   xB8
3968:  MOVFF  3B4,3B7
396C:  CLRF   xBA
396E:  MOVLW  10
3970:  MOVWF  xB9
3972:  MOVLB  0
3974:  CALL   29C6
3978:  MOVFF  02,3B8
397C:  MOVFF  01,3B7
3980:  MOVLB  3
3982:  MOVF   xB5,W
3984:  ADDWF  01,W
3986:  MOVWF  01
3988:  MOVLW  00
398A:  ADDWFC 02,W
398C:  MOVWF  03
398E:  MOVF   01,W
3990:  MOVFF  FF2,3B7
3994:  BCF    FF2.7
3996:  MOVFF  03,FF7
399A:  MOVLB  0
399C:  CALL   06CA
39A0:  MOVLB  3
39A2:  BTFSC  xB7.7
39A4:  BSF    FF2.7
39A6:  MOVWF  xB7
39A8:  MOVLW  07
39AA:  BSF    FD8.0
39AC:  SUBFWB xB6,W
39AE:  MOVWF  xB8
39B0:  MOVFF  3B7,00
39B4:  MOVF   xB8,W
39B6:  MOVWF  01
39B8:  BZ    39C2
39BA:  BCF    FD8.0
39BC:  RRCF   00,F
39BE:  DECFSZ 01,F
39C0:  BRA    39BA
39C2:  BTFSS  00.0
39C4:  BRA    39E2
....................                glcd_pixel( j*8+k,i, ON ); 
39C6:  MOVF   xB5,W
39C8:  MULLW  08
39CA:  MOVF   FF3,W
39CC:  ADDWF  xB6,W
39CE:  MOVWF  xB7
39D0:  MOVWF  xE0
39D2:  MOVFF  3B4,3E1
39D6:  MOVLW  01
39D8:  MOVWF  xE2
39DA:  MOVLB  0
39DC:  CALL   2F88
39E0:  MOVLB  3
....................          }   
39E2:  DECF   xB6,F
39E4:  BRA    395E
....................       } 
39E6:  INCF   xB5,F
39E8:  BRA    3954
....................    } 
39EA:  INCF   xB4,F
39EC:  BRA    394C
....................    } 
....................     
....................    if(x==3){ 
39EE:  MOVF   xB3,W
39F0:  SUBLW  03
39F2:  BNZ   3A98
....................    for( i = 0 ; i < 64 ; i ++ ) 
39F4:  CLRF   xB4
39F6:  MOVF   xB4,W
39F8:  SUBLW  3F
39FA:  BNC   3A98
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
39FC:  CLRF   xB5
39FE:  MOVF   xB5,W
3A00:  SUBLW  0F
3A02:  BNC   3A94
....................       {     
....................          for(k=7;k>-1;k--) 
3A04:  MOVLW  07
3A06:  MOVWF  xB6
3A08:  MOVF   xB6,W
3A0A:  XORLW  80
3A0C:  SUBLW  7F
3A0E:  BC    3A90
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
3A10:  CLRF   xB8
3A12:  MOVFF  3B4,3B7
3A16:  CLRF   xBA
3A18:  MOVLW  10
3A1A:  MOVWF  xB9
3A1C:  MOVLB  0
3A1E:  CALL   29C6
3A22:  MOVFF  02,3B8
3A26:  MOVFF  01,3B7
3A2A:  MOVLB  3
3A2C:  MOVF   xB5,W
3A2E:  ADDWF  01,W
3A30:  MOVWF  01
3A32:  MOVLW  00
3A34:  ADDWFC 02,W
3A36:  MOVWF  03
3A38:  MOVF   01,W
3A3A:  MOVFF  FF2,3B7
3A3E:  BCF    FF2.7
3A40:  MOVFF  03,FF7
3A44:  MOVLB  0
3A46:  CALL   0AE2
3A4A:  MOVLB  3
3A4C:  BTFSC  xB7.7
3A4E:  BSF    FF2.7
3A50:  MOVWF  xB7
3A52:  MOVLW  07
3A54:  BSF    FD8.0
3A56:  SUBFWB xB6,W
3A58:  MOVWF  xB8
3A5A:  MOVFF  3B7,00
3A5E:  MOVF   xB8,W
3A60:  MOVWF  01
3A62:  BZ    3A6C
3A64:  BCF    FD8.0
3A66:  RRCF   00,F
3A68:  DECFSZ 01,F
3A6A:  BRA    3A64
3A6C:  BTFSS  00.0
3A6E:  BRA    3A8C
....................                glcd_pixel( j*8+k,i, ON ); 
3A70:  MOVF   xB5,W
3A72:  MULLW  08
3A74:  MOVF   FF3,W
3A76:  ADDWF  xB6,W
3A78:  MOVWF  xB7
3A7A:  MOVWF  xE0
3A7C:  MOVFF  3B4,3E1
3A80:  MOVLW  01
3A82:  MOVWF  xE2
3A84:  MOVLB  0
3A86:  CALL   2F88
3A8A:  MOVLB  3
....................          }   
3A8C:  DECF   xB6,F
3A8E:  BRA    3A08
....................       } 
3A90:  INCF   xB5,F
3A92:  BRA    39FE
....................    } 
3A94:  INCF   xB4,F
3A96:  BRA    39F6
....................    } 
....................     
....................    if(x==4){ 
3A98:  MOVF   xB3,W
3A9A:  SUBLW  04
3A9C:  BNZ   3B42
....................    for( i = 0 ; i < 64 ; i ++ ) 
3A9E:  CLRF   xB4
3AA0:  MOVF   xB4,W
3AA2:  SUBLW  3F
3AA4:  BNC   3B42
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3AA6:  CLRF   xB5
3AA8:  MOVF   xB5,W
3AAA:  SUBLW  0F
3AAC:  BNC   3B3E
....................       {     
....................          for(k=7;k>-1;k--) 
3AAE:  MOVLW  07
3AB0:  MOVWF  xB6
3AB2:  MOVF   xB6,W
3AB4:  XORLW  80
3AB6:  SUBLW  7F
3AB8:  BC    3B3A
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
3ABA:  CLRF   xB8
3ABC:  MOVFF  3B4,3B7
3AC0:  CLRF   xBA
3AC2:  MOVLW  10
3AC4:  MOVWF  xB9
3AC6:  MOVLB  0
3AC8:  CALL   29C6
3ACC:  MOVFF  02,3B8
3AD0:  MOVFF  01,3B7
3AD4:  MOVLB  3
3AD6:  MOVF   xB5,W
3AD8:  ADDWF  01,W
3ADA:  MOVWF  01
3ADC:  MOVLW  00
3ADE:  ADDWFC 02,W
3AE0:  MOVWF  03
3AE2:  MOVF   01,W
3AE4:  MOVFF  FF2,3B7
3AE8:  BCF    FF2.7
3AEA:  MOVFF  03,FF7
3AEE:  MOVLB  0
3AF0:  CALL   0EFA
3AF4:  MOVLB  3
3AF6:  BTFSC  xB7.7
3AF8:  BSF    FF2.7
3AFA:  MOVWF  xB7
3AFC:  MOVLW  07
3AFE:  BSF    FD8.0
3B00:  SUBFWB xB6,W
3B02:  MOVWF  xB8
3B04:  MOVFF  3B7,00
3B08:  MOVF   xB8,W
3B0A:  MOVWF  01
3B0C:  BZ    3B16
3B0E:  BCF    FD8.0
3B10:  RRCF   00,F
3B12:  DECFSZ 01,F
3B14:  BRA    3B0E
3B16:  BTFSS  00.0
3B18:  BRA    3B36
....................                glcd_pixel( j*8+k,i, ON ); 
3B1A:  MOVF   xB5,W
3B1C:  MULLW  08
3B1E:  MOVF   FF3,W
3B20:  ADDWF  xB6,W
3B22:  MOVWF  xB7
3B24:  MOVWF  xE0
3B26:  MOVFF  3B4,3E1
3B2A:  MOVLW  01
3B2C:  MOVWF  xE2
3B2E:  MOVLB  0
3B30:  CALL   2F88
3B34:  MOVLB  3
....................          }   
3B36:  DECF   xB6,F
3B38:  BRA    3AB2
....................       } 
3B3A:  INCF   xB5,F
3B3C:  BRA    3AA8
....................    } 
3B3E:  INCF   xB4,F
3B40:  BRA    3AA0
....................    } 
....................     
....................    if(x==5){ 
3B42:  MOVF   xB3,W
3B44:  SUBLW  05
3B46:  BNZ   3BEC
....................    for( i = 0 ; i < 64 ; i ++ ) 
3B48:  CLRF   xB4
3B4A:  MOVF   xB4,W
3B4C:  SUBLW  3F
3B4E:  BNC   3BEC
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
3B50:  CLRF   xB5
3B52:  MOVF   xB5,W
3B54:  SUBLW  0F
3B56:  BNC   3BE8
....................       {     
....................          for(k=7;k>-1;k--) 
3B58:  MOVLW  07
3B5A:  MOVWF  xB6
3B5C:  MOVF   xB6,W
3B5E:  XORLW  80
3B60:  SUBLW  7F
3B62:  BC    3BE4
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
3B64:  CLRF   xB8
3B66:  MOVFF  3B4,3B7
3B6A:  CLRF   xBA
3B6C:  MOVLW  10
3B6E:  MOVWF  xB9
3B70:  MOVLB  0
3B72:  CALL   29C6
3B76:  MOVFF  02,3B8
3B7A:  MOVFF  01,3B7
3B7E:  MOVLB  3
3B80:  MOVF   xB5,W
3B82:  ADDWF  01,W
3B84:  MOVWF  01
3B86:  MOVLW  00
3B88:  ADDWFC 02,W
3B8A:  MOVWF  03
3B8C:  MOVF   01,W
3B8E:  MOVFF  FF2,3B7
3B92:  BCF    FF2.7
3B94:  MOVFF  03,FF7
3B98:  MOVLB  0
3B9A:  CALL   1312
3B9E:  MOVLB  3
3BA0:  BTFSC  xB7.7
3BA2:  BSF    FF2.7
3BA4:  MOVWF  xB7
3BA6:  MOVLW  07
3BA8:  BSF    FD8.0
3BAA:  SUBFWB xB6,W
3BAC:  MOVWF  xB8
3BAE:  MOVFF  3B7,00
3BB2:  MOVF   xB8,W
3BB4:  MOVWF  01
3BB6:  BZ    3BC0
3BB8:  BCF    FD8.0
3BBA:  RRCF   00,F
3BBC:  DECFSZ 01,F
3BBE:  BRA    3BB8
3BC0:  BTFSS  00.0
3BC2:  BRA    3BE0
....................                glcd_pixel( j*8+k,i, ON ); 
3BC4:  MOVF   xB5,W
3BC6:  MULLW  08
3BC8:  MOVF   FF3,W
3BCA:  ADDWF  xB6,W
3BCC:  MOVWF  xB7
3BCE:  MOVWF  xE0
3BD0:  MOVFF  3B4,3E1
3BD4:  MOVLW  01
3BD6:  MOVWF  xE2
3BD8:  MOVLB  0
3BDA:  CALL   2F88
3BDE:  MOVLB  3
....................          }   
3BE0:  DECF   xB6,F
3BE2:  BRA    3B5C
....................       } 
3BE4:  INCF   xB5,F
3BE6:  BRA    3B52
....................    } 
3BE8:  INCF   xB4,F
3BEA:  BRA    3B4A
....................    } 
.................... } 
3BEC:  MOVLB  0
3BEE:  RETLW  00
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................   if(x==1) 
*
378E:  MOVLB  3
3790:  DECFSZ xB4,W
3792:  BRA    37AE
....................    {glcd_text57(7, y, tiempo_est, 1, ON);} 
3794:  MOVLW  07
3796:  MOVWF  xC3
3798:  MOVFF  3B5,3C4
379C:  CLRF   xC6
379E:  MOVLW  81
37A0:  MOVWF  xC5
37A2:  MOVLW  01
37A4:  MOVWF  xC7
37A6:  MOVWF  xC8
37A8:  MOVLB  0
37AA:  RCALL  306A
37AC:  MOVLB  3
....................    if(x==2) 
37AE:  MOVF   xB4,W
37B0:  SUBLW  02
37B2:  BNZ   37CE
....................    {glcd_text57(7, y, Param, 1, ON);} 
37B4:  MOVLW  07
37B6:  MOVWF  xC3
37B8:  MOVFF  3B5,3C4
37BC:  CLRF   xC6
37BE:  MOVLW  9D
37C0:  MOVWF  xC5
37C2:  MOVLW  01
37C4:  MOVWF  xC7
37C6:  MOVWF  xC8
37C8:  MOVLB  0
37CA:  RCALL  306A
37CC:  MOVLB  3
....................    if(x==3) 
37CE:  MOVF   xB4,W
37D0:  SUBLW  03
37D2:  BNZ   37EE
....................    {glcd_text57(7, y, tiempo_sec, 1, ON);  } 
37D4:  MOVLW  07
37D6:  MOVWF  xC3
37D8:  MOVFF  3B5,3C4
37DC:  CLRF   xC6
37DE:  MOVLW  88
37E0:  MOVWF  xC5
37E2:  MOVLW  01
37E4:  MOVWF  xC7
37E6:  MOVWF  xC8
37E8:  MOVLB  0
37EA:  RCALL  306A
37EC:  MOVLB  3
....................    if(x==4) 
37EE:  MOVF   xB4,W
37F0:  SUBLW  04
37F2:  BNZ   380E
....................    {glcd_text57(7, y, Textil, 1, ON);  } 
37F4:  MOVLW  07
37F6:  MOVWF  xC3
37F8:  MOVFF  3B5,3C4
37FC:  CLRF   xC6
37FE:  MOVLW  B5
3800:  MOVWF  xC5
3802:  MOVLW  01
3804:  MOVWF  xC7
3806:  MOVWF  xC8
3808:  MOVLB  0
380A:  RCALL  306A
380C:  MOVLB  3
....................    if(x==5) 
380E:  MOVF   xB4,W
3810:  SUBLW  05
3812:  BNZ   382E
....................    {glcd_text57(7, y, Preciclo, 1, ON);  } 
3814:  MOVLW  07
3816:  MOVWF  xC3
3818:  MOVFF  3B5,3C4
381C:  CLRF   xC6
381E:  MOVLW  DA
3820:  MOVWF  xC5
3822:  MOVLW  01
3824:  MOVWF  xC7
3826:  MOVWF  xC8
3828:  MOVLB  0
382A:  RCALL  306A
382C:  MOVLB  3
....................    if(x==6) 
382E:  MOVF   xB4,W
3830:  SUBLW  06
3832:  BNZ   384E
....................    {glcd_text57(7, y, Instrumental, 1, ON);  } 
3834:  MOVLW  07
3836:  MOVWF  xC3
3838:  MOVFF  3B5,3C4
383C:  CLRF   xC6
383E:  MOVLW  E4
3840:  MOVWF  xC5
3842:  MOVLW  01
3844:  MOVWF  xC7
3846:  MOVWF  xC8
3848:  MOVLB  0
384A:  RCALL  306A
384C:  MOVLB  3
....................    if(x==7) 
384E:  MOVF   xB4,W
3850:  SUBLW  07
3852:  BNZ   3872
....................    {glcd_text57(7, y, Liquidos, 1, ON);  } 
3854:  MOVLW  07
3856:  MOVWF  xC3
3858:  MOVFF  3B5,3C4
385C:  MOVLW  01
385E:  MOVWF  xC6
3860:  MOVLW  0D
3862:  MOVWF  xC5
3864:  MOVLW  01
3866:  MOVWF  xC7
3868:  MOVWF  xC8
386A:  MOVLB  0
386C:  CALL   306A
3870:  MOVLB  3
....................    if(x==8) 
3872:  MOVF   xB4,W
3874:  SUBLW  08
3876:  BNZ   3896
....................    {glcd_text57(7, y, Creado, 1, ON);  } 
3878:  MOVLW  07
387A:  MOVWF  xC3
387C:  MOVFF  3B5,3C4
3880:  MOVLW  01
3882:  MOVWF  xC6
3884:  MOVLW  18
3886:  MOVWF  xC5
3888:  MOVLW  01
388A:  MOVWF  xC7
388C:  MOVWF  xC8
388E:  MOVLB  0
3890:  CALL   306A
3894:  MOVLB  3
.................... } 
3896:  MOVLB  0
3898:  RETLW  00
....................   
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
*
23E4:  MOVLW  15
23E6:  MOVWF  FCF
23E8:  MOVLW  A0
23EA:  MOVWF  FCE
....................    tiempos++; 
23EC:  MOVLB  2
23EE:  INCF   x05,F
23F0:  BTFSC  FD8.2
23F2:  INCF   x06,F
....................    tiempos3++; 
23F4:  INCF   x07,F
23F6:  BTFSC  FD8.2
23F8:  INCF   x08,F
....................    tiempoctrl++; 
23FA:  INCF   x0B,F
23FC:  BTFSC  FD8.2
23FE:  INCF   x0C,F
....................     
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])&&(Liquid==0)) 
2400:  MOVF   x17,W
2402:  SUBWF  x13,W
2404:  BNZ   241E
2406:  MOVF   x18,W
2408:  SUBWF  x14,W
240A:  BNZ   241E
240C:  MOVF   x19,W
240E:  SUBWF  x15,W
2410:  BNZ   241E
2412:  MOVF   x1A,W
2414:  SUBWF  x16,W
2416:  BNZ   241E
2418:  MOVF   x00,F
241A:  BNZ   241E
....................    {tiempo_secado=1;} 
241C:  BSF    x04.3
....................        
....................    if(tiempos3>=50) 
241E:  MOVF   x08,F
2420:  BNZ   2428
2422:  MOVF   x07,W
2424:  SUBLW  31
2426:  BC    242E
....................    {tiempos3=0;Expulsa=1;} 
2428:  CLRF   x08
242A:  CLRF   x07
242C:  BSF    x04.7
....................     
....................    if(tiempos>=200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
242E:  MOVF   x06,F
2430:  BNZ   2438
2432:  MOVF   x05,W
2434:  SUBLW  C7
2436:  BC    24C8
....................    {tiempos=0;Lectura=1;TiempoControl++; 
2438:  CLRF   x06
243A:  CLRF   x05
243C:  BSF    x04.6
243E:  INCF   x2C,F
....................     
....................    if(tiempo_desfogue>=30) 
2440:  MOVF   x2B,W
2442:  SUBLW  1D
2444:  BC    244C
....................    {Desfogar=1;tiempo_desfogue=0;} 
2446:  BSF    x23.1
2448:  CLRF   x2B
....................    else 
244A:  BRA    2450
....................    {Desfogar=0;tiempo_desfogue++;} 
244C:  BCF    x23.1
244E:  INCF   x2B,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
2450:  BTFSS  x04.2
2452:  BRA    248C
....................       { 
....................                       
....................       Testerilizacion[0]++; 
2454:  INCF   x13,F
....................       if(Testerilizacion[0]>9) 
2456:  BTFSC  x13.7
2458:  BRA    2464
245A:  MOVF   x13,W
245C:  SUBLW  09
245E:  BC    2464
....................          {Testerilizacion[0]=0; 
2460:  CLRF   x13
....................           Testerilizacion[1]++;} 
2462:  INCF   x14,F
....................        if(Testerilizacion[1]>5) 
2464:  BTFSC  x14.7
2466:  BRA    2472
2468:  MOVF   x14,W
246A:  SUBLW  05
246C:  BC    2472
....................          {Testerilizacion[1]=0; 
246E:  CLRF   x14
....................           Testerilizacion[2]++;} 
2470:  INCF   x15,F
....................          if(Testerilizacion[2]>9) 
2472:  BTFSC  x15.7
2474:  BRA    2480
2476:  MOVF   x15,W
2478:  SUBLW  09
247A:  BC    2480
....................             {Testerilizacion[2]=0; 
247C:  CLRF   x15
....................              Testerilizacion[3]++;} 
247E:  INCF   x16,F
....................             if(Testerilizacion[3]>5) 
2480:  BTFSC  x16.7
2482:  BRA    248C
2484:  MOVF   x16,W
2486:  SUBLW  05
2488:  BC    248C
....................                {Testerilizacion[3]=0;} 
248A:  CLRF   x16
....................       }        
....................        
....................     if(tiempo_secado==1) 
248C:  BTFSS  x04.3
248E:  BRA    24C8
....................       { 
....................                       
....................       Tsecado[0]++; 
2490:  INCF   x1B,F
....................       if(Tsecado[0]>9) 
2492:  BTFSC  x1B.7
2494:  BRA    24A0
2496:  MOVF   x1B,W
2498:  SUBLW  09
249A:  BC    24A0
....................          {Tsecado[0]=0; 
249C:  CLRF   x1B
....................           Tsecado[1]++;} 
249E:  INCF   x1C,F
....................        if(Tsecado[1]>5) 
24A0:  BTFSC  x1C.7
24A2:  BRA    24AE
24A4:  MOVF   x1C,W
24A6:  SUBLW  05
24A8:  BC    24AE
....................          {Tsecado[1]=0; 
24AA:  CLRF   x1C
....................           Tsecado[2]++;} 
24AC:  INCF   x1D,F
....................          if(Tsecado[2]>9) 
24AE:  BTFSC  x1D.7
24B0:  BRA    24BC
24B2:  MOVF   x1D,W
24B4:  SUBLW  09
24B6:  BC    24BC
....................             {Tsecado[2]=0; 
24B8:  CLRF   x1D
....................              Tsecado[3]++;} 
24BA:  INCF   x1E,F
....................             if(Tsecado[3]>5) 
24BC:  BTFSC  x1E.7
24BE:  BRA    24C8
24C0:  MOVF   x1E,W
24C2:  SUBLW  05
24C4:  BC    24C8
....................                {Tsecado[3]=0;} 
24C6:  CLRF   x1E
....................       }   
....................    } 
....................    } 
....................     
24C8:  BCF    F9E.0
24CA:  MOVLB  0
24CC:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
.................... glcd_rect(x1, y, x2, y+7, YES, OFF);            // Clear the old voltage 
*
4908:  MOVLW  07
490A:  MOVLB  3
490C:  ADDWF  xB5,W
490E:  MOVWF  xB6
4910:  MOVFF  3B3,3C5
4914:  MOVFF  3B5,3C6
4918:  MOVFF  3B4,3C7
491C:  MOVWF  xC8
491E:  MOVLW  01
4920:  MOVWF  xC9
4922:  CLRF   xCA
4924:  MOVLB  0
4926:  CALL   350A
.................... } 
492A:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       sprintf(voltage, "%1.1f",adc); // Converts adc to text 
*
4898:  MOVLW  03
489A:  MOVLB  3
489C:  MOVWF  xB2
489E:  MOVLW  BA
48A0:  MOVWF  xB1
48A2:  MOVLW  89
48A4:  MOVWF  FE9
48A6:  MOVFF  3B6,3C6
48AA:  MOVFF  3B5,3C5
48AE:  MOVFF  3B4,3C4
48B2:  MOVFF  3B3,3C3
48B6:  MOVLW  01
48B8:  MOVWF  xC7
48BA:  MOVLB  0
48BC:  BRA    46E4
....................       glcd_rect(x, y, x+53, y+15, YES, OFF);glcd_text57(x, y, voltage, 2, ON); 
48BE:  MOVLW  35
48C0:  MOVLB  3
48C2:  ADDWF  xB7,W
48C4:  MOVWF  xC3
48C6:  MOVLW  0F
48C8:  ADDWF  xB8,W
48CA:  MOVWF  xC4
48CC:  MOVFF  3B7,3C5
48D0:  MOVFF  3B8,3C6
48D4:  MOVFF  3C3,3C7
48D8:  MOVWF  xC8
48DA:  MOVLW  01
48DC:  MOVWF  xC9
48DE:  CLRF   xCA
48E0:  MOVLB  0
48E2:  CALL   350A
48E6:  MOVFF  3B7,3C3
48EA:  MOVFF  3B8,3C4
48EE:  MOVLW  03
48F0:  MOVLB  3
48F2:  MOVWF  xC6
48F4:  MOVLW  BA
48F6:  MOVWF  xC5
48F8:  MOVLW  02
48FA:  MOVWF  xC7
48FC:  MOVLW  01
48FE:  MOVWF  xC8
4900:  MOVLB  0
4902:  CALL   306A
....................        
.................... } 
4906:  RETLW  00
....................   
.................... void displayTiempo(int adc,int x,int y,int w) { 
....................    char voltage[9];     
....................       if(w<4) 
*
35CC:  MOVLB  3
35CE:  MOVF   xB7,W
35D0:  SUBLW  03
35D2:  BNC   35EC
....................       {sprintf(voltage, "%i",adc);} // Converts adc to text 
35D4:  MOVLW  03
35D6:  MOVWF  xB2
35D8:  MOVLW  B8
35DA:  MOVWF  xB1
35DC:  MOVFF  3B4,3C1
35E0:  MOVLW  1F
35E2:  MOVWF  xC2
35E4:  MOVLB  0
35E6:  BRA    326E
....................       else 
35E8:  BRA    3600
35EA:  MOVLB  3
....................       {sprintf(voltage, "%u",adc);} // Converts adc to text 
35EC:  MOVLW  03
35EE:  MOVWF  xB2
35F0:  MOVLW  B8
35F2:  MOVWF  xB1
35F4:  MOVFF  3B4,3C1
35F8:  MOVLW  1B
35FA:  MOVWF  xC2
35FC:  MOVLB  0
35FE:  BRA    334E
....................       if(w==0) 
3600:  MOVLB  3
3602:  MOVF   xB7,F
3604:  BNZ   3622
....................       {glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
3606:  MOVFF  3B5,3C3
360A:  MOVFF  3B6,3C4
360E:  MOVLW  03
3610:  MOVWF  xC6
3612:  MOVLW  B8
3614:  MOVWF  xC5
3616:  MOVLW  01
3618:  MOVWF  xC7
361A:  MOVWF  xC8
361C:  MOVLB  0
361E:  RCALL  306A
3620:  MOVLB  3
....................       if(w==1) 
3622:  DECFSZ xB7,W
3624:  BRA    3668
....................       {glcd_rect(x, y, x+5, y+7, YES, OFF);glcd_text57(x, y, voltage, 1, ON);}            // Clear the old voltage 
3626:  MOVLW  05
3628:  ADDWF  xB5,W
362A:  MOVWF  xC1
362C:  MOVLW  07
362E:  ADDWF  xB6,W
3630:  MOVWF  xC2
3632:  MOVFF  3B5,3C5
3636:  MOVFF  3B6,3C6
363A:  MOVFF  3C1,3C7
363E:  MOVWF  xC8
3640:  MOVLW  01
3642:  MOVWF  xC9
3644:  CLRF   xCA
3646:  MOVLB  0
3648:  RCALL  350A
364A:  MOVFF  3B5,3C3
364E:  MOVFF  3B6,3C4
3652:  MOVLW  03
3654:  MOVLB  3
3656:  MOVWF  xC6
3658:  MOVLW  B8
365A:  MOVWF  xC5
365C:  MOVLW  01
365E:  MOVWF  xC7
3660:  MOVWF  xC8
3662:  MOVLB  0
3664:  RCALL  306A
3666:  MOVLB  3
....................       if(w==2) 
3668:  MOVF   xB7,W
366A:  SUBLW  02
366C:  BNZ   36B0
....................       {glcd_rect(x, y, x+5, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
366E:  MOVLW  05
3670:  ADDWF  xB5,W
3672:  MOVWF  xC1
3674:  MOVLW  07
3676:  ADDWF  xB6,W
3678:  MOVWF  xC2
367A:  MOVFF  3B5,3C5
367E:  MOVFF  3B6,3C6
3682:  MOVFF  3C1,3C7
3686:  MOVWF  xC8
3688:  MOVLW  01
368A:  MOVWF  xC9
368C:  MOVWF  xCA
368E:  MOVLB  0
3690:  RCALL  350A
3692:  MOVFF  3B5,3C3
3696:  MOVFF  3B6,3C4
369A:  MOVLW  03
369C:  MOVLB  3
369E:  MOVWF  xC6
36A0:  MOVLW  B8
36A2:  MOVWF  xC5
36A4:  MOVLW  01
36A6:  MOVWF  xC7
36A8:  CLRF   xC8
36AA:  MOVLB  0
36AC:  RCALL  306A
36AE:  MOVLB  3
....................       if(w==3) 
36B0:  MOVF   xB7,W
36B2:  SUBLW  03
36B4:  BNZ   36FA
....................       {glcd_rect(x, y, x+20, y+28, YES, OFF);glcd_text57(x, y, voltage, 2, ON);}            // Clear the old voltage 
36B6:  MOVLW  14
36B8:  ADDWF  xB5,W
36BA:  MOVWF  xC1
36BC:  MOVLW  1C
36BE:  ADDWF  xB6,W
36C0:  MOVWF  xC2
36C2:  MOVFF  3B5,3C5
36C6:  MOVFF  3B6,3C6
36CA:  MOVFF  3C1,3C7
36CE:  MOVWF  xC8
36D0:  MOVLW  01
36D2:  MOVWF  xC9
36D4:  CLRF   xCA
36D6:  MOVLB  0
36D8:  RCALL  350A
36DA:  MOVFF  3B5,3C3
36DE:  MOVFF  3B6,3C4
36E2:  MOVLW  03
36E4:  MOVLB  3
36E6:  MOVWF  xC6
36E8:  MOVLW  B8
36EA:  MOVWF  xC5
36EC:  MOVLW  02
36EE:  MOVWF  xC7
36F0:  MOVLW  01
36F2:  MOVWF  xC8
36F4:  MOVLB  0
36F6:  RCALL  306A
36F8:  MOVLB  3
....................       if(w==4) 
36FA:  MOVF   xB7,W
36FC:  SUBLW  04
36FE:  BNZ   3742
....................       {glcd_rect(x, y, x+16, y+7, YES, ON);glcd_text57(x, y, voltage, 1, OFF);}            // Clear the old voltage 
3700:  MOVLW  10
3702:  ADDWF  xB5,W
3704:  MOVWF  xC1
3706:  MOVLW  07
3708:  ADDWF  xB6,W
370A:  MOVWF  xC2
370C:  MOVFF  3B5,3C5
3710:  MOVFF  3B6,3C6
3714:  MOVFF  3C1,3C7
3718:  MOVWF  xC8
371A:  MOVLW  01
371C:  MOVWF  xC9
371E:  MOVWF  xCA
3720:  MOVLB  0
3722:  RCALL  350A
3724:  MOVFF  3B5,3C3
3728:  MOVFF  3B6,3C4
372C:  MOVLW  03
372E:  MOVLB  3
3730:  MOVWF  xC6
3732:  MOVLW  B8
3734:  MOVWF  xC5
3736:  MOVLW  01
3738:  MOVWF  xC7
373A:  CLRF   xC8
373C:  MOVLB  0
373E:  RCALL  306A
3740:  MOVLB  3
....................       if(w==5) 
3742:  MOVF   xB7,W
3744:  SUBLW  05
3746:  BNZ   378A
....................       {glcd_rect(x, y, x+12, y+16, YES, ON);glcd_text57(x, y, voltage, 2, OFF);}            // Clear the old voltage 
3748:  MOVLW  0C
374A:  ADDWF  xB5,W
374C:  MOVWF  xC1
374E:  MOVLW  10
3750:  ADDWF  xB6,W
3752:  MOVWF  xC2
3754:  MOVFF  3B5,3C5
3758:  MOVFF  3B6,3C6
375C:  MOVFF  3C1,3C7
3760:  MOVWF  xC8
3762:  MOVLW  01
3764:  MOVWF  xC9
3766:  MOVWF  xCA
3768:  MOVLB  0
376A:  RCALL  350A
376C:  MOVFF  3B5,3C3
3770:  MOVFF  3B6,3C4
3774:  MOVLW  03
3776:  MOVLB  3
3778:  MOVWF  xC6
377A:  MOVLW  B8
377C:  MOVWF  xC5
377E:  MOVLW  02
3780:  MOVWF  xC7
3782:  CLRF   xC8
3784:  MOVLB  0
3786:  RCALL  306A
3788:  MOVLB  3
....................        
.................... } 
378A:  MOVLB  0
378C:  RETLW  00
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
2530:  MOVLB  3
2532:  RLCF   xB4,W
2534:  MOVWF  00
2536:  RLCF   00,F
2538:  MOVLW  FC
253A:  ANDWF  00,F
253C:  MOVFF  00,01
2540:  MOVF   FC2,W
2542:  ANDLW  C3
2544:  IORWF  00,W
2546:  MOVWF  FC2
2548:  MOVLW  0A
254A:  MOVWF  xB9
254C:  MOVLB  0
254E:  RCALL  24D0
2550:  BSF    FC2.1
2552:  BTFSC  FC2.1
2554:  BRA    2552
2556:  MOVFF  FC4,3BA
255A:  MOVFF  FC3,3B9
255E:  MOVLB  0
2560:  RCALL  24FA
2562:  MOVFF  03,3B8
2566:  MOVFF  02,3B7
256A:  MOVFF  01,3B6
256E:  MOVFF  00,3B5
2572:  MOVFF  3B5,00
2576:  MOVFF  3B6,01
257A:  MOVFF  3B7,02
257E:  MOVFF  3B8,03
.................... } 
2582:  RETLW  00
....................  
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
295A:  MOVLB  2
295C:  MOVF   x01,W
295E:  MULLW  04
2960:  MOVF   FF3,W
2962:  CLRF   03
2964:  ADDLW  61
2966:  MOVWF  FE9
2968:  MOVLW  02
296A:  ADDWFC 03,W
296C:  MOVWF  FEA
296E:  MOVFF  249,FEF
2972:  MOVFF  24A,FEC
2976:  MOVFF  24B,FEC
297A:  MOVFF  24C,FEC
....................    y++; 
297E:  INCF   x01,F
....................    if(y>=2) 
2980:  MOVF   x01,W
2982:  SUBLW  01
2984:  BC    29C0
....................    { 
....................       y=0; 
2986:  CLRF   x01
....................       Aumento=X[1]-X[0]; 
2988:  BSF    FD8.1
298A:  MOVFF  268,3BF
298E:  MOVFF  267,3BE
2992:  MOVFF  266,3BD
2996:  MOVFF  265,3BC
299A:  MOVFF  264,3C3
299E:  MOVFF  263,3C2
29A2:  MOVFF  262,3C1
29A6:  MOVFF  261,3C0
29AA:  MOVLB  0
29AC:  RCALL  26E2
29AE:  MOVFF  03,26C
29B2:  MOVFF  02,26B
29B6:  MOVFF  01,26A
29BA:  MOVFF  00,269
29BE:  MOVLB  2
....................    } 
.................... } 
29C0:  MOVLB  0
29C2:  GOTO   2B52 (RETURN)
....................  
.................... float Leer_Sensor(int media) 
.................... { 
....................    Prom=0.0; 
*
29E8:  MOVLB  2
29EA:  CLRF   x48
29EC:  CLRF   x47
29EE:  CLRF   x46
29F0:  CLRF   x45
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
29F2:  MOVLB  3
29F4:  CLRF   xB4
29F6:  MOVLB  0
29F8:  RCALL  2530
29FA:  MOVFF  03,230
29FE:  MOVFF  02,22F
2A02:  MOVFF  01,22E
2A06:  MOVFF  00,22D
....................    V0 = V0/25.3; // Se elimina la ganancia 
2A0A:  MOVFF  230,3BB
2A0E:  MOVFF  22F,3BA
2A12:  MOVFF  22E,3B9
2A16:  MOVFF  22D,3B8
2A1A:  MOVLW  66
2A1C:  MOVLB  3
2A1E:  MOVWF  xBF
2A20:  MOVWF  xBE
2A22:  MOVLW  4A
2A24:  MOVWF  xBD
2A26:  MOVLW  83
2A28:  MOVWF  xBC
2A2A:  MOVLB  0
2A2C:  RCALL  2584
2A2E:  MOVFF  03,230
2A32:  MOVFF  02,22F
2A36:  MOVFF  01,22E
2A3A:  MOVFF  00,22D
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); // Se calcula el valor de la PT100 
2A3E:  MOVLB  3
2A40:  CLRF   xBA
2A42:  MOVFF  229,3B9
2A46:  MOVLB  0
2A48:  RCALL  24FA
2A4A:  BCF    FD8.1
2A4C:  MOVFF  234,3BF
2A50:  MOVFF  233,3BE
2A54:  MOVFF  232,3BD
2A58:  MOVFF  231,3BC
2A5C:  MOVFF  03,3C3
2A60:  MOVFF  02,3C2
2A64:  MOVFF  01,3C1
2A68:  MOVFF  00,3C0
2A6C:  RCALL  26E2
2A6E:  MOVFF  00,3B4
2A72:  MOVFF  01,3B5
2A76:  MOVFF  02,3B6
2A7A:  MOVFF  03,3B7
2A7E:  MOVLB  3
2A80:  CLRF   xBB
2A82:  MOVLW  C0
2A84:  MOVWF  xBA
2A86:  MOVLW  7F
2A88:  MOVWF  xB9
2A8A:  MOVLW  88
2A8C:  MOVWF  xB8
2A8E:  MOVFF  230,3BF
2A92:  MOVFF  22F,3BE
2A96:  MOVFF  22E,3BD
2A9A:  MOVFF  22D,3BC
2A9E:  MOVLB  0
2AA0:  RCALL  2584
2AA2:  MOVFF  00,3B8
2AA6:  MOVFF  01,3B9
2AAA:  MOVFF  02,3BA
2AAE:  MOVFF  03,3BB
2AB2:  BSF    FD8.1
2AB4:  MOVFF  03,3BF
2AB8:  MOVFF  02,3BE
2ABC:  MOVFF  01,3BD
2AC0:  MOVFF  00,3BC
2AC4:  MOVLB  3
2AC6:  CLRF   xC3
2AC8:  CLRF   xC2
2ACA:  CLRF   xC1
2ACC:  MOVLW  7F
2ACE:  MOVWF  xC0
2AD0:  MOVLB  0
2AD2:  RCALL  26E2
2AD4:  MOVFF  3B7,3BB
2AD8:  MOVFF  3B6,3BA
2ADC:  MOVFF  3B5,3B9
2AE0:  MOVFF  3B4,3B8
2AE4:  MOVFF  03,3BF
2AE8:  MOVFF  02,3BE
2AEC:  MOVFF  01,3BD
2AF0:  MOVFF  00,3BC
2AF4:  RCALL  2584
2AF6:  MOVFF  03,238
2AFA:  MOVFF  02,237
2AFE:  MOVFF  01,236
2B02:  MOVFF  00,235
....................    Pt=Pt-0.6; 
2B06:  BSF    FD8.1
2B08:  MOVFF  238,3BF
2B0C:  MOVFF  237,3BE
2B10:  MOVFF  236,3BD
2B14:  MOVFF  235,3BC
2B18:  MOVLW  9A
2B1A:  MOVLB  3
2B1C:  MOVWF  xC3
2B1E:  MOVLW  99
2B20:  MOVWF  xC2
2B22:  MOVLW  19
2B24:  MOVWF  xC1
2B26:  MOVLW  7E
2B28:  MOVWF  xC0
2B2A:  MOVLB  0
2B2C:  RCALL  26E2
2B2E:  MOVFF  03,238
2B32:  MOVFF  02,237
2B36:  MOVFF  01,236
2B3A:  MOVFF  00,235
....................    //Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>(media-1)) 
2B3E:  MOVLW  01
2B40:  MOVLB  3
2B42:  SUBWF  xB3,W
2B44:  MOVLB  2
2B46:  SUBWF  x26,W
2B48:  BZ    2B52
2B4A:  BNC   2B52
....................    {l=0;ActualizaRecta();} 
2B4C:  CLRF   x26
2B4E:  MOVLB  0
2B50:  BRA    295A
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=Pt;l++; 
2B52:  MOVLB  3
2B54:  CLRF   xB8
2B56:  MOVFF  226,3B7
2B5A:  CLRF   xBA
2B5C:  MOVLW  04
2B5E:  MOVWF  xB9
2B60:  MOVLB  0
2B62:  RCALL  29C6
2B64:  MOVF   01,W
2B66:  ADDLW  71
2B68:  MOVWF  FE9
2B6A:  MOVLW  02
2B6C:  ADDWFC 02,W
2B6E:  MOVWF  FEA
2B70:  MOVFF  235,FEF
2B74:  MOVFF  236,FEC
2B78:  MOVFF  237,FEC
2B7C:  MOVFF  238,FEC
2B80:  MOVLB  2
2B82:  INCF   x26,F
....................           
....................    for(h=0;h<media;h++) 
2B84:  CLRF   x25
2B86:  MOVLB  3
2B88:  MOVF   xB3,W
2B8A:  MOVLB  2
2B8C:  SUBWF  x25,W
2B8E:  BC    2C0C
....................    { 
....................       Prom+=promedio[h]; 
2B90:  MOVLB  3
2B92:  CLRF   xB8
2B94:  MOVFF  225,3B7
2B98:  CLRF   xBA
2B9A:  MOVLW  04
2B9C:  MOVWF  xB9
2B9E:  MOVLB  0
2BA0:  RCALL  29C6
2BA2:  MOVFF  02,03
2BA6:  MOVF   01,W
2BA8:  ADDLW  71
2BAA:  MOVWF  FE9
2BAC:  MOVLW  02
2BAE:  ADDWFC 02,W
2BB0:  MOVWF  FEA
2BB2:  MOVFF  FEF,00
2BB6:  MOVFF  FEC,01
2BBA:  MOVFF  FEC,02
2BBE:  MOVFF  FEC,03
2BC2:  MOVFF  FEA,3B5
2BC6:  MOVFF  FE9,3B4
2BCA:  BCF    FD8.1
2BCC:  MOVFF  248,3BF
2BD0:  MOVFF  247,3BE
2BD4:  MOVFF  246,3BD
2BD8:  MOVFF  245,3BC
2BDC:  MOVFF  03,3C3
2BE0:  MOVFF  02,3C2
2BE4:  MOVFF  01,3C1
2BE8:  MOVFF  00,3C0
2BEC:  RCALL  26E2
2BEE:  MOVFF  3B5,FEA
2BF2:  MOVFF  3B4,FE9
2BF6:  MOVFF  03,248
2BFA:  MOVFF  02,247
2BFE:  MOVFF  01,246
2C02:  MOVFF  00,245
....................    }  
2C06:  MOVLB  2
2C08:  INCF   x25,F
2C0A:  BRA    2B86
....................    Prom=Prom/media;    
2C0C:  MOVLB  3
2C0E:  CLRF   xBA
2C10:  MOVFF  3B3,3B9
2C14:  MOVLB  0
2C16:  RCALL  24FA
2C18:  MOVFF  248,3BB
2C1C:  MOVFF  247,3BA
2C20:  MOVFF  246,3B9
2C24:  MOVFF  245,3B8
2C28:  MOVFF  03,3BF
2C2C:  MOVFF  02,3BE
2C30:  MOVFF  01,3BD
2C34:  MOVFF  00,3BC
2C38:  RCALL  2584
2C3A:  MOVFF  03,248
2C3E:  MOVFF  02,247
2C42:  MOVFF  01,246
2C46:  MOVFF  00,245
....................    Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
2C4A:  BSF    FD8.1
2C4C:  MOVFF  248,3BF
2C50:  MOVFF  247,3BE
2C54:  MOVFF  246,3BD
2C58:  MOVFF  245,3BC
2C5C:  MOVLB  3
2C5E:  CLRF   xC3
2C60:  CLRF   xC2
2C62:  MOVLW  48
2C64:  MOVWF  xC1
2C66:  MOVLW  85
2C68:  MOVWF  xC0
2C6A:  MOVLB  0
2C6C:  RCALL  26E2
2C6E:  MOVFF  00,3B4
2C72:  MOVFF  01,3B5
2C76:  MOVFF  02,3B6
2C7A:  MOVFF  03,3B7
2C7E:  MOVFF  03,3BB
2C82:  MOVFF  02,3BA
2C86:  MOVFF  01,3B9
2C8A:  MOVFF  00,3B8
2C8E:  MOVLW  B8
2C90:  MOVLB  3
2C92:  MOVWF  xBF
2C94:  MOVLW  1E
2C96:  MOVWF  xBE
2C98:  MOVLW  45
2C9A:  MOVWF  xBD
2C9C:  MOVLW  7D
2C9E:  MOVWF  xBC
2CA0:  MOVLB  0
2CA2:  RCALL  2584
2CA4:  MOVFF  03,24C
2CA8:  MOVFF  02,24B
2CAC:  MOVFF  01,24A
2CB0:  MOVFF  00,249
....................    //Prom+=((float)Ajuste-(float)Ajusten); 
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
2CB4:  MOVLB  3
2CB6:  CLRF   xBA
2CB8:  MOVFF  227,3B9
2CBC:  MOVLB  0
2CBE:  RCALL  24FA
2CC0:  MOVFF  00,3B4
2CC4:  MOVFF  01,3B5
2CC8:  MOVFF  02,3B6
2CCC:  MOVFF  03,3B7
2CD0:  MOVLB  3
2CD2:  CLRF   xBA
2CD4:  MOVFF  228,3B9
2CD8:  MOVLB  0
2CDA:  RCALL  24FA
2CDC:  BSF    FD8.1
2CDE:  MOVFF  3B7,3BF
2CE2:  MOVFF  3B6,3BE
2CE6:  MOVFF  3B5,3BD
2CEA:  MOVFF  3B4,3BC
2CEE:  MOVFF  03,3C3
2CF2:  MOVFF  02,3C2
2CF6:  MOVFF  01,3C1
2CFA:  MOVFF  00,3C0
2CFE:  RCALL  26E2
2D00:  BCF    FD8.1
2D02:  MOVFF  24C,3BF
2D06:  MOVFF  24B,3BE
2D0A:  MOVFF  24A,3BD
2D0E:  MOVFF  249,3BC
2D12:  MOVFF  03,3C3
2D16:  MOVFF  02,3C2
2D1A:  MOVFF  01,3C1
2D1E:  MOVFF  00,3C0
2D22:  RCALL  26E2
2D24:  MOVFF  03,24C
2D28:  MOVFF  02,24B
2D2C:  MOVFF  01,24A
2D30:  MOVFF  00,249
....................     
....................    //return Prom; 
....................    return Temperature; 
2D34:  MOVFF  249,00
2D38:  MOVFF  24A,01
2D3C:  MOVFF  24B,02
2D40:  MOVFF  24C,03
.................... } 
2D44:  RETLW  00
....................  
.................... void Controla(){ 
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
*
421C:  MOVLB  3
421E:  CLRF   xBA
4220:  MOVFF  224,3B9
4224:  MOVLB  0
4226:  CALL   24FA
422A:  BCF    FD8.1
422C:  MOVFF  25C,3BF
4230:  MOVFF  25B,3BE
4234:  MOVFF  25A,3BD
4238:  MOVFF  259,3BC
423C:  MOVFF  03,3C3
4240:  MOVFF  02,3C2
4244:  MOVFF  01,3C1
4248:  MOVFF  00,3C0
424C:  CALL   26E2
4250:  MOVFF  00,3B3
4254:  MOVFF  01,3B4
4258:  MOVFF  02,3B5
425C:  MOVFF  03,3B6
4260:  BSF    FD8.1
4262:  MOVFF  03,3BF
4266:  MOVFF  02,3BE
426A:  MOVFF  01,3BD
426E:  MOVFF  00,3BC
4272:  MOVFF  270,3C3
4276:  MOVFF  26F,3C2
427A:  MOVFF  26E,3C1
427E:  MOVFF  26D,3C0
4282:  CALL   26E2
4286:  MOVFF  03,244
428A:  MOVFF  02,243
428E:  MOVFF  01,242
4292:  MOVFF  00,241
....................     
....................    if(error>0.9 && error<15 && Aumento<0.3) 
4296:  MOVLW  66
4298:  MOVLB  3
429A:  MOVWF  xB6
429C:  MOVWF  xB5
429E:  MOVWF  xB4
42A0:  MOVLW  7E
42A2:  MOVWF  xB3
42A4:  MOVFF  244,3BA
42A8:  MOVFF  243,3B9
42AC:  MOVFF  242,3B8
42B0:  MOVFF  241,3B7
42B4:  MOVLB  0
42B6:  RCALL  41A2
42B8:  BNC   4368
42BA:  MOVFF  244,3B6
42BE:  MOVFF  243,3B5
42C2:  MOVFF  242,3B4
42C6:  MOVFF  241,3B3
42CA:  MOVLB  3
42CC:  CLRF   xBA
42CE:  CLRF   xB9
42D0:  MOVLW  70
42D2:  MOVWF  xB8
42D4:  MOVLW  82
42D6:  MOVWF  xB7
42D8:  MOVLB  0
42DA:  RCALL  41A2
42DC:  BNC   4368
42DE:  MOVFF  26C,3B6
42E2:  MOVFF  26B,3B5
42E6:  MOVFF  26A,3B4
42EA:  MOVFF  269,3B3
42EE:  MOVLW  9A
42F0:  MOVLB  3
42F2:  MOVWF  xBA
42F4:  MOVLW  99
42F6:  MOVWF  xB9
42F8:  MOVLW  19
42FA:  MOVWF  xB8
42FC:  MOVLW  7D
42FE:  MOVWF  xB7
4300:  MOVLB  0
4302:  RCALL  41A2
4304:  BNC   4368
....................    { 
....................       if(Tpulso<9.0) 
4306:  MOVFF  240,3B6
430A:  MOVFF  23F,3B5
430E:  MOVFF  23E,3B4
4312:  MOVFF  23D,3B3
4316:  MOVLB  3
4318:  CLRF   xBA
431A:  CLRF   xB9
431C:  MOVLW  10
431E:  MOVWF  xB8
4320:  MOVLW  82
4322:  MOVWF  xB7
4324:  MOVLB  0
4326:  RCALL  41A2
4328:  BNC   4368
....................       { 
....................          if(TiempoControl>=20) 
432A:  MOVLB  2
432C:  MOVF   x2C,W
432E:  SUBLW  13
4330:  BC    436A
....................          { 
....................             TiempoControl=0; 
4332:  CLRF   x2C
....................             Ganancia+=2; 
4334:  BCF    FD8.1
4336:  MOVFF  254,3BF
433A:  MOVFF  253,3BE
433E:  MOVFF  252,3BD
4342:  MOVFF  251,3BC
4346:  MOVLB  3
4348:  CLRF   xC3
434A:  CLRF   xC2
434C:  CLRF   xC1
434E:  MOVLW  80
4350:  MOVWF  xC0
4352:  MOVLB  0
4354:  CALL   26E2
4358:  MOVFF  03,254
435C:  MOVFF  02,253
4360:  MOVFF  01,252
4364:  MOVFF  00,251
4368:  MOVLB  2
....................          } 
....................       } 
....................    } 
....................     
....................    if(error<=0.3 && tinicio<3000) 
436A:  MOVFF  244,3B6
436E:  MOVFF  243,3B5
4372:  MOVFF  242,3B4
4376:  MOVFF  241,3B3
437A:  MOVLW  9A
437C:  MOVLB  3
437E:  MOVWF  xBA
4380:  MOVLW  99
4382:  MOVWF  xB9
4384:  MOVLW  19
4386:  MOVWF  xB8
4388:  MOVLW  7D
438A:  MOVWF  xB7
438C:  MOVLB  0
438E:  RCALL  41A2
4390:  BC    4394
4392:  BNZ   43C0
4394:  MOVLB  2
4396:  MOVF   x12,W
4398:  SUBLW  0B
439A:  BTFSC  FD8.0
439C:  BRA    43A2
439E:  MOVLB  0
43A0:  BRA    43C0
43A2:  BNZ   43B0
43A4:  MOVF   x11,W
43A6:  SUBLW  B7
43A8:  BTFSC  FD8.0
43AA:  BRA    43B0
43AC:  MOVLB  0
43AE:  BRA    43C0
....................    { 
....................       Ganancia=Ganancia2; 
43B0:  MOVFF  258,254
43B4:  MOVFF  257,253
43B8:  MOVFF  256,252
43BC:  MOVFF  255,251
....................    } 
....................     
....................    if(error<-0.3) 
43C0:  MOVFF  244,3B6
43C4:  MOVFF  243,3B5
43C8:  MOVFF  242,3B4
43CC:  MOVFF  241,3B3
43D0:  MOVLW  9A
43D2:  MOVLB  3
43D4:  MOVWF  xBA
43D6:  MOVLW  99
43D8:  MOVWF  xB9
43DA:  MOVWF  xB8
43DC:  MOVLW  7D
43DE:  MOVWF  xB7
43E0:  MOVLB  0
43E2:  RCALL  41A2
43E4:  BNC   43F6
....................    { 
....................       Ganancia=Ganancia2; 
43E6:  MOVFF  258,254
43EA:  MOVFF  257,253
43EE:  MOVFF  256,252
43F2:  MOVFF  255,251
....................    } 
....................     
....................    if(Ganancia<1) 
43F6:  MOVFF  254,3B6
43FA:  MOVFF  253,3B5
43FE:  MOVFF  252,3B4
4402:  MOVFF  251,3B3
4406:  MOVLB  3
4408:  CLRF   xBA
440A:  CLRF   xB9
440C:  CLRF   xB8
440E:  MOVLW  7F
4410:  MOVWF  xB7
4412:  MOVLB  0
4414:  RCALL  41A2
4416:  BNC   4424
....................    { 
....................       Ganancia=1; 
4418:  MOVLB  2
441A:  CLRF   x54
441C:  CLRF   x53
441E:  CLRF   x52
4420:  MOVLW  7F
4422:  MOVWF  x51
....................    } 
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
4424:  MOVFF  244,3B6
4428:  MOVFF  243,3B5
442C:  MOVFF  242,3B4
4430:  MOVFF  241,3B3
4434:  MOVLB  3
4436:  CLRF   xBA
4438:  CLRF   xB9
443A:  CLRF   xB8
443C:  CLRF   xB7
443E:  MOVLB  0
4440:  RCALL  41A2
4442:  BNC   4450
....................    { 
....................       error=0.0; 
4444:  MOVLB  2
4446:  CLRF   x44
4448:  CLRF   x43
444A:  CLRF   x42
444C:  CLRF   x41
444E:  MOVLB  0
....................    } 
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
4450:  MOVFF  244,3D3
4454:  MOVFF  243,3D2
4458:  MOVFF  242,3D1
445C:  MOVFF  241,3D0
4460:  MOVFF  254,3D7
4464:  MOVFF  253,3D6
4468:  MOVFF  252,3D5
446C:  MOVFF  251,3D4
4470:  RCALL  3FFC
4472:  MOVFF  03,250
4476:  MOVFF  02,24F
447A:  MOVFF  01,24E
447E:  MOVFF  00,24D
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
4482:  MOVLB  3
4484:  CLRF   xBA
4486:  MOVFF  224,3B9
448A:  MOVLB  0
448C:  CALL   24FA
4490:  MOVFF  03,3B6
4494:  MOVFF  02,3B5
4498:  MOVFF  01,3B4
449C:  MOVFF  00,3B3
44A0:  MOVFF  250,3BA
44A4:  MOVFF  24F,3B9
44A8:  MOVFF  24E,3B8
44AC:  MOVFF  24D,3B7
44B0:  RCALL  41A2
44B2:  BNC   44D2
....................    { 
....................       tmp=Setpoint; 
44B4:  MOVLB  3
44B6:  CLRF   xBA
44B8:  MOVFF  224,3B9
44BC:  MOVLB  0
44BE:  CALL   24FA
44C2:  MOVFF  03,250
44C6:  MOVFF  02,24F
44CA:  MOVFF  01,24E
44CE:  MOVFF  00,24D
....................    } 
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
44D2:  MOVFF  250,3B6
44D6:  MOVFF  24F,3B5
44DA:  MOVFF  24E,3B4
44DE:  MOVFF  24D,3B3
44E2:  MOVLB  3
44E4:  CLRF   xBA
44E6:  CLRF   xB9
44E8:  CLRF   xB8
44EA:  CLRF   xB7
44EC:  MOVLB  0
44EE:  RCALL  41A2
44F0:  BNC   44FC
....................    { 
....................       tmp=0.0; 
44F2:  MOVLB  2
44F4:  CLRF   x50
44F6:  CLRF   x4F
44F8:  CLRF   x4E
44FA:  CLRF   x4D
....................    } 
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    Tpulso=(tmp/Setpoint)*Tciclo;   
44FC:  MOVLB  3
44FE:  CLRF   xBA
4500:  MOVFF  224,3B9
4504:  MOVLB  0
4506:  CALL   24FA
450A:  MOVFF  250,3BB
450E:  MOVFF  24F,3BA
4512:  MOVFF  24E,3B9
4516:  MOVFF  24D,3B8
451A:  MOVFF  03,3BF
451E:  MOVFF  02,3BE
4522:  MOVFF  01,3BD
4526:  MOVFF  00,3BC
452A:  CALL   2584
452E:  MOVFF  00,3B3
4532:  MOVFF  01,3B4
4536:  MOVFF  02,3B5
453A:  MOVFF  03,3B6
453E:  MOVFF  03,3D3
4542:  MOVFF  02,3D2
4546:  MOVFF  01,3D1
454A:  MOVFF  00,3D0
454E:  MOVFF  23C,3D7
4552:  MOVFF  23B,3D6
4556:  MOVFF  23A,3D5
455A:  MOVFF  239,3D4
455E:  RCALL  3FFC
4560:  MOVFF  03,240
4564:  MOVFF  02,23F
4568:  MOVFF  01,23E
456C:  MOVFF  00,23D
....................                                        
....................    if(tiempoctrl<=(int16)(Tpulso/0.005)) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
4570:  MOVFF  240,3BB
4574:  MOVFF  23F,3BA
4578:  MOVFF  23E,3B9
457C:  MOVFF  23D,3B8
4580:  MOVLW  0A
4582:  MOVLB  3
4584:  MOVWF  xBF
4586:  MOVLW  D7
4588:  MOVWF  xBE
458A:  MOVLW  23
458C:  MOVWF  xBD
458E:  MOVLW  77
4590:  MOVWF  xBC
4592:  MOVLB  0
4594:  CALL   2584
4598:  MOVFF  03,3B6
459C:  MOVFF  02,3B5
45A0:  MOVFF  01,3B4
45A4:  MOVFF  00,3B3
45A8:  RCALL  3FC0
45AA:  MOVFF  02,03
45AE:  MOVF   01,W
45B0:  MOVLB  2
45B2:  MOVF   x0C,W
45B4:  SUBWF  02,W
45B6:  BNC   45C6
45B8:  BNZ   45C0
45BA:  MOVF   x0B,W
45BC:  SUBWF  01,W
45BE:  BNC   45C6
....................    { 
....................       Resistencia_on; 
45C0:  BSF    F8B.1
45C2:  BCF    F94.1
....................    } 
....................    else          
45C4:  BRA    45CA
....................    { 
....................       Resistencia_off; 
45C6:  BCF    F8B.1
45C8:  BCF    F94.1
....................    } 
....................           
....................    if(tiempoctrl>=(int16)(Tciclo/0.005)) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
45CA:  MOVFF  23C,3BB
45CE:  MOVFF  23B,3BA
45D2:  MOVFF  23A,3B9
45D6:  MOVFF  239,3B8
45DA:  MOVLW  0A
45DC:  MOVLB  3
45DE:  MOVWF  xBF
45E0:  MOVLW  D7
45E2:  MOVWF  xBE
45E4:  MOVLW  23
45E6:  MOVWF  xBD
45E8:  MOVLW  77
45EA:  MOVWF  xBC
45EC:  MOVLB  0
45EE:  CALL   2584
45F2:  MOVFF  03,3B6
45F6:  MOVFF  02,3B5
45FA:  MOVFF  01,3B4
45FE:  MOVFF  00,3B3
4602:  RCALL  3FC0
4604:  MOVF   02,W
4606:  MOVWF  03
4608:  MOVLB  2
460A:  SUBWF  x0C,W
460C:  BNC   461A
460E:  BNZ   4616
4610:  MOVF   01,W
4612:  SUBWF  x0B,W
4614:  BNC   461A
....................    { 
....................       tiempoctrl=0; 
4616:  CLRF   x0C
4618:  CLRF   x0B
....................    } // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
461A:  MOVLB  0
461C:  GOTO   741C (RETURN)
....................  
.................... void main() 
.................... { 
*
492C:  CLRF   FF8
492E:  BCF    FD0.7
4930:  BSF    07.7
4932:  CLRF   FEA
4934:  CLRF   FE9
4936:  CLRF   1C
4938:  CLRF   20
493A:  MOVLW  10
493C:  MOVLB  1
493E:  MOVWF  xF5
4940:  MOVLW  20
4942:  MOVWF  xF6
4944:  MOVLW  10
4946:  MOVWF  xF7
4948:  MOVLW  0B
494A:  MOVWF  xF8
494C:  MOVLW  10
494E:  MOVWF  xF9
4950:  MOVLW  03
4952:  MOVWF  xFA
4954:  MOVLW  10
4956:  MOVWF  xFB
4958:  MOVWF  xFC
495A:  MOVLW  20
495C:  MOVWF  xFD
495E:  MOVLW  24
4960:  MOVWF  xFE
4962:  MOVLW  08
4964:  MOVWF  xFF
4966:  MOVLB  2
4968:  CLRF   x00
496A:  CLRF   x01
496C:  CLRF   x02
496E:  BCF    x03.0
4970:  BCF    x03.1
4972:  BCF    x03.2
4974:  BCF    x03.3
4976:  BCF    x03.4
4978:  BCF    x03.5
497A:  BCF    x03.6
497C:  BCF    x03.7
497E:  BCF    x04.0
4980:  BCF    x04.1
4982:  CLRF   x06
4984:  CLRF   x05
4986:  CLRF   x08
4988:  CLRF   x07
498A:  CLRF   x0A
498C:  CLRF   x09
498E:  CLRF   x0C
4990:  CLRF   x0B
4992:  CLRF   x0E
4994:  MOVLW  0F
4996:  MOVWF  x0D
4998:  CLRF   x10
499A:  CLRF   x0F
499C:  CLRF   x12
499E:  CLRF   x11
49A0:  BCF    x04.2
49A2:  BCF    x04.3
49A4:  BCF    x04.4
49A6:  BCF    x04.5
49A8:  BCF    x04.6
49AA:  BCF    x04.7
49AC:  BCF    x23.0
49AE:  BCF    x23.1
49B0:  BCF    x23.2
49B2:  BCF    x23.3
49B4:  BCF    x23.4
49B6:  BCF    x23.5
49B8:  MOVLW  79
49BA:  MOVWF  x24
49BC:  CLRF   x25
49BE:  CLRF   x26
49C0:  CLRF   x27
49C2:  CLRF   x28
49C4:  CLRF   x29
49C6:  CLRF   x2A
49C8:  CLRF   x2B
49CA:  CLRF   x2C
49CC:  CLRF   x30
49CE:  CLRF   x2F
49D0:  CLRF   x2E
49D2:  CLRF   x2D
49D4:  CLRF   x34
49D6:  MOVLW  C0
49D8:  MOVWF  x33
49DA:  MOVLW  41
49DC:  MOVWF  x32
49DE:  MOVLW  8B
49E0:  MOVWF  x31
49E2:  CLRF   x3C
49E4:  CLRF   x3B
49E6:  MOVLW  20
49E8:  MOVWF  x3A
49EA:  MOVLW  82
49EC:  MOVWF  x39
49EE:  CLRF   x40
49F0:  CLRF   x3F
49F2:  CLRF   x3E
49F4:  CLRF   x3D
49F6:  CLRF   x44
49F8:  CLRF   x43
49FA:  CLRF   x42
49FC:  CLRF   x41
49FE:  CLRF   x48
4A00:  CLRF   x47
4A02:  CLRF   x46
4A04:  CLRF   x45
4A06:  CLRF   x4C
4A08:  CLRF   x4B
4A0A:  CLRF   x4A
4A0C:  CLRF   x49
4A0E:  CLRF   x50
4A10:  CLRF   x4F
4A12:  CLRF   x4E
4A14:  CLRF   x4D
4A16:  CLRF   x54
4A18:  CLRF   x53
4A1A:  MOVLW  48
4A1C:  MOVWF  x52
4A1E:  MOVLW  83
4A20:  MOVWF  x51
4A22:  CLRF   x58
4A24:  CLRF   x57
4A26:  CLRF   x56
4A28:  CLRF   x55
4A2A:  CLRF   x5C
4A2C:  CLRF   x5B
4A2E:  CLRF   x5A
4A30:  MOVLW  80
4A32:  MOVWF  x59
4A34:  CLRF   x60
4A36:  CLRF   x5F
4A38:  CLRF   x5E
4A3A:  CLRF   x5D
4A3C:  CLRF   x6C
4A3E:  CLRF   x6B
4A40:  CLRF   x6A
4A42:  CLRF   x69
4A44:  CLRF   x70
4A46:  CLRF   x6F
4A48:  CLRF   x6E
4A4A:  CLRF   x6D
4A4C:  MOVF   FC1,W
4A4E:  ANDLW  C0
4A50:  IORLW  0F
4A52:  MOVWF  FC1
4A54:  MOVLW  07
4A56:  MOVWF  FB4
4A58:  MOVLW  4A
4A5A:  MOVLB  0
4A5C:  MOVWF  x62
4A5E:  MOVLW  50
4A60:  MOVWF  x63
4A62:  MOVLW  20
4A64:  MOVWF  x64
4A66:  MOVLW  49
4A68:  MOVWF  x65
4A6A:  MOVLW  6E
4A6C:  MOVWF  x66
4A6E:  MOVLW  67
4A70:  MOVWF  x67
4A72:  MOVLW  6C
4A74:  MOVWF  x68
4A76:  MOVLW  6F
4A78:  MOVWF  x69
4A7A:  MOVLW  62
4A7C:  MOVWF  x6A
4A7E:  MOVLW  61
4A80:  MOVWF  x6B
4A82:  MOVLW  6C
4A84:  MOVWF  x6C
4A86:  CLRF   x6D
4A88:  MOVLW  41
4A8A:  MOVWF  x6E
4A8C:  MOVLW  75
4A8E:  MOVWF  x6F
4A90:  MOVLW  74
4A92:  MOVWF  x70
4A94:  MOVLW  6F
4A96:  MOVWF  x71
4A98:  MOVLW  63
4A9A:  MOVWF  x72
4A9C:  MOVLW  6C
4A9E:  MOVWF  x73
4AA0:  MOVLW  61
4AA2:  MOVWF  x74
4AA4:  MOVLW  76
4AA6:  MOVWF  x75
4AA8:  MOVLW  65
4AAA:  MOVWF  x76
4AAC:  MOVLW  20
4AAE:  MOVWF  x77
4AB0:  MOVLW  56
4AB2:  MOVWF  x78
4AB4:  MOVLW  65
4AB6:  MOVWF  x79
4AB8:  MOVLW  72
4ABA:  MOVWF  x7A
4ABC:  MOVLW  74
4ABE:  MOVWF  x7B
4AC0:  MOVLW  69
4AC2:  MOVWF  x7C
4AC4:  MOVLW  63
4AC6:  MOVWF  x7D
4AC8:  MOVLW  61
4ACA:  MOVWF  x7E
4ACC:  MOVLW  6C
4ACE:  MOVWF  x7F
4AD0:  CLRF   x80
4AD2:  MOVLW  54
4AD4:  MOVWF  x81
4AD6:  MOVLW  20
4AD8:  MOVWF  x82
4ADA:  MOVLW  65
4ADC:  MOVWF  x83
4ADE:  MOVLW  73
4AE0:  MOVWF  x84
4AE2:  MOVLW  74
4AE4:  MOVWF  x85
4AE6:  MOVLW  3D
4AE8:  MOVWF  x86
4AEA:  CLRF   x87
4AEC:  MOVLW  54
4AEE:  MOVWF  x88
4AF0:  MOVLW  20
4AF2:  MOVWF  x89
4AF4:  MOVLW  73
4AF6:  MOVWF  x8A
4AF8:  MOVLW  65
4AFA:  MOVWF  x8B
4AFC:  MOVLW  63
4AFE:  MOVWF  x8C
4B00:  MOVLW  3D
4B02:  MOVWF  x8D
4B04:  CLRF   x8E
4B06:  MOVLW  35
4B08:  MOVWF  x8F
4B0A:  MOVWF  x90
4B0C:  MOVLW  20
4B0E:  MOVWF  x91
4B10:  MOVLW  4C
4B12:  MOVWF  x92
4B14:  MOVLW  69
4B16:  MOVWF  x93
4B18:  MOVLW  74
4B1A:  MOVWF  x94
4B1C:  MOVLW  72
4B1E:  MOVWF  x95
4B20:  MOVLW  6F
4B22:  MOVWF  x96
4B24:  MOVLW  73
4B26:  MOVWF  x97
4B28:  CLRF   x98
4B2A:  MOVLW  3E
4B2C:  MOVWF  x99
4B2E:  CLRF   x9A
4B30:  MOVLW  3C
4B32:  MOVWF  x9B
4B34:  CLRF   x9C
4B36:  MOVLW  43
4B38:  MOVWF  x9D
4B3A:  MOVLW  69
4B3C:  MOVWF  x9E
4B3E:  MOVLW  63
4B40:  MOVWF  x9F
4B42:  MOVLW  6C
4B44:  MOVWF  xA0
4B46:  MOVLW  6F
4B48:  MOVWF  xA1
4B4A:  MOVLW  3F
4B4C:  MOVWF  xA2
4B4E:  CLRF   xA3
4B50:  MOVLW  54
4B52:  MOVWF  xA4
4B54:  MOVLW  B0
4B56:  MOVWF  xA5
4B58:  MOVLW  3A
4B5A:  MOVWF  xA6
4B5C:  MOVLW  31
4B5E:  MOVWF  xA7
4B60:  MOVLW  32
4B62:  MOVWF  xA8
4B64:  MOVLW  31
4B66:  MOVWF  xA9
4B68:  MOVLW  B0
4B6A:  MOVWF  xAA
4B6C:  MOVLW  43
4B6E:  MOVWF  xAB
4B70:  CLRF   xAC
4B72:  MOVLW  50
4B74:  MOVWF  xAD
4B76:  MOVLW  72
4B78:  MOVWF  xAE
4B7A:  MOVLW  6F
4B7C:  MOVWF  xAF
4B7E:  MOVLW  63
4B80:  MOVWF  xB0
4B82:  MOVLW  65
4B84:  MOVWF  xB1
4B86:  MOVLW  73
4B88:  MOVWF  xB2
4B8A:  MOVLW  6F
4B8C:  MOVWF  xB3
4B8E:  CLRF   xB4
4B90:  MOVLW  54
4B92:  MOVWF  xB5
4B94:  MOVLW  65
4B96:  MOVWF  xB6
4B98:  MOVLW  78
4B9A:  MOVWF  xB7
4B9C:  MOVLW  74
4B9E:  MOVWF  xB8
4BA0:  MOVLW  69
4BA2:  MOVWF  xB9
4BA4:  MOVLW  6C
4BA6:  MOVWF  xBA
4BA8:  MOVLW  2D
4BAA:  MOVWF  xBB
4BAC:  MOVLW  49
4BAE:  MOVWF  xBC
4BB0:  MOVLW  6E
4BB2:  MOVWF  xBD
4BB4:  MOVLW  73
4BB6:  MOVWF  xBE
4BB8:  MOVLW  74
4BBA:  MOVWF  xBF
4BBC:  MOVLW  72
4BBE:  MOVWF  xC0
4BC0:  MOVLW  75
4BC2:  MOVWF  xC1
4BC4:  MOVLW  6D
4BC6:  MOVWF  xC2
4BC8:  MOVLW  65
4BCA:  MOVWF  xC3
4BCC:  MOVLW  6E
4BCE:  MOVWF  xC4
4BD0:  MOVLW  74
4BD2:  MOVWF  xC5
4BD4:  MOVLW  61
4BD6:  MOVWF  xC6
4BD8:  MOVLW  6C
4BDA:  MOVWF  xC7
4BDC:  CLRF   xC8
4BDE:  MOVLW  43
4BE0:  MOVWF  xC9
4BE2:  MOVLW  61
4BE4:  MOVWF  xCA
4BE6:  MOVLW  6C
4BE8:  MOVWF  xCB
4BEA:  MOVLW  65
4BEC:  MOVWF  xCC
4BEE:  MOVLW  6E
4BF0:  MOVWF  xCD
4BF2:  MOVLW  74
4BF4:  MOVWF  xCE
4BF6:  MOVLW  61
4BF8:  MOVWF  xCF
4BFA:  MOVLW  6E
4BFC:  MOVWF  xD0
4BFE:  MOVLW  64
4C00:  MOVWF  xD1
4C02:  MOVLW  6F
4C04:  MOVWF  xD2
4C06:  CLRF   xD3
4C08:  MOVLW  4E
4C0A:  MOVWF  xD4
4C0C:  MOVLW  69
4C0E:  MOVWF  xD5
4C10:  MOVLW  76
4C12:  MOVWF  xD6
4C14:  MOVLW  65
4C16:  MOVWF  xD7
4C18:  MOVLW  6C
4C1A:  MOVWF  xD8
4C1C:  CLRF   xD9
4C1E:  MOVLW  50
4C20:  MOVWF  xDA
4C22:  MOVLW  72
4C24:  MOVWF  xDB
4C26:  MOVLW  65
4C28:  MOVWF  xDC
4C2A:  MOVLW  2D
4C2C:  MOVWF  xDD
4C2E:  MOVLW  43
4C30:  MOVWF  xDE
4C32:  MOVLW  69
4C34:  MOVWF  xDF
4C36:  MOVLW  63
4C38:  MOVWF  xE0
4C3A:  MOVLW  6C
4C3C:  MOVWF  xE1
4C3E:  MOVLW  6F
4C40:  MOVWF  xE2
4C42:  CLRF   xE3
4C44:  MOVLW  49
4C46:  MOVWF  xE4
4C48:  MOVLW  6E
4C4A:  MOVWF  xE5
4C4C:  MOVLW  73
4C4E:  MOVWF  xE6
4C50:  MOVLW  74
4C52:  MOVWF  xE7
4C54:  MOVLW  72
4C56:  MOVWF  xE8
4C58:  MOVLW  75
4C5A:  MOVWF  xE9
4C5C:  MOVLW  6D
4C5E:  MOVWF  xEA
4C60:  MOVLW  65
4C62:  MOVWF  xEB
4C64:  MOVLW  6E
4C66:  MOVWF  xEC
4C68:  MOVLW  74
4C6A:  MOVWF  xED
4C6C:  MOVLW  61
4C6E:  MOVWF  xEE
4C70:  MOVLW  6C
4C72:  MOVWF  xEF
4C74:  MOVLW  20
4C76:  MOVWF  xF0
4C78:  MOVLW  53
4C7A:  MOVWF  xF1
4C7C:  MOVLW  75
4C7E:  MOVWF  xF2
4C80:  MOVLW  61
4C82:  MOVWF  xF3
4C84:  MOVLW  76
4C86:  MOVWF  xF4
4C88:  MOVLW  65
4C8A:  MOVWF  xF5
4C8C:  CLRF   xF6
4C8E:  MOVLW  45
4C90:  MOVWF  xF7
4C92:  MOVLW  73
4C94:  MOVWF  xF8
4C96:  MOVLW  74
4C98:  MOVWF  xF9
4C9A:  MOVLW  65
4C9C:  MOVWF  xFA
4C9E:  MOVLW  72
4CA0:  MOVWF  xFB
4CA2:  MOVLW  69
4CA4:  MOVWF  xFC
4CA6:  MOVLW  6C
4CA8:  MOVWF  xFD
4CAA:  MOVLW  69
4CAC:  MOVWF  xFE
4CAE:  MOVLW  7A
4CB0:  MOVWF  xFF
4CB2:  MOVLW  61
4CB4:  MOVLB  1
4CB6:  MOVWF  x00
4CB8:  MOVLW  6E
4CBA:  MOVWF  x01
4CBC:  MOVLW  64
4CBE:  MOVWF  x02
4CC0:  MOVLW  6F
4CC2:  MOVWF  x03
4CC4:  CLRF   x04
4CC6:  MOVLW  53
4CC8:  MOVWF  x05
4CCA:  MOVLW  65
4CCC:  MOVWF  x06
4CCE:  MOVLW  63
4CD0:  MOVWF  x07
4CD2:  MOVLW  61
4CD4:  MOVWF  x08
4CD6:  MOVLW  6E
4CD8:  MOVWF  x09
4CDA:  MOVLW  64
4CDC:  MOVWF  x0A
4CDE:  MOVLW  6F
4CE0:  MOVWF  x0B
4CE2:  CLRF   x0C
4CE4:  MOVLW  4C
4CE6:  MOVWF  x0D
4CE8:  MOVLW  69
4CEA:  MOVWF  x0E
4CEC:  MOVLW  71
4CEE:  MOVWF  x0F
4CF0:  MOVLW  75
4CF2:  MOVWF  x10
4CF4:  MOVLW  69
4CF6:  MOVWF  x11
4CF8:  MOVLW  64
4CFA:  MOVWF  x12
4CFC:  MOVLW  6F
4CFE:  MOVWF  x13
4D00:  MOVLW  73
4D02:  MOVWF  x14
4D04:  CLRF   x15
4D06:  MOVLW  3A
4D08:  MOVWF  x16
4D0A:  CLRF   x17
4D0C:  MOVLW  4C
4D0E:  MOVWF  x18
4D10:  MOVLW  69
4D12:  MOVWF  x19
4D14:  MOVLW  62
4D16:  MOVWF  x1A
4D18:  MOVLW  72
4D1A:  MOVWF  x1B
4D1C:  MOVLW  65
4D1E:  MOVWF  x1C
4D20:  CLRF   x1D
4D22:  MOVLW  54
4D24:  MOVWF  x1E
4D26:  MOVLW  3A
4D28:  MOVWF  x1F
4D2A:  MOVLW  31
4D2C:  MOVWF  x20
4D2E:  MOVLW  32
4D30:  MOVWF  x21
4D32:  MOVLW  31
4D34:  MOVWF  x22
4D36:  MOVLW  B0
4D38:  MOVWF  x23
4D3A:  MOVLW  43
4D3C:  MOVWF  x24
4D3E:  CLRF   x25
4D40:  MOVLW  74
4D42:  MOVWF  x26
4D44:  MOVLW  5F
4D46:  MOVWF  x27
4D48:  MOVLW  65
4D4A:  MOVWF  x28
4D4C:  MOVLW  73
4D4E:  MOVWF  x29
4D50:  MOVLW  74
4D52:  MOVWF  x2A
4D54:  MOVLW  3A
4D56:  MOVWF  x2B
4D58:  MOVLW  32
4D5A:  MOVWF  x2C
4D5C:  MOVLW  35
4D5E:  MOVWF  x2D
4D60:  MOVLW  6D
4D62:  MOVWF  x2E
4D64:  CLRF   x2F
4D66:  MOVLW  74
4D68:  MOVWF  x30
4D6A:  MOVLW  5F
4D6C:  MOVWF  x31
4D6E:  MOVLW  73
4D70:  MOVWF  x32
4D72:  MOVLW  65
4D74:  MOVWF  x33
4D76:  MOVLW  63
4D78:  MOVWF  x34
4D7A:  MOVLW  3A
4D7C:  MOVWF  x35
4D7E:  MOVLW  31
4D80:  MOVWF  x36
4D82:  MOVLW  35
4D84:  MOVWF  x37
4D86:  MOVLW  6D
4D88:  MOVWF  x38
4D8A:  CLRF   x39
4D8C:  MOVLW  43
4D8E:  MOVWF  x3A
4D90:  CLRF   x3B
4D92:  MOVLW  74
4D94:  MOVWF  x3C
4D96:  MOVLW  5F
4D98:  MOVWF  x3D
4D9A:  MOVLW  65
4D9C:  MOVWF  x3E
4D9E:  MOVLW  73
4DA0:  MOVWF  x3F
4DA2:  MOVLW  74
4DA4:  MOVWF  x40
4DA6:  MOVLW  3A
4DA8:  MOVWF  x41
4DAA:  MOVLW  35
4DAC:  MOVWF  x42
4DAE:  MOVLW  6D
4DB0:  MOVWF  x43
4DB2:  CLRF   x44
4DB4:  MOVLW  74
4DB6:  MOVWF  x45
4DB8:  MOVLW  5F
4DBA:  MOVWF  x46
4DBC:  MOVLW  73
4DBE:  MOVWF  x47
4DC0:  MOVLW  65
4DC2:  MOVWF  x48
4DC4:  MOVLW  63
4DC6:  MOVWF  x49
4DC8:  MOVLW  3A
4DCA:  MOVWF  x4A
4DCC:  MOVLW  35
4DCE:  MOVWF  x4B
4DD0:  MOVLW  6D
4DD2:  MOVWF  x4C
4DD4:  CLRF   x4D
4DD6:  MOVLW  74
4DD8:  MOVWF  x4E
4DDA:  MOVLW  5F
4DDC:  MOVWF  x4F
4DDE:  MOVLW  65
4DE0:  MOVWF  x50
4DE2:  MOVLW  73
4DE4:  MOVWF  x51
4DE6:  MOVLW  74
4DE8:  MOVWF  x52
4DEA:  MOVLW  3A
4DEC:  MOVWF  x53
4DEE:  MOVLW  31
4DF0:  MOVWF  x54
4DF2:  MOVLW  35
4DF4:  MOVWF  x55
4DF6:  MOVLW  6D
4DF8:  MOVWF  x56
4DFA:  CLRF   x57
4DFC:  MOVLW  44
4DFE:  MOVWF  x58
4E00:  MOVLW  65
4E02:  MOVWF  x59
4E04:  MOVLW  73
4E06:  MOVWF  x5A
4E08:  MOVLW  66
4E0A:  MOVWF  x5B
4E0C:  MOVLW  6F
4E0E:  MOVWF  x5C
4E10:  MOVLW  67
4E12:  MOVWF  x5D
4E14:  MOVLW  75
4E16:  MOVWF  x5E
4E18:  MOVLW  65
4E1A:  MOVWF  x5F
4E1C:  MOVLW  20
4E1E:  MOVWF  x60
4E20:  MOVLW  4C
4E22:  MOVWF  x61
4E24:  MOVLW  65
4E26:  MOVWF  x62
4E28:  MOVLW  6E
4E2A:  MOVWF  x63
4E2C:  MOVLW  74
4E2E:  MOVWF  x64
4E30:  MOVLW  6F
4E32:  MOVWF  x65
4E34:  CLRF   x66
4E36:  MOVLW  54
4E38:  MOVWF  x67
4E3A:  MOVLW  3A
4E3C:  MOVWF  x68
4E3E:  MOVLW  31
4E40:  MOVWF  x69
4E42:  MOVLW  32
4E44:  MOVWF  x6A
4E46:  MOVLW  31
4E48:  MOVWF  x6B
4E4A:  MOVLW  B0
4E4C:  MOVWF  x6C
4E4E:  MOVLW  43
4E50:  MOVWF  x6D
4E52:  CLRF   x6E
4E54:  MOVLW  74
4E56:  MOVWF  x6F
4E58:  MOVLW  5F
4E5A:  MOVWF  x70
4E5C:  MOVLW  65
4E5E:  MOVWF  x71
4E60:  MOVLW  73
4E62:  MOVWF  x72
4E64:  MOVLW  74
4E66:  MOVWF  x73
4E68:  MOVLW  3A
4E6A:  MOVWF  x74
4E6C:  MOVLW  32
4E6E:  MOVWF  x75
4E70:  MOVLW  30
4E72:  MOVWF  x76
4E74:  MOVLW  6D
4E76:  MOVWF  x77
4E78:  CLRF   x78
4E7A:  MOVLW  74
4E7C:  MOVWF  x79
4E7E:  MOVLW  5F
4E80:  MOVWF  x7A
4E82:  MOVLW  73
4E84:  MOVWF  x7B
4E86:  MOVLW  65
4E88:  MOVWF  x7C
4E8A:  MOVLW  63
4E8C:  MOVWF  x7D
4E8E:  MOVLW  3A
4E90:  MOVWF  x7E
4E92:  MOVLW  4E
4E94:  MOVWF  x7F
4E96:  MOVLW  2F
4E98:  MOVWF  x80
4E9A:  MOVLW  41
4E9C:  MOVWF  x81
4E9E:  CLRF   x82
4EA0:  MOVLW  4F
4EA2:  MOVWF  x83
4EA4:  MOVLW  4B
4EA6:  MOVWF  x84
4EA8:  CLRF   x85
4EAA:  MOVLW  54
4EAC:  MOVWF  x86
4EAE:  MOVLW  65
4EB0:  MOVWF  x87
4EB2:  MOVLW  6D
4EB4:  MOVWF  x88
4EB6:  MOVLW  70
4EB8:  MOVWF  x89
4EBA:  MOVLW  65
4EBC:  MOVWF  x8A
4EBE:  MOVLW  72
4EC0:  MOVWF  x8B
4EC2:  MOVLW  61
4EC4:  MOVWF  x8C
4EC6:  MOVLW  74
4EC8:  MOVWF  x8D
4ECA:  MOVLW  75
4ECC:  MOVWF  x8E
4ECE:  MOVLW  72
4ED0:  MOVWF  x8F
4ED2:  MOVLW  61
4ED4:  MOVWF  x90
4ED6:  CLRF   x91
4ED8:  MOVLW  54
4EDA:  MOVWF  x92
4EDC:  MOVLW  20
4EDE:  MOVWF  x93
4EE0:  MOVLW  45
4EE2:  MOVWF  x94
4EE4:  MOVLW  73
4EE6:  MOVWF  x95
4EE8:  MOVLW  74
4EEA:  MOVWF  x96
4EEC:  MOVLW  65
4EEE:  MOVWF  x97
4EF0:  MOVLW  72
4EF2:  MOVWF  x98
4EF4:  MOVLW  69
4EF6:  MOVWF  x99
4EF8:  MOVLW  6C
4EFA:  MOVWF  x9A
4EFC:  MOVLW  69
4EFE:  MOVWF  x9B
4F00:  MOVLW  7A
4F02:  MOVWF  x9C
4F04:  MOVLW  61
4F06:  MOVWF  x9D
4F08:  MOVLW  63
4F0A:  MOVWF  x9E
4F0C:  MOVLW  69
4F0E:  MOVWF  x9F
4F10:  MOVLW  6F
4F12:  MOVWF  xA0
4F14:  MOVLW  6E
4F16:  MOVWF  xA1
4F18:  CLRF   xA2
4F1A:  MOVLW  54
4F1C:  MOVWF  xA3
4F1E:  MOVLW  20
4F20:  MOVWF  xA4
4F22:  MOVLW  53
4F24:  MOVWF  xA5
4F26:  MOVLW  65
4F28:  MOVWF  xA6
4F2A:  MOVLW  63
4F2C:  MOVWF  xA7
4F2E:  MOVLW  61
4F30:  MOVWF  xA8
4F32:  MOVLW  64
4F34:  MOVWF  xA9
4F36:  MOVLW  6F
4F38:  MOVWF  xAA
4F3A:  CLRF   xAB
4F3C:  MOVLW  44
4F3E:  MOVWF  xAC
4F40:  MOVLW  65
4F42:  MOVWF  xAD
4F44:  MOVLW  73
4F46:  MOVWF  xAE
4F48:  MOVLW  66
4F4A:  MOVWF  xAF
4F4C:  MOVLW  6F
4F4E:  MOVWF  xB0
4F50:  MOVLW  67
4F52:  MOVWF  xB1
4F54:  MOVLW  75
4F56:  MOVWF  xB2
4F58:  MOVLW  65
4F5A:  MOVWF  xB3
4F5C:  MOVLW  20
4F5E:  MOVWF  xB4
4F60:  MOVLW  52
4F62:  MOVWF  xB5
4F64:  MOVLW  61
4F66:  MOVWF  xB6
4F68:  MOVLW  70
4F6A:  MOVWF  xB7
4F6C:  MOVLW  69
4F6E:  MOVWF  xB8
4F70:  MOVLW  64
4F72:  MOVWF  xB9
4F74:  MOVLW  6F
4F76:  MOVWF  xBA
4F78:  CLRF   xBB
4F7A:  MOVLW  53
4F7C:  MOVWF  xBC
4F7E:  MOVLW  69
4F80:  MOVWF  xBD
4F82:  CLRF   xBE
4F84:  MOVLW  4E
4F86:  MOVWF  xBF
4F88:  MOVLW  6F
4F8A:  MOVWF  xC0
4F8C:  CLRF   xC1
4F8E:  MOVLW  46
4F90:  MOVWF  xC2
4F92:  MOVLW  69
4F94:  MOVWF  xC3
4F96:  MOVLW  6E
4F98:  MOVWF  xC4
4F9A:  MOVLW  61
4F9C:  MOVWF  xC5
4F9E:  MOVLW  6C
4FA0:  MOVWF  xC6
4FA2:  MOVLW  69
4FA4:  MOVWF  xC7
4FA6:  MOVLW  7A
4FA8:  MOVWF  xC8
4FAA:  MOVLW  61
4FAC:  MOVWF  xC9
4FAE:  MOVLW  64
4FB0:  MOVWF  xCA
4FB2:  MOVLW  6F
4FB4:  MOVWF  xCB
4FB6:  CLRF   xCC
4FB8:  MOVLW  50
4FBA:  MOVWF  xCD
4FBC:  MOVLW  61
4FBE:  MOVWF  xCE
4FC0:  MOVLW  72
4FC2:  MOVWF  xCF
4FC4:  MOVLW  61
4FC6:  MOVWF  xD0
4FC8:  MOVLW  64
4FCA:  MOVWF  xD1
4FCC:  MOVLW  61
4FCE:  MOVWF  xD2
4FD0:  CLRF   xD3
4FD2:  MOVLW  45
4FD4:  MOVWF  xD4
4FD6:  MOVLW  6D
4FD8:  MOVWF  xD5
4FDA:  MOVLW  65
4FDC:  MOVWF  xD6
4FDE:  MOVLW  72
4FE0:  MOVWF  xD7
4FE2:  MOVLW  67
4FE4:  MOVWF  xD8
4FE6:  MOVLW  65
4FE8:  MOVWF  xD9
4FEA:  MOVLW  6E
4FEC:  MOVWF  xDA
4FEE:  MOVLW  63
4FF0:  MOVWF  xDB
4FF2:  MOVLW  69
4FF4:  MOVWF  xDC
4FF6:  MOVLW  61
4FF8:  MOVWF  xDD
4FFA:  CLRF   xDE
4FFC:  MOVLW  55
4FFE:  MOVWF  xDF
5000:  MOVLW  6C
5002:  MOVWF  xE0
5004:  MOVLW  74
5006:  MOVWF  xE1
5008:  MOVLW  69
500A:  MOVWF  xE2
500C:  MOVLW  6D
500E:  MOVWF  xE3
5010:  MOVLW  6F
5012:  MOVWF  xE4
5014:  CLRF   xE5
5016:  MOVLW  50
5018:  MOVWF  xE6
501A:  MOVLW  75
501C:  MOVWF  xE7
501E:  MOVLW  65
5020:  MOVWF  xE8
5022:  MOVLW  72
5024:  MOVWF  xE9
5026:  MOVLW  74
5028:  MOVWF  xEA
502A:  MOVLW  61
502C:  MOVWF  xEB
502E:  CLRF   xEC
5030:  MOVLW  41
5032:  MOVWF  xED
5034:  MOVLW  62
5036:  MOVWF  xEE
5038:  MOVLW  69
503A:  MOVWF  xEF
503C:  MOVLW  65
503E:  MOVWF  xF0
5040:  MOVLW  72
5042:  MOVWF  xF1
5044:  MOVLW  74
5046:  MOVWF  xF2
5048:  MOVLW  61
504A:  MOVWF  xF3
504C:  CLRF   xF4
504E:  MOVLB  2
5050:  CLRF   x13
5052:  CLRF   x14
5054:  CLRF   x15
5056:  CLRF   x16
5058:  CLRF   x17
505A:  CLRF   x18
505C:  CLRF   x19
505E:  CLRF   x1A
5060:  CLRF   x1B
5062:  CLRF   x1C
5064:  CLRF   x1D
5066:  CLRF   x1E
5068:  CLRF   x1F
506A:  CLRF   x20
506C:  CLRF   x21
506E:  CLRF   x22
5070:  CLRF   x61
5072:  CLRF   x62
5074:  CLRF   x63
5076:  CLRF   x64
5078:  CLRF   x65
507A:  CLRF   x66
507C:  CLRF   x67
507E:  CLRF   x68
5080:  CLRF   x71
5082:  CLRF   x72
5084:  CLRF   x73
5086:  CLRF   x74
5088:  CLRF   x75
508A:  CLRF   x76
508C:  CLRF   x77
508E:  CLRF   x78
5090:  CLRF   x79
5092:  CLRF   x7A
5094:  CLRF   x7B
5096:  CLRF   x7C
5098:  CLRF   x7D
509A:  CLRF   x7E
509C:  CLRF   x7F
509E:  CLRF   x80
50A0:  CLRF   x81
50A2:  CLRF   x82
50A4:  CLRF   x83
50A6:  CLRF   x84
50A8:  CLRF   x85
50AA:  CLRF   x86
50AC:  CLRF   x87
50AE:  CLRF   x88
50B0:  CLRF   x89
50B2:  CLRF   x8A
50B4:  CLRF   x8B
50B6:  CLRF   x8C
50B8:  CLRF   x8D
50BA:  CLRF   x8E
50BC:  CLRF   x8F
50BE:  CLRF   x90
50C0:  CLRF   x91
50C2:  CLRF   x92
50C4:  CLRF   x93
50C6:  CLRF   x94
50C8:  CLRF   x95
50CA:  CLRF   x96
50CC:  CLRF   x97
50CE:  CLRF   x98
50D0:  CLRF   x99
50D2:  CLRF   x9A
50D4:  CLRF   x9B
50D6:  CLRF   x9C
50D8:  CLRF   x9D
50DA:  CLRF   x9E
50DC:  CLRF   x9F
50DE:  CLRF   xA0
50E0:  CLRF   xA1
50E2:  CLRF   xA2
50E4:  CLRF   xA3
50E6:  CLRF   xA4
50E8:  CLRF   xA5
50EA:  CLRF   xA6
50EC:  CLRF   xA7
50EE:  CLRF   xA8
50F0:  CLRF   xA9
50F2:  CLRF   xAA
50F4:  CLRF   xAB
50F6:  CLRF   xAC
50F8:  CLRF   xAD
50FA:  CLRF   xAE
50FC:  CLRF   xAF
50FE:  CLRF   xB0
5100:  CLRF   xB1
5102:  CLRF   xB2
5104:  CLRF   xB3
5106:  CLRF   xB4
5108:  CLRF   xB5
510A:  CLRF   xB6
510C:  CLRF   xB7
510E:  CLRF   xB8
5110:  CLRF   xB9
5112:  CLRF   xBA
5114:  CLRF   xBB
5116:  CLRF   xBC
5118:  CLRF   xBD
511A:  CLRF   xBE
511C:  CLRF   xBF
511E:  CLRF   xC0
5120:  CLRF   xC1
5122:  CLRF   xC2
5124:  CLRF   xC3
5126:  CLRF   xC4
5128:  CLRF   xC5
512A:  CLRF   xC6
512C:  CLRF   xC7
512E:  CLRF   xC8
5130:  CLRF   xC9
5132:  CLRF   xCA
5134:  CLRF   xCB
5136:  CLRF   xCC
5138:  CLRF   xCD
513A:  CLRF   xCE
513C:  CLRF   xCF
513E:  CLRF   xD0
5140:  CLRF   xD1
5142:  CLRF   xD2
5144:  CLRF   xD3
5146:  CLRF   xD4
5148:  CLRF   xD5
514A:  CLRF   xD6
514C:  CLRF   xD7
514E:  CLRF   xD8
5150:  CLRF   xD9
5152:  CLRF   xDA
5154:  CLRF   xDB
5156:  CLRF   xDC
5158:  CLRF   xDD
515A:  CLRF   xDE
515C:  CLRF   xDF
515E:  CLRF   xE0
5160:  CLRF   xE1
5162:  CLRF   xE2
5164:  CLRF   xE3
5166:  CLRF   xE4
5168:  CLRF   xE5
516A:  CLRF   xE6
516C:  CLRF   xE7
516E:  CLRF   xE8
5170:  CLRF   xE9
5172:  CLRF   xEA
5174:  CLRF   xEB
5176:  CLRF   xEC
5178:  CLRF   xED
517A:  CLRF   xEE
517C:  CLRF   xEF
517E:  CLRF   xF0
5180:  CLRF   xF1
5182:  CLRF   xF2
5184:  CLRF   xF3
5186:  CLRF   xF4
5188:  CLRF   xF5
518A:  CLRF   xF6
518C:  CLRF   xF7
518E:  CLRF   xF8
5190:  CLRF   xF9
5192:  CLRF   xFA
5194:  CLRF   xFB
5196:  CLRF   xFC
5198:  CLRF   xFD
519A:  CLRF   xFE
519C:  CLRF   xFF
519E:  MOVLB  3
51A0:  CLRF   x00
51A2:  CLRF   x01
51A4:  CLRF   x02
51A6:  CLRF   x03
51A8:  CLRF   x04
51AA:  CLRF   x05
51AC:  CLRF   x06
51AE:  CLRF   x07
51B0:  CLRF   x08
51B2:  CLRF   x09
51B4:  CLRF   x0A
51B6:  CLRF   x0B
51B8:  CLRF   x0C
51BA:  CLRF   x0D
51BC:  CLRF   x0E
51BE:  CLRF   x0F
51C0:  CLRF   x10
51C2:  CLRF   x11
51C4:  CLRF   x12
51C6:  CLRF   x13
51C8:  CLRF   x14
51CA:  CLRF   x15
51CC:  CLRF   x16
51CE:  CLRF   x17
51D0:  CLRF   x18
51D2:  CLRF   x19
51D4:  CLRF   x1A
51D6:  CLRF   x1B
51D8:  CLRF   x1C
51DA:  CLRF   x1D
51DC:  CLRF   x1E
51DE:  CLRF   x1F
51E0:  CLRF   x20
51E2:  CLRF   x21
51E4:  CLRF   x22
51E6:  CLRF   x23
51E8:  CLRF   x24
51EA:  CLRF   x25
51EC:  CLRF   x26
51EE:  CLRF   x27
51F0:  CLRF   x28
51F2:  CLRF   x29
51F4:  CLRF   x2A
51F6:  CLRF   x2B
51F8:  CLRF   x2C
51FA:  CLRF   x2D
51FC:  CLRF   x2E
51FE:  CLRF   x2F
5200:  CLRF   x30
5202:  CLRF   x31
5204:  CLRF   x32
5206:  CLRF   x33
5208:  CLRF   x34
520A:  CLRF   x35
520C:  CLRF   x36
520E:  CLRF   x37
5210:  CLRF   x38
5212:  CLRF   x39
5214:  CLRF   x3A
5216:  CLRF   x3B
5218:  CLRF   x3C
521A:  CLRF   x3D
521C:  CLRF   x3E
521E:  CLRF   x3F
5220:  CLRF   x40
5222:  CLRF   x41
5224:  CLRF   x42
5226:  CLRF   x43
5228:  CLRF   x44
522A:  CLRF   x45
522C:  CLRF   x46
522E:  CLRF   x47
5230:  CLRF   x48
5232:  CLRF   x49
5234:  CLRF   x4A
5236:  CLRF   x4B
5238:  CLRF   x4C
523A:  CLRF   x4D
523C:  CLRF   x4E
523E:  CLRF   x4F
5240:  CLRF   x50
5242:  CLRF   x51
5244:  CLRF   x52
5246:  CLRF   x53
5248:  CLRF   x54
524A:  CLRF   x55
524C:  CLRF   x56
524E:  CLRF   x57
5250:  CLRF   x58
5252:  CLRF   x59
5254:  CLRF   x5A
5256:  CLRF   x5B
5258:  CLRF   x5C
525A:  CLRF   x5D
525C:  CLRF   x5E
525E:  CLRF   x5F
5260:  CLRF   x60
5262:  CLRF   x61
5264:  CLRF   x62
5266:  CLRF   x63
5268:  CLRF   x64
526A:  CLRF   x65
526C:  CLRF   x66
526E:  CLRF   x67
5270:  CLRF   x68
5272:  CLRF   x69
5274:  CLRF   x6A
5276:  CLRF   x6B
5278:  CLRF   x6C
527A:  CLRF   x6D
527C:  CLRF   x6E
527E:  CLRF   x6F
5280:  CLRF   x70
5282:  CLRF   x71
5284:  CLRF   x72
5286:  CLRF   x73
5288:  CLRF   x74
528A:  CLRF   x75
528C:  CLRF   x76
528E:  CLRF   x77
5290:  CLRF   x78
5292:  CLRF   x79
5294:  CLRF   x7A
5296:  CLRF   x7B
5298:  CLRF   x7C
529A:  CLRF   x7D
529C:  CLRF   x7E
529E:  CLRF   x7F
52A0:  CLRF   x80
52A2:  CLRF   x81
52A4:  CLRF   x82
52A6:  CLRF   x83
52A8:  CLRF   x84
52AA:  CLRF   x85
52AC:  CLRF   x86
52AE:  CLRF   x87
52B0:  CLRF   x88
52B2:  CLRF   x89
52B4:  CLRF   x8A
52B6:  CLRF   x8B
52B8:  CLRF   x8C
52BA:  CLRF   x8D
52BC:  CLRF   x8E
52BE:  CLRF   x8F
52C0:  CLRF   x90
52C2:  CLRF   x91
52C4:  CLRF   x92
52C6:  CLRF   x93
52C8:  CLRF   x94
52CA:  CLRF   x95
52CC:  CLRF   x96
52CE:  CLRF   x97
52D0:  CLRF   x98
52D2:  CLRF   x99
52D4:  CLRF   x9A
52D6:  CLRF   x9B
52D8:  CLRF   x9C
52DA:  CLRF   x9D
52DC:  CLRF   x9E
52DE:  CLRF   x9F
52E0:  CLRF   xA0
52E2:  CLRF   xA1
52E4:  CLRF   xA2
52E6:  CLRF   xA3
52E8:  CLRF   xA4
52EA:  CLRF   xA5
52EC:  CLRF   xA6
52EE:  CLRF   xA7
52F0:  CLRF   xA8
52F2:  CLRF   xA9
52F4:  CLRF   xAA
52F6:  CLRF   xAB
52F8:  CLRF   xAC
52FA:  CLRF   xAD
52FC:  CLRF   xAE
52FE:  CLRF   xAF
5300:  CLRF   xB0
5302:  CLRF   xB1
5304:  CLRF   xB2
....................    // TODO: USER CODE!! 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
5306:  MOVLW  85
5308:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
530A:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
530C:  MOVF   FC1,W
530E:  ANDLW  C0
5310:  IORLW  0E
5312:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
5314:  BCF    FC0.0
5316:  BSF    FC0.1
5318:  BCF    FC0.2
531A:  BSF    FC0.7
531C:  BSF    FC2.0
....................    sensores(0); 
531E:  CLRF   xB4
5320:  MOVLB  0
5322:  CALL   2530
....................    output_d(0); 
5326:  CLRF   F95
5328:  CLRF   F8C
....................    Camara_IN_off;Camara_OUT_off;Resistencia_off;Piloto_Fc_off;Piloto_Stop_off;Piloto_Puerta_off; 
532A:  BCF    F8B.2
532C:  BCF    F94.2
532E:  BCF    F8B.0
5330:  BCF    F94.0
5332:  BCF    F8B.1
5334:  BCF    F94.1
5336:  BCF    F8C.0
5338:  BCF    F95.0
533A:  BCF    F8C.1
533C:  BCF    F95.1
533E:  BCF    F8C.2
5340:  BCF    F95.2
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
5342:  MOVFF  FF2,3B3
5346:  BCF    FF2.7
5348:  CLRF   FA9
534A:  BCF    FA6.6
534C:  BCF    FA6.7
534E:  BSF    FA6.0
5350:  MOVF   FA8,W
5352:  MOVLB  3
5354:  BTFSC  xB3.7
5356:  BSF    FF2.7
5358:  MOVLB  2
535A:  MOVWF  x17
535C:  MOVFF  FF2,3B3
5360:  BCF    FF2.7
5362:  MOVLW  01
5364:  MOVWF  FA9
5366:  BCF    FA6.6
5368:  BCF    FA6.7
536A:  BSF    FA6.0
536C:  MOVF   FA8,W
536E:  MOVLB  3
5370:  BTFSC  xB3.7
5372:  BSF    FF2.7
5374:  MOVLB  2
5376:  MOVWF  x18
5378:  MOVFF  FF2,3B3
537C:  BCF    FF2.7
537E:  MOVLW  02
5380:  MOVWF  FA9
5382:  BCF    FA6.6
5384:  BCF    FA6.7
5386:  BSF    FA6.0
5388:  MOVF   FA8,W
538A:  MOVLB  3
538C:  BTFSC  xB3.7
538E:  BSF    FF2.7
5390:  MOVLB  2
5392:  MOVWF  x19
5394:  MOVFF  FF2,3B3
5398:  BCF    FF2.7
539A:  MOVLW  03
539C:  MOVWF  FA9
539E:  BCF    FA6.6
53A0:  BCF    FA6.7
53A2:  BSF    FA6.0
53A4:  MOVF   FA8,W
53A6:  MOVLB  3
53A8:  BTFSC  xB3.7
53AA:  BSF    FF2.7
53AC:  MOVLB  2
53AE:  MOVWF  x1A
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
53B0:  MOVFF  FF2,3B3
53B4:  BCF    FF2.7
53B6:  MOVLW  04
53B8:  MOVWF  FA9
53BA:  BCF    FA6.6
53BC:  BCF    FA6.7
53BE:  BSF    FA6.0
53C0:  MOVF   FA8,W
53C2:  MOVLB  3
53C4:  BTFSC  xB3.7
53C6:  BSF    FF2.7
53C8:  MOVLB  2
53CA:  MOVWF  x1F
53CC:  MOVFF  FF2,3B3
53D0:  BCF    FF2.7
53D2:  MOVLW  05
53D4:  MOVWF  FA9
53D6:  BCF    FA6.6
53D8:  BCF    FA6.7
53DA:  BSF    FA6.0
53DC:  MOVF   FA8,W
53DE:  MOVLB  3
53E0:  BTFSC  xB3.7
53E2:  BSF    FF2.7
53E4:  MOVLB  2
53E6:  MOVWF  x20
53E8:  MOVFF  FF2,3B3
53EC:  BCF    FF2.7
53EE:  MOVLW  06
53F0:  MOVWF  FA9
53F2:  BCF    FA6.6
53F4:  BCF    FA6.7
53F6:  BSF    FA6.0
53F8:  MOVF   FA8,W
53FA:  MOVLB  3
53FC:  BTFSC  xB3.7
53FE:  BSF    FF2.7
5400:  MOVLB  2
5402:  MOVWF  x21
5404:  MOVFF  FF2,3B3
5408:  BCF    FF2.7
540A:  MOVLW  07
540C:  MOVWF  FA9
540E:  BCF    FA6.6
5410:  BCF    FA6.7
5412:  BSF    FA6.0
5414:  MOVF   FA8,W
5416:  MOVLB  3
5418:  BTFSC  xB3.7
541A:  BSF    FF2.7
541C:  MOVLB  2
541E:  MOVWF  x22
5420:  MOVFF  FF2,3B3
5424:  BCF    FF2.7
5426:  MOVLW  08
5428:  MOVWF  FA9
542A:  BCF    FA6.6
542C:  BCF    FA6.7
542E:  BSF    FA6.0
5430:  MOVF   FA8,W
5432:  MOVLB  3
5434:  BTFSC  xB3.7
5436:  BSF    FF2.7
5438:  MOVLB  2
543A:  MOVWF  x24
....................    Nivel=read_eeprom(9);Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12);Ajuste=read_eeprom(13);Ajusten=read_eeprom(14); 
543C:  MOVFF  FF2,3B3
5440:  BCF    FF2.7
5442:  MOVLW  09
5444:  MOVWF  FA9
5446:  BCF    FA6.6
5448:  BCF    FA6.7
544A:  BSF    FA6.0
544C:  MOVF   FA8,W
544E:  MOVLB  3
5450:  BTFSC  xB3.7
5452:  BSF    FF2.7
5454:  MOVLB  2
5456:  CLRF   x10
5458:  MOVWF  x0F
545A:  MOVFF  FF2,3B3
545E:  BCF    FF2.7
5460:  MOVLW  0A
5462:  MOVWF  FA9
5464:  BCF    FA6.6
5466:  BCF    FA6.7
5468:  BSF    FA6.0
546A:  MOVF   FA8,W
546C:  MOVLB  3
546E:  BTFSC  xB3.7
5470:  BSF    FF2.7
5472:  CLRF   xBA
5474:  MOVWF  xB9
5476:  MOVLB  0
5478:  CALL   24FA
547C:  MOVFF  03,254
5480:  MOVFF  02,253
5484:  MOVFF  01,252
5488:  MOVFF  00,251
548C:  MOVFF  FF2,3B3
5490:  BCF    FF2.7
5492:  MOVLW  0B
5494:  MOVWF  FA9
5496:  BCF    FA6.6
5498:  BCF    FA6.7
549A:  BSF    FA6.0
549C:  MOVF   FA8,W
549E:  MOVLB  3
54A0:  BTFSC  xB3.7
54A2:  BSF    FF2.7
54A4:  CLRF   xBA
54A6:  MOVWF  xB9
54A8:  MOVLB  0
54AA:  CALL   24FA
54AE:  MOVFF  03,25C
54B2:  MOVFF  02,25B
54B6:  MOVFF  01,25A
54BA:  MOVFF  00,259
54BE:  MOVFF  FF2,3B3
54C2:  BCF    FF2.7
54C4:  MOVLW  0C
54C6:  MOVWF  FA9
54C8:  BCF    FA6.6
54CA:  BCF    FA6.7
54CC:  BSF    FA6.0
54CE:  MOVF   FA8,W
54D0:  MOVLB  3
54D2:  BTFSC  xB3.7
54D4:  BSF    FF2.7
54D6:  CLRF   xBA
54D8:  MOVWF  xB9
54DA:  MOVLB  0
54DC:  CALL   24FA
54E0:  MOVFF  03,23C
54E4:  MOVFF  02,23B
54E8:  MOVFF  01,23A
54EC:  MOVFF  00,239
54F0:  MOVFF  FF2,3B3
54F4:  BCF    FF2.7
54F6:  MOVLW  0D
54F8:  MOVWF  FA9
54FA:  BCF    FA6.6
54FC:  BCF    FA6.7
54FE:  BSF    FA6.0
5500:  MOVF   FA8,W
5502:  MOVLB  3
5504:  BTFSC  xB3.7
5506:  BSF    FF2.7
5508:  MOVLB  2
550A:  MOVWF  x27
550C:  MOVFF  FF2,3B3
5510:  BCF    FF2.7
5512:  MOVLW  0E
5514:  MOVWF  FA9
5516:  BCF    FA6.6
5518:  BCF    FA6.7
551A:  BSF    FA6.0
551C:  MOVF   FA8,W
551E:  MOVLB  3
5520:  BTFSC  xB3.7
5522:  BSF    FF2.7
5524:  MOVLB  2
5526:  MOVWF  x28
....................    Ganancia2=read_eeprom(15);Minutos=read_eeprom(20);  
5528:  MOVFF  FF2,3B3
552C:  BCF    FF2.7
552E:  MOVLW  0F
5530:  MOVWF  FA9
5532:  BCF    FA6.6
5534:  BCF    FA6.7
5536:  BSF    FA6.0
5538:  MOVF   FA8,W
553A:  MOVLB  3
553C:  BTFSC  xB3.7
553E:  BSF    FF2.7
5540:  CLRF   xBA
5542:  MOVWF  xB9
5544:  MOVLB  0
5546:  CALL   24FA
554A:  MOVFF  03,258
554E:  MOVFF  02,257
5552:  MOVFF  01,256
5556:  MOVFF  00,255
555A:  MOVFF  FF2,3B3
555E:  BCF    FF2.7
5560:  MOVLW  14
5562:  MOVWF  FA9
5564:  BCF    FA6.6
5566:  BCF    FA6.7
5568:  BSF    FA6.0
556A:  MOVF   FA8,W
556C:  MOVLB  3
556E:  BTFSC  xB3.7
5570:  BSF    FF2.7
5572:  MOVLB  2
5574:  CLRF   x0E
5576:  MOVWF  x0D
....................    for(z=0;z<80;z++) 
5578:  CLRF   x02
557A:  MOVF   x02,W
557C:  SUBLW  4F
557E:  BNC   55A2
....................    { 
....................       Temperatura=Leer_Sensor(80); 
5580:  MOVLW  50
5582:  MOVLB  3
5584:  MOVWF  xB3
5586:  MOVLB  0
5588:  CALL   29E8
558C:  MOVFF  03,270
5590:  MOVFF  02,26F
5594:  MOVFF  01,26E
5598:  MOVFF  00,26D
....................    } 
559C:  MOVLB  2
559E:  INCF   x02,F
55A0:  BRA    557A
....................    usb_init(); 
55A2:  MOVLB  0
55A4:  GOTO   2DB8
....................    usb_task(); 
55A8:  CALL   2D96
....................    glcd_init(ON);             //Inicializa la glcd 
55AC:  MOVLW  01
55AE:  MOVLB  3
55B0:  MOVWF  xB3
55B2:  MOVLB  0
55B4:  GOTO   2E94
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
55B8:  MOVLB  3
55BA:  CLRF   xB4
55BC:  MOVLB  0
55BE:  CALL   2E06
....................    glcd_text57(0, 0, JP, 2, ON);            // Write the new voltage 
55C2:  MOVLB  3
55C4:  CLRF   xC3
55C6:  CLRF   xC4
55C8:  CLRF   xC6
55CA:  MOVLW  62
55CC:  MOVWF  xC5
55CE:  MOVLW  02
55D0:  MOVWF  xC7
55D2:  MOVLW  01
55D4:  MOVWF  xC8
55D6:  MOVLB  0
55D8:  CALL   306A
....................    glcd_text57(10, 20, Autoclave, 1, ON);            // Write the new voltage 
55DC:  MOVLW  0A
55DE:  MOVLB  3
55E0:  MOVWF  xC3
55E2:  MOVLW  14
55E4:  MOVWF  xC4
55E6:  CLRF   xC6
55E8:  MOVLW  6E
55EA:  MOVWF  xC5
55EC:  MOVLW  01
55EE:  MOVWF  xC7
55F0:  MOVWF  xC8
55F2:  MOVLB  0
55F4:  CALL   306A
....................    glcd_text57(30, 40, Lts, 1, ON);            // Write the new voltage 
55F8:  MOVLW  1E
55FA:  MOVLB  3
55FC:  MOVWF  xC3
55FE:  MOVLW  28
5600:  MOVWF  xC4
5602:  CLRF   xC6
5604:  MOVLW  8F
5606:  MOVWF  xC5
5608:  MOVLW  01
560A:  MOVWF  xC7
560C:  MOVWF  xC8
560E:  MOVLB  0
5610:  CALL   306A
....................    delay_ms(2000); 
5614:  MOVLW  08
5616:  MOVLB  3
5618:  MOVWF  xB3
561A:  MOVLW  FA
561C:  MOVWF  xB9
561E:  MOVLB  0
5620:  CALL   24D0
5624:  MOVLB  3
5626:  DECFSZ xB3,F
5628:  BRA    561A
....................    if(UP&&RIGHT) 
562A:  BSF    F92.1
562C:  BTFSS  F80.1
562E:  BRA    5758
5630:  BSF    F92.3
5632:  BTFSS  F80.3
5634:  BRA    5758
....................    {glcd_fillScreen(OFF);      //Limpia la pantalla 
5636:  CLRF   xB4
5638:  MOVLB  0
563A:  CALL   2E06
....................       delay_ms(2000); 
563E:  MOVLW  08
5640:  MOVLB  3
5642:  MOVWF  xB3
5644:  MOVLW  FA
5646:  MOVWF  xB9
5648:  MOVLB  0
564A:  CALL   24D0
564E:  MOVLB  3
5650:  DECFSZ xB3,F
5652:  BRA    5644
....................       for(;;) 
....................       { 
....................          if(UP) 
5654:  BSF    F92.1
5656:  BTFSS  F80.1
5658:  BRA    56AE
....................          {Minutos++;delay_ms(40);write_eeprom(20,Minutos);delay_ms(300);} 
565A:  MOVLB  2
565C:  INCF   x0D,F
565E:  BTFSC  FD8.2
5660:  INCF   x0E,F
5662:  MOVLW  28
5664:  MOVLB  3
5666:  MOVWF  xB9
5668:  MOVLB  0
566A:  CALL   24D0
566E:  MOVLW  14
5670:  MOVWF  FA9
5672:  MOVFF  20D,FA8
5676:  BCF    FA6.6
5678:  BCF    FA6.7
567A:  BSF    FA6.2
567C:  MOVF   FF2,W
567E:  MOVWF  00
5680:  BCF    FF2.7
5682:  MOVLB  F
5684:  MOVLW  55
5686:  MOVWF  FA7
5688:  MOVLW  AA
568A:  MOVWF  FA7
568C:  BSF    FA6.1
568E:  BTFSC  FA6.1
5690:  BRA    568E
5692:  BCF    FA6.2
5694:  MOVF   00,W
5696:  IORWF  FF2,F
5698:  MOVLW  02
569A:  MOVLB  3
569C:  MOVWF  xB3
569E:  MOVLW  96
56A0:  MOVWF  xB9
56A2:  MOVLB  0
56A4:  CALL   24D0
56A8:  MOVLB  3
56AA:  DECFSZ xB3,F
56AC:  BRA    569E
....................          if(DOWN) 
56AE:  BSF    F92.2
56B0:  BTFSS  F80.2
56B2:  BRA    570A
....................          {Minutos--;delay_ms(40);write_eeprom(20,Minutos);delay_ms(300);} 
56B4:  MOVLB  2
56B6:  MOVF   x0D,W
56B8:  BTFSC  FD8.2
56BA:  DECF   x0E,F
56BC:  DECF   x0D,F
56BE:  MOVLW  28
56C0:  MOVLB  3
56C2:  MOVWF  xB9
56C4:  MOVLB  0
56C6:  CALL   24D0
56CA:  MOVLW  14
56CC:  MOVWF  FA9
56CE:  MOVFF  20D,FA8
56D2:  BCF    FA6.6
56D4:  BCF    FA6.7
56D6:  BSF    FA6.2
56D8:  MOVF   FF2,W
56DA:  MOVWF  00
56DC:  BCF    FF2.7
56DE:  MOVLB  F
56E0:  MOVLW  55
56E2:  MOVWF  FA7
56E4:  MOVLW  AA
56E6:  MOVWF  FA7
56E8:  BSF    FA6.1
56EA:  BTFSC  FA6.1
56EC:  BRA    56EA
56EE:  BCF    FA6.2
56F0:  MOVF   00,W
56F2:  IORWF  FF2,F
56F4:  MOVLW  02
56F6:  MOVLB  3
56F8:  MOVWF  xB3
56FA:  MOVLW  96
56FC:  MOVWF  xB9
56FE:  MOVLB  0
5700:  CALL   24D0
5704:  MOVLB  3
5706:  DECFSZ xB3,F
5708:  BRA    56FA
....................          if(RIGHT) 
570A:  BSF    F92.3
570C:  BTFSS  F80.3
570E:  BRA    573E
....................          {write_eeprom(20,Minutos);reset_cpu();} 
5710:  MOVLW  14
5712:  MOVWF  FA9
5714:  MOVFF  20D,FA8
5718:  BCF    FA6.6
571A:  BCF    FA6.7
571C:  BSF    FA6.2
571E:  MOVF   FF2,W
5720:  MOVWF  00
5722:  BCF    FF2.7
5724:  MOVLB  F
5726:  MOVLW  55
5728:  MOVWF  FA7
572A:  MOVLW  AA
572C:  MOVWF  FA7
572E:  BSF    FA6.1
5730:  BTFSC  FA6.1
5732:  BRA    5730
5734:  BCF    FA6.2
5736:  MOVF   00,W
5738:  IORWF  FF2,F
573A:  RESET
573C:  MOVLB  3
....................          displayTiempo(Minutos,20,40,4); 
573E:  MOVFF  20D,3B4
5742:  MOVLW  14
5744:  MOVWF  xB5
5746:  MOVLW  28
5748:  MOVWF  xB6
574A:  MOVLW  04
574C:  MOVWF  xB7
574E:  MOVLB  0
5750:  CALL   35CC
....................       } 
5754:  MOVLB  3
5756:  BRA    5654
....................    } 
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
5758:  CLRF   xB4
575A:  MOVLB  0
575C:  CALL   2E06
....................    while(true) 
....................    { 
....................      
....................     if(Expulsa==1) 
5760:  MOVLB  2
5762:  BTFSS  x04.7
5764:  BRA    5786
....................    {         
....................       Temperatura=Leer_Sensor(80); 
5766:  MOVLW  50
5768:  MOVLB  3
576A:  MOVWF  xB3
576C:  MOVLB  0
576E:  CALL   29E8
5772:  MOVFF  03,270
5776:  MOVFF  02,26F
577A:  MOVFF  01,26E
577E:  MOVFF  00,26D
....................       Expulsa=0; 
5782:  MOVLB  2
5784:  BCF    x04.7
....................    }  
....................     
....................    while(STOP)       
....................       {delay_ms(100); 
5786:  BSF    F96.0
5788:  BTFSC  F84.0
578A:  BRA    580E
578C:  MOVLW  64
578E:  MOVLB  3
5790:  MOVWF  xB9
5792:  MOVLB  0
5794:  CALL   24D0
....................       if(emergency==0) 
5798:  MOVLB  2
579A:  BTFSC  x04.1
579C:  BRA    57EC
....................          {glcd_fillScreen(OFF); glcd_text57(20, 0, Parada, 2, ON);glcd_text57(0, 40, Emergencia, 2, ON);Menu=16;}  
579E:  MOVLB  3
57A0:  CLRF   xB4
57A2:  MOVLB  0
57A4:  CALL   2E06
57A8:  MOVLW  14
57AA:  MOVLB  3
57AC:  MOVWF  xC3
57AE:  CLRF   xC4
57B0:  MOVLW  01
57B2:  MOVWF  xC6
57B4:  MOVLW  CD
57B6:  MOVWF  xC5
57B8:  MOVLW  02
57BA:  MOVWF  xC7
57BC:  MOVLW  01
57BE:  MOVWF  xC8
57C0:  MOVLB  0
57C2:  CALL   306A
57C6:  MOVLB  3
57C8:  CLRF   xC3
57CA:  MOVLW  28
57CC:  MOVWF  xC4
57CE:  MOVLW  01
57D0:  MOVWF  xC6
57D2:  MOVLW  D4
57D4:  MOVWF  xC5
57D6:  MOVLW  02
57D8:  MOVWF  xC7
57DA:  MOVLW  01
57DC:  MOVWF  xC8
57DE:  MOVLB  0
57E0:  CALL   306A
57E4:  MOVLW  10
57E6:  MOVLB  1
57E8:  MOVWF  xF5
57EA:  MOVLB  2
....................          Camara_IN_on;Camara_OUT_on;Piloto_Stop_on;Resistencia_off;emergency=1; 
57EC:  BSF    F8B.2
57EE:  BCF    F94.2
57F0:  BSF    F8B.0
57F2:  BCF    F94.0
57F4:  BSF    F8C.1
57F6:  BCF    F95.1
57F8:  BCF    F8B.1
57FA:  BCF    F94.1
57FC:  BSF    x04.1
....................         delay_ms(100);  
57FE:  MOVLW  64
5800:  MOVLB  3
5802:  MOVWF  xB9
5804:  MOVLB  0
5806:  CALL   24D0
....................       }    
580A:  MOVLB  2
580C:  BRA    5786
....................    if(!STOP) 
580E:  BSF    F96.0
5810:  BTFSS  F84.0
5812:  BRA    5834
....................       { 
....................          if(emergency==1) 
5814:  BTFSS  x04.1
5816:  BRA    5834
....................          {glcd_fillScreen(OFF);Camara_IN_off;Camara_OUT_off;Piloto_Stop_off;emergency=0;reset_cpu();} 
5818:  MOVLB  3
581A:  CLRF   xB4
581C:  MOVLB  0
581E:  CALL   2E06
5822:  BCF    F8B.2
5824:  BCF    F94.2
5826:  BCF    F8B.0
5828:  BCF    F94.0
582A:  BCF    F8C.1
582C:  BCF    F95.1
582E:  MOVLB  2
5830:  BCF    x04.1
5832:  RESET
....................       } 
....................     
....................    while(PUERTA)       
....................       {delay_ms(100); 
5834:  BSF    F96.2
5836:  BTFSC  F84.2
5838:  BRA    58BE
583A:  MOVLW  64
583C:  MOVLB  3
583E:  MOVWF  xB9
5840:  MOVLB  0
5842:  CALL   24D0
....................       if(door==0) 
5846:  MOVLB  2
5848:  BTFSC  x23.4
584A:  BRA    589C
....................          {glcd_fillScreen(OFF); glcd_text57(20, 0, Puertas, 2, ON);glcd_text57(15, 40, Abierta, 2, ON);Menu=16;}  
584C:  MOVLB  3
584E:  CLRF   xB4
5850:  MOVLB  0
5852:  CALL   2E06
5856:  MOVLW  14
5858:  MOVLB  3
585A:  MOVWF  xC3
585C:  CLRF   xC4
585E:  MOVLW  01
5860:  MOVWF  xC6
5862:  MOVLW  E6
5864:  MOVWF  xC5
5866:  MOVLW  02
5868:  MOVWF  xC7
586A:  MOVLW  01
586C:  MOVWF  xC8
586E:  MOVLB  0
5870:  CALL   306A
5874:  MOVLW  0F
5876:  MOVLB  3
5878:  MOVWF  xC3
587A:  MOVLW  28
587C:  MOVWF  xC4
587E:  MOVLW  01
5880:  MOVWF  xC6
5882:  MOVLW  ED
5884:  MOVWF  xC5
5886:  MOVLW  02
5888:  MOVWF  xC7
588A:  MOVLW  01
588C:  MOVWF  xC8
588E:  MOVLB  0
5890:  CALL   306A
5894:  MOVLW  10
5896:  MOVLB  1
5898:  MOVWF  xF5
589A:  MOVLB  2
....................          Camara_IN_off;Camara_OUT_off;Piloto_Puerta_on;Resistencia_off;door=1; 
589C:  BCF    F8B.2
589E:  BCF    F94.2
58A0:  BCF    F8B.0
58A2:  BCF    F94.0
58A4:  BSF    F8C.2
58A6:  BCF    F95.2
58A8:  BCF    F8B.1
58AA:  BCF    F94.1
58AC:  BSF    x23.4
....................         delay_ms(100);  
58AE:  MOVLW  64
58B0:  MOVLB  3
58B2:  MOVWF  xB9
58B4:  MOVLB  0
58B6:  CALL   24D0
....................       }    
58BA:  MOVLB  2
58BC:  BRA    5834
....................    if(!PUERTA) 
58BE:  BSF    F96.2
58C0:  BTFSS  F84.2
58C2:  BRA    58E4
....................       { 
....................          if(door==1) 
58C4:  BTFSS  x23.4
58C6:  BRA    58E4
....................          {glcd_fillScreen(OFF);Camara_IN_off;Camara_OUT_off;Piloto_Puerta_off;door=0;reset_cpu();} 
58C8:  MOVLB  3
58CA:  CLRF   xB4
58CC:  MOVLB  0
58CE:  CALL   2E06
58D2:  BCF    F8B.2
58D4:  BCF    F94.2
58D6:  BCF    F8B.0
58D8:  BCF    F94.0
58DA:  BCF    F8C.2
58DC:  BCF    F95.2
58DE:  MOVLB  2
58E0:  BCF    x23.4
58E2:  RESET
....................       } 
....................        
....................     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==16){ //Menu de Seleccion de Proceso. 
58E4:  MOVLB  1
58E6:  MOVF   xF5,W
58E8:  SUBLW  10
58EA:  BTFSS  FD8.2
58EC:  BRA    5AA0
....................       glcd_text57(15, 0, Proc, 2, ON);            // Escribe Proceso en Tamaño 2.  
58EE:  MOVLW  0F
58F0:  MOVLB  3
58F2:  MOVWF  xC3
58F4:  CLRF   xC4
58F6:  CLRF   xC6
58F8:  MOVLW  AD
58FA:  MOVWF  xC5
58FC:  MOVLW  02
58FE:  MOVWF  xC7
5900:  MOVLW  01
5902:  MOVWF  xC8
5904:  MOVLB  0
5906:  CALL   306A
....................          
....................       if(UP)//Si oprime hacia arriba 
590A:  BSF    F92.1
590C:  BTFSS  F80.1
590E:  BRA    5958
....................       {  if(Flanco == 0)  
5910:  MOVLB  2
5912:  BTFSC  x03.5
5914:  BRA    5956
....................             {Flecha2=Flecha2-8;Flecha=Flecha-8;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);glcd_text57(0, Flecha+8, Fle, 1, OFF);}} 
5916:  MOVLW  08
5918:  MOVLB  1
591A:  SUBWF  xFB,F
591C:  SUBWF  xF9,F
591E:  MOVLW  01
5920:  ADDWF  xF9,W
5922:  MOVWF  xFA
5924:  MOVLB  2
5926:  BSF    x03.5
5928:  MOVLW  1E
592A:  MOVLB  3
592C:  MOVWF  xB9
592E:  MOVLB  0
5930:  CALL   24D0
5934:  MOVLW  08
5936:  MOVLB  1
5938:  ADDWF  xF9,W
593A:  MOVLB  3
593C:  MOVWF  xB3
593E:  CLRF   xC3
5940:  MOVWF  xC4
5942:  CLRF   xC6
5944:  MOVLW  99
5946:  MOVWF  xC5
5948:  MOVLW  01
594A:  MOVWF  xC7
594C:  CLRF   xC8
594E:  MOVLB  0
5950:  CALL   306A
5954:  MOVLB  2
....................          else 
5956:  BRA    595C
....................             {Flanco = 0;} 
5958:  MOVLB  2
595A:  BCF    x03.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
595C:  BSF    F92.2
595E:  BTFSS  F80.2
5960:  BRA    59A8
....................       {  if(Flanco2 == 0)  
5962:  BTFSC  x03.7
5964:  BRA    59A6
....................             {Flecha2=Flecha2+8;Flecha=Flecha+8;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);glcd_text57(0, Flecha-8, Fle, 1, OFF);}} 
5966:  MOVLW  08
5968:  MOVLB  1
596A:  ADDWF  xFB,F
596C:  ADDWF  xF9,F
596E:  MOVLW  01
5970:  SUBWF  xF9,W
5972:  MOVWF  xFA
5974:  MOVLB  2
5976:  BSF    x03.7
5978:  MOVLW  1E
597A:  MOVLB  3
597C:  MOVWF  xB9
597E:  MOVLB  0
5980:  CALL   24D0
5984:  MOVLW  08
5986:  MOVLB  1
5988:  SUBWF  xF9,W
598A:  MOVLB  3
598C:  MOVWF  xB3
598E:  CLRF   xC3
5990:  MOVWF  xC4
5992:  CLRF   xC6
5994:  MOVLW  99
5996:  MOVWF  xC5
5998:  MOVLW  01
599A:  MOVWF  xC7
599C:  CLRF   xC8
599E:  MOVLB  0
59A0:  CALL   306A
59A4:  MOVLB  2
....................          else 
59A6:  BRA    59AA
....................             {Flanco2 = 0;} 
59A8:  BCF    x03.7
....................          
....................         if(Flecha2>n_opcionH+16) 
59AA:  MOVLW  10
59AC:  MOVLB  1
59AE:  ADDWF  xF6,W
59B0:  SUBWF  xFB,W
59B2:  BZ    59C2
59B4:  BNC   59C2
....................         {Flecha2=n_opcionL;Flecha=nMenuL;nMenuL=Flecha2;} 
59B6:  MOVFF  1F7,1FB
59BA:  MOVFF  1FC,1F9
59BE:  MOVFF  1FB,1FC
....................          
....................         if(Flecha2<n_opcionL) 
59C2:  MOVF   xF7,W
59C4:  SUBWF  xFB,W
59C6:  BC    59D8
....................         {Flecha2=n_opcionH+16;Flecha=nMenuH+16;Flecha=Flecha2;}                
59C8:  MOVLW  10
59CA:  ADDWF  xF6,W
59CC:  MOVWF  xFB
59CE:  MOVLW  10
59D0:  ADDWF  xFD,W
59D2:  MOVWF  xF9
59D4:  MOVFF  1FB,1F9
....................          
....................          
....................         mensajes(5,n_opcionL); 
59D8:  MOVLW  05
59DA:  MOVLB  3
59DC:  MOVWF  xB4
59DE:  MOVFF  1F7,3B5
59E2:  MOVLB  0
59E4:  CALL   378E
....................         mensajes(7,n_opcionL+8); 
59E8:  MOVLW  08
59EA:  MOVLB  1
59EC:  ADDWF  xF7,W
59EE:  MOVLB  3
59F0:  MOVWF  xB3
59F2:  MOVLW  07
59F4:  MOVWF  xB4
59F6:  MOVFF  3B3,3B5
59FA:  MOVLB  0
59FC:  CALL   378E
....................         mensajes(6,n_opcionL+16); 
5A00:  MOVLW  10
5A02:  MOVLB  1
5A04:  ADDWF  xF7,W
5A06:  MOVLB  3
5A08:  MOVWF  xB3
5A0A:  MOVLW  06
5A0C:  MOVWF  xB4
5A0E:  MOVFF  3B3,3B5
5A12:  MOVLB  0
5A14:  CALL   378E
....................         mensajes(4,n_opcionL+24); 
5A18:  MOVLW  18
5A1A:  MOVLB  1
5A1C:  ADDWF  xF7,W
5A1E:  MOVLB  3
5A20:  MOVWF  xB3
5A22:  MOVLW  04
5A24:  MOVWF  xB4
5A26:  MOVFF  3B3,3B5
5A2A:  MOVLB  0
5A2C:  CALL   378E
....................         mensajes(8,n_opcionL+32); 
5A30:  MOVLW  20
5A32:  MOVLB  1
5A34:  ADDWF  xF7,W
5A36:  MOVLB  3
5A38:  MOVWF  xB3
5A3A:  MOVLW  08
5A3C:  MOVWF  xB4
5A3E:  MOVFF  3B3,3B5
5A42:  MOVLB  0
5A44:  CALL   378E
....................  
....................         glcd_text57(0, Flecha, Fle, 1, ON);            // Write the new voltage         
5A48:  MOVLB  3
5A4A:  CLRF   xC3
5A4C:  MOVFF  1F9,3C4
5A50:  CLRF   xC6
5A52:  MOVLW  99
5A54:  MOVWF  xC5
5A56:  MOVLW  01
5A58:  MOVWF  xC7
5A5A:  MOVWF  xC8
5A5C:  MOVLB  0
5A5E:  CALL   306A
....................        
....................  
....................       if(RIGHT)// Si oprime derecha 
5A62:  BSF    F92.3
5A64:  BTFSS  F80.3
5A66:  BRA    5A9A
....................       {  if(Flanco1 == 0)  
5A68:  MOVLB  2
5A6A:  BTFSC  x03.6
5A6C:  BRA    5A98
....................             {Flanco1 = 1;Menu=Flecha2+1;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF); }} 
5A6E:  BSF    x03.6
5A70:  MOVLW  01
5A72:  MOVLB  1
5A74:  ADDWF  xFB,W
5A76:  MOVWF  xF5
5A78:  MOVFF  1F7,1FB
5A7C:  MOVFF  1F7,1F9
5A80:  MOVLW  1E
5A82:  MOVLB  3
5A84:  MOVWF  xB9
5A86:  MOVLB  0
5A88:  CALL   24D0
5A8C:  MOVLB  3
5A8E:  CLRF   xB4
5A90:  MOVLB  0
5A92:  CALL   2E06
5A96:  MOVLB  2
....................          else 
5A98:  BRA    5A9E
....................             {Flanco1 = 0;}    
5A9A:  MOVLB  2
5A9C:  BCF    x03.6
5A9E:  MOVLB  1
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //-Sub-Menus de selección de proceso. 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==17){ // Menu de Pre-ciclo 
5AA0:  MOVF   xF5,W
5AA2:  SUBLW  11
5AA4:  BTFSS  FD8.2
5AA6:  BRA    5C36
....................       glcd_imagen(2); //Guante 
5AA8:  MOVLW  02
5AAA:  MOVLB  3
5AAC:  MOVWF  xB3
5AAE:  MOVLB  0
5AB0:  CALL   389A
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5AB4:  MOVLW  3F
5AB6:  MOVLB  3
5AB8:  MOVWF  xC5
5ABA:  MOVLW  28
5ABC:  MOVWF  xC6
5ABE:  MOVLW  64
5AC0:  MOVWF  xC7
5AC2:  MOVLW  35
5AC4:  MOVWF  xC8
5AC6:  MOVLW  01
5AC8:  MOVWF  xC9
5ACA:  MOVWF  xCA
5ACC:  MOVLB  0
5ACE:  CALL   350A
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
5AD2:  MOVLW  4C
5AD4:  MOVLB  3
5AD6:  MOVWF  xC3
5AD8:  MOVLW  2C
5ADA:  MOVWF  xC4
5ADC:  MOVLW  01
5ADE:  MOVWF  xC6
5AE0:  MOVLW  83
5AE2:  MOVWF  xC5
5AE4:  MOVLW  01
5AE6:  MOVWF  xC7
5AE8:  CLRF   xC8
5AEA:  MOVLB  0
5AEC:  CALL   306A
....................          
....................       mensajes(5,55); 
5AF0:  MOVLW  05
5AF2:  MOVLB  3
5AF4:  MOVWF  xB4
5AF6:  MOVLW  37
5AF8:  MOVWF  xB5
5AFA:  MOVLB  0
5AFC:  CALL   378E
....................       //glcd_text57(60, 0, DuracionC, 1, ON);            // Write the new voltage         
....................       glcd_text57(53, 10, Tempe_pre, 1, ON);            // Write the new voltage         
5B00:  MOVLW  35
5B02:  MOVLB  3
5B04:  MOVWF  xC3
5B06:  MOVLW  0A
5B08:  MOVWF  xC4
5B0A:  CLRF   xC6
5B0C:  MOVLW  A4
5B0E:  MOVWF  xC5
5B10:  MOVLW  01
5B12:  MOVWF  xC7
5B14:  MOVWF  xC8
5B16:  MOVLB  0
5B18:  CALL   306A
....................       glcd_text57(53, 20, TestC, 1, ON); 
5B1C:  MOVLW  35
5B1E:  MOVLB  3
5B20:  MOVWF  xC3
5B22:  MOVLW  14
5B24:  MOVWF  xC4
5B26:  MOVLW  01
5B28:  MOVWF  xC6
5B2A:  MOVLW  3C
5B2C:  MOVWF  xC5
5B2E:  MOVLW  01
5B30:  MOVWF  xC7
5B32:  MOVWF  xC8
5B34:  MOVLB  0
5B36:  CALL   306A
....................       glcd_text57(53, 30, TsecC, 1, ON); 
5B3A:  MOVLW  35
5B3C:  MOVLB  3
5B3E:  MOVWF  xC3
5B40:  MOVLW  1E
5B42:  MOVWF  xC4
5B44:  MOVLW  01
5B46:  MOVWF  xC6
5B48:  MOVLW  45
5B4A:  MOVWF  xC5
5B4C:  MOVLW  01
5B4E:  MOVWF  xC7
5B50:  MOVWF  xC8
5B52:  MOVLB  0
5B54:  CALL   306A
....................        
....................       if(LEFT)// Si oprime Izquier|da 
5B58:  BSF    F92.5
5B5A:  BTFSS  F80.5
5B5C:  BRA    5B9A
....................        {  if(Flanco3 == 0)  
5B5E:  MOVLB  2
5B60:  BTFSC  x04.0
5B62:  BRA    5B98
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5B64:  BSF    x04.0
5B66:  MOVLW  1E
5B68:  MOVLB  3
5B6A:  MOVWF  xB9
5B6C:  MOVLB  0
5B6E:  CALL   24D0
5B72:  MOVLW  10
5B74:  MOVLB  1
5B76:  MOVWF  xF5
5B78:  MOVFF  1F7,1FB
5B7C:  MOVFF  1F7,1F9
5B80:  MOVLW  1E
5B82:  MOVLB  3
5B84:  MOVWF  xB9
5B86:  MOVLB  0
5B88:  CALL   24D0
5B8C:  MOVLB  3
5B8E:  CLRF   xB4
5B90:  MOVLB  0
5B92:  CALL   2E06
5B96:  MOVLB  2
....................         } 
....................          else 
5B98:  BRA    5B9E
....................             {Flanco3 = 0;}                 
5B9A:  MOVLB  2
5B9C:  BCF    x04.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5B9E:  BSF    F92.3
5BA0:  BTFSS  F80.3
5BA2:  BRA    5C32
....................       {  if(Flanco1 == 0)  
5BA4:  BTFSC  x03.6
5BA6:  BRA    5C30
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5BA8:  BSF    x03.6
5BAA:  MOVLW  64
5BAC:  MOVLB  1
5BAE:  MOVWF  xF5
5BB0:  MOVFF  1F7,1FB
5BB4:  MOVFF  1F7,1F9
5BB8:  MOVLW  1E
5BBA:  MOVLB  3
5BBC:  MOVWF  xB9
5BBE:  MOVLB  0
5BC0:  CALL   24D0
5BC4:  MOVLB  3
5BC6:  CLRF   xB4
5BC8:  MOVLB  0
5BCA:  CALL   2E06
5BCE:  MOVLW  20
5BD0:  MOVLB  1
5BD2:  MOVWF  xF6
5BD4:  MOVLW  10
5BD6:  MOVWF  xF7
5BD8:  MOVWF  xFC
5BDA:  MOVLW  20
5BDC:  MOVWF  xFD
....................             estadot40=0;estadoc=1;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=121; 
5BDE:  MOVLB  2
5BE0:  BCF    x03.0
5BE2:  BSF    x03.1
5BE4:  BCF    x03.2
5BE6:  BCF    x03.3
5BE8:  BCF    x03.4
5BEA:  CLRF   x00
5BEC:  MOVLB  3
5BEE:  CLRF   xC3
5BF0:  MOVLW  37
5BF2:  MOVWF  xC4
5BF4:  CLRF   xC6
5BF6:  MOVLW  C9
5BF8:  MOVWF  xC5
5BFA:  MOVLW  01
5BFC:  MOVWF  xC7
5BFE:  MOVWF  xC8
5C00:  MOVLB  0
5C02:  CALL   306A
5C06:  MOVLW  79
5C08:  MOVLB  2
5C0A:  MOVWF  x24
....................             glcd_rect(15, 18, 30, 53, NO, ON);enable_interrupts(global);}} 
5C0C:  MOVLW  0F
5C0E:  MOVLB  3
5C10:  MOVWF  xC5
5C12:  MOVLW  12
5C14:  MOVWF  xC6
5C16:  MOVLW  1E
5C18:  MOVWF  xC7
5C1A:  MOVLW  35
5C1C:  MOVWF  xC8
5C1E:  CLRF   xC9
5C20:  MOVLW  01
5C22:  MOVWF  xCA
5C24:  MOVLB  0
5C26:  CALL   350A
5C2A:  MOVLW  C0
5C2C:  IORWF  FF2,F
5C2E:  MOVLB  2
....................          else 
5C30:  BRA    5C34
....................             {Flanco1 = 0;}    
5C32:  BCF    x03.6
5C34:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==25){ // Menu de Liquido       
5C36:  MOVF   xF5,W
5C38:  SUBLW  19
5C3A:  BTFSS  FD8.2
5C3C:  BRA    5D90
....................       glcd_imagen(4); //ErlenMeyer con Liquido 
5C3E:  MOVLW  04
5C40:  MOVLB  3
5C42:  MOVWF  xB3
5C44:  MOVLB  0
5C46:  CALL   389A
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5C4A:  MOVLW  3F
5C4C:  MOVLB  3
5C4E:  MOVWF  xC5
5C50:  MOVLW  28
5C52:  MOVWF  xC6
5C54:  MOVLW  64
5C56:  MOVWF  xC7
5C58:  MOVLW  35
5C5A:  MOVWF  xC8
5C5C:  MOVLW  01
5C5E:  MOVWF  xC9
5C60:  MOVWF  xCA
5C62:  MOVLB  0
5C64:  CALL   350A
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
5C68:  MOVLW  4C
5C6A:  MOVLB  3
5C6C:  MOVWF  xC3
5C6E:  MOVLW  2C
5C70:  MOVWF  xC4
5C72:  MOVLW  01
5C74:  MOVWF  xC6
5C76:  MOVLW  83
5C78:  MOVWF  xC5
5C7A:  MOVLW  01
5C7C:  MOVWF  xC7
5C7E:  CLRF   xC8
5C80:  MOVLB  0
5C82:  CALL   306A
....................          
....................       mensajes(7,55); 
5C86:  MOVLW  07
5C88:  MOVLB  3
5C8A:  MOVWF  xB4
5C8C:  MOVLW  37
5C8E:  MOVWF  xB5
5C90:  MOVLB  0
5C92:  CALL   378E
....................       //glcd_text57(60, 0, DuracionL, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TL, 1, ON);            // Write the new voltage         
5C96:  MOVLW  3F
5C98:  MOVLB  3
5C9A:  MOVWF  xC3
5C9C:  MOVLW  0A
5C9E:  MOVWF  xC4
5CA0:  MOVLW  01
5CA2:  MOVWF  xC6
5CA4:  MOVLW  67
5CA6:  MOVWF  xC5
5CA8:  MOVLW  01
5CAA:  MOVWF  xC7
5CAC:  MOVWF  xC8
5CAE:  MOVLB  0
5CB0:  CALL   306A
....................       glcd_text57(63, 20, TestL, 1, ON);            // Write the new voltage         
5CB4:  MOVLW  3F
5CB6:  MOVLB  3
5CB8:  MOVWF  xC3
5CBA:  MOVLW  14
5CBC:  MOVWF  xC4
5CBE:  MOVLW  01
5CC0:  MOVWF  xC6
5CC2:  MOVLW  6F
5CC4:  MOVWF  xC5
5CC6:  MOVLW  01
5CC8:  MOVWF  xC7
5CCA:  MOVWF  xC8
5CCC:  MOVLB  0
5CCE:  CALL   306A
....................       glcd_text57(63, 30, TsecL, 1, ON);            // Write the new voltage         
5CD2:  MOVLW  3F
5CD4:  MOVLB  3
5CD6:  MOVWF  xC3
5CD8:  MOVLW  1E
5CDA:  MOVWF  xC4
5CDC:  MOVLW  01
5CDE:  MOVWF  xC6
5CE0:  MOVLW  79
5CE2:  MOVWF  xC5
5CE4:  MOVLW  01
5CE6:  MOVWF  xC7
5CE8:  MOVWF  xC8
5CEA:  MOVLB  0
5CEC:  CALL   306A
....................        
....................       if(LEFT)// Si oprime Izquier|da 
5CF0:  BSF    F92.5
5CF2:  BTFSS  F80.5
5CF4:  BRA    5D32
....................        {  if(Flanco3 == 0)  
5CF6:  MOVLB  2
5CF8:  BTFSC  x04.0
5CFA:  BRA    5D30
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5CFC:  BSF    x04.0
5CFE:  MOVLW  1E
5D00:  MOVLB  3
5D02:  MOVWF  xB9
5D04:  MOVLB  0
5D06:  CALL   24D0
5D0A:  MOVLW  10
5D0C:  MOVLB  1
5D0E:  MOVWF  xF5
5D10:  MOVFF  1F7,1FB
5D14:  MOVFF  1F7,1F9
5D18:  MOVLW  1E
5D1A:  MOVLB  3
5D1C:  MOVWF  xB9
5D1E:  MOVLB  0
5D20:  CALL   24D0
5D24:  MOVLB  3
5D26:  CLRF   xB4
5D28:  MOVLB  0
5D2A:  CALL   2E06
5D2E:  MOVLB  2
....................         } 
....................          else 
5D30:  BRA    5D36
....................             {Flanco3 = 0;}                 
5D32:  MOVLB  2
5D34:  BCF    x04.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5D36:  BSF    F92.3
5D38:  BTFSS  F80.3
5D3A:  BRA    5D8C
....................       {  if(Flanco1 == 0)  
5D3C:  BTFSC  x03.6
5D3E:  BRA    5D8A
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5D40:  BSF    x03.6
5D42:  MOVLW  5A
5D44:  MOVLB  1
5D46:  MOVWF  xF5
5D48:  MOVFF  1F7,1FB
5D4C:  MOVFF  1F7,1F9
5D50:  MOVLW  1E
5D52:  MOVLB  3
5D54:  MOVWF  xB9
5D56:  MOVLB  0
5D58:  CALL   24D0
5D5C:  MOVLB  3
5D5E:  CLRF   xB4
5D60:  MOVLB  0
5D62:  CALL   2E06
5D66:  MOVLW  20
5D68:  MOVLB  1
5D6A:  MOVWF  xF6
5D6C:  MOVLW  10
5D6E:  MOVWF  xF7
5D70:  MOVWF  xFC
5D72:  MOVLW  20
5D74:  MOVWF  xFD
....................             estadot40=0;estadoc=0;estadoi=0;estadol=1;estadop=0;Liquid=1;Setpoint=121;}} 
5D76:  MOVLB  2
5D78:  BCF    x03.0
5D7A:  BCF    x03.1
5D7C:  BCF    x03.2
5D7E:  BSF    x03.3
5D80:  BCF    x03.4
5D82:  MOVLW  01
5D84:  MOVWF  x00
5D86:  MOVLW  79
5D88:  MOVWF  x24
....................          else 
5D8A:  BRA    5D8E
....................             {Flanco1 = 0;}    
5D8C:  BCF    x03.6
5D8E:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==33){ // Menu de Instrumental Suave      
5D90:  MOVF   xF5,W
5D92:  SUBLW  21
5D94:  BTFSS  FD8.2
5D96:  BRA    5EEA
....................       glcd_imagen(3); //Erlen Meyer 
5D98:  MOVLW  03
5D9A:  MOVLB  3
5D9C:  MOVWF  xB3
5D9E:  MOVLB  0
5DA0:  CALL   389A
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5DA4:  MOVLW  3F
5DA6:  MOVLB  3
5DA8:  MOVWF  xC5
5DAA:  MOVLW  28
5DAC:  MOVWF  xC6
5DAE:  MOVLW  64
5DB0:  MOVWF  xC7
5DB2:  MOVLW  35
5DB4:  MOVWF  xC8
5DB6:  MOVLW  01
5DB8:  MOVWF  xC9
5DBA:  MOVWF  xCA
5DBC:  MOVLB  0
5DBE:  CALL   350A
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
5DC2:  MOVLW  4C
5DC4:  MOVLB  3
5DC6:  MOVWF  xC3
5DC8:  MOVLW  2C
5DCA:  MOVWF  xC4
5DCC:  MOVLW  01
5DCE:  MOVWF  xC6
5DD0:  MOVLW  83
5DD2:  MOVWF  xC5
5DD4:  MOVLW  01
5DD6:  MOVWF  xC7
5DD8:  CLRF   xC8
5DDA:  MOVLB  0
5DDC:  CALL   306A
....................          
....................       mensajes(6,55); 
5DE0:  MOVLW  06
5DE2:  MOVLB  3
5DE4:  MOVWF  xB4
5DE6:  MOVLW  37
5DE8:  MOVWF  xB5
5DEA:  MOVLB  0
5DEC:  CALL   378E
....................       //glcd_text57(60, 0, DuracionI, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, TL, 1, ON);            // Write the new voltage         
5DF0:  MOVLW  3F
5DF2:  MOVLB  3
5DF4:  MOVWF  xC3
5DF6:  MOVLW  0A
5DF8:  MOVWF  xC4
5DFA:  MOVLW  01
5DFC:  MOVWF  xC6
5DFE:  MOVLW  67
5E00:  MOVWF  xC5
5E02:  MOVLW  01
5E04:  MOVWF  xC7
5E06:  MOVWF  xC8
5E08:  MOVLB  0
5E0A:  CALL   306A
....................       glcd_text57(63, 20, TestI, 1, ON);            // Write the new voltage         
5E0E:  MOVLW  3F
5E10:  MOVLB  3
5E12:  MOVWF  xC3
5E14:  MOVLW  14
5E16:  MOVWF  xC4
5E18:  MOVLW  01
5E1A:  MOVWF  xC6
5E1C:  MOVLW  4E
5E1E:  MOVWF  xC5
5E20:  MOVLW  01
5E22:  MOVWF  xC7
5E24:  MOVWF  xC8
5E26:  MOVLB  0
5E28:  CALL   306A
....................       glcd_text57(63, 30, TsecL, 1, ON);            // Write the new voltage         
5E2C:  MOVLW  3F
5E2E:  MOVLB  3
5E30:  MOVWF  xC3
5E32:  MOVLW  1E
5E34:  MOVWF  xC4
5E36:  MOVLW  01
5E38:  MOVWF  xC6
5E3A:  MOVLW  79
5E3C:  MOVWF  xC5
5E3E:  MOVLW  01
5E40:  MOVWF  xC7
5E42:  MOVWF  xC8
5E44:  MOVLB  0
5E46:  CALL   306A
....................  
....................       if(LEFT)// Si oprime Izquier|da 
5E4A:  BSF    F92.5
5E4C:  BTFSS  F80.5
5E4E:  BRA    5E8C
....................        {  if(Flanco3 == 0)  
5E50:  MOVLB  2
5E52:  BTFSC  x04.0
5E54:  BRA    5E8A
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5E56:  BSF    x04.0
5E58:  MOVLW  1E
5E5A:  MOVLB  3
5E5C:  MOVWF  xB9
5E5E:  MOVLB  0
5E60:  CALL   24D0
5E64:  MOVLW  10
5E66:  MOVLB  1
5E68:  MOVWF  xF5
5E6A:  MOVFF  1F7,1FB
5E6E:  MOVFF  1F7,1F9
5E72:  MOVLW  1E
5E74:  MOVLB  3
5E76:  MOVWF  xB9
5E78:  MOVLB  0
5E7A:  CALL   24D0
5E7E:  MOVLB  3
5E80:  CLRF   xB4
5E82:  MOVLB  0
5E84:  CALL   2E06
5E88:  MOVLB  2
....................         } 
....................          else 
5E8A:  BRA    5E90
....................             {Flanco3 = 0;}                 
5E8C:  MOVLB  2
5E8E:  BCF    x04.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5E90:  BSF    F92.3
5E92:  BTFSS  F80.3
5E94:  BRA    5EE6
....................       {  if(Flanco1 == 0)  
5E96:  BTFSC  x03.6
5E98:  BRA    5EE4
....................             {Flanco1 = 1;Menu=90;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5E9A:  BSF    x03.6
5E9C:  MOVLW  5A
5E9E:  MOVLB  1
5EA0:  MOVWF  xF5
5EA2:  MOVFF  1F7,1FB
5EA6:  MOVFF  1F7,1F9
5EAA:  MOVLW  1E
5EAC:  MOVLB  3
5EAE:  MOVWF  xB9
5EB0:  MOVLB  0
5EB2:  CALL   24D0
5EB6:  MOVLB  3
5EB8:  CLRF   xB4
5EBA:  MOVLB  0
5EBC:  CALL   2E06
5EC0:  MOVLW  20
5EC2:  MOVLB  1
5EC4:  MOVWF  xF6
5EC6:  MOVLW  10
5EC8:  MOVWF  xF7
5ECA:  MOVWF  xFC
5ECC:  MOVLW  20
5ECE:  MOVWF  xFD
....................             estadot40=0;estadoc=0;estadoi=1;estadol=0;estadop=0;Liquid=1;Setpoint=121;}} 
5ED0:  MOVLB  2
5ED2:  BCF    x03.0
5ED4:  BCF    x03.1
5ED6:  BSF    x03.2
5ED8:  BCF    x03.3
5EDA:  BCF    x03.4
5EDC:  MOVLW  01
5EDE:  MOVWF  x00
5EE0:  MOVLW  79
5EE2:  MOVWF  x24
....................          else 
5EE4:  BRA    5EE8
....................             {Flanco1 = 0;}    
5EE6:  BCF    x03.6
5EE8:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==41){ // Menu de textil e instrumental      
5EEA:  MOVF   xF5,W
5EEC:  SUBLW  29
5EEE:  BTFSS  FD8.2
5EF0:  BRA    6082
....................       glcd_imagen(1); //Tijeras y Camisa 
5EF2:  MOVLW  01
5EF4:  MOVLB  3
5EF6:  MOVWF  xB3
5EF8:  MOVLB  0
5EFA:  CALL   389A
....................       glcd_rect(63, 40, 100, 53, YES, ON);            // Hace un rectangulo al rededor de la palabra Menu. 
5EFE:  MOVLW  3F
5F00:  MOVLB  3
5F02:  MOVWF  xC5
5F04:  MOVLW  28
5F06:  MOVWF  xC6
5F08:  MOVLW  64
5F0A:  MOVWF  xC7
5F0C:  MOVLW  35
5F0E:  MOVWF  xC8
5F10:  MOVLW  01
5F12:  MOVWF  xC9
5F14:  MOVWF  xCA
5F16:  MOVLB  0
5F18:  CALL   350A
....................       glcd_text57(76, 44, ok, 1, OFF);            // Escribe Menu en Tamaño 2.    
5F1C:  MOVLW  4C
5F1E:  MOVLB  3
5F20:  MOVWF  xC3
5F22:  MOVLW  2C
5F24:  MOVWF  xC4
5F26:  MOVLW  01
5F28:  MOVWF  xC6
5F2A:  MOVLW  83
5F2C:  MOVWF  xC5
5F2E:  MOVLW  01
5F30:  MOVWF  xC7
5F32:  CLRF   xC8
5F34:  MOVLB  0
5F36:  CALL   306A
....................          
....................       mensajes(4,55); 
5F3A:  MOVLW  04
5F3C:  MOVLB  3
5F3E:  MOVWF  xB4
5F40:  MOVLW  37
5F42:  MOVWF  xB5
5F44:  MOVLB  0
5F46:  CALL   378E
....................       //glcd_text57(60, 0, Duracion40, 1, ON);            // Write the new voltage         
....................       glcd_text57(63, 10, T40, 1, ON);            // Write the new voltage         
5F4A:  MOVLW  3F
5F4C:  MOVLB  3
5F4E:  MOVWF  xC3
5F50:  MOVLW  0A
5F52:  MOVWF  xC4
5F54:  MOVLW  01
5F56:  MOVWF  xC6
5F58:  MOVLW  1E
5F5A:  MOVWF  xC5
5F5C:  MOVLW  01
5F5E:  MOVWF  xC7
5F60:  MOVWF  xC8
5F62:  MOVLB  0
5F64:  CALL   306A
....................       glcd_text57(63, 20, Test40, 1, ON);            // Write the new voltage         
5F68:  MOVLW  3F
5F6A:  MOVLB  3
5F6C:  MOVWF  xC3
5F6E:  MOVLW  14
5F70:  MOVWF  xC4
5F72:  MOVLW  01
5F74:  MOVWF  xC6
5F76:  MOVLW  26
5F78:  MOVWF  xC5
5F7A:  MOVLW  01
5F7C:  MOVWF  xC7
5F7E:  MOVWF  xC8
5F80:  MOVLB  0
5F82:  CALL   306A
....................       glcd_text57(63, 30, Tsec40, 1, ON);            // Write the new voltage         
5F86:  MOVLW  3F
5F88:  MOVLB  3
5F8A:  MOVWF  xC3
5F8C:  MOVLW  1E
5F8E:  MOVWF  xC4
5F90:  MOVLW  01
5F92:  MOVWF  xC6
5F94:  MOVLW  30
5F96:  MOVWF  xC5
5F98:  MOVLW  01
5F9A:  MOVWF  xC7
5F9C:  MOVWF  xC8
5F9E:  MOVLB  0
5FA0:  CALL   306A
....................        
....................       if(LEFT)// Si oprime Izquier|da 
5FA4:  BSF    F92.5
5FA6:  BTFSS  F80.5
5FA8:  BRA    5FE6
....................        {  if(Flanco3 == 0)  
5FAA:  MOVLB  2
5FAC:  BTFSC  x04.0
5FAE:  BRA    5FE4
....................             {Flanco3 = 1;delay_ms(30);Menu=16;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);} 
5FB0:  BSF    x04.0
5FB2:  MOVLW  1E
5FB4:  MOVLB  3
5FB6:  MOVWF  xB9
5FB8:  MOVLB  0
5FBA:  CALL   24D0
5FBE:  MOVLW  10
5FC0:  MOVLB  1
5FC2:  MOVWF  xF5
5FC4:  MOVFF  1F7,1FB
5FC8:  MOVFF  1F7,1F9
5FCC:  MOVLW  1E
5FCE:  MOVLB  3
5FD0:  MOVWF  xB9
5FD2:  MOVLB  0
5FD4:  CALL   24D0
5FD8:  MOVLB  3
5FDA:  CLRF   xB4
5FDC:  MOVLB  0
5FDE:  CALL   2E06
5FE2:  MOVLB  2
....................         } 
....................          else 
5FE4:  BRA    5FEA
....................             {Flanco3 = 0;}                 
5FE6:  MOVLB  2
5FE8:  BCF    x04.0
....................  
....................       if(RIGHT)// Si oprime derecha 
5FEA:  BSF    F92.3
5FEC:  BTFSS  F80.3
5FEE:  BRA    607E
....................       {  if(Flanco1 == 0)  
5FF0:  BTFSC  x03.6
5FF2:  BRA    607C
....................             {Flanco1 = 1;Menu=100;Flecha2=n_opcionL; Flecha=n_opcionL;delay_ms(30);glcd_fillScreen(OFF);n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32; 
5FF4:  BSF    x03.6
5FF6:  MOVLW  64
5FF8:  MOVLB  1
5FFA:  MOVWF  xF5
5FFC:  MOVFF  1F7,1FB
6000:  MOVFF  1F7,1F9
6004:  MOVLW  1E
6006:  MOVLB  3
6008:  MOVWF  xB9
600A:  MOVLB  0
600C:  CALL   24D0
6010:  MOVLB  3
6012:  CLRF   xB4
6014:  MOVLB  0
6016:  CALL   2E06
601A:  MOVLW  20
601C:  MOVLB  1
601E:  MOVWF  xF6
6020:  MOVLW  10
6022:  MOVWF  xF7
6024:  MOVWF  xFC
6026:  MOVLW  20
6028:  MOVWF  xFD
....................             estadot40=1;estadoc=0;estadoi=0;estadol=0;estadop=0;Liquid=0;glcd_text57(0, 55, Calentando, 1, ON); Setpoint=121; 
602A:  MOVLB  2
602C:  BSF    x03.0
602E:  BCF    x03.1
6030:  BCF    x03.2
6032:  BCF    x03.3
6034:  BCF    x03.4
6036:  CLRF   x00
6038:  MOVLB  3
603A:  CLRF   xC3
603C:  MOVLW  37
603E:  MOVWF  xC4
6040:  CLRF   xC6
6042:  MOVLW  C9
6044:  MOVWF  xC5
6046:  MOVLW  01
6048:  MOVWF  xC7
604A:  MOVWF  xC8
604C:  MOVLB  0
604E:  CALL   306A
6052:  MOVLW  79
6054:  MOVLB  2
6056:  MOVWF  x24
....................             glcd_rect(15, 18, 30, 53, NO, ON);enable_interrupts(global);}} 
6058:  MOVLW  0F
605A:  MOVLB  3
605C:  MOVWF  xC5
605E:  MOVLW  12
6060:  MOVWF  xC6
6062:  MOVLW  1E
6064:  MOVWF  xC7
6066:  MOVLW  35
6068:  MOVWF  xC8
606A:  CLRF   xC9
606C:  MOVLW  01
606E:  MOVWF  xCA
6070:  MOVLB  0
6072:  CALL   350A
6076:  MOVLW  C0
6078:  IORWF  FF2,F
607A:  MOVLB  2
....................          else 
607C:  BRA    6080
....................             {Flanco1 = 0;}    
607E:  BCF    x03.6
6080:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==49){ // Menu de Proceso Personalizado 
6082:  MOVF   xF5,W
6084:  SUBLW  31
6086:  BTFSS  FD8.2
6088:  GOTO   6CEA
....................       glcd_text57(10, 0, T_esterilizacion, 1, ON);            // Escribe Menu en Tamaño 2.          
608C:  MOVLW  0A
608E:  MOVLB  3
6090:  MOVWF  xC3
6092:  CLRF   xC4
6094:  MOVLW  01
6096:  MOVWF  xC6
6098:  MOVLW  92
609A:  MOVWF  xC5
609C:  MOVLW  01
609E:  MOVWF  xC7
60A0:  MOVWF  xC8
60A2:  MOVLB  0
60A4:  CALL   306A
....................        
....................       if(Setpoint>125) 
60A8:  MOVLB  2
60AA:  MOVF   x24,W
60AC:  SUBLW  7D
60AE:  BC    60B4
....................       {Setpoint=105;} 
60B0:  MOVLW  69
60B2:  MOVWF  x24
....................       if(Setpoint<105) 
60B4:  MOVF   x24,W
60B6:  SUBLW  68
60B8:  BNC   60BE
....................       {Setpoint=125;} 
60BA:  MOVLW  7D
60BC:  MOVWF  x24
....................        
....................       if(UP)//Si oprime hacia arriba 
60BE:  BSF    F92.1
60C0:  BTFSS  F80.1
60C2:  BRA    6182
....................       {  if(Flanco == 0)  
60C4:  BTFSC  x03.5
60C6:  BRA    617C
....................             {Flanco = 1;delay_ms(30); 
60C8:  BSF    x03.5
60CA:  MOVLW  1E
60CC:  MOVLB  3
60CE:  MOVWF  xB9
60D0:  MOVLB  0
60D2:  CALL   24D0
....................             if((Flx==36)&&(Fly==8)) 
60D6:  MOVLB  1
60D8:  MOVF   xFE,W
60DA:  SUBLW  24
60DC:  BNZ   60EA
60DE:  MOVF   xFF,W
60E0:  SUBLW  08
60E2:  BNZ   60EA
....................                {Testerilizacionp[3]++;} 
60E4:  MOVLB  2
60E6:  INCF   x1A,F
60E8:  MOVLB  1
....................             if((Flx==42)&&(Fly==8)) 
60EA:  MOVF   xFE,W
60EC:  SUBLW  2A
60EE:  BNZ   60FC
60F0:  MOVF   xFF,W
60F2:  SUBLW  08
60F4:  BNZ   60FC
....................                {Testerilizacionp[2]++;} 
60F6:  MOVLB  2
60F8:  INCF   x19,F
60FA:  MOVLB  1
....................             if((Flx==54)&&(Fly==8)) 
60FC:  MOVF   xFE,W
60FE:  SUBLW  36
6100:  BNZ   610E
6102:  MOVF   xFF,W
6104:  SUBLW  08
6106:  BNZ   610E
....................                {Testerilizacionp[1]++;} 
6108:  MOVLB  2
610A:  INCF   x18,F
610C:  MOVLB  1
....................             if((Flx==60)&&(Fly==8)) 
610E:  MOVF   xFE,W
6110:  SUBLW  3C
6112:  BNZ   6120
6114:  MOVF   xFF,W
6116:  SUBLW  08
6118:  BNZ   6120
....................                {Testerilizacionp[0]++;} 
611A:  MOVLB  2
611C:  INCF   x17,F
611E:  MOVLB  1
....................              
....................             if((Flx==36)&&(Fly==40)) 
6120:  MOVF   xFE,W
6122:  SUBLW  24
6124:  BNZ   6132
6126:  MOVF   xFF,W
6128:  SUBLW  28
612A:  BNZ   6132
....................                {Tsecadop[3]++;} 
612C:  MOVLB  2
612E:  INCF   x22,F
6130:  MOVLB  1
....................             if((Flx==42)&&(Fly==40)) 
6132:  MOVF   xFE,W
6134:  SUBLW  2A
6136:  BNZ   6144
6138:  MOVF   xFF,W
613A:  SUBLW  28
613C:  BNZ   6144
....................                {Tsecadop[2]++;} 
613E:  MOVLB  2
6140:  INCF   x21,F
6142:  MOVLB  1
....................             if((Flx==54)&&(Fly==40)) 
6144:  MOVF   xFE,W
6146:  SUBLW  36
6148:  BNZ   6156
614A:  MOVF   xFF,W
614C:  SUBLW  28
614E:  BNZ   6156
....................                {Tsecadop[1]++;} 
6150:  MOVLB  2
6152:  INCF   x20,F
6154:  MOVLB  1
....................             if((Flx==60)&&(Fly==40)) 
6156:  MOVF   xFE,W
6158:  SUBLW  3C
615A:  BNZ   6168
615C:  MOVF   xFF,W
615E:  SUBLW  28
6160:  BNZ   6168
....................                {Tsecadop[0]++;}   
6162:  MOVLB  2
6164:  INCF   x1F,F
6166:  MOVLB  1
....................             if(Fly==24)    
6168:  MOVF   xFF,W
616A:  SUBLW  18
616C:  BNZ   6172
....................             {unidad=1;} 
616E:  MOVLW  01
6170:  MOVWF  xF8
....................              
....................             if(Fly==56) 
6172:  MOVF   xFF,W
6174:  SUBLW  38
6176:  BNZ   617E
....................             {Setpoint++;} 
6178:  MOVLB  2
617A:  INCF   x24,F
617C:  MOVLB  1
....................             } 
....................        } 
....................          else 
617E:  BRA    6186
6180:  MOVLB  2
....................             {Flanco = 0;} 
6182:  BCF    x03.5
6184:  MOVLB  1
....................              
....................       if(DOWN)//Si oprime hacia abajo 
6186:  BSF    F92.2
6188:  BTFSS  F80.2
618A:  BRA    6248
....................       {  if(Flanco2 == 0)  
618C:  MOVLB  2
618E:  BTFSC  x03.7
6190:  BRA    6244
....................             {Flanco2 = 1;delay_ms(30); 
6192:  BSF    x03.7
6194:  MOVLW  1E
6196:  MOVLB  3
6198:  MOVWF  xB9
619A:  MOVLB  0
619C:  CALL   24D0
....................             if((Flx==36)&&(Fly==8)) 
61A0:  MOVLB  1
61A2:  MOVF   xFE,W
61A4:  SUBLW  24
61A6:  BNZ   61B4
61A8:  MOVF   xFF,W
61AA:  SUBLW  08
61AC:  BNZ   61B4
....................                {Testerilizacionp[3]--;} 
61AE:  MOVLB  2
61B0:  DECF   x1A,F
61B2:  MOVLB  1
....................             if((Flx==42)&&(Fly==8)) 
61B4:  MOVF   xFE,W
61B6:  SUBLW  2A
61B8:  BNZ   61C6
61BA:  MOVF   xFF,W
61BC:  SUBLW  08
61BE:  BNZ   61C6
....................                {Testerilizacionp[2]--;} 
61C0:  MOVLB  2
61C2:  DECF   x19,F
61C4:  MOVLB  1
....................             if((Flx==54)&&(Fly==8)) 
61C6:  MOVF   xFE,W
61C8:  SUBLW  36
61CA:  BNZ   61D8
61CC:  MOVF   xFF,W
61CE:  SUBLW  08
61D0:  BNZ   61D8
....................                {Testerilizacionp[1]--;} 
61D2:  MOVLB  2
61D4:  DECF   x18,F
61D6:  MOVLB  1
....................             if((Flx==60)&&(Fly==8)) 
61D8:  MOVF   xFE,W
61DA:  SUBLW  3C
61DC:  BNZ   61EA
61DE:  MOVF   xFF,W
61E0:  SUBLW  08
61E2:  BNZ   61EA
....................                {Testerilizacionp[0]--;} 
61E4:  MOVLB  2
61E6:  DECF   x17,F
61E8:  MOVLB  1
....................              
....................             if((Flx==36)&&(Fly==40)) 
61EA:  MOVF   xFE,W
61EC:  SUBLW  24
61EE:  BNZ   61FC
61F0:  MOVF   xFF,W
61F2:  SUBLW  28
61F4:  BNZ   61FC
....................                {Tsecadop[3]--;} 
61F6:  MOVLB  2
61F8:  DECF   x22,F
61FA:  MOVLB  1
....................             if((Flx==42)&&(Fly==40)) 
61FC:  MOVF   xFE,W
61FE:  SUBLW  2A
6200:  BNZ   620E
6202:  MOVF   xFF,W
6204:  SUBLW  28
6206:  BNZ   620E
....................                {Tsecadop[2]--;} 
6208:  MOVLB  2
620A:  DECF   x21,F
620C:  MOVLB  1
....................             if((Flx==54)&&(Fly==40)) 
620E:  MOVF   xFE,W
6210:  SUBLW  36
6212:  BNZ   6220
6214:  MOVF   xFF,W
6216:  SUBLW  28
6218:  BNZ   6220
....................                {Tsecadop[1]--;} 
621A:  MOVLB  2
621C:  DECF   x20,F
621E:  MOVLB  1
....................             if((Flx==60)&&(Fly==40)) 
6220:  MOVF   xFE,W
6222:  SUBLW  3C
6224:  BNZ   6232
6226:  MOVF   xFF,W
6228:  SUBLW  28
622A:  BNZ   6232
....................                {Tsecadop[0]--;}   
622C:  MOVLB  2
622E:  DECF   x1F,F
6230:  MOVLB  1
....................             if(Fly==24)    
6232:  MOVF   xFF,W
6234:  SUBLW  18
6236:  BNZ   623A
....................                {unidad=0;} 
6238:  CLRF   xF8
....................             if(Fly==56) 
623A:  MOVF   xFF,W
623C:  SUBLW  38
623E:  BNZ   6246
....................             {Setpoint--;}                
6240:  MOVLB  2
6242:  DECF   x24,F
6244:  MOVLB  1
....................             } 
....................       } 
....................          else 
6246:  BRA    624E
....................             {Flanco2 = 0;} 
6248:  MOVLB  2
624A:  BCF    x03.7
624C:  MOVLB  1
....................              
....................             if((Flx==36)&&(Fly==8)) 
624E:  MOVF   xFE,W
6250:  SUBLW  24
6252:  BNZ   62BC
6254:  MOVF   xFF,W
6256:  SUBLW  08
6258:  BNZ   62BC
....................                {displayTiempo(Testerilizacionp[3],36,8,2);displayTiempo(Testerilizacionp[2],42,8,1); 
625A:  MOVFF  21A,3B4
625E:  MOVLW  24
6260:  MOVLB  3
6262:  MOVWF  xB5
6264:  MOVLW  08
6266:  MOVWF  xB6
6268:  MOVLW  02
626A:  MOVWF  xB7
626C:  MOVLB  0
626E:  CALL   35CC
6272:  MOVFF  219,3B4
6276:  MOVLW  2A
6278:  MOVLB  3
627A:  MOVWF  xB5
627C:  MOVLW  08
627E:  MOVWF  xB6
6280:  MOVLW  01
6282:  MOVWF  xB7
6284:  MOVLB  0
6286:  CALL   35CC
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);} 
628A:  MOVFF  218,3B4
628E:  MOVLW  36
6290:  MOVLB  3
6292:  MOVWF  xB5
6294:  MOVLW  08
6296:  MOVWF  xB6
6298:  MOVLW  01
629A:  MOVWF  xB7
629C:  MOVLB  0
629E:  CALL   35CC
62A2:  MOVFF  217,3B4
62A6:  MOVLW  3C
62A8:  MOVLB  3
62AA:  MOVWF  xB5
62AC:  MOVLW  08
62AE:  MOVWF  xB6
62B0:  MOVLW  01
62B2:  MOVWF  xB7
62B4:  MOVLB  0
62B6:  CALL   35CC
62BA:  MOVLB  1
....................             if((Flx==42)&&(Fly==8)) 
62BC:  MOVF   xFE,W
62BE:  SUBLW  2A
62C0:  BNZ   632A
62C2:  MOVF   xFF,W
62C4:  SUBLW  08
62C6:  BNZ   632A
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,2); 
62C8:  MOVFF  21A,3B4
62CC:  MOVLW  24
62CE:  MOVLB  3
62D0:  MOVWF  xB5
62D2:  MOVLW  08
62D4:  MOVWF  xB6
62D6:  MOVLW  01
62D8:  MOVWF  xB7
62DA:  MOVLB  0
62DC:  CALL   35CC
62E0:  MOVFF  219,3B4
62E4:  MOVLW  2A
62E6:  MOVLB  3
62E8:  MOVWF  xB5
62EA:  MOVLW  08
62EC:  MOVWF  xB6
62EE:  MOVLW  02
62F0:  MOVWF  xB7
62F2:  MOVLB  0
62F4:  CALL   35CC
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);} 
62F8:  MOVFF  218,3B4
62FC:  MOVLW  36
62FE:  MOVLB  3
6300:  MOVWF  xB5
6302:  MOVLW  08
6304:  MOVWF  xB6
6306:  MOVLW  01
6308:  MOVWF  xB7
630A:  MOVLB  0
630C:  CALL   35CC
6310:  MOVFF  217,3B4
6314:  MOVLW  3C
6316:  MOVLB  3
6318:  MOVWF  xB5
631A:  MOVLW  08
631C:  MOVWF  xB6
631E:  MOVLW  01
6320:  MOVWF  xB7
6322:  MOVLB  0
6324:  CALL   35CC
6328:  MOVLB  1
....................             if((Flx==54)&&(Fly==8)) 
632A:  MOVF   xFE,W
632C:  SUBLW  36
632E:  BNZ   6398
6330:  MOVF   xFF,W
6332:  SUBLW  08
6334:  BNZ   6398
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
6336:  MOVFF  21A,3B4
633A:  MOVLW  24
633C:  MOVLB  3
633E:  MOVWF  xB5
6340:  MOVLW  08
6342:  MOVWF  xB6
6344:  MOVLW  01
6346:  MOVWF  xB7
6348:  MOVLB  0
634A:  CALL   35CC
634E:  MOVFF  219,3B4
6352:  MOVLW  2A
6354:  MOVLB  3
6356:  MOVWF  xB5
6358:  MOVLW  08
635A:  MOVWF  xB6
635C:  MOVLW  01
635E:  MOVWF  xB7
6360:  MOVLB  0
6362:  CALL   35CC
....................                displayTiempo(Testerilizacionp[1],54,8,2);displayTiempo(Testerilizacionp[0],60,8,1);} 
6366:  MOVFF  218,3B4
636A:  MOVLW  36
636C:  MOVLB  3
636E:  MOVWF  xB5
6370:  MOVLW  08
6372:  MOVWF  xB6
6374:  MOVLW  02
6376:  MOVWF  xB7
6378:  MOVLB  0
637A:  CALL   35CC
637E:  MOVFF  217,3B4
6382:  MOVLW  3C
6384:  MOVLB  3
6386:  MOVWF  xB5
6388:  MOVLW  08
638A:  MOVWF  xB6
638C:  MOVLW  01
638E:  MOVWF  xB7
6390:  MOVLB  0
6392:  CALL   35CC
6396:  MOVLB  1
....................             if((Flx==60)&&(Fly==8)) 
6398:  MOVF   xFE,W
639A:  SUBLW  3C
639C:  BNZ   6406
639E:  MOVF   xFF,W
63A0:  SUBLW  08
63A2:  BNZ   6406
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
63A4:  MOVFF  21A,3B4
63A8:  MOVLW  24
63AA:  MOVLB  3
63AC:  MOVWF  xB5
63AE:  MOVLW  08
63B0:  MOVWF  xB6
63B2:  MOVLW  01
63B4:  MOVWF  xB7
63B6:  MOVLB  0
63B8:  CALL   35CC
63BC:  MOVFF  219,3B4
63C0:  MOVLW  2A
63C2:  MOVLB  3
63C4:  MOVWF  xB5
63C6:  MOVLW  08
63C8:  MOVWF  xB6
63CA:  MOVLW  01
63CC:  MOVWF  xB7
63CE:  MOVLB  0
63D0:  CALL   35CC
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,2);}   
63D4:  MOVFF  218,3B4
63D8:  MOVLW  36
63DA:  MOVLB  3
63DC:  MOVWF  xB5
63DE:  MOVLW  08
63E0:  MOVWF  xB6
63E2:  MOVLW  01
63E4:  MOVWF  xB7
63E6:  MOVLB  0
63E8:  CALL   35CC
63EC:  MOVFF  217,3B4
63F0:  MOVLW  3C
63F2:  MOVLB  3
63F4:  MOVWF  xB5
63F6:  MOVLW  08
63F8:  MOVWF  xB6
63FA:  MOVLW  02
63FC:  MOVWF  xB7
63FE:  MOVLB  0
6400:  CALL   35CC
6404:  MOVLB  1
....................             if((Fly!=8)) 
6406:  MOVF   xFF,W
6408:  SUBLW  08
640A:  BZ    646C
....................                {displayTiempo(Testerilizacionp[3],36,8,1);displayTiempo(Testerilizacionp[2],42,8,1); 
640C:  MOVFF  21A,3B4
6410:  MOVLW  24
6412:  MOVLB  3
6414:  MOVWF  xB5
6416:  MOVLW  08
6418:  MOVWF  xB6
641A:  MOVLW  01
641C:  MOVWF  xB7
641E:  MOVLB  0
6420:  CALL   35CC
6424:  MOVFF  219,3B4
6428:  MOVLW  2A
642A:  MOVLB  3
642C:  MOVWF  xB5
642E:  MOVLW  08
6430:  MOVWF  xB6
6432:  MOVLW  01
6434:  MOVWF  xB7
6436:  MOVLB  0
6438:  CALL   35CC
....................                displayTiempo(Testerilizacionp[1],54,8,1);displayTiempo(Testerilizacionp[0],60,8,1);}   
643C:  MOVFF  218,3B4
6440:  MOVLW  36
6442:  MOVLB  3
6444:  MOVWF  xB5
6446:  MOVLW  08
6448:  MOVWF  xB6
644A:  MOVLW  01
644C:  MOVWF  xB7
644E:  MOVLB  0
6450:  CALL   35CC
6454:  MOVFF  217,3B4
6458:  MOVLW  3C
645A:  MOVLB  3
645C:  MOVWF  xB5
645E:  MOVLW  08
6460:  MOVWF  xB6
6462:  MOVLW  01
6464:  MOVWF  xB7
6466:  MOVLB  0
6468:  CALL   35CC
....................              
....................              
....................       glcd_text57(15, 17, Desfogue, 1, ON);            // Escribe Menu en Tamaño 2.    
646C:  MOVLW  0F
646E:  MOVLB  3
6470:  MOVWF  xC3
6472:  MOVLW  11
6474:  MOVWF  xC4
6476:  MOVLW  01
6478:  MOVWF  xC6
647A:  MOVLW  AC
647C:  MOVWF  xC5
647E:  MOVLW  01
6480:  MOVWF  xC7
6482:  MOVWF  xC8
6484:  MOVLB  0
6486:  CALL   306A
....................              
....................             if(Fly==24) 
648A:  MOVLB  1
648C:  MOVF   xFF,W
648E:  SUBLW  18
6490:  BNZ   651E
....................                {if(unidad==1) 
6492:  DECFSZ xF8,W
6494:  BRA    64D8
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, ON);glcd_text57(48, 25, Si, 1, OFF);Liquid=0;} 
6496:  MOVLW  30
6498:  MOVLB  3
649A:  MOVWF  xC5
649C:  MOVLW  19
649E:  MOVWF  xC6
64A0:  MOVLW  3B
64A2:  MOVWF  xC7
64A4:  MOVLW  20
64A6:  MOVWF  xC8
64A8:  MOVLW  01
64AA:  MOVWF  xC9
64AC:  MOVWF  xCA
64AE:  MOVLB  0
64B0:  CALL   350A
64B4:  MOVLW  30
64B6:  MOVLB  3
64B8:  MOVWF  xC3
64BA:  MOVLW  19
64BC:  MOVWF  xC4
64BE:  MOVLW  01
64C0:  MOVWF  xC6
64C2:  MOVLW  BC
64C4:  MOVWF  xC5
64C6:  MOVLW  01
64C8:  MOVWF  xC7
64CA:  CLRF   xC8
64CC:  MOVLB  0
64CE:  CALL   306A
64D2:  MOVLB  2
64D4:  CLRF   x00
....................                 else 
64D6:  BRA    651A
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, ON);glcd_text57(48, 25, Noo, 1, OFF);Liquid=1;} 
64D8:  MOVLW  30
64DA:  MOVLB  3
64DC:  MOVWF  xC5
64DE:  MOVLW  19
64E0:  MOVWF  xC6
64E2:  MOVLW  3B
64E4:  MOVWF  xC7
64E6:  MOVLW  20
64E8:  MOVWF  xC8
64EA:  MOVLW  01
64EC:  MOVWF  xC9
64EE:  MOVWF  xCA
64F0:  MOVLB  0
64F2:  CALL   350A
64F6:  MOVLW  30
64F8:  MOVLB  3
64FA:  MOVWF  xC3
64FC:  MOVLW  19
64FE:  MOVWF  xC4
6500:  MOVLW  01
6502:  MOVWF  xC6
6504:  MOVLW  BF
6506:  MOVWF  xC5
6508:  MOVLW  01
650A:  MOVWF  xC7
650C:  CLRF   xC8
650E:  MOVLB  0
6510:  CALL   306A
6514:  MOVLW  01
6516:  MOVLB  2
6518:  MOVWF  x00
....................                } 
....................             else 
651A:  BRA    659C
651C:  MOVLB  1
....................                {if(unidad==1) 
651E:  DECFSZ xF8,W
6520:  BRA    6560
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, OFF);glcd_text57(48, 25, Si, 1, ON);} 
6522:  MOVLW  30
6524:  MOVLB  3
6526:  MOVWF  xC5
6528:  MOVLW  19
652A:  MOVWF  xC6
652C:  MOVLW  3B
652E:  MOVWF  xC7
6530:  MOVLW  20
6532:  MOVWF  xC8
6534:  MOVLW  01
6536:  MOVWF  xC9
6538:  CLRF   xCA
653A:  MOVLB  0
653C:  CALL   350A
6540:  MOVLW  30
6542:  MOVLB  3
6544:  MOVWF  xC3
6546:  MOVLW  19
6548:  MOVWF  xC4
654A:  MOVLW  01
654C:  MOVWF  xC6
654E:  MOVLW  BC
6550:  MOVWF  xC5
6552:  MOVLW  01
6554:  MOVWF  xC7
6556:  MOVWF  xC8
6558:  MOVLB  0
655A:  CALL   306A
....................                 else 
655E:  BRA    659C
....................                   {glcd_rect(48, 25, 48+11, 25+7, YES, OFF);glcd_text57(48, 25, Noo, 1, ON);} 
6560:  MOVLW  30
6562:  MOVLB  3
6564:  MOVWF  xC5
6566:  MOVLW  19
6568:  MOVWF  xC6
656A:  MOVLW  3B
656C:  MOVWF  xC7
656E:  MOVLW  20
6570:  MOVWF  xC8
6572:  MOVLW  01
6574:  MOVWF  xC9
6576:  CLRF   xCA
6578:  MOVLB  0
657A:  CALL   350A
657E:  MOVLW  30
6580:  MOVLB  3
6582:  MOVWF  xC3
6584:  MOVLW  19
6586:  MOVWF  xC4
6588:  MOVLW  01
658A:  MOVWF  xC6
658C:  MOVLW  BF
658E:  MOVWF  xC5
6590:  MOVLW  01
6592:  MOVWF  xC7
6594:  MOVWF  xC8
6596:  MOVLB  0
6598:  CALL   306A
....................                } 
....................        
....................       if((Flx>60)&&(Fly<40))             
659C:  MOVLB  1
659E:  MOVF   xFE,W
65A0:  SUBLW  3C
65A2:  BC    65B2
65A4:  MOVF   xFF,W
65A6:  SUBLW  27
65A8:  BNC   65B2
....................          {Flx=36;Fly=Fly+16;} 
65AA:  MOVLW  24
65AC:  MOVWF  xFE
65AE:  MOVLW  10
65B0:  ADDWF  xFF,F
....................       if((Flx<36)&&(Fly<=40))             
65B2:  MOVF   xFE,W
65B4:  SUBLW  23
65B6:  BNC   65C6
65B8:  MOVF   xFF,W
65BA:  SUBLW  28
65BC:  BNC   65C6
....................          {Flx=36;Fly=8;}    
65BE:  MOVLW  24
65C0:  MOVWF  xFE
65C2:  MOVLW  08
65C4:  MOVWF  xFF
....................        
....................       glcd_text57(48, 8, Vacio, 1, ON); 
65C6:  MOVLW  30
65C8:  MOVLB  3
65CA:  MOVWF  xC3
65CC:  MOVLW  08
65CE:  MOVWF  xC4
65D0:  MOVLW  01
65D2:  MOVWF  xC6
65D4:  MOVLW  16
65D6:  MOVWF  xC5
65D8:  MOVLW  01
65DA:  MOVWF  xC7
65DC:  MOVWF  xC8
65DE:  MOVLB  0
65E0:  CALL   306A
....................       glcd_text57(48, 42, Vacio, 1, ON); 
65E4:  MOVLW  30
65E6:  MOVLB  3
65E8:  MOVWF  xC3
65EA:  MOVLW  2A
65EC:  MOVWF  xC4
65EE:  MOVLW  01
65F0:  MOVWF  xC6
65F2:  MOVLW  16
65F4:  MOVWF  xC5
65F6:  MOVLW  01
65F8:  MOVWF  xC7
65FA:  MOVWF  xC8
65FC:  MOVLB  0
65FE:  CALL   306A
....................        
....................        
....................       glcd_text57(30, 34, T_secado, 1, ON);            // Escribe Menu en Tamaño 2.    
6602:  MOVLW  1E
6604:  MOVLB  3
6606:  MOVWF  xC3
6608:  MOVLW  22
660A:  MOVWF  xC4
660C:  MOVLW  01
660E:  MOVWF  xC6
6610:  MOVLW  A3
6612:  MOVWF  xC5
6614:  MOVLW  01
6616:  MOVWF  xC7
6618:  MOVWF  xC8
661A:  MOVLB  0
661C:  CALL   306A
....................       displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
6620:  MOVFF  222,3B4
6624:  MOVLW  24
6626:  MOVLB  3
6628:  MOVWF  xB5
662A:  MOVLW  2A
662C:  MOVWF  xB6
662E:  MOVLW  01
6630:  MOVWF  xB7
6632:  MOVLB  0
6634:  CALL   35CC
6638:  MOVFF  221,3B4
663C:  MOVLW  2A
663E:  MOVLB  3
6640:  MOVWF  xB5
6642:  MOVWF  xB6
6644:  MOVLW  01
6646:  MOVWF  xB7
6648:  MOVLB  0
664A:  CALL   35CC
....................       displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1); 
664E:  MOVFF  220,3B4
6652:  MOVLW  36
6654:  MOVLB  3
6656:  MOVWF  xB5
6658:  MOVLW  2A
665A:  MOVWF  xB6
665C:  MOVLW  01
665E:  MOVWF  xB7
6660:  MOVLB  0
6662:  CALL   35CC
6666:  MOVFF  21F,3B4
666A:  MOVLW  3C
666C:  MOVLB  3
666E:  MOVWF  xB5
6670:  MOVLW  2A
6672:  MOVWF  xB6
6674:  MOVLW  01
6676:  MOVWF  xB7
6678:  MOVLB  0
667A:  CALL   35CC
....................  
....................             if(Fly==40) // Si posición en y esta en donde aparece lo de tiempo de secado 
667E:  MOVLB  1
6680:  MOVF   xFF,W
6682:  SUBLW  28
6684:  BTFSS  FD8.2
6686:  BRA    6850
....................                {if(unidad==1) // Si se acepto el desfogue rapido. 
6688:  DECFSZ xF8,W
668A:  BRA    683E
....................                 
....................                   {  if(Flx==36) // Si esta en la decena de minutos. 
668C:  MOVF   xFE,W
668E:  SUBLW  24
6690:  BNZ   66F2
....................                         {displayTiempo(Tsecadop[3],36,42,2);displayTiempo(Tsecadop[2],42,42,1); 
6692:  MOVFF  222,3B4
6696:  MOVLW  24
6698:  MOVLB  3
669A:  MOVWF  xB5
669C:  MOVLW  2A
669E:  MOVWF  xB6
66A0:  MOVLW  02
66A2:  MOVWF  xB7
66A4:  MOVLB  0
66A6:  CALL   35CC
66AA:  MOVFF  221,3B4
66AE:  MOVLW  2A
66B0:  MOVLB  3
66B2:  MOVWF  xB5
66B4:  MOVWF  xB6
66B6:  MOVLW  01
66B8:  MOVWF  xB7
66BA:  MOVLB  0
66BC:  CALL   35CC
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1);} 
66C0:  MOVFF  220,3B4
66C4:  MOVLW  36
66C6:  MOVLB  3
66C8:  MOVWF  xB5
66CA:  MOVLW  2A
66CC:  MOVWF  xB6
66CE:  MOVLW  01
66D0:  MOVWF  xB7
66D2:  MOVLB  0
66D4:  CALL   35CC
66D8:  MOVFF  21F,3B4
66DC:  MOVLW  3C
66DE:  MOVLB  3
66E0:  MOVWF  xB5
66E2:  MOVLW  2A
66E4:  MOVWF  xB6
66E6:  MOVLW  01
66E8:  MOVWF  xB7
66EA:  MOVLB  0
66EC:  CALL   35CC
66F0:  MOVLB  1
....................                          
....................                      if(Flx==42) // Si esta en la unidad de minutos. 
66F2:  MOVF   xFE,W
66F4:  SUBLW  2A
66F6:  BNZ   6758
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,2); 
66F8:  MOVFF  222,3B4
66FC:  MOVLW  24
66FE:  MOVLB  3
6700:  MOVWF  xB5
6702:  MOVLW  2A
6704:  MOVWF  xB6
6706:  MOVLW  01
6708:  MOVWF  xB7
670A:  MOVLB  0
670C:  CALL   35CC
6710:  MOVFF  221,3B4
6714:  MOVLW  2A
6716:  MOVLB  3
6718:  MOVWF  xB5
671A:  MOVWF  xB6
671C:  MOVLW  02
671E:  MOVWF  xB7
6720:  MOVLB  0
6722:  CALL   35CC
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,1);} 
6726:  MOVFF  220,3B4
672A:  MOVLW  36
672C:  MOVLB  3
672E:  MOVWF  xB5
6730:  MOVLW  2A
6732:  MOVWF  xB6
6734:  MOVLW  01
6736:  MOVWF  xB7
6738:  MOVLB  0
673A:  CALL   35CC
673E:  MOVFF  21F,3B4
6742:  MOVLW  3C
6744:  MOVLB  3
6746:  MOVWF  xB5
6748:  MOVLW  2A
674A:  MOVWF  xB6
674C:  MOVLW  01
674E:  MOVWF  xB7
6750:  MOVLB  0
6752:  CALL   35CC
6756:  MOVLB  1
....................                          
....................                      if(Flx==54) // Si esta en la decena de segundos. 
6758:  MOVF   xFE,W
675A:  SUBLW  36
675C:  BNZ   67BE
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
675E:  MOVFF  222,3B4
6762:  MOVLW  24
6764:  MOVLB  3
6766:  MOVWF  xB5
6768:  MOVLW  2A
676A:  MOVWF  xB6
676C:  MOVLW  01
676E:  MOVWF  xB7
6770:  MOVLB  0
6772:  CALL   35CC
6776:  MOVFF  221,3B4
677A:  MOVLW  2A
677C:  MOVLB  3
677E:  MOVWF  xB5
6780:  MOVWF  xB6
6782:  MOVLW  01
6784:  MOVWF  xB7
6786:  MOVLB  0
6788:  CALL   35CC
....................                         displayTiempo(Tsecadop[1],54,42,2);displayTiempo(Tsecadop[0],60,42,1);} 
678C:  MOVFF  220,3B4
6790:  MOVLW  36
6792:  MOVLB  3
6794:  MOVWF  xB5
6796:  MOVLW  2A
6798:  MOVWF  xB6
679A:  MOVLW  02
679C:  MOVWF  xB7
679E:  MOVLB  0
67A0:  CALL   35CC
67A4:  MOVFF  21F,3B4
67A8:  MOVLW  3C
67AA:  MOVLB  3
67AC:  MOVWF  xB5
67AE:  MOVLW  2A
67B0:  MOVWF  xB6
67B2:  MOVLW  01
67B4:  MOVWF  xB7
67B6:  MOVLB  0
67B8:  CALL   35CC
67BC:  MOVLB  1
....................                          
....................                      if(Flx==60) // Si esta en la decena de segundos. 
67BE:  MOVF   xFE,W
67C0:  SUBLW  3C
67C2:  BNZ   6824
....................                         {displayTiempo(Tsecadop[3],36,42,1);displayTiempo(Tsecadop[2],42,42,1); 
67C4:  MOVFF  222,3B4
67C8:  MOVLW  24
67CA:  MOVLB  3
67CC:  MOVWF  xB5
67CE:  MOVLW  2A
67D0:  MOVWF  xB6
67D2:  MOVLW  01
67D4:  MOVWF  xB7
67D6:  MOVLB  0
67D8:  CALL   35CC
67DC:  MOVFF  221,3B4
67E0:  MOVLW  2A
67E2:  MOVLB  3
67E4:  MOVWF  xB5
67E6:  MOVWF  xB6
67E8:  MOVLW  01
67EA:  MOVWF  xB7
67EC:  MOVLB  0
67EE:  CALL   35CC
....................                         displayTiempo(Tsecadop[1],54,42,1);displayTiempo(Tsecadop[0],60,42,2);} 
67F2:  MOVFF  220,3B4
67F6:  MOVLW  36
67F8:  MOVLB  3
67FA:  MOVWF  xB5
67FC:  MOVLW  2A
67FE:  MOVWF  xB6
6800:  MOVLW  01
6802:  MOVWF  xB7
6804:  MOVLB  0
6806:  CALL   35CC
680A:  MOVFF  21F,3B4
680E:  MOVLW  3C
6810:  MOVLB  3
6812:  MOVWF  xB5
6814:  MOVLW  2A
6816:  MOVWF  xB6
6818:  MOVLW  02
681A:  MOVWF  xB7
681C:  MOVLB  0
681E:  CALL   35CC
6822:  MOVLB  1
....................                          
....................                      if(Flx>60) // Si paso de unidades de segundos, quiere decir que acepto lo programado y vuelve a Menú principal.   
6824:  MOVF   xFE,W
6826:  SUBLW  3C
6828:  BC    683C
....................                         {Fly=Fly+16;estadot40=0;estadoc=0;estadoi=0;estadol=0;estadop=1;}  
682A:  MOVLW  10
682C:  ADDWF  xFF,F
682E:  MOVLB  2
6830:  BCF    x03.0
6832:  BCF    x03.1
6834:  BCF    x03.2
6836:  BCF    x03.3
6838:  BSF    x03.4
683A:  MOVLB  1
....................                          
....................                } 
....................                 else 
683C:  BRA    6850
....................                   {Fly=56;estadot40=0;estadoc=0;estadoi=0;estadol=0;estadop=1;} 
683E:  MOVLW  38
6840:  MOVWF  xFF
6842:  MOVLB  2
6844:  BCF    x03.0
6846:  BCF    x03.1
6848:  BCF    x03.2
684A:  BCF    x03.3
684C:  BSF    x03.4
684E:  MOVLB  1
....................                } 
....................                 
....................                 
....................                if(Fly==56) 
6850:  MOVF   xFF,W
6852:  SUBLW  38
6854:  BNZ   68C4
....................                {glcd_text57(0, 55, T, 1, ON); // Muestra la palabra Temperatura de esterilización 
6856:  MOVLB  3
6858:  CLRF   xC3
685A:  MOVLW  37
685C:  MOVWF  xC4
685E:  MOVLW  01
6860:  MOVWF  xC6
6862:  MOVLW  86
6864:  MOVWF  xC5
6866:  MOVLW  01
6868:  MOVWF  xC7
686A:  MOVWF  xC8
686C:  MOVLB  0
686E:  CALL   306A
....................                glcd_text57(66, 55, Vacio, 1, ON); //  
6872:  MOVLW  42
6874:  MOVLB  3
6876:  MOVWF  xC3
6878:  MOVLW  37
687A:  MOVWF  xC4
687C:  MOVLW  01
687E:  MOVWF  xC6
6880:  MOVLW  16
6882:  MOVWF  xC5
6884:  MOVLW  01
6886:  MOVWF  xC7
6888:  MOVWF  xC8
688A:  MOVLB  0
688C:  CALL   306A
....................                displayTiempo(Setpoint,72,55,4); 
6890:  MOVFF  224,3B4
6894:  MOVLW  48
6896:  MOVLB  3
6898:  MOVWF  xB5
689A:  MOVLW  37
689C:  MOVWF  xB6
689E:  MOVLW  04
68A0:  MOVWF  xB7
68A2:  MOVLB  0
68A4:  CALL   35CC
....................                glcd_circle(93,55,2,NO,ON); 
68A8:  MOVLW  5D
68AA:  MOVLB  3
68AC:  MOVWF  xB3
68AE:  MOVLW  37
68B0:  MOVWF  xB4
68B2:  MOVLW  02
68B4:  MOVWF  xB5
68B6:  CLRF   xB6
68B8:  MOVLW  01
68BA:  MOVWF  xB7
68BC:  MOVLB  0
68BE:  CALL   3C3E
68C2:  MOVLB  1
....................                } 
....................                if(Fly!=56) 
68C4:  MOVF   xFF,W
68C6:  SUBLW  38
68C8:  BZ    6938
....................                {  glcd_text57(0, 55, T, 1, ON); // Muestra la palabra Temperatura de esterilización 
68CA:  MOVLB  3
68CC:  CLRF   xC3
68CE:  MOVLW  37
68D0:  MOVWF  xC4
68D2:  MOVLW  01
68D4:  MOVWF  xC6
68D6:  MOVLW  86
68D8:  MOVWF  xC5
68DA:  MOVLW  01
68DC:  MOVWF  xC7
68DE:  MOVWF  xC8
68E0:  MOVLB  0
68E2:  CALL   306A
....................                glcd_text57(66, 55, Vacio, 1, ON); //  
68E6:  MOVLW  42
68E8:  MOVLB  3
68EA:  MOVWF  xC3
68EC:  MOVLW  37
68EE:  MOVWF  xC4
68F0:  MOVLW  01
68F2:  MOVWF  xC6
68F4:  MOVLW  16
68F6:  MOVWF  xC5
68F8:  MOVLW  01
68FA:  MOVWF  xC7
68FC:  MOVWF  xC8
68FE:  MOVLB  0
6900:  CALL   306A
....................                displayTiempo(Setpoint,72,55,1); 
6904:  MOVFF  224,3B4
6908:  MOVLW  48
690A:  MOVLB  3
690C:  MOVWF  xB5
690E:  MOVLW  37
6910:  MOVWF  xB6
6912:  MOVLW  01
6914:  MOVWF  xB7
6916:  MOVLB  0
6918:  CALL   35CC
....................                glcd_circle(93,55,2,NO,ON); 
691C:  MOVLW  5D
691E:  MOVLB  3
6920:  MOVWF  xB3
6922:  MOVLW  37
6924:  MOVWF  xB4
6926:  MOVLW  02
6928:  MOVWF  xB5
692A:  CLRF   xB6
692C:  MOVLW  01
692E:  MOVWF  xB7
6930:  MOVLB  0
6932:  CALL   3C3E
6936:  MOVLB  1
....................                } 
....................                 
....................        if(LEFT)// Si oprime Izquier|da 
6938:  BSF    F92.5
693A:  BTFSS  F80.5
693C:  BRA    69E6
....................        {  if(Flanco3 == 0)  
693E:  MOVLB  2
6940:  BTFSC  x04.0
6942:  BRA    69E4
....................             {Flanco3 = 1; 
6944:  BSF    x04.0
....................                if(Fly==24){Fly=Fly-16;} 
6946:  MOVLB  1
6948:  MOVF   xFF,W
694A:  SUBLW  18
694C:  BNZ   6954
694E:  MOVLW  10
6950:  SUBWF  xFF,F
....................                else{Flx=Flx-6;} 
6952:  BRA    6958
6954:  MOVLW  06
6956:  SUBWF  xFE,F
....................                if((Fly==40)&&(Flx<36)){Fly=Fly-16;} 
6958:  MOVF   xFF,W
695A:  SUBLW  28
695C:  BNZ   6968
695E:  MOVF   xFE,W
6960:  SUBLW  23
6962:  BNC   6968
6964:  MOVLW  10
6966:  SUBWF  xFF,F
....................                if((Fly==8)&&(Flx<36)){Menu=16;glcd_fillScreen(OFF);Flecha2=n_opcionL; Flecha=n_opcionL;n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;} 
6968:  MOVF   xFF,W
696A:  SUBLW  08
696C:  BNZ   699A
696E:  MOVF   xFE,W
6970:  SUBLW  23
6972:  BNC   699A
6974:  MOVLW  10
6976:  MOVWF  xF5
6978:  MOVLB  3
697A:  CLRF   xB4
697C:  MOVLB  0
697E:  CALL   2E06
6982:  MOVFF  1F7,1FB
6986:  MOVFF  1F7,1F9
698A:  MOVLW  20
698C:  MOVLB  1
698E:  MOVWF  xF6
6990:  MOVLW  10
6992:  MOVWF  xF7
6994:  MOVWF  xFC
6996:  MOVLW  20
6998:  MOVWF  xFD
....................                if(Flx==48){Flx=42;};if(Flx==55){Flx=30;};delay_ms(30);delay_ms(30); 
699A:  MOVF   xFE,W
699C:  SUBLW  30
699E:  BNZ   69A4
69A0:  MOVLW  2A
69A2:  MOVWF  xFE
69A4:  MOVF   xFE,W
69A6:  SUBLW  37
69A8:  BNZ   69AE
69AA:  MOVLW  1E
69AC:  MOVWF  xFE
69AE:  MOVLW  1E
69B0:  MOVLB  3
69B2:  MOVWF  xB9
69B4:  MOVLB  0
69B6:  CALL   24D0
69BA:  MOVLW  1E
69BC:  MOVLB  3
69BE:  MOVWF  xB9
69C0:  MOVLB  0
69C2:  CALL   24D0
....................                if(Fly==56){Fly=8;Flx=36;};delay_ms(30); 
69C6:  MOVLB  1
69C8:  MOVF   xFF,W
69CA:  SUBLW  38
69CC:  BNZ   69D6
69CE:  MOVLW  08
69D0:  MOVWF  xFF
69D2:  MOVLW  24
69D4:  MOVWF  xFE
69D6:  MOVLW  1E
69D8:  MOVLB  3
69DA:  MOVWF  xB9
69DC:  MOVLB  0
69DE:  CALL   24D0
69E2:  MOVLB  2
....................              } 
....................         } 
....................          else 
69E4:  BRA    69EA
....................             {Flanco3 = 0;}                 
69E6:  MOVLB  2
69E8:  BCF    x04.0
....................                 
....................         if(Testerilizacionp[0]<0) // Si esta unidad es menor a 0 pasa a 9. 
69EA:  BTFSC  x17.7
69EC:  BRA    69F0
69EE:  BRA    69F4
....................           {Testerilizacionp[0]=9;} 
69F0:  MOVLW  09
69F2:  MOVWF  x17
....................         if(Testerilizacionp[1]<0) // Si esta unidad es menor a 0 pasa a 5. 
69F4:  BTFSC  x18.7
69F6:  BRA    69FA
69F8:  BRA    69FE
....................           {Testerilizacionp[1]=5;} 
69FA:  MOVLW  05
69FC:  MOVWF  x18
....................         if(Testerilizacionp[2]<0) // Si esta unidad es menor a 0 pasa a 9. 
69FE:  BTFSC  x19.7
6A00:  BRA    6A04
6A02:  BRA    6A08
....................           {Testerilizacionp[2]=9;} 
6A04:  MOVLW  09
6A06:  MOVWF  x19
....................         if(Testerilizacionp[3]<0) // Si esta unidad es menor a 0 pasa a 9. 
6A08:  BTFSC  x1A.7
6A0A:  BRA    6A0E
6A0C:  BRA    6A12
....................           {Testerilizacionp[3]=9;}   
6A0E:  MOVLW  09
6A10:  MOVWF  x1A
....................            
....................         if(Testerilizacionp[0]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6A12:  BTFSC  x17.7
6A14:  BRA    6A1E
6A16:  MOVF   x17,W
6A18:  SUBLW  09
6A1A:  BC    6A1E
....................           {Testerilizacionp[0]=0;} 
6A1C:  CLRF   x17
....................         if(Testerilizacionp[1]>5) // Si esta unidad es mayor a 5 pasa a 0. 
6A1E:  BTFSC  x18.7
6A20:  BRA    6A2A
6A22:  MOVF   x18,W
6A24:  SUBLW  05
6A26:  BC    6A2A
....................           {Testerilizacionp[1]=0;} 
6A28:  CLRF   x18
....................         if(Testerilizacionp[2]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6A2A:  BTFSC  x19.7
6A2C:  BRA    6A36
6A2E:  MOVF   x19,W
6A30:  SUBLW  09
6A32:  BC    6A36
....................           {Testerilizacionp[2]=0;} 
6A34:  CLRF   x19
....................         if(Testerilizacionp[3]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6A36:  BTFSC  x1A.7
6A38:  BRA    6A42
6A3A:  MOVF   x1A,W
6A3C:  SUBLW  09
6A3E:  BC    6A42
....................           {Testerilizacionp[3]=0;}     
6A40:  CLRF   x1A
....................            
....................         if(Tsecadop[0]<0) // Si esta unidad es menor a 0 pasa a 9. 
6A42:  BTFSC  x1F.7
6A44:  BRA    6A48
6A46:  BRA    6A4C
....................           {Tsecadop[0]=9;} 
6A48:  MOVLW  09
6A4A:  MOVWF  x1F
....................         if(Tsecadop[1]<0) // Si esta unidad es menor a 0 pasa a 5. 
6A4C:  BTFSC  x20.7
6A4E:  BRA    6A52
6A50:  BRA    6A56
....................           {Tsecadop[1]=5;} 
6A52:  MOVLW  05
6A54:  MOVWF  x20
....................         if(Tsecadop[2]<0) // Si esta unidad es menor a 0 pasa a 9. 
6A56:  BTFSC  x21.7
6A58:  BRA    6A5C
6A5A:  BRA    6A60
....................           {Tsecadop[2]=9;} 
6A5C:  MOVLW  09
6A5E:  MOVWF  x21
....................         if(Tsecadop[3]<0) // Si esta unidad es menor a 0 pasa a 9. 
6A60:  BTFSC  x22.7
6A62:  BRA    6A66
6A64:  BRA    6A6A
....................           {Tsecadop[3]=9;}   
6A66:  MOVLW  09
6A68:  MOVWF  x22
....................            
....................         if(Tsecadop[0]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6A6A:  BTFSC  x1F.7
6A6C:  BRA    6A76
6A6E:  MOVF   x1F,W
6A70:  SUBLW  09
6A72:  BC    6A76
....................           {Tsecadop[0]=0;} 
6A74:  CLRF   x1F
....................         if(Tsecadop[1]>5) // Si esta unidad es mayor a 5 pasa a 0. 
6A76:  BTFSC  x20.7
6A78:  BRA    6A82
6A7A:  MOVF   x20,W
6A7C:  SUBLW  05
6A7E:  BC    6A82
....................           {Tsecadop[1]=0;} 
6A80:  CLRF   x20
....................         if(Tsecadop[2]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6A82:  BTFSC  x21.7
6A84:  BRA    6A8E
6A86:  MOVF   x21,W
6A88:  SUBLW  09
6A8A:  BC    6A8E
....................           {Tsecadop[2]=0;} 
6A8C:  CLRF   x21
....................         if(Tsecadop[3]>9) // Si esta unidad es mayor a 9 pasa a 0. 
6A8E:  BTFSC  x22.7
6A90:  BRA    6A9A
6A92:  MOVF   x22,W
6A94:  SUBLW  09
6A96:  BC    6A9A
....................           {Tsecadop[3]=0;}       
6A98:  CLRF   x22
....................           
....................          if(RIGHT)// Si oprime derecha 
6A9A:  BSF    F92.3
6A9C:  BTFSS  F80.3
6A9E:  BRA    6CE6
....................       {  if(Flanco1 == 0)  
6AA0:  BTFSC  x03.6
6AA2:  BRA    6CE4
....................             {Flanco1 = 1; 
6AA4:  BSF    x03.6
....................                if(Fly==24){Fly=Fly+16;} 
6AA6:  MOVLB  1
6AA8:  MOVF   xFF,W
6AAA:  SUBLW  18
6AAC:  BNZ   6AB4
6AAE:  MOVLW  10
6AB0:  ADDWF  xFF,F
....................                else{Flx=Flx+6;} 
6AB2:  BRA    6AB8
6AB4:  MOVLW  06
6AB6:  ADDWF  xFE,F
....................                if(Flx==48){Flx=54;};if(Flx==30){Flx=55;};delay_ms(30); 
6AB8:  MOVF   xFE,W
6ABA:  SUBLW  30
6ABC:  BNZ   6AC2
6ABE:  MOVLW  36
6AC0:  MOVWF  xFE
6AC2:  MOVF   xFE,W
6AC4:  SUBLW  1E
6AC6:  BNZ   6ACC
6AC8:  MOVLW  37
6ACA:  MOVWF  xFE
6ACC:  MOVLW  1E
6ACE:  MOVLB  3
6AD0:  MOVWF  xB9
6AD2:  MOVLB  0
6AD4:  CALL   24D0
....................                if(Fly==56) 
6AD8:  MOVLB  1
6ADA:  MOVF   xFF,W
6ADC:  SUBLW  38
6ADE:  BTFSS  FD8.2
6AE0:  BRA    6CE2
....................                { write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]);write_eeprom(2,Testerilizacionp[2]); 
6AE2:  CLRF   FA9
6AE4:  MOVFF  217,FA8
6AE8:  BCF    FA6.6
6AEA:  BCF    FA6.7
6AEC:  BSF    FA6.2
6AEE:  MOVF   FF2,W
6AF0:  MOVWF  00
6AF2:  BCF    FF2.7
6AF4:  MOVLB  F
6AF6:  MOVLW  55
6AF8:  MOVWF  FA7
6AFA:  MOVLW  AA
6AFC:  MOVWF  FA7
6AFE:  BSF    FA6.1
6B00:  BTFSC  FA6.1
6B02:  BRA    6B00
6B04:  BCF    FA6.2
6B06:  MOVF   00,W
6B08:  IORWF  FF2,F
6B0A:  MOVLW  01
6B0C:  MOVWF  FA9
6B0E:  MOVFF  218,FA8
6B12:  BCF    FA6.6
6B14:  BCF    FA6.7
6B16:  BSF    FA6.2
6B18:  MOVF   FF2,W
6B1A:  MOVWF  00
6B1C:  BCF    FF2.7
6B1E:  MOVLW  55
6B20:  MOVWF  FA7
6B22:  MOVLW  AA
6B24:  MOVWF  FA7
6B26:  BSF    FA6.1
6B28:  BTFSC  FA6.1
6B2A:  BRA    6B28
6B2C:  BCF    FA6.2
6B2E:  MOVF   00,W
6B30:  IORWF  FF2,F
6B32:  MOVLW  02
6B34:  MOVWF  FA9
6B36:  MOVFF  219,FA8
6B3A:  BCF    FA6.6
6B3C:  BCF    FA6.7
6B3E:  BSF    FA6.2
6B40:  MOVF   FF2,W
6B42:  MOVWF  00
6B44:  BCF    FF2.7
6B46:  MOVLW  55
6B48:  MOVWF  FA7
6B4A:  MOVLW  AA
6B4C:  MOVWF  FA7
6B4E:  BSF    FA6.1
6B50:  BTFSC  FA6.1
6B52:  BRA    6B50
6B54:  BCF    FA6.2
6B56:  MOVF   00,W
6B58:  IORWF  FF2,F
....................                  write_eeprom(3,Testerilizacionp[3]); 
6B5A:  MOVLW  03
6B5C:  MOVWF  FA9
6B5E:  MOVFF  21A,FA8
6B62:  BCF    FA6.6
6B64:  BCF    FA6.7
6B66:  BSF    FA6.2
6B68:  MOVFF  FF2,00
6B6C:  BCF    FF2.7
6B6E:  MOVLW  55
6B70:  MOVWF  FA7
6B72:  MOVLW  AA
6B74:  MOVWF  FA7
6B76:  BSF    FA6.1
6B78:  BTFSC  FA6.1
6B7A:  BRA    6B78
6B7C:  BCF    FA6.2
6B7E:  MOVF   00,W
6B80:  IORWF  FF2,F
....................                  write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]);write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
6B82:  MOVLW  04
6B84:  MOVWF  FA9
6B86:  MOVFF  21F,FA8
6B8A:  BCF    FA6.6
6B8C:  BCF    FA6.7
6B8E:  BSF    FA6.2
6B90:  MOVFF  FF2,00
6B94:  BCF    FF2.7
6B96:  MOVLW  55
6B98:  MOVWF  FA7
6B9A:  MOVLW  AA
6B9C:  MOVWF  FA7
6B9E:  BSF    FA6.1
6BA0:  BTFSC  FA6.1
6BA2:  BRA    6BA0
6BA4:  BCF    FA6.2
6BA6:  MOVF   00,W
6BA8:  IORWF  FF2,F
6BAA:  MOVLW  05
6BAC:  MOVWF  FA9
6BAE:  MOVFF  220,FA8
6BB2:  BCF    FA6.6
6BB4:  BCF    FA6.7
6BB6:  BSF    FA6.2
6BB8:  MOVFF  FF2,00
6BBC:  BCF    FF2.7
6BBE:  MOVLW  55
6BC0:  MOVWF  FA7
6BC2:  MOVLW  AA
6BC4:  MOVWF  FA7
6BC6:  BSF    FA6.1
6BC8:  BTFSC  FA6.1
6BCA:  BRA    6BC8
6BCC:  BCF    FA6.2
6BCE:  MOVF   00,W
6BD0:  IORWF  FF2,F
6BD2:  MOVLW  06
6BD4:  MOVWF  FA9
6BD6:  MOVFF  221,FA8
6BDA:  BCF    FA6.6
6BDC:  BCF    FA6.7
6BDE:  BSF    FA6.2
6BE0:  MOVFF  FF2,00
6BE4:  BCF    FF2.7
6BE6:  MOVLW  55
6BE8:  MOVWF  FA7
6BEA:  MOVLW  AA
6BEC:  MOVWF  FA7
6BEE:  BSF    FA6.1
6BF0:  BTFSC  FA6.1
6BF2:  BRA    6BF0
6BF4:  BCF    FA6.2
6BF6:  MOVF   00,W
6BF8:  IORWF  FF2,F
6BFA:  MOVLW  07
6BFC:  MOVWF  FA9
6BFE:  MOVFF  222,FA8
6C02:  BCF    FA6.6
6C04:  BCF    FA6.7
6C06:  BSF    FA6.2
6C08:  MOVFF  FF2,00
6C0C:  BCF    FF2.7
6C0E:  MOVLW  55
6C10:  MOVWF  FA7
6C12:  MOVLW  AA
6C14:  MOVWF  FA7
6C16:  BSF    FA6.1
6C18:  BTFSC  FA6.1
6C1A:  BRA    6C18
6C1C:  BCF    FA6.2
6C1E:  MOVF   00,W
6C20:  IORWF  FF2,F
....................                  write_eeprom(8,Setpoint); 
6C22:  MOVLW  08
6C24:  MOVWF  FA9
6C26:  MOVFF  224,FA8
6C2A:  BCF    FA6.6
6C2C:  BCF    FA6.7
6C2E:  BSF    FA6.2
6C30:  MOVFF  FF2,00
6C34:  BCF    FF2.7
6C36:  MOVLW  55
6C38:  MOVWF  FA7
6C3A:  MOVLW  AA
6C3C:  MOVWF  FA7
6C3E:  BSF    FA6.1
6C40:  BTFSC  FA6.1
6C42:  BRA    6C40
6C44:  BCF    FA6.2
6C46:  MOVF   00,W
6C48:  IORWF  FF2,F
....................                  if(Liquid==1) 
6C4A:  MOVLB  2
6C4C:  DECFSZ x00,W
6C4E:  BRA    6C62
....................                  {Menu=90;glcd_fillScreen(OFF);} 
6C50:  MOVLW  5A
6C52:  MOVLB  1
6C54:  MOVWF  xF5
6C56:  MOVLB  3
6C58:  CLRF   xB4
6C5A:  MOVLB  0
6C5C:  CALL   2E06
....................                  else 
6C60:  BRA    6CC2
....................                  {Menu=100;glcd_rect(25, 18, 40, 53, NO, ON);Flecha2=n_opcionL; Flecha=n_opcionL; 
6C62:  MOVLW  64
6C64:  MOVLB  1
6C66:  MOVWF  xF5
6C68:  MOVLW  19
6C6A:  MOVLB  3
6C6C:  MOVWF  xC5
6C6E:  MOVLW  12
6C70:  MOVWF  xC6
6C72:  MOVLW  28
6C74:  MOVWF  xC7
6C76:  MOVLW  35
6C78:  MOVWF  xC8
6C7A:  CLRF   xC9
6C7C:  MOVLW  01
6C7E:  MOVWF  xCA
6C80:  MOVLB  0
6C82:  CALL   350A
6C86:  MOVFF  1F7,1FB
6C8A:  MOVFF  1F7,1F9
....................                  n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;glcd_fillScreen(OFF);glcd_text57(0, 55, Calentando, 1, ON);} 
6C8E:  MOVLW  20
6C90:  MOVLB  1
6C92:  MOVWF  xF6
6C94:  MOVLW  10
6C96:  MOVWF  xF7
6C98:  MOVWF  xFC
6C9A:  MOVLW  20
6C9C:  MOVWF  xFD
6C9E:  MOVLB  3
6CA0:  CLRF   xB4
6CA2:  MOVLB  0
6CA4:  CALL   2E06
6CA8:  MOVLB  3
6CAA:  CLRF   xC3
6CAC:  MOVLW  37
6CAE:  MOVWF  xC4
6CB0:  CLRF   xC6
6CB2:  MOVLW  C9
6CB4:  MOVWF  xC5
6CB6:  MOVLW  01
6CB8:  MOVWF  xC7
6CBA:  MOVWF  xC8
6CBC:  MOVLB  0
6CBE:  CALL   306A
....................                  glcd_rect(15, 18, 30, 53, NO, ON); 
6CC2:  MOVLW  0F
6CC4:  MOVLB  3
6CC6:  MOVWF  xC5
6CC8:  MOVLW  12
6CCA:  MOVWF  xC6
6CCC:  MOVLW  1E
6CCE:  MOVWF  xC7
6CD0:  MOVLW  35
6CD2:  MOVWF  xC8
6CD4:  CLRF   xC9
6CD6:  MOVLW  01
6CD8:  MOVWF  xCA
6CDA:  MOVLB  0
6CDC:  CALL   350A
6CE0:  MOVLB  1
6CE2:  MOVLB  2
....................                } 
....................              } 
....................        } 
....................          else 
6CE4:  BRA    6CE8
....................             {Flanco1 = 0;} 
6CE6:  BCF    x03.6
6CE8:  MOVLB  1
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       if(Menu==90){ // Este es el menu de variación de desfogue. 
6CEA:  MOVF   xF5,W
6CEC:  SUBLW  5A
6CEE:  BTFSS  FD8.2
6CF0:  BRA    6E96
....................       glcd_text57(20,2,Desfogue_Lento,1,ON); 
6CF2:  MOVLW  14
6CF4:  MOVLB  3
6CF6:  MOVWF  xC3
6CF8:  MOVLW  02
6CFA:  MOVWF  xC4
6CFC:  MOVLW  01
6CFE:  MOVWF  xC6
6D00:  MOVLW  58
6D02:  MOVWF  xC5
6D04:  MOVLW  01
6D06:  MOVWF  xC7
6D08:  MOVWF  xC8
6D0A:  MOVLB  0
6D0C:  CALL   306A
....................       glcd_text57(30,15,Level,2,ON); 
6D10:  MOVLW  1E
6D12:  MOVLB  3
6D14:  MOVWF  xC3
6D16:  MOVLW  0F
6D18:  MOVWF  xC4
6D1A:  CLRF   xC6
6D1C:  MOVLW  D4
6D1E:  MOVWF  xC5
6D20:  MOVLW  02
6D22:  MOVWF  xC7
6D24:  MOVLW  01
6D26:  MOVWF  xC8
6D28:  MOVLB  0
6D2A:  CALL   306A
....................       displayTiempo(Nivel,50,41,5); 
6D2E:  MOVFF  20F,3B4
6D32:  MOVLW  32
6D34:  MOVLB  3
6D36:  MOVWF  xB5
6D38:  MOVLW  29
6D3A:  MOVWF  xB6
6D3C:  MOVLW  05
6D3E:  MOVWF  xB7
6D40:  MOVLB  0
6D42:  CALL   35CC
....................       glcd_rect(0,0,127,29,NO,ON); 
6D46:  MOVLB  3
6D48:  CLRF   xC5
6D4A:  CLRF   xC6
6D4C:  MOVLW  7F
6D4E:  MOVWF  xC7
6D50:  MOVLW  1D
6D52:  MOVWF  xC8
6D54:  CLRF   xC9
6D56:  MOVLW  01
6D58:  MOVWF  xCA
6D5A:  MOVLB  0
6D5C:  CALL   350A
....................        
....................       if(UP)//Si oprime hacia arriba 
6D60:  BSF    F92.1
6D62:  BTFSS  F80.1
6D64:  BRA    6D84
....................       {  if(Flanco == 0)  
6D66:  MOVLB  2
6D68:  BTFSC  x03.5
6D6A:  BRA    6D82
....................             {Flanco = 1;delay_ms(30);Nivel++; 
6D6C:  BSF    x03.5
6D6E:  MOVLW  1E
6D70:  MOVLB  3
6D72:  MOVWF  xB9
6D74:  MOVLB  0
6D76:  CALL   24D0
6D7A:  MOVLB  2
6D7C:  INCF   x0F,F
6D7E:  BTFSC  FD8.2
6D80:  INCF   x10,F
....................             } 
....................        } 
....................          else 
6D82:  BRA    6D88
....................             {Flanco = 0;} 
6D84:  MOVLB  2
6D86:  BCF    x03.5
....................              
....................       if(DOWN)//Si oprime hacia abajo 
6D88:  BSF    F92.2
6D8A:  BTFSS  F80.2
6D8C:  BRA    6DAC
....................       {  if(Flanco2 == 0)  
6D8E:  BTFSC  x03.7
6D90:  BRA    6DAA
....................             {Flanco2 = 1;delay_ms(30);Nivel--;               
6D92:  BSF    x03.7
6D94:  MOVLW  1E
6D96:  MOVLB  3
6D98:  MOVWF  xB9
6D9A:  MOVLB  0
6D9C:  CALL   24D0
6DA0:  MOVLB  2
6DA2:  MOVF   x0F,W
6DA4:  BTFSC  FD8.2
6DA6:  DECF   x10,F
6DA8:  DECF   x0F,F
....................             } 
....................       } 
....................          else 
6DAA:  BRA    6DAE
....................             {Flanco2 = 0;} 
6DAC:  BCF    x03.7
....................       if(Nivel>6) 
6DAE:  MOVF   x10,F
6DB0:  BNZ   6DB8
6DB2:  MOVF   x0F,W
6DB4:  SUBLW  06
6DB6:  BC    6DBE
....................       {Nivel=1;} 
6DB8:  CLRF   x10
6DBA:  MOVLW  01
6DBC:  MOVWF  x0F
....................       if(Nivel<1) 
6DBE:  MOVF   x0F,F
6DC0:  BNZ   6DCC
6DC2:  MOVF   x10,F
6DC4:  BNZ   6DCC
....................       {Nivel=6;} 
6DC6:  CLRF   x10
6DC8:  MOVLW  06
6DCA:  MOVWF  x0F
....................        
....................       if(RIGHT)// Si oprime derecha 
6DCC:  BSF    F92.3
6DCE:  BTFSS  F80.3
6DD0:  BRA    6E94
....................       {  if(Flanco1 == 0)  
6DD2:  BTFSC  x03.6
6DD4:  BRA    6E92
....................             {Flanco1 = 1; 
6DD6:  BSF    x03.6
....................                Menu=100;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF);Flecha2=n_opcionL; Flecha=n_opcionL; 
6DD8:  MOVLW  64
6DDA:  MOVLB  1
6DDC:  MOVWF  xF5
6DDE:  MOVLW  0F
6DE0:  MOVLB  3
6DE2:  MOVWF  xC5
6DE4:  MOVLW  12
6DE6:  MOVWF  xC6
6DE8:  MOVLW  1E
6DEA:  MOVWF  xC7
6DEC:  MOVLW  35
6DEE:  MOVWF  xC8
6DF0:  CLRF   xC9
6DF2:  MOVLW  01
6DF4:  MOVWF  xCA
6DF6:  MOVLB  0
6DF8:  CALL   350A
6DFC:  MOVLB  2
6DFE:  BCF    x04.3
6E00:  MOVLW  C0
6E02:  IORWF  FF2,F
6E04:  MOVLB  3
6E06:  CLRF   xB4
6E08:  MOVLB  0
6E0A:  CALL   2E06
6E0E:  MOVFF  1F7,1FB
6E12:  MOVFF  1F7,1F9
....................                n_opcionH=32;n_opcionL=16;nMenuL=16;nMenuH=32;glcd_text57(0, 55, Calentando, 1, ON);write_eeprom(9,Nivel); 
6E16:  MOVLW  20
6E18:  MOVLB  1
6E1A:  MOVWF  xF6
6E1C:  MOVLW  10
6E1E:  MOVWF  xF7
6E20:  MOVWF  xFC
6E22:  MOVLW  20
6E24:  MOVWF  xFD
6E26:  MOVLB  3
6E28:  CLRF   xC3
6E2A:  MOVLW  37
6E2C:  MOVWF  xC4
6E2E:  CLRF   xC6
6E30:  MOVLW  C9
6E32:  MOVWF  xC5
6E34:  MOVLW  01
6E36:  MOVWF  xC7
6E38:  MOVWF  xC8
6E3A:  MOVLB  0
6E3C:  CALL   306A
6E40:  MOVLW  09
6E42:  MOVWF  FA9
6E44:  MOVFF  20F,FA8
6E48:  BCF    FA6.6
6E4A:  BCF    FA6.7
6E4C:  BSF    FA6.2
6E4E:  MOVF   FF2,W
6E50:  MOVWF  00
6E52:  BCF    FF2.7
6E54:  MOVLB  F
6E56:  MOVLW  55
6E58:  MOVWF  FA7
6E5A:  MOVLW  AA
6E5C:  MOVWF  FA7
6E5E:  BSF    FA6.1
6E60:  BTFSC  FA6.1
6E62:  BRA    6E60
6E64:  BCF    FA6.2
6E66:  MOVF   00,W
6E68:  IORWF  FF2,F
....................                glcd_rect(15, 18, 30, 53, NO, ON);Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0; 
6E6A:  MOVLW  0F
6E6C:  MOVLB  3
6E6E:  MOVWF  xC5
6E70:  MOVLW  12
6E72:  MOVWF  xC6
6E74:  MOVLW  1E
6E76:  MOVWF  xC7
6E78:  MOVLW  35
6E7A:  MOVWF  xC8
6E7C:  CLRF   xC9
6E7E:  MOVLW  01
6E80:  MOVWF  xCA
6E82:  MOVLB  0
6E84:  CALL   350A
6E88:  MOVLB  2
6E8A:  CLRF   x1F
6E8C:  CLRF   x20
6E8E:  CLRF   x21
6E90:  CLRF   x22
....................              } 
....................        } 
....................          else 
6E92:  BRA    6E96
....................             {Flanco1 = 0;} 
6E94:  BCF    x03.6
....................           
....................       } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()) 
6E96:  MOVLB  0
6E98:  GOTO   3E68
6E9C:  MOVF   01,F
6E9E:  BTFSC  FD8.2
6EA0:  BRA    7202
.................... { 
....................    if(usb_kbhit(1)) 
6EA2:  MOVLW  01
6EA4:  MOVLB  3
6EA6:  MOVWF  xB3
6EA8:  MOVLB  0
6EAA:  GOTO   3E70
6EAE:  MOVF   01,F
6EB0:  BTFSC  FD8.2
6EB2:  BRA    70F6
....................    { 
....................       usb_get_packet(1, rxbuf, Lenbuf); 
6EB4:  MOVLW  01
6EB6:  MOVLB  3
6EB8:  MOVWF  xB3
6EBA:  CLRF   xB5
6EBC:  MOVLW  42
6EBE:  MOVWF  xB4
6EC0:  CLRF   xB7
6EC2:  MOVLW  20
6EC4:  MOVWF  xB6
6EC6:  MOVLB  0
6EC8:  GOTO   3F76
....................       if(rxbuf[0]==1) 
6ECC:  DECFSZ 42,W
6ECE:  BRA    6F60
....................       { 
....................          Ganancia=rxbuf[1];desvio=rxbuf[2];Tciclo=rxbuf[3];Setpoint=rxbuf[4];Minutos=rxbuf[5];Ganancia2=rxbuf[6];Ajuste=rxbuf[7]; 
6ED0:  MOVLB  3
6ED2:  CLRF   xBA
6ED4:  MOVFF  43,3B9
6ED8:  MOVLB  0
6EDA:  CALL   24FA
6EDE:  MOVFF  03,254
6EE2:  MOVFF  02,253
6EE6:  MOVFF  01,252
6EEA:  MOVFF  00,251
6EEE:  MOVLB  3
6EF0:  CLRF   xBA
6EF2:  MOVFF  44,3B9
6EF6:  MOVLB  0
6EF8:  CALL   24FA
6EFC:  MOVFF  03,25C
6F00:  MOVFF  02,25B
6F04:  MOVFF  01,25A
6F08:  MOVFF  00,259
6F0C:  MOVLB  3
6F0E:  CLRF   xBA
6F10:  MOVFF  45,3B9
6F14:  MOVLB  0
6F16:  CALL   24FA
6F1A:  MOVFF  03,23C
6F1E:  MOVFF  02,23B
6F22:  MOVFF  01,23A
6F26:  MOVFF  00,239
6F2A:  MOVFF  46,224
6F2E:  MOVLB  2
6F30:  CLRF   x0E
6F32:  MOVFF  47,20D
6F36:  MOVLB  3
6F38:  CLRF   xBA
6F3A:  MOVFF  48,3B9
6F3E:  MOVLB  0
6F40:  CALL   24FA
6F44:  MOVFF  03,258
6F48:  MOVFF  02,257
6F4C:  MOVFF  01,256
6F50:  MOVFF  00,255
6F54:  MOVFF  49,227
....................          Ajusten=rxbuf[10];R2=rxbuf[11]; 
6F58:  MOVFF  4C,228
6F5C:  MOVFF  4D,229
....................       } // Falta escribir en la eeprom 
....................        
....................       if(rxbuf[12]==1) 
6F60:  DECFSZ 4E,W
6F62:  BRA    70EC
....................       { 
....................          write_eeprom(10,(int8)Ganancia);write_eeprom(11,(int8)desvio);write_eeprom(12,(int8)Tciclo);write_eeprom(20,Minutos); 
6F64:  MOVFF  254,3B6
6F68:  MOVFF  253,3B5
6F6C:  MOVFF  252,3B4
6F70:  MOVFF  251,3B3
6F74:  CALL   3FC0
6F78:  MOVFF  01,3B3
6F7C:  MOVLW  0A
6F7E:  MOVWF  FA9
6F80:  MOVFF  3B3,FA8
6F84:  BCF    FA6.6
6F86:  BCF    FA6.7
6F88:  BSF    FA6.2
6F8A:  MOVF   FF2,W
6F8C:  MOVWF  00
6F8E:  BCF    FF2.7
6F90:  MOVLB  F
6F92:  MOVLW  55
6F94:  MOVWF  FA7
6F96:  MOVLW  AA
6F98:  MOVWF  FA7
6F9A:  BSF    FA6.1
6F9C:  BTFSC  FA6.1
6F9E:  BRA    6F9C
6FA0:  BCF    FA6.2
6FA2:  MOVF   00,W
6FA4:  IORWF  FF2,F
6FA6:  MOVFF  25C,3B6
6FAA:  MOVFF  25B,3B5
6FAE:  MOVFF  25A,3B4
6FB2:  MOVFF  259,3B3
6FB6:  MOVLB  0
6FB8:  CALL   3FC0
6FBC:  MOVFF  01,3B3
6FC0:  MOVLW  0B
6FC2:  MOVWF  FA9
6FC4:  MOVFF  3B3,FA8
6FC8:  BCF    FA6.6
6FCA:  BCF    FA6.7
6FCC:  BSF    FA6.2
6FCE:  MOVF   FF2,W
6FD0:  MOVWF  00
6FD2:  BCF    FF2.7
6FD4:  MOVLB  F
6FD6:  MOVLW  55
6FD8:  MOVWF  FA7
6FDA:  MOVLW  AA
6FDC:  MOVWF  FA7
6FDE:  BSF    FA6.1
6FE0:  BTFSC  FA6.1
6FE2:  BRA    6FE0
6FE4:  BCF    FA6.2
6FE6:  MOVF   00,W
6FE8:  IORWF  FF2,F
6FEA:  MOVFF  23C,3B6
6FEE:  MOVFF  23B,3B5
6FF2:  MOVFF  23A,3B4
6FF6:  MOVFF  239,3B3
6FFA:  MOVLB  0
6FFC:  CALL   3FC0
7000:  MOVFF  01,3B3
7004:  MOVLW  0C
7006:  MOVWF  FA9
7008:  MOVFF  3B3,FA8
700C:  BCF    FA6.6
700E:  BCF    FA6.7
7010:  BSF    FA6.2
7012:  MOVF   FF2,W
7014:  MOVWF  00
7016:  BCF    FF2.7
7018:  MOVLB  F
701A:  MOVLW  55
701C:  MOVWF  FA7
701E:  MOVLW  AA
7020:  MOVWF  FA7
7022:  BSF    FA6.1
7024:  BTFSC  FA6.1
7026:  BRA    7024
7028:  BCF    FA6.2
702A:  MOVF   00,W
702C:  IORWF  FF2,F
702E:  MOVLW  14
7030:  MOVWF  FA9
7032:  MOVFF  20D,FA8
7036:  BCF    FA6.6
7038:  BCF    FA6.7
703A:  BSF    FA6.2
703C:  MOVF   FF2,W
703E:  MOVWF  00
7040:  BCF    FF2.7
7042:  MOVLW  55
7044:  MOVWF  FA7
7046:  MOVLW  AA
7048:  MOVWF  FA7
704A:  BSF    FA6.1
704C:  BTFSC  FA6.1
704E:  BRA    704C
7050:  BCF    FA6.2
7052:  MOVF   00,W
7054:  IORWF  FF2,F
....................          write_eeprom(13,(int8)Ajuste);write_eeprom(14,(int8)Ajusten);write_eeprom(15,(int8)Ganancia2); 
7056:  MOVLW  0D
7058:  MOVWF  FA9
705A:  MOVFF  227,FA8
705E:  BCF    FA6.6
7060:  BCF    FA6.7
7062:  BSF    FA6.2
7064:  MOVF   FF2,W
7066:  MOVWF  00
7068:  BCF    FF2.7
706A:  MOVLW  55
706C:  MOVWF  FA7
706E:  MOVLW  AA
7070:  MOVWF  FA7
7072:  BSF    FA6.1
7074:  BTFSC  FA6.1
7076:  BRA    7074
7078:  BCF    FA6.2
707A:  MOVF   00,W
707C:  IORWF  FF2,F
707E:  MOVLW  0E
7080:  MOVWF  FA9
7082:  MOVFF  228,FA8
7086:  BCF    FA6.6
7088:  BCF    FA6.7
708A:  BSF    FA6.2
708C:  MOVF   FF2,W
708E:  MOVWF  00
7090:  BCF    FF2.7
7092:  MOVLW  55
7094:  MOVWF  FA7
7096:  MOVLW  AA
7098:  MOVWF  FA7
709A:  BSF    FA6.1
709C:  BTFSC  FA6.1
709E:  BRA    709C
70A0:  BCF    FA6.2
70A2:  MOVF   00,W
70A4:  IORWF  FF2,F
70A6:  MOVFF  258,3B6
70AA:  MOVFF  257,3B5
70AE:  MOVFF  256,3B4
70B2:  MOVFF  255,3B3
70B6:  MOVLB  0
70B8:  CALL   3FC0
70BC:  MOVFF  01,3B3
70C0:  MOVLW  0F
70C2:  MOVWF  FA9
70C4:  MOVFF  3B3,FA8
70C8:  BCF    FA6.6
70CA:  BCF    FA6.7
70CC:  BSF    FA6.2
70CE:  MOVF   FF2,W
70D0:  MOVWF  00
70D2:  BCF    FF2.7
70D4:  MOVLB  F
70D6:  MOVLW  55
70D8:  MOVWF  FA7
70DA:  MOVLW  AA
70DC:  MOVWF  FA7
70DE:  BSF    FA6.1
70E0:  BTFSC  FA6.1
70E2:  BRA    70E0
70E4:  BCF    FA6.2
70E6:  MOVF   00,W
70E8:  IORWF  FF2,F
70EA:  MOVLB  0
....................       } 
....................           
....................       if(rxbuf[13]==1) 
70EC:  DECFSZ 4F,W
70EE:  BRA    70F6
....................       { 
....................          Visua=1; 
70F0:  MOVLB  2
70F2:  BSF    x23.3
70F4:  MOVLB  0
....................       } 
....................    } 
....................     
....................    recbuf[0]=(int8)Temperatura; 
70F6:  MOVFF  270,3B6
70FA:  MOVFF  26F,3B5
70FE:  MOVFF  26E,3B4
7102:  MOVFF  26D,3B3
7106:  CALL   3FC0
710A:  MOVFF  01,22
....................    recbuf[1]=120; 
710E:  MOVLW  78
7110:  MOVWF  23
....................    d3=Temperatura-(int8)Temperatura; 
7112:  MOVFF  270,3B6
7116:  MOVFF  26F,3B5
711A:  MOVFF  26E,3B4
711E:  MOVFF  26D,3B3
7122:  CALL   3FC0
7126:  MOVLB  3
7128:  CLRF   xBA
712A:  MOVFF  01,3B9
712E:  MOVLB  0
7130:  CALL   24FA
7134:  BSF    FD8.1
7136:  MOVFF  270,3BF
713A:  MOVFF  26F,3BE
713E:  MOVFF  26E,3BD
7142:  MOVFF  26D,3BC
7146:  MOVFF  03,3C3
714A:  MOVFF  02,3C2
714E:  MOVFF  01,3C1
7152:  MOVFF  00,3C0
7156:  CALL   26E2
715A:  MOVFF  03,260
715E:  MOVFF  02,25F
7162:  MOVFF  01,25E
7166:  MOVFF  00,25D
....................    d3=d3*10.0; 
716A:  MOVFF  260,3D3
716E:  MOVFF  25F,3D2
7172:  MOVFF  25E,3D1
7176:  MOVFF  25D,3D0
717A:  MOVLB  3
717C:  CLRF   xD7
717E:  CLRF   xD6
7180:  MOVLW  20
7182:  MOVWF  xD5
7184:  MOVLW  82
7186:  MOVWF  xD4
7188:  MOVLB  0
718A:  CALL   3FFC
718E:  MOVFF  03,260
7192:  MOVFF  02,25F
7196:  MOVFF  01,25E
719A:  MOVFF  00,25D
....................    recbuf[2]=(int8)d3; 
719E:  MOVFF  260,3B6
71A2:  MOVFF  25F,3B5
71A6:  MOVFF  25E,3B4
71AA:  MOVFF  25D,3B3
71AE:  CALL   3FC0
71B2:  MOVFF  01,24
....................    recbuf[3]=(int8)Pt; 
71B6:  MOVFF  238,3B6
71BA:  MOVFF  237,3B5
71BE:  MOVFF  236,3B4
71C2:  MOVFF  235,3B3
71C6:  CALL   3FC0
71CA:  MOVFF  01,25
....................    recbuf[4]=(int8)V0; 
71CE:  MOVFF  230,3B6
71D2:  MOVFF  22F,3B5
71D6:  MOVFF  22E,3B4
71DA:  MOVFF  22D,3B3
71DE:  CALL   3FC0
71E2:  MOVFF  01,26
....................                  
....................    usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
71E6:  MOVLW  01
71E8:  MOVLB  3
71EA:  MOVWF  xB3
71EC:  CLRF   xB5
71EE:  MOVLW  22
71F0:  MOVWF  xB4
71F2:  CLRF   xB7
71F4:  MOVLW  20
71F6:  MOVWF  xB6
71F8:  MOVLW  02
71FA:  MOVWF  xB8
71FC:  MOVLB  0
71FE:  GOTO   40F2
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................       if(Menu==100){ // Este es el menu de cuando el proceso se inicio. 
7202:  MOVLB  1
7204:  MOVF   xF5,W
7206:  SUBLW  64
7208:  BTFSS  FD8.2
720A:  BRA    77D4
....................  
....................       if(n==0) 
720C:  MOVLB  2
720E:  BTFSC  x04.5
7210:  BRA    7410
....................       {glcd_imagen(5);glcd_text57(0, 0, tiempo_est, 1, ON);glcd_text57(0, 8, tiempo_sec, 1, ON);// Muestra grafica de proceso y palabras. 
7212:  MOVLW  05
7214:  MOVLB  3
7216:  MOVWF  xB3
7218:  MOVLB  0
721A:  CALL   389A
721E:  MOVLB  3
7220:  CLRF   xC3
7222:  CLRF   xC4
7224:  CLRF   xC6
7226:  MOVLW  81
7228:  MOVWF  xC5
722A:  MOVLW  01
722C:  MOVWF  xC7
722E:  MOVWF  xC8
7230:  MOVLB  0
7232:  CALL   306A
7236:  MOVLB  3
7238:  CLRF   xC3
723A:  MOVLW  08
723C:  MOVWF  xC4
723E:  CLRF   xC6
7240:  MOVLW  88
7242:  MOVWF  xC5
7244:  MOVLW  01
7246:  MOVWF  xC7
7248:  MOVWF  xC8
724A:  MOVLB  0
724C:  CALL   306A
....................        glcd_circle(95,40,2,NO,ON); 
7250:  MOVLW  5F
7252:  MOVLB  3
7254:  MOVWF  xB3
7256:  MOVLW  28
7258:  MOVWF  xB4
725A:  MOVLW  02
725C:  MOVWF  xB5
725E:  CLRF   xB6
7260:  MOVLW  01
7262:  MOVWF  xB7
7264:  MOVLB  0
7266:  CALL   3C3E
....................        glcd_text57(102,40, C, 2, ON); 
726A:  MOVLW  66
726C:  MOVLB  3
726E:  MOVWF  xC3
7270:  MOVLW  28
7272:  MOVWF  xC4
7274:  MOVLW  01
7276:  MOVWF  xC6
7278:  MOVLW  3A
727A:  MOVWF  xC5
727C:  MOVLW  02
727E:  MOVWF  xC7
7280:  MOVLW  01
7282:  MOVWF  xC8
7284:  MOVLB  0
7286:  CALL   306A
....................        if(estadot40==1)// Si selecciono programa de Textil e instrumental. Ajusta tiempos de esterilización y secado. 
728A:  MOVLB  2
728C:  BTFSS  x03.0
728E:  BRA    72AC
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2; 
7290:  CLRF   x17
7292:  CLRF   x18
7294:  MOVLW  05
7296:  MOVWF  x19
7298:  MOVLW  02
729A:  MOVWF  x1A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=1;Setpoint=121;} 
729C:  CLRF   x1F
729E:  CLRF   x20
72A0:  MOVLW  05
72A2:  MOVWF  x21
72A4:  MOVLW  01
72A6:  MOVWF  x22
72A8:  MOVLW  79
72AA:  MOVWF  x24
....................        
....................       if(estadoc==1)// Si selecciono programa de Precalentamiento. Ajusta tiempos de esterilización y secado. 
72AC:  BTFSS  x03.1
72AE:  BRA    72CA
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0; 
72B0:  CLRF   x17
72B2:  CLRF   x18
72B4:  MOVLW  05
72B6:  MOVWF  x19
72B8:  CLRF   x1A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=5;Tsecadop[3]=0;minutos=0;Setpoint=121;} 
72BA:  CLRF   x1F
72BC:  CLRF   x20
72BE:  MOVWF  x21
72C0:  CLRF   x22
72C2:  CLRF   x0E
72C4:  CLRF   x0D
72C6:  MOVLW  79
72C8:  MOVWF  x24
....................        
....................       if(estadoi==1)// Si selecciono programa de Instrumental Suave. Ajusta tiempos de esterilización y secado. 
72CA:  BTFSS  x03.2
72CC:  BRA    72E6
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1; 
72CE:  CLRF   x17
72D0:  CLRF   x18
72D2:  MOVLW  05
72D4:  MOVWF  x19
72D6:  MOVLW  01
72D8:  MOVWF  x1A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;} 
72DA:  CLRF   x1F
72DC:  CLRF   x20
72DE:  CLRF   x21
72E0:  CLRF   x22
72E2:  MOVLW  79
72E4:  MOVWF  x24
....................        
....................       if(estadol==1)// Si selecciono programa de Liquidos. Ajusta tiempos de esterilización y secado. 
72E6:  BTFSS  x03.3
72E8:  BRA    7300
....................          {Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2; 
72EA:  CLRF   x17
72EC:  CLRF   x18
72EE:  CLRF   x19
72F0:  MOVLW  02
72F2:  MOVWF  x1A
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;} 
72F4:  CLRF   x1F
72F6:  CLRF   x20
72F8:  CLRF   x21
72FA:  CLRF   x22
72FC:  MOVLW  79
72FE:  MOVWF  x24
....................         
....................       // Muestra Valor de esterilizacion programado. 
....................       displayTiempo(Testerilizacionp[3],36,0,0);displayTiempo(Testerilizacionp[2],42,0,0);glcd_text57(48, 0, Vacio, 1, ON); 
7300:  MOVFF  21A,3B4
7304:  MOVLW  24
7306:  MOVLB  3
7308:  MOVWF  xB5
730A:  CLRF   xB6
730C:  CLRF   xB7
730E:  MOVLB  0
7310:  CALL   35CC
7314:  MOVFF  219,3B4
7318:  MOVLW  2A
731A:  MOVLB  3
731C:  MOVWF  xB5
731E:  CLRF   xB6
7320:  CLRF   xB7
7322:  MOVLB  0
7324:  CALL   35CC
7328:  MOVLW  30
732A:  MOVLB  3
732C:  MOVWF  xC3
732E:  CLRF   xC4
7330:  MOVLW  01
7332:  MOVWF  xC6
7334:  MOVLW  16
7336:  MOVWF  xC5
7338:  MOVLW  01
733A:  MOVWF  xC7
733C:  MOVWF  xC8
733E:  MOVLB  0
7340:  CALL   306A
....................       displayTiempo(Testerilizacionp[1],54,0,0);displayTiempo(Testerilizacionp[0],60,0,0); 
7344:  MOVFF  218,3B4
7348:  MOVLW  36
734A:  MOVLB  3
734C:  MOVWF  xB5
734E:  CLRF   xB6
7350:  CLRF   xB7
7352:  MOVLB  0
7354:  CALL   35CC
7358:  MOVFF  217,3B4
735C:  MOVLW  3C
735E:  MOVLB  3
7360:  MOVWF  xB5
7362:  CLRF   xB6
7364:  CLRF   xB7
7366:  MOVLB  0
7368:  CALL   35CC
....................       // Muestra tiempo de secado programado. 
....................       displayTiempo(Tsecadop[3],36,8,0);displayTiempo(Tsecadop[2],42,8,0);glcd_text57(48, 8, Vacio, 1, ON); 
736C:  MOVFF  222,3B4
7370:  MOVLW  24
7372:  MOVLB  3
7374:  MOVWF  xB5
7376:  MOVLW  08
7378:  MOVWF  xB6
737A:  CLRF   xB7
737C:  MOVLB  0
737E:  CALL   35CC
7382:  MOVFF  221,3B4
7386:  MOVLW  2A
7388:  MOVLB  3
738A:  MOVWF  xB5
738C:  MOVLW  08
738E:  MOVWF  xB6
7390:  CLRF   xB7
7392:  MOVLB  0
7394:  CALL   35CC
7398:  MOVLW  30
739A:  MOVLB  3
739C:  MOVWF  xC3
739E:  MOVLW  08
73A0:  MOVWF  xC4
73A2:  MOVLW  01
73A4:  MOVWF  xC6
73A6:  MOVLW  16
73A8:  MOVWF  xC5
73AA:  MOVLW  01
73AC:  MOVWF  xC7
73AE:  MOVWF  xC8
73B0:  MOVLB  0
73B2:  CALL   306A
....................       displayTiempo(Tsecadop[1],54,8,0);displayTiempo(Tsecadop[0],60,8,0); 
73B6:  MOVFF  220,3B4
73BA:  MOVLW  36
73BC:  MOVLB  3
73BE:  MOVWF  xB5
73C0:  MOVLW  08
73C2:  MOVWF  xB6
73C4:  CLRF   xB7
73C6:  MOVLB  0
73C8:  CALL   35CC
73CC:  MOVFF  21F,3B4
73D0:  MOVLW  3C
73D2:  MOVLB  3
73D4:  MOVWF  xB5
73D6:  MOVLW  08
73D8:  MOVWF  xB6
73DA:  CLRF   xB7
73DC:  MOVLB  0
73DE:  CALL   35CC
....................       for(z=0;z<80;z++) 
73E2:  MOVLB  2
73E4:  CLRF   x02
73E6:  MOVF   x02,W
73E8:  SUBLW  4F
73EA:  BNC   740E
....................       { 
....................          Temperatura=Leer_Sensor(80); 
73EC:  MOVLW  50
73EE:  MOVLB  3
73F0:  MOVWF  xB3
73F2:  MOVLB  0
73F4:  CALL   29E8
73F8:  MOVFF  03,270
73FC:  MOVFF  02,26F
7400:  MOVFF  01,26E
7404:  MOVFF  00,26D
....................       } 
7408:  MOVLB  2
740A:  INCF   x02,F
740C:  BRA    73E6
....................        n=1;      
740E:  BSF    x04.5
....................       } 
....................       /*if((tiempo_esterilizacion==1)&&(Temperatura<(float)Setpoint-0.2)) 
....................       {if(p==0) 
....................          {Ganancia=Ganancia2;p=1;}}*/          
....................  
....................          if(Lectura==1) 
7410:  BTFSS  x04.6
7412:  BRA    7640
....................          {                       
....................             Lectura=0; 
7414:  BCF    x04.6
....................             Controla(); 
7416:  MOVLB  0
7418:  GOTO   421C
....................             displayT(Temperatura,69,20,3); 
741C:  MOVFF  270,3B6
7420:  MOVFF  26F,3B5
7424:  MOVFF  26E,3B4
7428:  MOVFF  26D,3B3
742C:  MOVLW  45
742E:  MOVLB  3
7430:  MOVWF  xB7
7432:  MOVLW  14
7434:  MOVWF  xB8
7436:  MOVLW  03
7438:  MOVWF  xB9
743A:  MOVLB  0
743C:  CALL   4898
....................             //displayT(Pt,1,20,3); 
....................             displayTiempo(Setpoint,5,20,4); 
7440:  MOVFF  224,3B4
7444:  MOVLW  05
7446:  MOVLB  3
7448:  MOVWF  xB5
744A:  MOVLW  14
744C:  MOVWF  xB6
744E:  MOVLW  04
7450:  MOVWF  xB7
7452:  MOVLB  0
7454:  CALL   35CC
....................           
....................          if(Visua==1) 
7458:  MOVLB  2
745A:  BTFSS  x23.3
745C:  BRA    754E
....................             {displayTiempo((int8)desvio,5,30,4); 
745E:  MOVFF  25C,3B6
7462:  MOVFF  25B,3B5
7466:  MOVFF  25A,3B4
746A:  MOVFF  259,3B3
746E:  MOVLB  0
7470:  CALL   3FC0
7474:  MOVFF  01,3B3
7478:  MOVFF  01,3B4
747C:  MOVLW  05
747E:  MOVLB  3
7480:  MOVWF  xB5
7482:  MOVLW  1E
7484:  MOVWF  xB6
7486:  MOVLW  04
7488:  MOVWF  xB7
748A:  MOVLB  0
748C:  CALL   35CC
....................              displayTiempo((int8)Tpulso,5,40,4); 
7490:  MOVFF  240,3B6
7494:  MOVFF  23F,3B5
7498:  MOVFF  23E,3B4
749C:  MOVFF  23D,3B3
74A0:  CALL   3FC0
74A4:  MOVFF  01,3B3
74A8:  MOVFF  01,3B4
74AC:  MOVLW  05
74AE:  MOVLB  3
74B0:  MOVWF  xB5
74B2:  MOVLW  28
74B4:  MOVWF  xB6
74B6:  MOVLW  04
74B8:  MOVWF  xB7
74BA:  MOVLB  0
74BC:  CALL   35CC
....................              displayTiempo((int8)Ganancia,30,40,4); 
74C0:  MOVFF  254,3B6
74C4:  MOVFF  253,3B5
74C8:  MOVFF  252,3B4
74CC:  MOVFF  251,3B3
74D0:  CALL   3FC0
74D4:  MOVFF  01,3B3
74D8:  MOVFF  01,3B4
74DC:  MOVLW  1E
74DE:  MOVLB  3
74E0:  MOVWF  xB5
74E2:  MOVLW  28
74E4:  MOVWF  xB6
74E6:  MOVLW  04
74E8:  MOVWF  xB7
74EA:  MOVLB  0
74EC:  CALL   35CC
....................              displayTiempo((int8)Ajuste,30,30,4); 
74F0:  MOVFF  227,3B4
74F4:  MOVLW  1E
74F6:  MOVLB  3
74F8:  MOVWF  xB5
74FA:  MOVWF  xB6
74FC:  MOVLW  04
74FE:  MOVWF  xB7
7500:  MOVLB  0
7502:  CALL   35CC
....................              displayTiempo((int8)Ajusten,30,20,4); 
7506:  MOVFF  228,3B4
750A:  MOVLW  1E
750C:  MOVLB  3
750E:  MOVWF  xB5
7510:  MOVLW  14
7512:  MOVWF  xB6
7514:  MOVLW  04
7516:  MOVWF  xB7
7518:  MOVLB  0
751A:  CALL   35CC
....................              displayTiempo((int8)Ganancia2,50,40,4); 
751E:  MOVFF  258,3B6
7522:  MOVFF  257,3B5
7526:  MOVFF  256,3B4
752A:  MOVFF  255,3B3
752E:  CALL   3FC0
7532:  MOVFF  01,3B3
7536:  MOVFF  01,3B4
753A:  MOVLW  32
753C:  MOVLB  3
753E:  MOVWF  xB5
7540:  MOVLW  28
7542:  MOVWF  xB6
7544:  MOVLW  04
7546:  MOVWF  xB7
7548:  MOVLB  0
754A:  CALL   35CC
....................             } 
....................           
....................          // Muestra Valor de esterilizacion actual. 
....................          displayTiempo(Testerilizacion[3],80,0,1);displayTiempo(Testerilizacion[2],86,0,1);glcd_text57(92, 0, Vacio, 1, ON); 
754E:  MOVFF  216,3B4
7552:  MOVLW  50
7554:  MOVLB  3
7556:  MOVWF  xB5
7558:  CLRF   xB6
755A:  MOVLW  01
755C:  MOVWF  xB7
755E:  MOVLB  0
7560:  CALL   35CC
7564:  MOVFF  215,3B4
7568:  MOVLW  56
756A:  MOVLB  3
756C:  MOVWF  xB5
756E:  CLRF   xB6
7570:  MOVLW  01
7572:  MOVWF  xB7
7574:  MOVLB  0
7576:  CALL   35CC
757A:  MOVLW  5C
757C:  MOVLB  3
757E:  MOVWF  xC3
7580:  CLRF   xC4
7582:  MOVLW  01
7584:  MOVWF  xC6
7586:  MOVLW  16
7588:  MOVWF  xC5
758A:  MOVLW  01
758C:  MOVWF  xC7
758E:  MOVWF  xC8
7590:  MOVLB  0
7592:  CALL   306A
....................          displayTiempo(Testerilizacion[1],98,0,1);displayTiempo(Testerilizacion[0],104,0,1); 
7596:  MOVFF  214,3B4
759A:  MOVLW  62
759C:  MOVLB  3
759E:  MOVWF  xB5
75A0:  CLRF   xB6
75A2:  MOVLW  01
75A4:  MOVWF  xB7
75A6:  MOVLB  0
75A8:  CALL   35CC
75AC:  MOVFF  213,3B4
75B0:  MOVLW  68
75B2:  MOVLB  3
75B4:  MOVWF  xB5
75B6:  CLRF   xB6
75B8:  MOVLW  01
75BA:  MOVWF  xB7
75BC:  MOVLB  0
75BE:  CALL   35CC
....................          // Muestra tiempo de secado actual. 
....................          displayTiempo(Tsecado[3],80,8,1);displayTiempo(Tsecado[2],86,8,1);glcd_text57(92, 8, Vacio, 1, ON); 
75C2:  MOVFF  21E,3B4
75C6:  MOVLW  50
75C8:  MOVLB  3
75CA:  MOVWF  xB5
75CC:  MOVLW  08
75CE:  MOVWF  xB6
75D0:  MOVLW  01
75D2:  MOVWF  xB7
75D4:  MOVLB  0
75D6:  CALL   35CC
75DA:  MOVFF  21D,3B4
75DE:  MOVLW  56
75E0:  MOVLB  3
75E2:  MOVWF  xB5
75E4:  MOVLW  08
75E6:  MOVWF  xB6
75E8:  MOVLW  01
75EA:  MOVWF  xB7
75EC:  MOVLB  0
75EE:  CALL   35CC
75F2:  MOVLW  5C
75F4:  MOVLB  3
75F6:  MOVWF  xC3
75F8:  MOVLW  08
75FA:  MOVWF  xC4
75FC:  MOVLW  01
75FE:  MOVWF  xC6
7600:  MOVLW  16
7602:  MOVWF  xC5
7604:  MOVLW  01
7606:  MOVWF  xC7
7608:  MOVWF  xC8
760A:  MOVLB  0
760C:  CALL   306A
....................          displayTiempo(Tsecado[1],98,8,1);displayTiempo(Tsecado[0],104,8,1); 
7610:  MOVFF  21C,3B4
7614:  MOVLW  62
7616:  MOVLB  3
7618:  MOVWF  xB5
761A:  MOVLW  08
761C:  MOVWF  xB6
761E:  MOVLW  01
7620:  MOVWF  xB7
7622:  MOVLB  0
7624:  CALL   35CC
7628:  MOVFF  21B,3B4
762C:  MOVLW  68
762E:  MOVLB  3
7630:  MOVWF  xB5
7632:  MOVLW  08
7634:  MOVWF  xB6
7636:  MOVLW  01
7638:  MOVWF  xB7
763A:  MOVLB  0
763C:  CALL   35CC
....................          } 
....................            
....................          if(Temperatura>=((float)Setpoint)-1.0)// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
7640:  MOVLB  3
7642:  CLRF   xBA
7644:  MOVFF  224,3B9
7648:  MOVLB  0
764A:  CALL   24FA
764E:  MOVFF  00,3B3
7652:  MOVFF  01,3B4
7656:  MOVFF  02,3B5
765A:  MOVFF  03,3B6
765E:  BSF    FD8.1
7660:  MOVFF  03,3BF
7664:  MOVFF  02,3BE
7668:  MOVFF  01,3BD
766C:  MOVFF  00,3BC
7670:  MOVLB  3
7672:  CLRF   xC3
7674:  CLRF   xC2
7676:  CLRF   xC1
7678:  MOVLW  7F
767A:  MOVWF  xC0
767C:  MOVLB  0
767E:  CALL   26E2
7682:  MOVFF  03,3B6
7686:  MOVFF  02,3B5
768A:  MOVFF  01,3B4
768E:  MOVFF  00,3B3
7692:  MOVFF  270,3BA
7696:  MOVFF  26F,3B9
769A:  MOVFF  26E,3B8
769E:  MOVFF  26D,3B7
76A2:  CALL   41A2
76A6:  BC    76AA
76A8:  BNZ   7724
....................             {Des=0; 
76AA:  MOVLB  2
76AC:  BCF    x23.2
....................             if(tiempo_secado==0) 
76AE:  BTFSC  x04.3
76B0:  BRA    7724
....................                {glcd_text57(0, 56, Esterilizando, 1, ON);tiempo_esterilizacion=1; 
76B2:  MOVLB  3
76B4:  CLRF   xC3
76B6:  MOVLW  38
76B8:  MOVWF  xC4
76BA:  CLRF   xC6
76BC:  MOVLW  F7
76BE:  MOVWF  xC5
76C0:  MOVLW  01
76C2:  MOVWF  xC7
76C4:  MOVWF  xC8
76C6:  MOVLB  0
76C8:  CALL   306A
76CC:  MOVLB  2
76CE:  BSF    x04.2
....................                if(est==0) 
76D0:  BTFSC  x23.0
76D2:  BRA    7724
....................                   {Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1;} 
76D4:  MOVLB  3
76D6:  CLRF   xB3
76D8:  MOVLW  5A
76DA:  MOVWF  xB4
76DC:  MOVLW  38
76DE:  MOVWF  xB5
76E0:  MOVLB  0
76E2:  CALL   4908
76E6:  MOVLW  0F
76E8:  MOVLB  3
76EA:  MOVWF  xC5
76EC:  MOVLW  12
76EE:  MOVWF  xC6
76F0:  MOVLW  1E
76F2:  MOVWF  xC7
76F4:  MOVLW  35
76F6:  MOVWF  xC8
76F8:  CLRF   xC9
76FA:  CLRF   xCA
76FC:  MOVLB  0
76FE:  CALL   350A
7702:  MOVLW  19
7704:  MOVLB  3
7706:  MOVWF  xC5
7708:  MOVLW  12
770A:  MOVWF  xC6
770C:  MOVLW  3C
770E:  MOVWF  xC7
7710:  MOVLW  1A
7712:  MOVWF  xC8
7714:  CLRF   xC9
7716:  MOVLW  01
7718:  MOVWF  xCA
771A:  MOVLB  0
771C:  CALL   350A
7720:  MOVLB  2
7722:  BSF    x23.0
....................                } 
....................              }   
....................        
....................       if((tiempo_secado==1)&&(Liquid==0)) //Si no selecciono un programa con desfogue lento, Hacer desfogue total. 
7724:  MOVLB  2
7726:  BTFSS  x04.3
7728:  BRA    7736
772A:  MOVF   x00,F
772C:  BNZ   7736
....................       {Menu=101;} 
772E:  MOVLW  65
7730:  MOVLB  1
7732:  MOVWF  xF5
7734:  MOVLB  2
....................       
....................       if(tiempo_secado==0) //Si esta calentando, debe tener la electrovalvula cerrada. 
7736:  BTFSC  x04.3
7738:  BRA    773E
....................       {Camara_OUT_off;} 
773A:  BCF    F8B.0
773C:  BCF    F94.0
....................              
....................       // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................       if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3])) 
773E:  MOVF   x17,W
7740:  SUBWF  x13,W
7742:  BNZ   77D6
7744:  MOVF   x18,W
7746:  SUBWF  x14,W
7748:  BNZ   77D6
774A:  MOVF   x19,W
774C:  SUBWF  x15,W
774E:  BNZ   77D6
7750:  MOVF   x1A,W
7752:  SUBWF  x16,W
7754:  BNZ   77D6
....................       {tiempo_esterilizacion=0; 
7756:  BCF    x04.2
....................        
....................       // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................       if(Liquid==1)    
7758:  DECFSZ x00,W
775A:  BRA    77D6
....................          {tiempo_secado=0; 
775C:  BCF    x04.3
....................             if(i==0) 
775E:  BTFSC  x04.4
7760:  BRA    77D6
....................               {Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);i=1; 
7762:  MOVLB  3
7764:  CLRF   xB3
7766:  MOVLW  5A
7768:  MOVWF  xB4
776A:  MOVLW  38
776C:  MOVWF  xB5
776E:  MOVLB  0
7770:  CALL   4908
7774:  MOVLW  19
7776:  MOVLB  3
7778:  MOVWF  xC5
777A:  MOVLW  12
777C:  MOVWF  xC6
777E:  MOVLW  3C
7780:  MOVWF  xC7
7782:  MOVLW  1A
7784:  MOVWF  xC8
7786:  CLRF   xC9
7788:  CLRF   xCA
778A:  MOVLB  0
778C:  CALL   350A
7790:  MOVLW  37
7792:  MOVLB  3
7794:  MOVWF  xC5
7796:  MOVLW  12
7798:  MOVWF  xC6
779A:  MOVLW  44
779C:  MOVWF  xC7
779E:  MOVLW  35
77A0:  MOVWF  xC8
77A2:  CLRF   xC9
77A4:  MOVLW  01
77A6:  MOVWF  xCA
77A8:  MOVLB  0
77AA:  CALL   350A
77AE:  MOVLB  2
77B0:  BSF    x04.4
....................               glcd_text57(0, 56, Desfogue_Lento, 1, ON);Menu=101;} 
77B2:  MOVLB  3
77B4:  CLRF   xC3
77B6:  MOVLW  38
77B8:  MOVWF  xC4
77BA:  MOVLW  01
77BC:  MOVWF  xC6
77BE:  MOVLW  58
77C0:  MOVWF  xC5
77C2:  MOVLW  01
77C4:  MOVWF  xC7
77C6:  MOVWF  xC8
77C8:  MOVLB  0
77CA:  CALL   306A
77CE:  MOVLW  65
77D0:  MOVLB  1
77D2:  MOVWF  xF5
77D4:  MOVLB  2
....................          } 
....................       } 
....................       
....................     } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
....................    if(Menu==101) 
77D6:  MOVLB  1
77D8:  MOVF   xF5,W
77DA:  SUBLW  65
77DC:  BTFSS  FD8.2
77DE:  BRA    7A68
....................    {         
....................       Temperatura=Leer_Sensor(80); 
77E0:  MOVLW  50
77E2:  MOVLB  3
77E4:  MOVWF  xB3
77E6:  MOVLB  0
77E8:  CALL   29E8
77EC:  MOVFF  03,270
77F0:  MOVFF  02,26F
77F4:  MOVFF  01,26E
77F8:  MOVFF  00,26D
....................                 
....................          if(Lectura==1) 
77FC:  MOVLB  2
77FE:  BTFSS  x04.6
7800:  BRA    78C0
....................          {                       
....................             Lectura=0; 
7802:  BCF    x04.6
....................             displayT(Temperatura,69,20,3); 
7804:  MOVFF  270,3B6
7808:  MOVFF  26F,3B5
780C:  MOVFF  26E,3B4
7810:  MOVFF  26D,3B3
7814:  MOVLW  45
7816:  MOVLB  3
7818:  MOVWF  xB7
781A:  MOVLW  14
781C:  MOVWF  xB8
781E:  MOVLW  03
7820:  MOVWF  xB9
7822:  MOVLB  0
7824:  CALL   4898
....................             //displayT(Pt,1,20,3); 
....................             displayTiempo(Setpoint,5,20,4); 
7828:  MOVFF  224,3B4
782C:  MOVLW  05
782E:  MOVLB  3
7830:  MOVWF  xB5
7832:  MOVLW  14
7834:  MOVWF  xB6
7836:  MOVLW  04
7838:  MOVWF  xB7
783A:  MOVLB  0
783C:  CALL   35CC
....................             // Muestra tiempo de secado actual. 
....................             displayTiempo(Tsecado[3],80,8,1);displayTiempo(Tsecado[2],86,8,1);glcd_text57(92, 8, Vacio, 1, ON); 
7840:  MOVFF  21E,3B4
7844:  MOVLW  50
7846:  MOVLB  3
7848:  MOVWF  xB5
784A:  MOVLW  08
784C:  MOVWF  xB6
784E:  MOVLW  01
7850:  MOVWF  xB7
7852:  MOVLB  0
7854:  CALL   35CC
7858:  MOVFF  21D,3B4
785C:  MOVLW  56
785E:  MOVLB  3
7860:  MOVWF  xB5
7862:  MOVLW  08
7864:  MOVWF  xB6
7866:  MOVLW  01
7868:  MOVWF  xB7
786A:  MOVLB  0
786C:  CALL   35CC
7870:  MOVLW  5C
7872:  MOVLB  3
7874:  MOVWF  xC3
7876:  MOVLW  08
7878:  MOVWF  xC4
787A:  MOVLW  01
787C:  MOVWF  xC6
787E:  MOVLW  16
7880:  MOVWF  xC5
7882:  MOVLW  01
7884:  MOVWF  xC7
7886:  MOVWF  xC8
7888:  MOVLB  0
788A:  CALL   306A
....................             displayTiempo(Tsecado[1],98,8,1);displayTiempo(Tsecado[0],104,8,1); 
788E:  MOVFF  21C,3B4
7892:  MOVLW  62
7894:  MOVLB  3
7896:  MOVWF  xB5
7898:  MOVLW  08
789A:  MOVWF  xB6
789C:  MOVLW  01
789E:  MOVWF  xB7
78A0:  MOVLB  0
78A2:  CALL   35CC
78A6:  MOVFF  21B,3B4
78AA:  MOVLW  68
78AC:  MOVLB  3
78AE:  MOVWF  xB5
78B0:  MOVLW  08
78B2:  MOVWF  xB6
78B4:  MOVLW  01
78B6:  MOVWF  xB7
78B8:  MOVLB  0
78BA:  CALL   35CC
78BE:  MOVLB  2
....................          }   
....................           
....................       if(Liquid==1) 
78C0:  DECFSZ x00,W
78C2:  BRA    79B0
....................          { 
....................          if(m<Minutos*15)// Utilizado para realizar la rampa. 
78C4:  MOVFF  20E,3B8
78C8:  MOVFF  20D,3B7
78CC:  MOVLB  3
78CE:  CLRF   xBA
78D0:  MOVLW  0F
78D2:  MOVWF  xB9
78D4:  MOVLB  0
78D6:  CALL   29C6
78DA:  MOVFF  02,03
78DE:  MOVF   01,W
78E0:  MOVLB  2
78E2:  MOVF   x0A,W
78E4:  SUBWF  02,W
78E6:  BNC   799A
78E8:  BNZ   78F0
78EA:  MOVF   01,W
78EC:  SUBWF  x09,W
78EE:  BC    799A
....................          {Resistencia_off;Camara_IN_off;Camara_OUT_on;delay_ms(100*Nivel);Camara_OUT_off;delay_ms(2000-(100*Nivel));m++; } 
78F0:  BCF    F8B.1
78F2:  BCF    F94.1
78F4:  BCF    F8B.2
78F6:  BCF    F94.2
78F8:  BSF    F8B.0
78FA:  BCF    F94.0
78FC:  MOVLB  3
78FE:  CLRF   xB8
7900:  MOVLW  64
7902:  MOVWF  xB7
7904:  MOVFF  210,3BA
7908:  MOVFF  20F,3B9
790C:  MOVLB  0
790E:  CALL   29C6
7912:  MOVFF  02,3B4
7916:  MOVFF  01,3B3
791A:  MOVFF  02,3B5
791E:  MOVLB  3
7920:  INCF   xB5,F
7922:  DECF   xB5,F
7924:  BTFSC  FD8.2
7926:  BRA    7936
7928:  MOVLW  FF
792A:  MOVWF  xB9
792C:  MOVLB  0
792E:  CALL   24D0
7932:  MOVLB  3
7934:  BRA    7922
7936:  MOVFF  3B3,3B9
793A:  MOVLB  0
793C:  CALL   24D0
7940:  BCF    F8B.0
7942:  BCF    F94.0
7944:  MOVLB  3
7946:  CLRF   xB8
7948:  MOVLW  64
794A:  MOVWF  xB7
794C:  MOVFF  210,3BA
7950:  MOVFF  20F,3B9
7954:  MOVLB  0
7956:  CALL   29C6
795A:  MOVFF  02,03
795E:  MOVF   01,W
7960:  XORLW  FF
7962:  ADDLW  D1
7964:  MOVLB  3
7966:  MOVWF  xB3
7968:  MOVLW  07
796A:  SUBFWB 02,W
796C:  MOVWF  xB4
796E:  MOVWF  xB5
7970:  INCF   xB5,F
7972:  DECF   xB5,F
7974:  BTFSC  FD8.2
7976:  BRA    7986
7978:  MOVLW  FF
797A:  MOVWF  xB9
797C:  MOVLB  0
797E:  CALL   24D0
7982:  MOVLB  3
7984:  BRA    7972
7986:  MOVFF  3B3,3B9
798A:  MOVLB  0
798C:  CALL   24D0
7990:  MOVLB  2
7992:  INCF   x09,F
7994:  BTFSC  FD8.2
7996:  INCF   x0A,F
....................       else    
7998:  BRA    79B0
....................          {   
....................             fin_ciclo=1;Menu=102;glcd_fillScreen(OFF); 
799A:  MOVLW  01
799C:  MOVWF  x2A
799E:  MOVLW  66
79A0:  MOVLB  1
79A2:  MOVWF  xF5
79A4:  MOVLB  3
79A6:  CLRF   xB4
79A8:  MOVLB  0
79AA:  CALL   2E06
79AE:  MOVLB  2
....................          } 
....................          } 
....................           
....................          if(Liquid==0) 
79B0:  MOVF   x00,F
79B2:  BNZ   7A66
....................          { 
....................             tiempo_esterilizacion=0;Des=0; 
79B4:  BCF    x04.2
79B6:  BCF    x23.2
....................             if(i==0) 
79B8:  BTFSC  x04.4
79BA:  BRA    7A0C
....................                {Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);i=1;}  
79BC:  MOVLB  3
79BE:  CLRF   xB3
79C0:  MOVLW  5A
79C2:  MOVWF  xB4
79C4:  MOVLW  38
79C6:  MOVWF  xB5
79C8:  MOVLB  0
79CA:  CALL   4908
79CE:  MOVLW  19
79D0:  MOVLB  3
79D2:  MOVWF  xC5
79D4:  MOVLW  12
79D6:  MOVWF  xC6
79D8:  MOVLW  3C
79DA:  MOVWF  xC7
79DC:  MOVLW  1A
79DE:  MOVWF  xC8
79E0:  CLRF   xC9
79E2:  CLRF   xCA
79E4:  MOVLB  0
79E6:  CALL   350A
79EA:  MOVLW  37
79EC:  MOVLB  3
79EE:  MOVWF  xC5
79F0:  MOVLW  12
79F2:  MOVWF  xC6
79F4:  MOVLW  44
79F6:  MOVWF  xC7
79F8:  MOVLW  35
79FA:  MOVWF  xC8
79FC:  CLRF   xC9
79FE:  MOVLW  01
7A00:  MOVWF  xCA
7A02:  MOVLB  0
7A04:  CALL   350A
7A08:  MOVLB  2
7A0A:  BSF    x04.4
....................                Camara_OUT_on;Camara_IN_off;Resistencia_off;glcd_text57(0, 56, Secando, 1, ON); 
7A0C:  BSF    F8B.0
7A0E:  BCF    F94.0
7A10:  BCF    F8B.2
7A12:  BCF    F94.2
7A14:  BCF    F8B.1
7A16:  BCF    F94.1
7A18:  MOVLB  3
7A1A:  CLRF   xC3
7A1C:  MOVLW  38
7A1E:  MOVWF  xC4
7A20:  MOVLW  01
7A22:  MOVWF  xC6
7A24:  MOVLW  05
7A26:  MOVWF  xC5
7A28:  MOVLW  01
7A2A:  MOVWF  xC7
7A2C:  MOVWF  xC8
7A2E:  MOVLB  0
7A30:  CALL   306A
....................                 
....................             if((Tsecado[0]==Tsecadop[0])&&(Tsecado[1]==Tsecadop[1])&&(Tsecado[2]==Tsecadop[2])&&(Tsecado[3]==Tsecadop[3]))// Si cumplio 
7A34:  MOVLB  2
7A36:  MOVF   x1F,W
7A38:  SUBWF  x1B,W
7A3A:  BNZ   7A66
7A3C:  MOVF   x20,W
7A3E:  SUBWF  x1C,W
7A40:  BNZ   7A66
7A42:  MOVF   x21,W
7A44:  SUBWF  x1D,W
7A46:  BNZ   7A66
7A48:  MOVF   x22,W
7A4A:  SUBWF  x1E,W
7A4C:  BNZ   7A66
....................             {   
....................                Menu=102;fin_ciclo=1;glcd_fillScreen(OFF);//tiempo de secado sin seleccionar ningun programa de desfogue lento, activa fin de ciclo. 
7A4E:  MOVLW  66
7A50:  MOVLB  1
7A52:  MOVWF  xF5
7A54:  MOVLW  01
7A56:  MOVLB  2
7A58:  MOVWF  x2A
7A5A:  MOVLB  3
7A5C:  CLRF   xB4
7A5E:  MOVLB  0
7A60:  CALL   2E06
7A64:  MOVLB  2
7A66:  MOVLB  1
....................             } 
....................          } 
....................    } 
....................     
....................    if(Menu==102) 
7A68:  MOVF   xF5,W
7A6A:  SUBLW  66
7A6C:  BTFSS  FD8.2
7A6E:  BRA    7C12
....................    { 
....................       if(fin_ciclo==0) 
7A70:  MOVLB  2
7A72:  MOVF   x2A,F
7A74:  BNZ   7B52
....................       { 
....................         glcd_text57(30, 0, Ultimo, 2, ON);glcd_text57(35, 20, Param, 2, ON); 
7A76:  MOVLW  1E
7A78:  MOVLB  3
7A7A:  MOVWF  xC3
7A7C:  CLRF   xC4
7A7E:  MOVLW  01
7A80:  MOVWF  xC6
7A82:  MOVLW  DF
7A84:  MOVWF  xC5
7A86:  MOVLW  02
7A88:  MOVWF  xC7
7A8A:  MOVLW  01
7A8C:  MOVWF  xC8
7A8E:  MOVLB  0
7A90:  CALL   306A
7A94:  MOVLW  23
7A96:  MOVLB  3
7A98:  MOVWF  xC3
7A9A:  MOVLW  14
7A9C:  MOVWF  xC4
7A9E:  CLRF   xC6
7AA0:  MOVLW  9D
7AA2:  MOVWF  xC5
7AA4:  MOVLW  02
7AA6:  MOVWF  xC7
7AA8:  MOVLW  01
7AAA:  MOVWF  xC8
7AAC:  MOVLB  0
7AAE:  CALL   306A
....................         glcd_text57(50, 40, Fle, 1, ON); glcd_text57(70, 40, Fle1, 1, ON); 
7AB2:  MOVLW  32
7AB4:  MOVLB  3
7AB6:  MOVWF  xC3
7AB8:  MOVLW  28
7ABA:  MOVWF  xC4
7ABC:  CLRF   xC6
7ABE:  MOVLW  99
7AC0:  MOVWF  xC5
7AC2:  MOVLW  01
7AC4:  MOVWF  xC7
7AC6:  MOVWF  xC8
7AC8:  MOVLB  0
7ACA:  CALL   306A
7ACE:  MOVLW  46
7AD0:  MOVLB  3
7AD2:  MOVWF  xC3
7AD4:  MOVLW  28
7AD6:  MOVWF  xC4
7AD8:  CLRF   xC6
7ADA:  MOVLW  9B
7ADC:  MOVWF  xC5
7ADE:  MOVLW  01
7AE0:  MOVWF  xC7
7AE2:  MOVWF  xC8
7AE4:  MOVLB  0
7AE6:  CALL   306A
....................         glcd_text57(50, 50, Si, 1, ON); glcd_text57(70, 50, Noo, 1, ON); 
7AEA:  MOVLW  32
7AEC:  MOVLB  3
7AEE:  MOVWF  xC3
7AF0:  MOVWF  xC4
7AF2:  MOVLW  01
7AF4:  MOVWF  xC6
7AF6:  MOVLW  BC
7AF8:  MOVWF  xC5
7AFA:  MOVLW  01
7AFC:  MOVWF  xC7
7AFE:  MOVWF  xC8
7B00:  MOVLB  0
7B02:  CALL   306A
7B06:  MOVLW  46
7B08:  MOVLB  3
7B0A:  MOVWF  xC3
7B0C:  MOVLW  32
7B0E:  MOVWF  xC4
7B10:  MOVLW  01
7B12:  MOVWF  xC6
7B14:  MOVLW  BF
7B16:  MOVWF  xC5
7B18:  MOVLW  01
7B1A:  MOVWF  xC7
7B1C:  MOVWF  xC8
7B1E:  MOVLB  0
7B20:  CALL   306A
....................          
....................         if(LEFT) 
7B24:  BSF    F92.5
7B26:  BTFSS  F80.5
7B28:  BRA    7B3A
....................         {fin_ciclo=1;glcd_fillScreen(OFF);} 
7B2A:  MOVLW  01
7B2C:  MOVLB  2
7B2E:  MOVWF  x2A
7B30:  MOVLB  3
7B32:  CLRF   xB4
7B34:  MOVLB  0
7B36:  CALL   2E06
....................          
....................         if(RIGHT) 
7B3A:  BSF    F92.3
7B3C:  BTFSS  F80.3
7B3E:  BRA    7B50
....................         {fin_ciclo=3;glcd_fillScreen(OFF);} 
7B40:  MOVLW  03
7B42:  MOVLB  2
7B44:  MOVWF  x2A
7B46:  MOVLB  3
7B48:  CLRF   xB4
7B4A:  MOVLB  0
7B4C:  CALL   2E06
7B50:  MOVLB  2
....................          
....................       } 
....................     
....................       if(fin_ciclo==1) //Si termino proceso. 
7B52:  DECFSZ x2A,W
7B54:  BRA    7BA0
....................             {glcd_fillScreen(OFF); glcd_text57(20, 0, Proc, 2, ON);glcd_text57(10, 40, Finalizado, 2, ON);fin_ciclo++;} 
7B56:  MOVLB  3
7B58:  CLRF   xB4
7B5A:  MOVLB  0
7B5C:  CALL   2E06
7B60:  MOVLW  14
7B62:  MOVLB  3
7B64:  MOVWF  xC3
7B66:  CLRF   xC4
7B68:  CLRF   xC6
7B6A:  MOVLW  AD
7B6C:  MOVWF  xC5
7B6E:  MOVLW  02
7B70:  MOVWF  xC7
7B72:  MOVLW  01
7B74:  MOVWF  xC8
7B76:  MOVLB  0
7B78:  CALL   306A
7B7C:  MOVLW  0A
7B7E:  MOVLB  3
7B80:  MOVWF  xC3
7B82:  MOVLW  28
7B84:  MOVWF  xC4
7B86:  MOVLW  01
7B88:  MOVWF  xC6
7B8A:  MOVLW  C2
7B8C:  MOVWF  xC5
7B8E:  MOVLW  02
7B90:  MOVWF  xC7
7B92:  MOVLW  01
7B94:  MOVWF  xC8
7B96:  MOVLB  0
7B98:  CALL   306A
7B9C:  MOVLB  2
7B9E:  INCF   x2A,F
....................             if(fin_ciclo==2) 
7BA0:  MOVF   x2A,W
7BA2:  SUBLW  02
7BA4:  BNZ   7BBE
....................             {Camara_OUT_off;Camara_IN_off;Resistencia_off;Piloto_Fc_on; 
7BA6:  BCF    F8B.0
7BA8:  BCF    F94.0
7BAA:  BCF    F8B.2
7BAC:  BCF    F94.2
7BAE:  BCF    F8B.1
7BB0:  BCF    F94.1
7BB2:  BSF    F8C.0
7BB4:  BCF    F95.0
....................                if(LEFT) 
7BB6:  BSF    F92.5
7BB8:  BTFSS  F80.5
7BBA:  BRA    7BBE
....................                {reset_cpu();} 
7BBC:  RESET
....................             } 
....................             if(fin_ciclo==3) 
7BBE:  MOVF   x2A,W
7BC0:  SUBLW  03
7BC2:  BNZ   7C12
....................             {glcd_text57(20, 0, Proc, 2, ON);glcd_text57(10, 40, Finalizado, 2, ON);Camara_OUT_on;Camara_IN_on;Resistencia_off;Piloto_Fc_on;} 
7BC4:  MOVLW  14
7BC6:  MOVLB  3
7BC8:  MOVWF  xC3
7BCA:  CLRF   xC4
7BCC:  CLRF   xC6
7BCE:  MOVLW  AD
7BD0:  MOVWF  xC5
7BD2:  MOVLW  02
7BD4:  MOVWF  xC7
7BD6:  MOVLW  01
7BD8:  MOVWF  xC8
7BDA:  MOVLB  0
7BDC:  CALL   306A
7BE0:  MOVLW  0A
7BE2:  MOVLB  3
7BE4:  MOVWF  xC3
7BE6:  MOVLW  28
7BE8:  MOVWF  xC4
7BEA:  MOVLW  01
7BEC:  MOVWF  xC6
7BEE:  MOVLW  C2
7BF0:  MOVWF  xC5
7BF2:  MOVLW  02
7BF4:  MOVWF  xC7
7BF6:  MOVLW  01
7BF8:  MOVWF  xC8
7BFA:  MOVLB  0
7BFC:  CALL   306A
7C00:  BSF    F8B.0
7C02:  BCF    F94.0
7C04:  BSF    F8B.2
7C06:  BCF    F94.2
7C08:  BCF    F8B.1
7C0A:  BCF    F94.1
7C0C:  BSF    F8C.0
7C0E:  BCF    F95.0
7C10:  MOVLB  2
....................    } 
....................          
....................    } 
7C12:  MOVLB  0
7C14:  GOTO   5760
.................... } 
7C18:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
