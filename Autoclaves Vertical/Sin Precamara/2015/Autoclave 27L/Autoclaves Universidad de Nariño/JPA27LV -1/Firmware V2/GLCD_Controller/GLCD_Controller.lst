CCS PCH C Compiler, Version 4.104, 5967               04-ene.-16 13:45

               Filename: H:\JP\JP\Laboratorio\Autoclave\Autoclaves Vertical\Sin Precamara\Autoclave 27L\Autoclaves Universidad de Nariño\JPA27LV\Firmware V2\GLCD_Controller\GLCD_Controller.lst

               ROM used: 27528 bytes (84%)
                         Largest free fragment is 5236
               RAM used: 1342 (66%) at main() level
                         1398 (68%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  GOTO   2B18
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0FFA
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   0F0E
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave 80Lts. 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2014 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL3,CPUDIV4,VREGEN,NOMCLR// PLL1 para 12 MHz 
.................... #use delay(clock=48000000) 
*
10C2:  MOVLW  05
10C4:  MOVWF  FEA
10C6:  MOVLW  3F
10C8:  MOVWF  FE9
10CA:  MOVF   FEF,W
10CC:  BZ    10EA
10CE:  MOVLW  0F
10D0:  MOVWF  01
10D2:  CLRF   00
10D4:  DECFSZ 00,F
10D6:  BRA    10D4
10D8:  DECFSZ 01,F
10DA:  BRA    10D2
10DC:  MOVLW  8F
10DE:  MOVWF  00
10E0:  DECFSZ 00,F
10E2:  BRA    10E0
10E4:  NOP   
10E6:  DECFSZ FEF,F
10E8:  BRA    10CE
10EA:  RETLW  00
.................... #use RS232(BAUD=9600, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7) 
*
1AC6:  BTFSS  F9E.4
1AC8:  BRA    1AC6
1ACA:  MOVWF  FAD
1ACC:  GOTO   1B3A (RETURN)
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
*
0E96:  MOVLB  5
0E98:  MOVFF  571,FE9
0E9C:  MOVFF  572,FEA
0EA0:  MOVFF  FEF,575
0EA4:  MOVFF  574,03
0EA8:  MOVFF  573,FE9
0EAC:  MOVFF  574,FEA
0EB0:  MOVF   FEF,W
0EB2:  SUBWF  x75,W
0EB4:  BNZ   0EE0
....................       if (*s1 == '\0') 
0EB6:  MOVFF  572,03
0EBA:  MOVFF  571,FE9
0EBE:  MOVFF  03,FEA
0EC2:  MOVF   FEF,F
0EC4:  BNZ   0ECC
....................          return(0); 
0EC6:  MOVLW  00
0EC8:  MOVWF  01
0ECA:  BRA    0F0A
0ECC:  MOVFF  572,03
0ED0:  MOVF   x71,W
0ED2:  INCF   x71,F
0ED4:  BTFSC  FD8.2
0ED6:  INCF   x72,F
0ED8:  INCF   x73,F
0EDA:  BTFSC  FD8.2
0EDC:  INCF   x74,F
0EDE:  BRA    0E98
....................    return((*s1 < *s2) ? -1: 1); 
0EE0:  MOVFF  572,03
0EE4:  MOVFF  571,FE9
0EE8:  MOVFF  572,FEA
0EEC:  MOVFF  FEF,575
0EF0:  MOVFF  574,03
0EF4:  MOVFF  573,FE9
0EF8:  MOVFF  574,FEA
0EFC:  MOVF   FEF,W
0EFE:  SUBWF  x75,W
0F00:  BC    0F06
0F02:  MOVLW  FF
0F04:  BRA    0F08
0F06:  MOVLW  01
0F08:  MOVWF  01
.................... } 
0F0A:  MOVLB  0
0F0C:  RETLW  00
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_D4   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_D3   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_D5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_D6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_D7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_D2   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
12CC:  BCF    F95.2
12CE:  BSF    F8C.2
....................    output_low(GLCD_E); 
12D0:  BCF    F95.7
12D2:  BCF    F8C.7
....................    output_low(GLCD_CS1); 
12D4:  BCF    F95.4
12D6:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
12D8:  BCF    F95.3
12DA:  BCF    F8C.3
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
12DC:  BCF    F95.5
12DE:  BCF    F8C.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
12E0:  MOVLB  5
12E2:  CLRF   x50
12E4:  MOVLW  C0
12E6:  MOVWF  x51
12E8:  MOVLB  0
12EA:  RCALL  1178
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
12EC:  MOVLW  01
12EE:  MOVLB  5
12F0:  MOVWF  x50
12F2:  MOVLW  C0
12F4:  MOVWF  x51
12F6:  MOVLB  0
12F8:  RCALL  1178
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
12FA:  MOVLB  5
12FC:  CLRF   x50
12FE:  MOVLW  40
1300:  MOVWF  x51
1302:  MOVLB  0
1304:  RCALL  1178
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
1306:  MOVLW  01
1308:  MOVLB  5
130A:  MOVWF  x50
130C:  MOVLW  40
130E:  MOVWF  x51
1310:  MOVLB  0
1312:  RCALL  1178
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
1314:  MOVLB  5
1316:  CLRF   x50
1318:  MOVLW  B8
131A:  MOVWF  x51
131C:  MOVLB  0
131E:  RCALL  1178
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
1320:  MOVLW  01
1322:  MOVLB  5
1324:  MOVWF  x50
1326:  MOVLW  B8
1328:  MOVWF  x51
132A:  MOVLB  0
132C:  RCALL  1178
....................  
....................    if(mode == ON) 
132E:  MOVLB  5
1330:  DECFSZ x3A,W
1332:  BRA    1350
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
1334:  CLRF   x50
1336:  MOVLW  3F
1338:  MOVWF  x51
133A:  MOVLB  0
133C:  RCALL  1178
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
133E:  MOVLW  01
1340:  MOVLB  5
1342:  MOVWF  x50
1344:  MOVLW  3F
1346:  MOVWF  x51
1348:  MOVLB  0
134A:  RCALL  1178
....................    } 
....................    else 
134C:  BRA    1368
134E:  MOVLB  5
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
1350:  CLRF   x50
1352:  MOVLW  3E
1354:  MOVWF  x51
1356:  MOVLB  0
1358:  RCALL  1178
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
135A:  MOVLW  01
135C:  MOVLB  5
135E:  MOVWF  x50
1360:  MOVLW  3E
1362:  MOVWF  x51
1364:  MOVLB  0
1366:  RCALL  1178
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
1368:  MOVLB  5
136A:  CLRF   x3B
136C:  MOVLB  0
136E:  RCALL  11BA
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
1370:  RCALL  1214
....................    #endif 
.................... } 
1372:  GOTO   2EFC (RETURN)
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
1214:  MOVLB  5
1216:  CLRF   x4C
1218:  MOVLW  1C
121A:  MOVWF  x4B
....................    p2 = displayData.right; 
121C:  MOVLW  02
121E:  MOVWF  x4E
1220:  MOVLW  1C
1222:  MOVWF  x4D
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
1224:  CLRF   x49
1226:  MOVF   x49,W
1228:  SUBLW  07
122A:  BNC   12C8
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
122C:  BCF    F95.5
122E:  BCF    F8C.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
1230:  CLRF   x50
1232:  MOVLW  40
1234:  MOVWF  x51
1236:  MOVLB  0
1238:  RCALL  1178
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
123A:  MOVLW  01
123C:  MOVLB  5
123E:  MOVWF  x50
1240:  MOVLW  40
1242:  MOVWF  x51
1244:  MOVLB  0
1246:  RCALL  1178
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
1248:  MOVLB  5
124A:  MOVF   x49,W
124C:  IORLW  B8
124E:  MOVWF  x4F
1250:  CLRF   x50
1252:  MOVWF  x51
1254:  MOVLB  0
1256:  RCALL  1178
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
1258:  MOVLB  5
125A:  MOVF   x49,W
125C:  IORLW  B8
125E:  MOVWF  x4F
1260:  MOVLW  01
1262:  MOVWF  x50
1264:  MOVFF  54F,551
1268:  MOVLB  0
126A:  RCALL  1178
....................       output_high(GLCD_DI);                     // Set for data 
126C:  BCF    F95.5
126E:  BSF    F8C.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
1270:  MOVLB  5
1272:  CLRF   x4A
1274:  MOVF   x4A,W
1276:  SUBLW  3F
1278:  BNC   12C4
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
127A:  MOVFF  54C,03
127E:  MOVF   x4B,W
1280:  INCF   x4B,F
1282:  BTFSC  FD8.2
1284:  INCF   x4C,F
1286:  MOVWF  FE9
1288:  MOVFF  03,FEA
128C:  MOVFF  FEF,54F
1290:  CLRF   x50
1292:  MOVFF  54F,551
1296:  MOVLB  0
1298:  RCALL  1178
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
129A:  MOVLB  5
129C:  MOVFF  54E,03
12A0:  MOVF   x4D,W
12A2:  INCF   x4D,F
12A4:  BTFSC  FD8.2
12A6:  INCF   x4E,F
12A8:  MOVWF  FE9
12AA:  MOVFF  03,FEA
12AE:  MOVFF  FEF,54F
12B2:  MOVLW  01
12B4:  MOVWF  x50
12B6:  MOVFF  54F,551
12BA:  MOVLB  0
12BC:  RCALL  1178
....................       } 
12BE:  MOVLB  5
12C0:  INCF   x4A,F
12C2:  BRA    1274
....................    } 
12C4:  INCF   x49,F
12C6:  BRA    1226
.................... } 
12C8:  MOVLB  0
12CA:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
*
1376:  MOVLB  5
1378:  CLRF   x6D
137A:  RRCF   x68,W
137C:  MOVWF  x6C
137E:  RRCF   x6C,F
1380:  RRCF   x6C,F
1382:  MOVLW  1F
1384:  ANDWF  x6C,F
....................    temp *= 64; 
1386:  RLCF   x6C,F
1388:  RLCF   x6D,F
138A:  RLCF   x6C,F
138C:  RLCF   x6D,F
138E:  RLCF   x6C,F
1390:  RLCF   x6D,F
1392:  RLCF   x6C,F
1394:  RLCF   x6D,F
1396:  RLCF   x6C,F
1398:  RLCF   x6D,F
139A:  RLCF   x6C,F
139C:  RLCF   x6D,F
139E:  MOVLW  C0
13A0:  ANDWF  x6C,F
....................    temp += x; 
13A2:  MOVF   x67,W
13A4:  ADDWF  x6C,F
13A6:  MOVLW  00
13A8:  ADDWFC x6D,F
....................  
....................    if(x > 63) 
13AA:  MOVF   x67,W
13AC:  SUBLW  3F
13AE:  BC    13CA
....................    { 
....................       p = displayData.right + temp - 64; 
13B0:  MOVLW  1C
13B2:  ADDWF  x6C,W
13B4:  MOVWF  x6E
13B6:  MOVLW  02
13B8:  ADDWFC x6D,W
13BA:  MOVWF  x6F
13BC:  MOVLW  40
13BE:  SUBWF  x6E,W
13C0:  MOVWF  x6A
13C2:  MOVLW  00
13C4:  SUBWFB x6F,W
13C6:  MOVWF  x6B
....................    } 
....................    else 
13C8:  BRA    13D6
....................    { 
....................       p = displayData.left + temp; 
13CA:  MOVLW  1C
13CC:  ADDWF  x6C,W
13CE:  MOVWF  x6A
13D0:  MOVLW  00
13D2:  ADDWFC x6D,W
13D4:  MOVWF  x6B
....................    } 
....................  
....................    if(color) 
13D6:  MOVF   x69,F
13D8:  BZ    1404
....................    { 
....................       bit_set(*p, y%8); 
13DA:  MOVFF  56B,03
13DE:  MOVFF  56A,FE9
13E2:  MOVFF  56B,FEA
13E6:  MOVF   x68,W
13E8:  ANDLW  07
13EA:  MOVWF  x6E
13EC:  MOVLW  01
13EE:  MOVWF  00
13F0:  MOVF   x6E,W
13F2:  MOVWF  01
13F4:  BZ    13FE
13F6:  BCF    FD8.0
13F8:  RLCF   00,F
13FA:  DECFSZ 01,F
13FC:  BRA    13F6
13FE:  MOVF   00,W
1400:  IORWF  FEF,F
....................    } 
....................    else 
1402:  BRA    142E
....................    { 
....................       bit_clear(*p, y%8); 
1404:  MOVFF  56B,03
1408:  MOVFF  56A,FE9
140C:  MOVFF  56B,FEA
1410:  MOVF   x68,W
1412:  ANDLW  07
1414:  MOVWF  x6E
1416:  MOVLW  01
1418:  MOVWF  00
141A:  MOVF   x6E,W
141C:  MOVWF  01
141E:  BZ    1428
1420:  BCF    FD8.0
1422:  RLCF   00,F
1424:  DECFSZ 01,F
1426:  BRA    1420
1428:  MOVF   00,W
142A:  XORLW  FF
142C:  ANDWF  FEF,F
....................    } 
.................... } 
142E:  MOVLB  0
1430:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
11BA:  MOVLB  5
11BC:  CLRF   x3E
11BE:  MOVLW  1C
11C0:  MOVWF  x3D
....................    p2 = displayData.right; 
11C2:  MOVLW  02
11C4:  MOVWF  x40
11C6:  MOVLW  1C
11C8:  MOVWF  x3F
....................    data = 0xFF * color; 
11CA:  MOVF   x3B,W
11CC:  MULLW  FF
11CE:  MOVFF  FF3,53C
....................  
....................    for(i=0; i<512; ++i) 
11D2:  CLRF   x42
11D4:  CLRF   x41
11D6:  MOVF   x42,W
11D8:  SUBLW  01
11DA:  BNC   1210
....................    { 
....................       *p1++ = data; 
11DC:  MOVFF  53E,03
11E0:  MOVF   x3D,W
11E2:  INCF   x3D,F
11E4:  BTFSC  FD8.2
11E6:  INCF   x3E,F
11E8:  MOVWF  FE9
11EA:  MOVFF  03,FEA
11EE:  MOVFF  53C,FEF
....................       *p2++ = data; 
11F2:  MOVFF  540,03
11F6:  MOVF   x3F,W
11F8:  INCF   x3F,F
11FA:  BTFSC  FD8.2
11FC:  INCF   x40,F
11FE:  MOVWF  FE9
1200:  MOVFF  03,FEA
1204:  MOVFF  53C,FEF
....................    } 
1208:  INCF   x41,F
120A:  BTFSC  FD8.2
120C:  INCF   x42,F
120E:  BRA    11D6
.................... } 
1210:  MOVLB  0
1212:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
1178:  MOVLB  5
117A:  MOVF   x50,F
117C:  BZ    1184
....................       output_high(GLCD_CS2); 
117E:  BCF    F95.3
1180:  BSF    F8C.3
....................    else 
1182:  BRA    1188
....................       output_high(GLCD_CS1); 
1184:  BCF    F95.4
1186:  BSF    F8C.4
....................  
....................    output_low(GLCD_RW);       // Set for writing 
1188:  BCF    F95.6
118A:  BCF    F8C.6
....................    output_b(data);            // Put the data on the port 
118C:  CLRF   F93
118E:  MOVFF  551,F8A
....................    delay_cycles(50); 
1192:  MOVLW  10
1194:  MOVWF  00
1196:  DECFSZ 00,F
1198:  BRA    1196
119A:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
119C:  BCF    F95.7
119E:  BSF    F8C.7
....................    delay_cycles(255); 
11A0:  MOVLW  54
11A2:  MOVWF  00
11A4:  DECFSZ 00,F
11A6:  BRA    11A4
11A8:  BRA    11AA
....................    output_low(GLCD_E); 
11AA:  BCF    F95.7
11AC:  BCF    F8C.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
11AE:  BCF    F95.4
11B0:  BCF    F8C.4
....................    output_low(GLCD_CS2); 
11B2:  BCF    F95.3
11B4:  BCF    F8C.3
.................... } 
11B6:  MOVLB  0
11B8:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_b(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(50); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(200); 
....................    data = input_b();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
15EA:  MOVLW  01
15EC:  MOVLB  5
15EE:  MOVWF  x60
15F0:  MOVWF  x61
15F2:  CLRF   x66
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
15F4:  MOVF   x57,W
15F6:  SUBWF  x59,W
15F8:  MOVWF  x67
15FA:  MOVF   x67,W
15FC:  BTFSS  x67.7
15FE:  BRA    1606
1600:  MOVLW  00
1602:  BSF    FD8.0
1604:  SUBFWB x67,W
1606:  CLRF   03
1608:  MOVWF  x5E
160A:  MOVFF  03,55F
....................    dy = abs((signed int8)(y2 - y1)); 
160E:  MOVF   x58,W
1610:  SUBWF  x5A,W
1612:  MOVWF  x67
1614:  MOVF   x67,W
1616:  BTFSS  x67.7
1618:  BRA    1620
161A:  MOVLW  00
161C:  BSF    FD8.0
161E:  SUBFWB x67,W
1620:  CLRF   03
1622:  MOVWF  x5C
1624:  MOVFF  03,55D
....................    #endif 
....................  
....................    if(x1 > x2) 
1628:  MOVF   x57,W
162A:  SUBWF  x59,W
162C:  BC    1632
....................       addx = -1; 
162E:  MOVLW  FF
1630:  MOVWF  x60
....................    if(y1 > y2) 
1632:  MOVF   x58,W
1634:  SUBWF  x5A,W
1636:  BC    163C
....................       addy = -1; 
1638:  MOVLW  FF
163A:  MOVWF  x61
....................  
....................    if(dx >= dy) 
163C:  MOVF   x5D,W
163E:  SUBWF  x5F,W
1640:  BNC   16B8
1642:  BNZ   164A
1644:  MOVF   x5C,W
1646:  SUBWF  x5E,W
1648:  BNC   16B8
....................    { 
....................       dy *= 2; 
164A:  BCF    FD8.0
164C:  RLCF   x5C,F
164E:  RLCF   x5D,F
....................       P = dy - dx; 
1650:  MOVF   x5E,W
1652:  SUBWF  x5C,W
1654:  MOVWF  00
1656:  MOVF   x5F,W
1658:  SUBWFB x5D,W
165A:  MOVFF  00,562
165E:  MOVWF  x63
....................       diff = P - dx; 
1660:  MOVF   x5E,W
1662:  SUBWF  x62,W
1664:  MOVWF  x64
1666:  MOVF   x5F,W
1668:  SUBWFB x63,W
166A:  MOVWF  x65
....................  
....................       for(; i<=dx; ++i) 
166C:  MOVF   x5F,F
166E:  BNZ   1676
1670:  MOVF   x66,W
1672:  SUBWF  x5E,W
1674:  BNC   16B6
....................       { 
....................          glcd_pixel(x1, y1, color); 
1676:  MOVFF  557,567
167A:  MOVFF  558,568
167E:  MOVFF  55B,569
1682:  MOVLB  0
1684:  RCALL  1376
....................  
....................          if(P < 0) 
1686:  MOVLB  5
1688:  BTFSC  x63.7
168A:  BRA    168E
168C:  BRA    169E
....................          { 
....................             P  += dy; 
168E:  MOVF   x5C,W
1690:  ADDWF  x62,F
1692:  MOVF   x5D,W
1694:  ADDWFC x63,F
....................             x1 += addx; 
1696:  MOVF   x60,W
1698:  ADDWF  x57,W
169A:  MOVWF  x57
....................          } 
....................          else 
169C:  BRA    16B2
....................          { 
....................             P  += diff; 
169E:  MOVF   x64,W
16A0:  ADDWF  x62,F
16A2:  MOVF   x65,W
16A4:  ADDWFC x63,F
....................             x1 += addx; 
16A6:  MOVF   x60,W
16A8:  ADDWF  x57,W
16AA:  MOVWF  x57
....................             y1 += addy; 
16AC:  MOVF   x61,W
16AE:  ADDWF  x58,W
16B0:  MOVWF  x58
....................          } 
....................       } 
16B2:  INCF   x66,F
16B4:  BRA    166C
....................    } 
....................    else 
16B6:  BRA    1724
....................    { 
....................       dx *= 2; 
16B8:  BCF    FD8.0
16BA:  RLCF   x5E,F
16BC:  RLCF   x5F,F
....................       P = dx - dy; 
16BE:  MOVF   x5C,W
16C0:  SUBWF  x5E,W
16C2:  MOVWF  00
16C4:  MOVF   x5D,W
16C6:  SUBWFB x5F,W
16C8:  MOVFF  00,562
16CC:  MOVWF  x63
....................       diff = P - dy; 
16CE:  MOVF   x5C,W
16D0:  SUBWF  x62,W
16D2:  MOVWF  x64
16D4:  MOVF   x5D,W
16D6:  SUBWFB x63,W
16D8:  MOVWF  x65
....................  
....................       for(; i<=dy; ++i) 
16DA:  MOVF   x5D,F
16DC:  BNZ   16E4
16DE:  MOVF   x66,W
16E0:  SUBWF  x5C,W
16E2:  BNC   1724
....................       { 
....................          glcd_pixel(x1, y1, color); 
16E4:  MOVFF  557,567
16E8:  MOVFF  558,568
16EC:  MOVFF  55B,569
16F0:  MOVLB  0
16F2:  RCALL  1376
....................  
....................          if(P < 0) 
16F4:  MOVLB  5
16F6:  BTFSC  x63.7
16F8:  BRA    16FC
16FA:  BRA    170C
....................          { 
....................             P  += dx; 
16FC:  MOVF   x5E,W
16FE:  ADDWF  x62,F
1700:  MOVF   x5F,W
1702:  ADDWFC x63,F
....................             y1 += addy; 
1704:  MOVF   x61,W
1706:  ADDWF  x58,W
1708:  MOVWF  x58
....................          } 
....................          else 
170A:  BRA    1720
....................          { 
....................             P  += diff; 
170C:  MOVF   x64,W
170E:  ADDWF  x62,F
1710:  MOVF   x65,W
1712:  ADDWFC x63,F
....................             x1 += addx; 
1714:  MOVF   x60,W
1716:  ADDWF  x57,W
1718:  MOVWF  x57
....................             y1 += addy; 
171A:  MOVF   x61,W
171C:  ADDWF  x58,W
171E:  MOVWF  x58
....................          } 
....................       } 
1720:  INCF   x66,F
1722:  BRA    16DA
....................    } 
.................... } 
1724:  MOVLB  0
1726:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
1728:  MOVLB  5
172A:  MOVF   x50,F
172C:  BZ    178A
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
172E:  MOVF   x4E,W
1730:  SUBWF  x4C,W
1732:  BC    173E
....................       { 
....................          xmin = x1; 
1734:  MOVFF  54C,553
....................          xmax = x2; 
1738:  MOVFF  54E,554
....................       } 
....................       else 
173C:  BRA    1746
....................       { 
....................          xmin = x2; 
173E:  MOVFF  54E,553
....................          xmax = x1; 
1742:  MOVFF  54C,554
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
1746:  MOVF   x4F,W
1748:  SUBWF  x4D,W
174A:  BC    1756
....................       { 
....................          ymin = y1; 
174C:  MOVFF  54D,555
....................          ymax = y2; 
1750:  MOVFF  54F,556
....................       } 
....................       else 
1754:  BRA    175E
....................       { 
....................          ymin = y2; 
1756:  MOVFF  54F,555
....................          ymax = y1; 
175A:  MOVFF  54D,556
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
175E:  MOVF   x53,W
1760:  SUBWF  x54,W
1762:  BNC   1788
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
1764:  MOVFF  555,552
1768:  MOVF   x52,W
176A:  SUBWF  x56,W
176C:  BNC   1784
....................          { 
....................             glcd_pixel(xmin, i, color); 
176E:  MOVFF  553,567
1772:  MOVFF  552,568
1776:  MOVFF  551,569
177A:  MOVLB  0
177C:  RCALL  1376
....................          } 
177E:  MOVLB  5
1780:  INCF   x52,F
1782:  BRA    1768
....................       } 
1784:  INCF   x53,F
1786:  BRA    175E
....................    } 
....................    else 
1788:  BRA    17E6
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
178A:  MOVFF  54C,557
178E:  MOVFF  54D,558
1792:  MOVFF  54E,559
1796:  MOVFF  54D,55A
179A:  MOVFF  551,55B
179E:  MOVLB  0
17A0:  RCALL  15EA
....................       glcd_line(x1, y2, x2, y2, color); 
17A2:  MOVFF  54C,557
17A6:  MOVFF  54F,558
17AA:  MOVFF  54E,559
17AE:  MOVFF  54F,55A
17B2:  MOVFF  551,55B
17B6:  RCALL  15EA
....................       glcd_line(x1, y1, x1, y2, color); 
17B8:  MOVFF  54C,557
17BC:  MOVFF  54D,558
17C0:  MOVFF  54C,559
17C4:  MOVFF  54F,55A
17C8:  MOVFF  551,55B
17CC:  RCALL  15EA
....................       glcd_line(x2, y1, x2, y2, color); 
17CE:  MOVFF  54E,557
17D2:  MOVFF  54D,558
17D6:  MOVFF  54E,559
17DA:  MOVFF  54F,55A
17DE:  MOVFF  551,55B
17E2:  RCALL  15EA
17E4:  MOVLB  5
....................    } 
.................... } 
17E6:  MOVLB  0
17E8:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
2112:  MOVLB  5
2114:  CLRF   x3F
....................    b = radius; 
2116:  MOVFF  53C,540
....................    P = 1 - radius; 
211A:  MOVLW  01
211C:  BSF    FD8.0
211E:  SUBFWB x3C,W
2120:  MOVWF  x41
....................  
....................    do 
....................    { 
....................       if(fill) 
2122:  MOVF   x3D,F
2124:  BZ    21F0
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
2126:  MOVF   x3F,W
2128:  SUBWF  x3A,W
212A:  MOVWF  x42
212C:  MOVF   x40,W
212E:  ADDWF  x3B,W
2130:  MOVWF  x43
2132:  MOVF   x3F,W
2134:  ADDWF  x3A,W
2136:  MOVWF  x44
2138:  MOVF   x40,W
213A:  ADDWF  x3B,W
213C:  MOVWF  x45
213E:  MOVFF  542,557
2142:  MOVFF  543,558
2146:  MOVFF  544,559
214A:  MOVWF  x5A
214C:  MOVFF  53E,55B
2150:  MOVLB  0
2152:  CALL   15EA
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
2156:  MOVLB  5
2158:  MOVF   x3F,W
215A:  SUBWF  x3A,W
215C:  MOVWF  x42
215E:  MOVF   x40,W
2160:  SUBWF  x3B,W
2162:  MOVWF  x43
2164:  MOVF   x3F,W
2166:  ADDWF  x3A,W
2168:  MOVWF  x44
216A:  MOVF   x40,W
216C:  SUBWF  x3B,W
216E:  MOVWF  x45
2170:  MOVFF  542,557
2174:  MOVFF  543,558
2178:  MOVFF  544,559
217C:  MOVWF  x5A
217E:  MOVFF  53E,55B
2182:  MOVLB  0
2184:  CALL   15EA
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
2188:  MOVLB  5
218A:  MOVF   x40,W
218C:  SUBWF  x3A,W
218E:  MOVWF  x42
2190:  MOVF   x3F,W
2192:  ADDWF  x3B,W
2194:  MOVWF  x43
2196:  MOVF   x40,W
2198:  ADDWF  x3A,W
219A:  MOVWF  x44
219C:  MOVF   x3F,W
219E:  ADDWF  x3B,W
21A0:  MOVWF  x45
21A2:  MOVFF  542,557
21A6:  MOVFF  543,558
21AA:  MOVFF  544,559
21AE:  MOVWF  x5A
21B0:  MOVFF  53E,55B
21B4:  MOVLB  0
21B6:  CALL   15EA
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
21BA:  MOVLB  5
21BC:  MOVF   x40,W
21BE:  SUBWF  x3A,W
21C0:  MOVWF  x42
21C2:  MOVF   x3F,W
21C4:  SUBWF  x3B,W
21C6:  MOVWF  x43
21C8:  MOVF   x40,W
21CA:  ADDWF  x3A,W
21CC:  MOVWF  x44
21CE:  MOVF   x3F,W
21D0:  SUBWF  x3B,W
21D2:  MOVWF  x45
21D4:  MOVFF  542,557
21D8:  MOVFF  543,558
21DC:  MOVFF  544,559
21E0:  MOVWF  x5A
21E2:  MOVFF  53E,55B
21E6:  MOVLB  0
21E8:  CALL   15EA
....................       } 
....................       else 
21EC:  BRA    22DE
21EE:  MOVLB  5
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
21F0:  MOVF   x3A,W
21F2:  ADDWF  x3F,W
21F4:  MOVWF  x42
21F6:  MOVF   x3B,W
21F8:  ADDWF  x40,W
21FA:  MOVWF  x43
21FC:  MOVFF  542,567
2200:  MOVWF  x68
2202:  MOVFF  53E,569
2206:  MOVLB  0
2208:  CALL   1376
....................          glcd_pixel(b+x, a+y, color); 
220C:  MOVLB  5
220E:  MOVF   x3A,W
2210:  ADDWF  x40,W
2212:  MOVWF  x42
2214:  MOVF   x3B,W
2216:  ADDWF  x3F,W
2218:  MOVWF  x43
221A:  MOVFF  542,567
221E:  MOVWF  x68
2220:  MOVFF  53E,569
2224:  MOVLB  0
2226:  CALL   1376
....................          glcd_pixel(x-a, b+y, color); 
222A:  MOVLB  5
222C:  MOVF   x3F,W
222E:  SUBWF  x3A,W
2230:  MOVWF  x42
2232:  MOVF   x3B,W
2234:  ADDWF  x40,W
2236:  MOVWF  x43
2238:  MOVFF  542,567
223C:  MOVWF  x68
223E:  MOVFF  53E,569
2242:  MOVLB  0
2244:  CALL   1376
....................          glcd_pixel(x-b, a+y, color); 
2248:  MOVLB  5
224A:  MOVF   x40,W
224C:  SUBWF  x3A,W
224E:  MOVWF  x42
2250:  MOVF   x3B,W
2252:  ADDWF  x3F,W
2254:  MOVWF  x43
2256:  MOVFF  542,567
225A:  MOVWF  x68
225C:  MOVFF  53E,569
2260:  MOVLB  0
2262:  CALL   1376
....................          glcd_pixel(b+x, y-a, color); 
2266:  MOVLB  5
2268:  MOVF   x3A,W
226A:  ADDWF  x40,W
226C:  MOVWF  x42
226E:  MOVF   x3F,W
2270:  SUBWF  x3B,W
2272:  MOVWF  x43
2274:  MOVFF  542,567
2278:  MOVWF  x68
227A:  MOVFF  53E,569
227E:  MOVLB  0
2280:  CALL   1376
....................          glcd_pixel(a+x, y-b, color); 
2284:  MOVLB  5
2286:  MOVF   x3A,W
2288:  ADDWF  x3F,W
228A:  MOVWF  x42
228C:  MOVF   x40,W
228E:  SUBWF  x3B,W
2290:  MOVWF  x43
2292:  MOVFF  542,567
2296:  MOVWF  x68
2298:  MOVFF  53E,569
229C:  MOVLB  0
229E:  CALL   1376
....................          glcd_pixel(x-a, y-b, color); 
22A2:  MOVLB  5
22A4:  MOVF   x3F,W
22A6:  SUBWF  x3A,W
22A8:  MOVWF  x42
22AA:  MOVF   x40,W
22AC:  SUBWF  x3B,W
22AE:  MOVWF  x43
22B0:  MOVFF  542,567
22B4:  MOVWF  x68
22B6:  MOVFF  53E,569
22BA:  MOVLB  0
22BC:  CALL   1376
....................          glcd_pixel(x-b, y-a, color); 
22C0:  MOVLB  5
22C2:  MOVF   x40,W
22C4:  SUBWF  x3A,W
22C6:  MOVWF  x42
22C8:  MOVF   x3F,W
22CA:  SUBWF  x3B,W
22CC:  MOVWF  x43
22CE:  MOVFF  542,567
22D2:  MOVWF  x68
22D4:  MOVFF  53E,569
22D8:  MOVLB  0
22DA:  CALL   1376
....................       } 
....................  
....................       if(P < 0) 
22DE:  MOVLB  5
22E0:  BTFSC  x41.7
22E2:  BRA    22E6
22E4:  BRA    2302
....................          P += 3 + 2 * a++; 
22E6:  MOVF   x3F,W
22E8:  INCF   x3F,F
22EA:  MOVWF  x42
22EC:  MOVLW  02
22EE:  MOVWF  x43
22F0:  MOVFF  542,544
22F4:  MOVLB  0
22F6:  RCALL  20C4
22F8:  MOVF   01,W
22FA:  ADDLW  03
22FC:  MOVLB  5
22FE:  ADDWF  x41,F
....................       else 
2300:  BRA    2324
....................          P += 5 + 2 * (a++ - b--); 
2302:  MOVF   x3F,W
2304:  INCF   x3F,F
2306:  MOVWF  x42
2308:  MOVF   x40,W
230A:  DECF   x40,F
230C:  SUBWF  x42,W
230E:  MOVWF  x42
2310:  MOVLW  02
2312:  MOVWF  x43
2314:  MOVFF  542,544
2318:  MOVLB  0
231A:  RCALL  20C4
231C:  MOVF   01,W
231E:  ADDLW  05
2320:  MOVLB  5
2322:  ADDWF  x41,F
....................     } while(a <= b); 
2324:  MOVF   x3F,W
2326:  XORLW  80
2328:  MOVWF  00
232A:  MOVF   x40,W
232C:  XORLW  80
232E:  SUBWF  00,W
2330:  BTFSC  FD8.2
2332:  BRA    2122
2334:  BTFSS  FD8.0
2336:  BRA    2122
.................... } 
2338:  MOVLB  0
233A:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
1432:  MOVFF  54E,03
1436:  MOVLB  5
1438:  MOVFF  54D,FE9
143C:  MOVFF  54E,FEA
1440:  MOVF   FEF,F
1442:  BTFSC  FD8.2
1444:  BRA    15E6
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
1446:  MOVFF  54E,03
144A:  MOVFF  54D,FE9
144E:  MOVFF  54E,FEA
1452:  MOVF   FEF,W
1454:  SUBLW  52
1456:  BNC   14A6
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
1458:  MOVFF  54E,03
145C:  MOVFF  54D,FE9
1460:  MOVFF  54E,FEA
1464:  MOVLW  20
1466:  SUBWF  FEF,W
1468:  MULLW  05
146A:  MOVF   FF3,W
146C:  CLRF   03
146E:  MOVWF  x5A
1470:  MOVLW  05
1472:  MOVWF  FEA
1474:  MOVLW  55
1476:  MOVWF  FE9
1478:  CLRF   x5E
147A:  MOVFF  55A,55D
147E:  MOVFF  FF2,55B
1482:  BCF    FF2.7
1484:  MOVLW  05
1486:  MOVWF  01
1488:  CLRF   FF7
148A:  MOVF   x5A,W
148C:  MOVLB  0
148E:  CALL   00A2
1492:  TBLRD*-
1494:  TBLRD*+
1496:  MOVFF  FF5,FEE
149A:  DECFSZ 01,F
149C:  BRA    1494
149E:  MOVLB  5
14A0:  BTFSC  x5B.7
14A2:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
14A4:  BRA    1510
14A6:  MOVFF  54E,03
14AA:  MOVFF  54D,FE9
14AE:  MOVFF  54E,FEA
14B2:  MOVF   FEF,W
14B4:  SUBLW  7E
14B6:  BNC   1506
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
14B8:  MOVFF  54E,03
14BC:  MOVFF  54D,FE9
14C0:  MOVFF  54E,FEA
14C4:  MOVLW  53
14C6:  SUBWF  FEF,W
14C8:  MULLW  05
14CA:  MOVF   FF3,W
14CC:  CLRF   03
14CE:  MOVWF  x5A
14D0:  MOVLW  05
14D2:  MOVWF  FEA
14D4:  MOVLW  55
14D6:  MOVWF  FE9
14D8:  CLRF   x5E
14DA:  MOVFF  55A,55D
14DE:  MOVFF  FF2,55B
14E2:  BCF    FF2.7
14E4:  MOVLW  05
14E6:  MOVWF  01
14E8:  CLRF   FF7
14EA:  MOVF   x5A,W
14EC:  MOVLB  0
14EE:  CALL   01BC
14F2:  TBLRD*-
14F4:  TBLRD*+
14F6:  MOVFF  FF5,FEE
14FA:  DECFSZ 01,F
14FC:  BRA    14F4
14FE:  MOVLB  5
1500:  BTFSC  x5B.7
1502:  BSF    FF2.7
....................       else 
1504:  BRA    1510
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
1506:  CLRF   x55
1508:  CLRF   x56
150A:  CLRF   x57
150C:  CLRF   x58
150E:  CLRF   x59
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
1510:  MOVFF  54E,03
1514:  MOVF   x4D,W
1516:  MOVWF  FE9
1518:  MOVFF  03,FEA
151C:  MOVF   FEF,W
151E:  XORLW  0A
1520:  MOVLB  0
1522:  BZ    152A
1524:  XORLW  07
1526:  BZ    153A
1528:  BRA    1540
....................          case '\n': 
....................             y += 7*size + 1; 
152A:  MOVLB  5
152C:  MOVF   x4F,W
152E:  MULLW  07
1530:  MOVF   FF3,W
1532:  ADDLW  01
1534:  ADDWF  x4C,F
....................             continue; 
1536:  BRA    15D8
1538:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
153A:  MOVLB  5
153C:  CLRF   x4B
....................             continue; 
153E:  BRA    15D8
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
1540:  MOVLB  5
1542:  MOVF   x4F,W
1544:  MULLW  05
1546:  MOVF   FF3,W
1548:  ADDWF  x4B,W
154A:  SUBLW  7F
154C:  BC    155A
....................       { 
....................          x = 0;                           // Set x at far left position 
154E:  CLRF   x4B
....................          y += 7*size + 1;                 // Set y at next position down 
1550:  MOVF   x4F,W
1552:  MULLW  07
1554:  MOVF   FF3,W
1556:  ADDLW  01
1558:  ADDWF  x4C,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
155A:  CLRF   x51
155C:  MOVF   x51,W
155E:  SUBLW  04
1560:  BNC   15D8
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
1562:  CLRF   x52
1564:  MOVF   x52,W
1566:  SUBLW  06
1568:  BNC   15D0
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
156A:  CLRF   03
156C:  MOVF   x51,W
156E:  ADDLW  55
1570:  MOVWF  FE9
1572:  MOVLW  05
1574:  ADDWFC 03,W
1576:  MOVWF  FEA
1578:  MOVFF  FEF,55A
157C:  MOVFF  55A,00
1580:  MOVF   x52,W
1582:  MOVWF  01
1584:  BZ    158E
1586:  BCF    FD8.0
1588:  RRCF   00,F
158A:  DECFSZ 01,F
158C:  BRA    1586
158E:  BTFSS  00.0
1590:  BRA    15CC
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
1592:  CLRF   x53
1594:  MOVF   x4F,W
1596:  SUBWF  x53,W
1598:  BC    15CC
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
159A:  CLRF   x54
159C:  MOVF   x4F,W
159E:  SUBWF  x54,W
15A0:  BC    15C8
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
15A2:  MOVF   x54,W
15A4:  ADDWF  x4B,W
15A6:  MOVWF  x5A
15A8:  MOVF   x52,W
15AA:  MULWF  x4F
15AC:  MOVF   FF3,W
15AE:  ADDWF  x4C,W
15B0:  ADDWF  x53,W
15B2:  MOVWF  x5B
15B4:  MOVFF  55A,567
15B8:  MOVWF  x68
15BA:  MOVFF  550,569
15BE:  MOVLB  0
15C0:  RCALL  1376
....................                   } 
15C2:  MOVLB  5
15C4:  INCF   x54,F
15C6:  BRA    159C
....................                } 
15C8:  INCF   x53,F
15CA:  BRA    1594
....................             } 
....................          } 
15CC:  INCF   x52,F
15CE:  BRA    1564
....................       } 
15D0:  INCF   x51,F
15D2:  MOVF   x4F,W
15D4:  ADDWF  x4B,F
15D6:  BRA    155C
....................    } 
15D8:  INCF   x4D,F
15DA:  BTFSC  FD8.2
15DC:  INCF   x4E,F
15DE:  INCF   x4B,F
15E0:  MOVLB  0
15E2:  BRA    1432
15E4:  MOVLB  5
.................... } 
15E6:  MOVLB  0
15E8:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Tijeras [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0xFF, 0xF8, 0xFF, 0xFC, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7E, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0x83, 0xFC, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x01, 0x81, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x3F, 0xFF, 0xFC, 0x00, 0x83, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x7F, 0xFF, 0xFC, 0x00, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x46, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x00, 0x7C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0E, 0x3C, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0xC3, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x82, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x81, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x20, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x07, 0xFF, 0xE0, 0x0C, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1F, 0xFF, 0x3F, 0xFF, 0x8F, 0xFF, 0x87, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Guante [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xBF, 0xEF, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x3F, 0xEF, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x06, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x36, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xB6, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0xFF, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x01, 0xFF, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xCF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xEF, 0xF9, 0xFE, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Delicado [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7E, 0x7F, 0xDF, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x03, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0xC0, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x02, 0x00, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0E, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x0C, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x18, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x10, 0x1F, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x1F, 0xFF, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x7F, 0xDF, 0xFB, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Liquido [64][16] = { 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFC, 0x7F, 0xF9, 0xFF, 0xF3, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x18, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x00, 0x30, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x04, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x7F, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xFF, 0x9F, 0xFF, 0x9F, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Proceso [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... //signed  int8 clave[4]={0,0,0,0}; 
.................... //int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... char kpa[]="kPa"; 
.................... float promedio[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... int8 Puerta=0,Parada=1,NivelReservorio=0,NivelTanque=0,Presostato=0,h=0,l=0,Ajuste=0,Ajusten=0,R2=0,Alarma=0,AlarmaAgua=0; 
.................... short Flanco=0,Flanco1=0,Flanco2=0,emergency=0,visual=1,desfoguelento=0,Lectura=0,Expulsa=0, est=0,Visua=0,flag_agua=0,CadenaRecibida=0; 
.................... short disp_Calentando=0,disp_Llenando=0,disp_Secando=0,disp_Esterilizando=0,disp_Despresurizando=0,disp_Stop=0,disp_Door=0,disp_Fin=0,z=0; 
.................... short disp_Alarma=0,disp_AlarmaAgua=0; 
.................... int8 Resistencia=0,EVDesfogue=0,EVAgua=0,EVTrampa=0,MotorPuerta=0,EVEntradaAgua=0,BombaVacio=0,BombaAgua=0,Control=0,Decimal=0; 
.................... int8 Menu=0, unidad=1,bite=0,TamanoCadena=0,i=0; 
.................... int8 Setpoint=0,fin_ciclo=0,Opcion=1,tiempo_esterilizacion=0,tiempo_secado=0,Exhaust=0; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,Minutos=15,Nivel=0,tiempo_desfogue=0; 
.................... float ADC_Pt100=0.0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... char dato[10]; 
.................... char datoTx[14]; 
.................... char datoRx[11]; 
.................... char ADCTemperatura[4]; 
.................... char SetTemperatura[3]={0,0,0}; 
.................... float V0=0.0,R1=6180.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=0.0,d3=0.0; 
....................  
.................... typedef struct{ 
....................    char Letra[30]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void displayMenu(char palabra[30], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
17EA:  MOVLB  5
17EC:  MOVFF  53A,01
17F0:  MOVFF  53B,03
17F4:  MOVFF  53A,540
17F8:  MOVFF  53B,541
17FC:  MOVLW  05
17FE:  MOVWF  FEA
1800:  MOVLW  1A
1802:  MOVWF  FE9
1804:  MOVFF  53B,FE2
1808:  MOVFF  53A,FE1
180C:  MOVF   FE7,F
180E:  MOVFF  FE6,FEE
1812:  BNZ   180C
....................    if(sombreado==2) 
1814:  MOVF   x3E,W
1816:  SUBLW  02
1818:  BNZ   1842
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
181A:  MOVLW  01
181C:  ADDWF  x3C,W
181E:  MOVWF  x40
1820:  MOVLW  01
1822:  ADDWF  x3D,W
1824:  MOVWF  x41
1826:  MOVFF  540,54B
182A:  MOVWF  x4C
182C:  MOVLW  05
182E:  MOVWF  x4E
1830:  MOVLW  1A
1832:  MOVWF  x4D
1834:  MOVFF  53F,54F
1838:  MOVLW  01
183A:  MOVWF  x50
183C:  MOVLB  0
183E:  RCALL  1432
1840:  MOVLB  5
....................    if(sombreado==1) 
1842:  DECFSZ x3E,W
1844:  BRA    1890
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
1846:  MOVF   x3F,W
1848:  MULLW  08
184A:  MOVF   FF3,W
184C:  ADDWF  x3D,W
184E:  MOVWF  x40
1850:  CLRF   x4C
1852:  MOVFF  53D,54D
1856:  MOVLW  7F
1858:  MOVWF  x4E
185A:  MOVFF  540,54F
185E:  MOVLW  01
1860:  MOVWF  x50
1862:  MOVWF  x51
1864:  MOVLB  0
1866:  RCALL  1728
1868:  MOVLW  01
186A:  MOVLB  5
186C:  ADDWF  x3C,W
186E:  MOVWF  x40
1870:  MOVLW  01
1872:  ADDWF  x3D,W
1874:  MOVWF  x41
1876:  MOVFF  540,54B
187A:  MOVWF  x4C
187C:  MOVLW  05
187E:  MOVWF  x4E
1880:  MOVLW  1A
1882:  MOVWF  x4D
1884:  MOVFF  53F,54F
1888:  CLRF   x50
188A:  MOVLB  0
188C:  RCALL  1432
188E:  MOVLB  5
....................    if(sombreado==0) 
1890:  MOVF   x3E,F
1892:  BNZ   18DE
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
1894:  MOVF   x3F,W
1896:  MULLW  08
1898:  MOVF   FF3,W
189A:  ADDWF  x3D,W
189C:  MOVWF  x40
189E:  CLRF   x4C
18A0:  MOVFF  53D,54D
18A4:  MOVLW  7F
18A6:  MOVWF  x4E
18A8:  MOVFF  540,54F
18AC:  MOVLW  01
18AE:  MOVWF  x50
18B0:  CLRF   x51
18B2:  MOVLB  0
18B4:  RCALL  1728
18B6:  MOVLW  01
18B8:  MOVLB  5
18BA:  ADDWF  x3C,W
18BC:  MOVWF  x40
18BE:  MOVLW  01
18C0:  ADDWF  x3D,W
18C2:  MOVWF  x41
18C4:  MOVFF  540,54B
18C8:  MOVWF  x4C
18CA:  MOVLW  05
18CC:  MOVWF  x4E
18CE:  MOVLW  1A
18D0:  MOVWF  x4D
18D2:  MOVFF  53F,54F
18D6:  MOVLW  01
18D8:  MOVWF  x50
18DA:  MOVLB  0
18DC:  RCALL  1432
....................    glcd_update(); 
18DE:  MOVLB  0
18E0:  RCALL  1214
.................... } 
18E2:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
23C2:  MOVLB  5
23C4:  MOVF   x3E,W
23C6:  SUBLW  02
23C8:  BNZ   243A
....................    { 
....................       sprintf(voltage, "%03u", digito); 
23CA:  MOVLW  05
23CC:  MOVWF  x39
23CE:  MOVLW  40
23D0:  MOVWF  x38
23D2:  MOVFF  53B,549
23D6:  MOVLW  03
23D8:  MOVWF  x4A
23DA:  MOVLB  0
23DC:  RCALL  233C
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
23DE:  MOVLB  5
23E0:  MOVF   x3F,W
23E2:  MULLW  12
23E4:  MOVF   FF3,W
23E6:  ADDWF  x3C,W
23E8:  MOVWF  x49
23EA:  MOVF   x3F,W
23EC:  MULLW  08
23EE:  MOVF   FF3,W
23F0:  ADDWF  x3D,W
23F2:  MOVWF  x4A
23F4:  MOVFF  53C,54C
23F8:  MOVFF  53D,54D
23FC:  MOVFF  549,54E
2400:  MOVWF  x4F
2402:  MOVLW  01
2404:  MOVWF  x50
2406:  MOVWF  x51
2408:  MOVLB  0
240A:  CALL   1728
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
240E:  MOVLW  01
2410:  MOVLB  5
2412:  ADDWF  x3C,W
2414:  MOVWF  x49
2416:  MOVLW  01
2418:  ADDWF  x3D,W
241A:  MOVWF  x4A
241C:  MOVFF  549,54B
2420:  MOVWF  x4C
2422:  MOVLW  05
2424:  MOVWF  x4E
2426:  MOVLW  40
2428:  MOVWF  x4D
242A:  MOVFF  53F,54F
242E:  CLRF   x50
2430:  MOVLB  0
2432:  CALL   1432
....................    } 
....................    else 
2436:  BRA    2508
2438:  MOVLB  5
....................    { 
....................       sprintf(voltage, "%u", digito); 
243A:  MOVLW  05
243C:  MOVWF  x39
243E:  MOVLW  40
2440:  MOVWF  x38
2442:  MOVFF  53B,549
2446:  MOVLW  1B
2448:  MOVWF  x4A
244A:  MOVLB  0
244C:  RCALL  233C
....................     
....................       if(sombreado==1) 
244E:  MOVLB  5
2450:  DECFSZ x3E,W
2452:  BRA    24AC
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
2454:  MOVF   x3F,W
2456:  MULLW  05
2458:  MOVF   FF3,W
245A:  ADDWF  x3C,W
245C:  MOVWF  x49
245E:  MOVF   x3F,W
2460:  MULLW  08
2462:  MOVF   FF3,W
2464:  ADDWF  x3D,W
2466:  MOVWF  x4A
2468:  MOVFF  53C,54C
246C:  MOVFF  53D,54D
2470:  MOVFF  549,54E
2474:  MOVWF  x4F
2476:  MOVLW  01
2478:  MOVWF  x50
247A:  MOVWF  x51
247C:  MOVLB  0
247E:  CALL   1728
2482:  MOVLW  01
2484:  MOVLB  5
2486:  ADDWF  x3C,W
2488:  MOVWF  x49
248A:  MOVLW  01
248C:  ADDWF  x3D,W
248E:  MOVWF  x4A
2490:  MOVFF  549,54B
2494:  MOVWF  x4C
2496:  MOVLW  05
2498:  MOVWF  x4E
249A:  MOVLW  40
249C:  MOVWF  x4D
249E:  MOVFF  53F,54F
24A2:  CLRF   x50
24A4:  MOVLB  0
24A6:  CALL   1432
24AA:  MOVLB  5
....................       if(sombreado==0) 
24AC:  MOVF   x3E,F
24AE:  BNZ   250A
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
24B0:  MOVF   x3F,W
24B2:  MULLW  05
24B4:  MOVF   FF3,W
24B6:  ADDWF  x3C,W
24B8:  MOVWF  x49
24BA:  MOVF   x3F,W
24BC:  MULLW  08
24BE:  MOVF   FF3,W
24C0:  ADDWF  x3D,W
24C2:  MOVWF  x4A
24C4:  MOVFF  53C,54C
24C8:  MOVFF  53D,54D
24CC:  MOVFF  549,54E
24D0:  MOVWF  x4F
24D2:  MOVLW  01
24D4:  MOVWF  x50
24D6:  CLRF   x51
24D8:  MOVLB  0
24DA:  CALL   1728
24DE:  MOVLW  01
24E0:  MOVLB  5
24E2:  ADDWF  x3C,W
24E4:  MOVWF  x49
24E6:  MOVLW  01
24E8:  ADDWF  x3D,W
24EA:  MOVWF  x4A
24EC:  MOVFF  549,54B
24F0:  MOVWF  x4C
24F2:  MOVLW  05
24F4:  MOVWF  x4E
24F6:  MOVLW  40
24F8:  MOVWF  x4D
24FA:  MOVFF  53F,54F
24FE:  MOVLW  01
2500:  MOVWF  x50
2502:  MOVLB  0
2504:  CALL   1432
2508:  MOVLB  5
....................    } 
....................    glcd_update(); 
250A:  MOVLB  0
250C:  CALL   1214
.................... } 
2510:  RETLW  00
....................  
.................... #int_rda 
.................... void rda_isr(void)//función de interrupción por recepción de datos USART  
.................... {  
....................    dato[bite]=getch(); 
*
0F0E:  CLRF   03
0F10:  MOVLB  4
0F12:  MOVF   x8B,W
0F14:  ADDLW  BC
0F16:  MOVWF  FE9
0F18:  MOVLW  04
0F1A:  ADDWFC 03,W
0F1C:  MOVWF  FEA
0F1E:  BTFSS  F9E.5
0F20:  BRA    0F1E
0F22:  MOVFF  FAE,FEF
....................    if((bite<10 && strcmp(dato[bite],'\r')==0)) 
0F26:  MOVF   x8B,W
0F28:  SUBLW  09
0F2A:  BNC   0F60
0F2C:  CLRF   03
0F2E:  MOVF   x8B,W
0F30:  ADDLW  BC
0F32:  MOVWF  FE9
0F34:  MOVLW  04
0F36:  ADDWFC 03,W
0F38:  MOVWF  FEA
0F3A:  MOVFF  FEF,570
0F3E:  MOVLB  5
0F40:  CLRF   x72
0F42:  MOVFF  570,571
0F46:  CLRF   x74
0F48:  MOVLW  0D
0F4A:  MOVWF  x73
0F4C:  MOVLB  0
0F4E:  RCALL  0E96
0F50:  MOVF   01,F
0F52:  BTFSC  FD8.2
0F54:  BRA    0F5A
0F56:  MOVLB  4
0F58:  BRA    0F60
....................    { 
....................       bite=0; 
0F5A:  MOVLB  4
0F5C:  CLRF   x8B
....................    } 
....................    else 
0F5E:  BRA    0FF2
....................    { 
....................       if(bite==10 && strcmp(dato[bite],'\r')==0) 
0F60:  MOVF   x8B,W
0F62:  SUBLW  0A
0F64:  BNZ   0FE4
0F66:  CLRF   03
0F68:  MOVF   x8B,W
0F6A:  ADDLW  BC
0F6C:  MOVWF  FE9
0F6E:  MOVLW  04
0F70:  ADDWFC 03,W
0F72:  MOVWF  FEA
0F74:  MOVFF  FEF,570
0F78:  MOVLB  5
0F7A:  CLRF   x72
0F7C:  MOVFF  570,571
0F80:  CLRF   x74
0F82:  MOVLW  0D
0F84:  MOVWF  x73
0F86:  MOVLB  0
0F88:  RCALL  0E96
0F8A:  MOVF   01,F
0F8C:  BTFSC  FD8.2
0F8E:  BRA    0F94
0F90:  MOVLB  4
0F92:  BRA    0FE4
....................       { 
....................          TamanoCadena=bite; 
0F94:  MOVFF  48B,48C
....................          bite=0; 
0F98:  MOVLB  4
0F9A:  CLRF   x8B
....................          CadenaRecibida=1; 
0F9C:  BSF    x7D.3
....................          for(i=0;i<TamanoCadena+1;i++) 
0F9E:  CLRF   x8D
0FA0:  MOVLW  01
0FA2:  ADDWF  x8C,W
0FA4:  SUBWF  x8D,W
0FA6:  BC    0FE2
....................          { 
....................             datoRx[i]=dato[i]; 
0FA8:  CLRF   03
0FAA:  MOVF   x8D,W
0FAC:  ADDLW  D4
0FAE:  MOVWF  01
0FB0:  MOVLW  04
0FB2:  ADDWFC 03,F
0FB4:  MOVLB  5
0FB6:  MOVFF  03,571
0FBA:  CLRF   03
0FBC:  MOVLB  4
0FBE:  MOVF   x8D,W
0FC0:  ADDLW  BC
0FC2:  MOVWF  FE9
0FC4:  MOVLW  04
0FC6:  ADDWFC 03,W
0FC8:  MOVWF  FEA
0FCA:  MOVFF  FEF,572
0FCE:  MOVLB  5
0FD0:  MOVFF  571,FEA
0FD4:  MOVFF  01,FE9
0FD8:  MOVFF  572,FEF
....................          }    
0FDC:  MOVLB  4
0FDE:  INCF   x8D,F
0FE0:  BRA    0FA0
....................       } 
....................       else 
0FE2:  BRA    0FF2
....................       { 
....................          if(bite>10) 
0FE4:  MOVF   x8B,W
0FE6:  SUBLW  0A
0FE8:  BC    0FEE
....................          { 
....................             bite=0; 
0FEA:  CLRF   x8B
....................          } 
....................          else 
0FEC:  BRA    0FF2
....................          { 
....................             //displayTiempo(bite,50,50,2,1); 
....................             CadenaRecibida=0; 
0FEE:  BCF    x7D.3
....................             bite++; 
0FF0:  INCF   x8B,F
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0FF2:  BCF    F9E.5
0FF4:  MOVLB  0
0FF6:  GOTO   0060
.................... void EnviarCodigo(void) 
.................... { 
....................    datoTx[0]=Resistencia+48; 
*
1AD0:  MOVLW  30
1AD2:  MOVLB  4
1AD4:  ADDWF  x7F,W
1AD6:  MOVWF  xC6
....................    datoTx[1]=EVDesfogue+48; 
1AD8:  MOVLW  30
1ADA:  ADDWF  x80,W
1ADC:  MOVWF  xC7
....................    datoTx[2]=EVAgua+48; 
1ADE:  MOVLW  30
1AE0:  ADDWF  x81,W
1AE2:  MOVWF  xC8
....................    datoTx[3]=EVTrampa+48; 
1AE4:  MOVLW  30
1AE6:  ADDWF  x82,W
1AE8:  MOVWF  xC9
....................    datoTx[4]=MotorPuerta+48; 
1AEA:  MOVLW  30
1AEC:  ADDWF  x83,W
1AEE:  MOVWF  xCA
....................    datoTx[5]=EVEntradaAgua+48; 
1AF0:  MOVLW  30
1AF2:  ADDWF  x84,W
1AF4:  MOVWF  xCB
....................    datoTx[6]=BombaVacio+48; 
1AF6:  MOVLW  30
1AF8:  ADDWF  x85,W
1AFA:  MOVWF  xCC
....................    datoTx[7]=BombaAgua+48; 
1AFC:  MOVLW  30
1AFE:  ADDWF  x86,W
1B00:  MOVWF  xCD
....................    datoTx[8]=Control+48; 
1B02:  MOVLW  30
1B04:  ADDWF  x87,W
1B06:  MOVWF  xCE
....................    datoTx[12]=Nivel+48; 
1B08:  MOVLW  30
1B0A:  ADDWF  x9C,W
1B0C:  MOVWF  xD2
....................    datoTx[9]=Setpoint+48; 
1B0E:  MOVLW  30
1B10:  ADDWF  x8E,W
1B12:  MOVWF  xCF
....................    /*itoa(Setpoint,10, SetTemperatura); 
....................     
....................    for(i=0;i<3;i++) 
....................    { 
....................       if(SetTemperatura[i]==null) 
....................       { 
....................          datoTx[i+9]='n'; 
....................       } 
....................       else 
....................       { 
....................          datoTx[i+9]=SetTemperatura[i]; 
....................       } 
....................    }*/ 
....................    datoTx[13]='\r'; 
1B14:  MOVLW  0D
1B16:  MOVWF  xD3
....................        
....................        
....................    for(i=0;i<14;i++) 
1B18:  CLRF   x8D
1B1A:  MOVF   x8D,W
1B1C:  SUBLW  0D
1B1E:  BNC   1B4C
....................    { 
....................       putc(datoTx[i]); 
1B20:  CLRF   03
1B22:  MOVF   x8D,W
1B24:  ADDLW  C6
1B26:  MOVWF  FE9
1B28:  MOVLW  04
1B2A:  ADDWFC 03,W
1B2C:  MOVWF  FEA
1B2E:  MOVFF  FEF,53A
1B32:  MOVLB  5
1B34:  MOVF   x3A,W
1B36:  MOVLB  0
1B38:  BRA    1AC6
....................       delay_ms(12); 
1B3A:  MOVLW  0C
1B3C:  MOVLB  5
1B3E:  MOVWF  x3F
1B40:  MOVLB  0
1B42:  CALL   10C2
....................    }    
1B46:  MOVLB  4
1B48:  INCF   x8D,F
1B4A:  BRA    1B1A
.................... } 
1B4C:  MOVLB  0
1B4E:  RETLW  00
....................  
.................... void Determina(void){ 
....................          Puerta=DatoRx[0]-48; 
*
1F28:  MOVLW  30
1F2A:  MOVLB  4
1F2C:  SUBWF  xD4,W
1F2E:  MOVWF  x70
....................          Parada=DatoRx[1]-48; 
1F30:  MOVLW  30
1F32:  SUBWF  xD5,W
1F34:  MOVWF  x71
....................          NivelReservorio=DatoRx[2]-48; 
1F36:  MOVLW  30
1F38:  SUBWF  xD6,W
1F3A:  MOVWF  x72
....................          NivelTanque=DatoRx[3]-48; 
1F3C:  MOVLW  30
1F3E:  SUBWF  xD7,W
1F40:  MOVWF  x73
....................          Presostato=DatoRx[4]-48; 
1F42:  MOVLW  30
1F44:  SUBWF  xD8,W
1F46:  MOVWF  x74
....................          ADC_Pt100=DatoRx[5]-48; 
1F48:  MOVLW  30
1F4A:  SUBWF  xD9,W
1F4C:  MOVLB  5
1F4E:  CLRF   x40
1F50:  MOVWF  x3F
1F52:  MOVLB  0
1F54:  CALL   10EC
1F58:  MOVFF  03,4A3
1F5C:  MOVFF  02,4A2
1F60:  MOVFF  01,4A1
1F64:  MOVFF  00,4A0
....................          Alarma=DatoRx[6]-48; 
1F68:  MOVLW  30
1F6A:  MOVLB  4
1F6C:  SUBWF  xDA,W
1F6E:  MOVWF  x7A
....................          AlarmaAgua=DatoRx[7]-48; 
1F70:  MOVLW  30
1F72:  SUBWF  xDB,W
1F74:  MOVWF  x7B
....................          /*for(i=0;i<4;i++) 
....................          { 
....................             if(strcmp(datoRx[i+5],'n')==0 ) 
....................             { 
....................                break; 
....................             } 
....................             else 
....................             { 
....................                ADCTemperatura[i]=datoRx[i+5]; 
....................             } 
....................          } 
....................          ADC_Pt100=atof(ADCTemperatura); 
....................          for(i=0;i<4;i++) 
....................          { 
....................             datoRx[i+5]=null; 
....................             ADCTemperatura[i]=null; 
....................          }*/ 
....................          Decimal=DatoRx[9]-48; 
1F76:  MOVLW  30
1F78:  SUBWF  xDD,W
1F7A:  MOVWF  x88
....................          ADC_Pt100=ADC_Pt100+((float)Decimal/10); 
1F7C:  MOVLB  5
1F7E:  CLRF   x40
1F80:  MOVFF  488,53F
1F84:  MOVLB  0
1F86:  CALL   10EC
1F8A:  MOVFF  00,53A
1F8E:  MOVFF  01,53B
1F92:  MOVFF  02,53C
1F96:  MOVFF  03,53D
1F9A:  MOVFF  03,541
1F9E:  MOVFF  02,540
1FA2:  MOVFF  01,53F
1FA6:  MOVFF  00,53E
1FAA:  MOVLB  5
1FAC:  CLRF   x45
1FAE:  CLRF   x44
1FB0:  MOVLW  20
1FB2:  MOVWF  x43
1FB4:  MOVLW  82
1FB6:  MOVWF  x42
1FB8:  MOVLB  0
1FBA:  BRA    1B50
1FBC:  BCF    FD8.1
1FBE:  MOVFF  4A3,541
1FC2:  MOVFF  4A2,540
1FC6:  MOVFF  4A1,53F
1FCA:  MOVFF  4A0,53E
1FCE:  MOVFF  03,545
1FD2:  MOVFF  02,544
1FD6:  MOVFF  01,543
1FDA:  MOVFF  00,542
1FDE:  RCALL  1CB0
1FE0:  MOVFF  03,4A3
1FE4:  MOVFF  02,4A2
1FE8:  MOVFF  01,4A1
1FEC:  MOVFF  00,4A0
.................... } 
1FF0:  RETLW  00
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................    /* 
....................    if(x==1){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(tijeras[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==2){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(guante[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==3){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Delicado[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    } 
....................     
....................    if(x==4){ 
....................    for( i = 0 ; i < 64 ; i ++ ) 
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
....................       {     
....................          for(k=7;k>-1;k--) 
....................          {       
....................             if( bit_test(Liquido[i][j] ,7-k ))  
....................                glcd_pixel( j*8+k,i, ON ); 
....................          }   
....................       } 
....................    } 
....................    }*/ 
....................     
....................    if(x==5){ 
*
2016:  MOVLB  5
2018:  MOVF   x3A,W
201A:  SUBLW  05
201C:  BNZ   20C0
....................    for( i = 0 ; i < 64 ; i ++ ) 
201E:  CLRF   x3B
2020:  MOVF   x3B,W
2022:  SUBLW  3F
2024:  BNC   20C0
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
2026:  CLRF   x3C
2028:  MOVF   x3C,W
202A:  SUBLW  0F
202C:  BNC   20BC
....................       {     
....................          for(k=7;k>-1;k--) 
202E:  MOVLW  07
2030:  MOVWF  x3D
2032:  MOVF   x3D,W
2034:  XORLW  80
2036:  SUBLW  7F
2038:  BC    20B8
....................          {       
....................             if( bit_test(Proceso[i][j] ,7-k ))  
203A:  CLRF   x3F
203C:  MOVFF  53B,53E
2040:  CLRF   x41
2042:  MOVLW  10
2044:  MOVWF  x40
2046:  MOVLB  0
2048:  BRA    1FF2
204A:  MOVFF  02,53F
204E:  MOVFF  01,53E
2052:  MOVLB  5
2054:  MOVF   x3C,W
2056:  ADDWF  01,W
2058:  MOVWF  01
205A:  MOVLW  00
205C:  ADDWFC 02,W
205E:  MOVWF  03
2060:  MOVF   01,W
2062:  MOVFF  FF2,53E
2066:  BCF    FF2.7
2068:  MOVFF  03,FF7
206C:  MOVLB  0
206E:  CALL   02B2
2072:  MOVLB  5
2074:  BTFSC  x3E.7
2076:  BSF    FF2.7
2078:  MOVWF  x3E
207A:  MOVLW  07
207C:  BSF    FD8.0
207E:  SUBFWB x3D,W
2080:  MOVWF  x3F
2082:  MOVFF  53E,00
2086:  MOVF   x3F,W
2088:  MOVWF  01
208A:  BZ    2094
208C:  BCF    FD8.0
208E:  RRCF   00,F
2090:  DECFSZ 01,F
2092:  BRA    208C
2094:  BTFSS  00.0
2096:  BRA    20B4
....................                glcd_pixel( j*8+k,i, ON ); 
2098:  MOVF   x3C,W
209A:  MULLW  08
209C:  MOVF   FF3,W
209E:  ADDWF  x3D,W
20A0:  MOVWF  x3E
20A2:  MOVWF  x67
20A4:  MOVFF  53B,568
20A8:  MOVLW  01
20AA:  MOVWF  x69
20AC:  MOVLB  0
20AE:  CALL   1376
20B2:  MOVLB  5
....................          }   
20B4:  DECF   x3D,F
20B6:  BRA    2032
....................       } 
20B8:  INCF   x3C,F
20BA:  BRA    2028
....................    } 
20BC:  INCF   x3B,F
20BE:  BRA    2020
....................    } 
....................     
.................... } 
20C0:  MOVLB  0
20C2:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(5536); 
*
0FFA:  MOVLW  15
0FFC:  MOVWF  FCF
0FFE:  MOVLW  A0
1000:  MOVWF  FCE
....................    tiempos++; 
1002:  MOVLB  4
1004:  INCF   x94,F
1006:  BTFSC  FD8.2
1008:  INCF   x95,F
....................    tiempos3++; 
100A:  INCF   x96,F
100C:  BTFSC  FD8.2
100E:  INCF   x97,F
....................    tiempoctrl++; 
1010:  INCF   x98,F
1012:  BTFSC  FD8.2
1014:  INCF   x99,F
....................        
....................    if(tiempos3>=40 && Exhaust==2) 
1016:  MOVF   x97,F
1018:  BNZ   1020
101A:  MOVF   x96,W
101C:  SUBLW  27
101E:  BC    1032
1020:  MOVF   x93,W
1022:  SUBLW  02
1024:  BNZ   1032
....................    {tiempos3=0;Expulsa=1;tiempo_desfogue++;} 
1026:  CLRF   x97
1028:  CLRF   x96
102A:  BSF    x7C.7
102C:  INCF   x9E,F
102E:  BTFSC  FD8.2
1030:  INCF   x9F,F
....................     
....................    if(tiempos==200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
1032:  MOVF   x94,W
1034:  SUBLW  C8
1036:  BNZ   10BA
1038:  MOVF   x95,F
103A:  BNZ   10BA
....................    {tiempos=0;Lectura=1; 
103C:  CLRF   x95
103E:  CLRF   x94
1040:  BSF    x7C.6
....................     
....................    //----------------------------- Tiempo Total-----------------------------// 
....................     
....................    if(tiempo_esterilizacion==1) 
1042:  DECFSZ x91,W
1044:  BRA    107E
....................       { 
....................                       
....................       Testerilizacion[0]++; 
1046:  INCF   xA4,F
....................       if(Testerilizacion[0]>9) 
1048:  BTFSC  xA4.7
104A:  BRA    1056
104C:  MOVF   xA4,W
104E:  SUBLW  09
1050:  BC    1056
....................          {Testerilizacion[0]=0; 
1052:  CLRF   xA4
....................           Testerilizacion[1]++;} 
1054:  INCF   xA5,F
....................        if(Testerilizacion[1]>5) 
1056:  BTFSC  xA5.7
1058:  BRA    1064
105A:  MOVF   xA5,W
105C:  SUBLW  05
105E:  BC    1064
....................          {Testerilizacion[1]=0; 
1060:  CLRF   xA5
....................           Testerilizacion[2]++;} 
1062:  INCF   xA6,F
....................          if(Testerilizacion[2]>9) 
1064:  BTFSC  xA6.7
1066:  BRA    1072
1068:  MOVF   xA6,W
106A:  SUBLW  09
106C:  BC    1072
....................             {Testerilizacion[2]=0; 
106E:  CLRF   xA6
....................              Testerilizacion[3]++;} 
1070:  INCF   xA7,F
....................             if(Testerilizacion[3]>5) 
1072:  BTFSC  xA7.7
1074:  BRA    107E
1076:  MOVF   xA7,W
1078:  SUBLW  05
107A:  BC    107E
....................                {Testerilizacion[3]=0;} 
107C:  CLRF   xA7
....................       }        
....................        
....................     if(tiempo_secado==1) 
107E:  DECFSZ x92,W
1080:  BRA    10BA
....................       { 
....................                       
....................       Tsecado[0]++; 
1082:  INCF   xAC,F
....................       if(Tsecado[0]>9) 
1084:  BTFSC  xAC.7
1086:  BRA    1092
1088:  MOVF   xAC,W
108A:  SUBLW  09
108C:  BC    1092
....................          {Tsecado[0]=0; 
108E:  CLRF   xAC
....................           Tsecado[1]++;} 
1090:  INCF   xAD,F
....................        if(Tsecado[1]>5) 
1092:  BTFSC  xAD.7
1094:  BRA    10A0
1096:  MOVF   xAD,W
1098:  SUBLW  05
109A:  BC    10A0
....................          {Tsecado[1]=0; 
109C:  CLRF   xAD
....................           Tsecado[2]++;} 
109E:  INCF   xAE,F
....................          if(Tsecado[2]>9) 
10A0:  BTFSC  xAE.7
10A2:  BRA    10AE
10A4:  MOVF   xAE,W
10A6:  SUBLW  09
10A8:  BC    10AE
....................             {Tsecado[2]=0; 
10AA:  CLRF   xAE
....................              Tsecado[3]++;} 
10AC:  INCF   xAF,F
....................             if(Tsecado[3]>5) 
10AE:  BTFSC  xAF.7
10B0:  BRA    10BA
10B2:  MOVF   xAF,W
10B4:  SUBLW  05
10B6:  BC    10BA
....................                {Tsecado[3]=0;} 
10B8:  CLRF   xAF
....................       }   
....................    } 
....................    } 
....................     
10BA:  BCF    F9E.0
10BC:  MOVLB  0
10BE:  GOTO   0060
.................... void Limpia(int x1,int x2,int y){ 
....................    glcd_rect(x1, y, x2, y+7, YES, OFF); 
*
2652:  MOVLW  07
2654:  MOVLB  5
2656:  ADDWF  x3C,W
2658:  MOVWF  x3D
265A:  MOVFF  53A,54C
265E:  MOVFF  53C,54D
2662:  MOVFF  53B,54E
2666:  MOVWF  x4F
2668:  MOVLW  01
266A:  MOVWF  x50
266C:  CLRF   x51
266E:  MOVLB  0
2670:  CALL   1728
.................... } 
2674:  RETLW  00
....................  
.................... void displayT(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%3.1f",adc); // Converts adc to text 
*
29E6:  MOVLW  05
29E8:  MOVLB  5
29EA:  MOVWF  x39
29EC:  MOVLW  41
29EE:  MOVWF  x38
29F0:  MOVLW  02
29F2:  MOVWF  FE9
29F4:  MOVFF  53D,54D
29F8:  MOVFF  53C,54C
29FC:  MOVFF  53B,54B
2A00:  MOVFF  53A,54A
2A04:  MOVLW  01
2A06:  MOVWF  x4E
2A08:  MOVLB  0
2A0A:  BRA    2832
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
2A0C:  MOVLB  5
2A0E:  MOVF   x40,W
2A10:  MULLW  1B
2A12:  MOVF   FF3,W
2A14:  ADDWF  x3E,W
2A16:  MOVWF  x4A
2A18:  MOVF   x40,W
2A1A:  MULLW  08
2A1C:  MOVF   FF3,W
2A1E:  ADDWF  x3F,W
2A20:  MOVWF  x4B
2A22:  MOVFF  53E,54C
2A26:  MOVFF  53F,54D
2A2A:  MOVFF  54A,54E
2A2E:  MOVWF  x4F
2A30:  MOVLW  01
2A32:  MOVWF  x50
2A34:  CLRF   x51
2A36:  MOVLB  0
2A38:  CALL   1728
....................    /*glcd_rect(x, y, x+53, y+15, YES, ON);*/glcd_text57(x, y, voltage, w, ON); 
2A3C:  MOVFF  53E,54B
2A40:  MOVFF  53F,54C
2A44:  MOVLW  05
2A46:  MOVLB  5
2A48:  MOVWF  x4E
2A4A:  MOVLW  41
2A4C:  MOVWF  x4D
2A4E:  MOVFF  540,54F
2A52:  MOVLW  01
2A54:  MOVWF  x50
2A56:  MOVLB  0
2A58:  CALL   1432
.................... } 
2A5C:  GOTO   6486 (RETURN)
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1122:  MOVLB  5
1124:  RLCF   x3A,W
1126:  MOVWF  00
1128:  RLCF   00,F
112A:  MOVLW  FC
112C:  ANDWF  00,F
112E:  MOVFF  00,01
1132:  MOVF   FC2,W
1134:  ANDLW  C3
1136:  IORWF  00,W
1138:  MOVWF  FC2
113A:  MOVLW  0A
113C:  MOVWF  x3F
113E:  MOVLB  0
1140:  RCALL  10C2
1142:  BSF    FC2.1
1144:  BTFSC  FC2.1
1146:  BRA    1144
1148:  MOVFF  FC4,540
114C:  MOVFF  FC3,53F
1150:  MOVLB  0
1152:  RCALL  10EC
1154:  MOVFF  03,53E
1158:  MOVFF  02,53D
115C:  MOVFF  01,53C
1160:  MOVFF  00,53B
1164:  MOVFF  53B,00
1168:  MOVFF  53C,01
116C:  MOVFF  53D,02
1170:  MOVFF  53E,03
.................... } 
1174:  GOTO   2D60 (RETURN)
....................  
.................... void MuestraTiemposProgramados(){ 
.................... // Muestra Valor de esterilizacion programado. 
....................    displayTiempo(Testerilizacionp[3],36,0,0,1);displayTiempo(Testerilizacionp[2],42,0,0,1); 
*
2512:  MOVFF  4AB,53B
2516:  MOVLW  24
2518:  MOVLB  5
251A:  MOVWF  x3C
251C:  CLRF   x3D
251E:  CLRF   x3E
2520:  MOVLW  01
2522:  MOVWF  x3F
2524:  MOVLB  0
2526:  RCALL  23C2
2528:  MOVFF  4AA,53B
252C:  MOVLW  2A
252E:  MOVLB  5
2530:  MOVWF  x3C
2532:  CLRF   x3D
2534:  CLRF   x3E
2536:  MOVLW  01
2538:  MOVWF  x3F
253A:  MOVLB  0
253C:  RCALL  23C2
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,0,2,1);  
253E:  MOVLW  05
2540:  MOVWF  FEA
2542:  MOVLW  1A
2544:  MOVWF  FE9
2546:  MOVFF  FF2,53A
254A:  BCF    FF2.7
254C:  MOVLW  00
254E:  CALL   06CA
2552:  TBLRD*-
2554:  TBLRD*+
2556:  MOVF   FF5,W
2558:  MOVWF  FEE
255A:  IORLW  00
255C:  BNZ   2554
255E:  MOVLB  5
2560:  BTFSC  x3A.7
2562:  BSF    FF2.7
2564:  MOVLW  05
2566:  MOVWF  x3B
2568:  MOVLW  1A
256A:  MOVWF  x3A
256C:  MOVLW  31
256E:  MOVWF  x3C
2570:  CLRF   x3D
2572:  MOVLW  02
2574:  MOVWF  x3E
2576:  MOVLW  01
2578:  MOVWF  x3F
257A:  MOVLB  0
257C:  CALL   17EA
....................    displayTiempo(Testerilizacionp[1],54,0,0,1);displayTiempo(Testerilizacionp[0],60,0,0,1); 
2580:  MOVFF  4A9,53B
2584:  MOVLW  36
2586:  MOVLB  5
2588:  MOVWF  x3C
258A:  CLRF   x3D
258C:  CLRF   x3E
258E:  MOVLW  01
2590:  MOVWF  x3F
2592:  MOVLB  0
2594:  RCALL  23C2
2596:  MOVFF  4A8,53B
259A:  MOVLW  3C
259C:  MOVLB  5
259E:  MOVWF  x3C
25A0:  CLRF   x3D
25A2:  CLRF   x3E
25A4:  MOVLW  01
25A6:  MOVWF  x3F
25A8:  MOVLB  0
25AA:  RCALL  23C2
.................... // Muestra tiempo de secado programado. 
....................    displayTiempo(Tsecadop[3],36,8,0,1);displayTiempo(Tsecadop[2],42,8,0,1); 
25AC:  MOVFF  4B3,53B
25B0:  MOVLW  24
25B2:  MOVLB  5
25B4:  MOVWF  x3C
25B6:  MOVLW  08
25B8:  MOVWF  x3D
25BA:  CLRF   x3E
25BC:  MOVLW  01
25BE:  MOVWF  x3F
25C0:  MOVLB  0
25C2:  RCALL  23C2
25C4:  MOVFF  4B2,53B
25C8:  MOVLW  2A
25CA:  MOVLB  5
25CC:  MOVWF  x3C
25CE:  MOVLW  08
25D0:  MOVWF  x3D
25D2:  CLRF   x3E
25D4:  MOVLW  01
25D6:  MOVWF  x3F
25D8:  MOVLB  0
25DA:  RCALL  23C2
....................    strcpy(Menus.Letra,":");displayMenu(Menus.Letra,49,8,2,1);  
25DC:  MOVLW  05
25DE:  MOVWF  FEA
25E0:  MOVLW  1A
25E2:  MOVWF  FE9
25E4:  MOVFF  FF2,53A
25E8:  BCF    FF2.7
25EA:  MOVLW  00
25EC:  CALL   06CA
25F0:  TBLRD*-
25F2:  TBLRD*+
25F4:  MOVF   FF5,W
25F6:  MOVWF  FEE
25F8:  IORLW  00
25FA:  BNZ   25F2
25FC:  MOVLB  5
25FE:  BTFSC  x3A.7
2600:  BSF    FF2.7
2602:  MOVLW  05
2604:  MOVWF  x3B
2606:  MOVLW  1A
2608:  MOVWF  x3A
260A:  MOVLW  31
260C:  MOVWF  x3C
260E:  MOVLW  08
2610:  MOVWF  x3D
2612:  MOVLW  02
2614:  MOVWF  x3E
2616:  MOVLW  01
2618:  MOVWF  x3F
261A:  MOVLB  0
261C:  CALL   17EA
....................    displayTiempo(Tsecadop[1],54,8,0,1);displayTiempo(Tsecadop[0],60,8,0,1); 
2620:  MOVFF  4B1,53B
2624:  MOVLW  36
2626:  MOVLB  5
2628:  MOVWF  x3C
262A:  MOVLW  08
262C:  MOVWF  x3D
262E:  CLRF   x3E
2630:  MOVLW  01
2632:  MOVWF  x3F
2634:  MOVLB  0
2636:  RCALL  23C2
2638:  MOVFF  4B0,53B
263C:  MOVLW  3C
263E:  MOVLB  5
2640:  MOVWF  x3C
2642:  MOVLW  08
2644:  MOVWF  x3D
2646:  CLRF   x3E
2648:  MOVLW  01
264A:  MOVWF  x3F
264C:  MOVLB  0
264E:  RCALL  23C2
.................... } 
2650:  RETLW  00
....................  
.................... void Leer_Sensor(int media) 
.................... { 
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    V0 = V0/39.40; 
....................    Pt=(R1+(float)R2)/((1023.0/V0)-1.0); 
....................    Temperature=(Pt-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................              
....................    if(l>media-1) 
....................    {l=0;} 
....................    promedio[l]=Temperature;l++; 
....................           
....................    for(h=0;h<=(media-1);h++) 
....................    { 
....................       Prom+=promedio[h]; 
....................    }  
....................    Prom=Prom/media;    
....................    Prom+=((float)Ajuste-(float)Ajusten); 
....................     
....................    //return Prom; 
.................... } 
....................  
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
1A10:  MOVLW  05
1A12:  MOVLB  5
1A14:  MOVWF  x39
1A16:  MOVLW  40
1A18:  MOVWF  x38
1A1A:  MOVFF  53C,549
1A1E:  MOVLW  1F
1A20:  MOVWF  x4A
1A22:  MOVLB  0
1A24:  BRA    1930
....................     
....................    if(sombreado==1) 
1A26:  MOVLB  5
1A28:  DECFSZ x3F,W
1A2A:  BRA    1A7A
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
1A2C:  MOVLW  12
1A2E:  ADDWF  x3D,W
1A30:  MOVWF  x49
1A32:  MOVLW  18
1A34:  ADDWF  x3E,W
1A36:  MOVWF  x4A
1A38:  MOVFF  53D,54C
1A3C:  MOVFF  53E,54D
1A40:  MOVFF  549,54E
1A44:  MOVWF  x4F
1A46:  MOVLW  01
1A48:  MOVWF  x50
1A4A:  MOVWF  x51
1A4C:  MOVLB  0
1A4E:  RCALL  1728
1A50:  MOVLW  02
1A52:  MOVLB  5
1A54:  ADDWF  x3D,W
1A56:  MOVWF  x49
1A58:  MOVLW  01
1A5A:  ADDWF  x3E,W
1A5C:  MOVWF  x4A
1A5E:  MOVFF  549,54B
1A62:  MOVWF  x4C
1A64:  MOVLW  05
1A66:  MOVWF  x4E
1A68:  MOVLW  40
1A6A:  MOVWF  x4D
1A6C:  MOVLW  02
1A6E:  MOVWF  x4F
1A70:  CLRF   x50
1A72:  MOVLB  0
1A74:  RCALL  1432
....................    else    
1A76:  BRA    1AC4
1A78:  MOVLB  5
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
1A7A:  MOVLW  12
1A7C:  ADDWF  x3D,W
1A7E:  MOVWF  x49
1A80:  MOVLW  18
1A82:  ADDWF  x3E,W
1A84:  MOVWF  x4A
1A86:  MOVFF  53D,54C
1A8A:  MOVFF  53E,54D
1A8E:  MOVFF  549,54E
1A92:  MOVWF  x4F
1A94:  CLRF   x50
1A96:  CLRF   x51
1A98:  MOVLB  0
1A9A:  RCALL  1728
1A9C:  MOVLW  02
1A9E:  MOVLB  5
1AA0:  ADDWF  x3D,W
1AA2:  MOVWF  x49
1AA4:  MOVLW  01
1AA6:  ADDWF  x3E,W
1AA8:  MOVWF  x4A
1AAA:  MOVFF  549,54B
1AAE:  MOVWF  x4C
1AB0:  MOVLW  05
1AB2:  MOVWF  x4E
1AB4:  MOVLW  40
1AB6:  MOVWF  x4D
1AB8:  MOVLW  02
1ABA:  MOVWF  x4F
1ABC:  MOVLW  01
1ABE:  MOVWF  x50
1AC0:  MOVLB  0
1AC2:  RCALL  1432
....................  
.................... } 
1AC4:  RETLW  00
....................  
.................... void main() 
.................... { 
*
2B18:  CLRF   FF8
2B1A:  BCF    FD0.7
2B1C:  BSF    07.7
2B1E:  CLRF   FEA
2B20:  CLRF   FE9
2B22:  BSF    FB8.3
2B24:  MOVLW  E1
2B26:  MOVWF  FAF
2B28:  MOVLW  04
2B2A:  MOVWF  FB0
2B2C:  MOVLW  A6
2B2E:  MOVWF  FAC
2B30:  MOVLW  90
2B32:  MOVWF  FAB
2B34:  MOVLB  4
2B36:  CLRF   x70
2B38:  MOVLW  01
2B3A:  MOVWF  x71
2B3C:  CLRF   x72
2B3E:  CLRF   x73
2B40:  CLRF   x74
2B42:  CLRF   x75
2B44:  CLRF   x76
2B46:  CLRF   x77
2B48:  CLRF   x78
2B4A:  CLRF   x79
2B4C:  CLRF   x7A
2B4E:  CLRF   x7B
2B50:  BCF    x7C.0
2B52:  BCF    x7C.1
2B54:  BCF    x7C.2
2B56:  BCF    x7C.3
2B58:  BSF    x7C.4
2B5A:  BCF    x7C.5
2B5C:  BCF    x7C.6
2B5E:  BCF    x7C.7
2B60:  BCF    x7D.0
2B62:  BCF    x7D.1
2B64:  BCF    x7D.2
2B66:  BCF    x7D.3
2B68:  BCF    x7D.4
2B6A:  BCF    x7D.5
2B6C:  BCF    x7D.6
2B6E:  BCF    x7D.7
2B70:  BCF    x7E.0
2B72:  BCF    x7E.1
2B74:  BCF    x7E.2
2B76:  BCF    x7E.3
2B78:  BCF    x7E.4
2B7A:  BCF    x7E.5
2B7C:  BCF    x7E.6
2B7E:  CLRF   x7F
2B80:  CLRF   x80
2B82:  CLRF   x81
2B84:  CLRF   x82
2B86:  CLRF   x83
2B88:  CLRF   x84
2B8A:  CLRF   x85
2B8C:  CLRF   x86
2B8E:  CLRF   x87
2B90:  CLRF   x88
2B92:  CLRF   x89
2B94:  MOVWF  x8A
2B96:  CLRF   x8B
2B98:  CLRF   x8C
2B9A:  CLRF   x8D
2B9C:  CLRF   x8E
2B9E:  CLRF   x8F
2BA0:  MOVWF  x90
2BA2:  CLRF   x91
2BA4:  CLRF   x92
2BA6:  CLRF   x93
2BA8:  CLRF   x95
2BAA:  CLRF   x94
2BAC:  CLRF   x97
2BAE:  CLRF   x96
2BB0:  CLRF   x99
2BB2:  CLRF   x98
2BB4:  CLRF   x9B
2BB6:  MOVLW  0F
2BB8:  MOVWF  x9A
2BBA:  CLRF   x9D
2BBC:  CLRF   x9C
2BBE:  CLRF   x9F
2BC0:  CLRF   x9E
2BC2:  CLRF   xA3
2BC4:  CLRF   xA2
2BC6:  CLRF   xA1
2BC8:  CLRF   xA0
2BCA:  CLRF   xE9
2BCC:  CLRF   xE8
2BCE:  CLRF   xE7
2BD0:  CLRF   xE6
2BD2:  CLRF   xED
2BD4:  MOVLW  20
2BD6:  MOVWF  xEC
2BD8:  MOVLW  41
2BDA:  MOVWF  xEB
2BDC:  MOVLW  8B
2BDE:  MOVWF  xEA
2BE0:  CLRF   xF5
2BE2:  CLRF   xF4
2BE4:  MOVLW  20
2BE6:  MOVWF  xF3
2BE8:  MOVLW  82
2BEA:  MOVWF  xF2
2BEC:  CLRF   xF9
2BEE:  CLRF   xF8
2BF0:  CLRF   xF7
2BF2:  CLRF   xF6
2BF4:  CLRF   xFD
2BF6:  CLRF   xFC
2BF8:  CLRF   xFB
2BFA:  CLRF   xFA
2BFC:  MOVLB  5
2BFE:  CLRF   x01
2C00:  CLRF   x00
2C02:  MOVLB  4
2C04:  CLRF   xFF
2C06:  CLRF   xFE
2C08:  MOVLB  5
2C0A:  CLRF   x05
2C0C:  CLRF   x04
2C0E:  CLRF   x03
2C10:  CLRF   x02
2C12:  CLRF   x09
2C14:  CLRF   x08
2C16:  CLRF   x07
2C18:  CLRF   x06
2C1A:  CLRF   x0D
2C1C:  CLRF   x0C
2C1E:  MOVLW  48
2C20:  MOVWF  x0B
2C22:  MOVLW  83
2C24:  MOVWF  x0A
2C26:  CLRF   x11
2C28:  CLRF   x10
2C2A:  MOVLW  20
2C2C:  MOVWF  x0F
2C2E:  MOVLW  83
2C30:  MOVWF  x0E
2C32:  CLRF   x15
2C34:  CLRF   x14
2C36:  CLRF   x13
2C38:  CLRF   x12
2C3A:  CLRF   x19
2C3C:  CLRF   x18
2C3E:  CLRF   x17
2C40:  CLRF   x16
2C42:  MOVF   FC1,W
2C44:  ANDLW  C0
2C46:  IORLW  0F
2C48:  MOVWF  FC1
2C4A:  MOVLW  07
2C4C:  MOVWF  FB4
2C4E:  CLRF   16
2C50:  CLRF   17
2C52:  MOVLW  6B
2C54:  MOVLB  4
2C56:  MOVWF  x1C
2C58:  MOVLW  50
2C5A:  MOVWF  x1D
2C5C:  MOVLW  61
2C5E:  MOVWF  x1E
2C60:  CLRF   x1F
2C62:  CLRF   x20
2C64:  CLRF   x21
2C66:  CLRF   x22
2C68:  CLRF   x23
2C6A:  CLRF   x24
2C6C:  CLRF   x25
2C6E:  CLRF   x26
2C70:  CLRF   x27
2C72:  CLRF   x28
2C74:  CLRF   x29
2C76:  CLRF   x2A
2C78:  CLRF   x2B
2C7A:  CLRF   x2C
2C7C:  CLRF   x2D
2C7E:  CLRF   x2E
2C80:  CLRF   x2F
2C82:  CLRF   x30
2C84:  CLRF   x31
2C86:  CLRF   x32
2C88:  CLRF   x33
2C8A:  CLRF   x34
2C8C:  CLRF   x35
2C8E:  CLRF   x36
2C90:  CLRF   x37
2C92:  CLRF   x38
2C94:  CLRF   x39
2C96:  CLRF   x3A
2C98:  CLRF   x3B
2C9A:  CLRF   x3C
2C9C:  CLRF   x3D
2C9E:  CLRF   x3E
2CA0:  CLRF   x3F
2CA2:  CLRF   x40
2CA4:  CLRF   x41
2CA6:  CLRF   x42
2CA8:  CLRF   x43
2CAA:  CLRF   x44
2CAC:  CLRF   x45
2CAE:  CLRF   x46
2CB0:  CLRF   x47
2CB2:  CLRF   x48
2CB4:  CLRF   x49
2CB6:  CLRF   x4A
2CB8:  CLRF   x4B
2CBA:  CLRF   x4C
2CBC:  CLRF   x4D
2CBE:  CLRF   x4E
2CC0:  CLRF   x4F
2CC2:  CLRF   x50
2CC4:  CLRF   x51
2CC6:  CLRF   x52
2CC8:  CLRF   x53
2CCA:  CLRF   x54
2CCC:  CLRF   x55
2CCE:  CLRF   x56
2CD0:  CLRF   x57
2CD2:  CLRF   x58
2CD4:  CLRF   x59
2CD6:  CLRF   x5A
2CD8:  CLRF   x5B
2CDA:  CLRF   x5C
2CDC:  CLRF   x5D
2CDE:  CLRF   x5E
2CE0:  CLRF   x5F
2CE2:  CLRF   x60
2CE4:  CLRF   x61
2CE6:  CLRF   x62
2CE8:  CLRF   x63
2CEA:  CLRF   x64
2CEC:  CLRF   x65
2CEE:  CLRF   x66
2CF0:  CLRF   x67
2CF2:  CLRF   x68
2CF4:  CLRF   x69
2CF6:  CLRF   x6A
2CF8:  CLRF   x6B
2CFA:  CLRF   x6C
2CFC:  CLRF   x6D
2CFE:  CLRF   x6E
2D00:  CLRF   x6F
2D02:  CLRF   xA4
2D04:  CLRF   xA5
2D06:  CLRF   xA6
2D08:  CLRF   xA7
2D0A:  CLRF   xA8
2D0C:  CLRF   xA9
2D0E:  CLRF   xAA
2D10:  CLRF   xAB
2D12:  CLRF   xAC
2D14:  CLRF   xAD
2D16:  CLRF   xAE
2D18:  CLRF   xAF
2D1A:  CLRF   xB0
2D1C:  CLRF   xB1
2D1E:  CLRF   xB2
2D20:  CLRF   xB3
2D22:  CLRF   xB4
2D24:  CLRF   xB5
2D26:  CLRF   xB6
2D28:  CLRF   xB7
2D2A:  CLRF   xB8
2D2C:  CLRF   xB9
2D2E:  CLRF   xBA
2D30:  CLRF   xBB
2D32:  CLRF   xE3
2D34:  CLRF   xE4
2D36:  CLRF   xE5
2D38:  MOVLB  5
2D3A:  CLRF   x38
2D3C:  CLRF   x39
....................    enable_interrupts(INT_RDA);      //Habilita interrupción por recepción RS23    
2D3E:  BSF    F9D.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2D40:  MOVLW  85
2D42:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2D44:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN3); 
2D46:  MOVF   FC1,W
2D48:  ANDLW  C0
2D4A:  IORLW  0B
2D4C:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2D4E:  BCF    FC0.0
2D50:  BSF    FC0.1
2D52:  BCF    FC0.2
2D54:  BSF    FC0.7
2D56:  BSF    FC2.0
....................    sensores(0); 
2D58:  CLRF   x3A
2D5A:  MOVLB  0
2D5C:  GOTO   1122
....................    output_d(0);    
2D60:  CLRF   F95
2D62:  CLRF   F8C
....................    Testerilizacionp[0]=read_eeprom(0);Testerilizacionp[1]=read_eeprom(1);Testerilizacionp[2]=read_eeprom(2);Testerilizacionp[3]=read_eeprom(3); 
2D64:  MOVFF  FF2,53A
2D68:  BCF    FF2.7
2D6A:  CLRF   FA9
2D6C:  BCF    FA6.6
2D6E:  BCF    FA6.7
2D70:  BSF    FA6.0
2D72:  MOVF   FA8,W
2D74:  MOVLB  5
2D76:  BTFSC  x3A.7
2D78:  BSF    FF2.7
2D7A:  MOVLB  4
2D7C:  MOVWF  xA8
2D7E:  MOVFF  FF2,53A
2D82:  BCF    FF2.7
2D84:  MOVLW  01
2D86:  MOVWF  FA9
2D88:  BCF    FA6.6
2D8A:  BCF    FA6.7
2D8C:  BSF    FA6.0
2D8E:  MOVF   FA8,W
2D90:  MOVLB  5
2D92:  BTFSC  x3A.7
2D94:  BSF    FF2.7
2D96:  MOVLB  4
2D98:  MOVWF  xA9
2D9A:  MOVFF  FF2,53A
2D9E:  BCF    FF2.7
2DA0:  MOVLW  02
2DA2:  MOVWF  FA9
2DA4:  BCF    FA6.6
2DA6:  BCF    FA6.7
2DA8:  BSF    FA6.0
2DAA:  MOVF   FA8,W
2DAC:  MOVLB  5
2DAE:  BTFSC  x3A.7
2DB0:  BSF    FF2.7
2DB2:  MOVLB  4
2DB4:  MOVWF  xAA
2DB6:  MOVFF  FF2,53A
2DBA:  BCF    FF2.7
2DBC:  MOVLW  03
2DBE:  MOVWF  FA9
2DC0:  BCF    FA6.6
2DC2:  BCF    FA6.7
2DC4:  BSF    FA6.0
2DC6:  MOVF   FA8,W
2DC8:  MOVLB  5
2DCA:  BTFSC  x3A.7
2DCC:  BSF    FF2.7
2DCE:  MOVLB  4
2DD0:  MOVWF  xAB
....................    Tsecadop[0]=read_eeprom(4);Tsecadop[1]=read_eeprom(5);Tsecadop[2]=read_eeprom(6);Tsecadop[3]=read_eeprom(7);Setpoint=read_eeprom(8); 
2DD2:  MOVFF  FF2,53A
2DD6:  BCF    FF2.7
2DD8:  MOVLW  04
2DDA:  MOVWF  FA9
2DDC:  BCF    FA6.6
2DDE:  BCF    FA6.7
2DE0:  BSF    FA6.0
2DE2:  MOVF   FA8,W
2DE4:  MOVLB  5
2DE6:  BTFSC  x3A.7
2DE8:  BSF    FF2.7
2DEA:  MOVLB  4
2DEC:  MOVWF  xB0
2DEE:  MOVFF  FF2,53A
2DF2:  BCF    FF2.7
2DF4:  MOVLW  05
2DF6:  MOVWF  FA9
2DF8:  BCF    FA6.6
2DFA:  BCF    FA6.7
2DFC:  BSF    FA6.0
2DFE:  MOVF   FA8,W
2E00:  MOVLB  5
2E02:  BTFSC  x3A.7
2E04:  BSF    FF2.7
2E06:  MOVLB  4
2E08:  MOVWF  xB1
2E0A:  MOVFF  FF2,53A
2E0E:  BCF    FF2.7
2E10:  MOVLW  06
2E12:  MOVWF  FA9
2E14:  BCF    FA6.6
2E16:  BCF    FA6.7
2E18:  BSF    FA6.0
2E1A:  MOVF   FA8,W
2E1C:  MOVLB  5
2E1E:  BTFSC  x3A.7
2E20:  BSF    FF2.7
2E22:  MOVLB  4
2E24:  MOVWF  xB2
2E26:  MOVFF  FF2,53A
2E2A:  BCF    FF2.7
2E2C:  MOVLW  07
2E2E:  MOVWF  FA9
2E30:  BCF    FA6.6
2E32:  BCF    FA6.7
2E34:  BSF    FA6.0
2E36:  MOVF   FA8,W
2E38:  MOVLB  5
2E3A:  BTFSC  x3A.7
2E3C:  BSF    FF2.7
2E3E:  MOVLB  4
2E40:  MOVWF  xB3
2E42:  MOVFF  FF2,53A
2E46:  BCF    FF2.7
2E48:  MOVLW  08
2E4A:  MOVWF  FA9
2E4C:  BCF    FA6.6
2E4E:  BCF    FA6.7
2E50:  BSF    FA6.0
2E52:  MOVF   FA8,W
2E54:  MOVLB  5
2E56:  BTFSC  x3A.7
2E58:  BSF    FF2.7
2E5A:  MOVLB  4
2E5C:  MOVWF  x8E
....................    Nivel=read_eeprom(9); 
2E5E:  MOVFF  FF2,53A
2E62:  BCF    FF2.7
2E64:  MOVLW  09
2E66:  MOVWF  FA9
2E68:  BCF    FA6.6
2E6A:  BCF    FA6.7
2E6C:  BSF    FA6.0
2E6E:  MOVF   FA8,W
2E70:  MOVLB  5
2E72:  BTFSC  x3A.7
2E74:  BSF    FF2.7
2E76:  MOVLB  4
2E78:  CLRF   x9D
2E7A:  MOVWF  x9C
....................    Password[0]=read_eeprom(10);Password[1]=read_eeprom(11);Password[2]=read_eeprom(12);Password[3]=read_eeprom(13); 
2E7C:  MOVFF  FF2,53A
2E80:  BCF    FF2.7
2E82:  MOVLW  0A
2E84:  MOVWF  FA9
2E86:  BCF    FA6.6
2E88:  BCF    FA6.7
2E8A:  BSF    FA6.0
2E8C:  MOVF   FA8,W
2E8E:  MOVLB  5
2E90:  BTFSC  x3A.7
2E92:  BSF    FF2.7
2E94:  MOVLB  4
2E96:  MOVWF  xB8
2E98:  MOVFF  FF2,53A
2E9C:  BCF    FF2.7
2E9E:  MOVLW  0B
2EA0:  MOVWF  FA9
2EA2:  BCF    FA6.6
2EA4:  BCF    FA6.7
2EA6:  BSF    FA6.0
2EA8:  MOVF   FA8,W
2EAA:  MOVLB  5
2EAC:  BTFSC  x3A.7
2EAE:  BSF    FF2.7
2EB0:  MOVLB  4
2EB2:  MOVWF  xB9
2EB4:  MOVFF  FF2,53A
2EB8:  BCF    FF2.7
2EBA:  MOVLW  0C
2EBC:  MOVWF  FA9
2EBE:  BCF    FA6.6
2EC0:  BCF    FA6.7
2EC2:  BSF    FA6.0
2EC4:  MOVF   FA8,W
2EC6:  MOVLB  5
2EC8:  BTFSC  x3A.7
2ECA:  BSF    FF2.7
2ECC:  MOVLB  4
2ECE:  MOVWF  xBA
2ED0:  MOVFF  FF2,53A
2ED4:  BCF    FF2.7
2ED6:  MOVLW  0D
2ED8:  MOVWF  FA9
2EDA:  BCF    FA6.6
2EDC:  BCF    FA6.7
2EDE:  BSF    FA6.0
2EE0:  MOVF   FA8,W
2EE2:  MOVLB  5
2EE4:  BTFSC  x3A.7
2EE6:  BSF    FF2.7
2EE8:  MOVLB  4
2EEA:  MOVWF  xBB
....................    enable_interrupts(global); 
2EEC:  MOVLW  C0
2EEE:  IORWF  FF2,F
....................    //Ganancia=read_eeprom(10);desvio=read_eeprom(11);Tciclo=read_eeprom(12);Ajuste=read_eeprom(13);Ajusten=read_eeprom(14); 
....................    //Ganancia2=read_eeprom(15);Minutos=read_eeprom(20);  
....................     
....................    glcd_init(ON);             //Inicializa la glcd 
2EF0:  MOVLW  01
2EF2:  MOVLB  5
2EF4:  MOVWF  x3A
2EF6:  MOVLB  0
2EF8:  GOTO   12CC
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2EFC:  MOVLB  5
2EFE:  CLRF   x3B
2F00:  MOVLB  0
2F02:  CALL   11BA
....................    strcpy(Menus.Letra,"JP Inglobal"); 
2F06:  MOVLW  05
2F08:  MOVWF  FEA
2F0A:  MOVLW  1A
2F0C:  MOVWF  FE9
2F0E:  MOVFF  FF2,53A
2F12:  BCF    FF2.7
2F14:  MOVLW  00
2F16:  CALL   06E6
2F1A:  TBLRD*-
2F1C:  TBLRD*+
2F1E:  MOVF   FF5,W
2F20:  MOVWF  FEE
2F22:  IORLW  00
2F24:  BNZ   2F1C
2F26:  MOVLB  5
2F28:  BTFSC  x3A.7
2F2A:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,0,0,2);      
2F2C:  MOVLW  05
2F2E:  MOVWF  x3B
2F30:  MOVLW  1A
2F32:  MOVWF  x3A
2F34:  CLRF   x3C
2F36:  CLRF   x3D
2F38:  CLRF   x3E
2F3A:  MOVLW  02
2F3C:  MOVWF  x3F
2F3E:  MOVLB  0
2F40:  CALL   17EA
....................    strcpy(Menus.Letra,"Autoclave Vertical"); 
2F44:  MOVLW  05
2F46:  MOVWF  FEA
2F48:  MOVLW  1A
2F4A:  MOVWF  FE9
2F4C:  MOVFF  FF2,53A
2F50:  BCF    FF2.7
2F52:  MOVLW  00
2F54:  CALL   070C
2F58:  TBLRD*-
2F5A:  TBLRD*+
2F5C:  MOVF   FF5,W
2F5E:  MOVWF  FEE
2F60:  IORLW  00
2F62:  BNZ   2F5A
2F64:  MOVLB  5
2F66:  BTFSC  x3A.7
2F68:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,20,0,1);        
2F6A:  MOVLW  05
2F6C:  MOVWF  x3B
2F6E:  MOVLW  1A
2F70:  MOVWF  x3A
2F72:  CLRF   x3C
2F74:  MOVLW  14
2F76:  MOVWF  x3D
2F78:  CLRF   x3E
2F7A:  MOVLW  01
2F7C:  MOVWF  x3F
2F7E:  MOVLB  0
2F80:  CALL   17EA
....................    strcpy(Menus.Letra," 27 Litros  "); 
2F84:  MOVLW  05
2F86:  MOVWF  FEA
2F88:  MOVLW  1A
2F8A:  MOVWF  FE9
2F8C:  MOVFF  FF2,53A
2F90:  BCF    FF2.7
2F92:  MOVLW  00
2F94:  CALL   073A
2F98:  TBLRD*-
2F9A:  TBLRD*+
2F9C:  MOVF   FF5,W
2F9E:  MOVWF  FEE
2FA0:  IORLW  00
2FA2:  BNZ   2F9A
2FA4:  MOVLB  5
2FA6:  BTFSC  x3A.7
2FA8:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,35,0,2); 
2FAA:  MOVLW  05
2FAC:  MOVWF  x3B
2FAE:  MOVLW  1A
2FB0:  MOVWF  x3A
2FB2:  CLRF   x3C
2FB4:  MOVLW  23
2FB6:  MOVWF  x3D
2FB8:  CLRF   x3E
2FBA:  MOVLW  02
2FBC:  MOVWF  x3F
2FBE:  MOVLB  0
2FC0:  CALL   17EA
....................    delay_ms(1000); 
2FC4:  MOVLW  04
2FC6:  MOVLB  5
2FC8:  MOVWF  x3A
2FCA:  MOVLW  FA
2FCC:  MOVWF  x3F
2FCE:  MOVLB  0
2FD0:  CALL   10C2
2FD4:  MOVLB  5
2FD6:  DECFSZ x3A,F
2FD8:  BRA    2FCA
....................    delay_ms(1000); 
2FDA:  MOVLW  04
2FDC:  MOVWF  x3A
2FDE:  MOVLW  FA
2FE0:  MOVWF  x3F
2FE2:  MOVLB  0
2FE4:  CALL   10C2
2FE8:  MOVLB  5
2FEA:  DECFSZ x3A,F
2FEC:  BRA    2FDE
....................     
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
2FEE:  CLRF   x3B
2FF0:  MOVLB  0
2FF2:  CALL   11BA
....................    displayContrasena(Contrasena[0],20,30,1); 
2FF6:  MOVFF  4B4,53C
2FFA:  MOVLW  14
2FFC:  MOVLB  5
2FFE:  MOVWF  x3D
3000:  MOVLW  1E
3002:  MOVWF  x3E
3004:  MOVLW  01
3006:  MOVWF  x3F
3008:  MOVLB  0
300A:  CALL   1A10
....................    displayContrasena(Contrasena[1],40,30,0); 
300E:  MOVFF  4B5,53C
3012:  MOVLW  28
3014:  MOVLB  5
3016:  MOVWF  x3D
3018:  MOVLW  1E
301A:  MOVWF  x3E
301C:  CLRF   x3F
301E:  MOVLB  0
3020:  CALL   1A10
....................    displayContrasena(Contrasena[2],60,30,0); 
3024:  MOVFF  4B6,53C
3028:  MOVLW  3C
302A:  MOVLB  5
302C:  MOVWF  x3D
302E:  MOVLW  1E
3030:  MOVWF  x3E
3032:  CLRF   x3F
3034:  MOVLB  0
3036:  CALL   1A10
....................    displayContrasena(Contrasena[3],80,30,0); 
303A:  MOVFF  4B7,53C
303E:  MOVLW  50
3040:  MOVLB  5
3042:  MOVWF  x3D
3044:  MOVLW  1E
3046:  MOVWF  x3E
3048:  CLRF   x3F
304A:  MOVLB  0
304C:  CALL   1A10
....................    EnviarCodigo(); 
3050:  CALL   1AD0
....................    delay_ms(500); 
3054:  MOVLW  02
3056:  MOVLB  5
3058:  MOVWF  x3A
305A:  MOVLW  FA
305C:  MOVWF  x3F
305E:  MOVLB  0
3060:  CALL   10C2
3064:  MOVLB  5
3066:  DECFSZ x3A,F
3068:  BRA    305A
....................    Determina(); 
306A:  MOVLB  0
306C:  CALL   1F28
....................    delay_ms(500); 
3070:  MOVLW  02
3072:  MOVLB  5
3074:  MOVWF  x3A
3076:  MOVLW  FA
3078:  MOVWF  x3F
307A:  MOVLB  0
307C:  CALL   10C2
3080:  MOVLB  5
3082:  DECFSZ x3A,F
3084:  BRA    3076
....................    Parada=1; 
3086:  MOVLW  01
3088:  MOVLB  4
308A:  MOVWF  x71
....................    while(true) 
....................    { 
....................       glcd_update(); 
308C:  MOVLB  0
308E:  CALL   1214
....................       if(CadenaRecibida==1) 
3092:  MOVLB  4
3094:  BTFSS  x7D.3
3096:  BRA    30A6
....................       { 
....................          Determina(); 
3098:  MOVLB  0
309A:  CALL   1F28
....................          EnviarCodigo(); 
309E:  CALL   1AD0
....................          CadenaRecibida=0; 
30A2:  MOVLB  4
30A4:  BCF    x7D.3
....................       } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
30A6:  MOVF   x89,F
30A8:  BTFSS  FD8.2
30AA:  BRA    3640
....................        
....................       strcpy(Menus.Letra,"Clave"); 
30AC:  MOVLW  05
30AE:  MOVWF  FEA
30B0:  MOVLW  1A
30B2:  MOVWF  FE9
30B4:  MOVFF  FF2,53A
30B8:  BCF    FF2.7
30BA:  MOVLW  00
30BC:  MOVLB  0
30BE:  CALL   0762
30C2:  TBLRD*-
30C4:  TBLRD*+
30C6:  MOVF   FF5,W
30C8:  MOVWF  FEE
30CA:  IORLW  00
30CC:  BNZ   30C4
30CE:  MOVLB  5
30D0:  BTFSC  x3A.7
30D2:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
30D4:  MOVLW  05
30D6:  MOVWF  x3B
30D8:  MOVLW  1A
30DA:  MOVWF  x3A
30DC:  MOVLW  1E
30DE:  MOVWF  x3C
30E0:  CLRF   x3D
30E2:  MOVLW  01
30E4:  MOVWF  x3E
30E6:  MOVLW  02
30E8:  MOVWF  x3F
30EA:  MOVLB  0
30EC:  CALL   17EA
....................        
....................       if(UP)//Si oprime hacia arriba 
30F0:  BSF    F92.5
30F2:  BTFSS  F80.5
30F4:  BRA    31CC
....................       { 
....................          if(Flanco == 0) 
30F6:  MOVLB  4
30F8:  BTFSC  x7C.0
30FA:  BRA    31CA
....................          { 
....................             Flanco = 1;delay_ms(30); 
30FC:  BSF    x7C.0
30FE:  MOVLW  1E
3100:  MOVLB  5
3102:  MOVWF  x3F
3104:  MOVLB  0
3106:  CALL   10C2
....................             for(i=1;i<=4;i++) 
310A:  MOVLW  01
310C:  MOVLB  4
310E:  MOVWF  x8D
3110:  MOVF   x8D,W
3112:  SUBLW  04
3114:  BNC   31CA
....................             { 
....................                if(unidad==i) 
3116:  MOVF   x8D,W
3118:  SUBWF  x8A,W
311A:  BNZ   3192
....................                { 
....................                   Contrasena[i-1]++; 
311C:  MOVLW  01
311E:  SUBWF  x8D,W
3120:  CLRF   03
3122:  ADDLW  B4
3124:  MOVWF  FE9
3126:  MOVLW  04
3128:  ADDWFC 03,W
312A:  MOVWF  FEA
312C:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
312E:  MOVLW  01
3130:  SUBWF  x8D,W
3132:  CLRF   03
3134:  ADDLW  B4
3136:  MOVWF  FE9
3138:  MOVLW  04
313A:  ADDWFC 03,W
313C:  MOVWF  FEA
313E:  BTFSC  FEF.7
3140:  BRA    315A
3142:  MOVF   FEF,W
3144:  SUBLW  09
3146:  BC    315A
....................                   { 
....................                      Contrasena[i-1]=0; 
3148:  MOVLW  01
314A:  SUBWF  x8D,W
314C:  CLRF   03
314E:  ADDLW  B4
3150:  MOVWF  FE9
3152:  MOVLW  04
3154:  ADDWFC 03,W
3156:  MOVWF  FEA
3158:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
315A:  MOVLW  01
315C:  SUBWF  x8D,W
315E:  CLRF   03
3160:  ADDLW  B4
3162:  MOVWF  FE9
3164:  MOVLW  04
3166:  ADDWFC 03,W
3168:  MOVWF  FEA
316A:  MOVFF  FEF,53A
316E:  MOVF   x8D,W
3170:  MULLW  14
3172:  MOVFF  FF3,53B
3176:  MOVLB  5
3178:  MOVFF  53A,53C
317C:  MOVFF  53B,53D
3180:  MOVLW  1E
3182:  MOVWF  x3E
3184:  MOVLW  01
3186:  MOVWF  x3F
3188:  MOVLB  0
318A:  CALL   1A10
....................                } 
....................                else 
318E:  BRA    31C4
3190:  MOVLB  4
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
3192:  MOVLW  01
3194:  SUBWF  x8D,W
3196:  CLRF   03
3198:  ADDLW  B4
319A:  MOVWF  FE9
319C:  MOVLW  04
319E:  ADDWFC 03,W
31A0:  MOVWF  FEA
31A2:  MOVFF  FEF,53A
31A6:  MOVF   x8D,W
31A8:  MULLW  14
31AA:  MOVFF  FF3,53B
31AE:  MOVLB  5
31B0:  MOVFF  53A,53C
31B4:  MOVFF  53B,53D
31B8:  MOVLW  1E
31BA:  MOVWF  x3E
31BC:  CLRF   x3F
31BE:  MOVLB  0
31C0:  CALL   1A10
....................                } 
....................             } 
31C4:  MOVLB  4
31C6:  INCF   x8D,F
31C8:  BRA    3110
....................          } 
....................       } 
....................          else 
31CA:  BRA    31D0
....................             {Flanco = 0;} 
31CC:  MOVLB  4
31CE:  BCF    x7C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31D0:  BSF    F96.0
31D2:  BTFSS  F84.0
31D4:  BRA    32A8
....................       { 
....................          if(Flanco2 == 0) 
31D6:  BTFSC  x7C.2
31D8:  BRA    32A6
....................             {Flanco2 = 1;delay_ms(30); 
31DA:  BSF    x7C.2
31DC:  MOVLW  1E
31DE:  MOVLB  5
31E0:  MOVWF  x3F
31E2:  MOVLB  0
31E4:  CALL   10C2
....................                for(i=1;i<=4;i++) 
31E8:  MOVLW  01
31EA:  MOVLB  4
31EC:  MOVWF  x8D
31EE:  MOVF   x8D,W
31F0:  SUBLW  04
31F2:  BNC   32A6
....................                { 
....................                   if(unidad==i) 
31F4:  MOVF   x8D,W
31F6:  SUBWF  x8A,W
31F8:  BNZ   326E
....................                   {Contrasena[i-1]--;  
31FA:  MOVLW  01
31FC:  SUBWF  x8D,W
31FE:  CLRF   03
3200:  ADDLW  B4
3202:  MOVWF  FE9
3204:  MOVLW  04
3206:  ADDWFC 03,W
3208:  MOVWF  FEA
320A:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
320C:  MOVLW  01
320E:  SUBWF  x8D,W
3210:  CLRF   03
3212:  ADDLW  B4
3214:  MOVWF  FE9
3216:  MOVLW  04
3218:  ADDWFC 03,W
321A:  MOVWF  FEA
321C:  BTFSC  FEF.7
321E:  BRA    3222
3220:  BRA    3236
....................                         {Contrasena[i-1]=9;} 
3222:  MOVLW  01
3224:  SUBWF  x8D,W
3226:  CLRF   03
3228:  ADDLW  B4
322A:  MOVWF  FE9
322C:  MOVLW  04
322E:  ADDWFC 03,W
3230:  MOVWF  FEA
3232:  MOVLW  09
3234:  MOVWF  FEF
....................                    displayContrasena(Contrasena[i-1],i*20,30,1);} 
3236:  MOVLW  01
3238:  SUBWF  x8D,W
323A:  CLRF   03
323C:  ADDLW  B4
323E:  MOVWF  FE9
3240:  MOVLW  04
3242:  ADDWFC 03,W
3244:  MOVWF  FEA
3246:  MOVFF  FEF,53A
324A:  MOVF   x8D,W
324C:  MULLW  14
324E:  MOVFF  FF3,53B
3252:  MOVLB  5
3254:  MOVFF  53A,53C
3258:  MOVFF  53B,53D
325C:  MOVLW  1E
325E:  MOVWF  x3E
3260:  MOVLW  01
3262:  MOVWF  x3F
3264:  MOVLB  0
3266:  CALL   1A10
....................                   else 
326A:  BRA    32A0
326C:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
326E:  MOVLW  01
3270:  SUBWF  x8D,W
3272:  CLRF   03
3274:  ADDLW  B4
3276:  MOVWF  FE9
3278:  MOVLW  04
327A:  ADDWFC 03,W
327C:  MOVWF  FEA
327E:  MOVFF  FEF,53A
3282:  MOVF   x8D,W
3284:  MULLW  14
3286:  MOVFF  FF3,53B
328A:  MOVLB  5
328C:  MOVFF  53A,53C
3290:  MOVFF  53B,53D
3294:  MOVLW  1E
3296:  MOVWF  x3E
3298:  CLRF   x3F
329A:  MOVLB  0
329C:  CALL   1A10
....................                }       
32A0:  MOVLB  4
32A2:  INCF   x8D,F
32A4:  BRA    31EE
....................             }      
....................       } 
....................          else 
32A6:  BRA    32AA
....................             {Flanco2 = 0;}   
32A8:  BCF    x7C.2
....................              
....................       if(RIGHT)//Si oprime RIGHT 
32AA:  BSF    F96.1
32AC:  BTFSS  F84.1
32AE:  BRA    3348
....................       { 
....................          if(Flanco1 == 0) 
32B0:  BTFSC  x7C.1
32B2:  BRA    3346
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
32B4:  BSF    x7C.1
32B6:  MOVLW  1E
32B8:  MOVLB  5
32BA:  MOVWF  x3F
32BC:  MOVLB  0
32BE:  CALL   10C2
32C2:  MOVLB  4
32C4:  INCF   x8A,F
....................                for(i=1;i<=4;i++) 
32C6:  MOVLW  01
32C8:  MOVWF  x8D
32CA:  MOVF   x8D,W
32CC:  SUBLW  04
32CE:  BNC   3346
....................                { 
....................                   if(unidad==i) 
32D0:  MOVF   x8D,W
32D2:  SUBWF  x8A,W
32D4:  BNZ   330E
....................                   {displayContrasena(Contrasena[i-1],i*20,30,1);} 
32D6:  MOVLW  01
32D8:  SUBWF  x8D,W
32DA:  CLRF   03
32DC:  ADDLW  B4
32DE:  MOVWF  FE9
32E0:  MOVLW  04
32E2:  ADDWFC 03,W
32E4:  MOVWF  FEA
32E6:  MOVFF  FEF,53A
32EA:  MOVF   x8D,W
32EC:  MULLW  14
32EE:  MOVFF  FF3,53B
32F2:  MOVLB  5
32F4:  MOVFF  53A,53C
32F8:  MOVFF  53B,53D
32FC:  MOVLW  1E
32FE:  MOVWF  x3E
3300:  MOVLW  01
3302:  MOVWF  x3F
3304:  MOVLB  0
3306:  CALL   1A10
....................                   else 
330A:  BRA    3340
330C:  MOVLB  4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
330E:  MOVLW  01
3310:  SUBWF  x8D,W
3312:  CLRF   03
3314:  ADDLW  B4
3316:  MOVWF  FE9
3318:  MOVLW  04
331A:  ADDWFC 03,W
331C:  MOVWF  FEA
331E:  MOVFF  FEF,53A
3322:  MOVF   x8D,W
3324:  MULLW  14
3326:  MOVFF  FF3,53B
332A:  MOVLB  5
332C:  MOVFF  53A,53C
3330:  MOVFF  53B,53D
3334:  MOVLW  1E
3336:  MOVWF  x3E
3338:  CLRF   x3F
333A:  MOVLB  0
333C:  CALL   1A10
....................                } 
3340:  MOVLB  4
3342:  INCF   x8D,F
3344:  BRA    32CA
....................             } 
....................       } 
....................          else 
3346:  BRA    334A
....................             {Flanco1 = 0;}   
3348:  BCF    x7C.1
....................      
....................       if(unidad>4) 
334A:  MOVF   x8A,W
334C:  SUBLW  04
334E:  BTFSC  FD8.0
3350:  BRA    3640
....................       {glcd_fillScreen(OFF);unidad=4; 
3352:  MOVLB  5
3354:  CLRF   x3B
3356:  MOVLB  0
3358:  CALL   11BA
335C:  MOVLW  04
335E:  MOVLB  4
3360:  MOVWF  x8A
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
3362:  MOVF   xB4,W
3364:  SUBLW  03
3366:  BNZ   344E
3368:  MOVF   xB5,W
336A:  SUBLW  08
336C:  BNZ   344E
336E:  MOVF   xB6,W
3370:  SUBLW  09
3372:  BNZ   344E
3374:  MOVF   xB7,W
3376:  SUBLW  02
3378:  BNZ   344E
....................             {write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
337A:  MOVLW  0A
337C:  MOVWF  FA9
337E:  CLRF   FA8
3380:  BCF    FA6.6
3382:  BCF    FA6.7
3384:  BSF    FA6.2
3386:  MOVF   FF2,W
3388:  MOVWF  00
338A:  BCF    FF2.7
338C:  MOVLB  F
338E:  MOVLW  55
3390:  MOVWF  FA7
3392:  MOVLW  AA
3394:  MOVWF  FA7
3396:  BSF    FA6.1
3398:  BTFSC  FA6.1
339A:  BRA    3398
339C:  BCF    FA6.2
339E:  MOVF   00,W
33A0:  IORWF  FF2,F
33A2:  MOVLW  14
33A4:  MOVLB  5
33A6:  MOVWF  x3F
33A8:  MOVLB  0
33AA:  CALL   10C2
33AE:  MOVLW  0B
33B0:  MOVWF  FA9
33B2:  CLRF   FA8
33B4:  BCF    FA6.6
33B6:  BCF    FA6.7
33B8:  BSF    FA6.2
33BA:  MOVF   FF2,W
33BC:  MOVWF  00
33BE:  BCF    FF2.7
33C0:  MOVLB  F
33C2:  MOVLW  55
33C4:  MOVWF  FA7
33C6:  MOVLW  AA
33C8:  MOVWF  FA7
33CA:  BSF    FA6.1
33CC:  BTFSC  FA6.1
33CE:  BRA    33CC
33D0:  BCF    FA6.2
33D2:  MOVF   00,W
33D4:  IORWF  FF2,F
33D6:  MOVLW  14
33D8:  MOVLB  5
33DA:  MOVWF  x3F
33DC:  MOVLB  0
33DE:  CALL   10C2
....................              write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
33E2:  MOVLW  0C
33E4:  MOVWF  FA9
33E6:  CLRF   FA8
33E8:  BCF    FA6.6
33EA:  BCF    FA6.7
33EC:  BSF    FA6.2
33EE:  MOVF   FF2,W
33F0:  MOVWF  00
33F2:  BCF    FF2.7
33F4:  MOVLB  F
33F6:  MOVLW  55
33F8:  MOVWF  FA7
33FA:  MOVLW  AA
33FC:  MOVWF  FA7
33FE:  BSF    FA6.1
3400:  BTFSC  FA6.1
3402:  BRA    3400
3404:  BCF    FA6.2
3406:  MOVF   00,W
3408:  IORWF  FF2,F
340A:  MOVLW  14
340C:  MOVLB  5
340E:  MOVWF  x3F
3410:  MOVLB  0
3412:  CALL   10C2
3416:  MOVLW  0D
3418:  MOVWF  FA9
341A:  CLRF   FA8
341C:  BCF    FA6.6
341E:  BCF    FA6.7
3420:  BSF    FA6.2
3422:  MOVF   FF2,W
3424:  MOVWF  00
3426:  BCF    FF2.7
3428:  MOVLB  F
342A:  MOVLW  55
342C:  MOVWF  FA7
342E:  MOVLW  AA
3430:  MOVWF  FA7
3432:  BSF    FA6.1
3434:  BTFSC  FA6.1
3436:  BRA    3434
3438:  BCF    FA6.2
343A:  MOVF   00,W
343C:  IORWF  FF2,F
343E:  MOVLW  14
3440:  MOVLB  5
3442:  MOVWF  x3F
3444:  MOVLB  0
3446:  CALL   10C2
....................              reset_cpu();}         
344A:  RESET
344C:  MOVLB  4
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
344E:  MOVF   xB8,W
3450:  SUBWF  xB4,W
3452:  BNZ   3524
3454:  MOVF   xB9,W
3456:  SUBWF  xB5,W
3458:  BNZ   3524
345A:  MOVF   xBA,W
345C:  SUBWF  xB6,W
345E:  BNZ   3524
3460:  MOVF   xBB,W
3462:  SUBWF  xB7,W
3464:  BNZ   3524
....................          { 
....................             glcd_fillScreen(OFF); 
3466:  MOVLB  5
3468:  CLRF   x3B
346A:  MOVLB  0
346C:  CALL   11BA
....................             strcpy(Menus.Letra,"Clave"); 
3470:  MOVLW  05
3472:  MOVWF  FEA
3474:  MOVLW  1A
3476:  MOVWF  FE9
3478:  MOVFF  FF2,53A
347C:  BCF    FF2.7
347E:  MOVLW  00
3480:  CALL   0762
3484:  TBLRD*-
3486:  TBLRD*+
3488:  MOVF   FF5,W
348A:  MOVWF  FEE
348C:  IORLW  00
348E:  BNZ   3486
3490:  MOVLB  5
3492:  BTFSC  x3A.7
3494:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
3496:  MOVLW  05
3498:  MOVWF  x3B
349A:  MOVLW  1A
349C:  MOVWF  x3A
349E:  MOVLW  1E
34A0:  MOVWF  x3C
34A2:  CLRF   x3D
34A4:  CLRF   x3E
34A6:  MOVLW  02
34A8:  MOVWF  x3F
34AA:  MOVLB  0
34AC:  CALL   17EA
....................             strcpy(Menus.Letra,"Correcta"); 
34B0:  MOVLW  05
34B2:  MOVWF  FEA
34B4:  MOVLW  1A
34B6:  MOVWF  FE9
34B8:  MOVFF  FF2,53A
34BC:  BCF    FF2.7
34BE:  MOVLW  00
34C0:  CALL   0782
34C4:  TBLRD*-
34C6:  TBLRD*+
34C8:  MOVF   FF5,W
34CA:  MOVWF  FEE
34CC:  IORLW  00
34CE:  BNZ   34C6
34D0:  MOVLB  5
34D2:  BTFSC  x3A.7
34D4:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
34D6:  MOVLW  05
34D8:  MOVWF  x3B
34DA:  MOVLW  1A
34DC:  MOVWF  x3A
34DE:  MOVLW  0F
34E0:  MOVWF  x3C
34E2:  MOVLW  1E
34E4:  MOVWF  x3D
34E6:  CLRF   x3E
34E8:  MOVLW  02
34EA:  MOVWF  x3F
34EC:  MOVLB  0
34EE:  CALL   17EA
....................             Menu=1;glcd_update();delay_ms(1000); 
34F2:  MOVLW  01
34F4:  MOVLB  4
34F6:  MOVWF  x89
34F8:  MOVLB  0
34FA:  CALL   1214
34FE:  MOVLW  04
3500:  MOVLB  5
3502:  MOVWF  x3A
3504:  MOVLW  FA
3506:  MOVWF  x3F
3508:  MOVLB  0
350A:  CALL   10C2
350E:  MOVLB  5
3510:  DECFSZ x3A,F
3512:  BRA    3504
....................             glcd_fillScreen(OFF);unidad=1; 
3514:  CLRF   x3B
3516:  MOVLB  0
3518:  CALL   11BA
351C:  MOVLW  01
351E:  MOVLB  4
3520:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
3522:  BRA    3640
....................          { 
....................             glcd_fillScreen(OFF); 
3524:  MOVLB  5
3526:  CLRF   x3B
3528:  MOVLB  0
352A:  CALL   11BA
....................             strcpy(Menus.Letra,"Clave"); 
352E:  MOVLW  05
3530:  MOVWF  FEA
3532:  MOVLW  1A
3534:  MOVWF  FE9
3536:  MOVFF  FF2,53A
353A:  BCF    FF2.7
353C:  MOVLW  00
353E:  CALL   0762
3542:  TBLRD*-
3544:  TBLRD*+
3546:  MOVF   FF5,W
3548:  MOVWF  FEE
354A:  IORLW  00
354C:  BNZ   3544
354E:  MOVLB  5
3550:  BTFSC  x3A.7
3552:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
3554:  MOVLW  05
3556:  MOVWF  x3B
3558:  MOVLW  1A
355A:  MOVWF  x3A
355C:  MOVLW  1E
355E:  MOVWF  x3C
3560:  CLRF   x3D
3562:  CLRF   x3E
3564:  MOVLW  02
3566:  MOVWF  x3F
3568:  MOVLB  0
356A:  CALL   17EA
....................             strcpy(Menus.Letra,"Incorrecta"); 
356E:  MOVLW  05
3570:  MOVWF  FEA
3572:  MOVLW  1A
3574:  MOVWF  FE9
3576:  MOVFF  FF2,53A
357A:  BCF    FF2.7
357C:  MOVLW  00
357E:  CALL   07A6
3582:  TBLRD*-
3584:  TBLRD*+
3586:  MOVF   FF5,W
3588:  MOVWF  FEE
358A:  IORLW  00
358C:  BNZ   3584
358E:  MOVLB  5
3590:  BTFSC  x3A.7
3592:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
3594:  MOVLW  05
3596:  MOVWF  x3B
3598:  MOVLW  1A
359A:  MOVWF  x3A
359C:  CLRF   x3C
359E:  MOVLW  1E
35A0:  MOVWF  x3D
35A2:  CLRF   x3E
35A4:  MOVLW  02
35A6:  MOVWF  x3F
35A8:  MOVLB  0
35AA:  CALL   17EA
....................             Menu=0;glcd_update();delay_ms(1000); 
35AE:  MOVLB  4
35B0:  CLRF   x89
35B2:  MOVLB  0
35B4:  CALL   1214
35B8:  MOVLW  04
35BA:  MOVLB  5
35BC:  MOVWF  x3A
35BE:  MOVLW  FA
35C0:  MOVWF  x3F
35C2:  MOVLB  0
35C4:  CALL   10C2
35C8:  MOVLB  5
35CA:  DECFSZ x3A,F
35CC:  BRA    35BE
....................             glcd_fillScreen(OFF);unidad=1; 
35CE:  CLRF   x3B
35D0:  MOVLB  0
35D2:  CALL   11BA
35D6:  MOVLW  01
35D8:  MOVLB  4
35DA:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
35DC:  CLRF   xB4
35DE:  CLRF   xB5
35E0:  CLRF   xB6
35E2:  CLRF   xB7
....................             displayContrasena(Contrasena[0],20,30,1); 
35E4:  MOVFF  4B4,53C
35E8:  MOVLW  14
35EA:  MOVLB  5
35EC:  MOVWF  x3D
35EE:  MOVLW  1E
35F0:  MOVWF  x3E
35F2:  MOVLW  01
35F4:  MOVWF  x3F
35F6:  MOVLB  0
35F8:  CALL   1A10
....................             displayContrasena(Contrasena[1],40,30,0); 
35FC:  MOVFF  4B5,53C
3600:  MOVLW  28
3602:  MOVLB  5
3604:  MOVWF  x3D
3606:  MOVLW  1E
3608:  MOVWF  x3E
360A:  CLRF   x3F
360C:  MOVLB  0
360E:  CALL   1A10
....................             displayContrasena(Contrasena[2],60,30,0); 
3612:  MOVFF  4B6,53C
3616:  MOVLW  3C
3618:  MOVLB  5
361A:  MOVWF  x3D
361C:  MOVLW  1E
361E:  MOVWF  x3E
3620:  CLRF   x3F
3622:  MOVLB  0
3624:  CALL   1A10
....................             displayContrasena(Contrasena[3],80,30,0); 
3628:  MOVFF  4B7,53C
362C:  MOVLW  50
362E:  MOVLB  5
3630:  MOVWF  x3D
3632:  MOVLW  1E
3634:  MOVWF  x3E
3636:  CLRF   x3F
3638:  MOVLB  0
363A:  CALL   1A10
363E:  MOVLB  4
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1){ //Menu Principal.       
3640:  DECFSZ x89,W
3642:  BRA    3A78
....................        
....................       if(visual==1) 
3644:  BTFSS  x7C.4
3646:  BRA    39FE
....................       { 
....................          if(Opcion>6) 
3648:  MOVF   x90,W
364A:  SUBLW  06
364C:  BC    3652
....................          {Opcion=1;} 
364E:  MOVLW  01
3650:  MOVWF  x90
....................          if(Opcion<1) 
3652:  MOVF   x90,F
3654:  BNZ   365A
....................          {Opcion=6;} 
3656:  MOVLW  06
3658:  MOVWF  x90
....................           
....................          strcpy(Menus.Letra,"Menu Principal"); 
365A:  MOVLW  05
365C:  MOVWF  FEA
365E:  MOVLW  1A
3660:  MOVWF  FE9
3662:  MOVFF  FF2,53A
3666:  BCF    FF2.7
3668:  MOVLW  00
366A:  MOVLB  0
366C:  CALL   07CC
3670:  TBLRD*-
3672:  TBLRD*+
3674:  MOVF   FF5,W
3676:  MOVWF  FEE
3678:  IORLW  00
367A:  BNZ   3672
367C:  MOVLB  5
367E:  BTFSC  x3A.7
3680:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,1); 
3682:  MOVLW  05
3684:  MOVWF  x3B
3686:  MOVLW  1A
3688:  MOVWF  x3A
368A:  MOVLW  1E
368C:  MOVWF  x3C
368E:  CLRF   x3D
3690:  MOVLW  01
3692:  MOVWF  x3E
3694:  MOVWF  x3F
3696:  MOVLB  0
3698:  CALL   17EA
....................        
....................          if(Opcion==1)    
369C:  MOVLB  4
369E:  DECFSZ x90,W
36A0:  BRA    36E8
....................             {strcpy(Menus.Letra,"Preciclo"); 
36A2:  MOVLW  05
36A4:  MOVWF  FEA
36A6:  MOVLW  1A
36A8:  MOVWF  FE9
36AA:  MOVFF  FF2,53A
36AE:  BCF    FF2.7
36B0:  MOVLW  00
36B2:  MOVLB  0
36B4:  CALL   07F6
36B8:  TBLRD*-
36BA:  TBLRD*+
36BC:  MOVF   FF5,W
36BE:  MOVWF  FEE
36C0:  IORLW  00
36C2:  BNZ   36BA
36C4:  MOVLB  5
36C6:  BTFSC  x3A.7
36C8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,1,1);} 
36CA:  MOVLW  05
36CC:  MOVWF  x3B
36CE:  MOVLW  1A
36D0:  MOVWF  x3A
36D2:  CLRF   x3C
36D4:  MOVLW  0A
36D6:  MOVWF  x3D
36D8:  MOVLW  01
36DA:  MOVWF  x3E
36DC:  MOVWF  x3F
36DE:  MOVLB  0
36E0:  CALL   17EA
....................          else 
36E4:  BRA    372A
36E6:  MOVLB  4
....................             {strcpy(Menus.Letra,"Preciclo"); 
36E8:  MOVLW  05
36EA:  MOVWF  FEA
36EC:  MOVLW  1A
36EE:  MOVWF  FE9
36F0:  MOVFF  FF2,53A
36F4:  BCF    FF2.7
36F6:  MOVLW  00
36F8:  MOVLB  0
36FA:  CALL   07F6
36FE:  TBLRD*-
3700:  TBLRD*+
3702:  MOVF   FF5,W
3704:  MOVWF  FEE
3706:  IORLW  00
3708:  BNZ   3700
370A:  MOVLB  5
370C:  BTFSC  x3A.7
370E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,10,0,1);} 
3710:  MOVLW  05
3712:  MOVWF  x3B
3714:  MOVLW  1A
3716:  MOVWF  x3A
3718:  CLRF   x3C
371A:  MOVLW  0A
371C:  MOVWF  x3D
371E:  CLRF   x3E
3720:  MOVLW  01
3722:  MOVWF  x3F
3724:  MOVLB  0
3726:  CALL   17EA
....................           
....................          if(Opcion==2)    
372A:  MOVLB  4
372C:  MOVF   x90,W
372E:  SUBLW  02
3730:  BNZ   3778
....................             {strcpy(Menus.Letra,"Liquidos"); 
3732:  MOVLW  05
3734:  MOVWF  FEA
3736:  MOVLW  1A
3738:  MOVWF  FE9
373A:  MOVFF  FF2,53A
373E:  BCF    FF2.7
3740:  MOVLW  00
3742:  MOVLB  0
3744:  CALL   081A
3748:  TBLRD*-
374A:  TBLRD*+
374C:  MOVF   FF5,W
374E:  MOVWF  FEE
3750:  IORLW  00
3752:  BNZ   374A
3754:  MOVLB  5
3756:  BTFSC  x3A.7
3758:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,1,1);} 
375A:  MOVLW  05
375C:  MOVWF  x3B
375E:  MOVLW  1A
3760:  MOVWF  x3A
3762:  CLRF   x3C
3764:  MOVLW  13
3766:  MOVWF  x3D
3768:  MOVLW  01
376A:  MOVWF  x3E
376C:  MOVWF  x3F
376E:  MOVLB  0
3770:  CALL   17EA
....................          else 
3774:  BRA    37BA
3776:  MOVLB  4
....................             {strcpy(Menus.Letra,"Liquidos"); 
3778:  MOVLW  05
377A:  MOVWF  FEA
377C:  MOVLW  1A
377E:  MOVWF  FE9
3780:  MOVFF  FF2,53A
3784:  BCF    FF2.7
3786:  MOVLW  00
3788:  MOVLB  0
378A:  CALL   081A
378E:  TBLRD*-
3790:  TBLRD*+
3792:  MOVF   FF5,W
3794:  MOVWF  FEE
3796:  IORLW  00
3798:  BNZ   3790
379A:  MOVLB  5
379C:  BTFSC  x3A.7
379E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,19,0,1);}    
37A0:  MOVLW  05
37A2:  MOVWF  x3B
37A4:  MOVLW  1A
37A6:  MOVWF  x3A
37A8:  CLRF   x3C
37AA:  MOVLW  13
37AC:  MOVWF  x3D
37AE:  CLRF   x3E
37B0:  MOVLW  01
37B2:  MOVWF  x3F
37B4:  MOVLB  0
37B6:  CALL   17EA
....................              
....................           if(Opcion==3)    
37BA:  MOVLB  4
37BC:  MOVF   x90,W
37BE:  SUBLW  03
37C0:  BNZ   3808
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
37C2:  MOVLW  05
37C4:  MOVWF  FEA
37C6:  MOVLW  1A
37C8:  MOVWF  FE9
37CA:  MOVFF  FF2,53A
37CE:  BCF    FF2.7
37D0:  MOVLW  00
37D2:  MOVLB  0
37D4:  CALL   083E
37D8:  TBLRD*-
37DA:  TBLRD*+
37DC:  MOVF   FF5,W
37DE:  MOVWF  FEE
37E0:  IORLW  00
37E2:  BNZ   37DA
37E4:  MOVLB  5
37E6:  BTFSC  x3A.7
37E8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,1,1);} 
37EA:  MOVLW  05
37EC:  MOVWF  x3B
37EE:  MOVLW  1A
37F0:  MOVWF  x3A
37F2:  CLRF   x3C
37F4:  MOVLW  1C
37F6:  MOVWF  x3D
37F8:  MOVLW  01
37FA:  MOVWF  x3E
37FC:  MOVWF  x3F
37FE:  MOVLB  0
3800:  CALL   17EA
....................          else 
3804:  BRA    384A
3806:  MOVLB  4
....................             {strcpy(Menus.Letra,"Instrumental Suave"); 
3808:  MOVLW  05
380A:  MOVWF  FEA
380C:  MOVLW  1A
380E:  MOVWF  FE9
3810:  MOVFF  FF2,53A
3814:  BCF    FF2.7
3816:  MOVLW  00
3818:  MOVLB  0
381A:  CALL   083E
381E:  TBLRD*-
3820:  TBLRD*+
3822:  MOVF   FF5,W
3824:  MOVWF  FEE
3826:  IORLW  00
3828:  BNZ   3820
382A:  MOVLB  5
382C:  BTFSC  x3A.7
382E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,28,0,1);} 
3830:  MOVLW  05
3832:  MOVWF  x3B
3834:  MOVLW  1A
3836:  MOVWF  x3A
3838:  CLRF   x3C
383A:  MOVLW  1C
383C:  MOVWF  x3D
383E:  CLRF   x3E
3840:  MOVLW  01
3842:  MOVWF  x3F
3844:  MOVLB  0
3846:  CALL   17EA
....................              
....................          if(Opcion==4)    
384A:  MOVLB  4
384C:  MOVF   x90,W
384E:  SUBLW  04
3850:  BNZ   3898
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
3852:  MOVLW  05
3854:  MOVWF  FEA
3856:  MOVLW  1A
3858:  MOVWF  FE9
385A:  MOVFF  FF2,53A
385E:  BCF    FF2.7
3860:  MOVLW  00
3862:  MOVLB  0
3864:  CALL   086C
3868:  TBLRD*-
386A:  TBLRD*+
386C:  MOVF   FF5,W
386E:  MOVWF  FEE
3870:  IORLW  00
3872:  BNZ   386A
3874:  MOVLB  5
3876:  BTFSC  x3A.7
3878:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,1,1);} 
387A:  MOVLW  05
387C:  MOVWF  x3B
387E:  MOVLW  1A
3880:  MOVWF  x3A
3882:  CLRF   x3C
3884:  MOVLW  25
3886:  MOVWF  x3D
3888:  MOVLW  01
388A:  MOVWF  x3E
388C:  MOVWF  x3F
388E:  MOVLB  0
3890:  CALL   17EA
....................          else 
3894:  BRA    38DA
3896:  MOVLB  4
....................             {strcpy(Menus.Letra,"Textil e Instrumental"); 
3898:  MOVLW  05
389A:  MOVWF  FEA
389C:  MOVLW  1A
389E:  MOVWF  FE9
38A0:  MOVFF  FF2,53A
38A4:  BCF    FF2.7
38A6:  MOVLW  00
38A8:  MOVLB  0
38AA:  CALL   086C
38AE:  TBLRD*-
38B0:  TBLRD*+
38B2:  MOVF   FF5,W
38B4:  MOVWF  FEE
38B6:  IORLW  00
38B8:  BNZ   38B0
38BA:  MOVLB  5
38BC:  BTFSC  x3A.7
38BE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,37,0,1);}    
38C0:  MOVLW  05
38C2:  MOVWF  x3B
38C4:  MOVLW  1A
38C6:  MOVWF  x3A
38C8:  CLRF   x3C
38CA:  MOVLW  25
38CC:  MOVWF  x3D
38CE:  CLRF   x3E
38D0:  MOVLW  01
38D2:  MOVWF  x3F
38D4:  MOVLB  0
38D6:  CALL   17EA
....................              
....................          if(Opcion==5)    
38DA:  MOVLB  4
38DC:  MOVF   x90,W
38DE:  SUBLW  05
38E0:  BNZ   3928
....................             {strcpy(Menus.Letra,"Personalizado"); 
38E2:  MOVLW  05
38E4:  MOVWF  FEA
38E6:  MOVLW  1A
38E8:  MOVWF  FE9
38EA:  MOVFF  FF2,53A
38EE:  BCF    FF2.7
38F0:  MOVLW  00
38F2:  MOVLB  0
38F4:  CALL   089C
38F8:  TBLRD*-
38FA:  TBLRD*+
38FC:  MOVF   FF5,W
38FE:  MOVWF  FEE
3900:  IORLW  00
3902:  BNZ   38FA
3904:  MOVLB  5
3906:  BTFSC  x3A.7
3908:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,1,1);} 
390A:  MOVLW  05
390C:  MOVWF  x3B
390E:  MOVLW  1A
3910:  MOVWF  x3A
3912:  CLRF   x3C
3914:  MOVLW  2E
3916:  MOVWF  x3D
3918:  MOVLW  01
391A:  MOVWF  x3E
391C:  MOVWF  x3F
391E:  MOVLB  0
3920:  CALL   17EA
....................          else 
3924:  BRA    396A
3926:  MOVLB  4
....................             {strcpy(Menus.Letra,"Personalizado"); 
3928:  MOVLW  05
392A:  MOVWF  FEA
392C:  MOVLW  1A
392E:  MOVWF  FE9
3930:  MOVFF  FF2,53A
3934:  BCF    FF2.7
3936:  MOVLW  00
3938:  MOVLB  0
393A:  CALL   089C
393E:  TBLRD*-
3940:  TBLRD*+
3942:  MOVF   FF5,W
3944:  MOVWF  FEE
3946:  IORLW  00
3948:  BNZ   3940
394A:  MOVLB  5
394C:  BTFSC  x3A.7
394E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,46,0,1);}   
3950:  MOVLW  05
3952:  MOVWF  x3B
3954:  MOVLW  1A
3956:  MOVWF  x3A
3958:  CLRF   x3C
395A:  MOVLW  2E
395C:  MOVWF  x3D
395E:  CLRF   x3E
3960:  MOVLW  01
3962:  MOVWF  x3F
3964:  MOVLB  0
3966:  CALL   17EA
....................              
....................          if(Opcion==6)    
396A:  MOVLB  4
396C:  MOVF   x90,W
396E:  SUBLW  06
3970:  BNZ   39B8
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
3972:  MOVLW  05
3974:  MOVWF  FEA
3976:  MOVLW  1A
3978:  MOVWF  FE9
397A:  MOVFF  FF2,53A
397E:  BCF    FF2.7
3980:  MOVLW  00
3982:  MOVLB  0
3984:  CALL   08C4
3988:  TBLRD*-
398A:  TBLRD*+
398C:  MOVF   FF5,W
398E:  MOVWF  FEE
3990:  IORLW  00
3992:  BNZ   398A
3994:  MOVLB  5
3996:  BTFSC  x3A.7
3998:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,1,1);} 
399A:  MOVLW  05
399C:  MOVWF  x3B
399E:  MOVLW  1A
39A0:  MOVWF  x3A
39A2:  CLRF   x3C
39A4:  MOVLW  37
39A6:  MOVWF  x3D
39A8:  MOVLW  01
39AA:  MOVWF  x3E
39AC:  MOVWF  x3F
39AE:  MOVLB  0
39B0:  CALL   17EA
....................          else 
39B4:  BRA    39FA
39B6:  MOVLB  4
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
39B8:  MOVLW  05
39BA:  MOVWF  FEA
39BC:  MOVLW  1A
39BE:  MOVWF  FE9
39C0:  MOVFF  FF2,53A
39C4:  BCF    FF2.7
39C6:  MOVLW  00
39C8:  MOVLB  0
39CA:  CALL   08C4
39CE:  TBLRD*-
39D0:  TBLRD*+
39D2:  MOVF   FF5,W
39D4:  MOVWF  FEE
39D6:  IORLW  00
39D8:  BNZ   39D0
39DA:  MOVLB  5
39DC:  BTFSC  x3A.7
39DE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,0,1);}      
39E0:  MOVLW  05
39E2:  MOVWF  x3B
39E4:  MOVLW  1A
39E6:  MOVWF  x3A
39E8:  CLRF   x3C
39EA:  MOVLW  37
39EC:  MOVWF  x3D
39EE:  CLRF   x3E
39F0:  MOVLW  01
39F2:  MOVWF  x3F
39F4:  MOVLB  0
39F6:  CALL   17EA
....................             visual=0; 
39FA:  MOVLB  4
39FC:  BCF    x7C.4
....................       } 
....................       if(UP)//Si oprime hacia arriba 
39FE:  BSF    F92.5
3A00:  BTFSS  F80.5
3A02:  BRA    3A1E
....................          {  if(Flanco == 0)  
3A04:  BTFSC  x7C.0
3A06:  BRA    3A1C
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
3A08:  BSF    x7C.0
3A0A:  MOVLW  1E
3A0C:  MOVLB  5
3A0E:  MOVWF  x3F
3A10:  MOVLB  0
3A12:  CALL   10C2
3A16:  MOVLB  4
3A18:  DECF   x90,F
3A1A:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A1C:  BRA    3A20
....................                {Flanco = 0;} 
3A1E:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
3A20:  BSF    F96.0
3A22:  BTFSS  F84.0
3A24:  BRA    3A40
....................          {  if(Flanco2 == 0)  
3A26:  BTFSC  x7C.2
3A28:  BRA    3A3E
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
3A2A:  BSF    x7C.2
3A2C:  MOVLW  1E
3A2E:  MOVLB  5
3A30:  MOVWF  x3F
3A32:  MOVLB  0
3A34:  CALL   10C2
3A38:  MOVLB  4
3A3A:  INCF   x90,F
3A3C:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
3A3E:  BRA    3A42
....................                {Flanco2 = 0;}   
3A40:  BCF    x7C.2
....................                 
....................        if(RIGHT)//Si oprime SET 
3A42:  BSF    F96.1
3A44:  BTFSS  F84.1
3A46:  BRA    3A76
....................          {  if(Flanco1 == 0)  
3A48:  BTFSC  x7C.1
3A4A:  BRA    3A74
....................                {Flanco1 = 1;delay_ms(30);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);visual=1; 
3A4C:  BSF    x7C.1
3A4E:  MOVLW  1E
3A50:  MOVLB  5
3A52:  MOVWF  x3F
3A54:  MOVLB  0
3A56:  CALL   10C2
3A5A:  MOVLW  03
3A5C:  MOVLB  4
3A5E:  ADDWF  x90,W
3A60:  MOVWF  x89
3A62:  MOVLW  01
3A64:  MOVWF  x90
3A66:  MOVLB  5
3A68:  CLRF   x3B
3A6A:  MOVLB  0
3A6C:  CALL   11BA
3A70:  MOVLB  4
3A72:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
3A74:  BRA    3A78
....................                {Flanco1 = 0;}   
3A76:  BCF    x7C.1
....................          /*       
....................          if(LEFT)//Si oprime boton de Toma. 
....................          {delay_ms(700);Menu=2;glcd_fillscreen(OFF);}*/ 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
.................... //-Sub-Menus de selección de proceso. 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==4){ // Menu de Pre-ciclo 
3A78:  MOVF   x89,W
3A7A:  SUBLW  04
3A7C:  BTFSS  FD8.2
3A7E:  BRA    3DA4
....................        
....................       if(visual==1) 
3A80:  BTFSS  x7C.4
3A82:  BRA    3BD6
....................       { 
....................          glcd_imagen(2); //Guante 
3A84:  MOVLW  02
3A86:  MOVLB  5
3A88:  MOVWF  x3A
3A8A:  MOVLB  0
3A8C:  CALL   2016
....................          strcpy(Menus.Letra,"Preciclo"); 
3A90:  MOVLW  05
3A92:  MOVWF  FEA
3A94:  MOVLW  1A
3A96:  MOVWF  FE9
3A98:  MOVFF  FF2,53A
3A9C:  BCF    FF2.7
3A9E:  MOVLW  00
3AA0:  CALL   07F6
3AA4:  TBLRD*-
3AA6:  TBLRD*+
3AA8:  MOVF   FF5,W
3AAA:  MOVWF  FEE
3AAC:  IORLW  00
3AAE:  BNZ   3AA6
3AB0:  MOVLB  5
3AB2:  BTFSC  x3A.7
3AB4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3AB6:  MOVLW  05
3AB8:  MOVWF  x3B
3ABA:  MOVLW  1A
3ABC:  MOVWF  x3A
3ABE:  MOVLW  14
3AC0:  MOVWF  x3C
3AC2:  CLRF   x3D
3AC4:  MOVLW  01
3AC6:  MOVWF  x3E
3AC8:  MOVLW  02
3ACA:  MOVWF  x3F
3ACC:  MOVLB  0
3ACE:  CALL   17EA
....................          
....................          strcpy(Menus.Letra,"Preciclo"); 
3AD2:  MOVLW  05
3AD4:  MOVWF  FEA
3AD6:  MOVLW  1A
3AD8:  MOVWF  FE9
3ADA:  MOVFF  FF2,53A
3ADE:  BCF    FF2.7
3AE0:  MOVLW  00
3AE2:  CALL   07F6
3AE6:  TBLRD*-
3AE8:  TBLRD*+
3AEA:  MOVF   FF5,W
3AEC:  MOVWF  FEE
3AEE:  IORLW  00
3AF0:  BNZ   3AE8
3AF2:  MOVLB  5
3AF4:  BTFSC  x3A.7
3AF6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,0,1); 
3AF8:  MOVLW  05
3AFA:  MOVWF  x3B
3AFC:  MOVLW  1A
3AFE:  MOVWF  x3A
3B00:  MOVLW  07
3B02:  MOVWF  x3C
3B04:  MOVLW  37
3B06:  MOVWF  x3D
3B08:  CLRF   x3E
3B0A:  MOVLW  01
3B0C:  MOVWF  x3F
3B0E:  MOVLB  0
3B10:  CALL   17EA
....................           
....................          strcpy(Menus.Letra,"Temperatura:90 C"); 
3B14:  MOVLW  05
3B16:  MOVWF  FEA
3B18:  MOVLW  1A
3B1A:  MOVWF  FE9
3B1C:  MOVFF  FF2,53A
3B20:  BCF    FF2.7
3B22:  MOVLW  00
3B24:  CALL   08EC
3B28:  TBLRD*-
3B2A:  TBLRD*+
3B2C:  MOVF   FF5,W
3B2E:  MOVWF  FEE
3B30:  IORLW  00
3B32:  BNZ   3B2A
3B34:  MOVLB  5
3B36:  BTFSC  x3A.7
3B38:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3B3A:  MOVLW  05
3B3C:  MOVWF  x3B
3B3E:  MOVLW  1A
3B40:  MOVWF  x3A
3B42:  CLRF   x3C
3B44:  MOVWF  x3D
3B46:  CLRF   x3E
3B48:  MOVLW  01
3B4A:  MOVWF  x3F
3B4C:  MOVLB  0
3B4E:  CALL   17EA
....................          strcpy(Menus.Letra,"T. Esterilizacion:5m"); 
3B52:  MOVLW  05
3B54:  MOVWF  FEA
3B56:  MOVLW  1A
3B58:  MOVWF  FE9
3B5A:  MOVFF  FF2,53A
3B5E:  BCF    FF2.7
3B60:  MOVLW  00
3B62:  CALL   0918
3B66:  TBLRD*-
3B68:  TBLRD*+
3B6A:  MOVF   FF5,W
3B6C:  MOVWF  FEE
3B6E:  IORLW  00
3B70:  BNZ   3B68
3B72:  MOVLB  5
3B74:  BTFSC  x3A.7
3B76:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3B78:  MOVLW  05
3B7A:  MOVWF  x3B
3B7C:  MOVLW  1A
3B7E:  MOVWF  x3A
3B80:  CLRF   x3C
3B82:  MOVLW  24
3B84:  MOVWF  x3D
3B86:  CLRF   x3E
3B88:  MOVLW  01
3B8A:  MOVWF  x3F
3B8C:  MOVLB  0
3B8E:  CALL   17EA
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3B92:  MOVLW  05
3B94:  MOVWF  FEA
3B96:  MOVLW  1A
3B98:  MOVWF  FE9
3B9A:  MOVFF  FF2,53A
3B9E:  BCF    FF2.7
3BA0:  MOVLW  00
3BA2:  CALL   0948
3BA6:  TBLRD*-
3BA8:  TBLRD*+
3BAA:  MOVF   FF5,W
3BAC:  MOVWF  FEE
3BAE:  IORLW  00
3BB0:  BNZ   3BA8
3BB2:  MOVLB  5
3BB4:  BTFSC  x3A.7
3BB6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1); 
3BB8:  MOVLW  05
3BBA:  MOVWF  x3B
3BBC:  MOVLW  1A
3BBE:  MOVWF  x3A
3BC0:  CLRF   x3C
3BC2:  MOVLW  2E
3BC4:  MOVWF  x3D
3BC6:  CLRF   x3E
3BC8:  MOVLW  01
3BCA:  MOVWF  x3F
3BCC:  MOVLB  0
3BCE:  CALL   17EA
....................          visual=0; 
3BD2:  MOVLB  4
3BD4:  BCF    x7C.4
....................       } 
....................        
....................       if(LEFT)// Si oprime Izquier|da 
3BD6:  BSF    F96.2
3BD8:  BTFSS  F84.2
3BDA:  BRA    3BFC
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3BDC:  MOVLW  1E
3BDE:  MOVLB  5
3BE0:  MOVWF  x3F
3BE2:  MOVLB  0
3BE4:  CALL   10C2
3BE8:  MOVLW  01
3BEA:  MOVLB  4
3BEC:  MOVWF  x89
3BEE:  MOVLB  5
3BF0:  CLRF   x3B
3BF2:  MOVLB  0
3BF4:  CALL   11BA
3BF8:  MOVLB  4
3BFA:  BSF    x7C.4
....................       } 
....................  
....................       if(RIGHT)// Si oprime derecha 
3BFC:  BSF    F96.1
3BFE:  BTFSS  F84.1
3C00:  BRA    3DA4
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=0;visual=1; 
3C02:  CLRF   xA8
3C04:  CLRF   xA9
3C06:  MOVLW  05
3C08:  MOVWF  xAA
3C0A:  CLRF   xAB
3C0C:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;minutos=0;Setpoint=90;Menu=20; 
3C0E:  CLRF   xB0
3C10:  CLRF   xB1
3C12:  CLRF   xB2
3C14:  CLRF   xB3
3C16:  CLRF   x9B
3C18:  CLRF   x9A
3C1A:  MOVLW  5A
3C1C:  MOVWF  x8E
3C1E:  MOVLW  14
3C20:  MOVWF  x89
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
3C22:  MOVWF  x89
3C24:  MOVLW  0F
3C26:  MOVLB  5
3C28:  MOVWF  x4C
3C2A:  MOVLW  12
3C2C:  MOVWF  x4D
3C2E:  MOVLW  1E
3C30:  MOVWF  x4E
3C32:  MOVLW  35
3C34:  MOVWF  x4F
3C36:  CLRF   x50
3C38:  MOVLW  01
3C3A:  MOVWF  x51
3C3C:  MOVLB  0
3C3E:  CALL   1728
3C42:  MOVLB  4
3C44:  CLRF   x92
3C46:  MOVLW  C0
3C48:  IORWF  FF2,F
3C4A:  MOVLB  5
3C4C:  CLRF   x3B
3C4E:  MOVLB  0
3C50:  CALL   11BA
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
3C54:  MOVLW  05
3C56:  MOVWF  FEA
3C58:  MOVLW  1A
3C5A:  MOVWF  FE9
3C5C:  MOVFF  FF2,53A
3C60:  BCF    FF2.7
3C62:  MOVLW  00
3C64:  CALL   0972
3C68:  TBLRD*-
3C6A:  TBLRD*+
3C6C:  MOVF   FF5,W
3C6E:  MOVWF  FEE
3C70:  IORLW  00
3C72:  BNZ   3C6A
3C74:  MOVLB  5
3C76:  BTFSC  x3A.7
3C78:  BSF    FF2.7
3C7A:  MOVLW  05
3C7C:  MOVWF  x3B
3C7E:  MOVLW  1A
3C80:  MOVWF  x3A
3C82:  CLRF   x3C
3C84:  MOVLW  37
3C86:  MOVWF  x3D
3C88:  MOVLW  02
3C8A:  MOVWF  x3E
3C8C:  MOVLW  01
3C8E:  MOVWF  x3F
3C90:  MOVLB  0
3C92:  CALL   17EA
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
3C96:  MOVLW  0F
3C98:  MOVLB  5
3C9A:  MOVWF  x4C
3C9C:  MOVLW  12
3C9E:  MOVWF  x4D
3CA0:  MOVLW  1E
3CA2:  MOVWF  x4E
3CA4:  MOVLW  35
3CA6:  MOVWF  x4F
3CA8:  CLRF   x50
3CAA:  MOVLW  01
3CAC:  MOVWF  x51
3CAE:  MOVLB  0
3CB0:  CALL   1728
....................          glcd_imagen(5); 
3CB4:  MOVLW  05
3CB6:  MOVLB  5
3CB8:  MOVWF  x3A
3CBA:  MOVLB  0
3CBC:  CALL   2016
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
3CC0:  MOVLW  05
3CC2:  MOVWF  FEA
3CC4:  MOVLW  1A
3CC6:  MOVWF  FE9
3CC8:  MOVFF  FF2,53A
3CCC:  BCF    FF2.7
3CCE:  MOVLW  00
3CD0:  CALL   0998
3CD4:  TBLRD*-
3CD6:  TBLRD*+
3CD8:  MOVF   FF5,W
3CDA:  MOVWF  FEE
3CDC:  IORLW  00
3CDE:  BNZ   3CD6
3CE0:  MOVLB  5
3CE2:  BTFSC  x3A.7
3CE4:  BSF    FF2.7
3CE6:  MOVLW  05
3CE8:  MOVWF  x3B
3CEA:  MOVLW  1A
3CEC:  MOVWF  x3A
3CEE:  CLRF   x3C
3CF0:  CLRF   x3D
3CF2:  MOVLW  02
3CF4:  MOVWF  x3E
3CF6:  MOVLW  01
3CF8:  MOVWF  x3F
3CFA:  MOVLB  0
3CFC:  CALL   17EA
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
3D00:  MOVLW  05
3D02:  MOVWF  FEA
3D04:  MOVLW  1A
3D06:  MOVWF  FE9
3D08:  MOVFF  FF2,53A
3D0C:  BCF    FF2.7
3D0E:  MOVLW  00
3D10:  CALL   09BA
3D14:  TBLRD*-
3D16:  TBLRD*+
3D18:  MOVF   FF5,W
3D1A:  MOVWF  FEE
3D1C:  IORLW  00
3D1E:  BNZ   3D16
3D20:  MOVLB  5
3D22:  BTFSC  x3A.7
3D24:  BSF    FF2.7
3D26:  MOVLW  05
3D28:  MOVWF  x3B
3D2A:  MOVLW  1A
3D2C:  MOVWF  x3A
3D2E:  CLRF   x3C
3D30:  MOVLW  08
3D32:  MOVWF  x3D
3D34:  MOVLW  02
3D36:  MOVWF  x3E
3D38:  MOVLW  01
3D3A:  MOVWF  x3F
3D3C:  MOVLB  0
3D3E:  CALL   17EA
....................          glcd_circle(95,40,2,NO,ON); 
3D42:  MOVLW  5F
3D44:  MOVLB  5
3D46:  MOVWF  x3A
3D48:  MOVLW  28
3D4A:  MOVWF  x3B
3D4C:  MOVLW  02
3D4E:  MOVWF  x3C
3D50:  CLRF   x3D
3D52:  MOVLW  01
3D54:  MOVWF  x3E
3D56:  MOVLB  0
3D58:  CALL   2112
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
3D5C:  MOVLW  05
3D5E:  MOVWF  FEA
3D60:  MOVLW  1A
3D62:  MOVWF  FE9
3D64:  MOVFF  FF2,53A
3D68:  BCF    FF2.7
3D6A:  MOVLW  00
3D6C:  CALL   09DC
3D70:  TBLRD*-
3D72:  TBLRD*+
3D74:  MOVF   FF5,W
3D76:  MOVWF  FEE
3D78:  IORLW  00
3D7A:  BNZ   3D72
3D7C:  MOVLB  5
3D7E:  BTFSC  x3A.7
3D80:  BSF    FF2.7
3D82:  MOVLW  05
3D84:  MOVWF  x3B
3D86:  MOVLW  1A
3D88:  MOVWF  x3A
3D8A:  MOVLW  66
3D8C:  MOVWF  x3C
3D8E:  MOVLW  28
3D90:  MOVWF  x3D
3D92:  MOVLW  02
3D94:  MOVWF  x3E
3D96:  MOVWF  x3F
3D98:  MOVLB  0
3D9A:  CALL   17EA
....................          MuestraTiemposProgramados(); 
3D9E:  CALL   2512
3DA2:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==5){ // Menu de Liquido       
3DA4:  MOVF   x89,W
3DA6:  SUBLW  05
3DA8:  BTFSS  FD8.2
3DAA:  BRA    3F6E
....................        
....................       if(visual==1) 
3DAC:  BTFSS  x7C.4
3DAE:  BRA    3F04
....................       { 
....................          glcd_imagen(4); //ErlenMeyer con Liquido 
3DB0:  MOVLW  04
3DB2:  MOVLB  5
3DB4:  MOVWF  x3A
3DB6:  MOVLB  0
3DB8:  CALL   2016
....................          strcpy(Menus.Letra,"Liquidos"); 
3DBC:  MOVLW  05
3DBE:  MOVWF  FEA
3DC0:  MOVLW  1A
3DC2:  MOVWF  FE9
3DC4:  MOVFF  FF2,53A
3DC8:  BCF    FF2.7
3DCA:  MOVLW  00
3DCC:  CALL   081A
3DD0:  TBLRD*-
3DD2:  TBLRD*+
3DD4:  MOVF   FF5,W
3DD6:  MOVWF  FEE
3DD8:  IORLW  00
3DDA:  BNZ   3DD2
3DDC:  MOVLB  5
3DDE:  BTFSC  x3A.7
3DE0:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,2); 
3DE2:  MOVLW  05
3DE4:  MOVWF  x3B
3DE6:  MOVLW  1A
3DE8:  MOVWF  x3A
3DEA:  MOVLW  14
3DEC:  MOVWF  x3C
3DEE:  CLRF   x3D
3DF0:  MOVLW  01
3DF2:  MOVWF  x3E
3DF4:  MOVLW  02
3DF6:  MOVWF  x3F
3DF8:  MOVLB  0
3DFA:  CALL   17EA
....................        
....................          strcpy(Menus.Letra,"Liquidos"); 
3DFE:  MOVLW  05
3E00:  MOVWF  FEA
3E02:  MOVLW  1A
3E04:  MOVWF  FE9
3E06:  MOVFF  FF2,53A
3E0A:  BCF    FF2.7
3E0C:  MOVLW  00
3E0E:  CALL   081A
3E12:  TBLRD*-
3E14:  TBLRD*+
3E16:  MOVF   FF5,W
3E18:  MOVWF  FEE
3E1A:  IORLW  00
3E1C:  BNZ   3E14
3E1E:  MOVLB  5
3E20:  BTFSC  x3A.7
3E22:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3E24:  MOVLW  05
3E26:  MOVWF  x3B
3E28:  MOVLW  1A
3E2A:  MOVWF  x3A
3E2C:  MOVLW  07
3E2E:  MOVWF  x3C
3E30:  MOVLW  37
3E32:  MOVWF  x3D
3E34:  MOVLW  02
3E36:  MOVWF  x3E
3E38:  MOVLW  01
3E3A:  MOVWF  x3F
3E3C:  MOVLB  0
3E3E:  CALL   17EA
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
3E42:  MOVLW  05
3E44:  MOVWF  FEA
3E46:  MOVLW  1A
3E48:  MOVWF  FE9
3E4A:  MOVFF  FF2,53A
3E4E:  BCF    FF2.7
3E50:  MOVLW  00
3E52:  CALL   09F8
3E56:  TBLRD*-
3E58:  TBLRD*+
3E5A:  MOVF   FF5,W
3E5C:  MOVWF  FEE
3E5E:  IORLW  00
3E60:  BNZ   3E58
3E62:  MOVLB  5
3E64:  BTFSC  x3A.7
3E66:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
3E68:  MOVLW  05
3E6A:  MOVWF  x3B
3E6C:  MOVLW  1A
3E6E:  MOVWF  x3A
3E70:  CLRF   x3C
3E72:  MOVWF  x3D
3E74:  CLRF   x3E
3E76:  MOVLW  01
3E78:  MOVWF  x3F
3E7A:  MOVLB  0
3E7C:  CALL   17EA
....................          strcpy(Menus.Letra,"T. Esterilizacion:20m"); 
3E80:  MOVLW  05
3E82:  MOVWF  FEA
3E84:  MOVLW  1A
3E86:  MOVWF  FE9
3E88:  MOVFF  FF2,53A
3E8C:  BCF    FF2.7
3E8E:  MOVLW  00
3E90:  CALL   0A24
3E94:  TBLRD*-
3E96:  TBLRD*+
3E98:  MOVF   FF5,W
3E9A:  MOVWF  FEE
3E9C:  IORLW  00
3E9E:  BNZ   3E96
3EA0:  MOVLB  5
3EA2:  BTFSC  x3A.7
3EA4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
3EA6:  MOVLW  05
3EA8:  MOVWF  x3B
3EAA:  MOVLW  1A
3EAC:  MOVWF  x3A
3EAE:  CLRF   x3C
3EB0:  MOVLW  24
3EB2:  MOVWF  x3D
3EB4:  CLRF   x3E
3EB6:  MOVLW  01
3EB8:  MOVWF  x3F
3EBA:  MOVLB  0
3EBC:  CALL   17EA
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
3EC0:  MOVLW  05
3EC2:  MOVWF  FEA
3EC4:  MOVLW  1A
3EC6:  MOVWF  FE9
3EC8:  MOVFF  FF2,53A
3ECC:  BCF    FF2.7
3ECE:  MOVLW  00
3ED0:  CALL   0948
3ED4:  TBLRD*-
3ED6:  TBLRD*+
3ED8:  MOVF   FF5,W
3EDA:  MOVWF  FEE
3EDC:  IORLW  00
3EDE:  BNZ   3ED6
3EE0:  MOVLB  5
3EE2:  BTFSC  x3A.7
3EE4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);     
3EE6:  MOVLW  05
3EE8:  MOVWF  x3B
3EEA:  MOVLW  1A
3EEC:  MOVWF  x3A
3EEE:  CLRF   x3C
3EF0:  MOVLW  2E
3EF2:  MOVWF  x3D
3EF4:  CLRF   x3E
3EF6:  MOVLW  01
3EF8:  MOVWF  x3F
3EFA:  MOVLB  0
3EFC:  CALL   17EA
....................          visual=0; 
3F00:  MOVLB  4
3F02:  BCF    x7C.4
....................       }    
....................           
....................       if(LEFT)// Si oprime Izquier|da 
3F04:  BSF    F96.2
3F06:  BTFSS  F84.2
3F08:  BRA    3F2A
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
3F0A:  MOVLW  1E
3F0C:  MOVLB  5
3F0E:  MOVWF  x3F
3F10:  MOVLB  0
3F12:  CALL   10C2
3F16:  MOVLW  01
3F18:  MOVLB  4
3F1A:  MOVWF  x89
3F1C:  MOVLB  5
3F1E:  CLRF   x3B
3F20:  MOVLB  0
3F22:  CALL   11BA
3F26:  MOVLB  4
3F28:  BSF    x7C.4
....................       }                
....................  
....................       if(RIGHT)// Si oprime derecha 
3F2A:  BSF    F96.1
3F2C:  BTFSS  F84.1
3F2E:  BRA    3F6E
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=0;Testerilizacionp[3]=2;desfoguelento=1;visual=1; 
3F30:  CLRF   xA8
3F32:  CLRF   xA9
3F34:  CLRF   xAA
3F36:  MOVLW  02
3F38:  MOVWF  xAB
3F3A:  BSF    x7C.5
3F3C:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
3F3E:  CLRF   xB0
3F40:  CLRF   xB1
3F42:  CLRF   xB2
3F44:  CLRF   xB3
3F46:  MOVLW  79
3F48:  MOVWF  x8E
3F4A:  MOVLW  0E
3F4C:  MOVWF  x89
3F4E:  MOVLW  04
3F50:  MOVLB  5
3F52:  MOVWF  x3A
3F54:  MOVLW  AF
3F56:  MOVWF  x3F
3F58:  MOVLB  0
3F5A:  CALL   10C2
3F5E:  MOVLB  5
3F60:  DECFSZ x3A,F
3F62:  BRA    3F54
3F64:  CLRF   x3B
3F66:  MOVLB  0
3F68:  CALL   11BA
3F6C:  MOVLB  4
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Instrumental Suave      
3F6E:  MOVF   x89,W
3F70:  SUBLW  06
3F72:  BTFSS  FD8.2
3F74:  BRA    4138
....................        
....................       if(visual==1) 
3F76:  BTFSS  x7C.4
3F78:  BRA    40CC
....................       { 
....................          glcd_imagen(3); //Erlen Meyer 
3F7A:  MOVLW  03
3F7C:  MOVLB  5
3F7E:  MOVWF  x3A
3F80:  MOVLB  0
3F82:  CALL   2016
....................           
....................          strcpy(Menus.Letra,"Ins. Suave"); 
3F86:  MOVLW  05
3F88:  MOVWF  FEA
3F8A:  MOVLW  1A
3F8C:  MOVWF  FE9
3F8E:  MOVFF  FF2,53A
3F92:  BCF    FF2.7
3F94:  MOVLW  00
3F96:  CALL   0A54
3F9A:  TBLRD*-
3F9C:  TBLRD*+
3F9E:  MOVF   FF5,W
3FA0:  MOVWF  FEE
3FA2:  IORLW  00
3FA4:  BNZ   3F9C
3FA6:  MOVLB  5
3FA8:  BTFSC  x3A.7
3FAA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
3FAC:  MOVLW  05
3FAE:  MOVWF  x3B
3FB0:  MOVLW  1A
3FB2:  MOVWF  x3A
3FB4:  CLRF   x3C
3FB6:  CLRF   x3D
3FB8:  MOVLW  01
3FBA:  MOVWF  x3E
3FBC:  MOVLW  02
3FBE:  MOVWF  x3F
3FC0:  MOVLB  0
3FC2:  CALL   17EA
....................           
....................          strcpy(Menus.Letra,"Instrumental Suave"); 
3FC6:  MOVLW  05
3FC8:  MOVWF  FEA
3FCA:  MOVLW  1A
3FCC:  MOVWF  FE9
3FCE:  MOVFF  FF2,53A
3FD2:  BCF    FF2.7
3FD4:  MOVLW  00
3FD6:  CALL   083E
3FDA:  TBLRD*-
3FDC:  TBLRD*+
3FDE:  MOVF   FF5,W
3FE0:  MOVWF  FEE
3FE2:  IORLW  00
3FE4:  BNZ   3FDC
3FE6:  MOVLB  5
3FE8:  BTFSC  x3A.7
3FEA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,7,55,2,1); 
3FEC:  MOVLW  05
3FEE:  MOVWF  x3B
3FF0:  MOVLW  1A
3FF2:  MOVWF  x3A
3FF4:  MOVLW  07
3FF6:  MOVWF  x3C
3FF8:  MOVLW  37
3FFA:  MOVWF  x3D
3FFC:  MOVLW  02
3FFE:  MOVWF  x3E
4000:  MOVLW  01
4002:  MOVWF  x3F
4004:  MOVLB  0
4006:  CALL   17EA
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
400A:  MOVLW  05
400C:  MOVWF  FEA
400E:  MOVLW  1A
4010:  MOVWF  FE9
4012:  MOVFF  FF2,53A
4016:  BCF    FF2.7
4018:  MOVLW  00
401A:  CALL   09F8
401E:  TBLRD*-
4020:  TBLRD*+
4022:  MOVF   FF5,W
4024:  MOVWF  FEE
4026:  IORLW  00
4028:  BNZ   4020
402A:  MOVLB  5
402C:  BTFSC  x3A.7
402E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
4030:  MOVLW  05
4032:  MOVWF  x3B
4034:  MOVLW  1A
4036:  MOVWF  x3A
4038:  CLRF   x3C
403A:  MOVWF  x3D
403C:  CLRF   x3E
403E:  MOVLW  01
4040:  MOVWF  x3F
4042:  MOVLB  0
4044:  CALL   17EA
....................          strcpy(Menus.Letra,"T. Esterilizacion:15m"); 
4048:  MOVLW  05
404A:  MOVWF  FEA
404C:  MOVLW  1A
404E:  MOVWF  FE9
4050:  MOVFF  FF2,53A
4054:  BCF    FF2.7
4056:  MOVLW  00
4058:  CALL   0A7A
405C:  TBLRD*-
405E:  TBLRD*+
4060:  MOVF   FF5,W
4062:  MOVWF  FEE
4064:  IORLW  00
4066:  BNZ   405E
4068:  MOVLB  5
406A:  BTFSC  x3A.7
406C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
406E:  MOVLW  05
4070:  MOVWF  x3B
4072:  MOVLW  1A
4074:  MOVWF  x3A
4076:  CLRF   x3C
4078:  MOVLW  24
407A:  MOVWF  x3D
407C:  CLRF   x3E
407E:  MOVLW  01
4080:  MOVWF  x3F
4082:  MOVLB  0
4084:  CALL   17EA
....................          strcpy(Menus.Letra,"T. Secado= N/A"); 
4088:  MOVLW  05
408A:  MOVWF  FEA
408C:  MOVLW  1A
408E:  MOVWF  FE9
4090:  MOVFF  FF2,53A
4094:  BCF    FF2.7
4096:  MOVLW  00
4098:  CALL   0948
409C:  TBLRD*-
409E:  TBLRD*+
40A0:  MOVF   FF5,W
40A2:  MOVWF  FEE
40A4:  IORLW  00
40A6:  BNZ   409E
40A8:  MOVLB  5
40AA:  BTFSC  x3A.7
40AC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
40AE:  MOVLW  05
40B0:  MOVWF  x3B
40B2:  MOVLW  1A
40B4:  MOVWF  x3A
40B6:  CLRF   x3C
40B8:  MOVLW  2E
40BA:  MOVWF  x3D
40BC:  CLRF   x3E
40BE:  MOVLW  01
40C0:  MOVWF  x3F
40C2:  MOVLB  0
40C4:  CALL   17EA
....................          visual=0; 
40C8:  MOVLB  4
40CA:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
40CC:  BSF    F96.2
40CE:  BTFSS  F84.2
40D0:  BRA    40F2
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
40D2:  MOVLW  1E
40D4:  MOVLB  5
40D6:  MOVWF  x3F
40D8:  MOVLB  0
40DA:  CALL   10C2
40DE:  MOVLW  01
40E0:  MOVLB  4
40E2:  MOVWF  x89
40E4:  MOVLB  5
40E6:  CLRF   x3B
40E8:  MOVLB  0
40EA:  CALL   11BA
40EE:  MOVLB  4
40F0:  BSF    x7C.4
....................       }             
....................  
....................       if(RIGHT)// Si oprime derecha 
40F2:  BSF    F96.1
40F4:  BTFSS  F84.1
40F6:  BRA    4138
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=1;desfoguelento=1;visual=1; 
40F8:  CLRF   xA8
40FA:  CLRF   xA9
40FC:  MOVLW  05
40FE:  MOVWF  xAA
4100:  MOVLW  01
4102:  MOVWF  xAB
4104:  BSF    x7C.5
4106:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=0;Setpoint=121;Menu=14;delay_ms(700);glcd_fillScreen(OFF);     
4108:  CLRF   xB0
410A:  CLRF   xB1
410C:  CLRF   xB2
410E:  CLRF   xB3
4110:  MOVLW  79
4112:  MOVWF  x8E
4114:  MOVLW  0E
4116:  MOVWF  x89
4118:  MOVLW  04
411A:  MOVLB  5
411C:  MOVWF  x3A
411E:  MOVLW  AF
4120:  MOVWF  x3F
4122:  MOVLB  0
4124:  CALL   10C2
4128:  MOVLB  5
412A:  DECFSZ x3A,F
412C:  BRA    411E
412E:  CLRF   x3B
4130:  MOVLB  0
4132:  CALL   11BA
4136:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
....................  //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==7){ // Menu de textil e instrumental      
4138:  MOVF   x89,W
413A:  SUBLW  07
413C:  BTFSS  FD8.2
413E:  BRA    447C
....................        
....................       if(visual==1) 
4140:  BTFSS  x7C.4
4142:  BRA    4294
....................       { 
....................          glcd_imagen(1); //Tijeras y Camisa 
4144:  MOVLW  01
4146:  MOVLB  5
4148:  MOVWF  x3A
414A:  MOVLB  0
414C:  CALL   2016
....................          strcpy(Menus.Letra,"Tex & Ins"); 
4150:  MOVLW  05
4152:  MOVWF  FEA
4154:  MOVLW  1A
4156:  MOVWF  FE9
4158:  MOVFF  FF2,53A
415C:  BCF    FF2.7
415E:  MOVLW  00
4160:  CALL   0AAA
4164:  TBLRD*-
4166:  TBLRD*+
4168:  MOVF   FF5,W
416A:  MOVWF  FEE
416C:  IORLW  00
416E:  BNZ   4166
4170:  MOVLB  5
4172:  BTFSC  x3A.7
4174:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
4176:  MOVLW  05
4178:  MOVWF  x3B
417A:  MOVLW  1A
417C:  MOVWF  x3A
417E:  CLRF   x3C
4180:  CLRF   x3D
4182:  MOVLW  01
4184:  MOVWF  x3E
4186:  MOVLW  02
4188:  MOVWF  x3F
418A:  MOVLB  0
418C:  CALL   17EA
....................        
....................          strcpy(Menus.Letra,"Textil e Instrumental"); 
4190:  MOVLW  05
4192:  MOVWF  FEA
4194:  MOVLW  1A
4196:  MOVWF  FE9
4198:  MOVFF  FF2,53A
419C:  BCF    FF2.7
419E:  MOVLW  00
41A0:  CALL   086C
41A4:  TBLRD*-
41A6:  TBLRD*+
41A8:  MOVF   FF5,W
41AA:  MOVWF  FEE
41AC:  IORLW  00
41AE:  BNZ   41A6
41B0:  MOVLB  5
41B2:  BTFSC  x3A.7
41B4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
41B6:  MOVLW  05
41B8:  MOVWF  x3B
41BA:  MOVLW  1A
41BC:  MOVWF  x3A
41BE:  CLRF   x3C
41C0:  MOVLW  37
41C2:  MOVWF  x3D
41C4:  MOVLW  02
41C6:  MOVWF  x3E
41C8:  MOVLW  01
41CA:  MOVWF  x3F
41CC:  MOVLB  0
41CE:  CALL   17EA
....................           
....................          strcpy(Menus.Letra,"Temperatura:121 C"); 
41D2:  MOVLW  05
41D4:  MOVWF  FEA
41D6:  MOVLW  1A
41D8:  MOVWF  FE9
41DA:  MOVFF  FF2,53A
41DE:  BCF    FF2.7
41E0:  MOVLW  00
41E2:  CALL   09F8
41E6:  TBLRD*-
41E8:  TBLRD*+
41EA:  MOVF   FF5,W
41EC:  MOVWF  FEE
41EE:  IORLW  00
41F0:  BNZ   41E8
41F2:  MOVLB  5
41F4:  BTFSC  x3A.7
41F6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,26,0,1); 
41F8:  MOVLW  05
41FA:  MOVWF  x3B
41FC:  MOVLW  1A
41FE:  MOVWF  x3A
4200:  CLRF   x3C
4202:  MOVWF  x3D
4204:  CLRF   x3E
4206:  MOVLW  01
4208:  MOVWF  x3F
420A:  MOVLB  0
420C:  CALL   17EA
....................          strcpy(Menus.Letra,"T. Esterilizacion:25m"); 
4210:  MOVLW  05
4212:  MOVWF  FEA
4214:  MOVLW  1A
4216:  MOVWF  FE9
4218:  MOVFF  FF2,53A
421C:  BCF    FF2.7
421E:  MOVLW  00
4220:  CALL   0ACE
4224:  TBLRD*-
4226:  TBLRD*+
4228:  MOVF   FF5,W
422A:  MOVWF  FEE
422C:  IORLW  00
422E:  BNZ   4226
4230:  MOVLB  5
4232:  BTFSC  x3A.7
4234:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1); 
4236:  MOVLW  05
4238:  MOVWF  x3B
423A:  MOVLW  1A
423C:  MOVWF  x3A
423E:  CLRF   x3C
4240:  MOVLW  24
4242:  MOVWF  x3D
4244:  CLRF   x3E
4246:  MOVLW  01
4248:  MOVWF  x3F
424A:  MOVLB  0
424C:  CALL   17EA
....................          strcpy(Menus.Letra,"T. Secado= 10m"); 
4250:  MOVLW  05
4252:  MOVWF  FEA
4254:  MOVLW  1A
4256:  MOVWF  FE9
4258:  MOVFF  FF2,53A
425C:  BCF    FF2.7
425E:  MOVLW  00
4260:  CALL   0AFE
4264:  TBLRD*-
4266:  TBLRD*+
4268:  MOVF   FF5,W
426A:  MOVWF  FEE
426C:  IORLW  00
426E:  BNZ   4266
4270:  MOVLB  5
4272:  BTFSC  x3A.7
4274:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,46,0,1);            
4276:  MOVLW  05
4278:  MOVWF  x3B
427A:  MOVLW  1A
427C:  MOVWF  x3A
427E:  CLRF   x3C
4280:  MOVLW  2E
4282:  MOVWF  x3D
4284:  CLRF   x3E
4286:  MOVLW  01
4288:  MOVWF  x3F
428A:  MOVLB  0
428C:  CALL   17EA
....................          visual=0; 
4290:  MOVLB  4
4292:  BCF    x7C.4
....................       } 
....................  
....................       if(LEFT)// Si oprime Izquier|da 
4294:  BSF    F96.2
4296:  BTFSS  F84.2
4298:  BRA    42BA
....................       {  
....................          delay_ms(30);Menu=1;glcd_fillScreen(OFF);visual=1; 
429A:  MOVLW  1E
429C:  MOVLB  5
429E:  MOVWF  x3F
42A0:  MOVLB  0
42A2:  CALL   10C2
42A6:  MOVLW  01
42A8:  MOVLB  4
42AA:  MOVWF  x89
42AC:  MOVLB  5
42AE:  CLRF   x3B
42B0:  MOVLB  0
42B2:  CALL   11BA
42B6:  MOVLB  4
42B8:  BSF    x7C.4
....................       }                  
....................  
....................       if(RIGHT)// Si oprime derecha 
42BA:  BSF    F96.1
42BC:  BTFSS  F84.1
42BE:  BRA    447C
....................       { 
....................          Testerilizacionp[0]=0;Testerilizacionp[1]=0;Testerilizacionp[2]=5;Testerilizacionp[3]=2;visual=1; 
42C0:  CLRF   xA8
42C2:  CLRF   xA9
42C4:  MOVLW  05
42C6:  MOVWF  xAA
42C8:  MOVLW  02
42CA:  MOVWF  xAB
42CC:  BSF    x7C.4
....................          Tsecadop[0]=0;Tsecadop[1]=0;Tsecadop[2]=0;Tsecadop[3]=1;Setpoint=121;Menu=20;delay_ms(700); 
42CE:  CLRF   xB0
42D0:  CLRF   xB1
42D2:  CLRF   xB2
42D4:  MOVLW  01
42D6:  MOVWF  xB3
42D8:  MOVLW  79
42DA:  MOVWF  x8E
42DC:  MOVLW  14
42DE:  MOVWF  x89
42E0:  MOVLW  04
42E2:  MOVLB  5
42E4:  MOVWF  x3A
42E6:  MOVLW  AF
42E8:  MOVWF  x3F
42EA:  MOVLB  0
42EC:  CALL   10C2
42F0:  MOVLB  5
42F2:  DECFSZ x3A,F
42F4:  BRA    42E6
....................          Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
42F6:  MOVLW  14
42F8:  MOVLB  4
42FA:  MOVWF  x89
42FC:  MOVLW  0F
42FE:  MOVLB  5
4300:  MOVWF  x4C
4302:  MOVLW  12
4304:  MOVWF  x4D
4306:  MOVLW  1E
4308:  MOVWF  x4E
430A:  MOVLW  35
430C:  MOVWF  x4F
430E:  CLRF   x50
4310:  MOVLW  01
4312:  MOVWF  x51
4314:  MOVLB  0
4316:  CALL   1728
431A:  MOVLB  4
431C:  CLRF   x92
431E:  MOVLW  C0
4320:  IORWF  FF2,F
4322:  MOVLB  5
4324:  CLRF   x3B
4326:  MOVLB  0
4328:  CALL   11BA
....................          strcpy(Menus.Letra,"Calentando"); 
432C:  MOVLW  05
432E:  MOVWF  FEA
4330:  MOVLW  1A
4332:  MOVWF  FE9
4334:  MOVFF  FF2,53A
4338:  BCF    FF2.7
433A:  MOVLW  00
433C:  CALL   0972
4340:  TBLRD*-
4342:  TBLRD*+
4344:  MOVF   FF5,W
4346:  MOVWF  FEE
4348:  IORLW  00
434A:  BNZ   4342
434C:  MOVLB  5
434E:  BTFSC  x3A.7
4350:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
4352:  MOVLW  05
4354:  MOVWF  x3B
4356:  MOVLW  1A
4358:  MOVWF  x3A
435A:  CLRF   x3C
435C:  MOVLW  37
435E:  MOVWF  x3D
4360:  MOVLW  02
4362:  MOVWF  x3E
4364:  MOVLW  01
4366:  MOVWF  x3F
4368:  MOVLB  0
436A:  CALL   17EA
....................          glcd_rect(15, 18, 30, 53, NO, ON); 
436E:  MOVLW  0F
4370:  MOVLB  5
4372:  MOVWF  x4C
4374:  MOVLW  12
4376:  MOVWF  x4D
4378:  MOVLW  1E
437A:  MOVWF  x4E
437C:  MOVLW  35
437E:  MOVWF  x4F
4380:  CLRF   x50
4382:  MOVLW  01
4384:  MOVWF  x51
4386:  MOVLB  0
4388:  CALL   1728
....................          glcd_imagen(5); 
438C:  MOVLW  05
438E:  MOVLB  5
4390:  MOVWF  x3A
4392:  MOVLB  0
4394:  CALL   2016
....................          strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
4398:  MOVLW  05
439A:  MOVWF  FEA
439C:  MOVLW  1A
439E:  MOVWF  FE9
43A0:  MOVFF  FF2,53A
43A4:  BCF    FF2.7
43A6:  MOVLW  00
43A8:  CALL   0998
43AC:  TBLRD*-
43AE:  TBLRD*+
43B0:  MOVF   FF5,W
43B2:  MOVWF  FEE
43B4:  IORLW  00
43B6:  BNZ   43AE
43B8:  MOVLB  5
43BA:  BTFSC  x3A.7
43BC:  BSF    FF2.7
43BE:  MOVLW  05
43C0:  MOVWF  x3B
43C2:  MOVLW  1A
43C4:  MOVWF  x3A
43C6:  CLRF   x3C
43C8:  CLRF   x3D
43CA:  MOVLW  02
43CC:  MOVWF  x3E
43CE:  MOVLW  01
43D0:  MOVWF  x3F
43D2:  MOVLB  0
43D4:  CALL   17EA
....................          strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
43D8:  MOVLW  05
43DA:  MOVWF  FEA
43DC:  MOVLW  1A
43DE:  MOVWF  FE9
43E0:  MOVFF  FF2,53A
43E4:  BCF    FF2.7
43E6:  MOVLW  00
43E8:  CALL   09BA
43EC:  TBLRD*-
43EE:  TBLRD*+
43F0:  MOVF   FF5,W
43F2:  MOVWF  FEE
43F4:  IORLW  00
43F6:  BNZ   43EE
43F8:  MOVLB  5
43FA:  BTFSC  x3A.7
43FC:  BSF    FF2.7
43FE:  MOVLW  05
4400:  MOVWF  x3B
4402:  MOVLW  1A
4404:  MOVWF  x3A
4406:  CLRF   x3C
4408:  MOVLW  08
440A:  MOVWF  x3D
440C:  MOVLW  02
440E:  MOVWF  x3E
4410:  MOVLW  01
4412:  MOVWF  x3F
4414:  MOVLB  0
4416:  CALL   17EA
....................          glcd_circle(95,40,2,NO,ON); 
441A:  MOVLW  5F
441C:  MOVLB  5
441E:  MOVWF  x3A
4420:  MOVLW  28
4422:  MOVWF  x3B
4424:  MOVLW  02
4426:  MOVWF  x3C
4428:  CLRF   x3D
442A:  MOVLW  01
442C:  MOVWF  x3E
442E:  MOVLB  0
4430:  CALL   2112
....................          strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
4434:  MOVLW  05
4436:  MOVWF  FEA
4438:  MOVLW  1A
443A:  MOVWF  FE9
443C:  MOVFF  FF2,53A
4440:  BCF    FF2.7
4442:  MOVLW  00
4444:  CALL   09DC
4448:  TBLRD*-
444A:  TBLRD*+
444C:  MOVF   FF5,W
444E:  MOVWF  FEE
4450:  IORLW  00
4452:  BNZ   444A
4454:  MOVLB  5
4456:  BTFSC  x3A.7
4458:  BSF    FF2.7
445A:  MOVLW  05
445C:  MOVWF  x3B
445E:  MOVLW  1A
4460:  MOVWF  x3A
4462:  MOVLW  66
4464:  MOVWF  x3C
4466:  MOVLW  28
4468:  MOVWF  x3D
446A:  MOVLW  02
446C:  MOVWF  x3E
446E:  MOVWF  x3F
4470:  MOVLB  0
4472:  CALL   17EA
....................          MuestraTiemposProgramados(); 
4476:  CALL   2512
447A:  MOVLB  4
....................       } 
....................      
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
.................... // Testerilizacionp[3]<,Tsecadop[3]<,Setpoint 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==8){ // Menu de Proceso Personalizado 
447C:  MOVF   x89,W
447E:  SUBLW  08
4480:  BTFSS  FD8.2
4482:  BRA    4860
....................          
....................          if(visual==1) 
4484:  BTFSS  x7C.4
4486:  BRA    47AC
....................          { 
....................             if(Opcion>5) 
4488:  MOVF   x90,W
448A:  SUBLW  05
448C:  BC    4492
....................             {Opcion=1;} 
448E:  MOVLW  01
4490:  MOVWF  x90
....................             if(Opcion<1) 
4492:  MOVF   x90,F
4494:  BNZ   449A
....................             {Opcion=5;} 
4496:  MOVLW  05
4498:  MOVWF  x90
....................              
....................             strcpy(Menus.Letra,"Proceso Personalizado"); 
449A:  MOVLW  05
449C:  MOVWF  FEA
449E:  MOVLW  1A
44A0:  MOVWF  FE9
44A2:  MOVFF  FF2,53A
44A6:  BCF    FF2.7
44A8:  MOVLW  00
44AA:  MOVLB  0
44AC:  CALL   0B28
44B0:  TBLRD*-
44B2:  TBLRD*+
44B4:  MOVF   FF5,W
44B6:  MOVWF  FEE
44B8:  IORLW  00
44BA:  BNZ   44B2
44BC:  MOVLB  5
44BE:  BTFSC  x3A.7
44C0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1); 
44C2:  MOVLW  05
44C4:  MOVWF  x3B
44C6:  MOVLW  1A
44C8:  MOVWF  x3A
44CA:  CLRF   x3C
44CC:  CLRF   x3D
44CE:  MOVLW  01
44D0:  MOVWF  x3E
44D2:  MOVWF  x3F
44D4:  MOVLB  0
44D6:  CALL   17EA
....................        
....................             if(Opcion==1)    
44DA:  MOVLB  4
44DC:  DECFSZ x90,W
44DE:  BRA    4526
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
44E0:  MOVLW  05
44E2:  MOVWF  FEA
44E4:  MOVLW  1A
44E6:  MOVWF  FE9
44E8:  MOVFF  FF2,53A
44EC:  BCF    FF2.7
44EE:  MOVLW  00
44F0:  MOVLB  0
44F2:  CALL   0B58
44F6:  TBLRD*-
44F8:  TBLRD*+
44FA:  MOVF   FF5,W
44FC:  MOVWF  FEE
44FE:  IORLW  00
4500:  BNZ   44F8
4502:  MOVLB  5
4504:  BTFSC  x3A.7
4506:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,1,1);} 
4508:  MOVLW  05
450A:  MOVWF  x3B
450C:  MOVLW  1A
450E:  MOVWF  x3A
4510:  CLRF   x3C
4512:  MOVLW  0A
4514:  MOVWF  x3D
4516:  MOVLW  01
4518:  MOVWF  x3E
451A:  MOVWF  x3F
451C:  MOVLB  0
451E:  CALL   17EA
....................             else 
4522:  BRA    4568
4524:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Esterilizacion"); 
4526:  MOVLW  05
4528:  MOVWF  FEA
452A:  MOVLW  1A
452C:  MOVWF  FE9
452E:  MOVFF  FF2,53A
4532:  BCF    FF2.7
4534:  MOVLW  00
4536:  MOVLB  0
4538:  CALL   0B58
453C:  TBLRD*-
453E:  TBLRD*+
4540:  MOVF   FF5,W
4542:  MOVWF  FEE
4544:  IORLW  00
4546:  BNZ   453E
4548:  MOVLB  5
454A:  BTFSC  x3A.7
454C:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,10,0,1);} 
454E:  MOVLW  05
4550:  MOVWF  x3B
4552:  MOVLW  1A
4554:  MOVWF  x3A
4556:  CLRF   x3C
4558:  MOVLW  0A
455A:  MOVWF  x3D
455C:  CLRF   x3E
455E:  MOVLW  01
4560:  MOVWF  x3F
4562:  MOVLB  0
4564:  CALL   17EA
....................              
....................             if(Opcion==2)    
4568:  MOVLB  4
456A:  MOVF   x90,W
456C:  SUBLW  02
456E:  BNZ   45B6
....................                {strcpy(Menus.Letra,"T. Secado"); 
4570:  MOVLW  05
4572:  MOVWF  FEA
4574:  MOVLW  1A
4576:  MOVWF  FE9
4578:  MOVFF  FF2,53A
457C:  BCF    FF2.7
457E:  MOVLW  00
4580:  MOVLB  0
4582:  CALL   0B84
4586:  TBLRD*-
4588:  TBLRD*+
458A:  MOVF   FF5,W
458C:  MOVWF  FEE
458E:  IORLW  00
4590:  BNZ   4588
4592:  MOVLB  5
4594:  BTFSC  x3A.7
4596:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,1,1);} 
4598:  MOVLW  05
459A:  MOVWF  x3B
459C:  MOVLW  1A
459E:  MOVWF  x3A
45A0:  CLRF   x3C
45A2:  MOVLW  14
45A4:  MOVWF  x3D
45A6:  MOVLW  01
45A8:  MOVWF  x3E
45AA:  MOVWF  x3F
45AC:  MOVLB  0
45AE:  CALL   17EA
....................             else 
45B2:  BRA    45F8
45B4:  MOVLB  4
....................                {strcpy(Menus.Letra,"T. Secado"); 
45B6:  MOVLW  05
45B8:  MOVWF  FEA
45BA:  MOVLW  1A
45BC:  MOVWF  FE9
45BE:  MOVFF  FF2,53A
45C2:  BCF    FF2.7
45C4:  MOVLW  00
45C6:  MOVLB  0
45C8:  CALL   0B84
45CC:  TBLRD*-
45CE:  TBLRD*+
45D0:  MOVF   FF5,W
45D2:  MOVWF  FEE
45D4:  IORLW  00
45D6:  BNZ   45CE
45D8:  MOVLB  5
45DA:  BTFSC  x3A.7
45DC:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,20,0,1);}    
45DE:  MOVLW  05
45E0:  MOVWF  x3B
45E2:  MOVLW  1A
45E4:  MOVWF  x3A
45E6:  CLRF   x3C
45E8:  MOVLW  14
45EA:  MOVWF  x3D
45EC:  CLRF   x3E
45EE:  MOVLW  01
45F0:  MOVWF  x3F
45F2:  MOVLB  0
45F4:  CALL   17EA
....................                 
....................              if(Opcion==3)    
45F8:  MOVLB  4
45FA:  MOVF   x90,W
45FC:  SUBLW  03
45FE:  BNZ   4646
....................                {strcpy(Menus.Letra,"Temperatura"); 
4600:  MOVLW  05
4602:  MOVWF  FEA
4604:  MOVLW  1A
4606:  MOVWF  FE9
4608:  MOVFF  FF2,53A
460C:  BCF    FF2.7
460E:  MOVLW  00
4610:  MOVLB  0
4612:  CALL   0BA8
4616:  TBLRD*-
4618:  TBLRD*+
461A:  MOVF   FF5,W
461C:  MOVWF  FEE
461E:  IORLW  00
4620:  BNZ   4618
4622:  MOVLB  5
4624:  BTFSC  x3A.7
4626:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,1,1);} 
4628:  MOVLW  05
462A:  MOVWF  x3B
462C:  MOVLW  1A
462E:  MOVWF  x3A
4630:  CLRF   x3C
4632:  MOVLW  1E
4634:  MOVWF  x3D
4636:  MOVLW  01
4638:  MOVWF  x3E
463A:  MOVWF  x3F
463C:  MOVLB  0
463E:  CALL   17EA
....................             else 
4642:  BRA    4688
4644:  MOVLB  4
....................                {strcpy(Menus.Letra,"Temperatura"); 
4646:  MOVLW  05
4648:  MOVWF  FEA
464A:  MOVLW  1A
464C:  MOVWF  FE9
464E:  MOVFF  FF2,53A
4652:  BCF    FF2.7
4654:  MOVLW  00
4656:  MOVLB  0
4658:  CALL   0BA8
465C:  TBLRD*-
465E:  TBLRD*+
4660:  MOVF   FF5,W
4662:  MOVWF  FEE
4664:  IORLW  00
4666:  BNZ   465E
4668:  MOVLB  5
466A:  BTFSC  x3A.7
466C:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,30,0,1);} 
466E:  MOVLW  05
4670:  MOVWF  x3B
4672:  MOVLW  1A
4674:  MOVWF  x3A
4676:  CLRF   x3C
4678:  MOVLW  1E
467A:  MOVWF  x3D
467C:  CLRF   x3E
467E:  MOVLW  01
4680:  MOVWF  x3F
4682:  MOVLB  0
4684:  CALL   17EA
....................                 
....................             if(Opcion==4)    
4688:  MOVLB  4
468A:  MOVF   x90,W
468C:  SUBLW  04
468E:  BNZ   46D6
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
4690:  MOVLW  05
4692:  MOVWF  FEA
4694:  MOVLW  1A
4696:  MOVWF  FE9
4698:  MOVFF  FF2,53A
469C:  BCF    FF2.7
469E:  MOVLW  00
46A0:  MOVLB  0
46A2:  CALL   0BCE
46A6:  TBLRD*-
46A8:  TBLRD*+
46AA:  MOVF   FF5,W
46AC:  MOVWF  FEE
46AE:  IORLW  00
46B0:  BNZ   46A8
46B2:  MOVLB  5
46B4:  BTFSC  x3A.7
46B6:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,1,1);} 
46B8:  MOVLW  05
46BA:  MOVWF  x3B
46BC:  MOVLW  1A
46BE:  MOVWF  x3A
46C0:  CLRF   x3C
46C2:  MOVLW  28
46C4:  MOVWF  x3D
46C6:  MOVLW  01
46C8:  MOVWF  x3E
46CA:  MOVWF  x3F
46CC:  MOVLB  0
46CE:  CALL   17EA
....................             else 
46D2:  BRA    4718
46D4:  MOVLB  4
....................                {strcpy(Menus.Letra,"Nivel de desfogue"); 
46D6:  MOVLW  05
46D8:  MOVWF  FEA
46DA:  MOVLW  1A
46DC:  MOVWF  FE9
46DE:  MOVFF  FF2,53A
46E2:  BCF    FF2.7
46E4:  MOVLW  00
46E6:  MOVLB  0
46E8:  CALL   0BCE
46EC:  TBLRD*-
46EE:  TBLRD*+
46F0:  MOVF   FF5,W
46F2:  MOVWF  FEE
46F4:  IORLW  00
46F6:  BNZ   46EE
46F8:  MOVLB  5
46FA:  BTFSC  x3A.7
46FC:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,40,0,1);}    
46FE:  MOVLW  05
4700:  MOVWF  x3B
4702:  MOVLW  1A
4704:  MOVWF  x3A
4706:  CLRF   x3C
4708:  MOVLW  28
470A:  MOVWF  x3D
470C:  CLRF   x3E
470E:  MOVLW  01
4710:  MOVWF  x3F
4712:  MOVLB  0
4714:  CALL   17EA
....................                 
....................             if(Opcion==5)    
4718:  MOVLB  4
471A:  MOVF   x90,W
471C:  SUBLW  05
471E:  BNZ   4766
....................                {strcpy(Menus.Letra,"Continuar"); 
4720:  MOVLW  05
4722:  MOVWF  FEA
4724:  MOVLW  1A
4726:  MOVWF  FE9
4728:  MOVFF  FF2,53A
472C:  BCF    FF2.7
472E:  MOVLW  00
4730:  MOVLB  0
4732:  CALL   0BFA
4736:  TBLRD*-
4738:  TBLRD*+
473A:  MOVF   FF5,W
473C:  MOVWF  FEE
473E:  IORLW  00
4740:  BNZ   4738
4742:  MOVLB  5
4744:  BTFSC  x3A.7
4746:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,1,1);} 
4748:  MOVLW  05
474A:  MOVWF  x3B
474C:  MOVLW  1A
474E:  MOVWF  x3A
4750:  CLRF   x3C
4752:  MOVLW  32
4754:  MOVWF  x3D
4756:  MOVLW  01
4758:  MOVWF  x3E
475A:  MOVWF  x3F
475C:  MOVLB  0
475E:  CALL   17EA
....................             else 
4762:  BRA    47A8
4764:  MOVLB  4
....................                {strcpy(Menus.Letra,"Continuar"); 
4766:  MOVLW  05
4768:  MOVWF  FEA
476A:  MOVLW  1A
476C:  MOVWF  FE9
476E:  MOVFF  FF2,53A
4772:  BCF    FF2.7
4774:  MOVLW  00
4776:  MOVLB  0
4778:  CALL   0BFA
477C:  TBLRD*-
477E:  TBLRD*+
4780:  MOVF   FF5,W
4782:  MOVWF  FEE
4784:  IORLW  00
4786:  BNZ   477E
4788:  MOVLB  5
478A:  BTFSC  x3A.7
478C:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,50,0,1);}   
478E:  MOVLW  05
4790:  MOVWF  x3B
4792:  MOVLW  1A
4794:  MOVWF  x3A
4796:  CLRF   x3C
4798:  MOVLW  32
479A:  MOVWF  x3D
479C:  CLRF   x3E
479E:  MOVLW  01
47A0:  MOVWF  x3F
47A2:  MOVLB  0
47A4:  CALL   17EA
....................                           
....................             visual=0; 
47A8:  MOVLB  4
47AA:  BCF    x7C.4
....................          } 
....................          if(UP)//Si oprime hacia arriba 
47AC:  BSF    F92.5
47AE:  BTFSS  F80.5
47B0:  BRA    47CC
....................          {  if(Flanco == 0)  
47B2:  BTFSC  x7C.0
47B4:  BRA    47CA
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
47B6:  BSF    x7C.0
47B8:  MOVLW  1E
47BA:  MOVLB  5
47BC:  MOVWF  x3F
47BE:  MOVLB  0
47C0:  CALL   10C2
47C4:  MOVLB  4
47C6:  DECF   x90,F
47C8:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
47CA:  BRA    47CE
....................                {Flanco = 0;} 
47CC:  BCF    x7C.0
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
47CE:  BSF    F96.0
47D0:  BTFSS  F84.0
47D2:  BRA    47EE
....................          {  if(Flanco2 == 0)  
47D4:  BTFSC  x7C.2
47D6:  BRA    47EC
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
47D8:  BSF    x7C.2
47DA:  MOVLW  1E
47DC:  MOVLB  5
47DE:  MOVWF  x3F
47E0:  MOVLB  0
47E2:  CALL   10C2
47E6:  MOVLB  4
47E8:  INCF   x90,F
47EA:  BSF    x7C.4
....................                }      
....................          } 
....................             else 
47EC:  BRA    47F0
....................                {Flanco2 = 0;}   
47EE:  BCF    x7C.2
....................                 
....................          if(RIGHT)//Si oprime SET 
47F0:  BSF    F96.1
47F2:  BTFSS  F84.1
47F4:  BRA    482E
....................          {  if(Flanco1 == 0)  
47F6:  BTFSC  x7C.1
47F8:  BRA    482C
....................                {Flanco1 = 1;delay_ms(300);Menu=Opcion+10;Opcion=1;glcd_fillscreen(OFF);visual=1; 
47FA:  BSF    x7C.1
47FC:  MOVLW  02
47FE:  MOVLB  5
4800:  MOVWF  x3A
4802:  MOVLW  96
4804:  MOVWF  x3F
4806:  MOVLB  0
4808:  CALL   10C2
480C:  MOVLB  5
480E:  DECFSZ x3A,F
4810:  BRA    4802
4812:  MOVLW  0A
4814:  MOVLB  4
4816:  ADDWF  x90,W
4818:  MOVWF  x89
481A:  MOVLW  01
481C:  MOVWF  x90
481E:  MOVLB  5
4820:  CLRF   x3B
4822:  MOVLB  0
4824:  CALL   11BA
4828:  MOVLB  4
482A:  BSF    x7C.4
....................                } 
....................          } 
....................             else 
482C:  BRA    4830
....................                {Flanco1 = 0;}   
482E:  BCF    x7C.1
....................                 
....................          if(LEFT)//Si oprime boton de Toma. 
4830:  BSF    F96.2
4832:  BTFSS  F84.2
4834:  BRA    4860
....................          {delay_ms(700);Menu=1;glcd_fillscreen(OFF);visual=1;} 
4836:  MOVLW  04
4838:  MOVLB  5
483A:  MOVWF  x3A
483C:  MOVLW  AF
483E:  MOVWF  x3F
4840:  MOVLB  0
4842:  CALL   10C2
4846:  MOVLB  5
4848:  DECFSZ x3A,F
484A:  BRA    483C
484C:  MOVLW  01
484E:  MOVLB  4
4850:  MOVWF  x89
4852:  MOVLB  5
4854:  CLRF   x3B
4856:  MOVLB  0
4858:  CALL   11BA
485C:  MOVLB  4
485E:  BSF    x7C.4
....................           
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==9){ // Menu de Cambio de Contraseña 
4860:  MOVF   x89,W
4862:  SUBLW  09
4864:  BTFSS  FD8.2
4866:  BRA    4D1C
....................          
....................       strcpy(Menus.Letra,"Clave"); 
4868:  MOVLW  05
486A:  MOVWF  FEA
486C:  MOVLW  1A
486E:  MOVWF  FE9
4870:  MOVFF  FF2,53A
4874:  BCF    FF2.7
4876:  MOVLW  00
4878:  MOVLB  0
487A:  CALL   0762
487E:  TBLRD*-
4880:  TBLRD*+
4882:  MOVF   FF5,W
4884:  MOVWF  FEE
4886:  IORLW  00
4888:  BNZ   4880
488A:  MOVLB  5
488C:  BTFSC  x3A.7
488E:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
4890:  MOVLW  05
4892:  MOVWF  x3B
4894:  MOVLW  1A
4896:  MOVWF  x3A
4898:  MOVLW  1E
489A:  MOVWF  x3C
489C:  CLRF   x3D
489E:  MOVLW  01
48A0:  MOVWF  x3E
48A2:  MOVLW  02
48A4:  MOVWF  x3F
48A6:  MOVLB  0
48A8:  CALL   17EA
....................        
....................       if(unidad==1) 
48AC:  MOVLB  4
48AE:  DECFSZ x8A,W
48B0:  BRA    4910
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1); 
48B2:  MOVFF  4B4,53C
48B6:  MOVLW  14
48B8:  MOVLB  5
48BA:  MOVWF  x3D
48BC:  MOVLW  1E
48BE:  MOVWF  x3E
48C0:  MOVLW  01
48C2:  MOVWF  x3F
48C4:  MOVLB  0
48C6:  CALL   1A10
....................          displayContrasena(Contrasena[1],40,30,0); 
48CA:  MOVFF  4B5,53C
48CE:  MOVLW  28
48D0:  MOVLB  5
48D2:  MOVWF  x3D
48D4:  MOVLW  1E
48D6:  MOVWF  x3E
48D8:  CLRF   x3F
48DA:  MOVLB  0
48DC:  CALL   1A10
....................          displayContrasena(Contrasena[2],60,30,0); 
48E0:  MOVFF  4B6,53C
48E4:  MOVLW  3C
48E6:  MOVLB  5
48E8:  MOVWF  x3D
48EA:  MOVLW  1E
48EC:  MOVWF  x3E
48EE:  CLRF   x3F
48F0:  MOVLB  0
48F2:  CALL   1A10
....................          displayContrasena(Contrasena[3],80,30,0); 
48F6:  MOVFF  4B7,53C
48FA:  MOVLW  50
48FC:  MOVLB  5
48FE:  MOVWF  x3D
4900:  MOVLW  1E
4902:  MOVWF  x3E
4904:  CLRF   x3F
4906:  MOVLB  0
4908:  CALL   1A10
....................       } 
....................       else 
490C:  BRA    4A38
490E:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4910:  MOVF   x8A,W
4912:  SUBLW  02
4914:  BNZ   4974
....................          { 
....................             displayContrasena(Contrasena[0],20,30,0); 
4916:  MOVFF  4B4,53C
491A:  MOVLW  14
491C:  MOVLB  5
491E:  MOVWF  x3D
4920:  MOVLW  1E
4922:  MOVWF  x3E
4924:  CLRF   x3F
4926:  MOVLB  0
4928:  CALL   1A10
....................             displayContrasena(Contrasena[1],40,30,1); 
492C:  MOVFF  4B5,53C
4930:  MOVLW  28
4932:  MOVLB  5
4934:  MOVWF  x3D
4936:  MOVLW  1E
4938:  MOVWF  x3E
493A:  MOVLW  01
493C:  MOVWF  x3F
493E:  MOVLB  0
4940:  CALL   1A10
....................             displayContrasena(Contrasena[2],60,30,0); 
4944:  MOVFF  4B6,53C
4948:  MOVLW  3C
494A:  MOVLB  5
494C:  MOVWF  x3D
494E:  MOVLW  1E
4950:  MOVWF  x3E
4952:  CLRF   x3F
4954:  MOVLB  0
4956:  CALL   1A10
....................             displayContrasena(Contrasena[3],80,30,0); 
495A:  MOVFF  4B7,53C
495E:  MOVLW  50
4960:  MOVLB  5
4962:  MOVWF  x3D
4964:  MOVLW  1E
4966:  MOVWF  x3E
4968:  CLRF   x3F
496A:  MOVLB  0
496C:  CALL   1A10
....................          } 
....................          else 
4970:  BRA    4A38
4972:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4974:  MOVF   x8A,W
4976:  SUBLW  03
4978:  BNZ   49D8
....................             { 
....................                displayContrasena(Contrasena[0],20,30,0); 
497A:  MOVFF  4B4,53C
497E:  MOVLW  14
4980:  MOVLB  5
4982:  MOVWF  x3D
4984:  MOVLW  1E
4986:  MOVWF  x3E
4988:  CLRF   x3F
498A:  MOVLB  0
498C:  CALL   1A10
....................                displayContrasena(Contrasena[1],40,30,0); 
4990:  MOVFF  4B5,53C
4994:  MOVLW  28
4996:  MOVLB  5
4998:  MOVWF  x3D
499A:  MOVLW  1E
499C:  MOVWF  x3E
499E:  CLRF   x3F
49A0:  MOVLB  0
49A2:  CALL   1A10
....................                displayContrasena(Contrasena[2],60,30,1); 
49A6:  MOVFF  4B6,53C
49AA:  MOVLW  3C
49AC:  MOVLB  5
49AE:  MOVWF  x3D
49B0:  MOVLW  1E
49B2:  MOVWF  x3E
49B4:  MOVLW  01
49B6:  MOVWF  x3F
49B8:  MOVLB  0
49BA:  CALL   1A10
....................                displayContrasena(Contrasena[3],80,30,0); 
49BE:  MOVFF  4B7,53C
49C2:  MOVLW  50
49C4:  MOVLB  5
49C6:  MOVWF  x3D
49C8:  MOVLW  1E
49CA:  MOVWF  x3E
49CC:  CLRF   x3F
49CE:  MOVLB  0
49D0:  CALL   1A10
....................             } 
....................             else 
49D4:  BRA    4A38
49D6:  MOVLB  4
....................             { 
....................                if(unidad==4) 
49D8:  MOVF   x8A,W
49DA:  SUBLW  04
49DC:  BNZ   4A3A
....................                { 
....................                   displayContrasena(Contrasena[0],20,30,0); 
49DE:  MOVFF  4B4,53C
49E2:  MOVLW  14
49E4:  MOVLB  5
49E6:  MOVWF  x3D
49E8:  MOVLW  1E
49EA:  MOVWF  x3E
49EC:  CLRF   x3F
49EE:  MOVLB  0
49F0:  CALL   1A10
....................                   displayContrasena(Contrasena[1],40,30,0); 
49F4:  MOVFF  4B5,53C
49F8:  MOVLW  28
49FA:  MOVLB  5
49FC:  MOVWF  x3D
49FE:  MOVLW  1E
4A00:  MOVWF  x3E
4A02:  CLRF   x3F
4A04:  MOVLB  0
4A06:  CALL   1A10
....................                   displayContrasena(Contrasena[2],60,30,0); 
4A0A:  MOVFF  4B6,53C
4A0E:  MOVLW  3C
4A10:  MOVLB  5
4A12:  MOVWF  x3D
4A14:  MOVLW  1E
4A16:  MOVWF  x3E
4A18:  CLRF   x3F
4A1A:  MOVLB  0
4A1C:  CALL   1A10
....................                   displayContrasena(Contrasena[3],80,30,1); 
4A20:  MOVFF  4B7,53C
4A24:  MOVLW  50
4A26:  MOVLB  5
4A28:  MOVWF  x3D
4A2A:  MOVLW  1E
4A2C:  MOVWF  x3E
4A2E:  MOVLW  01
4A30:  MOVWF  x3F
4A32:  MOVLB  0
4A34:  CALL   1A10
4A38:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4A3A:  BSF    F92.5
4A3C:  BTFSS  F80.5
4A3E:  BRA    4AA8
....................       { 
....................          if(Flanco == 0) 
4A40:  BTFSC  x7C.0
4A42:  BRA    4AA6
....................          { 
....................             Flanco = 1;delay_ms(30); 
4A44:  BSF    x7C.0
4A46:  MOVLW  1E
4A48:  MOVLB  5
4A4A:  MOVWF  x3F
4A4C:  MOVLB  0
4A4E:  CALL   10C2
....................             for(i=1;i<=4;i++) 
4A52:  MOVLW  01
4A54:  MOVLB  4
4A56:  MOVWF  x8D
4A58:  MOVF   x8D,W
4A5A:  SUBLW  04
4A5C:  BNC   4AA6
....................             { 
....................                if(unidad==i) 
4A5E:  MOVF   x8D,W
4A60:  SUBWF  x8A,W
4A62:  BNZ   4AA2
....................                { 
....................                   Contrasena[i-1]++; 
4A64:  MOVLW  01
4A66:  SUBWF  x8D,W
4A68:  CLRF   03
4A6A:  ADDLW  B4
4A6C:  MOVWF  FE9
4A6E:  MOVLW  04
4A70:  ADDWFC 03,W
4A72:  MOVWF  FEA
4A74:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9)    
4A76:  MOVLW  01
4A78:  SUBWF  x8D,W
4A7A:  CLRF   03
4A7C:  ADDLW  B4
4A7E:  MOVWF  FE9
4A80:  MOVLW  04
4A82:  ADDWFC 03,W
4A84:  MOVWF  FEA
4A86:  BTFSC  FEF.7
4A88:  BRA    4AA2
4A8A:  MOVF   FEF,W
4A8C:  SUBLW  09
4A8E:  BC    4AA2
....................                   { 
....................                      Contrasena[i-1]=0; 
4A90:  MOVLW  01
4A92:  SUBWF  x8D,W
4A94:  CLRF   03
4A96:  ADDLW  B4
4A98:  MOVWF  FE9
4A9A:  MOVLW  04
4A9C:  ADDWFC 03,W
4A9E:  MOVWF  FEA
4AA0:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4AA2:  INCF   x8D,F
4AA4:  BRA    4A58
....................          } 
....................       } 
....................       else 
4AA6:  BRA    4AAA
....................       { 
....................          Flanco = 0; 
4AA8:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4AAA:  BSF    F96.0
4AAC:  BTFSS  F84.0
4AAE:  BRA    4B16
....................       { 
....................          if(Flanco2 == 0) 
4AB0:  BTFSC  x7C.2
4AB2:  BRA    4B14
....................             {Flanco2 = 1;delay_ms(30); 
4AB4:  BSF    x7C.2
4AB6:  MOVLW  1E
4AB8:  MOVLB  5
4ABA:  MOVWF  x3F
4ABC:  MOVLB  0
4ABE:  CALL   10C2
....................                for(i=1;i<=4;i++) 
4AC2:  MOVLW  01
4AC4:  MOVLB  4
4AC6:  MOVWF  x8D
4AC8:  MOVF   x8D,W
4ACA:  SUBLW  04
4ACC:  BNC   4B14
....................                { 
....................                   if(unidad==i) 
4ACE:  MOVF   x8D,W
4AD0:  SUBWF  x8A,W
4AD2:  BNZ   4B10
....................                   {Contrasena[i-1]--;  
4AD4:  MOVLW  01
4AD6:  SUBWF  x8D,W
4AD8:  CLRF   03
4ADA:  ADDLW  B4
4ADC:  MOVWF  FE9
4ADE:  MOVLW  04
4AE0:  ADDWFC 03,W
4AE2:  MOVWF  FEA
4AE4:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
4AE6:  MOVLW  01
4AE8:  SUBWF  x8D,W
4AEA:  CLRF   03
4AEC:  ADDLW  B4
4AEE:  MOVWF  FE9
4AF0:  MOVLW  04
4AF2:  ADDWFC 03,W
4AF4:  MOVWF  FEA
4AF6:  BTFSC  FEF.7
4AF8:  BRA    4AFC
4AFA:  BRA    4B10
....................                         {Contrasena[i-1]=9;} 
4AFC:  MOVLW  01
4AFE:  SUBWF  x8D,W
4B00:  CLRF   03
4B02:  ADDLW  B4
4B04:  MOVWF  FE9
4B06:  MOVLW  04
4B08:  ADDWFC 03,W
4B0A:  MOVWF  FEA
4B0C:  MOVLW  09
4B0E:  MOVWF  FEF
....................                   } 
....................                }       
4B10:  INCF   x8D,F
4B12:  BRA    4AC8
....................             }      
....................       } 
....................       else 
4B14:  BRA    4B18
....................       { 
....................          Flanco2 = 0; 
4B16:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4B18:  BSF    F96.1
4B1A:  BTFSS  F84.1
4B1C:  BRA    4B40
....................       { 
....................          if(Flanco1 == 0) 
4B1E:  BTFSC  x7C.1
4B20:  BRA    4B3E
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4B22:  BSF    x7C.1
4B24:  MOVLW  02
4B26:  MOVLB  5
4B28:  MOVWF  x3A
4B2A:  MOVLW  96
4B2C:  MOVWF  x3F
4B2E:  MOVLB  0
4B30:  CALL   10C2
4B34:  MOVLB  5
4B36:  DECFSZ x3A,F
4B38:  BRA    4B2A
4B3A:  MOVLB  4
4B3C:  INCF   x8A,F
....................       } 
....................       else 
4B3E:  BRA    4B42
....................       { 
....................          Flanco1 = 0; 
4B40:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4B42:  BSF    F96.2
4B44:  BTFSS  F84.2
4B46:  BRA    4B70
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
4B48:  MOVLW  04
4B4A:  MOVLB  5
4B4C:  MOVWF  x3A
4B4E:  MOVLW  AF
4B50:  MOVWF  x3F
4B52:  MOVLB  0
4B54:  CALL   10C2
4B58:  MOVLB  5
4B5A:  DECFSZ x3A,F
4B5C:  BRA    4B4E
4B5E:  MOVLW  01
4B60:  MOVLB  4
4B62:  MOVWF  x89
4B64:  MOVLB  5
4B66:  CLRF   x3B
4B68:  MOVLB  0
4B6A:  CALL   11BA
4B6E:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
4B70:  MOVF   x8A,W
4B72:  SUBLW  04
4B74:  BTFSC  FD8.0
4B76:  BRA    4D1C
....................       {glcd_fillScreen(OFF); 
4B78:  MOVLB  5
4B7A:  CLRF   x3B
4B7C:  MOVLB  0
4B7E:  CALL   11BA
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
4B82:  MOVLB  4
4B84:  MOVF   xB8,W
4B86:  SUBWF  xB4,W
4B88:  BNZ   4C5A
4B8A:  MOVF   xB9,W
4B8C:  SUBWF  xB5,W
4B8E:  BNZ   4C5A
4B90:  MOVF   xBA,W
4B92:  SUBWF  xB6,W
4B94:  BNZ   4C5A
4B96:  MOVF   xBB,W
4B98:  SUBWF  xB7,W
4B9A:  BNZ   4C5A
....................          { 
....................             glcd_fillScreen(OFF); 
4B9C:  MOVLB  5
4B9E:  CLRF   x3B
4BA0:  MOVLB  0
4BA2:  CALL   11BA
....................             strcpy(Menus.Letra,"Clave"); 
4BA6:  MOVLW  05
4BA8:  MOVWF  FEA
4BAA:  MOVLW  1A
4BAC:  MOVWF  FE9
4BAE:  MOVFF  FF2,53A
4BB2:  BCF    FF2.7
4BB4:  MOVLW  00
4BB6:  CALL   0762
4BBA:  TBLRD*-
4BBC:  TBLRD*+
4BBE:  MOVF   FF5,W
4BC0:  MOVWF  FEE
4BC2:  IORLW  00
4BC4:  BNZ   4BBC
4BC6:  MOVLB  5
4BC8:  BTFSC  x3A.7
4BCA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4BCC:  MOVLW  05
4BCE:  MOVWF  x3B
4BD0:  MOVLW  1A
4BD2:  MOVWF  x3A
4BD4:  MOVLW  1E
4BD6:  MOVWF  x3C
4BD8:  CLRF   x3D
4BDA:  CLRF   x3E
4BDC:  MOVLW  02
4BDE:  MOVWF  x3F
4BE0:  MOVLB  0
4BE2:  CALL   17EA
....................             strcpy(Menus.Letra,"Correcta"); 
4BE6:  MOVLW  05
4BE8:  MOVWF  FEA
4BEA:  MOVLW  1A
4BEC:  MOVWF  FE9
4BEE:  MOVFF  FF2,53A
4BF2:  BCF    FF2.7
4BF4:  MOVLW  00
4BF6:  CALL   0782
4BFA:  TBLRD*-
4BFC:  TBLRD*+
4BFE:  MOVF   FF5,W
4C00:  MOVWF  FEE
4C02:  IORLW  00
4C04:  BNZ   4BFC
4C06:  MOVLB  5
4C08:  BTFSC  x3A.7
4C0A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
4C0C:  MOVLW  05
4C0E:  MOVWF  x3B
4C10:  MOVLW  1A
4C12:  MOVWF  x3A
4C14:  MOVLW  0F
4C16:  MOVWF  x3C
4C18:  MOVLW  1E
4C1A:  MOVWF  x3D
4C1C:  CLRF   x3E
4C1E:  MOVLW  02
4C20:  MOVWF  x3F
4C22:  MOVLB  0
4C24:  CALL   17EA
....................             Menu=91;glcd_update();delay_ms(1000); 
4C28:  MOVLW  5B
4C2A:  MOVLB  4
4C2C:  MOVWF  x89
4C2E:  MOVLB  0
4C30:  CALL   1214
4C34:  MOVLW  04
4C36:  MOVLB  5
4C38:  MOVWF  x3A
4C3A:  MOVLW  FA
4C3C:  MOVWF  x3F
4C3E:  MOVLB  0
4C40:  CALL   10C2
4C44:  MOVLB  5
4C46:  DECFSZ x3A,F
4C48:  BRA    4C3A
....................             glcd_fillScreen(OFF);unidad=1; 
4C4A:  CLRF   x3B
4C4C:  MOVLB  0
4C4E:  CALL   11BA
4C52:  MOVLW  01
4C54:  MOVLB  4
4C56:  MOVWF  x8A
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
4C58:  BRA    4D1C
....................          { 
....................             glcd_fillScreen(OFF); 
4C5A:  MOVLB  5
4C5C:  CLRF   x3B
4C5E:  MOVLB  0
4C60:  CALL   11BA
....................             strcpy(Menus.Letra,"Clave"); 
4C64:  MOVLW  05
4C66:  MOVWF  FEA
4C68:  MOVLW  1A
4C6A:  MOVWF  FE9
4C6C:  MOVFF  FF2,53A
4C70:  BCF    FF2.7
4C72:  MOVLW  00
4C74:  CALL   0762
4C78:  TBLRD*-
4C7A:  TBLRD*+
4C7C:  MOVF   FF5,W
4C7E:  MOVWF  FEE
4C80:  IORLW  00
4C82:  BNZ   4C7A
4C84:  MOVLB  5
4C86:  BTFSC  x3A.7
4C88:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4C8A:  MOVLW  05
4C8C:  MOVWF  x3B
4C8E:  MOVLW  1A
4C90:  MOVWF  x3A
4C92:  MOVLW  1E
4C94:  MOVWF  x3C
4C96:  CLRF   x3D
4C98:  CLRF   x3E
4C9A:  MOVLW  02
4C9C:  MOVWF  x3F
4C9E:  MOVLB  0
4CA0:  CALL   17EA
....................             strcpy(Menus.Letra,"Incorrecta"); 
4CA4:  MOVLW  05
4CA6:  MOVWF  FEA
4CA8:  MOVLW  1A
4CAA:  MOVWF  FE9
4CAC:  MOVFF  FF2,53A
4CB0:  BCF    FF2.7
4CB2:  MOVLW  00
4CB4:  CALL   07A6
4CB8:  TBLRD*-
4CBA:  TBLRD*+
4CBC:  MOVF   FF5,W
4CBE:  MOVWF  FEE
4CC0:  IORLW  00
4CC2:  BNZ   4CBA
4CC4:  MOVLB  5
4CC6:  BTFSC  x3A.7
4CC8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
4CCA:  MOVLW  05
4CCC:  MOVWF  x3B
4CCE:  MOVLW  1A
4CD0:  MOVWF  x3A
4CD2:  CLRF   x3C
4CD4:  MOVLW  1E
4CD6:  MOVWF  x3D
4CD8:  CLRF   x3E
4CDA:  MOVLW  02
4CDC:  MOVWF  x3F
4CDE:  MOVLB  0
4CE0:  CALL   17EA
....................             Menu=1;glcd_update();delay_ms(1000); 
4CE4:  MOVLW  01
4CE6:  MOVLB  4
4CE8:  MOVWF  x89
4CEA:  MOVLB  0
4CEC:  CALL   1214
4CF0:  MOVLW  04
4CF2:  MOVLB  5
4CF4:  MOVWF  x3A
4CF6:  MOVLW  FA
4CF8:  MOVWF  x3F
4CFA:  MOVLB  0
4CFC:  CALL   10C2
4D00:  MOVLB  5
4D02:  DECFSZ x3A,F
4D04:  BRA    4CF6
....................             glcd_fillScreen(OFF);unidad=1; 
4D06:  CLRF   x3B
4D08:  MOVLB  0
4D0A:  CALL   11BA
4D0E:  MOVLW  01
4D10:  MOVLB  4
4D12:  MOVWF  x8A
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
4D14:  CLRF   xB4
4D16:  CLRF   xB5
4D18:  CLRF   xB6
4D1A:  CLRF   xB7
....................          } 
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==91){ // Menu de Cambio de Contraseña 
4D1C:  MOVF   x89,W
4D1E:  SUBLW  5B
4D20:  BTFSS  FD8.2
4D22:  BRA    50FC
....................          
....................       strcpy(Menus.Letra,"Clave Nueva"); 
4D24:  MOVLW  05
4D26:  MOVWF  FEA
4D28:  MOVLW  1A
4D2A:  MOVWF  FE9
4D2C:  MOVFF  FF2,53A
4D30:  BCF    FF2.7
4D32:  MOVLW  00
4D34:  MOVLB  0
4D36:  CALL   0C1E
4D3A:  TBLRD*-
4D3C:  TBLRD*+
4D3E:  MOVF   FF5,W
4D40:  MOVWF  FEE
4D42:  IORLW  00
4D44:  BNZ   4D3C
4D46:  MOVLB  5
4D48:  BTFSC  x3A.7
4D4A:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2);      
4D4C:  MOVLW  05
4D4E:  MOVWF  x3B
4D50:  MOVLW  1A
4D52:  MOVWF  x3A
4D54:  CLRF   x3C
4D56:  CLRF   x3D
4D58:  MOVLW  01
4D5A:  MOVWF  x3E
4D5C:  MOVLW  02
4D5E:  MOVWF  x3F
4D60:  MOVLB  0
4D62:  CALL   17EA
....................        
....................       if(unidad==1) 
4D66:  MOVLB  4
4D68:  DECFSZ x8A,W
4D6A:  BRA    4DCA
....................       { 
....................          displayContrasena(Password[0],20,30,1); 
4D6C:  MOVFF  4B8,53C
4D70:  MOVLW  14
4D72:  MOVLB  5
4D74:  MOVWF  x3D
4D76:  MOVLW  1E
4D78:  MOVWF  x3E
4D7A:  MOVLW  01
4D7C:  MOVWF  x3F
4D7E:  MOVLB  0
4D80:  CALL   1A10
....................          displayContrasena(Password[1],40,30,0); 
4D84:  MOVFF  4B9,53C
4D88:  MOVLW  28
4D8A:  MOVLB  5
4D8C:  MOVWF  x3D
4D8E:  MOVLW  1E
4D90:  MOVWF  x3E
4D92:  CLRF   x3F
4D94:  MOVLB  0
4D96:  CALL   1A10
....................          displayContrasena(Password[2],60,30,0); 
4D9A:  MOVFF  4BA,53C
4D9E:  MOVLW  3C
4DA0:  MOVLB  5
4DA2:  MOVWF  x3D
4DA4:  MOVLW  1E
4DA6:  MOVWF  x3E
4DA8:  CLRF   x3F
4DAA:  MOVLB  0
4DAC:  CALL   1A10
....................          displayContrasena(Password[3],80,30,0); 
4DB0:  MOVFF  4BB,53C
4DB4:  MOVLW  50
4DB6:  MOVLB  5
4DB8:  MOVWF  x3D
4DBA:  MOVLW  1E
4DBC:  MOVWF  x3E
4DBE:  CLRF   x3F
4DC0:  MOVLB  0
4DC2:  CALL   1A10
....................       } 
....................       else 
4DC6:  BRA    4EF2
4DC8:  MOVLB  4
....................       { 
....................          if(unidad==2) 
4DCA:  MOVF   x8A,W
4DCC:  SUBLW  02
4DCE:  BNZ   4E2E
....................          { 
....................             displayContrasena(Password[0],20,30,0); 
4DD0:  MOVFF  4B8,53C
4DD4:  MOVLW  14
4DD6:  MOVLB  5
4DD8:  MOVWF  x3D
4DDA:  MOVLW  1E
4DDC:  MOVWF  x3E
4DDE:  CLRF   x3F
4DE0:  MOVLB  0
4DE2:  CALL   1A10
....................             displayContrasena(Password[1],40,30,1); 
4DE6:  MOVFF  4B9,53C
4DEA:  MOVLW  28
4DEC:  MOVLB  5
4DEE:  MOVWF  x3D
4DF0:  MOVLW  1E
4DF2:  MOVWF  x3E
4DF4:  MOVLW  01
4DF6:  MOVWF  x3F
4DF8:  MOVLB  0
4DFA:  CALL   1A10
....................             displayContrasena(Password[2],60,30,0); 
4DFE:  MOVFF  4BA,53C
4E02:  MOVLW  3C
4E04:  MOVLB  5
4E06:  MOVWF  x3D
4E08:  MOVLW  1E
4E0A:  MOVWF  x3E
4E0C:  CLRF   x3F
4E0E:  MOVLB  0
4E10:  CALL   1A10
....................             displayContrasena(Password[3],80,30,0); 
4E14:  MOVFF  4BB,53C
4E18:  MOVLW  50
4E1A:  MOVLB  5
4E1C:  MOVWF  x3D
4E1E:  MOVLW  1E
4E20:  MOVWF  x3E
4E22:  CLRF   x3F
4E24:  MOVLB  0
4E26:  CALL   1A10
....................          } 
....................          else 
4E2A:  BRA    4EF2
4E2C:  MOVLB  4
....................          { 
....................             if(unidad==3) 
4E2E:  MOVF   x8A,W
4E30:  SUBLW  03
4E32:  BNZ   4E92
....................             { 
....................                displayContrasena(Password[0],20,30,0); 
4E34:  MOVFF  4B8,53C
4E38:  MOVLW  14
4E3A:  MOVLB  5
4E3C:  MOVWF  x3D
4E3E:  MOVLW  1E
4E40:  MOVWF  x3E
4E42:  CLRF   x3F
4E44:  MOVLB  0
4E46:  CALL   1A10
....................                displayContrasena(Password[1],40,30,0); 
4E4A:  MOVFF  4B9,53C
4E4E:  MOVLW  28
4E50:  MOVLB  5
4E52:  MOVWF  x3D
4E54:  MOVLW  1E
4E56:  MOVWF  x3E
4E58:  CLRF   x3F
4E5A:  MOVLB  0
4E5C:  CALL   1A10
....................                displayContrasena(Password[2],60,30,1); 
4E60:  MOVFF  4BA,53C
4E64:  MOVLW  3C
4E66:  MOVLB  5
4E68:  MOVWF  x3D
4E6A:  MOVLW  1E
4E6C:  MOVWF  x3E
4E6E:  MOVLW  01
4E70:  MOVWF  x3F
4E72:  MOVLB  0
4E74:  CALL   1A10
....................                displayContrasena(Password[3],80,30,0); 
4E78:  MOVFF  4BB,53C
4E7C:  MOVLW  50
4E7E:  MOVLB  5
4E80:  MOVWF  x3D
4E82:  MOVLW  1E
4E84:  MOVWF  x3E
4E86:  CLRF   x3F
4E88:  MOVLB  0
4E8A:  CALL   1A10
....................             } 
....................             else 
4E8E:  BRA    4EF2
4E90:  MOVLB  4
....................             { 
....................                if(unidad==4) 
4E92:  MOVF   x8A,W
4E94:  SUBLW  04
4E96:  BNZ   4EF4
....................                { 
....................                   displayContrasena(Password[0],20,30,0); 
4E98:  MOVFF  4B8,53C
4E9C:  MOVLW  14
4E9E:  MOVLB  5
4EA0:  MOVWF  x3D
4EA2:  MOVLW  1E
4EA4:  MOVWF  x3E
4EA6:  CLRF   x3F
4EA8:  MOVLB  0
4EAA:  CALL   1A10
....................                   displayContrasena(Password[1],40,30,0); 
4EAE:  MOVFF  4B9,53C
4EB2:  MOVLW  28
4EB4:  MOVLB  5
4EB6:  MOVWF  x3D
4EB8:  MOVLW  1E
4EBA:  MOVWF  x3E
4EBC:  CLRF   x3F
4EBE:  MOVLB  0
4EC0:  CALL   1A10
....................                   displayContrasena(Password[2],60,30,0); 
4EC4:  MOVFF  4BA,53C
4EC8:  MOVLW  3C
4ECA:  MOVLB  5
4ECC:  MOVWF  x3D
4ECE:  MOVLW  1E
4ED0:  MOVWF  x3E
4ED2:  CLRF   x3F
4ED4:  MOVLB  0
4ED6:  CALL   1A10
....................                   displayContrasena(Password[3],80,30,1); 
4EDA:  MOVFF  4BB,53C
4EDE:  MOVLW  50
4EE0:  MOVLB  5
4EE2:  MOVWF  x3D
4EE4:  MOVLW  1E
4EE6:  MOVWF  x3E
4EE8:  MOVLW  01
4EEA:  MOVWF  x3F
4EEC:  MOVLB  0
4EEE:  CALL   1A10
4EF2:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
4EF4:  BSF    F92.5
4EF6:  BTFSS  F80.5
4EF8:  BRA    4F62
....................       { 
....................          if(Flanco == 0) 
4EFA:  BTFSC  x7C.0
4EFC:  BRA    4F60
....................          { 
....................             Flanco = 1;delay_ms(30); 
4EFE:  BSF    x7C.0
4F00:  MOVLW  1E
4F02:  MOVLB  5
4F04:  MOVWF  x3F
4F06:  MOVLB  0
4F08:  CALL   10C2
....................             for(i=1;i<=4;i++) 
4F0C:  MOVLW  01
4F0E:  MOVLB  4
4F10:  MOVWF  x8D
4F12:  MOVF   x8D,W
4F14:  SUBLW  04
4F16:  BNC   4F60
....................             { 
....................                if(unidad==i) 
4F18:  MOVF   x8D,W
4F1A:  SUBWF  x8A,W
4F1C:  BNZ   4F5C
....................                { 
....................                   Password[i-1]++; 
4F1E:  MOVLW  01
4F20:  SUBWF  x8D,W
4F22:  CLRF   03
4F24:  ADDLW  B8
4F26:  MOVWF  FE9
4F28:  MOVLW  04
4F2A:  ADDWFC 03,W
4F2C:  MOVWF  FEA
4F2E:  INCF   FEF,F
....................                   if(Password[i-1]>9)    
4F30:  MOVLW  01
4F32:  SUBWF  x8D,W
4F34:  CLRF   03
4F36:  ADDLW  B8
4F38:  MOVWF  FE9
4F3A:  MOVLW  04
4F3C:  ADDWFC 03,W
4F3E:  MOVWF  FEA
4F40:  BTFSC  FEF.7
4F42:  BRA    4F5C
4F44:  MOVF   FEF,W
4F46:  SUBLW  09
4F48:  BC    4F5C
....................                   { 
....................                      Password[i-1]=0; 
4F4A:  MOVLW  01
4F4C:  SUBWF  x8D,W
4F4E:  CLRF   03
4F50:  ADDLW  B8
4F52:  MOVWF  FE9
4F54:  MOVLW  04
4F56:  ADDWFC 03,W
4F58:  MOVWF  FEA
4F5A:  CLRF   FEF
....................                   } 
....................                } 
....................             } 
4F5C:  INCF   x8D,F
4F5E:  BRA    4F12
....................          } 
....................       } 
....................       else 
4F60:  BRA    4F64
....................       { 
....................          Flanco = 0; 
4F62:  BCF    x7C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4F64:  BSF    F96.0
4F66:  BTFSS  F84.0
4F68:  BRA    4FD0
....................       { 
....................          if(Flanco2 == 0) 
4F6A:  BTFSC  x7C.2
4F6C:  BRA    4FCE
....................             {Flanco2 = 1;delay_ms(30); 
4F6E:  BSF    x7C.2
4F70:  MOVLW  1E
4F72:  MOVLB  5
4F74:  MOVWF  x3F
4F76:  MOVLB  0
4F78:  CALL   10C2
....................                for(i=1;i<=4;i++) 
4F7C:  MOVLW  01
4F7E:  MOVLB  4
4F80:  MOVWF  x8D
4F82:  MOVF   x8D,W
4F84:  SUBLW  04
4F86:  BNC   4FCE
....................                { 
....................                   if(unidad==i) 
4F88:  MOVF   x8D,W
4F8A:  SUBWF  x8A,W
4F8C:  BNZ   4FCA
....................                   { 
....................                      Password[i-1]--; 
4F8E:  MOVLW  01
4F90:  SUBWF  x8D,W
4F92:  CLRF   03
4F94:  ADDLW  B8
4F96:  MOVWF  FE9
4F98:  MOVLW  04
4F9A:  ADDWFC 03,W
4F9C:  MOVWF  FEA
4F9E:  DECF   FEF,F
....................                      if(Password[i-1]<0) 
4FA0:  MOVLW  01
4FA2:  SUBWF  x8D,W
4FA4:  CLRF   03
4FA6:  ADDLW  B8
4FA8:  MOVWF  FE9
4FAA:  MOVLW  04
4FAC:  ADDWFC 03,W
4FAE:  MOVWF  FEA
4FB0:  BTFSC  FEF.7
4FB2:  BRA    4FB6
4FB4:  BRA    4FCA
....................                      { 
....................                         Password[i-1]=9; 
4FB6:  MOVLW  01
4FB8:  SUBWF  x8D,W
4FBA:  CLRF   03
4FBC:  ADDLW  B8
4FBE:  MOVWF  FE9
4FC0:  MOVLW  04
4FC2:  ADDWFC 03,W
4FC4:  MOVWF  FEA
4FC6:  MOVLW  09
4FC8:  MOVWF  FEF
....................                      } 
....................                   } 
....................                }       
4FCA:  INCF   x8D,F
4FCC:  BRA    4F82
....................             }      
....................       } 
....................       else 
4FCE:  BRA    4FD2
....................       { 
....................          Flanco2 = 0; 
4FD0:  BCF    x7C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
4FD2:  BSF    F96.1
4FD4:  BTFSS  F84.1
4FD6:  BRA    4FFA
....................       { 
....................          if(Flanco1 == 0) 
4FD8:  BTFSC  x7C.1
4FDA:  BRA    4FF8
....................             {Flanco1 = 1;delay_ms(300);unidad++;} 
4FDC:  BSF    x7C.1
4FDE:  MOVLW  02
4FE0:  MOVLB  5
4FE2:  MOVWF  x3A
4FE4:  MOVLW  96
4FE6:  MOVWF  x3F
4FE8:  MOVLB  0
4FEA:  CALL   10C2
4FEE:  MOVLB  5
4FF0:  DECFSZ x3A,F
4FF2:  BRA    4FE4
4FF4:  MOVLB  4
4FF6:  INCF   x8A,F
....................       } 
....................       else 
4FF8:  BRA    4FFC
....................       { 
....................          Flanco1 = 0; 
4FFA:  BCF    x7C.1
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
4FFC:  BSF    F96.2
4FFE:  BTFSS  F84.2
5000:  BRA    502A
....................       { 
....................          delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
5002:  MOVLW  04
5004:  MOVLB  5
5006:  MOVWF  x3A
5008:  MOVLW  AF
500A:  MOVWF  x3F
500C:  MOVLB  0
500E:  CALL   10C2
5012:  MOVLB  5
5014:  DECFSZ x3A,F
5016:  BRA    5008
5018:  MOVLW  01
501A:  MOVLB  4
501C:  MOVWF  x89
501E:  MOVLB  5
5020:  CLRF   x3B
5022:  MOVLB  0
5024:  CALL   11BA
5028:  MOVLB  4
....................       } 
....................        
....................       if(unidad>4) 
502A:  MOVF   x8A,W
502C:  SUBLW  04
502E:  BC    50FC
....................       { 
....................          Opcion=1;unidad=1; 
5030:  MOVLW  01
5032:  MOVWF  x90
5034:  MOVWF  x8A
....................          write_eeprom(10,Password[0]);write_eeprom(11,Password[1]);write_eeprom(12,Password[2]);write_eeprom(13,Password[3]); 
5036:  MOVLW  0A
5038:  MOVWF  FA9
503A:  MOVFF  4B8,FA8
503E:  BCF    FA6.6
5040:  BCF    FA6.7
5042:  BSF    FA6.2
5044:  MOVF   FF2,W
5046:  MOVWF  00
5048:  BCF    FF2.7
504A:  MOVLB  F
504C:  MOVLW  55
504E:  MOVWF  FA7
5050:  MOVLW  AA
5052:  MOVWF  FA7
5054:  BSF    FA6.1
5056:  BTFSC  FA6.1
5058:  BRA    5056
505A:  BCF    FA6.2
505C:  MOVF   00,W
505E:  IORWF  FF2,F
5060:  MOVLW  0B
5062:  MOVWF  FA9
5064:  MOVFF  4B9,FA8
5068:  BCF    FA6.6
506A:  BCF    FA6.7
506C:  BSF    FA6.2
506E:  MOVF   FF2,W
5070:  MOVWF  00
5072:  BCF    FF2.7
5074:  MOVLW  55
5076:  MOVWF  FA7
5078:  MOVLW  AA
507A:  MOVWF  FA7
507C:  BSF    FA6.1
507E:  BTFSC  FA6.1
5080:  BRA    507E
5082:  BCF    FA6.2
5084:  MOVF   00,W
5086:  IORWF  FF2,F
5088:  MOVLW  0C
508A:  MOVWF  FA9
508C:  MOVFF  4BA,FA8
5090:  BCF    FA6.6
5092:  BCF    FA6.7
5094:  BSF    FA6.2
5096:  MOVF   FF2,W
5098:  MOVWF  00
509A:  BCF    FF2.7
509C:  MOVLW  55
509E:  MOVWF  FA7
50A0:  MOVLW  AA
50A2:  MOVWF  FA7
50A4:  BSF    FA6.1
50A6:  BTFSC  FA6.1
50A8:  BRA    50A6
50AA:  BCF    FA6.2
50AC:  MOVF   00,W
50AE:  IORWF  FF2,F
50B0:  MOVLW  0D
50B2:  MOVWF  FA9
50B4:  MOVFF  4BB,FA8
50B8:  BCF    FA6.6
50BA:  BCF    FA6.7
50BC:  BSF    FA6.2
50BE:  MOVF   FF2,W
50C0:  MOVWF  00
50C2:  BCF    FF2.7
50C4:  MOVLW  55
50C6:  MOVWF  FA7
50C8:  MOVLW  AA
50CA:  MOVWF  FA7
50CC:  BSF    FA6.1
50CE:  BTFSC  FA6.1
50D0:  BRA    50CE
50D2:  BCF    FA6.2
50D4:  MOVF   00,W
50D6:  IORWF  FF2,F
....................          delay_ms(1000);glcd_fillScreen(OFF);Menu=1; 
50D8:  MOVLW  04
50DA:  MOVLB  5
50DC:  MOVWF  x3A
50DE:  MOVLW  FA
50E0:  MOVWF  x3F
50E2:  MOVLB  0
50E4:  CALL   10C2
50E8:  MOVLB  5
50EA:  DECFSZ x3A,F
50EC:  BRA    50DE
50EE:  CLRF   x3B
50F0:  MOVLB  0
50F2:  CALL   11BA
50F6:  MOVLW  01
50F8:  MOVLB  4
50FA:  MOVWF  x89
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==11){ // Menu de Tiempo de Esterilización 
50FC:  MOVF   x89,W
50FE:  SUBLW  0B
5100:  BTFSS  FD8.2
5102:  BRA    5404
....................       
....................       if(visual==1) 
5104:  BTFSS  x7C.4
5106:  BRA    5292
....................       { 
....................          if(unidad<1) 
5108:  MOVF   x8A,F
510A:  BNZ   5110
....................          {unidad=4;} 
510C:  MOVLW  04
510E:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra,"T. Ester."); 
5110:  MOVLW  05
5112:  MOVWF  FEA
5114:  MOVLW  1A
5116:  MOVWF  FE9
5118:  MOVFF  FF2,53A
511C:  BCF    FF2.7
511E:  MOVLW  00
5120:  MOVLB  0
5122:  CALL   0C44
5126:  TBLRD*-
5128:  TBLRD*+
512A:  MOVF   FF5,W
512C:  MOVWF  FEE
512E:  IORLW  00
5130:  BNZ   5128
5132:  MOVLB  5
5134:  BTFSC  x3A.7
5136:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5138:  MOVLW  05
513A:  MOVWF  x3B
513C:  MOVLW  1A
513E:  MOVWF  x3A
5140:  CLRF   x3C
5142:  CLRF   x3D
5144:  MOVLW  01
5146:  MOVWF  x3E
5148:  MOVLW  02
514A:  MOVWF  x3F
514C:  MOVLB  0
514E:  CALL   17EA
....................           
....................          if(unidad==4) 
5152:  MOVLB  4
5154:  MOVF   x8A,W
5156:  SUBLW  04
5158:  BNZ   5178
....................          {displayTiempo(Testerilizacionp[3],20,40,1,2);} 
515A:  MOVFF  4AB,53B
515E:  MOVLW  14
5160:  MOVLB  5
5162:  MOVWF  x3C
5164:  MOVLW  28
5166:  MOVWF  x3D
5168:  MOVLW  01
516A:  MOVWF  x3E
516C:  MOVLW  02
516E:  MOVWF  x3F
5170:  MOVLB  0
5172:  CALL   23C2
....................          else 
5176:  BRA    5192
....................          {displayTiempo(Testerilizacionp[3],20,40,0,2);} 
5178:  MOVFF  4AB,53B
517C:  MOVLW  14
517E:  MOVLB  5
5180:  MOVWF  x3C
5182:  MOVLW  28
5184:  MOVWF  x3D
5186:  CLRF   x3E
5188:  MOVLW  02
518A:  MOVWF  x3F
518C:  MOVLB  0
518E:  CALL   23C2
....................           
....................          if(unidad==3) 
5192:  MOVLB  4
5194:  MOVF   x8A,W
5196:  SUBLW  03
5198:  BNZ   51B6
....................          {displayTiempo(Testerilizacionp[2],40,40,1,2);} 
519A:  MOVFF  4AA,53B
519E:  MOVLW  28
51A0:  MOVLB  5
51A2:  MOVWF  x3C
51A4:  MOVWF  x3D
51A6:  MOVLW  01
51A8:  MOVWF  x3E
51AA:  MOVLW  02
51AC:  MOVWF  x3F
51AE:  MOVLB  0
51B0:  CALL   23C2
....................          else 
51B4:  BRA    51CE
....................          {displayTiempo(Testerilizacionp[2],40,40,0,2);} 
51B6:  MOVFF  4AA,53B
51BA:  MOVLW  28
51BC:  MOVLB  5
51BE:  MOVWF  x3C
51C0:  MOVWF  x3D
51C2:  CLRF   x3E
51C4:  MOVLW  02
51C6:  MOVWF  x3F
51C8:  MOVLB  0
51CA:  CALL   23C2
....................           
....................          if(unidad==2) 
51CE:  MOVLB  4
51D0:  MOVF   x8A,W
51D2:  SUBLW  02
51D4:  BNZ   51F4
....................          {displayTiempo(Testerilizacionp[1],70,40,1,2);} 
51D6:  MOVFF  4A9,53B
51DA:  MOVLW  46
51DC:  MOVLB  5
51DE:  MOVWF  x3C
51E0:  MOVLW  28
51E2:  MOVWF  x3D
51E4:  MOVLW  01
51E6:  MOVWF  x3E
51E8:  MOVLW  02
51EA:  MOVWF  x3F
51EC:  MOVLB  0
51EE:  CALL   23C2
....................          else 
51F2:  BRA    520E
....................          {displayTiempo(Testerilizacionp[1],70,40,0,2);} 
51F4:  MOVFF  4A9,53B
51F8:  MOVLW  46
51FA:  MOVLB  5
51FC:  MOVWF  x3C
51FE:  MOVLW  28
5200:  MOVWF  x3D
5202:  CLRF   x3E
5204:  MOVLW  02
5206:  MOVWF  x3F
5208:  MOVLB  0
520A:  CALL   23C2
....................           
....................          if(unidad==1) 
520E:  MOVLB  4
5210:  DECFSZ x8A,W
5212:  BRA    5232
....................          {displayTiempo(Testerilizacionp[0],90,40,1,2);} 
5214:  MOVFF  4A8,53B
5218:  MOVLW  5A
521A:  MOVLB  5
521C:  MOVWF  x3C
521E:  MOVLW  28
5220:  MOVWF  x3D
5222:  MOVLW  01
5224:  MOVWF  x3E
5226:  MOVLW  02
5228:  MOVWF  x3F
522A:  MOVLB  0
522C:  CALL   23C2
....................          else 
5230:  BRA    524C
....................          {displayTiempo(Testerilizacionp[0],90,40,0,2);} 
5232:  MOVFF  4A8,53B
5236:  MOVLW  5A
5238:  MOVLB  5
523A:  MOVWF  x3C
523C:  MOVLW  28
523E:  MOVWF  x3D
5240:  CLRF   x3E
5242:  MOVLW  02
5244:  MOVWF  x3F
5246:  MOVLB  0
5248:  CALL   23C2
....................           
....................          strcpy(Menus.Letra,":"); 
524C:  MOVLW  05
524E:  MOVWF  FEA
5250:  MOVLW  1A
5252:  MOVWF  FE9
5254:  MOVFF  FF2,53A
5258:  BCF    FF2.7
525A:  MOVLW  00
525C:  CALL   06CA
5260:  TBLRD*-
5262:  TBLRD*+
5264:  MOVF   FF5,W
5266:  MOVWF  FEE
5268:  IORLW  00
526A:  BNZ   5262
526C:  MOVLB  5
526E:  BTFSC  x3A.7
5270:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);      
5272:  MOVLW  05
5274:  MOVWF  x3B
5276:  MOVLW  1A
5278:  MOVWF  x3A
527A:  MOVLW  3C
527C:  MOVWF  x3C
527E:  MOVLW  2A
5280:  MOVWF  x3D
5282:  MOVLW  02
5284:  MOVWF  x3E
5286:  MOVWF  x3F
5288:  MOVLB  0
528A:  CALL   17EA
....................           
....................          visual=0; 
528E:  MOVLB  4
5290:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
5292:  BSF    F92.5
5294:  BTFSS  F80.5
5296:  BRA    52D4
....................          {   
....................             if(Testerilizacionp[unidad-1]<9) 
5298:  MOVLW  01
529A:  SUBWF  x8A,W
529C:  CLRF   03
529E:  ADDLW  A8
52A0:  MOVWF  FE9
52A2:  MOVLW  04
52A4:  ADDWFC 03,W
52A6:  MOVWF  FEA
52A8:  BTFSC  FEF.7
52AA:  BRA    52B2
52AC:  MOVF   FEF,W
52AE:  SUBLW  08
52B0:  BNC   52D4
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]++;visual=1; 
52B2:  MOVLW  1E
52B4:  MOVLB  5
52B6:  MOVWF  x3F
52B8:  MOVLB  0
52BA:  CALL   10C2
52BE:  MOVLW  01
52C0:  MOVLB  4
52C2:  SUBWF  x8A,W
52C4:  CLRF   03
52C6:  ADDLW  A8
52C8:  MOVWF  FE9
52CA:  MOVLW  04
52CC:  ADDWFC 03,W
52CE:  MOVWF  FEA
52D0:  INCF   FEF,F
52D2:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
52D4:  BSF    F96.0
52D6:  BTFSS  F84.0
52D8:  BRA    5316
....................          {   
....................             if(Testerilizacionp[unidad-1]>0) 
52DA:  MOVLW  01
52DC:  SUBWF  x8A,W
52DE:  CLRF   03
52E0:  ADDLW  A8
52E2:  MOVWF  FE9
52E4:  MOVLW  04
52E6:  ADDWFC 03,W
52E8:  MOVWF  FEA
52EA:  BTFSC  FEF.7
52EC:  BRA    5316
52EE:  MOVF   FEF,W
52F0:  SUBLW  00
52F2:  BC    5316
....................             { 
....................                delay_ms(30);Testerilizacionp[unidad-1]--;visual=1;      
52F4:  MOVLW  1E
52F6:  MOVLB  5
52F8:  MOVWF  x3F
52FA:  MOVLB  0
52FC:  CALL   10C2
5300:  MOVLW  01
5302:  MOVLB  4
5304:  SUBWF  x8A,W
5306:  CLRF   03
5308:  ADDLW  A8
530A:  MOVWF  FE9
530C:  MOVLW  04
530E:  ADDWFC 03,W
5310:  MOVWF  FEA
5312:  DECF   FEF,F
5314:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
5316:  BSF    F96.1
5318:  BTFSS  F84.1
531A:  BRA    532E
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
531C:  MOVLW  1E
531E:  MOVLB  5
5320:  MOVWF  x3F
5322:  MOVLB  0
5324:  CALL   10C2
5328:  MOVLB  4
532A:  DECF   x8A,F
532C:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
532E:  BSF    F96.2
5330:  BTFSS  F84.2
5332:  BRA    5404
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5334:  MOVLW  04
5336:  MOVLB  5
5338:  MOVWF  x3A
533A:  MOVLW  AF
533C:  MOVWF  x3F
533E:  MOVLB  0
5340:  CALL   10C2
5344:  MOVLB  5
5346:  DECFSZ x3A,F
5348:  BRA    533A
534A:  MOVLW  08
534C:  MOVLB  4
534E:  MOVWF  x89
5350:  MOVLB  5
5352:  CLRF   x3B
5354:  MOVLB  0
5356:  CALL   11BA
535A:  MOVLW  01
535C:  MOVLB  4
535E:  MOVWF  x90
5360:  BSF    x7C.4
....................             write_eeprom(0,Testerilizacionp[0]);write_eeprom(1,Testerilizacionp[1]); 
5362:  CLRF   FA9
5364:  MOVFF  4A8,FA8
5368:  BCF    FA6.6
536A:  BCF    FA6.7
536C:  BSF    FA6.2
536E:  MOVF   FF2,W
5370:  MOVWF  00
5372:  BCF    FF2.7
5374:  MOVLB  F
5376:  MOVLW  55
5378:  MOVWF  FA7
537A:  MOVLW  AA
537C:  MOVWF  FA7
537E:  BSF    FA6.1
5380:  BTFSC  FA6.1
5382:  BRA    5380
5384:  BCF    FA6.2
5386:  MOVF   00,W
5388:  IORWF  FF2,F
538A:  MOVLW  01
538C:  MOVWF  FA9
538E:  MOVFF  4A9,FA8
5392:  BCF    FA6.6
5394:  BCF    FA6.7
5396:  BSF    FA6.2
5398:  MOVF   FF2,W
539A:  MOVWF  00
539C:  BCF    FF2.7
539E:  MOVLW  55
53A0:  MOVWF  FA7
53A2:  MOVLW  AA
53A4:  MOVWF  FA7
53A6:  BSF    FA6.1
53A8:  BTFSC  FA6.1
53AA:  BRA    53A8
53AC:  BCF    FA6.2
53AE:  MOVF   00,W
53B0:  IORWF  FF2,F
....................             write_eeprom(2,Testerilizacionp[2]);write_eeprom(3,Testerilizacionp[3]); 
53B2:  MOVLW  02
53B4:  MOVWF  FA9
53B6:  MOVFF  4AA,FA8
53BA:  BCF    FA6.6
53BC:  BCF    FA6.7
53BE:  BSF    FA6.2
53C0:  MOVFF  FF2,00
53C4:  BCF    FF2.7
53C6:  MOVLW  55
53C8:  MOVWF  FA7
53CA:  MOVLW  AA
53CC:  MOVWF  FA7
53CE:  BSF    FA6.1
53D0:  BTFSC  FA6.1
53D2:  BRA    53D0
53D4:  BCF    FA6.2
53D6:  MOVF   00,W
53D8:  IORWF  FF2,F
53DA:  MOVLW  03
53DC:  MOVWF  FA9
53DE:  MOVFF  4AB,FA8
53E2:  BCF    FA6.6
53E4:  BCF    FA6.7
53E6:  BSF    FA6.2
53E8:  MOVFF  FF2,00
53EC:  BCF    FF2.7
53EE:  MOVLW  55
53F0:  MOVWF  FA7
53F2:  MOVLW  AA
53F4:  MOVWF  FA7
53F6:  BSF    FA6.1
53F8:  BTFSC  FA6.1
53FA:  BRA    53F8
53FC:  BCF    FA6.2
53FE:  MOVF   00,W
5400:  IORWF  FF2,F
5402:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==12){ // Menu de Tiempo de Secado 
5404:  MOVF   x89,W
5406:  SUBLW  0C
5408:  BTFSS  FD8.2
540A:  BRA    570E
....................       
....................       if(visual==1) 
540C:  BTFSS  x7C.4
540E:  BRA    559A
....................       { 
....................          if(unidad<1) 
5410:  MOVF   x8A,F
5412:  BNZ   5418
....................          {unidad=4;} 
5414:  MOVLW  04
5416:  MOVWF  x8A
....................           
....................          strcpy(Menus.Letra," Secado"); 
5418:  MOVLW  05
541A:  MOVWF  FEA
541C:  MOVLW  1A
541E:  MOVWF  FE9
5420:  MOVFF  FF2,53A
5424:  BCF    FF2.7
5426:  MOVLW  00
5428:  MOVLB  0
542A:  CALL   0C68
542E:  TBLRD*-
5430:  TBLRD*+
5432:  MOVF   FF5,W
5434:  MOVWF  FEE
5436:  IORLW  00
5438:  BNZ   5430
543A:  MOVLB  5
543C:  BTFSC  x3A.7
543E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5440:  MOVLW  05
5442:  MOVWF  x3B
5444:  MOVLW  1A
5446:  MOVWF  x3A
5448:  CLRF   x3C
544A:  CLRF   x3D
544C:  MOVLW  01
544E:  MOVWF  x3E
5450:  MOVLW  02
5452:  MOVWF  x3F
5454:  MOVLB  0
5456:  CALL   17EA
....................           
....................          if(unidad==4) 
545A:  MOVLB  4
545C:  MOVF   x8A,W
545E:  SUBLW  04
5460:  BNZ   5480
....................          {displayTiempo(Tsecadop[3],20,40,1,2);} 
5462:  MOVFF  4B3,53B
5466:  MOVLW  14
5468:  MOVLB  5
546A:  MOVWF  x3C
546C:  MOVLW  28
546E:  MOVWF  x3D
5470:  MOVLW  01
5472:  MOVWF  x3E
5474:  MOVLW  02
5476:  MOVWF  x3F
5478:  MOVLB  0
547A:  CALL   23C2
....................          else 
547E:  BRA    549A
....................          {displayTiempo(Tsecadop[3],20,40,0,2);} 
5480:  MOVFF  4B3,53B
5484:  MOVLW  14
5486:  MOVLB  5
5488:  MOVWF  x3C
548A:  MOVLW  28
548C:  MOVWF  x3D
548E:  CLRF   x3E
5490:  MOVLW  02
5492:  MOVWF  x3F
5494:  MOVLB  0
5496:  CALL   23C2
....................           
....................          if(unidad==3) 
549A:  MOVLB  4
549C:  MOVF   x8A,W
549E:  SUBLW  03
54A0:  BNZ   54BE
....................          {displayTiempo(Tsecadop[2],40,40,1,2);} 
54A2:  MOVFF  4B2,53B
54A6:  MOVLW  28
54A8:  MOVLB  5
54AA:  MOVWF  x3C
54AC:  MOVWF  x3D
54AE:  MOVLW  01
54B0:  MOVWF  x3E
54B2:  MOVLW  02
54B4:  MOVWF  x3F
54B6:  MOVLB  0
54B8:  CALL   23C2
....................          else 
54BC:  BRA    54D6
....................          {displayTiempo(Tsecadop[2],40,40,0,2);} 
54BE:  MOVFF  4B2,53B
54C2:  MOVLW  28
54C4:  MOVLB  5
54C6:  MOVWF  x3C
54C8:  MOVWF  x3D
54CA:  CLRF   x3E
54CC:  MOVLW  02
54CE:  MOVWF  x3F
54D0:  MOVLB  0
54D2:  CALL   23C2
....................           
....................          if(unidad==2) 
54D6:  MOVLB  4
54D8:  MOVF   x8A,W
54DA:  SUBLW  02
54DC:  BNZ   54FC
....................          {displayTiempo(Tsecadop[1],70,40,1,2);} 
54DE:  MOVFF  4B1,53B
54E2:  MOVLW  46
54E4:  MOVLB  5
54E6:  MOVWF  x3C
54E8:  MOVLW  28
54EA:  MOVWF  x3D
54EC:  MOVLW  01
54EE:  MOVWF  x3E
54F0:  MOVLW  02
54F2:  MOVWF  x3F
54F4:  MOVLB  0
54F6:  CALL   23C2
....................          else 
54FA:  BRA    5516
....................          {displayTiempo(Tsecadop[1],70,40,0,2);} 
54FC:  MOVFF  4B1,53B
5500:  MOVLW  46
5502:  MOVLB  5
5504:  MOVWF  x3C
5506:  MOVLW  28
5508:  MOVWF  x3D
550A:  CLRF   x3E
550C:  MOVLW  02
550E:  MOVWF  x3F
5510:  MOVLB  0
5512:  CALL   23C2
....................           
....................          if(unidad==1) 
5516:  MOVLB  4
5518:  DECFSZ x8A,W
551A:  BRA    553A
....................          {displayTiempo(Tsecadop[0],90,40,1,2);} 
551C:  MOVFF  4B0,53B
5520:  MOVLW  5A
5522:  MOVLB  5
5524:  MOVWF  x3C
5526:  MOVLW  28
5528:  MOVWF  x3D
552A:  MOVLW  01
552C:  MOVWF  x3E
552E:  MOVLW  02
5530:  MOVWF  x3F
5532:  MOVLB  0
5534:  CALL   23C2
....................          else 
5538:  BRA    5554
....................          {displayTiempo(Tsecadop[0],90,40,0,2);} 
553A:  MOVFF  4B0,53B
553E:  MOVLW  5A
5540:  MOVLB  5
5542:  MOVWF  x3C
5544:  MOVLW  28
5546:  MOVWF  x3D
5548:  CLRF   x3E
554A:  MOVLW  02
554C:  MOVWF  x3F
554E:  MOVLB  0
5550:  CALL   23C2
....................           
....................          strcpy(Menus.Letra,":"); 
5554:  MOVLW  05
5556:  MOVWF  FEA
5558:  MOVLW  1A
555A:  MOVWF  FE9
555C:  MOVFF  FF2,53A
5560:  BCF    FF2.7
5562:  MOVLW  00
5564:  CALL   06CA
5568:  TBLRD*-
556A:  TBLRD*+
556C:  MOVF   FF5,W
556E:  MOVWF  FEE
5570:  IORLW  00
5572:  BNZ   556A
5574:  MOVLB  5
5576:  BTFSC  x3A.7
5578:  BSF    FF2.7
....................          displayMenu(Menus.Letra,60,42,2,2);  
557A:  MOVLW  05
557C:  MOVWF  x3B
557E:  MOVLW  1A
5580:  MOVWF  x3A
5582:  MOVLW  3C
5584:  MOVWF  x3C
5586:  MOVLW  2A
5588:  MOVWF  x3D
558A:  MOVLW  02
558C:  MOVWF  x3E
558E:  MOVWF  x3F
5590:  MOVLB  0
5592:  CALL   17EA
....................           
....................          visual=0; 
5596:  MOVLB  4
5598:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
559A:  BSF    F92.5
559C:  BTFSS  F80.5
559E:  BRA    55DC
....................          {   
....................             if(Tsecadop[unidad-1]<9) 
55A0:  MOVLW  01
55A2:  SUBWF  x8A,W
55A4:  CLRF   03
55A6:  ADDLW  B0
55A8:  MOVWF  FE9
55AA:  MOVLW  04
55AC:  ADDWFC 03,W
55AE:  MOVWF  FEA
55B0:  BTFSC  FEF.7
55B2:  BRA    55BA
55B4:  MOVF   FEF,W
55B6:  SUBLW  08
55B8:  BNC   55DC
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]++;visual=1; 
55BA:  MOVLW  1E
55BC:  MOVLB  5
55BE:  MOVWF  x3F
55C0:  MOVLB  0
55C2:  CALL   10C2
55C6:  MOVLW  01
55C8:  MOVLB  4
55CA:  SUBWF  x8A,W
55CC:  CLRF   03
55CE:  ADDLW  B0
55D0:  MOVWF  FE9
55D2:  MOVLW  04
55D4:  ADDWFC 03,W
55D6:  MOVWF  FEA
55D8:  INCF   FEF,F
55DA:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
55DC:  BSF    F96.0
55DE:  BTFSS  F84.0
55E0:  BRA    561E
....................          {   
....................             if(Tsecadop[unidad-1]>0) 
55E2:  MOVLW  01
55E4:  SUBWF  x8A,W
55E6:  CLRF   03
55E8:  ADDLW  B0
55EA:  MOVWF  FE9
55EC:  MOVLW  04
55EE:  ADDWFC 03,W
55F0:  MOVWF  FEA
55F2:  BTFSC  FEF.7
55F4:  BRA    561E
55F6:  MOVF   FEF,W
55F8:  SUBLW  00
55FA:  BC    561E
....................             { 
....................                delay_ms(30);Tsecadop[unidad-1]--;visual=1;      
55FC:  MOVLW  1E
55FE:  MOVLB  5
5600:  MOVWF  x3F
5602:  MOVLB  0
5604:  CALL   10C2
5608:  MOVLW  01
560A:  MOVLB  4
560C:  SUBWF  x8A,W
560E:  CLRF   03
5610:  ADDLW  B0
5612:  MOVWF  FE9
5614:  MOVLW  04
5616:  ADDWFC 03,W
5618:  MOVWF  FEA
561A:  DECF   FEF,F
561C:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
561E:  BSF    F96.1
5620:  BTFSS  F84.1
5622:  BRA    5636
....................          {   
....................             delay_ms(30);unidad--;visual=1; 
5624:  MOVLW  1E
5626:  MOVLB  5
5628:  MOVWF  x3F
562A:  MOVLB  0
562C:  CALL   10C2
5630:  MOVLB  4
5632:  DECF   x8A,F
5634:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
5636:  BSF    F96.2
5638:  BTFSS  F84.2
563A:  BRA    570E
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
563C:  MOVLW  04
563E:  MOVLB  5
5640:  MOVWF  x3A
5642:  MOVLW  AF
5644:  MOVWF  x3F
5646:  MOVLB  0
5648:  CALL   10C2
564C:  MOVLB  5
564E:  DECFSZ x3A,F
5650:  BRA    5642
5652:  MOVLW  08
5654:  MOVLB  4
5656:  MOVWF  x89
5658:  MOVLB  5
565A:  CLRF   x3B
565C:  MOVLB  0
565E:  CALL   11BA
5662:  MOVLW  01
5664:  MOVLB  4
5666:  MOVWF  x90
5668:  BSF    x7C.4
....................             write_eeprom(4,Tsecadop[0]);write_eeprom(5,Tsecadop[1]); 
566A:  MOVLW  04
566C:  MOVWF  FA9
566E:  MOVFF  4B0,FA8
5672:  BCF    FA6.6
5674:  BCF    FA6.7
5676:  BSF    FA6.2
5678:  MOVF   FF2,W
567A:  MOVWF  00
567C:  BCF    FF2.7
567E:  MOVLB  F
5680:  MOVLW  55
5682:  MOVWF  FA7
5684:  MOVLW  AA
5686:  MOVWF  FA7
5688:  BSF    FA6.1
568A:  BTFSC  FA6.1
568C:  BRA    568A
568E:  BCF    FA6.2
5690:  MOVF   00,W
5692:  IORWF  FF2,F
5694:  MOVLW  05
5696:  MOVWF  FA9
5698:  MOVFF  4B1,FA8
569C:  BCF    FA6.6
569E:  BCF    FA6.7
56A0:  BSF    FA6.2
56A2:  MOVF   FF2,W
56A4:  MOVWF  00
56A6:  BCF    FF2.7
56A8:  MOVLW  55
56AA:  MOVWF  FA7
56AC:  MOVLW  AA
56AE:  MOVWF  FA7
56B0:  BSF    FA6.1
56B2:  BTFSC  FA6.1
56B4:  BRA    56B2
56B6:  BCF    FA6.2
56B8:  MOVF   00,W
56BA:  IORWF  FF2,F
....................             write_eeprom(6,Tsecadop[2]);write_eeprom(7,Tsecadop[3]); 
56BC:  MOVLW  06
56BE:  MOVWF  FA9
56C0:  MOVFF  4B2,FA8
56C4:  BCF    FA6.6
56C6:  BCF    FA6.7
56C8:  BSF    FA6.2
56CA:  MOVFF  FF2,00
56CE:  BCF    FF2.7
56D0:  MOVLW  55
56D2:  MOVWF  FA7
56D4:  MOVLW  AA
56D6:  MOVWF  FA7
56D8:  BSF    FA6.1
56DA:  BTFSC  FA6.1
56DC:  BRA    56DA
56DE:  BCF    FA6.2
56E0:  MOVF   00,W
56E2:  IORWF  FF2,F
56E4:  MOVLW  07
56E6:  MOVWF  FA9
56E8:  MOVFF  4B3,FA8
56EC:  BCF    FA6.6
56EE:  BCF    FA6.7
56F0:  BSF    FA6.2
56F2:  MOVFF  FF2,00
56F6:  BCF    FF2.7
56F8:  MOVLW  55
56FA:  MOVWF  FA7
56FC:  MOVLW  AA
56FE:  MOVWF  FA7
5700:  BSF    FA6.1
5702:  BTFSC  FA6.1
5704:  BRA    5702
5706:  BCF    FA6.2
5708:  MOVF   00,W
570A:  IORWF  FF2,F
570C:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==13){ // Menu de Temperatura 
570E:  MOVF   x89,W
5710:  SUBLW  0D
5712:  BTFSS  FD8.2
5714:  BRA    584C
....................       
....................       if(visual==1) 
5716:  BTFSS  x7C.4
5718:  BRA    5780
....................       { 
....................          glcd_fillScreen(OFF); 
571A:  MOVLB  5
571C:  CLRF   x3B
571E:  MOVLB  0
5720:  CALL   11BA
....................          strcpy(Menus.Letra,"Temperatura"); 
5724:  MOVLW  05
5726:  MOVWF  FEA
5728:  MOVLW  1A
572A:  MOVWF  FE9
572C:  MOVFF  FF2,53A
5730:  BCF    FF2.7
5732:  MOVLW  00
5734:  CALL   0BA8
5738:  TBLRD*-
573A:  TBLRD*+
573C:  MOVF   FF5,W
573E:  MOVWF  FEE
5740:  IORLW  00
5742:  BNZ   573A
5744:  MOVLB  5
5746:  BTFSC  x3A.7
5748:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
574A:  MOVLW  05
574C:  MOVWF  x3B
574E:  MOVLW  1A
5750:  MOVWF  x3A
5752:  CLRF   x3C
5754:  CLRF   x3D
5756:  MOVLW  01
5758:  MOVWF  x3E
575A:  MOVLW  02
575C:  MOVWF  x3F
575E:  MOVLB  0
5760:  CALL   17EA
....................           
....................          displayTiempo(Setpoint,30,30,0,3); 
5764:  MOVFF  48E,53B
5768:  MOVLW  1E
576A:  MOVLB  5
576C:  MOVWF  x3C
576E:  MOVWF  x3D
5770:  CLRF   x3E
5772:  MOVLW  03
5774:  MOVWF  x3F
5776:  MOVLB  0
5778:  CALL   23C2
....................           
....................          visual=0; 
577C:  MOVLB  4
577E:  BCF    x7C.4
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
5780:  BSF    F92.5
5782:  BTFSS  F80.5
5784:  BRA    57B8
....................          {   
....................             if(Setpoint<134) 
5786:  MOVF   x8E,W
5788:  SUBLW  85
578A:  BNC   57B8
....................             { 
....................                if(Setpoint<100) 
578C:  MOVF   x8E,W
578E:  SUBLW  63
5790:  BNC   57A6
....................                { 
....................                   Setpoint=100;delay_ms(100);visual=1; 
5792:  MOVLW  64
5794:  MOVWF  x8E
5796:  MOVLB  5
5798:  MOVWF  x3F
579A:  MOVLB  0
579C:  CALL   10C2
57A0:  MOVLB  4
57A2:  BSF    x7C.4
....................                } 
....................                else 
57A4:  BRA    57B8
....................                { 
....................                   delay_ms(30);Setpoint++;visual=1; 
57A6:  MOVLW  1E
57A8:  MOVLB  5
57AA:  MOVWF  x3F
57AC:  MOVLB  0
57AE:  CALL   10C2
57B2:  MOVLB  4
57B4:  INCF   x8E,F
57B6:  BSF    x7C.4
....................                } 
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
57B8:  BSF    F96.0
57BA:  BTFSS  F84.0
57BC:  BRA    57D6
....................          {   
....................             if(Setpoint>105) 
57BE:  MOVF   x8E,W
57C0:  SUBLW  69
57C2:  BC    57D6
....................             { 
....................                delay_ms(30);Setpoint--;visual=1;      
57C4:  MOVLW  1E
57C6:  MOVLB  5
57C8:  MOVWF  x3F
57CA:  MOVLB  0
57CC:  CALL   10C2
57D0:  MOVLB  4
57D2:  DECF   x8E,F
57D4:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
57D6:  BSF    F96.1
57D8:  BTFSS  F84.1
57DA:  BRA    57EC
....................          {   
....................             delay_ms(30);visual=1; 
57DC:  MOVLW  1E
57DE:  MOVLB  5
57E0:  MOVWF  x3F
57E2:  MOVLB  0
57E4:  CALL   10C2
57E8:  MOVLB  4
57EA:  BSF    x7C.4
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
57EC:  BSF    F96.2
57EE:  BTFSS  F84.2
57F0:  BRA    584C
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
57F2:  MOVLW  04
57F4:  MOVLB  5
57F6:  MOVWF  x3A
57F8:  MOVLW  AF
57FA:  MOVWF  x3F
57FC:  MOVLB  0
57FE:  CALL   10C2
5802:  MOVLB  5
5804:  DECFSZ x3A,F
5806:  BRA    57F8
5808:  MOVLW  08
580A:  MOVLB  4
580C:  MOVWF  x89
580E:  MOVLB  5
5810:  CLRF   x3B
5812:  MOVLB  0
5814:  CALL   11BA
5818:  MOVLW  01
581A:  MOVLB  4
581C:  MOVWF  x90
581E:  BSF    x7C.4
....................             write_eeprom(8,Setpoint); 
5820:  MOVLW  08
5822:  MOVWF  FA9
5824:  MOVFF  48E,FA8
5828:  BCF    FA6.6
582A:  BCF    FA6.7
582C:  BSF    FA6.2
582E:  MOVF   FF2,W
5830:  MOVWF  00
5832:  BCF    FF2.7
5834:  MOVLB  F
5836:  MOVLW  55
5838:  MOVWF  FA7
583A:  MOVLW  AA
583C:  MOVWF  FA7
583E:  BSF    FA6.1
5840:  BTFSC  FA6.1
5842:  BRA    5840
5844:  BCF    FA6.2
5846:  MOVF   00,W
5848:  IORWF  FF2,F
584A:  MOVLB  4
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==14){ // Menu de Desfogue 
584C:  MOVF   x89,W
584E:  SUBLW  0E
5850:  BTFSS  FD8.2
5852:  BRA    5B36
....................       
....................       if(visual==1) 
5854:  BTFSS  x7C.4
5856:  BRA    58B8
....................       {          
....................          strcpy(Menus.Letra," Desfogue"); 
5858:  MOVLW  05
585A:  MOVWF  FEA
585C:  MOVLW  1A
585E:  MOVWF  FE9
5860:  MOVFF  FF2,53A
5864:  BCF    FF2.7
5866:  MOVLW  00
5868:  MOVLB  0
586A:  CALL   0C8A
586E:  TBLRD*-
5870:  TBLRD*+
5872:  MOVF   FF5,W
5874:  MOVWF  FEE
5876:  IORLW  00
5878:  BNZ   5870
587A:  MOVLB  5
587C:  BTFSC  x3A.7
587E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5880:  MOVLW  05
5882:  MOVWF  x3B
5884:  MOVLW  1A
5886:  MOVWF  x3A
5888:  CLRF   x3C
588A:  CLRF   x3D
588C:  MOVLW  01
588E:  MOVWF  x3E
5890:  MOVLW  02
5892:  MOVWF  x3F
5894:  MOVLB  0
5896:  CALL   17EA
....................           
....................          displayTiempo(Nivel,50,40,0,2); 
589A:  MOVFF  49C,53B
589E:  MOVLW  32
58A0:  MOVLB  5
58A2:  MOVWF  x3C
58A4:  MOVLW  28
58A6:  MOVWF  x3D
58A8:  CLRF   x3E
58AA:  MOVLW  02
58AC:  MOVWF  x3F
58AE:  MOVLB  0
58B0:  CALL   23C2
....................           
....................          visual=0; 
58B4:  MOVLB  4
58B6:  BCF    x7C.4
....................       } 
....................        
....................        
....................          if(UP)//Si oprime hacia arriba 
58B8:  BSF    F92.5
58BA:  BTFSS  F80.5
58BC:  BRA    58DE
....................          {   
....................             if(Nivel<6) 
58BE:  MOVF   x9D,F
58C0:  BNZ   58DE
58C2:  MOVF   x9C,W
58C4:  SUBLW  05
58C6:  BNC   58DE
....................             { 
....................                delay_ms(30);Nivel++;visual=1; 
58C8:  MOVLW  1E
58CA:  MOVLB  5
58CC:  MOVWF  x3F
58CE:  MOVLB  0
58D0:  CALL   10C2
58D4:  MOVLB  4
58D6:  INCF   x9C,F
58D8:  BTFSC  FD8.2
58DA:  INCF   x9D,F
58DC:  BSF    x7C.4
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
58DE:  BSF    F96.0
58E0:  BTFSS  F84.0
58E2:  BRA    5906
....................          {   
....................             if(Nivel>1) 
58E4:  MOVF   x9D,F
58E6:  BNZ   58EE
58E8:  MOVF   x9C,W
58EA:  SUBLW  01
58EC:  BC    5906
....................             { 
....................                delay_ms(30);Nivel--;visual=1;      
58EE:  MOVLW  1E
58F0:  MOVLB  5
58F2:  MOVWF  x3F
58F4:  MOVLB  0
58F6:  CALL   10C2
58FA:  MOVLB  4
58FC:  MOVF   x9C,W
58FE:  BTFSC  FD8.2
5900:  DECF   x9D,F
5902:  DECF   x9C,F
5904:  BSF    x7C.4
....................             } 
....................          } 
....................           
....................          if(desfoguelento==1) 
5906:  BTFSS  x7C.5
5908:  BRA    5AC6
....................          { 
....................             if(RIGHT)//Si oprime SET 
590A:  BSF    F96.1
590C:  BTFSS  F84.1
590E:  BRA    5AC4
....................             {   
....................                write_eeprom(9,Nivel); 
5910:  MOVLW  09
5912:  MOVWF  FA9
5914:  MOVFF  49C,FA8
5918:  BCF    FA6.6
591A:  BCF    FA6.7
591C:  BSF    FA6.2
591E:  MOVF   FF2,W
5920:  MOVWF  00
5922:  BCF    FF2.7
5924:  MOVLB  F
5926:  MOVLW  55
5928:  MOVWF  FA7
592A:  MOVLW  AA
592C:  MOVWF  FA7
592E:  BSF    FA6.1
5930:  BTFSC  FA6.1
5932:  BRA    5930
5934:  BCF    FA6.2
5936:  MOVF   00,W
5938:  IORWF  FF2,F
....................                Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
593A:  MOVLW  14
593C:  MOVLB  4
593E:  MOVWF  x89
5940:  MOVLW  0F
5942:  MOVLB  5
5944:  MOVWF  x4C
5946:  MOVLW  12
5948:  MOVWF  x4D
594A:  MOVLW  1E
594C:  MOVWF  x4E
594E:  MOVLW  35
5950:  MOVWF  x4F
5952:  CLRF   x50
5954:  MOVLW  01
5956:  MOVWF  x51
5958:  MOVLB  0
595A:  CALL   1728
595E:  MOVLB  4
5960:  CLRF   x92
5962:  MOVLW  C0
5964:  IORWF  FF2,F
5966:  MOVLB  5
5968:  CLRF   x3B
596A:  MOVLB  0
596C:  CALL   11BA
....................                strcpy(Menus.Letra,"Calentando"); 
5970:  MOVLW  05
5972:  MOVWF  FEA
5974:  MOVLW  1A
5976:  MOVWF  FE9
5978:  MOVFF  FF2,53A
597C:  BCF    FF2.7
597E:  MOVLW  00
5980:  CALL   0972
5984:  TBLRD*-
5986:  TBLRD*+
5988:  MOVF   FF5,W
598A:  MOVWF  FEE
598C:  IORLW  00
598E:  BNZ   5986
5990:  MOVLB  5
5992:  BTFSC  x3A.7
5994:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
5996:  MOVLW  05
5998:  MOVWF  x3B
599A:  MOVLW  1A
599C:  MOVWF  x3A
599E:  CLRF   x3C
59A0:  MOVLW  37
59A2:  MOVWF  x3D
59A4:  MOVLW  02
59A6:  MOVWF  x3E
59A8:  MOVLW  01
59AA:  MOVWF  x3F
59AC:  MOVLB  0
59AE:  CALL   17EA
....................                glcd_rect(15, 18, 30, 53, NO, ON); 
59B2:  MOVLW  0F
59B4:  MOVLB  5
59B6:  MOVWF  x4C
59B8:  MOVLW  12
59BA:  MOVWF  x4D
59BC:  MOVLW  1E
59BE:  MOVWF  x4E
59C0:  MOVLW  35
59C2:  MOVWF  x4F
59C4:  CLRF   x50
59C6:  MOVLW  01
59C8:  MOVWF  x51
59CA:  MOVLB  0
59CC:  CALL   1728
....................                glcd_imagen(5); 
59D0:  MOVLW  05
59D2:  MOVLB  5
59D4:  MOVWF  x3A
59D6:  MOVLB  0
59D8:  CALL   2016
....................                strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
59DC:  MOVLW  05
59DE:  MOVWF  FEA
59E0:  MOVLW  1A
59E2:  MOVWF  FE9
59E4:  MOVFF  FF2,53A
59E8:  BCF    FF2.7
59EA:  MOVLW  00
59EC:  CALL   0998
59F0:  TBLRD*-
59F2:  TBLRD*+
59F4:  MOVF   FF5,W
59F6:  MOVWF  FEE
59F8:  IORLW  00
59FA:  BNZ   59F2
59FC:  MOVLB  5
59FE:  BTFSC  x3A.7
5A00:  BSF    FF2.7
5A02:  MOVLW  05
5A04:  MOVWF  x3B
5A06:  MOVLW  1A
5A08:  MOVWF  x3A
5A0A:  CLRF   x3C
5A0C:  CLRF   x3D
5A0E:  MOVLW  02
5A10:  MOVWF  x3E
5A12:  MOVLW  01
5A14:  MOVWF  x3F
5A16:  MOVLB  0
5A18:  CALL   17EA
....................                strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5A1C:  MOVLW  05
5A1E:  MOVWF  FEA
5A20:  MOVLW  1A
5A22:  MOVWF  FE9
5A24:  MOVFF  FF2,53A
5A28:  BCF    FF2.7
5A2A:  MOVLW  00
5A2C:  CALL   09BA
5A30:  TBLRD*-
5A32:  TBLRD*+
5A34:  MOVF   FF5,W
5A36:  MOVWF  FEE
5A38:  IORLW  00
5A3A:  BNZ   5A32
5A3C:  MOVLB  5
5A3E:  BTFSC  x3A.7
5A40:  BSF    FF2.7
5A42:  MOVLW  05
5A44:  MOVWF  x3B
5A46:  MOVLW  1A
5A48:  MOVWF  x3A
5A4A:  CLRF   x3C
5A4C:  MOVLW  08
5A4E:  MOVWF  x3D
5A50:  MOVLW  02
5A52:  MOVWF  x3E
5A54:  MOVLW  01
5A56:  MOVWF  x3F
5A58:  MOVLB  0
5A5A:  CALL   17EA
....................                glcd_circle(95,40,2,NO,ON); 
5A5E:  MOVLW  5F
5A60:  MOVLB  5
5A62:  MOVWF  x3A
5A64:  MOVLW  28
5A66:  MOVWF  x3B
5A68:  MOVLW  02
5A6A:  MOVWF  x3C
5A6C:  CLRF   x3D
5A6E:  MOVLW  01
5A70:  MOVWF  x3E
5A72:  MOVLB  0
5A74:  CALL   2112
....................                strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
5A78:  MOVLW  05
5A7A:  MOVWF  FEA
5A7C:  MOVLW  1A
5A7E:  MOVWF  FE9
5A80:  MOVFF  FF2,53A
5A84:  BCF    FF2.7
5A86:  MOVLW  00
5A88:  CALL   09DC
5A8C:  TBLRD*-
5A8E:  TBLRD*+
5A90:  MOVF   FF5,W
5A92:  MOVWF  FEE
5A94:  IORLW  00
5A96:  BNZ   5A8E
5A98:  MOVLB  5
5A9A:  BTFSC  x3A.7
5A9C:  BSF    FF2.7
5A9E:  MOVLW  05
5AA0:  MOVWF  x3B
5AA2:  MOVLW  1A
5AA4:  MOVWF  x3A
5AA6:  MOVLW  66
5AA8:  MOVWF  x3C
5AAA:  MOVLW  28
5AAC:  MOVWF  x3D
5AAE:  MOVLW  02
5AB0:  MOVWF  x3E
5AB2:  MOVWF  x3F
5AB4:  MOVLB  0
5AB6:  CALL   17EA
....................                MuestraTiemposProgramados(); 
5ABA:  CALL   2512
....................                EnviarCodigo(); 
5ABE:  CALL   1AD0
5AC2:  MOVLB  4
....................             }       
....................          } 
....................          else 
5AC4:  BRA    5B36
....................          { 
....................             if(LEFT)//Si oprime boton de Toma. 
5AC6:  BSF    F96.2
5AC8:  BTFSS  F84.2
5ACA:  BRA    5B36
....................             { 
....................                if(Nivel<6) 
5ACC:  MOVF   x9D,F
5ACE:  BNZ   5ADA
5AD0:  MOVF   x9C,W
5AD2:  SUBLW  05
5AD4:  BNC   5ADA
....................                { 
....................                   desfoguelento=1; 
5AD6:  BSF    x7C.5
....................                } 
....................                else 
5AD8:  BRA    5ADC
....................                { 
....................                   desfoguelento=0; 
5ADA:  BCF    x7C.5
....................                } 
....................                delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5ADC:  MOVLW  04
5ADE:  MOVLB  5
5AE0:  MOVWF  x3A
5AE2:  MOVLW  AF
5AE4:  MOVWF  x3F
5AE6:  MOVLB  0
5AE8:  CALL   10C2
5AEC:  MOVLB  5
5AEE:  DECFSZ x3A,F
5AF0:  BRA    5AE2
5AF2:  MOVLW  08
5AF4:  MOVLB  4
5AF6:  MOVWF  x89
5AF8:  MOVLB  5
5AFA:  CLRF   x3B
5AFC:  MOVLB  0
5AFE:  CALL   11BA
5B02:  MOVLW  01
5B04:  MOVLB  4
5B06:  MOVWF  x90
5B08:  BSF    x7C.4
....................                write_eeprom(9,Nivel); 
5B0A:  MOVLW  09
5B0C:  MOVWF  FA9
5B0E:  MOVFF  49C,FA8
5B12:  BCF    FA6.6
5B14:  BCF    FA6.7
5B16:  BSF    FA6.2
5B18:  MOVF   FF2,W
5B1A:  MOVWF  00
5B1C:  BCF    FF2.7
5B1E:  MOVLB  F
5B20:  MOVLW  55
5B22:  MOVWF  FA7
5B24:  MOVLW  AA
5B26:  MOVWF  FA7
5B28:  BSF    FA6.1
5B2A:  BTFSC  FA6.1
5B2C:  BRA    5B2A
5B2E:  BCF    FA6.2
5B30:  MOVF   00,W
5B32:  IORWF  FF2,F
5B34:  MOVLB  4
....................             } 
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==15){ //Menu de Continuar 
5B36:  MOVF   x89,W
5B38:  SUBLW  0F
5B3A:  BTFSS  FD8.2
5B3C:  BRA    5E7A
....................        
....................       if(visual==1) 
5B3E:  BTFSS  x7C.4
5B40:  BRA    5CA6
....................       { 
....................          strcpy(Menus.Letra,"Continuar"); 
5B42:  MOVLW  05
5B44:  MOVWF  FEA
5B46:  MOVLW  1A
5B48:  MOVWF  FE9
5B4A:  MOVFF  FF2,53A
5B4E:  BCF    FF2.7
5B50:  MOVLW  00
5B52:  MOVLB  0
5B54:  CALL   0BFA
5B58:  TBLRD*-
5B5A:  TBLRD*+
5B5C:  MOVF   FF5,W
5B5E:  MOVWF  FEE
5B60:  IORLW  00
5B62:  BNZ   5B5A
5B64:  MOVLB  5
5B66:  BTFSC  x3A.7
5B68:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
5B6A:  MOVLW  05
5B6C:  MOVWF  x3B
5B6E:  MOVLW  1A
5B70:  MOVWF  x3A
5B72:  CLRF   x3C
5B74:  CLRF   x3D
5B76:  MOVLW  01
5B78:  MOVWF  x3E
5B7A:  MOVLW  02
5B7C:  MOVWF  x3F
5B7E:  MOVLB  0
5B80:  CALL   17EA
....................           
....................          if(Opcion==2) 
5B84:  MOVLB  4
5B86:  MOVF   x90,W
5B88:  SUBLW  02
5B8A:  BNZ   5C16
....................          {strcpy(Menus.Letra,"SI"); 
5B8C:  MOVLW  05
5B8E:  MOVWF  FEA
5B90:  MOVLW  1A
5B92:  MOVWF  FE9
5B94:  MOVFF  FF2,53A
5B98:  BCF    FF2.7
5B9A:  MOVLW  00
5B9C:  MOVLB  0
5B9E:  CALL   0CAE
5BA2:  TBLRD*-
5BA4:  TBLRD*+
5BA6:  MOVF   FF5,W
5BA8:  MOVWF  FEE
5BAA:  IORLW  00
5BAC:  BNZ   5BA4
5BAE:  MOVLB  5
5BB0:  BTFSC  x3A.7
5BB2:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,1,2); 
5BB4:  MOVLW  05
5BB6:  MOVWF  x3B
5BB8:  MOVLW  1A
5BBA:  MOVWF  x3A
5BBC:  MOVLW  32
5BBE:  MOVWF  x3C
5BC0:  MOVLW  19
5BC2:  MOVWF  x3D
5BC4:  MOVLW  01
5BC6:  MOVWF  x3E
5BC8:  MOVLW  02
5BCA:  MOVWF  x3F
5BCC:  MOVLB  0
5BCE:  CALL   17EA
....................          strcpy(Menus.Letra,"NO"); 
5BD2:  MOVLW  05
5BD4:  MOVWF  FEA
5BD6:  MOVLW  1A
5BD8:  MOVWF  FE9
5BDA:  MOVFF  FF2,53A
5BDE:  BCF    FF2.7
5BE0:  MOVLW  00
5BE2:  CALL   0CCC
5BE6:  TBLRD*-
5BE8:  TBLRD*+
5BEA:  MOVF   FF5,W
5BEC:  MOVWF  FEE
5BEE:  IORLW  00
5BF0:  BNZ   5BE8
5BF2:  MOVLB  5
5BF4:  BTFSC  x3A.7
5BF6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,0,2); 
5BF8:  MOVLW  05
5BFA:  MOVWF  x3B
5BFC:  MOVLW  1A
5BFE:  MOVWF  x3A
5C00:  MOVLW  32
5C02:  MOVWF  x3C
5C04:  MOVLW  2D
5C06:  MOVWF  x3D
5C08:  CLRF   x3E
5C0A:  MOVLW  02
5C0C:  MOVWF  x3F
5C0E:  MOVLB  0
5C10:  CALL   17EA
5C14:  MOVLB  4
....................          } 
....................          if(Opcion==1) 
5C16:  DECFSZ x90,W
5C18:  BRA    5CA4
....................          {strcpy(Menus.Letra,"SI"); 
5C1A:  MOVLW  05
5C1C:  MOVWF  FEA
5C1E:  MOVLW  1A
5C20:  MOVWF  FE9
5C22:  MOVFF  FF2,53A
5C26:  BCF    FF2.7
5C28:  MOVLW  00
5C2A:  MOVLB  0
5C2C:  CALL   0CAE
5C30:  TBLRD*-
5C32:  TBLRD*+
5C34:  MOVF   FF5,W
5C36:  MOVWF  FEE
5C38:  IORLW  00
5C3A:  BNZ   5C32
5C3C:  MOVLB  5
5C3E:  BTFSC  x3A.7
5C40:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,25,0,2); 
5C42:  MOVLW  05
5C44:  MOVWF  x3B
5C46:  MOVLW  1A
5C48:  MOVWF  x3A
5C4A:  MOVLW  32
5C4C:  MOVWF  x3C
5C4E:  MOVLW  19
5C50:  MOVWF  x3D
5C52:  CLRF   x3E
5C54:  MOVLW  02
5C56:  MOVWF  x3F
5C58:  MOVLB  0
5C5A:  CALL   17EA
....................          strcpy(Menus.Letra,"NO"); 
5C5E:  MOVLW  05
5C60:  MOVWF  FEA
5C62:  MOVLW  1A
5C64:  MOVWF  FE9
5C66:  MOVFF  FF2,53A
5C6A:  BCF    FF2.7
5C6C:  MOVLW  00
5C6E:  CALL   0CCC
5C72:  TBLRD*-
5C74:  TBLRD*+
5C76:  MOVF   FF5,W
5C78:  MOVWF  FEE
5C7A:  IORLW  00
5C7C:  BNZ   5C74
5C7E:  MOVLB  5
5C80:  BTFSC  x3A.7
5C82:  BSF    FF2.7
....................          displayMenu(Menus.Letra,50,45,1,2); 
5C84:  MOVLW  05
5C86:  MOVWF  x3B
5C88:  MOVLW  1A
5C8A:  MOVWF  x3A
5C8C:  MOVLW  32
5C8E:  MOVWF  x3C
5C90:  MOVLW  2D
5C92:  MOVWF  x3D
5C94:  MOVLW  01
5C96:  MOVWF  x3E
5C98:  MOVLW  02
5C9A:  MOVWF  x3F
5C9C:  MOVLB  0
5C9E:  CALL   17EA
5CA2:  MOVLB  4
....................          } 
....................          visual=0; 
5CA4:  BCF    x7C.4
....................       } 
....................        
....................          
....................       if(UP)//Si oprime hacia arriba 
5CA6:  BSF    F92.5
5CA8:  BTFSS  F80.5
5CAA:  BRA    5CB6
....................       { 
....................          if(Opcion<2) 
5CAC:  MOVF   x90,W
5CAE:  SUBLW  01
5CB0:  BNC   5CB4
....................          { 
....................             Opcion++; 
5CB2:  INCF   x90,F
....................          } 
....................          visual=1; 
5CB4:  BSF    x7C.4
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5CB6:  BSF    F96.0
5CB8:  BTFSS  F84.0
5CBA:  BRA    5CC6
....................       {   
....................          if(Opcion>1) 
5CBC:  MOVF   x90,W
5CBE:  SUBLW  01
5CC0:  BC    5CC4
....................          { 
....................             Opcion--; 
5CC2:  DECF   x90,F
....................          }   
....................          visual=1; 
5CC4:  BSF    x7C.4
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
5CC6:  BSF    F96.1
5CC8:  BTFSS  F84.1
5CCA:  BRA    5E44
....................       {   
....................          if(Opcion==2) 
5CCC:  MOVF   x90,W
5CCE:  SUBLW  02
5CD0:  BTFSS  FD8.2
5CD2:  BRA    5E16
....................          { 
....................             Menu=20;glcd_rect(15, 18, 30, 53, NO, ON);tiempo_secado=0;enable_interrupts(global);glcd_fillScreen(OFF); 
5CD4:  MOVLW  14
5CD6:  MOVWF  x89
5CD8:  MOVLW  0F
5CDA:  MOVLB  5
5CDC:  MOVWF  x4C
5CDE:  MOVLW  12
5CE0:  MOVWF  x4D
5CE2:  MOVLW  1E
5CE4:  MOVWF  x4E
5CE6:  MOVLW  35
5CE8:  MOVWF  x4F
5CEA:  CLRF   x50
5CEC:  MOVLW  01
5CEE:  MOVWF  x51
5CF0:  MOVLB  0
5CF2:  CALL   1728
5CF6:  MOVLB  4
5CF8:  CLRF   x92
5CFA:  MOVLW  C0
5CFC:  IORWF  FF2,F
5CFE:  MOVLB  5
5D00:  CLRF   x3B
5D02:  MOVLB  0
5D04:  CALL   11BA
....................             strcpy(Menus.Letra,"Calentando"); 
5D08:  MOVLW  05
5D0A:  MOVWF  FEA
5D0C:  MOVLW  1A
5D0E:  MOVWF  FE9
5D10:  MOVFF  FF2,53A
5D14:  BCF    FF2.7
5D16:  MOVLW  00
5D18:  CALL   0972
5D1C:  TBLRD*-
5D1E:  TBLRD*+
5D20:  MOVF   FF5,W
5D22:  MOVWF  FEE
5D24:  IORLW  00
5D26:  BNZ   5D1E
5D28:  MOVLB  5
5D2A:  BTFSC  x3A.7
5D2C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
5D2E:  MOVLW  05
5D30:  MOVWF  x3B
5D32:  MOVLW  1A
5D34:  MOVWF  x3A
5D36:  CLRF   x3C
5D38:  MOVLW  37
5D3A:  MOVWF  x3D
5D3C:  MOVLW  02
5D3E:  MOVWF  x3E
5D40:  MOVLW  01
5D42:  MOVWF  x3F
5D44:  MOVLB  0
5D46:  CALL   17EA
....................             glcd_rect(15, 18, 30, 53, NO, ON); 
5D4A:  MOVLW  0F
5D4C:  MOVLB  5
5D4E:  MOVWF  x4C
5D50:  MOVLW  12
5D52:  MOVWF  x4D
5D54:  MOVLW  1E
5D56:  MOVWF  x4E
5D58:  MOVLW  35
5D5A:  MOVWF  x4F
5D5C:  CLRF   x50
5D5E:  MOVLW  01
5D60:  MOVWF  x51
5D62:  MOVLB  0
5D64:  CALL   1728
....................             glcd_imagen(5); 
5D68:  MOVLW  05
5D6A:  MOVLB  5
5D6C:  MOVWF  x3A
5D6E:  MOVLB  0
5D70:  CALL   2016
....................             strcpy(Menus.Letra,"T est:");displayMenu(Menus.Letra,0,0,2,1); 
5D74:  MOVLW  05
5D76:  MOVWF  FEA
5D78:  MOVLW  1A
5D7A:  MOVWF  FE9
5D7C:  MOVFF  FF2,53A
5D80:  BCF    FF2.7
5D82:  MOVLW  00
5D84:  CALL   0998
5D88:  TBLRD*-
5D8A:  TBLRD*+
5D8C:  MOVF   FF5,W
5D8E:  MOVWF  FEE
5D90:  IORLW  00
5D92:  BNZ   5D8A
5D94:  MOVLB  5
5D96:  BTFSC  x3A.7
5D98:  BSF    FF2.7
5D9A:  MOVLW  05
5D9C:  MOVWF  x3B
5D9E:  MOVLW  1A
5DA0:  MOVWF  x3A
5DA2:  CLRF   x3C
5DA4:  CLRF   x3D
5DA6:  MOVLW  02
5DA8:  MOVWF  x3E
5DAA:  MOVLW  01
5DAC:  MOVWF  x3F
5DAE:  MOVLB  0
5DB0:  CALL   17EA
....................             strcpy(Menus.Letra,"T sec:");displayMenu(Menus.Letra,0,8,2,1); 
5DB4:  MOVLW  05
5DB6:  MOVWF  FEA
5DB8:  MOVLW  1A
5DBA:  MOVWF  FE9
5DBC:  MOVFF  FF2,53A
5DC0:  BCF    FF2.7
5DC2:  MOVLW  00
5DC4:  CALL   09BA
5DC8:  TBLRD*-
5DCA:  TBLRD*+
5DCC:  MOVF   FF5,W
5DCE:  MOVWF  FEE
5DD0:  IORLW  00
5DD2:  BNZ   5DCA
5DD4:  MOVLB  5
5DD6:  BTFSC  x3A.7
5DD8:  BSF    FF2.7
5DDA:  MOVLW  05
5DDC:  MOVWF  x3B
5DDE:  MOVLW  1A
5DE0:  MOVWF  x3A
5DE2:  CLRF   x3C
5DE4:  MOVLW  08
5DE6:  MOVWF  x3D
5DE8:  MOVLW  02
5DEA:  MOVWF  x3E
5DEC:  MOVLW  01
5DEE:  MOVWF  x3F
5DF0:  MOVLB  0
5DF2:  CALL   17EA
....................             MuestraTiemposProgramados(); 
5DF6:  CALL   2512
....................             if(Nivel<6) 
5DFA:  MOVLB  4
5DFC:  MOVF   x9D,F
5DFE:  BNZ   5E0A
5E00:  MOVF   x9C,W
5E02:  SUBLW  05
5E04:  BNC   5E0A
....................                { 
....................                   desfoguelento=1; 
5E06:  BSF    x7C.5
....................                } 
....................                else 
5E08:  BRA    5E0C
....................                { 
....................                   desfoguelento=0; 
5E0A:  BCF    x7C.5
....................                } 
....................                EnviarCodigo(); 
5E0C:  MOVLB  0
5E0E:  CALL   1AD0
....................          } 
....................          else 
5E12:  BRA    5E46
5E14:  MOVLB  4
....................          { 
....................             delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E16:  MOVLW  04
5E18:  MOVLB  5
5E1A:  MOVWF  x3A
5E1C:  MOVLW  AF
5E1E:  MOVWF  x3F
5E20:  MOVLB  0
5E22:  CALL   10C2
5E26:  MOVLB  5
5E28:  DECFSZ x3A,F
5E2A:  BRA    5E1C
5E2C:  MOVLW  08
5E2E:  MOVLB  4
5E30:  MOVWF  x89
5E32:  MOVLB  5
5E34:  CLRF   x3B
5E36:  MOVLB  0
5E38:  CALL   11BA
5E3C:  MOVLW  01
5E3E:  MOVLB  4
5E40:  MOVWF  x90
5E42:  BSF    x7C.4
5E44:  MOVLB  0
....................          } 
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
5E46:  BSF    F96.2
5E48:  BTFSS  F84.2
5E4A:  BRA    5E7C
....................       { 
....................          delay_ms(700);Menu=8;glcd_fillscreen(OFF);Opcion=1;visual=1; 
5E4C:  MOVLW  04
5E4E:  MOVLB  5
5E50:  MOVWF  x3A
5E52:  MOVLW  AF
5E54:  MOVWF  x3F
5E56:  MOVLB  0
5E58:  CALL   10C2
5E5C:  MOVLB  5
5E5E:  DECFSZ x3A,F
5E60:  BRA    5E52
5E62:  MOVLW  08
5E64:  MOVLB  4
5E66:  MOVWF  x89
5E68:  MOVLB  5
5E6A:  CLRF   x3B
5E6C:  MOVLB  0
5E6E:  CALL   11BA
5E72:  MOVLW  01
5E74:  MOVLB  4
5E76:  MOVWF  x90
5E78:  BSF    x7C.4
5E7A:  MOVLB  0
....................       } 
....................      
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
5E7C:  MOVLB  4
5E7E:  MOVF   x89,W
5E80:  SUBLW  14
5E82:  BTFSS  FD8.2
5E84:  GOTO   6992
....................    if(flag_agua==1 && Puerta==1 && Parada==1 && tiempo_esterilizacion<2 && Alarma==0 && AlarmaAgua==0) 
5E88:  BTFSS  x7D.2
5E8A:  BRA    5FB4
5E8C:  DECFSZ x70,W
5E8E:  BRA    5FB4
5E90:  DECFSZ x71,W
5E92:  BRA    5FB4
5E94:  MOVF   x91,W
5E96:  SUBLW  01
5E98:  BTFSS  FD8.0
5E9A:  BRA    5FB4
5E9C:  MOVF   x7A,F
5E9E:  BTFSS  FD8.2
5EA0:  BRA    5FB4
5EA2:  MOVF   x7B,F
5EA4:  BTFSS  FD8.2
5EA6:  BRA    5FB4
....................    {   
....................       // Debe enviar a Hardware_Controller flag que indique que puede realizar control. En Hardware_Controller si esta activado el flag** 
....................       // de control debe tener automaticamente la electrovalvula de desfogue cerrada.** 
....................       if(tiempo_esterilizacion==0 && disp_Calentando==0) 
5EA8:  MOVF   x91,F
5EAA:  BNZ   5F26
5EAC:  BTFSC  x7D.4
5EAE:  BRA    5F26
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5EB0:  MOVLB  5
5EB2:  CLRF   x4C
5EB4:  MOVLW  37
5EB6:  MOVWF  x4D
5EB8:  MOVLW  7F
5EBA:  MOVWF  x4E
5EBC:  MOVLW  3F
5EBE:  MOVWF  x4F
5EC0:  MOVLW  01
5EC2:  MOVWF  x50
5EC4:  CLRF   x51
5EC6:  MOVLB  0
5EC8:  CALL   1728
....................          strcpy(Menus.Letra,"Calentando");displayMenu(Menus.Letra,0,55,2,1); 
5ECC:  MOVLW  05
5ECE:  MOVWF  FEA
5ED0:  MOVLW  1A
5ED2:  MOVWF  FE9
5ED4:  MOVFF  FF2,53A
5ED8:  BCF    FF2.7
5EDA:  MOVLW  00
5EDC:  CALL   0972
5EE0:  TBLRD*-
5EE2:  TBLRD*+
5EE4:  MOVF   FF5,W
5EE6:  MOVWF  FEE
5EE8:  IORLW  00
5EEA:  BNZ   5EE2
5EEC:  MOVLB  5
5EEE:  BTFSC  x3A.7
5EF0:  BSF    FF2.7
5EF2:  MOVLW  05
5EF4:  MOVWF  x3B
5EF6:  MOVLW  1A
5EF8:  MOVWF  x3A
5EFA:  CLRF   x3C
5EFC:  MOVLW  37
5EFE:  MOVWF  x3D
5F00:  MOVLW  02
5F02:  MOVWF  x3E
5F04:  MOVLW  01
5F06:  MOVWF  x3F
5F08:  MOVLB  0
5F0A:  CALL   17EA
....................          disp_Calentando=1;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5F0E:  MOVLB  4
5F10:  BSF    x7D.4
5F12:  BCF    x7D.5
5F14:  BCF    x7D.6
5F16:  BCF    x7D.7
5F18:  BCF    x7E.0
5F1A:  BCF    x7E.1
5F1C:  BCF    x7E.2
5F1E:  BCF    x7E.3
....................          EVDesfogue=0;Control=1; 
5F20:  CLRF   x80
5F22:  MOVLW  01
5F24:  MOVWF  x87
....................       } 
....................       if(tiempo_esterilizacion==1 && disp_Esterilizando==0) 
5F26:  DECFSZ x91,W
5F28:  BRA    5FA6
5F2A:  BTFSC  x7D.7
5F2C:  BRA    5FA6
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
5F2E:  MOVLB  5
5F30:  CLRF   x4C
5F32:  MOVLW  37
5F34:  MOVWF  x4D
5F36:  MOVLW  7F
5F38:  MOVWF  x4E
5F3A:  MOVLW  3F
5F3C:  MOVWF  x4F
5F3E:  MOVLW  01
5F40:  MOVWF  x50
5F42:  CLRF   x51
5F44:  MOVLB  0
5F46:  CALL   1728
....................          strcpy(Menus.Letra,"Esterilizando");displayMenu(Menus.Letra,0,55,2,1); 
5F4A:  MOVLW  05
5F4C:  MOVWF  FEA
5F4E:  MOVLW  1A
5F50:  MOVWF  FE9
5F52:  MOVFF  FF2,53A
5F56:  BCF    FF2.7
5F58:  MOVLW  00
5F5A:  CALL   0CEA
5F5E:  TBLRD*-
5F60:  TBLRD*+
5F62:  MOVF   FF5,W
5F64:  MOVWF  FEE
5F66:  IORLW  00
5F68:  BNZ   5F60
5F6A:  MOVLB  5
5F6C:  BTFSC  x3A.7
5F6E:  BSF    FF2.7
5F70:  MOVLW  05
5F72:  MOVWF  x3B
5F74:  MOVLW  1A
5F76:  MOVWF  x3A
5F78:  CLRF   x3C
5F7A:  MOVLW  37
5F7C:  MOVWF  x3D
5F7E:  MOVLW  02
5F80:  MOVWF  x3E
5F82:  MOVLW  01
5F84:  MOVWF  x3F
5F86:  MOVLB  0
5F88:  CALL   17EA
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=1;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
5F8C:  MOVLB  4
5F8E:  BCF    x7D.4
5F90:  BCF    x7D.5
5F92:  BCF    x7D.6
5F94:  BSF    x7D.7
5F96:  BCF    x7E.0
5F98:  BCF    x7E.1
5F9A:  BCF    x7E.2
5F9C:  BCF    x7E.3
....................          EVDesfogue=0;EVTrampa=0;Control=1; 
5F9E:  CLRF   x80
5FA0:  CLRF   x82
5FA2:  MOVLW  01
5FA4:  MOVWF  x87
....................       } 
....................       Control=1; 
5FA6:  MOVLW  01
5FA8:  MOVWF  x87
....................       EnviarCodigo(); 
5FAA:  MOVLB  0
5FAC:  CALL   1AD0
....................    } 
....................    else 
5FB0:  BRA    6402
5FB2:  MOVLB  4
....................    { 
....................       Control=0; 
5FB4:  CLRF   x87
....................       if(Alarma>0) 
5FB6:  MOVF   x7A,F
5FB8:  BTFSC  FD8.2
5FBA:  BRA    60B8
....................       { 
....................          if(Alarma==1) // Alarma de Error de Tiempo: Error por exceso de tiempo de calentamiento. 
5FBC:  DECFSZ x7A,W
5FBE:  BRA    6036
....................          { 
....................             if(disp_Alarma==0) 
5FC0:  BTFSC  x7E.5
5FC2:  BRA    6036
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
5FC4:  MOVLB  5
5FC6:  CLRF   x4C
5FC8:  MOVLW  37
5FCA:  MOVWF  x4D
5FCC:  MOVLW  7F
5FCE:  MOVWF  x4E
5FD0:  MOVLW  3F
5FD2:  MOVWF  x4F
5FD4:  MOVLW  01
5FD6:  MOVWF  x50
5FD8:  CLRF   x51
5FDA:  MOVLB  0
5FDC:  CALL   1728
....................                strcpy(Menus.Letra,"Error:ET01");displayMenu(Menus.Letra,0,55,2,1); 
5FE0:  MOVLW  05
5FE2:  MOVWF  FEA
5FE4:  MOVLW  1A
5FE6:  MOVWF  FE9
5FE8:  MOVFF  FF2,53A
5FEC:  BCF    FF2.7
5FEE:  MOVLW  00
5FF0:  CALL   0D12
5FF4:  TBLRD*-
5FF6:  TBLRD*+
5FF8:  MOVF   FF5,W
5FFA:  MOVWF  FEE
5FFC:  IORLW  00
5FFE:  BNZ   5FF6
6000:  MOVLB  5
6002:  BTFSC  x3A.7
6004:  BSF    FF2.7
6006:  MOVLW  05
6008:  MOVWF  x3B
600A:  MOVLW  1A
600C:  MOVWF  x3A
600E:  CLRF   x3C
6010:  MOVLW  37
6012:  MOVWF  x3D
6014:  MOVLW  02
6016:  MOVWF  x3E
6018:  MOVLW  01
601A:  MOVWF  x3F
601C:  MOVLB  0
601E:  CALL   17EA
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
6022:  MOVLB  4
6024:  BCF    x7D.4
6026:  BCF    x7D.5
6028:  BCF    x7D.6
602A:  BCF    x7D.7
602C:  BCF    x7E.0
602E:  BCF    x7E.1
6030:  BCF    x7E.2
6032:  BCF    x7E.3
....................                disp_Alarma=1; 
6034:  BSF    x7E.5
....................             } 
....................          } 
....................           
....................          if(Alarma==2) // Alarma de Error de Tiempo: Error por Cambio brusco en la Temperatura 
6036:  MOVF   x7A,W
6038:  SUBLW  02
603A:  BNZ   60B6
....................          { 
....................             tiempo_esterilizacion=0;tiempo_secado=0; 
603C:  CLRF   x91
603E:  CLRF   x92
....................             if(disp_Alarma==0) 
6040:  BTFSC  x7E.5
6042:  BRA    60B6
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
6044:  MOVLB  5
6046:  CLRF   x4C
6048:  MOVLW  37
604A:  MOVWF  x4D
604C:  MOVLW  7F
604E:  MOVWF  x4E
6050:  MOVLW  3F
6052:  MOVWF  x4F
6054:  MOVLW  01
6056:  MOVWF  x50
6058:  CLRF   x51
605A:  MOVLB  0
605C:  CALL   1728
....................                strcpy(Menus.Letra,"Error:ET02");displayMenu(Menus.Letra,0,55,2,1); 
6060:  MOVLW  05
6062:  MOVWF  FEA
6064:  MOVLW  1A
6066:  MOVWF  FE9
6068:  MOVFF  FF2,53A
606C:  BCF    FF2.7
606E:  MOVLW  00
6070:  CALL   0D38
6074:  TBLRD*-
6076:  TBLRD*+
6078:  MOVF   FF5,W
607A:  MOVWF  FEE
607C:  IORLW  00
607E:  BNZ   6076
6080:  MOVLB  5
6082:  BTFSC  x3A.7
6084:  BSF    FF2.7
6086:  MOVLW  05
6088:  MOVWF  x3B
608A:  MOVLW  1A
608C:  MOVWF  x3A
608E:  CLRF   x3C
6090:  MOVLW  37
6092:  MOVWF  x3D
6094:  MOVLW  02
6096:  MOVWF  x3E
6098:  MOVLW  01
609A:  MOVWF  x3F
609C:  MOVLB  0
609E:  CALL   17EA
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0;  
60A2:  MOVLB  4
60A4:  BCF    x7D.4
60A6:  BCF    x7D.5
60A8:  BCF    x7D.6
60AA:  BCF    x7D.7
60AC:  BCF    x7E.0
60AE:  BCF    x7E.1
60B0:  BCF    x7E.2
60B2:  BCF    x7E.3
....................                disp_Alarma=1; 
60B4:  BSF    x7E.5
....................             } 
....................          } 
....................       } 
....................       else 
60B6:  BRA    63FC
....................       { 
....................          disp_Alarma=0; 
60B8:  BCF    x7E.5
....................          if(NivelTanque==1 && flag_agua==0 ) 
60BA:  DECFSZ x73,W
60BC:  BRA    60C6
60BE:  BTFSC  x7D.2
60C0:  BRA    60C6
....................          { 
....................             flag_agua=1; 
60C2:  BSF    x7D.2
....................             // Debe enviar a Hardware_Controller que cierre EV de agua 
....................          }  
....................          else 
60C4:  BRA    61BC
....................          { 
....................             if(tiempo_esterilizacion==0 && disp_Llenando==0 && Puerta==1) 
60C6:  MOVF   x91,F
60C8:  BNZ   6144
60CA:  BTFSC  x7D.5
60CC:  BRA    6144
60CE:  DECFSZ x70,W
60D0:  BRA    6144
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
60D2:  MOVLB  5
60D4:  CLRF   x4C
60D6:  MOVLW  37
60D8:  MOVWF  x4D
60DA:  MOVLW  7F
60DC:  MOVWF  x4E
60DE:  MOVLW  3F
60E0:  MOVWF  x4F
60E2:  MOVLW  01
60E4:  MOVWF  x50
60E6:  CLRF   x51
60E8:  MOVLB  0
60EA:  CALL   1728
....................                strcpy(Menus.Letra,"Llenando");displayMenu(Menus.Letra,0,55,2,1); 
60EE:  MOVLW  05
60F0:  MOVWF  FEA
60F2:  MOVLW  1A
60F4:  MOVWF  FE9
60F6:  MOVFF  FF2,53A
60FA:  BCF    FF2.7
60FC:  MOVLW  00
60FE:  CALL   0D5E
6102:  TBLRD*-
6104:  TBLRD*+
6106:  MOVF   FF5,W
6108:  MOVWF  FEE
610A:  IORLW  00
610C:  BNZ   6104
610E:  MOVLB  5
6110:  BTFSC  x3A.7
6112:  BSF    FF2.7
6114:  MOVLW  05
6116:  MOVWF  x3B
6118:  MOVLW  1A
611A:  MOVWF  x3A
611C:  CLRF   x3C
611E:  MOVLW  37
6120:  MOVWF  x3D
6122:  MOVLW  02
6124:  MOVWF  x3E
6126:  MOVLW  01
6128:  MOVWF  x3F
612A:  MOVLB  0
612C:  CALL   17EA
....................                disp_Calentando=0;disp_Llenando=1;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6130:  MOVLB  4
6132:  BCF    x7D.4
6134:  BSF    x7D.5
6136:  BCF    x7D.6
6138:  BCF    x7D.7
613A:  BCF    x7E.0
613C:  BCF    x7E.1
613E:  BCF    x7E.2
6140:  BCF    x7E.3
....................                // Debe enviar a Hardware_Controller que abra EV de agua y que apague Resistencia 
....................                Control=0; 
6142:  CLRF   x87
....................             } 
....................              
....................             if(AlarmaAgua==1) 
6144:  DECFSZ x7B,W
6146:  BRA    61BC
....................             { 
....................                if(disp_AlarmaAgua==0) 
6148:  BTFSC  x7E.6
614A:  BRA    61BC
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
614C:  MOVLB  5
614E:  CLRF   x4C
6150:  MOVLW  37
6152:  MOVWF  x4D
6154:  MOVLW  7F
6156:  MOVWF  x4E
6158:  MOVLW  3F
615A:  MOVWF  x4F
615C:  MOVLW  01
615E:  MOVWF  x50
6160:  CLRF   x51
6162:  MOVLB  0
6164:  CALL   1728
....................                   strcpy(Menus.Letra,"Error:EA01");displayMenu(Menus.Letra,0,55,2,1); 
6168:  MOVLW  05
616A:  MOVWF  FEA
616C:  MOVLW  1A
616E:  MOVWF  FE9
6170:  MOVFF  FF2,53A
6174:  BCF    FF2.7
6176:  MOVLW  00
6178:  CALL   0D82
617C:  TBLRD*-
617E:  TBLRD*+
6180:  MOVF   FF5,W
6182:  MOVWF  FEE
6184:  IORLW  00
6186:  BNZ   617E
6188:  MOVLB  5
618A:  BTFSC  x3A.7
618C:  BSF    FF2.7
618E:  MOVLW  05
6190:  MOVWF  x3B
6192:  MOVLW  1A
6194:  MOVWF  x3A
6196:  CLRF   x3C
6198:  MOVLW  37
619A:  MOVWF  x3D
619C:  MOVLW  02
619E:  MOVWF  x3E
61A0:  MOVLW  01
61A2:  MOVWF  x3F
61A4:  MOVLB  0
61A6:  CALL   17EA
....................                   disp_Calentando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
61AA:  MOVLB  4
61AC:  BCF    x7D.4
61AE:  BCF    x7D.6
61B0:  BCF    x7D.7
61B2:  BCF    x7E.0
61B4:  BCF    x7E.1
61B6:  BCF    x7E.2
61B8:  BCF    x7E.3
....................                   disp_AlarmaAgua=1; 
61BA:  BSF    x7E.6
....................                } 
....................             } 
....................          } 
....................           
....................          if(tiempo_esterilizacion==2 && flag_agua==1) 
61BC:  MOVF   x91,W
61BE:  SUBLW  02
61C0:  BTFSS  FD8.2
61C2:  BRA    6384
61C4:  BTFSS  x7D.2
61C6:  BRA    6384
....................          { 
....................             // Si hay desfogue lento, muestra desfogue lento y hace rampa. Al finalizar la rampa hace fin de ciclo. 
....................             if(desfoguelento==1)    
61C8:  BTFSS  x7C.5
61CA:  BRA    62AA
....................             { 
....................                if(z==0) 
61CC:  BTFSC  x7E.4
61CE:  BRA    6220
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
61D0:  MOVLB  5
61D2:  CLRF   x3A
61D4:  MOVLW  5A
61D6:  MOVWF  x3B
61D8:  MOVLW  38
61DA:  MOVWF  x3C
61DC:  MOVLB  0
61DE:  CALL   2652
61E2:  MOVLW  19
61E4:  MOVLB  5
61E6:  MOVWF  x4C
61E8:  MOVLW  12
61EA:  MOVWF  x4D
61EC:  MOVLW  3C
61EE:  MOVWF  x4E
61F0:  MOVLW  1A
61F2:  MOVWF  x4F
61F4:  CLRF   x50
61F6:  CLRF   x51
61F8:  MOVLB  0
61FA:  CALL   1728
61FE:  MOVLW  37
6200:  MOVLB  5
6202:  MOVWF  x4C
6204:  MOVLW  12
6206:  MOVWF  x4D
6208:  MOVLW  44
620A:  MOVWF  x4E
620C:  MOVLW  35
620E:  MOVWF  x4F
6210:  CLRF   x50
6212:  MOVLW  01
6214:  MOVWF  x51
6216:  MOVLB  0
6218:  CALL   1728
621C:  MOVLB  4
621E:  BSF    x7E.4
....................                } 
....................                if(disp_Despresurizando==0) 
6220:  BTFSC  x7E.0
6222:  BRA    62A2
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6224:  MOVLB  5
6226:  CLRF   x4C
6228:  MOVLW  37
622A:  MOVWF  x4D
622C:  MOVLW  7F
622E:  MOVWF  x4E
6230:  MOVLW  3F
6232:  MOVWF  x4F
6234:  MOVLW  01
6236:  MOVWF  x50
6238:  CLRF   x51
623A:  MOVLB  0
623C:  CALL   1728
....................                   strcpy(Menus.Letra,"Despresurizando");displayMenu(Menus.Letra,0,55,2,1); 
6240:  MOVLW  05
6242:  MOVWF  FEA
6244:  MOVLW  1A
6246:  MOVWF  FE9
6248:  MOVFF  FF2,53A
624C:  BCF    FF2.7
624E:  MOVLW  00
6250:  CALL   0DA8
6254:  TBLRD*-
6256:  TBLRD*+
6258:  MOVF   FF5,W
625A:  MOVWF  FEE
625C:  IORLW  00
625E:  BNZ   6256
6260:  MOVLB  5
6262:  BTFSC  x3A.7
6264:  BSF    FF2.7
6266:  MOVLW  05
6268:  MOVWF  x3B
626A:  MOVLW  1A
626C:  MOVWF  x3A
626E:  CLRF   x3C
6270:  MOVLW  37
6272:  MOVWF  x3D
6274:  MOVLW  02
6276:  MOVWF  x3E
6278:  MOVLW  01
627A:  MOVWF  x3F
627C:  MOVLB  0
627E:  CALL   17EA
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6282:  MOVLB  4
6284:  BCF    x7D.4
6286:  BCF    x7D.5
6288:  BCF    x7D.6
628A:  BCF    x7D.7
628C:  BSF    x7E.0
628E:  BCF    x7E.1
6290:  BCF    x7E.2
6292:  BCF    x7E.3
....................                   glcd_imagen(5); 
6294:  MOVLW  05
6296:  MOVLB  5
6298:  MOVWF  x3A
629A:  MOVLB  0
629C:  CALL   2016
62A0:  MOVLB  4
....................                } 
....................                Exhaust=2;tiempo_secado=2; 
62A2:  MOVLW  02
62A4:  MOVWF  x93
62A6:  MOVWF  x92
....................             } 
....................             else 
62A8:  BRA    6384
....................             { 
....................                if(z==0) 
62AA:  BTFSC  x7E.4
62AC:  BRA    62FE
....................                { 
....................                   Limpia(0,90,56);glcd_rect(25, 18, 60, 26, NO, OFF);glcd_rect(55, 18, 68, 53, NO, ON);z=1; 
62AE:  MOVLB  5
62B0:  CLRF   x3A
62B2:  MOVLW  5A
62B4:  MOVWF  x3B
62B6:  MOVLW  38
62B8:  MOVWF  x3C
62BA:  MOVLB  0
62BC:  CALL   2652
62C0:  MOVLW  19
62C2:  MOVLB  5
62C4:  MOVWF  x4C
62C6:  MOVLW  12
62C8:  MOVWF  x4D
62CA:  MOVLW  3C
62CC:  MOVWF  x4E
62CE:  MOVLW  1A
62D0:  MOVWF  x4F
62D2:  CLRF   x50
62D4:  CLRF   x51
62D6:  MOVLB  0
62D8:  CALL   1728
62DC:  MOVLW  37
62DE:  MOVLB  5
62E0:  MOVWF  x4C
62E2:  MOVLW  12
62E4:  MOVWF  x4D
62E6:  MOVLW  44
62E8:  MOVWF  x4E
62EA:  MOVLW  35
62EC:  MOVWF  x4F
62EE:  CLRF   x50
62F0:  MOVLW  01
62F2:  MOVWF  x51
62F4:  MOVLB  0
62F6:  CALL   1728
62FA:  MOVLB  4
62FC:  BSF    x7E.4
....................                   //tiempo_secado=1; 
....................                } 
....................                if(disp_Secando==0) 
62FE:  BTFSC  x7D.6
6300:  BRA    6380
....................                { 
....................                   glcd_rect(0, 55, 127, 63, YES, OFF); 
6302:  MOVLB  5
6304:  CLRF   x4C
6306:  MOVLW  37
6308:  MOVWF  x4D
630A:  MOVLW  7F
630C:  MOVWF  x4E
630E:  MOVLW  3F
6310:  MOVWF  x4F
6312:  MOVLW  01
6314:  MOVWF  x50
6316:  CLRF   x51
6318:  MOVLB  0
631A:  CALL   1728
....................                   strcpy(Menus.Letra,"Secando");displayMenu(Menus.Letra,0,55,2,1); 
631E:  MOVLW  05
6320:  MOVWF  FEA
6322:  MOVLW  1A
6324:  MOVWF  FE9
6326:  MOVFF  FF2,53A
632A:  BCF    FF2.7
632C:  MOVLW  00
632E:  CALL   0DD2
6332:  TBLRD*-
6334:  TBLRD*+
6336:  MOVF   FF5,W
6338:  MOVWF  FEE
633A:  IORLW  00
633C:  BNZ   6334
633E:  MOVLB  5
6340:  BTFSC  x3A.7
6342:  BSF    FF2.7
6344:  MOVLW  05
6346:  MOVWF  x3B
6348:  MOVLW  1A
634A:  MOVWF  x3A
634C:  CLRF   x3C
634E:  MOVLW  37
6350:  MOVWF  x3D
6352:  MOVLW  02
6354:  MOVWF  x3E
6356:  MOVLW  01
6358:  MOVWF  x3F
635A:  MOVLB  0
635C:  CALL   17EA
....................                   disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=0;disp_Fin=0; 
6360:  MOVLB  4
6362:  BCF    x7D.4
6364:  BCF    x7D.5
6366:  BSF    x7D.6
6368:  BCF    x7D.7
636A:  BCF    x7E.0
636C:  BCF    x7E.1
636E:  BCF    x7E.2
6370:  BCF    x7E.3
....................                   glcd_imagen(5); 
6372:  MOVLW  05
6374:  MOVLB  5
6376:  MOVWF  x3A
6378:  MOVLB  0
637A:  CALL   2016
637E:  MOVLB  4
....................                } 
....................                Exhaust=1; 
6380:  MOVLW  01
6382:  MOVWF  x93
....................             } 
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................           
....................          if(Puerta==0) 
6384:  MOVF   x70,F
6386:  BNZ   63FC
....................          { 
....................             if(disp_Door==0) 
6388:  BTFSC  x7E.2
638A:  BRA    63FC
....................             { 
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
638C:  MOVLB  5
638E:  CLRF   x4C
6390:  MOVLW  37
6392:  MOVWF  x4D
6394:  MOVLW  7F
6396:  MOVWF  x4E
6398:  MOVLW  3F
639A:  MOVWF  x4F
639C:  MOVLW  01
639E:  MOVWF  x50
63A0:  CLRF   x51
63A2:  MOVLB  0
63A4:  CALL   1728
....................                strcpy(Menus.Letra,"Puerta Abierta");displayMenu(Menus.Letra,0,55,2,1); 
63A8:  MOVLW  05
63AA:  MOVWF  FEA
63AC:  MOVLW  1A
63AE:  MOVWF  FE9
63B0:  MOVFF  FF2,53A
63B4:  BCF    FF2.7
63B6:  MOVLW  00
63B8:  CALL   0DF4
63BC:  TBLRD*-
63BE:  TBLRD*+
63C0:  MOVF   FF5,W
63C2:  MOVWF  FEE
63C4:  IORLW  00
63C6:  BNZ   63BE
63C8:  MOVLB  5
63CA:  BTFSC  x3A.7
63CC:  BSF    FF2.7
63CE:  MOVLW  05
63D0:  MOVWF  x3B
63D2:  MOVLW  1A
63D4:  MOVWF  x3A
63D6:  CLRF   x3C
63D8:  MOVLW  37
63DA:  MOVWF  x3D
63DC:  MOVLW  02
63DE:  MOVWF  x3E
63E0:  MOVLW  01
63E2:  MOVWF  x3F
63E4:  MOVLB  0
63E6:  CALL   17EA
....................                disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=0;disp_Door=1;disp_Fin=0; 
63EA:  MOVLB  4
63EC:  BCF    x7D.4
63EE:  BCF    x7D.5
63F0:  BCF    x7D.6
63F2:  BCF    x7D.7
63F4:  BCF    x7E.0
63F6:  BCF    x7E.1
63F8:  BSF    x7E.2
63FA:  BCF    x7E.3
....................             }    
....................             // Debe enviar a Hardware_Controller que apague Resistencia 
....................          } 
....................       } 
....................       EnviarCodigo(); 
63FC:  MOVLB  0
63FE:  CALL   1AD0
....................    } 
....................  
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
6402:  MOVLB  4
6404:  BTFSS  x7C.6
6406:  BRA    675A
....................    {                       
....................       Lectura=0; 
6408:  BCF    x7C.6
....................       //displayTiempo(NivelTanque,40,30,2,1);  
....................       //displayTiempo(Presostato,40,40,2,1);  
....................       //displayTiempo(ADCTemperatura[2],20,30,2,1);  
....................       //displayT(Prom,20,30,2); 
....................       displayTiempo(Presostato,31,40,2,1); 
640A:  MOVFF  474,53B
640E:  MOVLW  1F
6410:  MOVLB  5
6412:  MOVWF  x3C
6414:  MOVLW  28
6416:  MOVWF  x3D
6418:  MOVLW  02
641A:  MOVWF  x3E
641C:  MOVLW  01
641E:  MOVWF  x3F
6420:  MOVLB  0
6422:  CALL   23C2
....................       glcd_rect(51, 40, 62, 48, YES, OFF);glcd_text57(52, 40, kpa, 1, ON); 
6426:  MOVLW  33
6428:  MOVLB  5
642A:  MOVWF  x4C
642C:  MOVLW  28
642E:  MOVWF  x4D
6430:  MOVLW  3E
6432:  MOVWF  x4E
6434:  MOVLW  30
6436:  MOVWF  x4F
6438:  MOVLW  01
643A:  MOVWF  x50
643C:  CLRF   x51
643E:  MOVLB  0
6440:  CALL   1728
6444:  MOVLW  34
6446:  MOVLB  5
6448:  MOVWF  x4B
644A:  MOVLW  28
644C:  MOVWF  x4C
644E:  MOVLW  04
6450:  MOVWF  x4E
6452:  MOVLW  1C
6454:  MOVWF  x4D
6456:  MOVLW  01
6458:  MOVWF  x4F
645A:  MOVWF  x50
645C:  MOVLB  0
645E:  CALL   1432
....................       displayT(ADC_Pt100,69,20,2); 
6462:  MOVFF  4A3,53D
6466:  MOVFF  4A2,53C
646A:  MOVFF  4A1,53B
646E:  MOVFF  4A0,53A
6472:  MOVLW  45
6474:  MOVLB  5
6476:  MOVWF  x3E
6478:  MOVLW  14
647A:  MOVWF  x3F
647C:  MOVLW  02
647E:  MOVWF  x40
6480:  MOVLB  0
6482:  GOTO   29E6
....................       glcd_circle(95,40,2,NO,ON); 
6486:  MOVLW  5F
6488:  MOVLB  5
648A:  MOVWF  x3A
648C:  MOVLW  28
648E:  MOVWF  x3B
6490:  MOVLW  02
6492:  MOVWF  x3C
6494:  CLRF   x3D
6496:  MOVLW  01
6498:  MOVWF  x3E
649A:  MOVLB  0
649C:  CALL   2112
....................       strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,102,40,2,2); 
64A0:  MOVLW  05
64A2:  MOVWF  FEA
64A4:  MOVLW  1A
64A6:  MOVWF  FE9
64A8:  MOVFF  FF2,53A
64AC:  BCF    FF2.7
64AE:  MOVLW  00
64B0:  CALL   09DC
64B4:  TBLRD*-
64B6:  TBLRD*+
64B8:  MOVF   FF5,W
64BA:  MOVWF  FEE
64BC:  IORLW  00
64BE:  BNZ   64B6
64C0:  MOVLB  5
64C2:  BTFSC  x3A.7
64C4:  BSF    FF2.7
64C6:  MOVLW  05
64C8:  MOVWF  x3B
64CA:  MOVLW  1A
64CC:  MOVWF  x3A
64CE:  MOVLW  66
64D0:  MOVWF  x3C
64D2:  MOVLW  28
64D4:  MOVWF  x3D
64D6:  MOVLW  02
64D8:  MOVWF  x3E
64DA:  MOVWF  x3F
64DC:  MOVLB  0
64DE:  CALL   17EA
....................       //displayT(Pt,1,20,3); 
....................       displayTiempo(Setpoint,5,20,2,1); 
64E2:  MOVFF  48E,53B
64E6:  MOVLW  05
64E8:  MOVLB  5
64EA:  MOVWF  x3C
64EC:  MOVLW  14
64EE:  MOVWF  x3D
64F0:  MOVLW  02
64F2:  MOVWF  x3E
64F4:  MOVLW  01
64F6:  MOVWF  x3F
64F8:  MOVLB  0
64FA:  CALL   23C2
....................          
....................       if(Visua==1)// Si se activo la visualización desde software 
64FE:  MOVLB  4
6500:  BTFSS  x7D.1
6502:  BRA    660C
....................       { 
....................          displayTiempo((int8)desvio,5,30,4,1); 
6504:  MOVFF  515,53D
6508:  MOVFF  514,53C
650C:  MOVFF  513,53B
6510:  MOVFF  512,53A
6514:  MOVLB  0
6516:  CALL   2A60
651A:  MOVFF  01,53A
651E:  MOVFF  01,53B
6522:  MOVLW  05
6524:  MOVLB  5
6526:  MOVWF  x3C
6528:  MOVLW  1E
652A:  MOVWF  x3D
652C:  MOVLW  04
652E:  MOVWF  x3E
6530:  MOVLW  01
6532:  MOVWF  x3F
6534:  MOVLB  0
6536:  CALL   23C2
....................          displayTiempo((int8)Tpulso,5,40,4,1); 
653A:  MOVFF  4F9,53D
653E:  MOVFF  4F8,53C
6542:  MOVFF  4F7,53B
6546:  MOVFF  4F6,53A
654A:  CALL   2A60
654E:  MOVFF  01,53A
6552:  MOVFF  01,53B
6556:  MOVLW  05
6558:  MOVLB  5
655A:  MOVWF  x3C
655C:  MOVLW  28
655E:  MOVWF  x3D
6560:  MOVLW  04
6562:  MOVWF  x3E
6564:  MOVLW  01
6566:  MOVWF  x3F
6568:  MOVLB  0
656A:  CALL   23C2
....................          displayTiempo((int8)Ganancia,30,40,4,1); 
656E:  MOVFF  50D,53D
6572:  MOVFF  50C,53C
6576:  MOVFF  50B,53B
657A:  MOVFF  50A,53A
657E:  CALL   2A60
6582:  MOVFF  01,53A
6586:  MOVFF  01,53B
658A:  MOVLW  1E
658C:  MOVLB  5
658E:  MOVWF  x3C
6590:  MOVLW  28
6592:  MOVWF  x3D
6594:  MOVLW  04
6596:  MOVWF  x3E
6598:  MOVLW  01
659A:  MOVWF  x3F
659C:  MOVLB  0
659E:  CALL   23C2
....................          displayTiempo((int8)Ajuste,30,30,4,1); 
65A2:  MOVFF  477,53B
65A6:  MOVLW  1E
65A8:  MOVLB  5
65AA:  MOVWF  x3C
65AC:  MOVWF  x3D
65AE:  MOVLW  04
65B0:  MOVWF  x3E
65B2:  MOVLW  01
65B4:  MOVWF  x3F
65B6:  MOVLB  0
65B8:  CALL   23C2
....................          displayTiempo((int8)Ajusten,30,20,4,1); 
65BC:  MOVFF  478,53B
65C0:  MOVLW  1E
65C2:  MOVLB  5
65C4:  MOVWF  x3C
65C6:  MOVLW  14
65C8:  MOVWF  x3D
65CA:  MOVLW  04
65CC:  MOVWF  x3E
65CE:  MOVLW  01
65D0:  MOVWF  x3F
65D2:  MOVLB  0
65D4:  CALL   23C2
....................          displayTiempo((int8)Ganancia2,50,40,4,1); 
65D8:  MOVFF  511,53D
65DC:  MOVFF  510,53C
65E0:  MOVFF  50F,53B
65E4:  MOVFF  50E,53A
65E8:  CALL   2A60
65EC:  MOVFF  01,53A
65F0:  MOVFF  01,53B
65F4:  MOVLW  32
65F6:  MOVLB  5
65F8:  MOVWF  x3C
65FA:  MOVLW  28
65FC:  MOVWF  x3D
65FE:  MOVLW  04
6600:  MOVWF  x3E
6602:  MOVLW  01
6604:  MOVWF  x3F
6606:  MOVLB  0
6608:  CALL   23C2
....................       } 
....................           
....................       // Muestra Valor de esterilizacion actual. 
....................       displayTiempo(Testerilizacion[3],80,0,0,1);displayTiempo(Testerilizacion[2],86,0,0,1); 
660C:  MOVFF  4A7,53B
6610:  MOVLW  50
6612:  MOVLB  5
6614:  MOVWF  x3C
6616:  CLRF   x3D
6618:  CLRF   x3E
661A:  MOVLW  01
661C:  MOVWF  x3F
661E:  MOVLB  0
6620:  CALL   23C2
6624:  MOVFF  4A6,53B
6628:  MOVLW  56
662A:  MOVLB  5
662C:  MOVWF  x3C
662E:  CLRF   x3D
6630:  CLRF   x3E
6632:  MOVLW  01
6634:  MOVWF  x3F
6636:  MOVLB  0
6638:  CALL   23C2
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,0,2,1);  
663C:  MOVLW  05
663E:  MOVWF  FEA
6640:  MOVLW  1A
6642:  MOVWF  FE9
6644:  MOVFF  FF2,53A
6648:  BCF    FF2.7
664A:  MOVLW  00
664C:  CALL   06CA
6650:  TBLRD*-
6652:  TBLRD*+
6654:  MOVF   FF5,W
6656:  MOVWF  FEE
6658:  IORLW  00
665A:  BNZ   6652
665C:  MOVLB  5
665E:  BTFSC  x3A.7
6660:  BSF    FF2.7
6662:  MOVLW  05
6664:  MOVWF  x3B
6666:  MOVLW  1A
6668:  MOVWF  x3A
666A:  MOVLW  5C
666C:  MOVWF  x3C
666E:  CLRF   x3D
6670:  MOVLW  02
6672:  MOVWF  x3E
6674:  MOVLW  01
6676:  MOVWF  x3F
6678:  MOVLB  0
667A:  CALL   17EA
....................       displayTiempo(Testerilizacion[1],98,0,0,1);displayTiempo(Testerilizacion[0],104,0,0,1); 
667E:  MOVFF  4A5,53B
6682:  MOVLW  62
6684:  MOVLB  5
6686:  MOVWF  x3C
6688:  CLRF   x3D
668A:  CLRF   x3E
668C:  MOVLW  01
668E:  MOVWF  x3F
6690:  MOVLB  0
6692:  CALL   23C2
6696:  MOVFF  4A4,53B
669A:  MOVLW  68
669C:  MOVLB  5
669E:  MOVWF  x3C
66A0:  CLRF   x3D
66A2:  CLRF   x3E
66A4:  MOVLW  01
66A6:  MOVWF  x3F
66A8:  MOVLB  0
66AA:  CALL   23C2
....................       // Muestra tiempo de secado actual. 
....................       displayTiempo(Tsecado[3],80,8,0,1);displayTiempo(Tsecado[2],86,8,0,1); 
66AE:  MOVFF  4AF,53B
66B2:  MOVLW  50
66B4:  MOVLB  5
66B6:  MOVWF  x3C
66B8:  MOVLW  08
66BA:  MOVWF  x3D
66BC:  CLRF   x3E
66BE:  MOVLW  01
66C0:  MOVWF  x3F
66C2:  MOVLB  0
66C4:  CALL   23C2
66C8:  MOVFF  4AE,53B
66CC:  MOVLW  56
66CE:  MOVLB  5
66D0:  MOVWF  x3C
66D2:  MOVLW  08
66D4:  MOVWF  x3D
66D6:  CLRF   x3E
66D8:  MOVLW  01
66DA:  MOVWF  x3F
66DC:  MOVLB  0
66DE:  CALL   23C2
....................       strcpy(Menus.Letra,":");displayMenu(Menus.Letra,92,8,2,1);  
66E2:  MOVLW  05
66E4:  MOVWF  FEA
66E6:  MOVLW  1A
66E8:  MOVWF  FE9
66EA:  MOVFF  FF2,53A
66EE:  BCF    FF2.7
66F0:  MOVLW  00
66F2:  CALL   06CA
66F6:  TBLRD*-
66F8:  TBLRD*+
66FA:  MOVF   FF5,W
66FC:  MOVWF  FEE
66FE:  IORLW  00
6700:  BNZ   66F8
6702:  MOVLB  5
6704:  BTFSC  x3A.7
6706:  BSF    FF2.7
6708:  MOVLW  05
670A:  MOVWF  x3B
670C:  MOVLW  1A
670E:  MOVWF  x3A
6710:  MOVLW  5C
6712:  MOVWF  x3C
6714:  MOVLW  08
6716:  MOVWF  x3D
6718:  MOVLW  02
671A:  MOVWF  x3E
671C:  MOVLW  01
671E:  MOVWF  x3F
6720:  MOVLB  0
6722:  CALL   17EA
....................       displayTiempo(Tsecado[1],98,8,0,1);displayTiempo(Tsecado[0],104,8,0,1); 
6726:  MOVFF  4AD,53B
672A:  MOVLW  62
672C:  MOVLB  5
672E:  MOVWF  x3C
6730:  MOVLW  08
6732:  MOVWF  x3D
6734:  CLRF   x3E
6736:  MOVLW  01
6738:  MOVWF  x3F
673A:  MOVLB  0
673C:  CALL   23C2
6740:  MOVFF  4AC,53B
6744:  MOVLW  68
6746:  MOVLB  5
6748:  MOVWF  x3C
674A:  MOVLW  08
674C:  MOVWF  x3D
674E:  CLRF   x3E
6750:  MOVLW  01
6752:  MOVWF  x3F
6754:  MOVLB  0
6756:  CALL   23C2
....................    } 
....................           
....................    if(ADC_Pt100>=((float)Setpoint-1.0))// Si activa alarma de esterilización. Inicia tiempo de esterilización. 
675A:  MOVLB  5
675C:  CLRF   x40
675E:  MOVFF  48E,53F
6762:  MOVLB  0
6764:  CALL   10EC
6768:  MOVFF  00,53A
676C:  MOVFF  01,53B
6770:  MOVFF  02,53C
6774:  MOVFF  03,53D
6778:  BSF    FD8.1
677A:  MOVFF  03,541
677E:  MOVFF  02,540
6782:  MOVFF  01,53F
6786:  MOVFF  00,53E
678A:  MOVLB  5
678C:  CLRF   x45
678E:  CLRF   x44
6790:  CLRF   x43
6792:  MOVLW  7F
6794:  MOVWF  x42
6796:  MOVLB  0
6798:  CALL   1CB0
679C:  MOVFF  03,53D
67A0:  MOVFF  02,53C
67A4:  MOVFF  01,53B
67A8:  MOVFF  00,53A
67AC:  MOVFF  4A3,541
67B0:  MOVFF  4A2,540
67B4:  MOVFF  4A1,53F
67B8:  MOVFF  4A0,53E
67BC:  GOTO   2A9C
67C0:  BC    67C4
67C2:  BNZ   682A
....................    { 
....................       if(est==0) 
67C4:  MOVLB  4
67C6:  BTFSC  x7D.0
67C8:  BRA    682C
....................       { 
....................          tiempo_esterilizacion=1; 
67CA:  MOVLW  01
67CC:  MOVWF  x91
....................          Limpia(0,90,56);glcd_rect(15, 18, 30, 53, NO, OFF);glcd_rect(25, 18, 60, 26, NO, ON);est=1; 
67CE:  MOVLB  5
67D0:  CLRF   x3A
67D2:  MOVLW  5A
67D4:  MOVWF  x3B
67D6:  MOVLW  38
67D8:  MOVWF  x3C
67DA:  MOVLB  0
67DC:  CALL   2652
67E0:  MOVLW  0F
67E2:  MOVLB  5
67E4:  MOVWF  x4C
67E6:  MOVLW  12
67E8:  MOVWF  x4D
67EA:  MOVLW  1E
67EC:  MOVWF  x4E
67EE:  MOVLW  35
67F0:  MOVWF  x4F
67F2:  CLRF   x50
67F4:  CLRF   x51
67F6:  MOVLB  0
67F8:  CALL   1728
67FC:  MOVLW  19
67FE:  MOVLB  5
6800:  MOVWF  x4C
6802:  MOVLW  12
6804:  MOVWF  x4D
6806:  MOVLW  3C
6808:  MOVWF  x4E
680A:  MOVLW  1A
680C:  MOVWF  x4F
680E:  CLRF   x50
6810:  MOVLW  01
6812:  MOVWF  x51
6814:  MOVLB  0
6816:  CALL   1728
681A:  MOVLB  4
681C:  BSF    x7D.0
....................          glcd_imagen(5); 
681E:  MOVLW  05
6820:  MOVLB  5
6822:  MOVWF  x3A
6824:  MOVLB  0
6826:  CALL   2016
682A:  MOVLB  4
....................       } 
....................    }   
....................     
....................    if(Exhaust==1 && tiempo_esterilizacion==2)// Si realiza desfogue rapido 
682C:  DECFSZ x93,W
682E:  BRA    684E
6830:  MOVF   x91,W
6832:  SUBLW  02
6834:  BNZ   684E
....................    { 
....................       // Debe enviar a Hardware_Controller que abra EV de desfogue 
....................       Control=0; 
6836:  CLRF   x87
....................       if(Presostato<2) 
6838:  MOVF   x74,W
683A:  SUBLW  01
683C:  BNC   684A
....................       { 
....................          tiempo_secado=1; 
683E:  MOVLW  01
6840:  MOVWF  x92
....................          Control=0;EVDesfogue=3; 
6842:  CLRF   x87
6844:  MOVLW  03
6846:  MOVWF  x80
....................       } 
....................       else 
6848:  BRA    684E
....................       { 
....................          EVDesfogue=1; 
684A:  MOVLW  01
684C:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    if(Exhaust==2 && tiempo_esterilizacion==2 )// Si Debe realizar Rampa 
684E:  MOVF   x93,W
6850:  SUBLW  02
6852:  BNZ   6876
6854:  MOVF   x91,W
6856:  SUBLW  02
6858:  BNZ   6876
....................    {      
....................       // Debe enviar a Hardware_Controller que abra Ejecute modo rampa. 
....................       EVDesfogue=2; 
685A:  MOVLW  02
685C:  MOVWF  x80
....................       Control=0; 
685E:  CLRF   x87
....................       if(Presostato<2) 
6860:  MOVF   x74,W
6862:  SUBLW  01
6864:  BNC   6876
....................       { 
....................          tiempo_esterilizacion=3; 
6866:  MOVLW  03
6868:  MOVWF  x91
....................          tiempo_secado=2; 
686A:  MOVLW  02
686C:  MOVWF  x92
....................          fin_ciclo=1; 
686E:  MOVLW  01
6870:  MOVWF  x8F
....................          EVDesfogue=3; 
6872:  MOVLW  03
6874:  MOVWF  x80
....................       } 
....................    } 
....................     
....................    // Si cumplio el tiempo de esterilización, verifique si existe tiempo de secado. 
....................    if((Testerilizacion[0]==Testerilizacionp[0])&&(Testerilizacion[1]==Testerilizacionp[1])&&(Testerilizacion[2]==Testerilizacionp[2])&&(Testerilizacion[3]==Testerilizacionp[3]) && tiempo_esterilizacion==1) 
6876:  MOVF   xA8,W
6878:  SUBWF  xA4,W
687A:  BNZ   6896
687C:  MOVF   xA9,W
687E:  SUBWF  xA5,W
6880:  BNZ   6896
6882:  MOVF   xAA,W
6884:  SUBWF  xA6,W
6886:  BNZ   6896
6888:  MOVF   xAB,W
688A:  SUBWF  xA7,W
688C:  BNZ   6896
688E:  DECFSZ x91,W
6890:  BRA    6896
....................    { 
....................       tiempo_esterilizacion=2; 
6892:  MOVLW  02
6894:  MOVWF  x91
....................    }  
....................     
....................    // Si cumplio el tiempo de secado. 
....................    if((Tsecado[0]>=Tsecadop[0])&&(Tsecado[1]>=Tsecadop[1])&&(Tsecado[2]>=Tsecadop[2])&&(Tsecado[3]>=Tsecadop[3]) && tiempo_secado==1) 
6896:  MOVF   xB0,W
6898:  XORLW  80
689A:  MOVWF  00
689C:  MOVF   xAC,W
689E:  XORLW  80
68A0:  SUBWF  00,W
68A2:  BZ    68A6
68A4:  BC    68E6
68A6:  MOVF   xB1,W
68A8:  XORLW  80
68AA:  MOVWF  00
68AC:  MOVF   xAD,W
68AE:  XORLW  80
68B0:  SUBWF  00,W
68B2:  BZ    68B6
68B4:  BC    68E6
68B6:  MOVF   xB2,W
68B8:  XORLW  80
68BA:  MOVWF  00
68BC:  MOVF   xAE,W
68BE:  XORLW  80
68C0:  SUBWF  00,W
68C2:  BZ    68C6
68C4:  BC    68E6
68C6:  MOVF   xB3,W
68C8:  XORLW  80
68CA:  MOVWF  00
68CC:  MOVF   xAF,W
68CE:  XORLW  80
68D0:  SUBWF  00,W
68D2:  BZ    68D6
68D4:  BC    68E6
68D6:  DECFSZ x92,W
68D8:  BRA    68E6
....................    { 
....................       tiempo_esterilizacion=3; 
68DA:  MOVLW  03
68DC:  MOVWF  x91
....................       tiempo_secado=2; 
68DE:  MOVLW  02
68E0:  MOVWF  x92
....................       fin_ciclo=1; 
68E2:  MOVLW  01
68E4:  MOVWF  x8F
....................    } 
....................     
....................    if(fin_ciclo==1) 
68E6:  DECFSZ x8F,W
68E8:  BRA    698E
....................    { 
....................       // Debe enviar a Hardware_Controller que apague Resistencia y que cierre EV de desfogue 
....................       Control=0;EVDesfogue=3; 
68EA:  CLRF   x87
68EC:  MOVLW  03
68EE:  MOVWF  x80
....................       if(disp_Fin==0) 
68F0:  BTFSC  x7E.3
68F2:  BRA    6964
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
68F4:  MOVLB  5
68F6:  CLRF   x4C
68F8:  MOVLW  37
68FA:  MOVWF  x4D
68FC:  MOVLW  7F
68FE:  MOVWF  x4E
6900:  MOVLW  3F
6902:  MOVWF  x4F
6904:  MOVLW  01
6906:  MOVWF  x50
6908:  CLRF   x51
690A:  MOVLB  0
690C:  CALL   1728
....................          strcpy(Menus.Letra,"Ciclo Finalizado");displayMenu(Menus.Letra,0,55,2,1); 
6910:  MOVLW  05
6912:  MOVWF  FEA
6914:  MOVLW  1A
6916:  MOVWF  FE9
6918:  MOVFF  FF2,53A
691C:  BCF    FF2.7
691E:  MOVLW  00
6920:  CALL   0E1E
6924:  TBLRD*-
6926:  TBLRD*+
6928:  MOVF   FF5,W
692A:  MOVWF  FEE
692C:  IORLW  00
692E:  BNZ   6926
6930:  MOVLB  5
6932:  BTFSC  x3A.7
6934:  BSF    FF2.7
6936:  MOVLW  05
6938:  MOVWF  x3B
693A:  MOVLW  1A
693C:  MOVWF  x3A
693E:  CLRF   x3C
6940:  MOVLW  37
6942:  MOVWF  x3D
6944:  MOVLW  02
6946:  MOVWF  x3E
6948:  MOVLW  01
694A:  MOVWF  x3F
694C:  MOVLB  0
694E:  CALL   17EA
....................          disp_Calentando=0;disp_Llenando=0;disp_Secando=1;disp_Esterilizando=0;disp_Despresurizando=1;disp_Stop=0;disp_Door=0;disp_Fin=1; 
6952:  MOVLB  4
6954:  BCF    x7D.4
6956:  BCF    x7D.5
6958:  BSF    x7D.6
695A:  BCF    x7D.7
695C:  BSF    x7E.0
695E:  BCF    x7E.1
6960:  BCF    x7E.2
6962:  BSF    x7E.3
....................       }    
....................        
....................       if(RIGHT) 
6964:  BSF    F96.1
6966:  BTFSS  F84.1
6968:  BRA    698E
....................       { 
....................          Control=3; 
696A:  MOVLW  03
696C:  MOVWF  x87
....................          EnviarCodigo(); 
696E:  MOVLB  0
6970:  CALL   1AD0
....................          delay_ms(1000); 
6974:  MOVLW  04
6976:  MOVLB  5
6978:  MOVWF  x3A
697A:  MOVLW  FA
697C:  MOVWF  x3F
697E:  MOVLB  0
6980:  CALL   10C2
6984:  MOVLB  5
6986:  DECFSZ x3A,F
6988:  BRA    697A
....................          reset_cpu(); 
698A:  RESET
698C:  MOVLB  4
....................       } 
....................    } 
....................    EVAgua=10; 
698E:  MOVLW  0A
6990:  MOVWF  x81
....................    //EnviarCodigo(); 
....................   } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  while(Menu==100) 
....................  { 
6992:  MOVF   x89,W
6994:  SUBLW  64
6996:  BTFSS  FD8.2
6998:  BRA    6A96
....................     
....................    displayTiempo(datoRx[0],0,10,2,1); 
699A:  MOVFF  4D4,53B
699E:  MOVLB  5
69A0:  CLRF   x3C
69A2:  MOVLW  0A
69A4:  MOVWF  x3D
69A6:  MOVLW  02
69A8:  MOVWF  x3E
69AA:  MOVLW  01
69AC:  MOVWF  x3F
69AE:  MOVLB  0
69B0:  CALL   23C2
....................    displayTiempo(datoRx[1],0,20,2,1); 
69B4:  MOVFF  4D5,53B
69B8:  MOVLB  5
69BA:  CLRF   x3C
69BC:  MOVLW  14
69BE:  MOVWF  x3D
69C0:  MOVLW  02
69C2:  MOVWF  x3E
69C4:  MOVLW  01
69C6:  MOVWF  x3F
69C8:  MOVLB  0
69CA:  CALL   23C2
....................    displayTiempo(datoRx[2],0,30,2,1); 
69CE:  MOVFF  4D6,53B
69D2:  MOVLB  5
69D4:  CLRF   x3C
69D6:  MOVLW  1E
69D8:  MOVWF  x3D
69DA:  MOVLW  02
69DC:  MOVWF  x3E
69DE:  MOVLW  01
69E0:  MOVWF  x3F
69E2:  MOVLB  0
69E4:  CALL   23C2
....................    displayTiempo(datoRx[3],0,40,2,1); 
69E8:  MOVFF  4D7,53B
69EC:  MOVLB  5
69EE:  CLRF   x3C
69F0:  MOVLW  28
69F2:  MOVWF  x3D
69F4:  MOVLW  02
69F6:  MOVWF  x3E
69F8:  MOVLW  01
69FA:  MOVWF  x3F
69FC:  MOVLB  0
69FE:  CALL   23C2
....................    displayTiempo(Opcion,0,50,2,1); 
6A02:  MOVFF  490,53B
6A06:  MOVLB  5
6A08:  CLRF   x3C
6A0A:  MOVLW  32
6A0C:  MOVWF  x3D
6A0E:  MOVLW  02
6A10:  MOVWF  x3E
6A12:  MOVLW  01
6A14:  MOVWF  x3F
6A16:  MOVLB  0
6A18:  CALL   23C2
....................     
....................    Opcion++; 
6A1C:  MOVLB  4
6A1E:  INCF   x90,F
....................    Determina(); 
6A20:  MOVLB  0
6A22:  CALL   1F28
....................    displayTiempo(Puerta,50,10,2,1); 
6A26:  MOVFF  470,53B
6A2A:  MOVLW  32
6A2C:  MOVLB  5
6A2E:  MOVWF  x3C
6A30:  MOVLW  0A
6A32:  MOVWF  x3D
6A34:  MOVLW  02
6A36:  MOVWF  x3E
6A38:  MOVLW  01
6A3A:  MOVWF  x3F
6A3C:  MOVLB  0
6A3E:  CALL   23C2
....................    displayTiempo(Parada,50,20,2,1); 
6A42:  MOVFF  471,53B
6A46:  MOVLW  32
6A48:  MOVLB  5
6A4A:  MOVWF  x3C
6A4C:  MOVLW  14
6A4E:  MOVWF  x3D
6A50:  MOVLW  02
6A52:  MOVWF  x3E
6A54:  MOVLW  01
6A56:  MOVWF  x3F
6A58:  MOVLB  0
6A5A:  CALL   23C2
....................    displayTiempo(ADC_Pt100,50,30,2,1);      
6A5E:  MOVFF  4A3,53D
6A62:  MOVFF  4A2,53C
6A66:  MOVFF  4A1,53B
6A6A:  MOVFF  4A0,53A
6A6E:  CALL   2A60
6A72:  MOVFF  01,53A
6A76:  MOVFF  01,53B
6A7A:  MOVLW  32
6A7C:  MOVLB  5
6A7E:  MOVWF  x3C
6A80:  MOVLW  1E
6A82:  MOVWF  x3D
6A84:  MOVLW  02
6A86:  MOVWF  x3E
6A88:  MOVLW  01
6A8A:  MOVWF  x3F
6A8C:  MOVLB  0
6A8E:  CALL   23C2
....................     
....................  } 
6A92:  MOVLB  4
6A94:  BRA    6992
....................  Determina(); 
6A96:  MOVLB  0
6A98:  CALL   1F28
....................        
....................       while(Parada==0) 
....................       { 
6A9C:  MOVLB  4
6A9E:  MOVF   x71,F
6AA0:  BNZ   6B66
....................          delay_ms(100); 
6AA2:  MOVLW  64
6AA4:  MOVLB  5
6AA6:  MOVWF  x3F
6AA8:  MOVLB  0
6AAA:  CALL   10C2
....................          if(disp_Stop==0) 
6AAE:  MOVLB  4
6AB0:  BTFSC  x7E.1
6AB2:  BRA    6B52
....................          { 
....................             glcd_fillScreen(OFF);  
6AB4:  MOVLB  5
6AB6:  CLRF   x3B
6AB8:  MOVLB  0
6ABA:  CALL   11BA
....................             strcpy(Menus.Letra,"  !Parada!");displayMenu(Menus.Letra,0,10,0,2); 
6ABE:  MOVLW  05
6AC0:  MOVWF  FEA
6AC2:  MOVLW  1A
6AC4:  MOVWF  FE9
6AC6:  MOVFF  FF2,53A
6ACA:  BCF    FF2.7
6ACC:  MOVLW  00
6ACE:  CALL   0E4A
6AD2:  TBLRD*-
6AD4:  TBLRD*+
6AD6:  MOVF   FF5,W
6AD8:  MOVWF  FEE
6ADA:  IORLW  00
6ADC:  BNZ   6AD4
6ADE:  MOVLB  5
6AE0:  BTFSC  x3A.7
6AE2:  BSF    FF2.7
6AE4:  MOVLW  05
6AE6:  MOVWF  x3B
6AE8:  MOVLW  1A
6AEA:  MOVWF  x3A
6AEC:  CLRF   x3C
6AEE:  MOVLW  0A
6AF0:  MOVWF  x3D
6AF2:  CLRF   x3E
6AF4:  MOVLW  02
6AF6:  MOVWF  x3F
6AF8:  MOVLB  0
6AFA:  CALL   17EA
....................             strcpy(Menus.Letra," !Activada!");displayMenu(Menus.Letra,0,30,0,2);emergency=1; 
6AFE:  MOVLW  05
6B00:  MOVWF  FEA
6B02:  MOVLW  1A
6B04:  MOVWF  FE9
6B06:  MOVFF  FF2,53A
6B0A:  BCF    FF2.7
6B0C:  MOVLW  00
6B0E:  CALL   0E70
6B12:  TBLRD*-
6B14:  TBLRD*+
6B16:  MOVF   FF5,W
6B18:  MOVWF  FEE
6B1A:  IORLW  00
6B1C:  BNZ   6B14
6B1E:  MOVLB  5
6B20:  BTFSC  x3A.7
6B22:  BSF    FF2.7
6B24:  MOVLW  05
6B26:  MOVWF  x3B
6B28:  MOVLW  1A
6B2A:  MOVWF  x3A
6B2C:  CLRF   x3C
6B2E:  MOVLW  1E
6B30:  MOVWF  x3D
6B32:  CLRF   x3E
6B34:  MOVLW  02
6B36:  MOVWF  x3F
6B38:  MOVLB  0
6B3A:  CALL   17EA
6B3E:  MOVLB  4
6B40:  BSF    x7C.3
....................             disp_Calentando=0;disp_Llenando=0;disp_Secando=0;disp_Esterilizando=0;disp_Despresurizando=0;disp_Stop=1;disp_Door=0;disp_Fin=0; 
6B42:  BCF    x7D.4
6B44:  BCF    x7D.5
6B46:  BCF    x7D.6
6B48:  BCF    x7D.7
6B4A:  BCF    x7E.0
6B4C:  BSF    x7E.1
6B4E:  BCF    x7E.2
6B50:  BCF    x7E.3
....................          } 
....................          if(CadenaRecibida==1) 
6B52:  BTFSS  x7D.3
6B54:  BRA    6B64
....................          { 
....................             Determina(); 
6B56:  MOVLB  0
6B58:  CALL   1F28
....................             EnviarCodigo(); 
6B5C:  CALL   1AD0
....................             CadenaRecibida=0; 
6B60:  MOVLB  4
6B62:  BCF    x7D.3
....................          } 
....................       }    
6B64:  BRA    6A9E
....................       if(Parada==1) 
6B66:  DECFSZ x71,W
6B68:  BRA    6B86
....................       { 
....................          if(emergency==1) 
6B6A:  BTFSS  x7C.3
6B6C:  BRA    6B86
....................          {glcd_fillScreen(OFF);emergency=0;visual=1;disp_Stop=0;Menu=1;reset_cpu();} 
6B6E:  MOVLB  5
6B70:  CLRF   x3B
6B72:  MOVLB  0
6B74:  CALL   11BA
6B78:  MOVLB  4
6B7A:  BCF    x7C.3
6B7C:  BSF    x7C.4
6B7E:  BCF    x7E.1
6B80:  MOVLW  01
6B82:  MOVWF  x89
6B84:  RESET
....................       } 
....................    } 
6B86:  GOTO   308C
.................... } 
6B8A:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
