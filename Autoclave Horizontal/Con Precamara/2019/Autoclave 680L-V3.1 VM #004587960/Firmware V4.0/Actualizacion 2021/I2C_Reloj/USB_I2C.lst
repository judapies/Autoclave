CCS PCH C Compiler, Version 4.104, 5967               26-may.-21 13:57

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Con Precamara\2019\Autoclave 680L-V3.1 VM #004587960\Firmware V4.0\I2C_Reloj\USB_I2C.lst

               ROM used: 17402 bytes (53%)
                         Largest free fragment is 15366
               RAM used: 898 (44%) at main() level
                         933 (46%) worst case
               Stack:    13 worst case (4 in main + 9 for interrupts)

*
0000:  GOTO   2624
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.3
004A:  GOTO   0054
004E:  BTFSC  F9E.3
0050:  GOTO   0F44
0054:  BTFSS  FA0.5
0056:  GOTO   0060
005A:  BTFSC  FA1.5
005C:  GOTO   0CD2
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F2550.h> 
.................... //////// Standard Header file for the PIC18F2550 device //////////////// 
.................... #device PIC18F2550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,WDT8192,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
1B96:  MOVLW  02
1B98:  MOVWF  FEA
1B9A:  MOVLW  AC
1B9C:  MOVWF  FE9
1B9E:  MOVF   FEF,W
1BA0:  BZ    1BBE
1BA2:  MOVLW  0F
1BA4:  MOVWF  01
1BA6:  CLRF   00
1BA8:  DECFSZ 00,F
1BAA:  BRA    1BA8
1BAC:  DECFSZ 01,F
1BAE:  BRA    1BA6
1BB0:  MOVLW  8F
1BB2:  MOVWF  00
1BB4:  DECFSZ 00,F
1BB6:  BRA    1BB4
1BB8:  NOP   
1BBA:  DECFSZ FEF,F
1BBC:  BRA    1BA2
1BBE:  RETLW  00
.................... #use RS232(BAUD=19200, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7, stream=Printer) 
*
1B8E:  BTFSS  F9E.4
1B90:  BRA    1B8E
1B92:  MOVWF  FAD
1B94:  RETLW  00
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xC0) 
*
0F2C:  MOVF   FC9,W
0F2E:  MOVFF  2C7,FC9
0F32:  BSF    FC6.4
0F34:  BCF    F9E.3
0F36:  BTFSC  FC7.0
0F38:  BRA    0F36
0F3A:  CLRF   01
0F3C:  BTFSC  FC6.4
0F3E:  INCF   01,F
0F40:  GOTO   0F76 (RETURN)
.................... #include <DS1302.c> 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... //#ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_C0 
.................... #define RTC_IO   PIN_C1 
.................... #define RTC_RST  PIN_C2 
....................  
.................... //#endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
1BE2:  MOVLB  2
1BE4:  CLRF   xB5
1BE6:  MOVF   xB5,W
1BE8:  SUBLW  07
1BEA:  BNC   1C06
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
1BEC:  BCF    FD8.0
1BEE:  RRCF   xB4,F
1BF0:  BC    1BF6
1BF2:  BCF    F8B.1
1BF4:  BRA    1BF8
1BF6:  BSF    F8B.1
1BF8:  BCF    F94.1
....................       output_high(RTC_SCLK); 
1BFA:  BCF    F94.0
1BFC:  BSF    F8B.0
....................       output_low(RTC_SCLK); 
1BFE:  BCF    F94.0
1C00:  BCF    F8B.0
....................    } 
1C02:  INCF   xB5,F
1C04:  BRA    1BE6
.................... } 
1C06:  MOVLB  0
1C08:  RETLW  00
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
*
1D8E:  BCF    F94.2
1D90:  BSF    F8B.2
....................    write_ds1302_byte(cmd); 
1D92:  MOVFF  2B2,2B4
1D96:  RCALL  1BE2
....................    write_ds1302_byte(data); 
1D98:  MOVFF  2B3,2B4
1D9C:  RCALL  1BE2
....................    output_low(RTC_RST); 
1D9E:  BCF    F94.2
1DA0:  BCF    F8B.2
.................... } 
1DA2:  RETLW  00
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
*
1C0A:  BCF    F94.2
1C0C:  BSF    F8B.2
....................    write_ds1302_byte(cmd); 
1C0E:  MOVFF  2AF,2B4
1C12:  RCALL  1BE2
....................     
....................    input(RTC_IO); 
1C14:  BSF    F94.1
....................    delay_us(10); 
1C16:  MOVLW  27
1C18:  MOVWF  00
1C1A:  DECFSZ 00,F
1C1C:  BRA    1C1A
1C1E:  BRA    1C20
....................           
....................    for(i=0;i<=7;++i) { 
1C20:  MOVLB  2
1C22:  CLRF   xB0
1C24:  MOVF   xB0,W
1C26:  SUBLW  07
1C28:  BNC   1C58
....................       shift_right(&data,1,input(RTC_IO)); 
1C2A:  BSF    F94.1
1C2C:  BTFSC  F82.1
1C2E:  BRA    1C34
1C30:  BCF    FD8.0
1C32:  BRA    1C36
1C34:  BSF    FD8.0
1C36:  RRCF   xB1,F
....................       output_high(RTC_SCLK); 
1C38:  BCF    F94.0
1C3A:  BSF    F8B.0
....................       delay_us(20); 
1C3C:  MOVLW  4F
1C3E:  MOVWF  00
1C40:  DECFSZ 00,F
1C42:  BRA    1C40
1C44:  BRA    1C46
....................       output_low(RTC_SCLK); 
1C46:  BCF    F94.0
1C48:  BCF    F8B.0
....................       delay_us(20); 
1C4A:  MOVLW  4F
1C4C:  MOVWF  00
1C4E:  DECFSZ 00,F
1C50:  BRA    1C4E
1C52:  BRA    1C54
....................    } 
1C54:  INCF   xB0,F
1C56:  BRA    1C24
....................    output_low(RTC_RST); 
1C58:  BCF    F94.2
1C5A:  BCF    F8B.2
....................  
....................    return(data); 
1C5C:  MOVFF  2B1,01
.................... } 
1C60:  MOVLB  0
1C62:  RETLW  00
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
....................    delay_us(20); 
....................    output_low(RTC_SCLK); 
....................    write_ds1302(0x8e,0); 
....................    write_ds1302(0x90,0xa4); 
....................    x=read_ds1302(0x81); 
....................    if((x & 0x80)!=0) 
....................      write_ds1302(0x80,0); 
.................... } 
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
1D5E:  MOVFF  2B1,2B4
1D62:  MOVLW  0A
1D64:  MOVLB  2
1D66:  MOVWF  xB5
1D68:  MOVLB  0
1D6A:  RCALL  1C96
1D6C:  MOVFF  01,2B2
....................    nibl=data-(nibh*10); 
1D70:  MOVLB  2
1D72:  MOVF   xB2,W
1D74:  MULLW  0A
1D76:  MOVF   FF3,W
1D78:  SUBWF  xB1,W
1D7A:  MOVWF  xB3
....................  
....................    return((nibh<<4)|nibl); 
1D7C:  SWAPF  xB2,W
1D7E:  MOVWF  00
1D80:  MOVLW  F0
1D82:  ANDWF  00,F
1D84:  MOVF   00,W
1D86:  IORWF  xB3,W
1D88:  MOVWF  01
.................... } 
1D8A:  MOVLB  0
1D8C:  RETLW  00
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
1C64:  MOVFF  2B0,2B1
....................    data=(i>>4)*10; 
1C68:  MOVLB  2
1C6A:  SWAPF  xB1,W
1C6C:  MOVWF  00
1C6E:  MOVLW  0F
1C70:  ANDWF  00,F
1C72:  MOVF   00,W
1C74:  MULLW  0A
1C76:  MOVFF  FF3,2B0
....................    data=data+(i<<4>>4); 
1C7A:  SWAPF  xB1,W
1C7C:  MOVWF  00
1C7E:  MOVLW  F0
1C80:  ANDWF  00,F
1C82:  MOVF   00,W
1C84:  SWAPF  00,F
1C86:  MOVLW  0F
1C88:  ANDWF  00,F
1C8A:  MOVF   00,W
1C8C:  ADDWF  xB0,F
....................  
....................    return data; 
1C8E:  MOVFF  2B0,01
.................... } 
1C92:  MOVLB  0
1C94:  RETLW  00
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
1DA4:  MOVFF  2AB,2B1
1DA8:  RCALL  1D5E
1DAA:  MOVFF  01,2B1
1DAE:  MOVLW  86
1DB0:  MOVLB  2
1DB2:  MOVWF  xB2
1DB4:  MOVFF  01,2B3
1DB8:  MOVLB  0
1DBA:  RCALL  1D8E
....................    write_ds1302(0x88,get_bcd(mth)); 
1DBC:  MOVFF  2AC,2B1
1DC0:  RCALL  1D5E
1DC2:  MOVFF  01,2B1
1DC6:  MOVLW  88
1DC8:  MOVLB  2
1DCA:  MOVWF  xB2
1DCC:  MOVFF  01,2B3
1DD0:  MOVLB  0
1DD2:  RCALL  1D8E
....................    write_ds1302(0x8c,get_bcd(year)); 
1DD4:  MOVFF  2AD,2B1
1DD8:  RCALL  1D5E
1DDA:  MOVFF  01,2B1
1DDE:  MOVLW  8C
1DE0:  MOVLB  2
1DE2:  MOVWF  xB2
1DE4:  MOVFF  01,2B3
1DE8:  MOVLB  0
1DEA:  RCALL  1D8E
....................    write_ds1302(0x8a,get_bcd(dow)); 
1DEC:  MOVFF  2AE,2B1
1DF0:  RCALL  1D5E
1DF2:  MOVFF  01,2B1
1DF6:  MOVLW  8A
1DF8:  MOVLB  2
1DFA:  MOVWF  xB2
1DFC:  MOVFF  01,2B3
1E00:  MOVLB  0
1E02:  RCALL  1D8E
....................    write_ds1302(0x84,get_bcd(hr)); 
1E04:  MOVFF  2AF,2B1
1E08:  RCALL  1D5E
1E0A:  MOVFF  01,2B1
1E0E:  MOVLW  84
1E10:  MOVLB  2
1E12:  MOVWF  xB2
1E14:  MOVFF  01,2B3
1E18:  MOVLB  0
1E1A:  RCALL  1D8E
....................    write_ds1302(0x82,get_bcd(min)); 
1E1C:  MOVFF  2B0,2B1
1E20:  RCALL  1D5E
1E22:  MOVFF  01,2B1
1E26:  MOVLW  82
1E28:  MOVLB  2
1E2A:  MOVWF  xB2
1E2C:  MOVFF  01,2B3
1E30:  MOVLB  0
1E32:  RCALL  1D8E
....................    write_ds1302(0x80,get_bcd(0)); 
1E34:  MOVLB  2
1E36:  CLRF   xB1
1E38:  MOVLB  0
1E3A:  RCALL  1D5E
1E3C:  MOVFF  01,2B1
1E40:  MOVLW  80
1E42:  MOVLB  2
1E44:  MOVWF  xB2
1E46:  MOVFF  01,2B3
1E4A:  MOVLB  0
1E4C:  RCALL  1D8E
.................... } 
1E4E:  GOTO   29C2 (RETURN)
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
2808:  MOVLW  87
280A:  MOVLB  2
280C:  MOVWF  xAF
280E:  MOVLB  0
2810:  CALL   1C0A
2814:  MOVFF  01,2AB
2818:  MOVFF  01,2B0
281C:  CALL   1C64
2820:  MOVFF  01,9E
*
29FA:  MOVLW  87
29FC:  MOVLB  2
29FE:  MOVWF  xAF
2A00:  MOVLB  0
2A02:  CALL   1C0A
2A06:  MOVFF  01,2AB
2A0A:  MOVFF  01,2B0
2A0E:  CALL   1C64
2A12:  MOVFF  01,9E
....................    mth = rm_bcd(read_ds1302(0x89)); 
*
2824:  MOVLW  89
2826:  MOVLB  2
2828:  MOVWF  xAF
282A:  MOVLB  0
282C:  CALL   1C0A
2830:  MOVFF  01,2AB
2834:  MOVFF  01,2B0
2838:  CALL   1C64
283C:  MOVFF  01,9D
*
2A16:  MOVLW  89
2A18:  MOVLB  2
2A1A:  MOVWF  xAF
2A1C:  MOVLB  0
2A1E:  CALL   1C0A
2A22:  MOVFF  01,2AB
2A26:  MOVFF  01,2B0
2A2A:  CALL   1C64
2A2E:  MOVFF  01,9D
....................    year = rm_bcd(read_ds1302(0x8d)); 
*
2840:  MOVLW  8D
2842:  MOVLB  2
2844:  MOVWF  xAF
2846:  MOVLB  0
2848:  CALL   1C0A
284C:  MOVFF  01,2AB
2850:  MOVFF  01,2B0
2854:  CALL   1C64
2858:  MOVFF  01,9C
*
2A32:  MOVLW  8D
2A34:  MOVLB  2
2A36:  MOVWF  xAF
2A38:  MOVLB  0
2A3A:  CALL   1C0A
2A3E:  MOVFF  01,2AB
2A42:  MOVFF  01,2B0
2A46:  CALL   1C64
2A4A:  MOVFF  01,9C
....................    dow = rm_bcd(read_ds1302(0x8b)); 
*
285C:  MOVLW  8B
285E:  MOVLB  2
2860:  MOVWF  xAF
2862:  MOVLB  0
2864:  CALL   1C0A
2868:  MOVFF  01,2AB
286C:  MOVFF  01,2B0
2870:  CALL   1C64
2874:  MOVFF  01,A2
*
2A4E:  MOVLW  8B
2A50:  MOVLB  2
2A52:  MOVWF  xAF
2A54:  MOVLB  0
2A56:  CALL   1C0A
2A5A:  MOVFF  01,2AB
2A5E:  MOVFF  01,2B0
2A62:  CALL   1C64
2A66:  MOVFF  01,A2
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
*
2878:  MOVLW  85
287A:  MOVLB  2
287C:  MOVWF  xAF
287E:  MOVLB  0
2880:  CALL   1C0A
2884:  MOVFF  01,2AB
2888:  MOVFF  01,2B0
288C:  CALL   1C64
2890:  MOVFF  01,9F
*
2A6A:  MOVLW  85
2A6C:  MOVLB  2
2A6E:  MOVWF  xAF
2A70:  MOVLB  0
2A72:  CALL   1C0A
2A76:  MOVFF  01,2AB
2A7A:  MOVFF  01,2B0
2A7E:  CALL   1C64
2A82:  MOVFF  01,9F
....................    min = rm_bcd(read_ds1302(0x83)); 
*
2894:  MOVLW  83
2896:  MOVLB  2
2898:  MOVWF  xAF
289A:  MOVLB  0
289C:  CALL   1C0A
28A0:  MOVFF  01,2AB
28A4:  MOVFF  01,2B0
28A8:  CALL   1C64
28AC:  MOVFF  01,A0
*
2A86:  MOVLW  83
2A88:  MOVLB  2
2A8A:  MOVWF  xAF
2A8C:  MOVLB  0
2A8E:  CALL   1C0A
2A92:  MOVFF  01,2AB
2A96:  MOVFF  01,2B0
2A9A:  CALL   1C64
2A9E:  MOVFF  01,A0
....................    sec = rm_bcd(read_ds1302(0x81)); 
*
28B0:  MOVLW  81
28B2:  MOVLB  2
28B4:  MOVWF  xAF
28B6:  MOVLB  0
28B8:  CALL   1C0A
28BC:  MOVFF  01,2AB
28C0:  MOVFF  01,2B0
28C4:  CALL   1C64
28C8:  MOVFF  01,A1
*
2AA2:  MOVLW  81
2AA4:  MOVLB  2
2AA6:  MOVWF  xAF
2AA8:  MOVLB  0
2AAA:  CALL   1C0A
2AAE:  MOVFF  01,2AB
2AB2:  MOVFF  01,2B0
2AB6:  CALL   1C64
2ABA:  MOVFF  01,A1
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
23E8:  CLRF   03
23EA:  MOVLB  2
23EC:  MOVF   xAB,W
23EE:  ADDLW  70
23F0:  MOVWF  FE9
23F2:  MOVLW  0F
23F4:  ADDWFC 03,W
23F6:  MOVWF  FEA
23F8:  MOVF   FEF,F
23FA:  BZ    2416
23FC:  MOVF   xAB,W
23FE:  MULLW  08
2400:  MOVF   FF3,W
2402:  CLRF   xAD
2404:  MOVWF  xAC
2406:  MOVWF  FE9
2408:  MOVLW  04
240A:  ADDWF  xAD,W
240C:  MOVWF  FEA
240E:  MOVFF  FEF,2AC
2412:  BTFSS  xAC.7
2414:  BRA    241A
2416:  MOVLW  00
2418:  BRA    241C
241A:  MOVLW  01
241C:  MOVWF  01
.................... } 
241E:  MOVLB  0
2420:  GOTO   4298 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09E4:  CLRF   03
09E6:  MOVLB  2
09E8:  MOVF   xCD,W
09EA:  ADDLW  70
09EC:  MOVWF  FE9
09EE:  MOVLW  0F
09F0:  ADDWFC 03,W
09F2:  MOVWF  FEA
09F4:  MOVF   FEF,F
09F6:  BZ    0A1C
09F8:  MOVF   xCD,W
09FA:  MULLW  08
09FC:  MOVF   FF3,W
09FE:  CLRF   xCF
0A00:  MOVWF  xCE
0A02:  MOVLW  04
0A04:  ADDWF  xCE,F
0A06:  MOVLW  00
0A08:  ADDWFC xCF,F
0A0A:  MOVFF  2CE,FE9
0A0E:  MOVLW  04
0A10:  ADDWF  xCF,W
0A12:  MOVWF  FEA
0A14:  MOVFF  FEF,2CE
0A18:  BTFSS  xCE.7
0A1A:  BRA    0A20
0A1C:  MOVLW  00
0A1E:  BRA    0A22
0A20:  MOVLW  01
0A22:  MOVWF  01
.................... } 
0A24:  MOVLB  0
0A26:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
1B0E:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
1B10:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
1B12:  MOVLW  08
1B14:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
1B16:  MOVF   F94,W
1B18:  IORLW  30
1B1A:  MOVLB  2
1B1C:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
1B1E:  CLRF   1C
1B20:  CLRF   16
1B22:  BTFSC  FF2.7
1B24:  BSF    16.7
1B26:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
1B28:  MOVLB  0
1B2A:  CALL   02DE
1B2E:  BTFSC  16.7
1B30:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
1B32:  GOTO   1B38 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
1B3C:  CLRF   16
1B3E:  BTFSC  FF2.7
1B40:  BSF    16.7
1B42:  BCF    FF2.7
....................    usb_token_reset(); 
1B44:  CALL   02DE
1B48:  BTFSC  16.7
1B4A:  BSF    FF2.7
....................    UCON = 0; 
1B4C:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
1B4E:  MOVLW  14
1B50:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
1B52:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
1B54:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
1B56:  MOVLW  01
1B58:  MOVWF  1C
.................... } 
1B5A:  GOTO   1B64 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
1B36:  BRA    1B0E
.................... } 
1B38:  GOTO   1B82 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
1B5E:  BTFSC  F6D.3
1B60:  BRA    1B64
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
1B62:  BRA    1B3C
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
1B64:  DECFSZ 1C,W
1B66:  BRA    1B7E
1B68:  BTFSC  F6D.5
1B6A:  BRA    1B7E
....................    { 
....................       UIR=0; 
1B6C:  CLRF   F68
....................       UIE=0; 
1B6E:  CLRF   F69
....................       enable_interrupts(INT_USB); 
1B70:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
1B72:  MOVLW  C0
1B74:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
1B76:  MOVLW  11
1B78:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
1B7A:  MOVLW  02
1B7C:  MOVWF  1C
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
1B7E:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
1B80:  BRA    1B36
....................  
....................    do  
....................    { 
....................       usb_task(); 
1B82:  RCALL  1B5E
....................    } while (usb_state != USB_STATE_POWERED); 
1B84:  MOVF   1C,W
1B86:  SUBLW  02
1B88:  BNZ   1B82
.................... } 
1B8A:  GOTO   278E (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A28:  MOVFF  2C8,2CD
0A2C:  RCALL  09E4
0A2E:  MOVF   01,F
0A30:  BZ    0AFA
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A32:  MOVLB  2
0A34:  MOVF   xC8,W
0A36:  MULLW  08
0A38:  MOVF   FF3,W
0A3A:  CLRF   xCE
0A3C:  MOVWF  xCD
0A3E:  MOVLW  04
0A40:  ADDWF  xCD,F
0A42:  MOVLW  00
0A44:  ADDWFC xCE,F
0A46:  MOVLW  01
0A48:  ADDWF  xCD,W
0A4A:  MOVWF  01
0A4C:  MOVLW  00
0A4E:  ADDWFC xCE,W
0A50:  MOVWF  03
0A52:  MOVFF  01,FE9
0A56:  MOVLW  04
0A58:  ADDWF  03,W
0A5A:  MOVWF  FEA
0A5C:  MOVFF  2C9,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A60:  MOVF   xCB,W
0A62:  SUBLW  02
0A64:  BNZ   0A94
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A66:  MOVF   xC8,W
0A68:  MULLW  08
0A6A:  MOVF   FF3,W
0A6C:  CLRF   xCE
0A6E:  MOVWF  xCD
0A70:  MOVLW  04
0A72:  ADDWF  xCD,F
0A74:  MOVLW  00
0A76:  ADDWFC xCE,F
0A78:  MOVFF  2CD,FE9
0A7C:  MOVLW  04
0A7E:  ADDWF  xCE,W
0A80:  MOVWF  FEA
0A82:  MOVFF  FEF,2CC
....................          if (bit_test(i,6)) 
0A86:  BTFSS  xCC.6
0A88:  BRA    0A8E
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0A8A:  CLRF   xCB
....................          else 
0A8C:  BRA    0A92
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0A8E:  MOVLW  01
0A90:  MOVWF  xCB
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
0A92:  BRA    0ABA
0A94:  MOVF   xCB,W
0A96:  SUBLW  04
0A98:  BNZ   0ABA
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0A9A:  MOVF   xC8,W
0A9C:  MULLW  08
0A9E:  MOVF   FF3,W
0AA0:  CLRF   xCE
0AA2:  MOVWF  FE9
0AA4:  MOVLW  04
0AA6:  ADDWF  xCE,W
0AA8:  MOVWF  FEA
0AAA:  MOVFF  FEF,2CC
....................          if (bit_test(i,6)) 
0AAE:  BTFSS  xCC.6
0AB0:  BRA    0AB8
....................             tgl = USB_DTS_DATA1; 
0AB2:  MOVLW  01
0AB4:  MOVWF  xCB
....................          else 
0AB6:  BRA    0ABA
....................             tgl = USB_DTS_DATA0; 
0AB8:  CLRF   xCB
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0ABA:  DECFSZ xCB,W
0ABC:  BRA    0AC4
....................          i=0xC8;  //DATA1, UOWN 
0ABE:  MOVLW  C8
0AC0:  MOVWF  xCC
....................       else //if (tgl == USB_DTS_DATA0)  
0AC2:  BRA    0AC8
....................          i=0x88; //DATA0, UOWN 
0AC4:  MOVLW  88
0AC6:  MOVWF  xCC
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0AC8:  BTFSC  xCA.0
0ACA:  BSF    xCC.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0ACC:  BTFSC  xCA.1
0ACE:  BSF    xCC.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AD0:  MOVF   xC8,W
0AD2:  MULLW  08
0AD4:  MOVF   FF3,W
0AD6:  CLRF   xCE
0AD8:  MOVWF  xCD
0ADA:  MOVLW  04
0ADC:  ADDWF  xCD,F
0ADE:  MOVLW  00
0AE0:  ADDWFC xCE,F
0AE2:  MOVFF  2CD,FE9
0AE6:  MOVLW  04
0AE8:  ADDWF  xCE,W
0AEA:  MOVWF  FEA
0AEC:  MOVFF  2CC,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0AF0:  MOVLW  01
0AF2:  MOVWF  01
0AF4:  BRA    0B00
....................    } 
....................    else  
0AF6:  BRA    0AF8
0AF8:  MOVLB  0
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0AFA:  MOVLW  00
0AFC:  MOVWF  01
0AFE:  MOVLB  2
.................... } 
0B00:  MOVLB  0
0B02:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
*
2574:  CLRF   16
2576:  BTFSC  FF2.7
2578:  BSF    16.7
257A:  BCF    FF2.7
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
257C:  MOVFF  2AB,2CD
2580:  CALL   09E4
2584:  BTFSC  16.7
2586:  BSF    FF2.7
2588:  MOVF   01,F
258A:  BZ    261C
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
258C:  MOVLB  2
258E:  MOVF   xAB,W
2590:  MULLW  08
2592:  MOVF   FF3,W
2594:  CLRF   xB4
2596:  MOVWF  xB3
2598:  MOVLW  04
259A:  ADDWF  xB3,F
259C:  MOVLW  00
259E:  ADDWFC xB4,F
25A0:  MOVLW  02
25A2:  ADDWF  xB3,W
25A4:  MOVWF  01
25A6:  MOVLW  00
25A8:  ADDWFC xB4,W
25AA:  MOVWF  03
25AC:  MOVFF  01,FE9
25B0:  MOVLW  04
25B2:  ADDWF  03,W
25B4:  MOVWF  FEA
25B6:  MOVFF  FEC,03
25BA:  MOVF   FED,F
25BC:  MOVFF  FEF,2B1
25C0:  MOVFF  03,2B2
....................       memcpy(buff_add, ptr, len);      
25C4:  MOVFF  2B2,FEA
25C8:  MOVFF  2B1,FE9
25CC:  MOVFF  2AD,FE2
25D0:  MOVFF  2AC,FE1
25D4:  MOVFF  2AF,02
25D8:  MOVFF  2AE,01
25DC:  MOVF   01,F
25DE:  BZ    25E4
25E0:  INCF   02,F
25E2:  BRA    25E8
25E4:  MOVF   02,F
25E6:  BZ    25F4
25E8:  MOVFF  FE6,FEE
25EC:  DECFSZ 01,F
25EE:  BRA    25E8
25F0:  DECFSZ 02,F
25F2:  BRA    25E8
25F4:  CLRF   16
25F6:  BTFSC  FF2.7
25F8:  BSF    16.7
25FA:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
25FC:  MOVFF  2AB,2C8
2600:  MOVFF  2AF,2CA
2604:  MOVFF  2AE,2C9
2608:  MOVFF  2B0,2CB
260C:  MOVLB  0
260E:  CALL   0A28
2612:  BTFSC  16.7
2614:  BSF    FF2.7
2616:  MOVF   01,W
2618:  BRA    2620
....................    } 
....................    else  
261A:  BRA    261C
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
261C:  MOVLW  00
261E:  MOVWF  01
.................... } 
2620:  GOTO   43F4 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
091A:  MOVLB  2
091C:  MOVF   xC8,W
091E:  MULLW  08
0920:  MOVF   FF3,W
0922:  CLRF   xCE
0924:  MOVWF  FE9
0926:  MOVLW  04
0928:  ADDWF  xCE,W
092A:  MOVWF  FEA
092C:  MOVFF  FEF,2CA
....................    if (tgl == USB_DTS_TOGGLE)  
0930:  MOVF   xC9,W
0932:  SUBLW  02
0934:  BNZ   0942
....................    { 
....................       if (bit_test(i,6)) 
0936:  BTFSS  xCA.6
0938:  BRA    093E
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
093A:  CLRF   xC9
....................       else 
093C:  BRA    0942
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
093E:  MOVLW  01
0940:  MOVWF  xC9
....................    } 
....................    if (tgl == USB_DTS_STALL)  
0942:  MOVF   xC9,W
0944:  SUBLW  03
0946:  BNZ   096E
....................    { 
....................       i = 0x84; 
0948:  MOVLW  84
094A:  MOVWF  xCA
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
094C:  MOVF   xC8,W
094E:  MULLW  08
0950:  MOVF   FF3,W
0952:  CLRF   xCE
0954:  MOVWF  xCD
0956:  MOVLW  04
0958:  ADDWF  xCD,F
095A:  MOVLW  00
095C:  ADDWFC xCE,F
095E:  MOVFF  2CD,FE9
0962:  MOVLW  04
0964:  ADDWF  xCE,W
0966:  MOVWF  FEA
0968:  MOVLW  84
096A:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
096C:  BRA    097C
096E:  DECFSZ xC9,W
0970:  BRA    0978
....................       i = 0xC8;  //DATA1, UOWN 
0972:  MOVLW  C8
0974:  MOVWF  xCA
....................    else //if (tgl == USB_DTS_DATA0)  
0976:  BRA    097C
....................       i = 0x88; //DATA0, UOWN 
0978:  MOVLW  88
097A:  MOVWF  xCA
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
097C:  BCF    FD8.0
097E:  RLCF   xC8,W
0980:  CLRF   03
0982:  MOVFF  FF2,2CD
0986:  BCF    FF2.7
0988:  MOVLB  0
098A:  CALL   00C2
098E:  TBLRD*+
0990:  MOVFF  FF5,03
0994:  MOVLB  2
0996:  BTFSC  xCD.7
0998:  BSF    FF2.7
099A:  MOVWF  xCB
099C:  MOVFF  03,2CC
....................    EP_BDxCNT_O(endpoint) = len; 
09A0:  MOVF   xC8,W
09A2:  MULLW  08
09A4:  MOVF   FF3,W
09A6:  CLRF   xCE
09A8:  MOVWF  xCD
09AA:  MOVLW  01
09AC:  ADDWF  xCD,W
09AE:  MOVWF  01
09B0:  MOVLW  00
09B2:  ADDWFC xCE,W
09B4:  MOVWF  03
09B6:  MOVFF  01,FE9
09BA:  MOVLW  04
09BC:  ADDWF  03,W
09BE:  MOVWF  FEA
09C0:  MOVFF  2CB,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09C4:  BTFSC  xCC.0
09C6:  BSF    xCA.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09C8:  BTFSC  xCC.1
09CA:  BSF    xCA.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09CC:  MOVF   xC8,W
09CE:  MULLW  08
09D0:  MOVF   FF3,W
09D2:  CLRF   xCE
09D4:  MOVWF  FE9
09D6:  MOVLW  04
09D8:  ADDWF  xCE,W
09DA:  MOVWF  FEA
09DC:  MOVFF  2CA,FEF
.................... } 
09E0:  MOVLB  0
09E2:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
2424:  MOVLB  2
2426:  MOVF   xB0,W
2428:  MULLW  08
242A:  MOVF   FF3,W
242C:  CLRF   xBB
242E:  MOVWF  xBA
2430:  MOVLW  02
2432:  ADDWF  xBA,W
2434:  MOVWF  01
2436:  MOVLW  00
2438:  ADDWFC xBB,W
243A:  MOVWF  03
243C:  MOVFF  01,FE9
2440:  MOVLW  04
2442:  ADDWF  03,W
2444:  MOVWF  FEA
2446:  MOVFF  FEC,03
244A:  MOVF   FED,F
244C:  MOVFF  FEF,2B5
2450:  MOVFF  03,2B6
....................    i = EP_BDxCNT_O(endpoint); 
2454:  MOVF   xB0,W
2456:  MULLW  08
2458:  MOVF   FF3,W
245A:  CLRF   xBB
245C:  MOVWF  xBA
245E:  MOVLW  01
2460:  ADDWF  xBA,W
2462:  MOVWF  01
2464:  MOVLW  00
2466:  ADDWFC xBB,W
2468:  MOVWF  03
246A:  MOVFF  01,FE9
246E:  MOVLW  04
2470:  ADDWF  03,W
2472:  MOVWF  FEA
2474:  MOVF   FEF,W
2476:  CLRF   03
2478:  MOVWF  xB8
247A:  MOVFF  03,2B9
....................    st = EP_BDxST_O(endpoint); 
247E:  MOVF   xB0,W
2480:  MULLW  08
2482:  MOVF   FF3,W
2484:  CLRF   xBB
2486:  MOVWF  FE9
2488:  MOVLW  04
248A:  ADDWF  xBB,W
248C:  MOVWF  FEA
248E:  MOVFF  FEF,2B7
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
2492:  BTFSC  xB7.0
2494:  BSF    xB9.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
2496:  BTFSC  xB7.1
2498:  BSF    xB9.1
....................  
....................    if (i < max) {max = i;} 
249A:  MOVF   xB9,W
249C:  SUBWF  xB4,W
249E:  BNC   24B0
24A0:  BNZ   24A8
24A2:  MOVF   xB3,W
24A4:  SUBWF  xB8,W
24A6:  BC    24B0
24A8:  MOVFF  2B9,2B4
24AC:  MOVFF  2B8,2B3
....................     
....................    memcpy(ptr, al ,max); 
24B0:  MOVFF  2B2,FEA
24B4:  MOVFF  2B1,FE9
24B8:  MOVFF  2B6,FE2
24BC:  MOVFF  2B5,FE1
24C0:  MOVFF  2B4,02
24C4:  MOVFF  2B3,01
24C8:  MOVF   01,F
24CA:  BZ    24D0
24CC:  INCF   02,F
24CE:  BRA    24D4
24D0:  MOVF   02,F
24D2:  BZ    24E0
24D4:  MOVFF  FE6,FEE
24D8:  DECFSZ 01,F
24DA:  BRA    24D4
24DC:  DECFSZ 02,F
24DE:  BRA    24D4
....................  
....................    return(max); 
24E0:  MOVFF  2B3,01
24E4:  MOVFF  2B4,02
.................... } 
24E8:  MOVLB  0
24EA:  GOTO   2504 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
24EE:  MOVFF  2AB,2B0
24F2:  MOVFF  2AD,2B2
24F6:  MOVFF  2AC,2B1
24FA:  MOVFF  2AF,2B4
24FE:  MOVFF  2AE,2B3
2502:  BRA    2424
2504:  MOVFF  02,2AF
2508:  MOVFF  01,2AE
250C:  CLRF   16
250E:  BTFSC  FF2.7
2510:  BSF    16.7
2512:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
2514:  MOVFF  2AB,2C8
2518:  MOVLW  02
251A:  MOVLB  2
251C:  MOVWF  xC9
251E:  MOVLB  0
2520:  CALL   091A
2524:  BTFSC  16.7
2526:  BSF    FF2.7
....................  
....................    return(max); 
2528:  MOVLB  2
252A:  MOVFF  2AE,01
252E:  MOVFF  2AF,02
.................... } 
2532:  MOVLB  0
2534:  GOTO   42B4 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07E0:  MOVLB  2
07E2:  BCF    xC9.0
07E4:  BTFSC  xC8.7
07E6:  BSF    xC9.0
....................    endpoint &= 0x7F; 
07E8:  BCF    xC8.7
....................     
....................    if (direction)  
07EA:  BTFSS  xC9.0
07EC:  BRA    0810
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
07EE:  MOVF   xC8,W
07F0:  MULLW  08
07F2:  MOVF   FF3,W
07F4:  CLRF   xCB
07F6:  MOVWF  xCA
07F8:  MOVLW  04
07FA:  ADDWF  xCA,F
07FC:  MOVLW  00
07FE:  ADDWFC xCB,F
0800:  MOVFF  2CA,FE9
0804:  MOVLW  04
0806:  ADDWF  xCB,W
0808:  MOVWF  FEA
080A:  MOVLW  84
080C:  MOVWF  FEF
....................    } 
....................    else  
080E:  BRA    0824
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0810:  MOVF   xC8,W
0812:  MULLW  08
0814:  MOVF   FF3,W
0816:  CLRF   xCB
0818:  MOVWF  FE9
081A:  MOVLW  04
081C:  ADDWF  xCB,W
081E:  MOVWF  FEA
0820:  MOVLW  84
0822:  MOVWF  FEF
....................    } 
.................... } 
0824:  MOVLB  0
0826:  GOTO   08B8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0798:  MOVLB  2
079A:  BCF    xC9.0
079C:  BTFSC  xC8.7
079E:  BSF    xC9.0
....................    endpoint &= 0x7F; 
07A0:  BCF    xC8.7
....................     
....................    if (direction)  
07A2:  BTFSS  xC9.0
07A4:  BRA    07C8
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07A6:  MOVF   xC8,W
07A8:  MULLW  08
07AA:  MOVF   FF3,W
07AC:  CLRF   xCB
07AE:  MOVWF  xCA
07B0:  MOVLW  04
07B2:  ADDWF  xCA,F
07B4:  MOVLW  00
07B6:  ADDWFC xCB,F
07B8:  MOVFF  2CA,FE9
07BC:  MOVLW  04
07BE:  ADDWF  xCB,W
07C0:  MOVWF  FEA
07C2:  MOVLW  88
07C4:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
07C6:  BRA    07DA
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07C8:  MOVF   xC8,W
07CA:  MULLW  08
07CC:  MOVF   FF3,W
07CE:  CLRF   xCB
07D0:  MOVWF  FE9
07D2:  MOVLW  04
07D4:  ADDWF  xCB,W
07D6:  MOVWF  FEA
07D8:  CLRF   FEF
....................    } 
.................... } 
07DA:  MOVLB  0
07DC:  GOTO   08A8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
082A:  MOVLB  2
082C:  BCF    xC9.0
082E:  BTFSC  xC8.7
0830:  BSF    xC9.0
....................    endpoint &= 0x7F; 
0832:  BCF    xC8.7
....................     
....................    if (direction)  
0834:  BTFSS  xC9.0
0836:  BRA    085A
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0838:  MOVF   xC8,W
083A:  MULLW  08
083C:  MOVF   FF3,W
083E:  CLRF   xCC
0840:  MOVWF  xCB
0842:  MOVLW  04
0844:  ADDWF  xCB,F
0846:  MOVLW  00
0848:  ADDWFC xCC,F
084A:  MOVFF  2CB,FE9
084E:  MOVLW  04
0850:  ADDWF  xCC,W
0852:  MOVWF  FEA
0854:  MOVFF  FEF,2CA
....................    } 
....................    else  
0858:  BRA    086E
....................    { 
....................       st=EP_BDxST_O(endpoint); 
085A:  MOVF   xC8,W
085C:  MULLW  08
085E:  MOVF   FF3,W
0860:  CLRF   xCC
0862:  MOVWF  FE9
0864:  MOVLW  04
0866:  ADDWF  xCC,W
0868:  MOVWF  FEA
086A:  MOVFF  FEF,2CA
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
086E:  BTFSS  xCA.7
0870:  BRA    0876
0872:  BTFSC  xCA.2
0874:  BRA    087A
0876:  MOVLW  00
0878:  BRA    087C
087A:  MOVLW  01
087C:  MOVWF  01
.................... } 
087E:  MOVLB  0
0880:  GOTO   08D0 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B0E:  MOVFF  2C9,F6E
....................     
....................    if (address)  
0B12:  MOVLB  2
0B14:  MOVF   xC9,F
0B16:  BZ    0B1E
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B18:  MOVLW  04
0B1A:  MOVWF  1C
....................    } 
....................    else  
0B1C:  BRA    0B22
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B1E:  MOVLW  02
0B20:  MOVWF  1C
....................    } 
.................... } 
0B22:  MOVLB  0
0B24:  GOTO   0B32 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
0464:  MOVLB  2
0466:  MOVF   xC8,F
0468:  BNZ   0476
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
046A:  MOVLW  04
046C:  MOVWF  1C
....................       usb_disable_endpoints(); 
046E:  MOVLB  0
0470:  RCALL  02C0
....................    } 
....................    else  
0472:  BRA    0630
0474:  MOVLB  2
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
0476:  MOVLW  05
0478:  MOVWF  1C
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
047A:  MOVLW  04
047C:  MOVWF  xCB
047E:  MOVLW  90
0480:  MOVWF  xCA
....................       for (en=1; en<USB_NUM_UEP; en++)  
0482:  MOVLW  01
0484:  MOVWF  xC9
0486:  MOVF   xC9,W
0488:  SUBLW  0F
048A:  BTFSS  FD8.0
048C:  BRA    0630
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
048E:  MOVFF  2C9,2D1
0492:  MOVLB  0
0494:  RCALL  026C
....................          new_uep = 0; 
0496:  MOVLB  2
0498:  CLRF   xCC
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
049A:  CLRF   03
049C:  MOVF   xC9,W
049E:  MOVFF  FF2,2D0
04A2:  BCF    FF2.7
04A4:  MOVLB  0
04A6:  RCALL  00A2
04A8:  MOVLB  2
04AA:  BTFSC  xD0.7
04AC:  BSF    FF2.7
04AE:  SUBLW  FF
04B0:  BZ    0568
....................          { 
....................             new_uep = 0x04; 
04B2:  MOVLW  04
04B4:  MOVWF  xCC
....................             len = usb_ep_rx_size[en]; 
04B6:  BCF    FD8.0
04B8:  RLCF   xC9,W
04BA:  CLRF   03
04BC:  MOVFF  FF2,2D0
04C0:  BCF    FF2.7
04C2:  MOVLB  0
04C4:  RCALL  00C2
04C6:  TBLRD*+
04C8:  MOVFF  FF5,03
04CC:  MOVLB  2
04CE:  BTFSC  xD0.7
04D0:  BSF    FF2.7
04D2:  MOVWF  xCD
04D4:  MOVFF  03,2CE
....................             EP_BDxCNT_O(en) = len; 
04D8:  MOVF   xC9,W
04DA:  MULLW  08
04DC:  MOVF   FF3,W
04DE:  CLRF   xD1
04E0:  MOVWF  xD0
04E2:  MOVLW  01
04E4:  ADDWF  xD0,W
04E6:  MOVWF  01
04E8:  MOVLW  00
04EA:  ADDWFC xD1,W
04EC:  MOVWF  03
04EE:  MOVFF  01,FE9
04F2:  MOVLW  04
04F4:  ADDWF  03,W
04F6:  MOVWF  FEA
04F8:  MOVFF  2CD,FEF
....................             EP_BDxADR_O(en) = addy; 
04FC:  MOVF   xC9,W
04FE:  MULLW  08
0500:  MOVF   FF3,W
0502:  CLRF   xD1
0504:  MOVWF  xD0
0506:  MOVLW  02
0508:  ADDWF  xD0,W
050A:  MOVWF  01
050C:  MOVLW  00
050E:  ADDWFC xD1,W
0510:  MOVWF  03
0512:  MOVFF  01,FE9
0516:  MOVLW  04
0518:  ADDWF  03,W
051A:  MOVWF  FEA
051C:  MOVFF  2CB,FEC
0520:  MOVF   FED,F
0522:  MOVFF  2CA,FEF
....................             addy += usb_ep_rx_size[en]; 
0526:  BCF    FD8.0
0528:  RLCF   xC9,W
052A:  CLRF   03
052C:  MOVFF  FF2,2D0
0530:  BCF    FF2.7
0532:  MOVLB  0
0534:  RCALL  00C2
0536:  TBLRD*+
0538:  MOVFF  FF5,03
053C:  MOVLB  2
053E:  BTFSC  xD0.7
0540:  BSF    FF2.7
0542:  ADDWF  xCA,F
0544:  MOVF   03,W
0546:  ADDWFC xCB,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
0548:  MOVLW  88
054A:  MOVWF  xCF
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
054C:  BTFSC  xCE.0
054E:  BSF    xCF.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0550:  BTFSC  xCE.1
0552:  BSF    xCF.1
....................             EP_BDxST_O(en) = i; 
0554:  MOVF   xC9,W
0556:  MULLW  08
0558:  MOVF   FF3,W
055A:  CLRF   xD1
055C:  MOVWF  FE9
055E:  MOVLW  04
0560:  ADDWF  xD1,W
0562:  MOVWF  FEA
0564:  MOVFF  2CF,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0568:  CLRF   03
056A:  MOVF   xC9,W
056C:  MOVFF  FF2,2D0
0570:  BCF    FF2.7
0572:  MOVLB  0
0574:  RCALL  00A2
0576:  MOVLB  2
0578:  BTFSC  xD0.7
057A:  BSF    FF2.7
057C:  SUBLW  FF
057E:  BZ    05F6
....................          { 
....................             new_uep |= 0x02; 
0580:  BSF    xCC.1
....................             EP_BDxADR_I(en) = addy; 
0582:  MOVF   xC9,W
0584:  MULLW  08
0586:  MOVF   FF3,W
0588:  CLRF   xD1
058A:  MOVWF  xD0
058C:  MOVLW  04
058E:  ADDWF  xD0,F
0590:  MOVLW  00
0592:  ADDWFC xD1,F
0594:  MOVLW  02
0596:  ADDWF  xD0,W
0598:  MOVWF  01
059A:  MOVLW  00
059C:  ADDWFC xD1,W
059E:  MOVWF  03
05A0:  MOVFF  01,FE9
05A4:  MOVLW  04
05A6:  ADDWF  03,W
05A8:  MOVWF  FEA
05AA:  MOVFF  2CB,FEC
05AE:  MOVF   FED,F
05B0:  MOVFF  2CA,FEF
....................             addy += usb_ep_tx_size[en]; 
05B4:  BCF    FD8.0
05B6:  RLCF   xC9,W
05B8:  CLRF   03
05BA:  MOVFF  FF2,2D0
05BE:  BCF    FF2.7
05C0:  MOVLB  0
05C2:  RCALL  00C2
05C4:  TBLRD*+
05C6:  MOVFF  FF5,03
05CA:  MOVLB  2
05CC:  BTFSC  xD0.7
05CE:  BSF    FF2.7
05D0:  ADDWF  xCA,F
05D2:  MOVF   03,W
05D4:  ADDWFC xCB,F
....................             EP_BDxST_I(en) = 0x40; 
05D6:  MOVF   xC9,W
05D8:  MULLW  08
05DA:  MOVF   FF3,W
05DC:  CLRF   xD1
05DE:  MOVWF  xD0
05E0:  MOVLW  04
05E2:  ADDWF  xD0,F
05E4:  MOVLW  00
05E6:  ADDWFC xD1,F
05E8:  MOVFF  2D0,FE9
05EC:  MOVLW  04
05EE:  ADDWF  xD1,W
05F0:  MOVWF  FEA
05F2:  MOVLW  40
05F4:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
05F6:  MOVF   xCC,W
05F8:  SUBLW  06
05FA:  BNZ   0600
05FC:  MOVLW  0E
05FE:  MOVWF  xCC
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
0600:  CLRF   03
0602:  MOVF   xC9,W
0604:  MOVFF  FF2,2D0
0608:  BCF    FF2.7
060A:  MOVLB  0
060C:  RCALL  00A2
060E:  MOVLB  2
0610:  BTFSC  xD0.7
0612:  BSF    FF2.7
0614:  SUBLW  01
0616:  BTFSS  FD8.2
0618:  BSF    xCC.4
....................           
....................          UEP(en) = new_uep; 
061A:  CLRF   03
061C:  MOVF   xC9,W
061E:  ADDLW  70
0620:  MOVWF  FE9
0622:  MOVLW  0F
0624:  ADDWFC 03,W
0626:  MOVWF  FEA
0628:  MOVFF  2CC,FEF
....................       } 
062C:  INCF   xC9,F
062E:  BRA    0486
0630:  MOVLB  0
....................    } 
.................... } 
0632:  GOTO   06DA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
026C:  CLRF   03
026E:  MOVLB  2
0270:  MOVF   xD1,W
0272:  ADDLW  70
0274:  MOVWF  FE9
0276:  MOVLW  0F
0278:  ADDWFC 03,W
027A:  MOVWF  FEA
027C:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
027E:  MOVFF  2D1,2D2
0282:  MOVLB  0
0284:  RCALL  0208
0286:  MOVF   01,F
0288:  BZ    02BC
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
028A:  MOVLB  2
028C:  MOVF   xD1,W
028E:  MULLW  08
0290:  MOVF   FF3,W
0292:  CLRF   xD3
0294:  MOVWF  FE9
0296:  MOVLW  04
0298:  ADDWF  xD3,W
029A:  MOVWF  FEA
029C:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
029E:  MOVF   xD1,W
02A0:  MULLW  08
02A2:  MOVF   FF3,W
02A4:  CLRF   xD3
02A6:  MOVWF  xD2
02A8:  MOVLW  04
02AA:  ADDWF  xD2,F
02AC:  MOVLW  00
02AE:  ADDWFC xD3,F
02B0:  MOVFF  2D2,FE9
02B4:  MOVLW  04
02B6:  ADDWF  xD3,W
02B8:  MOVWF  FEA
02BA:  CLRF   FEF
02BC:  MOVLB  0
....................    } 
.................... } 
02BE:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02C0:  MOVLW  01
02C2:  MOVLB  2
02C4:  MOVWF  xD0
02C6:  MOVF   xD0,W
02C8:  SUBLW  0F
02CA:  BNC   02DA
....................       usb_disable_endpoint(i); 
02CC:  MOVFF  2D0,2D1
02D0:  MOVLB  0
02D2:  RCALL  026C
02D4:  MOVLB  2
02D6:  INCF   xD0,F
02D8:  BRA    02C6
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
02DA:  MOVLB  0
02DC:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
.................... } 
0006:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CD2:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CD4:  MOVF   1C,F
0CD6:  BNZ   0CDA
0CD8:  BRA    0D56
....................    if (UIR)  
0CDA:  MOVF   F68,F
0CDC:  BZ    0D56
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CDE:  BTFSS  F68.2
0CE0:  BRA    0CEA
0CE2:  BTFSS  F69.2
0CE4:  BRA    0CEA
0CE6:  GOTO   01C2
....................  
....................       if (UCON_SUSPND) return; 
0CEA:  BTFSS  F6D.1
0CEC:  BRA    0CF0
0CEE:  BRA    0D56
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0CF0:  BTFSS  F68.5
0CF2:  BRA    0CFC
0CF4:  BTFSS  F69.5
0CF6:  BRA    0CFC
0CF8:  GOTO   01F2
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0CFC:  BTFSS  F68.1
0CFE:  BRA    0D08
0D00:  BTFSS  F69.1
0D02:  BRA    0D08
0D04:  GOTO   0200
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D08:  BTFSS  F68.0
0D0A:  BRA    0D14
0D0C:  BTFSS  F69.0
0D0E:  BRA    0D14
0D10:  GOTO   0306
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D14:  BTFSS  F68.4
0D16:  BRA    0D20
0D18:  BTFSS  F69.4
0D1A:  BRA    0D20
0D1C:  GOTO   0330
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D20:  BTFSS  F68.6
0D22:  BRA    0D2C
0D24:  BTFSS  F69.6
0D26:  BRA    0D2C
0D28:  GOTO   033A
....................  
....................       TRNAttempts = 0; 
0D2C:  MOVLB  2
0D2E:  CLRF   xC5
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D30:  BTFSS  F68.3
0D32:  BRA    0D48
0D34:  BTFSS  F69.3
0D36:  BRA    0D48
....................          { 
....................             USTATCopy = U1STAT; 
0D38:  MOVFF  F6C,1B
....................             usb_clear_trn(); 
0D3C:  MOVLB  0
0D3E:  CALL   0004
....................             usb_isr_tok_dne(); 
0D42:  BRA    0B58
....................          } 
....................          else 
0D44:  BRA    0D4A
0D46:  MOVLB  2
....................             break; 
0D48:  BRA    0D54
....................       } while (TRNAttempts++ < 4); 
0D4A:  MOVLB  2
0D4C:  MOVF   xC5,W
0D4E:  INCF   xC5,F
0D50:  SUBLW  03
0D52:  BC    0D30
0D54:  MOVLB  0
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
0D56:  GOTO   0060
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
033A:  BCF    F68.6
.................... } 
033C:  GOTO   0D2C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
0306:  CLRF   F6A
....................    UIR = 0; 
0308:  CLRF   F68
....................    UEIE = 0x9F; 
030A:  MOVLW  9F
030C:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
030E:  MOVLW  3D
0310:  MOVWF  F69
....................  
....................    UADDR = 0; 
0312:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
0314:  RCALL  02C0
....................     
....................    usb_token_reset(); 
0316:  RCALL  02DE
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
0318:  MOVLW  16
031A:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
031C:  BTFSS  F68.3
031E:  BRA    0324
....................       usb_clear_trn(); 
0320:  RCALL  0004
....................    } 
0322:  BRA    031C
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
0324:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
0326:  RCALL  01D2
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0328:  MOVLW  03
032A:  MOVWF  1C
.................... } 
032C:  GOTO   0D14 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01D2:  MOVLW  40
01D4:  MOVLB  4
01D6:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01D8:  MOVLW  04
01DA:  MOVWF  x03
01DC:  MOVLW  10
01DE:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01E0:  MOVLW  88
01E2:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01E4:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01E6:  MOVLW  04
01E8:  MOVWF  x07
01EA:  MOVLW  50
01EC:  MOVWF  x06
.................... } 
01EE:  MOVLB  0
01F0:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0200:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
0202:  BCF    F68.1
.................... } 
0204:  GOTO   0D08 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
0330:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
0332:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
0334:  BSF    F6D.1
.................... } 
0336:  GOTO   0D20 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01C2:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01C4:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
01C6:  BTFSS  F68.2
01C8:  BRA    01CE
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01CA:  BCF    F68.2
....................    } 
01CC:  BRA    01C6
.................... } 
01CE:  GOTO   0CEA (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
01F2:  BTFSS  F70.0
01F4:  BRA    01FA
....................    { 
....................       usb_init_ep0_setup(); 
01F6:  RCALL  01D2
....................       bit_clear(UEP(0), 0); 
01F8:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
01FA:  BCF    F68.5
.................... } 
01FC:  GOTO   0CFC (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
0340:  MOVFF  2CB,1D
0344:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
0346:  MOVLW  FF
0348:  MOVWF  1D
034A:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B58:  RRCF   1B,W
0B5A:  MOVLB  2
0B5C:  MOVWF  xC6
0B5E:  RRCF   xC6,F
0B60:  RRCF   xC6,F
0B62:  MOVLW  1F
0B64:  ANDWF  xC6,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B66:  MOVF   1B,F
0B68:  BNZ   0C08
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B6A:  MOVLB  4
0B6C:  MOVF   x00,W
0B6E:  ANDLW  3C
0B70:  MOVLB  2
0B72:  MOVWF  xC7
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B74:  MOVLW  43
0B76:  MOVLB  4
0B78:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B7A:  MOVLB  2
0B7C:  MOVF   xC7,W
0B7E:  SUBLW  34
0B80:  BNZ   0BCC
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B82:  MOVLB  4
0B84:  MOVF   x04,W
0B86:  ANDLW  80
0B88:  BZ    0B8C
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0B8A:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0B8C:  MOVLB  0
0B8E:  BRA    08EE
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0B90:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0B92:  INCFSZ 1D,W
0B94:  BRA    0BA4
....................             usb_flush_out(0, USB_DTS_STALL); 
0B96:  MOVLB  2
0B98:  CLRF   xC8
0B9A:  MOVLW  03
0B9C:  MOVWF  xC9
0B9E:  MOVLB  0
0BA0:  RCALL  091A
....................          else  
0BA2:  BRA    0BC8
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BA4:  MOVLB  2
0BA6:  CLRF   xC8
0BA8:  MOVLW  02
0BAA:  MOVWF  xC9
0BAC:  MOVLB  0
0BAE:  RCALL  091A
....................             if (__setup_0_tx_size != 0xFE) 
0BB0:  MOVF   1D,W
0BB2:  SUBLW  FE
0BB4:  BZ    0BC8
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BB6:  MOVLB  2
0BB8:  CLRF   xC8
0BBA:  CLRF   xCA
0BBC:  MOVFF  1D,2C9
0BC0:  MOVLW  04
0BC2:  MOVWF  xCB
0BC4:  MOVLB  0
0BC6:  RCALL  0A28
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BC8:  BRA    0C04
0BCA:  MOVLB  2
0BCC:  MOVF   xC7,W
0BCE:  SUBLW  04
0BD0:  BNZ   0C06
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BD2:  CLRF   xC8
0BD4:  MOVLB  0
0BD6:  RCALL  0B04
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BD8:  MOVLB  2
0BDA:  CLRF   xC8
0BDC:  MOVLW  02
0BDE:  MOVWF  xC9
0BE0:  MOVLB  0
0BE2:  RCALL  091A
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BE4:  MOVF   1D,W
0BE6:  SUBLW  FE
0BE8:  BZ    0C02
0BEA:  INCFSZ 1D,W
0BEC:  BRA    0BF0
0BEE:  BRA    0C02
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0BF0:  MOVLB  2
0BF2:  CLRF   xC8
0BF4:  CLRF   xCA
0BF6:  MOVFF  1D,2C9
0BFA:  MOVLW  01
0BFC:  MOVWF  xCB
0BFE:  MOVLB  0
0C00:  RCALL  0A28
....................          } 
....................       } 
....................       else 
0C02:  BRA    0C04
0C04:  MOVLB  2
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
0C06:  BRA    0CCC
0C08:  MOVF   1B,W
0C0A:  SUBLW  04
0C0C:  BNZ   0C3E
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C0E:  MOVLW  43
0C10:  MOVLB  4
0C12:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C14:  MOVLW  FF
0C16:  MOVWF  1D
....................       usb_isr_tok_in_dne(0); 
0C18:  MOVLB  2
0C1A:  CLRF   xC8
0C1C:  MOVLB  0
0C1E:  RCALL  0B36
....................       if (__setup_0_tx_size!=0xFF) 
0C20:  INCFSZ 1D,W
0C22:  BRA    0C26
0C24:  BRA    0C3A
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C26:  MOVLB  2
0C28:  CLRF   xC8
0C2A:  CLRF   xCA
0C2C:  MOVFF  1D,2C9
0C30:  MOVLW  02
0C32:  MOVWF  xCB
0C34:  MOVLB  0
0C36:  RCALL  0A28
....................       else 
0C38:  BRA    0C3A
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
0C3A:  BRA    0CCA
0C3C:  MOVLB  2
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C3E:  BTFSC  1B.2
0C40:  BRA    0C7C
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C42:  MOVF   xC6,W
0C44:  MULLW  08
0C46:  MOVF   FF3,W
0C48:  CLRF   xC9
0C4A:  MOVWF  01
0C4C:  MOVLW  04
0C4E:  ADDWF  xC9,W
0C50:  MOVWF  03
0C52:  MOVF   xC6,W
0C54:  MULLW  08
0C56:  MOVF   FF3,W
0C58:  CLRF   xCB
0C5A:  MOVWF  FE9
0C5C:  MOVLW  04
0C5E:  ADDWF  xCB,W
0C60:  MOVWF  FEA
0C62:  MOVF   FEF,W
0C64:  ANDLW  43
0C66:  MOVFF  03,FEA
0C6A:  MOVFF  01,FE9
0C6E:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C70:  MOVFF  2C6,2C8
0C74:  MOVLB  0
0C76:  RCALL  0B04
....................       } 
....................       else  
0C78:  BRA    0CCA
0C7A:  MOVLB  2
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C7C:  MOVF   xC6,W
0C7E:  MULLW  08
0C80:  MOVF   FF3,W
0C82:  CLRF   xC9
0C84:  MOVWF  xC8
0C86:  MOVLW  04
0C88:  ADDWF  xC8,F
0C8A:  MOVLW  00
0C8C:  ADDWFC xC9,F
0C8E:  MOVFF  2C8,01
0C92:  MOVLW  04
0C94:  ADDWF  xC9,W
0C96:  MOVWF  03
0C98:  MOVF   xC6,W
0C9A:  MULLW  08
0C9C:  MOVF   FF3,W
0C9E:  CLRF   xCB
0CA0:  MOVWF  xCA
0CA2:  MOVLW  04
0CA4:  ADDWF  xCA,F
0CA6:  MOVLW  00
0CA8:  ADDWFC xCB,F
0CAA:  MOVFF  2CA,FE9
0CAE:  MOVLW  04
0CB0:  ADDWF  xCB,W
0CB2:  MOVWF  FEA
0CB4:  MOVF   FEF,W
0CB6:  ANDLW  43
0CB8:  MOVFF  03,FEA
0CBC:  MOVFF  2C8,FE9
0CC0:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CC2:  MOVFF  2C6,2C8
0CC6:  MOVLB  0
0CC8:  RCALL  0B36
0CCA:  MOVLB  2
....................       } 
....................    } 
.................... } 
0CCC:  MOVLB  0
0CCE:  GOTO   0D44 (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
23E0:  MOVF   18,W
23E2:  MOVWF  01
.................... } 
23E4:  GOTO   4286 (RETURN)
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02DE:  MOVLB  2
02E0:  CLRF   xC6
02E2:  MOVF   xC6,F
02E4:  BNZ   02FA
....................       USB_Interface[i] = 0;   //reset each interface to default 
02E6:  CLRF   03
02E8:  MOVF   xC6,W
02EA:  ADDLW  21
02EC:  MOVWF  FE9
02EE:  MOVLW  00
02F0:  ADDWFC 03,W
02F2:  MOVWF  FEA
02F4:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
02F6:  INCF   xC6,F
02F8:  BRA    02E2
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
02FA:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
02FC:  MOVLW  01
02FE:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0300:  CLRF   17
.................... } 
0302:  MOVLB  0
0304:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0208:  MOVLB  2
020A:  BCF    xD3.0
020C:  BTFSC  xD2.7
020E:  BSF    xD3.0
....................     
....................    endpoint &= 0x7F; 
0210:  BCF    xD2.7
....................     
....................    if (endpoint > 16) 
0212:  MOVF   xD2,W
0214:  SUBLW  10
0216:  BC    021E
....................       return(FALSE); 
0218:  MOVLW  00
021A:  MOVWF  01
021C:  BRA    0268
....................     
....................    if (direction) { //IN 
021E:  BTFSS  xD3.0
0220:  BRA    0246
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
0222:  CLRF   03
0224:  MOVF   xD2,W
0226:  MOVFF  FF2,2D4
022A:  BCF    FF2.7
022C:  MOVLB  0
022E:  RCALL  00A2
0230:  MOVLB  2
0232:  BTFSC  xD4.7
0234:  BSF    FF2.7
0236:  SUBLW  FF
0238:  BNZ   023E
023A:  MOVLW  00
023C:  BRA    0240
023E:  MOVLW  01
0240:  MOVWF  01
0242:  BRA    0268
....................    } 
....................    else {   //OUT 
0244:  BRA    0268
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
0246:  CLRF   03
0248:  MOVF   xD2,W
024A:  MOVFF  FF2,2D4
024E:  BCF    FF2.7
0250:  MOVLB  0
0252:  RCALL  00A2
0254:  MOVLB  2
0256:  BTFSC  xD4.7
0258:  BSF    FF2.7
025A:  SUBLW  FF
025C:  BNZ   0262
025E:  MOVLW  00
0260:  BRA    0264
0262:  MOVLW  01
0264:  MOVWF  01
0266:  BRA    0268
....................    } 
.................... } 
0268:  MOVLB  0
026A:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B36:  MOVLB  2
0B38:  MOVF   xC8,F
0B3A:  BNZ   0B54
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B3C:  DECFSZ 17,W
0B3E:  BRA    0B48
0B40:  MOVLB  0
0B42:  RCALL  034C
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B44:  BRA    0B52
0B46:  MOVLB  2
0B48:  MOVF   17,W
0B4A:  SUBLW  02
0B4C:  BNZ   0B54
0B4E:  MOVLB  0
0B50:  BRA    0B28
0B52:  MOVLB  2
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0B54:  MOVLB  0
0B56:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B04:  MOVLB  2
0B06:  MOVF   xC8,F
0B08:  BNZ   0B0A
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
0B0A:  MOVLB  0
0B0C:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
08EE:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
08F0:  MOVLB  4
08F2:  MOVF   x10,W
08F4:  ANDLW  7F
08F6:  XORLW  00
08F8:  MOVLB  0
08FA:  BZ    0906
08FC:  XORLW  01
08FE:  BZ    090A
0900:  XORLW  03
0902:  BZ    090E
0904:  BRA    0912
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
0906:  BRA    0636
....................          break; 
0908:  BRA    0916
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
090A:  BRA    06EE
....................          break; 
090C:  BRA    0916
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
090E:  BRA    0884
....................          break; 
0910:  BRA    0916
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
0912:  RCALL  0346
....................          break; 
0914:  BRA    0916
....................    } 
.................... } 
0916:  GOTO   0B90 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
0636:  MOVLB  4
0638:  MOVF   x11,W
063A:  XORLW  00
063C:  MOVLB  0
063E:  BZ    065A
0640:  XORLW  01
0642:  BZ    066E
0644:  XORLW  02
0646:  BZ    0688
0648:  XORLW  06
064A:  BZ    06A0
064C:  XORLW  03
064E:  BZ    06B2
0650:  XORLW  0E
0652:  BZ    06B6
0654:  XORLW  01
0656:  BZ    06C6
0658:  BRA    06E6
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
065A:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
065E:  MOVLB  4
0660:  CLRF   x51
....................             usb_request_send_response(2); 
0662:  MOVLW  02
0664:  MOVLB  2
0666:  MOVWF  xCB
0668:  MOVLB  0
066A:  RCALL  0340
....................             break; 
066C:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
066E:  MOVLB  4
0670:  DECFSZ x12,W
0672:  BRA    0682
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
0674:  MOVLW  01
0676:  ANDWF  19,F
....................                usb_put_0len_0(); 
0678:  MOVLB  2
067A:  CLRF   xCB
067C:  MOVLB  0
067E:  RCALL  0340
....................             } 
....................             else 
0680:  BRA    0686
....................                usb_request_stall(); 
0682:  MOVLB  0
0684:  RCALL  0346
....................             break; 
0686:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0688:  MOVLB  4
068A:  DECFSZ x12,W
068C:  BRA    069A
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
068E:  BSF    19.1
....................                usb_put_0len_0(); 
0690:  MOVLB  2
0692:  CLRF   xCB
0694:  MOVLB  0
0696:  RCALL  0340
....................             } 
....................             else 
0698:  BRA    069E
....................                usb_request_stall(); 
069A:  MOVLB  0
069C:  RCALL  0346
....................             break; 
069E:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06A0:  MOVLW  02
06A2:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06A4:  MOVFF  412,1E
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06A8:  MOVLB  2
06AA:  CLRF   xCB
06AC:  MOVLB  0
06AE:  RCALL  0340
....................             break; 
06B0:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06B2:  BRA    03E6
....................             break; 
06B4:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06B6:  MOVFF  18,450
....................             usb_request_send_response(1); 
06BA:  MOVLW  01
06BC:  MOVLB  2
06BE:  MOVWF  xCB
06C0:  MOVLB  0
06C2:  RCALL  0340
....................             break; 
06C4:  BRA    06EA
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06C6:  MOVLB  4
06C8:  MOVF   x12,W
06CA:  SUBLW  01
06CC:  BNC   06E2
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06CE:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06D2:  MOVFF  412,2C8
06D6:  MOVLB  0
06D8:  BRA    0464
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06DA:  MOVLB  2
06DC:  CLRF   xCB
06DE:  MOVLB  0
06E0:  RCALL  0340
....................             } 
....................             break; 
06E2:  MOVLB  0
06E4:  BRA    06EA
....................  
....................       default: 
....................             usb_request_stall(); 
06E6:  RCALL  0346
....................             break; 
06E8:  BRA    06EA
....................    } 
.................... } 
06EA:  GOTO   0916 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
06EE:  MOVFF  18,2C8
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
06F2:  MOVLB  4
06F4:  MOVF   x11,W
06F6:  XORLW  00
06F8:  MOVLB  0
06FA:  BZ    0706
06FC:  XORLW  0A
06FE:  BZ    0718
0700:  XORLW  01
0702:  BZ    0766
0704:  BRA    0790
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
0706:  MOVLB  4
0708:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
070A:  CLRF   x51
....................             usb_request_send_response(2); 
070C:  MOVLW  02
070E:  MOVLB  2
0710:  MOVWF  xCB
0712:  MOVLB  0
0714:  RCALL  0340
....................             break; 
0716:  BRA    0794
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0718:  MOVLB  2
071A:  MOVF   xC8,F
071C:  BZ    0760
071E:  MOVLW  01
0720:  SUBWF  xC8,W
0722:  CLRF   03
0724:  MOVFF  FF2,2C9
0728:  BCF    FF2.7
072A:  MOVLB  0
072C:  RCALL  0134
072E:  MOVLB  2
0730:  BTFSC  xC9.7
0732:  BSF    FF2.7
0734:  MOVWF  01
0736:  MOVLB  4
0738:  SUBWF  x14,W
073A:  BTFSS  FD8.0
073C:  BRA    0742
073E:  MOVLB  2
0740:  BRA    0760
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
0742:  CLRF   03
0744:  MOVF   x14,W
0746:  ADDLW  21
0748:  MOVWF  FE9
074A:  MOVLW  00
074C:  ADDWFC 03,W
074E:  MOVWF  FEA
0750:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
0754:  MOVLW  01
0756:  MOVLB  2
0758:  MOVWF  xCB
075A:  MOVLB  0
075C:  RCALL  0340
....................             } 
....................             else 
075E:  BRA    0764
....................                usb_request_stall(); 
0760:  MOVLB  0
0762:  RCALL  0346
....................             break; 
0764:  BRA    0794
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
0766:  MOVLB  2
0768:  MOVF   xC8,F
076A:  BZ    078A
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
076C:  CLRF   03
076E:  MOVLB  4
0770:  MOVF   x14,W
0772:  ADDLW  21
0774:  MOVWF  FE9
0776:  MOVLW  00
0778:  ADDWFC 03,W
077A:  MOVWF  FEA
077C:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0780:  MOVLB  2
0782:  CLRF   xCB
0784:  MOVLB  0
0786:  RCALL  0340
....................             } 
....................             else 
0788:  BRA    078E
....................                usb_request_stall(); 
078A:  MOVLB  0
078C:  RCALL  0346
....................             break; 
078E:  BRA    0794
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
0790:  RCALL  0346
....................             break; 
0792:  BRA    0794
....................    } 
.................... } 
0794:  GOTO   0916 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
0884:  MOVFF  414,2D2
0888:  RCALL  0208
088A:  MOVF   01,F
088C:  BZ    08EA
....................       switch(usb_ep0_rx_buffer[1]) { 
088E:  MOVLB  4
0890:  MOVF   x11,W
0892:  XORLW  01
0894:  MOVLB  0
0896:  BZ    08A2
0898:  XORLW  02
089A:  BZ    08B2
089C:  XORLW  03
089E:  BZ    08C2
08A0:  BRA    08E6
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08A2:  MOVFF  414,2C8
08A6:  BRA    0798
....................                usb_put_0len_0(); 
08A8:  MOVLB  2
08AA:  CLRF   xCB
08AC:  MOVLB  0
08AE:  RCALL  0340
....................                break; 
08B0:  BRA    08EA
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08B2:  MOVFF  414,2C8
08B6:  BRA    07E0
....................                      usb_put_0len_0(); 
08B8:  MOVLB  2
08BA:  CLRF   xCB
08BC:  MOVLB  0
08BE:  RCALL  0340
....................                      break; 
08C0:  BRA    08EA
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08C2:  MOVLB  4
08C4:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08C6:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08C8:  MOVFF  414,2C8
08CC:  MOVLB  0
08CE:  BRA    082A
08D0:  MOVF   01,F
08D2:  BZ    08DA
....................                   usb_ep0_tx_buffer[0]=1; 
08D4:  MOVLW  01
08D6:  MOVLB  4
08D8:  MOVWF  x50
....................                } 
....................                usb_request_send_response(2); 
08DA:  MOVLW  02
08DC:  MOVLB  2
08DE:  MOVWF  xCB
08E0:  MOVLB  0
08E2:  RCALL  0340
....................                break; 
08E4:  BRA    08EA
....................  
....................          default: 
....................             usb_request_stall(); 
08E6:  RCALL  0346
....................             break; 
08E8:  BRA    08EA
....................       } 
....................    } 
.................... } 
08EA:  GOTO   0916 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03E6:  CLRF   1F
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
03E8:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
03EA:  MOVLB  4
03EC:  MOVF   x13,W
03EE:  XORLW  01
03F0:  MOVLB  0
03F2:  BZ    03FE
03F4:  XORLW  03
03F6:  BZ    0408
03F8:  XORLW  01
03FA:  BZ    040E
03FC:  BRA    0444
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
03FE:  MOVLW  12
0400:  MOVWF  20
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
0402:  MOVLW  03
0404:  MOVWF  1A
....................             break; 
0406:  BRA    0448
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
0408:  MOVLW  20
040A:  MOVWF  20
....................             break; 
040C:  BRA    0448
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
040E:  MOVLW  02
0410:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
0412:  CLRF   03
0414:  MOVLB  4
0416:  MOVF   x12,W
0418:  MOVFF  FF2,2C8
041C:  BCF    FF2.7
041E:  MOVLB  0
0420:  RCALL  0168
0422:  MOVLB  2
0424:  BTFSC  xC8.7
0426:  BSF    FF2.7
0428:  MOVWF  1F
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
042A:  CLRF   03
042C:  MOVF   1F,W
042E:  MOVFF  FF2,2C8
0432:  BCF    FF2.7
0434:  MOVLB  0
0436:  RCALL  017C
0438:  MOVLB  2
043A:  BTFSC  xC8.7
043C:  BSF    FF2.7
043E:  MOVWF  20
....................             break; 
0440:  MOVLB  0
0442:  BRA    0448
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
0444:  RCALL  0346
....................             return; 
0446:  BRA    0460
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
0448:  MOVLB  4
044A:  MOVF   x17,F
044C:  BNZ   0458
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
044E:  MOVF   20,W
0450:  SUBWF  x16,W
0452:  BC    0458
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
0454:  MOVFF  416,20
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0458:  MOVLW  01
045A:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
045C:  MOVLB  0
045E:  RCALL  034C
.................... } 
0460:  GOTO   06EA (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B28:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B2A:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0B2C:  MOVFF  1E,2C9
0B30:  BRA    0B0E
....................    #endif 
.................... } 
0B32:  GOTO   0B52 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
034C:  MOVLB  2
034E:  CLRF   xC9
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
0350:  MOVF   20,F
0352:  BZ    03D0
0354:  MOVF   xC9,W
0356:  SUBLW  3F
0358:  BNC   03D0
....................       switch(USB_stack_status.getdesc_type) { 
035A:  MOVF   1A,W
035C:  XORLW  00
035E:  MOVLB  0
0360:  BZ    036C
0362:  XORLW  02
0364:  BZ    0384
0366:  XORLW  01
0368:  BZ    039C
036A:  BRA    03B4
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
036C:  CLRF   03
036E:  MOVF   1F,W
0370:  MOVFF  FF2,2CB
0374:  BCF    FF2.7
0376:  RCALL  0104
0378:  MOVLB  2
037A:  BTFSC  xCB.7
037C:  BSF    FF2.7
037E:  MOVWF  xCA
....................             break; 
0380:  MOVLB  0
0382:  BRA    03B4
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
0384:  CLRF   03
0386:  MOVF   1F,W
0388:  MOVFF  FF2,2CB
038C:  BCF    FF2.7
038E:  RCALL  017C
0390:  MOVLB  2
0392:  BTFSC  xCB.7
0394:  BSF    FF2.7
0396:  MOVWF  xCA
....................             break; 
0398:  MOVLB  0
039A:  BRA    03B4
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
039C:  CLRF   03
039E:  MOVF   1F,W
03A0:  MOVFF  FF2,2CB
03A4:  BCF    FF2.7
03A6:  RCALL  0146
03A8:  MOVLB  2
03AA:  BTFSC  xCB.7
03AC:  BSF    FF2.7
03AE:  MOVWF  xCA
....................             break; 
03B0:  MOVLB  0
03B2:  BRA    03B4
....................       } 
....................       usb_getdesc_ptr++; 
03B4:  INCF   1F,F
....................       usb_getdesc_len--; 
03B6:  DECF   20,F
....................       usb_ep0_tx_buffer[i++]=c; 
03B8:  MOVLB  2
03BA:  MOVF   xC9,W
03BC:  INCF   xC9,F
03BE:  CLRF   03
03C0:  ADDLW  50
03C2:  MOVWF  FE9
03C4:  MOVLW  04
03C6:  ADDWFC 03,W
03C8:  MOVWF  FEA
03CA:  MOVFF  2CA,FEF
....................    } 
03CE:  BRA    0350
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03D0:  MOVF   20,F
03D2:  BNZ   03DC
03D4:  MOVF   xC9,W
03D6:  SUBLW  40
03D8:  BZ    03DC
....................          USB_stack_status.dev_req = NONE; 
03DA:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
03DC:  MOVFF  2C9,2CB
03E0:  MOVLB  0
03E2:  RCALL  0340
.................... } 
03E4:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... #define   Buzzer_on    output_bit(PIN_A5,1) 
.................... #define   Buzzer_off   output_bit(PIN_A5,0) 
....................  
.................... /* Tabla de Modulos, Primera Fila Año Regular y el siguiente año Bisiesto 
.................... E   F   M   A   M   J   J   A   S   O   N   D 
.................... 0   3   3   6   1   4   6   2   5   0   3   5 
.................... 0   3   4   0   2   5   0   3   6   1   4   6 
.................... */ 
.................... int8 Regular[12]={0,3,3,6,1,4,6,2,5,0,3,5}; 
.................... int8 Bisiesto[12]={0,3,4,0,2,5,0,3,6,1,4,6}; 
....................  
.................... // Variables para Pt100 
.................... int8 Termostato=0,Puerta=0,Parada=0,NivelBajo=0,NivelAlto=0,posicionl=0,posicionh=0,i=0,Alarma=0,respuesta=0; 
.................... float Tpulso=0.0,error=0.0,d3=0.0; 
.................... float Temperatura=0.0,TempUSB=0.0,Temporal=0.0; 
.................... int8 Year=0,Mes=0,Dia=0,Hora=0,Minuto=0,Segundo=0,dow=0,Ciclo=0,SetTime=0;// dow=Day Of Week 
.................... int8 YearRx=0,MesRx=0,DiaRx=0,HoraRx=0,MinutoRx=0,SegundoRx=0,dowRx=0,Modulo=0,Imprime=0,CiclosL=0,CiclosH=0; 
.................... short flagImprime=0,flagImprime2=0,Configura=0,Finalizo=0,estadoBuzzer=0; 
.................... int16 PresionCamara=0,PresionPreCamara=0,CiclosTotales=0,posicion=0; 
....................  
.................... int8 rxbuf1[100]; 
.................... int8 rxbuf2[100]; 
.................... int8 rxbuf3[100]; 
.................... int8 rxbuf4[100]; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte buffer[0x20], txbuf[0x20],rxbuf[0x20];     //Buffer de memoria 
.................... const char texto[12][24]={"TEXTIL & INSTRUMENTAL","CAUCHO","CONTENEDORES","RAPID","NO ENVUELTOS 121","ENVUELTO 121", 
.................... "ENVUELTO 134","PRION","BOWIE & DICK","TEST DE FUGAS","TEST DE COMPONENTES","HORA Y FECHA"}; 
....................  
.................... const char user[10][20]={"Admin","Operador 1","Operador 2","Operador 3","Operador 4","Operador 5","Operador 6","Operador 7","Operador 8","Tecnico"}; 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0F44:  BTFSC  FC7.5
0F46:  BRA    0F50
0F48:  MOVLB  2
0F4A:  CLRF   xAA
0F4C:  BTFSC  FC7.2
0F4E:  BSF    xAA.7
0F50:  MOVLB  2
0F52:  MOVF   xAA,W
0F54:  INCF   xAA,F
0F56:  MOVWF  x49
....................    
....................   if(fstate == 0x80) {         
0F58:  MOVF   x49,W
0F5A:  SUBLW  80
0F5C:  BNZ   0F7A
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0F5E:  MOVLW  6A
0F60:  MOVLB  0
0F62:  ADDWF  xB7,W
0F64:  MOVWF  FE9
0F66:  MOVLW  02
0F68:  ADDWFC xB8,W
0F6A:  MOVWF  FEA
0F6C:  MOVFF  FEF,2C6
0F70:  MOVFF  2C6,2C7
0F74:  BRA    0F2C
....................    }else{/* Sino está solicitando lectura es que está enviando algo *///Sino es que hay dato en el bus I2C... 
0F76:  BRA    10BE
0F78:  MOVLB  2
....................       incoming = i2c_read();           //... lo lee 
0F7A:  BCF    FC6.6
0F7C:  BTFSS  F9E.3
0F7E:  BRA    0F7C
0F80:  MOVF   FC9,W
0F82:  BSF    FC6.4
0F84:  MOVWF  xC5
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0F86:  DECFSZ x49,W
0F88:  BRA    0F90
....................          posicionl = incoming;          //Se guarda posición 
0F8A:  MOVFF  2C5,7F
....................       }else if (fState == 2) {          //Información recibida corresponde al dato 
0F8E:  BRA    10BC
0F90:  MOVF   x49,W
0F92:  SUBLW  02
0F94:  BNZ   0FA4
....................          posicionh = incoming; 
0F96:  MOVFF  2C5,80
....................          posicion=make16(posicionh,posicionl); 
0F9A:  MOVFF  80,B8
0F9E:  MOVFF  7F,B7
....................       }else if (fState == 3) {          //Información recibida corresponde al dato          
0FA2:  BRA    10BC
0FA4:  MOVF   x49,W
0FA6:  SUBLW  03
0FA8:  BTFSS  FD8.2
0FAA:  BRA    10BC
....................          if(posicion<40){ 
0FAC:  MOVLB  0
0FAE:  MOVF   xB8,F
0FB0:  BNZ   0FCA
0FB2:  MOVF   xB7,W
0FB4:  SUBLW  27
0FB6:  BNC   0FCA
....................             rxbuf[posicion] = incoming; 
0FB8:  MOVLW  8A
0FBA:  ADDWF  xB7,W
0FBC:  MOVWF  FE9
0FBE:  MOVLW  02
0FC0:  ADDWFC xB8,W
0FC2:  MOVWF  FEA
0FC4:  MOVFF  2C5,FEF
....................          }else if(posicion>=40 && posicion<=136){ 
0FC8:  BRA    10BE
0FCA:  MOVF   xB8,F
0FCC:  BNZ   0FD4
0FCE:  MOVF   xB7,W
0FD0:  SUBLW  27
0FD2:  BC    1004
0FD4:  MOVF   xB8,F
0FD6:  BNZ   1004
0FD8:  MOVF   xB7,W
0FDA:  SUBLW  88
0FDC:  BNC   1004
....................             rxbuf1[posicion-40] = incoming; 
0FDE:  MOVLW  28
0FE0:  SUBWF  xB7,W
0FE2:  MOVLB  2
0FE4:  MOVWF  xC6
0FE6:  MOVLW  00
0FE8:  MOVLB  0
0FEA:  SUBWFB xB8,W
0FEC:  MOVLB  2
0FEE:  MOVWF  xC7
0FF0:  MOVLW  B9
0FF2:  ADDWF  xC6,W
0FF4:  MOVWF  FE9
0FF6:  MOVLW  00
0FF8:  ADDWFC xC7,W
0FFA:  MOVWF  FEA
0FFC:  MOVFF  2C5,FEF
....................          }else if(posicion>136 && posicion<=235){ 
1000:  BRA    10BC
1002:  MOVLB  0
1004:  MOVF   xB8,F
1006:  BNZ   100E
1008:  MOVF   xB7,W
100A:  SUBLW  88
100C:  BC    103E
100E:  MOVF   xB8,F
1010:  BNZ   103E
1012:  MOVF   xB7,W
1014:  SUBLW  EB
1016:  BNC   103E
....................             rxbuf2[posicion-137] = incoming; 
1018:  MOVLW  89
101A:  SUBWF  xB7,W
101C:  MOVLB  2
101E:  MOVWF  xC6
1020:  MOVLW  00
1022:  MOVLB  0
1024:  SUBWFB xB8,W
1026:  MOVLB  2
1028:  MOVWF  xC7
102A:  MOVLW  1D
102C:  ADDWF  xC6,W
102E:  MOVWF  FE9
1030:  MOVLW  01
1032:  ADDWFC xC7,W
1034:  MOVWF  FEA
1036:  MOVFF  2C5,FEF
....................          }else if(posicion>235 && posicion<=335){ 
103A:  BRA    10BC
103C:  MOVLB  0
103E:  MOVF   xB8,F
1040:  BNZ   1048
1042:  MOVF   xB7,W
1044:  SUBLW  EB
1046:  BC    107C
1048:  MOVF   xB8,W
104A:  SUBLW  01
104C:  BNC   107C
104E:  BNZ   1056
1050:  MOVF   xB7,W
1052:  SUBLW  4F
1054:  BNC   107C
....................             rxbuf3[posicion-236] = incoming; 
1056:  MOVLW  EC
1058:  SUBWF  xB7,W
105A:  MOVLB  2
105C:  MOVWF  xC6
105E:  MOVLW  00
1060:  MOVLB  0
1062:  SUBWFB xB8,W
1064:  MOVLB  2
1066:  MOVWF  xC7
1068:  MOVLW  81
106A:  ADDWF  xC6,W
106C:  MOVWF  FE9
106E:  MOVLW  01
1070:  ADDWFC xC7,W
1072:  MOVWF  FEA
1074:  MOVFF  2C5,FEF
....................          }else if(posicion>336 && posicion<=360){ 
1078:  BRA    10BC
107A:  MOVLB  0
107C:  MOVF   xB8,W
107E:  SUBLW  00
1080:  BC    10BE
1082:  XORLW  FF
1084:  BNZ   108C
1086:  MOVF   xB7,W
1088:  SUBLW  50
108A:  BC    10BE
108C:  MOVF   xB8,W
108E:  SUBLW  01
1090:  BNC   10BE
1092:  BNZ   109A
1094:  MOVF   xB7,W
1096:  SUBLW  68
1098:  BNC   10BE
....................             rxbuf4[posicion-337] = incoming;             
109A:  MOVLW  51
109C:  SUBWF  xB7,W
109E:  MOVLB  2
10A0:  MOVWF  xC6
10A2:  MOVLW  01
10A4:  MOVLB  0
10A6:  SUBWFB xB8,W
10A8:  MOVLB  2
10AA:  MOVWF  xC7
10AC:  MOVLW  E5
10AE:  ADDWF  xC6,W
10B0:  MOVWF  FE9
10B2:  MOVLW  01
10B4:  ADDWFC xC7,W
10B6:  MOVWF  FEA
10B8:  MOVFF  2C5,FEF
10BC:  MOVLB  0
....................          } 
....................       } 
....................   } 
.................... } 
....................  
10BE:  BCF    F9E.3
10C0:  GOTO   0060
.................... void Carga_Vector(void){ 
....................    txbuf[0]=Dia; 
*
1AE4:  MOVFF  9E,26A
....................    txbuf[1]=Mes; 
1AE8:  MOVFF  9D,26B
....................    txbuf[2]=Year; 
1AEC:  MOVFF  9C,26C
....................    txbuf[3]=Hora; 
1AF0:  MOVFF  9F,26D
....................    txbuf[4]=Minuto; 
1AF4:  MOVFF  A0,26E
....................    txbuf[5]=Segundo; 
1AF8:  MOVFF  A1,26F
....................    txbuf[6]=dow; 
1AFC:  MOVFF  A2,270
....................    txbuf[7]=Dia; 
1B00:  MOVFF  9E,271
....................    txbuf[8]=44; 
1B04:  MOVLW  2C
1B06:  MOVLB  2
1B08:  MOVWF  x72
.................... } 
1B0A:  MOVLB  0
1B0C:  RETLW  00
....................  
.................... void Lee_Vector(void){ 
....................    Temporal=rxbuf[1]; 
*
19B0:  MOVLB  2
19B2:  CLRF   xB3
19B4:  MOVFF  28B,2B2
19B8:  MOVLB  0
19BA:  RCALL  15A4
19BC:  MOVFF  03,9B
19C0:  MOVFF  02,9A
19C4:  MOVFF  01,99
19C8:  MOVFF  00,98
....................    Temperatura=rxbuf[0]; 
19CC:  MOVLB  2
19CE:  CLRF   xB3
19D0:  MOVFF  28A,2B2
19D4:  MOVLB  0
19D6:  RCALL  15A4
19D8:  MOVFF  03,93
19DC:  MOVFF  02,92
19E0:  MOVFF  01,91
19E4:  MOVFF  00,90
....................    Temperatura=Temperatura+(Temporal/10); 
19E8:  MOVFF  9B,2B5
19EC:  MOVFF  9A,2B4
19F0:  MOVFF  99,2B3
19F4:  MOVFF  98,2B2
19F8:  MOVLB  2
19FA:  CLRF   xB9
19FC:  CLRF   xB8
19FE:  MOVLW  20
1A00:  MOVWF  xB7
1A02:  MOVLW  82
1A04:  MOVWF  xB6
1A06:  MOVLB  0
1A08:  RCALL  15DA
1A0A:  BCF    FD8.1
1A0C:  MOVFF  93,2B5
1A10:  MOVFF  92,2B4
1A14:  MOVFF  91,2B3
1A18:  MOVFF  90,2B2
1A1C:  MOVFF  03,2B9
1A20:  MOVFF  02,2B8
1A24:  MOVFF  01,2B7
1A28:  MOVFF  00,2B6
1A2C:  RCALL  1738
1A2E:  MOVFF  03,93
1A32:  MOVFF  02,92
1A36:  MOVFF  01,91
1A3A:  MOVFF  00,90
....................    PresionCamara=make16(rxbuf[3],rxbuf[2]); 
1A3E:  MOVFF  28D,B2
1A42:  MOVFF  28C,B1
....................    PresionPreCamara=make16(rxbuf[5],rxbuf[4]); 
1A46:  MOVFF  28F,B4
1A4A:  MOVFF  28E,B3
....................    Tpulso=rxbuf[6]; 
1A4E:  MOVLB  2
1A50:  CLRF   xB3
1A52:  MOVFF  290,2B2
1A56:  MOVLB  0
1A58:  RCALL  15A4
1A5A:  MOVFF  03,87
1A5E:  MOVFF  02,86
1A62:  MOVFF  01,85
1A66:  MOVFF  00,84
....................    NivelAlto=rxbuf[7]; 
1A6A:  MOVFF  291,7E
....................    NivelBajo=rxbuf[8]; 
1A6E:  MOVFF  292,7D
....................    Termostato=rxbuf[9]; 
1A72:  MOVFF  293,7A
....................    Puerta=rxbuf[10]; 
1A76:  MOVFF  294,7B
....................    Parada=rxbuf[11]; 
1A7A:  MOVFF  295,7C
....................    error=rxbuf[12]; 
1A7E:  MOVLB  2
1A80:  CLRF   xB3
1A82:  MOVFF  296,2B2
1A86:  MOVLB  0
1A88:  RCALL  15A4
1A8A:  MOVFF  03,8B
1A8E:  MOVFF  02,8A
1A92:  MOVFF  01,89
1A96:  MOVFF  00,88
....................    Ciclo=rxbuf[13]; 
1A9A:  MOVFF  297,A3
....................    SetTime=rxbuf[14]; 
1A9E:  MOVFF  298,A4
....................    DiaRx=rxbuf[15]; 
1AA2:  MOVFF  299,A7
....................    MesRx=rxbuf[16]; 
1AA6:  MOVFF  29A,A6
....................    YearRx=rxbuf[17]; 
1AAA:  MOVFF  29B,A5
....................    HoraRx=rxbuf[18]; 
1AAE:  MOVFF  29C,A8
....................    MinutoRx=rxbuf[19]; 
1AB2:  MOVFF  29D,A9
....................    SegundoRx=rxbuf[20]; 
1AB6:  MOVFF  29E,AA
....................    Imprime=rxbuf[21]; 
1ABA:  MOVFF  29F,AD
....................    CiclosL=rxbuf[22]; 
1ABE:  MOVFF  2A0,AE
....................    CiclosH=rxbuf[23]; 
1AC2:  MOVFF  2A1,AF
....................    estadoBuzzer=rxbuf[24]; 
1AC6:  BCF    xB0.4
1AC8:  MOVLB  2
1ACA:  BTFSS  xA2.0
1ACC:  BRA    1AD4
1ACE:  MOVLB  0
1AD0:  BSF    xB0.4
1AD2:  MOVLB  2
....................    Alarma=rxbuf[25]; 
1AD4:  MOVFF  2A3,82
....................    CiclosTotales=make16(CiclosH,CiclosL); 
1AD8:  MOVFF  AF,B6
1ADC:  MOVFF  AE,B5
.................... } 
1AE0:  MOVLB  0
1AE2:  RETLW  00
....................  
.................... float inttofloat(int8 decimal){ 
....................    float tmp; 
....................    tmp=decimal; 
*
2322:  MOVLB  2
2324:  CLRF   xB3
2326:  MOVFF  2AD,2B2
232A:  MOVLB  0
232C:  CALL   15A4
2330:  MOVFF  03,2B1
2334:  MOVFF  02,2B0
2338:  MOVFF  01,2AF
233C:  MOVFF  00,2AE
....................    return tmp/10; 
2340:  MOVFF  2B1,2B5
2344:  MOVFF  2B0,2B4
2348:  MOVFF  2AF,2B3
234C:  MOVFF  2AE,2B2
2350:  MOVLB  2
2352:  CLRF   xB9
2354:  CLRF   xB8
2356:  MOVLW  20
2358:  MOVWF  xB7
235A:  MOVLW  82
235C:  MOVWF  xB6
235E:  MOVLB  0
2360:  CALL   15DA
.................... } 
2364:  RETLW  00
....................  
.................... short esBisiesto(int8 year)  
.................... { 
....................      return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0); 
*
1D0A:  MOVLB  2
1D0C:  MOVF   xAB,W
1D0E:  ANDLW  03
1D10:  BNZ   1D24
1D12:  MOVFF  2AB,2B4
1D16:  MOVLW  64
1D18:  MOVWF  xB5
1D1A:  MOVLB  0
1D1C:  RCALL  1C96
1D1E:  MOVF   00,F
1D20:  BNZ   1D52
1D22:  MOVLB  2
1D24:  CLRF   xAD
1D26:  MOVFF  2AB,2AC
1D2A:  MOVLW  01
1D2C:  MOVWF  xAF
1D2E:  MOVLW  90
1D30:  MOVWF  xAE
1D32:  MOVLB  0
1D34:  BRA    1CC2
1D36:  MOVFF  00,2AC
1D3A:  MOVLB  2
1D3C:  MOVFF  03,2AD
1D40:  MOVF   xAC,F
1D42:  BNZ   1D4E
1D44:  MOVF   xAD,F
1D46:  BTFSS  FD8.2
1D48:  BRA    1D4E
1D4A:  MOVLB  0
1D4C:  BRA    1D52
1D4E:  MOVLW  00
1D50:  BRA    1D56
1D52:  MOVLW  01
1D54:  MOVLB  2
1D56:  MOVWF  01
.................... } 
1D58:  MOVLB  0
1D5A:  GOTO   28E2 (RETURN)
.................... void main() 
.................... { 
*
2624:  CLRF   FF8
2626:  BCF    FD0.7
2628:  BSF    07.7
262A:  CLRF   FEA
262C:  CLRF   FE9
262E:  BSF    FB8.3
2630:  MOVLW  70
2632:  MOVWF  FAF
2634:  MOVLW  02
2636:  MOVWF  FB0
2638:  MOVLW  A6
263A:  MOVWF  FAC
263C:  MOVLW  90
263E:  MOVWF  FAB
2640:  BSF    F93.1
2642:  BSF    F93.0
2644:  MOVLW  C0
2646:  MOVWF  FC8
2648:  MOVLW  36
264A:  MOVWF  FC6
264C:  CLRF   1C
264E:  CLRF   20
2650:  CLRF   x7A
2652:  CLRF   x7B
2654:  CLRF   x7C
2656:  CLRF   x7D
2658:  CLRF   x7E
265A:  CLRF   x7F
265C:  CLRF   x80
265E:  CLRF   x81
2660:  CLRF   x82
2662:  CLRF   x83
2664:  CLRF   x87
2666:  CLRF   x86
2668:  CLRF   x85
266A:  CLRF   x84
266C:  CLRF   x8B
266E:  CLRF   x8A
2670:  CLRF   x89
2672:  CLRF   x88
2674:  CLRF   x8F
2676:  CLRF   x8E
2678:  CLRF   x8D
267A:  CLRF   x8C
267C:  CLRF   x93
267E:  CLRF   x92
2680:  CLRF   x91
2682:  CLRF   x90
2684:  CLRF   x97
2686:  CLRF   x96
2688:  CLRF   x95
268A:  CLRF   x94
268C:  CLRF   x9B
268E:  CLRF   x9A
2690:  CLRF   x99
2692:  CLRF   x98
2694:  CLRF   x9C
2696:  CLRF   x9D
2698:  CLRF   x9E
269A:  CLRF   x9F
269C:  CLRF   xA0
269E:  CLRF   xA1
26A0:  CLRF   xA2
26A2:  CLRF   xA3
26A4:  CLRF   xA4
26A6:  CLRF   xA5
26A8:  CLRF   xA6
26AA:  CLRF   xA7
26AC:  CLRF   xA8
26AE:  CLRF   xA9
26B0:  CLRF   xAA
26B2:  CLRF   xAB
26B4:  CLRF   xAC
26B6:  CLRF   xAD
26B8:  CLRF   xAE
26BA:  CLRF   xAF
26BC:  BCF    xB0.0
26BE:  BCF    xB0.1
26C0:  BCF    xB0.2
26C2:  BCF    xB0.3
26C4:  BCF    xB0.4
26C6:  CLRF   xB2
26C8:  CLRF   xB1
26CA:  CLRF   xB4
26CC:  CLRF   xB3
26CE:  CLRF   xB6
26D0:  CLRF   xB5
26D2:  CLRF   xB8
26D4:  CLRF   xB7
26D6:  MOVF   FC1,W
26D8:  ANDLW  C0
26DA:  IORLW  0F
26DC:  MOVWF  FC1
26DE:  MOVLW  07
26E0:  MOVWF  FB4
26E2:  CLRF   x62
26E4:  MOVLW  03
26E6:  MOVWF  x63
26E8:  MOVWF  x64
26EA:  MOVLW  06
26EC:  MOVWF  x65
26EE:  MOVLW  01
26F0:  MOVWF  x66
26F2:  MOVLW  04
26F4:  MOVWF  x67
26F6:  MOVLW  06
26F8:  MOVWF  x68
26FA:  MOVLW  02
26FC:  MOVWF  x69
26FE:  MOVLW  05
2700:  MOVWF  x6A
2702:  CLRF   x6B
2704:  MOVLW  03
2706:  MOVWF  x6C
2708:  MOVLW  05
270A:  MOVWF  x6D
270C:  CLRF   x6E
270E:  MOVLW  03
2710:  MOVWF  x6F
2712:  MOVLW  04
2714:  MOVWF  x70
2716:  CLRF   x71
2718:  MOVLW  02
271A:  MOVWF  x72
271C:  MOVLW  05
271E:  MOVWF  x73
2720:  CLRF   x74
2722:  MOVLW  03
2724:  MOVWF  x75
2726:  MOVLW  06
2728:  MOVWF  x76
272A:  MOVLW  01
272C:  MOVWF  x77
272E:  MOVLW  04
2730:  MOVWF  x78
2732:  MOVLW  06
2734:  MOVWF  x79
2736:  MOVLW  03
2738:  MOVLB  2
273A:  MOVWF  xAA
....................    fState = 0; 
273C:  CLRF   x49
....................    for (posicion=0;posicion<0x10;posicion++){ 
273E:  MOVLB  0
2740:  CLRF   xB8
2742:  CLRF   xB7
2744:  MOVF   xB8,F
2746:  BNZ   2780
2748:  MOVF   xB7,W
274A:  SUBLW  0F
274C:  BNC   2780
....................       buffer[posicion] = 0x00; 
274E:  MOVLW  4A
2750:  ADDWF  xB7,W
2752:  MOVWF  FE9
2754:  MOVLW  02
2756:  ADDWFC xB8,W
2758:  MOVWF  FEA
275A:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
275C:  MOVLW  6A
275E:  ADDWF  xB7,W
2760:  MOVWF  FE9
2762:  MOVLW  02
2764:  ADDWFC xB8,W
2766:  MOVWF  FEA
2768:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
276A:  MOVLW  8A
276C:  ADDWF  xB7,W
276E:  MOVWF  FE9
2770:  MOVLW  02
2772:  ADDWFC xB8,W
2774:  MOVWF  FEA
2776:  CLRF   FEF
....................    } 
2778:  INCF   xB7,F
277A:  BTFSC  FD8.2
277C:  INCF   xB8,F
277E:  BRA    2744
....................     
....................    Lee_Vector(); 
2780:  CALL   19B0
....................    Carga_Vector(); 
2784:  CALL   1AE4
....................    enable_interrupts(INT_SSP); 
2788:  BSF    F9D.3
....................    usb_init(); 
278A:  GOTO   1B80
....................    usb_task();    
278E:  CALL   1B5E
....................    setup_wdt(WDT_ON); 
2792:  BSF    FD1.0
....................    enable_interrupts(global); 
2794:  MOVLW  C0
2796:  IORWF  FF2,F
....................    Buzzer_on; 
2798:  BSF    F89.5
279A:  BCF    F92.5
.................... //Inicio de Impresora 
....................    putc(27); 
279C:  MOVLW  1B
279E:  CALL   1B8E
....................    delay_us(10); 
27A2:  MOVLW  27
27A4:  MOVWF  00
27A6:  DECFSZ 00,F
27A8:  BRA    27A6
27AA:  BRA    27AC
....................    putc(64); 
27AC:  MOVLW  40
27AE:  CALL   1B8E
....................    delay_us(10); 
27B2:  MOVLW  27
27B4:  MOVWF  00
27B6:  DECFSZ 00,F
27B8:  BRA    27B6
27BA:  BRA    27BC
....................    putc(10); 
27BC:  MOVLW  0A
27BE:  CALL   1B8E
....................    //32 Caracteres se pueden escribir en una linea de la impresora 
....................  //fprintf(printer,"                                \n"); 
....................    delay_us(10); 
27C2:  MOVLW  27
27C4:  MOVWF  00
27C6:  DECFSZ 00,F
27C8:  BRA    27C6
27CA:  BRA    27CC
....................    delay_ms(1000); 
27CC:  MOVLW  04
27CE:  MOVLB  2
27D0:  MOVWF  xAB
27D2:  MOVLW  FA
27D4:  MOVWF  xAC
27D6:  MOVLB  0
27D8:  CALL   1B96
27DC:  MOVLB  2
27DE:  DECFSZ xAB,F
27E0:  BRA    27D2
....................    Buzzer_off; 
27E2:  BCF    F89.5
27E4:  BCF    F92.5
....................    fprintf(printer,"-----------------------------\n"); 
27E6:  MOVLW  C4
27E8:  MOVWF  FF6
27EA:  MOVLW  10
27EC:  MOVWF  FF7
27EE:  MOVLB  0
27F0:  CALL   1BC0
....................  
.................... while(true) 
.................... { 
....................    Lee_Vector(); 
27F4:  CALL   19B0
....................    delay_ms(1); 
27F8:  MOVLW  01
27FA:  MOVLB  2
27FC:  MOVWF  xAC
27FE:  MOVLB  0
2800:  CALL   1B96
....................    Carga_Vector(); 
2804:  CALL   1AE4
....................    rtc_get_date(Dia,Mes,Year,dow); 
....................    rtc_get_time(Hora,Minuto,Segundo); 
....................    restart_wdt(); 
*
28CC:  CLRWDT
....................     
....................    if(SetTime==5 && !Configura){ 
28CE:  MOVF   xA4,W
28D0:  SUBLW  05
28D2:  BTFSS  FD8.2
28D4:  BRA    2C96
28D6:  BTFSC  xB0.2
28D8:  BRA    2C96
....................       if(esBisiesto(YearRx)) 
28DA:  MOVFF  A5,2AB
28DE:  GOTO   1D0A
28E2:  MOVF   01,F
28E4:  BZ    28FA
....................          Modulo=Bisiesto[MesRx]; 
28E6:  CLRF   03
28E8:  MOVF   xA6,W
28EA:  ADDLW  6E
28EC:  MOVWF  FE9
28EE:  MOVLW  00
28F0:  ADDWFC 03,W
28F2:  MOVWF  FEA
28F4:  MOVFF  FEF,AC
....................       else 
28F8:  BRA    290C
....................          Modulo=Regular[MesRx]; 
28FA:  CLRF   03
28FC:  MOVF   xA6,W
28FE:  ADDLW  62
2900:  MOVWF  FE9
2902:  MOVLW  00
2904:  ADDWFC 03,W
2906:  MOVWF  FEA
2908:  MOVFF  FEF,AC
....................           
....................       dowRx=((YearRx-1)%7+((YearRx-1)/4-3*((YearRx-1)/100+1)/4)%7+Modulo+DiaRx%7)%7; 
290C:  MOVLW  01
290E:  SUBWF  xA5,W
2910:  MOVLB  2
2912:  MOVWF  xAC
2914:  MOVWF  xB4
2916:  MOVLW  07
2918:  MOVWF  xB5
291A:  MOVLB  0
291C:  CALL   1C96
2920:  MOVFF  00,2AB
2924:  MOVLW  01
2926:  SUBWF  xA5,W
2928:  MOVWF  00
292A:  RRCF   00,W
292C:  MOVLB  2
292E:  MOVWF  xAC
2930:  RRCF   xAC,F
2932:  MOVLW  3F
2934:  ANDWF  xAC,F
2936:  MOVLW  01
2938:  MOVLB  0
293A:  SUBWF  xA5,W
293C:  MOVLB  2
293E:  MOVWF  xAE
2940:  MOVWF  xB4
2942:  MOVLW  64
2944:  MOVWF  xB5
2946:  MOVLB  0
2948:  CALL   1C96
294C:  MOVLW  01
294E:  ADDWF  01,W
2950:  MULLW  03
2952:  MOVFF  FF3,00
2956:  RRCF   00,F
2958:  RRCF   00,F
295A:  MOVLW  3F
295C:  ANDWF  00,F
295E:  MOVF   00,W
2960:  MOVLB  2
2962:  SUBWF  xAC,W
2964:  MOVWF  xAD
2966:  MOVWF  xB4
2968:  MOVLW  07
296A:  MOVWF  xB5
296C:  MOVLB  0
296E:  CALL   1C96
2972:  MOVF   00,W
2974:  MOVLB  2
2976:  ADDWF  xAB,W
2978:  MOVLB  0
297A:  ADDWF  xAC,W
297C:  MOVLB  2
297E:  MOVWF  xAB
2980:  MOVFF  A7,2B4
2984:  MOVLW  07
2986:  MOVWF  xB5
2988:  MOVLB  0
298A:  CALL   1C96
298E:  MOVF   00,W
2990:  MOVLB  2
2992:  ADDWF  xAB,W
2994:  MOVWF  xAC
2996:  MOVWF  xB4
2998:  MOVLW  07
299A:  MOVWF  xB5
299C:  MOVLB  0
299E:  CALL   1C96
29A2:  MOVFF  00,AB
....................       rtc_set_datetime(DiaRx,MesRx,YearRx,dowRx,HoraRx,MinutoRx); 
29A6:  MOVFF  A7,2AB
29AA:  MOVFF  A6,2AC
29AE:  MOVFF  A5,2AD
29B2:  MOVFF  AB,2AE
29B6:  MOVFF  A8,2AF
29BA:  MOVFF  A9,2B0
29BE:  GOTO   1DA4
....................       fprintf(printer,"  \n"); 
29C2:  MOVLW  20
29C4:  BTFSS  F9E.4
29C6:  BRA    29C4
29C8:  MOVWF  FAD
29CA:  MOVLW  20
29CC:  BTFSS  F9E.4
29CE:  BRA    29CC
29D0:  MOVWF  FAD
29D2:  MOVLW  0A
29D4:  BTFSS  F9E.4
29D6:  BRA    29D4
29D8:  MOVWF  FAD
....................       delay_us(10); 
29DA:  MOVLW  27
29DC:  MOVWF  00
29DE:  DECFSZ 00,F
29E0:  BRA    29DE
29E2:  BRA    29E4
....................       fprintf(printer,"  Ajusto Fecha y hora \n"); 
29E4:  MOVLW  E4
29E6:  MOVWF  FF6
29E8:  MOVLW  10
29EA:  MOVWF  FF7
29EC:  CALL   1BC0
....................       delay_us(10); 
29F0:  MOVLW  27
29F2:  MOVWF  00
29F4:  DECFSZ 00,F
29F6:  BRA    29F4
29F8:  BRA    29FA
....................       rtc_get_date(Dia,Mes,Year,dow); 
....................       rtc_get_time(Hora,Minuto,Segundo); 
....................       fprintf(printer,"%02u-%02u-%02u  %02u:%02u  %03.1f°C  %03LukPa \n",Dia,Mes,Year,Hora,Minuto,Temperatura,PresionCamara);  
*
2ABE:  MOVFF  9E,2AB
2AC2:  MOVLW  01
2AC4:  MOVLB  2
2AC6:  MOVWF  xAC
2AC8:  MOVLB  0
2ACA:  CALL   1E52
2ACE:  MOVLW  2D
2AD0:  BTFSS  F9E.4
2AD2:  BRA    2AD0
2AD4:  MOVWF  FAD
2AD6:  MOVFF  9D,2AB
2ADA:  MOVLW  01
2ADC:  MOVLB  2
2ADE:  MOVWF  xAC
2AE0:  MOVLB  0
2AE2:  CALL   1E52
2AE6:  MOVLW  2D
2AE8:  BTFSS  F9E.4
2AEA:  BRA    2AE8
2AEC:  MOVWF  FAD
2AEE:  MOVFF  9C,2AB
2AF2:  MOVLW  01
2AF4:  MOVLB  2
2AF6:  MOVWF  xAC
2AF8:  MOVLB  0
2AFA:  CALL   1E52
2AFE:  MOVLW  20
2B00:  BTFSS  F9E.4
2B02:  BRA    2B00
2B04:  MOVWF  FAD
2B06:  MOVLW  20
2B08:  BTFSS  F9E.4
2B0A:  BRA    2B08
2B0C:  MOVWF  FAD
2B0E:  MOVFF  9F,2AB
2B12:  MOVLW  01
2B14:  MOVLB  2
2B16:  MOVWF  xAC
2B18:  MOVLB  0
2B1A:  CALL   1E52
2B1E:  MOVLW  3A
2B20:  BTFSS  F9E.4
2B22:  BRA    2B20
2B24:  MOVWF  FAD
2B26:  MOVFF  A0,2AB
2B2A:  MOVLW  01
2B2C:  MOVLB  2
2B2E:  MOVWF  xAC
2B30:  MOVLB  0
2B32:  CALL   1E52
2B36:  MOVLW  20
2B38:  BTFSS  F9E.4
2B3A:  BRA    2B38
2B3C:  MOVWF  FAD
2B3E:  MOVLW  20
2B40:  BTFSS  F9E.4
2B42:  BRA    2B40
2B44:  MOVWF  FAD
2B46:  MOVLW  42
2B48:  MOVWF  FE9
2B4A:  MOVFF  93,2AE
2B4E:  MOVFF  92,2AD
2B52:  MOVFF  91,2AC
2B56:  MOVFF  90,2AB
2B5A:  MOVLW  01
2B5C:  MOVLB  2
2B5E:  MOVWF  xAF
2B60:  MOVLB  0
2B62:  CALL   208A
2B66:  MOVLW  1D
2B68:  MOVWF  FF6
2B6A:  MOVLW  11
2B6C:  MOVWF  FF7
2B6E:  MOVLW  04
2B70:  MOVLB  2
2B72:  MOVWF  xAD
2B74:  MOVLB  0
2B76:  CALL   222C
2B7A:  MOVLW  0A
2B7C:  MOVWF  FE9
2B7E:  MOVFF  B2,2AE
2B82:  MOVFF  B1,2AD
2B86:  CALL   2256
2B8A:  MOVLW  26
2B8C:  MOVWF  FF6
2B8E:  MOVLW  11
2B90:  MOVWF  FF7
2B92:  MOVLW  05
2B94:  MOVLB  2
2B96:  MOVWF  xAD
2B98:  MOVLB  0
2B9A:  CALL   222C
....................       delay_us(10); 
2B9E:  MOVLW  27
2BA0:  MOVWF  00
2BA2:  DECFSZ 00,F
2BA4:  BRA    2BA2
2BA6:  BRA    2BA8
....................       fprintf(printer,"%02u-%02u-%02u  %02u:%02u  %03.1f°C  %03LukPa \n",DiaRx,MesRx,YearRx,HoraRx,MinutoRx,Temperatura,PresionCamara);  
2BA8:  MOVFF  A7,2AB
2BAC:  MOVLW  01
2BAE:  MOVLB  2
2BB0:  MOVWF  xAC
2BB2:  MOVLB  0
2BB4:  CALL   1E52
2BB8:  MOVLW  2D
2BBA:  BTFSS  F9E.4
2BBC:  BRA    2BBA
2BBE:  MOVWF  FAD
2BC0:  MOVFF  A6,2AB
2BC4:  MOVLW  01
2BC6:  MOVLB  2
2BC8:  MOVWF  xAC
2BCA:  MOVLB  0
2BCC:  CALL   1E52
2BD0:  MOVLW  2D
2BD2:  BTFSS  F9E.4
2BD4:  BRA    2BD2
2BD6:  MOVWF  FAD
2BD8:  MOVFF  A5,2AB
2BDC:  MOVLW  01
2BDE:  MOVLB  2
2BE0:  MOVWF  xAC
2BE2:  MOVLB  0
2BE4:  CALL   1E52
2BE8:  MOVLW  20
2BEA:  BTFSS  F9E.4
2BEC:  BRA    2BEA
2BEE:  MOVWF  FAD
2BF0:  MOVLW  20
2BF2:  BTFSS  F9E.4
2BF4:  BRA    2BF2
2BF6:  MOVWF  FAD
2BF8:  MOVFF  A8,2AB
2BFC:  MOVLW  01
2BFE:  MOVLB  2
2C00:  MOVWF  xAC
2C02:  MOVLB  0
2C04:  CALL   1E52
2C08:  MOVLW  3A
2C0A:  BTFSS  F9E.4
2C0C:  BRA    2C0A
2C0E:  MOVWF  FAD
2C10:  MOVFF  A9,2AB
2C14:  MOVLW  01
2C16:  MOVLB  2
2C18:  MOVWF  xAC
2C1A:  MOVLB  0
2C1C:  CALL   1E52
2C20:  MOVLW  20
2C22:  BTFSS  F9E.4
2C24:  BRA    2C22
2C26:  MOVWF  FAD
2C28:  MOVLW  20
2C2A:  BTFSS  F9E.4
2C2C:  BRA    2C2A
2C2E:  MOVWF  FAD
2C30:  MOVLW  42
2C32:  MOVWF  FE9
2C34:  MOVFF  93,2AE
2C38:  MOVFF  92,2AD
2C3C:  MOVFF  91,2AC
2C40:  MOVFF  90,2AB
2C44:  MOVLW  01
2C46:  MOVLB  2
2C48:  MOVWF  xAF
2C4A:  MOVLB  0
2C4C:  CALL   208A
2C50:  MOVLW  4D
2C52:  MOVWF  FF6
2C54:  MOVLW  11
2C56:  MOVWF  FF7
2C58:  MOVLW  04
2C5A:  MOVLB  2
2C5C:  MOVWF  xAD
2C5E:  MOVLB  0
2C60:  CALL   222C
2C64:  MOVLW  0A
2C66:  MOVWF  FE9
2C68:  MOVFF  B2,2AE
2C6C:  MOVFF  B1,2AD
2C70:  CALL   2256
2C74:  MOVLW  56
2C76:  MOVWF  FF6
2C78:  MOVLW  11
2C7A:  MOVWF  FF7
2C7C:  MOVLW  05
2C7E:  MOVLB  2
2C80:  MOVWF  xAD
2C82:  MOVLB  0
2C84:  CALL   222C
....................       delay_us(10); 
2C88:  MOVLW  27
2C8A:  MOVWF  00
2C8C:  DECFSZ 00,F
2C8E:  BRA    2C8C
2C90:  BRA    2C92
....................       Configura=1; 
2C92:  BSF    xB0.2
....................    }else if(SetTime!=5){ 
2C94:  BRA    2C9E
2C96:  MOVF   xA4,W
2C98:  SUBLW  05
2C9A:  BZ    2C9E
....................       Configura=0; 
2C9C:  BCF    xB0.2
....................    } 
....................     
....................    if(Imprime==15 && !flagImprime2){ 
2C9E:  MOVF   xAD,W
2CA0:  SUBLW  0F
2CA2:  BTFSS  FD8.2
2CA4:  BRA    2F32
2CA6:  BTFSC  xB0.1
2CA8:  BRA    2F32
....................       if(Ciclo>0 && Ciclo<31){ 
2CAA:  MOVF   xA3,F
2CAC:  BTFSC  FD8.2
2CAE:  BRA    2F14
2CB0:  MOVF   xA3,W
2CB2:  SUBLW  1E
2CB4:  BTFSS  FD8.0
2CB6:  BRA    2F14
....................          fprintf(printer," AUTOCLAVE DIGITAL  JP INGLOBAL  \n"); 
2CB8:  MOVLW  5C
2CBA:  MOVWF  FF6
2CBC:  MOVLW  11
2CBE:  MOVWF  FF7
2CC0:  CALL   1BC0
....................          delay_us(10); 
2CC4:  MOVLW  27
2CC6:  MOVWF  00
2CC8:  DECFSZ 00,F
2CCA:  BRA    2CC8
2CCC:  BRA    2CCE
....................          fprintf(printer," OPERADOR:______________________\n"); 
2CCE:  MOVLW  80
2CD0:  MOVWF  FF6
2CD2:  MOVLW  11
2CD4:  MOVWF  FF7
2CD6:  CALL   1BC0
....................          delay_us(10); 
2CDA:  MOVLW  27
2CDC:  MOVWF  00
2CDE:  DECFSZ 00,F
2CE0:  BRA    2CDE
2CE2:  BRA    2CE4
....................          fprintf(printer,"  Ciclo de Esterilizacion #%02u \n",Ciclo); 
2CE4:  MOVLW  A2
2CE6:  MOVWF  FF6
2CE8:  MOVLW  11
2CEA:  MOVWF  FF7
2CEC:  MOVLW  1B
2CEE:  MOVLB  2
2CF0:  MOVWF  xAD
2CF2:  MOVLB  0
2CF4:  CALL   222C
2CF8:  MOVFF  A3,2AB
2CFC:  MOVLW  01
2CFE:  MOVLB  2
2D00:  MOVWF  xAC
2D02:  MOVLB  0
2D04:  CALL   1E52
2D08:  MOVLW  20
2D0A:  BTFSS  F9E.4
2D0C:  BRA    2D0A
2D0E:  MOVWF  FAD
2D10:  MOVLW  0A
2D12:  BTFSS  F9E.4
2D14:  BRA    2D12
2D16:  MOVWF  FAD
....................          delay_us(10); 
2D18:  MOVLW  27
2D1A:  MOVWF  00
2D1C:  DECFSZ 00,F
2D1E:  BRA    2D1C
2D20:  BRA    2D22
....................          if(Ciclo<11) 
2D22:  MOVF   xA3,W
2D24:  SUBLW  0A
2D26:  BNC   2D6A
....................             fprintf(printer,"%s\n",Texto[Ciclo-1]); 
2D28:  MOVLW  01
2D2A:  SUBWF  xA3,W
2D2C:  MOVLB  2
2D2E:  MOVWF  xAC
2D30:  CLRF   xAE
2D32:  MOVWF  xAD
2D34:  CLRF   xB0
2D36:  MOVLW  18
2D38:  MOVWF  xAF
2D3A:  MOVLB  0
2D3C:  CALL   2300
2D40:  MOVFF  02,2AC
2D44:  MOVLB  2
2D46:  MOVFF  01,2AB
2D4A:  MOVLW  5A
2D4C:  MOVWF  FF6
2D4E:  MOVLW  0D
2D50:  MOVWF  FF7
2D52:  MOVF   01,W
2D54:  ADDWF  FF6,F
2D56:  MOVF   02,W
2D58:  ADDWFC FF7,F
2D5A:  MOVLB  0
2D5C:  CALL   1BC0
2D60:  MOVLW  0A
2D62:  BTFSS  F9E.4
2D64:  BRA    2D62
2D66:  MOVWF  FAD
....................          else 
2D68:  BRA    2D96
....................             fprintf(printer,"Personalizado %02u\n",Ciclo); 
2D6A:  MOVLW  C4
2D6C:  MOVWF  FF6
2D6E:  MOVLW  11
2D70:  MOVWF  FF7
2D72:  MOVLW  0E
2D74:  MOVLB  2
2D76:  MOVWF  xAD
2D78:  MOVLB  0
2D7A:  CALL   222C
2D7E:  MOVFF  A3,2AB
2D82:  MOVLW  01
2D84:  MOVLB  2
2D86:  MOVWF  xAC
2D88:  MOVLB  0
2D8A:  CALL   1E52
2D8E:  MOVLW  0A
2D90:  BTFSS  F9E.4
2D92:  BRA    2D90
2D94:  MOVWF  FAD
....................          delay_us(10); 
2D96:  MOVLW  27
2D98:  MOVWF  00
2D9A:  DECFSZ 00,F
2D9C:  BRA    2D9A
2D9E:  BRA    2DA0
....................          fprintf(printer,"Ciclo #%05Lu\n",CiclosTotales); 
2DA0:  MOVLW  D8
2DA2:  MOVWF  FF6
2DA4:  MOVLW  11
2DA6:  MOVWF  FF7
2DA8:  MOVLW  07
2DAA:  MOVLB  2
2DAC:  MOVWF  xAD
2DAE:  MOVLB  0
2DB0:  CALL   222C
2DB4:  MOVLW  08
2DB6:  MOVWF  FE9
2DB8:  MOVFF  B6,2AE
2DBC:  MOVFF  B5,2AD
2DC0:  CALL   2256
2DC4:  MOVLW  0A
2DC6:  BTFSS  F9E.4
2DC8:  BRA    2DC6
2DCA:  MOVWF  FAD
....................          delay_us(10); 
2DCC:  MOVLW  27
2DCE:  MOVWF  00
2DD0:  DECFSZ 00,F
2DD2:  BRA    2DD0
2DD4:  BRA    2DD6
....................          fprintf(printer,"FECHA: %02u-%02u-%02u \n",Dia,Mes,Year); 
2DD6:  MOVLW  E6
2DD8:  MOVWF  FF6
2DDA:  MOVLW  11
2DDC:  MOVWF  FF7
2DDE:  MOVLW  07
2DE0:  MOVLB  2
2DE2:  MOVWF  xAD
2DE4:  MOVLB  0
2DE6:  CALL   222C
2DEA:  MOVFF  9E,2AB
2DEE:  MOVLW  01
2DF0:  MOVLB  2
2DF2:  MOVWF  xAC
2DF4:  MOVLB  0
2DF6:  CALL   1E52
2DFA:  MOVLW  2D
2DFC:  BTFSS  F9E.4
2DFE:  BRA    2DFC
2E00:  MOVWF  FAD
2E02:  MOVFF  9D,2AB
2E06:  MOVLW  01
2E08:  MOVLB  2
2E0A:  MOVWF  xAC
2E0C:  MOVLB  0
2E0E:  CALL   1E52
2E12:  MOVLW  2D
2E14:  BTFSS  F9E.4
2E16:  BRA    2E14
2E18:  MOVWF  FAD
2E1A:  MOVFF  9C,2AB
2E1E:  MOVLW  01
2E20:  MOVLB  2
2E22:  MOVWF  xAC
2E24:  MOVLB  0
2E26:  CALL   1E52
2E2A:  MOVLW  20
2E2C:  BTFSS  F9E.4
2E2E:  BRA    2E2C
2E30:  MOVWF  FAD
2E32:  MOVLW  0A
2E34:  BTFSS  F9E.4
2E36:  BRA    2E34
2E38:  MOVWF  FAD
....................          delay_us(10); 
2E3A:  MOVLW  27
2E3C:  MOVWF  00
2E3E:  DECFSZ 00,F
2E40:  BRA    2E3E
2E42:  BRA    2E44
....................          //fprintf(printer,"   HORA   TEMP    PRESION \n"); 
....................          fprintf(printer," HORA  TEMP     PC     PP   \n"); 
2E44:  MOVLW  FE
2E46:  MOVWF  FF6
2E48:  MOVLW  11
2E4A:  MOVWF  FF7
2E4C:  CALL   1BC0
....................          delay_us(10); 
2E50:  MOVLW  27
2E52:  MOVWF  00
2E54:  DECFSZ 00,F
2E56:  BRA    2E54
2E58:  BRA    2E5A
....................          //fprintf(printer,"  %02u:%02u  %03.1f°C  %03LukPa \n",HoraRx,MinutoRx,Temperatura,PresionCamara); 
....................          fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa \n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara); 
2E5A:  MOVFF  9F,2AB
2E5E:  MOVLW  01
2E60:  MOVLB  2
2E62:  MOVWF  xAC
2E64:  MOVLB  0
2E66:  CALL   1E52
2E6A:  MOVLW  3A
2E6C:  BTFSS  F9E.4
2E6E:  BRA    2E6C
2E70:  MOVWF  FAD
2E72:  MOVFF  A0,2AB
2E76:  MOVLW  01
2E78:  MOVLB  2
2E7A:  MOVWF  xAC
2E7C:  MOVLB  0
2E7E:  CALL   1E52
2E82:  MOVLW  20
2E84:  BTFSS  F9E.4
2E86:  BRA    2E84
2E88:  MOVWF  FAD
2E8A:  MOVLW  42
2E8C:  MOVWF  FE9
2E8E:  MOVFF  93,2AE
2E92:  MOVFF  92,2AD
2E96:  MOVFF  91,2AC
2E9A:  MOVFF  90,2AB
2E9E:  MOVLW  01
2EA0:  MOVLB  2
2EA2:  MOVWF  xAF
2EA4:  MOVLB  0
2EA6:  CALL   208A
2EAA:  MOVLW  DF
2EAC:  BTFSS  F9E.4
2EAE:  BRA    2EAC
2EB0:  MOVWF  FAD
2EB2:  MOVLW  43
2EB4:  BTFSS  F9E.4
2EB6:  BRA    2EB4
2EB8:  MOVWF  FAD
2EBA:  MOVLW  20
2EBC:  BTFSS  F9E.4
2EBE:  BRA    2EBC
2EC0:  MOVWF  FAD
2EC2:  MOVLW  0A
2EC4:  MOVWF  FE9
2EC6:  MOVFF  B2,2AE
2ECA:  MOVFF  B1,2AD
2ECE:  CALL   2256
2ED2:  MOVLW  35
2ED4:  MOVWF  FF6
2ED6:  MOVLW  12
2ED8:  MOVWF  FF7
2EDA:  MOVLW  04
2EDC:  MOVLB  2
2EDE:  MOVWF  xAD
2EE0:  MOVLB  0
2EE2:  CALL   222C
2EE6:  MOVLW  0A
2EE8:  MOVWF  FE9
2EEA:  MOVFF  B4,2AE
2EEE:  MOVFF  B3,2AD
2EF2:  CALL   2256
2EF6:  MOVLW  3E
2EF8:  MOVWF  FF6
2EFA:  MOVLW  12
2EFC:  MOVWF  FF7
2EFE:  MOVLW  05
2F00:  MOVLB  2
2F02:  MOVWF  xAD
2F04:  MOVLB  0
2F06:  CALL   222C
....................          delay_us(10); 
2F0A:  MOVLW  27
2F0C:  MOVWF  00
2F0E:  DECFSZ 00,F
2F10:  BRA    2F0E
2F12:  BRA    2F14
....................       } 
....................       delay_ms(1000); 
2F14:  MOVLW  04
2F16:  MOVLB  2
2F18:  MOVWF  xAB
2F1A:  MOVLW  FA
2F1C:  MOVWF  xAC
2F1E:  MOVLB  0
2F20:  CALL   1B96
2F24:  MOVLB  2
2F26:  DECFSZ xAB,F
2F28:  BRA    2F1A
....................       flagImprime2=1; 
2F2A:  MOVLB  0
2F2C:  BSF    xB0.1
....................       flagImprime=1; 
2F2E:  BSF    xB0.0
....................       Finalizo=0; 
2F30:  BCF    xB0.3
....................    } 
....................    if(Imprime==5 && !flagImprime && !Finalizo){ 
2F32:  MOVF   xAD,W
2F34:  SUBLW  05
2F36:  BNZ   2FF4
2F38:  BTFSC  xB0.0
2F3A:  BRA    2FF4
2F3C:  BTFSC  xB0.3
2F3E:  BRA    2FF4
....................       fprintf(printer,"%02u:%02u %03.1f%cC %03LukPa %03LukPa \n",Hora,Minuto,Temperatura,0XDF,PresionCamara,PresionPreCamara); 
2F40:  MOVFF  9F,2AB
2F44:  MOVLW  01
2F46:  MOVLB  2
2F48:  MOVWF  xAC
2F4A:  MOVLB  0
2F4C:  CALL   1E52
2F50:  MOVLW  3A
2F52:  BTFSS  F9E.4
2F54:  BRA    2F52
2F56:  MOVWF  FAD
2F58:  MOVFF  A0,2AB
2F5C:  MOVLW  01
2F5E:  MOVLB  2
2F60:  MOVWF  xAC
2F62:  MOVLB  0
2F64:  CALL   1E52
2F68:  MOVLW  20
2F6A:  BTFSS  F9E.4
2F6C:  BRA    2F6A
2F6E:  MOVWF  FAD
2F70:  MOVLW  42
2F72:  MOVWF  FE9
2F74:  MOVFF  93,2AE
2F78:  MOVFF  92,2AD
2F7C:  MOVFF  91,2AC
2F80:  MOVFF  90,2AB
2F84:  MOVLW  01
2F86:  MOVLB  2
2F88:  MOVWF  xAF
2F8A:  MOVLB  0
2F8C:  CALL   208A
2F90:  MOVLW  DF
2F92:  BTFSS  F9E.4
2F94:  BRA    2F92
2F96:  MOVWF  FAD
2F98:  MOVLW  43
2F9A:  BTFSS  F9E.4
2F9C:  BRA    2F9A
2F9E:  MOVWF  FAD
2FA0:  MOVLW  20
2FA2:  BTFSS  F9E.4
2FA4:  BRA    2FA2
2FA6:  MOVWF  FAD
2FA8:  MOVLW  0A
2FAA:  MOVWF  FE9
2FAC:  MOVFF  B2,2AE
2FB0:  MOVFF  B1,2AD
2FB4:  CALL   2256
2FB8:  MOVLW  5D
2FBA:  MOVWF  FF6
2FBC:  MOVLW  12
2FBE:  MOVWF  FF7
2FC0:  MOVLW  04
2FC2:  MOVLB  2
2FC4:  MOVWF  xAD
2FC6:  MOVLB  0
2FC8:  CALL   222C
2FCC:  MOVLW  0A
2FCE:  MOVWF  FE9
2FD0:  MOVFF  B4,2AE
2FD4:  MOVFF  B3,2AD
2FD8:  CALL   2256
2FDC:  MOVLW  66
2FDE:  MOVWF  FF6
2FE0:  MOVLW  12
2FE2:  MOVWF  FF7
2FE4:  MOVLW  05
2FE6:  MOVLB  2
2FE8:  MOVWF  xAD
2FEA:  MOVLB  0
2FEC:  CALL   222C
....................       flagImprime=1; 
2FF0:  BSF    xB0.0
....................    }else if(Imprime==20 && !Finalizo){ 
2FF2:  BRA    3546
2FF4:  MOVF   xAD,W
2FF6:  SUBLW  14
2FF8:  BNZ   306A
2FFA:  BTFSC  xB0.3
2FFC:  BRA    306A
....................       fprintf(printer," Parada de Emergencia Activada \n"); 
2FFE:  MOVLW  6C
3000:  MOVWF  FF6
3002:  MOVLW  12
3004:  MOVWF  FF7
3006:  CALL   1BC0
....................       delay_us(10); 
300A:  MOVLW  27
300C:  MOVWF  00
300E:  DECFSZ 00,F
3010:  BRA    300E
3012:  BRA    3014
....................       fprintf(printer,"       Ciclo Cancelado \n"); 
3014:  MOVLW  8E
3016:  MOVWF  FF6
3018:  MOVLW  12
301A:  MOVWF  FF7
301C:  CALL   1BC0
....................       delay_us(10); 
3020:  MOVLW  27
3022:  MOVWF  00
3024:  DECFSZ 00,F
3026:  BRA    3024
3028:  BRA    302A
....................       fprintf(printer," \n"); 
302A:  MOVLW  20
302C:  BTFSS  F9E.4
302E:  BRA    302C
3030:  MOVWF  FAD
3032:  MOVLW  0A
3034:  BTFSS  F9E.4
3036:  BRA    3034
3038:  MOVWF  FAD
....................       delay_us(10); 
303A:  MOVLW  27
303C:  MOVWF  00
303E:  DECFSZ 00,F
3040:  BRA    303E
3042:  BRA    3044
....................       fprintf(printer,"  \n"); 
3044:  MOVLW  20
3046:  BTFSS  F9E.4
3048:  BRA    3046
304A:  MOVWF  FAD
304C:  MOVLW  20
304E:  BTFSS  F9E.4
3050:  BRA    304E
3052:  MOVWF  FAD
3054:  MOVLW  0A
3056:  BTFSS  F9E.4
3058:  BRA    3056
305A:  MOVWF  FAD
....................       delay_us(10); 
305C:  MOVLW  27
305E:  MOVWF  00
3060:  DECFSZ 00,F
3062:  BRA    3060
3064:  BRA    3066
....................       Finalizo=1; 
3066:  BSF    xB0.3
....................    }else if(Imprime==21 && !Finalizo){ 
3068:  BRA    3546
306A:  MOVF   xAD,W
306C:  SUBLW  15
306E:  BNZ   30E0
3070:  BTFSC  xB0.3
3072:  BRA    30E0
....................       fprintf(printer,"   Tiempo de Llenado prolongado\n"); 
3074:  MOVLW  A8
3076:  MOVWF  FF6
3078:  MOVLW  12
307A:  MOVWF  FF7
307C:  CALL   1BC0
....................       delay_us(10); 
3080:  MOVLW  27
3082:  MOVWF  00
3084:  DECFSZ 00,F
3086:  BRA    3084
3088:  BRA    308A
....................       fprintf(printer,"    EA01 Ciclo Cancelado \n"); 
308A:  MOVLW  CA
308C:  MOVWF  FF6
308E:  MOVLW  12
3090:  MOVWF  FF7
3092:  CALL   1BC0
....................       delay_us(10); 
3096:  MOVLW  27
3098:  MOVWF  00
309A:  DECFSZ 00,F
309C:  BRA    309A
309E:  BRA    30A0
....................       fprintf(printer," \n"); 
30A0:  MOVLW  20
30A2:  BTFSS  F9E.4
30A4:  BRA    30A2
30A6:  MOVWF  FAD
30A8:  MOVLW  0A
30AA:  BTFSS  F9E.4
30AC:  BRA    30AA
30AE:  MOVWF  FAD
....................       delay_us(10); 
30B0:  MOVLW  27
30B2:  MOVWF  00
30B4:  DECFSZ 00,F
30B6:  BRA    30B4
30B8:  BRA    30BA
....................       fprintf(printer,"  \n"); 
30BA:  MOVLW  20
30BC:  BTFSS  F9E.4
30BE:  BRA    30BC
30C0:  MOVWF  FAD
30C2:  MOVLW  20
30C4:  BTFSS  F9E.4
30C6:  BRA    30C4
30C8:  MOVWF  FAD
30CA:  MOVLW  0A
30CC:  BTFSS  F9E.4
30CE:  BRA    30CC
30D0:  MOVWF  FAD
....................       delay_us(10); 
30D2:  MOVLW  27
30D4:  MOVWF  00
30D6:  DECFSZ 00,F
30D8:  BRA    30D6
30DA:  BRA    30DC
....................       Finalizo=1; 
30DC:  BSF    xB0.3
....................    }else if(Imprime==22 && !Finalizo){ 
30DE:  BRA    3546
30E0:  MOVF   xAD,W
30E2:  SUBLW  16
30E4:  BNZ   3156
30E6:  BTFSC  xB0.3
30E8:  BRA    3156
....................       fprintf(printer,"      Termostato Activado\n"); 
30EA:  MOVLW  E6
30EC:  MOVWF  FF6
30EE:  MOVLW  12
30F0:  MOVWF  FF7
30F2:  CALL   1BC0
....................       delay_us(10); 
30F6:  MOVLW  27
30F8:  MOVWF  00
30FA:  DECFSZ 00,F
30FC:  BRA    30FA
30FE:  BRA    3100
....................       fprintf(printer,"    EA02 Ciclo Cancelado \n"); 
3100:  MOVLW  02
3102:  MOVWF  FF6
3104:  MOVLW  13
3106:  MOVWF  FF7
3108:  CALL   1BC0
....................       delay_us(10); 
310C:  MOVLW  27
310E:  MOVWF  00
3110:  DECFSZ 00,F
3112:  BRA    3110
3114:  BRA    3116
....................       fprintf(printer," \n"); 
3116:  MOVLW  20
3118:  BTFSS  F9E.4
311A:  BRA    3118
311C:  MOVWF  FAD
311E:  MOVLW  0A
3120:  BTFSS  F9E.4
3122:  BRA    3120
3124:  MOVWF  FAD
....................       delay_us(10); 
3126:  MOVLW  27
3128:  MOVWF  00
312A:  DECFSZ 00,F
312C:  BRA    312A
312E:  BRA    3130
....................       fprintf(printer,"  \n"); 
3130:  MOVLW  20
3132:  BTFSS  F9E.4
3134:  BRA    3132
3136:  MOVWF  FAD
3138:  MOVLW  20
313A:  BTFSS  F9E.4
313C:  BRA    313A
313E:  MOVWF  FAD
3140:  MOVLW  0A
3142:  BTFSS  F9E.4
3144:  BRA    3142
3146:  MOVWF  FAD
....................       delay_us(10); 
3148:  MOVLW  27
314A:  MOVWF  00
314C:  DECFSZ 00,F
314E:  BRA    314C
3150:  BRA    3152
....................       Finalizo=1; 
3152:  BSF    xB0.3
....................    }else if(Imprime==24 && !Finalizo){ 
3154:  BRA    3546
3156:  MOVF   xAD,W
3158:  SUBLW  18
315A:  BNZ   31CC
315C:  BTFSC  xB0.3
315E:  BRA    31CC
....................       fprintf(printer,"Tiempo de Calentamiento Excesivo\n"); 
3160:  MOVLW  1E
3162:  MOVWF  FF6
3164:  MOVLW  13
3166:  MOVWF  FF7
3168:  CALL   1BC0
....................       delay_us(10); 
316C:  MOVLW  27
316E:  MOVWF  00
3170:  DECFSZ 00,F
3172:  BRA    3170
3174:  BRA    3176
....................       fprintf(printer,"    ET01 Ciclo Cancelado \n"); 
3176:  MOVLW  40
3178:  MOVWF  FF6
317A:  MOVLW  13
317C:  MOVWF  FF7
317E:  CALL   1BC0
....................       delay_us(10); 
3182:  MOVLW  27
3184:  MOVWF  00
3186:  DECFSZ 00,F
3188:  BRA    3186
318A:  BRA    318C
....................       fprintf(printer," \n"); 
318C:  MOVLW  20
318E:  BTFSS  F9E.4
3190:  BRA    318E
3192:  MOVWF  FAD
3194:  MOVLW  0A
3196:  BTFSS  F9E.4
3198:  BRA    3196
319A:  MOVWF  FAD
....................       delay_us(10); 
319C:  MOVLW  27
319E:  MOVWF  00
31A0:  DECFSZ 00,F
31A2:  BRA    31A0
31A4:  BRA    31A6
....................       fprintf(printer,"  \n"); 
31A6:  MOVLW  20
31A8:  BTFSS  F9E.4
31AA:  BRA    31A8
31AC:  MOVWF  FAD
31AE:  MOVLW  20
31B0:  BTFSS  F9E.4
31B2:  BRA    31B0
31B4:  MOVWF  FAD
31B6:  MOVLW  0A
31B8:  BTFSS  F9E.4
31BA:  BRA    31B8
31BC:  MOVWF  FAD
....................       delay_us(10); 
31BE:  MOVLW  27
31C0:  MOVWF  00
31C2:  DECFSZ 00,F
31C4:  BRA    31C2
31C6:  BRA    31C8
....................       Finalizo=1; 
31C8:  BSF    xB0.3
....................    }else if(Imprime==23 && !Finalizo){ 
31CA:  BRA    3546
31CC:  MOVF   xAD,W
31CE:  SUBLW  17
31D0:  BNZ   3242
31D2:  BTFSC  xB0.3
31D4:  BRA    3242
....................       fprintf(printer," Sobrepaso en la temperatura\n"); 
31D6:  MOVLW  5C
31D8:  MOVWF  FF6
31DA:  MOVLW  13
31DC:  MOVWF  FF7
31DE:  CALL   1BC0
....................       delay_us(10); 
31E2:  MOVLW  27
31E4:  MOVWF  00
31E6:  DECFSZ 00,F
31E8:  BRA    31E6
31EA:  BRA    31EC
....................       fprintf(printer,"    ET02 Ciclo Cancelado \n"); 
31EC:  MOVLW  7A
31EE:  MOVWF  FF6
31F0:  MOVLW  13
31F2:  MOVWF  FF7
31F4:  CALL   1BC0
....................       delay_us(10); 
31F8:  MOVLW  27
31FA:  MOVWF  00
31FC:  DECFSZ 00,F
31FE:  BRA    31FC
3200:  BRA    3202
....................       fprintf(printer," \n"); 
3202:  MOVLW  20
3204:  BTFSS  F9E.4
3206:  BRA    3204
3208:  MOVWF  FAD
320A:  MOVLW  0A
320C:  BTFSS  F9E.4
320E:  BRA    320C
3210:  MOVWF  FAD
....................       delay_us(10); 
3212:  MOVLW  27
3214:  MOVWF  00
3216:  DECFSZ 00,F
3218:  BRA    3216
321A:  BRA    321C
....................       fprintf(printer,"  \n"); 
321C:  MOVLW  20
321E:  BTFSS  F9E.4
3220:  BRA    321E
3222:  MOVWF  FAD
3224:  MOVLW  20
3226:  BTFSS  F9E.4
3228:  BRA    3226
322A:  MOVWF  FAD
322C:  MOVLW  0A
322E:  BTFSS  F9E.4
3230:  BRA    322E
3232:  MOVWF  FAD
....................       delay_us(10); 
3234:  MOVLW  27
3236:  MOVWF  00
3238:  DECFSZ 00,F
323A:  BRA    3238
323C:  BRA    323E
....................       Finalizo=1; 
323E:  BSF    xB0.3
....................    }else if(Imprime==25 && !Finalizo){ 
3240:  BRA    3546
3242:  MOVF   xAD,W
3244:  SUBLW  19
3246:  BNZ   32B8
3248:  BTFSC  xB0.3
324A:  BRA    32B8
....................       fprintf(printer," Sobrepaso en la presion\n"); 
324C:  MOVLW  96
324E:  MOVWF  FF6
3250:  MOVLW  13
3252:  MOVWF  FF7
3254:  CALL   1BC0
....................       delay_us(10); 
3258:  MOVLW  27
325A:  MOVWF  00
325C:  DECFSZ 00,F
325E:  BRA    325C
3260:  BRA    3262
....................       fprintf(printer,"    EP01 Ciclo Cancelado \n"); 
3262:  MOVLW  B0
3264:  MOVWF  FF6
3266:  MOVLW  13
3268:  MOVWF  FF7
326A:  CALL   1BC0
....................       delay_us(10); 
326E:  MOVLW  27
3270:  MOVWF  00
3272:  DECFSZ 00,F
3274:  BRA    3272
3276:  BRA    3278
....................       fprintf(printer," \n"); 
3278:  MOVLW  20
327A:  BTFSS  F9E.4
327C:  BRA    327A
327E:  MOVWF  FAD
3280:  MOVLW  0A
3282:  BTFSS  F9E.4
3284:  BRA    3282
3286:  MOVWF  FAD
....................       delay_us(10); 
3288:  MOVLW  27
328A:  MOVWF  00
328C:  DECFSZ 00,F
328E:  BRA    328C
3290:  BRA    3292
....................       fprintf(printer,"  \n"); 
3292:  MOVLW  20
3294:  BTFSS  F9E.4
3296:  BRA    3294
3298:  MOVWF  FAD
329A:  MOVLW  20
329C:  BTFSS  F9E.4
329E:  BRA    329C
32A0:  MOVWF  FAD
32A2:  MOVLW  0A
32A4:  BTFSS  F9E.4
32A6:  BRA    32A4
32A8:  MOVWF  FAD
....................       delay_us(10); 
32AA:  MOVLW  27
32AC:  MOVWF  00
32AE:  DECFSZ 00,F
32B0:  BRA    32AE
32B2:  BRA    32B4
....................       Finalizo=1; 
32B4:  BSF    xB0.3
....................    }else if(Imprime==26 && !Finalizo){ 
32B6:  BRA    3546
32B8:  MOVF   xAD,W
32BA:  SUBLW  1A
32BC:  BNZ   332E
32BE:  BTFSC  xB0.3
32C0:  BRA    332E
....................       fprintf(printer," Error en bomba de Vacio\n"); 
32C2:  MOVLW  CC
32C4:  MOVWF  FF6
32C6:  MOVLW  13
32C8:  MOVWF  FF7
32CA:  CALL   1BC0
....................       delay_us(10); 
32CE:  MOVLW  27
32D0:  MOVWF  00
32D2:  DECFSZ 00,F
32D4:  BRA    32D2
32D6:  BRA    32D8
....................       fprintf(printer,"    EV01 Ciclo Cancelado \n"); 
32D8:  MOVLW  E6
32DA:  MOVWF  FF6
32DC:  MOVLW  13
32DE:  MOVWF  FF7
32E0:  CALL   1BC0
....................       delay_us(10); 
32E4:  MOVLW  27
32E6:  MOVWF  00
32E8:  DECFSZ 00,F
32EA:  BRA    32E8
32EC:  BRA    32EE
....................       fprintf(printer," \n"); 
32EE:  MOVLW  20
32F0:  BTFSS  F9E.4
32F2:  BRA    32F0
32F4:  MOVWF  FAD
32F6:  MOVLW  0A
32F8:  BTFSS  F9E.4
32FA:  BRA    32F8
32FC:  MOVWF  FAD
....................       delay_us(10); 
32FE:  MOVLW  27
3300:  MOVWF  00
3302:  DECFSZ 00,F
3304:  BRA    3302
3306:  BRA    3308
....................       fprintf(printer,"  \n"); 
3308:  MOVLW  20
330A:  BTFSS  F9E.4
330C:  BRA    330A
330E:  MOVWF  FAD
3310:  MOVLW  20
3312:  BTFSS  F9E.4
3314:  BRA    3312
3316:  MOVWF  FAD
3318:  MOVLW  0A
331A:  BTFSS  F9E.4
331C:  BRA    331A
331E:  MOVWF  FAD
....................       delay_us(10); 
3320:  MOVLW  27
3322:  MOVWF  00
3324:  DECFSZ 00,F
3326:  BRA    3324
3328:  BRA    332A
....................       Finalizo=1; 
332A:  BSF    xB0.3
....................    }else if(Imprime==27 && !Finalizo){ 
332C:  BRA    3546
332E:  MOVF   xAD,W
3330:  SUBLW  1B
3332:  BNZ   33A4
3334:  BTFSC  xB0.3
3336:  BRA    33A4
....................       fprintf(printer," Tiempo de Vacio Excesivo\n"); 
3338:  MOVLW  02
333A:  MOVWF  FF6
333C:  MOVLW  14
333E:  MOVWF  FF7
3340:  CALL   1BC0
....................       delay_us(10); 
3344:  MOVLW  27
3346:  MOVWF  00
3348:  DECFSZ 00,F
334A:  BRA    3348
334C:  BRA    334E
....................       fprintf(printer,"    EV02 Ciclo Cancelado \n"); 
334E:  MOVLW  1E
3350:  MOVWF  FF6
3352:  MOVLW  14
3354:  MOVWF  FF7
3356:  CALL   1BC0
....................       delay_us(10); 
335A:  MOVLW  27
335C:  MOVWF  00
335E:  DECFSZ 00,F
3360:  BRA    335E
3362:  BRA    3364
....................       fprintf(printer," \n"); 
3364:  MOVLW  20
3366:  BTFSS  F9E.4
3368:  BRA    3366
336A:  MOVWF  FAD
336C:  MOVLW  0A
336E:  BTFSS  F9E.4
3370:  BRA    336E
3372:  MOVWF  FAD
....................       delay_us(10); 
3374:  MOVLW  27
3376:  MOVWF  00
3378:  DECFSZ 00,F
337A:  BRA    3378
337C:  BRA    337E
....................       fprintf(printer,"  \n"); 
337E:  MOVLW  20
3380:  BTFSS  F9E.4
3382:  BRA    3380
3384:  MOVWF  FAD
3386:  MOVLW  20
3388:  BTFSS  F9E.4
338A:  BRA    3388
338C:  MOVWF  FAD
338E:  MOVLW  0A
3390:  BTFSS  F9E.4
3392:  BRA    3390
3394:  MOVWF  FAD
....................       delay_us(10); 
3396:  MOVLW  27
3398:  MOVWF  00
339A:  DECFSZ 00,F
339C:  BRA    339A
339E:  BRA    33A0
....................       Finalizo=1; 
33A0:  BSF    xB0.3
....................    }else if(Imprime==28 && !Finalizo){ 
33A2:  BRA    3546
33A4:  MOVF   xAD,W
33A6:  SUBLW  1C
33A8:  BTFSS  FD8.2
33AA:  BRA    34C6
33AC:  BTFSC  xB0.3
33AE:  BRA    34C6
....................       fprintf(printer,"      Ciclo Finalizado \n"); 
33B0:  MOVLW  3A
33B2:  MOVWF  FF6
33B4:  MOVLW  14
33B6:  MOVWF  FF7
33B8:  CALL   1BC0
....................       delay_us(10); 
33BC:  MOVLW  27
33BE:  MOVWF  00
33C0:  DECFSZ 00,F
33C2:  BRA    33C0
33C4:  BRA    33C6
....................       fprintf(printer,"       Correctamente \n"); 
33C6:  MOVLW  54
33C8:  MOVWF  FF6
33CA:  MOVLW  14
33CC:  MOVWF  FF7
33CE:  CALL   1BC0
....................       delay_us(10); 
33D2:  MOVLW  27
33D4:  MOVWF  00
33D6:  DECFSZ 00,F
33D8:  BRA    33D6
33DA:  BRA    33DC
....................       fprintf(printer,"  %02u:%02u  %03.1f°C  %03LukPa  \n",Hora,Minuto,Temperatura,PresionCamara);  
33DC:  MOVLW  20
33DE:  BTFSS  F9E.4
33E0:  BRA    33DE
33E2:  MOVWF  FAD
33E4:  MOVLW  20
33E6:  BTFSS  F9E.4
33E8:  BRA    33E6
33EA:  MOVWF  FAD
33EC:  MOVFF  9F,2AB
33F0:  MOVLW  01
33F2:  MOVLB  2
33F4:  MOVWF  xAC
33F6:  MOVLB  0
33F8:  CALL   1E52
33FC:  MOVLW  3A
33FE:  BTFSS  F9E.4
3400:  BRA    33FE
3402:  MOVWF  FAD
3404:  MOVFF  A0,2AB
3408:  MOVLW  01
340A:  MOVLB  2
340C:  MOVWF  xAC
340E:  MOVLB  0
3410:  CALL   1E52
3414:  MOVLW  20
3416:  BTFSS  F9E.4
3418:  BRA    3416
341A:  MOVWF  FAD
341C:  MOVLW  20
341E:  BTFSS  F9E.4
3420:  BRA    341E
3422:  MOVWF  FAD
3424:  MOVLW  42
3426:  MOVWF  FE9
3428:  MOVFF  93,2AE
342C:  MOVFF  92,2AD
3430:  MOVFF  91,2AC
3434:  MOVFF  90,2AB
3438:  MOVLW  01
343A:  MOVLB  2
343C:  MOVWF  xAF
343E:  MOVLB  0
3440:  CALL   208A
3444:  MOVLW  7F
3446:  MOVWF  FF6
3448:  MOVLW  14
344A:  MOVWF  FF7
344C:  MOVLW  04
344E:  MOVLB  2
3450:  MOVWF  xAD
3452:  MOVLB  0
3454:  CALL   222C
3458:  MOVLW  0A
345A:  MOVWF  FE9
345C:  MOVFF  B2,2AE
3460:  MOVFF  B1,2AD
3464:  CALL   2256
3468:  MOVLW  88
346A:  MOVWF  FF6
346C:  MOVLW  14
346E:  MOVWF  FF7
3470:  MOVLW  06
3472:  MOVLB  2
3474:  MOVWF  xAD
3476:  MOVLB  0
3478:  CALL   222C
....................       delay_us(10); 
347C:  MOVLW  27
347E:  MOVWF  00
3480:  DECFSZ 00,F
3482:  BRA    3480
3484:  BRA    3486
....................       fprintf(printer," \n"); 
3486:  MOVLW  20
3488:  BTFSS  F9E.4
348A:  BRA    3488
348C:  MOVWF  FAD
348E:  MOVLW  0A
3490:  BTFSS  F9E.4
3492:  BRA    3490
3494:  MOVWF  FAD
....................       delay_us(10); 
3496:  MOVLW  27
3498:  MOVWF  00
349A:  DECFSZ 00,F
349C:  BRA    349A
349E:  BRA    34A0
....................       fprintf(printer,"  \n"); 
34A0:  MOVLW  20
34A2:  BTFSS  F9E.4
34A4:  BRA    34A2
34A6:  MOVWF  FAD
34A8:  MOVLW  20
34AA:  BTFSS  F9E.4
34AC:  BRA    34AA
34AE:  MOVWF  FAD
34B0:  MOVLW  0A
34B2:  BTFSS  F9E.4
34B4:  BRA    34B2
34B6:  MOVWF  FAD
....................       delay_us(10); 
34B8:  MOVLW  27
34BA:  MOVWF  00
34BC:  DECFSZ 00,F
34BE:  BRA    34BC
34C0:  BRA    34C2
....................       Finalizo=1; 
34C2:  BSF    xB0.3
....................    }else if(Imprime==29 && !Finalizo){ 
34C4:  BRA    3546
34C6:  MOVF   xAD,W
34C8:  SUBLW  1D
34CA:  BNZ   353C
34CC:  BTFSC  xB0.3
34CE:  BRA    353C
....................       fprintf(printer,"    Error Empaque Puerta\n"); 
34D0:  MOVLW  90
34D2:  MOVWF  FF6
34D4:  MOVLW  14
34D6:  MOVWF  FF7
34D8:  CALL   1BC0
....................       delay_us(10); 
34DC:  MOVLW  27
34DE:  MOVWF  00
34E0:  DECFSZ 00,F
34E2:  BRA    34E0
34E4:  BRA    34E6
....................       fprintf(printer,"    EE01 Ciclo Cancelado \n"); 
34E6:  MOVLW  AA
34E8:  MOVWF  FF6
34EA:  MOVLW  14
34EC:  MOVWF  FF7
34EE:  CALL   1BC0
....................       delay_us(10); 
34F2:  MOVLW  27
34F4:  MOVWF  00
34F6:  DECFSZ 00,F
34F8:  BRA    34F6
34FA:  BRA    34FC
....................       fprintf(printer," \n"); 
34FC:  MOVLW  20
34FE:  BTFSS  F9E.4
3500:  BRA    34FE
3502:  MOVWF  FAD
3504:  MOVLW  0A
3506:  BTFSS  F9E.4
3508:  BRA    3506
350A:  MOVWF  FAD
....................       delay_us(10); 
350C:  MOVLW  27
350E:  MOVWF  00
3510:  DECFSZ 00,F
3512:  BRA    3510
3514:  BRA    3516
....................       fprintf(printer,"  \n"); 
3516:  MOVLW  20
3518:  BTFSS  F9E.4
351A:  BRA    3518
351C:  MOVWF  FAD
351E:  MOVLW  20
3520:  BTFSS  F9E.4
3522:  BRA    3520
3524:  MOVWF  FAD
3526:  MOVLW  0A
3528:  BTFSS  F9E.4
352A:  BRA    3528
352C:  MOVWF  FAD
....................       delay_us(10); 
352E:  MOVLW  27
3530:  MOVWF  00
3532:  DECFSZ 00,F
3534:  BRA    3532
3536:  BRA    3538
....................       Finalizo=1; 
3538:  BSF    xB0.3
....................    }else if(Imprime==10){ 
353A:  BRA    3546
353C:  MOVF   xAD,W
353E:  SUBLW  0A
3540:  BNZ   3546
....................       flagImprime=0; 
3542:  BCF    xB0.0
....................       flagImprime2=0; 
3544:  BCF    xB0.1
....................    } 
....................     
....................    if(estadoBuzzer==1) 
3546:  BTFSS  xB0.4
3548:  BRA    3550
....................       Buzzer_on; 
354A:  BSF    F89.5
354C:  BCF    F92.5
....................    else 
354E:  BRA    3554
....................       Buzzer_off; 
3550:  BCF    F89.5
3552:  BCF    F92.5
....................     
....................    if(rxbuf1[0]==0xff && rxbuf1[1]==0xff){//indica que debe iniciar la escritura en la Impresora 
3554:  INCFSZ xB9,W
3556:  GOTO   427E
355A:  INCFSZ xBA,W
355C:  GOTO   427E
....................       Buzzer_on; 
3560:  BSF    F89.5
3562:  BCF    F92.5
....................       delay_ms(1000); 
3564:  MOVLW  04
3566:  MOVLB  2
3568:  MOVWF  xAB
356A:  MOVLW  FA
356C:  MOVWF  xAC
356E:  MOVLB  0
3570:  CALL   1B96
3574:  MOVLB  2
3576:  DECFSZ xAB,F
3578:  BRA    356A
....................       Buzzer_off; 
357A:  BCF    F89.5
357C:  BCF    F92.5
....................       fprintf(printer," AUTOCLAVE DIGITAL  JP INGLOBAL  \n"); 
357E:  MOVLW  C6
3580:  MOVWF  FF6
3582:  MOVLW  14
3584:  MOVWF  FF7
3586:  MOVLB  0
3588:  CALL   1BC0
....................       delay_us(10); 
358C:  MOVLW  27
358E:  MOVWF  00
3590:  DECFSZ 00,F
3592:  BRA    3590
3594:  BRA    3596
....................       fprintf(printer," OPERADOR:  %s\n",user[rxbuf1[2]]); 
3596:  MOVF   xBB,W
3598:  MULLW  14
359A:  MOVF   FF3,W
359C:  CLRF   03
359E:  MOVLB  2
35A0:  MOVWF  xAB
35A2:  MOVLW  EA
35A4:  MOVWF  FF6
35A6:  MOVLW  14
35A8:  MOVWF  FF7
35AA:  MOVLW  0C
35AC:  MOVWF  xAD
35AE:  MOVLB  0
35B0:  CALL   222C
35B4:  MOVLW  70
35B6:  MOVWF  FF6
35B8:  MOVLW  0E
35BA:  MOVWF  FF7
35BC:  MOVLB  2
35BE:  MOVF   xAB,W
35C0:  ADDWF  FF6,F
35C2:  MOVLW  00
35C4:  ADDWFC FF7,F
35C6:  MOVLB  0
35C8:  CALL   1BC0
35CC:  MOVLW  0A
35CE:  BTFSS  F9E.4
35D0:  BRA    35CE
35D2:  MOVWF  FAD
....................       delay_us(10); 
35D4:  MOVLW  27
35D6:  MOVWF  00
35D8:  DECFSZ 00,F
35DA:  BRA    35D8
35DC:  BRA    35DE
....................       fprintf(printer,"  Ciclo de Esterilizacion #%02u \n",rxbuf1[3]); 
35DE:  MOVLW  FA
35E0:  MOVWF  FF6
35E2:  MOVLW  14
35E4:  MOVWF  FF7
35E6:  MOVLW  1B
35E8:  MOVLB  2
35EA:  MOVWF  xAD
35EC:  MOVLB  0
35EE:  CALL   222C
35F2:  MOVFF  BC,2AB
35F6:  MOVLW  01
35F8:  MOVLB  2
35FA:  MOVWF  xAC
35FC:  MOVLB  0
35FE:  CALL   1E52
3602:  MOVLW  20
3604:  BTFSS  F9E.4
3606:  BRA    3604
3608:  MOVWF  FAD
360A:  MOVLW  0A
360C:  BTFSS  F9E.4
360E:  BRA    360C
3610:  MOVWF  FAD
....................       delay_us(10); 
3612:  MOVLW  27
3614:  MOVWF  00
3616:  DECFSZ 00,F
3618:  BRA    3616
361A:  BRA    361C
....................       if(Ciclo<11) 
361C:  MOVF   xA3,W
361E:  SUBLW  0A
3620:  BNC   3664
....................          fprintf(printer,"%s\n",Texto[rxbuf1[3]-1]); 
3622:  MOVLW  01
3624:  SUBWF  xBC,W
3626:  MOVLB  2
3628:  MOVWF  xAC
362A:  CLRF   xAE
362C:  MOVWF  xAD
362E:  CLRF   xB0
3630:  MOVLW  18
3632:  MOVWF  xAF
3634:  MOVLB  0
3636:  CALL   2300
363A:  MOVFF  02,2AC
363E:  MOVLB  2
3640:  MOVFF  01,2AB
3644:  MOVLW  5A
3646:  MOVWF  FF6
3648:  MOVLW  0D
364A:  MOVWF  FF7
364C:  MOVF   01,W
364E:  ADDWF  FF6,F
3650:  MOVF   02,W
3652:  ADDWFC FF7,F
3654:  MOVLB  0
3656:  CALL   1BC0
365A:  MOVLW  0A
365C:  BTFSS  F9E.4
365E:  BRA    365C
3660:  MOVWF  FAD
....................       else 
3662:  BRA    3690
....................          fprintf(printer,"Personalizado %02u\n",rxbuf1[3]); 
3664:  MOVLW  1C
3666:  MOVWF  FF6
3668:  MOVLW  15
366A:  MOVWF  FF7
366C:  MOVLW  0E
366E:  MOVLB  2
3670:  MOVWF  xAD
3672:  MOVLB  0
3674:  CALL   222C
3678:  MOVFF  BC,2AB
367C:  MOVLW  01
367E:  MOVLB  2
3680:  MOVWF  xAC
3682:  MOVLB  0
3684:  CALL   1E52
3688:  MOVLW  0A
368A:  BTFSS  F9E.4
368C:  BRA    368A
368E:  MOVWF  FAD
....................       delay_us(10); 
3690:  MOVLW  27
3692:  MOVWF  00
3694:  DECFSZ 00,F
3696:  BRA    3694
3698:  BRA    369A
....................       fprintf(printer,"Ciclo #%05Lu\n",CiclosTotales-1); 
369A:  MOVLW  01
369C:  SUBWF  xB5,W
369E:  MOVLB  2
36A0:  MOVWF  xAB
36A2:  MOVLW  00
36A4:  MOVLB  0
36A6:  SUBWFB xB6,W
36A8:  MOVLB  2
36AA:  MOVWF  xAC
36AC:  MOVLW  30
36AE:  MOVWF  FF6
36B0:  MOVLW  15
36B2:  MOVWF  FF7
36B4:  MOVLW  07
36B6:  MOVWF  xAD
36B8:  MOVLB  0
36BA:  CALL   222C
36BE:  MOVLW  08
36C0:  MOVWF  FE9
36C2:  MOVFF  2AC,2AE
36C6:  MOVFF  2AB,2AD
36CA:  CALL   2256
36CE:  MOVLW  0A
36D0:  BTFSS  F9E.4
36D2:  BRA    36D0
36D4:  MOVWF  FAD
....................       delay_us(10); 
36D6:  MOVLW  27
36D8:  MOVWF  00
36DA:  DECFSZ 00,F
36DC:  BRA    36DA
36DE:  BRA    36E0
....................       fprintf(printer,"FECHA: %02u-%02u-%02u \n",rxbuf1[4],rxbuf1[5],rxbuf1[6]);//Dia,Mes,Year); 
36E0:  MOVLW  3E
36E2:  MOVWF  FF6
36E4:  MOVLW  15
36E6:  MOVWF  FF7
36E8:  MOVLW  07
36EA:  MOVLB  2
36EC:  MOVWF  xAD
36EE:  MOVLB  0
36F0:  CALL   222C
36F4:  MOVFF  BD,2AB
36F8:  MOVLW  01
36FA:  MOVLB  2
36FC:  MOVWF  xAC
36FE:  MOVLB  0
3700:  CALL   1E52
3704:  MOVLW  2D
3706:  BTFSS  F9E.4
3708:  BRA    3706
370A:  MOVWF  FAD
370C:  MOVFF  BE,2AB
3710:  MOVLW  01
3712:  MOVLB  2
3714:  MOVWF  xAC
3716:  MOVLB  0
3718:  CALL   1E52
371C:  MOVLW  2D
371E:  BTFSS  F9E.4
3720:  BRA    371E
3722:  MOVWF  FAD
3724:  MOVFF  BF,2AB
3728:  MOVLW  01
372A:  MOVLB  2
372C:  MOVWF  xAC
372E:  MOVLB  0
3730:  CALL   1E52
3734:  MOVLW  20
3736:  BTFSS  F9E.4
3738:  BRA    3736
373A:  MOVWF  FAD
373C:  MOVLW  0A
373E:  BTFSS  F9E.4
3740:  BRA    373E
3742:  MOVWF  FAD
....................       delay_us(10); 
3744:  MOVLW  27
3746:  MOVWF  00
3748:  DECFSZ 00,F
374A:  BRA    3748
374C:  BRA    374E
....................       fprintf(printer," HORA  TEMP     PC     PP   Al\n"); 
374E:  MOVLW  56
3750:  MOVWF  FF6
3752:  MOVLW  15
3754:  MOVWF  FF7
3756:  CALL   1BC0
....................       delay_us(10); 
375A:  MOVLW  27
375C:  MOVWF  00
375E:  DECFSZ 00,F
3760:  BRA    375E
3762:  BRA    3764
....................        
....................       for(i=0;i<10;i++){ 
3764:  CLRF   x81
3766:  MOVF   x81,W
3768:  SUBLW  09
376A:  BTFSS  FD8.0
376C:  BRA    39EA
....................          Hora=rxbuf1[13+(i*9)]; 
376E:  MOVF   x81,W
3770:  MULLW  09
3772:  MOVF   FF3,W
3774:  ADDLW  0D
3776:  CLRF   03
3778:  ADDLW  B9
377A:  MOVWF  FE9
377C:  MOVLW  00
377E:  ADDWFC 03,W
3780:  MOVWF  FEA
3782:  MOVFF  FEF,9F
....................          if(Hora>25){ 
3786:  MOVF   x9F,W
3788:  SUBLW  19
378A:  BC    3790
....................             Hora=0; 
378C:  CLRF   x9F
....................             break; 
378E:  BRA    39EA
....................          } 
....................          Minuto=rxbuf1[14+(i*9)]; 
3790:  MOVF   x81,W
3792:  MULLW  09
3794:  MOVF   FF3,W
3796:  ADDLW  0E
3798:  CLRF   03
379A:  ADDLW  B9
379C:  MOVWF  FE9
379E:  MOVLW  00
37A0:  ADDWFC 03,W
37A2:  MOVWF  FEA
37A4:  MOVFF  FEF,A0
....................          if(Minuto>59){ 
37A8:  MOVF   xA0,W
37AA:  SUBLW  3B
37AC:  BC    37B2
....................             Minuto=0; 
37AE:  CLRF   xA0
....................             break; 
37B0:  BRA    39EA
....................          } 
....................          PresionCamara=make16(rxbuf1[9+(i*9)],rxbuf1[10+(i*9)]); 
37B2:  MOVF   x81,W
37B4:  MULLW  09
37B6:  MOVF   FF3,W
37B8:  ADDLW  09
37BA:  CLRF   03
37BC:  ADDLW  B9
37BE:  MOVWF  FE9
37C0:  MOVLW  00
37C2:  ADDWFC 03,W
37C4:  MOVWF  FEA
37C6:  MOVFF  FEF,2AB
37CA:  MOVF   x81,W
37CC:  MULLW  09
37CE:  MOVF   FF3,W
37D0:  ADDLW  0A
37D2:  CLRF   03
37D4:  ADDLW  B9
37D6:  MOVWF  FE9
37D8:  MOVLW  00
37DA:  ADDWFC 03,W
37DC:  MOVWF  FEA
37DE:  MOVFF  FEF,2AC
37E2:  MOVFF  2AB,B2
37E6:  MOVFF  2AC,B1
....................          if(PresionCamara>400){ 
37EA:  MOVF   xB2,W
37EC:  SUBLW  00
37EE:  BC    3800
37F0:  XORLW  FF
37F2:  BNZ   37FA
37F4:  MOVF   xB1,W
37F6:  SUBLW  90
37F8:  BC    3800
....................             PresionCamara=0; 
37FA:  CLRF   xB2
37FC:  CLRF   xB1
....................             break; 
37FE:  BRA    39EA
....................          } 
....................          PresionPreCamara=make16(rxbuf1[11+(i*9)],rxbuf1[12+(i*9)]);      
3800:  MOVF   x81,W
3802:  MULLW  09
3804:  MOVF   FF3,W
3806:  ADDLW  0B
3808:  CLRF   03
380A:  ADDLW  B9
380C:  MOVWF  FE9
380E:  MOVLW  00
3810:  ADDWFC 03,W
3812:  MOVWF  FEA
3814:  MOVFF  FEF,2AB
3818:  MOVF   x81,W
381A:  MULLW  09
381C:  MOVF   FF3,W
381E:  ADDLW  0C
3820:  CLRF   03
3822:  ADDLW  B9
3824:  MOVWF  FE9
3826:  MOVLW  00
3828:  ADDWFC 03,W
382A:  MOVWF  FEA
382C:  MOVFF  FEF,2AC
3830:  MOVFF  2AB,B4
3834:  MOVFF  2AC,B3
....................          if(PresionPreCamara>400){ 
3838:  MOVF   xB4,W
383A:  SUBLW  00
383C:  BC    384E
383E:  XORLW  FF
3840:  BNZ   3848
3842:  MOVF   xB3,W
3844:  SUBLW  90
3846:  BC    384E
....................             PresionPreCamara=0; 
3848:  CLRF   xB4
384A:  CLRF   xB3
....................             break; 
384C:  BRA    39EA
....................          } 
....................          Temperatura=rxbuf1[7+(i*9)]+inttofloat(rxbuf1[8+(i*9)]); 
384E:  MOVF   x81,W
3850:  MULLW  09
3852:  MOVF   FF3,W
3854:  ADDLW  07
3856:  CLRF   03
3858:  ADDLW  B9
385A:  MOVWF  FE9
385C:  MOVLW  00
385E:  ADDWFC 03,W
3860:  MOVWF  FEA
3862:  MOVFF  FEF,2AB
3866:  MOVF   x81,W
3868:  MULLW  09
386A:  MOVF   FF3,W
386C:  ADDLW  08
386E:  CLRF   03
3870:  ADDLW  B9
3872:  MOVWF  FE9
3874:  MOVLW  00
3876:  ADDWFC 03,W
3878:  MOVWF  FEA
387A:  MOVFF  FEF,2AC
387E:  MOVFF  2AC,2AD
3882:  CALL   2322
3886:  MOVFF  00,2AC
388A:  MOVFF  01,2AD
388E:  MOVFF  02,2AE
3892:  MOVFF  03,2AF
3896:  MOVLB  2
3898:  CLRF   xB3
389A:  MOVFF  2AB,2B2
389E:  MOVLB  0
38A0:  CALL   15A4
38A4:  MOVFF  FEA,2B1
38A8:  MOVFF  FE9,2B0
38AC:  BCF    FD8.1
38AE:  MOVFF  03,2B5
38B2:  MOVFF  02,2B4
38B6:  MOVFF  01,2B3
38BA:  MOVFF  00,2B2
38BE:  MOVFF  2AF,2B9
38C2:  MOVFF  2AE,2B8
38C6:  MOVFF  2AD,2B7
38CA:  MOVFF  2AC,2B6
38CE:  CALL   1738
38D2:  MOVFF  2B1,FEA
38D6:  MOVFF  2B0,FE9
38DA:  MOVFF  03,93
38DE:  MOVFF  02,92
38E2:  MOVFF  01,91
38E6:  MOVFF  00,90
....................          if(Temperatura>150){ 
38EA:  MOVLB  2
38EC:  CLRF   xAE
38EE:  CLRF   xAD
38F0:  MOVLW  16
38F2:  MOVWF  xAC
38F4:  MOVLW  86
38F6:  MOVWF  xAB
38F8:  MOVFF  93,2B2
38FC:  MOVFF  92,2B1
3900:  MOVFF  91,2B0
3904:  MOVFF  90,2AF
3908:  MOVLB  0
390A:  CALL   2366
390E:  BNC   391A
....................             Temperatura=0; 
3910:  CLRF   x93
3912:  CLRF   x92
3914:  CLRF   x91
3916:  CLRF   x90
....................             break; 
3918:  BRA    39EA
....................          }    
....................          Alarma=rxbuf1[15+(i*9)]; 
391A:  MOVF   x81,W
391C:  MULLW  09
391E:  MOVF   FF3,W
3920:  ADDLW  0F
3922:  CLRF   03
3924:  ADDLW  B9
3926:  MOVWF  FE9
3928:  MOVLW  00
392A:  ADDWFC 03,W
392C:  MOVWF  FEA
392E:  MOVFF  FEF,82
....................          if(Alarma>20){ 
3932:  MOVF   x82,W
3934:  SUBLW  14
3936:  BC    393C
....................             Alarma=0; 
3938:  CLRF   x82
....................             break; 
393A:  BRA    39EA
....................          } 
....................          fprintf(printer,"%02u:%02u %03Lu %03Lu %3.1f %02u\n",Hora,Minuto,PresionCamara,PresionPrecamara,Temperatura,Alarma); 
393C:  MOVFF  9F,2AB
3940:  MOVLW  01
3942:  MOVLB  2
3944:  MOVWF  xAC
3946:  MOVLB  0
3948:  CALL   1E52
394C:  MOVLW  3A
394E:  BTFSS  F9E.4
3950:  BRA    394E
3952:  MOVWF  FAD
3954:  MOVFF  A0,2AB
3958:  MOVLW  01
395A:  MOVLB  2
395C:  MOVWF  xAC
395E:  MOVLB  0
3960:  CALL   1E52
3964:  MOVLW  20
3966:  BTFSS  F9E.4
3968:  BRA    3966
396A:  MOVWF  FAD
396C:  MOVLW  0A
396E:  MOVWF  FE9
3970:  MOVFF  B2,2AE
3974:  MOVFF  B1,2AD
3978:  CALL   2256
397C:  MOVLW  20
397E:  BTFSS  F9E.4
3980:  BRA    397E
3982:  MOVWF  FAD
3984:  MOVLW  0A
3986:  MOVWF  FE9
3988:  MOVFF  B4,2AE
398C:  MOVFF  B3,2AD
3990:  CALL   2256
3994:  MOVLW  20
3996:  BTFSS  F9E.4
3998:  BRA    3996
399A:  MOVWF  FAD
399C:  MOVLW  02
399E:  MOVWF  FE9
39A0:  MOVFF  93,2AE
39A4:  MOVFF  92,2AD
39A8:  MOVFF  91,2AC
39AC:  MOVFF  90,2AB
39B0:  MOVLW  01
39B2:  MOVLB  2
39B4:  MOVWF  xAF
39B6:  MOVLB  0
39B8:  CALL   208A
39BC:  MOVLW  20
39BE:  BTFSS  F9E.4
39C0:  BRA    39BE
39C2:  MOVWF  FAD
39C4:  MOVFF  82,2AB
39C8:  MOVLW  01
39CA:  MOVLB  2
39CC:  MOVWF  xAC
39CE:  MOVLB  0
39D0:  CALL   1E52
39D4:  MOVLW  0A
39D6:  BTFSS  F9E.4
39D8:  BRA    39D6
39DA:  MOVWF  FAD
....................          delay_us(10);  
39DC:  MOVLW  27
39DE:  MOVWF  00
39E0:  DECFSZ 00,F
39E2:  BRA    39E0
39E4:  BRA    39E6
....................       } 
39E6:  INCF   x81,F
39E8:  BRA    3766
....................       for(i=0;i<11;i++){ 
39EA:  CLRF   x81
39EC:  MOVF   x81,W
39EE:  SUBLW  0A
39F0:  BTFSS  FD8.0
39F2:  BRA    3C6E
....................          Hora=rxbuf2[6+(i*9)]; 
39F4:  MOVF   x81,W
39F6:  MULLW  09
39F8:  MOVF   FF3,W
39FA:  ADDLW  06
39FC:  CLRF   03
39FE:  ADDLW  1D
3A00:  MOVWF  FE9
3A02:  MOVLW  01
3A04:  ADDWFC 03,W
3A06:  MOVWF  FEA
3A08:  MOVFF  FEF,9F
....................          if(Hora>25){ 
3A0C:  MOVF   x9F,W
3A0E:  SUBLW  19
3A10:  BC    3A16
....................             Hora=0; 
3A12:  CLRF   x9F
....................             break; 
3A14:  BRA    3C6E
....................          }               
....................          Minuto=rxbuf2[7+(i*9)]; 
3A16:  MOVF   x81,W
3A18:  MULLW  09
3A1A:  MOVF   FF3,W
3A1C:  ADDLW  07
3A1E:  CLRF   03
3A20:  ADDLW  1D
3A22:  MOVWF  FE9
3A24:  MOVLW  01
3A26:  ADDWFC 03,W
3A28:  MOVWF  FEA
3A2A:  MOVFF  FEF,A0
....................          if(Minuto>59){ 
3A2E:  MOVF   xA0,W
3A30:  SUBLW  3B
3A32:  BC    3A38
....................             Minuto=0; 
3A34:  CLRF   xA0
....................             break; 
3A36:  BRA    3C6E
....................          } 
....................          PresionCamara=make16(rxbuf2[2+(i*9)],rxbuf2[3+(i*9)]); 
3A38:  MOVF   x81,W
3A3A:  MULLW  09
3A3C:  MOVF   FF3,W
3A3E:  ADDLW  02
3A40:  CLRF   03
3A42:  ADDLW  1D
3A44:  MOVWF  FE9
3A46:  MOVLW  01
3A48:  ADDWFC 03,W
3A4A:  MOVWF  FEA
3A4C:  MOVFF  FEF,2AB
3A50:  MOVF   x81,W
3A52:  MULLW  09
3A54:  MOVF   FF3,W
3A56:  ADDLW  03
3A58:  CLRF   03
3A5A:  ADDLW  1D
3A5C:  MOVWF  FE9
3A5E:  MOVLW  01
3A60:  ADDWFC 03,W
3A62:  MOVWF  FEA
3A64:  MOVFF  FEF,2AC
3A68:  MOVFF  2AB,B2
3A6C:  MOVFF  2AC,B1
....................          if(PresionCamara>400){ 
3A70:  MOVF   xB2,W
3A72:  SUBLW  00
3A74:  BC    3A86
3A76:  XORLW  FF
3A78:  BNZ   3A80
3A7A:  MOVF   xB1,W
3A7C:  SUBLW  90
3A7E:  BC    3A86
....................             PresionCamara=0; 
3A80:  CLRF   xB2
3A82:  CLRF   xB1
....................             break; 
3A84:  BRA    3C6E
....................          } 
....................          PresionPreCamara=make16(rxbuf2[4+(i*9)],rxbuf2[5+(i*9)]);     
3A86:  MOVF   x81,W
3A88:  MULLW  09
3A8A:  MOVF   FF3,W
3A8C:  ADDLW  04
3A8E:  CLRF   03
3A90:  ADDLW  1D
3A92:  MOVWF  FE9
3A94:  MOVLW  01
3A96:  ADDWFC 03,W
3A98:  MOVWF  FEA
3A9A:  MOVFF  FEF,2AB
3A9E:  MOVF   x81,W
3AA0:  MULLW  09
3AA2:  MOVF   FF3,W
3AA4:  ADDLW  05
3AA6:  CLRF   03
3AA8:  ADDLW  1D
3AAA:  MOVWF  FE9
3AAC:  MOVLW  01
3AAE:  ADDWFC 03,W
3AB0:  MOVWF  FEA
3AB2:  MOVFF  FEF,2AC
3AB6:  MOVFF  2AB,B4
3ABA:  MOVFF  2AC,B3
....................          if(PresionPreCamara>400){                      
3ABE:  MOVF   xB4,W
3AC0:  SUBLW  00
3AC2:  BC    3AD4
3AC4:  XORLW  FF
3AC6:  BNZ   3ACE
3AC8:  MOVF   xB3,W
3ACA:  SUBLW  90
3ACC:  BC    3AD4
....................             PresionPreCamara=0; 
3ACE:  CLRF   xB4
3AD0:  CLRF   xB3
....................             break; 
3AD2:  BRA    3C6E
....................          } 
....................          Temperatura=rxbuf2[(i*9)]+inttofloat(rxbuf2[1+(i*9)]); 
3AD4:  MOVF   x81,W
3AD6:  MULLW  09
3AD8:  MOVF   FF3,W
3ADA:  CLRF   03
3ADC:  ADDLW  1D
3ADE:  MOVWF  FE9
3AE0:  MOVLW  01
3AE2:  ADDWFC 03,W
3AE4:  MOVWF  FEA
3AE6:  MOVFF  FEF,2AB
3AEA:  MOVF   x81,W
3AEC:  MULLW  09
3AEE:  MOVF   FF3,W
3AF0:  ADDLW  01
3AF2:  CLRF   03
3AF4:  ADDLW  1D
3AF6:  MOVWF  FE9
3AF8:  MOVLW  01
3AFA:  ADDWFC 03,W
3AFC:  MOVWF  FEA
3AFE:  MOVFF  FEF,2AC
3B02:  MOVFF  2AC,2AD
3B06:  CALL   2322
3B0A:  MOVFF  00,2AC
3B0E:  MOVFF  01,2AD
3B12:  MOVFF  02,2AE
3B16:  MOVFF  03,2AF
3B1A:  MOVLB  2
3B1C:  CLRF   xB3
3B1E:  MOVFF  2AB,2B2
3B22:  MOVLB  0
3B24:  CALL   15A4
3B28:  MOVFF  FEA,2B1
3B2C:  MOVFF  FE9,2B0
3B30:  BCF    FD8.1
3B32:  MOVFF  03,2B5
3B36:  MOVFF  02,2B4
3B3A:  MOVFF  01,2B3
3B3E:  MOVFF  00,2B2
3B42:  MOVFF  2AF,2B9
3B46:  MOVFF  2AE,2B8
3B4A:  MOVFF  2AD,2B7
3B4E:  MOVFF  2AC,2B6
3B52:  CALL   1738
3B56:  MOVFF  2B1,FEA
3B5A:  MOVFF  2B0,FE9
3B5E:  MOVFF  03,93
3B62:  MOVFF  02,92
3B66:  MOVFF  01,91
3B6A:  MOVFF  00,90
....................          if(Temperatura>150){ 
3B6E:  MOVLB  2
3B70:  CLRF   xAE
3B72:  CLRF   xAD
3B74:  MOVLW  16
3B76:  MOVWF  xAC
3B78:  MOVLW  86
3B7A:  MOVWF  xAB
3B7C:  MOVFF  93,2B2
3B80:  MOVFF  92,2B1
3B84:  MOVFF  91,2B0
3B88:  MOVFF  90,2AF
3B8C:  MOVLB  0
3B8E:  CALL   2366
3B92:  BNC   3B9E
....................             Temperatura=0; 
3B94:  CLRF   x93
3B96:  CLRF   x92
3B98:  CLRF   x91
3B9A:  CLRF   x90
....................             break; 
3B9C:  BRA    3C6E
....................          } 
....................          Alarma=rxbuf2[8+(i*9)]; 
3B9E:  MOVF   x81,W
3BA0:  MULLW  09
3BA2:  MOVF   FF3,W
3BA4:  ADDLW  08
3BA6:  CLRF   03
3BA8:  ADDLW  1D
3BAA:  MOVWF  FE9
3BAC:  MOVLW  01
3BAE:  ADDWFC 03,W
3BB0:  MOVWF  FEA
3BB2:  MOVFF  FEF,82
....................          if(Alarma>20){ 
3BB6:  MOVF   x82,W
3BB8:  SUBLW  14
3BBA:  BC    3BC0
....................             Alarma=0; 
3BBC:  CLRF   x82
....................             break; 
3BBE:  BRA    3C6E
....................          } 
....................          fprintf(printer,"%02u:%02u %03Lu %03Lu %3.1f %02u\n",Hora,Minuto,PresionCamara,PresionPrecamara,Temperatura,Alarma); 
3BC0:  MOVFF  9F,2AB
3BC4:  MOVLW  01
3BC6:  MOVLB  2
3BC8:  MOVWF  xAC
3BCA:  MOVLB  0
3BCC:  CALL   1E52
3BD0:  MOVLW  3A
3BD2:  BTFSS  F9E.4
3BD4:  BRA    3BD2
3BD6:  MOVWF  FAD
3BD8:  MOVFF  A0,2AB
3BDC:  MOVLW  01
3BDE:  MOVLB  2
3BE0:  MOVWF  xAC
3BE2:  MOVLB  0
3BE4:  CALL   1E52
3BE8:  MOVLW  20
3BEA:  BTFSS  F9E.4
3BEC:  BRA    3BEA
3BEE:  MOVWF  FAD
3BF0:  MOVLW  0A
3BF2:  MOVWF  FE9
3BF4:  MOVFF  B2,2AE
3BF8:  MOVFF  B1,2AD
3BFC:  CALL   2256
3C00:  MOVLW  20
3C02:  BTFSS  F9E.4
3C04:  BRA    3C02
3C06:  MOVWF  FAD
3C08:  MOVLW  0A
3C0A:  MOVWF  FE9
3C0C:  MOVFF  B4,2AE
3C10:  MOVFF  B3,2AD
3C14:  CALL   2256
3C18:  MOVLW  20
3C1A:  BTFSS  F9E.4
3C1C:  BRA    3C1A
3C1E:  MOVWF  FAD
3C20:  MOVLW  02
3C22:  MOVWF  FE9
3C24:  MOVFF  93,2AE
3C28:  MOVFF  92,2AD
3C2C:  MOVFF  91,2AC
3C30:  MOVFF  90,2AB
3C34:  MOVLW  01
3C36:  MOVLB  2
3C38:  MOVWF  xAF
3C3A:  MOVLB  0
3C3C:  CALL   208A
3C40:  MOVLW  20
3C42:  BTFSS  F9E.4
3C44:  BRA    3C42
3C46:  MOVWF  FAD
3C48:  MOVFF  82,2AB
3C4C:  MOVLW  01
3C4E:  MOVLB  2
3C50:  MOVWF  xAC
3C52:  MOVLB  0
3C54:  CALL   1E52
3C58:  MOVLW  0A
3C5A:  BTFSS  F9E.4
3C5C:  BRA    3C5A
3C5E:  MOVWF  FAD
....................          delay_us(10); 
3C60:  MOVLW  27
3C62:  MOVWF  00
3C64:  DECFSZ 00,F
3C66:  BRA    3C64
3C68:  BRA    3C6A
....................       } 
3C6A:  INCF   x81,F
3C6C:  BRA    39EC
....................       for(i=0;i<11;i++){ 
3C6E:  CLRF   x81
3C70:  MOVF   x81,W
3C72:  SUBLW  0A
3C74:  BTFSS  FD8.0
3C76:  BRA    3EF2
....................          Hora=rxbuf3[6+(i*9)]; 
3C78:  MOVF   x81,W
3C7A:  MULLW  09
3C7C:  MOVF   FF3,W
3C7E:  ADDLW  06
3C80:  CLRF   03
3C82:  ADDLW  81
3C84:  MOVWF  FE9
3C86:  MOVLW  01
3C88:  ADDWFC 03,W
3C8A:  MOVWF  FEA
3C8C:  MOVFF  FEF,9F
....................          if(Hora>25){ 
3C90:  MOVF   x9F,W
3C92:  SUBLW  19
3C94:  BC    3C9A
....................             Hora=0; 
3C96:  CLRF   x9F
....................             break; 
3C98:  BRA    3EF2
....................          }               
....................          Minuto=rxbuf3[7+(i*9)]; 
3C9A:  MOVF   x81,W
3C9C:  MULLW  09
3C9E:  MOVF   FF3,W
3CA0:  ADDLW  07
3CA2:  CLRF   03
3CA4:  ADDLW  81
3CA6:  MOVWF  FE9
3CA8:  MOVLW  01
3CAA:  ADDWFC 03,W
3CAC:  MOVWF  FEA
3CAE:  MOVFF  FEF,A0
....................          if(Minuto>59){ 
3CB2:  MOVF   xA0,W
3CB4:  SUBLW  3B
3CB6:  BC    3CBC
....................             Minuto=0; 
3CB8:  CLRF   xA0
....................             break; 
3CBA:  BRA    3EF2
....................          } 
....................          PresionCamara=make16(rxbuf3[2+(i*9)],rxbuf3[3+(i*9)]); 
3CBC:  MOVF   x81,W
3CBE:  MULLW  09
3CC0:  MOVF   FF3,W
3CC2:  ADDLW  02
3CC4:  CLRF   03
3CC6:  ADDLW  81
3CC8:  MOVWF  FE9
3CCA:  MOVLW  01
3CCC:  ADDWFC 03,W
3CCE:  MOVWF  FEA
3CD0:  MOVFF  FEF,2AB
3CD4:  MOVF   x81,W
3CD6:  MULLW  09
3CD8:  MOVF   FF3,W
3CDA:  ADDLW  03
3CDC:  CLRF   03
3CDE:  ADDLW  81
3CE0:  MOVWF  FE9
3CE2:  MOVLW  01
3CE4:  ADDWFC 03,W
3CE6:  MOVWF  FEA
3CE8:  MOVFF  FEF,2AC
3CEC:  MOVFF  2AB,B2
3CF0:  MOVFF  2AC,B1
....................          if(PresionCamara>400){ 
3CF4:  MOVF   xB2,W
3CF6:  SUBLW  00
3CF8:  BC    3D0A
3CFA:  XORLW  FF
3CFC:  BNZ   3D04
3CFE:  MOVF   xB1,W
3D00:  SUBLW  90
3D02:  BC    3D0A
....................             PresionCamara=0; 
3D04:  CLRF   xB2
3D06:  CLRF   xB1
....................             break; 
3D08:  BRA    3EF2
....................          } 
....................          PresionPreCamara=make16(rxbuf3[4+(i*9)],rxbuf3[5+(i*9)]);     
3D0A:  MOVF   x81,W
3D0C:  MULLW  09
3D0E:  MOVF   FF3,W
3D10:  ADDLW  04
3D12:  CLRF   03
3D14:  ADDLW  81
3D16:  MOVWF  FE9
3D18:  MOVLW  01
3D1A:  ADDWFC 03,W
3D1C:  MOVWF  FEA
3D1E:  MOVFF  FEF,2AB
3D22:  MOVF   x81,W
3D24:  MULLW  09
3D26:  MOVF   FF3,W
3D28:  ADDLW  05
3D2A:  CLRF   03
3D2C:  ADDLW  81
3D2E:  MOVWF  FE9
3D30:  MOVLW  01
3D32:  ADDWFC 03,W
3D34:  MOVWF  FEA
3D36:  MOVFF  FEF,2AC
3D3A:  MOVFF  2AB,B4
3D3E:  MOVFF  2AC,B3
....................          if(PresionPreCamara>400){                      
3D42:  MOVF   xB4,W
3D44:  SUBLW  00
3D46:  BC    3D58
3D48:  XORLW  FF
3D4A:  BNZ   3D52
3D4C:  MOVF   xB3,W
3D4E:  SUBLW  90
3D50:  BC    3D58
....................             PresionPreCamara=0; 
3D52:  CLRF   xB4
3D54:  CLRF   xB3
....................             break; 
3D56:  BRA    3EF2
....................          } 
....................          Temperatura=rxbuf3[(i*9)]+inttofloat(rxbuf3[1+(i*9)]); 
3D58:  MOVF   x81,W
3D5A:  MULLW  09
3D5C:  MOVF   FF3,W
3D5E:  CLRF   03
3D60:  ADDLW  81
3D62:  MOVWF  FE9
3D64:  MOVLW  01
3D66:  ADDWFC 03,W
3D68:  MOVWF  FEA
3D6A:  MOVFF  FEF,2AB
3D6E:  MOVF   x81,W
3D70:  MULLW  09
3D72:  MOVF   FF3,W
3D74:  ADDLW  01
3D76:  CLRF   03
3D78:  ADDLW  81
3D7A:  MOVWF  FE9
3D7C:  MOVLW  01
3D7E:  ADDWFC 03,W
3D80:  MOVWF  FEA
3D82:  MOVFF  FEF,2AC
3D86:  MOVFF  2AC,2AD
3D8A:  CALL   2322
3D8E:  MOVFF  00,2AC
3D92:  MOVFF  01,2AD
3D96:  MOVFF  02,2AE
3D9A:  MOVFF  03,2AF
3D9E:  MOVLB  2
3DA0:  CLRF   xB3
3DA2:  MOVFF  2AB,2B2
3DA6:  MOVLB  0
3DA8:  CALL   15A4
3DAC:  MOVFF  FEA,2B1
3DB0:  MOVFF  FE9,2B0
3DB4:  BCF    FD8.1
3DB6:  MOVFF  03,2B5
3DBA:  MOVFF  02,2B4
3DBE:  MOVFF  01,2B3
3DC2:  MOVFF  00,2B2
3DC6:  MOVFF  2AF,2B9
3DCA:  MOVFF  2AE,2B8
3DCE:  MOVFF  2AD,2B7
3DD2:  MOVFF  2AC,2B6
3DD6:  CALL   1738
3DDA:  MOVFF  2B1,FEA
3DDE:  MOVFF  2B0,FE9
3DE2:  MOVFF  03,93
3DE6:  MOVFF  02,92
3DEA:  MOVFF  01,91
3DEE:  MOVFF  00,90
....................          if(Temperatura>150){ 
3DF2:  MOVLB  2
3DF4:  CLRF   xAE
3DF6:  CLRF   xAD
3DF8:  MOVLW  16
3DFA:  MOVWF  xAC
3DFC:  MOVLW  86
3DFE:  MOVWF  xAB
3E00:  MOVFF  93,2B2
3E04:  MOVFF  92,2B1
3E08:  MOVFF  91,2B0
3E0C:  MOVFF  90,2AF
3E10:  MOVLB  0
3E12:  CALL   2366
3E16:  BNC   3E22
....................             Temperatura=0; 
3E18:  CLRF   x93
3E1A:  CLRF   x92
3E1C:  CLRF   x91
3E1E:  CLRF   x90
....................             break; 
3E20:  BRA    3EF2
....................          } 
....................          Alarma=rxbuf3[8+(i*9)]; 
3E22:  MOVF   x81,W
3E24:  MULLW  09
3E26:  MOVF   FF3,W
3E28:  ADDLW  08
3E2A:  CLRF   03
3E2C:  ADDLW  81
3E2E:  MOVWF  FE9
3E30:  MOVLW  01
3E32:  ADDWFC 03,W
3E34:  MOVWF  FEA
3E36:  MOVFF  FEF,82
....................          if(Alarma>20){ 
3E3A:  MOVF   x82,W
3E3C:  SUBLW  14
3E3E:  BC    3E44
....................             Alarma=0; 
3E40:  CLRF   x82
....................             break; 
3E42:  BRA    3EF2
....................          } 
....................          fprintf(printer,"%02u:%02u %03Lu %03Lu %3.1f %02u\n",Hora,Minuto,PresionCamara,PresionPrecamara,Temperatura,Alarma); 
3E44:  MOVFF  9F,2AB
3E48:  MOVLW  01
3E4A:  MOVLB  2
3E4C:  MOVWF  xAC
3E4E:  MOVLB  0
3E50:  CALL   1E52
3E54:  MOVLW  3A
3E56:  BTFSS  F9E.4
3E58:  BRA    3E56
3E5A:  MOVWF  FAD
3E5C:  MOVFF  A0,2AB
3E60:  MOVLW  01
3E62:  MOVLB  2
3E64:  MOVWF  xAC
3E66:  MOVLB  0
3E68:  CALL   1E52
3E6C:  MOVLW  20
3E6E:  BTFSS  F9E.4
3E70:  BRA    3E6E
3E72:  MOVWF  FAD
3E74:  MOVLW  0A
3E76:  MOVWF  FE9
3E78:  MOVFF  B2,2AE
3E7C:  MOVFF  B1,2AD
3E80:  CALL   2256
3E84:  MOVLW  20
3E86:  BTFSS  F9E.4
3E88:  BRA    3E86
3E8A:  MOVWF  FAD
3E8C:  MOVLW  0A
3E8E:  MOVWF  FE9
3E90:  MOVFF  B4,2AE
3E94:  MOVFF  B3,2AD
3E98:  CALL   2256
3E9C:  MOVLW  20
3E9E:  BTFSS  F9E.4
3EA0:  BRA    3E9E
3EA2:  MOVWF  FAD
3EA4:  MOVLW  02
3EA6:  MOVWF  FE9
3EA8:  MOVFF  93,2AE
3EAC:  MOVFF  92,2AD
3EB0:  MOVFF  91,2AC
3EB4:  MOVFF  90,2AB
3EB8:  MOVLW  01
3EBA:  MOVLB  2
3EBC:  MOVWF  xAF
3EBE:  MOVLB  0
3EC0:  CALL   208A
3EC4:  MOVLW  20
3EC6:  BTFSS  F9E.4
3EC8:  BRA    3EC6
3ECA:  MOVWF  FAD
3ECC:  MOVFF  82,2AB
3ED0:  MOVLW  01
3ED2:  MOVLB  2
3ED4:  MOVWF  xAC
3ED6:  MOVLB  0
3ED8:  CALL   1E52
3EDC:  MOVLW  0A
3EDE:  BTFSS  F9E.4
3EE0:  BRA    3EDE
3EE2:  MOVWF  FAD
....................          delay_us(10); 
3EE4:  MOVLW  27
3EE6:  MOVWF  00
3EE8:  DECFSZ 00,F
3EEA:  BRA    3EE8
3EEC:  BRA    3EEE
....................       } 
3EEE:  INCF   x81,F
3EF0:  BRA    3C70
....................       for(i=0;i<3;i++){ 
3EF2:  CLRF   x81
3EF4:  MOVF   x81,W
3EF6:  SUBLW  02
3EF8:  BTFSS  FD8.0
3EFA:  BRA    4176
....................          Hora=rxbuf4[6+(i*9)]; 
3EFC:  MOVF   x81,W
3EFE:  MULLW  09
3F00:  MOVF   FF3,W
3F02:  ADDLW  06
3F04:  CLRF   03
3F06:  ADDLW  E5
3F08:  MOVWF  FE9
3F0A:  MOVLW  01
3F0C:  ADDWFC 03,W
3F0E:  MOVWF  FEA
3F10:  MOVFF  FEF,9F
....................          if(Hora>25){ 
3F14:  MOVF   x9F,W
3F16:  SUBLW  19
3F18:  BC    3F1E
....................             Hora=0; 
3F1A:  CLRF   x9F
....................             break; 
3F1C:  BRA    4176
....................          }               
....................          Minuto=rxbuf4[7+(i*9)]; 
3F1E:  MOVF   x81,W
3F20:  MULLW  09
3F22:  MOVF   FF3,W
3F24:  ADDLW  07
3F26:  CLRF   03
3F28:  ADDLW  E5
3F2A:  MOVWF  FE9
3F2C:  MOVLW  01
3F2E:  ADDWFC 03,W
3F30:  MOVWF  FEA
3F32:  MOVFF  FEF,A0
....................          if(Minuto>59){ 
3F36:  MOVF   xA0,W
3F38:  SUBLW  3B
3F3A:  BC    3F40
....................             Minuto=0; 
3F3C:  CLRF   xA0
....................             break; 
3F3E:  BRA    4176
....................          } 
....................          PresionCamara=make16(rxbuf4[2+(i*9)],rxbuf4[3+(i*9)]); 
3F40:  MOVF   x81,W
3F42:  MULLW  09
3F44:  MOVF   FF3,W
3F46:  ADDLW  02
3F48:  CLRF   03
3F4A:  ADDLW  E5
3F4C:  MOVWF  FE9
3F4E:  MOVLW  01
3F50:  ADDWFC 03,W
3F52:  MOVWF  FEA
3F54:  MOVFF  FEF,2AB
3F58:  MOVF   x81,W
3F5A:  MULLW  09
3F5C:  MOVF   FF3,W
3F5E:  ADDLW  03
3F60:  CLRF   03
3F62:  ADDLW  E5
3F64:  MOVWF  FE9
3F66:  MOVLW  01
3F68:  ADDWFC 03,W
3F6A:  MOVWF  FEA
3F6C:  MOVFF  FEF,2AC
3F70:  MOVFF  2AB,B2
3F74:  MOVFF  2AC,B1
....................          if(PresionCamara>400){ 
3F78:  MOVF   xB2,W
3F7A:  SUBLW  00
3F7C:  BC    3F8E
3F7E:  XORLW  FF
3F80:  BNZ   3F88
3F82:  MOVF   xB1,W
3F84:  SUBLW  90
3F86:  BC    3F8E
....................             PresionCamara=0; 
3F88:  CLRF   xB2
3F8A:  CLRF   xB1
....................             break; 
3F8C:  BRA    4176
....................          } 
....................          PresionPreCamara=make16(rxbuf4[4+(i*9)],rxbuf4[5+(i*9)]);     
3F8E:  MOVF   x81,W
3F90:  MULLW  09
3F92:  MOVF   FF3,W
3F94:  ADDLW  04
3F96:  CLRF   03
3F98:  ADDLW  E5
3F9A:  MOVWF  FE9
3F9C:  MOVLW  01
3F9E:  ADDWFC 03,W
3FA0:  MOVWF  FEA
3FA2:  MOVFF  FEF,2AB
3FA6:  MOVF   x81,W
3FA8:  MULLW  09
3FAA:  MOVF   FF3,W
3FAC:  ADDLW  05
3FAE:  CLRF   03
3FB0:  ADDLW  E5
3FB2:  MOVWF  FE9
3FB4:  MOVLW  01
3FB6:  ADDWFC 03,W
3FB8:  MOVWF  FEA
3FBA:  MOVFF  FEF,2AC
3FBE:  MOVFF  2AB,B4
3FC2:  MOVFF  2AC,B3
....................          if(PresionPreCamara>400){                      
3FC6:  MOVF   xB4,W
3FC8:  SUBLW  00
3FCA:  BC    3FDC
3FCC:  XORLW  FF
3FCE:  BNZ   3FD6
3FD0:  MOVF   xB3,W
3FD2:  SUBLW  90
3FD4:  BC    3FDC
....................             PresionPreCamara=0; 
3FD6:  CLRF   xB4
3FD8:  CLRF   xB3
....................             break; 
3FDA:  BRA    4176
....................          } 
....................          Temperatura=rxbuf4[(i*9)]+inttofloat(rxbuf4[1+(i*9)]); 
3FDC:  MOVF   x81,W
3FDE:  MULLW  09
3FE0:  MOVF   FF3,W
3FE2:  CLRF   03
3FE4:  ADDLW  E5
3FE6:  MOVWF  FE9
3FE8:  MOVLW  01
3FEA:  ADDWFC 03,W
3FEC:  MOVWF  FEA
3FEE:  MOVFF  FEF,2AB
3FF2:  MOVF   x81,W
3FF4:  MULLW  09
3FF6:  MOVF   FF3,W
3FF8:  ADDLW  01
3FFA:  CLRF   03
3FFC:  ADDLW  E5
3FFE:  MOVWF  FE9
4000:  MOVLW  01
4002:  ADDWFC 03,W
4004:  MOVWF  FEA
4006:  MOVFF  FEF,2AC
400A:  MOVFF  2AC,2AD
400E:  CALL   2322
4012:  MOVFF  00,2AC
4016:  MOVFF  01,2AD
401A:  MOVFF  02,2AE
401E:  MOVFF  03,2AF
4022:  MOVLB  2
4024:  CLRF   xB3
4026:  MOVFF  2AB,2B2
402A:  MOVLB  0
402C:  CALL   15A4
4030:  MOVFF  FEA,2B1
4034:  MOVFF  FE9,2B0
4038:  BCF    FD8.1
403A:  MOVFF  03,2B5
403E:  MOVFF  02,2B4
4042:  MOVFF  01,2B3
4046:  MOVFF  00,2B2
404A:  MOVFF  2AF,2B9
404E:  MOVFF  2AE,2B8
4052:  MOVFF  2AD,2B7
4056:  MOVFF  2AC,2B6
405A:  CALL   1738
405E:  MOVFF  2B1,FEA
4062:  MOVFF  2B0,FE9
4066:  MOVFF  03,93
406A:  MOVFF  02,92
406E:  MOVFF  01,91
4072:  MOVFF  00,90
....................          if(Temperatura>150){ 
4076:  MOVLB  2
4078:  CLRF   xAE
407A:  CLRF   xAD
407C:  MOVLW  16
407E:  MOVWF  xAC
4080:  MOVLW  86
4082:  MOVWF  xAB
4084:  MOVFF  93,2B2
4088:  MOVFF  92,2B1
408C:  MOVFF  91,2B0
4090:  MOVFF  90,2AF
4094:  MOVLB  0
4096:  CALL   2366
409A:  BNC   40A6
....................             Temperatura=0; 
409C:  CLRF   x93
409E:  CLRF   x92
40A0:  CLRF   x91
40A2:  CLRF   x90
....................             break; 
40A4:  BRA    4176
....................          } 
....................          Alarma=rxbuf4[8+(i*9)]; 
40A6:  MOVF   x81,W
40A8:  MULLW  09
40AA:  MOVF   FF3,W
40AC:  ADDLW  08
40AE:  CLRF   03
40B0:  ADDLW  E5
40B2:  MOVWF  FE9
40B4:  MOVLW  01
40B6:  ADDWFC 03,W
40B8:  MOVWF  FEA
40BA:  MOVFF  FEF,82
....................          if(Alarma>20){ 
40BE:  MOVF   x82,W
40C0:  SUBLW  14
40C2:  BC    40C8
....................             Alarma=0; 
40C4:  CLRF   x82
....................             break; 
40C6:  BRA    4176
....................          } 
....................          fprintf(printer,"%02u:%02u %03Lu %03Lu %3.1f %02u\n",Hora,Minuto,PresionCamara,PresionPrecamara,Temperatura,Alarma); 
40C8:  MOVFF  9F,2AB
40CC:  MOVLW  01
40CE:  MOVLB  2
40D0:  MOVWF  xAC
40D2:  MOVLB  0
40D4:  CALL   1E52
40D8:  MOVLW  3A
40DA:  BTFSS  F9E.4
40DC:  BRA    40DA
40DE:  MOVWF  FAD
40E0:  MOVFF  A0,2AB
40E4:  MOVLW  01
40E6:  MOVLB  2
40E8:  MOVWF  xAC
40EA:  MOVLB  0
40EC:  CALL   1E52
40F0:  MOVLW  20
40F2:  BTFSS  F9E.4
40F4:  BRA    40F2
40F6:  MOVWF  FAD
40F8:  MOVLW  0A
40FA:  MOVWF  FE9
40FC:  MOVFF  B2,2AE
4100:  MOVFF  B1,2AD
4104:  CALL   2256
4108:  MOVLW  20
410A:  BTFSS  F9E.4
410C:  BRA    410A
410E:  MOVWF  FAD
4110:  MOVLW  0A
4112:  MOVWF  FE9
4114:  MOVFF  B4,2AE
4118:  MOVFF  B3,2AD
411C:  CALL   2256
4120:  MOVLW  20
4122:  BTFSS  F9E.4
4124:  BRA    4122
4126:  MOVWF  FAD
4128:  MOVLW  02
412A:  MOVWF  FE9
412C:  MOVFF  93,2AE
4130:  MOVFF  92,2AD
4134:  MOVFF  91,2AC
4138:  MOVFF  90,2AB
413C:  MOVLW  01
413E:  MOVLB  2
4140:  MOVWF  xAF
4142:  MOVLB  0
4144:  CALL   208A
4148:  MOVLW  20
414A:  BTFSS  F9E.4
414C:  BRA    414A
414E:  MOVWF  FAD
4150:  MOVFF  82,2AB
4154:  MOVLW  01
4156:  MOVLB  2
4158:  MOVWF  xAC
415A:  MOVLB  0
415C:  CALL   1E52
4160:  MOVLW  0A
4162:  BTFSS  F9E.4
4164:  BRA    4162
4166:  MOVWF  FAD
....................          delay_us(10); 
4168:  MOVLW  27
416A:  MOVWF  00
416C:  DECFSZ 00,F
416E:  BRA    416C
4170:  BRA    4172
....................       }          
4172:  INCF   x81,F
4174:  BRA    3EF4
....................       fprintf(printer,"Impresion Finalizada\n"); 
4176:  MOVLW  76
4178:  MOVWF  FF6
417A:  MOVLW  15
417C:  MOVWF  FF7
417E:  CALL   1BC0
....................       delay_us(10); 
4182:  MOVLW  27
4184:  MOVWF  00
4186:  DECFSZ 00,F
4188:  BRA    4186
418A:  BRA    418C
....................       fprintf(printer,"FECHA: %02u-%02u-%02u \n",Dia,Mes,Year); 
418C:  MOVLW  8C
418E:  MOVWF  FF6
4190:  MOVLW  15
4192:  MOVWF  FF7
4194:  MOVLW  07
4196:  MOVLB  2
4198:  MOVWF  xAD
419A:  MOVLB  0
419C:  CALL   222C
41A0:  MOVFF  9E,2AB
41A4:  MOVLW  01
41A6:  MOVLB  2
41A8:  MOVWF  xAC
41AA:  MOVLB  0
41AC:  CALL   1E52
41B0:  MOVLW  2D
41B2:  BTFSS  F9E.4
41B4:  BRA    41B2
41B6:  MOVWF  FAD
41B8:  MOVFF  9D,2AB
41BC:  MOVLW  01
41BE:  MOVLB  2
41C0:  MOVWF  xAC
41C2:  MOVLB  0
41C4:  CALL   1E52
41C8:  MOVLW  2D
41CA:  BTFSS  F9E.4
41CC:  BRA    41CA
41CE:  MOVWF  FAD
41D0:  MOVFF  9C,2AB
41D4:  MOVLW  01
41D6:  MOVLB  2
41D8:  MOVWF  xAC
41DA:  MOVLB  0
41DC:  CALL   1E52
41E0:  MOVLW  20
41E2:  BTFSS  F9E.4
41E4:  BRA    41E2
41E6:  MOVWF  FAD
41E8:  MOVLW  0A
41EA:  BTFSS  F9E.4
41EC:  BRA    41EA
41EE:  MOVWF  FAD
....................       delay_us(10); 
41F0:  MOVLW  27
41F2:  MOVWF  00
41F4:  DECFSZ 00,F
41F6:  BRA    41F4
41F8:  BRA    41FA
....................       fprintf(printer," \n"); 
41FA:  MOVLW  20
41FC:  BTFSS  F9E.4
41FE:  BRA    41FC
4200:  MOVWF  FAD
4202:  MOVLW  0A
4204:  BTFSS  F9E.4
4206:  BRA    4204
4208:  MOVWF  FAD
....................       delay_us(10); 
420A:  MOVLW  27
420C:  MOVWF  00
420E:  DECFSZ 00,F
4210:  BRA    420E
4212:  BRA    4214
....................       fprintf(printer,"  \n"); 
4214:  MOVLW  20
4216:  BTFSS  F9E.4
4218:  BRA    4216
421A:  MOVWF  FAD
421C:  MOVLW  20
421E:  BTFSS  F9E.4
4220:  BRA    421E
4222:  MOVWF  FAD
4224:  MOVLW  0A
4226:  BTFSS  F9E.4
4228:  BRA    4226
422A:  MOVWF  FAD
....................       delay_us(10); 
422C:  MOVLW  27
422E:  MOVWF  00
4230:  DECFSZ 00,F
4232:  BRA    4230
4234:  BRA    4236
....................       delay_us(10); 
4236:  MOVLW  27
4238:  MOVWF  00
423A:  DECFSZ 00,F
423C:  BRA    423A
423E:  BRA    4240
....................       respuesta=5; 
4240:  MOVLW  05
4242:  MOVWF  x83
....................       rxbuf1[0]=0; 
4244:  CLRF   xB9
....................       rxbuf1[1]=0; 
4246:  CLRF   xBA
....................       Buzzer_on; 
4248:  BSF    F89.5
424A:  BCF    F92.5
....................       delay_ms(200); 
424C:  MOVLW  C8
424E:  MOVLB  2
4250:  MOVWF  xAC
4252:  MOVLB  0
4254:  CALL   1B96
....................       Buzzer_off; 
4258:  BCF    F89.5
425A:  BCF    F92.5
....................       delay_ms(200); 
425C:  MOVLW  C8
425E:  MOVLB  2
4260:  MOVWF  xAC
4262:  MOVLB  0
4264:  CALL   1B96
....................       Buzzer_on; 
4268:  BSF    F89.5
426A:  BCF    F92.5
....................       delay_ms(200); 
426C:  MOVLW  C8
426E:  MOVLB  2
4270:  MOVWF  xAC
4272:  MOVLB  0
4274:  CALL   1B96
....................       Buzzer_off; 
4278:  BCF    F89.5
427A:  BCF    F92.5
....................     }else{ 
427C:  BRA    4282
....................       respuesta=10; 
427E:  MOVLW  0A
4280:  MOVWF  x83
....................     } 
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()){  
4282:  GOTO   23E0
4286:  MOVF   01,F
4288:  BTFSC  FD8.2
428A:  BRA    43F4
....................    if(usb_kbhit(1)){ 
428C:  MOVLW  01
428E:  MOVLB  2
4290:  MOVWF  xAB
4292:  MOVLB  0
4294:  GOTO   23E8
4298:  MOVF   01,F
429A:  BZ    42B4
....................       usb_get_packet(1, rxubuf, Lenbuf); 
429C:  MOVLW  01
429E:  MOVLB  2
42A0:  MOVWF  xAB
42A2:  CLRF   xAD
42A4:  MOVLW  42
42A6:  MOVWF  xAC
42A8:  CLRF   xAF
42AA:  MOVLW  20
42AC:  MOVWF  xAE
42AE:  MOVLB  0
42B0:  GOTO   24EE
....................     } 
....................     
....................     TempUSB=Temperatura; 
42B4:  MOVFF  93,97
42B8:  MOVFF  92,96
42BC:  MOVFF  91,95
42C0:  MOVFF  90,94
....................     recbuf[0]=(int8)(TempUSB); 
42C4:  MOVFF  97,2AE
42C8:  MOVFF  96,2AD
42CC:  MOVFF  95,2AC
42D0:  MOVFF  94,2AB
42D4:  CALL   2538
42D8:  MOVFF  01,22
....................     recbuf[1]=120; 
42DC:  MOVLW  78
42DE:  MOVWF  23
....................     d3=TempUSB-(int8)TempUSB; 
42E0:  MOVFF  97,2AE
42E4:  MOVFF  96,2AD
42E8:  MOVFF  95,2AC
42EC:  MOVFF  94,2AB
42F0:  CALL   2538
42F4:  MOVLB  2
42F6:  CLRF   xB3
42F8:  MOVFF  01,2B2
42FC:  MOVLB  0
42FE:  CALL   15A4
4302:  BSF    FD8.1
4304:  MOVFF  97,2B5
4308:  MOVFF  96,2B4
430C:  MOVFF  95,2B3
4310:  MOVFF  94,2B2
4314:  MOVFF  03,2B9
4318:  MOVFF  02,2B8
431C:  MOVFF  01,2B7
4320:  MOVFF  00,2B6
4324:  CALL   1738
4328:  MOVFF  03,8F
432C:  MOVFF  02,8E
4330:  MOVFF  01,8D
4334:  MOVFF  00,8C
....................     d3=d3*10.0; 
4338:  MOVFF  8F,2BB
433C:  MOVFF  8E,2BA
4340:  MOVFF  8D,2B9
4344:  MOVFF  8C,2B8
4348:  MOVLB  2
434A:  CLRF   xBF
434C:  CLRF   xBE
434E:  MOVLW  20
4350:  MOVWF  xBD
4352:  MOVLW  82
4354:  MOVWF  xBC
4356:  MOVLB  0
4358:  CALL   1ED0
435C:  MOVFF  03,8F
4360:  MOVFF  02,8E
4364:  MOVFF  01,8D
4368:  MOVFF  00,8C
....................     recbuf[2]=(int8)d3; 
436C:  MOVFF  8F,2AE
4370:  MOVFF  8E,2AD
4374:  MOVFF  8D,2AC
4378:  MOVFF  8C,2AB
437C:  CALL   2538
4380:  MOVFF  01,24
....................     recbuf[3]=rxbuf[2]; 
4384:  MOVFF  28C,25
....................     recbuf[4]=rxbuf[3]; 
4388:  MOVFF  28D,26
....................     recbuf[5]=rxbuf[4]; 
438C:  MOVFF  28E,27
....................     recbuf[6]=rxbuf[5]; 
4390:  MOVFF  28F,28
....................     recbuf[7]=(int8)NivelBajo; 
4394:  MOVFF  7D,29
....................     recbuf[8]=(int8)NivelAlto; 
4398:  MOVFF  7E,2A
....................     recbuf[9]=(int8)Tpulso; 
439C:  MOVFF  87,2AE
43A0:  MOVFF  86,2AD
43A4:  MOVFF  85,2AC
43A8:  MOVFF  84,2AB
43AC:  CALL   2538
43B0:  MOVFF  01,2B
....................     recbuf[10]=(int8)Termostato; 
43B4:  MOVFF  7A,2C
....................     recbuf[11]=(int8)error;      
43B8:  MOVFF  8B,2AE
43BC:  MOVFF  8A,2AD
43C0:  MOVFF  89,2AC
43C4:  MOVFF  88,2AB
43C8:  CALL   2538
43CC:  MOVFF  01,2D
....................     recbuf[13]=(int8)Puerta; 
43D0:  MOVFF  7B,2F
....................     recbuf[14]=(int8)Parada; 
43D4:  MOVFF  7C,30
....................                    
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
43D8:  MOVLW  01
43DA:  MOVLB  2
43DC:  MOVWF  xAB
43DE:  CLRF   xAD
43E0:  MOVLW  22
43E2:  MOVWF  xAC
43E4:  CLRF   xAF
43E6:  MOVLW  20
43E8:  MOVWF  xAE
43EA:  MOVLW  02
43EC:  MOVWF  xB0
43EE:  MOVLB  0
43F0:  GOTO   2574
.................... } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    } 
43F4:  GOTO   27F4
.................... } 
43F8:  SLEEP 

Configuration Fuses:
   Word  1: CE24   IESO FCMEN HSPLL PLL5 CPUDIV1 USBDIV
   Word  2: 1B3E   BROWNOUT WDT BORV20 PUT WDT8192 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
