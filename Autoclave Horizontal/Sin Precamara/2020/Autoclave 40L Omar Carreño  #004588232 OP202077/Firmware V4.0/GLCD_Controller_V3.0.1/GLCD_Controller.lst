CCS PCH C Compiler, Version 4.104, 5967               09-jul.-20 08:56

               Filename: D:\Laboratorio\Autoclave\Autoclave Horizontal\Sin Precamara\2020\Autoclave 40L Omar Carreño  #0045881XX OP202077\Firmware V4.0\GLCD_Controller_V3.0.1\GLCD_Controller.lst

               ROM used: 46086 bytes (47%)
                         Largest free fragment is 32768
               RAM used: 977 (29%) at main() level
                         1005 (30%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
00000:  GOTO   5068
*
00008:  GOTO   00BA
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FFB,15
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   0272
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   02CA
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FFB
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
000BA:  MOVWF  17
000BC:  MOVFF  FD8,18
000C0:  MOVFF  FE0,19
000C4:  MOVLB  0
000C6:  MOVFF  FE9,1F
000CA:  MOVFF  FEA,1A
000CE:  MOVFF  FE1,1B
000D2:  MOVFF  FE2,1C
000D6:  MOVFF  FD9,1D
000DA:  MOVFF  FDA,1E
000DE:  MOVFF  FF3,25
000E2:  MOVFF  FF4,26
000E6:  MOVFF  FFA,27
000EA:  MOVFF  FFB,28
000EE:  MOVFF  00,21
000F2:  MOVFF  01,22
000F6:  MOVFF  02,23
000FA:  MOVFF  03,24
000FE:  BTFSS  F9D.5
00100:  GOTO   010A
00104:  BTFSC  F9E.5
00106:  GOTO   0204
0010A:  MOVFF  21,00
0010E:  MOVFF  22,01
00112:  MOVFF  23,02
00116:  MOVFF  24,03
0011A:  MOVFF  1F,FE9
0011E:  MOVFF  1A,FEA
00122:  BSF    1A.7
00124:  MOVFF  1B,FE1
00128:  MOVFF  1C,FE2
0012C:  MOVFF  1D,FD9
00130:  MOVFF  1E,FDA
00134:  MOVFF  25,FF3
00138:  MOVFF  26,FF4
0013C:  MOVFF  27,FFA
00140:  MOVFF  28,FFB
00144:  MOVF   17,W
00146:  MOVFF  19,FE0
0014A:  MOVFF  18,FD8
0014E:  RETFIE 0
.................... //Falta crear menu de ajuste de variables y de norma CFR21 
....................  
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
0179E:  MOVLW  03
017A0:  MOVWF  FEA
017A2:  MOVLW  DB
017A4:  MOVWF  FE9
017A6:  MOVF   FEF,W
017A8:  BZ    17C4
017AA:  MOVLW  06
017AC:  MOVWF  01
017AE:  CLRF   00
017B0:  DECFSZ 00,F
017B2:  BRA    17B0
017B4:  DECFSZ 01,F
017B6:  BRA    17AE
017B8:  MOVLW  7B
017BA:  MOVWF  00
017BC:  DECFSZ 00,F
017BE:  BRA    17BC
017C0:  DECFSZ FEF,F
017C2:  BRA    17AA
017C4:  RETLW  00
.................... #use i2c(Master,slow,sda=PIN_C4,scl=PIN_C3) 
*
03D3E:  MOVLW  08
03D40:  MOVWF  01
03D42:  MOVLW  05
03D44:  MOVWF  00
03D46:  DECFSZ 00,F
03D48:  BRA    3D46
03D4A:  BCF    F8B.3
03D4C:  BCF    F94.3
03D4E:  MOVLW  06
03D50:  MOVWF  00
03D52:  DECFSZ 00,F
03D54:  BRA    3D52
03D56:  MOVLB  3
03D58:  RLCF   xDF,F
03D5A:  BCF    F8B.4
03D5C:  BTFSC  FD8.0
03D5E:  BSF    F94.4
03D60:  BTFSS  FD8.0
03D62:  BCF    F94.4
03D64:  BSF    F94.3
03D66:  BTFSS  F82.3
03D68:  BRA    3D66
03D6A:  DECFSZ 01,F
03D6C:  BRA    3D70
03D6E:  BRA    3D74
03D70:  MOVLB  0
03D72:  BRA    3D42
03D74:  MOVLW  05
03D76:  MOVWF  00
03D78:  DECFSZ 00,F
03D7A:  BRA    3D78
03D7C:  BCF    F8B.3
03D7E:  BCF    F94.3
03D80:  NOP   
03D82:  BSF    F94.4
03D84:  MOVLW  06
03D86:  MOVWF  00
03D88:  DECFSZ 00,F
03D8A:  BRA    3D88
03D8C:  MOVLW  06
03D8E:  MOVWF  00
03D90:  DECFSZ 00,F
03D92:  BRA    3D90
03D94:  BSF    F94.3
03D96:  BTFSS  F82.3
03D98:  BRA    3D96
03D9A:  CLRF   01
03D9C:  MOVLW  06
03D9E:  MOVWF  00
03DA0:  DECFSZ 00,F
03DA2:  BRA    3DA0
03DA4:  BTFSC  F82.4
03DA6:  BSF    01.0
03DA8:  BCF    F8B.3
03DAA:  BCF    F94.3
03DAC:  BCF    F8B.4
03DAE:  BCF    F94.4
03DB0:  MOVLB  0
03DB2:  RETLW  00
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, bits=8, parity=N) 
*
034B4:  BTFSS  F9E.4
034B6:  BRA    34B4
034B8:  MOVWF  FAD
034BA:  RETLW  00
.................... //#include "HDM64GS12.c" 
.................... //#include "GRAPHICS.c" 
.................... ///#include "imagen.h" 
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <DS1302.c> 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... //#ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_D1 
.................... #define RTC_IO   PIN_D2 
.................... #define RTC_RST  PIN_D3 
....................  
.................... //#endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
028BE:  MOVLB  3
028C0:  CLRF   xD0
028C2:  MOVF   xD0,W
028C4:  SUBLW  07
028C6:  BNC   28E2
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
028C8:  BCF    FD8.0
028CA:  RRCF   xCF,F
028CC:  BC    28D2
028CE:  BCF    F8C.2
028D0:  BRA    28D4
028D2:  BSF    F8C.2
028D4:  BCF    F95.2
....................       output_high(RTC_SCLK); 
028D6:  BCF    F95.1
028D8:  BSF    F8C.1
....................       output_low(RTC_SCLK); 
028DA:  BCF    F95.1
028DC:  BCF    F8C.1
....................    } 
028DE:  INCF   xD0,F
028E0:  BRA    28C2
.................... } 
028E2:  MOVLB  0
028E4:  RETLW  00
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
028E6:  BCF    F95.3
028E8:  BSF    F8C.3
....................    write_ds1302_byte(cmd); 
028EA:  MOVFF  3CD,3CF
028EE:  RCALL  28BE
....................    write_ds1302_byte(data); 
028F0:  MOVFF  3CE,3CF
028F4:  RCALL  28BE
....................    output_low(RTC_RST); 
028F6:  BCF    F95.3
028F8:  BCF    F8C.3
.................... } 
028FA:  RETLW  00
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
028FC:  BCF    F95.3
028FE:  BSF    F8C.3
....................    write_ds1302_byte(cmd); 
02900:  MOVFF  3CA,3CF
02904:  RCALL  28BE
....................     
....................    input(RTC_IO); 
02906:  BSF    F95.2
....................    delay_us(10); 
02908:  MOVLW  10
0290A:  MOVWF  00
0290C:  DECFSZ 00,F
0290E:  BRA    290C
02910:  NOP   
....................           
....................    for(i=0;i<=7;++i) { 
02912:  MOVLB  3
02914:  CLRF   xCB
02916:  MOVF   xCB,W
02918:  SUBLW  07
0291A:  BNC   2946
....................       shift_right(&data,1,input(RTC_IO)); 
0291C:  BSF    F95.2
0291E:  BTFSC  F83.2
02920:  BRA    2926
02922:  BCF    FD8.0
02924:  BRA    2928
02926:  BSF    FD8.0
02928:  RRCF   xCC,F
....................       output_high(RTC_SCLK); 
0292A:  BCF    F95.1
0292C:  BSF    F8C.1
....................       delay_us(20); 
0292E:  MOVLW  21
02930:  MOVWF  00
02932:  DECFSZ 00,F
02934:  BRA    2932
....................       output_low(RTC_SCLK); 
02936:  BCF    F95.1
02938:  BCF    F8C.1
....................       delay_us(20); 
0293A:  MOVLW  21
0293C:  MOVWF  00
0293E:  DECFSZ 00,F
02940:  BRA    293E
....................    } 
02942:  INCF   xCB,F
02944:  BRA    2916
....................    output_low(RTC_RST); 
02946:  BCF    F95.3
02948:  BCF    F8C.3
....................  
....................    return(data); 
0294A:  MOVFF  3CC,01
.................... } 
0294E:  MOVLB  0
02950:  RETLW  00
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
02952:  BCF    F95.3
02954:  BCF    F8C.3
....................    delay_us(20); 
02956:  MOVLW  21
02958:  MOVWF  00
0295A:  DECFSZ 00,F
0295C:  BRA    295A
....................    output_low(RTC_SCLK); 
0295E:  BCF    F95.1
02960:  BCF    F8C.1
....................    write_ds1302(0x8e,0); 
02962:  MOVLW  8E
02964:  MOVLB  3
02966:  MOVWF  xCD
02968:  CLRF   xCE
0296A:  MOVLB  0
0296C:  RCALL  28E6
....................    write_ds1302(0x90,0xa4); 
0296E:  MOVLW  90
02970:  MOVLB  3
02972:  MOVWF  xCD
02974:  MOVLW  A4
02976:  MOVWF  xCE
02978:  MOVLB  0
0297A:  RCALL  28E6
....................    x=read_ds1302(0x81); 
0297C:  MOVLW  81
0297E:  MOVLB  3
02980:  MOVWF  xCA
02982:  MOVLB  0
02984:  RCALL  28FC
02986:  MOVFF  01,3C6
....................    if((x & 0x80)!=0) 
0298A:  MOVLB  3
0298C:  MOVF   xC6,W
0298E:  ANDLW  80
02990:  BZ    299E
....................      write_ds1302(0x80,0); 
02992:  MOVLW  80
02994:  MOVWF  xCD
02996:  CLRF   xCE
02998:  MOVLB  0
0299A:  RCALL  28E6
0299C:  MOVLB  3
.................... } 
0299E:  MOVLB  0
029A0:  GOTO   581A (RETURN)
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
04864:  MOVFF  3CC,3D0
04868:  MOVLW  0A
0486A:  MOVLB  3
0486C:  MOVWF  xD1
0486E:  MOVLB  0
04870:  RCALL  439A
04872:  MOVFF  01,3CD
....................    nibl=data-(nibh*10); 
04876:  MOVLB  3
04878:  MOVF   xCD,W
0487A:  MULLW  0A
0487C:  MOVF   FF3,W
0487E:  SUBWF  xCC,W
04880:  MOVWF  xCE
....................  
....................    return((nibh<<4)|nibl); 
04882:  SWAPF  xCD,W
04884:  MOVWF  00
04886:  MOVLW  F0
04888:  ANDWF  00,F
0488A:  MOVF   00,W
0488C:  IORWF  xCE,W
0488E:  MOVWF  01
.................... } 
04890:  MOVLB  0
04892:  RETLW  00
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
0423A:  MOVFF  3CB,3CC
....................    data=(i>>4)*10; 
0423E:  MOVLB  3
04240:  SWAPF  xCC,W
04242:  MOVWF  00
04244:  MOVLW  0F
04246:  ANDWF  00,F
04248:  MOVF   00,W
0424A:  MULLW  0A
0424C:  MOVFF  FF3,3CB
....................    data=data+(i<<4>>4); 
04250:  SWAPF  xCC,W
04252:  MOVWF  00
04254:  MOVLW  F0
04256:  ANDWF  00,F
04258:  MOVF   00,W
0425A:  SWAPF  00,F
0425C:  MOVLW  0F
0425E:  ANDWF  00,F
04260:  MOVF   00,W
04262:  ADDWF  xCB,F
....................  
....................    return data; 
04264:  MOVFF  3CB,01
.................... } 
04268:  MOVLB  0
0426A:  RETLW  00
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
04894:  MOVFF  3C6,3CC
04898:  RCALL  4864
0489A:  MOVFF  01,3CC
0489E:  MOVLW  86
048A0:  MOVLB  3
048A2:  MOVWF  xCD
048A4:  MOVFF  01,3CE
048A8:  MOVLB  0
048AA:  CALL   28E6
....................    write_ds1302(0x88,get_bcd(mth)); 
048AE:  MOVFF  3C7,3CC
048B2:  RCALL  4864
048B4:  MOVFF  01,3CC
048B8:  MOVLW  88
048BA:  MOVLB  3
048BC:  MOVWF  xCD
048BE:  MOVFF  01,3CE
048C2:  MOVLB  0
048C4:  CALL   28E6
....................    write_ds1302(0x8c,get_bcd(year)); 
048C8:  MOVFF  3C8,3CC
048CC:  RCALL  4864
048CE:  MOVFF  01,3CC
048D2:  MOVLW  8C
048D4:  MOVLB  3
048D6:  MOVWF  xCD
048D8:  MOVFF  01,3CE
048DC:  MOVLB  0
048DE:  CALL   28E6
....................    write_ds1302(0x8a,get_bcd(dow)); 
048E2:  MOVFF  3C9,3CC
048E6:  RCALL  4864
048E8:  MOVFF  01,3CC
048EC:  MOVLW  8A
048EE:  MOVLB  3
048F0:  MOVWF  xCD
048F2:  MOVFF  01,3CE
048F6:  MOVLB  0
048F8:  CALL   28E6
....................    write_ds1302(0x84,get_bcd(hr)); 
048FC:  MOVFF  3CA,3CC
04900:  RCALL  4864
04902:  MOVFF  01,3CC
04906:  MOVLW  84
04908:  MOVLB  3
0490A:  MOVWF  xCD
0490C:  MOVFF  01,3CE
04910:  MOVLB  0
04912:  CALL   28E6
....................    write_ds1302(0x82,get_bcd(min)); 
04916:  MOVFF  3CB,3CC
0491A:  RCALL  4864
0491C:  MOVFF  01,3CC
04920:  MOVLW  82
04922:  MOVLB  3
04924:  MOVWF  xCD
04926:  MOVFF  01,3CE
0492A:  MOVLB  0
0492C:  CALL   28E6
....................    write_ds1302(0x80,get_bcd(0)); 
04930:  MOVLB  3
04932:  CLRF   xCC
04934:  MOVLB  0
04936:  RCALL  4864
04938:  MOVFF  01,3CC
0493C:  MOVLW  80
0493E:  MOVLB  3
04940:  MOVWF  xCD
04942:  MOVFF  01,3CE
04946:  MOVLB  0
04948:  CALL   28E6
.................... } 
0494C:  GOTO   8654 (RETURN)
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
05A3E:  MOVLW  87
05A40:  MOVLB  3
05A42:  MOVWF  xCA
05A44:  MOVLB  0
05A46:  CALL   28FC
05A4A:  MOVFF  01,3C6
05A4E:  MOVFF  01,3CB
05A52:  CALL   423A
05A56:  MOVFF  01,36E
....................    mth = rm_bcd(read_ds1302(0x89)); 
05A5A:  MOVLW  89
05A5C:  MOVLB  3
05A5E:  MOVWF  xCA
05A60:  MOVLB  0
05A62:  CALL   28FC
05A66:  MOVFF  01,3C6
05A6A:  MOVFF  01,3CB
05A6E:  CALL   423A
05A72:  MOVFF  01,36D
....................    year = rm_bcd(read_ds1302(0x8d)); 
05A76:  MOVLW  8D
05A78:  MOVLB  3
05A7A:  MOVWF  xCA
05A7C:  MOVLB  0
05A7E:  CALL   28FC
05A82:  MOVFF  01,3C6
05A86:  MOVFF  01,3CB
05A8A:  CALL   423A
05A8E:  MOVFF  01,36C
....................    dow = rm_bcd(read_ds1302(0x8b)); 
05A92:  MOVLW  8B
05A94:  MOVLB  3
05A96:  MOVWF  xCA
05A98:  MOVLB  0
05A9A:  CALL   28FC
05A9E:  MOVFF  01,3C6
05AA2:  MOVFF  01,3CB
05AA6:  CALL   423A
05AAA:  MOVFF  01,372
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
05AAE:  MOVLW  85
05AB0:  MOVLB  3
05AB2:  MOVWF  xCA
05AB4:  MOVLB  0
05AB6:  CALL   28FC
05ABA:  MOVFF  01,3C6
05ABE:  MOVFF  01,3CB
05AC2:  CALL   423A
05AC6:  MOVFF  01,36F
....................    min = rm_bcd(read_ds1302(0x83)); 
05ACA:  MOVLW  83
05ACC:  MOVLB  3
05ACE:  MOVWF  xCA
05AD0:  MOVLB  0
05AD2:  CALL   28FC
05AD6:  MOVFF  01,3C6
05ADA:  MOVFF  01,3CB
05ADE:  CALL   423A
05AE2:  MOVFF  01,370
....................    sec = rm_bcd(read_ds1302(0x81)); 
05AE6:  MOVLW  81
05AE8:  MOVLB  3
05AEA:  MOVWF  xCA
05AEC:  MOVLB  0
05AEE:  CALL   28FC
05AF2:  MOVFF  01,3C6
05AF6:  MOVFF  01,3CB
05AFA:  CALL   423A
05AFE:  MOVFF  01,371
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
....................  
.................... #define   UP            !input(PIN_B0) 
.................... #define   DOWN          !input(PIN_B1) 
.................... #define   RIGHT         !input(PIN_B2) 
.................... #define   LEFT          !input(PIN_B3) 
....................  
.................... #define   DOOR          !input(PIN_B6) 
.................... #define   STOP          !input(PIN_B7) 
.................... #define   TERM          !input(PIN_B5) 
....................  
.................... #define   LOW           input(PIN_C1) 
.................... #define   HIG           input(PIN_C0) 
....................  
.................... #define   SSR_on           output_bit(PIN_C2,0) 
.................... #define   SSR_off          output_bit(PIN_C2,1) 
....................  
.................... #define   Buzzer_on        output_bit(PIN_D0,1) 
.................... #define   Buzzer_off       output_bit(PIN_D0,0) 
....................  
.................... #define   Desfogue_on      output_bit(PIN_D4,1) 
.................... #define   Desfogue_off     output_bit(PIN_D4,0) 
....................  
.................... #define   Agua_on          output_bit(PIN_D5,1) 
.................... #define   Agua_off         output_bit(PIN_D5,0) 
....................  
.................... #define   Bomba_on         output_bit(PIN_D6,1) 
.................... #define   Bomba_off        output_bit(PIN_D6,0) 
....................  
.................... #define OFF 0 
.................... #define ON  1 
.................... #define RX_BUFFER_SIZE  10 
.................... char Rx_Buffer[RX_BUFFER_SIZE+1]; 
.................... char Rx_Buffer2[RX_BUFFER_SIZE+1]; 
.................... char RX_Wr_Index=0; 
.................... char RX_Rd_Index=0; 
.................... char RX_Counter=0; 
....................  
.................... #define TX_BUFFER_SIZE  24 
.................... char Tx_Buffer[TX_BUFFER_SIZE+1]; 
.................... char TX_Wr_Index=0; 
.................... char TX_Counter=0; 
.................... //int1 RX_Buffer_Overflow=0; 
....................  
.................... //Comunicacion//------------------------ 
.................... byte SlaveA0Tx[0X20]; 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
.................... byte posicion=0;        //Contendrá la posición en el buffer de memoria del esclavo donde se almacenará o de donde se recuperará el dato 
....................  
.................... /* Tabla de Modulos, Primera Fila Año Regular y el siguiente año Bisiesto 
.................... E   F   M   A   M   J   J   A   S   O   N   D 
.................... 0   3   3   6   1   4   6   2   5   0   3   5 
.................... 0   3   4   0   2   5   0   3   6   1   4   6 
.................... */ 
.................... int8 Regular[12]={0,3,3,6,1,4,6,2,5,0,3,5}; 
.................... int8 Bisiesto[12]={0,3,4,0,2,5,0,3,6,1,4,6}; 
....................  
.................... //Alarmas//--------------------- 
.................... short AlarmaTiempoProlongado=OFF,AlarmaSobreTemperatura=OFF,AlarmaLlenado=OFF,AlarmaTermostato=OFF,AlarmaPuerta=OFF,AlarmaEmergencia=OFF,AlarmaCiclo=OFF; 
....................  
.................... //Banderas//-------------------- 
.................... short IniciaLlenado=OFF,CalderinLleno=OFF,IniciaCiclo=OFF,Esterilizando=OFF,Secando=OFF,SensadoNivel=OFF,Desfogando=OFF,DesfogueSuave=OFF; 
.................... short EstadoDesfogue=OFF,EstadoAgua=OFF,EstadoSSR=OFF,PruebaEstados=OFF,Ciclo=OFF,flagCalentando=OFF,flagEsterilizando=OFF,EstadoAire=OFF; 
.................... short flagDesfogando=OFF,Op=OFF,Op2=OFF,Minutos=OFF,Segundos=OFF,GuardaEEPROM=OFF,EstadoPaso=OFF,EstadoBuzzer=OFF,flagAlarma=OFF; 
.................... short flagBuzzer=OFF,flagSilencio=OFF,Finalizo=OFF,AlarmaPresion=OFF,Libre=OFF,purga=OFF,entro=OFF,Aire=OFF; 
....................  
.................... //Tiempos//--------------------- 
.................... int16 TiempoCiclo=0,TiempoLlenado=0,TiempoSensadoNivel=0,Tp=0,Tc=0; 
.................... signed int  Testerilizacion[5]={0,0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[5]={0,0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecado[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Tsecadop[4]={0,0,0,0};   // Tiempo transcurrido 
....................  
.................... //Control//------------------------ 
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresionp[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float Gain=141.6,RPT100=0.5,Temporal=0.0; 
.................... float R1=100,R10=6790; 
.................... float X[2]={0.0,0.0}; 
.................... float promediopresion=0.0,Aumento=0.0,promediopresionp=0.0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,MediaMovil=20,TTrampa=0,PantallaPrincipal=0,TipoClave=0,Modulo=0,Digito=0; 
.................... float V0=0.0,Pt,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,Ganancia=25.0,Ganancia2=20.0,desvio=1.0,tmp2=0.0; 
.................... float V1=0.0,Presion=0.0,V2=0.0,Presionp=0.0; 
.................... float Temperatura=0.0,K=0.0012858; 
.................... float a=0.0011,b=2.3302,c=-244.0723; 
.................... int8 Integral=0,Derivativo=0,CicloLibre=0; 
....................  
.................... //Varios//-------------------------------- 
.................... short desfoguelento=0,Lectura=0,Grafica=0; 
.................... short disp_Stop=0,flagTC=0,flagImprime=0,flagImprimir=0; 
.................... int8 Control=0,tiemporecta=0,Controlando=0,ActivaImpresion=1,timpresion=2,CalculoImpresion=0,Inicio=1,Dato_Exitoso=0,Dato2=0,z=0; 
.................... int8 Menu=0, MenuAnt=0,MenuAntt=240,i=0,CiclosL=0,CiclosH=0,CicloSeleccionado=0; 
.................... int8 Setpoint=0,Opcion=1,Opcion2=1,tiempo_esterilizacion=0,tiempo_secado=0,tiempoImpresion=0; 
.................... int16 tiempos=0,tiempos2=0,tiempos3=0,tiempoctrl=0,Nivel=0,tinicio=0,PresionCamara=0,PresionPreCamara=0,Ciclos=0,NivelSeleccionado=0; 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... int8 r=0,t=0,r22=0,t2=0,TiempoControl=0; 
.................... int8 y=0,ConteoBuzzer=0; 
.................... int16 t_exhaust=0,tbuzzer=0,tsilencio=0,tiempoAgua=0; 
.................... int8 Year=18,Mes=9,Dia=13,Hora=0,Minuto=0,Segundo=0,dow=0; 
.................... int8 YearTx=0,MesTx=0,DiaTx=0,HoraTx=0,MinutoTx=0,SegundoTx=0,dowTx=0,SetTime=0,Imprime=0; 
.................... signed int8 G1=0,G2=0,sg1=0,sg2=0; 
.................... int8 iconoGrande[15]={22,60,16,59,23,28,20,46}; 
.................... int8 iconoPeque[15]={18,57,36,58,32,38,19,17}; 
.................... char const texto[9][20]={"NO ENVUELTO","ENVUELTO","DEL. NO ENVUELTO","DEL. ENVUELTO","LIBRE","TEST","HORA Y FECHA","CLAVE"}; 
....................  
.................... typedef struct{ 
....................    int8 Temperatura; 
....................    int8 MinutoestH; 
....................    int8 MinutoestL; 
....................    int8 Segundoest; 
....................    int8 Minutosec; 
....................    int8 Segundosec; 
....................    int8 PulsosVacio; 
....................    int8 NivelVacio; 
....................    int8 NivelDesfogue; 
....................    int8 Minutoest; 
.................... }Personalizado; 
....................  
.................... Personalizado CiclosPersonalizados[4]; 
....................  
.................... #include "Funciones.h" 
.................... void BorraBuffer(void){ 
.................... RX_Buffer[0]=0; 
*
0433C:  CLRF   30
.................... RX_Buffer[1]=0; 
0433E:  CLRF   31
.................... RX_Buffer[2]=0; 
04340:  CLRF   32
.................... RX_Buffer[3]=0; 
04342:  CLRF   33
.................... RX_Buffer[4]=0; 
04344:  CLRF   34
.................... RX_Buffer[5]=0; 
04346:  CLRF   35
.................... RX_Buffer[6]=0; 
04348:  CLRF   36
.................... RX_Buffer[7]=0; 
0434A:  CLRF   37
.................... RX_Buffer[8]=0; 
0434C:  CLRF   38
.................... RX_Buffer[9]=0; 
0434E:  CLRF   39
....................  
.................... RX_Buffer2[0]=0; 
04350:  CLRF   3B
.................... RX_Buffer2[1]=0; 
04352:  CLRF   3C
.................... RX_Buffer2[2]=0; 
04354:  CLRF   3D
.................... RX_Buffer2[3]=0; 
04356:  CLRF   3E
.................... RX_Buffer2[4]=0; 
04358:  CLRF   3F
.................... RX_Buffer2[5]=0; 
0435A:  CLRF   40
.................... RX_Buffer2[6]=0; 
0435C:  CLRF   41
.................... RX_Buffer2[7]=0; 
0435E:  CLRF   42
.................... RX_Buffer2[8]=0; 
04360:  CLRF   43
.................... RX_Buffer2[9]=0; 
04362:  CLRF   44
....................  
.................... } 
04364:  GOTO   5B6A (RETURN)
....................  
.................... char bgetc(void){ 
....................    char c; 
....................    while(RX_Counter==0) 
....................       ; 
....................    c=Rx_Buffer2[RX_Rd_Index]; 
....................    if(++RX_Rd_Index>RX_BUFFER_SIZE) 
....................       RX_Rd_Index=0; 
....................    if(RX_Counter) 
....................       RX_Counter--; 
....................    return c; 
.................... } 
....................  
.................... void bputc(char c){ 
....................    char restart=0; 
....................    while(TX_Counter> (TX_BUFFER_SIZE-1)) 
....................       ; 
....................    if(TX_Counter==0) 
....................       restart=1; 
....................    TX_Buffer[TX_Wr_Index++]=c; 
....................    if(TX_Wr_Index>TX_BUFFER_SIZE) 
....................       TX_Wr_Index=0; 
....................     
....................    TX_Counter++; 
....................     
....................    if(restart==1) 
....................       enable_interrupts(int_tbe); 
.................... } 
....................  
.................... void SendDataDisplay(void){ 
.................... delay_us(10); 
*
034BC:  MOVLW  10
034BE:  MOVWF  00
034C0:  DECFSZ 00,F
034C2:  BRA    34C0
034C4:  NOP   
.................... putc(0xFF); 
034C6:  MOVLW  FF
034C8:  RCALL  34B4
.................... delay_us(10); 
034CA:  MOVLW  10
034CC:  MOVWF  00
034CE:  DECFSZ 00,F
034D0:  BRA    34CE
034D2:  NOP   
.................... putc(0xFF); 
034D4:  MOVLW  FF
034D6:  RCALL  34B4
.................... delay_us(10); 
034D8:  MOVLW  10
034DA:  MOVWF  00
034DC:  DECFSZ 00,F
034DE:  BRA    34DC
034E0:  NOP   
.................... putc(0xFF); 
034E2:  MOVLW  FF
034E4:  RCALL  34B4
.................... delay_us(10); 
034E6:  MOVLW  10
034E8:  MOVWF  00
034EA:  DECFSZ 00,F
034EC:  BRA    34EA
034EE:  NOP   
.................... } 
034F0:  RETLW  00
....................  
.................... short esBisiesto(int8 year) { 
....................      return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0); 
*
04812:  MOVLB  3
04814:  MOVF   xC6,W
04816:  ANDLW  03
04818:  BNZ   482C
0481A:  MOVFF  3C6,3D0
0481E:  MOVLW  64
04820:  MOVWF  xD1
04822:  MOVLB  0
04824:  RCALL  439A
04826:  MOVF   00,F
04828:  BNZ   485A
0482A:  MOVLB  3
0482C:  CLRF   xC8
0482E:  MOVFF  3C6,3C7
04832:  MOVLW  01
04834:  MOVWF  xCA
04836:  MOVLW  90
04838:  MOVWF  xC9
0483A:  MOVLB  0
0483C:  BRA    47CA
0483E:  MOVFF  00,3C7
04842:  MOVLB  3
04844:  MOVFF  03,3C8
04848:  MOVF   xC7,F
0484A:  BNZ   4856
0484C:  MOVF   xC8,F
0484E:  BTFSS  FD8.2
04850:  BRA    4856
04852:  MOVLB  0
04854:  BRA    485A
04856:  MOVLW  00
04858:  BRA    485E
0485A:  MOVLW  01
0485C:  MOVLB  3
0485E:  MOVWF  01
.................... } 
04860:  MOVLB  0
04862:  RETLW  00
....................  
.................... void LimitaDia(){ 
....................    if(MesTx>12) 
*
04950:  MOVLB  3
04952:  MOVF   x74,W
04954:  SUBLW  0C
04956:  BC    495C
....................       MesTx=10; 
04958:  MOVLW  0A
0495A:  MOVWF  x74
....................    if(DiaTx>31) 
0495C:  MOVF   x75,W
0495E:  SUBLW  1F
04960:  BC    4966
....................       DiaTx=16; 
04962:  MOVLW  10
04964:  MOVWF  x75
....................    if(YearTx>99) 
04966:  MOVF   x73,W
04968:  SUBLW  63
0496A:  BC    4970
....................       YearTx=18;    
0496C:  MOVLW  12
0496E:  MOVWF  x73
....................    if(HoraTx>24) 
04970:  MOVF   x76,W
04972:  SUBLW  18
04974:  BC    497A
....................       HoraTx=11;       
04976:  MOVLW  0B
04978:  MOVWF  x76
....................    if(MinutoTx>59) 
0497A:  MOVF   x77,W
0497C:  SUBLW  3B
0497E:  BC    4984
....................       MinutoTx=30;       
04980:  MOVLW  1E
04982:  MOVWF  x77
....................     
....................       if(MesTx==2){ 
04984:  MOVF   x74,W
04986:  SUBLW  02
04988:  BNZ   49B4
....................          if(esBisiesto(YearTx)){ 
0498A:  MOVFF  373,3C6
0498E:  MOVLB  0
04990:  RCALL  4812
04992:  MOVF   01,F
04994:  BZ    49A6
....................             if(DiaTx>29){ 
04996:  MOVLB  3
04998:  MOVF   x75,W
0499A:  SUBLW  1D
0499C:  BC    49A2
....................                DiaTx=29; 
0499E:  MOVLW  1D
049A0:  MOVWF  x75
....................                //glcd_fillScreen(OFF); 
....................             } 
....................          }else{ 
049A2:  BRA    49B2
049A4:  MOVLB  0
....................             if(DiaTx>28){ 
049A6:  MOVLB  3
049A8:  MOVF   x75,W
049AA:  SUBLW  1C
049AC:  BC    49B2
....................                DiaTx=28; 
049AE:  MOVLW  1C
049B0:  MOVWF  x75
....................                //glcd_fillScreen(OFF); 
....................             } 
....................          } 
....................       }else{ 
049B2:  BRA    49DE
....................          if(MesTx<=7){ 
049B4:  MOVF   x74,W
049B6:  SUBLW  07
049B8:  BNC   49CC
....................             if(MesTx % 2 ==0){ 
049BA:  MOVF   x74,W
049BC:  ANDLW  01
049BE:  BNZ   49CA
....................                if(DiaTx>30){ 
049C0:  MOVF   x75,W
049C2:  SUBLW  1E
049C4:  BC    49CA
....................                   DiaTx=30;  
049C6:  MOVLW  1E
049C8:  MOVWF  x75
....................                   //glcd_fillScreen(OFF); 
....................                } 
....................             } 
....................          }else{ 
049CA:  BRA    49DE
....................             if(MesTx % 2 ==1){ 
049CC:  MOVF   x74,W
049CE:  ANDLW  01
049D0:  SUBLW  01
049D2:  BNZ   49DE
....................                if(DiaTx>30){ 
049D4:  MOVF   x75,W
049D6:  SUBLW  1E
049D8:  BC    49DE
....................                   DiaTx=30;  
049DA:  MOVLW  1E
049DC:  MOVWF  x75
....................                   //glcd_fillScreen(OFF); 
....................                } 
....................             } 
....................          } 
....................       } 
.................... } 
049DE:  MOVLB  0
049E0:  GOTO   88F0 (RETURN)
....................  
.................... void ActualizaRecta(){ 
....................    X[y]=Temperature; 
*
04A12:  MOVLB  3
04A14:  MOVF   x62,W
04A16:  MULLW  04
04A18:  MOVF   FF3,W
04A1A:  CLRF   03
04A1C:  ADDLW  B4
04A1E:  MOVWF  FE9
04A20:  MOVLW  02
04A22:  ADDWFC 03,W
04A24:  MOVWF  FEA
04A26:  MOVFF  2EA,FEF
04A2A:  MOVFF  2EB,FEC
04A2E:  MOVFF  2EC,FEC
04A32:  MOVFF  2ED,FEC
....................    y++; 
04A36:  INCF   x62,F
....................    if(y>=2) 
04A38:  MOVF   x62,W
04A3A:  SUBLW  01
04A3C:  BC    4A7A
....................    { 
....................       y=0; 
04A3E:  CLRF   x62
....................       Aumento=X[1]-X[0]; 
04A40:  BSF    FD8.1
04A42:  MOVFF  2BB,3DE
04A46:  MOVFF  2BA,3DD
04A4A:  MOVFF  2B9,3DC
04A4E:  MOVFF  2B8,3DB
04A52:  MOVFF  2B7,3E2
04A56:  MOVFF  2B6,3E1
04A5A:  MOVFF  2B5,3E0
04A5E:  MOVFF  2B4,3DF
04A62:  MOVLB  0
04A64:  CALL   195A
04A68:  MOVFF  03,2C3
04A6C:  MOVFF  02,2C2
04A70:  MOVFF  01,2C1
04A74:  MOVFF  00,2C0
04A78:  MOVLB  3
....................    } 
.................... } 
04A7A:  MOVLB  0
04A7C:  GOTO   4AF8 (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
03510:  MOVLB  3
03512:  RLCF   xC7,W
03514:  MOVWF  00
03516:  RLCF   00,F
03518:  MOVLW  FC
0351A:  ANDWF  00,F
0351C:  MOVFF  00,01
03520:  MOVF   FC2,W
03522:  ANDLW  C3
03524:  IORWF  00,W
03526:  MOVWF  FC2
03528:  MOVLW  01
0352A:  MOVWF  xDB
0352C:  MOVLB  0
0352E:  CALL   179E
03532:  BSF    FC2.1
03534:  BTFSC  FC2.1
03536:  BRA    3534
03538:  MOVFF  FC4,3DC
0353C:  MOVFF  FC3,3DB
03540:  MOVLB  0
03542:  CALL   17C6
03546:  MOVFF  03,3CB
0354A:  MOVFF  02,3CA
0354E:  MOVFF  01,3C9
03552:  MOVFF  00,3C8
03556:  MOVFF  3C8,00
0355A:  MOVFF  3C9,01
0355E:  MOVFF  3CA,02
03562:  MOVFF  3CB,03
.................... } 
03566:  RETLW  00
.................... float LeerPT100(int media) 
.................... { 
....................    Prom=0.0; 
*
03680:  MOVLB  2
03682:  CLRF   xE9
03684:  CLRF   xE8
03686:  CLRF   xE7
03688:  CLRF   xE6
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%) 
0368A:  MOVLB  3
0368C:  CLRF   xC7
0368E:  MOVLB  0
03690:  RCALL  3510
03692:  MOVFF  03,2D5
03696:  MOVFF  02,2D4
0369A:  MOVFF  01,2D3
0369E:  MOVFF  00,2D2
....................    V0 = V0/106.1; // Se elimina la ganancia 
036A2:  MOVFF  2D5,3CE
036A6:  MOVFF  2D4,3CD
036AA:  MOVFF  2D3,3CC
036AE:  MOVFF  2D2,3CB
036B2:  MOVLW  33
036B4:  MOVLB  3
036B6:  MOVWF  xD2
036B8:  MOVWF  xD1
036BA:  MOVLW  54
036BC:  MOVWF  xD0
036BE:  MOVLW  85
036C0:  MOVWF  xCF
036C2:  MOVLB  0
036C4:  CALL   17FC
036C8:  MOVFF  03,2D5
036CC:  MOVFF  02,2D4
036D0:  MOVFF  01,2D3
036D4:  MOVFF  00,2D2
....................    //V0 += 14.82; 
....................    V0 += 14.91; 
036D8:  BCF    FD8.1
036DA:  MOVFF  2D5,3DE
036DE:  MOVFF  2D4,3DD
036E2:  MOVFF  2D3,3DC
036E6:  MOVFF  2D2,3DB
036EA:  MOVLW  5C
036EC:  MOVLB  3
036EE:  MOVWF  xE2
036F0:  MOVLW  8F
036F2:  MOVWF  xE1
036F4:  MOVLW  6E
036F6:  MOVWF  xE0
036F8:  MOVLW  82
036FA:  MOVWF  xDF
036FC:  MOVLB  0
036FE:  CALL   195A
03702:  MOVFF  03,2D5
03706:  MOVFF  02,2D4
0370A:  MOVFF  01,2D3
0370E:  MOVFF  00,2D2
....................    Pt=R10/((1023/V0)-1); 
03712:  MOVLB  3
03714:  CLRF   xCE
03716:  MOVLW  C0
03718:  MOVWF  xCD
0371A:  MOVLW  7F
0371C:  MOVWF  xCC
0371E:  MOVLW  88
03720:  MOVWF  xCB
03722:  MOVFF  2D5,3D2
03726:  MOVFF  2D4,3D1
0372A:  MOVFF  2D3,3D0
0372E:  MOVFF  2D2,3CF
03732:  MOVLB  0
03734:  CALL   17FC
03738:  MOVFF  00,3C7
0373C:  MOVFF  01,3C8
03740:  MOVFF  02,3C9
03744:  MOVFF  03,3CA
03748:  BSF    FD8.1
0374A:  MOVFF  03,3DE
0374E:  MOVFF  02,3DD
03752:  MOVFF  01,3DC
03756:  MOVFF  00,3DB
0375A:  MOVLB  3
0375C:  CLRF   xE2
0375E:  CLRF   xE1
03760:  CLRF   xE0
03762:  MOVLW  7F
03764:  MOVWF  xDF
03766:  MOVLB  0
03768:  CALL   195A
0376C:  MOVFF  2B3,3CE
03770:  MOVFF  2B2,3CD
03774:  MOVFF  2B1,3CC
03778:  MOVFF  2B0,3CB
0377C:  MOVFF  03,3D2
03780:  MOVFF  02,3D1
03784:  MOVFF  01,3D0
03788:  MOVFF  00,3CF
0378C:  CALL   17FC
03790:  MOVFF  03,2D9
03794:  MOVFF  02,2D8
03798:  MOVFF  01,2D7
0379C:  MOVFF  00,2D6
....................              
....................    if(l>(media-1)) 
037A0:  MOVLW  01
037A2:  MOVLB  3
037A4:  SUBWF  xC6,W
037A6:  MOVLB  2
037A8:  SUBWF  xC9,W
037AA:  BZ    37B0
037AC:  BNC   37B0
....................    {l=0;} 
037AE:  CLRF   xC9
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=Pt;l++; 
037B0:  MOVLB  3
037B2:  CLRF   xC8
037B4:  MOVFF  2C9,3C7
037B8:  CLRF   xCA
037BA:  MOVLW  04
037BC:  MOVWF  xC9
037BE:  MOVLB  0
037C0:  RCALL  3568
037C2:  MOVF   01,W
037C4:  ADDLW  C0
037C6:  MOVWF  FE9
037C8:  MOVLW  00
037CA:  ADDWFC 02,W
037CC:  MOVWF  FEA
037CE:  MOVFF  2D6,FEF
037D2:  MOVFF  2D7,FEC
037D6:  MOVFF  2D8,FEC
037DA:  MOVFF  2D9,FEC
037DE:  MOVLB  2
037E0:  INCF   xC9,F
....................           
....................    for(h=0;h<media;h++) 
037E2:  CLRF   xC8
037E4:  MOVLB  3
037E6:  MOVF   xC6,W
037E8:  MOVLB  2
037EA:  SUBWF  xC8,W
037EC:  BC    386C
....................    { 
....................       Prom+=promedio[h]; 
037EE:  MOVLB  3
037F0:  CLRF   xC8
037F2:  MOVFF  2C8,3C7
037F6:  CLRF   xCA
037F8:  MOVLW  04
037FA:  MOVWF  xC9
037FC:  MOVLB  0
037FE:  RCALL  3568
03800:  MOVFF  02,03
03804:  MOVF   01,W
03806:  ADDLW  C0
03808:  MOVWF  FE9
0380A:  MOVLW  00
0380C:  ADDWFC 02,W
0380E:  MOVWF  FEA
03810:  MOVFF  FEF,00
03814:  MOVFF  FEC,01
03818:  MOVFF  FEC,02
0381C:  MOVFF  FEC,03
03820:  MOVFF  FEA,3C8
03824:  MOVFF  FE9,3C7
03828:  BCF    FD8.1
0382A:  MOVFF  2E9,3DE
0382E:  MOVFF  2E8,3DD
03832:  MOVFF  2E7,3DC
03836:  MOVFF  2E6,3DB
0383A:  MOVFF  03,3E2
0383E:  MOVFF  02,3E1
03842:  MOVFF  01,3E0
03846:  MOVFF  00,3DF
0384A:  CALL   195A
0384E:  MOVFF  3C8,FEA
03852:  MOVFF  3C7,FE9
03856:  MOVFF  03,2E9
0385A:  MOVFF  02,2E8
0385E:  MOVFF  01,2E7
03862:  MOVFF  00,2E6
....................    }  
03866:  MOVLB  2
03868:  INCF   xC8,F
0386A:  BRA    37E4
....................    Prom=Prom/media;    
0386C:  MOVLB  3
0386E:  CLRF   xDC
03870:  MOVFF  3C6,3DB
03874:  MOVLB  0
03876:  CALL   17C6
0387A:  MOVFF  2E9,3CE
0387E:  MOVFF  2E8,3CD
03882:  MOVFF  2E7,3CC
03886:  MOVFF  2E6,3CB
0388A:  MOVFF  03,3D2
0388E:  MOVFF  02,3D1
03892:  MOVFF  01,3D0
03896:  MOVFF  00,3CF
0389A:  CALL   17FC
0389E:  MOVFF  03,2E9
038A2:  MOVFF  02,2E8
038A6:  MOVFF  01,2E7
038AA:  MOVFF  00,2E6
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    Temperature=((Prom*Prom)*a)+(Prom*b)+c;  // Ecuación determinada por linealización en Matlab. Revisar este polinomio. 
038AE:  MOVFF  2E9,3E2
038B2:  MOVFF  2E8,3E1
038B6:  MOVFF  2E7,3E0
038BA:  MOVFF  2E6,3DF
038BE:  MOVFF  2E9,3E6
038C2:  MOVFF  2E8,3E5
038C6:  MOVFF  2E7,3E4
038CA:  MOVFF  2E6,3E3
038CE:  RCALL  358A
038D0:  MOVFF  00,3C7
038D4:  MOVFF  01,3C8
038D8:  MOVFF  02,3C9
038DC:  MOVFF  03,3CA
038E0:  MOVFF  03,3E2
038E4:  MOVFF  02,3E1
038E8:  MOVFF  01,3E0
038EC:  MOVFF  00,3DF
038F0:  MOVFF  31D,3E6
038F4:  MOVFF  31C,3E5
038F8:  MOVFF  31B,3E4
038FC:  MOVFF  31A,3E3
03900:  RCALL  358A
03902:  MOVFF  00,3C7
03906:  MOVFF  01,3C8
0390A:  MOVFF  02,3C9
0390E:  MOVFF  03,3CA
03912:  MOVFF  2E9,3E2
03916:  MOVFF  2E8,3E1
0391A:  MOVFF  2E7,3E0
0391E:  MOVFF  2E6,3DF
03922:  MOVFF  321,3E6
03926:  MOVFF  320,3E5
0392A:  MOVFF  31F,3E4
0392E:  MOVFF  31E,3E3
03932:  RCALL  358A
03934:  BCF    FD8.1
03936:  MOVFF  3CA,3DE
0393A:  MOVFF  3C9,3DD
0393E:  MOVFF  3C8,3DC
03942:  MOVFF  3C7,3DB
03946:  MOVFF  03,3E2
0394A:  MOVFF  02,3E1
0394E:  MOVFF  01,3E0
03952:  MOVFF  00,3DF
03956:  CALL   195A
0395A:  MOVFF  00,3C7
0395E:  MOVFF  01,3C8
03962:  MOVFF  02,3C9
03966:  MOVFF  03,3CA
0396A:  BCF    FD8.1
0396C:  MOVFF  03,3DE
03970:  MOVFF  02,3DD
03974:  MOVFF  01,3DC
03978:  MOVFF  00,3DB
0397C:  MOVFF  325,3E2
03980:  MOVFF  324,3E1
03984:  MOVFF  323,3E0
03988:  MOVFF  322,3DF
0398C:  CALL   195A
03990:  MOVFF  03,2ED
03994:  MOVFF  02,2EC
03998:  MOVFF  01,2EB
0399C:  MOVFF  00,2EA
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
039A0:  MOVLB  3
039A2:  CLRF   xDC
039A4:  MOVFF  2CA,3DB
039A8:  MOVLB  0
039AA:  CALL   17C6
039AE:  MOVFF  00,3C7
039B2:  MOVFF  01,3C8
039B6:  MOVFF  02,3C9
039BA:  MOVFF  03,3CA
039BE:  MOVLB  3
039C0:  CLRF   xDC
039C2:  MOVFF  2CB,3DB
039C6:  MOVLB  0
039C8:  CALL   17C6
039CC:  BSF    FD8.1
039CE:  MOVFF  3CA,3DE
039D2:  MOVFF  3C9,3DD
039D6:  MOVFF  3C8,3DC
039DA:  MOVFF  3C7,3DB
039DE:  MOVFF  03,3E2
039E2:  MOVFF  02,3E1
039E6:  MOVFF  01,3E0
039EA:  MOVFF  00,3DF
039EE:  CALL   195A
039F2:  BCF    FD8.1
039F4:  MOVFF  2ED,3DE
039F8:  MOVFF  2EC,3DD
039FC:  MOVFF  2EB,3DC
03A00:  MOVFF  2EA,3DB
03A04:  MOVFF  03,3E2
03A08:  MOVFF  02,3E1
03A0C:  MOVFF  01,3E0
03A10:  MOVFF  00,3DF
03A14:  CALL   195A
03A18:  MOVFF  03,2ED
03A1C:  MOVFF  02,2EC
03A20:  MOVFF  01,2EB
03A24:  MOVFF  00,2EA
....................    //Temperature-=39.0; 
....................     
....................    //return Prom; 
....................    return Temperature; 
03A28:  MOVFF  2EA,00
03A2C:  MOVFF  2EB,01
03A30:  MOVFF  2EC,02
03A34:  MOVFF  2ED,03
.................... } 
03A38:  RETLW  00
....................  
.................... float Leer_Sensor_Presion_Camara(int media){ 
....................    promediopresion=0.0; 
*
03E4E:  MOVLB  2
03E50:  CLRF   xBF
03E52:  CLRF   xBE
03E54:  CLRF   xBD
03E56:  CLRF   xBC
....................    V1 = sensores(2);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
03E58:  MOVLW  02
03E5A:  MOVLB  3
03E5C:  MOVWF  xC7
03E5E:  MOVLB  0
03E60:  CALL   3510
03E64:  MOVFF  03,305
03E68:  MOVFF  02,304
03E6C:  MOVFF  01,303
03E70:  MOVFF  00,302
....................    //V1 = V1*(5.0/1024.0); 
....................    //Presion=(V1-0.2)/(K); 
....................    Presion=(((V1)/1023)-0.04)/K; 
03E74:  MOVFF  305,3CE
03E78:  MOVFF  304,3CD
03E7C:  MOVFF  303,3CC
03E80:  MOVFF  302,3CB
03E84:  MOVLB  3
03E86:  CLRF   xD2
03E88:  MOVLW  C0
03E8A:  MOVWF  xD1
03E8C:  MOVLW  7F
03E8E:  MOVWF  xD0
03E90:  MOVLW  88
03E92:  MOVWF  xCF
03E94:  MOVLB  0
03E96:  CALL   17FC
03E9A:  MOVFF  00,3C7
03E9E:  MOVFF  01,3C8
03EA2:  MOVFF  02,3C9
03EA6:  MOVFF  03,3CA
03EAA:  BSF    FD8.1
03EAC:  MOVFF  03,3DE
03EB0:  MOVFF  02,3DD
03EB4:  MOVFF  01,3DC
03EB8:  MOVFF  00,3DB
03EBC:  MOVLW  0A
03EBE:  MOVLB  3
03EC0:  MOVWF  xE2
03EC2:  MOVLW  D7
03EC4:  MOVWF  xE1
03EC6:  MOVLW  23
03EC8:  MOVWF  xE0
03ECA:  MOVLW  7A
03ECC:  MOVWF  xDF
03ECE:  MOVLB  0
03ED0:  CALL   195A
03ED4:  MOVFF  00,3C7
03ED8:  MOVFF  01,3C8
03EDC:  MOVFF  02,3C9
03EE0:  MOVFF  03,3CA
03EE4:  MOVFF  03,3CE
03EE8:  MOVFF  02,3CD
03EEC:  MOVFF  01,3CC
03EF0:  MOVFF  00,3CB
03EF4:  MOVFF  319,3D2
03EF8:  MOVFF  318,3D1
03EFC:  MOVFF  317,3D0
03F00:  MOVFF  316,3CF
03F04:  CALL   17FC
03F08:  MOVFF  03,309
03F0C:  MOVFF  02,308
03F10:  MOVFF  01,307
03F14:  MOVFF  00,306
....................     
....................    if(Presion<0.0) 
03F18:  MOVFF  309,3CD
03F1C:  MOVFF  308,3CC
03F20:  MOVFF  307,3CB
03F24:  MOVFF  306,3CA
03F28:  MOVLB  3
03F2A:  CLRF   xD1
03F2C:  CLRF   xD0
03F2E:  CLRF   xCF
03F30:  CLRF   xCE
03F32:  MOVLB  0
03F34:  CALL   29A4
03F38:  BNC   3F44
....................    { 
....................       Presion=0.0; 
03F3A:  MOVLB  3
03F3C:  CLRF   x09
03F3E:  CLRF   x08
03F40:  CLRF   x07
03F42:  CLRF   x06
....................    } 
....................     
....................    if(r>media-1) 
03F44:  MOVLW  01
03F46:  MOVLB  3
03F48:  SUBWF  xC6,W
03F4A:  SUBWF  x5D,W
03F4C:  BZ    3F52
03F4E:  BNC   3F52
....................    {r=0;} 
03F50:  CLRF   x5D
....................    PromPresion[r]=Presion;r++; 
03F52:  MOVF   x5D,W
03F54:  MULLW  04
03F56:  MOVF   FF3,W
03F58:  CLRF   03
03F5A:  MOVWF  FE9
03F5C:  MOVLW  02
03F5E:  ADDWF  03,W
03F60:  MOVWF  FEA
03F62:  MOVFF  306,FEF
03F66:  MOVFF  307,FEC
03F6A:  MOVFF  308,FEC
03F6E:  MOVFF  309,FEC
03F72:  INCF   x5D,F
....................           
....................    for(t=0;t<=(media-1);t++) 
03F74:  CLRF   x5E
03F76:  MOVLW  01
03F78:  SUBWF  xC6,W
03F7A:  SUBWF  x5E,W
03F7C:  BZ    3F80
03F7E:  BC    3FEE
....................    { 
....................       promediopresion+=PromPresion[t]; 
03F80:  MOVF   x5E,W
03F82:  MULLW  04
03F84:  MOVF   FF3,W
03F86:  CLRF   03
03F88:  MOVWF  FE9
03F8A:  MOVLW  02
03F8C:  ADDWF  03,W
03F8E:  MOVWF  FEA
03F90:  MOVFF  FEF,00
03F94:  MOVFF  FEC,01
03F98:  MOVFF  FEC,02
03F9C:  MOVFF  FEC,03
03FA0:  MOVFF  FEA,3C8
03FA4:  MOVFF  FE9,3C7
03FA8:  BCF    FD8.1
03FAA:  MOVFF  2BF,3DE
03FAE:  MOVFF  2BE,3DD
03FB2:  MOVFF  2BD,3DC
03FB6:  MOVFF  2BC,3DB
03FBA:  MOVFF  03,3E2
03FBE:  MOVFF  02,3E1
03FC2:  MOVFF  01,3E0
03FC6:  MOVFF  00,3DF
03FCA:  MOVLB  0
03FCC:  CALL   195A
03FD0:  MOVFF  3C8,FEA
03FD4:  MOVFF  3C7,FE9
03FD8:  MOVFF  03,2BF
03FDC:  MOVFF  02,2BE
03FE0:  MOVFF  01,2BD
03FE4:  MOVFF  00,2BC
....................    }  
03FE8:  MOVLB  3
03FEA:  INCF   x5E,F
03FEC:  BRA    3F76
....................    promediopresion=promediopresion/media;    
03FEE:  CLRF   xDC
03FF0:  MOVFF  3C6,3DB
03FF4:  MOVLB  0
03FF6:  CALL   17C6
03FFA:  MOVFF  2BF,3CE
03FFE:  MOVFF  2BE,3CD
04002:  MOVFF  2BD,3CC
04006:  MOVFF  2BC,3CB
0400A:  MOVFF  03,3D2
0400E:  MOVFF  02,3D1
04012:  MOVFF  01,3D0
04016:  MOVFF  00,3CF
0401A:  CALL   17FC
0401E:  MOVFF  03,2BF
04022:  MOVFF  02,2BE
04026:  MOVFF  01,2BD
0402A:  MOVFF  00,2BC
....................     
....................    return promediopresion; 
0402E:  MOVFF  2BC,00
04032:  MOVFF  2BD,01
04036:  MOVFF  2BE,02
0403A:  MOVFF  2BF,03
.................... } 
0403E:  GOTO   59FA (RETURN)
....................  
.................... float Leer_Sensor_Presion_PreCamara(int media){ 
....................    promediopresionp=0.0; 
04042:  MOVLB  2
04044:  CLRF   xC7
04046:  CLRF   xC6
04048:  CLRF   xC5
0404A:  CLRF   xC4
....................    V2 = sensores(3);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
0404C:  MOVLW  03
0404E:  MOVLB  3
04050:  MOVWF  xC7
04052:  MOVLB  0
04054:  CALL   3510
04058:  MOVFF  03,30D
0405C:  MOVFF  02,30C
04060:  MOVFF  01,30B
04064:  MOVFF  00,30A
....................    //V2 = V2*(5.0/1024.0); 
....................    //Presionp=(V2-0.2)/(K); 
....................    Presionp=(((V2)/1023)-0.04)/K; 
04068:  MOVFF  30D,3CE
0406C:  MOVFF  30C,3CD
04070:  MOVFF  30B,3CC
04074:  MOVFF  30A,3CB
04078:  MOVLB  3
0407A:  CLRF   xD2
0407C:  MOVLW  C0
0407E:  MOVWF  xD1
04080:  MOVLW  7F
04082:  MOVWF  xD0
04084:  MOVLW  88
04086:  MOVWF  xCF
04088:  MOVLB  0
0408A:  CALL   17FC
0408E:  MOVFF  00,3C7
04092:  MOVFF  01,3C8
04096:  MOVFF  02,3C9
0409A:  MOVFF  03,3CA
0409E:  BSF    FD8.1
040A0:  MOVFF  03,3DE
040A4:  MOVFF  02,3DD
040A8:  MOVFF  01,3DC
040AC:  MOVFF  00,3DB
040B0:  MOVLW  0A
040B2:  MOVLB  3
040B4:  MOVWF  xE2
040B6:  MOVLW  D7
040B8:  MOVWF  xE1
040BA:  MOVLW  23
040BC:  MOVWF  xE0
040BE:  MOVLW  7A
040C0:  MOVWF  xDF
040C2:  MOVLB  0
040C4:  CALL   195A
040C8:  MOVFF  00,3C7
040CC:  MOVFF  01,3C8
040D0:  MOVFF  02,3C9
040D4:  MOVFF  03,3CA
040D8:  MOVFF  03,3CE
040DC:  MOVFF  02,3CD
040E0:  MOVFF  01,3CC
040E4:  MOVFF  00,3CB
040E8:  MOVFF  319,3D2
040EC:  MOVFF  318,3D1
040F0:  MOVFF  317,3D0
040F4:  MOVFF  316,3CF
040F8:  CALL   17FC
040FC:  MOVFF  03,311
04100:  MOVFF  02,310
04104:  MOVFF  01,30F
04108:  MOVFF  00,30E
....................     
....................    if(Presionp<0.0) 
0410C:  MOVFF  311,3CD
04110:  MOVFF  310,3CC
04114:  MOVFF  30F,3CB
04118:  MOVFF  30E,3CA
0411C:  MOVLB  3
0411E:  CLRF   xD1
04120:  CLRF   xD0
04122:  CLRF   xCF
04124:  CLRF   xCE
04126:  MOVLB  0
04128:  CALL   29A4
0412C:  BNC   4138
....................    { 
....................       Presionp=0.0; 
0412E:  MOVLB  3
04130:  CLRF   x11
04132:  CLRF   x10
04134:  CLRF   x0F
04136:  CLRF   x0E
....................    } 
....................     
....................    if(r22>media-1) 
04138:  MOVLW  01
0413A:  MOVLB  3
0413C:  SUBWF  xC6,W
0413E:  SUBWF  x5F,W
04140:  BZ    4146
04142:  BNC   4146
....................    {r22=0;} 
04144:  CLRF   x5F
....................    PromPresionp[r22]=Presionp;r22++; 
04146:  MOVF   x5F,W
04148:  MULLW  04
0414A:  MOVF   FF3,W
0414C:  CLRF   03
0414E:  ADDLW  50
04150:  MOVWF  FE9
04152:  MOVLW  02
04154:  ADDWFC 03,W
04156:  MOVWF  FEA
04158:  MOVFF  30E,FEF
0415C:  MOVFF  30F,FEC
04160:  MOVFF  310,FEC
04164:  MOVFF  311,FEC
04168:  INCF   x5F,F
....................           
....................    for(t2=0;t2<=(media-1);t2++) 
0416A:  CLRF   x60
0416C:  MOVLW  01
0416E:  SUBWF  xC6,W
04170:  SUBWF  x60,W
04172:  BZ    4176
04174:  BC    41E6
....................    { 
....................       promediopresionp+=PromPresionp[t2]; 
04176:  MOVF   x60,W
04178:  MULLW  04
0417A:  MOVF   FF3,W
0417C:  CLRF   03
0417E:  ADDLW  50
04180:  MOVWF  FE9
04182:  MOVLW  02
04184:  ADDWFC 03,W
04186:  MOVWF  FEA
04188:  MOVFF  FEF,00
0418C:  MOVFF  FEC,01
04190:  MOVFF  FEC,02
04194:  MOVFF  FEC,03
04198:  MOVFF  FEA,3C8
0419C:  MOVFF  FE9,3C7
041A0:  BCF    FD8.1
041A2:  MOVFF  2C7,3DE
041A6:  MOVFF  2C6,3DD
041AA:  MOVFF  2C5,3DC
041AE:  MOVFF  2C4,3DB
041B2:  MOVFF  03,3E2
041B6:  MOVFF  02,3E1
041BA:  MOVFF  01,3E0
041BE:  MOVFF  00,3DF
041C2:  MOVLB  0
041C4:  CALL   195A
041C8:  MOVFF  3C8,FEA
041CC:  MOVFF  3C7,FE9
041D0:  MOVFF  03,2C7
041D4:  MOVFF  02,2C6
041D8:  MOVFF  01,2C5
041DC:  MOVFF  00,2C4
....................    }  
041E0:  MOVLB  3
041E2:  INCF   x60,F
041E4:  BRA    416C
....................    promediopresionp=promediopresionp/media;    
041E6:  CLRF   xDC
041E8:  MOVFF  3C6,3DB
041EC:  MOVLB  0
041EE:  CALL   17C6
041F2:  MOVFF  2C7,3CE
041F6:  MOVFF  2C6,3CD
041FA:  MOVFF  2C5,3CC
041FE:  MOVFF  2C4,3CB
04202:  MOVFF  03,3D2
04206:  MOVFF  02,3D1
0420A:  MOVFF  01,3D0
0420E:  MOVFF  00,3CF
04212:  CALL   17FC
04216:  MOVFF  03,2C7
0421A:  MOVFF  02,2C6
0421E:  MOVFF  01,2C5
04222:  MOVFF  00,2C4
....................     
....................    return promediopresionp; 
04226:  MOVFF  2C4,00
0422A:  MOVFF  2C5,01
0422E:  MOVFF  2C6,02
04232:  MOVFF  2C7,03
.................... } 
04236:  GOTO   5A22 (RETURN)
....................  
.................... void Controla(){ 
....................    if(tiemporecta>=Derivativo/2.0) 
*
04A80:  MOVLB  3
04A82:  CLRF   xDC
04A84:  MOVFF  327,3DB
04A88:  MOVLB  0
04A8A:  CALL   17C6
04A8E:  MOVFF  03,3CE
04A92:  MOVFF  02,3CD
04A96:  MOVFF  01,3CC
04A9A:  MOVFF  00,3CB
04A9E:  MOVLB  3
04AA0:  CLRF   xD2
04AA2:  CLRF   xD1
04AA4:  CLRF   xD0
04AA6:  MOVLW  80
04AA8:  MOVWF  xCF
04AAA:  MOVLB  0
04AAC:  CALL   17FC
04AB0:  MOVFF  00,3C6
04AB4:  MOVFF  01,3C7
04AB8:  MOVFF  02,3C8
04ABC:  MOVFF  03,3C9
04AC0:  MOVLB  3
04AC2:  CLRF   xDC
04AC4:  MOVFF  32B,3DB
04AC8:  MOVLB  0
04ACA:  CALL   17C6
04ACE:  MOVFF  3C9,3CD
04AD2:  MOVFF  3C8,3CC
04AD6:  MOVFF  3C7,3CB
04ADA:  MOVFF  3C6,3CA
04ADE:  MOVFF  03,3D1
04AE2:  MOVFF  02,3D0
04AE6:  MOVFF  01,3CF
04AEA:  MOVFF  00,3CE
04AEE:  CALL   29A4
04AF2:  BC    4AF6
04AF4:  BNZ   4AFC
....................    { 
....................       ActualizaRecta(); 
04AF6:  BRA    4A12
....................       tiemporecta=0; 
04AF8:  MOVLB  3
04AFA:  CLRF   x2B
....................    }  
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
04AFC:  MOVLB  3
04AFE:  CLRF   xDC
04B00:  MOVFF  33B,3DB
04B04:  MOVLB  0
04B06:  CALL   17C6
04B0A:  BCF    FD8.1
04B0C:  MOVFF  2FD,3DE
04B10:  MOVFF  2FC,3DD
04B14:  MOVFF  2FB,3DC
04B18:  MOVFF  2FA,3DB
04B1C:  MOVFF  03,3E2
04B20:  MOVFF  02,3E1
04B24:  MOVFF  01,3E0
04B28:  MOVFF  00,3DF
04B2C:  CALL   195A
04B30:  MOVFF  00,3C6
04B34:  MOVFF  01,3C7
04B38:  MOVFF  02,3C8
04B3C:  MOVFF  03,3C9
04B40:  BSF    FD8.1
04B42:  MOVFF  03,3DE
04B46:  MOVFF  02,3DD
04B4A:  MOVFF  01,3DC
04B4E:  MOVFF  00,3DB
04B52:  MOVFF  315,3E2
04B56:  MOVFF  314,3E1
04B5A:  MOVFF  313,3E0
04B5E:  MOVFF  312,3DF
04B62:  CALL   195A
04B66:  MOVFF  03,2E5
04B6A:  MOVFF  02,2E4
04B6E:  MOVFF  01,2E3
04B72:  MOVFF  00,2E2
....................     
....................    if(error>1.0 && error<15 && Aumento<0.3) 
04B76:  MOVLB  3
04B78:  CLRF   xCD
04B7A:  CLRF   xCC
04B7C:  CLRF   xCB
04B7E:  MOVLW  7F
04B80:  MOVWF  xCA
04B82:  MOVFF  2E5,3D1
04B86:  MOVFF  2E4,3D0
04B8A:  MOVFF  2E3,3CF
04B8E:  MOVFF  2E2,3CE
04B92:  MOVLB  0
04B94:  CALL   29A4
04B98:  BTFSS  FD8.0
04B9A:  BRA    4DC2
04B9C:  MOVFF  2E5,3CD
04BA0:  MOVFF  2E4,3CC
04BA4:  MOVFF  2E3,3CB
04BA8:  MOVFF  2E2,3CA
04BAC:  MOVLB  3
04BAE:  CLRF   xD1
04BB0:  CLRF   xD0
04BB2:  MOVLW  70
04BB4:  MOVWF  xCF
04BB6:  MOVLW  82
04BB8:  MOVWF  xCE
04BBA:  MOVLB  0
04BBC:  CALL   29A4
04BC0:  BTFSS  FD8.0
04BC2:  BRA    4DC2
04BC4:  MOVFF  2C3,3CD
04BC8:  MOVFF  2C2,3CC
04BCC:  MOVFF  2C1,3CB
04BD0:  MOVFF  2C0,3CA
04BD4:  MOVLW  9A
04BD6:  MOVLB  3
04BD8:  MOVWF  xD1
04BDA:  MOVLW  99
04BDC:  MOVWF  xD0
04BDE:  MOVLW  19
04BE0:  MOVWF  xCF
04BE2:  MOVLW  7D
04BE4:  MOVWF  xCE
04BE6:  MOVLB  0
04BE8:  CALL   29A4
04BEC:  BTFSS  FD8.0
04BEE:  BRA    4DC2
....................    { 
....................       if(Tpulso<4.0) 
04BF0:  MOVFF  2E1,3CD
04BF4:  MOVFF  2E0,3CC
04BF8:  MOVFF  2DF,3CB
04BFC:  MOVFF  2DE,3CA
04C00:  MOVLB  3
04C02:  CLRF   xD1
04C04:  CLRF   xD0
04C06:  CLRF   xCF
04C08:  MOVLW  81
04C0A:  MOVWF  xCE
04C0C:  MOVLB  0
04C0E:  CALL   29A4
04C12:  BTFSS  FD8.0
04C14:  BRA    4DBE
....................       { 
....................          flagTC=1; 
04C16:  MOVLB  3
04C18:  BSF    x29.4
....................          if(TiempoControl>=Derivativo) 
04C1A:  MOVF   x27,W
04C1C:  SUBWF  x61,W
04C1E:  BTFSS  FD8.0
04C20:  BRA    4DBA
....................          { 
....................             TiempoControl=0; 
04C22:  CLRF   x61
....................             if(Aumento<-0.5){ 
04C24:  MOVFF  2C3,3CD
04C28:  MOVFF  2C2,3CC
04C2C:  MOVFF  2C1,3CB
04C30:  MOVFF  2C0,3CA
04C34:  CLRF   xD1
04C36:  CLRF   xD0
04C38:  MOVLW  80
04C3A:  MOVWF  xCF
04C3C:  MOVLW  7E
04C3E:  MOVWF  xCE
04C40:  MOVLB  0
04C42:  CALL   29A4
04C46:  BNC   4CB8
....................                Ganancia+=Integral+0.2; 
04C48:  MOVLB  3
04C4A:  CLRF   xDC
04C4C:  MOVFF  326,3DB
04C50:  MOVLB  0
04C52:  CALL   17C6
04C56:  BCF    FD8.1
04C58:  MOVFF  03,3DE
04C5C:  MOVFF  02,3DD
04C60:  MOVFF  01,3DC
04C64:  MOVFF  00,3DB
04C68:  MOVLW  CD
04C6A:  MOVLB  3
04C6C:  MOVWF  xE2
04C6E:  MOVLW  CC
04C70:  MOVWF  xE1
04C72:  MOVLW  4C
04C74:  MOVWF  xE0
04C76:  MOVLW  7C
04C78:  MOVWF  xDF
04C7A:  MOVLB  0
04C7C:  CALL   195A
04C80:  BCF    FD8.1
04C82:  MOVFF  2F5,3DE
04C86:  MOVFF  2F4,3DD
04C8A:  MOVFF  2F3,3DC
04C8E:  MOVFF  2F2,3DB
04C92:  MOVFF  03,3E2
04C96:  MOVFF  02,3E1
04C9A:  MOVFF  01,3E0
04C9E:  MOVFF  00,3DF
04CA2:  CALL   195A
04CA6:  MOVFF  03,2F5
04CAA:  MOVFF  02,2F4
04CAE:  MOVFF  01,2F3
04CB2:  MOVFF  00,2F2
....................             }else{ 
04CB6:  BRA    4DB8
....................                if(Aumento<-0.1){ 
04CB8:  MOVFF  2C3,3CD
04CBC:  MOVFF  2C2,3CC
04CC0:  MOVFF  2C1,3CB
04CC4:  MOVFF  2C0,3CA
04CC8:  MOVLW  CD
04CCA:  MOVLB  3
04CCC:  MOVWF  xD1
04CCE:  MOVLW  CC
04CD0:  MOVWF  xD0
04CD2:  MOVWF  xCF
04CD4:  MOVLW  7B
04CD6:  MOVWF  xCE
04CD8:  MOVLB  0
04CDA:  CALL   29A4
04CDE:  BNC   4D50
....................                   Ganancia+=Integral-0.2; 
04CE0:  MOVLB  3
04CE2:  CLRF   xDC
04CE4:  MOVFF  326,3DB
04CE8:  MOVLB  0
04CEA:  CALL   17C6
04CEE:  BSF    FD8.1
04CF0:  MOVFF  03,3DE
04CF4:  MOVFF  02,3DD
04CF8:  MOVFF  01,3DC
04CFC:  MOVFF  00,3DB
04D00:  MOVLW  CD
04D02:  MOVLB  3
04D04:  MOVWF  xE2
04D06:  MOVLW  CC
04D08:  MOVWF  xE1
04D0A:  MOVLW  4C
04D0C:  MOVWF  xE0
04D0E:  MOVLW  7C
04D10:  MOVWF  xDF
04D12:  MOVLB  0
04D14:  CALL   195A
04D18:  BCF    FD8.1
04D1A:  MOVFF  2F5,3DE
04D1E:  MOVFF  2F4,3DD
04D22:  MOVFF  2F3,3DC
04D26:  MOVFF  2F2,3DB
04D2A:  MOVFF  03,3E2
04D2E:  MOVFF  02,3E1
04D32:  MOVFF  01,3E0
04D36:  MOVFF  00,3DF
04D3A:  CALL   195A
04D3E:  MOVFF  03,2F5
04D42:  MOVFF  02,2F4
04D46:  MOVFF  01,2F3
04D4A:  MOVFF  00,2F2
....................                }else{ 
04D4E:  BRA    4DB8
....................                   Ganancia+=Integral-0.5; 
04D50:  MOVLB  3
04D52:  CLRF   xDC
04D54:  MOVFF  326,3DB
04D58:  MOVLB  0
04D5A:  CALL   17C6
04D5E:  BSF    FD8.1
04D60:  MOVFF  03,3DE
04D64:  MOVFF  02,3DD
04D68:  MOVFF  01,3DC
04D6C:  MOVFF  00,3DB
04D70:  MOVLB  3
04D72:  CLRF   xE2
04D74:  CLRF   xE1
04D76:  CLRF   xE0
04D78:  MOVLW  7E
04D7A:  MOVWF  xDF
04D7C:  MOVLB  0
04D7E:  CALL   195A
04D82:  BCF    FD8.1
04D84:  MOVFF  2F5,3DE
04D88:  MOVFF  2F4,3DD
04D8C:  MOVFF  2F3,3DC
04D90:  MOVFF  2F2,3DB
04D94:  MOVFF  03,3E2
04D98:  MOVFF  02,3E1
04D9C:  MOVFF  01,3E0
04DA0:  MOVFF  00,3DF
04DA4:  CALL   195A
04DA8:  MOVFF  03,2F5
04DAC:  MOVFF  02,2F4
04DB0:  MOVFF  01,2F3
04DB4:  MOVFF  00,2F2
04DB8:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................       }else{ 
04DBA:  BRA    4DC2
04DBC:  MOVLB  0
....................          flagTC=0; 
04DBE:  MOVLB  3
04DC0:  BCF    x29.4
....................       } 
....................    } 
....................     
....................    if(error<-0.3) 
04DC2:  MOVFF  2E5,3CD
04DC6:  MOVFF  2E4,3CC
04DCA:  MOVFF  2E3,3CB
04DCE:  MOVFF  2E2,3CA
04DD2:  MOVLW  9A
04DD4:  MOVLB  3
04DD6:  MOVWF  xD1
04DD8:  MOVLW  99
04DDA:  MOVWF  xD0
04DDC:  MOVWF  xCF
04DDE:  MOVLW  7D
04DE0:  MOVWF  xCE
04DE2:  MOVLB  0
04DE4:  CALL   29A4
04DE8:  BNC   4DFA
....................    { 
....................       Ganancia=Ganancia2; 
04DEA:  MOVFF  2F9,2F5
04DEE:  MOVFF  2F8,2F4
04DF2:  MOVFF  2F7,2F3
04DF6:  MOVFF  2F6,2F2
....................    } 
....................     
....................    if(Ganancia<1) 
04DFA:  MOVFF  2F5,3CD
04DFE:  MOVFF  2F4,3CC
04E02:  MOVFF  2F3,3CB
04E06:  MOVFF  2F2,3CA
04E0A:  MOVLB  3
04E0C:  CLRF   xD1
04E0E:  CLRF   xD0
04E10:  CLRF   xCF
04E12:  MOVLW  7F
04E14:  MOVWF  xCE
04E16:  MOVLB  0
04E18:  CALL   29A4
04E1C:  BNC   4E2A
....................    { 
....................       Ganancia=1; 
04E1E:  MOVLB  2
04E20:  CLRF   xF5
04E22:  CLRF   xF4
04E24:  CLRF   xF3
04E26:  MOVLW  7F
04E28:  MOVWF  xF2
....................    } 
....................     
....................    if(error<0.0)     // Anti Wind_DOWN     
04E2A:  MOVFF  2E5,3CD
04E2E:  MOVFF  2E4,3CC
04E32:  MOVFF  2E3,3CB
04E36:  MOVFF  2E2,3CA
04E3A:  MOVLB  3
04E3C:  CLRF   xD1
04E3E:  CLRF   xD0
04E40:  CLRF   xCF
04E42:  CLRF   xCE
04E44:  MOVLB  0
04E46:  CALL   29A4
04E4A:  BNC   4E58
....................    { 
....................       error=0.0; 
04E4C:  MOVLB  2
04E4E:  CLRF   xE5
04E50:  CLRF   xE4
04E52:  CLRF   xE3
04E54:  CLRF   xE2
04E56:  MOVLB  0
....................    } 
....................    //tmp=(Setpoint-Prom)*Ganancia;  // Control Proporcional. 
....................    tmp=error*Ganancia;  // Control Proporcional. 
04E58:  MOVFF  2E5,3E2
04E5C:  MOVFF  2E4,3E1
04E60:  MOVFF  2E3,3E0
04E64:  MOVFF  2E2,3DF
04E68:  MOVFF  2F5,3E6
04E6C:  MOVFF  2F4,3E5
04E70:  MOVFF  2F3,3E4
04E74:  MOVFF  2F2,3E3
04E78:  CALL   358A
04E7C:  MOVFF  03,2F1
04E80:  MOVFF  02,2F0
04E84:  MOVFF  01,2EF
04E88:  MOVFF  00,2EE
....................           
....................    if(tmp>Setpoint)   // Anti Wind-UP       
04E8C:  MOVLB  3
04E8E:  CLRF   xDC
04E90:  MOVFF  33B,3DB
04E94:  MOVLB  0
04E96:  CALL   17C6
04E9A:  MOVFF  03,3CD
04E9E:  MOVFF  02,3CC
04EA2:  MOVFF  01,3CB
04EA6:  MOVFF  00,3CA
04EAA:  MOVFF  2F1,3D1
04EAE:  MOVFF  2F0,3D0
04EB2:  MOVFF  2EF,3CF
04EB6:  MOVFF  2EE,3CE
04EBA:  CALL   29A4
04EBE:  BNC   4EDE
....................    { 
....................       tmp=Setpoint; 
04EC0:  MOVLB  3
04EC2:  CLRF   xDC
04EC4:  MOVFF  33B,3DB
04EC8:  MOVLB  0
04ECA:  CALL   17C6
04ECE:  MOVFF  03,2F1
04ED2:  MOVFF  02,2F0
04ED6:  MOVFF  01,2EF
04EDA:  MOVFF  00,2EE
....................    } 
....................                 
....................    if(tmp<0.0)     // Anti Wind_DOWN     
04EDE:  MOVFF  2F1,3CD
04EE2:  MOVFF  2F0,3CC
04EE6:  MOVFF  2EF,3CB
04EEA:  MOVFF  2EE,3CA
04EEE:  MOVLB  3
04EF0:  CLRF   xD1
04EF2:  CLRF   xD0
04EF4:  CLRF   xCF
04EF6:  CLRF   xCE
04EF8:  MOVLB  0
04EFA:  CALL   29A4
04EFE:  BNC   4F0A
....................    { 
....................       tmp=0.0; 
04F00:  MOVLB  2
04F02:  CLRF   xF1
04F04:  CLRF   xF0
04F06:  CLRF   xEF
04F08:  CLRF   xEE
....................    } 
....................     
....................    // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................    // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................    tmp2=(tmp/Setpoint); 
04F0A:  MOVLB  3
04F0C:  CLRF   xDC
04F0E:  MOVFF  33B,3DB
04F12:  MOVLB  0
04F14:  CALL   17C6
04F18:  MOVFF  2F1,3CE
04F1C:  MOVFF  2F0,3CD
04F20:  MOVFF  2EF,3CC
04F24:  MOVFF  2EE,3CB
04F28:  MOVFF  03,3D2
04F2C:  MOVFF  02,3D1
04F30:  MOVFF  01,3D0
04F34:  MOVFF  00,3CF
04F38:  CALL   17FC
04F3C:  MOVFF  03,301
04F40:  MOVFF  02,300
04F44:  MOVFF  01,2FF
04F48:  MOVFF  00,2FE
....................    //if(tmp2>0.8) 
....................    //tmp2=0.8; 
....................    Tpulso=tmp2*Tciclo;   
04F4C:  MOVFF  301,3E2
04F50:  MOVFF  300,3E1
04F54:  MOVFF  2FF,3E0
04F58:  MOVFF  2FE,3DF
04F5C:  MOVFF  2DD,3E6
04F60:  MOVFF  2DC,3E5
04F64:  MOVFF  2DB,3E4
04F68:  MOVFF  2DA,3E3
04F6C:  CALL   358A
04F70:  MOVFF  03,2E1
04F74:  MOVFF  02,2E0
04F78:  MOVFF  01,2DF
04F7C:  MOVFF  00,2DE
....................                                        
....................    Tp=(Tpulso/0.005); 
04F80:  MOVFF  2E1,3CE
04F84:  MOVFF  2E0,3CD
04F88:  MOVFF  2DF,3CC
04F8C:  MOVFF  2DE,3CB
04F90:  MOVLW  0A
04F92:  MOVLB  3
04F94:  MOVWF  xD2
04F96:  MOVLW  D7
04F98:  MOVWF  xD1
04F9A:  MOVLW  23
04F9C:  MOVWF  xD0
04F9E:  MOVLW  77
04FA0:  MOVWF  xCF
04FA2:  MOVLB  0
04FA4:  CALL   17FC
04FA8:  MOVFF  03,3DE
04FAC:  MOVFF  02,3DD
04FB0:  MOVFF  01,3DC
04FB4:  MOVFF  00,3DB
04FB8:  CALL   3BB4
04FBC:  MOVFF  02,AB
04FC0:  MOVFF  01,AA
....................    Tc=(Tciclo/0.005); 
04FC4:  MOVFF  2DD,3CE
04FC8:  MOVFF  2DC,3CD
04FCC:  MOVFF  2DB,3CC
04FD0:  MOVFF  2DA,3CB
04FD4:  MOVLW  0A
04FD6:  MOVLB  3
04FD8:  MOVWF  xD2
04FDA:  MOVLW  D7
04FDC:  MOVWF  xD1
04FDE:  MOVLW  23
04FE0:  MOVWF  xD0
04FE2:  MOVLW  77
04FE4:  MOVWF  xCF
04FE6:  MOVLB  0
04FE8:  CALL   17FC
04FEC:  MOVFF  03,3DE
04FF0:  MOVFF  02,3DD
04FF4:  MOVFF  01,3DC
04FF8:  MOVFF  00,3DB
04FFC:  CALL   3BB4
05000:  MOVFF  02,AD
05004:  MOVFF  01,AC
....................    Controlando=1;    
05008:  MOVLW  01
0500A:  MOVLB  3
0500C:  MOVWF  x2C
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
0500E:  MOVLB  0
05010:  RETLW  00
....................  
.................... void Envio_I2C(direccion, posicion, dato){ 
....................  
....................    i2c_start();            // Comienzo comunicación 
*
03DB4:  BSF    F94.4
03DB6:  MOVLW  05
03DB8:  MOVWF  00
03DBA:  DECFSZ 00,F
03DBC:  BRA    3DBA
03DBE:  BSF    F94.3
03DC0:  MOVLW  06
03DC2:  MOVWF  00
03DC4:  DECFSZ 00,F
03DC6:  BRA    3DC4
03DC8:  BCF    F8B.4
03DCA:  BCF    F94.4
03DCC:  MOVLW  05
03DCE:  MOVWF  00
03DD0:  DECFSZ 00,F
03DD2:  BRA    3DD0
03DD4:  BCF    F8B.3
03DD6:  BCF    F94.3
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
03DD8:  MOVFF  3DC,3DF
03DDC:  RCALL  3D3E
....................    i2c_write(posicion);    // Posición donde se guardara el dato transmitido 
03DDE:  MOVFF  3DD,3DF
03DE2:  RCALL  3D3E
....................    i2c_write(dato);        // Dato a transmitir 
03DE4:  MOVFF  3DE,3DF
03DE8:  RCALL  3D3E
....................    i2c_stop();             // Fin comunicación 
03DEA:  BCF    F94.4
03DEC:  NOP   
03DEE:  BSF    F94.3
03DF0:  BTFSS  F82.3
03DF2:  BRA    3DF0
03DF4:  MOVLW  05
03DF6:  MOVWF  00
03DF8:  DECFSZ 00,F
03DFA:  BRA    3DF8
03DFC:  BRA    3DFE
03DFE:  NOP   
03E00:  BSF    F94.4
03E02:  MOVLW  05
03E04:  MOVWF  00
03E06:  DECFSZ 00,F
03E08:  BRA    3E06
....................  } 
03E0A:  GOTO   3E44 (RETURN)
....................  
.................... void Lectura_I2C (byte direccion, byte posicion, byte &dato) { 
....................  
....................    i2c_start();            // Comienzo de la comunicación 
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
....................    i2c_write(posicion);    // Posición de donde se leerá el dato en el esclavo 
....................    i2c_start();            // Reinicio 
....................    i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
....................    dato=i2c_read(0);       // Lectura del dato 
....................    i2c_stop();             // Fin comunicación 
.................... } 
....................  
.................... void Carga_Vector(void){ 
....................    SlaveA0Tx[0]=(int8)Temperatura; 
*
03BF0:  MOVFF  315,3DE
03BF4:  MOVFF  314,3DD
03BF8:  MOVFF  313,3DC
03BFC:  MOVFF  312,3DB
03C00:  RCALL  3BB4
03C02:  MOVFF  01,64
....................    SlaveA0Tx[1]=(Temperatura-((int8)Temperatura))*10; 
03C06:  MOVFF  315,3DE
03C0A:  MOVFF  314,3DD
03C0E:  MOVFF  313,3DC
03C12:  MOVFF  312,3DB
03C16:  RCALL  3BB4
03C18:  MOVLB  3
03C1A:  CLRF   xDC
03C1C:  MOVFF  01,3DB
03C20:  MOVLB  0
03C22:  CALL   17C6
03C26:  BSF    FD8.1
03C28:  MOVFF  315,3DE
03C2C:  MOVFF  314,3DD
03C30:  MOVFF  313,3DC
03C34:  MOVFF  312,3DB
03C38:  MOVFF  03,3E2
03C3C:  MOVFF  02,3E1
03C40:  MOVFF  01,3E0
03C44:  MOVFF  00,3DF
03C48:  CALL   195A
03C4C:  MOVFF  00,3DB
03C50:  MOVFF  01,3DC
03C54:  MOVFF  02,3DD
03C58:  MOVFF  03,3DE
03C5C:  MOVFF  03,3E2
03C60:  MOVFF  02,3E1
03C64:  MOVFF  01,3E0
03C68:  MOVFF  00,3DF
03C6C:  MOVLB  3
03C6E:  CLRF   xE6
03C70:  CLRF   xE5
03C72:  MOVLW  20
03C74:  MOVWF  xE4
03C76:  MOVLW  82
03C78:  MOVWF  xE3
03C7A:  MOVLB  0
03C7C:  RCALL  358A
03C7E:  MOVFF  03,3DE
03C82:  MOVFF  02,3DD
03C86:  MOVFF  01,3DC
03C8A:  MOVFF  00,3DB
03C8E:  RCALL  3BB4
03C90:  MOVFF  01,65
....................    SlaveA0Tx[2]=make8((int16)PresionCamara,0); 
03C94:  MOVFF  34D,66
03C98:  MOVLB  0
....................    SlaveA0Tx[3]=make8((int16)PresionCamara,1); 
03C9A:  MOVFF  34E,67
03C9E:  MOVLB  0
....................    SlaveA0Tx[4]=make8((int16)PresionPreCamara,0); 
03CA0:  MOVFF  34F,68
03CA4:  MOVLB  0
....................    SlaveA0Tx[5]=make8((int16)PresionPreCamara,1); 
03CA6:  MOVFF  350,69
03CAA:  MOVLB  0
....................    SlaveA0Tx[6]=(int8)Tpulso*10; 
03CAC:  MOVFF  2E1,3DE
03CB0:  MOVFF  2E0,3DD
03CB4:  MOVFF  2DF,3DC
03CB8:  MOVFF  2DE,3DB
03CBC:  RCALL  3BB4
03CBE:  MOVF   01,W
03CC0:  MULLW  0A
03CC2:  MOVFF  FF3,6A
....................    SlaveA0Tx[7]=HIG; 
03CC6:  BSF    F94.0
03CC8:  CLRF   x6B
03CCA:  BTFSC  F82.0
03CCC:  INCF   x6B,F
....................    SlaveA0Tx[8]=LOW; 
03CCE:  BSF    F94.1
03CD0:  CLRF   x6C
03CD2:  BTFSC  F82.1
03CD4:  INCF   x6C,F
....................    SlaveA0Tx[9]=TERM; 
03CD6:  BSF    F93.5
03CD8:  CLRF   x6D
03CDA:  BTFSS  F81.5
03CDC:  INCF   x6D,F
....................    SlaveA0Tx[10]=DOOR; 
03CDE:  BSF    F93.6
03CE0:  CLRF   x6E
03CE2:  BTFSS  F81.6
03CE4:  INCF   x6E,F
....................    SlaveA0Tx[11]=STOP; 
03CE6:  BSF    F93.7
03CE8:  CLRF   x6F
03CEA:  BTFSS  F81.7
03CEC:  INCF   x6F,F
....................    SlaveA0Tx[12]=(int8)error; 
03CEE:  MOVFF  2E5,3DE
03CF2:  MOVFF  2E4,3DD
03CF6:  MOVFF  2E3,3DC
03CFA:  MOVFF  2E2,3DB
03CFE:  RCALL  3BB4
03D00:  MOVFF  01,70
....................    SlaveA0Tx[13]=CicloSeleccionado; 
03D04:  MOVFF  33A,71
....................    SlaveA0Tx[14]=SetTime; 
03D08:  MOVFF  37A,72
....................    SlaveA0Tx[15]=Dia; 
03D0C:  MOVFF  36E,73
....................    SlaveA0Tx[16]=Mes; 
03D10:  MOVFF  36D,74
....................    SlaveA0Tx[17]=Year; 
03D14:  MOVFF  36C,75
....................    SlaveA0Tx[18]=Hora; 
03D18:  MOVFF  36F,76
....................    SlaveA0Tx[19]=Minuto; 
03D1C:  MOVFF  370,77
....................    SlaveA0Tx[20]=Segundo; 
03D20:  MOVFF  371,78
....................    SlaveA0Tx[21]=Imprime; 
03D24:  MOVFF  37B,79
....................    SlaveA0Tx[22]=Aire; 
03D28:  CLRF   x7A
03D2A:  BTFSC  xA3.7
03D2C:  INCF   x7A,F
....................    SlaveA0Tx[23]=make8(Ciclos,0); 
03D2E:  MOVFF  351,7B
03D32:  MOVLB  0
....................    SlaveA0Tx[24]=make8(Ciclos,1); 
03D34:  MOVFF  352,7C
03D38:  MOVLB  0
.................... } 
03D3A:  GOTO   3E10 (RETURN)
....................  
.................... void Lee_Vector(void){ 
....................    /*Dia=txbuf[0]; 
....................    Mess=txbuf[1]; 
....................    Year=txbuf[2]; 
....................    Hora=txbuf[3]; 
....................    Minuto=txbuf[4]; 
....................    Segundo=txbuf[5]; 
....................    dow=txbuf[6];*/ 
.................... } 
....................  
.................... void Envio_Esclavos(void){ 
....................    Carga_Vector(); 
*
03E0E:  BRA    3BF0
....................    for(i=0;i<25;i++) 
03E10:  MOVLB  3
03E12:  CLRF   x37
03E14:  MOVF   x37,W
03E16:  SUBLW  18
03E18:  BNC   3E4A
....................    { 
....................       direccion=0xB0; 
03E1A:  MOVLW  B0
03E1C:  MOVLB  0
03E1E:  MOVWF  x85
....................       Envio_I2C(direccion,i,SlaveA0Tx[i]); 
03E20:  CLRF   03
03E22:  MOVLB  3
03E24:  MOVF   x37,W
03E26:  ADDLW  64
03E28:  MOVWF  FE9
03E2A:  MOVLW  00
03E2C:  ADDWFC 03,W
03E2E:  MOVWF  FEA
03E30:  MOVFF  FEF,3DB
03E34:  MOVFF  85,3DC
03E38:  MOVFF  337,3DD
03E3C:  MOVFF  3DB,3DE
03E40:  MOVLB  0
03E42:  BRA    3DB4
....................    }  
03E44:  MOVLB  3
03E46:  INCF   x37,F
03E48:  BRA    3E14
.................... } 
03E4A:  MOVLB  0
03E4C:  RETLW  00
.................... void Lectura_Esclavos(void){ 
....................    //for(i=0;i<7;i++) 
....................    //{ 
....................    //   direccion=0xA0;                        //Dirección en el bus I2c 
....................    //   posicion=i;                         //Posición de memoria a leer 
....................    //   Lectura_I2C(direccion, posicion, dato);    //Lectura por I2C 
....................    //   txbuf[i]=(int8)dato; 
....................    //} 
....................    //Lee_Vector(); 
.................... } 
....................  
.................... void LeeEEPROM(){ 
.................... //Lectura EEPROM//-------------------------- 
....................    Testerilizacionp[0]=read_eeprom(0); 
*
01BD2:  MOVFF  FF2,3C6
01BD6:  BCF    FF2.6
01BD8:  BCF    FF2.7
01BDA:  CLRF   FAA
01BDC:  CLRF   FA9
01BDE:  BCF    FA6.6
01BE0:  BCF    FA6.7
01BE2:  BSF    FA6.0
01BE4:  MOVF   FA8,W
01BE6:  MOVLB  3
01BE8:  BTFSC  xC6.6
01BEA:  BSF    FF2.6
01BEC:  BTFSC  xC6.7
01BEE:  BSF    FF2.7
01BF0:  MOVLB  0
01BF2:  MOVWF  xB3
....................    delay_ms(10); 
01BF4:  MOVLW  0A
01BF6:  MOVLB  3
01BF8:  MOVWF  xDB
01BFA:  MOVLB  0
01BFC:  RCALL  179E
....................    Testerilizacionp[1]=read_eeprom(1); 
01BFE:  MOVFF  FF2,3C6
01C02:  BCF    FF2.6
01C04:  BCF    FF2.7
01C06:  CLRF   FAA
01C08:  MOVLW  01
01C0A:  MOVWF  FA9
01C0C:  BCF    FA6.6
01C0E:  BCF    FA6.7
01C10:  BSF    FA6.0
01C12:  MOVF   FA8,W
01C14:  MOVLB  3
01C16:  BTFSC  xC6.6
01C18:  BSF    FF2.6
01C1A:  BTFSC  xC6.7
01C1C:  BSF    FF2.7
01C1E:  MOVLB  0
01C20:  MOVWF  xB4
....................    delay_ms(10); 
01C22:  MOVLW  0A
01C24:  MOVLB  3
01C26:  MOVWF  xDB
01C28:  MOVLB  0
01C2A:  RCALL  179E
....................    Testerilizacionp[2]=read_eeprom(2); 
01C2C:  MOVFF  FF2,3C6
01C30:  BCF    FF2.6
01C32:  BCF    FF2.7
01C34:  CLRF   FAA
01C36:  MOVLW  02
01C38:  MOVWF  FA9
01C3A:  BCF    FA6.6
01C3C:  BCF    FA6.7
01C3E:  BSF    FA6.0
01C40:  MOVF   FA8,W
01C42:  MOVLB  3
01C44:  BTFSC  xC6.6
01C46:  BSF    FF2.6
01C48:  BTFSC  xC6.7
01C4A:  BSF    FF2.7
01C4C:  MOVLB  0
01C4E:  MOVWF  xB5
....................    delay_ms(10); 
01C50:  MOVLW  0A
01C52:  MOVLB  3
01C54:  MOVWF  xDB
01C56:  MOVLB  0
01C58:  RCALL  179E
....................    Testerilizacionp[3]=read_eeprom(3); 
01C5A:  MOVFF  FF2,3C6
01C5E:  BCF    FF2.6
01C60:  BCF    FF2.7
01C62:  CLRF   FAA
01C64:  MOVLW  03
01C66:  MOVWF  FA9
01C68:  BCF    FA6.6
01C6A:  BCF    FA6.7
01C6C:  BSF    FA6.0
01C6E:  MOVF   FA8,W
01C70:  MOVLB  3
01C72:  BTFSC  xC6.6
01C74:  BSF    FF2.6
01C76:  BTFSC  xC6.7
01C78:  BSF    FF2.7
01C7A:  MOVLB  0
01C7C:  MOVWF  xB6
....................    delay_ms(10); 
01C7E:  MOVLW  0A
01C80:  MOVLB  3
01C82:  MOVWF  xDB
01C84:  MOVLB  0
01C86:  RCALL  179E
....................    Tsecadop[0]=read_eeprom(4); 
01C88:  MOVFF  FF2,3C6
01C8C:  BCF    FF2.6
01C8E:  BCF    FF2.7
01C90:  CLRF   FAA
01C92:  MOVLW  04
01C94:  MOVWF  FA9
01C96:  BCF    FA6.6
01C98:  BCF    FA6.7
01C9A:  BSF    FA6.0
01C9C:  MOVF   FA8,W
01C9E:  MOVLB  3
01CA0:  BTFSC  xC6.6
01CA2:  BSF    FF2.6
01CA4:  BTFSC  xC6.7
01CA6:  BSF    FF2.7
01CA8:  MOVLB  0
01CAA:  MOVWF  xBC
....................    delay_ms(10); 
01CAC:  MOVLW  0A
01CAE:  MOVLB  3
01CB0:  MOVWF  xDB
01CB2:  MOVLB  0
01CB4:  RCALL  179E
....................    Tsecadop[1]=read_eeprom(5); 
01CB6:  MOVFF  FF2,3C6
01CBA:  BCF    FF2.6
01CBC:  BCF    FF2.7
01CBE:  CLRF   FAA
01CC0:  MOVLW  05
01CC2:  MOVWF  FA9
01CC4:  BCF    FA6.6
01CC6:  BCF    FA6.7
01CC8:  BSF    FA6.0
01CCA:  MOVF   FA8,W
01CCC:  MOVLB  3
01CCE:  BTFSC  xC6.6
01CD0:  BSF    FF2.6
01CD2:  BTFSC  xC6.7
01CD4:  BSF    FF2.7
01CD6:  MOVLB  0
01CD8:  MOVWF  xBD
....................    delay_ms(10); 
01CDA:  MOVLW  0A
01CDC:  MOVLB  3
01CDE:  MOVWF  xDB
01CE0:  MOVLB  0
01CE2:  RCALL  179E
....................    Tsecadop[2]=read_eeprom(6); 
01CE4:  MOVFF  FF2,3C6
01CE8:  BCF    FF2.6
01CEA:  BCF    FF2.7
01CEC:  CLRF   FAA
01CEE:  MOVLW  06
01CF0:  MOVWF  FA9
01CF2:  BCF    FA6.6
01CF4:  BCF    FA6.7
01CF6:  BSF    FA6.0
01CF8:  MOVF   FA8,W
01CFA:  MOVLB  3
01CFC:  BTFSC  xC6.6
01CFE:  BSF    FF2.6
01D00:  BTFSC  xC6.7
01D02:  BSF    FF2.7
01D04:  MOVLB  0
01D06:  MOVWF  xBE
....................    delay_ms(10); 
01D08:  MOVLW  0A
01D0A:  MOVLB  3
01D0C:  MOVWF  xDB
01D0E:  MOVLB  0
01D10:  RCALL  179E
....................    Tsecadop[3]=read_eeprom(7); 
01D12:  MOVFF  FF2,3C6
01D16:  BCF    FF2.6
01D18:  BCF    FF2.7
01D1A:  CLRF   FAA
01D1C:  MOVLW  07
01D1E:  MOVWF  FA9
01D20:  BCF    FA6.6
01D22:  BCF    FA6.7
01D24:  BSF    FA6.0
01D26:  MOVF   FA8,W
01D28:  MOVLB  3
01D2A:  BTFSC  xC6.6
01D2C:  BSF    FF2.6
01D2E:  BTFSC  xC6.7
01D30:  BSF    FF2.7
01D32:  MOVLB  0
01D34:  MOVWF  xBF
....................    delay_ms(10); 
01D36:  MOVLW  0A
01D38:  MOVLB  3
01D3A:  MOVWF  xDB
01D3C:  MOVLB  0
01D3E:  RCALL  179E
....................    Setpoint=read_eeprom(8); 
01D40:  MOVFF  FF2,3C6
01D44:  BCF    FF2.6
01D46:  BCF    FF2.7
01D48:  CLRF   FAA
01D4A:  MOVLW  08
01D4C:  MOVWF  FA9
01D4E:  BCF    FA6.6
01D50:  BCF    FA6.7
01D52:  BSF    FA6.0
01D54:  MOVF   FA8,W
01D56:  MOVLB  3
01D58:  BTFSC  xC6.6
01D5A:  BSF    FF2.6
01D5C:  BTFSC  xC6.7
01D5E:  BSF    FF2.7
01D60:  MOVWF  x3B
....................    delay_ms(10); 
01D62:  MOVLW  0A
01D64:  MOVWF  xDB
01D66:  MOVLB  0
01D68:  RCALL  179E
....................    Nivel=read_eeprom(9); 
01D6A:  MOVFF  FF2,3C6
01D6E:  BCF    FF2.6
01D70:  BCF    FF2.7
01D72:  CLRF   FAA
01D74:  MOVLW  09
01D76:  MOVWF  FA9
01D78:  BCF    FA6.6
01D7A:  BCF    FA6.7
01D7C:  BSF    FA6.0
01D7E:  MOVF   FA8,W
01D80:  MOVLB  3
01D82:  BTFSC  xC6.6
01D84:  BSF    FF2.6
01D86:  BTFSC  xC6.7
01D88:  BSF    FF2.7
01D8A:  CLRF   x4A
01D8C:  MOVWF  x49
....................    delay_ms(10); 
01D8E:  MOVLW  0A
01D90:  MOVWF  xDB
01D92:  MOVLB  0
01D94:  RCALL  179E
....................    Password[0]=read_eeprom(10); 
01D96:  MOVFF  FF2,3C6
01D9A:  BCF    FF2.6
01D9C:  BCF    FF2.7
01D9E:  CLRF   FAA
01DA0:  MOVLW  0A
01DA2:  MOVWF  FA9
01DA4:  BCF    FA6.6
01DA6:  BCF    FA6.7
01DA8:  BSF    FA6.0
01DAA:  MOVF   FA8,W
01DAC:  MOVLB  3
01DAE:  BTFSC  xC6.6
01DB0:  BSF    FF2.6
01DB2:  BTFSC  xC6.7
01DB4:  BSF    FF2.7
01DB6:  MOVWF  x59
....................    delay_ms(10); 
01DB8:  MOVLW  0A
01DBA:  MOVWF  xDB
01DBC:  MOVLB  0
01DBE:  RCALL  179E
....................    Password[1]=read_eeprom(11); 
01DC0:  MOVFF  FF2,3C6
01DC4:  BCF    FF2.6
01DC6:  BCF    FF2.7
01DC8:  CLRF   FAA
01DCA:  MOVLW  0B
01DCC:  MOVWF  FA9
01DCE:  BCF    FA6.6
01DD0:  BCF    FA6.7
01DD2:  BSF    FA6.0
01DD4:  MOVF   FA8,W
01DD6:  MOVLB  3
01DD8:  BTFSC  xC6.6
01DDA:  BSF    FF2.6
01DDC:  BTFSC  xC6.7
01DDE:  BSF    FF2.7
01DE0:  MOVWF  x5A
....................    delay_ms(10); 
01DE2:  MOVLW  0A
01DE4:  MOVWF  xDB
01DE6:  MOVLB  0
01DE8:  RCALL  179E
....................    Password[2]=read_eeprom(12); 
01DEA:  MOVFF  FF2,3C6
01DEE:  BCF    FF2.6
01DF0:  BCF    FF2.7
01DF2:  CLRF   FAA
01DF4:  MOVLW  0C
01DF6:  MOVWF  FA9
01DF8:  BCF    FA6.6
01DFA:  BCF    FA6.7
01DFC:  BSF    FA6.0
01DFE:  MOVF   FA8,W
01E00:  MOVLB  3
01E02:  BTFSC  xC6.6
01E04:  BSF    FF2.6
01E06:  BTFSC  xC6.7
01E08:  BSF    FF2.7
01E0A:  MOVWF  x5B
....................    delay_ms(10); 
01E0C:  MOVLW  0A
01E0E:  MOVWF  xDB
01E10:  MOVLB  0
01E12:  RCALL  179E
....................    Password[3]=read_eeprom(13); 
01E14:  MOVFF  FF2,3C6
01E18:  BCF    FF2.6
01E1A:  BCF    FF2.7
01E1C:  CLRF   FAA
01E1E:  MOVLW  0D
01E20:  MOVWF  FA9
01E22:  BCF    FA6.6
01E24:  BCF    FA6.7
01E26:  BSF    FA6.0
01E28:  MOVF   FA8,W
01E2A:  MOVLB  3
01E2C:  BTFSC  xC6.6
01E2E:  BSF    FF2.6
01E30:  BTFSC  xC6.7
01E32:  BSF    FF2.7
01E34:  MOVWF  x5C
....................    delay_ms(10); 
01E36:  MOVLW  0A
01E38:  MOVWF  xDB
01E3A:  MOVLB  0
01E3C:  RCALL  179E
....................    Ganancia=read_eeprom(20); 
01E3E:  MOVFF  FF2,3C6
01E42:  BCF    FF2.6
01E44:  BCF    FF2.7
01E46:  CLRF   FAA
01E48:  MOVLW  14
01E4A:  MOVWF  FA9
01E4C:  BCF    FA6.6
01E4E:  BCF    FA6.7
01E50:  BSF    FA6.0
01E52:  MOVF   FA8,W
01E54:  MOVLB  3
01E56:  BTFSC  xC6.6
01E58:  BSF    FF2.6
01E5A:  BTFSC  xC6.7
01E5C:  BSF    FF2.7
01E5E:  CLRF   xDC
01E60:  MOVWF  xDB
01E62:  MOVLB  0
01E64:  RCALL  17C6
01E66:  MOVFF  03,2F5
01E6A:  MOVFF  02,2F4
01E6E:  MOVFF  01,2F3
01E72:  MOVFF  00,2F2
....................    delay_ms(10); 
01E76:  MOVLW  0A
01E78:  MOVLB  3
01E7A:  MOVWF  xDB
01E7C:  MOVLB  0
01E7E:  RCALL  179E
....................    Ajuste=read_eeprom(21); 
01E80:  MOVFF  FF2,3C6
01E84:  BCF    FF2.6
01E86:  BCF    FF2.7
01E88:  CLRF   FAA
01E8A:  MOVLW  15
01E8C:  MOVWF  FA9
01E8E:  BCF    FA6.6
01E90:  BCF    FA6.7
01E92:  BSF    FA6.0
01E94:  MOVF   FA8,W
01E96:  MOVLB  3
01E98:  BTFSC  xC6.6
01E9A:  BSF    FF2.6
01E9C:  BTFSC  xC6.7
01E9E:  BSF    FF2.7
01EA0:  MOVLB  2
01EA2:  MOVWF  xCA
....................    delay_ms(10); 
01EA4:  MOVLW  0A
01EA6:  MOVLB  3
01EA8:  MOVWF  xDB
01EAA:  MOVLB  0
01EAC:  RCALL  179E
....................    Ajusten=read_eeprom(22); 
01EAE:  MOVFF  FF2,3C6
01EB2:  BCF    FF2.6
01EB4:  BCF    FF2.7
01EB6:  CLRF   FAA
01EB8:  MOVLW  16
01EBA:  MOVWF  FA9
01EBC:  BCF    FA6.6
01EBE:  BCF    FA6.7
01EC0:  BSF    FA6.0
01EC2:  MOVF   FA8,W
01EC4:  MOVLB  3
01EC6:  BTFSC  xC6.6
01EC8:  BSF    FF2.6
01ECA:  BTFSC  xC6.7
01ECC:  BSF    FF2.7
01ECE:  MOVLB  2
01ED0:  MOVWF  xCB
....................    delay_ms(10); 
01ED2:  MOVLW  0A
01ED4:  MOVLB  3
01ED6:  MOVWF  xDB
01ED8:  MOVLB  0
01EDA:  RCALL  179E
....................    //Desvio=read_eeprom(23); 
....................    MediaMovil=read_eeprom(24); 
01EDC:  MOVFF  FF2,3C6
01EE0:  BCF    FF2.6
01EE2:  BCF    FF2.7
01EE4:  CLRF   FAA
01EE6:  MOVLW  18
01EE8:  MOVWF  FA9
01EEA:  BCF    FA6.6
01EEC:  BCF    FA6.7
01EEE:  BSF    FA6.0
01EF0:  MOVF   FA8,W
01EF2:  MOVLB  3
01EF4:  BTFSC  xC6.6
01EF6:  BSF    FF2.6
01EF8:  BTFSC  xC6.7
01EFA:  BSF    FF2.7
01EFC:  MOVLB  2
01EFE:  MOVWF  xCC
....................    delay_ms(10); 
01F00:  MOVLW  0A
01F02:  MOVLB  3
01F04:  MOVWF  xDB
01F06:  MOVLB  0
01F08:  RCALL  179E
....................    Tciclo=read_eeprom(25); 
01F0A:  MOVFF  FF2,3C6
01F0E:  BCF    FF2.6
01F10:  BCF    FF2.7
01F12:  CLRF   FAA
01F14:  MOVLW  19
01F16:  MOVWF  FA9
01F18:  BCF    FA6.6
01F1A:  BCF    FA6.7
01F1C:  BSF    FA6.0
01F1E:  MOVF   FA8,W
01F20:  MOVLB  3
01F22:  BTFSC  xC6.6
01F24:  BSF    FF2.6
01F26:  BTFSC  xC6.7
01F28:  BSF    FF2.7
01F2A:  CLRF   xDC
01F2C:  MOVWF  xDB
01F2E:  MOVLB  0
01F30:  RCALL  17C6
01F32:  MOVFF  03,2DD
01F36:  MOVFF  02,2DC
01F3A:  MOVFF  01,2DB
01F3E:  MOVFF  00,2DA
....................    delay_ms(10); 
01F42:  MOVLW  0A
01F44:  MOVLB  3
01F46:  MOVWF  xDB
01F48:  MOVLB  0
01F4A:  RCALL  179E
....................    Integral=read_eeprom(26); 
01F4C:  MOVFF  FF2,3C6
01F50:  BCF    FF2.6
01F52:  BCF    FF2.7
01F54:  CLRF   FAA
01F56:  MOVLW  1A
01F58:  MOVWF  FA9
01F5A:  BCF    FA6.6
01F5C:  BCF    FA6.7
01F5E:  BSF    FA6.0
01F60:  MOVF   FA8,W
01F62:  MOVLB  3
01F64:  BTFSC  xC6.6
01F66:  BSF    FF2.6
01F68:  BTFSC  xC6.7
01F6A:  BSF    FF2.7
01F6C:  MOVWF  x26
....................    delay_ms(10); 
01F6E:  MOVLW  0A
01F70:  MOVWF  xDB
01F72:  MOVLB  0
01F74:  RCALL  179E
....................    Derivativo=read_eeprom(27); 
01F76:  MOVFF  FF2,3C6
01F7A:  BCF    FF2.6
01F7C:  BCF    FF2.7
01F7E:  CLRF   FAA
01F80:  MOVLW  1B
01F82:  MOVWF  FA9
01F84:  BCF    FA6.6
01F86:  BCF    FA6.7
01F88:  BSF    FA6.0
01F8A:  MOVF   FA8,W
01F8C:  MOVLB  3
01F8E:  BTFSC  xC6.6
01F90:  BSF    FF2.6
01F92:  BTFSC  xC6.7
01F94:  BSF    FF2.7
01F96:  MOVWF  x27
....................    delay_ms(10); 
01F98:  MOVLW  0A
01F9A:  MOVWF  xDB
01F9C:  MOVLB  0
01F9E:  CALL   179E
....................    Temporal=read_eeprom(29); 
01FA2:  MOVFF  FF2,3C6
01FA6:  BCF    FF2.6
01FA8:  BCF    FF2.7
01FAA:  CLRF   FAA
01FAC:  MOVLW  1D
01FAE:  MOVWF  FA9
01FB0:  BCF    FA6.6
01FB2:  BCF    FA6.7
01FB4:  BSF    FA6.0
01FB6:  MOVF   FA8,W
01FB8:  MOVLB  3
01FBA:  BTFSC  xC6.6
01FBC:  BSF    FF2.6
01FBE:  BTFSC  xC6.7
01FC0:  BSF    FF2.7
01FC2:  CLRF   xDC
01FC4:  MOVWF  xDB
01FC6:  MOVLB  0
01FC8:  CALL   17C6
01FCC:  MOVFF  03,2AB
01FD0:  MOVFF  02,2AA
01FD4:  MOVFF  01,2A9
01FD8:  MOVFF  00,2A8
....................    Temporal=Temporal/10.0; 
01FDC:  MOVFF  2AB,3CE
01FE0:  MOVFF  2AA,3CD
01FE4:  MOVFF  2A9,3CC
01FE8:  MOVFF  2A8,3CB
01FEC:  MOVLB  3
01FEE:  CLRF   xD2
01FF0:  CLRF   xD1
01FF2:  MOVLW  20
01FF4:  MOVWF  xD0
01FF6:  MOVLW  82
01FF8:  MOVWF  xCF
01FFA:  MOVLB  0
01FFC:  CALL   17FC
02000:  MOVFF  03,2AB
02004:  MOVFF  02,2AA
02008:  MOVFF  01,2A9
0200C:  MOVFF  00,2A8
....................    delay_ms(10); 
02010:  MOVLW  0A
02012:  MOVLB  3
02014:  MOVWF  xDB
02016:  MOVLB  0
02018:  CALL   179E
....................    Gain=read_eeprom(28)+Temporal; 
0201C:  MOVFF  FF2,3C6
02020:  BCF    FF2.6
02022:  BCF    FF2.7
02024:  CLRF   FAA
02026:  MOVLW  1C
02028:  MOVWF  FA9
0202A:  BCF    FA6.6
0202C:  BCF    FA6.7
0202E:  BSF    FA6.0
02030:  MOVF   FA8,W
02032:  MOVLB  3
02034:  BTFSC  xC6.6
02036:  BSF    FF2.6
02038:  BTFSC  xC6.7
0203A:  BSF    FF2.7
0203C:  CLRF   xDC
0203E:  MOVWF  xDB
02040:  MOVLB  0
02042:  CALL   17C6
02046:  BCF    FD8.1
02048:  MOVFF  03,3DE
0204C:  MOVFF  02,3DD
02050:  MOVFF  01,3DC
02054:  MOVFF  00,3DB
02058:  MOVFF  2AB,3E2
0205C:  MOVFF  2AA,3E1
02060:  MOVFF  2A9,3E0
02064:  MOVFF  2A8,3DF
02068:  RCALL  195A
0206A:  MOVFF  03,2A3
0206E:  MOVFF  02,2A2
02072:  MOVFF  01,2A1
02076:  MOVFF  00,2A0
....................    delay_ms(10); 
0207A:  MOVLW  0A
0207C:  MOVLB  3
0207E:  MOVWF  xDB
02080:  MOVLB  0
02082:  CALL   179E
....................    R1=make16(read_eeprom(31),read_eeprom(30)); 
02086:  MOVFF  FF2,3C6
0208A:  BCF    FF2.6
0208C:  BCF    FF2.7
0208E:  CLRF   FAA
02090:  MOVLW  1F
02092:  MOVWF  FA9
02094:  BCF    FA6.6
02096:  BCF    FA6.7
02098:  BSF    FA6.0
0209A:  MOVF   FA8,W
0209C:  MOVLB  3
0209E:  BTFSC  xC6.6
020A0:  BSF    FF2.6
020A2:  BTFSC  xC6.7
020A4:  BSF    FF2.7
020A6:  MOVWF  xC7
020A8:  MOVFF  FF2,3C8
020AC:  BCF    FF2.6
020AE:  BCF    FF2.7
020B0:  CLRF   FAA
020B2:  MOVLW  1E
020B4:  MOVWF  FA9
020B6:  BCF    FA6.6
020B8:  BCF    FA6.7
020BA:  BSF    FA6.0
020BC:  MOVF   FA8,W
020BE:  BTFSC  xC8.6
020C0:  BSF    FF2.6
020C2:  BTFSC  xC8.7
020C4:  BSF    FF2.7
020C6:  MOVWF  xC9
020C8:  MOVFF  3C7,03
020CC:  MOVF   xC9,W
020CE:  MOVWF  xDB
020D0:  MOVFF  03,3DC
020D4:  MOVLB  0
020D6:  CALL   17C6
020DA:  MOVFF  03,2AF
020DE:  MOVFF  02,2AE
020E2:  MOVFF  01,2AD
020E6:  MOVFF  00,2AC
....................    delay_ms(10); 
020EA:  MOVLW  0A
020EC:  MOVLB  3
020EE:  MOVWF  xDB
020F0:  MOVLB  0
020F2:  CALL   179E
....................    Temporal=read_eeprom(33); 
020F6:  MOVFF  FF2,3C6
020FA:  BCF    FF2.6
020FC:  BCF    FF2.7
020FE:  CLRF   FAA
02100:  MOVLW  21
02102:  MOVWF  FA9
02104:  BCF    FA6.6
02106:  BCF    FA6.7
02108:  BSF    FA6.0
0210A:  MOVF   FA8,W
0210C:  MOVLB  3
0210E:  BTFSC  xC6.6
02110:  BSF    FF2.6
02112:  BTFSC  xC6.7
02114:  BSF    FF2.7
02116:  CLRF   xDC
02118:  MOVWF  xDB
0211A:  MOVLB  0
0211C:  CALL   17C6
02120:  MOVFF  03,2AB
02124:  MOVFF  02,2AA
02128:  MOVFF  01,2A9
0212C:  MOVFF  00,2A8
....................    Temporal=Temporal/10.0; 
02130:  MOVFF  2AB,3CE
02134:  MOVFF  2AA,3CD
02138:  MOVFF  2A9,3CC
0213C:  MOVFF  2A8,3CB
02140:  MOVLB  3
02142:  CLRF   xD2
02144:  CLRF   xD1
02146:  MOVLW  20
02148:  MOVWF  xD0
0214A:  MOVLW  82
0214C:  MOVWF  xCF
0214E:  MOVLB  0
02150:  CALL   17FC
02154:  MOVFF  03,2AB
02158:  MOVFF  02,2AA
0215C:  MOVFF  01,2A9
02160:  MOVFF  00,2A8
....................    delay_ms(10); 
02164:  MOVLW  0A
02166:  MOVLB  3
02168:  MOVWF  xDB
0216A:  MOVLB  0
0216C:  CALL   179E
....................    RPT100=read_eeprom(32)+Temporal; 
02170:  MOVFF  FF2,3C6
02174:  BCF    FF2.6
02176:  BCF    FF2.7
02178:  CLRF   FAA
0217A:  MOVLW  20
0217C:  MOVWF  FA9
0217E:  BCF    FA6.6
02180:  BCF    FA6.7
02182:  BSF    FA6.0
02184:  MOVF   FA8,W
02186:  MOVLB  3
02188:  BTFSC  xC6.6
0218A:  BSF    FF2.6
0218C:  BTFSC  xC6.7
0218E:  BSF    FF2.7
02190:  CLRF   xDC
02192:  MOVWF  xDB
02194:  MOVLB  0
02196:  CALL   17C6
0219A:  BCF    FD8.1
0219C:  MOVFF  03,3DE
021A0:  MOVFF  02,3DD
021A4:  MOVFF  01,3DC
021A8:  MOVFF  00,3DB
021AC:  MOVFF  2AB,3E2
021B0:  MOVFF  2AA,3E1
021B4:  MOVFF  2A9,3E0
021B8:  MOVFF  2A8,3DF
021BC:  CALL   195A
021C0:  MOVFF  03,2A7
021C4:  MOVFF  02,2A6
021C8:  MOVFF  01,2A5
021CC:  MOVFF  00,2A4
....................    delay_ms(10); 
021D0:  MOVLW  0A
021D2:  MOVLB  3
021D4:  MOVWF  xDB
021D6:  MOVLB  0
021D8:  CALL   179E
....................    CiclosL=read_eeprom(37); 
021DC:  MOVFF  FF2,3C6
021E0:  BCF    FF2.6
021E2:  BCF    FF2.7
021E4:  CLRF   FAA
021E6:  MOVLW  25
021E8:  MOVWF  FA9
021EA:  BCF    FA6.6
021EC:  BCF    FA6.7
021EE:  BSF    FA6.0
021F0:  MOVF   FA8,W
021F2:  MOVLB  3
021F4:  BTFSC  xC6.6
021F6:  BSF    FF2.6
021F8:  BTFSC  xC6.7
021FA:  BSF    FF2.7
021FC:  MOVWF  x38
....................    delay_ms(10); 
021FE:  MOVLW  0A
02200:  MOVWF  xDB
02202:  MOVLB  0
02204:  CALL   179E
....................    CiclosH=read_eeprom(38); 
02208:  MOVFF  FF2,3C6
0220C:  BCF    FF2.6
0220E:  BCF    FF2.7
02210:  CLRF   FAA
02212:  MOVLW  26
02214:  MOVWF  FA9
02216:  BCF    FA6.6
02218:  BCF    FA6.7
0221A:  BSF    FA6.0
0221C:  MOVF   FA8,W
0221E:  MOVLB  3
02220:  BTFSC  xC6.6
02222:  BSF    FF2.6
02224:  BTFSC  xC6.7
02226:  BSF    FF2.7
02228:  MOVWF  x39
....................    delay_ms(10); 
0222A:  MOVLW  0A
0222C:  MOVWF  xDB
0222E:  MOVLB  0
02230:  CALL   179E
....................    Ciclos=make16(CiclosH,CiclosL); 
02234:  MOVFF  339,352
02238:  MOVFF  338,351
....................    delay_ms(10); 
0223C:  MOVLW  0A
0223E:  MOVLB  3
02240:  MOVWF  xDB
02242:  MOVLB  0
02244:  CALL   179E
....................    TTrampa=read_eeprom(39); 
02248:  MOVFF  FF2,3C6
0224C:  BCF    FF2.6
0224E:  BCF    FF2.7
02250:  CLRF   FAA
02252:  MOVLW  27
02254:  MOVWF  FA9
02256:  BCF    FA6.6
02258:  BCF    FA6.7
0225A:  BSF    FA6.0
0225C:  MOVF   FA8,W
0225E:  MOVLB  3
02260:  BTFSC  xC6.6
02262:  BSF    FF2.6
02264:  BTFSC  xC6.7
02266:  BSF    FF2.7
02268:  MOVLB  2
0226A:  MOVWF  xCD
....................    delay_ms(10); 
0226C:  MOVLW  0A
0226E:  MOVLB  3
02270:  MOVWF  xDB
02272:  MOVLB  0
02274:  CALL   179E
....................    ActivaImpresion=read_eeprom(40); 
02278:  MOVFF  FF2,3C6
0227C:  BCF    FF2.6
0227E:  BCF    FF2.7
02280:  CLRF   FAA
02282:  MOVLW  28
02284:  MOVWF  FA9
02286:  BCF    FA6.6
02288:  BCF    FA6.7
0228A:  BSF    FA6.0
0228C:  MOVF   FA8,W
0228E:  MOVLB  3
02290:  BTFSC  xC6.6
02292:  BSF    FF2.6
02294:  BTFSC  xC6.7
02296:  BSF    FF2.7
02298:  MOVWF  x2D
....................    delay_ms(10); 
0229A:  MOVLW  0A
0229C:  MOVWF  xDB
0229E:  MOVLB  0
022A0:  CALL   179E
....................    timpresion=read_eeprom(41); 
022A4:  MOVFF  FF2,3C6
022A8:  BCF    FF2.6
022AA:  BCF    FF2.7
022AC:  CLRF   FAA
022AE:  MOVLW  29
022B0:  MOVWF  FA9
022B2:  BCF    FA6.6
022B4:  BCF    FA6.7
022B6:  BSF    FA6.0
022B8:  MOVF   FA8,W
022BA:  MOVLB  3
022BC:  BTFSC  xC6.6
022BE:  BSF    FF2.6
022C0:  BTFSC  xC6.7
022C2:  BSF    FF2.7
022C4:  MOVWF  x2E
....................    delay_ms(10); 
022C6:  MOVLW  0A
022C8:  MOVWF  xDB
022CA:  MOVLB  0
022CC:  CALL   179E
....................    G1=read_eeprom(42); 
022D0:  MOVFF  FF2,3C6
022D4:  BCF    FF2.6
022D6:  BCF    FF2.7
022D8:  CLRF   FAA
022DA:  MOVLW  2A
022DC:  MOVWF  FA9
022DE:  BCF    FA6.6
022E0:  BCF    FA6.7
022E2:  BSF    FA6.0
022E4:  MOVF   FA8,W
022E6:  MOVLB  3
022E8:  BTFSC  xC6.6
022EA:  BSF    FF2.6
022EC:  BTFSC  xC6.7
022EE:  BSF    FF2.7
022F0:  MOVWF  x7C
....................    delay_ms(10); 
022F2:  MOVLW  0A
022F4:  MOVWF  xDB
022F6:  MOVLB  0
022F8:  CALL   179E
....................    G2=read_eeprom(43); 
022FC:  MOVFF  FF2,3C6
02300:  BCF    FF2.6
02302:  BCF    FF2.7
02304:  CLRF   FAA
02306:  MOVLW  2B
02308:  MOVWF  FA9
0230A:  BCF    FA6.6
0230C:  BCF    FA6.7
0230E:  BSF    FA6.0
02310:  MOVF   FA8,W
02312:  MOVLB  3
02314:  BTFSC  xC6.6
02316:  BSF    FF2.6
02318:  BTFSC  xC6.7
0231A:  BSF    FF2.7
0231C:  MOVWF  x7D
....................    delay_ms(10); 
0231E:  MOVLW  0A
02320:  MOVWF  xDB
02322:  MOVLB  0
02324:  CALL   179E
....................    sg1=read_eeprom(44); 
02328:  MOVFF  FF2,3C6
0232C:  BCF    FF2.6
0232E:  BCF    FF2.7
02330:  CLRF   FAA
02332:  MOVLW  2C
02334:  MOVWF  FA9
02336:  BCF    FA6.6
02338:  BCF    FA6.7
0233A:  BSF    FA6.0
0233C:  MOVF   FA8,W
0233E:  MOVLB  3
02340:  BTFSC  xC6.6
02342:  BSF    FF2.6
02344:  BTFSC  xC6.7
02346:  BSF    FF2.7
02348:  MOVWF  x7E
....................    delay_ms(10); 
0234A:  MOVLW  0A
0234C:  MOVWF  xDB
0234E:  MOVLB  0
02350:  CALL   179E
....................    sg2=read_eeprom(45); 
02354:  MOVFF  FF2,3C6
02358:  BCF    FF2.6
0235A:  BCF    FF2.7
0235C:  CLRF   FAA
0235E:  MOVLW  2D
02360:  MOVWF  FA9
02362:  BCF    FA6.6
02364:  BCF    FA6.7
02366:  BSF    FA6.0
02368:  MOVF   FA8,W
0236A:  MOVLB  3
0236C:  BTFSC  xC6.6
0236E:  BSF    FF2.6
02370:  BTFSC  xC6.7
02372:  BSF    FF2.7
02374:  MOVWF  x7F
....................     
....................    for(i=0;i<4;i++){//Lee valores almacenados de ciclos personalizados 
02376:  CLRF   x37
02378:  MOVF   x37,W
0237A:  SUBLW  03
0237C:  BTFSS  FD8.0
0237E:  BRA    28B8
....................       CiclosPersonalizados[i].Temperatura=read_eeprom(100+(i*8));  
02380:  MOVF   x37,W
02382:  MULLW  0A
02384:  MOVF   FF3,W
02386:  CLRF   xC7
02388:  MOVWF  xC6
0238A:  MOVLW  9E
0238C:  ADDWF  xC6,W
0238E:  MOVWF  FE9
02390:  MOVLW  03
02392:  ADDWFC xC7,W
02394:  MOVWF  FEA
02396:  MOVF   x37,W
02398:  MULLW  08
0239A:  MOVF   FF3,W
0239C:  ADDLW  64
0239E:  MOVWF  xC8
023A0:  MOVFF  FF2,3C9
023A4:  BCF    FF2.6
023A6:  BCF    FF2.7
023A8:  CLRF   FAA
023AA:  MOVFF  3C8,FA9
023AE:  BCF    FA6.6
023B0:  BCF    FA6.7
023B2:  BSF    FA6.0
023B4:  MOVF   FA8,W
023B6:  BTFSC  xC9.6
023B8:  BSF    FF2.6
023BA:  BTFSC  xC9.7
023BC:  BSF    FF2.7
023BE:  MOVWF  FEF
....................       CiclosPersonalizados[i].MinutoestH=read_eeprom(101+(i*8));  
023C0:  MOVF   x37,W
023C2:  MULLW  0A
023C4:  MOVF   FF3,W
023C6:  CLRF   xC7
023C8:  MOVWF  xC6
023CA:  MOVLW  01
023CC:  ADDWF  xC6,W
023CE:  MOVWF  01
023D0:  MOVLW  00
023D2:  ADDWFC xC7,W
023D4:  MOVWF  03
023D6:  MOVF   01,W
023D8:  ADDLW  9E
023DA:  MOVWF  FE9
023DC:  MOVLW  03
023DE:  ADDWFC 03,W
023E0:  MOVWF  FEA
023E2:  MOVF   x37,W
023E4:  MULLW  08
023E6:  MOVF   FF3,W
023E8:  ADDLW  65
023EA:  MOVWF  xC8
023EC:  MOVFF  FF2,3C9
023F0:  BCF    FF2.6
023F2:  BCF    FF2.7
023F4:  CLRF   FAA
023F6:  MOVFF  3C8,FA9
023FA:  BCF    FA6.6
023FC:  BCF    FA6.7
023FE:  BSF    FA6.0
02400:  MOVF   FA8,W
02402:  BTFSC  xC9.6
02404:  BSF    FF2.6
02406:  BTFSC  xC9.7
02408:  BSF    FF2.7
0240A:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutoest=read_eeprom(102+(i*8));  
0240C:  MOVF   x37,W
0240E:  MULLW  0A
02410:  MOVF   FF3,W
02412:  CLRF   xC7
02414:  MOVWF  xC6
02416:  MOVLW  09
02418:  ADDWF  xC6,W
0241A:  MOVWF  01
0241C:  MOVLW  00
0241E:  ADDWFC xC7,W
02420:  MOVWF  03
02422:  MOVF   01,W
02424:  ADDLW  9E
02426:  MOVWF  FE9
02428:  MOVLW  03
0242A:  ADDWFC 03,W
0242C:  MOVWF  FEA
0242E:  MOVF   x37,W
02430:  MULLW  08
02432:  MOVF   FF3,W
02434:  ADDLW  66
02436:  MOVWF  xC8
02438:  MOVFF  FF2,3C9
0243C:  BCF    FF2.6
0243E:  BCF    FF2.7
02440:  CLRF   FAA
02442:  MOVFF  3C8,FA9
02446:  BCF    FA6.6
02448:  BCF    FA6.7
0244A:  BSF    FA6.0
0244C:  MOVF   FA8,W
0244E:  BTFSC  xC9.6
02450:  BSF    FF2.6
02452:  BTFSC  xC9.7
02454:  BSF    FF2.7
02456:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundoest=read_eeprom(103+(i*8));  
02458:  MOVF   x37,W
0245A:  MULLW  0A
0245C:  MOVF   FF3,W
0245E:  CLRF   xC7
02460:  MOVWF  xC6
02462:  MOVLW  03
02464:  ADDWF  xC6,W
02466:  MOVWF  01
02468:  MOVLW  00
0246A:  ADDWFC xC7,W
0246C:  MOVWF  03
0246E:  MOVF   01,W
02470:  ADDLW  9E
02472:  MOVWF  FE9
02474:  MOVLW  03
02476:  ADDWFC 03,W
02478:  MOVWF  FEA
0247A:  MOVF   x37,W
0247C:  MULLW  08
0247E:  MOVF   FF3,W
02480:  ADDLW  67
02482:  MOVWF  xC8
02484:  MOVFF  FF2,3C9
02488:  BCF    FF2.6
0248A:  BCF    FF2.7
0248C:  CLRF   FAA
0248E:  MOVFF  3C8,FA9
02492:  BCF    FA6.6
02494:  BCF    FA6.7
02496:  BSF    FA6.0
02498:  MOVF   FA8,W
0249A:  BTFSC  xC9.6
0249C:  BSF    FF2.6
0249E:  BTFSC  xC9.7
024A0:  BSF    FF2.7
024A2:  MOVWF  FEF
....................       CiclosPersonalizados[i].Minutosec=read_eeprom(104+(i*8));  
024A4:  MOVF   x37,W
024A6:  MULLW  0A
024A8:  MOVF   FF3,W
024AA:  CLRF   xC7
024AC:  MOVWF  xC6
024AE:  MOVLW  04
024B0:  ADDWF  xC6,W
024B2:  MOVWF  01
024B4:  MOVLW  00
024B6:  ADDWFC xC7,W
024B8:  MOVWF  03
024BA:  MOVF   01,W
024BC:  ADDLW  9E
024BE:  MOVWF  FE9
024C0:  MOVLW  03
024C2:  ADDWFC 03,W
024C4:  MOVWF  FEA
024C6:  MOVF   x37,W
024C8:  MULLW  08
024CA:  MOVF   FF3,W
024CC:  ADDLW  68
024CE:  MOVWF  xC8
024D0:  MOVFF  FF2,3C9
024D4:  BCF    FF2.6
024D6:  BCF    FF2.7
024D8:  CLRF   FAA
024DA:  MOVFF  3C8,FA9
024DE:  BCF    FA6.6
024E0:  BCF    FA6.7
024E2:  BSF    FA6.0
024E4:  MOVF   FA8,W
024E6:  BTFSC  xC9.6
024E8:  BSF    FF2.6
024EA:  BTFSC  xC9.7
024EC:  BSF    FF2.7
024EE:  MOVWF  FEF
....................       CiclosPersonalizados[i].Segundosec=read_eeprom(105+(i*8));  
024F0:  MOVF   x37,W
024F2:  MULLW  0A
024F4:  MOVF   FF3,W
024F6:  CLRF   xC7
024F8:  MOVWF  xC6
024FA:  MOVLW  05
024FC:  ADDWF  xC6,W
024FE:  MOVWF  01
02500:  MOVLW  00
02502:  ADDWFC xC7,W
02504:  MOVWF  03
02506:  MOVF   01,W
02508:  ADDLW  9E
0250A:  MOVWF  FE9
0250C:  MOVLW  03
0250E:  ADDWFC 03,W
02510:  MOVWF  FEA
02512:  MOVF   x37,W
02514:  MULLW  08
02516:  MOVF   FF3,W
02518:  ADDLW  69
0251A:  MOVWF  xC8
0251C:  MOVFF  FF2,3C9
02520:  BCF    FF2.6
02522:  BCF    FF2.7
02524:  CLRF   FAA
02526:  MOVFF  3C8,FA9
0252A:  BCF    FA6.6
0252C:  BCF    FA6.7
0252E:  BSF    FA6.0
02530:  MOVF   FA8,W
02532:  BTFSC  xC9.6
02534:  BSF    FF2.6
02536:  BTFSC  xC9.7
02538:  BSF    FF2.7
0253A:  MOVWF  FEF
....................       CiclosPersonalizados[i].PulsosVacio=read_eeprom(106+(i*8));  
0253C:  MOVF   x37,W
0253E:  MULLW  0A
02540:  MOVF   FF3,W
02542:  CLRF   xC7
02544:  MOVWF  xC6
02546:  MOVLW  06
02548:  ADDWF  xC6,W
0254A:  MOVWF  01
0254C:  MOVLW  00
0254E:  ADDWFC xC7,W
02550:  MOVWF  03
02552:  MOVF   01,W
02554:  ADDLW  9E
02556:  MOVWF  FE9
02558:  MOVLW  03
0255A:  ADDWFC 03,W
0255C:  MOVWF  FEA
0255E:  MOVF   x37,W
02560:  MULLW  08
02562:  MOVF   FF3,W
02564:  ADDLW  6A
02566:  MOVWF  xC8
02568:  MOVFF  FF2,3C9
0256C:  BCF    FF2.6
0256E:  BCF    FF2.7
02570:  CLRF   FAA
02572:  MOVFF  3C8,FA9
02576:  BCF    FA6.6
02578:  BCF    FA6.7
0257A:  BSF    FA6.0
0257C:  MOVF   FA8,W
0257E:  BTFSC  xC9.6
02580:  BSF    FF2.6
02582:  BTFSC  xC9.7
02584:  BSF    FF2.7
02586:  MOVWF  FEF
....................       CiclosPersonalizados[i].NivelDesfogue=read_eeprom(107+(i*8));  
02588:  MOVF   x37,W
0258A:  MULLW  0A
0258C:  MOVF   FF3,W
0258E:  CLRF   xC7
02590:  MOVWF  xC6
02592:  MOVLW  08
02594:  ADDWF  xC6,W
02596:  MOVWF  01
02598:  MOVLW  00
0259A:  ADDWFC xC7,W
0259C:  MOVWF  03
0259E:  MOVF   01,W
025A0:  ADDLW  9E
025A2:  MOVWF  FE9
025A4:  MOVLW  03
025A6:  ADDWFC 03,W
025A8:  MOVWF  FEA
025AA:  MOVF   x37,W
025AC:  MULLW  08
025AE:  MOVF   FF3,W
025B0:  ADDLW  6B
025B2:  MOVWF  xC8
025B4:  MOVFF  FF2,3C9
025B8:  BCF    FF2.6
025BA:  BCF    FF2.7
025BC:  CLRF   FAA
025BE:  MOVFF  3C8,FA9
025C2:  BCF    FA6.6
025C4:  BCF    FA6.7
025C6:  BSF    FA6.0
025C8:  MOVF   FA8,W
025CA:  BTFSC  xC9.6
025CC:  BSF    FF2.6
025CE:  BTFSC  xC9.7
025D0:  BSF    FF2.7
025D2:  MOVWF  FEF
....................        
....................       if(CiclosPersonalizados[i].Temperatura>134 || CiclosPersonalizados[i].Temperatura<105) 
025D4:  MOVF   x37,W
025D6:  MULLW  0A
025D8:  MOVF   FF3,W
025DA:  CLRF   xC7
025DC:  MOVWF  xC6
025DE:  MOVLW  9E
025E0:  ADDWF  xC6,W
025E2:  MOVWF  FE9
025E4:  MOVLW  03
025E6:  ADDWFC xC7,W
025E8:  MOVWF  FEA
025EA:  MOVF   FEF,W
025EC:  SUBLW  86
025EE:  BNC   260C
025F0:  MOVF   x37,W
025F2:  MULLW  0A
025F4:  MOVF   FF3,W
025F6:  CLRF   xC7
025F8:  MOVWF  xC6
025FA:  MOVLW  9E
025FC:  ADDWF  xC6,W
025FE:  MOVWF  FE9
02600:  MOVLW  03
02602:  ADDWFC xC7,W
02604:  MOVWF  FEA
02606:  MOVF   FEF,W
02608:  SUBLW  68
0260A:  BNC   2626
....................          CiclosPersonalizados[i].Temperatura=121; 
0260C:  MOVF   x37,W
0260E:  MULLW  0A
02610:  MOVF   FF3,W
02612:  CLRF   xC7
02614:  MOVWF  xC6
02616:  MOVLW  9E
02618:  ADDWF  xC6,W
0261A:  MOVWF  FE9
0261C:  MOVLW  03
0261E:  ADDWFC xC7,W
02620:  MOVWF  FEA
02622:  MOVLW  79
02624:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].Minutoest>59) 
02626:  MOVF   x37,W
02628:  MULLW  0A
0262A:  MOVF   FF3,W
0262C:  CLRF   xC7
0262E:  MOVWF  xC6
02630:  MOVLW  09
02632:  ADDWF  xC6,W
02634:  MOVWF  01
02636:  MOVLW  00
02638:  ADDWFC xC7,W
0263A:  MOVWF  03
0263C:  MOVF   01,W
0263E:  ADDLW  9E
02640:  MOVWF  FE9
02642:  MOVLW  03
02644:  ADDWFC 03,W
02646:  MOVWF  FEA
02648:  MOVF   FEF,W
0264A:  SUBLW  3B
0264C:  BC    2672
....................          CiclosPersonalizados[i].Minutoest=0; 
0264E:  MOVF   x37,W
02650:  MULLW  0A
02652:  MOVF   FF3,W
02654:  CLRF   xC7
02656:  MOVWF  xC6
02658:  MOVLW  09
0265A:  ADDWF  xC6,W
0265C:  MOVWF  01
0265E:  MOVLW  00
02660:  ADDWFC xC7,W
02662:  MOVWF  03
02664:  MOVF   01,W
02666:  ADDLW  9E
02668:  MOVWF  FE9
0266A:  MOVLW  03
0266C:  ADDWFC 03,W
0266E:  MOVWF  FEA
02670:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
02672:  MOVF   x37,W
02674:  MULLW  0A
02676:  MOVF   FF3,W
02678:  CLRF   xC7
0267A:  MOVWF  xC6
0267C:  MOVLW  03
0267E:  ADDWF  xC6,W
02680:  MOVWF  01
02682:  MOVLW  00
02684:  ADDWFC xC7,W
02686:  MOVWF  03
02688:  MOVF   01,W
0268A:  ADDLW  9E
0268C:  MOVWF  FE9
0268E:  MOVLW  03
02690:  ADDWFC 03,W
02692:  MOVWF  FEA
02694:  MOVF   FEF,W
02696:  SUBLW  3B
02698:  BC    26BE
....................          CiclosPersonalizados[i].Segundoest=0; 
0269A:  MOVF   x37,W
0269C:  MULLW  0A
0269E:  MOVF   FF3,W
026A0:  CLRF   xC7
026A2:  MOVWF  xC6
026A4:  MOVLW  03
026A6:  ADDWF  xC6,W
026A8:  MOVWF  01
026AA:  MOVLW  00
026AC:  ADDWFC xC7,W
026AE:  MOVWF  03
026B0:  MOVF   01,W
026B2:  ADDLW  9E
026B4:  MOVWF  FE9
026B6:  MOVLW  03
026B8:  ADDWFC 03,W
026BA:  MOVWF  FEA
026BC:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Minutosec>59) 
026BE:  MOVF   x37,W
026C0:  MULLW  0A
026C2:  MOVF   FF3,W
026C4:  CLRF   xC7
026C6:  MOVWF  xC6
026C8:  MOVLW  04
026CA:  ADDWF  xC6,W
026CC:  MOVWF  01
026CE:  MOVLW  00
026D0:  ADDWFC xC7,W
026D2:  MOVWF  03
026D4:  MOVF   01,W
026D6:  ADDLW  9E
026D8:  MOVWF  FE9
026DA:  MOVLW  03
026DC:  ADDWFC 03,W
026DE:  MOVWF  FEA
026E0:  MOVF   FEF,W
026E2:  SUBLW  3B
026E4:  BC    270A
....................          CiclosPersonalizados[i].Minutosec=0;    
026E6:  MOVF   x37,W
026E8:  MULLW  0A
026EA:  MOVF   FF3,W
026EC:  CLRF   xC7
026EE:  MOVWF  xC6
026F0:  MOVLW  04
026F2:  ADDWF  xC6,W
026F4:  MOVWF  01
026F6:  MOVLW  00
026F8:  ADDWFC xC7,W
026FA:  MOVWF  03
026FC:  MOVF   01,W
026FE:  ADDLW  9E
02700:  MOVWF  FE9
02702:  MOVLW  03
02704:  ADDWFC 03,W
02706:  MOVWF  FEA
02708:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundoest>59) 
0270A:  MOVF   x37,W
0270C:  MULLW  0A
0270E:  MOVF   FF3,W
02710:  CLRF   xC7
02712:  MOVWF  xC6
02714:  MOVLW  03
02716:  ADDWF  xC6,W
02718:  MOVWF  01
0271A:  MOVLW  00
0271C:  ADDWFC xC7,W
0271E:  MOVWF  03
02720:  MOVF   01,W
02722:  ADDLW  9E
02724:  MOVWF  FE9
02726:  MOVLW  03
02728:  ADDWFC 03,W
0272A:  MOVWF  FEA
0272C:  MOVF   FEF,W
0272E:  SUBLW  3B
02730:  BC    2756
....................          CiclosPersonalizados[i].Segundoest=0; 
02732:  MOVF   x37,W
02734:  MULLW  0A
02736:  MOVF   FF3,W
02738:  CLRF   xC7
0273A:  MOVWF  xC6
0273C:  MOVLW  03
0273E:  ADDWF  xC6,W
02740:  MOVWF  01
02742:  MOVLW  00
02744:  ADDWFC xC7,W
02746:  MOVWF  03
02748:  MOVF   01,W
0274A:  ADDLW  9E
0274C:  MOVWF  FE9
0274E:  MOVLW  03
02750:  ADDWFC 03,W
02752:  MOVWF  FEA
02754:  CLRF   FEF
....................       if(CiclosPersonalizados[i].Segundosec>59) 
02756:  MOVF   x37,W
02758:  MULLW  0A
0275A:  MOVF   FF3,W
0275C:  CLRF   xC7
0275E:  MOVWF  xC6
02760:  MOVLW  05
02762:  ADDWF  xC6,W
02764:  MOVWF  01
02766:  MOVLW  00
02768:  ADDWFC xC7,W
0276A:  MOVWF  03
0276C:  MOVF   01,W
0276E:  ADDLW  9E
02770:  MOVWF  FE9
02772:  MOVLW  03
02774:  ADDWFC 03,W
02776:  MOVWF  FEA
02778:  MOVF   FEF,W
0277A:  SUBLW  3B
0277C:  BC    27A2
....................          CiclosPersonalizados[i].Segundosec=0;       
0277E:  MOVF   x37,W
02780:  MULLW  0A
02782:  MOVF   FF3,W
02784:  CLRF   xC7
02786:  MOVWF  xC6
02788:  MOVLW  05
0278A:  ADDWF  xC6,W
0278C:  MOVWF  01
0278E:  MOVLW  00
02790:  ADDWFC xC7,W
02792:  MOVWF  03
02794:  MOVF   01,W
02796:  ADDLW  9E
02798:  MOVWF  FE9
0279A:  MOVLW  03
0279C:  ADDWFC 03,W
0279E:  MOVWF  FEA
027A0:  CLRF   FEF
....................       if(CiclosPersonalizados[i].PulsosVacio>15) 
027A2:  MOVF   x37,W
027A4:  MULLW  0A
027A6:  MOVF   FF3,W
027A8:  CLRF   xC7
027AA:  MOVWF  xC6
027AC:  MOVLW  06
027AE:  ADDWF  xC6,W
027B0:  MOVWF  01
027B2:  MOVLW  00
027B4:  ADDWFC xC7,W
027B6:  MOVWF  03
027B8:  MOVF   01,W
027BA:  ADDLW  9E
027BC:  MOVWF  FE9
027BE:  MOVLW  03
027C0:  ADDWFC 03,W
027C2:  MOVWF  FEA
027C4:  MOVF   FEF,W
027C6:  SUBLW  0F
027C8:  BC    27F0
....................          CiclosPersonalizados[i].PulsosVacio=4; 
027CA:  MOVF   x37,W
027CC:  MULLW  0A
027CE:  MOVF   FF3,W
027D0:  CLRF   xC7
027D2:  MOVWF  xC6
027D4:  MOVLW  06
027D6:  ADDWF  xC6,W
027D8:  MOVWF  01
027DA:  MOVLW  00
027DC:  ADDWFC xC7,W
027DE:  MOVWF  03
027E0:  MOVF   01,W
027E2:  ADDLW  9E
027E4:  MOVWF  FE9
027E6:  MOVLW  03
027E8:  ADDWFC 03,W
027EA:  MOVWF  FEA
027EC:  MOVLW  04
027EE:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelVacio>100 || CiclosPersonalizados[i].NivelVacio<10) 
027F0:  MOVF   x37,W
027F2:  MULLW  0A
027F4:  MOVF   FF3,W
027F6:  CLRF   xC7
027F8:  MOVWF  xC6
027FA:  MOVLW  07
027FC:  ADDWF  xC6,W
027FE:  MOVWF  01
02800:  MOVLW  00
02802:  ADDWFC xC7,W
02804:  MOVWF  03
02806:  MOVF   01,W
02808:  ADDLW  9E
0280A:  MOVWF  FE9
0280C:  MOVLW  03
0280E:  ADDWFC 03,W
02810:  MOVWF  FEA
02812:  MOVF   FEF,W
02814:  SUBLW  64
02816:  BNC   2840
02818:  MOVF   x37,W
0281A:  MULLW  0A
0281C:  MOVF   FF3,W
0281E:  CLRF   xC7
02820:  MOVWF  xC6
02822:  MOVLW  07
02824:  ADDWF  xC6,W
02826:  MOVWF  01
02828:  MOVLW  00
0282A:  ADDWFC xC7,W
0282C:  MOVWF  03
0282E:  MOVF   01,W
02830:  ADDLW  9E
02832:  MOVWF  FE9
02834:  MOVLW  03
02836:  ADDWFC 03,W
02838:  MOVWF  FEA
0283A:  MOVF   FEF,W
0283C:  SUBLW  09
0283E:  BNC   2866
....................          CiclosPersonalizados[i].NivelVacio=25;    
02840:  MOVF   x37,W
02842:  MULLW  0A
02844:  MOVF   FF3,W
02846:  CLRF   xC7
02848:  MOVWF  xC6
0284A:  MOVLW  07
0284C:  ADDWF  xC6,W
0284E:  MOVWF  01
02850:  MOVLW  00
02852:  ADDWFC xC7,W
02854:  MOVWF  03
02856:  MOVF   01,W
02858:  ADDLW  9E
0285A:  MOVWF  FE9
0285C:  MOVLW  03
0285E:  ADDWFC 03,W
02860:  MOVWF  FEA
02862:  MOVLW  19
02864:  MOVWF  FEF
....................       if(CiclosPersonalizados[i].NivelDesfogue>6) 
02866:  MOVF   x37,W
02868:  MULLW  0A
0286A:  MOVF   FF3,W
0286C:  CLRF   xC7
0286E:  MOVWF  xC6
02870:  MOVLW  08
02872:  ADDWF  xC6,W
02874:  MOVWF  01
02876:  MOVLW  00
02878:  ADDWFC xC7,W
0287A:  MOVWF  03
0287C:  MOVF   01,W
0287E:  ADDLW  9E
02880:  MOVWF  FE9
02882:  MOVLW  03
02884:  ADDWFC 03,W
02886:  MOVWF  FEA
02888:  MOVF   FEF,W
0288A:  SUBLW  06
0288C:  BC    28B4
....................          CiclosPersonalizados[i].NivelDesfogue=6; 
0288E:  MOVF   x37,W
02890:  MULLW  0A
02892:  MOVF   FF3,W
02894:  CLRF   xC7
02896:  MOVWF  xC6
02898:  MOVLW  08
0289A:  ADDWF  xC6,W
0289C:  MOVWF  01
0289E:  MOVLW  00
028A0:  ADDWFC xC7,W
028A2:  MOVWF  03
028A4:  MOVF   01,W
028A6:  ADDLW  9E
028A8:  MOVWF  FE9
028AA:  MOVLW  03
028AC:  ADDWFC 03,W
028AE:  MOVWF  FEA
028B0:  MOVLW  06
028B2:  MOVWF  FEF
....................    } 
028B4:  INCF   x37,F
028B6:  BRA    2378
.................... } 
028B8:  MOVLB  0
028BA:  GOTO   5816 (RETURN)
....................  
.................... void LimitaValores(){ 
....................    if(Testerilizacionp[0]>9 || Testerilizacionp[0]<0){ 
*
02A6C:  BTFSC  xB3.7
02A6E:  BRA    2A76
02A70:  MOVF   xB3,W
02A72:  SUBLW  09
02A74:  BNC   2A7C
02A76:  BTFSC  xB3.7
02A78:  BRA    2A7C
02A7A:  BRA    2AB4
....................       Testerilizacionp[0]=0; 
02A7C:  CLRF   xB3
....................       write_eeprom(0,0); 
02A7E:  CLRF   FAA
02A80:  CLRF   FA9
02A82:  CLRF   FA8
02A84:  BCF    FA6.6
02A86:  BCF    FA6.7
02A88:  BSF    FA6.2
02A8A:  MOVF   FF2,W
02A8C:  MOVWF  00
02A8E:  BCF    FF2.6
02A90:  BCF    FF2.7
02A92:  MOVLB  F
02A94:  MOVLW  55
02A96:  MOVWF  FA7
02A98:  MOVLW  AA
02A9A:  MOVWF  FA7
02A9C:  BSF    FA6.1
02A9E:  BTFSC  FA6.1
02AA0:  BRA    2A9E
02AA2:  BCF    FA6.2
02AA4:  MOVF   00,W
02AA6:  IORWF  FF2,F
....................       delay_ms(10); 
02AA8:  MOVLW  0A
02AAA:  MOVLB  3
02AAC:  MOVWF  xDB
02AAE:  MOVLB  0
02AB0:  CALL   179E
....................    } 
....................    if(Testerilizacionp[1]>9 || Testerilizacionp[1]<0){ 
02AB4:  BTFSC  xB4.7
02AB6:  BRA    2ABE
02AB8:  MOVF   xB4,W
02ABA:  SUBLW  09
02ABC:  BNC   2AC4
02ABE:  BTFSC  xB4.7
02AC0:  BRA    2AC4
02AC2:  BRA    2AFE
....................       Testerilizacionp[1]=0; 
02AC4:  CLRF   xB4
....................       write_eeprom(1,0); 
02AC6:  CLRF   FAA
02AC8:  MOVLW  01
02ACA:  MOVWF  FA9
02ACC:  CLRF   FA8
02ACE:  BCF    FA6.6
02AD0:  BCF    FA6.7
02AD2:  BSF    FA6.2
02AD4:  MOVF   FF2,W
02AD6:  MOVWF  00
02AD8:  BCF    FF2.6
02ADA:  BCF    FF2.7
02ADC:  MOVLB  F
02ADE:  MOVLW  55
02AE0:  MOVWF  FA7
02AE2:  MOVLW  AA
02AE4:  MOVWF  FA7
02AE6:  BSF    FA6.1
02AE8:  BTFSC  FA6.1
02AEA:  BRA    2AE8
02AEC:  BCF    FA6.2
02AEE:  MOVF   00,W
02AF0:  IORWF  FF2,F
....................       delay_ms(10); 
02AF2:  MOVLW  0A
02AF4:  MOVLB  3
02AF6:  MOVWF  xDB
02AF8:  MOVLB  0
02AFA:  CALL   179E
....................    } 
....................    if(Testerilizacionp[2]>9 || Testerilizacionp[2]<0){ 
02AFE:  BTFSC  xB5.7
02B00:  BRA    2B08
02B02:  MOVF   xB5,W
02B04:  SUBLW  09
02B06:  BNC   2B0E
02B08:  BTFSC  xB5.7
02B0A:  BRA    2B0E
02B0C:  BRA    2B48
....................       Testerilizacionp[2]=0; 
02B0E:  CLRF   xB5
....................       write_eeprom(2,0); 
02B10:  CLRF   FAA
02B12:  MOVLW  02
02B14:  MOVWF  FA9
02B16:  CLRF   FA8
02B18:  BCF    FA6.6
02B1A:  BCF    FA6.7
02B1C:  BSF    FA6.2
02B1E:  MOVF   FF2,W
02B20:  MOVWF  00
02B22:  BCF    FF2.6
02B24:  BCF    FF2.7
02B26:  MOVLB  F
02B28:  MOVLW  55
02B2A:  MOVWF  FA7
02B2C:  MOVLW  AA
02B2E:  MOVWF  FA7
02B30:  BSF    FA6.1
02B32:  BTFSC  FA6.1
02B34:  BRA    2B32
02B36:  BCF    FA6.2
02B38:  MOVF   00,W
02B3A:  IORWF  FF2,F
....................       delay_ms(10); 
02B3C:  MOVLW  0A
02B3E:  MOVLB  3
02B40:  MOVWF  xDB
02B42:  MOVLB  0
02B44:  CALL   179E
....................    } 
....................    if(Testerilizacionp[3]>9 || Testerilizacionp[3]<0){ 
02B48:  BTFSC  xB6.7
02B4A:  BRA    2B52
02B4C:  MOVF   xB6,W
02B4E:  SUBLW  09
02B50:  BNC   2B58
02B52:  BTFSC  xB6.7
02B54:  BRA    2B58
02B56:  BRA    2B92
....................       Testerilizacionp[3]=0; 
02B58:  CLRF   xB6
....................       write_eeprom(3,0); 
02B5A:  CLRF   FAA
02B5C:  MOVLW  03
02B5E:  MOVWF  FA9
02B60:  CLRF   FA8
02B62:  BCF    FA6.6
02B64:  BCF    FA6.7
02B66:  BSF    FA6.2
02B68:  MOVF   FF2,W
02B6A:  MOVWF  00
02B6C:  BCF    FF2.6
02B6E:  BCF    FF2.7
02B70:  MOVLB  F
02B72:  MOVLW  55
02B74:  MOVWF  FA7
02B76:  MOVLW  AA
02B78:  MOVWF  FA7
02B7A:  BSF    FA6.1
02B7C:  BTFSC  FA6.1
02B7E:  BRA    2B7C
02B80:  BCF    FA6.2
02B82:  MOVF   00,W
02B84:  IORWF  FF2,F
....................       delay_ms(10); 
02B86:  MOVLW  0A
02B88:  MOVLB  3
02B8A:  MOVWF  xDB
02B8C:  MOVLB  0
02B8E:  CALL   179E
....................    } 
....................    if(Tsecadop[0]>9 || Tsecadop[0]<0){ 
02B92:  BTFSC  xBC.7
02B94:  BRA    2B9C
02B96:  MOVF   xBC,W
02B98:  SUBLW  09
02B9A:  BNC   2BA2
02B9C:  BTFSC  xBC.7
02B9E:  BRA    2BA2
02BA0:  BRA    2BDC
....................       Tsecadop[0]=0; 
02BA2:  CLRF   xBC
....................       write_eeprom(4,0); 
02BA4:  CLRF   FAA
02BA6:  MOVLW  04
02BA8:  MOVWF  FA9
02BAA:  CLRF   FA8
02BAC:  BCF    FA6.6
02BAE:  BCF    FA6.7
02BB0:  BSF    FA6.2
02BB2:  MOVF   FF2,W
02BB4:  MOVWF  00
02BB6:  BCF    FF2.6
02BB8:  BCF    FF2.7
02BBA:  MOVLB  F
02BBC:  MOVLW  55
02BBE:  MOVWF  FA7
02BC0:  MOVLW  AA
02BC2:  MOVWF  FA7
02BC4:  BSF    FA6.1
02BC6:  BTFSC  FA6.1
02BC8:  BRA    2BC6
02BCA:  BCF    FA6.2
02BCC:  MOVF   00,W
02BCE:  IORWF  FF2,F
....................       delay_ms(10); 
02BD0:  MOVLW  0A
02BD2:  MOVLB  3
02BD4:  MOVWF  xDB
02BD6:  MOVLB  0
02BD8:  CALL   179E
....................    } 
....................    if(Tsecadop[1]>9 || Tsecadop[1]<0){ 
02BDC:  BTFSC  xBD.7
02BDE:  BRA    2BE6
02BE0:  MOVF   xBD,W
02BE2:  SUBLW  09
02BE4:  BNC   2BEC
02BE6:  BTFSC  xBD.7
02BE8:  BRA    2BEC
02BEA:  BRA    2C26
....................       Tsecadop[1]=0; 
02BEC:  CLRF   xBD
....................       write_eeprom(5,0); 
02BEE:  CLRF   FAA
02BF0:  MOVLW  05
02BF2:  MOVWF  FA9
02BF4:  CLRF   FA8
02BF6:  BCF    FA6.6
02BF8:  BCF    FA6.7
02BFA:  BSF    FA6.2
02BFC:  MOVF   FF2,W
02BFE:  MOVWF  00
02C00:  BCF    FF2.6
02C02:  BCF    FF2.7
02C04:  MOVLB  F
02C06:  MOVLW  55
02C08:  MOVWF  FA7
02C0A:  MOVLW  AA
02C0C:  MOVWF  FA7
02C0E:  BSF    FA6.1
02C10:  BTFSC  FA6.1
02C12:  BRA    2C10
02C14:  BCF    FA6.2
02C16:  MOVF   00,W
02C18:  IORWF  FF2,F
....................       delay_ms(10); 
02C1A:  MOVLW  0A
02C1C:  MOVLB  3
02C1E:  MOVWF  xDB
02C20:  MOVLB  0
02C22:  CALL   179E
....................    } 
....................    if(Tsecadop[2]>9 || Tsecadop[2]<0){ 
02C26:  BTFSC  xBE.7
02C28:  BRA    2C30
02C2A:  MOVF   xBE,W
02C2C:  SUBLW  09
02C2E:  BNC   2C36
02C30:  BTFSC  xBE.7
02C32:  BRA    2C36
02C34:  BRA    2C70
....................       Tsecadop[2]=0; 
02C36:  CLRF   xBE
....................       write_eeprom(6,0); 
02C38:  CLRF   FAA
02C3A:  MOVLW  06
02C3C:  MOVWF  FA9
02C3E:  CLRF   FA8
02C40:  BCF    FA6.6
02C42:  BCF    FA6.7
02C44:  BSF    FA6.2
02C46:  MOVF   FF2,W
02C48:  MOVWF  00
02C4A:  BCF    FF2.6
02C4C:  BCF    FF2.7
02C4E:  MOVLB  F
02C50:  MOVLW  55
02C52:  MOVWF  FA7
02C54:  MOVLW  AA
02C56:  MOVWF  FA7
02C58:  BSF    FA6.1
02C5A:  BTFSC  FA6.1
02C5C:  BRA    2C5A
02C5E:  BCF    FA6.2
02C60:  MOVF   00,W
02C62:  IORWF  FF2,F
....................       delay_ms(10); 
02C64:  MOVLW  0A
02C66:  MOVLB  3
02C68:  MOVWF  xDB
02C6A:  MOVLB  0
02C6C:  CALL   179E
....................    } 
....................    if(Tsecadop[3]>9 || Tsecadop[3]<0){ 
02C70:  BTFSC  xBF.7
02C72:  BRA    2C7A
02C74:  MOVF   xBF,W
02C76:  SUBLW  09
02C78:  BNC   2C80
02C7A:  BTFSC  xBF.7
02C7C:  BRA    2C80
02C7E:  BRA    2CBA
....................       Tsecadop[3]=0; 
02C80:  CLRF   xBF
....................       write_eeprom(7,0); 
02C82:  CLRF   FAA
02C84:  MOVLW  07
02C86:  MOVWF  FA9
02C88:  CLRF   FA8
02C8A:  BCF    FA6.6
02C8C:  BCF    FA6.7
02C8E:  BSF    FA6.2
02C90:  MOVF   FF2,W
02C92:  MOVWF  00
02C94:  BCF    FF2.6
02C96:  BCF    FF2.7
02C98:  MOVLB  F
02C9A:  MOVLW  55
02C9C:  MOVWF  FA7
02C9E:  MOVLW  AA
02CA0:  MOVWF  FA7
02CA2:  BSF    FA6.1
02CA4:  BTFSC  FA6.1
02CA6:  BRA    2CA4
02CA8:  BCF    FA6.2
02CAA:  MOVF   00,W
02CAC:  IORWF  FF2,F
....................       delay_ms(10); 
02CAE:  MOVLW  0A
02CB0:  MOVLB  3
02CB2:  MOVWF  xDB
02CB4:  MOVLB  0
02CB6:  CALL   179E
....................    } 
....................    if(Setpoint>134){ 
02CBA:  MOVLB  3
02CBC:  MOVF   x3B,W
02CBE:  SUBLW  86
02CC0:  BC    2D02
....................       Setpoint=134; 
02CC2:  MOVLW  86
02CC4:  MOVWF  x3B
....................       write_eeprom(8,134); 
02CC6:  CLRF   FAA
02CC8:  MOVLW  08
02CCA:  MOVWF  FA9
02CCC:  MOVLW  86
02CCE:  MOVWF  FA8
02CD0:  BCF    FA6.6
02CD2:  BCF    FA6.7
02CD4:  BSF    FA6.2
02CD6:  MOVF   FF2,W
02CD8:  MOVWF  00
02CDA:  BCF    FF2.6
02CDC:  BCF    FF2.7
02CDE:  MOVLB  F
02CE0:  MOVLW  55
02CE2:  MOVWF  FA7
02CE4:  MOVLW  AA
02CE6:  MOVWF  FA7
02CE8:  BSF    FA6.1
02CEA:  BTFSC  FA6.1
02CEC:  BRA    2CEA
02CEE:  BCF    FA6.2
02CF0:  MOVF   00,W
02CF2:  IORWF  FF2,F
....................       delay_ms(10); 
02CF4:  MOVLW  0A
02CF6:  MOVLB  3
02CF8:  MOVWF  xDB
02CFA:  MOVLB  0
02CFC:  CALL   179E
02D00:  MOVLB  3
....................    } 
....................    if(Nivel>6){ 
02D02:  MOVF   x4A,F
02D04:  BNZ   2D0C
02D06:  MOVF   x49,W
02D08:  SUBLW  06
02D0A:  BC    2D4E
....................       Nivel=3; 
02D0C:  CLRF   x4A
02D0E:  MOVLW  03
02D10:  MOVWF  x49
....................       write_eeprom(9,3); 
02D12:  CLRF   FAA
02D14:  MOVLW  09
02D16:  MOVWF  FA9
02D18:  MOVLW  03
02D1A:  MOVWF  FA8
02D1C:  BCF    FA6.6
02D1E:  BCF    FA6.7
02D20:  BSF    FA6.2
02D22:  MOVF   FF2,W
02D24:  MOVWF  00
02D26:  BCF    FF2.6
02D28:  BCF    FF2.7
02D2A:  MOVLB  F
02D2C:  MOVLW  55
02D2E:  MOVWF  FA7
02D30:  MOVLW  AA
02D32:  MOVWF  FA7
02D34:  BSF    FA6.1
02D36:  BTFSC  FA6.1
02D38:  BRA    2D36
02D3A:  BCF    FA6.2
02D3C:  MOVF   00,W
02D3E:  IORWF  FF2,F
....................       delay_ms(10); 
02D40:  MOVLW  0A
02D42:  MOVLB  3
02D44:  MOVWF  xDB
02D46:  MOVLB  0
02D48:  CALL   179E
02D4C:  MOVLB  3
....................    } 
....................    if(Password[0]>9 || Password[0]<0){ 
02D4E:  BTFSC  x59.7
02D50:  BRA    2D58
02D52:  MOVF   x59,W
02D54:  SUBLW  09
02D56:  BNC   2D5E
02D58:  BTFSC  x59.7
02D5A:  BRA    2D5E
02D5C:  BRA    2D9A
....................       Password[0]=0; 
02D5E:  CLRF   x59
....................       write_eeprom(10,0); 
02D60:  CLRF   FAA
02D62:  MOVLW  0A
02D64:  MOVWF  FA9
02D66:  CLRF   FA8
02D68:  BCF    FA6.6
02D6A:  BCF    FA6.7
02D6C:  BSF    FA6.2
02D6E:  MOVF   FF2,W
02D70:  MOVWF  00
02D72:  BCF    FF2.6
02D74:  BCF    FF2.7
02D76:  MOVLB  F
02D78:  MOVLW  55
02D7A:  MOVWF  FA7
02D7C:  MOVLW  AA
02D7E:  MOVWF  FA7
02D80:  BSF    FA6.1
02D82:  BTFSC  FA6.1
02D84:  BRA    2D82
02D86:  BCF    FA6.2
02D88:  MOVF   00,W
02D8A:  IORWF  FF2,F
....................       delay_ms(10); 
02D8C:  MOVLW  0A
02D8E:  MOVLB  3
02D90:  MOVWF  xDB
02D92:  MOVLB  0
02D94:  CALL   179E
02D98:  MOVLB  3
....................    } 
....................    if(Password[1]>9 || Password[1]<0){ 
02D9A:  BTFSC  x5A.7
02D9C:  BRA    2DA4
02D9E:  MOVF   x5A,W
02DA0:  SUBLW  09
02DA2:  BNC   2DAA
02DA4:  BTFSC  x5A.7
02DA6:  BRA    2DAA
02DA8:  BRA    2DE6
....................       Password[1]=0; 
02DAA:  CLRF   x5A
....................       write_eeprom(11,0); 
02DAC:  CLRF   FAA
02DAE:  MOVLW  0B
02DB0:  MOVWF  FA9
02DB2:  CLRF   FA8
02DB4:  BCF    FA6.6
02DB6:  BCF    FA6.7
02DB8:  BSF    FA6.2
02DBA:  MOVF   FF2,W
02DBC:  MOVWF  00
02DBE:  BCF    FF2.6
02DC0:  BCF    FF2.7
02DC2:  MOVLB  F
02DC4:  MOVLW  55
02DC6:  MOVWF  FA7
02DC8:  MOVLW  AA
02DCA:  MOVWF  FA7
02DCC:  BSF    FA6.1
02DCE:  BTFSC  FA6.1
02DD0:  BRA    2DCE
02DD2:  BCF    FA6.2
02DD4:  MOVF   00,W
02DD6:  IORWF  FF2,F
....................       delay_ms(10); 
02DD8:  MOVLW  0A
02DDA:  MOVLB  3
02DDC:  MOVWF  xDB
02DDE:  MOVLB  0
02DE0:  CALL   179E
02DE4:  MOVLB  3
....................    } 
....................    if(Password[2]>9 || Password[2]<0){ 
02DE6:  BTFSC  x5B.7
02DE8:  BRA    2DF0
02DEA:  MOVF   x5B,W
02DEC:  SUBLW  09
02DEE:  BNC   2DF6
02DF0:  BTFSC  x5B.7
02DF2:  BRA    2DF6
02DF4:  BRA    2E32
....................       Password[2]=0; 
02DF6:  CLRF   x5B
....................       write_eeprom(12,0); 
02DF8:  CLRF   FAA
02DFA:  MOVLW  0C
02DFC:  MOVWF  FA9
02DFE:  CLRF   FA8
02E00:  BCF    FA6.6
02E02:  BCF    FA6.7
02E04:  BSF    FA6.2
02E06:  MOVF   FF2,W
02E08:  MOVWF  00
02E0A:  BCF    FF2.6
02E0C:  BCF    FF2.7
02E0E:  MOVLB  F
02E10:  MOVLW  55
02E12:  MOVWF  FA7
02E14:  MOVLW  AA
02E16:  MOVWF  FA7
02E18:  BSF    FA6.1
02E1A:  BTFSC  FA6.1
02E1C:  BRA    2E1A
02E1E:  BCF    FA6.2
02E20:  MOVF   00,W
02E22:  IORWF  FF2,F
....................       delay_ms(10); 
02E24:  MOVLW  0A
02E26:  MOVLB  3
02E28:  MOVWF  xDB
02E2A:  MOVLB  0
02E2C:  CALL   179E
02E30:  MOVLB  3
....................    } 
....................    if(Password[3]>9 || Password[3]<0){ 
02E32:  BTFSC  x5C.7
02E34:  BRA    2E3C
02E36:  MOVF   x5C,W
02E38:  SUBLW  09
02E3A:  BNC   2E42
02E3C:  BTFSC  x5C.7
02E3E:  BRA    2E42
02E40:  BRA    2E7E
....................       Password[3]=0; 
02E42:  CLRF   x5C
....................       write_eeprom(13,0); 
02E44:  CLRF   FAA
02E46:  MOVLW  0D
02E48:  MOVWF  FA9
02E4A:  CLRF   FA8
02E4C:  BCF    FA6.6
02E4E:  BCF    FA6.7
02E50:  BSF    FA6.2
02E52:  MOVF   FF2,W
02E54:  MOVWF  00
02E56:  BCF    FF2.6
02E58:  BCF    FF2.7
02E5A:  MOVLB  F
02E5C:  MOVLW  55
02E5E:  MOVWF  FA7
02E60:  MOVLW  AA
02E62:  MOVWF  FA7
02E64:  BSF    FA6.1
02E66:  BTFSC  FA6.1
02E68:  BRA    2E66
02E6A:  BCF    FA6.2
02E6C:  MOVF   00,W
02E6E:  IORWF  FF2,F
....................       delay_ms(10); 
02E70:  MOVLW  0A
02E72:  MOVLB  3
02E74:  MOVWF  xDB
02E76:  MOVLB  0
02E78:  CALL   179E
02E7C:  MOVLB  3
....................    } 
....................    if(Ganancia>12.0){ 
02E7E:  CLRF   xCD
02E80:  CLRF   xCC
02E82:  MOVLW  40
02E84:  MOVWF  xCB
02E86:  MOVLW  82
02E88:  MOVWF  xCA
02E8A:  MOVFF  2F5,3D1
02E8E:  MOVFF  2F4,3D0
02E92:  MOVFF  2F3,3CF
02E96:  MOVFF  2F2,3CE
02E9A:  MOVLB  0
02E9C:  RCALL  29A4
02E9E:  BNC   2EE8
....................       Ganancia=12.0; 
02EA0:  MOVLB  2
02EA2:  CLRF   xF5
02EA4:  CLRF   xF4
02EA6:  MOVLW  40
02EA8:  MOVWF  xF3
02EAA:  MOVLW  82
02EAC:  MOVWF  xF2
....................       write_eeprom(20,12); 
02EAE:  CLRF   FAA
02EB0:  MOVLW  14
02EB2:  MOVWF  FA9
02EB4:  MOVLW  0C
02EB6:  MOVWF  FA8
02EB8:  BCF    FA6.6
02EBA:  BCF    FA6.7
02EBC:  BSF    FA6.2
02EBE:  MOVF   FF2,W
02EC0:  MOVWF  00
02EC2:  BCF    FF2.6
02EC4:  BCF    FF2.7
02EC6:  MOVLB  F
02EC8:  MOVLW  55
02ECA:  MOVWF  FA7
02ECC:  MOVLW  AA
02ECE:  MOVWF  FA7
02ED0:  BSF    FA6.1
02ED2:  BTFSC  FA6.1
02ED4:  BRA    2ED2
02ED6:  BCF    FA6.2
02ED8:  MOVF   00,W
02EDA:  IORWF  FF2,F
....................       delay_ms(10); 
02EDC:  MOVLW  0A
02EDE:  MOVLB  3
02EE0:  MOVWF  xDB
02EE2:  MOVLB  0
02EE4:  CALL   179E
....................    } 
....................    if(Ajuste>10){ 
02EE8:  MOVLB  2
02EEA:  MOVF   xCA,W
02EEC:  SUBLW  0A
02EEE:  BC    2F2C
....................       Ajuste=0; 
02EF0:  CLRF   xCA
....................       write_eeprom(21,0); 
02EF2:  CLRF   FAA
02EF4:  MOVLW  15
02EF6:  MOVWF  FA9
02EF8:  CLRF   FA8
02EFA:  BCF    FA6.6
02EFC:  BCF    FA6.7
02EFE:  BSF    FA6.2
02F00:  MOVF   FF2,W
02F02:  MOVWF  00
02F04:  BCF    FF2.6
02F06:  BCF    FF2.7
02F08:  MOVLB  F
02F0A:  MOVLW  55
02F0C:  MOVWF  FA7
02F0E:  MOVLW  AA
02F10:  MOVWF  FA7
02F12:  BSF    FA6.1
02F14:  BTFSC  FA6.1
02F16:  BRA    2F14
02F18:  BCF    FA6.2
02F1A:  MOVF   00,W
02F1C:  IORWF  FF2,F
....................       delay_ms(10); 
02F1E:  MOVLW  0A
02F20:  MOVLB  3
02F22:  MOVWF  xDB
02F24:  MOVLB  0
02F26:  CALL   179E
02F2A:  MOVLB  2
....................    } 
....................    if(Ajusten>10){ 
02F2C:  MOVF   xCB,W
02F2E:  SUBLW  0A
02F30:  BC    2F6E
....................       Ajusten=0; 
02F32:  CLRF   xCB
....................       write_eeprom(22,0); 
02F34:  CLRF   FAA
02F36:  MOVLW  16
02F38:  MOVWF  FA9
02F3A:  CLRF   FA8
02F3C:  BCF    FA6.6
02F3E:  BCF    FA6.7
02F40:  BSF    FA6.2
02F42:  MOVF   FF2,W
02F44:  MOVWF  00
02F46:  BCF    FF2.6
02F48:  BCF    FF2.7
02F4A:  MOVLB  F
02F4C:  MOVLW  55
02F4E:  MOVWF  FA7
02F50:  MOVLW  AA
02F52:  MOVWF  FA7
02F54:  BSF    FA6.1
02F56:  BTFSC  FA6.1
02F58:  BRA    2F56
02F5A:  BCF    FA6.2
02F5C:  MOVF   00,W
02F5E:  IORWF  FF2,F
....................       delay_ms(10); 
02F60:  MOVLW  0A
02F62:  MOVLB  3
02F64:  MOVWF  xDB
02F66:  MOVLB  0
02F68:  CALL   179E
02F6C:  MOVLB  2
....................    } 
....................    if(MediaMovil>80){ 
02F6E:  MOVF   xCC,W
02F70:  SUBLW  50
02F72:  BC    2FB2
....................       MediaMovil=80; 
02F74:  MOVLW  50
02F76:  MOVWF  xCC
....................       write_eeprom(24,80); 
02F78:  CLRF   FAA
02F7A:  MOVLW  18
02F7C:  MOVWF  FA9
02F7E:  MOVLW  50
02F80:  MOVWF  FA8
02F82:  BCF    FA6.6
02F84:  BCF    FA6.7
02F86:  BSF    FA6.2
02F88:  MOVF   FF2,W
02F8A:  MOVWF  00
02F8C:  BCF    FF2.6
02F8E:  BCF    FF2.7
02F90:  MOVLB  F
02F92:  MOVLW  55
02F94:  MOVWF  FA7
02F96:  MOVLW  AA
02F98:  MOVWF  FA7
02F9A:  BSF    FA6.1
02F9C:  BTFSC  FA6.1
02F9E:  BRA    2F9C
02FA0:  BCF    FA6.2
02FA2:  MOVF   00,W
02FA4:  IORWF  FF2,F
....................       delay_ms(10); 
02FA6:  MOVLW  0A
02FA8:  MOVLB  3
02FAA:  MOVWF  xDB
02FAC:  MOVLB  0
02FAE:  CALL   179E
....................    } 
....................    if(Tciclo>10){ 
02FB2:  MOVLB  3
02FB4:  CLRF   xCD
02FB6:  CLRF   xCC
02FB8:  MOVLW  20
02FBA:  MOVWF  xCB
02FBC:  MOVLW  82
02FBE:  MOVWF  xCA
02FC0:  MOVFF  2DD,3D1
02FC4:  MOVFF  2DC,3D0
02FC8:  MOVFF  2DB,3CF
02FCC:  MOVFF  2DA,3CE
02FD0:  MOVLB  0
02FD2:  RCALL  29A4
02FD4:  BNC   301E
....................       Tciclo=10; 
02FD6:  MOVLB  2
02FD8:  CLRF   xDD
02FDA:  CLRF   xDC
02FDC:  MOVLW  20
02FDE:  MOVWF  xDB
02FE0:  MOVLW  82
02FE2:  MOVWF  xDA
....................       write_eeprom(25,10); 
02FE4:  CLRF   FAA
02FE6:  MOVLW  19
02FE8:  MOVWF  FA9
02FEA:  MOVLW  0A
02FEC:  MOVWF  FA8
02FEE:  BCF    FA6.6
02FF0:  BCF    FA6.7
02FF2:  BSF    FA6.2
02FF4:  MOVF   FF2,W
02FF6:  MOVWF  00
02FF8:  BCF    FF2.6
02FFA:  BCF    FF2.7
02FFC:  MOVLB  F
02FFE:  MOVLW  55
03000:  MOVWF  FA7
03002:  MOVLW  AA
03004:  MOVWF  FA7
03006:  BSF    FA6.1
03008:  BTFSC  FA6.1
0300A:  BRA    3008
0300C:  BCF    FA6.2
0300E:  MOVF   00,W
03010:  IORWF  FF2,F
....................       delay_ms(10); 
03012:  MOVLW  0A
03014:  MOVLB  3
03016:  MOVWF  xDB
03018:  MOVLB  0
0301A:  CALL   179E
....................    } 
....................    if(Integral>2.0){ 
0301E:  MOVLB  3
03020:  CLRF   xDC
03022:  MOVFF  326,3DB
03026:  MOVLB  0
03028:  CALL   17C6
0302C:  MOVLB  3
0302E:  CLRF   xCD
03030:  CLRF   xCC
03032:  CLRF   xCB
03034:  MOVLW  80
03036:  MOVWF  xCA
03038:  MOVFF  03,3D1
0303C:  MOVFF  02,3D0
03040:  MOVFF  01,3CF
03044:  MOVFF  00,3CE
03048:  MOVLB  0
0304A:  RCALL  29A4
0304C:  BNC   308E
....................       Integral=1.0; 
0304E:  MOVLW  01
03050:  MOVLB  3
03052:  MOVWF  x26
....................       write_eeprom(26,1); 
03054:  CLRF   FAA
03056:  MOVLW  1A
03058:  MOVWF  FA9
0305A:  MOVLW  01
0305C:  MOVWF  FA8
0305E:  BCF    FA6.6
03060:  BCF    FA6.7
03062:  BSF    FA6.2
03064:  MOVF   FF2,W
03066:  MOVWF  00
03068:  BCF    FF2.6
0306A:  BCF    FF2.7
0306C:  MOVLB  F
0306E:  MOVLW  55
03070:  MOVWF  FA7
03072:  MOVLW  AA
03074:  MOVWF  FA7
03076:  BSF    FA6.1
03078:  BTFSC  FA6.1
0307A:  BRA    3078
0307C:  BCF    FA6.2
0307E:  MOVF   00,W
03080:  IORWF  FF2,F
....................       delay_ms(10); 
03082:  MOVLW  0A
03084:  MOVLB  3
03086:  MOVWF  xDB
03088:  MOVLB  0
0308A:  CALL   179E
....................    } 
....................    if(Derivativo>20.0){ 
0308E:  MOVLB  3
03090:  CLRF   xDC
03092:  MOVFF  327,3DB
03096:  MOVLB  0
03098:  CALL   17C6
0309C:  MOVLB  3
0309E:  CLRF   xCD
030A0:  CLRF   xCC
030A2:  MOVLW  20
030A4:  MOVWF  xCB
030A6:  MOVLW  83
030A8:  MOVWF  xCA
030AA:  MOVFF  03,3D1
030AE:  MOVFF  02,3D0
030B2:  MOVFF  01,3CF
030B6:  MOVFF  00,3CE
030BA:  MOVLB  0
030BC:  RCALL  29A4
030BE:  BNC   3100
....................       Derivativo=15.0; 
030C0:  MOVLW  0F
030C2:  MOVLB  3
030C4:  MOVWF  x27
....................       write_eeprom(27,15); 
030C6:  CLRF   FAA
030C8:  MOVLW  1B
030CA:  MOVWF  FA9
030CC:  MOVLW  0F
030CE:  MOVWF  FA8
030D0:  BCF    FA6.6
030D2:  BCF    FA6.7
030D4:  BSF    FA6.2
030D6:  MOVF   FF2,W
030D8:  MOVWF  00
030DA:  BCF    FF2.6
030DC:  BCF    FF2.7
030DE:  MOVLB  F
030E0:  MOVLW  55
030E2:  MOVWF  FA7
030E4:  MOVLW  AA
030E6:  MOVWF  FA7
030E8:  BSF    FA6.1
030EA:  BTFSC  FA6.1
030EC:  BRA    30EA
030EE:  BCF    FA6.2
030F0:  MOVF   00,W
030F2:  IORWF  FF2,F
....................       delay_ms(10); 
030F4:  MOVLW  0A
030F6:  MOVLB  3
030F8:  MOVWF  xDB
030FA:  MOVLB  0
030FC:  CALL   179E
....................    } 
....................    if(Gain>50){ 
03100:  MOVLB  3
03102:  CLRF   xCD
03104:  CLRF   xCC
03106:  MOVLW  48
03108:  MOVWF  xCB
0310A:  MOVLW  84
0310C:  MOVWF  xCA
0310E:  MOVFF  2A3,3D1
03112:  MOVFF  2A2,3D0
03116:  MOVFF  2A1,3CF
0311A:  MOVFF  2A0,3CE
0311E:  MOVLB  0
03120:  RCALL  29A4
03122:  BNC   31AA
....................       Gain=40.2; 
03124:  MOVLW  CD
03126:  MOVLB  2
03128:  MOVWF  xA3
0312A:  MOVLW  CC
0312C:  MOVWF  xA2
0312E:  MOVLW  20
03130:  MOVWF  xA1
03132:  MOVLW  84
03134:  MOVWF  xA0
....................       write_eeprom(28,40); 
03136:  CLRF   FAA
03138:  MOVLW  1C
0313A:  MOVWF  FA9
0313C:  MOVLW  28
0313E:  MOVWF  FA8
03140:  BCF    FA6.6
03142:  BCF    FA6.7
03144:  BSF    FA6.2
03146:  MOVF   FF2,W
03148:  MOVWF  00
0314A:  BCF    FF2.6
0314C:  BCF    FF2.7
0314E:  MOVLB  F
03150:  MOVLW  55
03152:  MOVWF  FA7
03154:  MOVLW  AA
03156:  MOVWF  FA7
03158:  BSF    FA6.1
0315A:  BTFSC  FA6.1
0315C:  BRA    315A
0315E:  BCF    FA6.2
03160:  MOVF   00,W
03162:  IORWF  FF2,F
....................       delay_ms(10); 
03164:  MOVLW  0A
03166:  MOVLB  3
03168:  MOVWF  xDB
0316A:  MOVLB  0
0316C:  CALL   179E
....................       write_eeprom(29,2); 
03170:  CLRF   FAA
03172:  MOVLW  1D
03174:  MOVWF  FA9
03176:  MOVLW  02
03178:  MOVWF  FA8
0317A:  BCF    FA6.6
0317C:  BCF    FA6.7
0317E:  BSF    FA6.2
03180:  MOVF   FF2,W
03182:  MOVWF  00
03184:  BCF    FF2.6
03186:  BCF    FF2.7
03188:  MOVLB  F
0318A:  MOVLW  55
0318C:  MOVWF  FA7
0318E:  MOVLW  AA
03190:  MOVWF  FA7
03192:  BSF    FA6.1
03194:  BTFSC  FA6.1
03196:  BRA    3194
03198:  BCF    FA6.2
0319A:  MOVF   00,W
0319C:  IORWF  FF2,F
....................       delay_ms(10); 
0319E:  MOVLW  0A
031A0:  MOVLB  3
031A2:  MOVWF  xDB
031A4:  MOVLB  0
031A6:  CALL   179E
....................    } 
....................    if(R1>6400){ 
031AA:  MOVLB  3
031AC:  CLRF   xCD
031AE:  CLRF   xCC
031B0:  MOVLW  48
031B2:  MOVWF  xCB
031B4:  MOVLW  8B
031B6:  MOVWF  xCA
031B8:  MOVFF  2AF,3D1
031BC:  MOVFF  2AE,3D0
031C0:  MOVFF  2AD,3CF
031C4:  MOVFF  2AC,3CE
031C8:  MOVLB  0
031CA:  CALL   29A4
031CE:  BNC   3254
....................       R1=6200; 
031D0:  MOVLB  2
031D2:  CLRF   xAF
031D4:  MOVLW  C0
031D6:  MOVWF  xAE
031D8:  MOVLW  41
031DA:  MOVWF  xAD
031DC:  MOVLW  8B
031DE:  MOVWF  xAC
....................       write_eeprom(30,0x38); 
031E0:  CLRF   FAA
031E2:  MOVLW  1E
031E4:  MOVWF  FA9
031E6:  MOVLW  38
031E8:  MOVWF  FA8
031EA:  BCF    FA6.6
031EC:  BCF    FA6.7
031EE:  BSF    FA6.2
031F0:  MOVF   FF2,W
031F2:  MOVWF  00
031F4:  BCF    FF2.6
031F6:  BCF    FF2.7
031F8:  MOVLB  F
031FA:  MOVLW  55
031FC:  MOVWF  FA7
031FE:  MOVLW  AA
03200:  MOVWF  FA7
03202:  BSF    FA6.1
03204:  BTFSC  FA6.1
03206:  BRA    3204
03208:  BCF    FA6.2
0320A:  MOVF   00,W
0320C:  IORWF  FF2,F
....................       delay_ms(10); 
0320E:  MOVLW  0A
03210:  MOVLB  3
03212:  MOVWF  xDB
03214:  MOVLB  0
03216:  CALL   179E
....................       write_eeprom(31,0x18); 
0321A:  CLRF   FAA
0321C:  MOVLW  1F
0321E:  MOVWF  FA9
03220:  MOVLW  18
03222:  MOVWF  FA8
03224:  BCF    FA6.6
03226:  BCF    FA6.7
03228:  BSF    FA6.2
0322A:  MOVF   FF2,W
0322C:  MOVWF  00
0322E:  BCF    FF2.6
03230:  BCF    FF2.7
03232:  MOVLB  F
03234:  MOVLW  55
03236:  MOVWF  FA7
03238:  MOVLW  AA
0323A:  MOVWF  FA7
0323C:  BSF    FA6.1
0323E:  BTFSC  FA6.1
03240:  BRA    323E
03242:  BCF    FA6.2
03244:  MOVF   00,W
03246:  IORWF  FF2,F
....................       delay_ms(10); 
03248:  MOVLW  0A
0324A:  MOVLB  3
0324C:  MOVWF  xDB
0324E:  MOVLB  0
03250:  CALL   179E
....................    } 
....................    if(RPT100>2.0){ 
03254:  MOVLB  3
03256:  CLRF   xCD
03258:  CLRF   xCC
0325A:  CLRF   xCB
0325C:  MOVLW  80
0325E:  MOVWF  xCA
03260:  MOVFF  2A7,3D1
03264:  MOVFF  2A6,3D0
03268:  MOVFF  2A5,3CF
0326C:  MOVFF  2A4,3CE
03270:  MOVLB  0
03272:  CALL   29A4
03276:  BNC   32F6
....................       RPT100=0.5; 
03278:  MOVLB  2
0327A:  CLRF   xA7
0327C:  CLRF   xA6
0327E:  CLRF   xA5
03280:  MOVLW  7E
03282:  MOVWF  xA4
....................       write_eeprom(32,0); 
03284:  CLRF   FAA
03286:  MOVLW  20
03288:  MOVWF  FA9
0328A:  CLRF   FA8
0328C:  BCF    FA6.6
0328E:  BCF    FA6.7
03290:  BSF    FA6.2
03292:  MOVF   FF2,W
03294:  MOVWF  00
03296:  BCF    FF2.6
03298:  BCF    FF2.7
0329A:  MOVLB  F
0329C:  MOVLW  55
0329E:  MOVWF  FA7
032A0:  MOVLW  AA
032A2:  MOVWF  FA7
032A4:  BSF    FA6.1
032A6:  BTFSC  FA6.1
032A8:  BRA    32A6
032AA:  BCF    FA6.2
032AC:  MOVF   00,W
032AE:  IORWF  FF2,F
....................       delay_ms(10); 
032B0:  MOVLW  0A
032B2:  MOVLB  3
032B4:  MOVWF  xDB
032B6:  MOVLB  0
032B8:  CALL   179E
....................       write_eeprom(33,5); 
032BC:  CLRF   FAA
032BE:  MOVLW  21
032C0:  MOVWF  FA9
032C2:  MOVLW  05
032C4:  MOVWF  FA8
032C6:  BCF    FA6.6
032C8:  BCF    FA6.7
032CA:  BSF    FA6.2
032CC:  MOVF   FF2,W
032CE:  MOVWF  00
032D0:  BCF    FF2.6
032D2:  BCF    FF2.7
032D4:  MOVLB  F
032D6:  MOVLW  55
032D8:  MOVWF  FA7
032DA:  MOVLW  AA
032DC:  MOVWF  FA7
032DE:  BSF    FA6.1
032E0:  BTFSC  FA6.1
032E2:  BRA    32E0
032E4:  BCF    FA6.2
032E6:  MOVF   00,W
032E8:  IORWF  FF2,F
....................       delay_ms(10); 
032EA:  MOVLW  0A
032EC:  MOVLB  3
032EE:  MOVWF  xDB
032F0:  MOVLB  0
032F2:  CALL   179E
....................    } 
....................    if(Ciclos>60000){ 
032F6:  MOVLB  3
032F8:  MOVF   x52,W
032FA:  SUBLW  E9
032FC:  BC    337C
032FE:  XORLW  FF
03300:  BNZ   3308
03302:  MOVF   x51,W
03304:  SUBLW  60
03306:  BC    337C
....................       Ciclos=0; 
03308:  CLRF   x52
0330A:  CLRF   x51
....................       write_eeprom(37,0); 
0330C:  CLRF   FAA
0330E:  MOVLW  25
03310:  MOVWF  FA9
03312:  CLRF   FA8
03314:  BCF    FA6.6
03316:  BCF    FA6.7
03318:  BSF    FA6.2
0331A:  MOVF   FF2,W
0331C:  MOVWF  00
0331E:  BCF    FF2.6
03320:  BCF    FF2.7
03322:  MOVLB  F
03324:  MOVLW  55
03326:  MOVWF  FA7
03328:  MOVLW  AA
0332A:  MOVWF  FA7
0332C:  BSF    FA6.1
0332E:  BTFSC  FA6.1
03330:  BRA    332E
03332:  BCF    FA6.2
03334:  MOVF   00,W
03336:  IORWF  FF2,F
....................       delay_ms(10); 
03338:  MOVLW  0A
0333A:  MOVLB  3
0333C:  MOVWF  xDB
0333E:  MOVLB  0
03340:  CALL   179E
....................       write_eeprom(38,0); 
03344:  CLRF   FAA
03346:  MOVLW  26
03348:  MOVWF  FA9
0334A:  CLRF   FA8
0334C:  BCF    FA6.6
0334E:  BCF    FA6.7
03350:  BSF    FA6.2
03352:  MOVF   FF2,W
03354:  MOVWF  00
03356:  BCF    FF2.6
03358:  BCF    FF2.7
0335A:  MOVLB  F
0335C:  MOVLW  55
0335E:  MOVWF  FA7
03360:  MOVLW  AA
03362:  MOVWF  FA7
03364:  BSF    FA6.1
03366:  BTFSC  FA6.1
03368:  BRA    3366
0336A:  BCF    FA6.2
0336C:  MOVF   00,W
0336E:  IORWF  FF2,F
....................       delay_ms(10); 
03370:  MOVLW  0A
03372:  MOVLB  3
03374:  MOVWF  xDB
03376:  MOVLB  0
03378:  CALL   179E
....................    } 
....................    if(TTrampa>100){ 
0337C:  MOVLB  2
0337E:  MOVF   xCD,W
03380:  SUBLW  64
03382:  BC    33C2
....................       TTrampa=80; 
03384:  MOVLW  50
03386:  MOVWF  xCD
....................       write_eeprom(39,80); 
03388:  CLRF   FAA
0338A:  MOVLW  27
0338C:  MOVWF  FA9
0338E:  MOVLW  50
03390:  MOVWF  FA8
03392:  BCF    FA6.6
03394:  BCF    FA6.7
03396:  BSF    FA6.2
03398:  MOVF   FF2,W
0339A:  MOVWF  00
0339C:  BCF    FF2.6
0339E:  BCF    FF2.7
033A0:  MOVLB  F
033A2:  MOVLW  55
033A4:  MOVWF  FA7
033A6:  MOVLW  AA
033A8:  MOVWF  FA7
033AA:  BSF    FA6.1
033AC:  BTFSC  FA6.1
033AE:  BRA    33AC
033B0:  BCF    FA6.2
033B2:  MOVF   00,W
033B4:  IORWF  FF2,F
....................       delay_ms(10); 
033B6:  MOVLW  0A
033B8:  MOVLB  3
033BA:  MOVWF  xDB
033BC:  MOVLB  0
033BE:  CALL   179E
....................    } 
....................    if(ActivaImpresion>1){ 
033C2:  MOVLB  3
033C4:  MOVF   x2D,W
033C6:  SUBLW  01
033C8:  BC    340A
....................       ActivaImpresion=1; 
033CA:  MOVLW  01
033CC:  MOVWF  x2D
....................       write_eeprom(40,1); 
033CE:  CLRF   FAA
033D0:  MOVLW  28
033D2:  MOVWF  FA9
033D4:  MOVLW  01
033D6:  MOVWF  FA8
033D8:  BCF    FA6.6
033DA:  BCF    FA6.7
033DC:  BSF    FA6.2
033DE:  MOVF   FF2,W
033E0:  MOVWF  00
033E2:  BCF    FF2.6
033E4:  BCF    FF2.7
033E6:  MOVLB  F
033E8:  MOVLW  55
033EA:  MOVWF  FA7
033EC:  MOVLW  AA
033EE:  MOVWF  FA7
033F0:  BSF    FA6.1
033F2:  BTFSC  FA6.1
033F4:  BRA    33F2
033F6:  BCF    FA6.2
033F8:  MOVF   00,W
033FA:  IORWF  FF2,F
....................       delay_ms(10); 
033FC:  MOVLW  0A
033FE:  MOVLB  3
03400:  MOVWF  xDB
03402:  MOVLB  0
03404:  CALL   179E
03408:  MOVLB  3
....................    } 
....................    if(timpresion>30){ 
0340A:  MOVF   x2E,W
0340C:  SUBLW  1E
0340E:  BC    3450
....................       timpresion=2; 
03410:  MOVLW  02
03412:  MOVWF  x2E
....................       write_eeprom(41,2); 
03414:  CLRF   FAA
03416:  MOVLW  29
03418:  MOVWF  FA9
0341A:  MOVLW  02
0341C:  MOVWF  FA8
0341E:  BCF    FA6.6
03420:  BCF    FA6.7
03422:  BSF    FA6.2
03424:  MOVF   FF2,W
03426:  MOVWF  00
03428:  BCF    FF2.6
0342A:  BCF    FF2.7
0342C:  MOVLB  F
0342E:  MOVLW  55
03430:  MOVWF  FA7
03432:  MOVLW  AA
03434:  MOVWF  FA7
03436:  BSF    FA6.1
03438:  BTFSC  FA6.1
0343A:  BRA    3438
0343C:  BCF    FA6.2
0343E:  MOVF   00,W
03440:  IORWF  FF2,F
....................       delay_ms(10); 
03442:  MOVLW  0A
03444:  MOVLB  3
03446:  MOVWF  xDB
03448:  MOVLB  0
0344A:  CALL   179E
0344E:  MOVLB  3
....................    } 
....................    if(sg1==10){ 
03450:  MOVF   x7E,W
03452:  SUBLW  0A
03454:  BNZ   346A
....................       G1=G1*(-1); 
03456:  MOVFF  37C,3C8
0345A:  MOVLW  FF
0345C:  MOVWF  xC9
0345E:  MOVLB  0
03460:  CALL   2A1E
03464:  MOVFF  01,37C
03468:  MOVLB  3
....................    } 
....................    if(sg2==10){ 
0346A:  MOVF   x7F,W
0346C:  SUBLW  0A
0346E:  BNZ   3484
....................       G2=G2*(-1); 
03470:  MOVFF  37D,3C8
03474:  MOVLW  FF
03476:  MOVWF  xC9
03478:  MOVLB  0
0347A:  CALL   2A1E
0347E:  MOVFF  01,37D
03482:  MOVLB  3
....................    } 
.................... } 
03484:  MOVLB  0
03486:  GOTO   582A (RETURN)
....................  
.................... void LeeDisplay(void){ 
....................    if(Dato_Exitoso==5){ 
*
03A3A:  MOVLB  3
03A3C:  MOVF   x31,W
03A3E:  SUBLW  05
03A40:  BTFSS  FD8.2
03A42:  BRA    3BA2
....................          RX_Buffer[0]=RX_Buffer2[0]; 
03A44:  MOVFF  3B,30
....................          RX_Buffer[1]=RX_Buffer2[1]; 
03A48:  MOVFF  3C,31
....................          RX_Buffer[2]=RX_Buffer2[2]; 
03A4C:  MOVFF  3D,32
....................          RX_Buffer[3]=RX_Buffer2[3]; 
03A50:  MOVFF  3E,33
....................          RX_Buffer[4]=RX_Buffer2[4]; 
03A54:  MOVFF  3F,34
....................          RX_Buffer[5]=RX_Buffer2[5]; 
03A58:  MOVFF  40,35
....................          RX_Buffer[6]=RX_Buffer2[6]; 
03A5C:  MOVFF  41,36
....................          RX_Buffer[7]=RX_Buffer2[7]; 
03A60:  MOVFF  42,37
....................          RX_Buffer[8]=RX_Buffer2[8]; 
03A64:  MOVFF  43,38
....................          RX_Buffer[9]=RX_Buffer2[9]; 
03A68:  MOVFF  44,39
....................           
....................       if(RX_Buffer[3]==0x01){// Pregunta por la pagina en la que esta el display,01 es Contraseña de Acceso 
03A6C:  DECFSZ 33,W
03A6E:  BRA    3A7E
....................          Menu=0; 
03A70:  CLRF   x34
....................          if(MenuAntt!=Menu) 
03A72:  MOVF   x34,W
03A74:  SUBWF  x36,W
03A76:  BZ    3A7C
....................             MenuAntt=Menu; 
03A78:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x02){//02 es Menu Principal con PantallaPriincipal=0, y con PantallaPrincipal=1 es Ciclo Libre 
03A7C:  BRA    3BA0
03A7E:  MOVF   33,W
03A80:  SUBLW  02
03A82:  BNZ   3A94
....................          Menu=1; 
03A84:  MOVLW  01
03A86:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03A88:  MOVF   x34,W
03A8A:  SUBWF  x36,W
03A8C:  BZ    3A92
....................             MenuAntt=Menu; 
03A8E:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x03){//03 es Tiempo Esterilizacion 
03A92:  BRA    3BA0
03A94:  MOVF   33,W
03A96:  SUBLW  03
03A98:  BNZ   3AAA
....................          Menu=2; 
03A9A:  MOVLW  02
03A9C:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03A9E:  MOVF   x34,W
03AA0:  SUBWF  x36,W
03AA2:  BZ    3AA8
....................             MenuAntt=Menu; 
03AA4:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x04){//04 es Tiempo de Secado 
03AA8:  BRA    3BA0
03AAA:  MOVF   33,W
03AAC:  SUBLW  04
03AAE:  BNZ   3AC0
....................          Menu=3; 
03AB0:  MOVLW  03
03AB2:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03AB4:  MOVF   x34,W
03AB6:  SUBWF  x36,W
03AB8:  BZ    3ABE
....................             MenuAntt=Menu; 
03ABA:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x05){//05 es Temperatura 
03ABE:  BRA    3BA0
03AC0:  MOVF   33,W
03AC2:  SUBLW  05
03AC4:  BNZ   3AD6
....................          Menu=4; 
03AC6:  MOVLW  04
03AC8:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03ACA:  MOVF   x34,W
03ACC:  SUBWF  x36,W
03ACE:  BZ    3AD4
....................             MenuAntt=Menu; 
03AD0:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x06){//06 es Nivel 
03AD4:  BRA    3BA0
03AD6:  MOVF   33,W
03AD8:  SUBLW  06
03ADA:  BNZ   3AEC
....................          Menu=5; 
03ADC:  MOVLW  05
03ADE:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03AE0:  MOVF   x34,W
03AE2:  SUBWF  x36,W
03AE4:  BZ    3AEA
....................             MenuAntt=Menu; 
03AE6:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x07){//07 es Test de Componentes 
03AEA:  BRA    3BA0
03AEC:  MOVF   33,W
03AEE:  SUBLW  07
03AF0:  BNZ   3B02
....................          Menu=6; 
03AF2:  MOVLW  06
03AF4:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03AF6:  MOVF   x34,W
03AF8:  SUBWF  x36,W
03AFA:  BZ    3B00
....................             MenuAntt=Menu; 
03AFC:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x08){//08 es Fecha y hora 
03B00:  BRA    3BA0
03B02:  MOVF   33,W
03B04:  SUBLW  08
03B06:  BNZ   3B18
....................          Menu=7; 
03B08:  MOVLW  07
03B0A:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03B0C:  MOVF   x34,W
03B0E:  SUBWF  x36,W
03B10:  BZ    3B16
....................             MenuAntt=Menu; 
03B12:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x09){//09 es Ciclos Personalizados 
03B16:  BRA    3BA0
03B18:  MOVF   33,W
03B1A:  SUBLW  09
03B1C:  BNZ   3B2E
....................          Menu=8; 
03B1E:  MOVLW  08
03B20:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03B22:  MOVF   x34,W
03B24:  SUBWF  x36,W
03B26:  BZ    3B2C
....................             MenuAntt=Menu; 
03B28:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x0f){//0f es Recibe caracteres de contraseña desde display 
03B2C:  BRA    3BA0
03B2E:  MOVF   33,W
03B30:  SUBLW  0F
03B32:  BNZ   3B36
....................           
....................       }else if(RX_Buffer[3]==0x1a){//1a es Menu de Funcionamiento 
03B34:  BRA    3BA0
03B36:  MOVF   33,W
03B38:  SUBLW  1A
03B3A:  BNZ   3B4C
....................          Menu=20; 
03B3C:  MOVLW  14
03B3E:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03B40:  MOVF   x34,W
03B42:  SUBWF  x36,W
03B44:  BZ    3B4A
....................             MenuAntt=Menu; 
03B46:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x1b){//1b es Menu de clave correcta 
03B4A:  BRA    3BA0
03B4C:  MOVF   33,W
03B4E:  SUBLW  1B
03B50:  BNZ   3B62
....................          Menu=15; 
03B52:  MOVLW  0F
03B54:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03B56:  MOVF   x34,W
03B58:  SUBWF  x36,W
03B5A:  BZ    3B60
....................             MenuAntt=Menu; 
03B5C:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x1c){//1c es Menu de clave incorrecta 
03B60:  BRA    3BA0
03B62:  MOVF   33,W
03B64:  SUBLW  1C
03B66:  BNZ   3B78
....................          Menu=16; 
03B68:  MOVLW  10
03B6A:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03B6C:  MOVF   x34,W
03B6E:  SUBWF  x36,W
03B70:  BZ    3B76
....................             MenuAntt=Menu; 
03B72:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0x2c){//2c es Menu de Configuracion de Parametros 
03B76:  BRA    3BA0
03B78:  MOVF   33,W
03B7A:  SUBLW  2C
03B7C:  BNZ   3B8E
....................          Menu=100; 
03B7E:  MOVLW  64
03B80:  MOVWF  x34
....................          if(MenuAntt!=Menu) 
03B82:  MOVF   x34,W
03B84:  SUBWF  x36,W
03B86:  BZ    3B8C
....................             MenuAntt=Menu; 
03B88:  MOVFF  334,336
....................       }else if(RX_Buffer[3]==0xcc){//cc es Menu de Bienvenida 
03B8C:  BRA    3BA0
03B8E:  MOVF   33,W
03B90:  SUBLW  CC
03B92:  BNZ   3BA0
....................          Menu=240; 
03B94:  MOVLW  F0
03B96:  MOVWF  x34
....................          if(MenuAntt!=240) 
03B98:  MOVF   x36,W
03B9A:  SUBLW  F0
03B9C:  BZ    3BA0
....................             reset_cpu(); 
03B9E:  RESET
....................       } 
....................    }else{ 
03BA0:  BRA    3BAE
....................       for(z=0;z<RX_BUFFER_SIZE;z++){ 
03BA2:  CLRF   x33
03BA4:  MOVF   x33,W
03BA6:  SUBLW  09
03BA8:  BNC   3BAE
....................             //Rx_Buffer[z]=0; 
....................             //Rx_Buffer2[z]=0; 
....................          } 
03BAA:  INCF   x33,F
03BAC:  BRA    3BA4
....................    } 
.................... } 
03BAE:  MOVLB  0
03BB0:  GOTO   594E (RETURN)
....................  
.................... void ConfiguraCiclo(int8 este0,este1,este2,este3,secado0,secado1,secado2,secado3,liquidos,ciclo,temperatura){ 
....................    Testerilizacionp[0]=este0;Testerilizacionp[1]=este1;Testerilizacionp[2]=este2;Testerilizacionp[3]=este3; 
*
04444:  MOVFF  3D0,B3
04448:  MOVFF  3D1,B4
0444C:  MOVFF  3D2,B5
04450:  MOVFF  3D3,B6
....................    Tsecadop[0]=secado0;Tsecadop[1]=secado1;Tsecadop[2]=secado2;Tsecadop[3]=secado3; 
04454:  MOVFF  3D4,BC
04458:  MOVFF  3D5,BD
0445C:  MOVFF  3D6,BE
04460:  MOVFF  3D7,BF
....................    Setpoint=temperatura;                
04464:  MOVFF  3DA,33B
....................    tiempo_secado=0; 
04468:  MOVLB  3
0446A:  CLRF   x3F
....................    desfoguelento=liquidos; 
0446C:  BCF    x29.0
0446E:  BTFSC  xD8.0
04470:  BSF    x29.0
....................    CicloSeleccionado=ciclo; 
04472:  MOVFF  3D9,33A
....................    Testerilizacion[0]=Testerilizacionp[0];Testerilizacion[1]=Testerilizacionp[1];Testerilizacion[2]=Testerilizacionp[2]; 
04476:  MOVFF  B3,AE
0447A:  MOVFF  B4,AF
0447E:  MOVFF  B5,B0
....................    Testerilizacion[3]=Testerilizacionp[3];Testerilizacion[4]=Testerilizacionp[4]; 
04482:  MOVFF  B6,B1
04486:  MOVFF  B7,B2
....................    Tsecado[0]=Tsecadop[0];Tsecado[1]=Tsecadop[1];Tsecado[2]=Tsecadop[2];Tsecado[3]=Tsecadop[3]; 
0448A:  MOVFF  BC,B8
0448E:  MOVFF  BD,B9
04492:  MOVFF  BE,BA
04496:  MOVFF  BF,BB
....................    Imprime=15; 
0449A:  MOVLW  0F
0449C:  MOVWF  x7B
....................    Envio_Esclavos(); 
0449E:  MOVLB  0
044A0:  RCALL  3E0E
....................    delay_ms(100); 
044A2:  MOVLW  64
044A4:  MOVLB  3
044A6:  MOVWF  xDB
044A8:  MOVLB  0
044AA:  CALL   179E
....................    Imprime=10; 
044AE:  MOVLW  0A
044B0:  MOVLB  3
044B2:  MOVWF  x7B
.................... } 
044B4:  MOVLB  0
044B6:  RETLW  00
....................  
.................... void ActivaAlarma(int8 Tipo){ 
....................     
....................    if(tsilencio>12000){ 
*
0426C:  MOVLB  3
0426E:  MOVF   x69,W
04270:  SUBLW  2D
04272:  BC    4288
04274:  XORLW  FF
04276:  BNZ   427E
04278:  MOVF   x68,W
0427A:  SUBLW  E0
0427C:  BC    4288
....................       tsilencio=0; 
0427E:  CLRF   x69
04280:  CLRF   x68
....................       flagSilencio=OFF; 
04282:  MOVLB  0
04284:  BCF    xA3.1
04286:  MOVLB  3
....................    } 
....................     
....................    if(Tipo==1){ // Alarma por Error 
04288:  DECFSZ xC6,W
0428A:  BRA    42E0
....................    if(UP || DOWN || RIGHT || LEFT) 
0428C:  BSF    F93.0
0428E:  BTFSS  F81.0
04290:  BRA    42A4
04292:  BSF    F93.1
04294:  BTFSS  F81.1
04296:  BRA    42A4
04298:  BSF    F93.2
0429A:  BTFSS  F81.2
0429C:  BRA    42A4
0429E:  BSF    F93.3
042A0:  BTFSC  F81.3
042A2:  BRA    42A8
....................       flagSilencio=ON; 
042A4:  MOVLB  0
042A6:  BSF    xA3.1
....................        
....................       if(!flagSilencio){ 
042A8:  MOVLB  0
042AA:  BTFSC  xA3.1
042AC:  BRA    42D8
....................          flagAlarma=1; 
042AE:  BSF    xA2.7
....................          if(tbuzzer>200){ 
042B0:  MOVLB  3
042B2:  MOVF   x67,F
042B4:  BNZ   42BC
042B6:  MOVF   x66,W
042B8:  SUBLW  C8
042BA:  BC    42D4
....................             tbuzzer=0; 
042BC:  CLRF   x67
042BE:  CLRF   x66
....................             flagBuzzer=!flagBuzzer; 
042C0:  MOVLB  0
042C2:  BTG    xA3.0
....................             if(flagBuzzer) 
042C4:  BTFSS  xA3.0
042C6:  BRA    42CE
....................                Buzzer_on; 
042C8:  BSF    F8C.0
042CA:  BCF    F95.0
....................             else 
042CC:  BRA    42D2
....................                Buzzer_off; 
042CE:  BCF    F8C.0
042D0:  BCF    F95.0
042D2:  MOVLB  3
....................          } 
....................       }else{ 
042D4:  BRA    42DE
042D6:  MOVLB  0
....................          Buzzer_off; 
042D8:  BCF    F8C.0
042DA:  BCF    F95.0
042DC:  MOVLB  3
....................       } 
....................    }else if(Tipo==2){ 
042DE:  BRA    4338
042E0:  MOVF   xC6,W
042E2:  SUBLW  02
042E4:  BNZ   4338
....................    if(UP || DOWN || RIGHT || LEFT) 
042E6:  BSF    F93.0
042E8:  BTFSS  F81.0
042EA:  BRA    42FE
042EC:  BSF    F93.1
042EE:  BTFSS  F81.1
042F0:  BRA    42FE
042F2:  BSF    F93.2
042F4:  BTFSS  F81.2
042F6:  BRA    42FE
042F8:  BSF    F93.3
042FA:  BTFSC  F81.3
042FC:  BRA    4302
....................       ConteoBuzzer=21; 
042FE:  MOVLW  15
04300:  MOVWF  x63
....................        
....................       flagAlarma=1; 
04302:  MOVLB  0
04304:  BSF    xA2.7
....................       if(ConteoBuzzer<20){    
04306:  MOVLB  3
04308:  MOVF   x63,W
0430A:  SUBLW  13
0430C:  BNC   4334
....................          if(tbuzzer>100){ 
0430E:  MOVF   x67,F
04310:  BNZ   4318
04312:  MOVF   x66,W
04314:  SUBLW  64
04316:  BC    4332
....................             tbuzzer=0; 
04318:  CLRF   x67
0431A:  CLRF   x66
....................             flagBuzzer=!flagBuzzer; 
0431C:  MOVLB  0
0431E:  BTG    xA3.0
....................             if(flagBuzzer) 
04320:  BTFSS  xA3.0
04322:  BRA    432A
....................                Buzzer_on; 
04324:  BSF    F8C.0
04326:  BCF    F95.0
....................             else 
04328:  BRA    432E
....................                Buzzer_off; 
0432A:  BCF    F8C.0
0432C:  BCF    F95.0
....................                 
....................             ConteoBuzzer++;    
0432E:  MOVLB  3
04330:  INCF   x63,F
....................          } 
....................       }else{ 
04332:  BRA    4338
....................          Buzzer_off; 
04334:  BCF    F8C.0
04336:  BCF    F95.0
....................       } 
....................    } 
.................... } 
04338:  MOVLB  0
0433A:  RETLW  00
....................  
.................... void CalientaChaqueta(){ 
....................    /*if(PresionPrecamara<130){ 
....................       SSR_on; 
....................    }else if(PresionPreCamara>150){ 
....................       SSR_off; 
....................    } 
....................    */                                  
....................    Tp=200; 
*
05012:  CLRF   xAB
05014:  MOVLW  C8
05016:  MOVWF  xAA
....................    Tc=(Tciclo/0.005); 
05018:  MOVFF  2DD,3CE
0501C:  MOVFF  2DC,3CD
05020:  MOVFF  2DB,3CC
05024:  MOVFF  2DA,3CB
05028:  MOVLW  0A
0502A:  MOVLB  3
0502C:  MOVWF  xD2
0502E:  MOVLW  D7
05030:  MOVWF  xD1
05032:  MOVLW  23
05034:  MOVWF  xD0
05036:  MOVLW  77
05038:  MOVWF  xCF
0503A:  MOVLB  0
0503C:  CALL   17FC
05040:  MOVFF  03,3DE
05044:  MOVFF  02,3DD
05048:  MOVFF  01,3DC
0504C:  MOVFF  00,3DB
05050:  CALL   3BB4
05054:  MOVFF  02,AD
05058:  MOVFF  01,AC
....................    Controlando=1;  
0505C:  MOVLW  01
0505E:  MOVLB  3
05060:  MOVWF  x2C
.................... } 
05062:  MOVLB  0
05064:  GOTO   A284 (RETURN)
....................  
.................... void ApagaSalidas(){ 
....................    Desfogue_off; 
*
034F2:  BCF    F8C.4
034F4:  BCF    F95.4
....................    Bomba_off; 
034F6:  BCF    F8C.6
034F8:  BCF    F95.6
....................    Buzzer_off; 
034FA:  BCF    F8C.0
034FC:  BCF    F95.0
....................    SSR_off; 
034FE:  BSF    F8B.2
03500:  BCF    F94.2
....................    Aire=OFF; 
03502:  BCF    xA3.7
....................    Agua_off; 
03504:  BCF    F8C.5
03506:  BCF    F95.5
....................    Controlando=0; 
03508:  MOVLB  3
0350A:  CLRF   x2C
.................... } 
0350C:  MOVLB  0
0350E:  RETLW  00
....................  
.................... void purgaAire(){ 
....................    if(!purga){ 
....................       for(i=0;i<4;i++){ 
....................          Desfogue_on; 
....................          delay_ms(2000); 
....................          Desfogue_off; 
....................          delay_ms(1000); 
....................       } 
....................       purga=ON; 
....................    } 
.................... } 
....................  
.................... int8 extraeDecima(int8 tiempo){ 
*
049E4:  MOVLB  3
049E6:  CLRF   xCE
049E8:  CLRF   xCF
....................    int8 tmp=0,decima=0; 
....................    tmp=tiempo/10; 
049EA:  MOVFF  3CD,3D0
049EE:  MOVLW  0A
049F0:  MOVWF  xD1
049F2:  MOVLB  0
049F4:  RCALL  439A
049F6:  MOVFF  01,3CE
....................    tmp=tmp*10; 
049FA:  MOVLB  3
049FC:  MOVF   xCE,W
049FE:  MULLW  0A
04A00:  MOVFF  FF3,3CE
....................    decima=tiempo-tmp; 
04A04:  MOVF   xCE,W
04A06:  SUBWF  xCD,W
04A08:  MOVWF  xCF
....................    return decima; 
04A0A:  MOVFF  3CF,01
.................... } 
04A0E:  MOVLB  0
04A10:  RETLW  00
....................  
....................  
.................... #int_rda HIGH 
.................... void serial_rx_isr(){ 
....................  
....................    Dato2=fgetc(); 
*
00204:  BTFSS  F9E.5
00206:  BRA    0204
00208:  MOVFF  FAE,332
0020C:  MOVLB  3
....................    if(Dato2==0x65){//Inicio Comunicacion 
0020E:  MOVF   x32,W
00210:  SUBLW  65
00212:  BNZ   021A
....................       Inicio=1; 
00214:  MOVLW  01
00216:  MOVWF  x30
....................       RX_Wr_Index =0; 
00218:  CLRF   46
....................    } 
....................    //Inicio=1; 
....................    if(Inicio==1){ 
0021A:  DECFSZ x30,W
0021C:  BRA    0232
....................       Rx_Buffer2[RX_Wr_Index] = Dato2; 
0021E:  CLRF   03
00220:  MOVF   46,W
00222:  ADDLW  3B
00224:  MOVWF  FE9
00226:  MOVLW  00
00228:  ADDWFC 03,W
0022A:  MOVWF  FEA
0022C:  MOVFF  332,FEF
....................       RX_Wr_Index++; 
00230:  INCF   46,F
....................    } 
....................    if(RX_Wr_Index >= RX_BUFFER_SIZE){ 
00232:  MOVF   46,W
00234:  SUBLW  09
00236:  BC    023C
....................       RX_Wr_Index =0; 
00238:  CLRF   46
....................       Inicio=0; 
0023A:  CLRF   x30
....................    } 
....................  
....................    if(RX_Wr_Index==0){ 
0023C:  MOVF   46,F
0023E:  BNZ   0260
....................       if(Rx_Buffer2[0]==0x65 && Rx_Buffer2[1]==0xff && Rx_Buffer2[2]==0xff && Rx_Buffer2[8]==0x00 && Rx_Buffer2[9]==0xff ){ 
00240:  MOVF   3B,W
00242:  SUBLW  65
00244:  BNZ   025C
00246:  INCFSZ 3C,W
00248:  BRA    025C
0024A:  INCFSZ 3D,W
0024C:  BRA    025C
0024E:  MOVF   43,F
00250:  BNZ   025C
00252:  INCFSZ 44,W
00254:  BRA    025C
....................          Dato_Exitoso=5; 
00256:  MOVLW  05
00258:  MOVWF  x31
....................       }else{ 
0025A:  BRA    0260
....................          Dato_Exitoso=10; 
0025C:  MOVLW  0A
0025E:  MOVWF  x31
....................       } 
....................    } 
....................    //Dato_Exitoso=5; 
....................    if(Menu==20) 
00260:  MOVF   x34,W
00262:  SUBLW  14
00264:  BNZ   026A
....................      Buzzer_on; 
00266:  BSF    F8C.0
00268:  BCF    F95.0
.................... } 
....................  
0026A:  BCF    F9E.5
0026C:  MOVLB  0
0026E:  GOTO   010A
.................... #int_TIMER0 
.................... void temp0s(void){ 
....................    set_timer0(0); 
00272:  CLRF   FD7
00274:  CLRF   FD6
....................    t_exhaust++; 
00276:  MOVLB  3
00278:  INCF   x64,F
0027A:  BTFSC  FD8.2
0027C:  INCF   x65,F
....................    if(DesfogueSuave){ 
0027E:  MOVLB  0
00280:  BTFSS  xA0.6
00282:  BRA    02C4
....................       if(Nivel<6){ 
00284:  MOVLB  3
00286:  MOVF   x4A,F
00288:  BNZ   02BE
0028A:  MOVF   x49,W
0028C:  SUBLW  05
0028E:  BNC   02BE
....................          if(t_exhaust<=NivelSeleccionado) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
00290:  MOVF   x65,W
00292:  SUBWF  x54,W
00294:  BNC   02A4
00296:  BNZ   029E
00298:  MOVF   x64,W
0029A:  SUBWF  x53,W
0029C:  BNC   02A4
....................             Desfogue_on; 
0029E:  BSF    F8C.4
002A0:  BCF    F95.4
....................          else             
002A2:  BRA    02A8
....................             Desfogue_off; 
002A4:  BCF    F8C.4
002A6:  BCF    F95.4
....................        
....................          if(t_exhaust>=60000) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control          
002A8:  MOVF   x65,W
002AA:  SUBLW  E9
002AC:  BC    02BC
002AE:  XORLW  FF
002B0:  BNZ   02B8
002B2:  MOVF   x64,W
002B4:  SUBLW  5F
002B6:  BC    02BC
....................             t_exhaust=0; // tiempoctrl incrementa una unidad cada Xms, por eso se dividen los tiempos por 0.005. 
002B8:  CLRF   x65
002BA:  CLRF   x64
....................       }else{ 
002BC:  BRA    02C2
....................          Desfogue_on; 
002BE:  BSF    F8C.4
002C0:  BCF    F95.4
002C2:  MOVLB  0
....................       } 
....................    }   
.................... } 
....................  
002C4:  BCF    FF2.2
002C6:  GOTO   0074
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(40536); // Se repite cada 5ms 
002CA:  MOVLW  9E
002CC:  MOVWF  FCF
002CE:  MOVLW  58
002D0:  MOVWF  FCE
....................    tiempos++; 
002D2:  MOVLB  3
002D4:  INCF   x41,F
002D6:  BTFSC  FD8.2
002D8:  INCF   x42,F
....................    tiempos2++; 
002DA:  INCF   x43,F
002DC:  BTFSC  FD8.2
002DE:  INCF   x44,F
....................    tiempos3++; 
002E0:  INCF   x45,F
002E2:  BTFSC  FD8.2
002E4:  INCF   x46,F
....................    tiempoctrl++; 
002E6:  INCF   x47,F
002E8:  BTFSC  FD8.2
002EA:  INCF   x48,F
....................     
....................    if(flagAlarma) 
002EC:  MOVLB  0
002EE:  BTFSS  xA2.7
002F0:  BRA    02FC
....................       tbuzzer++; 
002F2:  MOVLB  3
002F4:  INCF   x66,F
002F6:  BTFSC  FD8.2
002F8:  INCF   x67,F
002FA:  MOVLB  0
....................        
....................    if(flagSilencio)    
002FC:  BTFSS  xA3.1
002FE:  BRA    0308
....................       tsilencio++; 
00300:  MOVLB  3
00302:  INCF   x68,F
00304:  BTFSC  FD8.2
00306:  INCF   x69,F
....................     
....................    if(Controlando==1){ 
00308:  MOVLB  3
0030A:  DECFSZ x2C,W
0030C:  BRA    034A
....................       if(tiempoctrl<Tp) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0030E:  MOVF   x48,W
00310:  MOVLB  0
00312:  SUBWF  xAB,W
00314:  BNC   032E
00316:  BNZ   0328
00318:  MOVF   xAA,W
0031A:  MOVLB  3
0031C:  SUBWF  x47,W
0031E:  BTFSS  FD8.0
00320:  BRA    0326
00322:  MOVLB  0
00324:  BRA    032E
00326:  MOVLB  0
....................          SSR_on; 
00328:  BCF    F8B.2
0032A:  BCF    F94.2
....................       else          
0032C:  BRA    0332
....................          SSR_off; 
0032E:  BSF    F8B.2
00330:  BCF    F94.2
....................              
....................       if(tiempoctrl>=Tc) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
00332:  MOVF   xAD,W
00334:  MOVLB  3
00336:  SUBWF  x48,W
00338:  BNC   034A
0033A:  BNZ   0346
0033C:  MOVLB  0
0033E:  MOVF   xAC,W
00340:  MOVLB  3
00342:  SUBWF  x47,W
00344:  BNC   034A
....................          tiempoctrl=0;// tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
00346:  CLRF   x48
00348:  CLRF   x47
....................    } 
....................     
....................    if(tiempos>=200)  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0034A:  MOVF   x42,F
0034C:  BNZ   0356
0034E:  MOVF   x41,W
00350:  SUBLW  C7
00352:  BTFSC  FD8.0
00354:  BRA    046E
....................    { 
....................       if(flagTC) 
00356:  BTFSS  x29.4
00358:  BRA    035C
....................          TiempoControl++; 
0035A:  INCF   x61,F
....................        
....................       tiemporecta++; 
0035C:  INCF   x2B,F
....................        
....................       if(IniciaCiclo && tiempoImpresion<CalculoImpresion){ 
0035E:  MOVLB  0
00360:  BTFSS  xA0.1
00362:  BRA    0376
00364:  MOVLB  3
00366:  MOVF   x2F,W
00368:  SUBWF  x40,W
0036A:  BTFSS  FD8.0
0036C:  BRA    0372
0036E:  MOVLB  0
00370:  BRA    0376
....................          tiempoImpresion++; 
00372:  INCF   x40,F
....................       }else if(tiempoImpresion>=CalculoImpresion){ 
00374:  BRA    0382
00376:  MOVLB  3
00378:  MOVF   x2F,W
0037A:  SUBWF  x40,W
0037C:  BNC   0382
....................          flagImprime=1; 
0037E:  BSF    x29.5
....................          tiempoImpresion=0; 
00380:  CLRF   x40
....................       } 
....................        
....................       if(IniciaCiclo && !Esterilizando){ 
00382:  MOVLB  0
00384:  BTFSS  xA0.1
00386:  BRA    039C
00388:  BTFSC  xA0.2
0038A:  BRA    039C
....................          TiempoCiclo++; 
0038C:  INCF   xA4,F
0038E:  BTFSC  FD8.2
00390:  INCF   xA5,F
....................          tiempoAgua++; 
00392:  MOVLB  3
00394:  INCF   x6A,F
00396:  BTFSC  FD8.2
00398:  INCF   x6B,F
0039A:  MOVLB  0
....................       } 
....................        
....................       if(IniciaLlenado && !CalderinLleno){ 
0039C:  BTFSS  x9F.7
0039E:  BRA    03AA
003A0:  BTFSC  xA0.0
003A2:  BRA    03AA
....................          TiempoLlenado++; 
003A4:  INCF   xA6,F
003A6:  BTFSC  FD8.2
003A8:  INCF   xA7,F
....................       } 
....................        
....................       if(SensadoNivel){ 
003AA:  BTFSS  xA0.4
003AC:  BRA    03B4
....................          TiempoSensadoNivel++; 
003AE:  INCF   xA8,F
003B0:  BTFSC  FD8.2
003B2:  INCF   xA9,F
....................       } 
....................        
....................       tiempos=0;Lectura=1;tinicio++; 
003B4:  MOVLB  3
003B6:  CLRF   x42
003B8:  CLRF   x41
003BA:  BSF    x29.1
003BC:  INCF   x4B,F
003BE:  BTFSC  FD8.2
003C0:  INCF   x4C,F
....................     
....................       if(Esterilizando && !Desfogando){                
003C2:  MOVLB  0
003C4:  BTFSS  xA0.2
003C6:  BRA    041A
003C8:  BTFSC  xA0.5
003CA:  BRA    041A
....................          if(Testerilizacion[0]>0){ 
003CC:  BTFSC  xAE.7
003CE:  BRA    03DA
003D0:  MOVF   xAE,W
003D2:  SUBLW  00
003D4:  BC    03DA
....................             Testerilizacion[0]--; 
003D6:  DECF   xAE,F
....................          }else if(Testerilizacion[1]>0){ 
003D8:  BRA    041A
003DA:  BTFSC  xAF.7
003DC:  BRA    03EC
003DE:  MOVF   xAF,W
003E0:  SUBLW  00
003E2:  BC    03EC
....................             Testerilizacion[1]--; 
003E4:  DECF   xAF,F
....................             Testerilizacion[0]=9; 
003E6:  MOVLW  09
003E8:  MOVWF  xAE
....................          }else if(Testerilizacion[2]>0){ 
003EA:  BRA    041A
003EC:  BTFSC  xB0.7
003EE:  BRA    0402
003F0:  MOVF   xB0,W
003F2:  SUBLW  00
003F4:  BC    0402
....................             Testerilizacion[2]--; 
003F6:  DECF   xB0,F
....................             Testerilizacion[1]=5; 
003F8:  MOVLW  05
003FA:  MOVWF  xAF
....................             Testerilizacion[0]=9; 
003FC:  MOVLW  09
003FE:  MOVWF  xAE
....................          }else if(Testerilizacion[3]>0){ 
00400:  BRA    041A
00402:  BTFSC  xB1.7
00404:  BRA    041A
00406:  MOVF   xB1,W
00408:  SUBLW  00
0040A:  BC    041A
....................             Testerilizacion[3]--; 
0040C:  DECF   xB1,F
....................             Testerilizacion[2]=9; 
0040E:  MOVLW  09
00410:  MOVWF  xB0
....................             Testerilizacion[1]=5; 
00412:  MOVLW  05
00414:  MOVWF  xAF
....................             Testerilizacion[0]=9; 
00416:  MOVLW  09
00418:  MOVWF  xAE
....................          } 
....................       } 
....................        
....................       if(Secando){ 
0041A:  BTFSS  xA0.3
0041C:  BRA    046C
....................          if(Tsecado[0]>0){ 
0041E:  BTFSC  xB8.7
00420:  BRA    042C
00422:  MOVF   xB8,W
00424:  SUBLW  00
00426:  BC    042C
....................             Tsecado[0]--; 
00428:  DECF   xB8,F
....................          }else if(Tsecado[1]>0){ 
0042A:  BRA    046C
0042C:  BTFSC  xB9.7
0042E:  BRA    043E
00430:  MOVF   xB9,W
00432:  SUBLW  00
00434:  BC    043E
....................             Tsecado[1]--; 
00436:  DECF   xB9,F
....................             Tsecado[0]=9; 
00438:  MOVLW  09
0043A:  MOVWF  xB8
....................          }else if(Tsecado[2]>0){ 
0043C:  BRA    046C
0043E:  BTFSC  xBA.7
00440:  BRA    0454
00442:  MOVF   xBA,W
00444:  SUBLW  00
00446:  BC    0454
....................             Tsecado[2]--; 
00448:  DECF   xBA,F
....................             Tsecado[1]=5; 
0044A:  MOVLW  05
0044C:  MOVWF  xB9
....................             Tsecado[0]=9; 
0044E:  MOVLW  09
00450:  MOVWF  xB8
....................          }else if(Tsecado[3]>0){ 
00452:  BRA    046C
00454:  BTFSC  xBB.7
00456:  BRA    046C
00458:  MOVF   xBB,W
0045A:  SUBLW  00
0045C:  BC    046C
....................             Tsecado[3]--; 
0045E:  DECF   xBB,F
....................             Tsecado[2]=9; 
00460:  MOVLW  09
00462:  MOVWF  xBA
....................             Tsecado[1]=5; 
00464:  MOVLW  05
00466:  MOVWF  xB9
....................             Tsecado[0]=9; 
00468:  MOVLW  09
0046A:  MOVWF  xB8
0046C:  MOVLB  3
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0046E:  BCF    F9E.0
00470:  MOVLB  0
00472:  GOTO   0074
.................... void main() 
.................... { 
*
05068:  CLRF   FF8
0506A:  BCF    FF1.2
0506C:  BCF    F9F.0
0506E:  BSF    F9F.5
05070:  BSF    FD0.7
05072:  BSF    07.7
05074:  CLRF   FEA
05076:  CLRF   FE9
05078:  BSF    FB8.3
0507A:  MOVLW  08
0507C:  MOVWF  FAF
0507E:  MOVLW  02
05080:  MOVWF  FB0
05082:  MOVLW  A6
05084:  MOVWF  FAC
05086:  MOVLW  90
05088:  MOVWF  FAB
0508A:  CLRF   46
0508C:  CLRF   47
0508E:  CLRF   48
05090:  CLRF   x62
05092:  CLRF   x63
05094:  CLRF   x84
05096:  CLRF   x85
05098:  CLRF   x86
0509A:  BCF    x9F.0
0509C:  BCF    x9F.1
0509E:  BCF    x9F.2
050A0:  BCF    x9F.3
050A2:  BCF    x9F.4
050A4:  BCF    x9F.5
050A6:  BCF    x9F.6
050A8:  BCF    x9F.7
050AA:  BCF    xA0.0
050AC:  BCF    xA0.1
050AE:  BCF    xA0.2
050B0:  BCF    xA0.3
050B2:  BCF    xA0.4
050B4:  BCF    xA0.5
050B6:  BCF    xA0.6
050B8:  BCF    xA0.7
050BA:  BCF    xA1.0
050BC:  BCF    xA1.1
050BE:  BCF    xA1.2
050C0:  BCF    xA1.3
050C2:  BCF    xA1.4
050C4:  BCF    xA1.5
050C6:  BCF    xA1.6
050C8:  BCF    xA1.7
050CA:  BCF    xA2.0
050CC:  BCF    xA2.1
050CE:  BCF    xA2.2
050D0:  BCF    xA2.3
050D2:  BCF    xA2.4
050D4:  BCF    xA2.5
050D6:  BCF    xA2.6
050D8:  BCF    xA2.7
050DA:  BCF    xA3.0
050DC:  BCF    xA3.1
050DE:  BCF    xA3.2
050E0:  BCF    xA3.3
050E2:  BCF    xA3.4
050E4:  BCF    xA3.5
050E6:  BCF    xA3.6
050E8:  BCF    xA3.7
050EA:  CLRF   xA5
050EC:  CLRF   xA4
050EE:  CLRF   xA7
050F0:  CLRF   xA6
050F2:  CLRF   xA9
050F4:  CLRF   xA8
050F6:  CLRF   xAB
050F8:  CLRF   xAA
050FA:  CLRF   xAD
050FC:  CLRF   xAC
050FE:  MOVLW  9A
05100:  MOVLB  2
05102:  MOVWF  xA3
05104:  MOVLW  99
05106:  MOVWF  xA2
05108:  MOVLW  0D
0510A:  MOVWF  xA1
0510C:  MOVLW  86
0510E:  MOVWF  xA0
05110:  CLRF   xA7
05112:  CLRF   xA6
05114:  CLRF   xA5
05116:  MOVLW  7E
05118:  MOVWF  xA4
0511A:  CLRF   xAB
0511C:  CLRF   xAA
0511E:  CLRF   xA9
05120:  CLRF   xA8
05122:  CLRF   xAF
05124:  CLRF   xAE
05126:  MOVLW  48
05128:  MOVWF  xAD
0512A:  MOVLW  85
0512C:  MOVWF  xAC
0512E:  CLRF   xB3
05130:  MOVLW  30
05132:  MOVWF  xB2
05134:  MOVLW  54
05136:  MOVWF  xB1
05138:  MOVLW  8B
0513A:  MOVWF  xB0
0513C:  CLRF   xBF
0513E:  CLRF   xBE
05140:  CLRF   xBD
05142:  CLRF   xBC
05144:  CLRF   xC3
05146:  CLRF   xC2
05148:  CLRF   xC1
0514A:  CLRF   xC0
0514C:  CLRF   xC7
0514E:  CLRF   xC6
05150:  CLRF   xC5
05152:  CLRF   xC4
05154:  CLRF   xC8
05156:  CLRF   xC9
05158:  CLRF   xCA
0515A:  CLRF   xCB
0515C:  MOVLW  14
0515E:  MOVWF  xCC
05160:  CLRF   xCD
05162:  CLRF   xCE
05164:  CLRF   xCF
05166:  CLRF   xD0
05168:  CLRF   xD1
0516A:  CLRF   xD5
0516C:  CLRF   xD4
0516E:  CLRF   xD3
05170:  CLRF   xD2
05172:  CLRF   xDD
05174:  CLRF   xDC
05176:  MOVLW  20
05178:  MOVWF  xDB
0517A:  MOVLW  82
0517C:  MOVWF  xDA
0517E:  CLRF   xE1
05180:  CLRF   xE0
05182:  CLRF   xDF
05184:  CLRF   xDE
05186:  CLRF   xE5
05188:  CLRF   xE4
0518A:  CLRF   xE3
0518C:  CLRF   xE2
0518E:  CLRF   xE9
05190:  CLRF   xE8
05192:  CLRF   xE7
05194:  CLRF   xE6
05196:  CLRF   xED
05198:  CLRF   xEC
0519A:  CLRF   xEB
0519C:  CLRF   xEA
0519E:  CLRF   xF1
051A0:  CLRF   xF0
051A2:  CLRF   xEF
051A4:  CLRF   xEE
051A6:  CLRF   xF5
051A8:  CLRF   xF4
051AA:  MOVLW  48
051AC:  MOVWF  xF3
051AE:  MOVLW  83
051B0:  MOVWF  xF2
051B2:  CLRF   xF9
051B4:  CLRF   xF8
051B6:  MOVLW  20
051B8:  MOVWF  xF7
051BA:  MOVLW  83
051BC:  MOVWF  xF6
051BE:  CLRF   xFD
051C0:  CLRF   xFC
051C2:  CLRF   xFB
051C4:  MOVLW  7F
051C6:  MOVWF  xFA
051C8:  MOVLB  3
051CA:  CLRF   x01
051CC:  CLRF   x00
051CE:  MOVLB  2
051D0:  CLRF   xFF
051D2:  CLRF   xFE
051D4:  MOVLB  3
051D6:  CLRF   x05
051D8:  CLRF   x04
051DA:  CLRF   x03
051DC:  CLRF   x02
051DE:  CLRF   x09
051E0:  CLRF   x08
051E2:  CLRF   x07
051E4:  CLRF   x06
051E6:  CLRF   x0D
051E8:  CLRF   x0C
051EA:  CLRF   x0B
051EC:  CLRF   x0A
051EE:  CLRF   x11
051F0:  CLRF   x10
051F2:  CLRF   x0F
051F4:  CLRF   x0E
051F6:  CLRF   x15
051F8:  CLRF   x14
051FA:  CLRF   x13
051FC:  CLRF   x12
051FE:  MOVLW  4A
05200:  MOVWF  x19
05202:  MOVLW  88
05204:  MOVWF  x18
05206:  MOVLW  28
05208:  MOVWF  x17
0520A:  MOVLW  75
0520C:  MOVWF  x16
0520E:  MOVLW  E0
05210:  MOVWF  x1D
05212:  MOVLW  2D
05214:  MOVWF  x1C
05216:  MOVLW  10
05218:  MOVWF  x1B
0521A:  MOVLW  75
0521C:  MOVWF  x1A
0521E:  MOVLW  FF
05220:  MOVWF  x21
05222:  MOVLW  21
05224:  MOVWF  x20
05226:  MOVLW  15
05228:  MOVWF  x1F
0522A:  MOVLW  80
0522C:  MOVWF  x1E
0522E:  MOVLW  82
05230:  MOVWF  x25
05232:  MOVLW  12
05234:  MOVWF  x24
05236:  MOVLW  F4
05238:  MOVWF  x23
0523A:  MOVLW  86
0523C:  MOVWF  x22
0523E:  CLRF   x26
05240:  CLRF   x27
05242:  CLRF   x28
05244:  BCF    x29.0
05246:  BCF    x29.1
05248:  BCF    x29.2
0524A:  BCF    x29.3
0524C:  BCF    x29.4
0524E:  BCF    x29.5
05250:  BCF    x29.6
05252:  CLRF   x2A
05254:  CLRF   x2B
05256:  CLRF   x2C
05258:  MOVLW  01
0525A:  MOVWF  x2D
0525C:  MOVLW  02
0525E:  MOVWF  x2E
05260:  CLRF   x2F
05262:  MOVLW  01
05264:  MOVWF  x30
05266:  CLRF   x31
05268:  CLRF   x32
0526A:  CLRF   x33
0526C:  CLRF   x34
0526E:  CLRF   x35
05270:  MOVLW  F0
05272:  MOVWF  x36
05274:  CLRF   x37
05276:  CLRF   x38
05278:  CLRF   x39
0527A:  CLRF   x3A
0527C:  CLRF   x3B
0527E:  MOVLW  01
05280:  MOVWF  x3C
05282:  MOVWF  x3D
05284:  CLRF   x3E
05286:  CLRF   x3F
05288:  CLRF   x40
0528A:  CLRF   x42
0528C:  CLRF   x41
0528E:  CLRF   x44
05290:  CLRF   x43
05292:  CLRF   x46
05294:  CLRF   x45
05296:  CLRF   x48
05298:  CLRF   x47
0529A:  CLRF   x4A
0529C:  CLRF   x49
0529E:  CLRF   x4C
052A0:  CLRF   x4B
052A2:  CLRF   x4E
052A4:  CLRF   x4D
052A6:  CLRF   x50
052A8:  CLRF   x4F
052AA:  CLRF   x52
052AC:  CLRF   x51
052AE:  CLRF   x54
052B0:  CLRF   x53
052B2:  CLRF   x5D
052B4:  CLRF   x5E
052B6:  CLRF   x5F
052B8:  CLRF   x60
052BA:  CLRF   x61
052BC:  CLRF   x62
052BE:  CLRF   x63
052C0:  CLRF   x65
052C2:  CLRF   x64
052C4:  CLRF   x67
052C6:  CLRF   x66
052C8:  CLRF   x69
052CA:  CLRF   x68
052CC:  CLRF   x6B
052CE:  CLRF   x6A
052D0:  MOVLW  12
052D2:  MOVWF  x6C
052D4:  MOVLW  09
052D6:  MOVWF  x6D
052D8:  MOVLW  0D
052DA:  MOVWF  x6E
052DC:  CLRF   x6F
052DE:  CLRF   x70
052E0:  CLRF   x71
052E2:  CLRF   x72
052E4:  CLRF   x73
052E6:  CLRF   x74
052E8:  CLRF   x75
052EA:  CLRF   x76
052EC:  CLRF   x77
052EE:  CLRF   x78
052F0:  CLRF   x79
052F2:  CLRF   x7A
052F4:  CLRF   x7B
052F6:  CLRF   x7C
052F8:  CLRF   x7D
052FA:  CLRF   x7E
052FC:  CLRF   x7F
052FE:  MOVF   FC1,W
05300:  ANDLW  C0
05302:  IORLW  0F
05304:  MOVWF  FC1
05306:  MOVLW  07
05308:  MOVWF  FB4
0530A:  CLRF   2A
0530C:  CLRF   2B
0530E:  MOVLB  0
05310:  CLRF   x87
05312:  MOVLW  03
05314:  MOVWF  x88
05316:  MOVWF  x89
05318:  MOVLW  06
0531A:  MOVWF  x8A
0531C:  MOVLW  01
0531E:  MOVWF  x8B
05320:  MOVLW  04
05322:  MOVWF  x8C
05324:  MOVLW  06
05326:  MOVWF  x8D
05328:  MOVLW  02
0532A:  MOVWF  x8E
0532C:  MOVLW  05
0532E:  MOVWF  x8F
05330:  CLRF   x90
05332:  MOVLW  03
05334:  MOVWF  x91
05336:  MOVLW  05
05338:  MOVWF  x92
0533A:  CLRF   x93
0533C:  MOVLW  03
0533E:  MOVWF  x94
05340:  MOVLW  04
05342:  MOVWF  x95
05344:  CLRF   x96
05346:  MOVLW  02
05348:  MOVWF  x97
0534A:  MOVLW  05
0534C:  MOVWF  x98
0534E:  CLRF   x99
05350:  MOVLW  03
05352:  MOVWF  x9A
05354:  MOVLW  06
05356:  MOVWF  x9B
05358:  MOVLW  01
0535A:  MOVWF  x9C
0535C:  MOVLW  04
0535E:  MOVWF  x9D
05360:  MOVLW  06
05362:  MOVWF  x9E
05364:  CLRF   xAE
05366:  CLRF   xAF
05368:  CLRF   xB0
0536A:  CLRF   xB1
0536C:  CLRF   xB2
0536E:  CLRF   xB3
05370:  CLRF   xB4
05372:  CLRF   xB5
05374:  CLRF   xB6
05376:  CLRF   xB7
05378:  CLRF   xB8
0537A:  CLRF   xB9
0537C:  CLRF   xBA
0537E:  CLRF   xBB
05380:  CLRF   xBC
05382:  CLRF   xBD
05384:  CLRF   xBE
05386:  CLRF   xBF
05388:  CLRF   xC0
0538A:  CLRF   xC1
0538C:  CLRF   xC2
0538E:  CLRF   xC3
05390:  CLRF   xC4
05392:  CLRF   xC5
05394:  CLRF   xC6
05396:  CLRF   xC7
05398:  CLRF   xC8
0539A:  CLRF   xC9
0539C:  CLRF   xCA
0539E:  CLRF   xCB
053A0:  CLRF   xCC
053A2:  CLRF   xCD
053A4:  CLRF   xCE
053A6:  CLRF   xCF
053A8:  CLRF   xD0
053AA:  CLRF   xD1
053AC:  CLRF   xD2
053AE:  CLRF   xD3
053B0:  CLRF   xD4
053B2:  CLRF   xD5
053B4:  CLRF   xD6
053B6:  CLRF   xD7
053B8:  CLRF   xD8
053BA:  CLRF   xD9
053BC:  CLRF   xDA
053BE:  CLRF   xDB
053C0:  CLRF   xDC
053C2:  CLRF   xDD
053C4:  CLRF   xDE
053C6:  CLRF   xDF
053C8:  CLRF   xE0
053CA:  CLRF   xE1
053CC:  CLRF   xE2
053CE:  CLRF   xE3
053D0:  CLRF   xE4
053D2:  CLRF   xE5
053D4:  CLRF   xE6
053D6:  CLRF   xE7
053D8:  CLRF   xE8
053DA:  CLRF   xE9
053DC:  CLRF   xEA
053DE:  CLRF   xEB
053E0:  CLRF   xEC
053E2:  CLRF   xED
053E4:  CLRF   xEE
053E6:  CLRF   xEF
053E8:  CLRF   xF0
053EA:  CLRF   xF1
053EC:  CLRF   xF2
053EE:  CLRF   xF3
053F0:  CLRF   xF4
053F2:  CLRF   xF5
053F4:  CLRF   xF6
053F6:  CLRF   xF7
053F8:  CLRF   xF8
053FA:  CLRF   xF9
053FC:  CLRF   xFA
053FE:  CLRF   xFB
05400:  CLRF   xFC
05402:  CLRF   xFD
05404:  CLRF   xFE
05406:  CLRF   xFF
05408:  MOVLB  1
0540A:  CLRF   x00
0540C:  CLRF   x01
0540E:  CLRF   x02
05410:  CLRF   x03
05412:  CLRF   x04
05414:  CLRF   x05
05416:  CLRF   x06
05418:  CLRF   x07
0541A:  CLRF   x08
0541C:  CLRF   x09
0541E:  CLRF   x0A
05420:  CLRF   x0B
05422:  CLRF   x0C
05424:  CLRF   x0D
05426:  CLRF   x0E
05428:  CLRF   x0F
0542A:  CLRF   x10
0542C:  CLRF   x11
0542E:  CLRF   x12
05430:  CLRF   x13
05432:  CLRF   x14
05434:  CLRF   x15
05436:  CLRF   x16
05438:  CLRF   x17
0543A:  CLRF   x18
0543C:  CLRF   x19
0543E:  CLRF   x1A
05440:  CLRF   x1B
05442:  CLRF   x1C
05444:  CLRF   x1D
05446:  CLRF   x1E
05448:  CLRF   x1F
0544A:  CLRF   x20
0544C:  CLRF   x21
0544E:  CLRF   x22
05450:  CLRF   x23
05452:  CLRF   x24
05454:  CLRF   x25
05456:  CLRF   x26
05458:  CLRF   x27
0545A:  CLRF   x28
0545C:  CLRF   x29
0545E:  CLRF   x2A
05460:  CLRF   x2B
05462:  CLRF   x2C
05464:  CLRF   x2D
05466:  CLRF   x2E
05468:  CLRF   x2F
0546A:  CLRF   x30
0546C:  CLRF   x31
0546E:  CLRF   x32
05470:  CLRF   x33
05472:  CLRF   x34
05474:  CLRF   x35
05476:  CLRF   x36
05478:  CLRF   x37
0547A:  CLRF   x38
0547C:  CLRF   x39
0547E:  CLRF   x3A
05480:  CLRF   x3B
05482:  CLRF   x3C
05484:  CLRF   x3D
05486:  CLRF   x3E
05488:  CLRF   x3F
0548A:  CLRF   x40
0548C:  CLRF   x41
0548E:  CLRF   x42
05490:  CLRF   x43
05492:  CLRF   x44
05494:  CLRF   x45
05496:  CLRF   x46
05498:  CLRF   x47
0549A:  CLRF   x48
0549C:  CLRF   x49
0549E:  CLRF   x4A
054A0:  CLRF   x4B
054A2:  CLRF   x4C
054A4:  CLRF   x4D
054A6:  CLRF   x4E
054A8:  CLRF   x4F
054AA:  CLRF   x50
054AC:  CLRF   x51
054AE:  CLRF   x52
054B0:  CLRF   x53
054B2:  CLRF   x54
054B4:  CLRF   x55
054B6:  CLRF   x56
054B8:  CLRF   x57
054BA:  CLRF   x58
054BC:  CLRF   x59
054BE:  CLRF   x5A
054C0:  CLRF   x5B
054C2:  CLRF   x5C
054C4:  CLRF   x5D
054C6:  CLRF   x5E
054C8:  CLRF   x5F
054CA:  CLRF   x60
054CC:  CLRF   x61
054CE:  CLRF   x62
054D0:  CLRF   x63
054D2:  CLRF   x64
054D4:  CLRF   x65
054D6:  CLRF   x66
054D8:  CLRF   x67
054DA:  CLRF   x68
054DC:  CLRF   x69
054DE:  CLRF   x6A
054E0:  CLRF   x6B
054E2:  CLRF   x6C
054E4:  CLRF   x6D
054E6:  CLRF   x6E
054E8:  CLRF   x6F
054EA:  CLRF   x70
054EC:  CLRF   x71
054EE:  CLRF   x72
054F0:  CLRF   x73
054F2:  CLRF   x74
054F4:  CLRF   x75
054F6:  CLRF   x76
054F8:  CLRF   x77
054FA:  CLRF   x78
054FC:  CLRF   x79
054FE:  CLRF   x7A
05500:  CLRF   x7B
05502:  CLRF   x7C
05504:  CLRF   x7D
05506:  CLRF   x7E
05508:  CLRF   x7F
0550A:  CLRF   x80
0550C:  CLRF   x81
0550E:  CLRF   x82
05510:  CLRF   x83
05512:  CLRF   x84
05514:  CLRF   x85
05516:  CLRF   x86
05518:  CLRF   x87
0551A:  CLRF   x88
0551C:  CLRF   x89
0551E:  CLRF   x8A
05520:  CLRF   x8B
05522:  CLRF   x8C
05524:  CLRF   x8D
05526:  CLRF   x8E
05528:  CLRF   x8F
0552A:  CLRF   x90
0552C:  CLRF   x91
0552E:  CLRF   x92
05530:  CLRF   x93
05532:  CLRF   x94
05534:  CLRF   x95
05536:  CLRF   x96
05538:  CLRF   x97
0553A:  CLRF   x98
0553C:  CLRF   x99
0553E:  CLRF   x9A
05540:  CLRF   x9B
05542:  CLRF   x9C
05544:  CLRF   x9D
05546:  CLRF   x9E
05548:  CLRF   x9F
0554A:  CLRF   xA0
0554C:  CLRF   xA1
0554E:  CLRF   xA2
05550:  CLRF   xA3
05552:  CLRF   xA4
05554:  CLRF   xA5
05556:  CLRF   xA6
05558:  CLRF   xA7
0555A:  CLRF   xA8
0555C:  CLRF   xA9
0555E:  CLRF   xAA
05560:  CLRF   xAB
05562:  CLRF   xAC
05564:  CLRF   xAD
05566:  CLRF   xAE
05568:  CLRF   xAF
0556A:  CLRF   xB0
0556C:  CLRF   xB1
0556E:  CLRF   xB2
05570:  CLRF   xB3
05572:  CLRF   xB4
05574:  CLRF   xB5
05576:  CLRF   xB6
05578:  CLRF   xB7
0557A:  CLRF   xB8
0557C:  CLRF   xB9
0557E:  CLRF   xBA
05580:  CLRF   xBB
05582:  CLRF   xBC
05584:  CLRF   xBD
05586:  CLRF   xBE
05588:  CLRF   xBF
0558A:  CLRF   xC0
0558C:  CLRF   xC1
0558E:  CLRF   xC2
05590:  CLRF   xC3
05592:  CLRF   xC4
05594:  CLRF   xC5
05596:  CLRF   xC6
05598:  CLRF   xC7
0559A:  CLRF   xC8
0559C:  CLRF   xC9
0559E:  CLRF   xCA
055A0:  CLRF   xCB
055A2:  CLRF   xCC
055A4:  CLRF   xCD
055A6:  CLRF   xCE
055A8:  CLRF   xCF
055AA:  CLRF   xD0
055AC:  CLRF   xD1
055AE:  CLRF   xD2
055B0:  CLRF   xD3
055B2:  CLRF   xD4
055B4:  CLRF   xD5
055B6:  CLRF   xD6
055B8:  CLRF   xD7
055BA:  CLRF   xD8
055BC:  CLRF   xD9
055BE:  CLRF   xDA
055C0:  CLRF   xDB
055C2:  CLRF   xDC
055C4:  CLRF   xDD
055C6:  CLRF   xDE
055C8:  CLRF   xDF
055CA:  CLRF   xE0
055CC:  CLRF   xE1
055CE:  CLRF   xE2
055D0:  CLRF   xE3
055D2:  CLRF   xE4
055D4:  CLRF   xE5
055D6:  CLRF   xE6
055D8:  CLRF   xE7
055DA:  CLRF   xE8
055DC:  CLRF   xE9
055DE:  CLRF   xEA
055E0:  CLRF   xEB
055E2:  CLRF   xEC
055E4:  CLRF   xED
055E6:  CLRF   xEE
055E8:  CLRF   xEF
055EA:  CLRF   xF0
055EC:  CLRF   xF1
055EE:  CLRF   xF2
055F0:  CLRF   xF3
055F2:  CLRF   xF4
055F4:  CLRF   xF5
055F6:  CLRF   xF6
055F8:  CLRF   xF7
055FA:  CLRF   xF8
055FC:  CLRF   xF9
055FE:  CLRF   xFA
05600:  CLRF   xFB
05602:  CLRF   xFC
05604:  CLRF   xFD
05606:  CLRF   xFE
05608:  CLRF   xFF
0560A:  MOVLB  2
0560C:  CLRF   x00
0560E:  CLRF   x01
05610:  CLRF   x02
05612:  CLRF   x03
05614:  CLRF   x04
05616:  CLRF   x05
05618:  CLRF   x06
0561A:  CLRF   x07
0561C:  CLRF   x08
0561E:  CLRF   x09
05620:  CLRF   x0A
05622:  CLRF   x0B
05624:  CLRF   x0C
05626:  CLRF   x0D
05628:  CLRF   x0E
0562A:  CLRF   x0F
0562C:  CLRF   x10
0562E:  CLRF   x11
05630:  CLRF   x12
05632:  CLRF   x13
05634:  CLRF   x14
05636:  CLRF   x15
05638:  CLRF   x16
0563A:  CLRF   x17
0563C:  CLRF   x18
0563E:  CLRF   x19
05640:  CLRF   x1A
05642:  CLRF   x1B
05644:  CLRF   x1C
05646:  CLRF   x1D
05648:  CLRF   x1E
0564A:  CLRF   x1F
0564C:  CLRF   x20
0564E:  CLRF   x21
05650:  CLRF   x22
05652:  CLRF   x23
05654:  CLRF   x24
05656:  CLRF   x25
05658:  CLRF   x26
0565A:  CLRF   x27
0565C:  CLRF   x28
0565E:  CLRF   x29
05660:  CLRF   x2A
05662:  CLRF   x2B
05664:  CLRF   x2C
05666:  CLRF   x2D
05668:  CLRF   x2E
0566A:  CLRF   x2F
0566C:  CLRF   x30
0566E:  CLRF   x31
05670:  CLRF   x32
05672:  CLRF   x33
05674:  CLRF   x34
05676:  CLRF   x35
05678:  CLRF   x36
0567A:  CLRF   x37
0567C:  CLRF   x38
0567E:  CLRF   x39
05680:  CLRF   x3A
05682:  CLRF   x3B
05684:  CLRF   x3C
05686:  CLRF   x3D
05688:  CLRF   x3E
0568A:  CLRF   x3F
0568C:  CLRF   x40
0568E:  CLRF   x41
05690:  CLRF   x42
05692:  CLRF   x43
05694:  CLRF   x44
05696:  CLRF   x45
05698:  CLRF   x46
0569A:  CLRF   x47
0569C:  CLRF   x48
0569E:  CLRF   x49
056A0:  CLRF   x4A
056A2:  CLRF   x4B
056A4:  CLRF   x4C
056A6:  CLRF   x4D
056A8:  CLRF   x4E
056AA:  CLRF   x4F
056AC:  CLRF   x50
056AE:  CLRF   x51
056B0:  CLRF   x52
056B2:  CLRF   x53
056B4:  CLRF   x54
056B6:  CLRF   x55
056B8:  CLRF   x56
056BA:  CLRF   x57
056BC:  CLRF   x58
056BE:  CLRF   x59
056C0:  CLRF   x5A
056C2:  CLRF   x5B
056C4:  CLRF   x5C
056C6:  CLRF   x5D
056C8:  CLRF   x5E
056CA:  CLRF   x5F
056CC:  CLRF   x60
056CE:  CLRF   x61
056D0:  CLRF   x62
056D2:  CLRF   x63
056D4:  CLRF   x64
056D6:  CLRF   x65
056D8:  CLRF   x66
056DA:  CLRF   x67
056DC:  CLRF   x68
056DE:  CLRF   x69
056E0:  CLRF   x6A
056E2:  CLRF   x6B
056E4:  CLRF   x6C
056E6:  CLRF   x6D
056E8:  CLRF   x6E
056EA:  CLRF   x6F
056EC:  CLRF   x70
056EE:  CLRF   x71
056F0:  CLRF   x72
056F2:  CLRF   x73
056F4:  CLRF   x74
056F6:  CLRF   x75
056F8:  CLRF   x76
056FA:  CLRF   x77
056FC:  CLRF   x78
056FE:  CLRF   x79
05700:  CLRF   x7A
05702:  CLRF   x7B
05704:  CLRF   x7C
05706:  CLRF   x7D
05708:  CLRF   x7E
0570A:  CLRF   x7F
0570C:  CLRF   x80
0570E:  CLRF   x81
05710:  CLRF   x82
05712:  CLRF   x83
05714:  CLRF   x84
05716:  CLRF   x85
05718:  CLRF   x86
0571A:  CLRF   x87
0571C:  CLRF   x88
0571E:  CLRF   x89
05720:  CLRF   x8A
05722:  CLRF   x8B
05724:  CLRF   x8C
05726:  CLRF   x8D
05728:  CLRF   x8E
0572A:  CLRF   x8F
0572C:  CLRF   x90
0572E:  CLRF   x91
05730:  CLRF   x92
05732:  CLRF   x93
05734:  CLRF   x94
05736:  CLRF   x95
05738:  CLRF   x96
0573A:  CLRF   x97
0573C:  CLRF   x98
0573E:  CLRF   x99
05740:  CLRF   x9A
05742:  CLRF   x9B
05744:  CLRF   x9C
05746:  CLRF   x9D
05748:  CLRF   x9E
0574A:  CLRF   x9F
0574C:  CLRF   xB4
0574E:  CLRF   xB5
05750:  CLRF   xB6
05752:  CLRF   xB7
05754:  CLRF   xB8
05756:  CLRF   xB9
05758:  CLRF   xBA
0575A:  CLRF   xBB
0575C:  MOVLB  3
0575E:  CLRF   x55
05760:  CLRF   x56
05762:  CLRF   x57
05764:  CLRF   x58
05766:  CLRF   x59
05768:  CLRF   x5A
0576A:  CLRF   x5B
0576C:  CLRF   x5C
0576E:  MOVLW  16
05770:  MOVWF  x80
05772:  MOVLW  3C
05774:  MOVWF  x81
05776:  MOVLW  10
05778:  MOVWF  x82
0577A:  MOVLW  3B
0577C:  MOVWF  x83
0577E:  MOVLW  17
05780:  MOVWF  x84
05782:  MOVLW  1C
05784:  MOVWF  x85
05786:  MOVLW  14
05788:  MOVWF  x86
0578A:  MOVLW  2E
0578C:  MOVWF  x87
0578E:  CLRF   x88
05790:  CLRF   x89
05792:  CLRF   x8A
05794:  CLRF   x8B
05796:  CLRF   x8C
05798:  CLRF   x8D
0579A:  CLRF   x8E
0579C:  MOVLW  12
0579E:  MOVWF  x8F
057A0:  MOVLW  39
057A2:  MOVWF  x90
057A4:  MOVLW  24
057A6:  MOVWF  x91
057A8:  MOVLW  3A
057AA:  MOVWF  x92
057AC:  MOVLW  20
057AE:  MOVWF  x93
057B0:  MOVLW  26
057B2:  MOVWF  x94
057B4:  MOVLW  13
057B6:  MOVWF  x95
057B8:  MOVLW  11
057BA:  MOVWF  x96
057BC:  CLRF   x97
057BE:  CLRF   x98
057C0:  CLRF   x99
057C2:  CLRF   x9A
057C4:  CLRF   x9B
057C6:  CLRF   x9C
057C8:  CLRF   x9D
....................     
....................    for (posicion=0;posicion<0x10;posicion++){ 
057CA:  MOVLB  0
057CC:  CLRF   x86
057CE:  MOVF   x86,W
057D0:  SUBLW  0F
057D2:  BNC   57E8
....................       SlaveA0Tx[posicion] = 0x00; 
057D4:  CLRF   03
057D6:  MOVF   x86,W
057D8:  ADDLW  64
057DA:  MOVWF  FE9
057DC:  MOVLW  00
057DE:  ADDWFC 03,W
057E0:  MOVWF  FEA
057E2:  CLRF   FEF
....................    } 
057E4:  INCF   x86,F
057E6:  BRA    57CE
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_1); 
057E8:  MOVLW  C8
057EA:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
057EC:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
057EE:  MOVLW  85
057F0:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
057F2:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN3); 
057F4:  MOVF   FC1,W
057F6:  ANDLW  C0
057F8:  IORLW  0B
057FA:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
057FC:  MOVF   FC0,W
057FE:  ANDLW  C0
05800:  IORLW  02
05802:  MOVWF  FC0
05804:  BSF    FC0.7
05806:  BSF    FC2.0
....................    port_b_pullups(true); 
05808:  BCF    FF1.7
....................    enable_interrupts(int_rda); 
0580A:  BSF    F9D.5
....................    setup_wdt(WDT_ON); 
0580C:  BSF    FD1.0
....................    enable_interrupts(global); 
0580E:  MOVLW  C0
05810:  IORWF  FF2,F
....................    LeeEEPROM(); 
05812:  GOTO   1BD2
....................    rtc_init(); 
05816:  GOTO   2952
....................    delay_ms(1); 
0581A:  MOVLW  01
0581C:  MOVLB  3
0581E:  MOVWF  xDB
05820:  MOVLB  0
05822:  CALL   179E
....................    LimitaValores(); 
05826:  GOTO   2A6C
....................    CalculoImpresion=timpresion*60; 
0582A:  MOVLB  3
0582C:  MOVF   x2E,W
0582E:  MULLW  3C
05830:  MOVFF  FF3,32F
....................    printf("page Bienvenida"); 
05834:  MOVLW  76
05836:  MOVWF  FF6
05838:  MOVLW  04
0583A:  MOVWF  FF7
0583C:  MOVLW  00
0583E:  MOVWF  FF8
05840:  MOVLB  0
05842:  CALL   348A
....................    SendDataDisplay(); 
05846:  CALL   34BC
....................    printf("bkcmd=0"); 
0584A:  MOVLW  86
0584C:  MOVWF  FF6
0584E:  MOVLW  04
05850:  MOVWF  FF7
05852:  MOVLW  00
05854:  MOVWF  FF8
05856:  CALL   348A
....................    SendDataDisplay(); 
0585A:  CALL   34BC
....................    delay_ms(1500); 
0585E:  MOVLW  06
05860:  MOVLB  3
05862:  MOVWF  xC6
05864:  MOVLW  FA
05866:  MOVWF  xDB
05868:  MOVLB  0
0586A:  CALL   179E
0586E:  MOVLB  3
05870:  DECFSZ xC6,F
05872:  BRA    5864
....................    printf("page Clave"); 
05874:  MOVLW  8E
05876:  MOVWF  FF6
05878:  MOVLW  04
0587A:  MOVWF  FF7
0587C:  MOVLW  00
0587E:  MOVWF  FF8
05880:  MOVLB  0
05882:  CALL   348A
....................    SendDataDisplay(); 
05886:  CALL   34BC
....................    ApagaSalidas(); 
0588A:  CALL   34F2
....................     
....................    for(i=0;i<MediaMovil;i++){ 
0588E:  MOVLB  3
05890:  CLRF   x37
05892:  MOVLB  2
05894:  MOVF   xCC,W
05896:  MOVLB  3
05898:  SUBWF  x37,W
0589A:  BC    58BC
....................       Temperatura=LeerPT100(MediaMovil); 
0589C:  MOVFF  2CC,3C6
058A0:  MOVLB  0
058A2:  CALL   3680
058A6:  MOVFF  03,315
058AA:  MOVFF  02,314
058AE:  MOVFF  01,313
058B2:  MOVFF  00,312
....................    } 
058B6:  MOVLB  3
058B8:  INCF   x37,F
058BA:  BRA    5892
....................     
....................    if(UP && DOWN && RIGHT && LEFT)//Si oprime boton de Toma. 
058BC:  BSF    F93.0
058BE:  BTFSC  F81.0
058C0:  BRA    5948
058C2:  BSF    F93.1
058C4:  BTFSC  F81.1
058C6:  BRA    5948
058C8:  BSF    F93.2
058CA:  BTFSC  F81.2
058CC:  BRA    5948
058CE:  BSF    F93.3
058D0:  BTFSC  F81.3
058D2:  BRA    5948
....................    { 
....................       write_eeprom(37,0); 
058D4:  CLRF   FAA
058D6:  MOVLW  25
058D8:  MOVWF  FA9
058DA:  CLRF   FA8
058DC:  BCF    FA6.6
058DE:  BCF    FA6.7
058E0:  BSF    FA6.2
058E2:  MOVF   FF2,W
058E4:  MOVWF  00
058E6:  BCF    FF2.6
058E8:  BCF    FF2.7
058EA:  MOVLB  F
058EC:  MOVLW  55
058EE:  MOVWF  FA7
058F0:  MOVLW  AA
058F2:  MOVWF  FA7
058F4:  BSF    FA6.1
058F6:  BTFSC  FA6.1
058F8:  BRA    58F6
058FA:  BCF    FA6.2
058FC:  MOVF   00,W
058FE:  IORWF  FF2,F
....................       delay_ms(20); 
05900:  MOVLW  14
05902:  MOVLB  3
05904:  MOVWF  xDB
05906:  MOVLB  0
05908:  CALL   179E
....................       write_eeprom(38,0); 
0590C:  CLRF   FAA
0590E:  MOVLW  26
05910:  MOVWF  FA9
05912:  CLRF   FA8
05914:  BCF    FA6.6
05916:  BCF    FA6.7
05918:  BSF    FA6.2
0591A:  MOVF   FF2,W
0591C:  MOVWF  00
0591E:  BCF    FF2.6
05920:  BCF    FF2.7
05922:  MOVLB  F
05924:  MOVLW  55
05926:  MOVWF  FA7
05928:  MOVLW  AA
0592A:  MOVWF  FA7
0592C:  BSF    FA6.1
0592E:  BTFSC  FA6.1
05930:  BRA    592E
05932:  BCF    FA6.2
05934:  MOVF   00,W
05936:  IORWF  FF2,F
....................       delay_ms(20); 
05938:  MOVLW  14
0593A:  MOVLB  3
0593C:  MOVWF  xDB
0593E:  MOVLB  0
05940:  CALL   179E
....................       reset_cpu(); 
05944:  RESET
05946:  MOVLB  3
....................    } 
....................     
....................    while(true) 
....................    { 
....................       LeeDisplay(); 
05948:  MOVLB  0
0594A:  GOTO   3A3A
....................       Envio_Esclavos(); 
0594E:  CALL   3E0E
....................       delay_ms(1); 
05952:  MOVLW  01
05954:  MOVLB  3
05956:  MOVWF  xDB
05958:  MOVLB  0
0595A:  CALL   179E
....................       //Lectura_Esclavos(); 
....................       restart_wdt(); 
0595E:  CLRWDT
....................        
....................       if(!Esterilizando || Desfogando){ 
05960:  BTFSS  xA0.2
05962:  BRA    5968
05964:  BTFSS  xA0.5
05966:  BRA    5972
....................          CalculoImpresion=180; 
05968:  MOVLW  B4
0596A:  MOVLB  3
0596C:  MOVWF  x2F
....................       }else{ 
0596E:  BRA    5978
05970:  MOVLB  0
....................          CalculoImpresion=60; 
05972:  MOVLW  3C
05974:  MOVLB  3
05976:  MOVWF  x2F
....................       } 
....................        
....................       // Monitoreo Nivel de Agua//-------------------------------------- 
....................             if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
05978:  BSF    F94.1
0597A:  BTFSC  F82.1
0597C:  BRA    59A6
....................                TiempoSensadoNivel=0; 
0597E:  MOVLB  0
05980:  CLRF   xA9
05982:  CLRF   xA8
....................                Controlando=0;    
05984:  MOVLB  3
05986:  CLRF   x2C
....................                if(tiempoAgua<600){ 
05988:  MOVF   x6B,W
0598A:  SUBLW  02
0598C:  BNC   599A
0598E:  BNZ   5996
05990:  MOVF   x6A,W
05992:  SUBLW  57
05994:  BNC   599A
....................                   CalderinLleno=OFF; 
05996:  MOVLB  0
05998:  BCF    xA0.0
....................                } 
....................                SensadoNivel=OFF; 
0599A:  MOVLB  0
0599C:  BCF    xA0.4
....................                TiempoSensadoNivel=0; 
0599E:  CLRF   xA9
059A0:  CLRF   xA8
....................             } else{ 
059A2:  BRA    59BA
059A4:  MOVLB  3
....................                SensadoNivel=ON; 
059A6:  MOVLB  0
059A8:  BSF    xA0.4
....................                if(TiempoSensadoNivel>5){ 
059AA:  MOVF   xA9,F
059AC:  BNZ   59B4
059AE:  MOVF   xA8,W
059B0:  SUBLW  05
059B2:  BC    59BA
....................                   SensadoNivel=OFF; 
059B4:  BCF    xA0.4
....................                   CalderinLleno=ON; 
059B6:  BSF    xA0.0
....................                   IniciaLlenado=OFF;                   
059B8:  BCF    x9F.7
....................                } 
....................             } 
.................... // Tiempo de Grafica//-------------------------------------- 
....................       if(tiempos2>=6400){ 
059BA:  MOVLB  3
059BC:  MOVF   x44,W
059BE:  SUBLW  18
059C0:  BC    59C8
....................          Grafica=1; 
059C2:  BSF    x29.2
....................          tiempos2=0; 
059C4:  CLRF   x44
059C6:  CLRF   x43
....................       } 
....................  
.................... // Tiempo de Muestreo//-------------------------------------- 
....................       if(tiempos3>=20){ 
059C8:  MOVF   x46,F
059CA:  BNZ   59D4
059CC:  MOVF   x45,W
059CE:  SUBLW  13
059D0:  BTFSC  FD8.0
059D2:  BRA    5B08
....................          Temperatura=LeerPt100(MediaMovil); 
059D4:  MOVFF  2CC,3C6
059D8:  MOVLB  0
059DA:  CALL   3680
059DE:  MOVFF  03,315
059E2:  MOVFF  02,314
059E6:  MOVFF  01,313
059EA:  MOVFF  00,312
....................          PresionCamara=Leer_Sensor_Presion_Camara(10); 
059EE:  MOVLW  0A
059F0:  MOVLB  3
059F2:  MOVWF  xC6
059F4:  MOVLB  0
059F6:  GOTO   3E4E
059FA:  MOVFF  03,3DE
059FE:  MOVFF  02,3DD
05A02:  MOVFF  01,3DC
05A06:  MOVFF  00,3DB
05A0A:  CALL   3BB4
05A0E:  MOVFF  02,34E
05A12:  MOVFF  01,34D
....................          PresionPreCamara=Leer_Sensor_Presion_PreCamara(10); 
05A16:  MOVLW  0A
05A18:  MOVLB  3
05A1A:  MOVWF  xC6
05A1C:  MOVLB  0
05A1E:  GOTO   4042
05A22:  MOVFF  03,3DE
05A26:  MOVFF  02,3DD
05A2A:  MOVFF  01,3DC
05A2E:  MOVFF  00,3DB
05A32:  CALL   3BB4
05A36:  MOVFF  02,350
05A3A:  MOVFF  01,34F
....................          rtc_get_date(Dia,Mes,Year,dow); 
....................          rtc_get_time(Hora,Minuto,Segundo); 
....................          tiempos3=0; 
*
05B02:  MOVLB  3
05B04:  CLRF   x46
05B06:  CLRF   x45
....................       } 
....................        
.................... // Monitoreo Parada Emergencia//--------------------------------------       
....................       if(!STOP && !IniciaCiclo && !PruebaEstados){ 
05B08:  BSF    F93.7
05B0A:  BTFSS  F81.7
05B0C:  BRA    5B6E
05B0E:  MOVLB  0
05B10:  BTFSS  xA0.1
05B12:  BRA    5B18
05B14:  MOVLB  3
05B16:  BRA    5B6E
05B18:  BTFSS  xA1.2
05B1A:  BRA    5B20
05B1C:  MOVLB  3
05B1E:  BRA    5B6E
....................          if(!disp_Stop){ 
05B20:  MOVLB  3
05B22:  BTFSC  x29.3
05B24:  BRA    5B44
....................             disp_Stop=1;Menu=255; 
05B26:  BSF    x29.3
05B28:  MOVLW  FF
05B2A:  MOVWF  x34
....................             printf("page Emergencia"); 
05B2C:  MOVLW  9A
05B2E:  MOVWF  FF6
05B30:  MOVLW  04
05B32:  MOVWF  FF7
05B34:  MOVLW  00
05B36:  MOVWF  FF8
05B38:  MOVLB  0
05B3A:  CALL   348A
....................             SendDataDisplay(); 
05B3E:  CALL   34BC
05B42:  MOVLB  3
....................          } 
....................          Controlando=0; 
05B44:  CLRF   x2C
....................          Desfogue_on; 
05B46:  BSF    F8C.4
05B48:  BCF    F95.4
....................          SSR_off; 
05B4A:  BSF    F8B.2
05B4C:  BCF    F94.2
....................          Bomba_off; 
05B4E:  BCF    F8C.6
05B50:  BCF    F95.6
....................          Agua_off; 
05B52:  BCF    F8C.5
05B54:  BCF    F95.5
....................          DesfogueSuave=OFF; 
05B56:  MOVLB  0
05B58:  BCF    xA0.6
....................          ActivaAlarma(1); 
05B5A:  MOVLW  01
05B5C:  MOVLB  3
05B5E:  MOVWF  xC6
05B60:  MOVLB  0
05B62:  CALL   426C
....................          BorraBuffer(); 
05B66:  GOTO   433C
....................       }else{ 
05B6A:  BRA    5B74
05B6C:  MOVLB  3
....................          if(disp_Stop){ 
05B6E:  BTFSS  x29.3
05B70:  BRA    5B74
....................             reset_cpu(); 
05B72:  RESET
....................          } 
....................       }            
....................    //Buzzer_off;    
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==240){ //Menu de Bienvenida. 
05B74:  MOVLB  3
05B76:  MOVF   x34,W
05B78:  SUBLW  F0
05B7A:  BNZ   5BC4
....................       printf("bkcmd=0"); 
05B7C:  MOVLW  AA
05B7E:  MOVWF  FF6
05B80:  MOVLW  04
05B82:  MOVWF  FF7
05B84:  MOVLW  00
05B86:  MOVWF  FF8
05B88:  MOVLB  0
05B8A:  CALL   348A
....................       SendDataDisplay(); 
05B8E:  CALL   34BC
....................       delay_ms(1500); 
05B92:  MOVLW  06
05B94:  MOVLB  3
05B96:  MOVWF  xC6
05B98:  MOVLW  FA
05B9A:  MOVWF  xDB
05B9C:  MOVLB  0
05B9E:  CALL   179E
05BA2:  MOVLB  3
05BA4:  DECFSZ xC6,F
05BA6:  BRA    5B98
....................       printf("page Clave"); 
05BA8:  MOVLW  B2
05BAA:  MOVWF  FF6
05BAC:  MOVLW  04
05BAE:  MOVWF  FF7
05BB0:  MOVLW  00
05BB2:  MOVWF  FF8
05BB4:  MOVLB  0
05BB6:  CALL   348A
....................       SendDataDisplay(); 
05BBA:  CALL   34BC
....................       ApagaSalidas(); 
05BBE:  CALL   34F2
05BC2:  MOVLB  3
....................    } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==0){ //Menu de Contraseña de acceso. 
05BC4:  MOVF   x34,F
05BC6:  BTFSS  FD8.2
05BC8:  GOTO   6642
....................       ApagaSalidas(); 
05BCC:  MOVLB  0
05BCE:  CALL   34F2
....................       entro=OFF; 
05BD2:  BCF    xA3.6
....................       if(Digito==1){ 
05BD4:  MOVLB  2
05BD6:  DECFSZ xD1,W
05BD8:  BRA    5C24
....................          printf("t0.txt=\"%u\"",Contrasena[0]); 
05BDA:  MOVLW  BE
05BDC:  MOVWF  FF6
05BDE:  MOVLW  04
05BE0:  MOVWF  FF7
05BE2:  MOVLW  00
05BE4:  MOVWF  FF8
05BE6:  MOVLW  08
05BE8:  MOVLB  3
05BEA:  MOVWF  xCA
05BEC:  MOVLB  0
05BEE:  CALL   4368
05BF2:  MOVFF  355,3C8
05BF6:  MOVLW  1B
05BF8:  MOVLB  3
05BFA:  MOVWF  xC9
05BFC:  MOVLB  0
05BFE:  CALL   43C6
05C02:  MOVLW  22
05C04:  BTFSS  F9E.4
05C06:  BRA    5C04
05C08:  MOVWF  FAD
....................          SendDataDisplay(); 
05C0A:  CALL   34BC
....................          printf("va0.val=1"); 
05C0E:  MOVLW  CA
05C10:  MOVWF  FF6
05C12:  MOVLW  04
05C14:  MOVWF  FF7
05C16:  MOVLW  00
05C18:  MOVWF  FF8
05C1A:  CALL   348A
....................          SendDataDisplay(); 
05C1E:  CALL   34BC
05C22:  MOVLB  2
....................       } 
....................        
....................       if(Digito==2){ 
05C24:  MOVF   xD1,W
05C26:  SUBLW  02
05C28:  BNZ   5C84
....................          printf("t0.txt=\"%u%u\"",Contrasena[0],Contrasena[1]); 
05C2A:  MOVLW  D4
05C2C:  MOVWF  FF6
05C2E:  MOVLW  04
05C30:  MOVWF  FF7
05C32:  MOVLW  00
05C34:  MOVWF  FF8
05C36:  MOVLW  08
05C38:  MOVLB  3
05C3A:  MOVWF  xCA
05C3C:  MOVLB  0
05C3E:  CALL   4368
05C42:  MOVFF  355,3C8
05C46:  MOVLW  1B
05C48:  MOVLB  3
05C4A:  MOVWF  xC9
05C4C:  MOVLB  0
05C4E:  CALL   43C6
05C52:  MOVFF  356,3C8
05C56:  MOVLW  1B
05C58:  MOVLB  3
05C5A:  MOVWF  xC9
05C5C:  MOVLB  0
05C5E:  CALL   43C6
05C62:  MOVLW  22
05C64:  BTFSS  F9E.4
05C66:  BRA    5C64
05C68:  MOVWF  FAD
....................          SendDataDisplay(); 
05C6A:  CALL   34BC
....................          printf("va0.val=2"); 
05C6E:  MOVLW  E2
05C70:  MOVWF  FF6
05C72:  MOVLW  04
05C74:  MOVWF  FF7
05C76:  MOVLW  00
05C78:  MOVWF  FF8
05C7A:  CALL   348A
....................          SendDataDisplay(); 
05C7E:  CALL   34BC
05C82:  MOVLB  2
....................       } 
....................        
....................       if(Digito==3){ 
05C84:  MOVF   xD1,W
05C86:  SUBLW  03
05C88:  BNZ   5CF4
....................          printf("t0.txt=\"%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2]); 
05C8A:  MOVLW  EC
05C8C:  MOVWF  FF6
05C8E:  MOVLW  04
05C90:  MOVWF  FF7
05C92:  MOVLW  00
05C94:  MOVWF  FF8
05C96:  MOVLW  08
05C98:  MOVLB  3
05C9A:  MOVWF  xCA
05C9C:  MOVLB  0
05C9E:  CALL   4368
05CA2:  MOVFF  355,3C8
05CA6:  MOVLW  1B
05CA8:  MOVLB  3
05CAA:  MOVWF  xC9
05CAC:  MOVLB  0
05CAE:  CALL   43C6
05CB2:  MOVFF  356,3C8
05CB6:  MOVLW  1B
05CB8:  MOVLB  3
05CBA:  MOVWF  xC9
05CBC:  MOVLB  0
05CBE:  CALL   43C6
05CC2:  MOVFF  357,3C8
05CC6:  MOVLW  1B
05CC8:  MOVLB  3
05CCA:  MOVWF  xC9
05CCC:  MOVLB  0
05CCE:  CALL   43C6
05CD2:  MOVLW  22
05CD4:  BTFSS  F9E.4
05CD6:  BRA    5CD4
05CD8:  MOVWF  FAD
....................          SendDataDisplay(); 
05CDA:  CALL   34BC
....................          printf("va0.val=3"); 
05CDE:  MOVLW  FC
05CE0:  MOVWF  FF6
05CE2:  MOVLW  04
05CE4:  MOVWF  FF7
05CE6:  MOVLW  00
05CE8:  MOVWF  FF8
05CEA:  CALL   348A
....................          SendDataDisplay(); 
05CEE:  CALL   34BC
05CF2:  MOVLB  2
....................       } 
....................        
....................       if(Digito==4){ 
05CF4:  MOVF   xD1,W
05CF6:  SUBLW  04
05CF8:  BNZ   5D74
....................          printf("t0.txt=\"%u%u%u%u\"",Contrasena[0],Contrasena[1],Contrasena[2],Contrasena[3]); 
05CFA:  MOVLW  06
05CFC:  MOVWF  FF6
05CFE:  MOVLW  05
05D00:  MOVWF  FF7
05D02:  MOVLW  00
05D04:  MOVWF  FF8
05D06:  MOVLW  08
05D08:  MOVLB  3
05D0A:  MOVWF  xCA
05D0C:  MOVLB  0
05D0E:  CALL   4368
05D12:  MOVFF  355,3C8
05D16:  MOVLW  1B
05D18:  MOVLB  3
05D1A:  MOVWF  xC9
05D1C:  MOVLB  0
05D1E:  CALL   43C6
05D22:  MOVFF  356,3C8
05D26:  MOVLW  1B
05D28:  MOVLB  3
05D2A:  MOVWF  xC9
05D2C:  MOVLB  0
05D2E:  CALL   43C6
05D32:  MOVFF  357,3C8
05D36:  MOVLW  1B
05D38:  MOVLB  3
05D3A:  MOVWF  xC9
05D3C:  MOVLB  0
05D3E:  CALL   43C6
05D42:  MOVFF  358,3C8
05D46:  MOVLW  1B
05D48:  MOVLB  3
05D4A:  MOVWF  xC9
05D4C:  MOVLB  0
05D4E:  CALL   43C6
05D52:  MOVLW  22
05D54:  BTFSS  F9E.4
05D56:  BRA    5D54
05D58:  MOVWF  FAD
....................          SendDataDisplay(); 
05D5A:  CALL   34BC
....................          printf("va0.val=4"); 
05D5E:  MOVLW  18
05D60:  MOVWF  FF6
05D62:  MOVLW  05
05D64:  MOVWF  FF7
05D66:  MOVLW  00
05D68:  MOVWF  FF8
05D6A:  CALL   348A
....................          SendDataDisplay(); 
05D6E:  CALL   34BC
05D72:  MOVLB  2
....................       } 
....................        
....................       if(UP){ 
05D74:  BSF    F93.0
05D76:  BTFSC  F81.0
05D78:  BRA    5DC2
....................          delay_ms(100); 
05D7A:  MOVLW  64
05D7C:  MOVLB  3
05D7E:  MOVWF  xDB
05D80:  MOVLB  0
05D82:  CALL   179E
....................          if(UP){ 
05D86:  BSF    F93.0
05D88:  BTFSC  F81.0
05D8A:  BRA    5DC4
....................          if(Digito==0) 
05D8C:  MOVLB  2
05D8E:  MOVF   xD1,F
05D90:  BNZ   5D96
....................             Digito=1; 
05D92:  MOVLW  01
05D94:  MOVWF  xD1
....................             if(Contrasena[Digito-1]<9) 
05D96:  MOVLW  01
05D98:  SUBWF  xD1,W
05D9A:  CLRF   03
05D9C:  ADDLW  55
05D9E:  MOVWF  FE9
05DA0:  MOVLW  03
05DA2:  ADDWFC 03,W
05DA4:  MOVWF  FEA
05DA6:  BTFSC  FEF.7
05DA8:  BRA    5DB0
05DAA:  MOVF   FEF,W
05DAC:  SUBLW  08
05DAE:  BNC   5DC2
....................                Contrasena[Digito-1]++; 
05DB0:  MOVLW  01
05DB2:  SUBWF  xD1,W
05DB4:  CLRF   03
05DB6:  ADDLW  55
05DB8:  MOVWF  FE9
05DBA:  MOVLW  03
05DBC:  ADDWFC 03,W
05DBE:  MOVWF  FEA
05DC0:  INCF   FEF,F
05DC2:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
05DC4:  BSF    F93.1
05DC6:  BTFSC  F81.1
05DC8:  BRA    5E14
....................          delay_ms(100); 
05DCA:  MOVLW  64
05DCC:  MOVLB  3
05DCE:  MOVWF  xDB
05DD0:  MOVLB  0
05DD2:  CALL   179E
....................          if(Digito==0) 
05DD6:  MOVLB  2
05DD8:  MOVF   xD1,F
05DDA:  BNZ   5DE0
....................             Digito=1; 
05DDC:  MOVLW  01
05DDE:  MOVWF  xD1
....................          if(DOWN){ 
05DE0:  BSF    F93.1
05DE2:  BTFSC  F81.1
05DE4:  BRA    5E12
....................             if(Contrasena[Digito-1]>0) 
05DE6:  MOVLW  01
05DE8:  SUBWF  xD1,W
05DEA:  CLRF   03
05DEC:  ADDLW  55
05DEE:  MOVWF  FE9
05DF0:  MOVLW  03
05DF2:  ADDWFC 03,W
05DF4:  MOVWF  FEA
05DF6:  BTFSC  FEF.7
05DF8:  BRA    5E12
05DFA:  MOVF   FEF,W
05DFC:  SUBLW  00
05DFE:  BC    5E12
....................                Contrasena[Digito-1]--; 
05E00:  MOVLW  01
05E02:  SUBWF  xD1,W
05E04:  CLRF   03
05E06:  ADDLW  55
05E08:  MOVWF  FE9
05E0A:  MOVLW  03
05E0C:  ADDWFC 03,W
05E0E:  MOVWF  FEA
05E10:  DECF   FEF,F
05E12:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
05E14:  BSF    F93.2
05E16:  BTFSC  F81.2
05E18:  BRA    5E32
....................          delay_ms(100); 
05E1A:  MOVLW  64
05E1C:  MOVLB  3
05E1E:  MOVWF  xDB
05E20:  MOVLB  0
05E22:  CALL   179E
....................          if(RIGHT){ 
05E26:  BSF    F93.2
05E28:  BTFSC  F81.2
05E2A:  BRA    5E32
....................             Digito++; 
05E2C:  MOVLB  2
05E2E:  INCF   xD1,F
05E30:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(Digito>4){ 
05E32:  MOVLB  2
05E34:  MOVF   xD1,W
05E36:  SUBLW  04
05E38:  BTFSC  FD8.0
05E3A:  BRA    618C
....................       Digito=0; 
05E3C:  CLRF   xD1
....................       printf("t0.txt=\"\""); 
05E3E:  MOVLW  22
05E40:  MOVWF  FF6
05E42:  MOVLW  05
05E44:  MOVWF  FF7
05E46:  MOVLW  00
05E48:  MOVWF  FF8
05E4A:  MOVLB  0
05E4C:  CALL   348A
....................       SendDataDisplay(); 
05E50:  CALL   34BC
....................          if(TipoClave==0){ 
05E54:  MOVLB  2
05E56:  MOVF   xCF,F
05E58:  BTFSS  FD8.2
05E5A:  BRA    5FAA
....................             if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2){ // Si Ingresa clave para reset general del sistema. 
05E5C:  MOVLB  3
05E5E:  MOVF   x55,W
05E60:  SUBLW  03
05E62:  BTFSS  FD8.2
05E64:  BRA    5F5E
05E66:  MOVF   x56,W
05E68:  SUBLW  08
05E6A:  BTFSS  FD8.2
05E6C:  BRA    5F5E
05E6E:  MOVF   x57,W
05E70:  SUBLW  09
05E72:  BNZ   5F5E
05E74:  MOVF   x58,W
05E76:  SUBLW  02
05E78:  BNZ   5F5E
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
05E7A:  CLRF   FAA
05E7C:  MOVLW  0A
05E7E:  MOVWF  FA9
05E80:  CLRF   FA8
05E82:  BCF    FA6.6
05E84:  BCF    FA6.7
05E86:  BSF    FA6.2
05E88:  MOVF   FF2,W
05E8A:  MOVWF  00
05E8C:  BCF    FF2.6
05E8E:  BCF    FF2.7
05E90:  MOVLB  F
05E92:  MOVLW  55
05E94:  MOVWF  FA7
05E96:  MOVLW  AA
05E98:  MOVWF  FA7
05E9A:  BSF    FA6.1
05E9C:  BTFSC  FA6.1
05E9E:  BRA    5E9C
05EA0:  BCF    FA6.2
05EA2:  MOVF   00,W
05EA4:  IORWF  FF2,F
05EA6:  MOVLW  14
05EA8:  MOVLB  3
05EAA:  MOVWF  xDB
05EAC:  MOVLB  0
05EAE:  CALL   179E
05EB2:  CLRF   FAA
05EB4:  MOVLW  0B
05EB6:  MOVWF  FA9
05EB8:  CLRF   FA8
05EBA:  BCF    FA6.6
05EBC:  BCF    FA6.7
05EBE:  BSF    FA6.2
05EC0:  MOVF   FF2,W
05EC2:  MOVWF  00
05EC4:  BCF    FF2.6
05EC6:  BCF    FF2.7
05EC8:  MOVLB  F
05ECA:  MOVLW  55
05ECC:  MOVWF  FA7
05ECE:  MOVLW  AA
05ED0:  MOVWF  FA7
05ED2:  BSF    FA6.1
05ED4:  BTFSC  FA6.1
05ED6:  BRA    5ED4
05ED8:  BCF    FA6.2
05EDA:  MOVF   00,W
05EDC:  IORWF  FF2,F
05EDE:  MOVLW  14
05EE0:  MOVLB  3
05EE2:  MOVWF  xDB
05EE4:  MOVLB  0
05EE6:  CALL   179E
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
05EEA:  CLRF   FAA
05EEC:  MOVLW  0C
05EEE:  MOVWF  FA9
05EF0:  CLRF   FA8
05EF2:  BCF    FA6.6
05EF4:  BCF    FA6.7
05EF6:  BSF    FA6.2
05EF8:  MOVF   FF2,W
05EFA:  MOVWF  00
05EFC:  BCF    FF2.6
05EFE:  BCF    FF2.7
05F00:  MOVLB  F
05F02:  MOVLW  55
05F04:  MOVWF  FA7
05F06:  MOVLW  AA
05F08:  MOVWF  FA7
05F0A:  BSF    FA6.1
05F0C:  BTFSC  FA6.1
05F0E:  BRA    5F0C
05F10:  BCF    FA6.2
05F12:  MOVF   00,W
05F14:  IORWF  FF2,F
05F16:  MOVLW  14
05F18:  MOVLB  3
05F1A:  MOVWF  xDB
05F1C:  MOVLB  0
05F1E:  CALL   179E
05F22:  CLRF   FAA
05F24:  MOVLW  0D
05F26:  MOVWF  FA9
05F28:  CLRF   FA8
05F2A:  BCF    FA6.6
05F2C:  BCF    FA6.7
05F2E:  BSF    FA6.2
05F30:  MOVF   FF2,W
05F32:  MOVWF  00
05F34:  BCF    FF2.6
05F36:  BCF    FF2.7
05F38:  MOVLB  F
05F3A:  MOVLW  55
05F3C:  MOVWF  FA7
05F3E:  MOVLW  AA
05F40:  MOVWF  FA7
05F42:  BSF    FA6.1
05F44:  BTFSC  FA6.1
05F46:  BRA    5F44
05F48:  BCF    FA6.2
05F4A:  MOVF   00,W
05F4C:  IORWF  FF2,F
05F4E:  MOVLW  14
05F50:  MOVLB  3
05F52:  MOVWF  xDB
05F54:  MOVLB  0
05F56:  CALL   179E
....................                reset_cpu(); 
05F5A:  RESET
05F5C:  MOVLB  3
....................             } 
....................              
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
05F5E:  MOVF   x59,W
05F60:  SUBWF  x55,W
05F62:  BNZ   5F90
05F64:  MOVF   x5A,W
05F66:  SUBWF  x56,W
05F68:  BNZ   5F90
05F6A:  MOVF   x5B,W
05F6C:  SUBWF  x57,W
05F6E:  BNZ   5F90
05F70:  MOVF   x5C,W
05F72:  SUBWF  x58,W
05F74:  BNZ   5F90
....................                //BorraBuffer(); 
....................                printf("page ClaveCorrecta"); 
05F76:  MOVLW  2C
05F78:  MOVWF  FF6
05F7A:  MOVLW  05
05F7C:  MOVWF  FF7
05F7E:  MOVLW  00
05F80:  MOVWF  FF8
05F82:  MOVLB  0
05F84:  CALL   348A
....................                SendDataDisplay(); 
05F88:  CALL   34BC
....................             }else{ 
05F8C:  BRA    5FA6
05F8E:  MOVLB  3
....................                //BorraBuffer(); 
....................                printf("page ClaveBad"); 
05F90:  MOVLW  40
05F92:  MOVWF  FF6
05F94:  MOVLW  05
05F96:  MOVWF  FF7
05F98:  MOVLW  00
05F9A:  MOVWF  FF8
05F9C:  MOVLB  0
05F9E:  CALL   348A
....................                SendDataDisplay(); 
05FA2:  CALL   34BC
....................             }  
....................          }else if(TipoClave==1){ 
05FA6:  BRA    618A
05FA8:  MOVLB  2
05FAA:  DECFSZ xCF,W
05FAC:  BRA    5FFC
....................             if(Contrasena[0]==4&&Contrasena[1]==4&&Contrasena[2]==4&&Contrasena[3]==4){ // Si Ingresa clave de Servicio Tecnico 
05FAE:  MOVLB  3
05FB0:  MOVF   x55,W
05FB2:  SUBLW  04
05FB4:  BNZ   5FE2
05FB6:  MOVF   x56,W
05FB8:  SUBLW  04
05FBA:  BNZ   5FE2
05FBC:  MOVF   x57,W
05FBE:  SUBLW  04
05FC0:  BNZ   5FE2
05FC2:  MOVF   x58,W
05FC4:  SUBLW  04
05FC6:  BNZ   5FE2
....................                printf("page Config"); 
05FC8:  MOVLW  4E
05FCA:  MOVWF  FF6
05FCC:  MOVLW  05
05FCE:  MOVWF  FF7
05FD0:  MOVLW  00
05FD2:  MOVWF  FF8
05FD4:  MOVLB  0
05FD6:  CALL   348A
....................                SendDataDisplay(); 
05FDA:  CALL   34BC
....................             }else{ 
05FDE:  BRA    5FF8
05FE0:  MOVLB  3
....................                printf("page MenuPrincipal"); 
05FE2:  MOVLW  5A
05FE4:  MOVWF  FF6
05FE6:  MOVLW  05
05FE8:  MOVWF  FF7
05FEA:  MOVLW  00
05FEC:  MOVWF  FF8
05FEE:  MOVLB  0
05FF0:  CALL   348A
....................                SendDataDisplay(); 
05FF4:  CALL   34BC
....................             } 
....................          }else if(TipoClave==2){ 
05FF8:  BRA    618A
05FFA:  MOVLB  2
05FFC:  MOVF   xCF,W
05FFE:  SUBLW  02
06000:  BNZ   606A
....................             if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])){ 
06002:  MOVLB  3
06004:  MOVF   x59,W
06006:  SUBWF  x55,W
06008:  BNZ   6050
0600A:  MOVF   x5A,W
0600C:  SUBWF  x56,W
0600E:  BNZ   6050
06010:  MOVF   x5B,W
06012:  SUBWF  x57,W
06014:  BNZ   6050
06016:  MOVF   x5C,W
06018:  SUBWF  x58,W
0601A:  BNZ   6050
....................                printf("page Clave"); 
0601C:  MOVLW  6E
0601E:  MOVWF  FF6
06020:  MOVLW  05
06022:  MOVWF  FF7
06024:  MOVLW  00
06026:  MOVWF  FF8
06028:  MOVLB  0
0602A:  CALL   348A
....................                SendDataDisplay(); 
0602E:  CALL   34BC
....................                printf("titulo.txt=\"Clave Nueva\""); 
06032:  MOVLW  7A
06034:  MOVWF  FF6
06036:  MOVLW  05
06038:  MOVWF  FF7
0603A:  MOVLW  00
0603C:  MOVWF  FF8
0603E:  CALL   348A
....................                SendDataDisplay(); 
06042:  CALL   34BC
....................                TipoClave=3; 
06046:  MOVLW  03
06048:  MOVLB  2
0604A:  MOVWF  xCF
....................             }else{ 
0604C:  BRA    6068
0604E:  MOVLB  3
....................                printf("page MenuPrincipal"); 
06050:  MOVLW  94
06052:  MOVWF  FF6
06054:  MOVLW  05
06056:  MOVWF  FF7
06058:  MOVLW  00
0605A:  MOVWF  FF8
0605C:  MOVLB  0
0605E:  CALL   348A
....................                SendDataDisplay(); 
06062:  CALL   34BC
06066:  MOVLB  2
....................             }  
....................          }else if(TipoClave==3){ 
06068:  BRA    618C
0606A:  MOVF   xCF,W
0606C:  SUBLW  03
0606E:  BTFSS  FD8.2
06070:  BRA    618C
....................             printf("titulo.txt=\"Clave Nueva\""); 
06072:  MOVLW  A8
06074:  MOVWF  FF6
06076:  MOVLW  05
06078:  MOVWF  FF7
0607A:  MOVLW  00
0607C:  MOVWF  FF8
0607E:  MOVLB  0
06080:  CALL   348A
....................             SendDataDisplay(); 
06084:  CALL   34BC
....................             printf("page MenuPrincipal"); 
06088:  MOVLW  C2
0608A:  MOVWF  FF6
0608C:  MOVLW  05
0608E:  MOVWF  FF7
06090:  MOVLW  00
06092:  MOVWF  FF8
06094:  CALL   348A
....................             SendDataDisplay(); 
06098:  CALL   34BC
....................             if(!GuardaEEPROM){ 
0609C:  BTFSC  xA2.4
0609E:  BRA    618A
....................                write_eeprom(10,Contrasena[0]);delay_ms(20);write_eeprom(11,Contrasena[1]);delay_ms(20); 
060A0:  CLRF   FAA
060A2:  MOVLW  0A
060A4:  MOVWF  FA9
060A6:  MOVFF  355,FA8
060AA:  BCF    FA6.6
060AC:  BCF    FA6.7
060AE:  BSF    FA6.2
060B0:  MOVF   FF2,W
060B2:  MOVWF  00
060B4:  BCF    FF2.6
060B6:  BCF    FF2.7
060B8:  MOVLB  F
060BA:  MOVLW  55
060BC:  MOVWF  FA7
060BE:  MOVLW  AA
060C0:  MOVWF  FA7
060C2:  BSF    FA6.1
060C4:  BTFSC  FA6.1
060C6:  BRA    60C4
060C8:  BCF    FA6.2
060CA:  MOVF   00,W
060CC:  IORWF  FF2,F
060CE:  MOVLW  14
060D0:  MOVLB  3
060D2:  MOVWF  xDB
060D4:  MOVLB  0
060D6:  CALL   179E
060DA:  CLRF   FAA
060DC:  MOVLW  0B
060DE:  MOVWF  FA9
060E0:  MOVFF  356,FA8
060E4:  BCF    FA6.6
060E6:  BCF    FA6.7
060E8:  BSF    FA6.2
060EA:  MOVF   FF2,W
060EC:  MOVWF  00
060EE:  BCF    FF2.6
060F0:  BCF    FF2.7
060F2:  MOVLB  F
060F4:  MOVLW  55
060F6:  MOVWF  FA7
060F8:  MOVLW  AA
060FA:  MOVWF  FA7
060FC:  BSF    FA6.1
060FE:  BTFSC  FA6.1
06100:  BRA    60FE
06102:  BCF    FA6.2
06104:  MOVF   00,W
06106:  IORWF  FF2,F
06108:  MOVLW  14
0610A:  MOVLB  3
0610C:  MOVWF  xDB
0610E:  MOVLB  0
06110:  CALL   179E
....................                write_eeprom(12,Contrasena[2]);delay_ms(20);write_eeprom(13,Contrasena[3]);delay_ms(20); 
06114:  CLRF   FAA
06116:  MOVLW  0C
06118:  MOVWF  FA9
0611A:  MOVFF  357,FA8
0611E:  BCF    FA6.6
06120:  BCF    FA6.7
06122:  BSF    FA6.2
06124:  MOVF   FF2,W
06126:  MOVWF  00
06128:  BCF    FF2.6
0612A:  BCF    FF2.7
0612C:  MOVLB  F
0612E:  MOVLW  55
06130:  MOVWF  FA7
06132:  MOVLW  AA
06134:  MOVWF  FA7
06136:  BSF    FA6.1
06138:  BTFSC  FA6.1
0613A:  BRA    6138
0613C:  BCF    FA6.2
0613E:  MOVF   00,W
06140:  IORWF  FF2,F
06142:  MOVLW  14
06144:  MOVLB  3
06146:  MOVWF  xDB
06148:  MOVLB  0
0614A:  CALL   179E
0614E:  CLRF   FAA
06150:  MOVLW  0D
06152:  MOVWF  FA9
06154:  MOVFF  358,FA8
06158:  BCF    FA6.6
0615A:  BCF    FA6.7
0615C:  BSF    FA6.2
0615E:  MOVF   FF2,W
06160:  MOVWF  00
06162:  BCF    FF2.6
06164:  BCF    FF2.7
06166:  MOVLB  F
06168:  MOVLW  55
0616A:  MOVWF  FA7
0616C:  MOVLW  AA
0616E:  MOVWF  FA7
06170:  BSF    FA6.1
06172:  BTFSC  FA6.1
06174:  BRA    6172
06176:  BCF    FA6.2
06178:  MOVF   00,W
0617A:  IORWF  FF2,F
0617C:  MOVLW  14
0617E:  MOVLB  3
06180:  MOVWF  xDB
06182:  MOVLB  0
06184:  CALL   179E
....................                GuardaEEPROM=ON; 
06188:  BSF    xA2.4
0618A:  MOVLB  2
....................             } 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11){//11 
0618C:  MOVF   34,W
0618E:  SUBLW  11
06190:  BNZ   61B0
....................          if(TipoClave!=0){ 
06192:  MOVF   xCF,F
06194:  BZ    61B0
....................             printf("page MenuPrincipal"); 
06196:  MOVLW  D6
06198:  MOVWF  FF6
0619A:  MOVLW  05
0619C:  MOVWF  FF7
0619E:  MOVLW  00
061A0:  MOVWF  FF8
061A2:  MOVLB  0
061A4:  CALL   348A
....................             SendDataDisplay(); 
061A8:  CALL   34BC
....................             PantallaPrincipal=0; 
061AC:  MOVLB  2
061AE:  CLRF   xCE
....................          } 
....................       } 
....................        
....................       if(TipoClave==3){ 
061B0:  MOVF   xCF,W
061B2:  SUBLW  03
061B4:  BNZ   61E2
....................          printf("titulo.txt=\"Clave Nueva\""); 
061B6:  MOVLW  EA
061B8:  MOVWF  FF6
061BA:  MOVLW  05
061BC:  MOVWF  FF7
061BE:  MOVLW  00
061C0:  MOVWF  FF8
061C2:  MOVLB  0
061C4:  CALL   348A
....................          SendDataDisplay(); 
061C8:  CALL   34BC
....................          printf("doevents"); 
061CC:  MOVLW  04
061CE:  MOVWF  FF6
061D0:  MOVLW  06
061D2:  MOVWF  FF7
061D4:  MOVLW  00
061D6:  MOVWF  FF8
061D8:  CALL   348A
....................          SendDataDisplay(); 
061DC:  CALL   34BC
061E0:  MOVLB  2
....................       } 
....................        
....................       if(TipoClave==2){ 
061E2:  MOVF   xCF,W
061E4:  SUBLW  02
061E6:  BNZ   6214
....................          printf("titulo.txt=\"Clave Actual\""); 
061E8:  MOVLW  0E
061EA:  MOVWF  FF6
061EC:  MOVLW  06
061EE:  MOVWF  FF7
061F0:  MOVLW  00
061F2:  MOVWF  FF8
061F4:  MOVLB  0
061F6:  CALL   348A
....................          SendDataDisplay(); 
061FA:  CALL   34BC
....................          printf("doevents"); 
061FE:  MOVLW  28
06200:  MOVWF  FF6
06202:  MOVLW  06
06204:  MOVWF  FF7
06206:  MOVLW  00
06208:  MOVWF  FF8
0620A:  CALL   348A
....................          SendDataDisplay(); 
0620E:  CALL   34BC
06212:  MOVLB  2
....................       } 
....................        
....................       if(TipoClave==1){ 
06214:  DECFSZ xCF,W
06216:  BRA    6244
....................          printf("titulo.txt=\"Clave Tecnico\""); 
06218:  MOVLW  32
0621A:  MOVWF  FF6
0621C:  MOVLW  06
0621E:  MOVWF  FF7
06220:  MOVLW  00
06222:  MOVWF  FF8
06224:  MOVLB  0
06226:  CALL   348A
....................          SendDataDisplay(); 
0622A:  CALL   34BC
....................          printf("doevents"); 
0622E:  MOVLW  4E
06230:  MOVWF  FF6
06232:  MOVLW  06
06234:  MOVWF  FF7
06236:  MOVLW  00
06238:  MOVWF  FF8
0623A:  CALL   348A
....................          SendDataDisplay(); 
0623E:  CALL   34BC
06242:  MOVLB  2
....................       } 
....................        
....................       if(TipoClave==0){ 
06244:  MOVF   xCF,F
06246:  BNZ   6260
....................          printf("titulo.txt=\"Ingrese Contraseña\""); 
06248:  MOVLW  58
0624A:  MOVWF  FF6
0624C:  MOVLW  06
0624E:  MOVWF  FF7
06250:  MOVLW  00
06252:  MOVWF  FF8
06254:  MOVLB  0
06256:  CALL   348A
....................          SendDataDisplay(); 
0625A:  CALL   34BC
0625E:  MOVLB  2
....................       } 
....................       if(RX_Buffer[3]==0x0f){//0f, recibe caracteres ingresados desde el Display 
06260:  MOVF   33,W
06262:  SUBLW  0F
06264:  BTFSS  FD8.2
06266:  BRA    6640
....................          if(TipoClave==0){ 
06268:  MOVF   xCF,F
0626A:  BTFSS  FD8.2
0626C:  BRA    63FC
....................             if(RX_Buffer[4]==0x33&&RX_Buffer[5]==0x38&&RX_Buffer[6]==0x39&&RX_Buffer[7]==0x32){ // Si Ingresa clave para reset general del sistema. 
0626E:  MOVF   34,W
06270:  SUBLW  33
06272:  BTFSS  FD8.2
06274:  BRA    636E
06276:  MOVF   35,W
06278:  SUBLW  38
0627A:  BTFSS  FD8.2
0627C:  BRA    636E
0627E:  MOVF   36,W
06280:  SUBLW  39
06282:  BNZ   636E
06284:  MOVF   37,W
06286:  SUBLW  32
06288:  BNZ   636E
....................                write_eeprom(10,0);delay_ms(20);write_eeprom(11,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
0628A:  CLRF   FAA
0628C:  MOVLW  0A
0628E:  MOVWF  FA9
06290:  CLRF   FA8
06292:  BCF    FA6.6
06294:  BCF    FA6.7
06296:  BSF    FA6.2
06298:  MOVF   FF2,W
0629A:  MOVWF  00
0629C:  BCF    FF2.6
0629E:  BCF    FF2.7
062A0:  MOVLB  F
062A2:  MOVLW  55
062A4:  MOVWF  FA7
062A6:  MOVLW  AA
062A8:  MOVWF  FA7
062AA:  BSF    FA6.1
062AC:  BTFSC  FA6.1
062AE:  BRA    62AC
062B0:  BCF    FA6.2
062B2:  MOVF   00,W
062B4:  IORWF  FF2,F
062B6:  MOVLW  14
062B8:  MOVLB  3
062BA:  MOVWF  xDB
062BC:  MOVLB  0
062BE:  CALL   179E
062C2:  CLRF   FAA
062C4:  MOVLW  0B
062C6:  MOVWF  FA9
062C8:  CLRF   FA8
062CA:  BCF    FA6.6
062CC:  BCF    FA6.7
062CE:  BSF    FA6.2
062D0:  MOVF   FF2,W
062D2:  MOVWF  00
062D4:  BCF    FF2.6
062D6:  BCF    FF2.7
062D8:  MOVLB  F
062DA:  MOVLW  55
062DC:  MOVWF  FA7
062DE:  MOVLW  AA
062E0:  MOVWF  FA7
062E2:  BSF    FA6.1
062E4:  BTFSC  FA6.1
062E6:  BRA    62E4
062E8:  BCF    FA6.2
062EA:  MOVF   00,W
062EC:  IORWF  FF2,F
062EE:  MOVLW  14
062F0:  MOVLB  3
062F2:  MOVWF  xDB
062F4:  MOVLB  0
062F6:  CALL   179E
....................                write_eeprom(12,0);delay_ms(20);write_eeprom(13,0);delay_ms(20); 
062FA:  CLRF   FAA
062FC:  MOVLW  0C
062FE:  MOVWF  FA9
06300:  CLRF   FA8
06302:  BCF    FA6.6
06304:  BCF    FA6.7
06306:  BSF    FA6.2
06308:  MOVF   FF2,W
0630A:  MOVWF  00
0630C:  BCF    FF2.6
0630E:  BCF    FF2.7
06310:  MOVLB  F
06312:  MOVLW  55
06314:  MOVWF  FA7
06316:  MOVLW  AA
06318:  MOVWF  FA7
0631A:  BSF    FA6.1
0631C:  BTFSC  FA6.1
0631E:  BRA    631C
06320:  BCF    FA6.2
06322:  MOVF   00,W
06324:  IORWF  FF2,F
06326:  MOVLW  14
06328:  MOVLB  3
0632A:  MOVWF  xDB
0632C:  MOVLB  0
0632E:  CALL   179E
06332:  CLRF   FAA
06334:  MOVLW  0D
06336:  MOVWF  FA9
06338:  CLRF   FA8
0633A:  BCF    FA6.6
0633C:  BCF    FA6.7
0633E:  BSF    FA6.2
06340:  MOVF   FF2,W
06342:  MOVWF  00
06344:  BCF    FF2.6
06346:  BCF    FF2.7
06348:  MOVLB  F
0634A:  MOVLW  55
0634C:  MOVWF  FA7
0634E:  MOVLW  AA
06350:  MOVWF  FA7
06352:  BSF    FA6.1
06354:  BTFSC  FA6.1
06356:  BRA    6354
06358:  BCF    FA6.2
0635A:  MOVF   00,W
0635C:  IORWF  FF2,F
0635E:  MOVLW  14
06360:  MOVLB  3
06362:  MOVWF  xDB
06364:  MOVLB  0
06366:  CALL   179E
....................                reset_cpu(); 
0636A:  RESET
0636C:  MOVLB  2
....................             } 
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
0636E:  MOVF   34,W
06370:  SUBLW  2F
06372:  BC    63FA
06374:  MOVF   35,W
06376:  SUBLW  2F
06378:  BC    63FA
0637A:  MOVF   36,W
0637C:  SUBLW  2F
0637E:  BC    63FA
06380:  MOVF   37,W
06382:  SUBLW  2F
06384:  BC    63FA
06386:  MOVF   34,W
06388:  SUBLW  39
0638A:  BNC   63FA
0638C:  MOVF   35,W
0638E:  SUBLW  39
06390:  BNC   63FA
06392:  MOVF   36,W
06394:  SUBLW  39
06396:  BNC   63FA
06398:  MOVF   37,W
0639A:  SUBLW  39
0639C:  BNC   63FA
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
0639E:  MOVLW  30
063A0:  MOVLB  3
063A2:  ADDWF  x59,W
063A4:  SUBWF  34,W
063A6:  BNZ   63DE
063A8:  MOVLW  30
063AA:  ADDWF  x5A,W
063AC:  SUBWF  35,W
063AE:  BNZ   63DE
063B0:  MOVLW  30
063B2:  ADDWF  x5B,W
063B4:  SUBWF  36,W
063B6:  BNZ   63DE
063B8:  MOVLW  30
063BA:  ADDWF  x5C,W
063BC:  SUBWF  37,W
063BE:  BNZ   63DE
....................                   printf("page ClaveCorrecta"); 
063C0:  MOVLW  78
063C2:  MOVWF  FF6
063C4:  MOVLW  06
063C6:  MOVWF  FF7
063C8:  MOVLW  00
063CA:  MOVWF  FF8
063CC:  MOVLB  0
063CE:  CALL   348A
....................                   //printf("page MenuPrincipal"); 
....................                   SendDataDisplay(); 
063D2:  CALL   34BC
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
063D6:  CLRF   33
063D8:  CLRF   3E
....................                }else{ 
063DA:  BRA    63F8
063DC:  MOVLB  3
....................                   printf("page ClaveBad"); 
063DE:  MOVLW  8C
063E0:  MOVWF  FF6
063E2:  MOVLW  06
063E4:  MOVWF  FF7
063E6:  MOVLW  00
063E8:  MOVWF  FF8
063EA:  MOVLB  0
063EC:  CALL   348A
....................                   SendDataDisplay(); 
063F0:  CALL   34BC
....................                   RX_Buffer[3]=0x00;RX_Buffer2[3]=0x00;   
063F4:  CLRF   33
063F6:  CLRF   3E
063F8:  MOVLB  2
....................                }  
....................             } 
....................          }else if(TipoClave==1){ 
063FA:  BRA    6640
063FC:  DECFSZ xCF,W
063FE:  BRA    644C
....................             if(RX_Buffer[4]==0x34&&RX_Buffer[5]==0x34&&RX_Buffer[6]==0x34&&RX_Buffer[7]==0x34){ // Si Ingresa clave de Servicio Tecnico 
06400:  MOVF   34,W
06402:  SUBLW  34
06404:  BNZ   6432
06406:  MOVF   35,W
06408:  SUBLW  34
0640A:  BNZ   6432
0640C:  MOVF   36,W
0640E:  SUBLW  34
06410:  BNZ   6432
06412:  MOVF   37,W
06414:  SUBLW  34
06416:  BNZ   6432
....................                printf("page Config"); 
06418:  MOVLW  9A
0641A:  MOVWF  FF6
0641C:  MOVLW  06
0641E:  MOVWF  FF7
06420:  MOVLW  00
06422:  MOVWF  FF8
06424:  MOVLB  0
06426:  CALL   348A
....................                SendDataDisplay(); 
0642A:  CALL   34BC
....................             }else{ 
0642E:  BRA    6448
06430:  MOVLB  2
....................                printf("page MenuPrincipal"); 
06432:  MOVLW  A6
06434:  MOVWF  FF6
06436:  MOVLW  06
06438:  MOVWF  FF7
0643A:  MOVLW  00
0643C:  MOVWF  FF8
0643E:  MOVLB  0
06440:  CALL   348A
....................                SendDataDisplay(); 
06444:  CALL   34BC
....................             } 
....................          }else if(TipoClave==2){ 
06448:  BRA    663E
0644A:  MOVLB  2
0644C:  MOVF   xCF,W
0644E:  SUBLW  02
06450:  BNZ   64FA
....................             if(RX_Buffer[4]>=0x30 && RX_Buffer[5]>=0x30 && RX_Buffer[6]>=0x30 && RX_Buffer[7]>=0x30 
....................             && RX_Buffer[4]<=0x39 && RX_Buffer[5]<=0x39 && RX_Buffer[6]<=0x39 && RX_Buffer[7]<=0x39){ 
06452:  MOVF   34,W
06454:  SUBLW  2F
06456:  BC    64F8
06458:  MOVF   35,W
0645A:  SUBLW  2F
0645C:  BC    64F8
0645E:  MOVF   36,W
06460:  SUBLW  2F
06462:  BC    64F8
06464:  MOVF   37,W
06466:  SUBLW  2F
06468:  BC    64F8
0646A:  MOVF   34,W
0646C:  SUBLW  39
0646E:  BNC   64F8
06470:  MOVF   35,W
06472:  SUBLW  39
06474:  BNC   64F8
06476:  MOVF   36,W
06478:  SUBLW  39
0647A:  BNC   64F8
0647C:  MOVF   37,W
0647E:  SUBLW  39
06480:  BNC   64F8
....................             if((RX_Buffer[4]==Password[0]+0x30)&&(RX_Buffer[5]==Password[1]+0x30)&&(RX_Buffer[6]==Password[2]+0x30)&&(RX_Buffer[7]==Password[3]+0x30)){ 
06482:  MOVLW  30
06484:  MOVLB  3
06486:  ADDWF  x59,W
06488:  SUBWF  34,W
0648A:  BNZ   64DC
0648C:  MOVLW  30
0648E:  ADDWF  x5A,W
06490:  SUBWF  35,W
06492:  BNZ   64DC
06494:  MOVLW  30
06496:  ADDWF  x5B,W
06498:  SUBWF  36,W
0649A:  BNZ   64DC
0649C:  MOVLW  30
0649E:  ADDWF  x5C,W
064A0:  SUBWF  37,W
064A2:  BNZ   64DC
....................                printf("page Clave"); 
064A4:  MOVLW  BA
064A6:  MOVWF  FF6
064A8:  MOVLW  06
064AA:  MOVWF  FF7
064AC:  MOVLW  00
064AE:  MOVWF  FF8
064B0:  MOVLB  0
064B2:  CALL   348A
....................                SendDataDisplay(); 
064B6:  CALL   34BC
....................                printf("titulo.txt=\"Clave Nueva\""); 
064BA:  MOVLW  C6
064BC:  MOVWF  FF6
064BE:  MOVLW  06
064C0:  MOVWF  FF7
064C2:  MOVLW  00
064C4:  MOVWF  FF8
064C6:  CALL   348A
....................                SendDataDisplay(); 
064CA:  CALL   34BC
....................                TipoClave=3; 
064CE:  MOVLW  03
064D0:  MOVLB  2
064D2:  MOVWF  xCF
....................                RX_Buffer[3]=0x00; 
064D4:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
064D6:  CLRF   3E
....................             }else{ 
064D8:  BRA    64F8
064DA:  MOVLB  3
....................                printf("page MenuPrincipal"); 
064DC:  MOVLW  E0
064DE:  MOVWF  FF6
064E0:  MOVLW  06
064E2:  MOVWF  FF7
064E4:  MOVLW  00
064E6:  MOVWF  FF8
064E8:  MOVLB  0
064EA:  CALL   348A
....................                SendDataDisplay(); 
064EE:  CALL   34BC
....................                RX_Buffer[3]=0x00; 
064F2:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
064F4:  CLRF   3E
064F6:  MOVLB  2
....................             }  
....................             } 
....................          }else if(TipoClave==3){ 
064F8:  BRA    6640
064FA:  MOVF   xCF,W
064FC:  SUBLW  03
064FE:  BTFSS  FD8.2
06500:  BRA    6640
....................             printf("titulo.txt=\"Clave Nueva\""); 
06502:  MOVLW  F4
06504:  MOVWF  FF6
06506:  MOVLW  06
06508:  MOVWF  FF7
0650A:  MOVLW  00
0650C:  MOVWF  FF8
0650E:  MOVLB  0
06510:  CALL   348A
....................             SendDataDisplay(); 
06514:  CALL   34BC
....................             printf("page MenuPrincipal"); 
06518:  MOVLW  0E
0651A:  MOVWF  FF6
0651C:  MOVLW  07
0651E:  MOVWF  FF7
06520:  MOVLW  00
06522:  MOVWF  FF8
06524:  CALL   348A
....................             SendDataDisplay(); 
06528:  CALL   34BC
....................             if(!GuardaEEPROM){ 
0652C:  BTFSC  xA2.4
0652E:  BRA    663A
....................                write_eeprom(10,RX_Buffer[4]-0x30);delay_ms(20);write_eeprom(11,RX_Buffer[5]-0x30);delay_ms(20); 
06530:  MOVLW  30
06532:  SUBWF  34,W
06534:  MOVLB  3
06536:  MOVWF  xC6
06538:  CLRF   FAA
0653A:  MOVLW  0A
0653C:  MOVWF  FA9
0653E:  MOVFF  3C6,FA8
06542:  BCF    FA6.6
06544:  BCF    FA6.7
06546:  BSF    FA6.2
06548:  MOVF   FF2,W
0654A:  MOVWF  00
0654C:  BCF    FF2.6
0654E:  BCF    FF2.7
06550:  MOVLB  F
06552:  MOVLW  55
06554:  MOVWF  FA7
06556:  MOVLW  AA
06558:  MOVWF  FA7
0655A:  BSF    FA6.1
0655C:  BTFSC  FA6.1
0655E:  BRA    655C
06560:  BCF    FA6.2
06562:  MOVF   00,W
06564:  IORWF  FF2,F
06566:  MOVLW  14
06568:  MOVLB  3
0656A:  MOVWF  xDB
0656C:  MOVLB  0
0656E:  CALL   179E
06572:  MOVLW  30
06574:  SUBWF  35,W
06576:  MOVLB  3
06578:  MOVWF  xC6
0657A:  CLRF   FAA
0657C:  MOVLW  0B
0657E:  MOVWF  FA9
06580:  MOVFF  3C6,FA8
06584:  BCF    FA6.6
06586:  BCF    FA6.7
06588:  BSF    FA6.2
0658A:  MOVF   FF2,W
0658C:  MOVWF  00
0658E:  BCF    FF2.6
06590:  BCF    FF2.7
06592:  MOVLB  F
06594:  MOVLW  55
06596:  MOVWF  FA7
06598:  MOVLW  AA
0659A:  MOVWF  FA7
0659C:  BSF    FA6.1
0659E:  BTFSC  FA6.1
065A0:  BRA    659E
065A2:  BCF    FA6.2
065A4:  MOVF   00,W
065A6:  IORWF  FF2,F
065A8:  MOVLW  14
065AA:  MOVLB  3
065AC:  MOVWF  xDB
065AE:  MOVLB  0
065B0:  CALL   179E
....................                write_eeprom(12,RX_Buffer[6]-0x30);delay_ms(20);write_eeprom(13,RX_Buffer[7]-0x30);delay_ms(20); 
065B4:  MOVLW  30
065B6:  SUBWF  36,W
065B8:  MOVLB  3
065BA:  MOVWF  xC6
065BC:  CLRF   FAA
065BE:  MOVLW  0C
065C0:  MOVWF  FA9
065C2:  MOVFF  3C6,FA8
065C6:  BCF    FA6.6
065C8:  BCF    FA6.7
065CA:  BSF    FA6.2
065CC:  MOVF   FF2,W
065CE:  MOVWF  00
065D0:  BCF    FF2.6
065D2:  BCF    FF2.7
065D4:  MOVLB  F
065D6:  MOVLW  55
065D8:  MOVWF  FA7
065DA:  MOVLW  AA
065DC:  MOVWF  FA7
065DE:  BSF    FA6.1
065E0:  BTFSC  FA6.1
065E2:  BRA    65E0
065E4:  BCF    FA6.2
065E6:  MOVF   00,W
065E8:  IORWF  FF2,F
065EA:  MOVLW  14
065EC:  MOVLB  3
065EE:  MOVWF  xDB
065F0:  MOVLB  0
065F2:  CALL   179E
065F6:  MOVLW  30
065F8:  SUBWF  37,W
065FA:  MOVLB  3
065FC:  MOVWF  xC6
065FE:  CLRF   FAA
06600:  MOVLW  0D
06602:  MOVWF  FA9
06604:  MOVFF  3C6,FA8
06608:  BCF    FA6.6
0660A:  BCF    FA6.7
0660C:  BSF    FA6.2
0660E:  MOVF   FF2,W
06610:  MOVWF  00
06612:  BCF    FF2.6
06614:  BCF    FF2.7
06616:  MOVLB  F
06618:  MOVLW  55
0661A:  MOVWF  FA7
0661C:  MOVLW  AA
0661E:  MOVWF  FA7
06620:  BSF    FA6.1
06622:  BTFSC  FA6.1
06624:  BRA    6622
06626:  BCF    FA6.2
06628:  MOVF   00,W
0662A:  IORWF  FF2,F
0662C:  MOVLW  14
0662E:  MOVLB  3
06630:  MOVWF  xDB
06632:  MOVLB  0
06634:  CALL   179E
....................                GuardaEEPROM=ON; 
06638:  BSF    xA2.4
....................             } 
....................             RX_Buffer[3]=0x00; 
0663A:  CLRF   33
....................             RX_Buffer2[3]=0x00; 
0663C:  CLRF   3E
0663E:  MOVLB  2
06640:  MOVLB  3
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==1){ //Menu Principal. 
06642:  DECFSZ x34,W
06644:  GOTO   6F80
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
06648:  MOVLW  22
0664A:  MOVWF  FF6
0664C:  MOVLW  07
0664E:  MOVWF  FF7
06650:  MOVLW  00
06652:  MOVWF  FF8
06654:  MOVLW  11
06656:  MOVWF  xCA
06658:  MOVLB  0
0665A:  CALL   4368
0665E:  MOVFF  36E,3C8
06662:  MOVLW  01
06664:  MOVLB  3
06666:  MOVWF  xC9
06668:  MOVLB  0
0666A:  CALL   43C6
0666E:  MOVLW  2F
06670:  BTFSS  F9E.4
06672:  BRA    6670
06674:  MOVWF  FAD
06676:  MOVFF  36D,3C8
0667A:  MOVLW  01
0667C:  MOVLB  3
0667E:  MOVWF  xC9
06680:  MOVLB  0
06682:  CALL   43C6
06686:  MOVLW  2F
06688:  BTFSS  F9E.4
0668A:  BRA    6688
0668C:  MOVWF  FAD
0668E:  MOVLW  32
06690:  BTFSS  F9E.4
06692:  BRA    6690
06694:  MOVWF  FAD
06696:  MOVLW  30
06698:  BTFSS  F9E.4
0669A:  BRA    6698
0669C:  MOVWF  FAD
0669E:  MOVFF  36C,3C8
066A2:  MOVLW  01
066A4:  MOVLB  3
066A6:  MOVWF  xC9
066A8:  MOVLB  0
066AA:  CALL   43C6
066AE:  MOVLW  43
066B0:  MOVWF  FF6
066B2:  MOVLW  07
066B4:  MOVWF  FF7
066B6:  MOVLW  00
066B8:  MOVWF  FF8
066BA:  MOVLW  0A
066BC:  MOVLB  3
066BE:  MOVWF  xCA
066C0:  MOVLB  0
066C2:  CALL   4368
066C6:  MOVFF  36F,3C8
066CA:  MOVLW  01
066CC:  MOVLB  3
066CE:  MOVWF  xC9
066D0:  MOVLB  0
066D2:  CALL   43C6
066D6:  MOVLW  3A
066D8:  BTFSS  F9E.4
066DA:  BRA    66D8
066DC:  MOVWF  FAD
066DE:  MOVFF  370,3C8
066E2:  MOVLW  01
066E4:  MOVLB  3
066E6:  MOVWF  xC9
066E8:  MOVLB  0
066EA:  CALL   43C6
066EE:  MOVLW  22
066F0:  BTFSS  F9E.4
066F2:  BRA    66F0
066F4:  MOVWF  FAD
....................       SendDataDisplay(); 
066F6:  CALL   34BC
....................       GuardaEEPROM=OFF; 
066FA:  BCF    xA2.4
....................       if(RX_Buffer[3]==0x0f || UP){//0f, recibe caracteres ingresados desde el Display 
066FC:  MOVF   33,W
066FE:  SUBLW  0F
06700:  BZ    6708
06702:  BSF    F93.0
06704:  BTFSC  F81.0
06706:  BRA    695A
....................          delay_ms(5); 
06708:  MOVLW  05
0670A:  MOVLB  3
0670C:  MOVWF  xDB
0670E:  MOVLB  0
06710:  CALL   179E
....................          if(RX_Buffer[3]==0x0f || UP){ 
06714:  MOVF   33,W
06716:  SUBLW  0F
06718:  BZ    6720
0671A:  BSF    F93.0
0671C:  BTFSC  F81.0
0671E:  BRA    6954
....................          if(PantallaPrincipal==0){//Si esta en menu principal 
06720:  MOVLB  2
06722:  MOVF   xCE,F
06724:  BTFSS  FD8.2
06726:  BRA    6958
....................             if(RX_Buffer[4]==0x37){//Ajustes y pasa a solicitud de password de tecnico 
06728:  MOVF   34,W
0672A:  SUBLW  37
0672C:  BNZ   675A
....................                printf("page Clave"); 
0672E:  MOVLW  58
06730:  MOVWF  FF6
06732:  MOVLW  07
06734:  MOVWF  FF7
06736:  MOVLW  00
06738:  MOVWF  FF8
0673A:  MOVLB  0
0673C:  CALL   348A
....................                SendDataDisplay();  
06740:  CALL   34BC
....................                Op=OFF; 
06744:  BCF    xA2.0
....................                Op2=OFF; 
06746:  BCF    xA2.1
....................                MenuAnt=Menu; 
06748:  MOVFF  334,335
....................                TipoClave=1; 
0674C:  MOVLW  01
0674E:  MOVLB  2
06750:  MOVWF  xCF
....................                RX_Buffer[3]=0x00; 
06752:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
06754:  CLRF   3E
....................                Opcion=0; 
06756:  MOVLB  3
06758:  CLRF   x3C
....................             }  
....................             if(Opcion==8){// Cambio de Clave 
0675A:  MOVLB  3
0675C:  MOVF   x3C,W
0675E:  SUBLW  08
06760:  BNZ   6790
....................                printf("page Clave"); 
06762:  MOVLW  64
06764:  MOVWF  FF6
06766:  MOVLW  07
06768:  MOVWF  FF7
0676A:  MOVLW  00
0676C:  MOVWF  FF8
0676E:  MOVLB  0
06770:  CALL   348A
....................                SendDataDisplay();  
06774:  CALL   34BC
....................                Op=OFF; 
06778:  BCF    xA2.0
....................                Op2=OFF; 
0677A:  BCF    xA2.1
....................                MenuAnt=Menu; 
0677C:  MOVFF  334,335
....................                TipoClave=2; 
06780:  MOVLW  02
06782:  MOVLB  2
06784:  MOVWF  xCF
....................                RX_Buffer[3]=0x00; 
06786:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
06788:  CLRF   3E
....................                Opcion=0; 
0678A:  MOVLB  3
0678C:  CLRF   x3C
....................             }else if(Opcion==7){//Hora y Fecha 
0678E:  BRA    6956
06790:  MOVF   x3C,W
06792:  SUBLW  07
06794:  BNZ   67D2
....................                printf("page Fecha"); 
06796:  MOVLW  70
06798:  MOVWF  FF6
0679A:  MOVLW  07
0679C:  MOVWF  FF7
0679E:  MOVLW  00
067A0:  MOVWF  FF8
067A2:  MOVLB  0
067A4:  CALL   348A
....................                SendDataDisplay();      
067A8:  CALL   34BC
....................                PantallaPrincipal=0; 
067AC:  MOVLB  2
067AE:  CLRF   xCE
....................                MenuAnt=Menu; 
067B0:  MOVFF  334,335
....................                Op=OFF; 
067B4:  MOVLB  0
067B6:  BCF    xA2.0
....................                Op2=OFF; 
067B8:  BCF    xA2.1
....................                DiaTx=Dia; 
067BA:  MOVFF  36E,375
....................                MesTx=Mes; 
067BE:  MOVFF  36D,374
....................                YearTx=Year; 
067C2:  MOVFF  36C,373
....................                HoraTx=Hora; 
067C6:  MOVFF  36F,376
....................                MinutoTx=Minuto; 
067CA:  MOVFF  370,377
....................             }else if(Opcion==6){//Test 
067CE:  BRA    6954
067D0:  MOVLB  3
067D2:  MOVF   x3C,W
067D4:  SUBLW  06
067D6:  BNZ   6800
....................                printf("page Test"); 
067D8:  MOVLW  7C
067DA:  MOVWF  FF6
067DC:  MOVLW  07
067DE:  MOVWF  FF7
067E0:  MOVLW  00
067E2:  MOVWF  FF8
067E4:  MOVLB  0
067E6:  CALL   348A
....................                SendDataDisplay();      
067EA:  CALL   34BC
....................                PantallaPrincipal=0; 
067EE:  MOVLB  2
067F0:  CLRF   xCE
....................                MenuAnt=Menu; 
067F2:  MOVFF  334,335
....................                Op=OFF; 
067F6:  MOVLB  0
067F8:  BCF    xA2.0
....................                Op2=OFF; 
067FA:  BCF    xA2.1
....................             }else if(Opcion==5){//Ciclo Personalizado 
067FC:  BRA    6954
067FE:  MOVLB  3
06800:  MOVF   x3C,W
06802:  SUBLW  05
06804:  BNZ   6828
....................                printf("page CicloPersona"); 
06806:  MOVLW  86
06808:  MOVWF  FF6
0680A:  MOVLW  07
0680C:  MOVWF  FF7
0680E:  MOVLW  00
06810:  MOVWF  FF8
06812:  MOVLB  0
06814:  CALL   348A
....................                SendDataDisplay();  
06818:  CALL   34BC
....................                MenuAnt=Menu; 
0681C:  MOVFF  334,335
....................                Op=OFF; 
06820:  BCF    xA2.0
....................                Op2=OFF; 
06822:  BCF    xA2.1
....................             }else if(Opcion==4){//Instrumental Delicado Envuelto 
06824:  BRA    6954
06826:  MOVLB  3
06828:  MOVF   x3C,W
0682A:  SUBLW  04
0682C:  BNZ   6874
....................                printf("page Funcionamiento"); 
0682E:  MOVLW  98
06830:  MOVWF  FF6
06832:  MOVLW  07
06834:  MOVWF  FF7
06836:  MOVLW  00
06838:  MOVWF  FF8
0683A:  MOVLB  0
0683C:  CALL   348A
....................                SendDataDisplay();        
06840:  CALL   34BC
....................                ConfiguraCiclo(0,0,0,2,0,0,0,2,0,4,121); 
06844:  MOVLB  3
06846:  CLRF   xD0
06848:  CLRF   xD1
0684A:  CLRF   xD2
0684C:  MOVLW  02
0684E:  MOVWF  xD3
06850:  CLRF   xD4
06852:  CLRF   xD5
06854:  CLRF   xD6
06856:  MOVWF  xD7
06858:  CLRF   xD8
0685A:  MOVLW  04
0685C:  MOVWF  xD9
0685E:  MOVLW  79
06860:  MOVWF  xDA
06862:  MOVLB  0
06864:  CALL   4444
....................                Op=OFF; 
06868:  BCF    xA2.0
....................                Op2=OFF; 
0686A:  BCF    xA2.1
....................                MenuAnt=2; 
0686C:  MOVLW  02
0686E:  MOVLB  3
06870:  MOVWF  x35
....................             }else if(Opcion==1){//Instrumental no envuelto 
06872:  BRA    6956
06874:  DECFSZ x3C,W
06876:  BRA    68BE
....................                printf("page Funcionamiento"); 
06878:  MOVLW  AC
0687A:  MOVWF  FF6
0687C:  MOVLW  07
0687E:  MOVWF  FF7
06880:  MOVLW  00
06882:  MOVWF  FF8
06884:  MOVLB  0
06886:  CALL   348A
....................                SendDataDisplay();        
0688A:  CALL   34BC
....................                ConfiguraCiclo(0,0,3,0,0,0,1,0,0,1,134); 
0688E:  MOVLB  3
06890:  CLRF   xD0
06892:  CLRF   xD1
06894:  MOVLW  03
06896:  MOVWF  xD2
06898:  CLRF   xD3
0689A:  CLRF   xD4
0689C:  CLRF   xD5
0689E:  MOVLW  01
068A0:  MOVWF  xD6
068A2:  CLRF   xD7
068A4:  CLRF   xD8
068A6:  MOVWF  xD9
068A8:  MOVLW  86
068AA:  MOVWF  xDA
068AC:  MOVLB  0
068AE:  CALL   4444
....................                Op=OFF; 
068B2:  BCF    xA2.0
....................                Op2=OFF; 
068B4:  BCF    xA2.1
....................                MenuAnt=2; 
068B6:  MOVLW  02
068B8:  MOVLB  3
068BA:  MOVWF  x35
....................             }else if(Opcion==3){//Instrumental Delicado No Envuelto 
068BC:  BRA    6956
068BE:  MOVF   x3C,W
068C0:  SUBLW  03
068C2:  BNZ   690C
....................                printf("page Funcionamiento"); 
068C4:  MOVLW  C0
068C6:  MOVWF  FF6
068C8:  MOVLW  07
068CA:  MOVWF  FF7
068CC:  MOVLW  00
068CE:  MOVWF  FF8
068D0:  MOVLB  0
068D2:  CALL   348A
....................                SendDataDisplay();        
068D6:  CALL   34BC
....................                ConfiguraCiclo(0,0,5,1,0,0,1,0,0,3,121); 
068DA:  MOVLB  3
068DC:  CLRF   xD0
068DE:  CLRF   xD1
068E0:  MOVLW  05
068E2:  MOVWF  xD2
068E4:  MOVLW  01
068E6:  MOVWF  xD3
068E8:  CLRF   xD4
068EA:  CLRF   xD5
068EC:  MOVWF  xD6
068EE:  CLRF   xD7
068F0:  CLRF   xD8
068F2:  MOVLW  03
068F4:  MOVWF  xD9
068F6:  MOVLW  79
068F8:  MOVWF  xDA
068FA:  MOVLB  0
068FC:  CALL   4444
....................                Op=OFF; 
06900:  BCF    xA2.0
....................                Op2=OFF; 
06902:  BCF    xA2.1
....................                MenuAnt=Menu; 
06904:  MOVFF  334,335
....................                //if(Temperatura>60)TTrampa=TTrampa+5; 
....................             }else if(Opcion==2){//Instrumental Envuelto 
06908:  BRA    6954
0690A:  MOVLB  3
0690C:  MOVF   x3C,W
0690E:  SUBLW  02
06910:  BNZ   6956
....................                printf("page Funcionamiento"); 
06912:  MOVLW  D4
06914:  MOVWF  FF6
06916:  MOVLW  07
06918:  MOVWF  FF7
0691A:  MOVLW  00
0691C:  MOVWF  FF8
0691E:  MOVLB  0
06920:  CALL   348A
....................                SendDataDisplay();        
06924:  CALL   34BC
....................                ConfiguraCiclo(0,0,7,0,0,0,0,2,0,2,134); 
06928:  MOVLB  3
0692A:  CLRF   xD0
0692C:  CLRF   xD1
0692E:  MOVLW  07
06930:  MOVWF  xD2
06932:  CLRF   xD3
06934:  CLRF   xD4
06936:  CLRF   xD5
06938:  CLRF   xD6
0693A:  MOVLW  02
0693C:  MOVWF  xD7
0693E:  CLRF   xD8
06940:  MOVWF  xD9
06942:  MOVLW  86
06944:  MOVWF  xDA
06946:  MOVLB  0
06948:  CALL   4444
....................                Op=OFF; 
0694C:  BCF    xA2.0
....................                Op2=OFF; 
0694E:  BCF    xA2.1
....................                MenuAnt=Menu; 
06950:  MOVFF  334,335
06954:  MOVLB  3
06956:  MOVLB  2
....................                //if(Temperatura>60)TTrampa=TTrampa+5; 
....................             } 
....................          } 
....................          } 
....................       }else if(PantallaPrincipal==0){ 
06958:  BRA    6F32
0695A:  MOVLB  2
0695C:  MOVF   xCE,F
0695E:  BTFSS  FD8.2
06960:  BRA    6F32
....................          if(Opcion>8) 
06962:  MOVLB  3
06964:  MOVF   x3C,W
06966:  SUBLW  08
06968:  BC    696E
....................             Opcion=1; 
0696A:  MOVLW  01
0696C:  MOVWF  x3C
....................              
....................          if(Opcion<1) 
0696E:  MOVF   x3C,F
06970:  BNZ   6976
....................             Opcion=8; 
06972:  MOVLW  08
06974:  MOVWF  x3C
....................           
....................          if(Opcion==1){ 
06976:  DECFSZ x3C,W
06978:  BRA    6B1C
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
0697A:  MOVLW  01
0697C:  SUBWF  x3C,W
0697E:  CLRF   03
06980:  ADDLW  80
06982:  MOVWF  FE9
06984:  MOVLW  03
06986:  ADDWFC 03,W
06988:  MOVWF  FEA
0698A:  MOVFF  FEF,3C6
0698E:  MOVLW  E8
06990:  MOVWF  FF6
06992:  MOVLW  07
06994:  MOVWF  FF7
06996:  MOVLW  00
06998:  MOVWF  FF8
0699A:  MOVLW  07
0699C:  MOVWF  xCA
0699E:  MOVLB  0
069A0:  CALL   4368
069A4:  MOVFF  3C6,3C8
069A8:  MOVLW  1B
069AA:  MOVLB  3
069AC:  MOVWF  xC9
069AE:  MOVLB  0
069B0:  CALL   43C6
....................             SendDataDisplay(); 
069B4:  CALL   34BC
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
069B8:  CLRF   03
069BA:  MOVLB  3
069BC:  MOVF   x3C,W
069BE:  ADDLW  8F
069C0:  MOVWF  FE9
069C2:  MOVLW  03
069C4:  ADDWFC 03,W
069C6:  MOVWF  FEA
069C8:  MOVFF  FEF,3C6
069CC:  MOVLW  F2
069CE:  MOVWF  FF6
069D0:  MOVLW  07
069D2:  MOVWF  FF7
069D4:  MOVLW  00
069D6:  MOVWF  FF8
069D8:  MOVLW  07
069DA:  MOVWF  xCA
069DC:  MOVLB  0
069DE:  CALL   4368
069E2:  MOVFF  3C6,3C8
069E6:  MOVLW  1B
069E8:  MOVLB  3
069EA:  MOVWF  xC9
069EC:  MOVLB  0
069EE:  CALL   43C6
....................             SendDataDisplay(); 
069F2:  CALL   34BC
....................             printf("bi.pic=%u",iconoPeque[7]); 
069F6:  MOVLW  FC
069F8:  MOVWF  FF6
069FA:  MOVLW  07
069FC:  MOVWF  FF7
069FE:  MOVLW  00
06A00:  MOVWF  FF8
06A02:  MOVLW  07
06A04:  MOVLB  3
06A06:  MOVWF  xCA
06A08:  MOVLB  0
06A0A:  CALL   4368
06A0E:  MOVFF  396,3C8
06A12:  MOVLW  1B
06A14:  MOVLB  3
06A16:  MOVWF  xC9
06A18:  MOVLB  0
06A1A:  CALL   43C6
....................             SendDataDisplay(); 
06A1E:  CALL   34BC
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
06A22:  MOVLW  01
06A24:  MOVLB  3
06A26:  SUBWF  x3C,W
06A28:  CLRF   03
06A2A:  ADDLW  80
06A2C:  MOVWF  FE9
06A2E:  MOVLW  03
06A30:  ADDWFC 03,W
06A32:  MOVWF  FEA
06A34:  MOVFF  FEF,3C6
06A38:  MOVLW  06
06A3A:  MOVWF  FF6
06A3C:  MOVLW  08
06A3E:  MOVWF  FF7
06A40:  MOVLW  00
06A42:  MOVWF  FF8
06A44:  MOVLW  08
06A46:  MOVWF  xCA
06A48:  MOVLB  0
06A4A:  CALL   4368
06A4E:  MOVFF  3C6,3C8
06A52:  MOVLW  1B
06A54:  MOVLB  3
06A56:  MOVWF  xC9
06A58:  MOVLB  0
06A5A:  CALL   43C6
....................             SendDataDisplay(); 
06A5E:  CALL   34BC
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
06A62:  CLRF   03
06A64:  MOVLB  3
06A66:  MOVF   x3C,W
06A68:  ADDLW  8F
06A6A:  MOVWF  FE9
06A6C:  MOVLW  03
06A6E:  ADDWFC 03,W
06A70:  MOVWF  FEA
06A72:  MOVFF  FEF,3C6
06A76:  MOVLW  12
06A78:  MOVWF  FF6
06A7A:  MOVLW  08
06A7C:  MOVWF  FF7
06A7E:  MOVLW  00
06A80:  MOVWF  FF8
06A82:  MOVLW  08
06A84:  MOVWF  xCA
06A86:  MOVLB  0
06A88:  CALL   4368
06A8C:  MOVFF  3C6,3C8
06A90:  MOVLW  1B
06A92:  MOVLB  3
06A94:  MOVWF  xC9
06A96:  MOVLB  0
06A98:  CALL   43C6
....................             SendDataDisplay(); 
06A9C:  CALL   34BC
....................             printf("bi.pic2=%u",iconoPeque[7]); 
06AA0:  MOVLW  1E
06AA2:  MOVWF  FF6
06AA4:  MOVLW  08
06AA6:  MOVWF  FF7
06AA8:  MOVLW  00
06AAA:  MOVWF  FF8
06AAC:  MOVLW  08
06AAE:  MOVLB  3
06AB0:  MOVWF  xCA
06AB2:  MOVLB  0
06AB4:  CALL   4368
06AB8:  MOVFF  396,3C8
06ABC:  MOVLW  1B
06ABE:  MOVLB  3
06AC0:  MOVWF  xC9
06AC2:  MOVLB  0
06AC4:  CALL   43C6
....................             SendDataDisplay(); 
06AC8:  CALL   34BC
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
06ACC:  MOVLW  01
06ACE:  MOVLB  3
06AD0:  SUBWF  x3C,W
06AD2:  MULLW  14
06AD4:  MOVF   FF3,W
06AD6:  CLRF   03
06AD8:  MOVWF  xC6
06ADA:  MOVLW  2A
06ADC:  MOVWF  FF6
06ADE:  MOVLW  08
06AE0:  MOVWF  FF7
06AE2:  MOVLW  00
06AE4:  MOVWF  FF8
06AE6:  MOVLW  0C
06AE8:  MOVWF  xCA
06AEA:  MOVLB  0
06AEC:  CALL   4368
06AF0:  MOVLW  50
06AF2:  MOVWF  FF6
06AF4:  MOVLW  01
06AF6:  MOVWF  FF7
06AF8:  MOVLW  00
06AFA:  MOVWF  FF8
06AFC:  MOVLB  3
06AFE:  MOVF   xC6,W
06B00:  ADDWF  FF6,F
06B02:  MOVLW  00
06B04:  ADDWFC FF7,F
06B06:  MOVLB  0
06B08:  CALL   348A
06B0C:  MOVLW  22
06B0E:  BTFSS  F9E.4
06B10:  BRA    6B0E
06B12:  MOVWF  FAD
....................             SendDataDisplay(); 
06B14:  CALL   34BC
....................          }else if(Opcion==8){ 
06B18:  BRA    6E90
06B1A:  MOVLB  3
06B1C:  MOVF   x3C,W
06B1E:  SUBLW  08
06B20:  BTFSS  FD8.2
06B22:  BRA    6CCA
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
06B24:  MOVLW  01
06B26:  SUBWF  x3C,W
06B28:  CLRF   03
06B2A:  ADDLW  80
06B2C:  MOVWF  FE9
06B2E:  MOVLW  03
06B30:  ADDWFC 03,W
06B32:  MOVWF  FEA
06B34:  MOVFF  FEF,3C6
06B38:  MOVLW  3A
06B3A:  MOVWF  FF6
06B3C:  MOVLW  08
06B3E:  MOVWF  FF7
06B40:  MOVLW  00
06B42:  MOVWF  FF8
06B44:  MOVLW  07
06B46:  MOVWF  xCA
06B48:  MOVLB  0
06B4A:  CALL   4368
06B4E:  MOVFF  3C6,3C8
06B52:  MOVLW  1B
06B54:  MOVLB  3
06B56:  MOVWF  xC9
06B58:  MOVLB  0
06B5A:  CALL   43C6
....................             SendDataDisplay(); 
06B5E:  CALL   34BC
....................             printf("bd.pic=%u",iconoPeque[0]); 
06B62:  MOVLW  44
06B64:  MOVWF  FF6
06B66:  MOVLW  08
06B68:  MOVWF  FF7
06B6A:  MOVLW  00
06B6C:  MOVWF  FF8
06B6E:  MOVLW  07
06B70:  MOVLB  3
06B72:  MOVWF  xCA
06B74:  MOVLB  0
06B76:  CALL   4368
06B7A:  MOVFF  38F,3C8
06B7E:  MOVLW  1B
06B80:  MOVLB  3
06B82:  MOVWF  xC9
06B84:  MOVLB  0
06B86:  CALL   43C6
....................             SendDataDisplay(); 
06B8A:  CALL   34BC
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
06B8E:  MOVLW  02
06B90:  MOVLB  3
06B92:  SUBWF  x3C,W
06B94:  CLRF   03
06B96:  ADDLW  8F
06B98:  MOVWF  FE9
06B9A:  MOVLW  03
06B9C:  ADDWFC 03,W
06B9E:  MOVWF  FEA
06BA0:  MOVFF  FEF,3C6
06BA4:  MOVLW  4E
06BA6:  MOVWF  FF6
06BA8:  MOVLW  08
06BAA:  MOVWF  FF7
06BAC:  MOVLW  00
06BAE:  MOVWF  FF8
06BB0:  MOVLW  07
06BB2:  MOVWF  xCA
06BB4:  MOVLB  0
06BB6:  CALL   4368
06BBA:  MOVFF  3C6,3C8
06BBE:  MOVLW  1B
06BC0:  MOVLB  3
06BC2:  MOVWF  xC9
06BC4:  MOVLB  0
06BC6:  CALL   43C6
....................             SendDataDisplay(); 
06BCA:  CALL   34BC
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
06BCE:  MOVLW  01
06BD0:  MOVLB  3
06BD2:  SUBWF  x3C,W
06BD4:  CLRF   03
06BD6:  ADDLW  80
06BD8:  MOVWF  FE9
06BDA:  MOVLW  03
06BDC:  ADDWFC 03,W
06BDE:  MOVWF  FEA
06BE0:  MOVFF  FEF,3C6
06BE4:  MOVLW  58
06BE6:  MOVWF  FF6
06BE8:  MOVLW  08
06BEA:  MOVWF  FF7
06BEC:  MOVLW  00
06BEE:  MOVWF  FF8
06BF0:  MOVLW  08
06BF2:  MOVWF  xCA
06BF4:  MOVLB  0
06BF6:  CALL   4368
06BFA:  MOVFF  3C6,3C8
06BFE:  MOVLW  1B
06C00:  MOVLB  3
06C02:  MOVWF  xC9
06C04:  MOVLB  0
06C06:  CALL   43C6
....................             SendDataDisplay(); 
06C0A:  CALL   34BC
....................             printf("bd.pic2=%u",iconoPeque[0]); 
06C0E:  MOVLW  64
06C10:  MOVWF  FF6
06C12:  MOVLW  08
06C14:  MOVWF  FF7
06C16:  MOVLW  00
06C18:  MOVWF  FF8
06C1A:  MOVLW  08
06C1C:  MOVLB  3
06C1E:  MOVWF  xCA
06C20:  MOVLB  0
06C22:  CALL   4368
06C26:  MOVFF  38F,3C8
06C2A:  MOVLW  1B
06C2C:  MOVLB  3
06C2E:  MOVWF  xC9
06C30:  MOVLB  0
06C32:  CALL   43C6
....................             SendDataDisplay(); 
06C36:  CALL   34BC
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
06C3A:  MOVLW  02
06C3C:  MOVLB  3
06C3E:  SUBWF  x3C,W
06C40:  CLRF   03
06C42:  ADDLW  8F
06C44:  MOVWF  FE9
06C46:  MOVLW  03
06C48:  ADDWFC 03,W
06C4A:  MOVWF  FEA
06C4C:  MOVFF  FEF,3C6
06C50:  MOVLW  70
06C52:  MOVWF  FF6
06C54:  MOVLW  08
06C56:  MOVWF  FF7
06C58:  MOVLW  00
06C5A:  MOVWF  FF8
06C5C:  MOVLW  08
06C5E:  MOVWF  xCA
06C60:  MOVLB  0
06C62:  CALL   4368
06C66:  MOVFF  3C6,3C8
06C6A:  MOVLW  1B
06C6C:  MOVLB  3
06C6E:  MOVWF  xC9
06C70:  MOVLB  0
06C72:  CALL   43C6
....................             SendDataDisplay(); 
06C76:  CALL   34BC
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
06C7A:  MOVLW  01
06C7C:  MOVLB  3
06C7E:  SUBWF  x3C,W
06C80:  MULLW  14
06C82:  MOVF   FF3,W
06C84:  CLRF   03
06C86:  MOVWF  xC6
06C88:  MOVLW  7C
06C8A:  MOVWF  FF6
06C8C:  MOVLW  08
06C8E:  MOVWF  FF7
06C90:  MOVLW  00
06C92:  MOVWF  FF8
06C94:  MOVLW  0C
06C96:  MOVWF  xCA
06C98:  MOVLB  0
06C9A:  CALL   4368
06C9E:  MOVLW  50
06CA0:  MOVWF  FF6
06CA2:  MOVLW  01
06CA4:  MOVWF  FF7
06CA6:  MOVLW  00
06CA8:  MOVWF  FF8
06CAA:  MOVLB  3
06CAC:  MOVF   xC6,W
06CAE:  ADDWF  FF6,F
06CB0:  MOVLW  00
06CB2:  ADDWFC FF7,F
06CB4:  MOVLB  0
06CB6:  CALL   348A
06CBA:  MOVLW  22
06CBC:  BTFSS  F9E.4
06CBE:  BRA    6CBC
06CC0:  MOVWF  FAD
....................             SendDataDisplay(); 
06CC2:  CALL   34BC
....................          }else{ 
06CC6:  BRA    6E90
06CC8:  MOVLB  3
....................             printf("bc.pic=%u",iconoGrande[Opcion-1]); 
06CCA:  MOVLW  01
06CCC:  SUBWF  x3C,W
06CCE:  CLRF   03
06CD0:  ADDLW  80
06CD2:  MOVWF  FE9
06CD4:  MOVLW  03
06CD6:  ADDWFC 03,W
06CD8:  MOVWF  FEA
06CDA:  MOVFF  FEF,3C6
06CDE:  MOVLW  8C
06CE0:  MOVWF  FF6
06CE2:  MOVLW  08
06CE4:  MOVWF  FF7
06CE6:  MOVLW  00
06CE8:  MOVWF  FF8
06CEA:  MOVLW  07
06CEC:  MOVWF  xCA
06CEE:  MOVLB  0
06CF0:  CALL   4368
06CF4:  MOVFF  3C6,3C8
06CF8:  MOVLW  1B
06CFA:  MOVLB  3
06CFC:  MOVWF  xC9
06CFE:  MOVLB  0
06D00:  CALL   43C6
....................             SendDataDisplay(); 
06D04:  CALL   34BC
....................             printf("bd.pic=%u",iconoPeque[Opcion]); 
06D08:  CLRF   03
06D0A:  MOVLB  3
06D0C:  MOVF   x3C,W
06D0E:  ADDLW  8F
06D10:  MOVWF  FE9
06D12:  MOVLW  03
06D14:  ADDWFC 03,W
06D16:  MOVWF  FEA
06D18:  MOVFF  FEF,3C6
06D1C:  MOVLW  96
06D1E:  MOVWF  FF6
06D20:  MOVLW  08
06D22:  MOVWF  FF7
06D24:  MOVLW  00
06D26:  MOVWF  FF8
06D28:  MOVLW  07
06D2A:  MOVWF  xCA
06D2C:  MOVLB  0
06D2E:  CALL   4368
06D32:  MOVFF  3C6,3C8
06D36:  MOVLW  1B
06D38:  MOVLB  3
06D3A:  MOVWF  xC9
06D3C:  MOVLB  0
06D3E:  CALL   43C6
....................             SendDataDisplay(); 
06D42:  CALL   34BC
....................             printf("bi.pic=%u",iconoPeque[Opcion-2]); 
06D46:  MOVLW  02
06D48:  MOVLB  3
06D4A:  SUBWF  x3C,W
06D4C:  CLRF   03
06D4E:  ADDLW  8F
06D50:  MOVWF  FE9
06D52:  MOVLW  03
06D54:  ADDWFC 03,W
06D56:  MOVWF  FEA
06D58:  MOVFF  FEF,3C6
06D5C:  MOVLW  A0
06D5E:  MOVWF  FF6
06D60:  MOVLW  08
06D62:  MOVWF  FF7
06D64:  MOVLW  00
06D66:  MOVWF  FF8
06D68:  MOVLW  07
06D6A:  MOVWF  xCA
06D6C:  MOVLB  0
06D6E:  CALL   4368
06D72:  MOVFF  3C6,3C8
06D76:  MOVLW  1B
06D78:  MOVLB  3
06D7A:  MOVWF  xC9
06D7C:  MOVLB  0
06D7E:  CALL   43C6
....................             SendDataDisplay(); 
06D82:  CALL   34BC
....................             printf("bc.pic2=%u",iconoGrande[Opcion-1]); 
06D86:  MOVLW  01
06D88:  MOVLB  3
06D8A:  SUBWF  x3C,W
06D8C:  CLRF   03
06D8E:  ADDLW  80
06D90:  MOVWF  FE9
06D92:  MOVLW  03
06D94:  ADDWFC 03,W
06D96:  MOVWF  FEA
06D98:  MOVFF  FEF,3C6
06D9C:  MOVLW  AA
06D9E:  MOVWF  FF6
06DA0:  MOVLW  08
06DA2:  MOVWF  FF7
06DA4:  MOVLW  00
06DA6:  MOVWF  FF8
06DA8:  MOVLW  08
06DAA:  MOVWF  xCA
06DAC:  MOVLB  0
06DAE:  CALL   4368
06DB2:  MOVFF  3C6,3C8
06DB6:  MOVLW  1B
06DB8:  MOVLB  3
06DBA:  MOVWF  xC9
06DBC:  MOVLB  0
06DBE:  CALL   43C6
....................             SendDataDisplay(); 
06DC2:  CALL   34BC
....................             printf("bd.pic2=%u",iconoPeque[Opcion]); 
06DC6:  CLRF   03
06DC8:  MOVLB  3
06DCA:  MOVF   x3C,W
06DCC:  ADDLW  8F
06DCE:  MOVWF  FE9
06DD0:  MOVLW  03
06DD2:  ADDWFC 03,W
06DD4:  MOVWF  FEA
06DD6:  MOVFF  FEF,3C6
06DDA:  MOVLW  B6
06DDC:  MOVWF  FF6
06DDE:  MOVLW  08
06DE0:  MOVWF  FF7
06DE2:  MOVLW  00
06DE4:  MOVWF  FF8
06DE6:  MOVLW  08
06DE8:  MOVWF  xCA
06DEA:  MOVLB  0
06DEC:  CALL   4368
06DF0:  MOVFF  3C6,3C8
06DF4:  MOVLW  1B
06DF6:  MOVLB  3
06DF8:  MOVWF  xC9
06DFA:  MOVLB  0
06DFC:  CALL   43C6
....................             SendDataDisplay(); 
06E00:  CALL   34BC
....................             printf("bi.pic2=%u",iconoPeque[Opcion-2]); 
06E04:  MOVLW  02
06E06:  MOVLB  3
06E08:  SUBWF  x3C,W
06E0A:  CLRF   03
06E0C:  ADDLW  8F
06E0E:  MOVWF  FE9
06E10:  MOVLW  03
06E12:  ADDWFC 03,W
06E14:  MOVWF  FEA
06E16:  MOVFF  FEF,3C6
06E1A:  MOVLW  C2
06E1C:  MOVWF  FF6
06E1E:  MOVLW  08
06E20:  MOVWF  FF7
06E22:  MOVLW  00
06E24:  MOVWF  FF8
06E26:  MOVLW  08
06E28:  MOVWF  xCA
06E2A:  MOVLB  0
06E2C:  CALL   4368
06E30:  MOVFF  3C6,3C8
06E34:  MOVLW  1B
06E36:  MOVLB  3
06E38:  MOVWF  xC9
06E3A:  MOVLB  0
06E3C:  CALL   43C6
....................             SendDataDisplay(); 
06E40:  CALL   34BC
....................             printf("textop.txt=\"%s\"",texto[Opcion-1]); 
06E44:  MOVLW  01
06E46:  MOVLB  3
06E48:  SUBWF  x3C,W
06E4A:  MULLW  14
06E4C:  MOVF   FF3,W
06E4E:  CLRF   03
06E50:  MOVWF  xC6
06E52:  MOVLW  CE
06E54:  MOVWF  FF6
06E56:  MOVLW  08
06E58:  MOVWF  FF7
06E5A:  MOVLW  00
06E5C:  MOVWF  FF8
06E5E:  MOVLW  0C
06E60:  MOVWF  xCA
06E62:  MOVLB  0
06E64:  CALL   4368
06E68:  MOVLW  50
06E6A:  MOVWF  FF6
06E6C:  MOVLW  01
06E6E:  MOVWF  FF7
06E70:  MOVLW  00
06E72:  MOVWF  FF8
06E74:  MOVLB  3
06E76:  MOVF   xC6,W
06E78:  ADDWF  FF6,F
06E7A:  MOVLW  00
06E7C:  ADDWFC FF7,F
06E7E:  MOVLB  0
06E80:  CALL   348A
06E84:  MOVLW  22
06E86:  BTFSS  F9E.4
06E88:  BRA    6E86
06E8A:  MOVWF  FAD
....................             SendDataDisplay(); 
06E8C:  CALL   34BC
....................          } 
....................           
....................          printf("ttitulo.txt=\"SELECCIONE SU CICLO\""); 
06E90:  MOVLW  DE
06E92:  MOVWF  FF6
06E94:  MOVLW  08
06E96:  MOVWF  FF7
06E98:  MOVLW  00
06E9A:  MOVWF  FF8
06E9C:  CALL   348A
....................          SendDataDisplay(); 
06EA0:  CALL   34BC
....................           
....................          if(RIGHT){ 
06EA4:  BSF    F93.2
06EA6:  BTFSC  F81.2
06EA8:  BRA    6EC2
....................             delay_ms(20); 
06EAA:  MOVLW  14
06EAC:  MOVLB  3
06EAE:  MOVWF  xDB
06EB0:  MOVLB  0
06EB2:  CALL   179E
....................             if(RIGHT){ 
06EB6:  BSF    F93.2
06EB8:  BTFSC  F81.2
06EBA:  BRA    6EC2
....................                Opcion++; 
06EBC:  MOVLB  3
06EBE:  INCF   x3C,F
06EC0:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT){ 
06EC2:  BSF    F93.3
06EC4:  BTFSC  F81.3
06EC6:  BRA    6EE0
....................             delay_ms(20); 
06EC8:  MOVLW  14
06ECA:  MOVLB  3
06ECC:  MOVWF  xDB
06ECE:  MOVLB  0
06ED0:  CALL   179E
....................             if(LEFT){ 
06ED4:  BSF    F93.3
06ED6:  BTFSC  F81.3
06ED8:  BRA    6EE0
....................                Opcion--; 
06EDA:  MOVLB  3
06EDC:  DECF   x3C,F
06EDE:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d && !Op){//Tecla Derecha Oprimida 
06EE0:  MOVF   34,W
06EE2:  SUBLW  0D
06EE4:  BNZ   6EF4
06EE6:  BTFSC  xA2.0
06EE8:  BRA    6EF4
....................             Opcion++; 
06EEA:  MOVLB  3
06EEC:  INCF   x3C,F
....................             RX_Buffer[4]=0x00; 
06EEE:  CLRF   34
....................             Op=ON; 
06EF0:  MOVLB  0
06EF2:  BSF    xA2.0
....................             //BorraBuffer(); 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c && Op){//Tecla Derecha Oprimida 
06EF4:  MOVF   34,W
06EF6:  SUBLW  0C
06EF8:  BNZ   6F08
06EFA:  BTFSS  xA2.0
06EFC:  BRA    6F08
....................             Opcion++; 
06EFE:  MOVLB  3
06F00:  INCF   x3C,F
....................             RX_Buffer[4]=0x00; 
06F02:  CLRF   34
....................             Op=OFF; 
06F04:  MOVLB  0
06F06:  BCF    xA2.0
....................             //BorraBuffer(); 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e && !Op2){//Tecla Izquierda Oprimida 
06F08:  MOVF   34,W
06F0A:  SUBLW  0E
06F0C:  BNZ   6F1C
06F0E:  BTFSC  xA2.1
06F10:  BRA    6F1C
....................             Opcion--; 
06F12:  MOVLB  3
06F14:  DECF   x3C,F
....................             RX_Buffer[4]=0x00; 
06F16:  CLRF   34
....................             Op2=ON; 
06F18:  MOVLB  0
06F1A:  BSF    xA2.1
....................             //BorraBuffer(); 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f && Op2){//Tecla Izquierda Oprimida 
06F1C:  MOVF   34,W
06F1E:  SUBLW  0F
06F20:  BNZ   6F30
06F22:  BTFSS  xA2.1
06F24:  BRA    6F30
....................             Opcion--; 
06F26:  MOVLB  3
06F28:  DECF   x3C,F
....................             RX_Buffer[4]=0x00; 
06F2A:  CLRF   34
....................             Op2=OFF; 
06F2C:  MOVLB  0
06F2E:  BCF    xA2.1
06F30:  MOVLB  2
....................             //BorraBuffer(); 
....................          } 
....................           
....................       } 
....................          if(RIGHT && LEFT){ 
06F32:  BSF    F93.2
06F34:  BTFSC  F81.2
06F36:  BRA    6F84
06F38:  BSF    F93.3
06F3A:  BTFSC  F81.3
06F3C:  BRA    6F84
....................             delay_ms(20); 
06F3E:  MOVLW  14
06F40:  MOVLB  3
06F42:  MOVWF  xDB
06F44:  MOVLB  0
06F46:  CALL   179E
....................             if(RIGHT && LEFT){ 
06F4A:  BSF    F93.2
06F4C:  BTFSC  F81.2
06F4E:  BRA    6F82
06F50:  BSF    F93.3
06F52:  BTFSC  F81.3
06F54:  BRA    6F82
....................                printf("page Clave"); 
06F56:  MOVLW  00
06F58:  MOVWF  FF6
06F5A:  MOVLW  09
06F5C:  MOVWF  FF7
06F5E:  MOVLW  00
06F60:  MOVWF  FF8
06F62:  CALL   348A
....................                SendDataDisplay();  
06F66:  CALL   34BC
....................                Op=OFF; 
06F6A:  BCF    xA2.0
....................                Op2=OFF; 
06F6C:  BCF    xA2.1
....................                MenuAnt=Menu; 
06F6E:  MOVFF  334,335
....................                TipoClave=1; 
06F72:  MOVLW  01
06F74:  MOVLB  2
06F76:  MOVWF  xCF
....................                RX_Buffer[3]=0x00; 
06F78:  CLRF   33
....................                RX_Buffer2[3]=0x00; 
06F7A:  CLRF   3E
....................                Opcion=0; 
06F7C:  MOVLB  3
06F7E:  CLRF   x3C
06F80:  MOVLB  0
06F82:  MOVLB  2
....................             } 
....................          } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==2){ //Menu de Tiempo Esterilizacion      
06F84:  MOVLB  3
06F86:  MOVF   x34,W
06F88:  SUBLW  02
06F8A:  BTFSS  FD8.2
06F8C:  BRA    745E
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
06F8E:  MOVLW  0C
06F90:  MOVWF  FF6
06F92:  MOVLW  09
06F94:  MOVWF  FF7
06F96:  MOVLW  00
06F98:  MOVWF  FF8
06F9A:  MOVLW  11
06F9C:  MOVWF  xCA
06F9E:  MOVLB  0
06FA0:  CALL   4368
06FA4:  MOVFF  36E,3C8
06FA8:  MOVLW  01
06FAA:  MOVLB  3
06FAC:  MOVWF  xC9
06FAE:  MOVLB  0
06FB0:  CALL   43C6
06FB4:  MOVLW  2F
06FB6:  BTFSS  F9E.4
06FB8:  BRA    6FB6
06FBA:  MOVWF  FAD
06FBC:  MOVFF  36D,3C8
06FC0:  MOVLW  01
06FC2:  MOVLB  3
06FC4:  MOVWF  xC9
06FC6:  MOVLB  0
06FC8:  CALL   43C6
06FCC:  MOVLW  2F
06FCE:  BTFSS  F9E.4
06FD0:  BRA    6FCE
06FD2:  MOVWF  FAD
06FD4:  MOVLW  32
06FD6:  BTFSS  F9E.4
06FD8:  BRA    6FD6
06FDA:  MOVWF  FAD
06FDC:  MOVLW  30
06FDE:  BTFSS  F9E.4
06FE0:  BRA    6FDE
06FE2:  MOVWF  FAD
06FE4:  MOVFF  36C,3C8
06FE8:  MOVLW  01
06FEA:  MOVLB  3
06FEC:  MOVWF  xC9
06FEE:  MOVLB  0
06FF0:  CALL   43C6
06FF4:  MOVLW  2D
06FF6:  MOVWF  FF6
06FF8:  MOVLW  09
06FFA:  MOVWF  FF7
06FFC:  MOVLW  00
06FFE:  MOVWF  FF8
07000:  MOVLW  0A
07002:  MOVLB  3
07004:  MOVWF  xCA
07006:  MOVLB  0
07008:  CALL   4368
0700C:  MOVFF  36F,3C8
07010:  MOVLW  01
07012:  MOVLB  3
07014:  MOVWF  xC9
07016:  MOVLB  0
07018:  CALL   43C6
0701C:  MOVLW  3A
0701E:  BTFSS  F9E.4
07020:  BRA    701E
07022:  MOVWF  FAD
07024:  MOVFF  370,3C8
07028:  MOVLW  01
0702A:  MOVLB  3
0702C:  MOVWF  xC9
0702E:  MOVLB  0
07030:  CALL   43C6
07034:  MOVLW  22
07036:  BTFSS  F9E.4
07038:  BRA    7036
0703A:  MOVWF  FAD
....................       SendDataDisplay(); 
0703C:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
07040:  MOVF   34,W
07042:  SUBLW  0A
07044:  BNZ   704A
....................             Minutos=ON; 
07046:  BSF    xA2.2
....................             Segundos=OFF; 
07048:  BCF    xA2.3
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
0704A:  MOVF   34,W
0704C:  SUBLW  0B
0704E:  BNZ   7054
....................             Segundos=ON; 
07050:  BSF    xA2.3
....................             Minutos=OFF; 
07052:  BCF    xA2.2
....................          }            
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
07054:  MOVF   34,W
07056:  SUBLW  11
07058:  BZ    7060
0705A:  BSF    F93.3
0705C:  BTFSC  F81.3
0705E:  BRA    71E2
....................             delay_ms(100); 
07060:  MOVLW  64
07062:  MOVLB  3
07064:  MOVWF  xDB
07066:  MOVLB  0
07068:  CALL   179E
....................             if(RX_Buffer[4]==0x11 || LEFT){ 
0706C:  MOVF   34,W
0706E:  SUBLW  11
07070:  BZ    7078
07072:  BSF    F93.3
07074:  BTFSC  F81.3
07076:  BRA    71E2
....................                Segundos=OFF; 
07078:  BCF    xA2.3
....................                Minutos=OFF; 
0707A:  BCF    xA2.2
....................                printf("page CicloPersona"); 
0707C:  MOVLW  42
0707E:  MOVWF  FF6
07080:  MOVLW  09
07082:  MOVWF  FF7
07084:  MOVLW  00
07086:  MOVWF  FF8
07088:  CALL   348A
....................                SendDataDisplay();   
0708C:  CALL   34BC
....................                PantallaPrincipal=1; 
07090:  MOVLW  01
07092:  MOVLB  2
07094:  MOVWF  xCE
....................                Op=OFF; 
07096:  MOVLB  0
07098:  BCF    xA2.0
....................                Op2=OFF; 
0709A:  BCF    xA2.1
....................                if(!GuardaEEPROM){ 
0709C:  BTFSC  xA2.4
0709E:  BRA    71E2
....................                   CiclosPersonalizados[CicloLibre-1].Minutoest=Testerilizacionp[2]+(Testerilizacionp[3]*10); 
070A0:  MOVLW  01
070A2:  MOVLB  3
070A4:  SUBWF  x28,W
070A6:  MULLW  0A
070A8:  MOVF   FF3,W
070AA:  CLRF   xC7
070AC:  MOVWF  xC6
070AE:  MOVLW  09
070B0:  ADDWF  xC6,W
070B2:  MOVWF  01
070B4:  MOVLW  00
070B6:  ADDWFC xC7,W
070B8:  MOVWF  03
070BA:  MOVF   01,W
070BC:  ADDLW  9E
070BE:  MOVWF  FE9
070C0:  MOVLW  03
070C2:  ADDWFC 03,W
070C4:  MOVWF  FEA
070C6:  MOVFF  B6,3C8
070CA:  MOVLW  0A
070CC:  MOVWF  xC9
070CE:  MOVLB  0
070D0:  CALL   2A1E
070D4:  MOVF   01,W
070D6:  ADDWF  xB5,W
070D8:  MOVWF  FEF
....................                   CiclosPersonalizados[CicloLibre-1].Segundoest=Testerilizacionp[0]+(Testerilizacionp[1]*10); 
070DA:  MOVLW  01
070DC:  MOVLB  3
070DE:  SUBWF  x28,W
070E0:  MULLW  0A
070E2:  MOVF   FF3,W
070E4:  CLRF   xC7
070E6:  MOVWF  xC6
070E8:  MOVLW  03
070EA:  ADDWF  xC6,W
070EC:  MOVWF  01
070EE:  MOVLW  00
070F0:  ADDWFC xC7,W
070F2:  MOVWF  03
070F4:  MOVF   01,W
070F6:  ADDLW  9E
070F8:  MOVWF  FE9
070FA:  MOVLW  03
070FC:  ADDWFC 03,W
070FE:  MOVWF  FEA
07100:  MOVFF  B4,3C8
07104:  MOVLW  0A
07106:  MOVWF  xC9
07108:  MOVLB  0
0710A:  CALL   2A1E
0710E:  MOVF   01,W
07110:  ADDWF  xB3,W
07112:  MOVWF  FEF
....................                   write_eeprom(102+((CicloLibre-1)*8),Testerilizacionp[2]+(Testerilizacionp[3]*10)); 
07114:  MOVLW  01
07116:  MOVLB  3
07118:  SUBWF  x28,W
0711A:  MULLW  08
0711C:  MOVF   FF3,W
0711E:  ADDLW  66
07120:  MOVWF  xC6
07122:  MOVFF  B6,3C8
07126:  MOVLW  0A
07128:  MOVWF  xC9
0712A:  MOVLB  0
0712C:  CALL   2A1E
07130:  MOVF   01,W
07132:  ADDWF  xB5,W
07134:  MOVLB  3
07136:  MOVWF  xC7
07138:  CLRF   FAA
0713A:  MOVFF  3C6,FA9
0713E:  MOVFF  3C7,FA8
07142:  BCF    FA6.6
07144:  BCF    FA6.7
07146:  BSF    FA6.2
07148:  MOVF   FF2,W
0714A:  MOVWF  00
0714C:  BCF    FF2.6
0714E:  BCF    FF2.7
07150:  MOVLB  F
07152:  MOVLW  55
07154:  MOVWF  FA7
07156:  MOVLW  AA
07158:  MOVWF  FA7
0715A:  BSF    FA6.1
0715C:  BTFSC  FA6.1
0715E:  BRA    715C
07160:  BCF    FA6.2
07162:  MOVF   00,W
07164:  IORWF  FF2,F
....................                   delay_ms(10); 
07166:  MOVLW  0A
07168:  MOVLB  3
0716A:  MOVWF  xDB
0716C:  MOVLB  0
0716E:  CALL   179E
....................                   write_eeprom(103+((CicloLibre-1)*8),Testerilizacionp[0]+(Testerilizacionp[1]*10)); 
07172:  MOVLW  01
07174:  MOVLB  3
07176:  SUBWF  x28,W
07178:  MULLW  08
0717A:  MOVF   FF3,W
0717C:  ADDLW  67
0717E:  MOVWF  xC6
07180:  MOVFF  B4,3C8
07184:  MOVLW  0A
07186:  MOVWF  xC9
07188:  MOVLB  0
0718A:  CALL   2A1E
0718E:  MOVF   01,W
07190:  ADDWF  xB3,W
07192:  MOVLB  3
07194:  MOVWF  xC7
07196:  CLRF   FAA
07198:  MOVFF  3C6,FA9
0719C:  MOVFF  3C7,FA8
071A0:  BCF    FA6.6
071A2:  BCF    FA6.7
071A4:  BSF    FA6.2
071A6:  MOVF   FF2,W
071A8:  MOVWF  00
071AA:  BCF    FF2.6
071AC:  BCF    FF2.7
071AE:  MOVLB  F
071B0:  MOVLW  55
071B2:  MOVWF  FA7
071B4:  MOVLW  AA
071B6:  MOVWF  FA7
071B8:  BSF    FA6.1
071BA:  BTFSC  FA6.1
071BC:  BRA    71BA
071BE:  BCF    FA6.2
071C0:  MOVF   00,W
071C2:  IORWF  FF2,F
....................                   delay_ms(10); 
071C4:  MOVLW  0A
071C6:  MOVLB  3
071C8:  MOVWF  xDB
071CA:  MOVLB  0
071CC:  CALL   179E
....................                   Testerilizacion[0]=Testerilizacionp[0]; 
071D0:  MOVFF  B3,AE
....................                   Testerilizacion[1]=Testerilizacionp[1]; 
071D4:  MOVFF  B4,AF
....................                   Testerilizacion[2]=Testerilizacionp[2]; 
071D8:  MOVFF  B5,B0
....................                   Testerilizacion[3]=Testerilizacionp[3];                   
071DC:  MOVFF  B6,B1
....................                   GuardaEEPROM=ON; 
071E0:  BSF    xA2.4
....................                } 
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
071E2:  BSF    F93.2
071E4:  BTFSC  F81.2
071E6:  BRA    725C
....................             delay_ms(100); 
071E8:  MOVLW  64
071EA:  MOVLB  3
071EC:  MOVWF  xDB
071EE:  MOVLB  0
071F0:  CALL   179E
....................             if(RIGHT){ 
071F4:  BSF    F93.2
071F6:  BTFSC  F81.2
071F8:  BRA    725C
....................                if(!Segundos){ 
071FA:  BTFSC  xA2.3
071FC:  BRA    722C
....................                   Segundos=ON; 
071FE:  BSF    xA2.3
....................                   Minutos=OFF; 
07200:  BCF    xA2.2
....................                   printf("tsecest.pco=65535"); 
07202:  MOVLW  54
07204:  MOVWF  FF6
07206:  MOVLW  09
07208:  MOVWF  FF7
0720A:  MOVLW  00
0720C:  MOVWF  FF8
0720E:  CALL   348A
....................                   SendDataDisplay();   
07212:  CALL   34BC
....................                   printf("tminest.pco=0"); 
07216:  MOVLW  66
07218:  MOVWF  FF6
0721A:  MOVLW  09
0721C:  MOVWF  FF7
0721E:  MOVLW  00
07220:  MOVWF  FF8
07222:  CALL   348A
....................                   SendDataDisplay();   
07226:  CALL   34BC
....................                }else if(!Minutos){ 
0722A:  BRA    725C
0722C:  BTFSC  xA2.2
0722E:  BRA    725C
....................                   Segundos=OFF; 
07230:  BCF    xA2.3
....................                   Minutos=ON; 
07232:  BSF    xA2.2
....................                   printf("tsecest.pco=0"); 
07234:  MOVLW  74
07236:  MOVWF  FF6
07238:  MOVLW  09
0723A:  MOVWF  FF7
0723C:  MOVLW  00
0723E:  MOVWF  FF8
07240:  CALL   348A
....................                   SendDataDisplay();   
07244:  CALL   34BC
....................                   printf("tminest.pco=65535"); 
07248:  MOVLW  82
0724A:  MOVWF  FF6
0724C:  MOVLW  09
0724E:  MOVWF  FF7
07250:  MOVLW  00
07252:  MOVWF  FF8
07254:  CALL   348A
....................                   SendDataDisplay();   
07258:  CALL   34BC
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0725C:  BSF    F93.0
0725E:  BTFSC  F81.0
07260:  BRA    72A8
....................             delay_ms(100); 
07262:  MOVLW  64
07264:  MOVLB  3
07266:  MOVWF  xDB
07268:  MOVLB  0
0726A:  CALL   179E
....................             if(UP){ 
0726E:  BSF    F93.0
07270:  BTFSC  F81.0
07272:  BRA    72A8
....................                if(Segundos){ 
07274:  BTFSS  xA2.3
07276:  BRA    7288
....................                   Testerilizacionp[0]++; 
07278:  INCF   xB3,F
....................                   if(Testerilizacionp[0]>9){ 
0727A:  BTFSC  xB3.7
0727C:  BRA    7288
0727E:  MOVF   xB3,W
07280:  SUBLW  09
07282:  BC    7288
....................                      Testerilizacionp[1]++; 
07284:  INCF   xB4,F
....................                      Testerilizacionp[0]=0; 
07286:  CLRF   xB3
....................                   } 
....................                } 
....................                if(Minutos){ 
07288:  BTFSS  xA2.2
0728A:  BRA    72A8
....................                   Testerilizacionp[2]++; 
0728C:  INCF   xB5,F
....................                   if(Testerilizacionp[2]>9){ 
0728E:  BTFSC  xB5.7
07290:  BRA    729C
07292:  MOVF   xB5,W
07294:  SUBLW  09
07296:  BC    729C
....................                      Testerilizacionp[3]++; 
07298:  INCF   xB6,F
....................                      Testerilizacionp[2]=0; 
0729A:  CLRF   xB5
....................                   } 
....................                   if(Testerilizacionp[3]>9){                      
0729C:  BTFSC  xB6.7
0729E:  BRA    72A8
072A0:  MOVF   xB6,W
072A2:  SUBLW  09
072A4:  BC    72A8
....................                      Testerilizacionp[3]=0; 
072A6:  CLRF   xB6
....................                   } 
....................                }     
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
072A8:  BSF    F93.1
072AA:  BTFSC  F81.1
072AC:  BRA    72EE
....................             delay_ms(100); 
072AE:  MOVLW  64
072B0:  MOVLB  3
072B2:  MOVWF  xDB
072B4:  MOVLB  0
072B6:  CALL   179E
....................             if(DOWN){ 
072BA:  BSF    F93.1
072BC:  BTFSC  F81.1
072BE:  BRA    72EE
....................                if(Segundos){ 
072C0:  BTFSS  xA2.3
072C2:  BRA    72D2
....................                   Testerilizacionp[0]--; 
072C4:  DECF   xB3,F
....................                   if(Testerilizacionp[0]<0){ 
072C6:  BTFSC  xB3.7
072C8:  BRA    72CC
072CA:  BRA    72D2
....................                      Testerilizacionp[1]--; 
072CC:  DECF   xB4,F
....................                      Testerilizacionp[0]=9; 
072CE:  MOVLW  09
072D0:  MOVWF  xB3
....................                   } 
....................                } 
....................                if(Minutos){ 
072D2:  BTFSS  xA2.2
072D4:  BRA    72EE
....................                   Testerilizacionp[2]--; 
072D6:  DECF   xB5,F
....................                   if(Testerilizacionp[2]<0){ 
072D8:  BTFSC  xB5.7
072DA:  BRA    72DE
072DC:  BRA    72E4
....................                      Testerilizacionp[3]--; 
072DE:  DECF   xB6,F
....................                      Testerilizacionp[2]=9; 
072E0:  MOVLW  09
072E2:  MOVWF  xB5
....................                   } 
....................                   if(Testerilizacionp[3]<0){ 
072E4:  BTFSC  xB6.7
072E6:  BRA    72EA
072E8:  BRA    72EE
....................                      Testerilizacionp[3]=9; 
072EA:  MOVLW  09
072EC:  MOVWF  xB6
....................                   } 
....................                }     
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla Derecha Oprimida 
072EE:  MOVF   34,W
072F0:  SUBLW  0C
072F2:  BZ    72FA
072F4:  MOVF   34,W
072F6:  SUBLW  0D
072F8:  BNZ   7332
....................             if(Segundos){ 
072FA:  BTFSS  xA2.3
072FC:  BRA    730E
....................                Testerilizacionp[0]++; 
072FE:  INCF   xB3,F
....................                if(Testerilizacionp[0]>9){ 
07300:  BTFSC  xB3.7
07302:  BRA    730E
07304:  MOVF   xB3,W
07306:  SUBLW  09
07308:  BC    730E
....................                   Testerilizacionp[1]++; 
0730A:  INCF   xB4,F
....................                   Testerilizacionp[0]=0; 
0730C:  CLRF   xB3
....................                } 
....................             } 
....................             if(Minutos){ 
0730E:  BTFSS  xA2.2
07310:  BRA    732E
....................                Testerilizacionp[2]++; 
07312:  INCF   xB5,F
....................                if(Testerilizacionp[2]>9){ 
07314:  BTFSC  xB5.7
07316:  BRA    7322
07318:  MOVF   xB5,W
0731A:  SUBLW  09
0731C:  BC    7322
....................                   Testerilizacionp[3]++; 
0731E:  INCF   xB6,F
....................                   Testerilizacionp[2]=0; 
07320:  CLRF   xB5
....................                } 
....................                if(Testerilizacionp[3]>9){                   
07322:  BTFSC  xB6.7
07324:  BRA    732E
07326:  MOVF   xB6,W
07328:  SUBLW  09
0732A:  BC    732E
....................                   Testerilizacionp[3]=0; 
0732C:  CLRF   xB6
....................                } 
....................             } 
....................             RX_Buffer[4]=0x00;   
0732E:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
07330:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla Izquierda Oprimida 
07332:  MOVF   34,W
07334:  SUBLW  0F
07336:  BZ    733E
07338:  MOVF   34,W
0733A:  SUBLW  0E
0733C:  BNZ   7370
....................              
....................             if(Segundos){ 
0733E:  BTFSS  xA2.3
07340:  BRA    7350
....................                Testerilizacionp[0]--; 
07342:  DECF   xB3,F
....................                if(Testerilizacionp[0]<0){ 
07344:  BTFSC  xB3.7
07346:  BRA    734A
07348:  BRA    7350
....................                   Testerilizacionp[1]--; 
0734A:  DECF   xB4,F
....................                   Testerilizacionp[0]=9; 
0734C:  MOVLW  09
0734E:  MOVWF  xB3
....................                } 
....................             } 
....................             if(Minutos){ 
07350:  BTFSS  xA2.2
07352:  BRA    736C
....................                Testerilizacionp[2]--; 
07354:  DECF   xB5,F
....................                if(Testerilizacionp[2]<0){ 
07356:  BTFSC  xB5.7
07358:  BRA    735C
0735A:  BRA    7362
....................                   Testerilizacionp[3]--; 
0735C:  DECF   xB6,F
....................                   Testerilizacionp[2]=9; 
0735E:  MOVLW  09
07360:  MOVWF  xB5
....................                } 
....................                if(Testerilizacionp[3]<0){ 
07362:  BTFSC  xB6.7
07364:  BRA    7368
07366:  BRA    736C
....................                   Testerilizacionp[3]=9; 
07368:  MOVLW  09
0736A:  MOVWF  xB6
....................                } 
....................             } 
....................             RX_Buffer[4]=0x00;   
0736C:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
0736E:  CLRF   3F
....................          } 
....................           
....................          if(Testerilizacionp[0]<0) 
07370:  BTFSC  xB3.7
07372:  BRA    7376
07374:  BRA    737A
....................             Testerilizacionp[0]=9;             
07376:  MOVLW  09
07378:  MOVWF  xB3
....................          if(Testerilizacionp[1]<0) 
0737A:  BTFSC  xB4.7
0737C:  BRA    7380
0737E:  BRA    7384
....................             Testerilizacionp[1]=5;             
07380:  MOVLW  05
07382:  MOVWF  xB4
....................          if(Testerilizacionp[2]<0) 
07384:  BTFSC  xB5.7
07386:  BRA    738A
07388:  BRA    738E
....................             Testerilizacionp[2]=9;             
0738A:  MOVLW  09
0738C:  MOVWF  xB5
....................          if(Testerilizacionp[3]<0) 
0738E:  BTFSC  xB6.7
07390:  BRA    7394
07392:  BRA    7398
....................             Testerilizacionp[3]=9;             
07394:  MOVLW  09
07396:  MOVWF  xB6
....................           
....................          if(Testerilizacionp[0]>9) 
07398:  BTFSC  xB3.7
0739A:  BRA    73A4
0739C:  MOVF   xB3,W
0739E:  SUBLW  09
073A0:  BC    73A4
....................             Testerilizacionp[0]=0;             
073A2:  CLRF   xB3
....................          if(Testerilizacionp[1]>5) 
073A4:  BTFSC  xB4.7
073A6:  BRA    73B0
073A8:  MOVF   xB4,W
073AA:  SUBLW  05
073AC:  BC    73B0
....................             Testerilizacionp[1]=0;             
073AE:  CLRF   xB4
....................          if(Testerilizacionp[2]>9) 
073B0:  BTFSC  xB5.7
073B2:  BRA    73BC
073B4:  MOVF   xB5,W
073B6:  SUBLW  09
073B8:  BC    73BC
....................             Testerilizacionp[2]=0;             
073BA:  CLRF   xB5
....................          if(Testerilizacionp[3]>9) 
073BC:  BTFSC  xB6.7
073BE:  BRA    73C8
073C0:  MOVF   xB6,W
073C2:  SUBLW  09
073C4:  BC    73C8
....................             Testerilizacionp[3]=0;  
073C6:  CLRF   xB6
....................              
....................          printf("tminest.txt=\"%02u\"",((Testerilizacionp[3]*10)+Testerilizacionp[2])); 
073C8:  MOVFF  B6,3C8
073CC:  MOVLW  0A
073CE:  MOVLB  3
073D0:  MOVWF  xC9
073D2:  MOVLB  0
073D4:  CALL   2A1E
073D8:  MOVF   xB5,W
073DA:  ADDWF  01,W
073DC:  MOVLB  3
073DE:  MOVWF  xC6
073E0:  MOVLW  94
073E2:  MOVWF  FF6
073E4:  MOVLW  09
073E6:  MOVWF  FF7
073E8:  MOVLW  00
073EA:  MOVWF  FF8
073EC:  MOVLW  0D
073EE:  MOVWF  xCA
073F0:  MOVLB  0
073F2:  CALL   4368
073F6:  MOVFF  3C6,3C8
073FA:  MOVLW  01
073FC:  MOVLB  3
073FE:  MOVWF  xC9
07400:  MOVLB  0
07402:  CALL   43C6
07406:  MOVLW  22
07408:  BTFSS  F9E.4
0740A:  BRA    7408
0740C:  MOVWF  FAD
....................          SendDataDisplay(); 
0740E:  CALL   34BC
....................          printf("tsecest.txt=\"%02u\"",((Testerilizacionp[1]*10)+Testerilizacionp[0])); 
07412:  MOVFF  B4,3C8
07416:  MOVLW  0A
07418:  MOVLB  3
0741A:  MOVWF  xC9
0741C:  MOVLB  0
0741E:  CALL   2A1E
07422:  MOVF   xB3,W
07424:  ADDWF  01,W
07426:  MOVLB  3
07428:  MOVWF  xC6
0742A:  MOVLW  A8
0742C:  MOVWF  FF6
0742E:  MOVLW  09
07430:  MOVWF  FF7
07432:  MOVLW  00
07434:  MOVWF  FF8
07436:  MOVLW  0D
07438:  MOVWF  xCA
0743A:  MOVLB  0
0743C:  CALL   4368
07440:  MOVFF  3C6,3C8
07444:  MOVLW  01
07446:  MOVLB  3
07448:  MOVWF  xC9
0744A:  MOVLB  0
0744C:  CALL   43C6
07450:  MOVLW  22
07452:  BTFSS  F9E.4
07454:  BRA    7452
07456:  MOVWF  FAD
....................          SendDataDisplay(); 
07458:  CALL   34BC
0745C:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==3){ //Menu de Tiempo de Secado 
0745E:  MOVF   x34,W
07460:  SUBLW  03
07462:  BTFSS  FD8.2
07464:  BRA    7906
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
07466:  MOVLW  BC
07468:  MOVWF  FF6
0746A:  MOVLW  09
0746C:  MOVWF  FF7
0746E:  MOVLW  00
07470:  MOVWF  FF8
07472:  MOVLW  11
07474:  MOVWF  xCA
07476:  MOVLB  0
07478:  CALL   4368
0747C:  MOVFF  36E,3C8
07480:  MOVLW  01
07482:  MOVLB  3
07484:  MOVWF  xC9
07486:  MOVLB  0
07488:  CALL   43C6
0748C:  MOVLW  2F
0748E:  BTFSS  F9E.4
07490:  BRA    748E
07492:  MOVWF  FAD
07494:  MOVFF  36D,3C8
07498:  MOVLW  01
0749A:  MOVLB  3
0749C:  MOVWF  xC9
0749E:  MOVLB  0
074A0:  CALL   43C6
074A4:  MOVLW  2F
074A6:  BTFSS  F9E.4
074A8:  BRA    74A6
074AA:  MOVWF  FAD
074AC:  MOVLW  32
074AE:  BTFSS  F9E.4
074B0:  BRA    74AE
074B2:  MOVWF  FAD
074B4:  MOVLW  30
074B6:  BTFSS  F9E.4
074B8:  BRA    74B6
074BA:  MOVWF  FAD
074BC:  MOVFF  36C,3C8
074C0:  MOVLW  01
074C2:  MOVLB  3
074C4:  MOVWF  xC9
074C6:  MOVLB  0
074C8:  CALL   43C6
074CC:  MOVLW  DD
074CE:  MOVWF  FF6
074D0:  MOVLW  09
074D2:  MOVWF  FF7
074D4:  MOVLW  00
074D6:  MOVWF  FF8
074D8:  MOVLW  0A
074DA:  MOVLB  3
074DC:  MOVWF  xCA
074DE:  MOVLB  0
074E0:  CALL   4368
074E4:  MOVFF  36F,3C8
074E8:  MOVLW  01
074EA:  MOVLB  3
074EC:  MOVWF  xC9
074EE:  MOVLB  0
074F0:  CALL   43C6
074F4:  MOVLW  3A
074F6:  BTFSS  F9E.4
074F8:  BRA    74F6
074FA:  MOVWF  FAD
074FC:  MOVFF  370,3C8
07500:  MOVLW  01
07502:  MOVLB  3
07504:  MOVWF  xC9
07506:  MOVLB  0
07508:  CALL   43C6
0750C:  MOVLW  22
0750E:  BTFSS  F9E.4
07510:  BRA    750E
07512:  MOVWF  FAD
....................       SendDataDisplay();             
07514:  CALL   34BC
....................              
....................          if(RX_Buffer[4]==0x0a){//Selecciono Minutos 
07518:  MOVF   34,W
0751A:  SUBLW  0A
0751C:  BNZ   7522
....................             Minutos=ON; 
0751E:  BSF    xA2.2
....................             Segundos=OFF; 
07520:  BCF    xA2.3
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Segundos 
07522:  MOVF   34,W
07524:  SUBLW  0B
07526:  BNZ   752C
....................             Segundos=ON; 
07528:  BSF    xA2.3
....................             Minutos=OFF; 
0752A:  BCF    xA2.2
....................          } 
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0752C:  MOVF   34,W
0752E:  SUBLW  11
07530:  BZ    7538
07532:  BSF    F93.3
07534:  BTFSC  F81.3
07536:  BRA    769A
....................             Segundos=OFF; 
07538:  BCF    xA2.3
....................             Minutos=OFF; 
0753A:  BCF    xA2.2
....................             printf("page CicloPersona"); 
0753C:  MOVLW  F2
0753E:  MOVWF  FF6
07540:  MOVLW  09
07542:  MOVWF  FF7
07544:  MOVLW  00
07546:  MOVWF  FF8
07548:  CALL   348A
....................             SendDataDisplay();   
0754C:  CALL   34BC
....................             //PantallaPrincipal=1; 
....................             Op=OFF; 
07550:  BCF    xA2.0
....................             Op2=OFF; 
07552:  BCF    xA2.1
....................             if(!GuardaEEPROM){ 
07554:  BTFSC  xA2.4
07556:  BRA    769A
....................                CiclosPersonalizados[CicloLibre-1].Minutosec=Tsecadop[2]+(Tsecadop[3]*10); 
07558:  MOVLW  01
0755A:  MOVLB  3
0755C:  SUBWF  x28,W
0755E:  MULLW  0A
07560:  MOVF   FF3,W
07562:  CLRF   xC7
07564:  MOVWF  xC6
07566:  MOVLW  04
07568:  ADDWF  xC6,W
0756A:  MOVWF  01
0756C:  MOVLW  00
0756E:  ADDWFC xC7,W
07570:  MOVWF  03
07572:  MOVF   01,W
07574:  ADDLW  9E
07576:  MOVWF  FE9
07578:  MOVLW  03
0757A:  ADDWFC 03,W
0757C:  MOVWF  FEA
0757E:  MOVFF  BF,3C8
07582:  MOVLW  0A
07584:  MOVWF  xC9
07586:  MOVLB  0
07588:  CALL   2A1E
0758C:  MOVF   01,W
0758E:  ADDWF  xBE,W
07590:  MOVWF  FEF
....................                CiclosPersonalizados[CicloLibre-1].Segundosec=Tsecadop[0]+(Tsecadop[1]*10); 
07592:  MOVLW  01
07594:  MOVLB  3
07596:  SUBWF  x28,W
07598:  MULLW  0A
0759A:  MOVF   FF3,W
0759C:  CLRF   xC7
0759E:  MOVWF  xC6
075A0:  MOVLW  05
075A2:  ADDWF  xC6,W
075A4:  MOVWF  01
075A6:  MOVLW  00
075A8:  ADDWFC xC7,W
075AA:  MOVWF  03
075AC:  MOVF   01,W
075AE:  ADDLW  9E
075B0:  MOVWF  FE9
075B2:  MOVLW  03
075B4:  ADDWFC 03,W
075B6:  MOVWF  FEA
075B8:  MOVFF  BD,3C8
075BC:  MOVLW  0A
075BE:  MOVWF  xC9
075C0:  MOVLB  0
075C2:  CALL   2A1E
075C6:  MOVF   01,W
075C8:  ADDWF  xBC,W
075CA:  MOVWF  FEF
....................                write_eeprom(104+((CicloLibre-1)*8),Tsecadop[2]+(Tsecadop[3]*10)); 
075CC:  MOVLW  01
075CE:  MOVLB  3
075D0:  SUBWF  x28,W
075D2:  MULLW  08
075D4:  MOVF   FF3,W
075D6:  ADDLW  68
075D8:  MOVWF  xC6
075DA:  MOVFF  BF,3C8
075DE:  MOVLW  0A
075E0:  MOVWF  xC9
075E2:  MOVLB  0
075E4:  CALL   2A1E
075E8:  MOVF   01,W
075EA:  ADDWF  xBE,W
075EC:  MOVLB  3
075EE:  MOVWF  xC7
075F0:  CLRF   FAA
075F2:  MOVFF  3C6,FA9
075F6:  MOVFF  3C7,FA8
075FA:  BCF    FA6.6
075FC:  BCF    FA6.7
075FE:  BSF    FA6.2
07600:  MOVF   FF2,W
07602:  MOVWF  00
07604:  BCF    FF2.6
07606:  BCF    FF2.7
07608:  MOVLB  F
0760A:  MOVLW  55
0760C:  MOVWF  FA7
0760E:  MOVLW  AA
07610:  MOVWF  FA7
07612:  BSF    FA6.1
07614:  BTFSC  FA6.1
07616:  BRA    7614
07618:  BCF    FA6.2
0761A:  MOVF   00,W
0761C:  IORWF  FF2,F
....................                delay_ms(10); 
0761E:  MOVLW  0A
07620:  MOVLB  3
07622:  MOVWF  xDB
07624:  MOVLB  0
07626:  CALL   179E
....................                write_eeprom(105+((CicloLibre-1)*8),Tsecadop[0]+(Tsecadop[1]*10)); 
0762A:  MOVLW  01
0762C:  MOVLB  3
0762E:  SUBWF  x28,W
07630:  MULLW  08
07632:  MOVF   FF3,W
07634:  ADDLW  69
07636:  MOVWF  xC6
07638:  MOVFF  BD,3C8
0763C:  MOVLW  0A
0763E:  MOVWF  xC9
07640:  MOVLB  0
07642:  CALL   2A1E
07646:  MOVF   01,W
07648:  ADDWF  xBC,W
0764A:  MOVLB  3
0764C:  MOVWF  xC7
0764E:  CLRF   FAA
07650:  MOVFF  3C6,FA9
07654:  MOVFF  3C7,FA8
07658:  BCF    FA6.6
0765A:  BCF    FA6.7
0765C:  BSF    FA6.2
0765E:  MOVF   FF2,W
07660:  MOVWF  00
07662:  BCF    FF2.6
07664:  BCF    FF2.7
07666:  MOVLB  F
07668:  MOVLW  55
0766A:  MOVWF  FA7
0766C:  MOVLW  AA
0766E:  MOVWF  FA7
07670:  BSF    FA6.1
07672:  BTFSC  FA6.1
07674:  BRA    7672
07676:  BCF    FA6.2
07678:  MOVF   00,W
0767A:  IORWF  FF2,F
....................                delay_ms(10); 
0767C:  MOVLW  0A
0767E:  MOVLB  3
07680:  MOVWF  xDB
07682:  MOVLB  0
07684:  CALL   179E
....................                Tsecado[0]=Tsecadop[0]; 
07688:  MOVFF  BC,B8
....................                Tsecado[1]=Tsecadop[1]; 
0768C:  MOVFF  BD,B9
....................                Tsecado[2]=Tsecadop[2]; 
07690:  MOVFF  BE,BA
....................                Tsecado[3]=Tsecadop[3]; 
07694:  MOVFF  BF,BB
....................                GuardaEEPROM=ON; 
07698:  BSF    xA2.4
....................             } 
....................          } 
....................           
....................          if(RIGHT){ 
0769A:  BSF    F93.2
0769C:  BTFSC  F81.2
0769E:  BRA    7714
....................             delay_ms(100); 
076A0:  MOVLW  64
076A2:  MOVLB  3
076A4:  MOVWF  xDB
076A6:  MOVLB  0
076A8:  CALL   179E
....................             if(RIGHT){ 
076AC:  BSF    F93.2
076AE:  BTFSC  F81.2
076B0:  BRA    7714
....................                if(!Segundos){ 
076B2:  BTFSC  xA2.3
076B4:  BRA    76E4
....................                   Segundos=ON; 
076B6:  BSF    xA2.3
....................                   Minutos=OFF; 
076B8:  BCF    xA2.2
....................                   printf("tminsec.pco=0"); 
076BA:  MOVLW  04
076BC:  MOVWF  FF6
076BE:  MOVLW  0A
076C0:  MOVWF  FF7
076C2:  MOVLW  00
076C4:  MOVWF  FF8
076C6:  CALL   348A
....................                   SendDataDisplay();                    
076CA:  CALL   34BC
....................                   printf("tsecsec.pco=65535"); 
076CE:  MOVLW  12
076D0:  MOVWF  FF6
076D2:  MOVLW  0A
076D4:  MOVWF  FF7
076D6:  MOVLW  00
076D8:  MOVWF  FF8
076DA:  CALL   348A
....................                   SendDataDisplay();   
076DE:  CALL   34BC
....................                }else if(!Minutos){ 
076E2:  BRA    7714
076E4:  BTFSC  xA2.2
076E6:  BRA    7714
....................                   Segundos=OFF; 
076E8:  BCF    xA2.3
....................                   Minutos=ON; 
076EA:  BSF    xA2.2
....................                   printf("tminsec.pco=65535"); 
076EC:  MOVLW  24
076EE:  MOVWF  FF6
076F0:  MOVLW  0A
076F2:  MOVWF  FF7
076F4:  MOVLW  00
076F6:  MOVWF  FF8
076F8:  CALL   348A
....................                   SendDataDisplay();   
076FC:  CALL   34BC
....................                   printf("tsecsec.pco=0"); 
07700:  MOVLW  36
07702:  MOVWF  FF6
07704:  MOVLW  0A
07706:  MOVWF  FF7
07708:  MOVLW  00
0770A:  MOVWF  FF8
0770C:  CALL   348A
....................                   SendDataDisplay();   
07710:  CALL   34BC
....................                } 
....................             } 
....................          } 
....................           
....................          if(UP){ 
07714:  BSF    F93.0
07716:  BTFSC  F81.0
07718:  BRA    7754
....................             delay_ms(100); 
0771A:  MOVLW  64
0771C:  MOVLB  3
0771E:  MOVWF  xDB
07720:  MOVLB  0
07722:  CALL   179E
....................             if(UP){ 
07726:  BSF    F93.0
07728:  BTFSC  F81.0
0772A:  BRA    7754
....................                if(Segundos){ 
0772C:  BTFSS  xA2.3
0772E:  BRA    7740
....................                   Tsecadop[0]++; 
07730:  INCF   xBC,F
....................                   if(Tsecadop[0]>9){ 
07732:  BTFSC  xBC.7
07734:  BRA    7740
07736:  MOVF   xBC,W
07738:  SUBLW  09
0773A:  BC    7740
....................                      Tsecadop[1]++; 
0773C:  INCF   xBD,F
....................                      Tsecadop[0]=0; 
0773E:  CLRF   xBC
....................                   } 
....................                } 
....................                if(Minutos){ 
07740:  BTFSS  xA2.2
07742:  BRA    7754
....................                   Tsecado[2]++; 
07744:  INCF   xBA,F
....................                   if(Tsecadop[2]>9){ 
07746:  BTFSC  xBE.7
07748:  BRA    7754
0774A:  MOVF   xBE,W
0774C:  SUBLW  09
0774E:  BC    7754
....................                      Tsecadop[3]++; 
07750:  INCF   xBF,F
....................                      Tsecadop[2]=0; 
07752:  CLRF   xBE
....................                   } 
....................                }   
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
07754:  BSF    F93.1
07756:  BTFSC  F81.1
07758:  BRA    779E
....................             delay_ms(100); 
0775A:  MOVLW  64
0775C:  MOVLB  3
0775E:  MOVWF  xDB
07760:  MOVLB  0
07762:  CALL   179E
....................             if(DOWN){ 
07766:  BSF    F93.1
07768:  BTFSC  F81.1
0776A:  BRA    779E
....................                if(Segundos){ 
0776C:  BTFSS  xA2.3
0776E:  BRA    778C
....................                   Tsecadop[0]--; 
07770:  DECF   xBC,F
....................                   if(Tsecadop[0]<0){ 
07772:  BTFSC  xBC.7
07774:  BRA    7778
07776:  BRA    777E
....................                      Tsecadop[1]--; 
07778:  DECF   xBD,F
....................                      Tsecadop[0]=9; 
0777A:  MOVLW  09
0777C:  MOVWF  xBC
....................                   } 
....................                   if(Tsecadop[1]<0){ 
0777E:  BTFSC  xBD.7
07780:  BRA    7784
07782:  BRA    778C
....................                      Tsecadop[1]=5; 
07784:  MOVLW  05
07786:  MOVWF  xBD
....................                      Tsecadop[0]=9; 
07788:  MOVLW  09
0778A:  MOVWF  xBC
....................                   } 
....................                } 
....................                if(Minutos){ 
0778C:  BTFSS  xA2.2
0778E:  BRA    779E
....................                   Tsecadop[2]--; 
07790:  DECF   xBE,F
....................                   if(Tsecadop[2]<0){ 
07792:  BTFSC  xBE.7
07794:  BRA    7798
07796:  BRA    779E
....................                      Tsecadop[3]--; 
07798:  DECF   xBF,F
....................                      Tsecadop[2]=9; 
0779A:  MOVLW  09
0779C:  MOVWF  xBE
....................                   } 
....................                }   
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c || RX_Buffer[4]==0x0d){//Tecla Derecha Oprimida 
0779E:  MOVF   34,W
077A0:  SUBLW  0C
077A2:  BZ    77AA
077A4:  MOVF   34,W
077A6:  SUBLW  0D
077A8:  BNZ   77D6
....................             if(Segundos){ 
077AA:  BTFSS  xA2.3
077AC:  BRA    77BE
....................                Tsecadop[0]++; 
077AE:  INCF   xBC,F
....................                if(Tsecadop[0]>9){ 
077B0:  BTFSC  xBC.7
077B2:  BRA    77BE
077B4:  MOVF   xBC,W
077B6:  SUBLW  09
077B8:  BC    77BE
....................                   Tsecadop[1]++; 
077BA:  INCF   xBD,F
....................                   Tsecadop[0]=0; 
077BC:  CLRF   xBC
....................                } 
....................             } 
....................             if(Minutos){ 
077BE:  BTFSS  xA2.2
077C0:  BRA    77D2
....................                Tsecadop[2]++; 
077C2:  INCF   xBE,F
....................                if(Tsecadop[2]>9){ 
077C4:  BTFSC  xBE.7
077C6:  BRA    77D2
077C8:  MOVF   xBE,W
077CA:  SUBLW  09
077CC:  BC    77D2
....................                   Tsecadop[3]++; 
077CE:  INCF   xBF,F
....................                   Tsecadop[2]=0; 
077D0:  CLRF   xBE
....................                } 
....................             } 
....................             RX_Buffer[4]=0x00;   
077D2:  CLRF   34
....................             RX_Buffer2[4]=0x00;  
077D4:  CLRF   3F
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0f || RX_Buffer[4]==0x0e){//Tecla Izquierda Oprimida 
077D6:  MOVF   34,W
077D8:  SUBLW  0F
077DA:  BZ    77E2
077DC:  MOVF   34,W
077DE:  SUBLW  0E
077E0:  BNZ   7818
....................             if(Segundos){ 
077E2:  BTFSS  xA2.3
077E4:  BRA    7802
....................                Tsecadop[0]--; 
077E6:  DECF   xBC,F
....................                if(Tsecadop[0]<0){ 
077E8:  BTFSC  xBC.7
077EA:  BRA    77EE
077EC:  BRA    77F4
....................                   Tsecadop[1]--; 
077EE:  DECF   xBD,F
....................                   Tsecadop[0]=9; 
077F0:  MOVLW  09
077F2:  MOVWF  xBC
....................                } 
....................                if(Tsecadop[1]<0){ 
077F4:  BTFSC  xBD.7
077F6:  BRA    77FA
077F8:  BRA    7802
....................                   Tsecadop[1]=5; 
077FA:  MOVLW  05
077FC:  MOVWF  xBD
....................                   Tsecadop[0]=9; 
077FE:  MOVLW  09
07800:  MOVWF  xBC
....................                } 
....................             } 
....................             if(Minutos){ 
07802:  BTFSS  xA2.2
07804:  BRA    7814
....................                Tsecadop[2]--; 
07806:  DECF   xBE,F
....................                if(Tsecadop[2]<0){ 
07808:  BTFSC  xBE.7
0780A:  BRA    780E
0780C:  BRA    7814
....................                   Tsecadop[3]--; 
0780E:  DECF   xBF,F
....................                   Tsecadop[2]=9; 
07810:  MOVLW  09
07812:  MOVWF  xBE
....................                } 
....................             } 
....................             RX_Buffer[4]=0x00;   
07814:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
07816:  CLRF   3F
....................          } 
....................        
....................          if(Tsecadop[0]<0) 
07818:  BTFSC  xBC.7
0781A:  BRA    781E
0781C:  BRA    7822
....................             Tsecadop[0]=9;             
0781E:  MOVLW  09
07820:  MOVWF  xBC
....................          if(Tsecadop[1]<0) 
07822:  BTFSC  xBD.7
07824:  BRA    7828
07826:  BRA    782C
....................             Tsecadop[1]=5;             
07828:  MOVLW  05
0782A:  MOVWF  xBD
....................          if(Tsecadop[2]<0) 
0782C:  BTFSC  xBE.7
0782E:  BRA    7832
07830:  BRA    7836
....................             Tsecadop[2]=9;             
07832:  MOVLW  09
07834:  MOVWF  xBE
....................          if(Tsecadop[3]<0) 
07836:  BTFSC  xBF.7
07838:  BRA    783C
0783A:  BRA    7840
....................             Tsecadop[3]=9;             
0783C:  MOVLW  09
0783E:  MOVWF  xBF
....................           
....................          if(Tsecadop[0]>9) 
07840:  BTFSC  xBC.7
07842:  BRA    784C
07844:  MOVF   xBC,W
07846:  SUBLW  09
07848:  BC    784C
....................             Tsecadop[0]=0;             
0784A:  CLRF   xBC
....................          if(Tsecadop[1]>5) 
0784C:  BTFSC  xBD.7
0784E:  BRA    7858
07850:  MOVF   xBD,W
07852:  SUBLW  05
07854:  BC    7858
....................             Tsecadop[1]=0;             
07856:  CLRF   xBD
....................          if(Tsecadop[2]>9) 
07858:  BTFSC  xBE.7
0785A:  BRA    7864
0785C:  MOVF   xBE,W
0785E:  SUBLW  09
07860:  BC    7864
....................             Tsecadop[2]=0;             
07862:  CLRF   xBE
....................          if(Tsecadop[3]>9) 
07864:  BTFSC  xBF.7
07866:  BRA    7870
07868:  MOVF   xBF,W
0786A:  SUBLW  09
0786C:  BC    7870
....................             Tsecadop[3]=0; 
0786E:  CLRF   xBF
....................              
....................       printf("tminsec.txt=\"%02u\"",((Tsecadop[3]*10)+Tsecadop[2])); 
07870:  MOVFF  BF,3C8
07874:  MOVLW  0A
07876:  MOVLB  3
07878:  MOVWF  xC9
0787A:  MOVLB  0
0787C:  CALL   2A1E
07880:  MOVF   xBE,W
07882:  ADDWF  01,W
07884:  MOVLB  3
07886:  MOVWF  xC6
07888:  MOVLW  44
0788A:  MOVWF  FF6
0788C:  MOVLW  0A
0788E:  MOVWF  FF7
07890:  MOVLW  00
07892:  MOVWF  FF8
07894:  MOVLW  0D
07896:  MOVWF  xCA
07898:  MOVLB  0
0789A:  CALL   4368
0789E:  MOVFF  3C6,3C8
078A2:  MOVLW  01
078A4:  MOVLB  3
078A6:  MOVWF  xC9
078A8:  MOVLB  0
078AA:  CALL   43C6
078AE:  MOVLW  22
078B0:  BTFSS  F9E.4
078B2:  BRA    78B0
078B4:  MOVWF  FAD
....................       SendDataDisplay(); 
078B6:  CALL   34BC
....................       printf("tsecsec.txt=\"%02u\"",((Tsecadop[1]*10)+Tsecadop[0])); 
078BA:  MOVFF  BD,3C8
078BE:  MOVLW  0A
078C0:  MOVLB  3
078C2:  MOVWF  xC9
078C4:  MOVLB  0
078C6:  CALL   2A1E
078CA:  MOVF   xBC,W
078CC:  ADDWF  01,W
078CE:  MOVLB  3
078D0:  MOVWF  xC6
078D2:  MOVLW  58
078D4:  MOVWF  FF6
078D6:  MOVLW  0A
078D8:  MOVWF  FF7
078DA:  MOVLW  00
078DC:  MOVWF  FF8
078DE:  MOVLW  0D
078E0:  MOVWF  xCA
078E2:  MOVLB  0
078E4:  CALL   4368
078E8:  MOVFF  3C6,3C8
078EC:  MOVLW  01
078EE:  MOVLB  3
078F0:  MOVWF  xC9
078F2:  MOVLB  0
078F4:  CALL   43C6
078F8:  MOVLW  22
078FA:  BTFSS  F9E.4
078FC:  BRA    78FA
078FE:  MOVWF  FAD
....................       SendDataDisplay(); 
07900:  CALL   34BC
07904:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................     if(Menu==4){ //Menu de Temperatura 
07906:  MOVF   x34,W
07908:  SUBLW  04
0790A:  BTFSS  FD8.2
0790C:  BRA    7B04
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
0790E:  MOVLW  6C
07910:  MOVWF  FF6
07912:  MOVLW  0A
07914:  MOVWF  FF7
07916:  MOVLW  00
07918:  MOVWF  FF8
0791A:  MOVLW  11
0791C:  MOVWF  xCA
0791E:  MOVLB  0
07920:  CALL   4368
07924:  MOVFF  36E,3C8
07928:  MOVLW  01
0792A:  MOVLB  3
0792C:  MOVWF  xC9
0792E:  MOVLB  0
07930:  CALL   43C6
07934:  MOVLW  2F
07936:  BTFSS  F9E.4
07938:  BRA    7936
0793A:  MOVWF  FAD
0793C:  MOVFF  36D,3C8
07940:  MOVLW  01
07942:  MOVLB  3
07944:  MOVWF  xC9
07946:  MOVLB  0
07948:  CALL   43C6
0794C:  MOVLW  2F
0794E:  BTFSS  F9E.4
07950:  BRA    794E
07952:  MOVWF  FAD
07954:  MOVLW  32
07956:  BTFSS  F9E.4
07958:  BRA    7956
0795A:  MOVWF  FAD
0795C:  MOVLW  30
0795E:  BTFSS  F9E.4
07960:  BRA    795E
07962:  MOVWF  FAD
07964:  MOVFF  36C,3C8
07968:  MOVLW  01
0796A:  MOVLB  3
0796C:  MOVWF  xC9
0796E:  MOVLB  0
07970:  CALL   43C6
07974:  MOVLW  8D
07976:  MOVWF  FF6
07978:  MOVLW  0A
0797A:  MOVWF  FF7
0797C:  MOVLW  00
0797E:  MOVWF  FF8
07980:  MOVLW  0A
07982:  MOVLB  3
07984:  MOVWF  xCA
07986:  MOVLB  0
07988:  CALL   4368
0798C:  MOVFF  36F,3C8
07990:  MOVLW  01
07992:  MOVLB  3
07994:  MOVWF  xC9
07996:  MOVLB  0
07998:  CALL   43C6
0799C:  MOVLW  3A
0799E:  BTFSS  F9E.4
079A0:  BRA    799E
079A2:  MOVWF  FAD
079A4:  MOVFF  370,3C8
079A8:  MOVLW  01
079AA:  MOVLB  3
079AC:  MOVWF  xC9
079AE:  MOVLB  0
079B0:  CALL   43C6
079B4:  MOVLW  22
079B6:  BTFSS  F9E.4
079B8:  BRA    79B6
079BA:  MOVWF  FAD
....................       SendDataDisplay(); 
079BC:  CALL   34BC
....................          if(Setpoint<105) 
079C0:  MOVLB  3
079C2:  MOVF   x3B,W
079C4:  SUBLW  68
079C6:  BNC   79CC
....................             Setpoint=134; 
079C8:  MOVLW  86
079CA:  MOVWF  x3B
....................          if(Setpoint>134) 
079CC:  MOVF   x3B,W
079CE:  SUBLW  86
079D0:  BC    79D6
....................             Setpoint=105; 
079D2:  MOVLW  69
079D4:  MOVWF  x3B
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
079D6:  MOVF   34,W
079D8:  SUBLW  11
079DA:  BZ    79E2
079DC:  BSF    F93.3
079DE:  BTFSC  F81.3
079E0:  BRA    7A74
....................             Segundos=OFF; 
079E2:  MOVLB  0
079E4:  BCF    xA2.3
....................             Minutos=OFF; 
079E6:  BCF    xA2.2
....................             printf("page CicloPersona"); 
079E8:  MOVLW  A2
079EA:  MOVWF  FF6
079EC:  MOVLW  0A
079EE:  MOVWF  FF7
079F0:  MOVLW  00
079F2:  MOVWF  FF8
079F4:  CALL   348A
....................             SendDataDisplay();   
079F8:  CALL   34BC
....................             PantallaPrincipal=1; 
079FC:  MOVLW  01
079FE:  MOVLB  2
07A00:  MOVWF  xCE
....................             Op=OFF; 
07A02:  MOVLB  0
07A04:  BCF    xA2.0
....................             Op2=OFF; 
07A06:  BCF    xA2.1
....................             if(!GuardaEEPROM){ 
07A08:  BTFSC  xA2.4
07A0A:  BRA    7A72
....................                CiclosPersonalizados[CicloLibre-1].Temperatura=Setpoint; 
07A0C:  MOVLW  01
07A0E:  MOVLB  3
07A10:  SUBWF  x28,W
07A12:  MULLW  0A
07A14:  MOVF   FF3,W
07A16:  CLRF   xC7
07A18:  MOVWF  xC6
07A1A:  MOVLW  9E
07A1C:  ADDWF  xC6,W
07A1E:  MOVWF  FE9
07A20:  MOVLW  03
07A22:  ADDWFC xC7,W
07A24:  MOVWF  FEA
07A26:  MOVFF  33B,FEF
....................                write_eeprom(100+((CicloLibre-1)*8),Setpoint); 
07A2A:  MOVLW  01
07A2C:  SUBWF  x28,W
07A2E:  MULLW  08
07A30:  MOVF   FF3,W
07A32:  ADDLW  64
07A34:  MOVWF  xC6
07A36:  CLRF   FAA
07A38:  MOVFF  3C6,FA9
07A3C:  MOVFF  33B,FA8
07A40:  BCF    FA6.6
07A42:  BCF    FA6.7
07A44:  BSF    FA6.2
07A46:  MOVF   FF2,W
07A48:  MOVWF  00
07A4A:  BCF    FF2.6
07A4C:  BCF    FF2.7
07A4E:  MOVLB  F
07A50:  MOVLW  55
07A52:  MOVWF  FA7
07A54:  MOVLW  AA
07A56:  MOVWF  FA7
07A58:  BSF    FA6.1
07A5A:  BTFSC  FA6.1
07A5C:  BRA    7A5A
07A5E:  BCF    FA6.2
07A60:  MOVF   00,W
07A62:  IORWF  FF2,F
....................                delay_ms(10); 
07A64:  MOVLW  0A
07A66:  MOVLB  3
07A68:  MOVWF  xDB
07A6A:  MOVLB  0
07A6C:  CALL   179E
....................                GuardaEEPROM=ON; 
07A70:  BSF    xA2.4
07A72:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(UP){ 
07A74:  BSF    F93.0
07A76:  BTFSC  F81.0
07A78:  BRA    7A8E
....................             delay_ms(100); 
07A7A:  MOVLW  64
07A7C:  MOVWF  xDB
07A7E:  MOVLB  0
07A80:  CALL   179E
....................             if(UP){ 
07A84:  BSF    F93.0
07A86:  BTFSC  F81.0
07A88:  BRA    7A90
....................                Setpoint++; 
07A8A:  MOVLB  3
07A8C:  INCF   x3B,F
07A8E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
07A90:  BSF    F93.1
07A92:  BTFSC  F81.1
07A94:  BRA    7AAE
....................             delay_ms(100); 
07A96:  MOVLW  64
07A98:  MOVLB  3
07A9A:  MOVWF  xDB
07A9C:  MOVLB  0
07A9E:  CALL   179E
....................             if(DOWN){ 
07AA2:  BSF    F93.1
07AA4:  BTFSC  F81.1
07AA6:  BRA    7AAE
....................                Setpoint--; 
07AA8:  MOVLB  3
07AAA:  DECF   x3B,F
07AAC:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
07AAE:  MOVF   34,W
07AB0:  SUBLW  0D
07AB2:  BNZ   7ABE
....................             Setpoint++; 
07AB4:  MOVLB  3
07AB6:  INCF   x3B,F
....................             RX_Buffer[4]=0x00;   
07AB8:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
07ABA:  CLRF   3F
07ABC:  MOVLB  0
....................             //BorraBuffer(); 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
07ABE:  MOVF   34,W
07AC0:  SUBLW  0C
07AC2:  BNZ   7ACE
....................             Setpoint--; 
07AC4:  MOVLB  3
07AC6:  DECF   x3B,F
....................             RX_Buffer[4]=0x00; 
07AC8:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
07ACA:  CLRF   3F
07ACC:  MOVLB  0
....................             //BorraBuffer(); 
....................          } 
....................           
....................       printf("tsettem.txt=\"%03u\"",Setpoint); 
07ACE:  MOVLW  B4
07AD0:  MOVWF  FF6
07AD2:  MOVLW  0A
07AD4:  MOVWF  FF7
07AD6:  MOVLW  00
07AD8:  MOVWF  FF8
07ADA:  MOVLW  0D
07ADC:  MOVLB  3
07ADE:  MOVWF  xCA
07AE0:  MOVLB  0
07AE2:  CALL   4368
07AE6:  MOVFF  33B,3C8
07AEA:  MOVLW  03
07AEC:  MOVLB  3
07AEE:  MOVWF  xC9
07AF0:  MOVLB  0
07AF2:  CALL   43C6
07AF6:  MOVLW  22
07AF8:  BTFSS  F9E.4
07AFA:  BRA    7AF8
07AFC:  MOVWF  FAD
....................       SendDataDisplay(); 
07AFE:  CALL   34BC
07B02:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................    if(Menu==5){//Menu de Nivel 
07B04:  MOVF   x34,W
07B06:  SUBLW  05
07B08:  BTFSS  FD8.2
07B0A:  BRA    7D7E
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
07B0C:  MOVLW  C8
07B0E:  MOVWF  FF6
07B10:  MOVLW  0A
07B12:  MOVWF  FF7
07B14:  MOVLW  00
07B16:  MOVWF  FF8
07B18:  MOVLW  11
07B1A:  MOVWF  xCA
07B1C:  MOVLB  0
07B1E:  CALL   4368
07B22:  MOVFF  36E,3C8
07B26:  MOVLW  01
07B28:  MOVLB  3
07B2A:  MOVWF  xC9
07B2C:  MOVLB  0
07B2E:  CALL   43C6
07B32:  MOVLW  2F
07B34:  BTFSS  F9E.4
07B36:  BRA    7B34
07B38:  MOVWF  FAD
07B3A:  MOVFF  36D,3C8
07B3E:  MOVLW  01
07B40:  MOVLB  3
07B42:  MOVWF  xC9
07B44:  MOVLB  0
07B46:  CALL   43C6
07B4A:  MOVLW  2F
07B4C:  BTFSS  F9E.4
07B4E:  BRA    7B4C
07B50:  MOVWF  FAD
07B52:  MOVLW  32
07B54:  BTFSS  F9E.4
07B56:  BRA    7B54
07B58:  MOVWF  FAD
07B5A:  MOVLW  30
07B5C:  BTFSS  F9E.4
07B5E:  BRA    7B5C
07B60:  MOVWF  FAD
07B62:  MOVFF  36C,3C8
07B66:  MOVLW  01
07B68:  MOVLB  3
07B6A:  MOVWF  xC9
07B6C:  MOVLB  0
07B6E:  CALL   43C6
07B72:  MOVLW  E9
07B74:  MOVWF  FF6
07B76:  MOVLW  0A
07B78:  MOVWF  FF7
07B7A:  MOVLW  00
07B7C:  MOVWF  FF8
07B7E:  MOVLW  0A
07B80:  MOVLB  3
07B82:  MOVWF  xCA
07B84:  MOVLB  0
07B86:  CALL   4368
07B8A:  MOVFF  36F,3C8
07B8E:  MOVLW  01
07B90:  MOVLB  3
07B92:  MOVWF  xC9
07B94:  MOVLB  0
07B96:  CALL   43C6
07B9A:  MOVLW  3A
07B9C:  BTFSS  F9E.4
07B9E:  BRA    7B9C
07BA0:  MOVWF  FAD
07BA2:  MOVFF  370,3C8
07BA6:  MOVLW  01
07BA8:  MOVLB  3
07BAA:  MOVWF  xC9
07BAC:  MOVLB  0
07BAE:  CALL   43C6
07BB2:  MOVLW  22
07BB4:  BTFSS  F9E.4
07BB6:  BRA    7BB4
07BB8:  MOVWF  FAD
....................       SendDataDisplay(); 
07BBA:  CALL   34BC
....................          if(Nivel<1) 
07BBE:  MOVLB  3
07BC0:  MOVF   x49,F
07BC2:  BNZ   7BCE
07BC4:  MOVF   x4A,F
07BC6:  BNZ   7BCE
....................             Nivel=6; 
07BC8:  CLRF   x4A
07BCA:  MOVLW  06
07BCC:  MOVWF  x49
....................          if(Nivel>6) 
07BCE:  MOVF   x4A,F
07BD0:  BNZ   7BD8
07BD2:  MOVF   x49,W
07BD4:  SUBLW  06
07BD6:  BC    7BDE
....................             Nivel=1; 
07BD8:  CLRF   x4A
07BDA:  MOVLW  01
07BDC:  MOVWF  x49
....................           
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
07BDE:  MOVF   34,W
07BE0:  SUBLW  11
07BE2:  BZ    7BEA
07BE4:  BSF    F93.3
07BE6:  BTFSC  F81.3
07BE8:  BRA    7CDA
....................             Segundos=OFF; 
07BEA:  MOVLB  0
07BEC:  BCF    xA2.3
....................             Minutos=OFF;             
07BEE:  BCF    xA2.2
....................             tiempo_secado=0; 
07BF0:  MOVLB  3
07BF2:  CLRF   x3F
....................              
....................             if(!GuardaEEPROM){     
07BF4:  MOVLB  0
07BF6:  BTFSC  xA2.4
07BF8:  BRA    7C8C
....................                CiclosPersonalizados[CicloLibre-1].NivelDesfogue=Nivel; 
07BFA:  MOVLW  01
07BFC:  MOVLB  3
07BFE:  SUBWF  x28,W
07C00:  MULLW  0A
07C02:  MOVF   FF3,W
07C04:  CLRF   xC7
07C06:  MOVWF  xC6
07C08:  MOVLW  08
07C0A:  ADDWF  xC6,W
07C0C:  MOVWF  01
07C0E:  MOVLW  00
07C10:  ADDWFC xC7,W
07C12:  MOVWF  03
07C14:  MOVF   01,W
07C16:  ADDLW  9E
07C18:  MOVWF  FE9
07C1A:  MOVLW  03
07C1C:  ADDWFC 03,W
07C1E:  MOVWF  FEA
07C20:  MOVFF  349,FEF
....................                write_eeprom(107+((CicloLibre-1)*8),Nivel); 
07C24:  MOVLW  01
07C26:  SUBWF  x28,W
07C28:  MULLW  08
07C2A:  MOVF   FF3,W
07C2C:  ADDLW  6B
07C2E:  MOVWF  xC6
07C30:  CLRF   FAA
07C32:  MOVFF  3C6,FA9
07C36:  MOVFF  349,FA8
07C3A:  BCF    FA6.6
07C3C:  BCF    FA6.7
07C3E:  BSF    FA6.2
07C40:  MOVF   FF2,W
07C42:  MOVWF  00
07C44:  BCF    FF2.6
07C46:  BCF    FF2.7
07C48:  MOVLB  F
07C4A:  MOVLW  55
07C4C:  MOVWF  FA7
07C4E:  MOVLW  AA
07C50:  MOVWF  FA7
07C52:  BSF    FA6.1
07C54:  BTFSC  FA6.1
07C56:  BRA    7C54
07C58:  BCF    FA6.2
07C5A:  MOVF   00,W
07C5C:  IORWF  FF2,F
....................                delay_ms(20);             
07C5E:  MOVLW  14
07C60:  MOVLB  3
07C62:  MOVWF  xDB
07C64:  MOVLB  0
07C66:  CALL   179E
....................                NivelSeleccionado=4995*Nivel; 
07C6A:  MOVLW  13
07C6C:  MOVLB  3
07C6E:  MOVWF  xC8
07C70:  MOVLW  83
07C72:  MOVWF  xC7
07C74:  MOVFF  34A,3CA
07C78:  MOVFF  349,3C9
07C7C:  MOVLB  0
07C7E:  CALL   3568
07C82:  MOVFF  02,354
07C86:  MOVFF  01,353
....................                GuardaEEPROM=ON; 
07C8A:  BSF    xA2.4
....................             } 
....................              
....................             if(Nivel<6) 
07C8C:  MOVLB  3
07C8E:  MOVF   x4A,F
07C90:  BNZ   7C9C
07C92:  MOVF   x49,W
07C94:  SUBLW  05
07C96:  BNC   7C9C
....................                desfoguelento=1; 
07C98:  BSF    x29.0
....................             else             
07C9A:  BRA    7C9E
....................                desfoguelento=0; 
07C9C:  BCF    x29.0
....................  
....................             if(MenuAnt==1){ 
07C9E:  DECFSZ x35,W
07CA0:  BRA    7CBC
....................                //Buzzer_on; 
....................                printf("page CicloPersona"); 
07CA2:  MOVLW  FE
07CA4:  MOVWF  FF6
07CA6:  MOVLW  0A
07CA8:  MOVWF  FF7
07CAA:  MOVLW  00
07CAC:  MOVWF  FF8
07CAE:  MOVLB  0
07CB0:  CALL   348A
....................                SendDataDisplay();  
07CB4:  CALL   34BC
....................                //PantallaPrincipal=1; 
....................             }else if(MenuAnt==2){ 
07CB8:  BRA    7CD8
07CBA:  MOVLB  3
07CBC:  MOVF   x35,W
07CBE:  SUBLW  02
07CC0:  BNZ   7CDA
....................                printf("page Funcionamiento"); 
07CC2:  MOVLW  10
07CC4:  MOVWF  FF6
07CC6:  MOVLW  0B
07CC8:  MOVWF  FF7
07CCA:  MOVLW  00
07CCC:  MOVWF  FF8
07CCE:  MOVLB  0
07CD0:  CALL   348A
....................                SendDataDisplay();  
07CD4:  CALL   34BC
07CD8:  MOVLB  3
....................                //if(Temperatura>60)TTrampa=TTrampa+5; 
....................             } 
....................          } 
....................           
....................          if(UP){ 
07CDA:  BSF    F93.0
07CDC:  BTFSC  F81.0
07CDE:  BRA    7CF8
....................             delay_ms(100); 
07CE0:  MOVLW  64
07CE2:  MOVWF  xDB
07CE4:  MOVLB  0
07CE6:  CALL   179E
....................             if(UP){ 
07CEA:  BSF    F93.0
07CEC:  BTFSC  F81.0
07CEE:  BRA    7CFA
....................                Nivel++; 
07CF0:  MOVLB  3
07CF2:  INCF   x49,F
07CF4:  BTFSC  FD8.2
07CF6:  INCF   x4A,F
07CF8:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
07CFA:  BSF    F93.1
07CFC:  BTFSC  F81.1
07CFE:  BRA    7D1E
....................             delay_ms(100); 
07D00:  MOVLW  64
07D02:  MOVLB  3
07D04:  MOVWF  xDB
07D06:  MOVLB  0
07D08:  CALL   179E
....................             if(DOWN){ 
07D0C:  BSF    F93.1
07D0E:  BTFSC  F81.1
07D10:  BRA    7D1E
....................                Nivel--; 
07D12:  MOVLB  3
07D14:  MOVF   x49,W
07D16:  BTFSC  FD8.2
07D18:  DECF   x4A,F
07D1A:  DECF   x49,F
07D1C:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Tecla Arriba Oprimida 
07D1E:  MOVF   34,W
07D20:  SUBLW  0D
07D22:  BNZ   7D32
....................             Nivel++; 
07D24:  MOVLB  3
07D26:  INCF   x49,F
07D28:  BTFSC  FD8.2
07D2A:  INCF   x4A,F
....................             RX_Buffer[4]=0x00;             
07D2C:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
07D2E:  CLRF   3F
07D30:  MOVLB  0
....................             //BorraBuffer(); 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Tecla Abajo Oprimida 
07D32:  MOVF   34,W
07D34:  SUBLW  0C
07D36:  BNZ   7D48
....................             Nivel--; 
07D38:  MOVLB  3
07D3A:  MOVF   x49,W
07D3C:  BTFSC  FD8.2
07D3E:  DECF   x4A,F
07D40:  DECF   x49,F
....................             RX_Buffer[4]=0x00; 
07D42:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
07D44:  CLRF   3F
07D46:  MOVLB  0
....................             //BorraBuffer(); 
....................          } 
....................           
....................       printf("tnivel.txt=\"%Lu\"",Nivel); 
07D48:  MOVLW  24
07D4A:  MOVWF  FF6
07D4C:  MOVLW  0B
07D4E:  MOVWF  FF7
07D50:  MOVLW  00
07D52:  MOVWF  FF8
07D54:  MOVLW  0C
07D56:  MOVLB  3
07D58:  MOVWF  xCA
07D5A:  MOVLB  0
07D5C:  CALL   4368
07D60:  MOVLW  10
07D62:  MOVWF  FE9
07D64:  MOVFF  34A,3CB
07D68:  MOVFF  349,3CA
07D6C:  CALL   44B8
07D70:  MOVLW  22
07D72:  BTFSS  F9E.4
07D74:  BRA    7D72
07D76:  MOVWF  FAD
....................       SendDataDisplay(); 
07D78:  CALL   34BC
07D7C:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==6){ // Menu de Prueba de Componentes 
07D7E:  MOVF   x34,W
07D80:  SUBLW  06
07D82:  BTFSS  FD8.2
07D84:  BRA    84CC
....................          PruebaEstados=ON; 
07D86:  MOVLB  0
07D88:  BSF    xA1.2
....................           
....................          if(RX_Buffer[4]==0x02)//Oprimio EV Desfogue 
07D8A:  MOVF   34,W
07D8C:  SUBLW  02
07D8E:  BNZ   7D96
....................          { 
....................             EstadoDesfogue=!EstadoDesfogue; 
07D90:  BTG    xA0.7
....................             RX_Buffer[4]=0x00; 
07D92:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
07D94:  CLRF   3F
....................          } 
....................           
....................          if(EstadoDesfogue){ 
07D96:  BTFSS  xA0.7
07D98:  BRA    7DB4
....................             printf("b1.bco=2016"); 
07D9A:  MOVLW  36
07D9C:  MOVWF  FF6
07D9E:  MOVLW  0B
07DA0:  MOVWF  FF7
07DA2:  MOVLW  00
07DA4:  MOVWF  FF8
07DA6:  CALL   348A
....................             SendDataDisplay();  
07DAA:  CALL   34BC
....................             Desfogue_on; 
07DAE:  BSF    F8C.4
07DB0:  BCF    F95.4
....................          } 
....................          else{ 
07DB2:  BRA    7DCC
....................             printf("b1.bco=63488"); 
07DB4:  MOVLW  42
07DB6:  MOVWF  FF6
07DB8:  MOVLW  0B
07DBA:  MOVWF  FF7
07DBC:  MOVLW  00
07DBE:  MOVWF  FF8
07DC0:  CALL   348A
....................             SendDataDisplay();  
07DC4:  CALL   34BC
....................             Desfogue_off; 
07DC8:  BCF    F8C.4
07DCA:  BCF    F95.4
....................          } 
....................           
....................          if(RX_Buffer[4]==0x01)//Oprimio EV Agua 
07DCC:  DECFSZ 34,W
07DCE:  BRA    7DD6
....................          { 
....................             EstadoAgua=!EstadoAgua; 
07DD0:  BTG    xA1.0
....................             RX_Buffer[4]=0x00; 
07DD2:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
07DD4:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAgua){ 
07DD6:  BTFSS  xA1.0
07DD8:  BRA    7DF4
....................             printf("b0.bco=2016"); 
07DDA:  MOVLW  50
07DDC:  MOVWF  FF6
07DDE:  MOVLW  0B
07DE0:  MOVWF  FF7
07DE2:  MOVLW  00
07DE4:  MOVWF  FF8
07DE6:  CALL   348A
....................             SendDataDisplay();  
07DEA:  CALL   34BC
....................             Agua_on; 
07DEE:  BSF    F8C.5
07DF0:  BCF    F95.5
....................          } 
....................          else{ 
07DF2:  BRA    7E0C
....................             printf("b0.bco=63488"); 
07DF4:  MOVLW  5C
07DF6:  MOVWF  FF6
07DF8:  MOVLW  0B
07DFA:  MOVWF  FF7
07DFC:  MOVLW  00
07DFE:  MOVWF  FF8
07E00:  CALL   348A
....................             SendDataDisplay();  
07E04:  CALL   34BC
....................             Agua_off; 
07E08:  BCF    F8C.5
07E0A:  BCF    F95.5
....................          } 
....................           
....................          if(RX_Buffer[4]==0x03)//Oprimio EV Paso 
07E0C:  MOVF   34,W
07E0E:  SUBLW  03
07E10:  BNZ   7E18
....................          { 
....................             EstadoPaso=!EstadoPaso; 
07E12:  BTG    xA2.5
....................             RX_Buffer[4]=0x00; 
07E14:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
07E16:  CLRF   3F
....................          } 
....................           
....................          if(EstadoPaso){ 
07E18:  BTFSS  xA2.5
07E1A:  BRA    7E36
....................             printf("b2.bco=2016"); 
07E1C:  MOVLW  6A
07E1E:  MOVWF  FF6
07E20:  MOVLW  0B
07E22:  MOVWF  FF7
07E24:  MOVLW  00
07E26:  MOVWF  FF8
07E28:  CALL   348A
....................             SendDataDisplay();  
07E2C:  CALL   34BC
....................             Bomba_on; 
07E30:  BSF    F8C.6
07E32:  BCF    F95.6
....................          } 
....................          else{ 
07E34:  BRA    7E4E
....................             printf("b2.bco=63488"); 
07E36:  MOVLW  76
07E38:  MOVWF  FF6
07E3A:  MOVLW  0B
07E3C:  MOVWF  FF7
07E3E:  MOVLW  00
07E40:  MOVWF  FF8
07E42:  CALL   348A
....................             SendDataDisplay();  
07E46:  CALL   34BC
....................             Bomba_off; 
07E4A:  BCF    F8C.6
07E4C:  BCF    F95.6
....................          } 
....................          
....................           
....................          if(RX_Buffer[4]==0x05)//Oprimio Bloqueo 
07E4E:  MOVF   34,W
07E50:  SUBLW  05
07E52:  BNZ   7E5A
....................          { 
....................             EstadoAire=!EstadoAire; 
07E54:  BTG    xA1.6
....................             RX_Buffer[4]=0x00; 
07E56:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
07E58:  CLRF   3F
....................          } 
....................           
....................          if(EstadoAire){ 
07E5A:  BTFSS  xA1.6
07E5C:  BRA    7E76
....................             printf("b4.bco=2016"); 
07E5E:  MOVLW  84
07E60:  MOVWF  FF6
07E62:  MOVLW  0B
07E64:  MOVWF  FF7
07E66:  MOVLW  00
07E68:  MOVWF  FF8
07E6A:  CALL   348A
....................             SendDataDisplay();  
07E6E:  CALL   34BC
....................             Aire=ON;    
07E72:  BSF    xA3.7
....................          }else{ 
07E74:  BRA    7E8C
....................             printf("b4.bco=63488"); 
07E76:  MOVLW  90
07E78:  MOVWF  FF6
07E7A:  MOVLW  0B
07E7C:  MOVWF  FF7
07E7E:  MOVLW  00
07E80:  MOVWF  FF8
07E82:  CALL   348A
....................             SendDataDisplay();  
07E86:  CALL   34BC
....................             Aire=OFF; 
07E8A:  BCF    xA3.7
....................          } 
....................           
....................           
....................          if(RX_Buffer[4]==0x04)//Oprimio SSR1 
07E8C:  MOVF   34,W
07E8E:  SUBLW  04
07E90:  BNZ   7E98
....................          { 
....................             EstadoSSR=!EstadoSSR; 
07E92:  BTG    xA1.1
....................             RX_Buffer[4]=0x00; 
07E94:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
07E96:  CLRF   3F
....................          } 
....................           
....................          if(EstadoSSR){ 
07E98:  BTFSS  xA1.1
07E9A:  BRA    7EB6
....................             printf("b3.bco=2016"); 
07E9C:  MOVLW  9E
07E9E:  MOVWF  FF6
07EA0:  MOVLW  0B
07EA2:  MOVWF  FF7
07EA4:  MOVLW  00
07EA6:  MOVWF  FF8
07EA8:  CALL   348A
....................             SendDataDisplay();  
07EAC:  CALL   34BC
....................             SSR_on; 
07EB0:  BCF    F8B.2
07EB2:  BCF    F94.2
....................          } 
....................          else{ 
07EB4:  BRA    7ECE
....................             printf("b3.bco=63488"); 
07EB6:  MOVLW  AA
07EB8:  MOVWF  FF6
07EBA:  MOVLW  0B
07EBC:  MOVWF  FF7
07EBE:  MOVLW  00
07EC0:  MOVWF  FF8
07EC2:  CALL   348A
....................             SendDataDisplay();  
07EC6:  CALL   34BC
....................             SSR_off; 
07ECA:  BSF    F8B.2
07ECC:  BCF    F94.2
....................          } 
....................           
....................          if(DOOR){ 
07ECE:  BSF    F93.6
07ED0:  BTFSC  F81.6
07ED2:  BRA    7EEA
....................             printf("b8.bco=2016"); 
07ED4:  MOVLW  B8
07ED6:  MOVWF  FF6
07ED8:  MOVLW  0B
07EDA:  MOVWF  FF7
07EDC:  MOVLW  00
07EDE:  MOVWF  FF8
07EE0:  CALL   348A
....................             SendDataDisplay();  
07EE4:  CALL   34BC
....................          }else{ 
07EE8:  BRA    7EFE
....................             printf("b8.bco=63488"); 
07EEA:  MOVLW  C4
07EEC:  MOVWF  FF6
07EEE:  MOVLW  0B
07EF0:  MOVWF  FF7
07EF2:  MOVLW  00
07EF4:  MOVWF  FF8
07EF6:  CALL   348A
....................             SendDataDisplay();  
07EFA:  CALL   34BC
....................          } 
....................           
....................          if(TERM){ 
07EFE:  BSF    F93.5
07F00:  BTFSC  F81.5
07F02:  BRA    7F1A
....................             printf("b9.bco=2016"); 
07F04:  MOVLW  D2
07F06:  MOVWF  FF6
07F08:  MOVLW  0B
07F0A:  MOVWF  FF7
07F0C:  MOVLW  00
07F0E:  MOVWF  FF8
07F10:  CALL   348A
....................             SendDataDisplay();  
07F14:  CALL   34BC
....................          }else{ 
07F18:  BRA    7F2E
....................             printf("b9.bco=63488"); 
07F1A:  MOVLW  DE
07F1C:  MOVWF  FF6
07F1E:  MOVLW  0B
07F20:  MOVWF  FF7
07F22:  MOVLW  00
07F24:  MOVWF  FF8
07F26:  CALL   348A
....................             SendDataDisplay();  
07F2A:  CALL   34BC
....................          } 
....................           
....................          if(STOP){ 
07F2E:  BSF    F93.7
07F30:  BTFSC  F81.7
07F32:  BRA    7F4A
....................             printf("b10.bco=2016"); 
07F34:  MOVLW  EC
07F36:  MOVWF  FF6
07F38:  MOVLW  0B
07F3A:  MOVWF  FF7
07F3C:  MOVLW  00
07F3E:  MOVWF  FF8
07F40:  CALL   348A
....................             SendDataDisplay();  
07F44:  CALL   34BC
....................          }else{ 
07F48:  BRA    7F5E
....................             printf("b10.bco=63488"); 
07F4A:  MOVLW  FA
07F4C:  MOVWF  FF6
07F4E:  MOVLW  0B
07F50:  MOVWF  FF7
07F52:  MOVLW  00
07F54:  MOVWF  FF8
07F56:  CALL   348A
....................             SendDataDisplay();  
07F5A:  CALL   34BC
....................          } 
....................           
....................          /*if(PRES){ 
....................             printf("b11.bco=2016"); 
....................             SendDataDisplay();  
....................          }else{ 
....................             printf("b11.bco=63488"); 
....................             SendDataDisplay();  
....................          }*/ 
....................           
....................          if(RX_Buffer[4]==0x13)//Oprimio Buzzer 
07F5E:  MOVF   34,W
07F60:  SUBLW  13
07F62:  BNZ   7F6A
....................          { 
....................             EstadoBuzzer=!EstadoBuzzer; 
07F64:  BTG    xA2.6
....................             RX_Buffer[4]=0x00; 
07F66:  CLRF   34
....................             RX_Buffer2[4]=0x00; 
07F68:  CLRF   3F
....................          } 
....................           
....................          if(EstadoBuzzer){ 
07F6A:  BTFSS  xA2.6
07F6C:  BRA    7F88
....................             printf("b12.bco=2016"); 
07F6E:  MOVLW  08
07F70:  MOVWF  FF6
07F72:  MOVLW  0C
07F74:  MOVWF  FF7
07F76:  MOVLW  00
07F78:  MOVWF  FF8
07F7A:  CALL   348A
....................             SendDataDisplay();  
07F7E:  CALL   34BC
....................             Buzzer_on; 
07F82:  BSF    F8C.0
07F84:  BCF    F95.0
....................          } 
....................          else{ 
07F86:  BRA    7FA0
....................             printf("b12.bco=63488"); 
07F88:  MOVLW  16
07F8A:  MOVWF  FF6
07F8C:  MOVLW  0C
07F8E:  MOVWF  FF7
07F90:  MOVLW  00
07F92:  MOVWF  FF8
07F94:  CALL   348A
....................             SendDataDisplay();  
07F98:  CALL   34BC
....................             Buzzer_off; 
07F9C:  BCF    F8C.0
07F9E:  BCF    F95.0
....................          } 
....................           
....................          if(HIG){ 
07FA0:  BSF    F94.0
07FA2:  BTFSS  F82.0
07FA4:  BRA    7FBC
....................             printf("b16.bco=2016"); 
07FA6:  MOVLW  24
07FA8:  MOVWF  FF6
07FAA:  MOVLW  0C
07FAC:  MOVWF  FF7
07FAE:  MOVLW  00
07FB0:  MOVWF  FF8
07FB2:  CALL   348A
....................             SendDataDisplay();  
07FB6:  CALL   34BC
....................          }else{ 
07FBA:  BRA    7FD0
....................             printf("b16.bco=63488"); 
07FBC:  MOVLW  32
07FBE:  MOVWF  FF6
07FC0:  MOVLW  0C
07FC2:  MOVWF  FF7
07FC4:  MOVLW  00
07FC6:  MOVWF  FF8
07FC8:  CALL   348A
....................             SendDataDisplay();  
07FCC:  CALL   34BC
....................          } 
....................           
....................          if(LOW){ 
07FD0:  BSF    F94.1
07FD2:  BTFSS  F82.1
07FD4:  BRA    7FEC
....................             printf("b17.bco=2016"); 
07FD6:  MOVLW  40
07FD8:  MOVWF  FF6
07FDA:  MOVLW  0C
07FDC:  MOVWF  FF7
07FDE:  MOVLW  00
07FE0:  MOVWF  FF8
07FE2:  CALL   348A
....................             SendDataDisplay();  
07FE6:  CALL   34BC
....................          }else{ 
07FEA:  BRA    8000
....................             printf("b17.bco=63488"); 
07FEC:  MOVLW  4E
07FEE:  MOVWF  FF6
07FF0:  MOVLW  0C
07FF2:  MOVWF  FF7
07FF4:  MOVLW  00
07FF6:  MOVWF  FF8
07FF8:  CALL   348A
....................             SendDataDisplay();  
07FFC:  CALL   34BC
....................          } 
....................           
....................          printf("b13.txt=\"ADC0:%3.0f\"",sensores(0));          
08000:  MOVLB  3
08002:  CLRF   xC7
08004:  MOVLB  0
08006:  CALL   3510
0800A:  MOVFF  00,3C6
0800E:  MOVFF  01,3C7
08012:  MOVFF  02,3C8
08016:  MOVFF  03,3C9
0801A:  MOVLW  5C
0801C:  MOVWF  FF6
0801E:  MOVLW  0C
08020:  MOVWF  FF7
08022:  MOVLW  00
08024:  MOVWF  FF8
08026:  MOVLW  0E
08028:  MOVLB  3
0802A:  MOVWF  xCA
0802C:  MOVLB  0
0802E:  CALL   4368
08032:  MOVLW  02
08034:  MOVWF  FE9
08036:  MOVFF  3C9,3CD
0803A:  MOVFF  3C8,3CC
0803E:  MOVFF  3C7,3CB
08042:  MOVFF  3C6,3CA
08046:  MOVLB  3
08048:  CLRF   xCE
0804A:  MOVLB  0
0804C:  CALL   4626
08050:  MOVLW  22
08052:  BTFSS  F9E.4
08054:  BRA    8052
08056:  MOVWF  FAD
....................          SendDataDisplay(); 
08058:  CALL   34BC
....................          printf("b14.txt=\"ADC1:%3.0f\"",sensores(1));          
0805C:  MOVLW  01
0805E:  MOVLB  3
08060:  MOVWF  xC7
08062:  MOVLB  0
08064:  CALL   3510
08068:  MOVFF  00,3C6
0806C:  MOVFF  01,3C7
08070:  MOVFF  02,3C8
08074:  MOVFF  03,3C9
08078:  MOVLW  72
0807A:  MOVWF  FF6
0807C:  MOVLW  0C
0807E:  MOVWF  FF7
08080:  MOVLW  00
08082:  MOVWF  FF8
08084:  MOVLW  0E
08086:  MOVLB  3
08088:  MOVWF  xCA
0808A:  MOVLB  0
0808C:  CALL   4368
08090:  MOVLW  02
08092:  MOVWF  FE9
08094:  MOVFF  3C9,3CD
08098:  MOVFF  3C8,3CC
0809C:  MOVFF  3C7,3CB
080A0:  MOVFF  3C6,3CA
080A4:  MOVLB  3
080A6:  CLRF   xCE
080A8:  MOVLB  0
080AA:  CALL   4626
080AE:  MOVLW  22
080B0:  BTFSS  F9E.4
080B2:  BRA    80B0
080B4:  MOVWF  FAD
....................          SendDataDisplay(); 
080B6:  CALL   34BC
....................          printf("b15.txt=\"A2:%3.0f %03Lu\"",sensores(2),PresionCamara); 
080BA:  MOVLW  02
080BC:  MOVLB  3
080BE:  MOVWF  xC7
080C0:  MOVLB  0
080C2:  CALL   3510
080C6:  MOVFF  00,3C6
080CA:  MOVFF  01,3C7
080CE:  MOVFF  02,3C8
080D2:  MOVFF  03,3C9
080D6:  MOVLW  88
080D8:  MOVWF  FF6
080DA:  MOVLW  0C
080DC:  MOVWF  FF7
080DE:  MOVLW  00
080E0:  MOVWF  FF8
080E2:  MOVLW  0C
080E4:  MOVLB  3
080E6:  MOVWF  xCA
080E8:  MOVLB  0
080EA:  CALL   4368
080EE:  MOVLW  02
080F0:  MOVWF  FE9
080F2:  MOVFF  3C9,3CD
080F6:  MOVFF  3C8,3CC
080FA:  MOVFF  3C7,3CB
080FE:  MOVFF  3C6,3CA
08102:  MOVLB  3
08104:  CLRF   xCE
08106:  MOVLB  0
08108:  CALL   4626
0810C:  MOVLW  20
0810E:  BTFSS  F9E.4
08110:  BRA    810E
08112:  MOVWF  FAD
08114:  MOVLW  0A
08116:  MOVWF  FE9
08118:  MOVFF  34E,3CB
0811C:  MOVFF  34D,3CA
08120:  CALL   44B8
08124:  MOVLW  22
08126:  BTFSS  F9E.4
08128:  BRA    8126
0812A:  MOVWF  FAD
....................          SendDataDisplay(); 
0812C:  CALL   34BC
....................          printf("b18.txt=\"A3:%3.0f %03Lu\"",sensores(3),PresionPreCamara); 
08130:  MOVLW  03
08132:  MOVLB  3
08134:  MOVWF  xC7
08136:  MOVLB  0
08138:  CALL   3510
0813C:  MOVFF  00,3C6
08140:  MOVFF  01,3C7
08144:  MOVFF  02,3C8
08148:  MOVFF  03,3C9
0814C:  MOVLW  A2
0814E:  MOVWF  FF6
08150:  MOVLW  0C
08152:  MOVWF  FF7
08154:  MOVLW  00
08156:  MOVWF  FF8
08158:  MOVLW  0C
0815A:  MOVLB  3
0815C:  MOVWF  xCA
0815E:  MOVLB  0
08160:  CALL   4368
08164:  MOVLW  02
08166:  MOVWF  FE9
08168:  MOVFF  3C9,3CD
0816C:  MOVFF  3C8,3CC
08170:  MOVFF  3C7,3CB
08174:  MOVFF  3C6,3CA
08178:  MOVLB  3
0817A:  CLRF   xCE
0817C:  MOVLB  0
0817E:  CALL   4626
08182:  MOVLW  20
08184:  BTFSS  F9E.4
08186:  BRA    8184
08188:  MOVWF  FAD
0818A:  MOVLW  0A
0818C:  MOVWF  FE9
0818E:  MOVFF  350,3CB
08192:  MOVFF  34F,3CA
08196:  CALL   44B8
0819A:  MOVLW  22
0819C:  BTFSS  F9E.4
0819E:  BRA    819C
081A0:  MOVWF  FAD
....................          SendDataDisplay(); 
081A2:  CALL   34BC
....................          printf("b20.txt=\"T1:%3.1f\"",Temperatura); 
081A6:  MOVLW  BC
081A8:  MOVWF  FF6
081AA:  MOVLW  0C
081AC:  MOVWF  FF7
081AE:  MOVLW  00
081B0:  MOVWF  FF8
081B2:  MOVLW  0C
081B4:  MOVLB  3
081B6:  MOVWF  xCA
081B8:  MOVLB  0
081BA:  CALL   4368
081BE:  MOVLW  02
081C0:  MOVWF  FE9
081C2:  MOVFF  315,3CD
081C6:  MOVFF  314,3CC
081CA:  MOVFF  313,3CB
081CE:  MOVFF  312,3CA
081D2:  MOVLW  01
081D4:  MOVLB  3
081D6:  MOVWF  xCE
081D8:  MOVLB  0
081DA:  CALL   4626
081DE:  MOVLW  22
081E0:  BTFSS  F9E.4
081E2:  BRA    81E0
081E4:  MOVWF  FAD
....................          SendDataDisplay(); 
081E6:  CALL   34BC
....................           
....................          if(RX_Buffer[4]==0x21 || LEFT){//Oprimio salir 
081EA:  MOVF   34,W
081EC:  SUBLW  21
081EE:  BZ    81F6
081F0:  BSF    F93.3
081F2:  BTFSC  F81.3
081F4:  BRA    823E
....................             delay_ms(100); 
081F6:  MOVLW  64
081F8:  MOVLB  3
081FA:  MOVWF  xDB
081FC:  MOVLB  0
081FE:  CALL   179E
....................             if(RX_Buffer[4]==0x21 || LEFT){ 
08202:  MOVF   34,W
08204:  SUBLW  21
08206:  BZ    820E
08208:  BSF    F93.3
0820A:  BTFSC  F81.3
0820C:  BRA    823E
....................                printf("page MenuPrincipal"); 
0820E:  MOVLW  D0
08210:  MOVWF  FF6
08212:  MOVLW  0C
08214:  MOVWF  FF7
08216:  MOVLW  00
08218:  MOVWF  FF8
0821A:  CALL   348A
....................                SendDataDisplay(); 
0821E:  CALL   34BC
....................                PantallaPrincipal=0; 
08222:  MOVLB  2
08224:  CLRF   xCE
....................                PruebaEstados=OFF;Desfogue_off;Agua_off;Bomba_off;SSR_off; 
08226:  MOVLB  0
08228:  BCF    xA1.2
0822A:  BCF    F8C.4
0822C:  BCF    F95.4
0822E:  BCF    F8C.5
08230:  BCF    F95.5
08232:  BCF    F8C.6
08234:  BCF    F95.6
08236:  BSF    F8B.2
08238:  BCF    F94.2
....................                ApagaSalidas(); 
0823A:  CALL   34F2
....................                // Falta apagar Todo 
....................             } 
....................          } 
....................           
....................          if(UP){ 
0823E:  BSF    F93.0
08240:  BTFSC  F81.0
08242:  BRA    8386
....................             delay_ms(100); 
08244:  MOVLW  64
08246:  MOVLB  3
08248:  MOVWF  xDB
0824A:  MOVLB  0
0824C:  CALL   179E
....................             if(UP){ 
08250:  BSF    F93.0
08252:  BTFSC  F81.0
08254:  BRA    8386
....................                G1=41-sensores(2); 
08256:  MOVLW  02
08258:  MOVLB  3
0825A:  MOVWF  xC7
0825C:  MOVLB  0
0825E:  CALL   3510
08262:  MOVFF  FEA,3C7
08266:  MOVFF  FE9,3C6
0826A:  BSF    FD8.1
0826C:  MOVLB  3
0826E:  CLRF   xDE
08270:  CLRF   xDD
08272:  MOVLW  24
08274:  MOVWF  xDC
08276:  MOVLW  84
08278:  MOVWF  xDB
0827A:  MOVFF  03,3E2
0827E:  MOVFF  02,3E1
08282:  MOVFF  01,3E0
08286:  MOVFF  00,3DF
0828A:  MOVLB  0
0828C:  CALL   195A
08290:  MOVFF  3C7,FEA
08294:  MOVFF  3C6,FE9
08298:  MOVFF  03,3DE
0829C:  MOVFF  02,3DD
082A0:  MOVFF  01,3DC
082A4:  MOVFF  00,3DB
082A8:  CALL   3BB4
082AC:  MOVFF  01,37C
....................                if(G1<0) 
082B0:  MOVLB  3
082B2:  BTFSC  x7C.7
082B4:  BRA    82B8
082B6:  BRA    82BE
....................                   sg1=10; 
082B8:  MOVLW  0A
082BA:  MOVWF  x7E
....................                else 
082BC:  BRA    82C2
....................                   sg1=5; 
082BE:  MOVLW  05
082C0:  MOVWF  x7E
....................                    
....................                write_eeprom(42,(int8)G1); 
082C2:  CLRF   FAA
082C4:  MOVLW  2A
082C6:  MOVWF  FA9
082C8:  MOVFF  37C,FA8
082CC:  BCF    FA6.6
082CE:  BCF    FA6.7
082D0:  BSF    FA6.2
082D2:  MOVF   FF2,W
082D4:  MOVWF  00
082D6:  BCF    FF2.6
082D8:  BCF    FF2.7
082DA:  MOVLB  F
082DC:  MOVLW  55
082DE:  MOVWF  FA7
082E0:  MOVLW  AA
082E2:  MOVWF  FA7
082E4:  BSF    FA6.1
082E6:  BTFSC  FA6.1
082E8:  BRA    82E6
082EA:  BCF    FA6.2
082EC:  MOVF   00,W
082EE:  IORWF  FF2,F
....................                delay_ms(10); 
082F0:  MOVLW  0A
082F2:  MOVLB  3
082F4:  MOVWF  xDB
082F6:  MOVLB  0
082F8:  CALL   179E
....................                write_eeprom(44,(int8)sg1); 
082FC:  CLRF   FAA
082FE:  MOVLW  2C
08300:  MOVWF  FA9
08302:  MOVFF  37E,FA8
08306:  BCF    FA6.6
08308:  BCF    FA6.7
0830A:  BSF    FA6.2
0830C:  MOVF   FF2,W
0830E:  MOVWF  00
08310:  BCF    FF2.6
08312:  BCF    FF2.7
08314:  MOVLB  F
08316:  MOVLW  55
08318:  MOVWF  FA7
0831A:  MOVLW  AA
0831C:  MOVWF  FA7
0831E:  BSF    FA6.1
08320:  BTFSC  FA6.1
08322:  BRA    8320
08324:  BCF    FA6.2
08326:  MOVF   00,W
08328:  IORWF  FF2,F
....................                delay_ms(10); 
0832A:  MOVLW  0A
0832C:  MOVLB  3
0832E:  MOVWF  xDB
08330:  MOVLB  0
08332:  CALL   179E
....................                Buzzer_on; 
08336:  BSF    F8C.0
08338:  BCF    F95.0
....................                delay_ms(1000); 
0833A:  MOVLW  04
0833C:  MOVLB  3
0833E:  MOVWF  xC6
08340:  MOVLW  FA
08342:  MOVWF  xDB
08344:  MOVLB  0
08346:  CALL   179E
0834A:  MOVLB  3
0834C:  DECFSZ xC6,F
0834E:  BRA    8340
....................                Buzzer_off; 
08350:  BCF    F8C.0
08352:  BCF    F95.0
....................                delay_ms(1000); 
08354:  MOVLW  04
08356:  MOVWF  xC6
08358:  MOVLW  FA
0835A:  MOVWF  xDB
0835C:  MOVLB  0
0835E:  CALL   179E
08362:  MOVLB  3
08364:  DECFSZ xC6,F
08366:  BRA    8358
....................                Buzzer_on; 
08368:  BSF    F8C.0
0836A:  BCF    F95.0
....................                delay_ms(1000); 
0836C:  MOVLW  04
0836E:  MOVWF  xC6
08370:  MOVLW  FA
08372:  MOVWF  xDB
08374:  MOVLB  0
08376:  CALL   179E
0837A:  MOVLB  3
0837C:  DECFSZ xC6,F
0837E:  BRA    8370
....................                Buzzer_off; 
08380:  BCF    F8C.0
08382:  BCF    F95.0
08384:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(DOWN){ 
08386:  BSF    F93.1
08388:  BTFSC  F81.1
0838A:  BRA    84CE
....................             delay_ms(100); 
0838C:  MOVLW  64
0838E:  MOVLB  3
08390:  MOVWF  xDB
08392:  MOVLB  0
08394:  CALL   179E
....................             if(DOWN){ 
08398:  BSF    F93.1
0839A:  BTFSC  F81.1
0839C:  BRA    84CE
....................                G2=41-sensores(3); 
0839E:  MOVLW  03
083A0:  MOVLB  3
083A2:  MOVWF  xC7
083A4:  MOVLB  0
083A6:  CALL   3510
083AA:  MOVFF  FEA,3C7
083AE:  MOVFF  FE9,3C6
083B2:  BSF    FD8.1
083B4:  MOVLB  3
083B6:  CLRF   xDE
083B8:  CLRF   xDD
083BA:  MOVLW  24
083BC:  MOVWF  xDC
083BE:  MOVLW  84
083C0:  MOVWF  xDB
083C2:  MOVFF  03,3E2
083C6:  MOVFF  02,3E1
083CA:  MOVFF  01,3E0
083CE:  MOVFF  00,3DF
083D2:  MOVLB  0
083D4:  CALL   195A
083D8:  MOVFF  3C7,FEA
083DC:  MOVFF  3C6,FE9
083E0:  MOVFF  03,3DE
083E4:  MOVFF  02,3DD
083E8:  MOVFF  01,3DC
083EC:  MOVFF  00,3DB
083F0:  CALL   3BB4
083F4:  MOVFF  01,37D
....................                if(G2<0) 
083F8:  MOVLB  3
083FA:  BTFSC  x7D.7
083FC:  BRA    8400
083FE:  BRA    8406
....................                   sg2=10; 
08400:  MOVLW  0A
08402:  MOVWF  x7F
....................                else 
08404:  BRA    840A
....................                   sg2=5; 
08406:  MOVLW  05
08408:  MOVWF  x7F
....................                    
....................                write_eeprom(43,(int8)G2); 
0840A:  CLRF   FAA
0840C:  MOVLW  2B
0840E:  MOVWF  FA9
08410:  MOVFF  37D,FA8
08414:  BCF    FA6.6
08416:  BCF    FA6.7
08418:  BSF    FA6.2
0841A:  MOVF   FF2,W
0841C:  MOVWF  00
0841E:  BCF    FF2.6
08420:  BCF    FF2.7
08422:  MOVLB  F
08424:  MOVLW  55
08426:  MOVWF  FA7
08428:  MOVLW  AA
0842A:  MOVWF  FA7
0842C:  BSF    FA6.1
0842E:  BTFSC  FA6.1
08430:  BRA    842E
08432:  BCF    FA6.2
08434:  MOVF   00,W
08436:  IORWF  FF2,F
....................                delay_ms(10); 
08438:  MOVLW  0A
0843A:  MOVLB  3
0843C:  MOVWF  xDB
0843E:  MOVLB  0
08440:  CALL   179E
....................                write_eeprom(45,(int8)sg2); 
08444:  CLRF   FAA
08446:  MOVLW  2D
08448:  MOVWF  FA9
0844A:  MOVFF  37F,FA8
0844E:  BCF    FA6.6
08450:  BCF    FA6.7
08452:  BSF    FA6.2
08454:  MOVF   FF2,W
08456:  MOVWF  00
08458:  BCF    FF2.6
0845A:  BCF    FF2.7
0845C:  MOVLB  F
0845E:  MOVLW  55
08460:  MOVWF  FA7
08462:  MOVLW  AA
08464:  MOVWF  FA7
08466:  BSF    FA6.1
08468:  BTFSC  FA6.1
0846A:  BRA    8468
0846C:  BCF    FA6.2
0846E:  MOVF   00,W
08470:  IORWF  FF2,F
....................                delay_ms(10); 
08472:  MOVLW  0A
08474:  MOVLB  3
08476:  MOVWF  xDB
08478:  MOVLB  0
0847A:  CALL   179E
....................                Buzzer_on; 
0847E:  BSF    F8C.0
08480:  BCF    F95.0
....................                delay_ms(1000); 
08482:  MOVLW  04
08484:  MOVLB  3
08486:  MOVWF  xC6
08488:  MOVLW  FA
0848A:  MOVWF  xDB
0848C:  MOVLB  0
0848E:  CALL   179E
08492:  MOVLB  3
08494:  DECFSZ xC6,F
08496:  BRA    8488
....................                Buzzer_off; 
08498:  BCF    F8C.0
0849A:  BCF    F95.0
....................                delay_ms(1000); 
0849C:  MOVLW  04
0849E:  MOVWF  xC6
084A0:  MOVLW  FA
084A2:  MOVWF  xDB
084A4:  MOVLB  0
084A6:  CALL   179E
084AA:  MOVLB  3
084AC:  DECFSZ xC6,F
084AE:  BRA    84A0
....................                Buzzer_on; 
084B0:  BSF    F8C.0
084B2:  BCF    F95.0
....................                delay_ms(1000); 
084B4:  MOVLW  04
084B6:  MOVWF  xC6
084B8:  MOVLW  FA
084BA:  MOVWF  xDB
084BC:  MOVLB  0
084BE:  CALL   179E
084C2:  MOVLB  3
084C4:  DECFSZ xC6,F
084C6:  BRA    84B8
....................                Buzzer_off; 
084C8:  BCF    F8C.0
084CA:  BCF    F95.0
084CC:  MOVLB  0
....................             } 
....................          } 
....................      } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==7){ //Menu de Configuración de Fecha y Hora 
084CE:  MOVLB  3
084D0:  MOVF   x34,W
084D2:  SUBLW  07
084D4:  BTFSS  FD8.2
084D6:  BRA    88F2
....................        
....................          if(RX_Buffer[4]==0x0a){//Selecciono Hora 
084D8:  MOVF   34,W
084DA:  SUBLW  0A
084DC:  BNZ   84E2
....................             Opcion=4; 
084DE:  MOVLW  04
084E0:  MOVWF  x3C
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0b){//Selecciono Minuto 
084E2:  MOVF   34,W
084E4:  SUBLW  0B
084E6:  BNZ   84EC
....................             Opcion=5; 
084E8:  MOVLW  05
084EA:  MOVWF  x3C
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0c){//Selecciono Dia 
084EC:  MOVF   34,W
084EE:  SUBLW  0C
084F0:  BNZ   84F6
....................             Opcion=1; 
084F2:  MOVLW  01
084F4:  MOVWF  x3C
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0d){//Selecciono Hora 
084F6:  MOVF   34,W
084F8:  SUBLW  0D
084FA:  BNZ   8500
....................             Opcion=2; 
084FC:  MOVLW  02
084FE:  MOVWF  x3C
....................          } 
....................           
....................          if(RX_Buffer[4]==0x0e){//Selecciono Year 
08500:  MOVF   34,W
08502:  SUBLW  0E
08504:  BNZ   850A
....................             Opcion=3; 
08506:  MOVLW  03
08508:  MOVWF  x3C
....................          } 
....................           
....................          if(RIGHT){ 
0850A:  BSF    F93.2
0850C:  BTFSC  F81.2
0850E:  BRA    8524
....................             delay_ms(200); 
08510:  MOVLW  C8
08512:  MOVWF  xDB
08514:  MOVLB  0
08516:  CALL   179E
....................             if(RIGHT){ 
0851A:  BSF    F93.2
0851C:  BTFSC  F81.2
0851E:  BRA    8526
....................                Opcion++; 
08520:  MOVLB  3
08522:  INCF   x3C,F
08524:  MOVLB  0
....................             } 
....................          } 
....................          if(Opcion>5) 
08526:  MOVLB  3
08528:  MOVF   x3C,W
0852A:  SUBLW  05
0852C:  BC    8532
....................             Opcion=1; 
0852E:  MOVLW  01
08530:  MOVWF  x3C
....................          if(Opcion<1) 
08532:  MOVF   x3C,F
08534:  BNZ   853A
....................             Opcion=5; 
08536:  MOVLW  05
08538:  MOVWF  x3C
....................              
....................          if(RX_Buffer[4]==0x11 || LEFT){//Selecciono Regresar 
0853A:  MOVF   34,W
0853C:  SUBLW  11
0853E:  BZ    8546
08540:  BSF    F93.3
08542:  BTFSC  F81.3
08544:  BRA    8656
....................             printf("page MenuPrincipal"); 
08546:  MOVLW  E4
08548:  MOVWF  FF6
0854A:  MOVLW  0C
0854C:  MOVWF  FF7
0854E:  MOVLW  00
08550:  MOVWF  FF8
08552:  MOVLB  0
08554:  CALL   348A
....................             SendDataDisplay();   
08558:  CALL   34BC
....................             PantallaPrincipal=0; 
0855C:  MOVLB  2
0855E:  CLRF   xCE
....................             Op=OFF; 
08560:  MOVLB  0
08562:  BCF    xA2.0
....................             Op2=OFF; 
08564:  BCF    xA2.1
....................              
....................             if(esBisiesto(YearTx)) 
08566:  MOVFF  373,3C6
0856A:  CALL   4812
0856E:  MOVF   01,F
08570:  BZ    858C
....................                Modulo=Bisiesto[MesTx]; 
08572:  CLRF   03
08574:  MOVLB  3
08576:  MOVF   x74,W
08578:  ADDLW  93
0857A:  MOVWF  FE9
0857C:  MOVLW  00
0857E:  ADDWFC 03,W
08580:  MOVWF  FEA
08582:  MOVFF  FEF,2D0
08586:  MOVLB  2
....................             else 
08588:  BRA    85A2
0858A:  MOVLB  0
....................                Modulo=Regular[MesTx]; 
0858C:  CLRF   03
0858E:  MOVLB  3
08590:  MOVF   x74,W
08592:  ADDLW  87
08594:  MOVWF  FE9
08596:  MOVLW  00
08598:  ADDWFC 03,W
0859A:  MOVWF  FEA
0859C:  MOVFF  FEF,2D0
085A0:  MOVLB  2
....................           
....................             dowTx=((YearTx-1)%7+((YearTx-1)/4-3*((YearTx-1)/100+1)/4)%7+Modulo+DiaTx%7)%7; 
085A2:  MOVLW  01
085A4:  MOVLB  3
085A6:  SUBWF  x73,W
085A8:  MOVWF  xC7
085AA:  MOVWF  xD0
085AC:  MOVLW  07
085AE:  MOVWF  xD1
085B0:  MOVLB  0
085B2:  CALL   439A
085B6:  MOVFF  00,3C6
085BA:  MOVLW  01
085BC:  MOVLB  3
085BE:  SUBWF  x73,W
085C0:  MOVWF  00
085C2:  RRCF   00,W
085C4:  MOVWF  xC7
085C6:  RRCF   xC7,F
085C8:  MOVLW  3F
085CA:  ANDWF  xC7,F
085CC:  MOVLW  01
085CE:  SUBWF  x73,W
085D0:  MOVWF  xC9
085D2:  MOVWF  xD0
085D4:  MOVLW  64
085D6:  MOVWF  xD1
085D8:  MOVLB  0
085DA:  CALL   439A
085DE:  MOVLW  01
085E0:  ADDWF  01,W
085E2:  MULLW  03
085E4:  MOVFF  FF3,00
085E8:  RRCF   00,F
085EA:  RRCF   00,F
085EC:  MOVLW  3F
085EE:  ANDWF  00,F
085F0:  MOVF   00,W
085F2:  MOVLB  3
085F4:  SUBWF  xC7,W
085F6:  MOVWF  xC8
085F8:  MOVWF  xD0
085FA:  MOVLW  07
085FC:  MOVWF  xD1
085FE:  MOVLB  0
08600:  CALL   439A
08604:  MOVF   00,W
08606:  MOVLB  3
08608:  ADDWF  xC6,W
0860A:  MOVLB  2
0860C:  ADDWF  xD0,W
0860E:  MOVLB  3
08610:  MOVWF  xC6
08612:  MOVFF  375,3D0
08616:  MOVLW  07
08618:  MOVWF  xD1
0861A:  MOVLB  0
0861C:  CALL   439A
08620:  MOVF   00,W
08622:  MOVLB  3
08624:  ADDWF  xC6,W
08626:  MOVWF  xC7
08628:  MOVWF  xD0
0862A:  MOVLW  07
0862C:  MOVWF  xD1
0862E:  MOVLB  0
08630:  CALL   439A
08634:  MOVFF  00,379
....................             rtc_set_datetime(DiaTx,MesTx,YearTx,dowTx,HoraTx,MinutoTx); 
08638:  MOVFF  375,3C6
0863C:  MOVFF  374,3C7
08640:  MOVFF  373,3C8
08644:  MOVFF  379,3C9
08648:  MOVFF  376,3CA
0864C:  MOVFF  377,3CB
08650:  GOTO   4894
08654:  MOVLB  3
....................          } 
....................           
....................          if((RX_Buffer[4]==0x2a)|| UP){//Tecla Arriba Oprimida 
08656:  MOVF   34,W
08658:  SUBLW  2A
0865A:  BZ    8662
0865C:  BSF    F93.0
0865E:  BTFSC  F81.0
08660:  BRA    875E
....................             delay_ms(200); 
08662:  MOVLW  C8
08664:  MOVWF  xDB
08666:  MOVLB  0
08668:  CALL   179E
....................             if((RX_Buffer[4]==0x2a)|| UP){    
0866C:  MOVF   34,W
0866E:  SUBLW  2A
08670:  BZ    8678
08672:  BSF    F93.0
08674:  BTFSC  F81.0
08676:  BRA    8760
....................                if(Opcion==1){ 
08678:  MOVLB  3
0867A:  DECFSZ x3C,W
0867C:  BRA    870A
....................                   if(MesTx==2){ 
0867E:  MOVF   x74,W
08680:  SUBLW  02
08682:  BNZ   86B8
....................                      if(esBisiesto(YearTx)){ 
08684:  MOVFF  373,3C6
08688:  MOVLB  0
0868A:  CALL   4812
0868E:  MOVF   01,F
08690:  BZ    86A6
....................                         if(DiaTx<29) 
08692:  MOVLB  3
08694:  MOVF   x75,W
08696:  SUBLW  1C
08698:  BNC   869E
....................                            DiaTx++; 
0869A:  INCF   x75,F
....................                         else 
0869C:  BRA    86A2
....................                            DiaTx=1;    
0869E:  MOVLW  01
086A0:  MOVWF  x75
....................                      }else{ 
086A2:  BRA    86B6
086A4:  MOVLB  0
....................                         if(DiaTx<28) 
086A6:  MOVLB  3
086A8:  MOVF   x75,W
086AA:  SUBLW  1B
086AC:  BNC   86B2
....................                            DiaTx++; 
086AE:  INCF   x75,F
....................                         else 
086B0:  BRA    86B6
....................                            DiaTx=1;    
086B2:  MOVLW  01
086B4:  MOVWF  x75
....................                      } 
....................                   }else{ 
086B6:  BRA    8708
....................                      if(MesTx<=7){ 
086B8:  MOVF   x74,W
086BA:  SUBLW  07
086BC:  BNC   86E4
....................                         if(MesTx % 2 ==0){ 
086BE:  MOVF   x74,W
086C0:  ANDLW  01
086C2:  BNZ   86D4
....................                            if(DiaTx<30) 
086C4:  MOVF   x75,W
086C6:  SUBLW  1D
086C8:  BNC   86CE
....................                               DiaTx++;     
086CA:  INCF   x75,F
....................                            else 
086CC:  BRA    86D2
....................                               DiaTx=1;    
086CE:  MOVLW  01
086D0:  MOVWF  x75
....................                         }else{ 
086D2:  BRA    86E2
....................                            if(DiaTx<31) 
086D4:  MOVF   x75,W
086D6:  SUBLW  1E
086D8:  BNC   86DE
....................                               DiaTx++;     
086DA:  INCF   x75,F
....................                            else 
086DC:  BRA    86E2
....................                               DiaTx=1;    
086DE:  MOVLW  01
086E0:  MOVWF  x75
....................                         }     
....................                      }else{ 
086E2:  BRA    8708
....................                         if(MesTx % 2 ==0){ 
086E4:  MOVF   x74,W
086E6:  ANDLW  01
086E8:  BNZ   86FA
....................                            if(DiaTx<31) 
086EA:  MOVF   x75,W
086EC:  SUBLW  1E
086EE:  BNC   86F4
....................                               DiaTx++;   
086F0:  INCF   x75,F
....................                            else 
086F2:  BRA    86F8
....................                               DiaTx=1; 
086F4:  MOVLW  01
086F6:  MOVWF  x75
....................                         }else{ 
086F8:  BRA    8708
....................                            if(DiaTx<30) 
086FA:  MOVF   x75,W
086FC:  SUBLW  1D
086FE:  BNC   8704
....................                               DiaTx++;     
08700:  INCF   x75,F
....................                            else 
08702:  BRA    8708
....................                               DiaTx=1; 
08704:  MOVLW  01
08706:  MOVWF  x75
....................                         }     
....................                      } 
....................                   } 
....................                }else if(Opcion==2){ 
08708:  BRA    875A
0870A:  MOVF   x3C,W
0870C:  SUBLW  02
0870E:  BNZ   8720
....................                   if(MesTx<12) 
08710:  MOVF   x74,W
08712:  SUBLW  0B
08714:  BNC   871A
....................                      MesTx++; 
08716:  INCF   x74,F
....................                   else 
08718:  BRA    871E
....................                      MesTx=1; 
0871A:  MOVLW  01
0871C:  MOVWF  x74
....................                }else if(Opcion==3){ 
0871E:  BRA    875A
08720:  MOVF   x3C,W
08722:  SUBLW  03
08724:  BNZ   8734
....................                   if(YearTx<99) 
08726:  MOVF   x73,W
08728:  SUBLW  62
0872A:  BNC   8730
....................                      YearTx++; 
0872C:  INCF   x73,F
....................                   else  
0872E:  BRA    8732
....................                      YearTx=0; 
08730:  CLRF   x73
....................                }else if(Opcion==4){ 
08732:  BRA    875A
08734:  MOVF   x3C,W
08736:  SUBLW  04
08738:  BNZ   8748
....................                   if(HoraTx<24) 
0873A:  MOVF   x76,W
0873C:  SUBLW  17
0873E:  BNC   8744
....................                      HoraTx++; 
08740:  INCF   x76,F
....................                   else 
08742:  BRA    8746
....................                      HoraTx=0; 
08744:  CLRF   x76
....................                }else if(Opcion==5){ 
08746:  BRA    875A
08748:  MOVF   x3C,W
0874A:  SUBLW  05
0874C:  BNZ   875A
....................                   if(MinutoTx<59) 
0874E:  MOVF   x77,W
08750:  SUBLW  3A
08752:  BNC   8758
....................                      MinutoTx++; 
08754:  INCF   x77,F
....................                   else 
08756:  BRA    875A
....................                      MinutoTx=0; 
08758:  CLRF   x77
....................                } 
....................                RX_Buffer[4]=0x00; 
0875A:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
0875C:  CLRF   3F
0875E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RX_Buffer[4]==0x2b || DOWN){//Tecla Abajo Oprimida 
08760:  MOVF   34,W
08762:  SUBLW  2B
08764:  BZ    876C
08766:  BSF    F93.1
08768:  BTFSC  F81.1
0876A:  BRA    87E8
....................             delay_ms(200); 
0876C:  MOVLW  C8
0876E:  MOVLB  3
08770:  MOVWF  xDB
08772:  MOVLB  0
08774:  CALL   179E
....................             if(RX_Buffer[4]==0x2b || DOWN){    
08778:  MOVF   34,W
0877A:  SUBLW  2B
0877C:  BZ    8784
0877E:  BSF    F93.1
08780:  BTFSC  F81.1
08782:  BRA    87E8
....................                if(Opcion==1){ 
08784:  MOVLB  3
08786:  DECFSZ x3C,W
08788:  BRA    8792
....................                   if(DiaTx>0) 
0878A:  MOVF   x75,F
0878C:  BZ    8790
....................                      DiaTx--; 
0878E:  DECF   x75,F
....................                }else if(Opcion==2){ 
08790:  BRA    87E2
08792:  MOVF   x3C,W
08794:  SUBLW  02
08796:  BNZ   87A8
....................                   if(MesTx>1) 
08798:  MOVF   x74,W
0879A:  SUBLW  01
0879C:  BC    87A2
....................                      MesTx--; 
0879E:  DECF   x74,F
....................                   else 
087A0:  BRA    87A6
....................                      MesTx=12; 
087A2:  MOVLW  0C
087A4:  MOVWF  x74
....................                }else if(Opcion==3){ 
087A6:  BRA    87E2
087A8:  MOVF   x3C,W
087AA:  SUBLW  03
087AC:  BNZ   87BC
....................                   if(YearTx>0) 
087AE:  MOVF   x73,F
087B0:  BZ    87B6
....................                      YearTx--; 
087B2:  DECF   x73,F
....................                   else 
087B4:  BRA    87BA
....................                      YearTx=99; 
087B6:  MOVLW  63
087B8:  MOVWF  x73
....................                }else if(Opcion==4){ 
087BA:  BRA    87E2
087BC:  MOVF   x3C,W
087BE:  SUBLW  04
087C0:  BNZ   87D0
....................                   if(HoraTx>0) 
087C2:  MOVF   x76,F
087C4:  BZ    87CA
....................                      HoraTx--; 
087C6:  DECF   x76,F
....................                   else 
087C8:  BRA    87CE
....................                      HoraTx=23; 
087CA:  MOVLW  17
087CC:  MOVWF  x76
....................                }else if(Opcion==5){ 
087CE:  BRA    87E2
087D0:  MOVF   x3C,W
087D2:  SUBLW  05
087D4:  BNZ   87E2
....................                   if(MinutoTx>0) 
087D6:  MOVF   x77,F
087D8:  BZ    87DE
....................                      MinutoTx--; 
087DA:  DECF   x77,F
....................                   else 
087DC:  BRA    87E2
....................                      MinutoTx=59; 
087DE:  MOVLW  3B
087E0:  MOVWF  x77
....................                } 
....................                RX_Buffer[4]=0x00; 
087E2:  CLRF   34
....................                RX_Buffer2[4]=0x00; 
087E4:  CLRF   3F
087E6:  MOVLB  0
....................             } 
....................          } 
....................        
....................       printf("thora.txt=\"%02u\"",HoraTx); 
087E8:  MOVLW  F8
087EA:  MOVWF  FF6
087EC:  MOVLW  0C
087EE:  MOVWF  FF7
087F0:  MOVLW  00
087F2:  MOVWF  FF8
087F4:  MOVLW  0B
087F6:  MOVLB  3
087F8:  MOVWF  xCA
087FA:  MOVLB  0
087FC:  CALL   4368
08800:  MOVFF  376,3C8
08804:  MOVLW  01
08806:  MOVLB  3
08808:  MOVWF  xC9
0880A:  MOVLB  0
0880C:  CALL   43C6
08810:  MOVLW  22
08812:  BTFSS  F9E.4
08814:  BRA    8812
08816:  MOVWF  FAD
....................       SendDataDisplay(); 
08818:  CALL   34BC
....................       printf("tminutos.txt=\"%02u\"",MinutoTx); 
0881C:  MOVLW  0A
0881E:  MOVWF  FF6
08820:  MOVLW  0D
08822:  MOVWF  FF7
08824:  MOVLW  00
08826:  MOVWF  FF8
08828:  MOVLW  0E
0882A:  MOVLB  3
0882C:  MOVWF  xCA
0882E:  MOVLB  0
08830:  CALL   4368
08834:  MOVFF  377,3C8
08838:  MOVLW  01
0883A:  MOVLB  3
0883C:  MOVWF  xC9
0883E:  MOVLB  0
08840:  CALL   43C6
08844:  MOVLW  22
08846:  BTFSS  F9E.4
08848:  BRA    8846
0884A:  MOVWF  FAD
....................       SendDataDisplay(); 
0884C:  CALL   34BC
....................       printf("tdia.txt=\"%02u\"",DiaTx); 
08850:  MOVLW  1E
08852:  MOVWF  FF6
08854:  MOVLW  0D
08856:  MOVWF  FF7
08858:  MOVLW  00
0885A:  MOVWF  FF8
0885C:  MOVLW  0A
0885E:  MOVLB  3
08860:  MOVWF  xCA
08862:  MOVLB  0
08864:  CALL   4368
08868:  MOVFF  375,3C8
0886C:  MOVLW  01
0886E:  MOVLB  3
08870:  MOVWF  xC9
08872:  MOVLB  0
08874:  CALL   43C6
08878:  MOVLW  22
0887A:  BTFSS  F9E.4
0887C:  BRA    887A
0887E:  MOVWF  FAD
....................       SendDataDisplay(); 
08880:  CALL   34BC
....................       printf("tmes.txt=\"%02u\"",MesTx); 
08884:  MOVLW  2E
08886:  MOVWF  FF6
08888:  MOVLW  0D
0888A:  MOVWF  FF7
0888C:  MOVLW  00
0888E:  MOVWF  FF8
08890:  MOVLW  0A
08892:  MOVLB  3
08894:  MOVWF  xCA
08896:  MOVLB  0
08898:  CALL   4368
0889C:  MOVFF  374,3C8
088A0:  MOVLW  01
088A2:  MOVLB  3
088A4:  MOVWF  xC9
088A6:  MOVLB  0
088A8:  CALL   43C6
088AC:  MOVLW  22
088AE:  BTFSS  F9E.4
088B0:  BRA    88AE
088B2:  MOVWF  FAD
....................       SendDataDisplay(); 
088B4:  CALL   34BC
....................       printf("tyear.txt=\"%02u\"",YearTx); 
088B8:  MOVLW  3E
088BA:  MOVWF  FF6
088BC:  MOVLW  0D
088BE:  MOVWF  FF7
088C0:  MOVLW  00
088C2:  MOVWF  FF8
088C4:  MOVLW  0B
088C6:  MOVLB  3
088C8:  MOVWF  xCA
088CA:  MOVLB  0
088CC:  CALL   4368
088D0:  MOVFF  373,3C8
088D4:  MOVLW  01
088D6:  MOVLB  3
088D8:  MOVWF  xC9
088DA:  MOVLB  0
088DC:  CALL   43C6
088E0:  MOVLW  22
088E2:  BTFSS  F9E.4
088E4:  BRA    88E2
088E6:  MOVWF  FAD
....................       SendDataDisplay(); 
088E8:  CALL   34BC
....................       LimitaDia();   
088EC:  GOTO   4950
088F0:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................    if(Menu==8){ //Menu Ciclos Personalizados 
088F2:  MOVF   x34,W
088F4:  SUBLW  08
088F6:  BTFSS  FD8.2
088F8:  GOTO   96B6
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u Hora: %02u:%02u:%02u\"",Dia,Mes,Year,Hora,Minuto,Segundo); 
088FC:  MOVLW  50
088FE:  MOVWF  FF6
08900:  MOVLW  0D
08902:  MOVWF  FF7
08904:  MOVLW  00
08906:  MOVWF  FF8
08908:  MOVLW  11
0890A:  MOVWF  xCA
0890C:  MOVLB  0
0890E:  CALL   4368
08912:  MOVFF  36E,3C8
08916:  MOVLW  01
08918:  MOVLB  3
0891A:  MOVWF  xC9
0891C:  MOVLB  0
0891E:  CALL   43C6
08922:  MOVLW  2F
08924:  BTFSS  F9E.4
08926:  BRA    8924
08928:  MOVWF  FAD
0892A:  MOVFF  36D,3C8
0892E:  MOVLW  01
08930:  MOVLB  3
08932:  MOVWF  xC9
08934:  MOVLB  0
08936:  CALL   43C6
0893A:  MOVLW  2F
0893C:  BTFSS  F9E.4
0893E:  BRA    893C
08940:  MOVWF  FAD
08942:  MOVLW  32
08944:  BTFSS  F9E.4
08946:  BRA    8944
08948:  MOVWF  FAD
0894A:  MOVLW  30
0894C:  BTFSS  F9E.4
0894E:  BRA    894C
08950:  MOVWF  FAD
08952:  MOVFF  36C,3C8
08956:  MOVLW  01
08958:  MOVLB  3
0895A:  MOVWF  xC9
0895C:  MOVLB  0
0895E:  CALL   43C6
08962:  MOVLW  71
08964:  MOVWF  FF6
08966:  MOVLW  0D
08968:  MOVWF  FF7
0896A:  MOVLW  00
0896C:  MOVWF  FF8
0896E:  MOVLW  07
08970:  MOVLB  3
08972:  MOVWF  xCA
08974:  MOVLB  0
08976:  CALL   4368
0897A:  MOVFF  36F,3C8
0897E:  MOVLW  01
08980:  MOVLB  3
08982:  MOVWF  xC9
08984:  MOVLB  0
08986:  CALL   43C6
0898A:  MOVLW  3A
0898C:  BTFSS  F9E.4
0898E:  BRA    898C
08990:  MOVWF  FAD
08992:  MOVFF  370,3C8
08996:  MOVLW  01
08998:  MOVLB  3
0899A:  MOVWF  xC9
0899C:  MOVLB  0
0899E:  CALL   43C6
089A2:  MOVLW  3A
089A4:  BTFSS  F9E.4
089A6:  BRA    89A4
089A8:  MOVWF  FAD
089AA:  MOVFF  371,3C8
089AE:  MOVLW  01
089B0:  MOVLB  3
089B2:  MOVWF  xC9
089B4:  MOVLB  0
089B6:  CALL   43C6
089BA:  MOVLW  22
089BC:  BTFSS  F9E.4
089BE:  BRA    89BC
089C0:  MOVWF  FAD
....................       SendDataDisplay(); 
089C2:  CALL   34BC
....................       GuardaEEPROM=OFF; 
089C6:  BCF    xA2.4
....................        
....................       if(RX_Buffer[4]>0x00 && RX_Buffer[4]<0x04){//Personalizados 
089C8:  MOVF   34,F
089CA:  BTFSC  FD8.2
089CC:  BRA    8BFA
089CE:  MOVF   34,W
089D0:  SUBLW  03
089D2:  BTFSS  FD8.0
089D4:  BRA    8BFA
....................          printf("ciclo.txt=\"CICLO P%02u\"",RX_Buffer[4]+0x04); 
089D6:  MOVLW  04
089D8:  ADDWF  34,W
089DA:  MOVLB  3
089DC:  MOVWF  xC6
089DE:  MOVLW  88
089E0:  MOVWF  FF6
089E2:  MOVLW  0D
089E4:  MOVWF  FF7
089E6:  MOVLW  00
089E8:  MOVWF  FF8
089EA:  MOVLW  12
089EC:  MOVWF  xCA
089EE:  MOVLB  0
089F0:  CALL   4368
089F4:  MOVFF  3C6,3C8
089F8:  MOVLW  01
089FA:  MOVLB  3
089FC:  MOVWF  xC9
089FE:  MOVLB  0
08A00:  CALL   43C6
08A04:  MOVLW  22
08A06:  BTFSS  F9E.4
08A08:  BRA    8A06
08A0A:  MOVWF  FAD
....................          SendDataDisplay();           
08A0C:  CALL   34BC
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[RX_Buffer[4]-1].Temperatura); 
08A10:  MOVLW  01
08A12:  SUBWF  34,W
08A14:  MULLW  0A
08A16:  MOVF   FF3,W
08A18:  MOVLB  3
08A1A:  CLRF   xC7
08A1C:  MOVWF  xC6
08A1E:  MOVLW  9E
08A20:  ADDWF  xC6,W
08A22:  MOVWF  FE9
08A24:  MOVLW  03
08A26:  ADDWFC xC7,W
08A28:  MOVWF  FEA
08A2A:  MOVFF  FEF,3C6
08A2E:  MOVLW  A0
08A30:  MOVWF  FF6
08A32:  MOVLW  0D
08A34:  MOVWF  FF7
08A36:  MOVLW  00
08A38:  MOVWF  FF8
08A3A:  MOVLW  0A
08A3C:  MOVWF  xCA
08A3E:  MOVLB  0
08A40:  CALL   4368
08A44:  MOVFF  3C6,3C8
08A48:  MOVLW  1B
08A4A:  MOVLB  3
08A4C:  MOVWF  xC9
08A4E:  MOVLB  0
08A50:  CALL   43C6
08A54:  MOVLW  22
08A56:  BTFSS  F9E.4
08A58:  BRA    8A56
08A5A:  MOVWF  FAD
....................          SendDataDisplay(); 
08A5C:  CALL   34BC
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutoest,CiclosPersonalizados[RX_Buffer[4]-1].Segundoest); 
08A60:  MOVLW  01
08A62:  SUBWF  34,W
08A64:  MULLW  0A
08A66:  MOVF   FF3,W
08A68:  MOVLB  3
08A6A:  CLRF   xC7
08A6C:  MOVWF  xC6
08A6E:  MOVLW  09
08A70:  ADDWF  xC6,W
08A72:  MOVWF  01
08A74:  MOVLW  00
08A76:  ADDWFC xC7,W
08A78:  MOVWF  03
08A7A:  MOVF   01,W
08A7C:  ADDLW  9E
08A7E:  MOVWF  FE9
08A80:  MOVLW  03
08A82:  ADDWFC 03,W
08A84:  MOVWF  FEA
08A86:  MOVFF  FEF,3C6
08A8A:  MOVLW  01
08A8C:  SUBWF  34,W
08A8E:  MULLW  0A
08A90:  MOVF   FF3,W
08A92:  CLRF   xC8
08A94:  MOVWF  xC7
08A96:  MOVLW  03
08A98:  ADDWF  xC7,W
08A9A:  MOVWF  01
08A9C:  MOVLW  00
08A9E:  ADDWFC xC8,W
08AA0:  MOVWF  03
08AA2:  MOVF   01,W
08AA4:  ADDLW  9E
08AA6:  MOVWF  FE9
08AA8:  MOVLW  03
08AAA:  ADDWFC 03,W
08AAC:  MOVWF  FEA
08AAE:  MOVFF  FEF,3C7
08AB2:  MOVLW  AE
08AB4:  MOVWF  FF6
08AB6:  MOVLW  0D
08AB8:  MOVWF  FF7
08ABA:  MOVLW  00
08ABC:  MOVWF  FF8
08ABE:  MOVLW  0A
08AC0:  MOVWF  xCA
08AC2:  MOVLB  0
08AC4:  CALL   4368
08AC8:  MOVFF  3C6,3C8
08ACC:  MOVLW  01
08ACE:  MOVLB  3
08AD0:  MOVWF  xC9
08AD2:  MOVLB  0
08AD4:  CALL   43C6
08AD8:  MOVLW  3A
08ADA:  BTFSS  F9E.4
08ADC:  BRA    8ADA
08ADE:  MOVWF  FAD
08AE0:  MOVFF  3C7,3C8
08AE4:  MOVLW  01
08AE6:  MOVLB  3
08AE8:  MOVWF  xC9
08AEA:  MOVLB  0
08AEC:  CALL   43C6
08AF0:  MOVLW  22
08AF2:  BTFSS  F9E.4
08AF4:  BRA    8AF2
08AF6:  MOVWF  FAD
....................          SendDataDisplay(); 
08AF8:  CALL   34BC
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[RX_Buffer[4]-1].Minutosec,CiclosPersonalizados[RX_Buffer[4]-1].Segundosec); 
08AFC:  MOVLW  01
08AFE:  SUBWF  34,W
08B00:  MULLW  0A
08B02:  MOVF   FF3,W
08B04:  MOVLB  3
08B06:  CLRF   xC7
08B08:  MOVWF  xC6
08B0A:  MOVLW  04
08B0C:  ADDWF  xC6,W
08B0E:  MOVWF  01
08B10:  MOVLW  00
08B12:  ADDWFC xC7,W
08B14:  MOVWF  03
08B16:  MOVF   01,W
08B18:  ADDLW  9E
08B1A:  MOVWF  FE9
08B1C:  MOVLW  03
08B1E:  ADDWFC 03,W
08B20:  MOVWF  FEA
08B22:  MOVFF  FEF,3C6
08B26:  MOVLW  01
08B28:  SUBWF  34,W
08B2A:  MULLW  0A
08B2C:  MOVF   FF3,W
08B2E:  CLRF   xC8
08B30:  MOVWF  xC7
08B32:  MOVLW  05
08B34:  ADDWF  xC7,W
08B36:  MOVWF  01
08B38:  MOVLW  00
08B3A:  ADDWFC xC8,W
08B3C:  MOVWF  03
08B3E:  MOVF   01,W
08B40:  ADDLW  9E
08B42:  MOVWF  FE9
08B44:  MOVLW  03
08B46:  ADDWFC 03,W
08B48:  MOVWF  FEA
08B4A:  MOVFF  FEF,3C7
08B4E:  MOVLW  C4
08B50:  MOVWF  FF6
08B52:  MOVLW  0D
08B54:  MOVWF  FF7
08B56:  MOVLW  00
08B58:  MOVWF  FF8
08B5A:  MOVLW  0A
08B5C:  MOVWF  xCA
08B5E:  MOVLB  0
08B60:  CALL   4368
08B64:  MOVFF  3C6,3C8
08B68:  MOVLW  01
08B6A:  MOVLB  3
08B6C:  MOVWF  xC9
08B6E:  MOVLB  0
08B70:  CALL   43C6
08B74:  MOVLW  3A
08B76:  BTFSS  F9E.4
08B78:  BRA    8B76
08B7A:  MOVWF  FAD
08B7C:  MOVFF  3C7,3C8
08B80:  MOVLW  01
08B82:  MOVLB  3
08B84:  MOVWF  xC9
08B86:  MOVLB  0
08B88:  CALL   43C6
08B8C:  MOVLW  22
08B8E:  BTFSS  F9E.4
08B90:  BRA    8B8E
08B92:  MOVWF  FAD
....................          SendDataDisplay(); 
08B94:  CALL   34BC
....................          printf("desfogue.txt=\"%u\"",CiclosPersonalizados[RX_Buffer[4]-1].NivelDesfogue); 
08B98:  MOVLW  01
08B9A:  SUBWF  34,W
08B9C:  MULLW  0A
08B9E:  MOVF   FF3,W
08BA0:  MOVLB  3
08BA2:  CLRF   xC7
08BA4:  MOVWF  xC6
08BA6:  MOVLW  08
08BA8:  ADDWF  xC6,W
08BAA:  MOVWF  01
08BAC:  MOVLW  00
08BAE:  ADDWFC xC7,W
08BB0:  MOVWF  03
08BB2:  MOVF   01,W
08BB4:  ADDLW  9E
08BB6:  MOVWF  FE9
08BB8:  MOVLW  03
08BBA:  ADDWFC 03,W
08BBC:  MOVWF  FEA
08BBE:  MOVFF  FEF,3C6
08BC2:  MOVLW  DA
08BC4:  MOVWF  FF6
08BC6:  MOVLW  0D
08BC8:  MOVWF  FF7
08BCA:  MOVLW  00
08BCC:  MOVWF  FF8
08BCE:  MOVLW  0E
08BD0:  MOVWF  xCA
08BD2:  MOVLB  0
08BD4:  CALL   4368
08BD8:  MOVFF  3C6,3C8
08BDC:  MOVLW  1B
08BDE:  MOVLB  3
08BE0:  MOVWF  xC9
08BE2:  MOVLB  0
08BE4:  CALL   43C6
08BE8:  MOVLW  22
08BEA:  BTFSS  F9E.4
08BEC:  BRA    8BEA
08BEE:  MOVWF  FAD
....................          SendDataDisplay(); 
08BF0:  CALL   34BC
....................          CicloLibre=RX_Buffer[4]; 
08BF4:  MOVFF  34,328
....................       }else if(CicloLibre==0x00){ 
08BF8:  BRA    8E94
08BFA:  MOVLB  3
08BFC:  MOVF   x28,F
08BFE:  BNZ   8C6A
....................          printf("ciclo.txt=\"CICLO P--\""); 
08C00:  MOVLW  EC
08C02:  MOVWF  FF6
08C04:  MOVLW  0D
08C06:  MOVWF  FF7
08C08:  MOVLW  00
08C0A:  MOVWF  FF8
08C0C:  MOVLB  0
08C0E:  CALL   348A
....................          SendDataDisplay();           
08C12:  CALL   34BC
....................          printf("temp.txt=\"--\""); 
08C16:  MOVLW  02
08C18:  MOVWF  FF6
08C1A:  MOVLW  0E
08C1C:  MOVWF  FF7
08C1E:  MOVLW  00
08C20:  MOVWF  FF8
08C22:  CALL   348A
....................          SendDataDisplay(); 
08C26:  CALL   34BC
....................          printf("test.txt=\"--:--\""); 
08C2A:  MOVLW  10
08C2C:  MOVWF  FF6
08C2E:  MOVLW  0E
08C30:  MOVWF  FF7
08C32:  MOVLW  00
08C34:  MOVWF  FF8
08C36:  CALL   348A
....................          SendDataDisplay(); 
08C3A:  CALL   34BC
....................          printf("tsec.txt=\"--:--\""); 
08C3E:  MOVLW  22
08C40:  MOVWF  FF6
08C42:  MOVLW  0E
08C44:  MOVWF  FF7
08C46:  MOVLW  00
08C48:  MOVWF  FF8
08C4A:  CALL   348A
....................          SendDataDisplay(); 
08C4E:  CALL   34BC
....................          printf("desfogue.txt=\"--\""); 
08C52:  MOVLW  34
08C54:  MOVWF  FF6
08C56:  MOVLW  0E
08C58:  MOVWF  FF7
08C5A:  MOVLW  00
08C5C:  MOVWF  FF8
08C5E:  CALL   348A
....................          SendDataDisplay(); 
08C62:  CALL   34BC
....................       }else if(CicloLibre>0 && CicloLibre<4){ 
08C66:  BRA    8E94
08C68:  MOVLB  3
08C6A:  MOVF   x28,F
08C6C:  BTFSC  FD8.2
08C6E:  BRA    8E96
08C70:  MOVF   x28,W
08C72:  SUBLW  03
08C74:  BTFSS  FD8.0
08C76:  BRA    8E96
....................          printf("ciclo.txt=\"CICLO P%02u\"",CicloLibre+0x04); 
08C78:  MOVLW  04
08C7A:  ADDWF  x28,W
08C7C:  MOVWF  xC6
08C7E:  MOVLW  46
08C80:  MOVWF  FF6
08C82:  MOVLW  0E
08C84:  MOVWF  FF7
08C86:  MOVLW  00
08C88:  MOVWF  FF8
08C8A:  MOVLW  12
08C8C:  MOVWF  xCA
08C8E:  MOVLB  0
08C90:  CALL   4368
08C94:  MOVFF  3C6,3C8
08C98:  MOVLW  01
08C9A:  MOVLB  3
08C9C:  MOVWF  xC9
08C9E:  MOVLB  0
08CA0:  CALL   43C6
08CA4:  MOVLW  22
08CA6:  BTFSS  F9E.4
08CA8:  BRA    8CA6
08CAA:  MOVWF  FAD
....................          SendDataDisplay();           
08CAC:  CALL   34BC
....................          printf("temp.txt=\"%u\"",CiclosPersonalizados[CicloLibre-1].Temperatura); 
08CB0:  MOVLW  01
08CB2:  MOVLB  3
08CB4:  SUBWF  x28,W
08CB6:  MULLW  0A
08CB8:  MOVF   FF3,W
08CBA:  CLRF   xC7
08CBC:  MOVWF  xC6
08CBE:  MOVLW  9E
08CC0:  ADDWF  xC6,W
08CC2:  MOVWF  FE9
08CC4:  MOVLW  03
08CC6:  ADDWFC xC7,W
08CC8:  MOVWF  FEA
08CCA:  MOVFF  FEF,3C6
08CCE:  MOVLW  5E
08CD0:  MOVWF  FF6
08CD2:  MOVLW  0E
08CD4:  MOVWF  FF7
08CD6:  MOVLW  00
08CD8:  MOVWF  FF8
08CDA:  MOVLW  0A
08CDC:  MOVWF  xCA
08CDE:  MOVLB  0
08CE0:  CALL   4368
08CE4:  MOVFF  3C6,3C8
08CE8:  MOVLW  1B
08CEA:  MOVLB  3
08CEC:  MOVWF  xC9
08CEE:  MOVLB  0
08CF0:  CALL   43C6
08CF4:  MOVLW  22
08CF6:  BTFSS  F9E.4
08CF8:  BRA    8CF6
08CFA:  MOVWF  FAD
....................          SendDataDisplay(); 
08CFC:  CALL   34BC
....................          printf("test.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutoest,CiclosPersonalizados[CicloLibre-1].Segundoest); 
08D00:  MOVLW  01
08D02:  MOVLB  3
08D04:  SUBWF  x28,W
08D06:  MULLW  0A
08D08:  MOVF   FF3,W
08D0A:  CLRF   xC7
08D0C:  MOVWF  xC6
08D0E:  MOVLW  09
08D10:  ADDWF  xC6,W
08D12:  MOVWF  01
08D14:  MOVLW  00
08D16:  ADDWFC xC7,W
08D18:  MOVWF  03
08D1A:  MOVF   01,W
08D1C:  ADDLW  9E
08D1E:  MOVWF  FE9
08D20:  MOVLW  03
08D22:  ADDWFC 03,W
08D24:  MOVWF  FEA
08D26:  MOVFF  FEF,3C6
08D2A:  MOVLW  01
08D2C:  SUBWF  x28,W
08D2E:  MULLW  0A
08D30:  MOVF   FF3,W
08D32:  CLRF   xC8
08D34:  MOVWF  xC7
08D36:  MOVLW  03
08D38:  ADDWF  xC7,W
08D3A:  MOVWF  01
08D3C:  MOVLW  00
08D3E:  ADDWFC xC8,W
08D40:  MOVWF  03
08D42:  MOVF   01,W
08D44:  ADDLW  9E
08D46:  MOVWF  FE9
08D48:  MOVLW  03
08D4A:  ADDWFC 03,W
08D4C:  MOVWF  FEA
08D4E:  MOVFF  FEF,3C7
08D52:  MOVLW  6C
08D54:  MOVWF  FF6
08D56:  MOVLW  0E
08D58:  MOVWF  FF7
08D5A:  MOVLW  00
08D5C:  MOVWF  FF8
08D5E:  MOVLW  0A
08D60:  MOVWF  xCA
08D62:  MOVLB  0
08D64:  CALL   4368
08D68:  MOVFF  3C6,3C8
08D6C:  MOVLW  01
08D6E:  MOVLB  3
08D70:  MOVWF  xC9
08D72:  MOVLB  0
08D74:  CALL   43C6
08D78:  MOVLW  3A
08D7A:  BTFSS  F9E.4
08D7C:  BRA    8D7A
08D7E:  MOVWF  FAD
08D80:  MOVFF  3C7,3C8
08D84:  MOVLW  01
08D86:  MOVLB  3
08D88:  MOVWF  xC9
08D8A:  MOVLB  0
08D8C:  CALL   43C6
08D90:  MOVLW  22
08D92:  BTFSS  F9E.4
08D94:  BRA    8D92
08D96:  MOVWF  FAD
....................          SendDataDisplay(); 
08D98:  CALL   34BC
....................          printf("tsec.txt=\"%02u:%02u\"",CiclosPersonalizados[CicloLibre-1].Minutosec,CiclosPersonalizados[CicloLibre-1].Segundosec); 
08D9C:  MOVLW  01
08D9E:  MOVLB  3
08DA0:  SUBWF  x28,W
08DA2:  MULLW  0A
08DA4:  MOVF   FF3,W
08DA6:  CLRF   xC7
08DA8:  MOVWF  xC6
08DAA:  MOVLW  04
08DAC:  ADDWF  xC6,W
08DAE:  MOVWF  01
08DB0:  MOVLW  00
08DB2:  ADDWFC xC7,W
08DB4:  MOVWF  03
08DB6:  MOVF   01,W
08DB8:  ADDLW  9E
08DBA:  MOVWF  FE9
08DBC:  MOVLW  03
08DBE:  ADDWFC 03,W
08DC0:  MOVWF  FEA
08DC2:  MOVFF  FEF,3C6
08DC6:  MOVLW  01
08DC8:  SUBWF  x28,W
08DCA:  MULLW  0A
08DCC:  MOVF   FF3,W
08DCE:  CLRF   xC8
08DD0:  MOVWF  xC7
08DD2:  MOVLW  05
08DD4:  ADDWF  xC7,W
08DD6:  MOVWF  01
08DD8:  MOVLW  00
08DDA:  ADDWFC xC8,W
08DDC:  MOVWF  03
08DDE:  MOVF   01,W
08DE0:  ADDLW  9E
08DE2:  MOVWF  FE9
08DE4:  MOVLW  03
08DE6:  ADDWFC 03,W
08DE8:  MOVWF  FEA
08DEA:  MOVFF  FEF,3C7
08DEE:  MOVLW  82
08DF0:  MOVWF  FF6
08DF2:  MOVLW  0E
08DF4:  MOVWF  FF7
08DF6:  MOVLW  00
08DF8:  MOVWF  FF8
08DFA:  MOVLW  0A
08DFC:  MOVWF  xCA
08DFE:  MOVLB  0
08E00:  CALL   4368
08E04:  MOVFF  3C6,3C8
08E08:  MOVLW  01
08E0A:  MOVLB  3
08E0C:  MOVWF  xC9
08E0E:  MOVLB  0
08E10:  CALL   43C6
08E14:  MOVLW  3A
08E16:  BTFSS  F9E.4
08E18:  BRA    8E16
08E1A:  MOVWF  FAD
08E1C:  MOVFF  3C7,3C8
08E20:  MOVLW  01
08E22:  MOVLB  3
08E24:  MOVWF  xC9
08E26:  MOVLB  0
08E28:  CALL   43C6
08E2C:  MOVLW  22
08E2E:  BTFSS  F9E.4
08E30:  BRA    8E2E
08E32:  MOVWF  FAD
....................          SendDataDisplay(); 
08E34:  CALL   34BC
....................          printf("desfogue.txt=\"%u\"",CiclosPersonalizados[CicloLibre-1].NivelDesfogue); 
08E38:  MOVLW  01
08E3A:  MOVLB  3
08E3C:  SUBWF  x28,W
08E3E:  MULLW  0A
08E40:  MOVF   FF3,W
08E42:  CLRF   xC7
08E44:  MOVWF  xC6
08E46:  MOVLW  08
08E48:  ADDWF  xC6,W
08E4A:  MOVWF  01
08E4C:  MOVLW  00
08E4E:  ADDWFC xC7,W
08E50:  MOVWF  03
08E52:  MOVF   01,W
08E54:  ADDLW  9E
08E56:  MOVWF  FE9
08E58:  MOVLW  03
08E5A:  ADDWFC 03,W
08E5C:  MOVWF  FEA
08E5E:  MOVFF  FEF,3C6
08E62:  MOVLW  98
08E64:  MOVWF  FF6
08E66:  MOVLW  0E
08E68:  MOVWF  FF7
08E6A:  MOVLW  00
08E6C:  MOVWF  FF8
08E6E:  MOVLW  0E
08E70:  MOVWF  xCA
08E72:  MOVLB  0
08E74:  CALL   4368
08E78:  MOVFF  3C6,3C8
08E7C:  MOVLW  1B
08E7E:  MOVLB  3
08E80:  MOVWF  xC9
08E82:  MOVLB  0
08E84:  CALL   43C6
08E88:  MOVLW  22
08E8A:  BTFSS  F9E.4
08E8C:  BRA    8E8A
08E8E:  MOVWF  FAD
....................          SendDataDisplay(); 
08E90:  CALL   34BC
08E94:  MOVLB  3
....................       } 
....................        
....................       if(RIGHT){ 
08E96:  BSF    F93.2
08E98:  BTFSC  F81.2
08E9A:  BRA    8EB0
....................          delay_ms(100); 
08E9C:  MOVLW  64
08E9E:  MOVWF  xDB
08EA0:  MOVLB  0
08EA2:  CALL   179E
....................          if(RIGHT){ 
08EA6:  BSF    F93.2
08EA8:  BTFSC  F81.2
08EAA:  BRA    8EB2
....................             CicloLibre++; 
08EAC:  MOVLB  3
08EAE:  INCF   x28,F
08EB0:  MOVLB  0
....................          } 
....................       }       
....................        
....................       if(CicloLibre<1) 
08EB2:  MOVLB  3
08EB4:  MOVF   x28,F
08EB6:  BNZ   8EBC
....................          CicloLibre=1; 
08EB8:  MOVLW  01
08EBA:  MOVWF  x28
....................       if(CicloLibre>4) 
08EBC:  MOVF   x28,W
08EBE:  SUBLW  04
08EC0:  BC    8EC6
....................          CicloLibre=4; 
08EC2:  MOVLW  04
08EC4:  MOVWF  x28
....................        
....................       if(RX_Buffer[4]==0xa0 || LEFT){//a0, Menu Principal 
08EC6:  MOVF   34,W
08EC8:  SUBLW  A0
08ECA:  BZ    8ED2
08ECC:  BSF    F93.3
08ECE:  BTFSC  F81.3
08ED0:  BRA    8F08
....................          delay_ms(100); 
08ED2:  MOVLW  64
08ED4:  MOVWF  xDB
08ED6:  MOVLB  0
08ED8:  CALL   179E
....................          if(RX_Buffer[4]==0xa0 || LEFT){ 
08EDC:  MOVF   34,W
08EDE:  SUBLW  A0
08EE0:  BZ    8EE8
08EE2:  BSF    F93.3
08EE4:  BTFSC  F81.3
08EE6:  BRA    8F06
....................             printf("page MenuPrincipal"); 
08EE8:  MOVLW  AA
08EEA:  MOVWF  FF6
08EEC:  MOVLW  0E
08EEE:  MOVWF  FF7
08EF0:  MOVLW  00
08EF2:  MOVWF  FF8
08EF4:  CALL   348A
....................             SendDataDisplay();      
08EF8:  CALL   34BC
....................             PantallaPrincipal=0; 
08EFC:  MOVLB  2
08EFE:  CLRF   xCE
....................             Op=OFF; 
08F00:  MOVLB  0
08F02:  BCF    xA2.0
....................             Op2=OFF; 
08F04:  BCF    xA2.1
08F06:  MOVLB  3
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x20 && CicloLibre>0){//20, Temperatura 
08F08:  MOVF   34,W
08F0A:  SUBLW  20
08F0C:  BNZ   8F46
08F0E:  MOVF   x28,F
08F10:  BZ    8F46
....................             printf("page Temperatura"); 
08F12:  MOVLW  BE
08F14:  MOVWF  FF6
08F16:  MOVLW  0E
08F18:  MOVWF  FF7
08F1A:  MOVLW  00
08F1C:  MOVWF  FF8
08F1E:  MOVLB  0
08F20:  CALL   348A
....................             SendDataDisplay();      
08F24:  CALL   34BC
....................             Setpoint=CiclosPersonalizados[CicloLibre-1].Temperatura; 
08F28:  MOVLW  01
08F2A:  MOVLB  3
08F2C:  SUBWF  x28,W
08F2E:  MULLW  0A
08F30:  MOVF   FF3,W
08F32:  CLRF   xC7
08F34:  MOVWF  xC6
08F36:  MOVLW  9E
08F38:  ADDWF  xC6,W
08F3A:  MOVWF  FE9
08F3C:  MOVLW  03
08F3E:  ADDWFC xC7,W
08F40:  MOVWF  FEA
08F42:  MOVFF  FEF,33B
....................       } 
....................        
....................       if(RX_Buffer[4]==0x30 && CicloLibre>0){//30, Test 
08F46:  MOVF   34,W
08F48:  SUBLW  30
08F4A:  BTFSS  FD8.2
08F4C:  BRA    9060
08F4E:  MOVF   x28,F
08F50:  BTFSC  FD8.2
08F52:  BRA    9060
....................             printf("page TiempoEst"); 
08F54:  MOVLW  D0
08F56:  MOVWF  FF6
08F58:  MOVLW  0E
08F5A:  MOVWF  FF7
08F5C:  MOVLW  00
08F5E:  MOVWF  FF8
08F60:  MOVLB  0
08F62:  CALL   348A
....................             SendDataDisplay();      
08F66:  CALL   34BC
....................             Testerilizacionp[3]=CiclosPersonalizados[CicloLibre-1].Minutoest/10; 
08F6A:  MOVLW  01
08F6C:  MOVLB  3
08F6E:  SUBWF  x28,W
08F70:  MULLW  0A
08F72:  MOVF   FF3,W
08F74:  CLRF   xC7
08F76:  MOVWF  xC6
08F78:  MOVLW  09
08F7A:  ADDWF  xC6,W
08F7C:  MOVWF  01
08F7E:  MOVLW  00
08F80:  ADDWFC xC7,W
08F82:  MOVWF  03
08F84:  MOVF   01,W
08F86:  ADDLW  9E
08F88:  MOVWF  FE9
08F8A:  MOVLW  03
08F8C:  ADDWFC 03,W
08F8E:  MOVWF  FEA
08F90:  MOVFF  FEF,3D0
08F94:  MOVLW  0A
08F96:  MOVWF  xD1
08F98:  MOVLB  0
08F9A:  CALL   439A
08F9E:  MOVFF  01,B6
....................             Testerilizacionp[2]=CiclosPersonalizados[CicloLibre-1].Minutoest-(Testerilizacionp[3]*10); 
08FA2:  MOVLW  01
08FA4:  MOVLB  3
08FA6:  SUBWF  x28,W
08FA8:  MULLW  0A
08FAA:  MOVF   FF3,W
08FAC:  CLRF   xC7
08FAE:  MOVWF  xC6
08FB0:  MOVLW  09
08FB2:  ADDWF  xC6,W
08FB4:  MOVWF  01
08FB6:  MOVLW  00
08FB8:  ADDWFC xC7,W
08FBA:  MOVWF  03
08FBC:  MOVF   01,W
08FBE:  ADDLW  9E
08FC0:  MOVWF  FE9
08FC2:  MOVLW  03
08FC4:  ADDWFC 03,W
08FC6:  MOVWF  FEA
08FC8:  MOVFF  FEF,3C6
08FCC:  MOVFF  B6,3C8
08FD0:  MOVLW  0A
08FD2:  MOVWF  xC9
08FD4:  MOVLB  0
08FD6:  CALL   2A1E
08FDA:  MOVF   01,W
08FDC:  MOVLB  3
08FDE:  SUBWF  xC6,W
08FE0:  MOVLB  0
08FE2:  MOVWF  xB5
....................             Testerilizacionp[1]=CiclosPersonalizados[CicloLibre-1].Segundoest/10; 
08FE4:  MOVLW  01
08FE6:  MOVLB  3
08FE8:  SUBWF  x28,W
08FEA:  MULLW  0A
08FEC:  MOVF   FF3,W
08FEE:  CLRF   xC7
08FF0:  MOVWF  xC6
08FF2:  MOVLW  03
08FF4:  ADDWF  xC6,W
08FF6:  MOVWF  01
08FF8:  MOVLW  00
08FFA:  ADDWFC xC7,W
08FFC:  MOVWF  03
08FFE:  MOVF   01,W
09000:  ADDLW  9E
09002:  MOVWF  FE9
09004:  MOVLW  03
09006:  ADDWFC 03,W
09008:  MOVWF  FEA
0900A:  MOVFF  FEF,3D0
0900E:  MOVLW  0A
09010:  MOVWF  xD1
09012:  MOVLB  0
09014:  CALL   439A
09018:  MOVFF  01,B4
....................             Testerilizacionp[0]=CiclosPersonalizados[CicloLibre-1].Segundoest-(Testerilizacionp[1]*10); 
0901C:  MOVLW  01
0901E:  MOVLB  3
09020:  SUBWF  x28,W
09022:  MULLW  0A
09024:  MOVF   FF3,W
09026:  CLRF   xC7
09028:  MOVWF  xC6
0902A:  MOVLW  03
0902C:  ADDWF  xC6,W
0902E:  MOVWF  01
09030:  MOVLW  00
09032:  ADDWFC xC7,W
09034:  MOVWF  03
09036:  MOVF   01,W
09038:  ADDLW  9E
0903A:  MOVWF  FE9
0903C:  MOVLW  03
0903E:  ADDWFC 03,W
09040:  MOVWF  FEA
09042:  MOVFF  FEF,3C6
09046:  MOVFF  B4,3C8
0904A:  MOVLW  0A
0904C:  MOVWF  xC9
0904E:  MOVLB  0
09050:  CALL   2A1E
09054:  MOVF   01,W
09056:  MOVLB  3
09058:  SUBWF  xC6,W
0905A:  MOVLB  0
0905C:  MOVWF  xB3
0905E:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x40 && CicloLibre>0){//30, Test 
09060:  MOVF   34,W
09062:  SUBLW  40
09064:  BTFSS  FD8.2
09066:  BRA    917A
09068:  MOVF   x28,F
0906A:  BTFSC  FD8.2
0906C:  BRA    917A
....................             printf("page TiempoSec"); 
0906E:  MOVLW  E0
09070:  MOVWF  FF6
09072:  MOVLW  0E
09074:  MOVWF  FF7
09076:  MOVLW  00
09078:  MOVWF  FF8
0907A:  MOVLB  0
0907C:  CALL   348A
....................             SendDataDisplay();      
09080:  CALL   34BC
....................             Tsecadop[3]=CiclosPersonalizados[CicloLibre-1].Minutosec/10; 
09084:  MOVLW  01
09086:  MOVLB  3
09088:  SUBWF  x28,W
0908A:  MULLW  0A
0908C:  MOVF   FF3,W
0908E:  CLRF   xC7
09090:  MOVWF  xC6
09092:  MOVLW  04
09094:  ADDWF  xC6,W
09096:  MOVWF  01
09098:  MOVLW  00
0909A:  ADDWFC xC7,W
0909C:  MOVWF  03
0909E:  MOVF   01,W
090A0:  ADDLW  9E
090A2:  MOVWF  FE9
090A4:  MOVLW  03
090A6:  ADDWFC 03,W
090A8:  MOVWF  FEA
090AA:  MOVFF  FEF,3D0
090AE:  MOVLW  0A
090B0:  MOVWF  xD1
090B2:  MOVLB  0
090B4:  CALL   439A
090B8:  MOVFF  01,BF
....................             Tsecadop[2]=CiclosPersonalizados[CicloLibre-1].Minutosec-(Tsecadop[3]*10); 
090BC:  MOVLW  01
090BE:  MOVLB  3
090C0:  SUBWF  x28,W
090C2:  MULLW  0A
090C4:  MOVF   FF3,W
090C6:  CLRF   xC7
090C8:  MOVWF  xC6
090CA:  MOVLW  04
090CC:  ADDWF  xC6,W
090CE:  MOVWF  01
090D0:  MOVLW  00
090D2:  ADDWFC xC7,W
090D4:  MOVWF  03
090D6:  MOVF   01,W
090D8:  ADDLW  9E
090DA:  MOVWF  FE9
090DC:  MOVLW  03
090DE:  ADDWFC 03,W
090E0:  MOVWF  FEA
090E2:  MOVFF  FEF,3C6
090E6:  MOVFF  BF,3C8
090EA:  MOVLW  0A
090EC:  MOVWF  xC9
090EE:  MOVLB  0
090F0:  CALL   2A1E
090F4:  MOVF   01,W
090F6:  MOVLB  3
090F8:  SUBWF  xC6,W
090FA:  MOVLB  0
090FC:  MOVWF  xBE
....................             Tsecadop[1]=CiclosPersonalizados[CicloLibre-1].Segundosec/10; 
090FE:  MOVLW  01
09100:  MOVLB  3
09102:  SUBWF  x28,W
09104:  MULLW  0A
09106:  MOVF   FF3,W
09108:  CLRF   xC7
0910A:  MOVWF  xC6
0910C:  MOVLW  05
0910E:  ADDWF  xC6,W
09110:  MOVWF  01
09112:  MOVLW  00
09114:  ADDWFC xC7,W
09116:  MOVWF  03
09118:  MOVF   01,W
0911A:  ADDLW  9E
0911C:  MOVWF  FE9
0911E:  MOVLW  03
09120:  ADDWFC 03,W
09122:  MOVWF  FEA
09124:  MOVFF  FEF,3D0
09128:  MOVLW  0A
0912A:  MOVWF  xD1
0912C:  MOVLB  0
0912E:  CALL   439A
09132:  MOVFF  01,BD
....................             Tsecadop[0]=CiclosPersonalizados[CicloLibre-1].Segundosec-(Tsecadop[1]*10); 
09136:  MOVLW  01
09138:  MOVLB  3
0913A:  SUBWF  x28,W
0913C:  MULLW  0A
0913E:  MOVF   FF3,W
09140:  CLRF   xC7
09142:  MOVWF  xC6
09144:  MOVLW  05
09146:  ADDWF  xC6,W
09148:  MOVWF  01
0914A:  MOVLW  00
0914C:  ADDWFC xC7,W
0914E:  MOVWF  03
09150:  MOVF   01,W
09152:  ADDLW  9E
09154:  MOVWF  FE9
09156:  MOVLW  03
09158:  ADDWFC 03,W
0915A:  MOVWF  FEA
0915C:  MOVFF  FEF,3C6
09160:  MOVFF  BD,3C8
09164:  MOVLW  0A
09166:  MOVWF  xC9
09168:  MOVLB  0
0916A:  CALL   2A1E
0916E:  MOVF   01,W
09170:  MOVLB  3
09172:  SUBWF  xC6,W
09174:  MOVLB  0
09176:  MOVWF  xBC
09178:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x80 && CicloLibre>0){//80, NivelDesfogue          
0917A:  MOVF   34,W
0917C:  SUBLW  80
0917E:  BNZ   91CA
09180:  MOVF   x28,F
09182:  BZ    91CA
....................             printf("page Nivel"); 
09184:  MOVLW  F0
09186:  MOVWF  FF6
09188:  MOVLW  0E
0918A:  MOVWF  FF7
0918C:  MOVLW  00
0918E:  MOVWF  FF8
09190:  MOVLB  0
09192:  CALL   348A
....................             SendDataDisplay();      
09196:  CALL   34BC
....................             Nivel=CiclosPersonalizados[CicloLibre-1].NivelDesfogue;          
0919A:  MOVLW  01
0919C:  MOVLB  3
0919E:  SUBWF  x28,W
091A0:  MULLW  0A
091A2:  MOVF   FF3,W
091A4:  CLRF   xC7
091A6:  MOVWF  xC6
091A8:  MOVLW  08
091AA:  ADDWF  xC6,W
091AC:  MOVWF  01
091AE:  MOVLW  00
091B0:  ADDWFC xC7,W
091B2:  MOVWF  03
091B4:  MOVF   01,W
091B6:  ADDLW  9E
091B8:  MOVWF  FE9
091BA:  MOVLW  03
091BC:  ADDWFC 03,W
091BE:  MOVWF  FEA
091C0:  MOVF   FEF,W
091C2:  CLRF   03
091C4:  MOVWF  x49
091C6:  MOVFF  03,34A
....................       } 
....................        
....................       if((RX_Buffer[4]==0x70 || UP)&& CicloLibre>0){//70, Iniciar Ciclo 
091CA:  MOVF   34,W
091CC:  SUBLW  70
091CE:  BZ    91D6
091D0:  BSF    F93.0
091D2:  BTFSC  F81.0
091D4:  BRA    96B6
091D6:  MOVF   x28,F
091D8:  BTFSC  FD8.2
091DA:  BRA    96B6
....................          delay_ms(100); 
091DC:  MOVLW  64
091DE:  MOVWF  xDB
091E0:  MOVLB  0
091E2:  CALL   179E
....................          if((RX_Buffer[4]==0x70 || UP)&& CicloLibre>0){ 
091E6:  MOVF   34,W
091E8:  SUBLW  70
091EA:  BZ    91F2
091EC:  BSF    F93.0
091EE:  BTFSC  F81.0
091F0:  BRA    96B4
091F2:  MOVLB  3
091F4:  MOVF   x28,F
091F6:  BTFSS  FD8.2
091F8:  BRA    91FE
091FA:  MOVLB  0
091FC:  BRA    96B4
....................             printf("page Funcionamiento"); 
091FE:  MOVLW  FC
09200:  MOVWF  FF6
09202:  MOVLW  0E
09204:  MOVWF  FF7
09206:  MOVLW  00
09208:  MOVWF  FF8
0920A:  MOVLB  0
0920C:  CALL   348A
....................             SendDataDisplay();        
09210:  CALL   34BC
....................             Libre=ON; 
09214:  BSF    xA3.4
....................             if(CiclosPersonalizados[CicloLibre-1].NivelDesfogue>5){ 
09216:  MOVLW  01
09218:  MOVLB  3
0921A:  SUBWF  x28,W
0921C:  MULLW  0A
0921E:  MOVF   FF3,W
09220:  CLRF   xC7
09222:  MOVWF  xC6
09224:  MOVLW  08
09226:  ADDWF  xC6,W
09228:  MOVWF  01
0922A:  MOVLW  00
0922C:  ADDWFC xC7,W
0922E:  MOVWF  03
09230:  MOVF   01,W
09232:  ADDLW  9E
09234:  MOVWF  FE9
09236:  MOVLW  03
09238:  ADDWFC 03,W
0923A:  MOVWF  FEA
0923C:  MOVF   FEF,W
0923E:  SUBLW  05
09240:  BTFSC  FD8.0
09242:  BRA    945A
....................                ConfiguraCiclo(extraeDecima(CiclosPersonalizados[CicloLibre-1].Segundoest), 
....................                            CiclosPersonalizados[CicloLibre-1].Segundoest/10, 
....................                            extraeDecima(CiclosPersonalizados[CicloLibre-1].Minutoest), 
....................                            CiclosPersonalizados[CicloLibre-1].Minutoest/10, 
....................                            extraeDecima(CiclosPersonalizados[CicloLibre-1].Segundosec), 
....................                            CiclosPersonalizados[CicloLibre-1].Segundosec/10, 
....................                            extraeDecima(CiclosPersonalizados[CicloLibre-1].Minutosec), 
....................                            CiclosPersonalizados[CicloLibre-1].Minutosec/10,0,CicloLibre+4,CiclosPersonalizados[CicloLibre-1].Temperatura);             
09244:  MOVLW  01
09246:  SUBWF  x28,W
09248:  MULLW  0A
0924A:  MOVF   FF3,W
0924C:  CLRF   xC7
0924E:  MOVWF  xC6
09250:  MOVLW  03
09252:  ADDWF  xC6,W
09254:  MOVWF  01
09256:  MOVLW  00
09258:  ADDWFC xC7,W
0925A:  MOVWF  03
0925C:  MOVF   01,W
0925E:  ADDLW  9E
09260:  MOVWF  FE9
09262:  MOVLW  03
09264:  ADDWFC 03,W
09266:  MOVWF  FEA
09268:  MOVFF  FEF,3C6
0926C:  MOVFF  3C6,3CD
09270:  MOVLB  0
09272:  CALL   49E4
09276:  MOVFF  01,3C6
0927A:  MOVLW  01
0927C:  MOVLB  3
0927E:  SUBWF  x28,W
09280:  MULLW  0A
09282:  MOVF   FF3,W
09284:  CLRF   xC8
09286:  MOVWF  xC7
09288:  MOVLW  03
0928A:  ADDWF  xC7,W
0928C:  MOVWF  01
0928E:  MOVLW  00
09290:  ADDWFC xC8,W
09292:  MOVWF  03
09294:  MOVF   01,W
09296:  ADDLW  9E
09298:  MOVWF  FE9
0929A:  MOVLW  03
0929C:  ADDWFC 03,W
0929E:  MOVWF  FEA
092A0:  MOVFF  FEF,3D0
092A4:  MOVLW  0A
092A6:  MOVWF  xD1
092A8:  MOVLB  0
092AA:  CALL   439A
092AE:  MOVFF  01,3C7
092B2:  MOVLW  01
092B4:  MOVLB  3
092B6:  SUBWF  x28,W
092B8:  MULLW  0A
092BA:  MOVF   FF3,W
092BC:  CLRF   xC9
092BE:  MOVWF  xC8
092C0:  MOVLW  09
092C2:  ADDWF  xC8,W
092C4:  MOVWF  01
092C6:  MOVLW  00
092C8:  ADDWFC xC9,W
092CA:  MOVWF  03
092CC:  MOVF   01,W
092CE:  ADDLW  9E
092D0:  MOVWF  FE9
092D2:  MOVLW  03
092D4:  ADDWFC 03,W
092D6:  MOVWF  FEA
092D8:  MOVFF  FEF,3C8
092DC:  MOVFF  3C8,3CD
092E0:  MOVLB  0
092E2:  CALL   49E4
092E6:  MOVFF  01,3C8
092EA:  MOVLW  01
092EC:  MOVLB  3
092EE:  SUBWF  x28,W
092F0:  MULLW  0A
092F2:  MOVF   FF3,W
092F4:  CLRF   xCA
092F6:  MOVWF  xC9
092F8:  MOVLW  09
092FA:  ADDWF  xC9,W
092FC:  MOVWF  01
092FE:  MOVLW  00
09300:  ADDWFC xCA,W
09302:  MOVWF  03
09304:  MOVF   01,W
09306:  ADDLW  9E
09308:  MOVWF  FE9
0930A:  MOVLW  03
0930C:  ADDWFC 03,W
0930E:  MOVWF  FEA
09310:  MOVFF  FEF,3D0
09314:  MOVLW  0A
09316:  MOVWF  xD1
09318:  MOVLB  0
0931A:  CALL   439A
0931E:  MOVFF  01,3C9
09322:  MOVLW  01
09324:  MOVLB  3
09326:  SUBWF  x28,W
09328:  MULLW  0A
0932A:  MOVF   FF3,W
0932C:  CLRF   xCB
0932E:  MOVWF  xCA
09330:  MOVLW  05
09332:  ADDWF  xCA,W
09334:  MOVWF  01
09336:  MOVLW  00
09338:  ADDWFC xCB,W
0933A:  MOVWF  03
0933C:  MOVF   01,W
0933E:  ADDLW  9E
09340:  MOVWF  FE9
09342:  MOVLW  03
09344:  ADDWFC 03,W
09346:  MOVWF  FEA
09348:  MOVFF  FEF,3CA
0934C:  MOVFF  3CA,3CD
09350:  MOVLB  0
09352:  CALL   49E4
09356:  MOVFF  01,3CA
0935A:  MOVLW  01
0935C:  MOVLB  3
0935E:  SUBWF  x28,W
09360:  MULLW  0A
09362:  MOVF   FF3,W
09364:  CLRF   xCC
09366:  MOVWF  xCB
09368:  MOVLW  05
0936A:  ADDWF  xCB,W
0936C:  MOVWF  01
0936E:  MOVLW  00
09370:  ADDWFC xCC,W
09372:  MOVWF  03
09374:  MOVF   01,W
09376:  ADDLW  9E
09378:  MOVWF  FE9
0937A:  MOVLW  03
0937C:  ADDWFC 03,W
0937E:  MOVWF  FEA
09380:  MOVFF  FEF,3D0
09384:  MOVLW  0A
09386:  MOVWF  xD1
09388:  MOVLB  0
0938A:  CALL   439A
0938E:  MOVFF  01,3CB
09392:  MOVLW  01
09394:  MOVLB  3
09396:  SUBWF  x28,W
09398:  MULLW  0A
0939A:  MOVF   FF3,W
0939C:  CLRF   xCD
0939E:  MOVWF  xCC
093A0:  MOVLW  04
093A2:  ADDWF  xCC,W
093A4:  MOVWF  01
093A6:  MOVLW  00
093A8:  ADDWFC xCD,W
093AA:  MOVWF  03
093AC:  MOVF   01,W
093AE:  ADDLW  9E
093B0:  MOVWF  FE9
093B2:  MOVLW  03
093B4:  ADDWFC 03,W
093B6:  MOVWF  FEA
093B8:  MOVFF  FEF,3CC
093BC:  MOVFF  3CC,3CD
093C0:  MOVLB  0
093C2:  CALL   49E4
093C6:  MOVFF  01,3CC
093CA:  MOVLW  01
093CC:  MOVLB  3
093CE:  SUBWF  x28,W
093D0:  MULLW  0A
093D2:  MOVF   FF3,W
093D4:  CLRF   xCE
093D6:  MOVWF  xCD
093D8:  MOVLW  04
093DA:  ADDWF  xCD,W
093DC:  MOVWF  01
093DE:  MOVLW  00
093E0:  ADDWFC xCE,W
093E2:  MOVWF  03
093E4:  MOVF   01,W
093E6:  ADDLW  9E
093E8:  MOVWF  FE9
093EA:  MOVLW  03
093EC:  ADDWFC 03,W
093EE:  MOVWF  FEA
093F0:  MOVFF  FEF,3D0
093F4:  MOVLW  0A
093F6:  MOVWF  xD1
093F8:  MOVLB  0
093FA:  CALL   439A
093FE:  MOVFF  01,3CD
09402:  MOVLW  04
09404:  MOVLB  3
09406:  ADDWF  x28,W
09408:  MOVWF  xCE
0940A:  MOVLW  01
0940C:  SUBWF  x28,W
0940E:  MULLW  0A
09410:  MOVF   FF3,W
09412:  CLRF   xD0
09414:  MOVWF  xCF
09416:  MOVLW  9E
09418:  ADDWF  xCF,W
0941A:  MOVWF  FE9
0941C:  MOVLW  03
0941E:  ADDWFC xD0,W
09420:  MOVWF  FEA
09422:  MOVFF  FEF,3CF
09426:  MOVFF  3C6,3D0
0942A:  MOVFF  3C7,3D1
0942E:  MOVFF  3C8,3D2
09432:  MOVFF  3C9,3D3
09436:  MOVFF  3CA,3D4
0943A:  MOVFF  3CB,3D5
0943E:  MOVFF  3CC,3D6
09442:  MOVFF  01,3D7
09446:  CLRF   xD8
09448:  MOVFF  3CE,3D9
0944C:  MOVFF  3CF,3DA
09450:  MOVLB  0
09452:  CALL   4444
....................             }else{ 
09456:  BRA    96B4
09458:  MOVLB  3
....................                ConfiguraCiclo(extraeDecima(CiclosPersonalizados[CicloLibre-1].Segundoest), 
....................                            CiclosPersonalizados[CicloLibre-1].Segundoest/10, 
....................                            extraeDecima(CiclosPersonalizados[CicloLibre-1].Minutoest), 
....................                            CiclosPersonalizados[CicloLibre-1].Minutoest/10, 
....................                            extraeDecima(CiclosPersonalizados[CicloLibre-1].Segundosec), 
....................                            CiclosPersonalizados[CicloLibre-1].Segundosec/10, 
....................                            extraeDecima(CiclosPersonalizados[CicloLibre-1].Minutosec), 
....................                            CiclosPersonalizados[CicloLibre-1].Minutosec/10,1,CicloLibre+4,CiclosPersonalizados[CicloLibre-1].Temperatura);             
0945A:  MOVLW  01
0945C:  SUBWF  x28,W
0945E:  MULLW  0A
09460:  MOVF   FF3,W
09462:  CLRF   xC7
09464:  MOVWF  xC6
09466:  MOVLW  03
09468:  ADDWF  xC6,W
0946A:  MOVWF  01
0946C:  MOVLW  00
0946E:  ADDWFC xC7,W
09470:  MOVWF  03
09472:  MOVF   01,W
09474:  ADDLW  9E
09476:  MOVWF  FE9
09478:  MOVLW  03
0947A:  ADDWFC 03,W
0947C:  MOVWF  FEA
0947E:  MOVFF  FEF,3C6
09482:  MOVFF  3C6,3CD
09486:  MOVLB  0
09488:  CALL   49E4
0948C:  MOVFF  01,3C6
09490:  MOVLW  01
09492:  MOVLB  3
09494:  SUBWF  x28,W
09496:  MULLW  0A
09498:  MOVF   FF3,W
0949A:  CLRF   xC8
0949C:  MOVWF  xC7
0949E:  MOVLW  03
094A0:  ADDWF  xC7,W
094A2:  MOVWF  01
094A4:  MOVLW  00
094A6:  ADDWFC xC8,W
094A8:  MOVWF  03
094AA:  MOVF   01,W
094AC:  ADDLW  9E
094AE:  MOVWF  FE9
094B0:  MOVLW  03
094B2:  ADDWFC 03,W
094B4:  MOVWF  FEA
094B6:  MOVFF  FEF,3D0
094BA:  MOVLW  0A
094BC:  MOVWF  xD1
094BE:  MOVLB  0
094C0:  CALL   439A
094C4:  MOVFF  01,3C7
094C8:  MOVLW  01
094CA:  MOVLB  3
094CC:  SUBWF  x28,W
094CE:  MULLW  0A
094D0:  MOVF   FF3,W
094D2:  CLRF   xC9
094D4:  MOVWF  xC8
094D6:  MOVLW  09
094D8:  ADDWF  xC8,W
094DA:  MOVWF  01
094DC:  MOVLW  00
094DE:  ADDWFC xC9,W
094E0:  MOVWF  03
094E2:  MOVF   01,W
094E4:  ADDLW  9E
094E6:  MOVWF  FE9
094E8:  MOVLW  03
094EA:  ADDWFC 03,W
094EC:  MOVWF  FEA
094EE:  MOVFF  FEF,3C8
094F2:  MOVFF  3C8,3CD
094F6:  MOVLB  0
094F8:  CALL   49E4
094FC:  MOVFF  01,3C8
09500:  MOVLW  01
09502:  MOVLB  3
09504:  SUBWF  x28,W
09506:  MULLW  0A
09508:  MOVF   FF3,W
0950A:  CLRF   xCA
0950C:  MOVWF  xC9
0950E:  MOVLW  09
09510:  ADDWF  xC9,W
09512:  MOVWF  01
09514:  MOVLW  00
09516:  ADDWFC xCA,W
09518:  MOVWF  03
0951A:  MOVF   01,W
0951C:  ADDLW  9E
0951E:  MOVWF  FE9
09520:  MOVLW  03
09522:  ADDWFC 03,W
09524:  MOVWF  FEA
09526:  MOVFF  FEF,3D0
0952A:  MOVLW  0A
0952C:  MOVWF  xD1
0952E:  MOVLB  0
09530:  CALL   439A
09534:  MOVFF  01,3C9
09538:  MOVLW  01
0953A:  MOVLB  3
0953C:  SUBWF  x28,W
0953E:  MULLW  0A
09540:  MOVF   FF3,W
09542:  CLRF   xCB
09544:  MOVWF  xCA
09546:  MOVLW  05
09548:  ADDWF  xCA,W
0954A:  MOVWF  01
0954C:  MOVLW  00
0954E:  ADDWFC xCB,W
09550:  MOVWF  03
09552:  MOVF   01,W
09554:  ADDLW  9E
09556:  MOVWF  FE9
09558:  MOVLW  03
0955A:  ADDWFC 03,W
0955C:  MOVWF  FEA
0955E:  MOVFF  FEF,3CA
09562:  MOVFF  3CA,3CD
09566:  MOVLB  0
09568:  CALL   49E4
0956C:  MOVFF  01,3CA
09570:  MOVLW  01
09572:  MOVLB  3
09574:  SUBWF  x28,W
09576:  MULLW  0A
09578:  MOVF   FF3,W
0957A:  CLRF   xCC
0957C:  MOVWF  xCB
0957E:  MOVLW  05
09580:  ADDWF  xCB,W
09582:  MOVWF  01
09584:  MOVLW  00
09586:  ADDWFC xCC,W
09588:  MOVWF  03
0958A:  MOVF   01,W
0958C:  ADDLW  9E
0958E:  MOVWF  FE9
09590:  MOVLW  03
09592:  ADDWFC 03,W
09594:  MOVWF  FEA
09596:  MOVFF  FEF,3D0
0959A:  MOVLW  0A
0959C:  MOVWF  xD1
0959E:  MOVLB  0
095A0:  CALL   439A
095A4:  MOVFF  01,3CB
095A8:  MOVLW  01
095AA:  MOVLB  3
095AC:  SUBWF  x28,W
095AE:  MULLW  0A
095B0:  MOVF   FF3,W
095B2:  CLRF   xCD
095B4:  MOVWF  xCC
095B6:  MOVLW  04
095B8:  ADDWF  xCC,W
095BA:  MOVWF  01
095BC:  MOVLW  00
095BE:  ADDWFC xCD,W
095C0:  MOVWF  03
095C2:  MOVF   01,W
095C4:  ADDLW  9E
095C6:  MOVWF  FE9
095C8:  MOVLW  03
095CA:  ADDWFC 03,W
095CC:  MOVWF  FEA
095CE:  MOVFF  FEF,3CC
095D2:  MOVFF  3CC,3CD
095D6:  MOVLB  0
095D8:  CALL   49E4
095DC:  MOVFF  01,3CC
095E0:  MOVLW  01
095E2:  MOVLB  3
095E4:  SUBWF  x28,W
095E6:  MULLW  0A
095E8:  MOVF   FF3,W
095EA:  CLRF   xCE
095EC:  MOVWF  xCD
095EE:  MOVLW  04
095F0:  ADDWF  xCD,W
095F2:  MOVWF  01
095F4:  MOVLW  00
095F6:  ADDWFC xCE,W
095F8:  MOVWF  03
095FA:  MOVF   01,W
095FC:  ADDLW  9E
095FE:  MOVWF  FE9
09600:  MOVLW  03
09602:  ADDWFC 03,W
09604:  MOVWF  FEA
09606:  MOVFF  FEF,3D0
0960A:  MOVLW  0A
0960C:  MOVWF  xD1
0960E:  MOVLB  0
09610:  CALL   439A
09614:  MOVFF  01,3CD
09618:  MOVLW  04
0961A:  MOVLB  3
0961C:  ADDWF  x28,W
0961E:  MOVWF  xCE
09620:  MOVLW  01
09622:  SUBWF  x28,W
09624:  MULLW  0A
09626:  MOVF   FF3,W
09628:  CLRF   xD0
0962A:  MOVWF  xCF
0962C:  MOVLW  9E
0962E:  ADDWF  xCF,W
09630:  MOVWF  FE9
09632:  MOVLW  03
09634:  ADDWFC xD0,W
09636:  MOVWF  FEA
09638:  MOVFF  FEF,3CF
0963C:  MOVFF  3C6,3D0
09640:  MOVFF  3C7,3D1
09644:  MOVFF  3C8,3D2
09648:  MOVFF  3C9,3D3
0964C:  MOVFF  3CA,3D4
09650:  MOVFF  3CB,3D5
09654:  MOVFF  3CC,3D6
09658:  MOVFF  01,3D7
0965C:  MOVLW  01
0965E:  MOVWF  xD8
09660:  MOVFF  3CE,3D9
09664:  MOVFF  3CF,3DA
09668:  MOVLB  0
0966A:  CALL   4444
....................                NivelSeleccionado=4995*CiclosPersonalizados[CicloLibre-1].NivelDesfogue; 
0966E:  MOVLW  01
09670:  MOVLB  3
09672:  SUBWF  x28,W
09674:  MULLW  0A
09676:  MOVF   FF3,W
09678:  CLRF   xC7
0967A:  MOVWF  xC6
0967C:  MOVLW  08
0967E:  ADDWF  xC6,W
09680:  MOVWF  01
09682:  MOVLW  00
09684:  ADDWFC xC7,W
09686:  MOVWF  03
09688:  MOVF   01,W
0968A:  ADDLW  9E
0968C:  MOVWF  FE9
0968E:  MOVLW  03
09690:  ADDWFC 03,W
09692:  MOVWF  FEA
09694:  MOVFF  FEF,3C6
09698:  MOVLW  13
0969A:  MOVWF  xC8
0969C:  MOVLW  83
0969E:  MOVWF  xC7
096A0:  CLRF   xCA
096A2:  MOVFF  3C6,3C9
096A6:  MOVLB  0
096A8:  CALL   3568
096AC:  MOVFF  02,354
096B0:  MOVFF  01,353
096B4:  MOVLB  3
....................             } 
....................          } 
....................       } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==15){//Menu de Clave Correcta 
096B6:  MOVF   x34,W
096B8:  SUBLW  0F
096BA:  BNZ   96F2
....................       if(!entro){ 
096BC:  MOVLB  0
096BE:  BTFSC  xA3.6
096C0:  BRA    96DC
....................          delay_ms(2000); 
096C2:  MOVLW  08
096C4:  MOVLB  3
096C6:  MOVWF  xC6
096C8:  MOVLW  FA
096CA:  MOVWF  xDB
096CC:  MOVLB  0
096CE:  CALL   179E
096D2:  MOVLB  3
096D4:  DECFSZ xC6,F
096D6:  BRA    96C8
....................          entro=ON; 
096D8:  MOVLB  0
096DA:  BSF    xA3.6
....................       } 
....................       printf("page MenuPrincipal"); 
096DC:  MOVLW  10
096DE:  MOVWF  FF6
096E0:  MOVLW  0F
096E2:  MOVWF  FF7
096E4:  MOVLW  00
096E6:  MOVWF  FF8
096E8:  CALL   348A
....................       SendDataDisplay(); 
096EC:  CALL   34BC
096F0:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................     if(Menu==16){//Menu de Clave InCorrecta 
096F2:  MOVF   x34,W
096F4:  SUBLW  10
096F6:  BNZ   972E
....................       if(!entro){ 
096F8:  MOVLB  0
096FA:  BTFSC  xA3.6
096FC:  BRA    9718
....................          delay_ms(2000); 
096FE:  MOVLW  08
09700:  MOVLB  3
09702:  MOVWF  xC6
09704:  MOVLW  FA
09706:  MOVWF  xDB
09708:  MOVLB  0
0970A:  CALL   179E
0970E:  MOVLB  3
09710:  DECFSZ xC6,F
09712:  BRA    9704
....................          entro=ON; 
09714:  MOVLB  0
09716:  BSF    xA3.6
....................       } 
....................       printf("page Clave"); 
09718:  MOVLW  24
0971A:  MOVWF  FF6
0971C:  MOVLW  0F
0971E:  MOVWF  FF7
09720:  MOVLW  00
09722:  MOVWF  FF8
09724:  CALL   348A
....................       SendDataDisplay(); 
09728:  CALL   34BC
0972C:  MOVLB  3
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    if(Menu==20){ // Este es el menu de cuando el proceso se inicio. 
0972E:  MOVF   x34,W
09730:  SUBLW  14
09732:  BTFSS  FD8.2
09734:  GOTO   A626
....................    //Lectura_Esclavos(); 
....................     
....................    if(!Libre){ 
09738:  MOVLB  0
0973A:  BTFSC  xA3.4
0973C:  BRA    97C0
....................       printf("t2f.txt=\"%u\"",CicloSeleccionado); 
0973E:  MOVLW  30
09740:  MOVWF  FF6
09742:  MOVLW  0F
09744:  MOVWF  FF7
09746:  MOVLW  00
09748:  MOVWF  FF8
0974A:  MOVLW  09
0974C:  MOVLB  3
0974E:  MOVWF  xCA
09750:  MOVLB  0
09752:  CALL   4368
09756:  MOVFF  33A,3C8
0975A:  MOVLW  1B
0975C:  MOVLB  3
0975E:  MOVWF  xC9
09760:  MOVLB  0
09762:  CALL   43C6
09766:  MOVLW  22
09768:  BTFSS  F9E.4
0976A:  BRA    9768
0976C:  MOVWF  FAD
....................       SendDataDisplay(); 
0976E:  CALL   34BC
....................       printf("t3f.txt=\"%s\"",texto[CicloSeleccionado-1]); 
09772:  MOVLW  01
09774:  MOVLB  3
09776:  SUBWF  x3A,W
09778:  MULLW  14
0977A:  MOVF   FF3,W
0977C:  CLRF   03
0977E:  MOVWF  xC6
09780:  MOVLW  3E
09782:  MOVWF  FF6
09784:  MOVLW  0F
09786:  MOVWF  FF7
09788:  MOVLW  00
0978A:  MOVWF  FF8
0978C:  MOVLW  09
0978E:  MOVWF  xCA
09790:  MOVLB  0
09792:  CALL   4368
09796:  MOVLW  50
09798:  MOVWF  FF6
0979A:  MOVLW  01
0979C:  MOVWF  FF7
0979E:  MOVLW  00
097A0:  MOVWF  FF8
097A2:  MOVLB  3
097A4:  MOVF   xC6,W
097A6:  ADDWF  FF6,F
097A8:  MOVLW  00
097AA:  ADDWFC FF7,F
097AC:  MOVLB  0
097AE:  CALL   348A
097B2:  MOVLW  22
097B4:  BTFSS  F9E.4
097B6:  BRA    97B4
097B8:  MOVWF  FAD
....................       SendDataDisplay(); 
097BA:  CALL   34BC
....................    }else{ 
097BE:  BRA    980E
....................       printf("t2f.txt=\"%u\"",CicloLibre+4); 
097C0:  MOVLW  04
097C2:  MOVLB  3
097C4:  ADDWF  x28,W
097C6:  MOVWF  xC6
097C8:  MOVLW  4C
097CA:  MOVWF  FF6
097CC:  MOVLW  0F
097CE:  MOVWF  FF7
097D0:  MOVLW  00
097D2:  MOVWF  FF8
097D4:  MOVLW  09
097D6:  MOVWF  xCA
097D8:  MOVLB  0
097DA:  CALL   4368
097DE:  MOVFF  3C6,3C8
097E2:  MOVLW  1B
097E4:  MOVLB  3
097E6:  MOVWF  xC9
097E8:  MOVLB  0
097EA:  CALL   43C6
097EE:  MOVLW  22
097F0:  BTFSS  F9E.4
097F2:  BRA    97F0
097F4:  MOVWF  FAD
....................       SendDataDisplay(); 
097F6:  CALL   34BC
....................       printf("t3f.txt=\"Personalizado\""); 
097FA:  MOVLW  5A
097FC:  MOVWF  FF6
097FE:  MOVLW  0F
09800:  MOVWF  FF7
09802:  MOVLW  00
09804:  MOVWF  FF8
09806:  CALL   348A
....................       SendDataDisplay(); 
0980A:  CALL   34BC
....................    } 
....................     
....................    if(RIGHT){ 
0980E:  BSF    F93.2
09810:  BTFSC  F81.2
09812:  BRA    982A
....................       //glcd_init(ON); 
....................       delay_ms(1000); 
09814:  MOVLW  04
09816:  MOVLB  3
09818:  MOVWF  xC6
0981A:  MOVLW  FA
0981C:  MOVWF  xDB
0981E:  MOVLB  0
09820:  CALL   179E
09824:  MOVLB  3
09826:  DECFSZ xC6,F
09828:  BRA    981A
....................       /*flagCalentando=OFF; 
....................       flagDesfogando=OFF; 
....................       flagEsterilizando=OFF;*/ 
....................    } 
....................     
....................    if(PresionCamara>275){ 
0982A:  MOVLB  3
0982C:  MOVF   x4E,W
0982E:  SUBLW  00
09830:  BC    9842
09832:  XORLW  FF
09834:  BNZ   983C
09836:  MOVF   x4D,W
09838:  SUBLW  13
0983A:  BC    9842
....................       AlarmaPresion=ON; 
0983C:  MOVLB  0
0983E:  BSF    xA3.3
09840:  MOVLB  3
....................    } 
....................     
....................    if(Temperatura>105 && PresionCamara<10 && !Desfogando){ 
09842:  CLRF   xCD
09844:  CLRF   xCC
09846:  MOVLW  52
09848:  MOVWF  xCB
0984A:  MOVLW  85
0984C:  MOVWF  xCA
0984E:  MOVFF  315,3D1
09852:  MOVFF  314,3D0
09856:  MOVFF  313,3CF
0985A:  MOVFF  312,3CE
0985E:  MOVLB  0
09860:  CALL   29A4
09864:  BNC   9886
09866:  MOVLB  3
09868:  MOVF   x4E,F
0986A:  BTFSC  FD8.2
0986C:  BRA    9872
0986E:  MOVLB  0
09870:  BRA    9886
09872:  MOVF   x4D,W
09874:  SUBLW  09
09876:  BTFSC  FD8.0
09878:  BRA    987E
0987A:  MOVLB  0
0987C:  BRA    9886
0987E:  MOVLB  0
09880:  BTFSC  xA0.5
09882:  BRA    9886
....................       AlarmaCiclo=ON; 
09884:  BSF    x9F.6
....................    } 
....................     
....................    if(TiempoCiclo>3000){ 
09886:  MOVF   xA5,W
09888:  SUBLW  0A
0988A:  BC    98BE
0988C:  XORLW  FF
0988E:  BNZ   9896
09890:  MOVF   xA4,W
09892:  SUBLW  B8
09894:  BC    98BE
....................       if(TiempoCiclo>5000) 
09896:  MOVF   xA5,W
09898:  SUBLW  12
0989A:  BC    98A8
0989C:  XORLW  FF
0989E:  BNZ   98A6
098A0:  MOVF   xA4,W
098A2:  SUBLW  88
098A4:  BC    98A8
....................          AlarmaTiempoProlongado=ON; 
098A6:  BSF    x9F.0
....................       if(PresionCamara<10){ 
098A8:  MOVLB  3
098AA:  MOVF   x4E,F
098AC:  BNZ   98BA
098AE:  MOVF   x4D,W
098B0:  SUBLW  09
098B2:  BNC   98BA
....................          AlarmaTiempoProlongado=ON; 
098B4:  MOVLB  0
098B6:  BSF    x9F.0
098B8:  MOVLB  3
....................       } 
....................    }else{ 
098BA:  BRA    98C2
098BC:  MOVLB  0
....................       AlarmaTiempoProlongado=OFF; 
098BE:  BCF    x9F.0
098C0:  MOVLB  3
....................    } 
....................     
....................    if(Temperatura>Setpoint+3.0){ 
098C2:  CLRF   xDC
098C4:  MOVFF  33B,3DB
098C8:  MOVLB  0
098CA:  CALL   17C6
098CE:  BCF    FD8.1
098D0:  MOVFF  03,3DE
098D4:  MOVFF  02,3DD
098D8:  MOVFF  01,3DC
098DC:  MOVFF  00,3DB
098E0:  MOVLB  3
098E2:  CLRF   xE2
098E4:  CLRF   xE1
098E6:  MOVLW  40
098E8:  MOVWF  xE0
098EA:  MOVLW  80
098EC:  MOVWF  xDF
098EE:  MOVLB  0
098F0:  CALL   195A
098F4:  MOVFF  03,3CD
098F8:  MOVFF  02,3CC
098FC:  MOVFF  01,3CB
09900:  MOVFF  00,3CA
09904:  MOVFF  315,3D1
09908:  MOVFF  314,3D0
0990C:  MOVFF  313,3CF
09910:  MOVFF  312,3CE
09914:  CALL   29A4
09918:  BNC   991C
....................       AlarmaSobreTemperatura=ON; 
0991A:  BSF    x9F.1
....................    } 
....................     
....................    if(TiempoLlenado>600){ 
0991C:  MOVF   xA7,W
0991E:  SUBLW  01
09920:  BC    9930
09922:  XORLW  FF
09924:  BNZ   992C
09926:  MOVF   xA6,W
09928:  SUBLW  58
0992A:  BC    9930
....................       AlarmaLlenado=ON; 
0992C:  BSF    x9F.2
....................    }else{ 
0992E:  BRA    9932
....................       AlarmaLlenado=OFF; 
09930:  BCF    x9F.2
....................    } 
....................     
....................    if(!TERM){ 
09932:  BSF    F93.5
09934:  BTFSS  F81.5
09936:  BRA    9958
....................       delay_ms(1500); 
09938:  MOVLW  06
0993A:  MOVLB  3
0993C:  MOVWF  xC6
0993E:  MOVLW  FA
09940:  MOVWF  xDB
09942:  MOVLB  0
09944:  CALL   179E
09948:  MOVLB  3
0994A:  DECFSZ xC6,F
0994C:  BRA    993E
....................       if(!TERM){ 
0994E:  BSF    F93.5
09950:  BTFSS  F81.5
09952:  BRA    995A
....................          AlarmaTermostato=ON; 
09954:  MOVLB  0
09956:  BSF    x9F.3
09958:  MOVLB  3
....................       } 
....................    } 
....................     
....................    if(!DOOR){ 
0995A:  BSF    F93.6
0995C:  BTFSS  F81.6
0995E:  BRA    9974
....................       //Desfogue_off; 
....................       //Solenoide_off; 
....................       //Agua_off; 
....................       //Bomba_off; 
....................       //Aire=OFF; 
....................       if(!Secando && !Finalizo && !Desfogando){ 
09960:  MOVLB  0
09962:  BTFSC  xA0.3
09964:  BRA    9970
09966:  BTFSC  xA3.2
09968:  BRA    9970
0996A:  BTFSC  xA0.5
0996C:  BRA    9970
....................          AlarmaPuerta=ON; 
0996E:  BSF    x9F.4
....................       } 
....................    }else{ 
09970:  BRA    9978
09972:  MOVLB  3
....................       AlarmaPuerta=OFF; 
09974:  MOVLB  0
09976:  BCF    x9F.4
....................    } 
....................  
....................    if(!STOP){ 
09978:  BSF    F93.7
0997A:  BTFSS  F81.7
0997C:  BRA    9980
....................       AlarmaEmergencia=ON; 
0997E:  BSF    x9F.5
....................    } 
....................     
....................    if(AlarmaPuerta || AlarmaTermostato || AlarmaLlenado || AlarmaSobreTemperatura || AlarmaTiempoProlongado || AlarmaEmergencia || AlarmaPresion 
....................    || AlarmaCiclo){ 
09980:  BTFSC  x9F.4
09982:  BRA    99A0
09984:  BTFSC  x9F.3
09986:  BRA    99A0
09988:  BTFSC  x9F.2
0998A:  BRA    99A0
0998C:  BTFSC  x9F.1
0998E:  BRA    99A0
09990:  BTFSC  x9F.0
09992:  BRA    99A0
09994:  BTFSC  x9F.5
09996:  BRA    99A0
09998:  BTFSC  xA3.3
0999A:  BRA    99A0
0999C:  BTFSS  x9F.6
0999E:  BRA    9D22
....................       ActivaAlarma(1); 
099A0:  MOVLW  01
099A2:  MOVLB  3
099A4:  MOVWF  xC6
099A6:  MOVLB  0
099A8:  CALL   426C
....................       if(AlarmaEmergencia){ 
099AC:  BTFSS  x9F.5
099AE:  BRA    9A20
....................          printf("Funcionamiento.t4f.txt=\" Parada de Emergencia\""); 
099B0:  MOVLW  72
099B2:  MOVWF  FF6
099B4:  MOVLW  0F
099B6:  MOVWF  FF7
099B8:  MOVLW  00
099BA:  MOVWF  FF8
099BC:  CALL   348A
....................          SendDataDisplay(); 
099C0:  CALL   34BC
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
099C4:  MOVLW  A2
099C6:  MOVWF  FF6
099C8:  MOVLW  0F
099CA:  MOVWF  FF7
099CC:  MOVLW  00
099CE:  MOVWF  FF8
099D0:  CALL   348A
....................          SendDataDisplay(); 
099D4:  CALL   34BC
....................          Desfogue_on; 
099D8:  BSF    F8C.4
099DA:  BCF    F95.4
....................          SSR_off; 
099DC:  BSF    F8B.2
099DE:  BCF    F94.2
....................          Agua_off; 
099E0:  BCF    F8C.5
099E2:  BCF    F95.5
....................          Bomba_off; 
099E4:  BCF    F8C.6
099E6:  BCF    F95.6
....................          Aire=OFF; 
099E8:  BCF    xA3.7
....................          Esterilizando=OFF; 
099EA:  BCF    xA0.2
....................          Desfogando=OFF; 
099EC:  BCF    xA0.5
....................          DesfogueSuave=OFF; 
099EE:  BCF    xA0.6
....................          Esterilizando=OFF; 
099F0:  BCF    xA0.2
....................          //IniciaCiclo=OFF; 
....................          Controlando=0; 
099F2:  MOVLB  3
099F4:  CLRF   x2C
....................          if(!flagImprimir && ActivaImpresion==1){ 
099F6:  BTFSC  x29.6
099F8:  BRA    9A1C
099FA:  DECFSZ x2D,W
099FC:  BRA    9A1C
....................             Imprime=20; 
099FE:  MOVLW  14
09A00:  MOVWF  x7B
....................             Envio_Esclavos(); 
09A02:  MOVLB  0
09A04:  CALL   3E0E
....................             delay_ms(100); 
09A08:  MOVLW  64
09A0A:  MOVLB  3
09A0C:  MOVWF  xDB
09A0E:  MOVLB  0
09A10:  CALL   179E
....................             Imprime=10; 
09A14:  MOVLW  0A
09A16:  MOVLB  3
09A18:  MOVWF  x7B
....................             flagImprimir=1; 
09A1A:  BSF    x29.6
....................          } 
....................       }else if(AlarmaPuerta){ 
09A1C:  BRA    9D1E
09A1E:  MOVLB  0
09A20:  BTFSS  x9F.4
09A22:  BRA    9A68
....................             printf("Funcionamiento.t4f.txt=\" Puerta Abierta\""); 
09A24:  MOVLW  C6
09A26:  MOVWF  FF6
09A28:  MOVLW  0F
09A2A:  MOVWF  FF7
09A2C:  MOVLW  00
09A2E:  MOVWF  FF8
09A30:  CALL   348A
....................             SendDataDisplay(); 
09A34:  CALL   34BC
....................             printf("Funcionamiento.t5f.txt=\" Pausado\""); 
09A38:  MOVLW  F0
09A3A:  MOVWF  FF6
09A3C:  MOVLW  0F
09A3E:  MOVWF  FF7
09A40:  MOVLW  00
09A42:  MOVWF  FF8
09A44:  CALL   348A
....................             SendDataDisplay(); 
09A48:  CALL   34BC
....................             SSR_off; 
09A4C:  BSF    F8B.2
09A4E:  BCF    F94.2
....................             Agua_off; 
09A50:  BCF    F8C.5
09A52:  BCF    F95.5
....................             Bomba_off; 
09A54:  BCF    F8C.6
09A56:  BCF    F95.6
....................             Aire=OFF; 
09A58:  BCF    xA3.7
....................             IniciaLlenado=OFF; 
09A5A:  BCF    x9F.7
....................             IniciaCiclo=OFF; 
09A5C:  BCF    xA0.1
....................             Esterilizando=OFF; 
09A5E:  BCF    xA0.2
....................             Controlando=0; 
09A60:  MOVLB  3
09A62:  CLRF   x2C
....................       }else if(AlarmaLlenado){ 
09A64:  BRA    9D1E
09A66:  MOVLB  0
09A68:  BTFSS  x9F.2
09A6A:  BRA    9ADA
....................             printf("Funcionamiento.t4f.txt=\" Tiempo Llenado\""); 
09A6C:  MOVLW  12
09A6E:  MOVWF  FF6
09A70:  MOVLW  10
09A72:  MOVWF  FF7
09A74:  MOVLW  00
09A76:  MOVWF  FF8
09A78:  CALL   348A
....................             SendDataDisplay(); 
09A7C:  CALL   34BC
....................             printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
09A80:  MOVLW  3C
09A82:  MOVWF  FF6
09A84:  MOVLW  10
09A86:  MOVWF  FF7
09A88:  MOVLW  00
09A8A:  MOVWF  FF8
09A8C:  CALL   348A
....................             SendDataDisplay(); 
09A90:  CALL   34BC
....................             Desfogue_off; 
09A94:  BCF    F8C.4
09A96:  BCF    F95.4
....................             SSR_off; 
09A98:  BSF    F8B.2
09A9A:  BCF    F94.2
....................             Agua_off; 
09A9C:  BCF    F8C.5
09A9E:  BCF    F95.5
....................             Bomba_off; 
09AA0:  BCF    F8C.6
09AA2:  BCF    F95.6
....................             Aire=OFF; 
09AA4:  BCF    xA3.7
....................             IniciaLlenado=OFF; 
09AA6:  BCF    x9F.7
....................             IniciaCiclo=OFF; 
09AA8:  BCF    xA0.1
....................             Esterilizando=OFF; 
09AAA:  BCF    xA0.2
....................             Controlando=0; 
09AAC:  MOVLB  3
09AAE:  CLRF   x2C
....................             if(!flagImprimir && ActivaImpresion==1){ 
09AB0:  BTFSC  x29.6
09AB2:  BRA    9AD6
09AB4:  DECFSZ x2D,W
09AB6:  BRA    9AD6
....................                Imprime=21; 
09AB8:  MOVLW  15
09ABA:  MOVWF  x7B
....................                Envio_Esclavos(); 
09ABC:  MOVLB  0
09ABE:  CALL   3E0E
....................                delay_ms(100); 
09AC2:  MOVLW  64
09AC4:  MOVLB  3
09AC6:  MOVWF  xDB
09AC8:  MOVLB  0
09ACA:  CALL   179E
....................                Imprime=10; 
09ACE:  MOVLW  0A
09AD0:  MOVLB  3
09AD2:  MOVWF  x7B
....................                flagImprimir=1; 
09AD4:  BSF    x29.6
....................             } 
....................       }else if(AlarmaTermostato){ // Alarma de Termostato 
09AD6:  BRA    9D1E
09AD8:  MOVLB  0
09ADA:  BTFSS  x9F.3
09ADC:  BRA    9B54
....................             tiempo_esterilizacion=0;tiempo_secado=0;          
09ADE:  MOVLB  3
09AE0:  CLRF   x3E
09AE2:  CLRF   x3F
....................             printf("Funcionamiento.t4f.txt=\" Termostato\""); 
09AE4:  MOVLW  60
09AE6:  MOVWF  FF6
09AE8:  MOVLW  10
09AEA:  MOVWF  FF7
09AEC:  MOVLW  00
09AEE:  MOVWF  FF8
09AF0:  MOVLB  0
09AF2:  CALL   348A
....................             SendDataDisplay(); 
09AF6:  CALL   34BC
....................             printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
09AFA:  MOVLW  86
09AFC:  MOVWF  FF6
09AFE:  MOVLW  10
09B00:  MOVWF  FF7
09B02:  MOVLW  00
09B04:  MOVWF  FF8
09B06:  CALL   348A
....................             SendDataDisplay(); 
09B0A:  CALL   34BC
....................             Desfogue_on;             
09B0E:  BSF    F8C.4
09B10:  BCF    F95.4
....................             SSR_off; 
09B12:  BSF    F8B.2
09B14:  BCF    F94.2
....................             Agua_off; 
09B16:  BCF    F8C.5
09B18:  BCF    F95.5
....................             Bomba_off; 
09B1A:  BCF    F8C.6
09B1C:  BCF    F95.6
....................             Aire=OFF; 
09B1E:  BCF    xA3.7
....................             Esterilizando=OFF; 
09B20:  BCF    xA0.2
....................             Desfogando=OFF; 
09B22:  BCF    xA0.5
....................             IniciaCiclo=OFF; 
09B24:  BCF    xA0.1
....................             Controlando=0; 
09B26:  MOVLB  3
09B28:  CLRF   x2C
....................             if(!flagImprimir && ActivaImpresion==1){ 
09B2A:  BTFSC  x29.6
09B2C:  BRA    9B50
09B2E:  DECFSZ x2D,W
09B30:  BRA    9B50
....................                Imprime=22; 
09B32:  MOVLW  16
09B34:  MOVWF  x7B
....................                Envio_Esclavos(); 
09B36:  MOVLB  0
09B38:  CALL   3E0E
....................                delay_ms(100); 
09B3C:  MOVLW  64
09B3E:  MOVLB  3
09B40:  MOVWF  xDB
09B42:  MOVLB  0
09B44:  CALL   179E
....................                Imprime=10; 
09B48:  MOVLW  0A
09B4A:  MOVLB  3
09B4C:  MOVWF  x7B
....................                flagImprimir=1; 
09B4E:  BSF    x29.6
....................             } 
....................       }else if(AlarmaSobreTemperatura){ // Alarma de Sobre Temperatura 
09B50:  BRA    9D1E
09B52:  MOVLB  0
09B54:  BTFSS  x9F.1
09B56:  BRA    9BD2
....................          tiempo_esterilizacion=0;tiempo_secado=0;          
09B58:  MOVLB  3
09B5A:  CLRF   x3E
09B5C:  CLRF   x3F
....................          printf("Funcionamiento.t4f.txt=\" Sobretemperatura\""); 
09B5E:  MOVLW  AA
09B60:  MOVWF  FF6
09B62:  MOVLW  10
09B64:  MOVWF  FF7
09B66:  MOVLW  00
09B68:  MOVWF  FF8
09B6A:  MOVLB  0
09B6C:  CALL   348A
....................          SendDataDisplay(); 
09B70:  CALL   34BC
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
09B74:  MOVLW  D6
09B76:  MOVWF  FF6
09B78:  MOVLW  10
09B7A:  MOVWF  FF7
09B7C:  MOVLW  00
09B7E:  MOVWF  FF8
09B80:  CALL   348A
....................          SendDataDisplay();   
09B84:  CALL   34BC
....................          Desfogue_on; 
09B88:  BSF    F8C.4
09B8A:  BCF    F95.4
....................          SSR_off; 
09B8C:  BSF    F8B.2
09B8E:  BCF    F94.2
....................          Agua_off; 
09B90:  BCF    F8C.5
09B92:  BCF    F95.5
....................          Bomba_off; 
09B94:  BCF    F8C.6
09B96:  BCF    F95.6
....................          Aire=OFF; 
09B98:  BCF    xA3.7
....................          Controlando=0; 
09B9A:  MOVLB  3
09B9C:  CLRF   x2C
....................          IniciaLlenado=OFF; 
09B9E:  MOVLB  0
09BA0:  BCF    x9F.7
....................          IniciaCiclo=OFF; 
09BA2:  BCF    xA0.1
....................          Esterilizando=OFF; 
09BA4:  BCF    xA0.2
....................          if(!flagImprimir && ActivaImpresion==1){ 
09BA6:  MOVLB  3
09BA8:  BTFSC  x29.6
09BAA:  BRA    9BCE
09BAC:  DECFSZ x2D,W
09BAE:  BRA    9BCE
....................             Imprime=23; 
09BB0:  MOVLW  17
09BB2:  MOVWF  x7B
....................             Envio_Esclavos(); 
09BB4:  MOVLB  0
09BB6:  CALL   3E0E
....................             delay_ms(100); 
09BBA:  MOVLW  64
09BBC:  MOVLB  3
09BBE:  MOVWF  xDB
09BC0:  MOVLB  0
09BC2:  CALL   179E
....................             Imprime=10; 
09BC6:  MOVLW  0A
09BC8:  MOVLB  3
09BCA:  MOVWF  x7B
....................             flagImprimir=1; 
09BCC:  BSF    x29.6
....................          } 
....................       }else if(AlarmaTiempoProlongado){ // Alarma de Error de Tiempo: Error por exceso de tiempo de calentamiento. 
09BCE:  BRA    9D1E
09BD0:  MOVLB  0
09BD2:  BTFSS  x9F.0
09BD4:  BRA    9C48
....................          printf("Funcionamiento.t4f.txt=\" Tiempo Prolongado\""); 
09BD6:  MOVLW  FA
09BD8:  MOVWF  FF6
09BDA:  MOVLW  10
09BDC:  MOVWF  FF7
09BDE:  MOVLW  00
09BE0:  MOVWF  FF8
09BE2:  CALL   348A
....................          SendDataDisplay(); 
09BE6:  CALL   34BC
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
09BEA:  MOVLW  26
09BEC:  MOVWF  FF6
09BEE:  MOVLW  11
09BF0:  MOVWF  FF7
09BF2:  MOVLW  00
09BF4:  MOVWF  FF8
09BF6:  CALL   348A
....................          SendDataDisplay(); 
09BFA:  CALL   34BC
....................          Desfogue_on; 
09BFE:  BSF    F8C.4
09C00:  BCF    F95.4
....................          SSR_off; 
09C02:  BSF    F8B.2
09C04:  BCF    F94.2
....................          Agua_off; 
09C06:  BCF    F8C.5
09C08:  BCF    F95.5
....................          Bomba_off; 
09C0A:  BCF    F8C.6
09C0C:  BCF    F95.6
....................          Aire=OFF; 
09C0E:  BCF    xA3.7
....................          Controlando=0; 
09C10:  MOVLB  3
09C12:  CLRF   x2C
....................          IniciaLlenado=OFF; 
09C14:  MOVLB  0
09C16:  BCF    x9F.7
....................          IniciaCiclo=OFF; 
09C18:  BCF    xA0.1
....................          Esterilizando=OFF; 
09C1A:  BCF    xA0.2
....................          if(!flagImprimir && ActivaImpresion==1){ 
09C1C:  MOVLB  3
09C1E:  BTFSC  x29.6
09C20:  BRA    9C44
09C22:  DECFSZ x2D,W
09C24:  BRA    9C44
....................             Imprime=24; 
09C26:  MOVLW  18
09C28:  MOVWF  x7B
....................             Envio_Esclavos(); 
09C2A:  MOVLB  0
09C2C:  CALL   3E0E
....................             delay_ms(100); 
09C30:  MOVLW  64
09C32:  MOVLB  3
09C34:  MOVWF  xDB
09C36:  MOVLB  0
09C38:  CALL   179E
....................             Imprime=10; 
09C3C:  MOVLW  0A
09C3E:  MOVLB  3
09C40:  MOVWF  x7B
....................             flagImprimir=1; 
09C42:  BSF    x29.6
....................          } 
....................       }else if(AlarmaPresion){ // Alarma de Error de SobrePresion: Error por exceso de Presion. 
09C44:  BRA    9D1E
09C46:  MOVLB  0
09C48:  BTFSS  xA3.3
09C4A:  BRA    9CBA
....................          printf("Funcionamiento.t4f.txt=\" SobrePresión\""); 
09C4C:  MOVLW  4A
09C4E:  MOVWF  FF6
09C50:  MOVLW  11
09C52:  MOVWF  FF7
09C54:  MOVLW  00
09C56:  MOVWF  FF8
09C58:  CALL   348A
....................          SendDataDisplay(); 
09C5C:  CALL   34BC
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
09C60:  MOVLW  72
09C62:  MOVWF  FF6
09C64:  MOVLW  11
09C66:  MOVWF  FF7
09C68:  MOVLW  00
09C6A:  MOVWF  FF8
09C6C:  CALL   348A
....................          SendDataDisplay(); 
09C70:  CALL   34BC
....................          Desfogue_on; 
09C74:  BSF    F8C.4
09C76:  BCF    F95.4
....................          SSR_off; 
09C78:  BSF    F8B.2
09C7A:  BCF    F94.2
....................          IniciaLlenado=OFF; 
09C7C:  BCF    x9F.7
....................          IniciaCiclo=OFF; 
09C7E:  BCF    xA0.1
....................          Esterilizando=OFF; 
09C80:  BCF    xA0.2
....................          Agua_off; 
09C82:  BCF    F8C.5
09C84:  BCF    F95.5
....................          Bomba_off; 
09C86:  BCF    F8C.6
09C88:  BCF    F95.6
....................          Aire=OFF; 
09C8A:  BCF    xA3.7
....................          Controlando=0; 
09C8C:  MOVLB  3
09C8E:  CLRF   x2C
....................          if(!flagImprimir && ActivaImpresion==1){ 
09C90:  BTFSC  x29.6
09C92:  BRA    9CB6
09C94:  DECFSZ x2D,W
09C96:  BRA    9CB6
....................             Imprime=25; 
09C98:  MOVLW  19
09C9A:  MOVWF  x7B
....................             Envio_Esclavos(); 
09C9C:  MOVLB  0
09C9E:  CALL   3E0E
....................             delay_ms(100); 
09CA2:  MOVLW  64
09CA4:  MOVLB  3
09CA6:  MOVWF  xDB
09CA8:  MOVLB  0
09CAA:  CALL   179E
....................             Imprime=10; 
09CAE:  MOVLW  0A
09CB0:  MOVLB  3
09CB2:  MOVWF  x7B
....................             flagImprimir=1; 
09CB4:  BSF    x29.6
....................          } 
....................       }else if(AlarmaCiclo){ // Alarma de Error de SobrePresion: Error por exceso de Presion. 
09CB6:  BRA    9D1E
09CB8:  MOVLB  0
09CBA:  BTFSS  x9F.6
09CBC:  BRA    9D20
....................          printf("Funcionamiento.t4f.txt=\" Error Ciclo\""); 
09CBE:  MOVLW  96
09CC0:  MOVWF  FF6
09CC2:  MOVLW  11
09CC4:  MOVWF  FF7
09CC6:  MOVLW  00
09CC8:  MOVWF  FF8
09CCA:  CALL   348A
....................          SendDataDisplay(); 
09CCE:  CALL   34BC
....................          printf("Funcionamiento.t5f.txt=\" Cancelado\""); 
09CD2:  MOVLW  BC
09CD4:  MOVWF  FF6
09CD6:  MOVLW  11
09CD8:  MOVWF  FF7
09CDA:  MOVLW  00
09CDC:  MOVWF  FF8
09CDE:  CALL   348A
....................          SendDataDisplay(); 
09CE2:  CALL   34BC
....................          Desfogue_on; 
09CE6:  BSF    F8C.4
09CE8:  BCF    F95.4
....................          SSR_off; 
09CEA:  BSF    F8B.2
09CEC:  BCF    F94.2
....................          IniciaLlenado=OFF; 
09CEE:  BCF    x9F.7
....................          IniciaCiclo=OFF; 
09CF0:  BCF    xA0.1
....................          Esterilizando=OFF; 
09CF2:  BCF    xA0.2
....................          Controlando=0; 
09CF4:  MOVLB  3
09CF6:  CLRF   x2C
....................          if(!flagImprimir && ActivaImpresion==1){ 
09CF8:  BTFSC  x29.6
09CFA:  BRA    9D1E
09CFC:  DECFSZ x2D,W
09CFE:  BRA    9D1E
....................             Imprime=25; 
09D00:  MOVLW  19
09D02:  MOVWF  x7B
....................             Envio_Esclavos(); 
09D04:  MOVLB  0
09D06:  CALL   3E0E
....................             delay_ms(100); 
09D0A:  MOVLW  64
09D0C:  MOVLB  3
09D0E:  MOVWF  xDB
09D10:  MOVLB  0
09D12:  CALL   179E
....................             Imprime=10; 
09D16:  MOVLW  0A
09D18:  MOVLB  3
09D1A:  MOVWF  x7B
....................             flagImprimir=1; 
09D1C:  BSF    x29.6
09D1E:  MOVLB  0
....................          } 
....................       } 
....................    } 
....................    else{   
09D20:  BRA    A322
....................       Buzzer_off; 
09D22:  BCF    F8C.0
09D24:  BCF    F95.0
....................       IniciaCiclo=ON; 
09D26:  BSF    xA0.1
....................       if(flagImprime && ActivaImpresion==1){ 
09D28:  MOVLB  3
09D2A:  BTFSS  x29.5
09D2C:  BRA    9D50
09D2E:  DECFSZ x2D,W
09D30:  BRA    9D50
....................          Imprime=5; 
09D32:  MOVLW  05
09D34:  MOVWF  x7B
....................          Envio_Esclavos(); 
09D36:  MOVLB  0
09D38:  CALL   3E0E
....................          delay_ms(100); 
09D3C:  MOVLW  64
09D3E:  MOVLB  3
09D40:  MOVWF  xDB
09D42:  MOVLB  0
09D44:  CALL   179E
....................          Imprime=10; 
09D48:  MOVLW  0A
09D4A:  MOVLB  3
09D4C:  MOVWF  x7B
....................          flagImprime=0; 
09D4E:  BCF    x29.5
....................       } 
....................          if(!CalderinLleno){ 
09D50:  MOVLB  0
09D52:  BTFSC  xA0.0
09D54:  BRA    9DCC
....................             if(!HIG){ 
09D56:  BSF    F94.0
09D58:  BTFSC  F82.0
09D5A:  BRA    9D86
....................                printf("Funcionamiento.t4f.txt=\" Reservorio Vacio\""); 
09D5C:  MOVLW  E0
09D5E:  MOVWF  FF6
09D60:  MOVLW  11
09D62:  MOVWF  FF7
09D64:  MOVLW  00
09D66:  MOVWF  FF8
09D68:  CALL   348A
....................                SendDataDisplay(); 
09D6C:  CALL   34BC
....................                printf("Funcionamiento.t5f.txt=\" Llenando Camara\""); 
09D70:  MOVLW  0C
09D72:  MOVWF  FF6
09D74:  MOVLW  12
09D76:  MOVWF  FF7
09D78:  MOVLW  00
09D7A:  MOVWF  FF8
09D7C:  CALL   348A
....................                SendDataDisplay(); 
09D80:  CALL   34BC
....................             }else{ 
09D84:  BRA    9DAE
....................                printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
09D86:  MOVLW  36
09D88:  MOVWF  FF6
09D8A:  MOVLW  12
09D8C:  MOVWF  FF7
09D8E:  MOVLW  00
09D90:  MOVWF  FF8
09D92:  CALL   348A
....................                SendDataDisplay(); 
09D96:  CALL   34BC
....................                printf("Funcionamiento.t5f.txt=\" Llenando Camara\""); 
09D9A:  MOVLW  58
09D9C:  MOVWF  FF6
09D9E:  MOVLW  12
09DA0:  MOVWF  FF7
09DA2:  MOVLW  00
09DA4:  MOVWF  FF8
09DA6:  CALL   348A
....................                SendDataDisplay(); 
09DAA:  CALL   34BC
....................             } 
....................             Control=0; 
09DAE:  MOVLB  3
09DB0:  CLRF   x2A
....................             IniciaLlenado=ON; 
09DB2:  MOVLB  0
09DB4:  BSF    x9F.7
....................             Controlando=0; 
09DB6:  MOVLB  3
09DB8:  CLRF   x2C
....................             Desfogue_off; 
09DBA:  BCF    F8C.4
09DBC:  BCF    F95.4
....................             Agua_on; 
09DBE:  BSF    F8C.5
09DC0:  BCF    F95.5
....................             Bomba_off; 
09DC2:  BCF    F8C.6
09DC4:  BCF    F95.6
....................             Aire=ON; 
09DC6:  MOVLB  0
09DC8:  BSF    xA3.7
....................          } 
....................          else{ 
09DCA:  BRA    A322
....................             Agua_off; 
09DCC:  BCF    F8C.5
09DCE:  BCF    F95.5
....................             if(Temperatura>=((float)Setpoint-0.3)){ 
09DD0:  MOVLB  3
09DD2:  CLRF   xDC
09DD4:  MOVFF  33B,3DB
09DD8:  MOVLB  0
09DDA:  CALL   17C6
09DDE:  MOVFF  00,3C6
09DE2:  MOVFF  01,3C7
09DE6:  MOVFF  02,3C8
09DEA:  MOVFF  03,3C9
09DEE:  BSF    FD8.1
09DF0:  MOVFF  03,3DE
09DF4:  MOVFF  02,3DD
09DF8:  MOVFF  01,3DC
09DFC:  MOVFF  00,3DB
09E00:  MOVLW  9A
09E02:  MOVLB  3
09E04:  MOVWF  xE2
09E06:  MOVLW  99
09E08:  MOVWF  xE1
09E0A:  MOVLW  19
09E0C:  MOVWF  xE0
09E0E:  MOVLW  7D
09E10:  MOVWF  xDF
09E12:  MOVLB  0
09E14:  CALL   195A
09E18:  MOVFF  03,3CD
09E1C:  MOVFF  02,3CC
09E20:  MOVFF  01,3CB
09E24:  MOVFF  00,3CA
09E28:  MOVFF  315,3D1
09E2C:  MOVFF  314,3D0
09E30:  MOVFF  313,3CF
09E34:  MOVFF  312,3CE
09E38:  CALL   29A4
09E3C:  BC    9E40
09E3E:  BNZ   9E42
....................                Esterilizando=ON; 
09E40:  BSF    xA0.2
....................             } 
....................              
....................             if(Temperatura<((float)Setpoint-0.9) && !Desfogando){ 
09E42:  MOVLB  3
09E44:  CLRF   xDC
09E46:  MOVFF  33B,3DB
09E4A:  MOVLB  0
09E4C:  CALL   17C6
09E50:  MOVFF  00,3C6
09E54:  MOVFF  01,3C7
09E58:  MOVFF  02,3C8
09E5C:  MOVFF  03,3C9
09E60:  BSF    FD8.1
09E62:  MOVFF  03,3DE
09E66:  MOVFF  02,3DD
09E6A:  MOVFF  01,3DC
09E6E:  MOVFF  00,3DB
09E72:  MOVLW  66
09E74:  MOVLB  3
09E76:  MOVWF  xE2
09E78:  MOVWF  xE1
09E7A:  MOVWF  xE0
09E7C:  MOVLW  7E
09E7E:  MOVWF  xDF
09E80:  MOVLB  0
09E82:  CALL   195A
09E86:  MOVFF  315,3CD
09E8A:  MOVFF  314,3CC
09E8E:  MOVFF  313,3CB
09E92:  MOVFF  312,3CA
09E96:  MOVFF  03,3D1
09E9A:  MOVFF  02,3D0
09E9E:  MOVFF  01,3CF
09EA2:  MOVFF  00,3CE
09EA6:  CALL   29A4
09EAA:  BNC   9EB2
09EAC:  BTFSC  xA0.5
09EAE:  BRA    9EB2
....................                Esterilizando=OFF; 
09EB0:  BCF    xA0.2
....................             } 
....................              
....................             if(!Esterilizando){ 
09EB2:  BTFSC  xA0.2
09EB4:  BRA    9F30
....................                printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
09EB6:  MOVLW  82
09EB8:  MOVWF  FF6
09EBA:  MOVLW  12
09EBC:  MOVWF  FF7
09EBE:  MOVLW  00
09EC0:  MOVWF  FF8
09EC2:  CALL   348A
....................                SendDataDisplay(); 
09EC6:  CALL   34BC
....................                printf("Funcionamiento.t5f.txt=\" Calentando\""); 
09ECA:  MOVLW  A4
09ECC:  MOVWF  FF6
09ECE:  MOVLW  12
09ED0:  MOVWF  FF7
09ED2:  MOVLW  00
09ED4:  MOVWF  FF8
09ED6:  CALL   348A
....................                SendDataDisplay(); 
09EDA:  CALL   34BC
....................                Control=1; 
09EDE:  MOVLW  01
09EE0:  MOVLB  3
09EE2:  MOVWF  x2A
....................                Controla(); 
09EE4:  MOVLB  0
09EE6:  CALL   4A80
....................                Bomba_off; 
09EEA:  BCF    F8C.6
09EEC:  BCF    F95.6
....................                Desfogue_off; 
09EEE:  BCF    F8C.4
09EF0:  BCF    F95.4
....................                if(Temperatura<=TTrampa){ 
09EF2:  MOVLB  3
09EF4:  CLRF   xDC
09EF6:  MOVFF  2CD,3DB
09EFA:  MOVLB  0
09EFC:  CALL   17C6
09F00:  MOVFF  315,3CD
09F04:  MOVFF  314,3CC
09F08:  MOVFF  313,3CB
09F0C:  MOVFF  312,3CA
09F10:  MOVFF  03,3D1
09F14:  MOVFF  02,3D0
09F18:  MOVFF  01,3CF
09F1C:  MOVFF  00,3CE
09F20:  CALL   29A4
09F24:  BC    9F28
09F26:  BNZ   9F2C
....................                   Aire=ON; 
09F28:  BSF    xA3.7
....................                }else{ 
09F2A:  BRA    9F2E
....................                   Aire=OFF; 
09F2C:  BCF    xA3.7
....................                } 
....................             }else{ 
09F2E:  BRA    A322
....................                TiempoCiclo=0; 
09F30:  CLRF   xA5
09F32:  CLRF   xA4
....................                if((Testerilizacion[0]==0)&&(Testerilizacion[1]==0)&& 
....................                (Testerilizacion[2]==0)&&(Testerilizacion[3]==0)){  
09F34:  MOVF   xAE,F
09F36:  BTFSS  FD8.2
09F38:  BRA    A2E4
09F3A:  MOVF   xAF,F
09F3C:  BTFSS  FD8.2
09F3E:  BRA    A2E4
09F40:  MOVF   xB0,F
09F42:  BTFSS  FD8.2
09F44:  BRA    A2E4
09F46:  MOVF   xB1,F
09F48:  BTFSS  FD8.2
09F4A:  BRA    A2E4
....................                   if(desfoguelento){ 
09F4C:  MOVLB  3
09F4E:  BTFSS  x29.0
09F50:  BRA    A0E6
....................                      Controlando=0; 
09F52:  CLRF   x2C
....................                      if(PresionCamara<=25){ 
09F54:  MOVF   x4E,F
09F56:  BTFSS  FD8.2
09F58:  BRA    A0A4
09F5A:  MOVF   x4D,W
09F5C:  SUBLW  19
09F5E:  BTFSS  FD8.0
09F60:  BRA    A0A4
....................                         Secando=OFF; 
09F62:  MOVLB  0
09F64:  BCF    xA0.3
....................                         DesfogueSuave=OFF; 
09F66:  BCF    xA0.6
....................                         Bomba_off; 
09F68:  BCF    F8C.6
09F6A:  BCF    F95.6
....................                         Aire=OFF; 
09F6C:  BCF    xA3.7
....................                         if(PresionCamara<2){ 
09F6E:  MOVLB  3
09F70:  MOVF   x4E,F
09F72:  BTFSS  FD8.2
09F74:  BRA    A090
09F76:  MOVF   x4D,W
09F78:  SUBLW  01
09F7A:  BTFSS  FD8.0
09F7C:  BRA    A090
....................                            Desfogue_off;  
09F7E:  BCF    F8C.4
09F80:  BCF    F95.4
....................                            if(Temperatura<=90){ 
09F82:  MOVFF  315,3CD
09F86:  MOVFF  314,3CC
09F8A:  MOVFF  313,3CB
09F8E:  MOVFF  312,3CA
09F92:  CLRF   xD1
09F94:  CLRF   xD0
09F96:  MOVLW  34
09F98:  MOVWF  xCF
09F9A:  MOVLW  85
09F9C:  MOVWF  xCE
09F9E:  MOVLB  0
09FA0:  CALL   29A4
09FA4:  BC    9FA8
09FA6:  BNZ   9FDE
....................                               ActivaAlarma(2); 
09FA8:  MOVLW  02
09FAA:  MOVLB  3
09FAC:  MOVWF  xC6
09FAE:  MOVLB  0
09FB0:  CALL   426C
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
09FB4:  MOVLW  CA
09FB6:  MOVWF  FF6
09FB8:  MOVLW  12
09FBA:  MOVWF  FF7
09FBC:  MOVLW  00
09FBE:  MOVWF  FF8
09FC0:  CALL   348A
....................                               SendDataDisplay(); 
09FC4:  CALL   34BC
....................                               printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
09FC8:  MOVLW  EC
09FCA:  MOVWF  FF6
09FCC:  MOVLW  12
09FCE:  MOVWF  FF7
09FD0:  MOVLW  00
09FD2:  MOVWF  FF8
09FD4:  CALL   348A
....................                               SendDataDisplay(); 
09FD8:  CALL   34BC
....................                               Finalizo=ON; 
09FDC:  BSF    xA3.2
....................                            } 
....................                            if(!Ciclo){ 
09FDE:  BTFSC  xA1.3
09FE0:  BRA    A08C
....................                               Ciclo=ON; 
09FE2:  BSF    xA1.3
....................                               Ciclos++; 
09FE4:  MOVLB  3
09FE6:  INCF   x51,F
09FE8:  BTFSC  FD8.2
09FEA:  INCF   x52,F
....................                               CiclosL=make8(Ciclos,0); 
09FEC:  MOVFF  351,338
....................                               CiclosH=make8(Ciclos,1); 
09FF0:  MOVFF  352,339
....................                               write_eeprom(37,CiclosL); 
09FF4:  CLRF   FAA
09FF6:  MOVLW  25
09FF8:  MOVWF  FA9
09FFA:  MOVFF  338,FA8
09FFE:  BCF    FA6.6
0A000:  BCF    FA6.7
0A002:  BSF    FA6.2
0A004:  MOVF   FF2,W
0A006:  MOVWF  00
0A008:  BCF    FF2.6
0A00A:  BCF    FF2.7
0A00C:  MOVLB  F
0A00E:  MOVLW  55
0A010:  MOVWF  FA7
0A012:  MOVLW  AA
0A014:  MOVWF  FA7
0A016:  BSF    FA6.1
0A018:  BTFSC  FA6.1
0A01A:  BRA    A018
0A01C:  BCF    FA6.2
0A01E:  MOVF   00,W
0A020:  IORWF  FF2,F
....................                               delay_ms(20); 
0A022:  MOVLW  14
0A024:  MOVLB  3
0A026:  MOVWF  xDB
0A028:  MOVLB  0
0A02A:  CALL   179E
....................                               write_eeprom(38,CiclosH); 
0A02E:  CLRF   FAA
0A030:  MOVLW  26
0A032:  MOVWF  FA9
0A034:  MOVFF  339,FA8
0A038:  BCF    FA6.6
0A03A:  BCF    FA6.7
0A03C:  BSF    FA6.2
0A03E:  MOVF   FF2,W
0A040:  MOVWF  00
0A042:  BCF    FF2.6
0A044:  BCF    FF2.7
0A046:  MOVLB  F
0A048:  MOVLW  55
0A04A:  MOVWF  FA7
0A04C:  MOVLW  AA
0A04E:  MOVWF  FA7
0A050:  BSF    FA6.1
0A052:  BTFSC  FA6.1
0A054:  BRA    A052
0A056:  BCF    FA6.2
0A058:  MOVF   00,W
0A05A:  IORWF  FF2,F
....................                               delay_ms(20); 
0A05C:  MOVLW  14
0A05E:  MOVLB  3
0A060:  MOVWF  xDB
0A062:  MOVLB  0
0A064:  CALL   179E
....................                               if(ActivaImpresion==1){ 
0A068:  MOVLB  3
0A06A:  DECFSZ x2D,W
0A06C:  BRA    A08A
....................                                  Imprime=28; 
0A06E:  MOVLW  1C
0A070:  MOVWF  x7B
....................                                  Envio_Esclavos(); 
0A072:  MOVLB  0
0A074:  CALL   3E0E
....................                                  delay_ms(100); 
0A078:  MOVLW  64
0A07A:  MOVLB  3
0A07C:  MOVWF  xDB
0A07E:  MOVLB  0
0A080:  CALL   179E
....................                                  Imprime=10; 
0A084:  MOVLW  0A
0A086:  MOVLB  3
0A088:  MOVWF  x7B
0A08A:  MOVLB  0
....................                               } 
....................                            } 
....................                         }else if(PresionCamara>=7){ 
0A08C:  BRA    A0A0
0A08E:  MOVLB  3
0A090:  MOVF   x4E,F
0A092:  BNZ   A09A
0A094:  MOVF   x4D,W
0A096:  SUBLW  06
0A098:  BC    A09E
....................                            Desfogue_on; 
0A09A:  BSF    F8C.4
0A09C:  BCF    F95.4
0A09E:  MOVLB  0
....................                         } 
....................                      }else{ 
0A0A0:  BRA    A0E2
0A0A2:  MOVLB  3
....................                         Desfogando=ON; 
0A0A4:  MOVLB  0
0A0A6:  BSF    xA0.5
....................                         DesfogueSuave=ON; 
0A0A8:  BSF    xA0.6
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0A0AA:  MOVLW  12
0A0AC:  MOVWF  FF6
0A0AE:  MOVLW  13
0A0B0:  MOVWF  FF7
0A0B2:  MOVLW  00
0A0B4:  MOVWF  FF8
0A0B6:  CALL   348A
....................                         SendDataDisplay(); 
0A0BA:  CALL   34BC
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0A0BE:  MOVLW  34
0A0C0:  MOVWF  FF6
0A0C2:  MOVLW  13
0A0C4:  MOVWF  FF7
0A0C6:  MOVLW  00
0A0C8:  MOVWF  FF8
0A0CA:  CALL   348A
....................                         SendDataDisplay(); 
0A0CE:  CALL   34BC
....................                         Control=0; 
0A0D2:  MOVLB  3
0A0D4:  CLRF   x2A
....................                         SSR_off; 
0A0D6:  BSF    F8B.2
0A0D8:  BCF    F94.2
....................                         Bomba_off; 
0A0DA:  BCF    F8C.6
0A0DC:  BCF    F95.6
....................                         Aire=OFF; 
0A0DE:  MOVLB  0
0A0E0:  BCF    xA3.7
....................                      } 
....................                   }else{ 
0A0E2:  BRA    A2DE
0A0E4:  MOVLB  3
....................                      //SSR_off; 
....................                      Controlando=0; 
0A0E6:  CLRF   x2C
....................                      Control=0; 
0A0E8:  CLRF   x2A
....................                      if(PresionCamara<=5){ 
0A0EA:  MOVF   x4E,F
0A0EC:  BTFSS  FD8.2
0A0EE:  BRA    A29E
0A0F0:  MOVF   x4D,W
0A0F2:  SUBLW  05
0A0F4:  BTFSS  FD8.0
0A0F6:  BRA    A29E
....................                         if((Tsecado[0]==0)&&(Tsecado[1]==0)&&(Tsecado[2]==0)&&(Tsecado[3]==0)){ 
0A0F8:  MOVLB  0
0A0FA:  MOVF   xB8,F
0A0FC:  BTFSS  FD8.2
0A0FE:  BRA    A250
0A100:  MOVF   xB9,F
0A102:  BTFSS  FD8.2
0A104:  BRA    A250
0A106:  MOVF   xBA,F
0A108:  BTFSS  FD8.2
0A10A:  BRA    A250
0A10C:  MOVF   xBB,F
0A10E:  BTFSS  FD8.2
0A110:  BRA    A250
....................                            SSR_off; 
0A112:  BSF    F8B.2
0A114:  BCF    F94.2
....................                            Secando=OFF; 
0A116:  BCF    xA0.3
....................                            if(!DOOR){ 
0A118:  BSF    F93.6
0A11A:  BTFSS  F81.6
0A11C:  BRA    A128
....................                               Bomba_off; 
0A11E:  BCF    F8C.6
0A120:  BCF    F95.6
....................                               Aire=OFF; 
0A122:  BCF    xA3.7
....................                               Desfogue_off; 
0A124:  BCF    F8C.4
0A126:  BCF    F95.4
....................                            } 
....................                            if(Temperatura<=90){ 
0A128:  MOVFF  315,3CD
0A12C:  MOVFF  314,3CC
0A130:  MOVFF  313,3CB
0A134:  MOVFF  312,3CA
0A138:  MOVLB  3
0A13A:  CLRF   xD1
0A13C:  CLRF   xD0
0A13E:  MOVLW  34
0A140:  MOVWF  xCF
0A142:  MOVLW  85
0A144:  MOVWF  xCE
0A146:  MOVLB  0
0A148:  CALL   29A4
0A14C:  BC    A150
0A14E:  BNZ   A18E
....................                               ActivaAlarma(2); 
0A150:  MOVLW  02
0A152:  MOVLB  3
0A154:  MOVWF  xC6
0A156:  MOVLB  0
0A158:  CALL   426C
....................                               printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0A15C:  MOVLW  5E
0A15E:  MOVWF  FF6
0A160:  MOVLW  13
0A162:  MOVWF  FF7
0A164:  MOVLW  00
0A166:  MOVWF  FF8
0A168:  CALL   348A
....................                               SendDataDisplay(); 
0A16C:  CALL   34BC
....................                               printf("Funcionamiento.t5f.txt=\" Finalizado\""); 
0A170:  MOVLW  80
0A172:  MOVWF  FF6
0A174:  MOVLW  13
0A176:  MOVWF  FF7
0A178:  MOVLW  00
0A17A:  MOVWF  FF8
0A17C:  CALL   348A
....................                               SendDataDisplay(); 
0A180:  CALL   34BC
....................                               Finalizo=ON; 
0A184:  BSF    xA3.2
....................                               Bomba_off; 
0A186:  BCF    F8C.6
0A188:  BCF    F95.6
....................                               Aire=OFF; 
0A18A:  BCF    xA3.7
....................                            }else{ 
0A18C:  BRA    A19E
....................                               if(DOOR){ 
0A18E:  BSF    F93.6
0A190:  BTFSC  F81.6
0A192:  BRA    A19E
....................                                  Bomba_on; 
0A194:  BSF    F8C.6
0A196:  BCF    F95.6
....................                                  Aire=ON; 
0A198:  BSF    xA3.7
....................                                  Desfogue_off; 
0A19A:  BCF    F8C.4
0A19C:  BCF    F95.4
....................                               } 
....................                            } 
....................                            if(!Ciclo){ 
0A19E:  BTFSC  xA1.3
0A1A0:  BRA    A24C
....................                               Ciclo=ON; 
0A1A2:  BSF    xA1.3
....................                               Ciclos++; 
0A1A4:  MOVLB  3
0A1A6:  INCF   x51,F
0A1A8:  BTFSC  FD8.2
0A1AA:  INCF   x52,F
....................                               CiclosL=make8(Ciclos,0); 
0A1AC:  MOVFF  351,338
....................                               CiclosH=make8(Ciclos,1); 
0A1B0:  MOVFF  352,339
....................                               write_eeprom(37,CiclosL); 
0A1B4:  CLRF   FAA
0A1B6:  MOVLW  25
0A1B8:  MOVWF  FA9
0A1BA:  MOVFF  338,FA8
0A1BE:  BCF    FA6.6
0A1C0:  BCF    FA6.7
0A1C2:  BSF    FA6.2
0A1C4:  MOVF   FF2,W
0A1C6:  MOVWF  00
0A1C8:  BCF    FF2.6
0A1CA:  BCF    FF2.7
0A1CC:  MOVLB  F
0A1CE:  MOVLW  55
0A1D0:  MOVWF  FA7
0A1D2:  MOVLW  AA
0A1D4:  MOVWF  FA7
0A1D6:  BSF    FA6.1
0A1D8:  BTFSC  FA6.1
0A1DA:  BRA    A1D8
0A1DC:  BCF    FA6.2
0A1DE:  MOVF   00,W
0A1E0:  IORWF  FF2,F
....................                               delay_ms(20); 
0A1E2:  MOVLW  14
0A1E4:  MOVLB  3
0A1E6:  MOVWF  xDB
0A1E8:  MOVLB  0
0A1EA:  CALL   179E
....................                               write_eeprom(38,CiclosH); 
0A1EE:  CLRF   FAA
0A1F0:  MOVLW  26
0A1F2:  MOVWF  FA9
0A1F4:  MOVFF  339,FA8
0A1F8:  BCF    FA6.6
0A1FA:  BCF    FA6.7
0A1FC:  BSF    FA6.2
0A1FE:  MOVF   FF2,W
0A200:  MOVWF  00
0A202:  BCF    FF2.6
0A204:  BCF    FF2.7
0A206:  MOVLB  F
0A208:  MOVLW  55
0A20A:  MOVWF  FA7
0A20C:  MOVLW  AA
0A20E:  MOVWF  FA7
0A210:  BSF    FA6.1
0A212:  BTFSC  FA6.1
0A214:  BRA    A212
0A216:  BCF    FA6.2
0A218:  MOVF   00,W
0A21A:  IORWF  FF2,F
....................                               delay_ms(20); 
0A21C:  MOVLW  14
0A21E:  MOVLB  3
0A220:  MOVWF  xDB
0A222:  MOVLB  0
0A224:  CALL   179E
....................                               if(ActivaImpresion==1){ 
0A228:  MOVLB  3
0A22A:  DECFSZ x2D,W
0A22C:  BRA    A24A
....................                                  Imprime=28; 
0A22E:  MOVLW  1C
0A230:  MOVWF  x7B
....................                                  Envio_Esclavos(); 
0A232:  MOVLB  0
0A234:  CALL   3E0E
....................                                  delay_ms(100); 
0A238:  MOVLW  64
0A23A:  MOVLB  3
0A23C:  MOVWF  xDB
0A23E:  MOVLB  0
0A240:  CALL   179E
....................                                  Imprime=10; 
0A244:  MOVLW  0A
0A246:  MOVLB  3
0A248:  MOVWF  x7B
0A24A:  MOVLB  0
....................                               } 
....................                            } 
....................                            Secando=OFF; 
0A24C:  BCF    xA0.3
....................                         }else{ 
0A24E:  BRA    A29A
....................                            Secando=ON; 
0A250:  BSF    xA0.3
....................                            printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0A252:  MOVLW  A6
0A254:  MOVWF  FF6
0A256:  MOVLW  13
0A258:  MOVWF  FF7
0A25A:  MOVLW  00
0A25C:  MOVWF  FF8
0A25E:  CALL   348A
....................                            SendDataDisplay(); 
0A262:  CALL   34BC
....................                            printf("Funcionamiento.t5f.txt=\" Secando\""); 
0A266:  MOVLW  C8
0A268:  MOVWF  FF6
0A26A:  MOVLW  13
0A26C:  MOVWF  FF7
0A26E:  MOVLW  00
0A270:  MOVWF  FF8
0A272:  CALL   348A
....................                            SendDataDisplay();                            
0A276:  CALL   34BC
....................                            if(DOOR){ 
0A27A:  BSF    F93.6
0A27C:  BTFSC  F81.6
0A27E:  BRA    A290
....................                               CalientaChaqueta(); 
0A280:  GOTO   5012
....................                               Bomba_on; 
0A284:  BSF    F8C.6
0A286:  BCF    F95.6
....................                               Aire=ON; 
0A288:  BSF    xA3.7
....................                               Desfogue_off; 
0A28A:  BCF    F8C.4
0A28C:  BCF    F95.4
....................                            }else{ 
0A28E:  BRA    A29A
....................                               Bomba_off; 
0A290:  BCF    F8C.6
0A292:  BCF    F95.6
....................                               Aire=OFF; 
0A294:  BCF    xA3.7
....................                               Desfogue_off; 
0A296:  BCF    F8C.4
0A298:  BCF    F95.4
....................                            } 
....................                         } 
....................                      }else if(PresionCamara>6){ 
0A29A:  BRA    A2DE
0A29C:  MOVLB  3
0A29E:  MOVF   x4E,F
0A2A0:  BNZ   A2A8
0A2A2:  MOVF   x4D,W
0A2A4:  SUBLW  06
0A2A6:  BC    A2E0
....................                         Desfogando=ON; 
0A2A8:  MOVLB  0
0A2AA:  BSF    xA0.5
....................                         printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0A2AC:  MOVLW  EA
0A2AE:  MOVWF  FF6
0A2B0:  MOVLW  13
0A2B2:  MOVWF  FF7
0A2B4:  MOVLW  00
0A2B6:  MOVWF  FF8
0A2B8:  CALL   348A
....................                         SendDataDisplay(); 
0A2BC:  CALL   34BC
....................                         printf("Funcionamiento.t5f.txt=\" Despresurizando\""); 
0A2C0:  MOVLW  0C
0A2C2:  MOVWF  FF6
0A2C4:  MOVLW  14
0A2C6:  MOVWF  FF7
0A2C8:  MOVLW  00
0A2CA:  MOVWF  FF8
0A2CC:  CALL   348A
....................                         SendDataDisplay();                         
0A2D0:  CALL   34BC
....................                         //CalientaChaqueta(); 
....................                         Bomba_off; 
0A2D4:  BCF    F8C.6
0A2D6:  BCF    F95.6
....................                         Aire=OFF; 
0A2D8:  BCF    xA3.7
....................                         Desfogue_on; 
0A2DA:  BSF    F8C.4
0A2DC:  BCF    F95.4
0A2DE:  MOVLB  3
....................                      } 
....................                   } 
....................                    
....................                }else{ 
0A2E0:  BRA    A324
0A2E2:  MOVLB  0
....................                   printf("Funcionamiento.t4f.txt=\" Ninguna\""); 
0A2E4:  MOVLW  36
0A2E6:  MOVWF  FF6
0A2E8:  MOVLW  14
0A2EA:  MOVWF  FF7
0A2EC:  MOVLW  00
0A2EE:  MOVWF  FF8
0A2F0:  CALL   348A
....................                   SendDataDisplay(); 
0A2F4:  CALL   34BC
....................                   printf("Funcionamiento.t5f.txt=\" Esterilizando\""); 
0A2F8:  MOVLW  58
0A2FA:  MOVWF  FF6
0A2FC:  MOVLW  14
0A2FE:  MOVWF  FF7
0A300:  MOVLW  00
0A302:  MOVWF  FF8
0A304:  CALL   348A
....................                   SendDataDisplay(); 
0A308:  CALL   34BC
....................                   Bomba_off; 
0A30C:  BCF    F8C.6
0A30E:  BCF    F95.6
....................                   Aire=OFF; 
0A310:  BCF    xA3.7
....................                   Desfogue_off; 
0A312:  BCF    F8C.4
0A314:  BCF    F95.4
....................                   Control=1; 
0A316:  MOVLW  01
0A318:  MOVLB  3
0A31A:  MOVWF  x2A
....................                   Controla(); 
0A31C:  MOVLB  0
0A31E:  CALL   4A80
0A322:  MOVLB  3
....................                } 
....................             } 
....................          } 
....................    } 
....................  
....................    if(Grafica==1){ 
0A324:  BTFSS  x29.2
0A326:  BRA    A364
....................       printf("add 14,0,%1.0f",Temperatura); 
0A328:  MOVLW  80
0A32A:  MOVWF  FF6
0A32C:  MOVLW  14
0A32E:  MOVWF  FF7
0A330:  MOVLW  00
0A332:  MOVWF  FF8
0A334:  MOVLW  09
0A336:  MOVWF  xCA
0A338:  MOVLB  0
0A33A:  CALL   4368
0A33E:  MOVLW  00
0A340:  MOVWF  FE9
0A342:  MOVFF  315,3CD
0A346:  MOVFF  314,3CC
0A34A:  MOVFF  313,3CB
0A34E:  MOVFF  312,3CA
0A352:  MOVLB  3
0A354:  CLRF   xCE
0A356:  MOVLB  0
0A358:  CALL   4626
....................       SendDataDisplay(); 
0A35C:  CALL   34BC
....................       Grafica=0; 
0A360:  MOVLB  3
0A362:  BCF    x29.2
....................    } 
....................    if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
0A364:  BTFSS  x29.1
0A366:  BRA    A626
....................    {                             
....................       Lectura=0; 
0A368:  BCF    x29.1
....................       printf("t6f.txt=\"%3.1f°C\"",Temperatura); 
0A36A:  MOVLW  90
0A36C:  MOVWF  FF6
0A36E:  MOVLW  14
0A370:  MOVWF  FF7
0A372:  MOVLW  00
0A374:  MOVWF  FF8
0A376:  MOVLW  09
0A378:  MOVWF  xCA
0A37A:  MOVLB  0
0A37C:  CALL   4368
0A380:  MOVLW  02
0A382:  MOVWF  FE9
0A384:  MOVFF  315,3CD
0A388:  MOVFF  314,3CC
0A38C:  MOVFF  313,3CB
0A390:  MOVFF  312,3CA
0A394:  MOVLW  01
0A396:  MOVLB  3
0A398:  MOVWF  xCE
0A39A:  MOVLB  0
0A39C:  CALL   4626
0A3A0:  MOVLW  B0
0A3A2:  BTFSS  F9E.4
0A3A4:  BRA    A3A2
0A3A6:  MOVWF  FAD
0A3A8:  MOVLW  43
0A3AA:  BTFSS  F9E.4
0A3AC:  BRA    A3AA
0A3AE:  MOVWF  FAD
0A3B0:  MOVLW  22
0A3B2:  BTFSS  F9E.4
0A3B4:  BRA    A3B2
0A3B6:  MOVWF  FAD
....................       SendDataDisplay(); 
0A3B8:  CALL   34BC
....................       printf("Funcionamiento.t7f.txt=\"%03LukPa\"",PresionCamara); 
0A3BC:  MOVLW  A2
0A3BE:  MOVWF  FF6
0A3C0:  MOVLW  14
0A3C2:  MOVWF  FF7
0A3C4:  MOVLW  00
0A3C6:  MOVWF  FF8
0A3C8:  MOVLW  18
0A3CA:  MOVLB  3
0A3CC:  MOVWF  xCA
0A3CE:  MOVLB  0
0A3D0:  CALL   4368
0A3D4:  MOVLW  0A
0A3D6:  MOVWF  FE9
0A3D8:  MOVFF  34E,3CB
0A3DC:  MOVFF  34D,3CA
0A3E0:  CALL   44B8
0A3E4:  MOVLW  BF
0A3E6:  MOVWF  FF6
0A3E8:  MOVLW  14
0A3EA:  MOVWF  FF7
0A3EC:  MOVLW  00
0A3EE:  MOVWF  FF8
0A3F0:  MOVLW  04
0A3F2:  MOVLB  3
0A3F4:  MOVWF  xCA
0A3F6:  MOVLB  0
0A3F8:  CALL   4368
....................       SendDataDisplay(); 
0A3FC:  CALL   34BC
....................       //printf("Funcionamiento.t12f.txt=\"%03LukPa\"",PresionPreCamara); 
....................       printf("Funcionamiento.t12f.txt=\"000kPa\""); 
0A400:  MOVLW  C4
0A402:  MOVWF  FF6
0A404:  MOVLW  14
0A406:  MOVWF  FF7
0A408:  MOVLW  00
0A40A:  MOVWF  FF8
0A40C:  CALL   348A
....................       SendDataDisplay(); 
0A410:  CALL   34BC
....................       printf("Funcionamiento.t9f.txt=\"%03u\"",Setpoint); 
0A414:  MOVLW  E6
0A416:  MOVWF  FF6
0A418:  MOVLW  14
0A41A:  MOVWF  FF7
0A41C:  MOVLW  00
0A41E:  MOVWF  FF8
0A420:  MOVLW  18
0A422:  MOVLB  3
0A424:  MOVWF  xCA
0A426:  MOVLB  0
0A428:  CALL   4368
0A42C:  MOVFF  33B,3C8
0A430:  MOVLW  03
0A432:  MOVLB  3
0A434:  MOVWF  xC9
0A436:  MOVLB  0
0A438:  CALL   43C6
0A43C:  MOVLW  22
0A43E:  BTFSS  F9E.4
0A440:  BRA    A43E
0A442:  MOVWF  FAD
....................       SendDataDisplay();       
0A444:  CALL   34BC
....................       printf("Funcionamiento.t10f.txt=\"%02u\"",((Testerilizacion[3]*10)+Testerilizacion[2])); 
0A448:  MOVFF  B1,3C8
0A44C:  MOVLW  0A
0A44E:  MOVLB  3
0A450:  MOVWF  xC9
0A452:  MOVLB  0
0A454:  CALL   2A1E
0A458:  MOVF   xB0,W
0A45A:  ADDWF  01,W
0A45C:  MOVLB  3
0A45E:  MOVWF  xC6
0A460:  MOVLW  04
0A462:  MOVWF  FF6
0A464:  MOVLW  15
0A466:  MOVWF  FF7
0A468:  MOVLW  00
0A46A:  MOVWF  FF8
0A46C:  MOVLW  19
0A46E:  MOVWF  xCA
0A470:  MOVLB  0
0A472:  CALL   4368
0A476:  MOVFF  3C6,3C8
0A47A:  MOVLW  01
0A47C:  MOVLB  3
0A47E:  MOVWF  xC9
0A480:  MOVLB  0
0A482:  CALL   43C6
0A486:  MOVLW  22
0A488:  BTFSS  F9E.4
0A48A:  BRA    A488
0A48C:  MOVWF  FAD
....................       SendDataDisplay();       
0A48E:  CALL   34BC
....................       printf("Funcionamiento.t13f.txt=\"%02u\"",((Testerilizacion[1]*10)+Testerilizacion[0])); 
0A492:  MOVFF  AF,3C8
0A496:  MOVLW  0A
0A498:  MOVLB  3
0A49A:  MOVWF  xC9
0A49C:  MOVLB  0
0A49E:  CALL   2A1E
0A4A2:  MOVF   xAE,W
0A4A4:  ADDWF  01,W
0A4A6:  MOVLB  3
0A4A8:  MOVWF  xC6
0A4AA:  MOVLW  24
0A4AC:  MOVWF  FF6
0A4AE:  MOVLW  15
0A4B0:  MOVWF  FF7
0A4B2:  MOVLW  00
0A4B4:  MOVWF  FF8
0A4B6:  MOVLW  19
0A4B8:  MOVWF  xCA
0A4BA:  MOVLB  0
0A4BC:  CALL   4368
0A4C0:  MOVFF  3C6,3C8
0A4C4:  MOVLW  01
0A4C6:  MOVLB  3
0A4C8:  MOVWF  xC9
0A4CA:  MOVLB  0
0A4CC:  CALL   43C6
0A4D0:  MOVLW  22
0A4D2:  BTFSS  F9E.4
0A4D4:  BRA    A4D2
0A4D6:  MOVWF  FAD
....................       SendDataDisplay();       
0A4D8:  CALL   34BC
....................       printf("Funcionamiento.t11f.txt=\"%02u\"",((Tsecado[3]*10)+Tsecado[2])); 
0A4DC:  MOVFF  BB,3C8
0A4E0:  MOVLW  0A
0A4E2:  MOVLB  3
0A4E4:  MOVWF  xC9
0A4E6:  MOVLB  0
0A4E8:  CALL   2A1E
0A4EC:  MOVF   xBA,W
0A4EE:  ADDWF  01,W
0A4F0:  MOVLB  3
0A4F2:  MOVWF  xC6
0A4F4:  MOVLW  44
0A4F6:  MOVWF  FF6
0A4F8:  MOVLW  15
0A4FA:  MOVWF  FF7
0A4FC:  MOVLW  00
0A4FE:  MOVWF  FF8
0A500:  MOVLW  19
0A502:  MOVWF  xCA
0A504:  MOVLB  0
0A506:  CALL   4368
0A50A:  MOVFF  3C6,3C8
0A50E:  MOVLW  01
0A510:  MOVLB  3
0A512:  MOVWF  xC9
0A514:  MOVLB  0
0A516:  CALL   43C6
0A51A:  MOVLW  22
0A51C:  BTFSS  F9E.4
0A51E:  BRA    A51C
0A520:  MOVWF  FAD
....................       SendDataDisplay();       
0A522:  CALL   34BC
....................       printf("Funcionamiento.t16f.txt=\"%02u\"",((Tsecado[1]*10)+Tsecado[0])); 
0A526:  MOVFF  B9,3C8
0A52A:  MOVLW  0A
0A52C:  MOVLB  3
0A52E:  MOVWF  xC9
0A530:  MOVLB  0
0A532:  CALL   2A1E
0A536:  MOVF   xB8,W
0A538:  ADDWF  01,W
0A53A:  MOVLB  3
0A53C:  MOVWF  xC6
0A53E:  MOVLW  64
0A540:  MOVWF  FF6
0A542:  MOVLW  15
0A544:  MOVWF  FF7
0A546:  MOVLW  00
0A548:  MOVWF  FF8
0A54A:  MOVLW  19
0A54C:  MOVWF  xCA
0A54E:  MOVLB  0
0A550:  CALL   4368
0A554:  MOVFF  3C6,3C8
0A558:  MOVLW  01
0A55A:  MOVLB  3
0A55C:  MOVWF  xC9
0A55E:  MOVLB  0
0A560:  CALL   43C6
0A564:  MOVLW  22
0A566:  BTFSS  F9E.4
0A568:  BRA    A566
0A56A:  MOVWF  FAD
....................       SendDataDisplay();       
0A56C:  CALL   34BC
....................        
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
0A570:  MOVLW  84
0A572:  MOVWF  FF6
0A574:  MOVLW  15
0A576:  MOVWF  FF7
0A578:  MOVLW  00
0A57A:  MOVWF  FF8
0A57C:  MOVLW  11
0A57E:  MOVLB  3
0A580:  MOVWF  xCA
0A582:  MOVLB  0
0A584:  CALL   4368
0A588:  MOVFF  36E,3C8
0A58C:  MOVLW  01
0A58E:  MOVLB  3
0A590:  MOVWF  xC9
0A592:  MOVLB  0
0A594:  CALL   43C6
0A598:  MOVLW  2F
0A59A:  BTFSS  F9E.4
0A59C:  BRA    A59A
0A59E:  MOVWF  FAD
0A5A0:  MOVFF  36D,3C8
0A5A4:  MOVLW  01
0A5A6:  MOVLB  3
0A5A8:  MOVWF  xC9
0A5AA:  MOVLB  0
0A5AC:  CALL   43C6
0A5B0:  MOVLW  2F
0A5B2:  BTFSS  F9E.4
0A5B4:  BRA    A5B2
0A5B6:  MOVWF  FAD
0A5B8:  MOVLW  32
0A5BA:  BTFSS  F9E.4
0A5BC:  BRA    A5BA
0A5BE:  MOVWF  FAD
0A5C0:  MOVLW  30
0A5C2:  BTFSS  F9E.4
0A5C4:  BRA    A5C2
0A5C6:  MOVWF  FAD
0A5C8:  MOVFF  36C,3C8
0A5CC:  MOVLW  01
0A5CE:  MOVLB  3
0A5D0:  MOVWF  xC9
0A5D2:  MOVLB  0
0A5D4:  CALL   43C6
0A5D8:  MOVLW  A5
0A5DA:  MOVWF  FF6
0A5DC:  MOVLW  15
0A5DE:  MOVWF  FF7
0A5E0:  MOVLW  00
0A5E2:  MOVWF  FF8
0A5E4:  MOVLW  0A
0A5E6:  MOVLB  3
0A5E8:  MOVWF  xCA
0A5EA:  MOVLB  0
0A5EC:  CALL   4368
0A5F0:  MOVFF  36F,3C8
0A5F4:  MOVLW  01
0A5F6:  MOVLB  3
0A5F8:  MOVWF  xC9
0A5FA:  MOVLB  0
0A5FC:  CALL   43C6
0A600:  MOVLW  3A
0A602:  BTFSS  F9E.4
0A604:  BRA    A602
0A606:  MOVWF  FAD
0A608:  MOVFF  370,3C8
0A60C:  MOVLW  01
0A60E:  MOVLB  3
0A610:  MOVWF  xC9
0A612:  MOVLB  0
0A614:  CALL   43C6
0A618:  MOVLW  22
0A61A:  BTFSS  F9E.4
0A61C:  BRA    A61A
0A61E:  MOVWF  FAD
....................       SendDataDisplay(); 
0A620:  CALL   34BC
0A624:  MOVLB  3
....................    } 
....................  
....................  
.................... } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==100){ //Menu de Configuración de Parametros de Control 
0A626:  MOVF   x34,W
0A628:  SUBLW  64
0A62A:  BTFSS  FD8.2
0A62C:  GOTO   B404
....................       
....................       if(Opcion2>10) 
0A630:  MOVF   x3D,W
0A632:  SUBLW  0A
0A634:  BC    A63A
....................          Opcion2=1; 
0A636:  MOVLW  01
0A638:  MOVWF  x3D
....................       if(Opcion2<1) 
0A63A:  MOVF   x3D,F
0A63C:  BNZ   A642
....................          Opcion2=10; 
0A63E:  MOVLW  0A
0A640:  MOVWF  x3D
....................        
....................       if(Opcion2==1){ 
0A642:  DECFSZ x3D,W
0A644:  BRA    A7C2
....................          printf("Config.t2c.txt=\"Proporcional\""); 
0A646:  MOVLW  BA
0A648:  MOVWF  FF6
0A64A:  MOVLW  15
0A64C:  MOVWF  FF7
0A64E:  MOVLW  00
0A650:  MOVWF  FF8
0A652:  MOVLB  0
0A654:  CALL   348A
....................          SendDataDisplay();       
0A658:  CALL   34BC
....................          printf("t3c.txt=\"%2.0f\"",Ganancia); 
0A65C:  MOVLW  D8
0A65E:  MOVWF  FF6
0A660:  MOVLW  15
0A662:  MOVWF  FF7
0A664:  MOVLW  00
0A666:  MOVWF  FF8
0A668:  MOVLW  09
0A66A:  MOVLB  3
0A66C:  MOVWF  xCA
0A66E:  MOVLB  0
0A670:  CALL   4368
0A674:  MOVLW  01
0A676:  MOVWF  FE9
0A678:  MOVFF  2F5,3CD
0A67C:  MOVFF  2F4,3CC
0A680:  MOVFF  2F3,3CB
0A684:  MOVFF  2F2,3CA
0A688:  MOVLB  3
0A68A:  CLRF   xCE
0A68C:  MOVLB  0
0A68E:  CALL   4626
0A692:  MOVLW  22
0A694:  BTFSS  F9E.4
0A696:  BRA    A694
0A698:  MOVWF  FAD
....................          SendDataDisplay(); 
0A69A:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0A69E:  MOVF   34,W
0A6A0:  SUBLW  0A
0A6A2:  BZ    A6AA
0A6A4:  BSF    F93.0
0A6A6:  BTFSC  F81.0
0A6A8:  BRA    A6FA
....................             delay_ms(20); 
0A6AA:  MOVLW  14
0A6AC:  MOVLB  3
0A6AE:  MOVWF  xDB
0A6B0:  MOVLB  0
0A6B2:  CALL   179E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0A6B6:  MOVF   34,W
0A6B8:  SUBLW  0A
0A6BA:  BZ    A6C2
0A6BC:  BSF    F93.0
0A6BE:  BTFSC  F81.0
0A6C0:  BRA    A6FA
....................                Ganancia+=1.0; 
0A6C2:  BCF    FD8.1
0A6C4:  MOVFF  2F5,3DE
0A6C8:  MOVFF  2F4,3DD
0A6CC:  MOVFF  2F3,3DC
0A6D0:  MOVFF  2F2,3DB
0A6D4:  MOVLB  3
0A6D6:  CLRF   xE2
0A6D8:  CLRF   xE1
0A6DA:  CLRF   xE0
0A6DC:  MOVLW  7F
0A6DE:  MOVWF  xDF
0A6E0:  MOVLB  0
0A6E2:  CALL   195A
0A6E6:  MOVFF  03,2F5
0A6EA:  MOVFF  02,2F4
0A6EE:  MOVFF  01,2F3
0A6F2:  MOVFF  00,2F2
....................                RX_Buffer[4]=0x00;   
0A6F6:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0A6F8:  CLRF   3F
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0A6FA:  MOVF   34,W
0A6FC:  SUBLW  0B
0A6FE:  BZ    A706
0A700:  BSF    F93.1
0A702:  BTFSC  F81.1
0A704:  BRA    A756
....................             delay_ms(20); 
0A706:  MOVLW  14
0A708:  MOVLB  3
0A70A:  MOVWF  xDB
0A70C:  MOVLB  0
0A70E:  CALL   179E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0A712:  MOVF   34,W
0A714:  SUBLW  0B
0A716:  BZ    A71E
0A718:  BSF    F93.1
0A71A:  BTFSC  F81.1
0A71C:  BRA    A756
....................                Ganancia-=1.0; 
0A71E:  BSF    FD8.1
0A720:  MOVFF  2F5,3DE
0A724:  MOVFF  2F4,3DD
0A728:  MOVFF  2F3,3DC
0A72C:  MOVFF  2F2,3DB
0A730:  MOVLB  3
0A732:  CLRF   xE2
0A734:  CLRF   xE1
0A736:  CLRF   xE0
0A738:  MOVLW  7F
0A73A:  MOVWF  xDF
0A73C:  MOVLB  0
0A73E:  CALL   195A
0A742:  MOVFF  03,2F5
0A746:  MOVFF  02,2F4
0A74A:  MOVFF  01,2F3
0A74E:  MOVFF  00,2F2
....................                RX_Buffer[4]=0x00; 
0A752:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0A754:  CLRF   3F
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................           
....................          if(Ganancia>40) 
0A756:  MOVLB  3
0A758:  CLRF   xCD
0A75A:  CLRF   xCC
0A75C:  MOVLW  20
0A75E:  MOVWF  xCB
0A760:  MOVLW  84
0A762:  MOVWF  xCA
0A764:  MOVFF  2F5,3D1
0A768:  MOVFF  2F4,3D0
0A76C:  MOVFF  2F3,3CF
0A770:  MOVFF  2F2,3CE
0A774:  MOVLB  0
0A776:  CALL   29A4
0A77A:  BNC   A788
....................             Ganancia=1; 
0A77C:  MOVLB  2
0A77E:  CLRF   xF5
0A780:  CLRF   xF4
0A782:  CLRF   xF3
0A784:  MOVLW  7F
0A786:  MOVWF  xF2
....................          if(Ganancia<1) 
0A788:  MOVFF  2F5,3CD
0A78C:  MOVFF  2F4,3CC
0A790:  MOVFF  2F3,3CB
0A794:  MOVFF  2F2,3CA
0A798:  MOVLB  3
0A79A:  CLRF   xD1
0A79C:  CLRF   xD0
0A79E:  CLRF   xCF
0A7A0:  MOVLW  7F
0A7A2:  MOVWF  xCE
0A7A4:  MOVLB  0
0A7A6:  CALL   29A4
0A7AA:  BNC   A7BC
....................             Ganancia=40; 
0A7AC:  MOVLB  2
0A7AE:  CLRF   xF5
0A7B0:  CLRF   xF4
0A7B2:  MOVLW  20
0A7B4:  MOVWF  xF3
0A7B6:  MOVLW  84
0A7B8:  MOVWF  xF2
0A7BA:  MOVLB  0
....................       }else if(Opcion2==2){ 
0A7BC:  GOTO   AF78
0A7C0:  MOVLB  3
0A7C2:  MOVF   x3D,W
0A7C4:  SUBLW  02
0A7C6:  BNZ   A886
....................          printf("Config.t2c.txt=\"Derivativo\""); 
0A7C8:  MOVLW  E8
0A7CA:  MOVWF  FF6
0A7CC:  MOVLW  15
0A7CE:  MOVWF  FF7
0A7D0:  MOVLW  00
0A7D2:  MOVWF  FF8
0A7D4:  MOVLB  0
0A7D6:  CALL   348A
....................          SendDataDisplay();       
0A7DA:  CALL   34BC
....................          printf("t3c.txt=\"%u\"",Derivativo); 
0A7DE:  MOVLW  04
0A7E0:  MOVWF  FF6
0A7E2:  MOVLW  16
0A7E4:  MOVWF  FF7
0A7E6:  MOVLW  00
0A7E8:  MOVWF  FF8
0A7EA:  MOVLW  09
0A7EC:  MOVLB  3
0A7EE:  MOVWF  xCA
0A7F0:  MOVLB  0
0A7F2:  CALL   4368
0A7F6:  MOVFF  327,3C8
0A7FA:  MOVLW  1B
0A7FC:  MOVLB  3
0A7FE:  MOVWF  xC9
0A800:  MOVLB  0
0A802:  CALL   43C6
0A806:  MOVLW  22
0A808:  BTFSS  F9E.4
0A80A:  BRA    A808
0A80C:  MOVWF  FAD
....................          SendDataDisplay(); 
0A80E:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0A812:  MOVF   34,W
0A814:  SUBLW  0A
0A816:  BZ    A81E
0A818:  BSF    F93.0
0A81A:  BTFSC  F81.0
0A81C:  BRA    A840
....................             delay_ms(20); 
0A81E:  MOVLW  14
0A820:  MOVLB  3
0A822:  MOVWF  xDB
0A824:  MOVLB  0
0A826:  CALL   179E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0A82A:  MOVF   34,W
0A82C:  SUBLW  0A
0A82E:  BZ    A836
0A830:  BSF    F93.0
0A832:  BTFSC  F81.0
0A834:  BRA    A840
....................                Derivativo++; 
0A836:  MOVLB  3
0A838:  INCF   x27,F
....................                RX_Buffer[4]=0x00;   
0A83A:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0A83C:  CLRF   3F
0A83E:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0A840:  MOVF   34,W
0A842:  SUBLW  0B
0A844:  BZ    A84C
0A846:  BSF    F93.1
0A848:  BTFSC  F81.1
0A84A:  BRA    A86E
....................             delay_ms(20); 
0A84C:  MOVLW  14
0A84E:  MOVLB  3
0A850:  MOVWF  xDB
0A852:  MOVLB  0
0A854:  CALL   179E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0A858:  MOVF   34,W
0A85A:  SUBLW  0B
0A85C:  BZ    A864
0A85E:  BSF    F93.1
0A860:  BTFSC  F81.1
0A862:  BRA    A86E
....................                Derivativo--; 
0A864:  MOVLB  3
0A866:  DECF   x27,F
....................                RX_Buffer[4]=0x00; 
0A868:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0A86A:  CLRF   3F
0A86C:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................           
....................           
....................          if(Derivativo>40) 
0A86E:  MOVLB  3
0A870:  MOVF   x27,W
0A872:  SUBLW  28
0A874:  BC    A87A
....................             Derivativo=1; 
0A876:  MOVLW  01
0A878:  MOVWF  x27
....................          if(Derivativo<1) 
0A87A:  MOVF   x27,F
0A87C:  BNZ   A882
....................             Derivativo=40; 
0A87E:  MOVLW  28
0A880:  MOVWF  x27
....................       }else if(Opcion2==3){ 
0A882:  GOTO   AF7A
0A886:  MOVF   x3D,W
0A888:  SUBLW  03
0A88A:  BNZ   A948
....................          printf("Config.t2c.txt=\"Integral\""); 
0A88C:  MOVLW  12
0A88E:  MOVWF  FF6
0A890:  MOVLW  16
0A892:  MOVWF  FF7
0A894:  MOVLW  00
0A896:  MOVWF  FF8
0A898:  MOVLB  0
0A89A:  CALL   348A
....................          SendDataDisplay();       
0A89E:  CALL   34BC
....................          printf("t3c.txt=\"%u\"",Integral); 
0A8A2:  MOVLW  2C
0A8A4:  MOVWF  FF6
0A8A6:  MOVLW  16
0A8A8:  MOVWF  FF7
0A8AA:  MOVLW  00
0A8AC:  MOVWF  FF8
0A8AE:  MOVLW  09
0A8B0:  MOVLB  3
0A8B2:  MOVWF  xCA
0A8B4:  MOVLB  0
0A8B6:  CALL   4368
0A8BA:  MOVFF  326,3C8
0A8BE:  MOVLW  1B
0A8C0:  MOVLB  3
0A8C2:  MOVWF  xC9
0A8C4:  MOVLB  0
0A8C6:  CALL   43C6
0A8CA:  MOVLW  22
0A8CC:  BTFSS  F9E.4
0A8CE:  BRA    A8CC
0A8D0:  MOVWF  FAD
....................          SendDataDisplay(); 
0A8D2:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0A8D6:  MOVF   34,W
0A8D8:  SUBLW  0A
0A8DA:  BZ    A8E2
0A8DC:  BSF    F93.0
0A8DE:  BTFSC  F81.0
0A8E0:  BRA    A904
....................             delay_ms(20); 
0A8E2:  MOVLW  14
0A8E4:  MOVLB  3
0A8E6:  MOVWF  xDB
0A8E8:  MOVLB  0
0A8EA:  CALL   179E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0A8EE:  MOVF   34,W
0A8F0:  SUBLW  0A
0A8F2:  BZ    A8FA
0A8F4:  BSF    F93.0
0A8F6:  BTFSC  F81.0
0A8F8:  BRA    A904
....................                Integral++; 
0A8FA:  MOVLB  3
0A8FC:  INCF   x26,F
....................                RX_Buffer[4]=0x00;   
0A8FE:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0A900:  CLRF   3F
0A902:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0A904:  MOVF   34,W
0A906:  SUBLW  0B
0A908:  BZ    A910
0A90A:  BSF    F93.1
0A90C:  BTFSC  F81.1
0A90E:  BRA    A932
....................             delay_ms(20); 
0A910:  MOVLW  14
0A912:  MOVLB  3
0A914:  MOVWF  xDB
0A916:  MOVLB  0
0A918:  CALL   179E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0A91C:  MOVF   34,W
0A91E:  SUBLW  0B
0A920:  BZ    A928
0A922:  BSF    F93.1
0A924:  BTFSC  F81.1
0A926:  BRA    A932
....................                Integral--; 
0A928:  MOVLB  3
0A92A:  DECF   x26,F
....................                RX_Buffer[4]=0x00; 
0A92C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0A92E:  CLRF   3F
0A930:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................           
....................          if(Integral>40) 
0A932:  MOVLB  3
0A934:  MOVF   x26,W
0A936:  SUBLW  28
0A938:  BC    A93E
....................             Integral=1; 
0A93A:  MOVLW  01
0A93C:  MOVWF  x26
....................          if(Integral<1) 
0A93E:  MOVF   x26,F
0A940:  BNZ   A946
....................             Integral=40; 
0A942:  MOVLW  28
0A944:  MOVWF  x26
....................       }else if(Opcion2==4){ 
0A946:  BRA    AF7A
0A948:  MOVF   x3D,W
0A94A:  SUBLW  04
0A94C:  BTFSS  FD8.2
0A94E:  BRA    AACE
....................          printf("Config.t2c.txt=\"Tciclo\""); 
0A950:  MOVLW  3A
0A952:  MOVWF  FF6
0A954:  MOVLW  16
0A956:  MOVWF  FF7
0A958:  MOVLW  00
0A95A:  MOVWF  FF8
0A95C:  MOVLB  0
0A95E:  CALL   348A
....................          SendDataDisplay();       
0A962:  CALL   34BC
....................          printf("t3c.txt=\"%2.0f\"",Tciclo); 
0A966:  MOVLW  52
0A968:  MOVWF  FF6
0A96A:  MOVLW  16
0A96C:  MOVWF  FF7
0A96E:  MOVLW  00
0A970:  MOVWF  FF8
0A972:  MOVLW  09
0A974:  MOVLB  3
0A976:  MOVWF  xCA
0A978:  MOVLB  0
0A97A:  CALL   4368
0A97E:  MOVLW  01
0A980:  MOVWF  FE9
0A982:  MOVFF  2DD,3CD
0A986:  MOVFF  2DC,3CC
0A98A:  MOVFF  2DB,3CB
0A98E:  MOVFF  2DA,3CA
0A992:  MOVLB  3
0A994:  CLRF   xCE
0A996:  MOVLB  0
0A998:  CALL   4626
0A99C:  MOVLW  22
0A99E:  BTFSS  F9E.4
0A9A0:  BRA    A99E
0A9A2:  MOVWF  FAD
....................          SendDataDisplay(); 
0A9A4:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0A9A8:  MOVF   34,W
0A9AA:  SUBLW  0A
0A9AC:  BZ    A9B4
0A9AE:  BSF    F93.0
0A9B0:  BTFSC  F81.0
0A9B2:  BRA    AA04
....................             delay_ms(20); 
0A9B4:  MOVLW  14
0A9B6:  MOVLB  3
0A9B8:  MOVWF  xDB
0A9BA:  MOVLB  0
0A9BC:  CALL   179E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0A9C0:  MOVF   34,W
0A9C2:  SUBLW  0A
0A9C4:  BZ    A9CC
0A9C6:  BSF    F93.0
0A9C8:  BTFSC  F81.0
0A9CA:  BRA    AA04
....................                Tciclo+=1.0; 
0A9CC:  BCF    FD8.1
0A9CE:  MOVFF  2DD,3DE
0A9D2:  MOVFF  2DC,3DD
0A9D6:  MOVFF  2DB,3DC
0A9DA:  MOVFF  2DA,3DB
0A9DE:  MOVLB  3
0A9E0:  CLRF   xE2
0A9E2:  CLRF   xE1
0A9E4:  CLRF   xE0
0A9E6:  MOVLW  7F
0A9E8:  MOVWF  xDF
0A9EA:  MOVLB  0
0A9EC:  CALL   195A
0A9F0:  MOVFF  03,2DD
0A9F4:  MOVFF  02,2DC
0A9F8:  MOVFF  01,2DB
0A9FC:  MOVFF  00,2DA
....................                RX_Buffer[4]=0x00;   
0AA00:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0AA02:  CLRF   3F
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0AA04:  MOVF   34,W
0AA06:  SUBLW  0B
0AA08:  BZ    AA10
0AA0A:  BSF    F93.1
0AA0C:  BTFSC  F81.1
0AA0E:  BRA    AA60
....................             delay_ms(20); 
0AA10:  MOVLW  14
0AA12:  MOVLB  3
0AA14:  MOVWF  xDB
0AA16:  MOVLB  0
0AA18:  CALL   179E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0AA1C:  MOVF   34,W
0AA1E:  SUBLW  0B
0AA20:  BZ    AA28
0AA22:  BSF    F93.1
0AA24:  BTFSC  F81.1
0AA26:  BRA    AA60
....................                Tciclo-=1.0; 
0AA28:  BSF    FD8.1
0AA2A:  MOVFF  2DD,3DE
0AA2E:  MOVFF  2DC,3DD
0AA32:  MOVFF  2DB,3DC
0AA36:  MOVFF  2DA,3DB
0AA3A:  MOVLB  3
0AA3C:  CLRF   xE2
0AA3E:  CLRF   xE1
0AA40:  CLRF   xE0
0AA42:  MOVLW  7F
0AA44:  MOVWF  xDF
0AA46:  MOVLB  0
0AA48:  CALL   195A
0AA4C:  MOVFF  03,2DD
0AA50:  MOVFF  02,2DC
0AA54:  MOVFF  01,2DB
0AA58:  MOVFF  00,2DA
....................                RX_Buffer[4]=0x00; 
0AA5C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0AA5E:  CLRF   3F
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................           
....................          if(Tciclo>20) 
0AA60:  MOVLB  3
0AA62:  CLRF   xCD
0AA64:  CLRF   xCC
0AA66:  MOVLW  20
0AA68:  MOVWF  xCB
0AA6A:  MOVLW  83
0AA6C:  MOVWF  xCA
0AA6E:  MOVFF  2DD,3D1
0AA72:  MOVFF  2DC,3D0
0AA76:  MOVFF  2DB,3CF
0AA7A:  MOVFF  2DA,3CE
0AA7E:  MOVLB  0
0AA80:  CALL   29A4
0AA84:  BNC   AA94
....................             Tciclo=5; 
0AA86:  MOVLB  2
0AA88:  CLRF   xDD
0AA8A:  CLRF   xDC
0AA8C:  MOVLW  20
0AA8E:  MOVWF  xDB
0AA90:  MOVLW  81
0AA92:  MOVWF  xDA
....................          if(Tciclo<5) 
0AA94:  MOVFF  2DD,3CD
0AA98:  MOVFF  2DC,3CC
0AA9C:  MOVFF  2DB,3CB
0AAA0:  MOVFF  2DA,3CA
0AAA4:  MOVLB  3
0AAA6:  CLRF   xD1
0AAA8:  CLRF   xD0
0AAAA:  MOVLW  20
0AAAC:  MOVWF  xCF
0AAAE:  MOVLW  81
0AAB0:  MOVWF  xCE
0AAB2:  MOVLB  0
0AAB4:  CALL   29A4
0AAB8:  BNC   AACA
....................             Tciclo=20; 
0AABA:  MOVLB  2
0AABC:  CLRF   xDD
0AABE:  CLRF   xDC
0AAC0:  MOVLW  20
0AAC2:  MOVWF  xDB
0AAC4:  MOVLW  83
0AAC6:  MOVWF  xDA
0AAC8:  MOVLB  0
....................       }else if(Opcion2==5){ 
0AACA:  BRA    AF78
0AACC:  MOVLB  3
0AACE:  MOVF   x3D,W
0AAD0:  SUBLW  05
0AAD2:  BNZ   AB88
....................          printf("Config.t2c.txt=\"Ajuste +\""); 
0AAD4:  MOVLW  62
0AAD6:  MOVWF  FF6
0AAD8:  MOVLW  16
0AADA:  MOVWF  FF7
0AADC:  MOVLW  00
0AADE:  MOVWF  FF8
0AAE0:  MOVLB  0
0AAE2:  CALL   348A
....................          SendDataDisplay();       
0AAE6:  CALL   34BC
....................          printf("t3c.txt=\"%u\"",Ajuste); 
0AAEA:  MOVLW  7C
0AAEC:  MOVWF  FF6
0AAEE:  MOVLW  16
0AAF0:  MOVWF  FF7
0AAF2:  MOVLW  00
0AAF4:  MOVWF  FF8
0AAF6:  MOVLW  09
0AAF8:  MOVLB  3
0AAFA:  MOVWF  xCA
0AAFC:  MOVLB  0
0AAFE:  CALL   4368
0AB02:  MOVFF  2CA,3C8
0AB06:  MOVLW  1B
0AB08:  MOVLB  3
0AB0A:  MOVWF  xC9
0AB0C:  MOVLB  0
0AB0E:  CALL   43C6
0AB12:  MOVLW  22
0AB14:  BTFSS  F9E.4
0AB16:  BRA    AB14
0AB18:  MOVWF  FAD
....................          SendDataDisplay(); 
0AB1A:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0AB1E:  MOVF   34,W
0AB20:  SUBLW  0A
0AB22:  BZ    AB2A
0AB24:  BSF    F93.0
0AB26:  BTFSC  F81.0
0AB28:  BRA    AB52
....................             delay_ms(20); 
0AB2A:  MOVLW  14
0AB2C:  MOVLB  3
0AB2E:  MOVWF  xDB
0AB30:  MOVLB  0
0AB32:  CALL   179E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0AB36:  MOVF   34,W
0AB38:  SUBLW  0A
0AB3A:  BZ    AB42
0AB3C:  BSF    F93.0
0AB3E:  BTFSC  F81.0
0AB40:  BRA    AB52
....................                if(Ajuste<40) 
0AB42:  MOVLB  2
0AB44:  MOVF   xCA,W
0AB46:  SUBLW  27
0AB48:  BNC   AB4C
....................                   Ajuste++; 
0AB4A:  INCF   xCA,F
....................                RX_Buffer[4]=0x00;   
0AB4C:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0AB4E:  CLRF   3F
0AB50:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0AB52:  MOVF   34,W
0AB54:  SUBLW  0B
0AB56:  BZ    AB5E
0AB58:  BSF    F93.1
0AB5A:  BTFSC  F81.1
0AB5C:  BRA    AB84
....................             delay_ms(20); 
0AB5E:  MOVLW  14
0AB60:  MOVLB  3
0AB62:  MOVWF  xDB
0AB64:  MOVLB  0
0AB66:  CALL   179E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0AB6A:  MOVF   34,W
0AB6C:  SUBLW  0B
0AB6E:  BZ    AB76
0AB70:  BSF    F93.1
0AB72:  BTFSC  F81.1
0AB74:  BRA    AB84
....................                if(Ajuste>0) 
0AB76:  MOVLB  2
0AB78:  MOVF   xCA,F
0AB7A:  BZ    AB7E
....................                   Ajuste--; 
0AB7C:  DECF   xCA,F
....................                RX_Buffer[4]=0x00; 
0AB7E:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0AB80:  CLRF   3F
0AB82:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==6){ 
0AB84:  BRA    AF78
0AB86:  MOVLB  3
0AB88:  MOVF   x3D,W
0AB8A:  SUBLW  06
0AB8C:  BNZ   AC42
....................          printf("Config.t2c.txt=\"Ajuste -\""); 
0AB8E:  MOVLW  8A
0AB90:  MOVWF  FF6
0AB92:  MOVLW  16
0AB94:  MOVWF  FF7
0AB96:  MOVLW  00
0AB98:  MOVWF  FF8
0AB9A:  MOVLB  0
0AB9C:  CALL   348A
....................          SendDataDisplay();       
0ABA0:  CALL   34BC
....................          printf("t3c.txt=\"%u\"",Ajusten); 
0ABA4:  MOVLW  A4
0ABA6:  MOVWF  FF6
0ABA8:  MOVLW  16
0ABAA:  MOVWF  FF7
0ABAC:  MOVLW  00
0ABAE:  MOVWF  FF8
0ABB0:  MOVLW  09
0ABB2:  MOVLB  3
0ABB4:  MOVWF  xCA
0ABB6:  MOVLB  0
0ABB8:  CALL   4368
0ABBC:  MOVFF  2CB,3C8
0ABC0:  MOVLW  1B
0ABC2:  MOVLB  3
0ABC4:  MOVWF  xC9
0ABC6:  MOVLB  0
0ABC8:  CALL   43C6
0ABCC:  MOVLW  22
0ABCE:  BTFSS  F9E.4
0ABD0:  BRA    ABCE
0ABD2:  MOVWF  FAD
....................          SendDataDisplay(); 
0ABD4:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0ABD8:  MOVF   34,W
0ABDA:  SUBLW  0A
0ABDC:  BZ    ABE4
0ABDE:  BSF    F93.0
0ABE0:  BTFSC  F81.0
0ABE2:  BRA    AC0C
....................             delay_ms(20); 
0ABE4:  MOVLW  14
0ABE6:  MOVLB  3
0ABE8:  MOVWF  xDB
0ABEA:  MOVLB  0
0ABEC:  CALL   179E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0ABF0:  MOVF   34,W
0ABF2:  SUBLW  0A
0ABF4:  BZ    ABFC
0ABF6:  BSF    F93.0
0ABF8:  BTFSC  F81.0
0ABFA:  BRA    AC0C
....................                if(Ajusten<40) 
0ABFC:  MOVLB  2
0ABFE:  MOVF   xCB,W
0AC00:  SUBLW  27
0AC02:  BNC   AC06
....................                   Ajusten++; 
0AC04:  INCF   xCB,F
....................                RX_Buffer[4]=0x00;   
0AC06:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0AC08:  CLRF   3F
0AC0A:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0AC0C:  MOVF   34,W
0AC0E:  SUBLW  0B
0AC10:  BZ    AC18
0AC12:  BSF    F93.1
0AC14:  BTFSC  F81.1
0AC16:  BRA    AC3E
....................             delay_ms(20); 
0AC18:  MOVLW  14
0AC1A:  MOVLB  3
0AC1C:  MOVWF  xDB
0AC1E:  MOVLB  0
0AC20:  CALL   179E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0AC24:  MOVF   34,W
0AC26:  SUBLW  0B
0AC28:  BZ    AC30
0AC2A:  BSF    F93.1
0AC2C:  BTFSC  F81.1
0AC2E:  BRA    AC3E
....................                if(Ajusten>0) 
0AC30:  MOVLB  2
0AC32:  MOVF   xCB,F
0AC34:  BZ    AC38
....................                   Ajusten--; 
0AC36:  DECF   xCB,F
....................                RX_Buffer[4]=0x00; 
0AC38:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0AC3A:  CLRF   3F
0AC3C:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==7){ 
0AC3E:  BRA    AF78
0AC40:  MOVLB  3
0AC42:  MOVF   x3D,W
0AC44:  SUBLW  07
0AC46:  BNZ   ACFE
....................          printf("Config.t2c.txt=\"Media\""); 
0AC48:  MOVLW  B2
0AC4A:  MOVWF  FF6
0AC4C:  MOVLW  16
0AC4E:  MOVWF  FF7
0AC50:  MOVLW  00
0AC52:  MOVWF  FF8
0AC54:  MOVLB  0
0AC56:  CALL   348A
....................          SendDataDisplay();       
0AC5A:  CALL   34BC
....................          printf("t3c.txt=\"%u\"",MediaMovil); 
0AC5E:  MOVLW  CA
0AC60:  MOVWF  FF6
0AC62:  MOVLW  16
0AC64:  MOVWF  FF7
0AC66:  MOVLW  00
0AC68:  MOVWF  FF8
0AC6A:  MOVLW  09
0AC6C:  MOVLB  3
0AC6E:  MOVWF  xCA
0AC70:  MOVLB  0
0AC72:  CALL   4368
0AC76:  MOVFF  2CC,3C8
0AC7A:  MOVLW  1B
0AC7C:  MOVLB  3
0AC7E:  MOVWF  xC9
0AC80:  MOVLB  0
0AC82:  CALL   43C6
0AC86:  MOVLW  22
0AC88:  BTFSS  F9E.4
0AC8A:  BRA    AC88
0AC8C:  MOVWF  FAD
....................          SendDataDisplay(); 
0AC8E:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0AC92:  MOVF   34,W
0AC94:  SUBLW  0A
0AC96:  BZ    AC9E
0AC98:  BSF    F93.0
0AC9A:  BTFSC  F81.0
0AC9C:  BRA    ACC6
....................             delay_ms(20); 
0AC9E:  MOVLW  14
0ACA0:  MOVLB  3
0ACA2:  MOVWF  xDB
0ACA4:  MOVLB  0
0ACA6:  CALL   179E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0ACAA:  MOVF   34,W
0ACAC:  SUBLW  0A
0ACAE:  BZ    ACB6
0ACB0:  BSF    F93.0
0ACB2:  BTFSC  F81.0
0ACB4:  BRA    ACC6
....................                if(MediaMovil<80) 
0ACB6:  MOVLB  2
0ACB8:  MOVF   xCC,W
0ACBA:  SUBLW  4F
0ACBC:  BNC   ACC0
....................                   MediaMovil++; 
0ACBE:  INCF   xCC,F
....................                RX_Buffer[4]=0x00;   
0ACC0:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0ACC2:  CLRF   3F
0ACC4:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0ACC6:  MOVF   34,W
0ACC8:  SUBLW  0B
0ACCA:  BZ    ACD2
0ACCC:  BSF    F93.1
0ACCE:  BTFSC  F81.1
0ACD0:  BRA    ACFA
....................             delay_ms(20); 
0ACD2:  MOVLW  14
0ACD4:  MOVLB  3
0ACD6:  MOVWF  xDB
0ACD8:  MOVLB  0
0ACDA:  CALL   179E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0ACDE:  MOVF   34,W
0ACE0:  SUBLW  0B
0ACE2:  BZ    ACEA
0ACE4:  BSF    F93.1
0ACE6:  BTFSC  F81.1
0ACE8:  BRA    ACFA
....................                if(MediaMovil>10) 
0ACEA:  MOVLB  2
0ACEC:  MOVF   xCC,W
0ACEE:  SUBLW  0A
0ACF0:  BC    ACF4
....................                   MediaMovil--; 
0ACF2:  DECF   xCC,F
....................                RX_Buffer[4]=0x00; 
0ACF4:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0ACF6:  CLRF   3F
0ACF8:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==8){ 
0ACFA:  BRA    AF78
0ACFC:  MOVLB  3
0ACFE:  MOVF   x3D,W
0AD00:  SUBLW  08
0AD02:  BTFSS  FD8.2
0AD04:  BRA    AE6C
....................          printf("Config.t2c.txt=\"RPT100B\""); 
0AD06:  MOVLW  D8
0AD08:  MOVWF  FF6
0AD0A:  MOVLW  16
0AD0C:  MOVWF  FF7
0AD0E:  MOVLW  00
0AD10:  MOVWF  FF8
0AD12:  MOVLB  0
0AD14:  CALL   348A
....................          SendDataDisplay();       
0AD18:  CALL   34BC
....................          printf("t3c.txt=\"%2.1f\"",RPT100); 
0AD1C:  MOVLW  F2
0AD1E:  MOVWF  FF6
0AD20:  MOVLW  16
0AD22:  MOVWF  FF7
0AD24:  MOVLW  00
0AD26:  MOVWF  FF8
0AD28:  MOVLW  09
0AD2A:  MOVLB  3
0AD2C:  MOVWF  xCA
0AD2E:  MOVLB  0
0AD30:  CALL   4368
0AD34:  MOVLW  01
0AD36:  MOVWF  FE9
0AD38:  MOVFF  2A7,3CD
0AD3C:  MOVFF  2A6,3CC
0AD40:  MOVFF  2A5,3CB
0AD44:  MOVFF  2A4,3CA
0AD48:  MOVLB  3
0AD4A:  MOVWF  xCE
0AD4C:  MOVLB  0
0AD4E:  CALL   4626
0AD52:  MOVLW  22
0AD54:  BTFSS  F9E.4
0AD56:  BRA    AD54
0AD58:  MOVWF  FAD
....................          SendDataDisplay(); 
0AD5A:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0AD5E:  MOVF   34,W
0AD60:  SUBLW  0A
0AD62:  BZ    AD6A
0AD64:  BSF    F93.0
0AD66:  BTFSC  F81.0
0AD68:  BRA    ADE4
....................             delay_ms(20); 
0AD6A:  MOVLW  14
0AD6C:  MOVLB  3
0AD6E:  MOVWF  xDB
0AD70:  MOVLB  0
0AD72:  CALL   179E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0AD76:  MOVF   34,W
0AD78:  SUBLW  0A
0AD7A:  BZ    AD82
0AD7C:  BSF    F93.0
0AD7E:  BTFSC  F81.0
0AD80:  BRA    ADE4
....................                if(RPT100<2.0) 
0AD82:  MOVFF  2A7,3CD
0AD86:  MOVFF  2A6,3CC
0AD8A:  MOVFF  2A5,3CB
0AD8E:  MOVFF  2A4,3CA
0AD92:  MOVLB  3
0AD94:  CLRF   xD1
0AD96:  CLRF   xD0
0AD98:  CLRF   xCF
0AD9A:  MOVLW  80
0AD9C:  MOVWF  xCE
0AD9E:  MOVLB  0
0ADA0:  CALL   29A4
0ADA4:  BNC   ADE0
....................                   RPT100+=0.1; 
0ADA6:  BCF    FD8.1
0ADA8:  MOVFF  2A7,3DE
0ADAC:  MOVFF  2A6,3DD
0ADB0:  MOVFF  2A5,3DC
0ADB4:  MOVFF  2A4,3DB
0ADB8:  MOVLW  CD
0ADBA:  MOVLB  3
0ADBC:  MOVWF  xE2
0ADBE:  MOVLW  CC
0ADC0:  MOVWF  xE1
0ADC2:  MOVLW  4C
0ADC4:  MOVWF  xE0
0ADC6:  MOVLW  7B
0ADC8:  MOVWF  xDF
0ADCA:  MOVLB  0
0ADCC:  CALL   195A
0ADD0:  MOVFF  03,2A7
0ADD4:  MOVFF  02,2A6
0ADD8:  MOVFF  01,2A5
0ADDC:  MOVFF  00,2A4
....................                RX_Buffer[4]=0x00;   
0ADE0:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0ADE2:  CLRF   3F
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0ADE4:  MOVF   34,W
0ADE6:  SUBLW  0B
0ADE8:  BZ    ADF0
0ADEA:  BSF    F93.1
0ADEC:  BTFSC  F81.1
0ADEE:  BRA    AE68
....................             delay_ms(20); 
0ADF0:  MOVLW  14
0ADF2:  MOVLB  3
0ADF4:  MOVWF  xDB
0ADF6:  MOVLB  0
0ADF8:  CALL   179E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0ADFC:  MOVF   34,W
0ADFE:  SUBLW  0B
0AE00:  BZ    AE08
0AE02:  BSF    F93.1
0AE04:  BTFSC  F81.1
0AE06:  BRA    AE68
....................                if(RPT100>0.0) 
0AE08:  MOVLB  3
0AE0A:  CLRF   xCD
0AE0C:  CLRF   xCC
0AE0E:  CLRF   xCB
0AE10:  CLRF   xCA
0AE12:  MOVFF  2A7,3D1
0AE16:  MOVFF  2A6,3D0
0AE1A:  MOVFF  2A5,3CF
0AE1E:  MOVFF  2A4,3CE
0AE22:  MOVLB  0
0AE24:  CALL   29A4
0AE28:  BNC   AE64
....................                   RPT100-=0.1; 
0AE2A:  BSF    FD8.1
0AE2C:  MOVFF  2A7,3DE
0AE30:  MOVFF  2A6,3DD
0AE34:  MOVFF  2A5,3DC
0AE38:  MOVFF  2A4,3DB
0AE3C:  MOVLW  CD
0AE3E:  MOVLB  3
0AE40:  MOVWF  xE2
0AE42:  MOVLW  CC
0AE44:  MOVWF  xE1
0AE46:  MOVLW  4C
0AE48:  MOVWF  xE0
0AE4A:  MOVLW  7B
0AE4C:  MOVWF  xDF
0AE4E:  MOVLB  0
0AE50:  CALL   195A
0AE54:  MOVFF  03,2A7
0AE58:  MOVFF  02,2A6
0AE5C:  MOVFF  01,2A5
0AE60:  MOVFF  00,2A4
....................                RX_Buffer[4]=0x00; 
0AE64:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0AE66:  CLRF   3F
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==9){ 
0AE68:  BRA    AF78
0AE6A:  MOVLB  3
0AE6C:  MOVF   x3D,W
0AE6E:  SUBLW  09
0AE70:  BNZ   AF28
....................          printf("Config.t2c.txt=\"TTrampa\""); 
0AE72:  MOVLW  02
0AE74:  MOVWF  FF6
0AE76:  MOVLW  17
0AE78:  MOVWF  FF7
0AE7A:  MOVLW  00
0AE7C:  MOVWF  FF8
0AE7E:  MOVLB  0
0AE80:  CALL   348A
....................          SendDataDisplay();       
0AE84:  CALL   34BC
....................          printf("t3c.txt=\"%02u\"",TTrampa); 
0AE88:  MOVLW  1C
0AE8A:  MOVWF  FF6
0AE8C:  MOVLW  17
0AE8E:  MOVWF  FF7
0AE90:  MOVLW  00
0AE92:  MOVWF  FF8
0AE94:  MOVLW  09
0AE96:  MOVLB  3
0AE98:  MOVWF  xCA
0AE9A:  MOVLB  0
0AE9C:  CALL   4368
0AEA0:  MOVFF  2CD,3C8
0AEA4:  MOVLW  01
0AEA6:  MOVLB  3
0AEA8:  MOVWF  xC9
0AEAA:  MOVLB  0
0AEAC:  CALL   43C6
0AEB0:  MOVLW  22
0AEB2:  BTFSS  F9E.4
0AEB4:  BRA    AEB2
0AEB6:  MOVWF  FAD
....................          SendDataDisplay(); 
0AEB8:  CALL   34BC
....................          if(RX_Buffer[4]==0x0a || UP){//Tecla Arriba Oprimida 
0AEBC:  MOVF   34,W
0AEBE:  SUBLW  0A
0AEC0:  BZ    AEC8
0AEC2:  BSF    F93.0
0AEC4:  BTFSC  F81.0
0AEC6:  BRA    AEF0
....................             delay_ms(20); 
0AEC8:  MOVLW  14
0AECA:  MOVLB  3
0AECC:  MOVWF  xDB
0AECE:  MOVLB  0
0AED0:  CALL   179E
....................             if(RX_Buffer[4]==0x0a || UP){ 
0AED4:  MOVF   34,W
0AED6:  SUBLW  0A
0AED8:  BZ    AEE0
0AEDA:  BSF    F93.0
0AEDC:  BTFSC  F81.0
0AEDE:  BRA    AEF0
....................                if(TTrampa<100) 
0AEE0:  MOVLB  2
0AEE2:  MOVF   xCD,W
0AEE4:  SUBLW  63
0AEE6:  BNC   AEEA
....................                   TTrampa++; 
0AEE8:  INCF   xCD,F
....................                RX_Buffer[4]=0x00;   
0AEEA:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0AEEC:  CLRF   3F
0AEEE:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................              
....................          if(RX_Buffer[4]==0x0b || DOWN){//Tecla Abajo Oprimida 
0AEF0:  MOVF   34,W
0AEF2:  SUBLW  0B
0AEF4:  BZ    AEFC
0AEF6:  BSF    F93.1
0AEF8:  BTFSC  F81.1
0AEFA:  BRA    AF24
....................             delay_ms(20); 
0AEFC:  MOVLW  14
0AEFE:  MOVLB  3
0AF00:  MOVWF  xDB
0AF02:  MOVLB  0
0AF04:  CALL   179E
....................             if(RX_Buffer[4]==0x0b || DOWN){ 
0AF08:  MOVF   34,W
0AF0A:  SUBLW  0B
0AF0C:  BZ    AF14
0AF0E:  BSF    F93.1
0AF10:  BTFSC  F81.1
0AF12:  BRA    AF24
....................                if(TTrampa>50) 
0AF14:  MOVLB  2
0AF16:  MOVF   xCD,W
0AF18:  SUBLW  32
0AF1A:  BC    AF1E
....................                   TTrampa--; 
0AF1C:  DECF   xCD,F
....................                RX_Buffer[4]=0x00; 
0AF1E:  CLRF   34
....................                RX_Buffer2[4]=0x00;             
0AF20:  CLRF   3F
0AF22:  MOVLB  0
....................                //BorraBuffer(); 
....................             } 
....................          } 
....................       }else if(Opcion2==10){ 
0AF24:  BRA    AF78
0AF26:  MOVLB  3
0AF28:  MOVF   x3D,W
0AF2A:  SUBLW  0A
0AF2C:  BNZ   AF7A
....................          printf("Config.t2c.txt=\"Ciclos\""); 
0AF2E:  MOVLW  2C
0AF30:  MOVWF  FF6
0AF32:  MOVLW  17
0AF34:  MOVWF  FF7
0AF36:  MOVLW  00
0AF38:  MOVWF  FF8
0AF3A:  MOVLB  0
0AF3C:  CALL   348A
....................          SendDataDisplay();       
0AF40:  CALL   34BC
....................          printf("t3c.txt=\"%05Lu\"",Ciclos); 
0AF44:  MOVLW  44
0AF46:  MOVWF  FF6
0AF48:  MOVLW  17
0AF4A:  MOVWF  FF7
0AF4C:  MOVLW  00
0AF4E:  MOVWF  FF8
0AF50:  MOVLW  09
0AF52:  MOVLB  3
0AF54:  MOVWF  xCA
0AF56:  MOVLB  0
0AF58:  CALL   4368
0AF5C:  MOVLW  08
0AF5E:  MOVWF  FE9
0AF60:  MOVFF  352,3CB
0AF64:  MOVFF  351,3CA
0AF68:  CALL   44B8
0AF6C:  MOVLW  22
0AF6E:  BTFSS  F9E.4
0AF70:  BRA    AF6E
0AF72:  MOVWF  FAD
....................          SendDataDisplay(); 
0AF74:  CALL   34BC
0AF78:  MOVLB  3
....................       } 
....................        
....................       if(RX_Buffer[4]==0x0c || LEFT){//Tecla Izquierda Oprimida 
0AF7A:  MOVF   34,W
0AF7C:  SUBLW  0C
0AF7E:  BZ    AF86
0AF80:  BSF    F93.3
0AF82:  BTFSC  F81.3
0AF84:  BRA    AFA4
....................          delay_ms(20); 
0AF86:  MOVLW  14
0AF88:  MOVWF  xDB
0AF8A:  MOVLB  0
0AF8C:  CALL   179E
....................          if(RX_Buffer[4]==0x0c || LEFT){ 
0AF90:  MOVF   34,W
0AF92:  SUBLW  0C
0AF94:  BZ    AF9C
0AF96:  BSF    F93.3
0AF98:  BTFSC  F81.3
0AF9A:  BRA    AFA6
....................             Opcion2++; 
0AF9C:  MOVLB  3
0AF9E:  INCF   x3D,F
....................             RX_Buffer[4]=0x00;   
0AFA0:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AFA2:  CLRF   3F
0AFA4:  MOVLB  0
....................             //BorraBuffer(); 
....................          } 
....................       } 
....................           
....................       if(RX_Buffer[4]==0x0d || RIGHT){//Tecla Derecha Oprimida 
0AFA6:  MOVF   34,W
0AFA8:  SUBLW  0D
0AFAA:  BZ    AFB2
0AFAC:  BSF    F93.2
0AFAE:  BTFSC  F81.2
0AFB0:  BRA    AFD4
....................          delay_ms(20); 
0AFB2:  MOVLW  14
0AFB4:  MOVLB  3
0AFB6:  MOVWF  xDB
0AFB8:  MOVLB  0
0AFBA:  CALL   179E
....................          if(RX_Buffer[4]==0x0d || RIGHT){ 
0AFBE:  MOVF   34,W
0AFC0:  SUBLW  0D
0AFC2:  BZ    AFCA
0AFC4:  BSF    F93.2
0AFC6:  BTFSC  F81.2
0AFC8:  BRA    AFD4
....................             Opcion2--; 
0AFCA:  MOVLB  3
0AFCC:  DECF   x3D,F
....................             RX_Buffer[4]=0x00; 
0AFCE:  CLRF   34
....................             RX_Buffer2[4]=0x00;             
0AFD0:  CLRF   3F
0AFD2:  MOVLB  0
....................             //BorraBuffer(); 
....................          } 
....................       } 
....................        
....................       if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){//Tecla Regresar 
0AFD4:  MOVF   34,W
0AFD6:  SUBLW  11
0AFD8:  BZ    AFE6
0AFDA:  BSF    F93.2
0AFDC:  BTFSC  F81.2
0AFDE:  BRA    B34E
0AFE0:  BSF    F93.3
0AFE2:  BTFSC  F81.3
0AFE4:  BRA    B34E
....................          delay_ms(20); 
0AFE6:  MOVLW  14
0AFE8:  MOVLB  3
0AFEA:  MOVWF  xDB
0AFEC:  MOVLB  0
0AFEE:  CALL   179E
....................          if(RX_Buffer[4]==0x11 || (RIGHT && LEFT)){ 
0AFF2:  MOVF   34,W
0AFF4:  SUBLW  11
0AFF6:  BZ    B004
0AFF8:  BSF    F93.2
0AFFA:  BTFSC  F81.2
0AFFC:  BRA    B34E
0AFFE:  BSF    F93.3
0B000:  BTFSC  F81.3
0B002:  BRA    B34E
....................             if(!GuardaEEPROM){ 
0B004:  BTFSC  xA2.4
0B006:  BRA    B33A
....................                write_eeprom(20,(int8)Ganancia); 
0B008:  MOVFF  2F5,3DE
0B00C:  MOVFF  2F4,3DD
0B010:  MOVFF  2F3,3DC
0B014:  MOVFF  2F2,3DB
0B018:  CALL   3BB4
0B01C:  MOVFF  01,3C6
0B020:  CLRF   FAA
0B022:  MOVLW  14
0B024:  MOVWF  FA9
0B026:  MOVFF  3C6,FA8
0B02A:  BCF    FA6.6
0B02C:  BCF    FA6.7
0B02E:  BSF    FA6.2
0B030:  MOVF   FF2,W
0B032:  MOVWF  00
0B034:  BCF    FF2.6
0B036:  BCF    FF2.7
0B038:  MOVLB  F
0B03A:  MOVLW  55
0B03C:  MOVWF  FA7
0B03E:  MOVLW  AA
0B040:  MOVWF  FA7
0B042:  BSF    FA6.1
0B044:  BTFSC  FA6.1
0B046:  BRA    B044
0B048:  BCF    FA6.2
0B04A:  MOVF   00,W
0B04C:  IORWF  FF2,F
....................                delay_ms(10); 
0B04E:  MOVLW  0A
0B050:  MOVLB  3
0B052:  MOVWF  xDB
0B054:  MOVLB  0
0B056:  CALL   179E
....................                write_eeprom(26,(int8)Integral); 
0B05A:  CLRF   FAA
0B05C:  MOVLW  1A
0B05E:  MOVWF  FA9
0B060:  MOVFF  326,FA8
0B064:  BCF    FA6.6
0B066:  BCF    FA6.7
0B068:  BSF    FA6.2
0B06A:  MOVF   FF2,W
0B06C:  MOVWF  00
0B06E:  BCF    FF2.6
0B070:  BCF    FF2.7
0B072:  MOVLB  F
0B074:  MOVLW  55
0B076:  MOVWF  FA7
0B078:  MOVLW  AA
0B07A:  MOVWF  FA7
0B07C:  BSF    FA6.1
0B07E:  BTFSC  FA6.1
0B080:  BRA    B07E
0B082:  BCF    FA6.2
0B084:  MOVF   00,W
0B086:  IORWF  FF2,F
....................                delay_ms(10); 
0B088:  MOVLW  0A
0B08A:  MOVLB  3
0B08C:  MOVWF  xDB
0B08E:  MOVLB  0
0B090:  CALL   179E
....................                write_eeprom(27,(int8)Derivativo); 
0B094:  CLRF   FAA
0B096:  MOVLW  1B
0B098:  MOVWF  FA9
0B09A:  MOVFF  327,FA8
0B09E:  BCF    FA6.6
0B0A0:  BCF    FA6.7
0B0A2:  BSF    FA6.2
0B0A4:  MOVF   FF2,W
0B0A6:  MOVWF  00
0B0A8:  BCF    FF2.6
0B0AA:  BCF    FF2.7
0B0AC:  MOVLB  F
0B0AE:  MOVLW  55
0B0B0:  MOVWF  FA7
0B0B2:  MOVLW  AA
0B0B4:  MOVWF  FA7
0B0B6:  BSF    FA6.1
0B0B8:  BTFSC  FA6.1
0B0BA:  BRA    B0B8
0B0BC:  BCF    FA6.2
0B0BE:  MOVF   00,W
0B0C0:  IORWF  FF2,F
....................                delay_ms(10); 
0B0C2:  MOVLW  0A
0B0C4:  MOVLB  3
0B0C6:  MOVWF  xDB
0B0C8:  MOVLB  0
0B0CA:  CALL   179E
....................                write_eeprom(25,(int8)Tciclo); 
0B0CE:  MOVFF  2DD,3DE
0B0D2:  MOVFF  2DC,3DD
0B0D6:  MOVFF  2DB,3DC
0B0DA:  MOVFF  2DA,3DB
0B0DE:  CALL   3BB4
0B0E2:  MOVFF  01,3C6
0B0E6:  CLRF   FAA
0B0E8:  MOVLW  19
0B0EA:  MOVWF  FA9
0B0EC:  MOVFF  3C6,FA8
0B0F0:  BCF    FA6.6
0B0F2:  BCF    FA6.7
0B0F4:  BSF    FA6.2
0B0F6:  MOVF   FF2,W
0B0F8:  MOVWF  00
0B0FA:  BCF    FF2.6
0B0FC:  BCF    FF2.7
0B0FE:  MOVLB  F
0B100:  MOVLW  55
0B102:  MOVWF  FA7
0B104:  MOVLW  AA
0B106:  MOVWF  FA7
0B108:  BSF    FA6.1
0B10A:  BTFSC  FA6.1
0B10C:  BRA    B10A
0B10E:  BCF    FA6.2
0B110:  MOVF   00,W
0B112:  IORWF  FF2,F
....................                delay_ms(10); 
0B114:  MOVLW  0A
0B116:  MOVLB  3
0B118:  MOVWF  xDB
0B11A:  MOVLB  0
0B11C:  CALL   179E
....................                write_eeprom(21,Ajuste); 
0B120:  CLRF   FAA
0B122:  MOVLW  15
0B124:  MOVWF  FA9
0B126:  MOVFF  2CA,FA8
0B12A:  BCF    FA6.6
0B12C:  BCF    FA6.7
0B12E:  BSF    FA6.2
0B130:  MOVF   FF2,W
0B132:  MOVWF  00
0B134:  BCF    FF2.6
0B136:  BCF    FF2.7
0B138:  MOVLB  F
0B13A:  MOVLW  55
0B13C:  MOVWF  FA7
0B13E:  MOVLW  AA
0B140:  MOVWF  FA7
0B142:  BSF    FA6.1
0B144:  BTFSC  FA6.1
0B146:  BRA    B144
0B148:  BCF    FA6.2
0B14A:  MOVF   00,W
0B14C:  IORWF  FF2,F
....................                delay_ms(10); 
0B14E:  MOVLW  0A
0B150:  MOVLB  3
0B152:  MOVWF  xDB
0B154:  MOVLB  0
0B156:  CALL   179E
....................                write_eeprom(22,Ajusten); 
0B15A:  CLRF   FAA
0B15C:  MOVLW  16
0B15E:  MOVWF  FA9
0B160:  MOVFF  2CB,FA8
0B164:  BCF    FA6.6
0B166:  BCF    FA6.7
0B168:  BSF    FA6.2
0B16A:  MOVF   FF2,W
0B16C:  MOVWF  00
0B16E:  BCF    FF2.6
0B170:  BCF    FF2.7
0B172:  MOVLB  F
0B174:  MOVLW  55
0B176:  MOVWF  FA7
0B178:  MOVLW  AA
0B17A:  MOVWF  FA7
0B17C:  BSF    FA6.1
0B17E:  BTFSC  FA6.1
0B180:  BRA    B17E
0B182:  BCF    FA6.2
0B184:  MOVF   00,W
0B186:  IORWF  FF2,F
....................                delay_ms(10); 
0B188:  MOVLW  0A
0B18A:  MOVLB  3
0B18C:  MOVWF  xDB
0B18E:  MOVLB  0
0B190:  CALL   179E
....................                write_eeprom(24,(int8)MediaMovil); 
0B194:  CLRF   FAA
0B196:  MOVLW  18
0B198:  MOVWF  FA9
0B19A:  MOVFF  2CC,FA8
0B19E:  BCF    FA6.6
0B1A0:  BCF    FA6.7
0B1A2:  BSF    FA6.2
0B1A4:  MOVF   FF2,W
0B1A6:  MOVWF  00
0B1A8:  BCF    FF2.6
0B1AA:  BCF    FF2.7
0B1AC:  MOVLB  F
0B1AE:  MOVLW  55
0B1B0:  MOVWF  FA7
0B1B2:  MOVLW  AA
0B1B4:  MOVWF  FA7
0B1B6:  BSF    FA6.1
0B1B8:  BTFSC  FA6.1
0B1BA:  BRA    B1B8
0B1BC:  BCF    FA6.2
0B1BE:  MOVF   00,W
0B1C0:  IORWF  FF2,F
....................                delay_ms(10); 
0B1C2:  MOVLW  0A
0B1C4:  MOVLB  3
0B1C6:  MOVWF  xDB
0B1C8:  MOVLB  0
0B1CA:  CALL   179E
....................                write_eeprom(32,(int8)RPT100); 
0B1CE:  MOVFF  2A7,3DE
0B1D2:  MOVFF  2A6,3DD
0B1D6:  MOVFF  2A5,3DC
0B1DA:  MOVFF  2A4,3DB
0B1DE:  CALL   3BB4
0B1E2:  MOVFF  01,3C6
0B1E6:  CLRF   FAA
0B1E8:  MOVLW  20
0B1EA:  MOVWF  FA9
0B1EC:  MOVFF  3C6,FA8
0B1F0:  BCF    FA6.6
0B1F2:  BCF    FA6.7
0B1F4:  BSF    FA6.2
0B1F6:  MOVF   FF2,W
0B1F8:  MOVWF  00
0B1FA:  BCF    FF2.6
0B1FC:  BCF    FF2.7
0B1FE:  MOVLB  F
0B200:  MOVLW  55
0B202:  MOVWF  FA7
0B204:  MOVLW  AA
0B206:  MOVWF  FA7
0B208:  BSF    FA6.1
0B20A:  BTFSC  FA6.1
0B20C:  BRA    B20A
0B20E:  BCF    FA6.2
0B210:  MOVF   00,W
0B212:  IORWF  FF2,F
....................                delay_ms(10); 
0B214:  MOVLW  0A
0B216:  MOVLB  3
0B218:  MOVWF  xDB
0B21A:  MOVLB  0
0B21C:  CALL   179E
....................                Temporal=RPT100-((int8)RPT100); 
0B220:  MOVFF  2A7,3DE
0B224:  MOVFF  2A6,3DD
0B228:  MOVFF  2A5,3DC
0B22C:  MOVFF  2A4,3DB
0B230:  CALL   3BB4
0B234:  MOVLB  3
0B236:  CLRF   xDC
0B238:  MOVFF  01,3DB
0B23C:  MOVLB  0
0B23E:  CALL   17C6
0B242:  BSF    FD8.1
0B244:  MOVFF  2A7,3DE
0B248:  MOVFF  2A6,3DD
0B24C:  MOVFF  2A5,3DC
0B250:  MOVFF  2A4,3DB
0B254:  MOVFF  03,3E2
0B258:  MOVFF  02,3E1
0B25C:  MOVFF  01,3E0
0B260:  MOVFF  00,3DF
0B264:  CALL   195A
0B268:  MOVFF  03,2AB
0B26C:  MOVFF  02,2AA
0B270:  MOVFF  01,2A9
0B274:  MOVFF  00,2A8
....................                Temporal=Temporal*10; 
0B278:  MOVFF  2AB,3E2
0B27C:  MOVFF  2AA,3E1
0B280:  MOVFF  2A9,3E0
0B284:  MOVFF  2A8,3DF
0B288:  MOVLB  3
0B28A:  CLRF   xE6
0B28C:  CLRF   xE5
0B28E:  MOVLW  20
0B290:  MOVWF  xE4
0B292:  MOVLW  82
0B294:  MOVWF  xE3
0B296:  MOVLB  0
0B298:  CALL   358A
0B29C:  MOVFF  03,2AB
0B2A0:  MOVFF  02,2AA
0B2A4:  MOVFF  01,2A9
0B2A8:  MOVFF  00,2A8
....................                write_eeprom(33,(int8)Temporal); 
0B2AC:  MOVFF  2AB,3DE
0B2B0:  MOVFF  2AA,3DD
0B2B4:  MOVFF  2A9,3DC
0B2B8:  MOVFF  2A8,3DB
0B2BC:  CALL   3BB4
0B2C0:  MOVFF  01,3C6
0B2C4:  CLRF   FAA
0B2C6:  MOVLW  21
0B2C8:  MOVWF  FA9
0B2CA:  MOVFF  3C6,FA8
0B2CE:  BCF    FA6.6
0B2D0:  BCF    FA6.7
0B2D2:  BSF    FA6.2
0B2D4:  MOVF   FF2,W
0B2D6:  MOVWF  00
0B2D8:  BCF    FF2.6
0B2DA:  BCF    FF2.7
0B2DC:  MOVLB  F
0B2DE:  MOVLW  55
0B2E0:  MOVWF  FA7
0B2E2:  MOVLW  AA
0B2E4:  MOVWF  FA7
0B2E6:  BSF    FA6.1
0B2E8:  BTFSC  FA6.1
0B2EA:  BRA    B2E8
0B2EC:  BCF    FA6.2
0B2EE:  MOVF   00,W
0B2F0:  IORWF  FF2,F
....................                delay_ms(10); 
0B2F2:  MOVLW  0A
0B2F4:  MOVLB  3
0B2F6:  MOVWF  xDB
0B2F8:  MOVLB  0
0B2FA:  CALL   179E
....................                write_eeprom(39,TTrampa); 
0B2FE:  CLRF   FAA
0B300:  MOVLW  27
0B302:  MOVWF  FA9
0B304:  MOVFF  2CD,FA8
0B308:  BCF    FA6.6
0B30A:  BCF    FA6.7
0B30C:  BSF    FA6.2
0B30E:  MOVF   FF2,W
0B310:  MOVWF  00
0B312:  BCF    FF2.6
0B314:  BCF    FF2.7
0B316:  MOVLB  F
0B318:  MOVLW  55
0B31A:  MOVWF  FA7
0B31C:  MOVLW  AA
0B31E:  MOVWF  FA7
0B320:  BSF    FA6.1
0B322:  BTFSC  FA6.1
0B324:  BRA    B322
0B326:  BCF    FA6.2
0B328:  MOVF   00,W
0B32A:  IORWF  FF2,F
....................                delay_ms(10); 
0B32C:  MOVLW  0A
0B32E:  MOVLB  3
0B330:  MOVWF  xDB
0B332:  MOVLB  0
0B334:  CALL   179E
....................                GuardaEEPROM=ON; 
0B338:  BSF    xA2.4
....................             } 
....................             printf("page MenuPrincipal"); 
0B33A:  MOVLW  54
0B33C:  MOVWF  FF6
0B33E:  MOVLW  17
0B340:  MOVWF  FF7
0B342:  MOVLW  00
0B344:  MOVWF  FF8
0B346:  CALL   348A
....................             SendDataDisplay(); 
0B34A:  CALL   34BC
....................             //BorraBuffer(); 
....................          } 
....................       } 
....................       printf("fecha.txt=\"Fecha:%02u/%02u/20%02u    Hora: %02u:%02u\"",Dia,Mes,Year,Hora,Minuto); 
0B34E:  MOVLW  68
0B350:  MOVWF  FF6
0B352:  MOVLW  17
0B354:  MOVWF  FF7
0B356:  MOVLW  00
0B358:  MOVWF  FF8
0B35A:  MOVLW  11
0B35C:  MOVLB  3
0B35E:  MOVWF  xCA
0B360:  MOVLB  0
0B362:  CALL   4368
0B366:  MOVFF  36E,3C8
0B36A:  MOVLW  01
0B36C:  MOVLB  3
0B36E:  MOVWF  xC9
0B370:  MOVLB  0
0B372:  CALL   43C6
0B376:  MOVLW  2F
0B378:  BTFSS  F9E.4
0B37A:  BRA    B378
0B37C:  MOVWF  FAD
0B37E:  MOVFF  36D,3C8
0B382:  MOVLW  01
0B384:  MOVLB  3
0B386:  MOVWF  xC9
0B388:  MOVLB  0
0B38A:  CALL   43C6
0B38E:  MOVLW  2F
0B390:  BTFSS  F9E.4
0B392:  BRA    B390
0B394:  MOVWF  FAD
0B396:  MOVLW  32
0B398:  BTFSS  F9E.4
0B39A:  BRA    B398
0B39C:  MOVWF  FAD
0B39E:  MOVLW  30
0B3A0:  BTFSS  F9E.4
0B3A2:  BRA    B3A0
0B3A4:  MOVWF  FAD
0B3A6:  MOVFF  36C,3C8
0B3AA:  MOVLW  01
0B3AC:  MOVLB  3
0B3AE:  MOVWF  xC9
0B3B0:  MOVLB  0
0B3B2:  CALL   43C6
0B3B6:  MOVLW  89
0B3B8:  MOVWF  FF6
0B3BA:  MOVLW  17
0B3BC:  MOVWF  FF7
0B3BE:  MOVLW  00
0B3C0:  MOVWF  FF8
0B3C2:  MOVLW  0A
0B3C4:  MOVLB  3
0B3C6:  MOVWF  xCA
0B3C8:  MOVLB  0
0B3CA:  CALL   4368
0B3CE:  MOVFF  36F,3C8
0B3D2:  MOVLW  01
0B3D4:  MOVLB  3
0B3D6:  MOVWF  xC9
0B3D8:  MOVLB  0
0B3DA:  CALL   43C6
0B3DE:  MOVLW  3A
0B3E0:  BTFSS  F9E.4
0B3E2:  BRA    B3E0
0B3E4:  MOVWF  FAD
0B3E6:  MOVFF  370,3C8
0B3EA:  MOVLW  01
0B3EC:  MOVLB  3
0B3EE:  MOVWF  xC9
0B3F0:  MOVLB  0
0B3F2:  CALL   43C6
0B3F6:  MOVLW  22
0B3F8:  BTFSS  F9E.4
0B3FA:  BRA    B3F8
0B3FC:  MOVWF  FAD
....................       SendDataDisplay();  
0B3FE:  CALL   34BC
0B402:  MOVLB  3
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................    } 
0B404:  GOTO   5948
.................... } 
0B408:  SLEEP 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1B1F   BROWNOUT WDT BORV20 NOPUT WDT8192
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 00B0   NOSTVREN NODEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
